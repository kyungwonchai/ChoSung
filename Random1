청대로 상단 20% 공간에 라인명별 발생 수 차트와 에러번호별 내림차순 막대 차트를 추가하고, 막대 클릭 시 필터링, 검색 기능도 포함합니다.

Flask 애플리케이션 코드 (app.py)
python
코드 복사
from flask import Flask, render_template, request, jsonify
import pymssql
import pandas as pd
import os

app = Flask(__name__)

# MSSQL 데이터베이스 연결 정보
DB_CONFIG = {
    "server": "YOUR_SERVER",
    "database": "YOUR_DATABASE",
    "username": "YOUR_USERNAME",
    "password": "YOUR_PASSWORD"
}

# MSSQL 연결 함수
def get_db_connection():
    return pymssql.connect(
        server=DB_CONFIG['server'],
        user=DB_CONFIG['username'],
        password=DB_CONFIG['password'],
        database=DB_CONFIG['database']
    )

# /PLCErr 페이지
@app.route('/PLCErr', methods=['GET', 'POST'])
def plcerr():
    conn = get_db_connection()
    query = """
        SELECT 
            linename AS '라인명',
            errN AS '에러번호',
            errValue AS '에러값',
            CONVERT(VARCHAR, Time1, 121) AS '시간'
        FROM View_PLCErrjoin
    """
    df = pd.read_sql(query, conn)
    conn.close()

    # 라인별 발생 수 데이터 준비
    line_counts = df['라인명'].value_counts().reset_index()
    line_counts.columns = ['라인명', '발생수']

    # 에러번호별 발생 수 데이터 준비
    error_counts = df['에러번호'].value_counts().reset_index()
    error_counts.columns = ['에러번호', '발생수']

    if request.method == 'POST':  # 엑셀 다운로드 요청
        file_path = os.path.join(os.getcwd(), 'plcerr_export.xlsx')
        df.to_excel(file_path, index=False, engine='openpyxl')
        return send_file(file_path, as_attachment=True)

    return render_template(
        'plcerr.html',
        data=df.to_dict(orient='records'),
        line_counts=line_counts.to_dict(orient='records'),
        error_counts=error_counts.to_dict(orient='records')
    )

# API: 필터링된 데이터 반환
@app.route('/PLCErr/filter', methods=['POST'])
def filter_plcerr():
    conn = get_db_connection()
    query = """
        SELECT 
            linename AS '라인명',
            errN AS '에러번호',
            errValue AS '에러값',
            CONVERT(VARCHAR, Time1, 121) AS '시간'
        FROM View_PLCErrjoin
    """
    df = pd.read_sql(query, conn)
    conn.close()

    # 요청으로부터 필터 값 받기
    filters = request.json
    if filters['line']:
        df = df[df['라인명'].str.contains(filters['line'], case=False, na=False)]
    if filters['error']:
        df = df[df['에러번호'].astype(str).str.contains(filters['error'], case=False, na=False)]
    if filters['value']:
        df = df[df['에러값'].astype(str).str.contains(filters['value'], case=False, na=False)]

    return jsonify(df.to_dict(orient='records'))

if __name__ == '__main__':
    app.run(debug=True)
HTML 템플릿 (templates/plcerr.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PLC Error Viewer</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
        body {
            background-color: #121212; /* 다크 배경 */
            color: #e0e0e0; /* 텍스트 색상 */
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #00bcd4;
        }
        .charts {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        canvas {
            background-color: #1e1e1e; /* 차트 배경 */
            border-radius: 10px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #1e1e1e;
        }
        thead {
            background-color: #004d66;
        }
        thead th, tbody td {
            padding: 8px;
            text-align: left;
        }
        tbody tr:nth-child(even) {
            background-color: #2a2a2a;
        }
        tbody tr:hover {
            background-color: #3d3d3d;
        }
        input {
            width: 100%;
            padding: 8px;
            margin: 10px 0;
            border: 1px solid #333;
            border-radius: 4px;
            background-color: #1e1e1e;
            color: #e0e0e0;
        }
        button {
            display: block;
            margin: 20px auto;
            padding: 10px 20px;
            background-color: #00bcd4;
            border: none;
            border-radius: 5px;
            color: #fff;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <h1>PLC Error Logs</h1>
    <div class="charts">
        <canvas id="lineChart" width="400" height="200"></canvas>
        <canvas id="errorChart" width="400" height="200"></canvas>
    </div>
    <input type="text" id="search" placeholder="라인명, 에러번호, 에러값으로 검색">
    <table>
        <thead>
            <tr>
                <th>라인명</th>
                <th>에러번호</th>
                <th>에러값</th>
                <th>시간</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            {% for row in data %}
                <tr>
                    <td>{{ row['라인명'] }}</td>
                    <td>{{ row['에러번호'] }}</td>
                    <td>{{ row['에러값'] }}</td>
                    <td>{{ row['시간'] }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <form method="POST" action="/PLCErr">
        <button type="submit">엑셀로 내보내기</button>
    </form>

    <script>
        const lineData = {{ line_counts | tojson }};
        const errorData = {{ error_counts | tojson }};
        const ctxLine = document.getElementById('lineChart').getContext('2d');
        const ctxError = document.getElementById('errorChart').getContext('2d');

        // 라인명별 발생수 차트
        new Chart(ctxLine, {
            type: 'bar',
            data: {
                labels: lineData.map(d => d['라인명']),
                datasets: [{
                    label: '라인별 발생수',
                    data: lineData.map(d => d['발생수']),
                    backgroundColor: '#007acc',
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                }
            }
        });

        // 에러번호별 발생수 차트
        new Chart(ctxError, {
            type: 'bar',
            data: {
                labels: errorData.map(d => d['에러번호']),
                datasets: [{
                    label: '에러번호별 발생수',
                    data: errorData.map(d => d['발생수']),
                    backgroundColor: '#ff5722',
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                onClick: (e, elements) => {
                    if (elements.length) {
                        const index = elements[0].index;
                        const errorNumber = errorData[index]['에러번호'];
                        filterTable('', errorNumber, '');
                    }
                }
            }
        });

        // 검색 기능
        $('#search').on('input', function () {
            const value = $(this).val();
            filterTable(value, value, value);
        });

        // 필터링 함수
        function filterTable(line, error, value) {
            $.ajax({
                url: '/PLCErr/filter',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ line, error, value }),
                success: function (data) {
                    const tableBody = $('#tableBody');
                    tableBody.empty();
                    data.forEach(row => {
                        tableBody.append(`
                            <tr>
                                <td>${row['라인명']}</td>
                                <td>${row['에러번호']}</td>
                                <td>${row['에러값']}</td>
                                <td>${row['시간']}</td>
                            </tr>
                        `);
                    });
                }
            });
        }
    </script>
</body>
</html>
주요 기능
상단 차트:

라인명별 발생 수 차트: 막대형 차트.
에러번호별 발생 수 차트: 내림차순 정렬.
차트 막대 클릭:

차트의 막대를 클릭하면 해당 필터로 테이블이 필터링됩니다.
검색 기능:

입력 즉시 라인명, 에러번호, 에러값으로 필터링됩니다.
엑셀 다운로드:
