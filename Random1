래는 요구하신 기능을 수행하는 WinForms 어플리케이션의 C# 코드입니다. 코드를 분석하여 설명드리겠습니다.

    운영 체제 확인 (Windows 10 또는 Windows 7)
    슬라이더를 사용하여 offtime.ini 파일에 시간을 저장하고 카운터
    카운터가 0이 되면 모니터를 끄는 기능 (로그아웃은 하지 않음)
    마우스 움직임 감지하여 모니터 켜기

1단계: 현재 운영체제 확인

csharp

using System;
using System.Windows.Forms;
using System.Runtime.InteropServices;

public class MainForm : Form
{
    [DllImport("user32.dll")]
    static extern int GetSystemMetrics(int smIndex);

    public MainForm()
    {
        string osVersion = Environment.OSVersion.Version.Major >= 6 && GetSystemMetrics(30) != 0 ? "Windows 10" : "Windows 7";
        // osVersion 변수에 현재 운영 체제 버전이 저장됩니다.
    }
}

2단계: 슬라이더로 시간 조절 및 offtime.ini에 저장

csharp

using System.IO;

public partial class MainForm : Form
{
    private TrackBar offTimeSlider;
    private int offTimeInSeconds = 10;

    public MainForm()
    {
        // 슬라이더 초기화
        offTimeSlider = new TrackBar();
        offTimeSlider.Minimum = 1;
        offTimeSlider.Maximum = 60;
        offTimeSlider.Value = offTimeInSeconds;
        offTimeSlider.ValueChanged += OffTimeSlider_ValueChanged;
        this.Controls.Add(offTimeSlider);
    }

    private void OffTimeSlider_ValueChanged(object sender, EventArgs e)
    {
        offTimeInSeconds = offTimeSlider.Value;
        File.WriteAllText("offtime.ini", offTimeInSeconds.ToString());
    }
}

3단계 및 4단계: 시간이 지나면 모니터 끄고 마우스 움직임 감지하면 켜기

코드가 길어집니다. 다음 메시지에서 계속 설명하겠습니다.
User
네 이어주세요
ChatGPT

물론이죠! 이제 모니터를 끄고 마우스 움직임을 감지하여 다시 켜는 부분을 구현하겠습니다.
3단계: 카운터 및 모니터 끄기

csharp

using System.Threading;
using System.Runtime.InteropServices;

public partial class MainForm : Form
{
    [DllImport("user32.dll")]
    private static extern int SendMessage(int hWnd, int hMsg, int wParam, int lParam);

    private Timer timer;

    public MainForm()
    {
        // 타이머 초기화 및 시작
        timer = new Timer();
        timer.Interval = 1000;
        timer.Tick += Timer_Tick;
        timer.Start();
    }

    private void Timer_Tick(object sender, EventArgs e)
    {
        offTimeInSeconds--;
        if (offTimeInSeconds == 0)
        {
            SendMessage((int)this.Handle, 0x0112, 0xF170, 2); // 모니터 끄기
            timer.Stop();
        }
    }
}

4단계: 마우스 움직임 감지하여 모니터 켜기

csharp

using System.ComponentModel;

public partial class MainForm : Form
{
    private MouseDetector mouseDetector;

    public MainForm()
    {
        // 마우스 움직임 감지
        mouseDetector = new MouseDetector();
        mouseDetector.MouseMoved += MouseDetector_MouseMoved;
        mouseDetector.Start();
    }

    private void MouseDetector_MouseMoved(object sender, MouseEventArgs e)
    {
        SendMessage((int)this.Handle, 0x0112, 0xF170, -1); // 모니터 켜기
        offTimeInSeconds = offTimeSlider.Value; // 초기화
        timer.Start();
    }
}

public class MouseDetector : Component
{
    // 여기에 마우스 이벤트 감지 코드를 구현하세요.
    // 마우스 움직임을 감지하면 MouseMoved 이벤트를 호출하면 됩니다.

    public event EventHandler MouseMoved;
}

마지막으로, 마우스 움직임을 감지하려면 글로벌 마우스 후킹 등을 사용해야 하므로 이 부분은 별도로 구현해야 합니다. 해당 부분이 복잡할 수 있으니 필요하시면 도움을 드리겠습니다!

참고로, 운영체제와 하드웨어 설정에 따라 모니터를 끄는 코드가 제대로 동작하지 않을 수도 있으니 테스트해보시고 문제가 있다면 