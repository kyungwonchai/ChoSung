다. 메일 발송에 실패했을 때 에러 코드를 받아오도록 코드를 수정해보겠습니다.

csharp

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";

        public static async Task<string> SendMail(string systemId, string userId, string accessToken, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestData = new
            {
                body = new
                {
                    subject,
                    contents,
                    sender = new
                    {
                        emailAddress = senderEmailAddress,
                        recipientType = "TO"
                    },
                    recipients = new[]
                    {
                        new
                        {
                            emailAddress = recipientEmailAddress,
                            recipientType = "TO"
                        }
                    }
                }
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(requestUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");

                return mailId;
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string errorCode = result.errorCode;
                string errorMessage = result.errorMessage;

                Console.WriteLine("메일 발송에 실패하였습니다.");
                Console.WriteLine($"에러 코드: {errorCode}");
                Console.WriteLine($"에러 메시지: {errorMessage}");

                return null;
            }
        }

        public static async Task<bool> CancelMail(string systemId, string userId, string accessToken, string mailId)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestUrl = $"{apiUrl}/mails/{mailId}/cancel?userId={userId}";

            var response = await client.PostAsync(requestUrl, null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("메일 발신 취소가 성공적으로 처리되었습니다.");
                return true;
            }
            else
            {
                Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                return false;
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string systemId = "System-ID";
            string userId = "K아이디";
            string accessToken = "여기에_접근_토큰_값_입력";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "sgsg@abc.com";
            string recipientEmailAddress

User
이어서
ChatGPT

알겠습니다. 코드를 이어서 작성해드리겠습니다.

csharp

            string recipientEmailAddress = "knoxposgg@abc.com";

            try
            {
                mailId = await MailSender.SendMail(systemId, userId, accessToken, subject, contents, senderEmailAddress, recipientEmailAddress);
            }
            catch (Exception ex)
            {
                Console.WriteLine("메일 발송 중 오류가 발생하였습니다.");
                Console.WriteLine($"오류 메시지: {ex.Message}");
            }
        }

        private async void btnCancelMail_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(mailId))
            {
                string systemId = "System-ID";
                string userId = "K아이디";
                string accessToken = "여기에_접근_토큰_값_입력";

                try
                {
                    bool cancellationResult = await MailSender.CancelMail(systemId, userId, accessToken, mailId);

                    if (cancellationResult)
                    {
                        Console.WriteLine("메일 발신이 취소되었습니다.");
                    }
                    else
                    {
                        Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("메일 발신 취소 중 오류가 발생하였습니다.");
                    Console.WriteLine($"오류 메시지: {ex.Message}");
                }
            }
        }
    }
}

위의 코드에서는 SendMail 메서드와 CancelMail 메서드 호출 시 오류가 발생할 수 있는 상황을 처리하기 위해 try-catch 구문을 추가했습니다. 오류가 발생한 경우, 콘솔에 오류 메시지를 출력합니다.

이제 메일 발송 및 발신 취소 시 오류가 발생하는 경우에도 오류 메시지를 받을 수 있습니다. 코드를 필요에 따라 수정하고, 실제 환경에 맞게 값을 입력하여 사용하시면 됩니다.