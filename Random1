죄송합니다. 명확하게 처리하지 못한 부분이 있었습니다. AddTargetPort를 사용하여 타겟 포트를 추가하고, 포트의 상태에 따라 글씨 색을 변경하는 부분을 포함하여 수정된 코드를 제공하겠습니다.

수정 사항
타겟 포트 추가: 사용자가 선택한 타겟 포트를 AddTargetPort를 사용하여 리스트에 추가합니다.
포트 상태에 따른 글씨 색 변경: 선택한 포트가 사용 가능하면 파란색, 불가능하면 빨간색으로 표시합니다.
수정된 ScannerPortComboBox_SelectionChanged 및 AddTargetPort 코드 (MainWindow.xaml.cs)
csharp
코드 복사
private void AddTargetPort(ComboBox targetPortComboBox, int portIndex)
{
    try
    {
        if (targetPortComboBox.SelectedItem != null)
        {
            string selectedPort = targetPortComboBox.SelectedItem.ToString();
            string baudRate = "9600"; // 기본값으로 9600을 사용, 필요 시 변경 가능
            string parity = "None";
            string dataBits = "8";
            string stopBits = "One";

            // 타겟 포트를 추가
            serialPortManager.AddTargetPort(selectedPort, int.Parse(baudRate), 
                                            (Parity)Enum.Parse(typeof(Parity), parity), 
                                            int.Parse(dataBits), 
                                            (StopBits)Enum.Parse(typeof(StopBits), stopBits));

            // 포트 상태에 따른 글씨 색 변경
            if (serialPortManager.IsPortOpen(selectedPort))
            {
                targetPortComboBox.Foreground = System.Windows.Media.Brushes.Blue;
                LogMessage($"타겟 포트 {selectedPort}가 정상적으로 열렸습니다.");
            }
            else
            {
                targetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                LogMessage($"타겟 포트 {selectedPort}를 열 수 없습니다.");
            }

            // 설정 저장
            settingsManager.SaveSetting($"TargetPort{portIndex}", selectedPort);
        }
    }
    catch (Exception ex)
    {
        LogMessage($"타겟 포트 설정 중 오류 발생: {ex.Message}");
    }
}

private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    var comboBox = sender as ComboBox;
    if (comboBox != null)
    {
        int portIndex = int.Parse(comboBox.Tag.ToString()); // 각 ComboBox에 설정된 태그를 사용하여 인덱스 구분
        AddTargetPort(comboBox, portIndex);
    }
}
SerialPortManager.cs 수정
SerialPortManager 클래스에 포트가 열려 있는지 확인하는 메서드를 추가합니다.

csharp
코드 복사
public bool IsPortOpen(string portName)
{
    try
    {
        foreach (var port in TargetPorts)
        {
            if (port.PortName == portName && port.IsOpen)
            {
                return true;
            }
        }
    }
    catch (Exception)
    {
        return false;
    }

    return false;
}
포트 상태에 따른 콤보박스 색상 변경 및 타겟 포트 추가
포트 상태 확인: IsPortOpen 메서드를 통해 해당 포트가 사용 가능한지 확인합니다.
포트 상태에 따른 색상 변경: 사용 가능한 경우 파란색, 사용 불가능한 경우 빨간색으로 글씨 색상을 설정합니다.
타겟 포트 추가: AddTargetPort 메서드를 통해 타겟 포트를 리스트에 추가합니다.
타겟 포트의 선택을 처리하는 ComboBox를 예제로:
xaml
코드 복사
<ComboBox x:Name="TargetPortComboBox1" SelectionChanged="TargetPortComboBox_SelectionChanged" Tag="1"/>
<ComboBox x:Name="TargetPortComboBox2" SelectionChanged="TargetPortComboBox_SelectionChanged" Tag="2"/>
<ComboBox x:Name="TargetPortComboBox3" SelectionChanged="TargetPortComboBox_SelectionChanged" Tag="3"/>
<ComboBox x:Name="TargetPortComboBox4" SelectionChanged="TargetPortComboBox_SelectionChanged" Tag="4"/>
<ComboBox x:Name="TargetPortComboBox5" SelectionChanged="TargetPortComboBox_SelectionChanged" Tag="5"/>
이제, 각 콤보박스에서 포트를 선택하면 해당 포트가 타겟 포트로 추가되고, 상태에 따라 글씨 색상이 변경되며, 포트 상태에 대한 로그가 기록됩니다.

추가적으로 문제가 발생하거나 다른 질문이 있으시면 언제든지 알려주세요