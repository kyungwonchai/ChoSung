import paramiko
import time
import os
import logging
import platform
import subprocess
from datetime import datetime

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================
HOSTS = ['192.168.1.101', '192.168.1.102',] # 500대 IP 주소 목록
SSH_USER = 'pi' # 접속 대상 계정
SSH_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa')
PM2_APP_NAME = 'main'
LOG_FILE = 'deployment_log.txt'

# --- systemd 서비스 파일 내용 정의 ---
PYTHON_EXEC_PATH = '/usr/bin/python3'
APP_WORKING_DIR = '/home/pi/my_project'
APP_SCRIPT_PATH = '/home/pi/my_project/main.py'
APP_ARGS = '--mode production --port 8080'
SERVICE_FILE_NAME = 'myapp.service'
SERVICE_FILE_CONTENT = f"""[Unit]
Description=My Python Application with Watchdog
After=network.target
[Service]
ExecStart={PYTHON_EXEC_PATH} {APP_SCRIPT_PATH} {APP_ARGS}
WorkingDirectory={APP_WORKING_DIR}
StandardOutput=inherit
StandardError=inherit
Restart=always
User={SSH_USER}
WatchdogSec=60
[Install]
WantedBy=multi-user.target
"""
# ===================================================================

def setup_logging():
    logger = logging.getLogger('DeploymentLogger')
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(logging.Formatter('%(message)s'))
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
    return logger

def is_host_reachable(hostname, logger):
    logger.info(f"[{hostname}] Ping 테스트 시작...")
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-w', '2', hostname]
    try:
        response = subprocess.run(command, capture_output=True, check=False)
        if response.returncode == 0:
            logger.info(f"[{hostname}] Ping 성공. 장비가 온라인 상태입니다.")
            return True
        else:
            logger.warning(f"[{hostname}] Ping 실패. 장비를 건너뜁니다.")
            return False
    except FileNotFoundError:
        logger.error("[오류] 'ping' 명령어를 찾을 수 없습니다.")
        return False

def deploy_to_host(hostname, logger):
    logger.info(f"[{hostname}] 워치독 배포 작업 시작...")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        # ==                  여기가 바로 핵심 수정 사항                  ==
        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        client.connect(
            hostname,
            username=SSH_USER,
            key_filename=SSH_KEY_FILE,
            timeout=10,
            # 구형 SSH 서버와 호환성을 위해 최신 알고리즘을 사용하지 않도록 설정
            disabled_algorithms=dict(pubkeys=['rsa-sha2-512', 'rsa-sha2-256'])
        )
        
        logger.info(f"[{hostname}] SSH 연결 성공.")
        
        # PM2 비활성화
        pm2_path = client.exec_command("which pm2")[1].read().decode().strip()
        if not pm2_path: pm2_path = 'pm2'
        client.exec_command(f"sudo {pm2_path} unstartup")
        client.exec_command(f"{pm2_path} stop {PM2_APP_NAME}")
        
        # 서비스 파일 생성
        client.exec_command(f"echo '{SERVICE_FILE_CONTENT}' | sudo tee /etc/systemd/system/{SERVICE_FILE_NAME}")
        
        # 서비스 활성화
        client.exec_command("sudo systemctl daemon-reload")
        client.exec_command(f"sudo systemctl enable {SERVICE_FILE_NAME}")
        client.exec_command(f"sudo systemctl restart {SERVICE_FILE_NAME}")
        
        logger.info(f"[{hostname}] 워치독 배포 성공.")
    except Exception as e:
        logger.error(f"[{hostname}] 워치독 배포 실패. 오류: {e}")
    finally:
        client.close()

if __name__ == '__main__':
    logger = setup_logging()
    logger.info("\n" + "="*20 + " 워치독 배포 작업 시작 " + "="*20)

    for host in HOSTS:
        if is_host_reachable(host, logger):
            deploy_to_host(host, logger)
            