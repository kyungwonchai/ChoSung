import socket
import time
import datetime
from win10toast import ToastNotifier # win10toast 라이브러리 임포트

# --- 설정 ---
TARGET_HOST = '127.0.0.1'
TARGET_PORT = 1433
CHECK_INTERVAL_SECONDS = 10
LOG_FILE_PATH = 'port_check_log.txt'

# 토스트 알림 객체 생성
toaster = ToastNotifier()

def check_port(host, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    try:
        result = sock.connect_ex((host, port))
        if result == 0:
            return True
        else:
            return False
    except socket.error as e:
        write_log(f"Error connecting to {host}:{port} - {e}")
        return False
    finally:
        sock.close()

def write_log(message):
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    print(log_entry)
    with open(LOG_FILE_PATH, 'a', encoding='utf-8') as f:
        f.write(log_entry + '\n')

def show_notification(title, message):
    """Windows 토스트 알림을 표시합니다."""
    toaster.show_toast(title, message, duration=5, icon_path=None, threaded=True)
    # duration: 알림 표시 시간(초), icon_path: 알림 아이콘 경로 (선택 사항)
    # threaded=True: 알림 표시가 메인 스크립트 실행을 막지 않도록 함

def main():
    write_log(f"Starting port checker for {TARGET_HOST}:{TARGET_PORT} every {CHECK_INTERVAL_SECONDS} seconds...")
    
    # 이전 포트 상태를 추적하여 변경 시에만 알림
    last_port_status = None 

    while True:
        current_port_status = check_port(TARGET_HOST, TARGET_PORT)
        
        if current_port_status:
            status_message = f"Port {TARGET_PORT} on {TARGET_HOST} is OPEN."
            if last_port_status != True: # 상태가 변경되었을 때만 알림
                show_notification("SQL Server Port Status", f"포트 {TARGET_PORT}가 열렸습니다!")
        else:
            status_message = f"Port {TARGET_PORT} on {TARGET_HOST} is CLOSED or unreachable."
            if last_port_status != False: # 상태가 변경되었을 때만 알림
                show_notification("SQL Server Port Status", f"포트 {TARGET_PORT}가 닫혔거나 연결할 수 없습니다!")
        
        write_log(status_message)
        last_port_status = current_port_status # 현재 상태를 이전 상태로 저장

        time.sleep(CHECK_INTERVAL_SECONDS)
