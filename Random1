WPF에서 체크박스의 상태에 따라 DataGrid의 특정 컬럼이 나타나거나 사라지게 하려면 다음과 같은 방식으로 구성할 수 있습니다.

목표
체크박스의 상태 (IsChecked)가 변경될 때마다 DataGrid의 컬럼 C123의 가시성을 제어.
초기 체크 상태에 따라 DataGrid 컬럼 상태도 동기화.
구현 방법
XAML: 체크박스와 데이터 바인딩.
ViewModel: 체크박스 상태를 관리하고 컬럼 가시성을 업데이트.
Code-behind (C#): 초기 상태에 따라 UI를 설정.
XAML 코드
MainWindow.xaml에서 다음 코드를 작성합니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="DataGrid Column Visibility" Height="450" Width="800">

    <Grid>
        <!-- 체크박스 -->
        <CheckBox Content="Show Column C123"
                  IsChecked="{Binding ForceEjectEnableValue, UpdateSourceTrigger=PropertyChanged}"
                  Command="{Binding CheckBoxCommandForceEject}"
                  CommandParameter="{Binding IsTextBoxReadOnly}"
                  VerticalAlignment="Top" HorizontalAlignment="Left"
                  Margin="10"/>

        <!-- DataGrid -->
        <DataGrid ItemsSource="{Binding DataGridItems}" AutoGenerateColumns="False"
                  Margin="10,40,10,10">
            <!-- 다른 컬럼들 -->
            <DataGridTextColumn Header="Column1" Binding="{Binding Column1}"/>
            <DataGridTextColumn Header="Column2" Binding="{Binding Column2}"/>

            <!-- 제어 대상 컬럼 C123 -->
            <DataGridTextColumn Header="C123"
                                Binding="{Binding ColumnC123}"
                                Visibility="{Binding IsC123Visible, Converter={StaticResource BooleanToVisibilityConverter}}"/>
        </DataGrid>
    </Grid>
</Window>
주요 사항
체크박스 바인딩: IsChecked가 ForceEjectEnableValue에 바인딩됨.
컬럼 가시성: Visibility 속성이 IsC123Visible 속성에 바인딩됨. BooleanToVisibilityConverter를 사용해 bool 값을 Visibility로 변환.
ViewModel 코드
MVVM 패턴을 기반으로 동작하도록 MainViewModel을 작성합니다:

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace WpfApp
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private bool _forceEjectEnableValue;
        private bool _isC123Visible;

        public event PropertyChangedEventHandler PropertyChanged;

        // 체크박스 상태 (바인딩)
        public bool ForceEjectEnableValue
        {
            get => _forceEjectEnableValue;
            set
            {
                if (_forceEjectEnableValue != value)
                {
                    _forceEjectEnableValue = value;
                    OnPropertyChanged(nameof(ForceEjectEnableValue));
                    IsC123Visible = _forceEjectEnableValue; // 컬럼 가시성 동기화
                }
            }
        }

        // 컬럼 가시성 (바인딩)
        public bool IsC123Visible
        {
            get => _isC123Visible;
            set
            {
                if (_isC123Visible != value)
                {
                    _isC123Visible = value;
                    OnPropertyChanged(nameof(IsC123Visible));
                }
            }
        }

        // DataGrid 데이터
        public ObservableCollection<DataGridItem> DataGridItems { get; set; }

        // Command
        public RelayCommand<object> CheckBoxCommandForceEject { get; set; }

        public MainViewModel()
        {
            // 초기 데이터 설정
            DataGridItems = new ObservableCollection<DataGridItem>
            {
                new DataGridItem { Column1 = "Item1", Column2 = "Value1", ColumnC123 = "C123-1" },
                new DataGridItem { Column1 = "Item2", Column2 = "Value2", ColumnC123 = "C123-2" },
            };

            // 초기 값 설정
            ForceEjectEnableValue = false; // 기본적으로 체크박스 해제 상태
            IsC123Visible = ForceEjectEnableValue;

            // Command 초기화
            CheckBoxCommandForceEject = new RelayCommand<object>((parameter) =>
            {
                // 필요한 추가 로직 구현 (예: 로그 저장 등)
            });
        }

        private void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // DataGrid 데이터 모델
    public class DataGridItem
    {
        public string Column1 { get; set; }
        public string Column2 { get; set; }
        public string ColumnC123 { get; set; }
    }

    // RelayCommand 클래스
    public class RelayCommand<T> : System.Windows.Input.ICommand
    {
        private readonly System.Action<T> _execute;
        private readonly System.Func<T, bool> _canExecute;

        public RelayCommand(System.Action<T> execute, System.Func<T, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute((T)parameter);
        }

        public void Execute(object parameter)
        {
            _execute((T)parameter);
        }

        public event System.EventHandler CanExecuteChanged;

        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, System.EventArgs.Empty);
        }
    }
}
주요 구현 설명
ForceEjectEnableValue 속성:

체크박스의 IsChecked 상태를 관리합니다.
값이 변경되면 IsC123Visible 속성을 업데이트하여 컬럼 가시성을 동기화합니다.
IsC123Visible 속성:

DataGrid 컬럼의 Visibility를 제어합니다.
RelayCommand:

체크박스 클릭 시 추가 동작(예: 로깅)을 처리할 수 있습니다.
초기화:

초기 ForceEjectEnableValue 값에 따라 IsC123Visible이 설정되어 DataGrid 컬럼 상태가 초기화됩니다.
Code-Behind (MainWindow.xaml.cs)
MainWindow에서 DataContext를 설정합니다:

csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel(); // ViewModel 연결
        }
    }
}
실행 결과
체크박스가 체크되면 DataGrid 컬럼 C123이 나타납니다.
체크박스를 해제하면 컬럼 C123이 사라집니다.