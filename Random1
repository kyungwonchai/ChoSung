**TreeListView**와 TreeViewControl 두 가지 트리 구조를 제공하고 있습니다. 이 둘은 사용 목적과 기능에서 약간의 차이가 있습니다.

TreeListView vs TreeViewControl
특징	TreeListView	TreeViewControl
목적	데이터 계층 구조 표시 (컬럼 기반)	단순 계층 구조 트리 표시
컬럼 지원	지원 (여러 컬럼 추가 가능)	지원하지 않음
데이터 바인딩	계층 구조 데이터를 KeyFieldName 및 ParentFieldName으로 설정	직접 데이터 계층 구조를 수동으로 정의
사용 예제	파일 탐색기, 계층형 데이터 (예: 조직도, 제품 카테고리 등)	단순 트리 구조의 데이터만 필요한 경우
DevExpress 네임스페이스	DevExpress.Xpf.Grid	DevExpress.Xpf.NavBar
결론
TreeListView: 컬럼이 필요한 경우 사용.
예: 라인 이름, 체크박스, 추가 데이터가 함께 표시되어야 하는 경우.
TreeViewControl: 단순 트리 구조만 필요한 경우 사용.
아래는 TreeListView를 기준으로 다시 작성한 코드입니다. 이 컨트롤은 계층 데이터를 KeyFieldName과 ParentFieldName으로 구성하며, 여러 컬럼과 체크박스를 지원합니다.

XAML 코드
xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 TreeListView -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <dxg:GridControl x:Name="TreeListControl" AutoGenerateColumns="None">
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="IsChecked" Header="선택">
                        <dxg:GridColumn.EditSettings>
                            <dxe:CheckEditSettings />
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LineName" Header="라인 이름" />
                </dxg:GridControl.Columns>
                <dxg:GridControl.View>
                    <dxg:TreeListView AutoExpandAllNodes="True"
                                      KeyFieldName="ID"
                                      ParentFieldName="ParentID"
                                      ShowCheckBoxSelectorColumn="True"
                                      CheckBoxSelectorField="IsChecked" />
                </dxg:GridControl.View>
            </dxg:GridControl>

            <!-- 날짜 검색 -->
            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dxe:DateEdit x:Name="StartDateEdit" EditValueChanged="OnStartDateChanged" DisplayFormat="g" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dxe:DateEdit x:Name="EndDateEdit" EditValueChanged="OnEndDateChanged" DisplayFormat="g" />
            </StackPanel>

            <!-- 조회 버튼 -->
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <Grid Grid.Column="1" Margin="10">
            <TextBlock Text="차트 영역" VerticalAlignment="Center" HorizontalAlignment="Center" />
        </Grid>
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<LineInfo> LineData { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            InitializeDates();
            LoadLineData();
        }

        private void InitializeDates()
        {
            // 기본 날짜는 오늘의 08:00으로 설정
            StartDate = DateTime.Now.Date.AddHours(8);
            EndDate = DateTime.Now.Date.AddHours(8);

            StartDateEdit.EditValue = StartDate;
            EndDateEdit.EditValue = EndDate;
        }

        private void LoadLineData()
        {
            // 예제 데이터 로드
            LineData = new ObservableCollection<LineInfo>
            {
                new LineInfo { ID = 1, ParentID = 0, LineName = "Group A", IsChecked = true },
                new LineInfo { ID = 2, ParentID = 1, LineName = "Line 1", IsChecked = true },
                new LineInfo { ID = 3, ParentID = 1, LineName = "Line 2", IsChecked = true },
                new LineInfo { ID = 4, ParentID = 0, LineName = "Group B", IsChecked = true },
                new LineInfo { ID = 5, ParentID = 4, LineName = "Line 3", IsChecked = true },
                new LineInfo { ID = 6, ParentID = 4, LineName = "Line 4", IsChecked = true }
            };

            TreeListControl.ItemsSource = LineData;
        }

        private void OnStartDateChanged(object sender, RoutedEventArgs e)
        {
            if (StartDateEdit.EditValue is DateTime selectedDate)
            {
                // 선택된 날짜를 08:00으로 설정
                StartDate = selectedDate.Date.AddHours(8);
                Console.WriteLine($"시작 날짜 변경: {StartDate}");
            }
        }

        private void OnEndDateChanged(object sender, RoutedEventArgs e)
        {
            if (EndDateEdit.EditValue is DateTime selectedDate)
            {
                // 선택된 날짜를 08:00으로 설정
                EndDate = selectedDate.Date.AddHours(8);
                Console.WriteLine($"종료 날짜 변경: {EndDate}");
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = LineData.Where(line => line.IsChecked).Select(line => line.LineName).ToList();

            if (!selectedLines.Any())
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            Console.WriteLine($"조회: 라인={string.Join(",", selectedLines)}, 날짜={StartDate} ~ {EndDate}");
        }
    }

    public class LineInfo
    {
        public int ID { get; set; }
        public int ParentID { get; set; } // 부모 ID
        public string LineName { get; set; }
        public bool IsChecked { get; set; }
    }
}
핵심 변경 사항
TreeListView 사용:

TreeListView는 계층 데이터에 적합하며, KeyFieldName과 ParentFieldName을 설정하여 트리 구조를 생성합니다.
모든 노드를 자동으로 확장하려면 AutoExpandAllNodes="True"를 설정합니다.
날짜와 시간 설정:

DateEdit 컨트롤을 사용해 날짜와 시간을 선택할 수 있습니다.
선택된 날짜는 항상 08:00으로 설정됩니다.
데이터 로드:

LoadLineData 메서드를 통해 트리 데이터를 로드하며, 부모-자식 관계를 유지합니다.
실행 결과
라인 목록: 트리 구조로 그룹과 라인을 표시하며 체크박스를 지원.
날짜 검색: 날짜와 시간을 선택할 수 있으며, 선택한 값은 08:00으로 설정.