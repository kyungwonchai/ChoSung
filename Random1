evExpress 22.2를 사용하여 달력을 포함한 커스터마이징된 메시지 박스를 만드는 예제를 제공하겠습니다. DevExpress의 CalendarControl을 사용하여 달력 자체를 표시하는 방법을 설명합니다.

1. DevExpress 설치 및 설정
먼저 DevExpress 22.2가 프로젝트에 설치되어 있어야 합니다. NuGet 패키지를 사용하여 DevExpress를 설치할 수 있습니다.

sh
코드 복사
Install-Package DevExpress.Win.DataLibrary -Version 22.2
2. 새로운 WPF 프로젝트 생성
Visual Studio에서 WPF App (.NET Core)를 선택하여 새로운 프로젝트를 생성합니다.

3. 사용자 정의 대화 상자 추가
프로젝트에 새 Window를 추가합니다. 이름을 CustomMessageBox.xaml로 지정합니다.

4. CustomMessageBox.xaml
xml
코드 복사
<Window x:Class="YourNamespace.CustomMessageBox"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="CustomMessageBox" Height="300" Width="400">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <TextBlock Text="날짜를 선택하세요:" Margin="10"/>
        <dxc:DateEdit x:Name="calendarControl" Grid.Row="1" Margin="10"/>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Grid.Row="2" Margin="10">
            <Button x:Name="addButton" Content="행 추가" Width="75" Margin="5" Click="AddButton_Click"/>
            <Button x:Name="cancelButton" Content="취소" Width="75" Margin="5" Click="CancelButton_Click"/>
        </StackPanel>
    </Grid>
</Window>
5. CustomMessageBox.xaml.cs
csharp
코드 복사
using System;
using System.Windows;

namespace YourNamespace
{
    public partial class CustomMessageBox : Window
    {
        public DateTime? SelectedDate { get; private set; }

        public CustomMessageBox()
        {
            InitializeComponent();
        }

        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            SelectedDate = calendarControl.DateTime;
            DialogResult = true;
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
        }
    }
}
6. MainWindow.xaml
MainWindow에서 사용자 정의 대화 상자를 호출하는 버튼을 추가합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <Button Content="커스터마이징 메시지 박스 열기" Click="OpenCustomMessageBox_Click" Width="200" Height="50" HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>
7. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void OpenCustomMessageBox_Click(object sender, RoutedEventArgs e)
        {
            CustomMessageBox customMessageBox = new CustomMessageBox();
            if (customMessageBox.ShowDialog() == true)
            {
                DateTime? selectedDate = customMessageBox.SelectedDate;
                if (selectedDate.HasValue)
                {
                    MessageBox.Show("선택된 날짜: " + selectedDate.Value.ToShortDateString());
                    // 여기서 행 추가 로직을 구현합니다.
                }
            }
            else
            {
                MessageBox.Show("작업이 취소되었습니다.");
            }
        }
    }
}
위의 예제에서는 DevExpress의 DateEdit 컨트롤을 사용하여 달력 기능을 구현하였습니다. 사용자는 달력에서 날짜를 선택할 수 있으며, "행 추가" 버튼을 클릭하면 선택된 날짜가 반환됩니다. "취소" 버튼을 클릭하면 대화 상자가 닫히며 아무런 동작도 수행하지 않습니다. MainWindow에서 커스터마이징된 메시지 박스를 호출하여 사용자의 선택에 따라 적절한 동작을 수행합니다.

이렇게 하면 DevExpress를 사용한 달력 기능을 포함한 커스터마이징된 메시지 박스를 성공적으로 구현할 수 있습니다.






