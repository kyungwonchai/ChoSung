네, 플라스크(Flask)를 사용하여 테이블을 생성하고, 자바스크립트(JavaScript)를 통해 클라이언트 측에서 내용에 따라 각 행의 높이가 자동으로 조절되도록 하는 예제 코드를 작성해 드리겠습니다.

여기서 핵심은

CSS: <td> 태그에 word-wrap: break-word; (또는 overflow-wrap: break-word;) 와 white-space: pre-wrap; 스타일을 적용하여 글자 수가 많을 때 자동으로 줄바꿈이 일어나고, 데이터에 포함된 개행 문자(엔터)도 반영되도록 합니다.
JavaScript: 각 행(<tr>)을 순회하면서 해당 행에 포함된 셀(<td>)들의 실제 내용 높이(scrollHeight)를 확인하고, 그중 가장 큰 높이 값을 해당 행의 높이로 설정합니다. vertical-align: top;을 셀에 적용하면 내용이 많은 셀과 적은 셀이 같은 행에 있을 때 보기 좋게 정렬됩니다.
프로젝트 구조:

flask_auto_row_height/
├── app.py
└── templates/
    └── index.html
1. app.py (Flask 애플리케이션)

Python

from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    # 테이블에 표시할 샘플 데이터
    data = [
        {
            "id": 1,
            "name": "홍길동",
            "description": "짧은 설명입니다."
        },
        {
            "id": 2,
            "name": "이순신",
            "description": "이것은 중간 길이의 설명입니다. 여러 줄에 걸쳐서 표시될 수 있습니다. 글자 수가 많아지면 자동으로 줄바꿈이 됩니다."
        },
        {
            "id": 3,
            "name": "세종대왕",
            "description": "아주 긴 설명이 필요한 항목입니다. 글자 수가 많으면 자동으로 줄바꿈되어 표시되어야 하며, 또한 직접 입력한\n엔터도\n이렇게 반영되어야 합니다.\n여러 줄에 걸쳐서 내용이 표시됩니다.\n마지막 줄입니다."
        },
        {
            "id": 4,
            "name": "강감찬",
            "description": "첫 줄입니다.\n두 번째 줄입니다.\n세 번째 줄입니다.\n\n다섯 번째 줄 (빈 줄 포함)."
        },
        {
            "id": 5,
            "name": "을지문덕",
            "description": "모든 셀은 같은 행에서 가장 내용이 많은 셀의 높이에 맞춰집니다."
        }
    ]
    return render_template('index.html', table_data=data)

if __name__ == '__main__':
    app.run(debug=True)
2. templates/index.html (HTML 템플릿 및 JavaScript)

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>자동 행 높이 조절 테이블</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse; /* 테두리 한 줄로 합치기 */
            table-layout: fixed; /* 테이블 레이아웃 고정 (성능 및 예측 가능성 향상) */
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
            vertical-align: top; /* 셀 내용 상단 정렬 */
            word-wrap: break-word; /* 긴 단어 줄바꿈 (구형 브라우저 호환) */
            overflow-wrap: break-word; /* 긴 단어 줄바꿈 (표준) */
        }
        th {
            background-color: #f2f2f2;
        }
        /* 설명 컬럼에만 white-space 적용하여 엔터키(개행문자) 반영 */
        td.description-cell {
            white-space: pre-wrap; /* 공백/줄바꿈 유지, 필요시 자동 줄바꿈 */
        }
    </style>
</head>
<body>

    <h1>플라스크 테이블 (자동 행 높이)</h1>

    <table id="myTable">
        <thead>
            <tr>
                <th style="width: 5%;">ID</th>
                <th style="width: 20%;">이름</th>
                <th style="width: 75%;">설명</th>
            </tr>
        </thead>
        <tbody>
            {% for row in table_data %}
            <tr>
                <td>{{ row.id }}</td>
                <td>{{ row.name }}</td>
                <td class="description-cell">{{ row.description }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        function adjustRowHeights() {
            const table = document.getElementById('myTable');
            if (!table) return;

            const tbody = table.getElementsByTagName('tbody')[0];
            if (!tbody) return;

            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                // 먼저 행 높이를 'auto'로 설정하여 브라우저가 내용을 기반으로 높이를 계산하도록 함
                row.style.height = 'auto';

                let maxHeight = 0;
                const cells = row.getElementsByTagName('td');

                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    // 셀 높이도 'auto'로 설정하여 scrollHeight가 정확히 계산되도록 함
                    cell.style.height = 'auto';
                    // scrollHeight는 패딩과 보더를 포함한 실제 콘텐츠 높이
                    if (cell.scrollHeight > maxHeight) {
                        maxHeight = cell.scrollHeight;
                    }
                }
                
                // 가장 큰 scrollHeight를 현재 행의 높이로 설정
                // (실제로는 브라우저가 CSS의 white-space: pre-wrap 와 overflow-wrap 때문에 대부분 자동으로 처리하지만,
                //  JS로 명시적으로 제어하고 싶을 때 이 방식을 사용합니다.
                //  특히, 모든 셀이 동일한 높이를 가지도록 강제할 때 유용합니다.)
                if (maxHeight > 0) {
                    // row.style.height = maxHeight + 'px'; // 행 전체 높이 설정
                    // 또는 각 셀의 높이를 개별적으로 설정할 수도 있습니다.
                    // 이렇게 하면 모든 셀이 같은 높이를 갖게 되어 배경색 등이 일정하게 보입니다.
                    for (let j = 0; j < cells.length; j++) {
                         cells[j].style.height = maxHeight + 'px';
                    }
                }
            }
        }

        // 페이지 로드 완료 시 함수 실행
        window.addEventListener('load', adjustRowHeights);

        // 창 크기 변경 시에도 높이 재조정 (선택 사항)
        // 너무 자주 실행되는 것을 방지하기 위해 디바운싱(debouncing)을 적용하는 것이 좋습니다.
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(adjustRowHeights, 150); // 150ms 후에 실행
        });
    </script>

</body>
</html>
실행 방법:

flask_auto_row_height 폴더를 만들고 그 안에 app.py 파일과 templates 폴더를 생성합니다.
templates 폴더 안에 index.html 파일을 저장합니다.
터미널(커맨드 프롬프트)을 열고 flask_auto_row_height 폴더로 이동합니다.
python app.py 또는 flask run 명령어를 실행합니다.
웹 브라우저에서 http://127.0.0.1:5000/ 주소로 접속합니다.
설명:

CSS의 역할:

vertical-align: top;: 셀 안의 내용이 위쪽에 정렬되도록 합니다.
word-wrap: break-word; / overflow-wrap: break-word;: 한 단어가 너무 길어서 셀 너비를 초과할 경우 강제로 줄바꿈을 합니다.
white-space: pre-wrap;: 데이터에 포함된 공백과 개행 문자(\n)를 HTML 상에 그대로 유지하면서, 내용이 셀 너비를 넘어갈 경우 자동으로 줄바꿈도 해줍니다. 이것이 "엔터"에 따른 행 높이 조절의 핵심입니다.
table-layout: fixed;: 테이블의 너비를 고정하고 열 너비를 <th>에 지정된 대로 분배합니다. 이는 테이블 렌더링 성능을 향상시킬 수 있습니다.
JavaScript의 역할 (adjustRowHeights 함수):

테이블의 <tbody> 안에 있는 모든 행(<tr>)을 가져옵니다.
각 행에 대해:
행과 셀의 높이를 일시적으로 auto로 설정하여 내용에 따른 자연스러운 높이를 갖도록 합니다.
행 안의 모든 셀(<td>)을 순회하며 각 셀의 scrollHeight (패딩을 포함한 실제 콘텐츠 높이)를 가져옵니다.
같은 행에 있는 셀들 중 가장 큰 scrollHeight 값을 찾습니다.
찾아낸 가장 큰 scrollHeight 값을 해당 행의 모든 셀의 style.height로 설정합니다. 이렇게 하면 해당 행의 모든 셀이 동일한 높이를 갖게 되어 시각적으로 깔끔해집니다. (주석 처리된 row.style.height = maxHeight + 'px';는 행 전체의 높이를 설정하는 방식입니다.)