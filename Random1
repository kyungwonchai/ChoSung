DevExpress 22.2 WinForms RibbonControl에서 기본 버튼 방식과 텍스트 기반의 메뉴 트리를 동적으로 전환할 수 있도록 구성하려면 다음과 같은 구조를 사용하면 됩니다.

1. 개요
기본적으로 RibbonControl을 사용하여 기존 버튼형 메뉴를 유지
토글 버튼을 추가하여 텍스트 기반의 트리 메뉴와 버튼 기반의 Ribbon 메뉴를 전환
트리 메뉴는 TreeList 또는 AccordionControl을 사용하여 구현
2. 구현 방식
A. 리본 메뉴 (기본)
기존 RibbonControl을 유지
PageGroup 이름을 굵게 처리하고, 각 ButtonItem이 기존처럼 동작하도록 유지
B. 텍스트 메뉴 (트리 구조)
TreeList 또는 AccordionControl을 사용하여 메뉴 트리 구성
그룹명(RibbonPageGroup)을 Bold로 설정하고, 하위 항목(ButtonItem)은 일반 텍스트로 표시
RibbonPage → RibbonPageGroup → BarButtonItem 구조를 TreeList 또는 AccordionControl의 계층으로 변환
C. 토글 전환 기능
CheckButton 또는 BarToggleSwitchItem을 사용하여 동적 전환 구현
토글 시 RibbonControl을 숨기고 TreeList 또는 AccordionControl을 보이게 변경
3. 코드 구현
csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using DevExpress.XtraEditors;
using System;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    private TreeList treeList;
    private BarToggleSwitchItem toggleMenuView;
    
    public MainForm()
    {
        InitializeComponent();
        InitializeRibbon();
        InitializeTreeList();
    }

    private void InitializeRibbon()
    {
        // 리본 페이지 및 그룹 추가
        RibbonPage page1 = new RibbonPage("메인 페이지");
        RibbonPageGroup group1 = new RibbonPageGroup("그룹 1");
        BarButtonItem item1 = new BarButtonItem(ribbonControl1.Manager, "버튼 1");
        BarButtonItem item2 = new BarButtonItem(ribbonControl1.Manager, "버튼 2");

        // 그룹에 아이템 추가
        group1.ItemLinks.Add(item1);
        group1.ItemLinks.Add(item2);
        page1.Groups.Add(group1);
        ribbonControl1.Pages.Add(page1);

        // 토글 스위치 추가
        toggleMenuView = new BarToggleSwitchItem();
        toggleMenuView.Caption = "텍스트 메뉴 보기";
        toggleMenuView.CheckedChanged += ToggleMenuView_CheckedChanged;

        ribbonControl1.Items.Add(toggleMenuView);
        ribbonControl1.Toolbar.ItemLinks.Add(toggleMenuView);
    }

    private void InitializeTreeList()
    {
        treeList = new TreeList
        {
            Dock = DockStyle.Left,
            Width = 250,
            Visible = false // 기본적으로 숨김
        };
        Controls.Add(treeList);

        treeList.Columns.AddVisible("Menu", "메뉴");
        LoadTreeList();
    }

    private void LoadTreeList()
    {
        treeList.BeginUpdate();
        treeList.Nodes.Clear();

        foreach (RibbonPage page in ribbonControl1.Pages)
        {
            TreeListNode pageNode = treeList.Nodes.Add(new object[] { page.Text });
            pageNode.Font = new System.Drawing.Font("Arial", 10, System.Drawing.FontStyle.Bold); // 굵게

            foreach (RibbonPageGroup group in page.Groups)
            {
                TreeListNode groupNode = pageNode.Nodes.Add(new object[] { group.Text });
                groupNode.Font = new System.Drawing.Font("Arial", 9, System.Drawing.FontStyle.Bold); // 굵게

                foreach (BarItemLink itemLink in group.ItemLinks)
                {
                    if (itemLink.Item is BarButtonItem buttonItem)
                    {
                        TreeListNode itemNode = groupNode.Nodes.Add(new object[] { buttonItem.Caption });
                        itemNode.Tag = buttonItem; // 클릭 시 이벤트 연결 가능
                    }
                }
            }
        }

        treeList.EndUpdate();
    }

    private void ToggleMenuView_CheckedChanged(object sender, ItemClickEventArgs e)
    {
        bool isTextMenu = toggleMenuView.Checked;
        ribbonControl1.Visible = !isTextMenu;
        treeList.Visible = isTextMenu;
    }
}
4. 설명
RibbonControl 초기화
기존 RibbonControl에 페이지, 그룹, 버튼을 추가
BarToggleSwitchItem을 추가하여 토글 기능 제공
TreeList 기반 메뉴 생성
RibbonControl에 존재하는 항목들을 TreeList로 변환하여 계층 구조 유지
RibbonPage는 Bold 적용, 그룹도 Bold 적용, 아이템은 일반 텍스트
토글 기능 추가
BarToggleSwitchItem.CheckedChanged 이벤트를 활용하여 RibbonControl과 TreeList의 표시를 전환
사용자가 직접 선택할 수 있도록 구성
5. 실행 결과
기본적으로 RibbonControl이 표시됨
사용자가 "텍스트 메뉴 보기" 토글을 활성화하면, Ribbon이 사라지고 트리 형태의 메뉴가 나타남