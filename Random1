저의 클라이언트에서 특정 IP와 포트에 접속 가능 여부를 확인하려면, 서버가 아니라 클라이언트 측에서 JavaScript를 사용하여 해당 포트에 접근 가능 여부를 검사해야 합니다. 다만, 브라우저 환경에서는 JavaScript가 직접적으로 포트 상태를 확인할 수 없으므로, WebSocket이나 AJAX를 활용해 간접적으로 확인해야 합니다.

해결 방법: WebSocket을 이용한 클라이언트 측 확인
1. Flask 코드 수정
Flask 서버는 클라이언트가 특정 IP/포트에 접속 가능 여부를 확인하도록 JavaScript 코드와 테스트 결과를 반환해야 합니다.

python
코드 복사
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/ipchk')
def ip_check_page():
    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
2. templates/client_check.html 작성
client_check.html 파일에서 WebSocket을 이용해 클라이언트가 포트 접근 가능 여부를 확인합니다:

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Port Check</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Client Port Accessibility Checker</h1>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="results"></tbody>
    </table>

    <script>
        const ipPorts = [
            { ip: "10.10.100.11", ports: [80, 443, 8080] },
            { ip: "192.168.1.1", ports: [22, 3306, 3389] }
        ];

        const resultsTable = document.getElementById("results");

        function checkPort(ip, port) {
            return new Promise(resolve => {
                const ws = new WebSocket(`ws://${ip}:${port}`);
                ws.onopen = () => {
                    ws.close();
                    resolve({ ip, port, status: "Open" });
                };
                ws.onerror = () => {
                    resolve({ ip, port, status: "Closed" });
                };
            });
        }

        async function runCheck() {
            for (const entry of ipPorts) {
                for (const port of entry.ports) {
                    const result = await checkPort(entry.ip, port);
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${result.ip}</td>
                        <td>${result.port}</td>
                        <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                            ${result.status}
                        </td>
                    `;
                    resultsTable.appendChild(row);
                }
            }
        }

        // 실행
        runCheck();
    </script>
</body>
</html>
주요 동작 방식
JavaScript로 WebSocket 시도:

클라이언트 브라우저에서 ws://<IP>:<PORT>로 WebSocket 연결을 시도합니다.
연결이 성공하면 해당 포트는 열려있고, 실패하면 닫혀있습니다.
HTML 테이블에 결과 표시:

결과는 IP, Port, Status (Open/Closed) 형식으로 표시됩니다.
포트 상태에 따라 색상(초록색: Open, 빨간색: Closed)으로 강조합니다.
주의 사항
WebSocket 지원 포트만 확인 가능:

WebSocket은 특정 포트에서만 동작합니다. (일반적으로 80, 443, 8080 등)
방화벽 상태를 정확히 확인하려면 별도의 백엔드 서비스가 필요할 수 있습니다.
브라우저 제한:

브라우저 보안 정책상 일부 포트(예: 25번 SMTP 포트 등)는 차단됩니다.
실행 방법
Flask 서버 실행:

bash
코드 복사
python app.py
브라우저에서 /ipchk에 접속:

arduino
코드 복사
http://<Flask_서버_IP>:5000/ipchk
결과:

IP Address	Port	Status
10.10.100.11	80	Open
10.10.100.11	443	Closed