안녕하세요! 우분투에 도커(Docker)를 설치하시다가 apt update 과정에서 GPG 인증 오류가 발생하는 문제는 정말 답답한 상황이죠. 이 오류는 대부분 apt가 도커 저장소의 신뢰성을 확인할 수 없을 때 발생합니다. 즉, "이 패키지가 정말 도커에서 온 것이 맞나?"를 증명하지 못하는 상태입니다.

원인과 해결 방법을 아주 상세하게, 단계별로 설명해 드릴 테니 차근차근 따라 해 보세요. 이 방법은 현재 도커 공식 문서에서 권장하는 가장 최신이고 안정적인 방식입니다.

🤔 오류의 핵심 원인: GPG 키 문제
apt는 패키지를 다운로드할 때, 해당 패키지가 중간에 변조되지 않았고 공식 배포자가 서명한 원본임을 GPG(GNU Privacy Guard) 키로 확인합니다. 오류가 발생했다는 것은 다음 중 하나의 상황일 가능성이 높습니다.

GPG 키가 시스템에 제대로 등록되지 않은 경우 (가장 흔한 원인)

GPG 키가 오래된 방식(deprecated)으로 등록된 경우

네트워크 방화벽이 GPG 키 서버(download.docker.com)로의 접근을 막는 경우

이전에 도커를 설치했다가 남은 설정 파일이 꼬인 경우

아래 해결 방법은 이 모든 가능성을 염두에 두고, 가장 깨끗하고 확실하게 설치하는 과정을 안내합니다.

🛠️ 단계별 해결 방법 (가장 확실한 공식 절차)
기존에 잘못된 설정이 남아있을 수 있으니, 완전히 깨끗한 상태에서 새로 설치하는 것을 추천합니다.

1단계: 기존 도커 관련 패키지 모두 삭제하기
먼저 시스템에 남아있을 수 있는 오래된 버전이나 비공식 도커 패키지를 모두 깨끗하게 지웁니다. 터미널에 아래 명령어를 복사해서 붙여넣으세요.

Bash

sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
설명: remove는 패키지를 지우고, purge는 설정 파일까지 모두 지웁니다. 남아있는 데이터 디렉터리도 rm으로 삭제하여 완벽하게 초기화합니다.

2단계: apt 저장소 설정 준비하기
apt가 HTTPS를 통해 저장소를 사용할 수 있도록 필요한 패키지들을 설치합니다.

Bash

sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg
ca-certificates: SSL/TLS 인증서 관련 작업을 위해 필요합니다.

curl: URL을 통해 파일을 다운로드하는 도구입니다.

gnupg: GPG 키를 관리하는 도구입니다.

3단계: 도커 공식 GPG 키 추가하기 (가장 중요한 부분!)
이제 여기서부터가 인증 오류를 해결하는 핵심입니다. 예전 방식 대신, apt의 키를 저장하는 전용 공간에 도커의 공식 GPG 키를 추가합니다.

키링(keyrings)을 저장할 폴더 생성:

Bash

sudo install -m 0755 -d /etc/apt/keyrings
도커 공식 GPG 키 다운로드 및 저장:

Bash

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
설명: curl로 도커의 GPG 키를 다운로드한 후, gpg --dearmor 명령어로 apt가 읽을 수 있는 바이너리 형태로 변환하여 /etc/apt/keyrings/docker.gpg 파일로 저장합니다. 이 방식이 현재 권장되는 가장 안전한 방법입니다.

다운로드된 키 파일 권한 설정:

Bash

sudo chmod a+r /etc/apt/keyrings/docker.gpg
설명: apt가 이 키 파일을 읽을 수 있도록 모든 사용자에게 읽기(r) 권한을 부여합니다.

4단계: apt 저장소 목록에 도커 추가하기
이제 apt에게 "앞으로 도커 패키지는 이 주소에서, 이 GPG 키로 인증해서 다운로드해"라고 알려줄 차례입니다.

Bash

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
명령어 해부 🔍:

[arch=$(dpkg --print-architecture)]: 현재 시스템의 아키텍처(예: amd64, arm64)를 자동으로 감지하여 설정합니다.

signed-by=/etc/apt/keyrings/docker.gpg]: 이 부분이 핵심입니다! 이 저장소는 방금 3단계에서 추가한 GPG 키 파일로 서명되었음을 apt에 명시적으로 알려줍니다. 이로써 인증 오류가 근본적으로 해결됩니다.

$(. /etc/os-release && echo "$VERSION_CODENAME"): 현재 우분투 버전의 코드명(예: jammy, focal)을 자동으로 찾아 넣어줍니다.

sudo tee ...: 위에서 생성된 저장소 주소 문자열을 root 권한으로 /etc/apt/sources.list.d/docker.list 파일에 기록합니다.

5단계: 도커 엔진 설치하기
이제 모든 준비가 끝났습니다. 다시 apt update를 실행하여 패키지 목록을 갱신하고 도커를 설치합니다.

패키지 목록 갱신:

Bash

sudo apt-get update
이 단계에서 이전에 발생했던 인증 오류가 더 이상 나타나지 않아야 합니다. 만약 여기서 또 오류가 난다면 아래 "추가 확인 사항"을 참고해 주세요.

최신 버전 도커 엔진 설치:

Bash

sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
설명: 도커 엔진(docker-ce), 커맨드 라인 도구(docker-ce-cli), 컨테이너 런타임(containerd.io) 및 추가 플러그인(buildx, compose)을 모두 설치하는 가장 일반적인 명령어입니다.

6단계: 설치 확인
마지막으로, 도커가 잘 설치되었는지 테스트용 컨테이너를 실행해 봅니다.

Bash

sudo docker run hello-world
"Hello from Docker!" 라는 메시지가 포함된 출력이 보이면 성공적으로 설치된 것입니다.

❓ 그래도 문제가 해결되지 않는다면? (추가 확인 사항)
위의 방법으로도 해결되지 않는다면, 아래의 특수한 경우일 수 있습니다.

네트워크/방화벽 문제: 회사나 기관의 내부망에서는 방화벽이 download.docker.com에 대한 접근을 막을 수 있습니다. 아래 명령어로 접속이 가능한지 확인해 보세요.

Bash

curl -fsSL https://download.docker.com/linux/ubuntu/gpg
만약 여기서 응답이 없거나 타임아웃이 발생하면 네트워크 관리자에게 문의하여 해당 주소에 대한 접근 허용을 요청해야 합니다. 프록시(Proxy) 서버를 사용해야 하는 환경일 수도 있습니다.

OS 버전 문제: 너무 오래된 버전의 우분투를 사용하고 있을 경우, 도커가 공식적으로 지원하지 않을 수 있습니다. lsb_release -a 명령어로 현재 우분투 버전을 확인해 보세요.