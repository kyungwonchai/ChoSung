 문과 DATEPART 함수를 활용하여 다음과 같이 쿼리를 작성할 수 있습니다:

sql
코드 복사
WITH view1 AS (
    SELECT 
        Line,
        DATEADD(MINUTE, -10, datev) AS datev1,
        pickupcnt
    FROM table_lossdata
)
SELECT 
    Line,
    pickupcnt,
    datev1,
    CONVERT(VARCHAR(13), datev1, 120) AS 시간,
    CASE
        WHEN (DATEPART(HOUR, datev1) = 21 AND DATEPART(MINUTE, datev1) BETWEEN 0 AND 20)
          OR (DATEPART(HOUR, datev1) = 20 AND DATEPART(MINUTE, datev1) >= 30) THEN '21'
        WHEN (DATEPART(HOUR, datev1) = 22 AND DATEPART(MINUTE, datev1) BETWEEN 30 AND 59)
          OR (DATEPART(HOUR, datev1) = 23 AND DATEPART(MINUTE, datev1) <= 20) THEN '22'
        WHEN (DATEPART(HOUR, datev1) = 23 AND DATEPART(MINUTE, datev1) BETWEEN 30 AND 59)
          OR (DATEPART(HOUR, datev1) = 0 AND DATEPART(MINUTE, datev1) <= 20) THEN '23'
        WHEN (DATEPART(HOUR, datev1) = 0 AND DATEPART(MINUTE, datev1) BETWEEN 30 AND 59)
          OR (DATEPART(HOUR, datev1) = 1 AND DATEPART(MINUTE, datev1) <= 20) THEN '00'
        WHEN (DATEPART(HOUR, datev1) = 5 AND DATEPART(MINUTE, datev1) BETWEEN 30 AND 59)
          OR (DATEPART(HOUR, datev1) = 6 AND DATEPART(MINUTE, datev1) <= 50) THEN '05'
        ELSE RIGHT('0' + CONVERT(VARCHAR, DATEPART(HOUR, datev1)), 2)
    END AS 분류시간
FROM view1
ORDER BY datev1;
쿼리 설명:

view1 CTE(Common Table Expression):

table_lossdata 테이블에서 datev 컬럼의 값에 10분을 빼서 datev1 컬럼을 생성합니다.
Line과 pickupcnt 컬럼을 선택합니다.
CASE 문을 통한 시간대 분류:

DATEPART 함수를 사용하여 datev1의 시간(HOUR)과 분(MINUTE)을 추출합니다.
각 시간대 조건에 따라 분류시간을 지정합니다:
21시: 21:00 ~ 21:20 및 20:30 ~ 20:59
22시: 22:30 ~ 22:59 및 23:00 ~ 23:20
23시: 23:30 ~ 23:59 및 00:00 ~ 00:20
00시: 00:30 ~ 00:59 및 01:00 ~ 01:20
05시: 05:30 ~ 05:59 및 06:00 ~ 06:50
위 조건에 해당하지 않는 경우, 기본적으로 해당 시간의 HOUR 값을 반환합니다.
결과 정렬:

datev1 컬럼을 기준으로 결과를 오름차순 정렬합니다.
이러한 방식으로 각 시간대를 지정된 시간으로 정확하게 분류할 수 있습니다.

