COM 포트 설정을 저장하고 재사용하는 방법을 추가하고, 설정이 되어 있지 않을 경우 오류를 방지하는 로직을 적용하는 예제를 제공하겠습니다. 설정을 저장하기 위해서는 일반적으로 설정 파일이나 레지스트리 등을 사용할 수 있습니다. 여기서는 App.config 또는 로컬 파일에 JSON 형식으로 저장하여 설정을 관리하는 방법을 설명하겠습니다.

해결 방안:
COM 포트 설정 저장: 설정한 포트와 BaudRate를 파일이나 설정 파일에 저장해두고, 프로그램 시작 시 이를 불러옵니다.
COM 포트 설정 여부 확인: 프로그램 시작 시 포트 설정이 되어 있지 않으면 설정 창을 띄우고, 설정이 잘못되었을 때 이를 사용자에게 알려줍니다.
설정 저장 방식: JSON 파일을 사용하여 COM 포트 정보를 저장하고 로드하는 방법을 사용하겠습니다.
1. JSON 파일을 통한 설정 저장 및 불러오기
SettingsManager.cs (설정 저장 및 로드)
csharp
코드 복사
using System;
using System.IO;
using Newtonsoft.Json;

public class Settings
{
    public string PortName { get; set; }
    public int BaudRate { get; set; }
}

public static class SettingsManager
{
    private static string _settingsFilePath = "comport_settings.json";

    // 설정을 저장하는 함수
    public static void SaveSettings(Settings settings)
    {
        try
        {
            string json = JsonConvert.SerializeObject(settings, Formatting.Indented);
            File.WriteAllText(_settingsFilePath, json);
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 저장 실패: {ex.Message}");
        }
    }

    // 설정을 불러오는 함수
    public static Settings LoadSettings()
    {
        try
        {
            if (File.Exists(_settingsFilePath))
            {
                string json = File.ReadAllText(_settingsFilePath);
                return JsonConvert.DeserializeObject<Settings>(json);
            }
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 불러오기 실패: {ex.Message}");
        }

        // 설정 파일이 없거나 오류가 있을 경우 기본값 반환
        return null;
    }
}
2. MainViewModel.cs (설정 로드 및 설정되지 않았을 때 처리)
csharp
코드 복사
public class MainViewModel : ViewModelBase
{
    private ComPortMergeOI _comPort;
    private bool _isComPortConfigured = false;

    public ObservableCollection<CommandModel> UnprocessedCommands { get; set; }
    public ICommand OpenConfigCommand { get; set; }

    public MainViewModel()
    {
        UnprocessedCommands = new ObservableCollection<CommandModel>();
        OpenConfigCommand = new RelayCommand(OpenConfigWindow);

        // 프로그램 시작 시 설정을 불러옴
        LoadComPortSettings();
    }

    // COM 포트 설정을 불러오는 함수
    private void LoadComPortSettings()
    {
        var settings = SettingsManager.LoadSettings();

        if (settings != null)
        {
            try
            {
                _comPort = new ComPortMergeOI(settings.PortName, settings.BaudRate);
                _comPort.OpenPort();
                _isComPortConfigured = true;
                msgvs.Instance.LogT5($"COM 포트 {settings.PortName} 열림");
            }
            catch (Exception ex)
            {
                msgvs.Instance.LogT5($"포트 열기 오류: {ex.Message}");
                OpenConfigWindow(); // 설정된 포트가 잘못되었을 경우 설정창을 띄움
            }
        }
        else
        {
            msgvs.Instance.LogT5("COM 포트 설정이 없습니다.");
            OpenConfigWindow(); // 설정이 없을 경우 설정창을 띄움
        }
    }

    // 설정창을 열고 설정을 저장하는 함수
    private void OpenConfigWindow()
    {
        var configWindow = new ComPortConfigWindow(); // 설정창 인스턴스
        if (configWindow.ShowDialog() == true)
        {
            string portName = configWindow.SelectedPortName;
            int baudRate = configWindow.SelectedBaudRate;

            _comPort = new ComPortMergeOI(portName, baudRate);
            _comPort.OpenPort();
            _isComPortConfigured = true;

            // 설정 저장
            var settings = new Settings { PortName = portName, BaudRate = baudRate };
            SettingsManager.SaveSettings(settings);

            msgvs.Instance.LogT5($"COM 포트 {portName} 설정 및 저장 완료");
        }
    }
}
3. ComPortConfigWindow.xaml.cs (설정 창 로직에서 설정 완료 시 저장)
csharp
코드 복사
private void OnSetButtonClick(object sender, RoutedEventArgs e)
{
    if (PortComboBox.SelectedItem != null && BaudRateComboBox.SelectedItem != null)
    {
        SelectedPortName = PortComboBox.SelectedItem.ToString();
        SelectedBaudRate = (int)BaudRateComboBox.SelectedItem;

        this.DialogResult = true;
        this.Close();
    }
    else
    {
        MessageBox.Show("포트와 BaudRate를 선택해주세요.");
    }
}
설명:
설정 파일 사용: SettingsManager 클래스를 통해 COM 포트와 BaudRate 정보를 JSON 형식으로 저장하고 불러옵니다.
설정 불러오기: 프로그램 시작 시 설정이 저장되어 있으면 자동으로 불러와 COM 포트를 엽니다. 저장된 설정이 없거나 잘못된 경우에는 설정 창을 자동으로 띄워 사용자에게 선택하도록 합니다.
설정 오류 처리: 설정된 COM 포트가 잘못되어 열리지 않는 경우, 사용자에게 설정 창을 띄우도록 처리하여 오류를 방지합니다.
설정 저장: 사용자가 설정을 완료하면 설정 정보를 저장하여 다음 실행 시 사용할 수 있습니다.
이 방식으로 COM 포트 설정이 한 번만 이루어지면 이후에는 저장된 정보를 통해 자동으로 설정 및 실행할 수 있습니다.