#에서 SendKeys를 사용하여 Win + R 키 조합을 직접 보낼 수는 없습니다. SendKeys는 Windows 키를 다룰 수 없으며, 보안 제한으로 인해 일부 키 조합은 차단됩니다.

하지만, Win + R을 실행하는 방법으로 다른 접근법을 사용할 수 있습니다.

1. Process.Start()를 이용한 실행 창 (Win + R) 대체 방법
Win + R 키를 누르면 실행 창이 열리는데, 이를 직접 실행하는 대신 cmd나 특정 프로그램을 실행할 수 있습니다.

csharp
코드 복사
using System.Diagnostics;

class Program
{
    static void Main()
    {
        Process.Start("cmd.exe"); // 또는 다른 프로그램 실행 가능
    }
}
2. keybd_event를 이용한 Win + R 키 입력 (C#에서 키보드 이벤트 직접 전송)
keybd_event를 사용하면 Windows 키를 누르고 R을 입력하는 동작을 흉내낼 수 있습니다.

csharp
코드 복사
using System;
using System.Runtime.InteropServices;
using System.Threading;

class Program
{
    [DllImport("user32.dll")]
    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, int dwExtraInfo);

    private const byte VK_LWIN = 0x5B;  // 왼쪽 Windows 키
    private const byte VK_R = 0x52;     // R 키
    private const uint KEYEVENTF_KEYUP = 0x0002; // 키 놓기

    static void Main()
    {
        // Win 키 누름
        keybd_event(VK_LWIN, 0, 0, 0);
        Thread.Sleep(50); // 키 입력 간격을 줌

        // R 키 누름
        keybd_event(VK_R, 0, 0, 0);
        Thread.Sleep(50);

        // R 키 놓기
        keybd_event(VK_R, 0, KEYEVENTF_KEYUP, 0);
        Thread.Sleep(50);

        // Win 키 놓기
        keybd_event(VK_LWIN, 0, KEYEVENTF_KEYUP, 0);
    }
}
3. SendInput API를 이용한 방법 (더 안전함)
보다 안전한 방법으로 SendInput API를 사용할 수도 있습니다.

csharp
코드 복사
using System;
using System.Runtime.InteropServices;
using System.Threading;

class Program
{
    [StructLayout(LayoutKind.Sequential)]
    struct INPUT
    {
        public int type;
        public InputUnion u;
    }

    [StructLayout(LayoutKind.Explicit)]
    struct InputUnion
    {
        [FieldOffset(0)] public KEYBDINPUT ki;
    }

    struct KEYBDINPUT
    {
        public ushort wVk;
        public ushort wScan;
        public uint dwFlags;
        public uint time;
        public IntPtr dwExtraInfo;
    }

    [DllImport("user32.dll", SetLastError = true)]
    static extern uint SendInput(uint nInputs, INPUT[] pInputs, int cbSize);

    const int INPUT_KEYBOARD = 1;
    const ushort VK_LWIN = 0x5B;
    const ushort VK_R = 0x52;
    const uint KEYEVENTF_KEYUP = 0x0002;

    static void Main()
    {
        INPUT[] inputs = new INPUT[4];

        // Win 키 누르기
        inputs[0].type = INPUT_KEYBOARD;
        inputs[0].u.ki.wVk = VK_LWIN;

        // R 키 누르기
        inputs[1].type = INPUT_KEYBOARD;
        inputs[1].u.ki.wVk = VK_R;

        // R 키 떼기
        inputs[2].type = INPUT_KEYBOARD;
        inputs[2].u.ki.wVk = VK_R;
        inputs[2].u.ki.dwFlags = KEYEVENTF_KEYUP;

        // Win 키 떼기
        inputs[3].type = INPUT_KEYBOARD;
        inputs[3].u.ki.wVk = VK_LWIN;
        inputs[3].u.ki.dwFlags = KEYEVENTF_KEYUP;

        SendInput((uint)inputs.Length, inputs, Marshal.SizeOf(typeof(INPUT)));
    }
}
✅ 정리
SendKeys.Send("{LWIN}r") → 불가능 (Windows 키 지원 안 됨)
Process.Start("cmd.exe") → 가능 (대체 방법)
keybd_event 사용 → 가능 (구형 API, 일부 보안 문제 있음)