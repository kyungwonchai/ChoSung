// FILE_ID: Views/MainWindow_CS_20250410151500
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using Microsoft.Win32; // SaveFileDialog 사용
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try { disposableViewModel.Dispose(); }
                catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel Dispose 오류: {ex.Message}"); }
            }
        }

        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            string newFieldName = e.NewColumn?.FieldName;
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            var newItem = e.NewItem as LockerAssignment;
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        private void ExportExcelButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveFileDialog saveFileDialog = new SaveFileDialog
                {
                    Filter = "Excel Workbook (*.xlsx)|*.xlsx",
                    FileName = $"사물함현황_{DateTime.Now:yyyyMMdd}.xlsx",
                    Title = "엑셀 파일 저장"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;
                    try
                    {
                        // TableView의 ExportToXlsx 메서드 사용
                        mainTableView.ExportToXlsx(filePath);
                        MessageBox.Show($"엑셀 파일 저장 완료:\n{filePath}", "저장 성공", MessageBoxButton.OK, MessageBoxImage.Information);
                        ViewModel.StatusBarText = "엑셀 파일 저장 완료.";
                    }
                    catch (Exception ex)
                    {
                         MessageBox.Show($"엑셀 파일 저장 중 오류 발생:\n{ex.Message}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                         ViewModel.StatusBarText = "엑셀 파일 저장 오류.";
                    }
                }
            }
            catch (Exception ex)
            {
                 MessageBox.Show($"파일 저장 대화상자 열기 중 오류 발생:\n{ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 ViewModel.StatusBarText = "엑셀 저장 중 오류 발생.";
            }
        }
    }
}
```

**핵심 변경 사항:**

* **`using Microsoft.Win32;`**, **`using DevExpress.Xpf.Grid;`**, **`using System.Windows;`** 지시문을 추가했습니다.
* **`ExportExcelButton_Click` 메서드 추가:**
    * `SaveFileDialog`를 생성하여 사용자에게 저장 경로와 파일 이름을 입력받습니다.
    * 사용자가 파일을 선택하면, `mainTableView` (XAML에서 `TableView`에 지정한 `x:Name`)의 `ExportToXlsx()` 메서드를 호출하여 그리드 내용을 해당 경로에 저장합니다.
    * 성공 또는 실패 메시지를 `MessageBox`로 표시하고 ViewModel의 `StatusBarText`를 업데이트합니다.
    * 파일 대화상자 또는 저장 과정에서 발생할 수 있는 예외를 처리합니다.