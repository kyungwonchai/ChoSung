떻게 활용하는지 예제좀
ChatGPT

데이터베이스의 트리거를 사용하여 사용자 계정 정보를 활용하는 예를 보여드리겠습니다. 아래 예제에서는 SQL Server를 사용하고, 트리거를 생성하여 물품 테이블에 적용하는 방법을 보여줍니다.

    먼저, 물품 테이블에 사용자 계정 정보를 저장할 컬럼을 추가합니다. 예를 들어, "ModifiedBy" 컬럼을 추가하여 수정 작업을 수행한 사용자의 계정을 저장합니다.

sql

ALTER TABLE Products
ADD ModifiedBy NVARCHAR(100);

    다음으로, 트리거를 생성합니다. 트리거는 AFTER UPDATE, DELETE, INSERT 이벤트가 발생할 때 실행됩니다. 트리거 내에서는 INSERTED 및 DELETED 논리 테이블을 사용하여 수정된 행의 정보를 가져올 수 있습니다. 이를 활용하여 사용자 계정 정보를 업데이트합니다.

sql

CREATE TRIGGER trg_Products_Audit
ON Products
AFTER UPDATE, DELETE, INSERT
AS
BEGIN
    -- 수정 작업이 수행된 행의 정보를 가져옴
    DECLARE @ModifiedRows TABLE (
        Action VARCHAR(10),
        ProductId INT,
        ModifiedBy NVARCHAR(100)
    );

    -- UPDATE 작업 처리
    IF EXISTS (SELECT * FROM INSERTED)
    BEGIN
        INSERT INTO @ModifiedRows (Action, ProductId, ModifiedBy)
        SELECT 'UPDATE', Id, ModifiedBy FROM INSERTED;
    END

    -- DELETE 작업 처리
    IF EXISTS (SELECT * FROM DELETED)
    BEGIN
        INSERT INTO @ModifiedRows (Action, ProductId, ModifiedBy)
        SELECT 'DELETE', Id, NULL FROM DELETED;
    END

    -- INSERT 작업 처리
    IF EXISTS (SELECT * FROM INSERTED)
    BEGIN
        INSERT INTO @ModifiedRows (Action, ProductId, ModifiedBy)
        SELECT 'INSERT', Id, ModifiedBy FROM INSERTED;
    END

    -- 사용자 계정 정보 업데이트
    UPDATE Products
    SET ModifiedBy = m.ModifiedBy
    FROM Products p
    JOIN @ModifiedRows m ON p.Id = m.ProductId
    WHERE p.Id = m.ProductId;
END

위의 트리거는 trg_Products_Audit라는 이름을 가지며, Products 테이블에 대한 UPDATE, DELETE, INSERT 작업이 발생할 때마다 실행됩니다. 트리거 내에서 INSERTED 및 DELETED 논리 테이블을 사용하여 작업 이력을 가져오고, 이를 활용하여 ModifiedBy 컬럼을 업데이트합니다.

이제 물품 테이블의 수정 작업을 수행할 때마다 해당 작업을 수행한 사용자의 계정 정보가 ModifiedBy 컬럼에 저장됩니다. 이 정보는 트리거 내에서 업데이트되며, 원하는 방식으로 