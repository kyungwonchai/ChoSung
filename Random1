램의 구조 및 예시 코드입니다. 이 프로그램은 Y 드라이브에서 확장자가 .crb인 파일을 찾아, 마지막 쓰여진 시간 기반으로 파일을 복사하고, 로그를 ListBox에 남기는 방식으로 동작합니다. 비동기로 파일 복사 및 로그 관리 작업을 수행하며, 에러가 발생하면 해당 내용을 로그에 기록합니다.

구현 주요 요구사항
Y 드라이브에서 .crb 파일을 1분 주기로 검색.
파일이 변경되었을 때 C:\MountCrbShare로 복사.
파일 이름은 yyyyMMddHHmmss_파일명.확장자 형식.
로그는 최대 50개까지 ListBox에 [yyyyMMdd HHmmss] 로그내용 형식으로 출력.
비동기 작업과 에러 핸들링 포함.
XAML UI 설계
xml
코드 복사
<Window x:Class="CrbFileMonitor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="CRB File Monitor" Height="400" Width="600">
    <Grid>
        <ListBox x:Name="LogListBox" Margin="10" />
    </Grid>
</Window>
C# 코드 구현
csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;

namespace CrbFileMonitor
{
    public partial class MainWindow : Window
    {
        private const string SourceDirectory = @"Y:\";
        private const string DestinationDirectory = @"C:\MountCrbShare";
        private Timer _timer;
        private readonly object _logLock = new object();

        public MainWindow()
        {
            InitializeComponent();
            InitializeFileMonitor();
        }

        private void InitializeFileMonitor()
        {
            // 타이머 설정 (1분 주기)
            _timer = new Timer(60000); // 60,000ms = 1분
            _timer.Elapsed += async (sender, e) => await MonitorFilesAsync();
            _timer.Start();

            AddLog("CRB 파일 모니터링 시작.");
        }

        private async Task MonitorFilesAsync()
        {
            try
            {
                string[] crbFiles = Directory.GetFiles(SourceDirectory, "*.crb");

                foreach (var file in crbFiles)
                {
                    FileInfo fileInfo = new FileInfo(file);
                    string formattedTime = fileInfo.LastWriteTime.ToString("yyyyMMddHHmmss");
                    string newFileName = $"{formattedTime}_{fileInfo.Name}";
                    string destinationPath = Path.Combine(DestinationDirectory, newFileName);

                    if (!Directory.Exists(DestinationDirectory))
                    {
                        Directory.CreateDirectory(DestinationDirectory);
                    }

                    // 파일을 비동기로 복사
                    await Task.Run(() => File.Copy(file, destinationPath, true));

                    AddLog($"파일 복사 완료: {newFileName}");
                }
            }
            catch (Exception ex)
            {
                AddLog($"에러 발생: {ex.Message}");
            }
        }

        private void AddLog(string message)
        {
            string logEntry = $"[{DateTime.Now:yyyyMMdd HHmmss}] {message}";

            Dispatcher.Invoke(() =>
            {
                lock (_logLock)
                {
                    if (LogListBox.Items.Count >= 50)
                    {
                        LogListBox.Items.RemoveAt(0);
                    }

                    LogListBox.Items.Add(logEntry);
                }
            });
        }
    }
}
설명
파일 모니터링

Timer를 사용해 1분마다 파일을 확인하며, 이벤트 핸들러는 MonitorFilesAsync 비동기 메서드입니다.
.crb 확장자 파일만 처리합니다.
파일 복사

파일은 LastWriteTime을 기준으로 이름을 변경해 복사합니다.
File.Copy 작업은 Task.Run으로 비동기 처리되어 UI가 멈추지 않습니다.
로그 관리

최대 50개의 로그만 유지되며, 초과 시 가장 오래된 항목을 제거합니다.
모든 로그는 [yyyyMMdd HHmmss] 로그내용 형식으로 출력됩니다.
에러 핸들링
