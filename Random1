 폴더 안에 search.html이라는 이름의 HTML 파일을 작성합니다. 이 HTML 파일은 사용자 입력을 받아서 검색을 수행하는 간단한 웹페이지를 구현합니다.

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Part Code Search</title>
</head>
<body>
    <h1>Part Code Search</h1>
    <form method="POST" action="/search">
        <input type="text" name="input" required>
        <button type="submit">Search</button>
    </form>
    {% if results %}
    <h2>Results:</h2>
    <ul>
        {% for result in results %}
        <li>{{ result }}</li>
        {% endfor %}
    </ul>
    {% endif %}
</body>
</html>
그리고 아래와 같이 Flask 앱 코드를 수정합니다. 이 코드는 웹페이지를 렌더링하고, 사용자 입력을 받아서 검색 결과를 반환하는 역할을 합니다.
python
Copy code
from flask import Flask, request, render_template
import pandas as pd
from sklearn.metrics.pairwise import linear_kernel
import pickle

# 학습된 모델과 벡터화된 데이터 불러오기
tfidf = pickle.load(open("tfidf.pkl", "rb"))
tfidf_matrix = pickle.load(open("tfidf_matrix.pkl", "rb"))

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def search():
    if request.method == 'POST':
        # 사용자로부터 입력 문자열 받기
        input_str = request.form['input']

        # 입력 문자열을 tf-idf 벡터로 변환
        input_vec = tfidf.transform([input_str])

        # 입력 벡터와 데이터셋의 벡터 간 코사인 유사도 계산
        cosine_similarities = linear_kernel(input_vec, tfidf_matrix).flatten()

        # 유사도가 가장 높은 부품코드의 인덱스를 가져옴
        related_docs_indices = cosine_similarities.argsort()[:-10:-1]

        # 유사한 부품코드 목록 반환
        results = data['part_code'].iloc[related_docs_indices].tolist()
        
        return render_template('search.html', results=results)
    else:
        return render_template('search.html')

if __name__ == '__main__':
    app.run(port=5000, debug=True)
이제 웹 서버를 실행하고, 브라우