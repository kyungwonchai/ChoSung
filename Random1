 CreateTime 값을 읽고, 이를 DateTime 형식으로 저장한 뒤 UI에서 yyyy-MM-dd HH:mm:ss 형식으로 표시하며 정렬하는 작업을 WPF에서 처리하는 방법을 설명하겠습니다. 이 작업은 다음과 같은 단계로 이루어집니다:

Step-by-Step 구현 방법
1. ViewModel에서 파일 정보를 포함하는 클래스 정의
파일의 CreateTime 값을 읽어오는 클래스와 이를 저장할 ObservableCollection을 ViewModel에서 관리합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.IO;

public class FileInfoViewModel
{
    public ObservableCollection<FileData> FileList { get; set; }

    public FileInfoViewModel()
    {
        FileList = new ObservableCollection<FileData>();

        // 예시로 파일 경로에서 파일 정보를 가져옴
        string[] files = Directory.GetFiles(@"C:\YourDirectory");
        
        foreach (string file in files)
        {
            var fileInfo = new FileInfo(file);
            FileList.Add(new FileData
            {
                FileName = fileInfo.Name,
                CreateTime = fileInfo.CreationTime
            });
        }
    }
}

public class FileData
{
    public string FileName { get; set; }
    public DateTime CreateTime { get; set; }

    // UI에서 표시할 포맷된 시간
    public string FormattedCreateTime => CreateTime.ToString("yyyy-MM-dd HH:mm:ss");
}
FileInfoViewModel: 파일의 경로에서 파일 목록을 가져와 FileInfo 클래스로 각 파일의 CreationTime을 읽고, 이를 ObservableCollection에 저장합니다.
FileData: 파일의 이름(FileName)과 생성 시간(CreateTime)을 저장하고, UI에서 표시할 수 있도록 FormattedCreateTime 속성으로 yyyy-MM-dd HH:mm:ss 형식으로 변환하여 제공합니다.
2. XAML에서 데이터 바인딩 및 정렬 적용
XAML에서 CollectionViewSource를 사용해 CreateTime 값으로 정렬하고, UI에 날짜와 시간을 지정한 형식으로 표시합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Window.DataContext>
        <local:FileInfoViewModel />
    </Window.DataContext>

    <Window.Resources>
        <!-- CreateTime으로 정렬된 CollectionViewSource -->
        <CollectionViewSource x:Key="FileListViewSource" Source="{Binding FileList}">
            <CollectionViewSource.SortDescriptions>
                <!-- CreateTime을 기준으로 오름차순 정렬 -->
                <scm:SortDescription PropertyName="CreateTime" Direction="Descending" />
            </CollectionViewSource.SortDescriptions>
        </CollectionViewSource>
    </Window.Resources>

    <Grid>
        <DataGrid ItemsSource="{Binding Source={StaticResource FileListViewSource}}" AutoGenerateColumns="False">
            <DataGrid.Columns>
                <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" />
                <DataGridTextColumn Header="Create Time" Binding="{Binding FormattedCreateTime}" />
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
CollectionViewSource: CollectionViewSource를 사용하여 파일 목록을 CreateTime을 기준으로 내림차순 정렬합니다. 즉, 최신 파일이 상단에 표시됩니다.
DataGrid: DataGrid에서 파일 이름과 생성 시간을 각각의 열로 표시하며, CreateTime은 FormattedCreateTime 속성을 통해 지정한 형식으로 출력됩니다.
3. 설명
FileList는 원래 순서를 그대로 유지하며 ObservableCollection에 저장됩니다.
UI에서 CollectionViewSource를 사용하여 CreateTime 기준으로 내림차순(Descending)으로 정렬되며, 최신 파일이 상단에 표시됩니다.
DataGrid에서는 파일의 CreateTime을 yyyy-MM-dd HH:mm:ss 형식으로 표시합니다.
만약 첫 번째 파일을 삭제하거나 변경할 경우, 데이터 소스에서는 정상적으로 첫 번째 항목이 수정되지만 UI에서는 최신 항목이 지워지는 것처럼 보입니다.
4. 파일 생성 시간 업데이트 예시
파일 생성 시간이 업데이트되었을 때, ObservableCollection에 반영된 시간이 자동으로 UI에 갱신됩니다. WPF의 바인딩 메커니즘 덕분에 추가적인 작업 없이도 동기화가 이루어집니다.

이 방법을 사용하면 CreateTime 값을 기준으로 정렬하고, UI에 원하는 형식으로 표시하는 동시에, 비즈니스 