네, VBA에서 전달받은 특정 영역(Range)에 "a"라는 값(대소문자 구분 없이)이 하나라도 포함되어 있으면 1을 반환하고, 없으면 0을 반환하는 사용자 정의 함수는 다음과 같이 만들 수 있습니다.

VBA

Function ContainsSpecificValue(ByVal targetRange As Range, ByVal valueToFind As String) As Integer
    Dim cell As Range
    Dim found As Boolean

    found = False ' 기본적으로는 찾지 못한 것으로 설정

    ' targetRange가 유효한지 확인 (선택 사항이지만 안정성을 위해)
    If targetRange Is Nothing Then
        ContainsSpecificValue = 0
        Exit Function
    End If

    ' 루프 중 오류 발생 시 다음 셀로 넘어가도록 설정 (예: 셀에 #N/A 등의 오류 값이 있는 경우)
    On Error Resume Next

    For Each cell In targetRange.Cells
        ' CStr을 사용하여 셀 값을 문자열로 변환 (숫자나 다른 타입도 비교 가능하도록)
        ' UCase를 사용하여 대소문자 구분 없이 비교
        If UCase(CStr(cell.Value2)) = UCase(valueToFind) Then
            found = True
            Exit For ' 하나라도 찾으면 더 이상 검색할 필요 없음
        End If
    Next cell

    On Error GoTo 0 ' 오류 처리 기본값으로 복원

    If found Then
        ContainsSpecificValue = 1
    Else
        ContainsSpecificValue = 0
    End If

End Function
위 함수를 약간 수정하여 사용자가 요청한 "a" 값을 찾는 함수로 만들면 다음과 같습니다:

VBA

Function HasValueA(ByVal targetRange As Range) As Integer
    Dim cell As Range

    ' 함수 기본 반환 값을 0 (없음)으로 설정
    HasValueA = 0

    ' targetRange가 실제로 지정되었는지 확인
    If targetRange Is Nothing Then
        Exit Function ' targetRange가 없으면 0 반환
    End If

    ' On Error Resume Next: 셀에 오류 값이 있을 경우 CStr(cell.Value2)에서 오류가 발생할 수 있으므로,
    ' 이를 무시하고 다음 셀로 진행하도록 합니다.
    On Error Resume Next
    For Each cell In targetRange.Cells
        ' UCase 함수를 사용하여 대소문자를 구분하지 않고 비교합니다.
        ' CStr 함수는 셀의 값을 문자열로 변환합니다. (숫자나 날짜 등 다른 타입도 문자열로 바꿔서 비교)
        ' cell.Value2는 셀의 기본 값을 가져오며, Value보다 빠르고 안정적일 수 있습니다.
        If UCase(CStr(cell.Value2)) = "A" Then
            HasValueA = 1   ' "A" 또는 "a"를 찾으면 반환 값을 1로 설정
            Exit For        ' 하나라도 찾았으므로 더 이상 반복할 필요 없음
        End If
    Next cell
    On Error GoTo 0 ' 오류 처리 설정을 원래대로 복원

End Function
사용 예시:

VBA 편집기(Alt + F11)를 엽니다.
삽입(Insert) > 모듈(Module)을 선택하여 새 모듈을 추가합니다.
위의 HasValueA 함수 코드를 복사하여 모듈에 붙여넣습니다.
이제 워크시트나 다른 VBA 코드에서 이 함수를 사용할 수 있습니다.

워크시트에서 사용:

예를 들어, A1:B5 범위에 "a" 또는 "A"가 있는지 확인하고 싶다면, 아무 셀에나 다음과 같이 입력합니다.
=HasValueA(A1:B5)

A1:B5 범위 내에 "a" 또는 "A"라는 값을 가진 셀이 하나라도 있으면, 수식이 입력된 셀에 1이 표시됩니다.
없으면 0이 표시됩니다.
VBA 코드에서 사용:

VBA

Sub TestFunction()
    Dim myRange As Range
    Set myRange = ThisWorkbook.Sheets("Sheet1").Range("A1:C10") ' 실제 시트와 범위로 변경하세요.

    Dim result As Integer
    result = HasValueA(myRange)

    If result = 1 Then
        MsgBox "선택한 범위에 'a' 또는 'A'가 포함되어 있습니다."
    Else
        MsgBox "선택한 범위에 'a' 또는 'A'가 없습니다."
    End If
End Sub
함수 설명:

Function HasValueA(ByVal targetRange As Range) As Integer:
HasValueA라는 이름의 함수를 정의합니다.
ByVal targetRange As Range: targetRange라는 이름으로 Range 객체(검색할 영역)를 입력받습니다. ByVal로 전달하여 원본 Range 객체가 함수 내에서 변경되지 않도록 합니다 (이 함수에서는 큰 의미는 없지만 일반적인 관례입니다).
As Integer: 함수가 정수형(Integer) 값을 반환하도록 지정합니다 (0 또는 1).
Dim cell As Range: 범위 내의 각 셀을 순회하기 위한 변수를 선언합니다.
HasValueA = 0: 함수가 시작될 때 기본적으로 "찾지 못함"(0)으로 설정합니다.
If targetRange Is Nothing Then Exit Function: 만약 targetRange가 유효하지 않은 범위(예: 아무것도 선택되지 않은 상태에서 Selection을 넘기는 등)일 경우 오류를 방지하고 그냥 0을 반환하며 함수를 종료합니다.
On Error Resume Next: cell.Value2를 읽을 때 셀에 #N/A, #VALUE! 같은 오류 값이 있으면 CStr 변환 시 오류가 발생할 수 있습니다. 이 경우 오류를 무시하고 다음 코드를 실행하도록 합니다.
For Each cell In targetRange.Cells: targetRange에 포함된 모든 cell에 대해 반복합니다.
If UCase(CStr(cell.Value2)) = "A" Then:
cell.Value2: 셀의 값을 가져옵니다.
CStr(...): 셀 값을 문자열로 변환합니다. 이렇게 하면 숫자가 들어있는 셀도 문자열 "123" 등으로 변환되어 비교가 가능해집니다 (이 경우 "A"와는 다르므로 문제없음).
UCase(...): 문자열을 모두 대문자로 변경합니다. 이렇게 함으로써 "a"와 "A"를 동일하게 취급합니다.
= "A": 대문자로 변경된 셀 값이 "A"와 같은지 비교합니다.
HasValueA = 1: 조건이 참이면(즉, "a" 또는 "A"를 찾으면) 함수의 반환 값을 1로 설정합니다.
Exit For: 이미 값을 찾았으므로 더 이상 루프를 돌 필요가 없어 루프를 빠져나옵니다.