PLC 시뮬레이션에서 WriteLine으로 데이터를 전송할 때, PLC 장치나 시뮬레이터가 **바이트 배열(byte[])**로 데이터를 받기를 기대하는 경우 WriteLine 대신 바이트 배열로 데이터를 전송해야 합니다. WriteLine은 텍스트 데이터를 전송하는 방식이며, 텍스트를 바이트 배열로 변환하는 과정이 포함되지 않기 때문에 바이너리 데이터를 기대하는 수신 측에서 이를 처리하지 못할 수 있습니다.

해결책:
SerialPort의 Write 메서드를 사용하여 **바이트 배열(byte[])**을 직접 전송하면, 상대방이 올바르게 값을 받을 수 있습니다.

단계별 해결 방법
PLC 시뮬레이터에서 바이트 배열 전송:

데이터를 **바이트 배열(byte[])**로 변환하여 전송.
WriteLine 대신 **Write**를 사용.
1값을 전송:

1을 전송하려면, 이를 바이트 배열로 변환하여 전송해야 합니다.
수정된 코드 예시
ProcessCommand에서 1 값을 전송할 때, Write 메서드를 사용하여 바이트 배열로 전송하는 방식입니다.

MainWindow.xaml.cs (수정된 코드)
csharp
코드 복사
private void ProcessCommand(string command)
{
    string response = _plcSimulator.ProcessCommand(command);

    // 응답을 시리얼 포트로 전송 (바이트 배열로 변환)
    if (_serialPort.IsOpen)
    {
        // response를 바이트 배열로 변환
        byte[] responseBytes = System.Text.Encoding.ASCII.GetBytes(response);
        
        // 바이트 배열로 전송
        _serialPort.Write(responseBytes, 0, responseBytes.Length);
    }

    // 로그에 기록
    AddLog($"Received: {command}, Response: {response}");
}
설명:
텍스트를 바이트 배열로 변환: System.Text.Encoding.ASCII.GetBytes()를 사용하여 응답 문자열(response)을 바이트 배열로 변환합니다.
System.Text.Encoding.ASCII.GetBytes(response)는 문자열을 ASCII 인코딩된 바이트 배열로 변환합니다.
바이트 배열 전송: _serialPort.Write(responseBytes, 0, responseBytes.Length) 메서드를 사용하여 변환된 바이트 배열을 전송합니다.
테스트:
이제 PLC 시뮬레이터에서 상대방이 byte[] 형식으로 데이터를 수신할 때, 이 코드를 통해 올바르게 데이터를 전송할 수 있습니다.

추가 조정:
1 값 전송: 만약 특정 값(예: 1)을 전송하려면, byte[] 배열에 1 값을 포함시켜 전송하면 됩니다.
csharp
코드 복사
byte[] responseBytes = new byte[] { 1 };
_serialPort.Write(responseBytes, 0, responseBytes.Length);
이 코드를 적용하면 PLC 시뮬레이터가 바이너리 데이터를 기대하는 장치로 올바른 형식의 데이터를 전송할 수 있습니다.