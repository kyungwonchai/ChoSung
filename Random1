아래는 수정된 전체 코드로, 복사 완료 대신 이미 파일이 존재하면 "이미 존재" 메시지가 출력되도록 변경했으며, 이중 실행 방지를 위해 Mutex를 추가하여 프로그램이 중복 실행되지 않도록 설정했습니다.

수정 사항 요약
복사 상태 메시지:

파일 복사 시 대상 폴더에 동일한 파일이 존재하면 "이미 존재: [파일 경로]" 메시지를 출력.
파일이 새로 복사되면 "파일 복사 완료: [파일 경로]" 메시지를 출력.
이중 실행 방지:

Mutex를 사용해 프로그램이 중복 실행되지 않도록 설정.
이미 실행 중인 경우 메시지 박스로 알림 후 종료.
전체 코드 (C#)
csharp
코드 복사
using System;
using System.IO; // System.IO 명시
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;
using System.Windows.Forms; // NotifyIcon 사용
using Application = System.Windows.Application; // WPF Application 이름 충돌 방지
using MessageBox = System.Windows.MessageBox; // WPF MessageBox 사용

namespace CrbFileMonitor
{
    public partial class MainWindow : Window
    {
        private readonly string[] PossibleDrives = { @"Y:\", @"X:\", @"Z:\" }; // 검색할 드라이브 목록
        private const string DestinationDirectory = @"C:\MountCrbShare"; // 복사 대상 디렉토리
        private Timer _timer; // 1분 주기 타이머
        private readonly object _logLock = new object(); // 로그 동기화용 Lock
        private DateTime _lastCopiedTime = DateTime.MinValue; // 마지막 복사된 파일 시간
        private NotifyIcon _notifyIcon; // 트레이 아이콘
        private static Mutex _mutex; // 이중 실행 방지용 Mutex

        public MainWindow()
        {
            // 이중 실행 방지
            bool isNewInstance;
            _mutex = new Mutex(true, "CrbFileMonitorMutex", out isNewInstance);
            if (!isNewInstance)
            {
                MessageBox.Show("이미 프로그램이 실행 중입니다.", "중복 실행", MessageBoxButton.OK, MessageBoxImage.Warning);
                Application.Current.Shutdown();
                return;
            }

            InitializeComponent();
            InitializeTrayIcon();
            InitializeFileMonitor();
        }

        /// <summary>
        /// 파일 모니터링 초기화
        /// </summary>
        private void InitializeFileMonitor()
        {
            // 대상 폴더가 없으면 생성
            if (!Directory.Exists(DestinationDirectory))
            {
                Directory.CreateDirectory(DestinationDirectory);
                AddLog($"폴더 생성: {DestinationDirectory}");
            }

            // 즉시 파일 처리 실행
            Task.Run(async () => await ProcessFilesAsync());

            // 타이머 설정 (1분 주기)
            _timer = new Timer(60000); // 60,000ms = 1분
            _timer.Elapsed += async (sender, e) => await ProcessFilesAsync();
            _timer.Start();

            AddLog("CRB 파일 모니터링 시작.");
        }

        /// <summary>
        /// 트레이 아이콘 초기화
        /// </summary>
        private void InitializeTrayIcon()
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = System.Drawing.SystemIcons.Application,
                Visible = true,
                Text = "CRB File Monitor"
            };

            var contextMenu = new ContextMenuStrip();
            var exitMenuItem = new ToolStripMenuItem("종료", null, (s, e) => CloseApplication());
            contextMenu.Items.Add(exitMenuItem);

            _notifyIcon.ContextMenuStrip = contextMenu;
            _notifyIcon.DoubleClick += (s, e) => RestoreWindow();
        }

        /// <summary>
        /// 사용 가능한 첫 번째 드라이브 검색
        /// </summary>
        private string GetAvailableDrive()
        {
            return PossibleDrives.FirstOrDefault(Directory.Exists);
        }

        /// <summary>
        /// 파일 처리
        /// </summary>
        private async Task ProcessFilesAsync()
        {
            string sourceDirectory = GetAvailableDrive();
            if (sourceDirectory == null)
            {
                AddLog("사용 가능한 드라이브가 없습니다. 작업을 건너뜁니다.");
                return;
            }

            try
            {
                // 드라이브에서 .crb 파일 검색
                string[] crbFiles = Directory.GetFiles(sourceDirectory, "*.crb", SearchOption.AllDirectories);
                bool fileProcessed = false;

                foreach (var file in crbFiles)
                {
                    FileInfo fileInfo = new FileInfo(file);

                    // 새로운 파일만 처리
                    if (fileInfo.LastWriteTime <= _lastCopiedTime)
                        continue;

                    string formattedTime = fileInfo.LastWriteTime.ToString("yyyyMMddHHmmss");
                    string destinationPath = Path.Combine(DestinationDirectory, $"{formattedTime}_{fileInfo.Name}");

                    if (File.Exists(destinationPath))
                    {
                        AddLog($"이미 존재: {destinationPath}");
                    }
                    else
                    {
                        await Task.Run(() => File.Copy(file, destinationPath, true));
                        AddLog($"파일 복사 완료: {destinationPath}");
                    }

                    _lastCopiedTime = fileInfo.LastWriteTime; // 마지막 복사 시간 갱신
                    fileProcessed = true;
                }

                if (!fileProcessed)
                {
                    AddLog("복사할 파일이 없습니다.");
                }

                // 1개월 지난 파일 삭제
                DeleteOldFiles();
            }
            catch (Exception ex)
            {
                AddLog($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 오래된 파일 삭제
        /// </summary>
        private void DeleteOldFiles()
        {
            try
            {
                var files = Directory.GetFiles(DestinationDirectory, "*.*", SearchOption.TopDirectoryOnly)
                    .Select(file => new FileInfo(file))
                    .OrderByDescending(file => file.LastWriteTime)
                    .ToList();

                if (files.Count > 1) // 파일이 1개 이상일 때만 삭제
                {
                    foreach (var file in files.Skip(1)) // 가장 최근 파일 제외
                    {
                        if (file.LastWriteTime < DateTime.Now.AddMonths(-1))
                        {
                            file.Delete();
                            AddLog($"오래된 파일 삭제: {file.Name}");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                AddLog($"파일 삭제 중 에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 로그 추가
        /// </summary>
        private void AddLog(string message)
        {
            string logEntry = $"[{DateTime.Now:yyyyMMdd HHmmss}] {message}";
            Dispatcher.Invoke(() =>
            {
                lock (_logLock)
                {
                    if (LogListBox.Items.Count >= 50)
                    {
                        LogListBox.Items.RemoveAt(0); // 오래된 로그 제거
                    }
                    LogListBox.Items.Add(logEntry);
                }
            });
        }

        /// <summary>
        /// 종료 버튼 클릭
        /// </summary>
        private void ExitButton_Click(object sender, RoutedEventArgs e)
        {
            var result = MessageBox.Show("종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result == MessageBoxResult.Yes)
            {
                CloseApplication();
            }
        }

        /// <summary>
        /// 창 닫기 이벤트
        /// </summary>
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            var result = MessageBox.Show("종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo, MessageBoxImage.Question);
            if (result != MessageBoxResult.Yes)
            {
                e.Cancel = true;
            }
            else
            {
                CloseApplication();
            }
        }

        /// <summary>
        /// 애플리케이션 종료
        /// </summary>
        private void CloseApplication()
        {
            _notifyIcon.Visible = false;
            _notifyIcon.Dispose();
            Application.Current.Shutdown();
        }

        /// <summary>
        /// 트레이에서 창 복원
        /// </summary>
        private void RestoreWindow()
        {
            Show();
            WindowState = WindowState.Normal;
        }
    }
}
변경된 동작
복사 상태 로그:

파일이 이미 존재하면:
csharp
코드 복사
[20250116 100500] 이미 존재: C:\MountCrbShare\20250116100500_File1.crb
새로 복사된 경우:
csharp
코드 복사
[20250116 100501] 파일 복사 완료: C:\MountCrbShare\20250116100501_File2.crb
이중 실행 방지:

프로그램을 두 번 실행하면 메시지 박스로 경고 후 종료:
코드 복사
이미 프로그램이 실행 중입니다.
오래된 파일 삭제:

1개월이 지난 파일이 삭제되며, 가장 최근 파일은 유지:
csharp
코드 복사
[20250116 101500] 오래된 파일 삭제: 20241216100000_File3.crb