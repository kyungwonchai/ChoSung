from flask import Flask, request, jsonify, render_template_string
import os

app = Flask(__name__)

# 테스트를 위해 10MB로 설정 (5MB보다는 크고, 현재 5GB보다는 훨씬 작게)
# 사용자님은 5MB 넘는게 안된다고 하셨으니, 예를 들어 10MB로 설정해봅니다.
# 또는 문제가 발생하는 지점 (예: 6MB) 보다 약간 큰 값으로 설정합니다.
app.config['MAX_CONTENT_LENGTH'] = 10 * 1024 * 1024 # 10MB

# 업로드 폴더는 실제로는 사용 안 하지만 형식상 둡니다.
UPLOAD_FOLDER = './uploads_minimal_test'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

HTML_FORM = """
<!doctype html>
<title>Minimal Upload Test</title>
<h1>Upload new File (Limit: {{ config.MAX_CONTENT_LENGTH / (1024*1024) }} MB)</h1>
<form method=post enctype=multipart/form-data action="{{ url_for('upload_test_minimal') }}">
  <input type=file name=file>
  <input type=submit value=Upload>
</form>
<hr>
<h2>Config Check:</h2>
<p>MAX_CONTENT_LENGTH: {{ config.MAX_CONTENT_LENGTH }} bytes</p>
"""

@app.route('/')
def index_minimal():
    return render_template_string(HTML_FORM)

@app.route('/upload_test', methods=['POST'])
def upload_test_minimal():
    if 'file' not in request.files:
        return "No file part", 400
    file = request.files['file']
    if file.filename == '':
        return "No selected file", 400
    
    # 실제 파일 저장은 하지 않고, 파일 정보만 확인
    filename = file.filename
    file.seek(0, os.SEEK_END)
    file_length = file.tell()
    file.seek(0) # 포인터 원위치

    return f"File '{filename}' (size: {file_length} bytes) received by minimal app. Limit was {app.config['MAX_CONTENT_LENGTH']} bytes.", 200

if __name__ == '__main__':
    # 현재 게시판 앱과 다른 포트 사용 (예: 8101)
    # threaded=True 도 추가해서 테스트
    app.run(host='10.244.122.25', port=8101, debug=True, threaded=True)