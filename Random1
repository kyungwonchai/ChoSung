아래는 설명하신 조건을 만족하는 기능을 가진 C# WinForms 예제 코드입니다. 이 코드는 Button 클릭 시 해당 영역의 평균 색상을 계산하고 조건이 맞으면 특정 영역에 클릭 이벤트를 발생시키는 기능을 포함합니다.

이 예제는 고해상도 화면 캡처, 색상 평균 계산, 특정 조건에 따라 영역을 검출하고 클릭하는 기능을 포함하고 있습니다.

csharp
코드 복사
using System;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Runtime.InteropServices;

namespace ColorDetectionApp
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            // 버튼 생성
            Button detectButton = new Button
            {
                Text = "검정 및 파랑 영역 클릭",
                Location = new Point(10, 10)
            };
            detectButton.Click += DetectAndClick;
            Controls.Add(detectButton);
        }

        private void DetectAndClick(object sender, EventArgs e)
        {
            // 스크린샷 캡처
            Bitmap screenshot = CaptureScreen();

            // 검정색 영역 확인
            Rectangle blackRegion = FindBlackRegion(screenshot);
            if (blackRegion != Rectangle.Empty)
            {
                // 검정색 영역 안에 파란색 버튼을 찾고 클릭
                Rectangle blueButton = FindBlueButton(screenshot, blackRegion);
                if (blueButton != Rectangle.Empty)
                {
                    // 파란색 버튼 클릭 위치 계산
                    Point clickPoint = new Point(blueButton.Left + blueButton.Width / 2, blueButton.Top + blueButton.Height / 2);
                    // 마우스 클릭
                    ClickOnScreen(clickPoint);
                }
            }

            screenshot.Dispose();
        }

        private Bitmap CaptureScreen()
        {
            Bitmap screenshot = new Bitmap(1920, 1080);
            using (Graphics g = Graphics.FromImage(screenshot))
            {
                g.CopyFromScreen(0, 0, 0, 0, screenshot.Size);
            }
            return screenshot;
        }

        private Rectangle FindBlackRegion(Bitmap screenshot)
        {
            Rectangle searchArea = new Rectangle(712, 93, 488, 154); // 712,93 ~ 1200,247

            int blackPixelCount = 0;
            int totalPixelCount = searchArea.Width * searchArea.Height;

            for (int y = searchArea.Top; y < searchArea.Bottom; y++)
            {
                for (int x = searchArea.Left; x < searchArea.Right; x++)
                {
                    Color pixel = screenshot.GetPixel(x, y);
                    if (pixel.R <= 60 && pixel.G <= 60 && pixel.B <= 60)
                    {
                        blackPixelCount++;
                    }
                }
            }

            double blackPercentage = (double)blackPixelCount / totalPixelCount * 100;

            // 검정색 비율이 70% 이상일 때 검정색 영역 반환
            return blackPercentage >= 70 ? searchArea : Rectangle.Empty;
        }

        private Rectangle FindBlueButton(Bitmap screenshot, Rectangle blackRegion)
        {
            for (int y = blackRegion.Top; y < blackRegion.Bottom - 30; y++) // y 범위 내에서 찾기
            {
                for (int x = blackRegion.Left; x < blackRegion.Right - 100; x++) // x 범위 내에서 찾기
                {
                    Color pixel = screenshot.GetPixel(x, y);
                    if (pixel.R <= 100 && pixel.G >= 200) // 파란색 영역 검출 조건
                    {
                        return new Rectangle(x, y, 100, 30); // 파란색 버튼 영역 반환
                    }
                }
            }

            return Rectangle.Empty;
        }

        // 마우스 클릭을 위한 외부 함수 호출
        [DllImport("user32.dll")]
        static extern bool SetCursorPos(int X, int Y);

        [DllImport("user32.dll")]
        static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo);

        private const int MOUSEEVENTF_LEFTDOWN = 0x02;
        private const int MOUSEEVENTF_LEFTUP = 0x04;

        private void ClickOnScreen(Point location)
        {
            SetCursorPos(location.X, location.Y);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, (uint)location.X, (uint)location.Y, 0, 0);
        }
    }
}
코드 설명
스크린샷 캡처: CaptureScreen 함수에서 전체 화면을 캡처하여 Bitmap으로 반환합니다.
검정 영역 검출: FindBlackRegion 함수에서 주어진 영역 (712, 93 ~ 1200, 247)의 픽셀을 확인하여 RGB 값이 60 이하인 픽셀이 70% 이상일 때 검정 영역으로 인식합니다.
파란 버튼 검출: FindBlueButton 함수에서 검정 영역 내에서 RGB 값이 조건에 맞는 파란 버튼 영역을 찾아 Rectangle로 반환합니다.