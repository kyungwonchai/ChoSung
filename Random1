청에 따라 차트의 막대가 최대 5개까지만 보이도록 하고, 나머지는 세로 스크롤을 통해 표시하며, 화면 높이를 고정시키는 방법을 구현했습니다.

HTML 템플릿 (templates/plcerr.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PLC Error Viewer</title>
    <style>
        body {
            background-color: #121212;
            color: #e0e0e0;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #00bcd4;
        }
        .charts {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-bottom: 20px;
        }
        .chart-container {
            background-color: #1e1e1e;
            border-radius: 10px;
            padding: 20px;
            overflow-y: auto; /* 스크롤 가능 */
            max-height: 250px; /* 최대 높이 고정 */
        }
        canvas {
            display: block;
            margin: 0 auto;
        }
        .search-bar {
            margin-bottom: 20px;
            text-align: center;
        }
        .search-bar input {
            width: 50%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            font-size: 16px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #1e1e1e;
        }
        thead {
            background-color: #004d66;
        }
        thead th, tbody td {
            padding: 8px;
            text-align: left;
        }
        tbody tr:nth-child(even) {
            background-color: #2a2a2a;
        }
        tbody tr:hover {
            background-color: #3d3d3d;
        }
        .pagination {
            text-align: center;
            margin: 20px 0;
        }
        .pagination button {
            padding: 8px 16px;
            margin: 0 5px;
            border: none;
            border-radius: 5px;
            background-color: #00bcd4;
            color: #fff;
            cursor: pointer;
        }
        .pagination button.disabled {
            background-color: #555;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <h1>PLC Error Logs</h1>

    <!-- 검색 입력 필드 -->
    <div class="search-bar">
        <form method="GET" action="/PLCErr">
            <input type="text" name="search" placeholder="라인명, 에러번호, 에러값으로 검색" value="{{ search_query }}">
        </form>
    </div>

    <!-- 차트 영역 -->
    <div class="charts">
        <!-- 라인별 가로 막대 차트 -->
        <div class="chart-container">
            <canvas id="lineChart" width="800" height="{{ line_counts|length * 40 }}"></canvas>
        </div>

        <!-- 에러값별 가로 막대 차트 -->
        <div class="chart-container">
            <canvas id="errValueChart" width="800" height="250"></canvas>
        </div>
    </div>

    <!-- 데이터 테이블 -->
    <table>
        <thead>
            <tr>
                <th>라인명</th>
                <th>에러번호</th>
                <th>에러값</th>
                <th>시간</th>
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
                <tr>
                    <td>{{ row['라인명'] }}</td>
                    <td>{{ row['에러번호'] }}</td>
                    <td>{{ row['에러값'] }}</td>
                    <td>{{ row['시간'] }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <!-- 페이지네이션 -->
    <div class="pagination">
        {% set start_page = ((current_page - 1) // 10) * 10 + 1 %}
        {% set end_page = min(total_pages, start_page + 9) %}
        {% if start_page > 1 %}
            <button onclick="changePage({{ start_page - 1 }})">◀</button>
        {% endif %}
        {% for page in range(start_page, end_page + 1) %}
            <button 
                onclick="changePage({{ page }})" 
                class="{{ 'active' if page == current_page else '' }}"
            >
                {{ page }}
            </button>
        {% endfor %}
        {% if end_page < total_pages %}
            <button onclick="changePage({{ end_page + 1 }})">▶</button>
        {% endif %}
    </div>

    <script>
        function changePage(page) {
            const params = new URLSearchParams(window.location.search);
            params.set('page', page);
            window.location.search = params.toString();
        }

        document.addEventListener('DOMContentLoaded', function () {
            // 라인별 가로 막대 차트
            drawHorizontalBarChart('lineChart', {{ line_counts | tojson }}, '라인명', '발생수', '#007acc', 5);

            // 에러값별 가로 막대 차트
            drawHorizontalBarChart('errValueChart', {{ errvalue_counts | tojson }}, '에러값', '발생수', '#ff5722', 5);
        });

        function drawHorizontalBarChart(canvasId, data, labelKey, valueKey, color, maxBars) {
            const canvas = document.getElementById(canvasId);
            const ctx = canvas.getContext('2d');
            const labels = data.map(d => d[labelKey]).slice(0, maxBars);
            const values = data.map(d => d[valueKey]).slice(0, maxBars);
            const barHeight = 30;
            const maxValue = Math.max(...values);
            const scale = (canvas.width - 100) / maxValue;

            // Clear the canvas before drawing
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            labels.forEach((label, index) => {
                const barWidth = values[index] * scale;
                const y = index * (barHeight + 10) + 20;

                // Draw bar
                ctx.fillStyle = color;
                ctx.fillRect(100, y, barWidth, barHeight);

                // Draw label
                ctx.fillStyle = '#ffffff';
                ctx.textAlign = 'right';
                ctx.fillText(label, 90, y + barHeight / 2 + 5);

                // Draw value
                ctx.textAlign = 'left';
                ctx.fillText(values[index], 100 + barWidth + 5, y + barHeight / 2 + 5);
            });
        }
    </script>
</body>
</html>
주요 변경 사항
차트 높이 고정:

각 차트의 최대 높이를 250px로 고정.
overflow-y: auto를 추가해 세로 스크롤을 사용할 수 있도록 설정.
막대 제한:

한 차트에 최대 5개의 막대만 표시하도록 JavaScript에서 slice 메서드를 사용.
데이터가 많아질 경우 스크롤을 통해 추가 막대를 확인 가능.
Canvas API 수정:

데이터가 많아도 최대 5개까지만 표시하도록 slice를 활용.
막대 높이와 간격은 고정.
반응형 UI:
