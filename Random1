vExpress 22.2 WinForms의 RibbonControl에 서로 다른 특징을 가진 10개의 커스텀 버튼을 동적으로 추가하고, 각 버튼의 세부 설정을 딕셔너리를 통해 관리하는 방법을 설명하겠습니다.

1. 버튼 설정을 위한 딕셔너리 구성:

각 버튼의 Caption, Tag, Image, RibbonStyle 등을 정의한 딕셔너리를 생성합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System.Collections.Generic;
using System.Drawing; // Image를 사용하기 위해 필요
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    // 버튼 설정을 저장할 딕셔너리
    private Dictionary<string, (string Caption, string Tag, Image Image, RibbonItemStyles Style)> buttonSettings =
        new Dictionary<string, (string, string, Image, RibbonItemStyles)>
        {
            { "btnNew", ("새로 만들기", "NewDocument", Properties.Resources.NewIcon, RibbonItemStyles.Large) },
            { "btnOpen", ("열기", "OpenDocument", Properties.Resources.OpenIcon, RibbonItemStyles.Large) },
            { "btnSave", ("저장", "SaveDocument", Properties.Resources.SaveIcon, RibbonItemStyles.Large) },
            { "btnPrint", ("인쇄", "PrintDocument", Properties.Resources.PrintIcon, RibbonItemStyles.Large) },
            { "btnCut", ("잘라내기", "CutText", Properties.Resources.CutIcon, RibbonItemStyles.SmallWithText) },
            { "btnCopy", ("복사", "CopyText", Properties.Resources.CopyIcon, RibbonItemStyles.SmallWithText) },
            { "btnPaste", ("붙여넣기", "PasteText", Properties.Resources.PasteIcon, RibbonItemStyles.SmallWithText) },
            { "btnUndo", ("실행 취소", "UndoAction", Properties.Resources.UndoIcon, RibbonItemStyles.SmallWithText) },
            { "btnRedo", ("다시 실행", "RedoAction", Properties.Resources.RedoIcon, RibbonItemStyles.SmallWithText) },
            { "btnHelp", ("도움말", "Help", Properties.Resources.HelpIcon, RibbonItemStyles.SmallWithText) }
        };

    public MainForm()
    {
        InitializeComponent();

        // 커스텀 버튼 추가 메서드 호출
        AddCustomButtons();

        // 체크박스 생성 및 설정
        CheckBox toggleButtonVisibilityCheckBox = new CheckBox
        {
            Text = "커스텀 버튼 표시",
            Checked = true, // 기본적으로 체크 상태 (버튼 표시)
            AutoSize = true,
            Dock = DockStyle.Top
        };

        // 체크박스의 체크 상태 변경 이벤트 핸들러 등록
        toggleButtonVisibilityCheckBox.CheckedChanged += ToggleButtonVisibilityCheckBox_CheckedChanged;

        // 체크박스를 폼에 추가
        this.Controls.Add(toggleButtonVisibilityCheckBox);
    }

    private void AddCustomButtons()
    {
        // RibbonControl 인스턴스가 'ribbonControl'이라고 가정합니다.

        // RibbonPage와 RibbonPageGroup 이름 정의
        string pageName = "CustomPage";
        string groupName = "CustomGroup";

        // RibbonPage 찾기
        RibbonPage page = ribbonControl.Pages.FirstOrDefault(p => p.Name == pageName);
        if (page == null)
        {
            // 페이지가 없으면 생성하여 추가
            page = new RibbonPage(pageName) { Text = "사용자 정의 페이지" };
            ribbonControl.Pages.Add(page);
        }

        // RibbonPageGroup 찾기
        RibbonPageGroup group = page.Groups.FirstOrDefault(g => g.Name == groupName);
        if (group == null)
        {
            // 그룹이 없으면 생성하여 추가
            group = new RibbonPageGroup(groupName) { Text = "사용자 정의 그룹" };
            page.Groups.Add(group);
        }

        // 딕셔너리를 순회하며 버튼 생성 및 추가
        foreach (var keyValue in buttonSettings)
        {
            string buttonName = keyValue.Key;
            var (caption, tag, image, style) = keyValue.Value;

            BarButtonItem newButton = new BarButtonItem
            {
                Name = buttonName,
                Caption = caption,
                Tag = tag,
                Id = ribbonControl.Manager.GetNewItemId(),
                ImageOptions = { Image = image },
                RibbonStyle = style
            };

            // 그룹에 새로운 버튼 추가
            group.ItemLinks.Add(newButton);
        }
    }

    private void ToggleButtonVisibilityCheckBox_CheckedChanged(object sender, System.EventArgs e)
    {
        CheckBox checkBox = sender as CheckBox;
        bool isChecked = checkBox.Checked;

        // 딕셔너리에 정의된 버튼들의 가시성 설정
        foreach (var keyValue in buttonSettings)
        {
            string buttonName = keyValue.Key;
            BarButtonItem button = ribbonControl.Items.OfType<BarButtonItem>().FirstOrDefault(b => b.Name == buttonName);
            if (button != null)
            {
                button.Visibility = isChecked ? BarItemVisibility.Always : BarItemVisibility.Never;
            }
        }
    }
}
코드 설명:

버튼 설정 딕셔너리 생성:

buttonSettings 딕셔너리는 버튼의 Name을 키로 사용하고, Caption, Tag, Image, RibbonStyle을 포함하는 튜플을 값으로 가집니다.
각 버튼의 Image는 Properties.Resources에서 가져오며, 이는 프로젝트 리소스에 추가된 이미지 파일을 참조합니다.
AddCustomButtons 메서드:

지정된 RibbonPage와 RibbonPageGroup이 존재하지 않으면 생성하여 추가합니다.
buttonSettings 딕셔너리를 순회하며 각 설정에 따라 BarButtonItem을 생성하고, 해당 그룹에 추가합니다.
체크박스를 통한 버튼 가시성 제어:

체크박스의 체크 상태에 따라 딕셔너리에 정의된 버튼들의 Visibility를 Always 또는 Never로 설정합니다.
참고 사항:

Properties.Resources는 프로젝트에 포함된 리소스 파일을 참조합니다. 각 아이콘 이미지를 프로젝트 리소스에 추가하고 적절한 이름을 지정해야 합니다.
RibbonItemStyles는 버튼의 표시 스타일을 정의하며, Large, SmallWithText, SmallWithoutText 등의 값을 가질 수 있습니다.
위의 코드를 통해 RibbonControl에 다양한 특징을 가진 10개의 커스텀

