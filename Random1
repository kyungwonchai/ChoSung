아래는 connectionStatusTextView를 추가한 XML 레이아웃 파일과 관련된 Kotlin 코드입니다. 이 코드들은 TextView를 레이아웃에 추가하고, SignalR 연결 상태를 표시할 수 있도록 설정합니다.

1. XML 레이아웃 (activity_main.xml)
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- RecyclerView for displaying the table -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_above="@id/connectionStatusTextView"
        android:layout_alignParentTop="true"
        android:layout_margin="8dp"
        android:layout_weight="1"/>

    <!-- TextView for displaying SignalR connection status -->
    <TextView
        android:id="@+id/connectionStatusTextView"
        android:layout_width="match_parent"
        android:layout_height="33dp"
        android:background="#EFEFEF"
        android:gravity="center"
        android:text="연결 상태를 표시합니다."
        android:textColor="#000000"
        android:layout_alignParentBottom="true"/>

</RelativeLayout>
RecyclerView: 데이터를 표시하기 위한 뷰입니다. 이 뷰는 connectionStatusTextView 위에 위치하도록 설정했습니다.
TextView (connectionStatusTextView): SignalR 연결 상태를 표시할 뷰입니다. 높이는 33dp로 설정했고, 화면의 하단에 고정되어 항상 보이도록 했습니다.
2. Kotlin 코드 (MainActivity.kt)
kotlin
코드 복사
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import com.microsoft.signalr.HubConnectionState
import kotlinx.coroutines.*

class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var connectionStatusTextView: TextView
    private lateinit var recyclerView: RecyclerView
    private var reconnectJob: Job? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // TextView와 RecyclerView 초기화
        connectionStatusTextView = findViewById(R.id.connectionStatusTextView)
        recyclerView = findViewById(R.id.recyclerView)

        setupRecyclerView()
        initializeSignalR()
    }

    private fun setupRecyclerView() {
        // RecyclerView 설정
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL))

        // 예제 데이터 설정
        val dataList = listOf(
            TableData("Column1", "Column2", "Column3", "Column4"),
            TableData("Data1", "Data2", "Data3", "Data4")
        )

        val adapter = TableAdapter(dataList)
        recyclerView.adapter = adapter
    }

    private fun initializeSignalR() {
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        hubConnection.on("ReceiveMessage", { message: String ->
            Log.d("SignalR", "Message received: $message")
            // 수신된 메시지에 따라 표를 업데이트하거나 다른 작업 수행
        }, String::class.java)

        startConnection()
    }

    private fun startConnection() {
        updateConnectionStatus("연결 시도 중...", "#FFA500") // 주황색

        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            try {
                hubConnection.start().blockingAwait()
                updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                reconnectJob?.cancel()
            } catch (e: Exception) {
                Log.e("SignalR", "Connection failed, retrying...", e)
                updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                retryConnection()
            }
        }

        hubConnection.onClosed {
            Log.e("SignalR", "Connection closed, retrying...")
            updateConnectionStatus("SignalR 연결 끊김 - 재시도 중...", "#FF0000") // 빨간색
            retryConnection()
        }
    }

    private fun retryConnection() {
        reconnectJob?.cancel()
        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            while (hubConnection.connectionState != HubConnectionState.CONNECTED) {
                try {
                    delay(2000) // 2초 대기 후 재연결 시도
                    hubConnection.start().blockingAwait()
                    updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                } catch (e: Exception) {
                    Log.e("SignalR", "Reconnection attempt failed", e)
                    updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                }
            }
        }
    }

    // 연결 상태를 업데이트하는 함수
    private fun updateConnectionStatus(status: String, color: String) {
        runOnUiThread {
            connectionStatusTextView.text = status
            connectionStatusTextView.setTextColor(android.graphics.Color.parseColor(color))
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        reconnectJob?.cancel()
        hubConnection.stop()
    }
}
설명
activity_main.xml:

TextView(connectionStatusTextView)는 화면의 가장 하단에 위치하며, SignalR의 연결 상태를 표시합니다.
RecyclerView는 그 위에 위치하여 표 형태의 데이터를 표시합니다.
MainActivity.kt:

connectionStatusTextView는 findViewById를 통해 초기화되며, SignalR의 연결 상태가 변경될 때마다 업데이트됩니다.