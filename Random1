retryCount... 부분에서 return new CommandResult(success=true, ...)를 사용하는데, 리턴 후에도 그 다음 줄이 실행되는 이유를 정확히 이해하려면 두 가지 가능성을 고려해야 합니다:

비동기 작업의 흐름 관리 문제 (예: await 또는 async 관련 오용)
반복문이나 메서드가 잘못된 구조로 설계되어 리턴이 제대로 중단되지 않는 경우
1. 비동기 작업에서의 흐름 관리 문제
비동기 작업(async/await)에서 return이 예상대로 동작하지 않을 수 있는 일반적인 원인 중 하나는, 비동기 작업이 제대로 기다려지지 않는 경우입니다.

예시 시나리오:
csharp
코드 복사
while (retryCount < maxRetries)
{
    // 비동기 함수 호출
    var result = await SomeAsyncTask();

    if (result.IsSuccess)
    {
        return new CommandResult(success: true);  // 성공 시 리턴
    }
    retryCount++;
}

// 이 줄이 리턴 이후에도 실행될 수 있음
DoSomethingElse();
원인:
await 키워드가 없는 경우: 비동기 함수가 실행되지만, 그 작업이 완료되기 전에 메서드가 계속 진행됩니다