구사항 정리
cursor.fetchall()로 데이터를 가져온다.

rows로 받아서 반복문으로 DataFrame을 구성한다 (df.insert).

매 행의 값으로 DataFrame을 채운다.

DataFrame에 스타일을 주고 표시한다.

코드의 가독성을 높이고 심플하게 작성한다.

✅ 수정된 Streamlit 코드
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 및 스타일 적용 함수
def create_dataframe(rows, prefix="MC"):
    # 컬럼 이름 설정 (내가 직접 지정)
    columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        f"{prefix}1", f"{prefix}2", f"{prefix}3", f"{prefix}4",
        f"{prefix}5", f"{prefix}6", f"{prefix}7", f"{prefix}8"
    ]

    # 빈 DataFrame 만들기
    df = pd.DataFrame(columns=columns)

    # 행 데이터를 DataFrame에 추가
    for row in rows:
        df.loc[len(df)] = row

    # act 컬럼들
    act_columns = [f"{prefix}{i}" for i in range(1, 9)]

    # 각 행의 최대값을 노란색으로 강조하는 스타일 적용
    def highlight_max(row):
        max_value = row[act_columns].max()
        return ['background-color: yellow' if v == max_value else '' for v in row]

    styled_df = df.style.apply(highlight_max, axis=1)
    return styled_df

# Streamlit 앱 구성
def main():
    st.set_page_config(layout="wide")
    st.title("Custom DataFrame with Styling (pandas 방식)")

    # 데이터 가져오기
    rows = fetch_main_data()

    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        prefix = st.text_input("Prefix 입력 (기본값: MC)", value="MC")
        
        # DataFrame 생성 및 스타일 적용
        styled_df = create_dataframe(rows, prefix)
        
        # Streamlit 표시
        st.write(styled_df)

if __name__ == "__main__":
    main()
✅ 코드 설명
데이터 가져오기 (fetch_main_data())

fetchall()을 사용하여 데이터를 리스트로 가져온다.

rows로 반환된다.

DataFrame 생성 (create_dataframe())

빈 DataFrame을 만들고 df.loc[len(df)] = row 방식으로 행을 추가한다.

컬럼 이름은 직접 지정한다.

스타일 적용 (highlight_max())

act2_1 ~ act2_8 열에서 최대값을 노란색으로 강조한다.

DataFrame의 .style.apply() 메서드를 사용하여 스타일을 적용한다.

Streamlit 출력 (st.write())

st.write()로 스타일링된 DataFrame을 표시한다.

📌 설치 필요 라이브러리
bash
코드 복사
pip install streamlit pymssql pandas
📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
✅ 코드 개선 사항
가독성을 위해 코드의 각 부분을 함수로 분리.

스타일을 간단하게 처리하도록 함 (highlight_max 함수).

df.insert() 대신 df.loc[len(df)] = row 방식으로 더 쉽게 추가.

st.write()로 DataFrame을 바로 표시.

🔥 결과 화면
프로시저로부터 데이터를 가져와서 DataFrame으로 변환 후 스타일링해서 출력한다.

최대값이 노란색으로 강조 표시된다.