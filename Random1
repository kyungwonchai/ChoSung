WPF에서 텍스트박스(txt1, txt2, txt3, txt4)의 값을 정수로만 입력받도록 제한하려면 PreviewTextInput 이벤트를 사용하여 입력값이 숫자인지 확인하고, 숫자가 아닌 값은 입력되지 않도록 설정할 수 있습니다.

또한, 포커스를 잃었을 때 저장하고, 폼을 열 때 값을 불러오는 기존 기능과 결합하여 코드 작성하겠습니다.

코드 예시
MainWindow.xaml
xml
코드 복사
<Window x:Class="LabelSaverApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Label Saver" Height="200" Width="400">
    <StackPanel Margin="20">
        <TextBox Name="txt1" Width="300" Margin="0,5" PreviewTextInput="TextBox_PreviewTextInput" LostFocus="TextBox_LostFocus"/>
        <TextBox Name="txt2" Width="300" Margin="0,5" PreviewTextInput="TextBox_PreviewTextInput" LostFocus="TextBox_LostFocus"/>
        <TextBox Name="txt3" Width="300" Margin="0,5" PreviewTextInput="TextBox_PreviewTextInput" LostFocus="TextBox_LostFocus"/>
        <TextBox Name="txt4" Width="300" Margin="0,5" PreviewTextInput="TextBox_PreviewTextInput" LostFocus="TextBox_LostFocus"/>
    </StackPanel>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

namespace LabelSaverApp
{
    public partial class MainWindow : Window
    {
        private readonly string folderPath = @"C:\agent\mySMD_v2\label";
        private readonly string filePath;

        public MainWindow()
        {
            InitializeComponent();

            // 파일 경로 설정 및 폴더 생성
            filePath = System.IO.Path.Combine(folderPath, "label분할..ini");
            Directory.CreateDirectory(folderPath);

            // 폼을 열 때 파일에서 값 로드
            LoadSettings();
        }

        // 텍스트박스의 포커스를 잃을 때 값을 저장하는 이벤트 핸들러
        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            SaveSettings();
        }

        // 숫자만 입력하도록 제한하는 이벤트 핸들러
        private void TextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)
        {
            // 입력값이 숫자인지 확인
            e.Handled = !int.TryParse(e.Text, out _);
        }

        // 파일에 값을 저장하는 함수
        private void SaveSettings()
        {
            using (StreamWriter writer = new StreamWriter(filePath))
            {
                writer.WriteLine($"txt1={txt1.Text}");
                writer.WriteLine($"txt2={txt2.Text}");
                writer.WriteLine($"txt3={txt3.Text}");
                writer.WriteLine($"txt4={txt4.Text}");
            }
        }

        // 파일에서 값을 로드하여 텍스트박스에 설정하는 함수
        private void LoadSettings()
        {
            if (!File.Exists(filePath)) return;

            using (StreamReader reader = new StreamReader(filePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    string[] parts = line.Split('=');
                    if (parts.Length == 2)
                    {
                        switch (parts[0])
                        {
                            case "txt1":
                                txt1.Text = parts[1];
                                break;
                            case "txt2":
                                txt2.Text = parts[1];
                                break;
                            case "txt3":
                                txt3.Text = parts[1];
                                break;
                            case "txt4":
                                txt4.Text = parts[1];
                                break;
                        }
                    }
                }
            }
        }
    }
}
설명
정수 입력 제한: TextBox_PreviewTextInput 이벤트 핸들러는 PreviewTextInput 이벤트에 연결되어, 사용자가 텍스트박스에 입력하는 값이 숫자가 아닌 경우 입력을 막습니다.

e.Handled = !int.TryParse(e.Text, out _)는 e.Text가 정수로 변환 가능한지 확인하고, 정수가 아닐 경우 입력을 무시(e.Handled = true)합니다.
포커스를 잃을 때 값 저장: TextBox_LostFocus 이벤트 핸들러는 포커스를 잃을 때 자동으로 값을 저장합니다.

값 로드: 폼을 열 때 LoadSettings 함수가 호출되어 label분할..ini 파일에 저장된 값을 로드합니다.

이 코드를 사용하면 텍스트박스는 정수 값만 입력받으며, 포커스를 잃으면 자동으로 값을 저장하고, 폼을 열 때 저장된 값을 로드합니다.




