raw.io에서 다이어그램을 그릴 때 사용하는 XML 기반 형식과 Mermaid 문법은 다이어그램을 정의하고 생성하는 방식에서 몇 가지 주요 차이점이 있습니다.

draw.io XML 형식과 Mermaid 문법 비교
특징	draw.io XML 형식 (<mxGraphModel>...</mxGraphModel>)	Mermaid (flowchart TD 등)
기본 개념	draw.io의 네이티브 파일 형식. 다이어그램의 모든 시각적 요소(도형, 선, 위치, 스타일 등)를 상세하게 기술하는 XML 기반 마크업 언어.	마크다운과 유사한 텍스트 기반 다이어그램 생성 도구. 코드를 작성하여 순서도, 시퀀스 다이어그램 등을 생성.
문법 및 구조	<mxCell> 등의 태그를 사용하여 각 요소의 ID, 값, 스타일, 부모-자식 관계, 연결 정보 등을 구체적으로 명시. 매우 상세하고 구조적.	flowchart TD (TopDown 순서도)와 같이 다이어그램 종류와 방향을 선언하고, A --> B[텍스트] 와 같이 노드와 관계를 간결하게 정의.
세밀한 제어	도형의 정확한 위치, 크기, 색상, 선의 굵기, 글꼴 등 거의 모든 시각적 속성을 세밀하게 제어 가능.	레이아웃이나 스타일의 세부 제어에는 한계가 있으며, 주로 자동 레이아웃에 의존. CSS를 통해 일부 스타일 변경 가능.
복잡성	다이어그램이 복잡해질수록 XML 코드의 양이 방대해지고 직접 수정하기 어려움. 주로 GUI 편집기의 결과물로 생성 및 사용.	문법이 비교적 단순하고 배우기 쉬워 텍스트로 빠르게 다이어그램을 기술하고 수정하기 용이.
가독성	사람이 직접 읽고 이해하기에는 다소 복잡. 기계가 처리하기에 적합.	코드가 직관적이고 간결하여 사람이 읽고 이해하기 쉬움. 버전 관리 시스템(예: Git)에서 변경 사항 추적이 용이.
사용 편의성	GUI 편집기를 통해 직관적으로 다이어그램을 그리는 방식에 익숙한 사용자에게 편리.	코드로 문서를 작성하는 개발자나 텍스트 기반 작업을 선호하는 사용자에게 적합. 키보드 중심 작업에 유리.
draw.io 지원	기본 저장/불러오기 형식. draw.io의 모든 기능을 완벽하게 지원.	draw.io 내에서 Mermaid 코드를 입력하여 다이어그램을 생성할 수 있는 기능 지원 (Arrange > Insert > Advanced > Mermaid). 생성된 다이어그램은 draw.io 도형으로 변환되거나 이미지로 삽입될 수 있음.
유연성 및 확장성	매우 높은 유연성. 다양한 종류의 다이어그램과 복잡한 구조 표현 가능.	지원하는 다이어그램 종류(순서도, 시퀀스, 간트 차트 등)가 정해져 있으며, 표현 방식에 제약이 있을 수 있음.
draw.io XML 형식 예시 (간략화)
XML

<mxGraphModel>
  <root>
    <mxCell id="0"/>
    <mxCell id="1" parent="0"/>
    <mxCell id="2" value="시작" style="ellipse;whiteSpace=wrap;html=1;" vertex="1" parent="1">
      <mxGeometry x="100" y="40" width="80" height="40" as="geometry"/>
    </mxCell>
    <mxCell id="3" value="처리" style="rounded=0;whiteSpace=wrap;html=1;" vertex="1" parent="1">
      <mxGeometry x="200" y="120" width="80" height="40" as="geometry"/>
    </mxCell>
    <mxCell id="4" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="2" target="3">
      <mxGeometry relative="1" as="geometry"/>
    </mxCell>
  </root>
</mxGraphModel>
이 XML 코드는 "시작"이라는 타원형 노드와 "처리"라는 사각형 노드, 그리고 둘을 연결하는 선을 정의합니다. 각 <mxCell> 요소는 도형이나 선의 ID, 값(표시될 텍스트), 스타일, 위치(geometry), 부모-자식 관계 등을 상세히 기술합니다.

Mermaid flowchart TD 문법 예시
코드 스니펫

flowchart TD
    A[시작] --> B{결정};
    B -- 예 --> C[처리1];
    B -- 아니오 --> D[처리2];
    C --> E[종료];
    D --> E;
이 Mermaid 코드는 "시작" 노드에서 "결정" 노드로, "결정" 노드에서 조건에 따라 "처리1" 또는 "처리2" 노드로 분기하고, 마지막으로 "종료" 노드로 이어지는 순서도를 나타냅니다. TD는 Top Down(위에서 아래로) 방향을 의미합니다. 문법이 XML보다 훨씬 간결하고 직관적입니다.

💡 결론
draw.io XML 형식: GUI 편집기를 통해 정교하고 세밀한 다이어그램을 만들고, 모든 시각적 요소를 완벽하게 제어하고 싶을 때 사용됩니다. draw.io의 기본 저장 형식입니다.
Mermaid 문법: 빠르고 간편하게 텍스트로 다이어그램의 구조를 기술하고, 코드처럼 관리하고 싶을 때 유용합니다. draw.io에서는 텍스트를 다이어그램으로 변환하는 기능으로 지원됩니다.
두 방식은 각각의 장단점이 있으므로, 사용자의 목적과 선호하는 작업 방식에 따라 적절한 것을 선택하거나 혼용할 수 있습니다. 예를 들어, Mermaid로 빠르게 초안을 잡고 draw.io 편집기에서 세부 디자인을 다듬을 수도 있습니다.

