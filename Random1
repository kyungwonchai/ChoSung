네, 알겠습니다. 온습도 값의 특성을 고려하여, OCR로 인식된 숫자가 다음 규칙에 따라 처리되도록 수정해 드리겠습니다:

정상 범위: 숫자는 항상 십의 자리까지가 정상입니다 (예: XX.X).
오인식 교정:
인식된 숫자가 100 이상이면 (예: 254는 25.4로, 1234는 12.3으로 간주),
기존에 점이 어디에 찍혔든 무시하고, 숫자의 십의 자리 바로 뒤에 새로운 소수점을 강제로 찍습니다. (즉, 맨 뒤에서 한 자리를 소수점으로 만듭니다).
그 외의 점은 모두 제거합니다.
이 로직은 MainWindow.xaml.cs 파일의 ProcessOcrResult 함수에서 수정됩니다. 모든 LogTrace 호출은 제거된 상태로 코드를 드리겠습니다.

## MainWindow.xaml.cs 전체 코드 (온습도 숫자 교정 로직 포함)
이전 MainWindow.xaml.cs 파일의 모든 내용을 지우고 아래 코드로 완전히 교체하세요.

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private Wpf.Threading.DispatcherTimer autoUpdateTargetTimer;

        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private string previewImagePath;
        private bool isExiting = false;
        private const string TARGET_PROCESS_PREFIX = "InlineTesterPBA";

        private TesseractEngine OcrEngine
        {
            get
            {
                if (_ocrEngine == null)
                {
                    string exePath = AppDomain.CurrentDomain.BaseDirectory;
                    string tessDataPath = Path.Combine(exePath, "tessdata");
                    _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
                    _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789."); // 마이너스 제외
                }
                return _ocrEngine;
            }
        }
        
        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }

        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            CheckRequiredFiles();
            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;
            searchTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(1) };
            searchTimer.Tick += SearchTimer_Tick;
            autoUpdateTargetTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(30) };
            autoUpdateTargetTimer.Tick += AutoUpdateTargetTimer_Tick;
            Directory.CreateDirectory(agentBasePath);
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
        }
        
        private void SearchTimer_Tick(object sender, EventArgs e)
        {
            lblStatus.Text = "대상 창/프로세스를 찾는 중... (1분마다 재시도)";
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd != IntPtr.Zero)
            {
                searchTimer.Stop();
                lblStatus.Text = "대상 발견! 자동 로깅을 시작합니다.";
                if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
            }
        }

        private void AutoUpdateTargetTimer_Tick(object sender, EventArgs e)
        {
            lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 갱신 중... (30초마다)";
            Process[] allProcesses = Process.GetProcesses();
            var candidateProcesses = allProcesses.Where(p => 
                p.ProcessName.StartsWith(TARGET_PROCESS_PREFIX, StringComparison.OrdinalIgnoreCase)
            ).ToList();

            if (candidateProcesses.Count == 1)
            {
                var foundProcess = candidateProcesses[0];
                string newTargetName = foundProcess.ProcessName;
                if (txtTarget.Text != newTargetName || rbFindByProcess.IsChecked == false) 
                {
                    autoUpdateTargetTimer.Stop(); 
                    txtTarget.Text = newTargetName;
                    rbFindByProcess.IsChecked = true; 
                    SearchMethod_Changed(null, null); 
                    SaveApplicationSettings(); 
                    lblStatus.Text = $"대상 프로세스가 '{newTargetName}'(으)로 자동 변경/설정되었습니다. 로깅 재시작 시도.";
                    if (isLocked && !string.IsNullOrWhiteSpace(txtPcName.Text) && !timer.IsEnabled)
                    {
                        btnStart_Click(this, new RoutedEventArgs()); 
                    }
                }
                else
                {
                     lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 확인됨 ({newTargetName}). 변경 없음.";
                     autoUpdateTargetTimer.Stop(); 
                     if (!timer.IsEnabled && !searchTimer.IsEnabled && GetTargetWindowHandle() == IntPtr.Zero)
                     {
                        searchTimer.Start();
                        lblStatus.Text = $"대상 프로세스 '{newTargetName}'의 창 핸들 재탐색 중 (1분 간격).";
                     }
                }
            }
            else if (candidateProcesses.Count > 1)
            {
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스가 여러 개({candidateProcesses.Count}개) 발견되어 자동 갱신 불가.";
            }
            else
            {
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스를 찾지 못함. 자동 갱신 계속 시도.";
            }
        }

        private void CheckRequiredFiles()
        {
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string[] requiredFiles = { "tesseract53.dll", "leptonica-1.83.1.dll" }; 
            foreach (var file in requiredFiles)
            {
                if (!File.Exists(Path.Combine(exePath, file)))
                {
                    MessageBox.Show($"실행에 필수적인 파일이 없습니다: {file}\n\nClickOnce 게시 설정에서 모든 관련 파일이 '포함(Include)'되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return;
                }
            }
            if (!Directory.Exists(Path.Combine(exePath, "tessdata")))
            {
                MessageBox.Show("tessdata 폴더를 찾을 수 없습니다.\n\nClickOnce 게시 설정에서 tessdata 폴더와 그 안의 파일들이 포함되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return;
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            txtTarget.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (Settings.Default.SearchByProcessName) { rbFindByProcess.IsChecked = true; }
            else { rbFindByTitle.IsChecked = true; }
            SearchMethod_Changed(null, null); 

            if (File.Exists(previewImagePath))
            {
                try
                {
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                }
                catch { }
            }
            UpdateLockState(true);
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && !string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd != IntPtr.Zero)
                {
                    if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
                }
                else 
                {
                    lblStatus.Text = "기존 설정 대상을 찾을 수 없어, 1분마다 일반 재검색을 시작합니다.";
                    if(!searchTimer.IsEnabled) searchTimer.Start();
                }
            }
            else if (!string.IsNullOrWhiteSpace(txtPcName.Text) && rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 감지를 시작합니다 (30초 간격).";
                if (!autoUpdateTargetTimer.IsEnabled) autoUpdateTargetTimer.Start();
            }
        }
        
        private void SaveApplicationSettings()
        {
            Settings.Default.WindowTitle = txtTarget.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
            Settings.Default.Save();
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            SaveApplicationSettings();
            lblStatus.Text = $"상태: {DateTime.Now:T} - 설정이 저장되었습니다.";
            MessageBox.Show("설정이 저장되었습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoUpdateTargetTimer.IsEnabled)
            {
                MessageBox.Show("로깅 또는 대상 탐색/자동갱신이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);

            if (isLocked)
            {
                SaveApplicationSettings();
                lblStatus.Text = $"상태: {DateTime.Now:T} - 변경된 설정이 저장되었습니다.";
                if (rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text) && !string.IsNullOrWhiteSpace(txtPcName.Text))
                {
                     if (!autoUpdateTargetTimer.IsEnabled) autoUpdateTargetTimer.Start();
                     lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 감지를 시작합니다 (30초 간격).";
                }
            }
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtTarget.IsReadOnly = isLocked;
            rbFindByTitle.IsEnabled = !isLocked;
            rbFindByProcess.IsEnabled = !isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            btnSaveSettings.IsEnabled = !isLocked; 

            if (isLocked) { btnToggleEdit.Content = "수정"; txtPcName.Background = Wpf.Media.Brushes.LightGray; txtTarget.Background = Wpf.Media.Brushes.LightGray; }
            else { btnToggleEdit.Content = "잠금"; txtPcName.Background = Wpf.Media.Brushes.White; txtTarget.Background = Wpf.Media.Brushes.White; }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoUpdateTargetTimer.IsEnabled)
            {
                timer.Stop();
                searchTimer.Stop();
                autoUpdateTargetTimer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 모든 작업이 중지되었습니다.";
            }
            else
            {
                searchTimer.Stop(); 
                autoUpdateTargetTimer.Stop();

                if (!isLocked) { MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information); return; }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtTarget.Text)) { MessageBox.Show("PC이름과 대상(창 제목/프로세스 이름)을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error); return; }
                
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) 
                { 
                    lblStatus.Text = "상태: 오류! 대상을 찾을 수 없어 일반 재탐색을 시작합니다.";
                    if(!searchTimer.IsEnabled) searchTimer.Start(); 
                    return; 
                }
                
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return;
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
        }
        
        private IntPtr GetTargetWindowHandle()
        {
            string targetInput = txtTarget.Text; 
            string searchMethod = rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름";
            if (string.IsNullOrWhiteSpace(targetInput)) return IntPtr.Zero;
            if (rbFindByTitle.IsChecked == true) { return FindWindow(null, targetInput); }
            else
            {
                string prefixToSearch = targetInput.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(targetInput) : targetInput;
                Process[] allProcesses = Process.GetProcesses();
                var foundProcesses = allProcesses.Where(p => p.ProcessName.StartsWith(prefixToSearch, StringComparison.OrdinalIgnoreCase)).ToList();
                if (foundProcesses.Count == 0) return IntPtr.Zero;
                var processWithWindow = foundProcesses.FirstOrDefault(p => p.MainWindowHandle != IntPtr.Zero);
                return processWithWindow?.MainWindowHandle ?? IntPtr.Zero;
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { isExiting = true; this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting) { e.Cancel = true; this.Hide(); }
            else
            {
                SaveApplicationSettings();
                MyNotifyIcon.Dispose();
                _ocrEngine?.Dispose();
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }

        private void PerformLogging()
        {
            Gdi.Rectangle cropArea = Gdi.Rectangle.Empty;
            Gdi.Size bmpSize = Gdi.Size.Empty;
            try
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    if (rbFindByProcess.IsChecked == true && !autoUpdateTargetTimer.IsEnabled && !searchTimer.IsEnabled)
                    {
                        timer.Stop(); 
                        autoUpdateTargetTimer.Start(); 
                        lblStatus.Text = $"현재 대상({txtTarget.Text})을 찾을 수 없습니다. '{TARGET_PROCESS_PREFIX}' 자동 갱신 시작 (30초 간격).";
                    }
                    else if (!searchTimer.IsEnabled && !autoUpdateTargetTimer.IsEnabled) 
                    {
                        timer.Stop();
                        searchTimer.Start();
                        lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다.";
                    }
                    return;
                }
                if (searchTimer.IsEnabled) searchTimer.Stop();
                if (autoUpdateTargetTimer.IsEnabled) autoUpdateTargetTimer.Stop();
                if (IsIconic(hWnd)) { lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다."; return; }
                bmpSize = new Gdi.Size(width, height);
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        timer.Stop(); btnStart.Content = "로깅 시작"; lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) { using (var page = OcrEngine.Process(croppedBmp)) { string rawText = page.GetText().Trim(); if (!string.IsNullOrWhiteSpace(rawText)) { ProcessOcrResult(rawText); } else { lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다."; } } }
                }
            }
            catch (Exception ex)
            {
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                if (autoUpdateTargetTimer.IsEnabled) autoUpdateTargetTimer.Stop();
                btnStart.Content = "로깅 시작";
                var sb = new StringBuilder();
                sb.AppendLine("캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.");
                sb.AppendLine("==============================================");
                sb.AppendLine($"[진단 정보]");
                sb.AppendLine($"전체 창 크기: {bmpSize.Width} x {bmpSize.Height}");
                sb.AppendLine($"잘라낼 영역 (X,Y,W,H): {cropArea.X}, {cropArea.Y}, {cropArea.Width}, {cropArea.Height}");
                sb.AppendLine("==============================================");
                Exception currentEx = ex;
                int indentLevel = 0;
                while (currentEx != null)
                {
                    sb.AppendLine($"\n[오류 레벨 {indentLevel}] {(indentLevel == 1 ? "(진짜 원인일 가능성이 높음)" : "")}");
                    sb.AppendLine($"  - 오류 유형: {currentEx.GetType().Name}");
                    sb.AppendLine($"  - 메시지: {currentEx.Message}");
                    sb.AppendLine($"  - 스택 트레이스:\n{currentEx.StackTrace}");
                    currentEx = currentEx.InnerException;
                    indentLevel++;
                }
                MessageBox.Show(sb.ToString(), "캡처 상세 오류 보고", MessageBoxButton.OK, MessageBoxImage.Error);
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        // ##################################################################
        // ## 여기가 핵심 수정 부분입니다. (온습도 숫자 교정 로직) ##
        // ##################################################################
        private void ProcessOcrResult(string rawText) 
        {
            string originalPart1 = "";
            string originalPart2 = "";
            string finalPart1 = "";
            string finalPart2 = "";

            try
            {
                string processedText = rawText.Replace("-", ""); // 마이너스 기호는 이미 whitelist에서 제외됨
                string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length != 2) 
                { 
                    lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)"; 
                    return; 
                }
            
                originalPart1 = parts[0];
                originalPart2 = parts[1];

                finalPart1 = FormatTemperatureHumidityValue(originalPart1);
                finalPart2 = FormatTemperatureHumidityValue(originalPart2);

                if (decimal.TryParse(finalPart1, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal val1) && 
                    decimal.TryParse(finalPart2, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal val2))
                {
                    // 최종적으로 소수점 첫째 자리까지만 사용 (Math.Truncate는 이미 소수점 한자리로 만듦)
                    UploadToDatabase(val1, val2);
                }
                else 
                { 
                    lblStatus.Text = $"상태: 숫자 변환 오류 (가공 후: {finalPart1},{finalPart2} / 원본: {originalPart1},{originalPart2})"; 
                }
            }
            catch (Exception ex)
            {
                 lblStatus.Text = $"ProcessOcrResult 오류: {ex.Message}";
                 // 필요시 상세 오류 로깅 또는 메시지 박스 추가
            }
        }

        private string FormatTemperatureHumidityValue(string inputValue)
        {
            if (string.IsNullOrWhiteSpace(inputValue)) return "";

            // 1. 숫자와 점(.)만 남기고 모든 다른 문자 제거
            string numericString = Regex.Replace(inputValue, @"[^0-9.]", "");

            // 2. 점이 여러 개 있다면 첫 번째 점만 남기고 나머지는 제거
            int firstDotIndex = numericString.IndexOf('.');
            if (firstDotIndex != -1)
            {
                string beforeFirstDot = numericString.Substring(0, firstDotIndex + 1);
                string afterFirstDot = numericString.Substring(firstDotIndex + 1).Replace(".", "");
                numericString = beforeFirstDot + afterFirstDot;
            }

            // 3. 숫자만 남은 문자열을 기준으로 값 크기 판단 및 소수점 재조정
            //    TryParse를 위해 임시로 소수점을 제거하고 정수로 변환하여 크기 비교
            string tempForCheck = numericString.Replace(".", "");
            if (long.TryParse(tempForCheck, out long longValue))
            {
                // 숫자가 1000 이상이면 (예: 254는 25.4, 1234는 12.3을 의미)
                // 즉, 인식된 정수 부분이 세자리 이상이면 (XX.X 형태가 정상)
                if (longValue >= 1000 && tempForCheck.Length >= 3) // 예: 1234 (원래 12.34), 254 (원래 25.4)
                {
                    // 맨 뒤에서 한자리를 소수점으로 만듦 (십의 자리 뒤에 점)
                    numericString = tempForCheck.Insert(tempForCheck.Length - 1, ".");
                }
                // 숫자가 100.0 ~ 999.9 사이 (예: 254는 25.4)
                // 즉, 인식된 정수 부분이 두자리이면서, 전체 숫자가 100보다 크면 (XX.X 형태가 정상)
                // 또는 정수 부분이 세자리인데, 소수점이 이미 올바르게 찍혀있다면 (예: 12.3 -> 123, 12.3 유지)
                // 이 조건은 "100보다 크다면 십의자리 뒤에 점" 규칙을 적용
                else if (longValue >= 1000 && tempForCheck.Length < 3) // 예: 123인데 원래 1.23 이었다면? -> 이 로직으로는 12.3이 됨. 온습도 특성상 드묾.
                {
                     // 특별한 처리 없이 넘어감. 아래 TryParse에서 처리되거나, 오류로 처리됨.
                }
                else if (numericString.Contains(".") && decimal.TryParse(numericString, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal existingDecimal) && existingDecimal >= 100.0m)
                {
                    // 이미 소수점이 있고 100이 넘는다면, 정수 부분 기준으로 마지막에서 두번째에 점을 찍음
                    string integerPart = tempForCheck; // 점 제거한 문자열
                    if (integerPart.Length >= 3)
                    {
                         numericString = integerPart.Insert(integerPart.Length - 1, ".");
                    }
                }
                 else if (!numericString.Contains(".") && tempForCheck.Length >= 3 && longValue >= 100) // 점이 없고 세자리 이상 숫자 (100보다 크면)
                {
                     numericString = tempForCheck.Insert(tempForCheck.Length - 1, ".");
                }

            }

            // 최종적으로 decimal로 변환 시도 후, 소수점 한자리로 자르기
            if (decimal.TryParse(numericString, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal finalValue))
            {
                return (Math.Truncate(finalValue * 10) / 10m).ToString("F1", System.Globalization.CultureInfo.InvariantCulture);
            }

            return inputValue; // 변환 실패 시 원본 반환 (또는 오류 처리)
        }


        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName)) { lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다."; return; }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;"; 
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                conn = new MySqlConnection(connectionString);
                conn.Open();
                trans = conn.BeginTransaction();
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.Clear();
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    rowsAffected = cmd.ExecuteNonQuery();
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    cmd.ExecuteNonQuery();
                }
                trans.Commit();
                if (rowsAffected > 0) { lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!"; }
                else { lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)"; }
            }
            catch (Exception ex)
            {
                try { trans?.Rollback(); } catch { }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally { conn?.Close(); }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd == IntPtr.Zero) { MessageBox.Show("먼저 유효한 '대상 창/프로세스 이름'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) return;
                if (IsIconic(hWnd)) { MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); imgPreview.Source = null; return; }
                if (!int.TryParse(txtX.Text, out int capX) || !int.TryParse(txtY.Text, out int capY) || !int.TryParse(txtWidth.Text, out int capW) || !int.TryParse(txtHeight.Text, out int capH) || capW <= 0 || capH <= 0)
                { imgPreview.Source = null; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) return;
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    var cropArea = new Gdi.Rectangle(capX, capY, capW, capH);
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    { imgPreview.Source = null; MessageBox.Show("미리보기를 위한 캡처 영역이 창 크기를 벗어났습니다. 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) { imgPreview.Source = BitmapToImageSource(croppedBmp); croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png); }
                }
            }
            catch { }
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }
}
&lt;/details>

