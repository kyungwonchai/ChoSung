네, 공유 폴더에 있는 PDF 파일을 열어 각 페이지를 좌우로 2등분한 후, 왼쪽 영역에 있는 모든 1D 바코드를 순서대로 인식하여 출력하는 파이썬 코드를 알려드리겠습니다.

이 작업은 여러 라이브러리를 조합하여 수행할 수 있습니다. PDF 처리를 위해 PyMuPDF (fitz)를, 이미지 처리 및 바코드 인식을 위해 OpenCV와 pyzbar를 사용하겠습니다.

사전 준비: 라이브러리 설치
먼저, 코드 실행에 필요한 라이브러리들을 설치해야 합니다. 터미널 또는 명령 프롬프트에 아래 명령어를 입력하여 설치해주세요.

Bash

pip install PyMuPDF opencv-python pyzbar
파이썬 코드 예제
아래 코드는 지정된 경로의 PDF 파일을 읽어, 각 페이지의 왼쪽 절반에 있는 1D 바코드를 위에서 아래 순서로 찾아 그 값을 출력합니다.

주요 로직:

PDF 파일 열기: fitz.open()를 사용하여 공유 폴더에 있는 PDF 파일을 엽니다.

페이지 순회: PDF의 모든 페이지를 하나씩 반복합니다.

페이지 이미지 변환: 각 페이지를 고해상도 이미지(pixmap)로 변환합니다.

이미지 좌측 분할: 변환된 이미지를 numpy 배열로 바꾸고, 가로 길이를 기준으로 절반을 나누어 왼쪽 영역만 잘라냅니다.

바코드 인식: pyzbar.decode()를 사용하여 잘라낸 왼쪽 이미지에서 바코드를 찾습니다.

결과 정렬 및 출력: 찾은 바코드들을 y축 좌표(위에서 아래) 기준으로 정렬하고, 페이지 번호와 함께 인식된 바코드 값을 순서대로 출력합니다.

Python

import fitz  # PyMuPDF
import cv2
import numpy as np
from pyzbar import pyzbar
import os

def decode_barcodes_from_pdf_left_half(pdf_path):
    """
    PDF 파일의 각 페이지 왼쪽 절반에 있는 1D 바코드를 인식하여 순서대로 출력합니다.

    Args:
        pdf_path (str): 분석할 PDF 파일의 전체 경로.
    """
    # 공유 폴더 경로에 파일이 존재하는지 확인
    if not os.path.exists(pdf_path):
        print(f"오류: 파일을 찾을 수 없습니다. 경로를 확인해주세요: {pdf_path}")
        return

    try:
        # PDF 파일 열기
        pdf_document = fitz.open(pdf_path)
    except Exception as e:
        print(f"오류: PDF 파일을 여는 중 문제가 발생했습니다: {e}")
        return

    print(f"총 {pdf_document.page_count} 페이지의 PDF 파일을 분석합니다.\n")

    # 모든 페이지를 순회
    for page_number in range(len(pdf_document)):
        page = pdf_document.load_page(page_number)

        # 페이지를 고해상도 이미지로 변환 (DPI를 높여 인식률 향상)
        pixmap = page.get_pixmap(dpi=300)
        
        # pixmap을 OpenCV에서 처리 가능한 numpy 배열로 변환
        image_bytes = np.frombuffer(pixmap.samples, dtype=np.uint8)
        image = image_bytes.reshape(pixmap.height, pixmap.width, pixmap.n)

        # RGB 이미지를 OpenCV에서 사용하기 쉬운 BGR 형태로 변환
        if pixmap.n == 4: # RGBA
             image = cv2.cvtColor(image, cv2.COLOR_RGBA2BGR)
        elif pixmap.n == 3: # RGB
             image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

        # 이미지의 높이와 너비 가져오기
        height, width, _ = image.shape
        
        # 이미지의 왼쪽 절반만 잘라내기
        left_half_width = width // 2
        left_half_image = image[:, :left_half_width]

        # 그레이스케일로 변환하여 바코드 인식률 향상
        gray_image = cv2.cvtColor(left_half_image, cv2.COLOR_BGR2GRAY)

        # pyzbar를 사용하여 바코드 찾기
        detected_barcodes = pyzbar.decode(gray_image)

        if detected_barcodes:
            # 바코드를 y 좌표(위에서 아래) 기준으로 정렬
            # rect.top은 바코드의 최상단 y 좌표
            sorted_barcodes = sorted(detected_barcodes, key=lambda b: b.rect.top)
            
            print(f"--- 페이지 {page_number + 1} (왼쪽 영역) ---")
            for i, barcode in enumerate(sorted_barcodes):
                # 바코드 데이터를 utf-8로 디코딩
                barcode_data = barcode.data.decode('utf-8')
                barcode_type = barcode.type
                
                # 1D 바코드만 필터링 (필요시)
                # pyzbar가 인식하는 1D 바코드 종류: CODE39, CODE128, EAN13 등
                if barcode_type != 'QRCODE': # QR코드 등 2D 바코드는 제외
                    print(f"  {i+1}. 인식된 바코드 값: {barcode_data} (타입: {barcode_type})")
            print("-" * (25 + len(str(page_number+1))))
            
    # PDF 문서 객체 닫기
    pdf_document.close()

# --- 실행 부분 ---
if __name__ == "__main__":
    # 🚨 사용 전 확인: 공유 폴더 경로와 파일명을 정확하게 입력해주세요.
    # 예시: "\\\\servername\\share\\folder\\document.pdf" (Windows)
    # 예시: "/mnt/share/folder/document.pdf" (Linux)
    shared_folder_pdf_path = "\\\\192.168.0.100\\shared_docs\\sample.pdf"
    
    decode_barcodes_from_pdf_left_half(shared_folder_pdf_path)

코드 사용 방법 및 참고사항
파일 경로 설정: shared_folder_pdf_path 변수에 실제 공유 폴더에 있는 PDF 파일의 전체 경로를 정확하게 입력해야 합니다.

Windows 예시: r"\\서버이름\공유폴더명\파일이름.pdf" 또는 r"\\192.168.1.100\공유폴더\파일.pdf" 와 같이 Raw string (r"...")을 사용하거나 백슬래시를 두 번 (\\) 사용해야 합니다.

Linux/macOS 예시: /mnt/공유폴더명/파일이름.pdf 와 같이 마운트된 경로를 사용합니다.

인식 순서: 코드는 바코드의 위치를 기준으로 위에서 아래 순서로 정렬하여 출력합니다. 만약 같은 높이에 여러 바코드가 있다면, 그들 사이의 좌우 순서는 보장되지 않을 수 있습니다. (하지만 왼쪽 영역만 보므로 대부분의 경우 문제가 되지 않습니다.)

바코드 종류: pyzbar는 CODE39, CODE128, EAN, UPC 등 다양한 종류의 1D 바코드를 지원합니다. 코드 내에서 barcode.type을 통해 인식된 바코드의 종류도 함께 출력하도록 했습니다. if barcode_type != 'QRCODE' 부분을 통해 2D 바코드를 제외하고 1D 바코드만 출력하도록 설정할 수 있습니다.

인식률: PDF의 해상도나 바코드의 상태(훼손, 흐림 등)에 따라 인식률이 달라질 수 있습니다. 코드에서 dpi=300으로 설정하여 페이지를 고해상도 이미지로 변환함으로써 인식률을 높였습니다. 필요에 따라 이 값을 조절할 수 있습니다.