래는 각 COM 포트에 대해 보드레이트(Baud Rate), 패리티(Parity), 데이터 비트(Data Bits), 스톱 비트(Stop Bits) 설정을 할 수 있도록 콤보박스를 추가하고, 이러한 설정을 저장할 수 있는 WPF 애플리케이션의 전체 코드입니다.

1. XAML (MainWindow.xaml)
모든 COM 포트에 대해 설정할 수 있는 4개의 콤보박스를 추가했습니다. 각 콤보박스는 우측에 위치하며, 해당 설정을 선택할 수 있습니다.

xml
코드 복사
<Window x:Class="ComPortScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Scanner" Height="600" Width="1000">
    <Grid>
        <!-- 스캐너 포트 -->
        <TextBlock Text="스캐너 포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <ComboBox Name="ScannerPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,10,0,0" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,10,0,0" Click="ClearScannerPortSelection_Click" Tag="{Binding ElementName=ScannerPortComboBox}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,10,0,0"/>
        <ComboBox Name="ScannerBaudRateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,10,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,10,0,0"/>
        <ComboBox Name="ScannerParityComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,10,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,10,0,0"/>
        <ComboBox Name="ScannerDataBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,10,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,10,0,0"/>
        <ComboBox Name="ScannerStopBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,10,0,0"/>
        
        <!-- 보낼 포트 1 -->
        <TextBlock Text="보낼 포트 1:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,50,0,0"/>
        <ComboBox Name="TargetPortComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,50,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,50,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox1}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,50,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,50,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,50,0,0"/>
        <ComboBox Name="TargetParityComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,50,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,50,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,50,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,50,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,50,0,0"/>
        
        <!-- 보낼 포트 2 -->
        <TextBlock Text="보낼 포트 2:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,90,0,0"/>
        <ComboBox Name="TargetPortComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,90,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,90,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox2}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,90,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,90,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,90,0,0"/>
        <ComboBox Name="TargetParityComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,90,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,90,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,90,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,90,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,90,0,0"/>
        
        <!-- 보낼 포트 3 -->
        <TextBlock Text="보낼 포트 3:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,130,0,0"/>
        <ComboBox Name="TargetPortComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,130,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,130,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox3}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,130,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,130,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,130,0,0"/>
        <ComboBox Name="TargetParityComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,130,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,130,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,130,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,130,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,130,0,0"/>
        
        <!-- 보낼 포트 4 -->
        <TextBlock Text="보낼 포트 4:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,170,0,0"/>
        <ComboBox Name="TargetPortComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,170,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,170,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox4}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,170,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,170,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,170,0,0"/>
        <ComboBox Name="TargetParityComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,170,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,170,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,170,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,170,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,170,0,0"/>
        
        <!-- 보낼 포트 5 -->
        <TextBlock Text="보낼 포트 5:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,210,0,0"/>
        <ComboBox Name="TargetPortComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,210,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="310,210,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox5}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,210,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="430,210,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="540,210,0,0"/>
        <ComboBox Name="TargetParityComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,210,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,210,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,210,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,210,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,210,0,0"/>
        
        <Button Content="Refresh Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="10,250,0,0" Click="RefreshPorts_Click"/>

        <TextBox Name="DataTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="420" Height="50" Margin="10,300,0,0"/>
        <Button Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,300,0,0" Click="SendData_Click"/>
        <TextBlock Name="StatusTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,360,0,0" Width="500" Height="30" Text="Status: Not Connected"/>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="150" Margin="10,400,0,0"/>
    </Grid>
</Window>
2. C# (MainWindow.xaml.cs)
이제 각 포트의 설정 값(보드레이트, 패리티, 데이터 비트, 스톱 비트)을 선택하고 저장할 수 있도록 코드를 수정합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _scannerPort; // 스캐너가 연결된 시리얼 포트 객체
        private SerialPort[] _targetPorts = new SerialPort[5]; // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100; // 로그 표시의 최대 개수
        private const string SettingsFilePath = @"C:\agent\scanvaluetran\settings.config"; // 설정 파일 경로
        private Configuration config;

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                EnsureSettingsFileExists(); // 설정 파일이 존재하지 않으면 생성
                LoadConfiguration(); // 설정 파일을 불러옴
                InitializePortSettings(); // 설정 콤보박스 초기화
                LoadLastUsedPorts(); // 마지막으로 사용된 포트 설정 불러오기
                RefreshPorts(); // 포트 목록 갱신
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
                MessageBox.Show($"프로그램 초기화 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EnsureSettingsFileExists()
        {
            try
            {
                // 설정 파일이 있는 디렉토리가 없으면 생성
                string directory = System.IO.Path.GetDirectoryName(SettingsFilePath);
                if (!System.IO.Directory.Exists(directory))
                {
                    System.IO.Directory.CreateDirectory(directory);
                }

                // 설정 파일이 없으면 생성
                if (!System.IO.File.Exists(SettingsFilePath))
                {
                    var configFileMap = new System.Configuration.ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                    Configuration config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFileMap, System.Configuration.ConfigurationUserLevel.None);

                    config.Save(System.Configuration.ConfigurationSaveMode.Full);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 생성 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 생성 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadConfiguration()
        {
            try
            {
                var configFileMap = new System.Configuration.ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFileMap, System.Configuration.ConfigurationUserLevel.None);
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 불러오기 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 불러오기 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void InitializePortSettings()
        {
            // 보드레이트 설정
            string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
            InitializeComboBox(ScannerBaudRateComboBox, baudRates);
            InitializeComboBox(TargetBaudRateComboBox1, baudRates);
            InitializeComboBox(TargetBaudRateComboBox2, baudRates);
            InitializeComboBox(TargetBaudRateComboBox3, baudRates);
            InitializeComboBox(TargetBaudRateComboBox4, baudRates);
            InitializeComboBox(TargetBaudRateComboBox5, baudRates);

            // 패리티 설정
            string[] parityValues = Enum.GetNames(typeof(Parity));
            InitializeComboBox(ScannerParityComboBox, parityValues);
            InitializeComboBox(TargetParityComboBox1, parityValues);
            InitializeComboBox(TargetParityComboBox2, parityValues);
            InitializeComboBox(TargetParityComboBox3, parityValues);
            InitializeComboBox(TargetParityComboBox4, parityValues);
            InitializeComboBox(TargetParityComboBox5, parityValues);

            // 데이터 비트 설정
            string[] dataBits = { "5", "6", "7", "8" };
            InitializeComboBox(ScannerDataBitsComboBox, dataBits);
            InitializeComboBox(TargetDataBitsComboBox1, dataBits);
            InitializeComboBox(TargetDataBitsComboBox2, dataBits);
            InitializeComboBox(TargetDataBitsComboBox3, dataBits);
            InitializeComboBox(TargetDataBitsComboBox4, dataBits);
            InitializeComboBox(TargetDataBitsComboBox5, dataBits);

            // 스톱 비트 설정
            string[] stopBits = Enum.GetNames(typeof(StopBits));
            InitializeComboBox(ScannerStopBitsComboBox, stopBits);
            InitializeComboBox(TargetStopBitsComboBox1, stopBits);
            InitializeComboBox(TargetStopBitsComboBox2, stopBits);
            InitializeComboBox(TargetStopBitsComboBox3, stopBits);
            InitializeComboBox(TargetStopBitsComboBox4, stopBits);
            InitializeComboBox(TargetStopBitsComboBox5, stopBits);
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items)
        {
            comboBox.ItemsSource = items;
            comboBox.SelectedIndex = 0; // 기본값 설정
        }

        private void LoadLastUsedPorts()
        {
            // 스캐너 포트 설정 로드
            string lastUsedScannerPort = GetSetting("LastUsedScannerPort");
            string scannerBaudRate = GetSetting("ScannerBaudRate");
            string scannerParity = GetSetting("ScannerParity");
            string scannerDataBits = GetSetting("ScannerDataBits");
            string scannerStopBits = GetSetting("ScannerStopBits");

            if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
            {
                ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                ScannerParityComboBox.SelectedItem = scannerParity;
                ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
            }
            else
            {
                LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }

            // 각 보낼 포트에 대해 설정 로드 및 연결
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                string key = $"LastUsedTargetPort{i + 1}";
                string lastUsedTargetPort = GetSetting(key);
                string targetBaudRate = GetSetting($"{key}BaudRate");
                string targetParity = GetSetting($"{key}Parity");
                string targetDataBits = GetSetting($"{key}DataBits");
                string targetStopBits = GetSetting($"{key}StopBits");

                ComboBox targetComboBox = GetTargetPortComboBox(i);
                ComboBox baudRateComboBox = GetTargetBaudRateComboBox(i);
                ComboBox parityComboBox = GetTargetParityComboBox(i);
                ComboBox dataBitsComboBox = GetTargetDataBitsComboBox(i);
                ComboBox stopBitsComboBox = GetTargetStopBitsComboBox(i);

                if (!string.IsNullOrEmpty(lastUsedTargetPort) && SerialPort.GetPortNames().Contains(lastUsedTargetPort))
                {
                    targetComboBox.SelectedItem = lastUsedTargetPort;
                    baudRateComboBox.SelectedItem = targetBaudRate;
                    parityComboBox.SelectedItem = targetParity;
                    dataBitsComboBox.SelectedItem = targetDataBits;
                    stopBitsComboBox.SelectedItem = targetStopBits;

                    OpenPort(ref _targetPorts[i], lastUsedTargetPort, targetComboBox, targetBaudRate, targetParity, targetDataBits, targetStopBits);
                }
                else
                {
                    LogMessage($"마지막으로 사용한 보낼 포트 {i + 1}를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }
            }
        }

        private string GetSetting(string key)
        {
            if (config.AppSettings.Settings[key] == null)
            {
                config.AppSettings.Settings.Add(key, string.Empty);
                config.Save(System.Configuration.ConfigurationSaveMode.Modified);
            }
            return config.AppSettings.Settings[key].Value;
        }

        private void SaveSetting(string key, string value)
        {
            if (config.AppSettings.Settings[key] != null)
            {
                config.AppSettings.Settings[key].Value = value;
            }
            else
            {
                config.AppSettings.Settings.Add(key, value);
            }
            config.Save(System.Configuration.ConfigurationSaveMode.Modified);
        }

        private void RefreshPorts()
        {
            try
            {
                // 현재 사용 가능한 COM 포트 목록을 모든 ComboBox에 업데이트
                var portNames = SerialPort.GetPortNames();
                ScannerPortComboBox.ItemsSource = portNames;
                TargetPortComboBox1.ItemsSource = portNames;
                TargetPortComboBox2.ItemsSource = portNames;
                TargetPortComboBox3.ItemsSource = portNames;
                TargetPortComboBox4.ItemsSource = portNames;
                TargetPortComboBox5.ItemsSource = portNames;

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
                MessageBox.Show($"포트 목록 갱신 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (_scannerPort != null && _scannerPort.IsOpen)
                {
                    _scannerPort.Close();
                }

                // 스캐너 포트 설정 및 이벤트 핸들러 추가
                _scannerPort = new SerialPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                _scannerPort.DataReceived += ScannerPort_DataReceived;
                _scannerPort.Open();
                ScannerPortComboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");

                // 포트 설정 저장
                SaveSetting("LastUsedScannerPort", portName);
                SaveSetting("ScannerBaudRate", baudRate);
                SaveSetting("ScannerParity", parity);
                SaveSetting("ScannerDataBits", dataBits);
                SaveSetting("ScannerStopBits", stopBits);
            }
            catch (Exception ex)
            {
                ScannerPortComboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void OpenPort(ref SerialPort serialPort, string portName, ComboBox comboBox, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                }

                // 선택된 포트로 시리얼 포트를 설정하고 엽니다.
                serialPort = new SerialPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                serialPort.Open();
                comboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"포트 {portName}가 열렸습니다.");

                // 포트 설정 저장
                int index = GetTargetPortComboBoxIndex(comboBox);
                SaveSetting($"LastUsedTargetPort{index + 1}", portName);
                SaveSetting($"LastUsedTargetPort{index + 1}BaudRate", baudRate);
                SaveSetting($"LastUsedTargetPort{index + 1}Parity", parity);
                SaveSetting($"LastUsedTargetPort{index + 1}DataBits", dataBits);
                SaveSetting($"LastUsedTargetPort{index + 1}StopBits", stopBits);
            }
            catch (Exception ex)
            {
                comboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClosePort(ref SerialPort serialPort, ComboBox comboBox)
        {
            try
            {
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                    comboBox.Foreground = Brushes.Black; // 포트가 닫혔을 때 텍스트 색상 초기화
                    LogMessage($"포트 {serialPort.PortName}가 닫혔습니다.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ScannerPortComboBox.SelectedItem != null)
            {
                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                string baudRate = ScannerBaudRateComboBox.SelectedItem.ToString();
                string parity = ScannerParityComboBox.SelectedItem.ToString();
                string dataBits = ScannerDataBitsComboBox.SelectedItem.ToString();
                string stopBits = ScannerStopBitsComboBox.SelectedItem.ToString();

                OpenScannerPort(selectedPort, baudRate, parity, dataBits, stopBits);
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (comboBox.SelectedItem != null)
            {
                string selectedPort = comboBox.SelectedItem.ToString();
                string baudRate = GetTargetBaudRateComboBox(index).SelectedItem.ToString();
                string parity = GetTargetParityComboBox(index).SelectedItem.ToString();
                string dataBits = GetTargetDataBitsComboBox(index).SelectedItem.ToString();
                string stopBits = GetTargetStopBitsComboBox(index).SelectedItem.ToString();

                OpenPort(ref _targetPorts[index], selectedPort, comboBox, baudRate, parity, dataBits, stopBits);
            }
        }

        private int GetTargetPortComboBoxIndex(ComboBox comboBox)
        {
            // 각 ComboBox에 대해 인덱스를 반환
            if (comboBox == TargetPortComboBox1) return 0;
            if (comboBox == TargetPortComboBox2) return 1;
            if (comboBox == TargetPortComboBox3) return 2;
            if (comboBox == TargetPortComboBox4) return 3;
            if (comboBox == TargetPortComboBox5) return 4;
            return -1;
        }

        private ComboBox GetTargetPortComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetPortComboBox1;
                case 1: return TargetPortComboBox2;
                case 2: return TargetPortComboBox3;
                case 3: return TargetPortComboBox4;
                case 4: return TargetPortComboBox5;
                default: return null;
            }
        }

        private ComboBox GetTargetBaudRateComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetBaudRateComboBox1;
                case 1: return TargetBaudRateComboBox2;
                case 2: return TargetBaudRateComboBox3;
                case 3: return TargetBaudRateComboBox4;
                case 4: return TargetBaudRateComboBox5;
                default: return null;
            }
        }

        private ComboBox GetTargetParityComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetParityComboBox1;
                case 1: return TargetParityComboBox2;
                case 2: return TargetParityComboBox3;
                case 3: return TargetParityComboBox4;
                case 4: return TargetParityComboBox5;
                default: return null;
            }
        }

        private ComboBox GetTargetDataBitsComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetDataBitsComboBox1;
                case 1: return TargetDataBitsComboBox2;
                case 2: return TargetDataBitsComboBox3;
                case 3: return TargetDataBitsComboBox4;
                case 4: return TargetDataBitsComboBox5;
                default: return null;
            }
        }

        private ComboBox GetTargetStopBitsComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetStopBitsComboBox1;
                case 1: return TargetStopBitsComboBox2;
                case 2: return TargetStopBitsComboBox3;
                case 3: return TargetStopBitsComboBox4;
                case 4: return TargetStopBitsComboBox5;
                default: return null;
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            // 스캐너 포트 선택 취소
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            comboBox.SelectedItem = null;
            ClosePort(ref _scannerPort, comboBox);
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            // 보낼 포트 선택 취소
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (index >= 0)
            {
                comboBox.SelectedItem = null;
                ClosePort(ref _targetPorts[index], comboBox);
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            // 스캐너 포트에서 데이터를 수신하면 자동으로 호출되는 이벤트 핸들러
            try
            {
                string data = _scannerPort.ReadLine(); // 스캐너로부터 데이터 수신
                Dispatcher.Invoke(() => // UI 스레드에서 로그와 전송 처리
                {
                    LogMessage($"스캐너 포트로부터 데이터 수신: {data}");
                    SendData(data); // 데이터를 즉시 다른 포트로 전송
                });
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void SendData(string data)
        {
            // 수신된 데이터를 각 타겟 포트로 전송
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                if (_targetPorts[i] != null && _targetPorts[i].IsOpen && ShouldForwardData(data))
                {
                    try
                    {
                        _targetPorts[i].WriteLine(data);
                        LogMessage($"데이터가 {_targetPorts[i].PortName}로 전달되었습니다: {data}");
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"데이터 전송 실패: {ex.Message}");
                    }
                }
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시 조건: 데이터에 "FORWARD"가 포함된 경우에만 다른 포트로 전송
            // 이 조건을 필요에 따라 수정 가능
            return true; // 모든 데이터 전송을 위해 true로 설정 (필요 시 수정)
        }

        private void LogMessage(string message)
        {
            // 현재 시간을 로그에 추가
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그의 개수가 최대치를 넘으면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. 코드 설명
주요 기능
COM 포트 설정: 사용자는 각 포트에 대해 보드레이트, 패리티, 데이터 비트, 스톱 비트를 선택할 수 있습니다.
설정 저장: 각 포트의 설정 값은 프로그램 종료 후에도 저장됩니다. 설정은 App.config 파일에 저장됩니다.
포트 초기화 및 연결: 선택한 설정 값을 사용하여 포트를 초기화하고 연결합니다. 설정 값이 저장된 후, 프로그램이 다시 시작될 때 이전 설정이 자동으로 로드됩니다.
데이터 수신 및 전송: 스캐너 포트에서 데이터를 수신하면, 이를 즉시 다른 포트로 전송합니다.
사용 방법
포트 및 설정 선택: 사용자는 각 포트에 대해 보드레이트, 패리티, 데이터 비트, 스톱 비트를 설정할 수 있습니다.
포트 연결: 포트와 설정을 선택하면 포트가 자동으로 열리며, 데이터를 수신하면 자동으로 설정된 다른 포트로 전송됩니다.
포트 선택 취소: 각 콤보박스 옆의 "X" 버튼을 클릭하면 선택된 포트가 취소되고, 연결이 해제됩니다.
이 코드를 사용하면 COM 포트 설정을 저장하고, 스캐너에서 데이터를 수신하여 다른 포트로 전송할 수 있습니다. 추가적인 질문이나 기능 요청이 있으면 언제든지 말씀해 주세