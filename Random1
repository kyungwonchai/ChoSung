✅ Streamlit Tabs 구현하기
기존의 슬라이더바 기능과 다른 요소들을 탭으로 분리하여 사용할 수 있습니다. 아래는 슬라이더바를 탭으로 넣고, 변수명이 겹치지 않도록 처리하는 방법입니다.

Streamlit 코드 (전체 코드)
python
코드 복사
import streamlit as st
import pandas as pd
import pymssql

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수
def fetch_main_data():
    conn = get_connection()
    query = "EXEC Get_min_bestdifferent"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# Get_min_bestdifferentLine 프로시저 호출 함수
def fetch_line_data(line1_value):
    conn = get_connection()
    query = f"EXEC Get_min_bestdifferentLine @line1='{line1_value}'"
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# 테이블에서 최대값을 노란색으로 표시
def highlight_max(row):
    max_value = row.max()
    return ['background-color: yellow' if v == max_value else '' for v in row]

# Streamlit 앱 구성
def main():
    st.set_page_config(layout="wide")  # 전체 페이지 너비 사용 설정
    st.title("Streamlit Tab Example")

    # 탭 구성
    tab1, tab2 = st.tabs(["메인 데이터", "라인 데이터"])
    
    # 메인 데이터 탭
    with tab1:
        st.subheader("메인 데이터 테이블")
        main_data = fetch_main_data()
        
        # act2_1 ~ act2_8 컬럼 필터링
        act2_columns = [f'act2_{i}' for i in range(1, 9)]
        display_data = main_data[['group1', 'line1', 'model1', 'type1', 'ecn1', 'edition1'] + act2_columns]
        
        # 슬라이더 추가 (다른 변수명 사용)
        slider_value1 = st.slider("슬라이더1 (Main Data)", min_value=0, max_value=100, value=50)
        
        # act2 부분을 색상 강조
        styled_data = display_data.style.apply(highlight_max, subset=act2_columns, axis=1)
        st.write(styled_data.to_html(), unsafe_allow_html=True)

        # 선택된 line1 데이터 표시용 selectbox (다른 변수명 사용)
        selected_line1 = st.selectbox("라인을 선택하세요 (메인 데이터 탭)", main_data['line1'].unique())
        st.write(f"선택된 라인: {selected_line1}")
    
    # 라인 데이터 탭
    with tab2:
        st.subheader("라인 데이터 테이블")
        
        # 슬라이더 추가 (다른 변수명 사용)
        slider_value2 = st.slider("슬라이더2 (Line Data)", min_value=0, max_value=100, value=25)
        
        if 'selected_line1' in locals():
            line_data = fetch_line_data(selected_line1)
            
            act_columns = [f'act1_{i}' for i in range(1, 9)] + [f'act2_{i}' for i in range(1, 9)] + [f'act2best_{i}' for i in range(1, 9)]
            display_line_data = line_data[['line1', 'model1', 'type1', 'ecn1', 'edition1'] + act_columns]
            
            # act 부분을 색상 강조
            styled_line_data = display_line_data.style.apply(highlight_max, subset=act_columns, axis=1)
            st.write(styled_line_data.to_html(), unsafe_allow_html=True)
        
        else:
            st.warning("메인 데이터 탭에서 라인을 선택하세요.")

if __name__ == "__main__":
    main()
📌 코드 설명
탭 구성하기

python
코드 복사
tab1, tab2 = st.tabs(["메인 데이터", "라인 데이터"])
st.tabs()로 두 개의 탭을 생성하였습니다.

tab1과 tab2는 각각 메인 데이터와 라인 데이터 탭을 담당합니다.

슬라이더와 변수명 충돌 방지하기

python
코드 복사
slider_value1 = st.slider("슬라이더1 (Main Data)", min_value=0, max_value=100, value=50)
slider_value2 = st.slider("슬라이더2 (Line Data)", min_value=0, max_value=100, value=25)
서로 다른 탭에서 슬라이더를 사용할 때 변수명을 다르게 설정 (slider_value1, slider_value2).

같은 이름을 사용하면 값이 겹치게 되므로, 항상 변수명을 다르게 해야 함.

HTML 스타일링 사용하기

python
코드 복사
styled_data.to_html()
DataFrame.style.apply() 메서드를 사용하여 최대값을 강조 (highlight_max() 함수).

HTML로 변환하여 Streamlit에서 표시 (unsafe_allow_html=True).

사용자 선택 값의 독립 관리

python
코드 복사
selected_line1 = st.selectbox("라인을 선택하세요 (메인 데이터 탭)", main_data['line1'].unique())
선택된 값을 다른 탭과 독립적으로 관리하기 위해 selected_line1을 전역 변수로 사용하지 않음.

locals()로 확인하여 다른 탭에서도 접근 가능하게 처리.

💡 추가 설명
기존 코드와 충돌하지 않도록 변수명을 다르게 설정하였습니다.

st.tabs()를 사용하여 각각의 탭이 독립적으로 구성되며, 서로 다른 슬라이더와 컴포넌트를 사용할 수 있습니다.

main() 함수는 전체 Streamlit 앱의 흐름을 담당합니다.
