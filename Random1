알겠습니다. WPF에서 사용자가 지정한 파일명에 데이터를 쓰도록 입력 칸을 추가하고, 파일을 지정한 후 버튼을 눌러 작업을 시작하는 구조로 수정하겠습니다.

다음은 파일명을 입력하는 TextBox와 버튼을 추가한 WPF C# 코드입니다.

XAML 코드 (UI 디자인)
xml
코드 복사
<Window x:Class="FileLineWriter.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log File Writer" Height="200" Width="400">
    <Grid>
        <TextBlock Text="파일 경로 입력:" VerticalAlignment="Top" Margin="10,10,0,0" HorizontalAlignment="Left"/>
        <TextBox Name="FilePathTextBox" Width="300" Height="25" Margin="10,40,0,0" VerticalAlignment="Top" HorizontalAlignment="Left"/>
        
        <Button Content="시작" Width="80" Height="30" Margin="10,80,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Click="StartButton_Click"/>
        
        <TextBlock Name="StatusTextBlock" Text="상태: 대기 중" VerticalAlignment="Bottom" Margin="10,0,0,10" HorizontalAlignment="Left"/>
    </Grid>
</Window>
XAML 설명:
TextBox: 파일 경로를 입력받는 칸입니다.
Button: "시작" 버튼을 눌렀을 때 지정된 파일에 로그를 쓰기 시작합니다.
TextBlock: 현재 상태를 표시하는 텍스트입니다 (예: "상태: 대기 중", "상태: 처리 중").
C# 코드 (기능 구현)
csharp
코드 복사
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace FileLineWriter
{
    public partial class MainWindow : Window
    {
        private readonly string _sourceFilePath = @"C:\Agent\_Gen1\largefile.txt";  // 원본 파일 경로
        private readonly double _defaultDelay = 50;  // 0.05초 (밀리초 단위)
        private readonly int _specialDelay = 5000;  // 5초 (특정 키워드가 있을 때 대기 시간)

        public MainWindow()
        {
            InitializeComponent();
        }

        // '시작' 버튼 클릭 시 호출되는 메서드
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            string destinationFilePath = FilePathTextBox.Text;

            // 파일 경로가 입력되지 않았으면 알림 표시
            if (string.IsNullOrEmpty(destinationFilePath))
            {
                MessageBox.Show("파일 경로를 입력해주세요.");
                return;
            }

            // 파일이 존재하는지 확인
            if (!File.Exists(_sourceFilePath))
            {
                MessageBox.Show("원본 파일을 찾을 수 없습니다.");
                return;
            }

            // 파일 경로가 유효한지 확인
            if (!File.Exists(destinationFilePath))
            {
                MessageBox.Show("지정한 로그 파일이 존재하지 않습니다.");
                return;
            }

            // 상태 표시 업데이트
            StatusTextBlock.Text = "상태: 처리 중";

            // 원본 파일의 내용을 한 줄씩 읽기
            using (StreamReader reader = new StreamReader(_sourceFilePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    // 지정된 파일에 한 줄씩 추가
                    await WriteLineToLog(line, destinationFilePath);

                    // 기본 지연 시간 (0.05초)
                    await Task.Delay(TimeSpan.FromMilliseconds(_defaultDelay));
                }
            }

            // 상태 표시 완료
            StatusTextBlock.Text = "상태: 완료";
        }

        // 지정된 로그 파일에 한 줄씩 쓰는 메서드
        private async Task WriteLineToLog(string line, string destinationFilePath)
        {
            // 지정된 파일에 라인을 추가
            using (StreamWriter writer = File.AppendText(destinationFilePath))
            {
                await writer.WriteLineAsync(line);
            }

            // FST, FNL, PLAN 이 포함된 줄이 있을 때는 5초 대기
            if (line.Contains("FST") || line.Contains("FNL") || line.Contains("PLAN"))
            {
                await Task.Delay(_specialDelay);
            }
        }
    }
}
주요 수정 사항:
파일 경로 입력 (TextBox): 사용자가 로그를 기록할 파일의 경로를 입력합니다.
시작 버튼 (Button): 사용자가 "시작" 버튼을 클릭하면 입력된 경로의 파일에 데이터를 쓰는 작업이 시작됩니다.
상태 표시 (TextBlock): 처리 중 상태를 "대기 중"에서 "처리 중", 완료되면 "완료"로 표시합니다.
동작 방식:
사용자가 지정한 로그 파일 경로를 입력한 후, "시작" 버튼을 클릭합니다.
지정된 로그 파일에 원본 파일(largefile.txt)의 내용을 한 줄씩 기록합니다.
파일의 특정 줄(FST, FNL, PLAN)이 나오면 5초 동안 대기합니다. 그 외에는 0.05초마다 한 줄씩 기록합니다.
이 코드로 사용자가 지정한 파일에 원하는 대로 로그를 기록할 수 있습니다. 추가로 수정해야 할 부분이 있으면 알려주세