PF에서 버튼을 커맨드와 연결하고, 그 커맨드가 파라미터로 경로를 받아서 그 경로에 aaa.xlsx라는 엑셀 파일을 생성하고 열어주는 코드 예제를 작성해보겠습니다.

MainViewModel: 커맨드와 경로를 처리하는 ViewModel 클래스.
XAML: 버튼을 커맨드에 바인딩하고 경로를 전달.
1. ViewModel 코드 (MainViewModel.cs)
csharp
코드 복사
using System;
using System.IO;
using System.Windows.Input;
using Excel = Microsoft.Office.Interop.Excel;

public class MainViewModel
{
    public ICommand OpenExcelCommand { get; set; }

    public MainViewModel()
    {
        OpenExcelCommand = new RelayCommand<string>(OpenExcel);
    }

    // 경로를 받아서 엑셀 파일 생성 후 열기
    private void OpenExcel(string path1)
    {
        try
        {
            string filePath = Path.Combine(path1, "aaa.xlsx");

            // 엑셀 애플리케이션 객체 생성
            var excelApp = new Excel.Application();
            excelApp.Visible = true;  // 엑셀 애플리케이션을 화면에 표시

            // 새로운 워크북 생성
            var workbooks = excelApp.Workbooks;
            var workbook = workbooks.Add();

            // 새로운 워크시트 선택
            var worksheet = (Excel.Worksheet)workbook.Sheets[1];
            worksheet.Name = "Sheet1";  // 시트 이름 설정

            // 파일 저장
            workbook.SaveAs(filePath);

            // 엑셀 파일 열기 (위에서 이미 열려 있음)
        }
        catch (Exception ex)
        {
            // 예외 처리
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
2. RelayCommand (RelayCommand.cs)
WPF에서 커맨드를 쉽게 사용하기 위해 RelayCommand를 사용할 수 있습니다. 여기서는 제너릭으로 파라미터를 받을 수 있게 정의합니다.

csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand<T> : ICommand
{
    private readonly Action<T> _execute;
    private readonly Predicate<T> _canExecute;

    public RelayCommand(Action<T> execute)
        : this(execute, null)
    {
    }

    public RelayCommand(Action<T> execute, Predicate<T> canExecute)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public event EventHandler CanExecuteChanged
    {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute((T)parameter);
    }

    public void Execute(object parameter)
    {
        _execute((T)parameter);
    }
}
3. XAML 코드 (MainWindow.xaml)
WPF에서 버튼과 커맨드를 바인딩하고, 버튼을 클릭할 때 경로를 전달합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <!-- 경로를 입력 받을 텍스트박스 -->
        <TextBox x:Name="PathTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="300" Margin="10"/>
        
        <!-- 버튼: 클릭 시 경로를 커맨드로 전달 -->
        <Button Content="Open Excel" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Height="30" Margin="10,50,0,0"
                Command="{Binding OpenExcelCommand}" CommandParameter="{Binding Text, ElementName=PathTextBox}" />
    </Grid>
</Window>
4. MainWindow.xaml.cs
MainWindow.xaml.cs에서 ViewModel을 설정해줍니다.

csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.DataContext = new MainViewModel();  // ViewModel을 DataContext로 설정
        }
    }
}
설명:
커맨드 바인딩: 버튼은 OpenExcelCommand와 바인딩되어 있으며, CommandParameter를 사용해 텍스트박스에 입력된 경로를 파라미터로 전달합니다.
엑셀 파일 생성: 경로에 aaa.xlsx 파일을 생성하고, Excel Interop을 사용해 파일을 엽니다.