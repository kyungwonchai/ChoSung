네, Ubuntu 환경에서 사내 GitHub(삼성)에 과제 폴더를 생성하고 초기 푸시하는 방법, 마지막 커밋으로 복원하는 방법, 그리고 커밋과 푸시를 간편하게 하는 방법에 대해 안내해 드리겠습니다. Python을 사용한 자동화 방법까지 포함하여 단계별로 설명해 드릴게요.

1. 🚀 과제 폴더 생성 및 초기 푸시 (Initial Push)
가장 먼저 로컬 컴퓨터에 과제 폴더를 만들고, 이 폴더를 Git 저장소로 만든 후 사내 GitHub에 연결하여 첫 번째 버전을 올리는 과정입니다.

전제 조건:

Git 설치: Ubuntu에 Git이 설치되어 있어야 합니다. (sudo apt-get update && sudo apt-get install git)

사내 GitHub 계정 및 토큰: 사내 GitHub에 로그인할 수 있는 계정과 개인용 액세스 토큰(Personal Access Token)이 필요합니다. 보안상의 이유로 비밀번호 대신 토큰을 사용하는 것이 일반적입니다.

단계별 명령어:

과제 폴더 생성 및 이동:
먼저, 작업할 과제 폴더를 만들고 그 폴더로 들어갑니다. 폴더명은 원하시는 대로 지정하시면 됩니다.

Bash

mkdir MyProject
cd MyProject
Git 저장소 초기화:
현재 폴더를 Git이 관리하는 공간으로 만듭니다. .git이라는 숨김 폴더가 생성됩니다.

Bash

git init
사용자 정보 설정 (최초 한 번만):
커밋할 때마다 기록될 이름과 이메일을 설정합니다.

Bash

git config --global user.name "Your Name"
git config --global user.email "your.email@samsung.com"
원격 저장소 연결:
사내 GitHub에 미리 생성해 둔 비어있는 저장소의 주소를 로컬 저장소에 연결합니다. 보통 origin이라는 별칭을 사용합니다. 저장소_URL 부분은 사내 GitHub에서 복사한 주소로 변경해주세요.

Bash

git remote add origin <저장소_URL>
예시: git remote add origin https://github.samsung.com/your-username/MyProject.git

파일 추가 및 커밋:
폴더에 과제 파일을 추가하고, 변경 사항을 기록(커밋)합니다.

Bash

# 모든 파일을 추가
git add .

# 첫 번째 커밋 메시지 작성
git commit -m "Initial commit: Add project files"
원격 저장소로 푸시 (Push):
로컬 저장소의 커밋 내역을 사내 GitHub로 업로드합니다. -u 옵션은 앞으로 git push만 입력해도 origin의 main 브랜치로 푸시되도록 기본값을 설정해줍니다.

Bash

git push -u origin main
참고: 기본 브랜치명이 master일 경우 git push -u origin master를 사용하세요.

2. ⏪ 마지막 커밋으로 복원 (Revert to Last Commit)
실수로 잘못 커밋했거나 이전 상태로 되돌리고 싶을 때 사용하는 방법입니다.

방법 1: 마지막 커밋 취소 (로컬에서만)

가장 최근의 커밋을 취소하고 해당 파일들은 커밋 전 상태(Staged)로 되돌립니다. 원격 저장소에 푸시하기 전에만 사용하는 것이 안전합니다.

Bash

git reset --soft HEAD~1
--soft: 커밋만 취소하고 작업 내용은 보존합니다.

--hard: 커밋과 함께 작업 내용까지 모두 삭제하므로 주의해야 합니다.

방법 2: 마지막 커밋 되돌리기 (원격 저장소에 푸시한 후)

이미 원격 저장소에 푸시했다면, 기록을 삭제하는 reset보다는 이전 커밋을 되돌리는 새로운 커밋(revert)을 만드는 것이 안전합니다.

Bash

git revert HEAD
이 명령을 실행하면, 마지막 커밋에서 변경된 내용을 모두 되돌리는 새로운 커밋이 생성됩니다. 이후 이 revert 커밋을 다시 푸시하면 됩니다.

git push origin main

3. 🐍 커밋 후 푸시 자동화 (Python 스크립트)
매번 git add, git commit, git push를 입력하는 것이 번거로울 수 있습니다. 간단한 Python 스크립트를 만들어 이 과정을 자동화할 수 있습니다.

스크립트 파일 생성 (auto_push.py):

아래 코드를 복사하여 과제 폴더 안에 auto_push.py 라는 이름으로 저장하세요.

Python

import subprocess
import sys

def run_git_command(command):
    """지정된 Git 명령어를 실행하고 결과를 반환합니다."""
    try:
        result = subprocess.run(command, check=True, text=True, capture_output=True)
        print(result.stdout)
        if result.stderr:
            print("Error:", result.stderr)
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while executing: {' '.join(command)}")
        print(e.stderr)
        sys.exit(1)

def main():
    """Git add, commit, push를 순차적으로 실행합니다."""
    # 1. 변경된 모든 파일 추가
    print("Step 1: Adding all changes...")
    run_git_command(["git", "add", "."])

    # 2. 커밋 메시지 입력받기
    commit_message = input("Step 2: Enter your commit message: ")
    if not commit_message:
        print("Commit message cannot be empty. Aborting.")
        sys.exit(1)

    print("Step 3: Committing changes...")
    run_git_command(["git", "commit", "-m", commit_message])

    # 3. 원격 저장소로 푸시
    # 현재 브랜치 이름을 자동으로 가져옵니다.
    try:
        current_branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).strip().decode('utf-8')
        print(f"Step 4: Pushing to origin/{current_branch}...")
        run_git_command(["git", "push", "origin", current_branch])
        print("\nSuccessfully pushed to the remote repository! 🎉")
    except subprocess.CalledProcessError as e:
        print("Could not determine the current branch or push failed.")
        print(e.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()

스크립트 실행 방법:

터미널에서 아래와 같이 실행하면 됩니다.

Bash

python3 auto_push.py
스크립트를 실행하면 커밋 메시지를 입력하라는 메시지가 나오고, 메시지를 입력하면 자동으로 add, commit, push 과정이 진행됩니다.

이 방법들을 활용하시면 사내 GitHub에서의 과제 관리를 훨씬 효율적으로 하실 수 있을 겁니다.

Gemini에게 수정 가능한 문서나 코드를 작성해 달라고 해 보세요.

사용해 보기