구현할 수 있습니다. 다음은 예시 코드입니다:

csharp

using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace LogManagement
{
    public class LogManager
    {
        private string logFolderPath;
        private string logFilePath;

        public LogManager(string folderPath)
        {
            logFolderPath = folderPath;
            logFilePath = CreateLogFilePath();
            CreateLogFolder();
        }

        private string CreateLogFilePath()
        {
            string fileName = DateTime.Now.ToString("yyyyMMdd") + ".log";
            string filePath = Path.Combine(logFolderPath, fileName);

            if (!File.Exists(filePath))
            {
                File.Create(filePath).Dispose();
            }

            return filePath;
        }

        private void CreateLogFolder()
        {
            if (!Directory.Exists(logFolderPath))
            {
                Directory.CreateDirectory(logFolderPath);
            }
        }

        public void AddLogEntry(string logEntry)
        {
            string logLine = $"[{DateTime.Now.ToString("yyyyMMddHHmmss")}]: {logEntry}";
            using (StreamWriter sw = File.AppendText(logFilePath))
            {
                sw.WriteLine(logLine);
            }

            DeleteOldLogFiles(14); // 최근 2주간의 로그 파일 유지, 나머지 삭제
        }

        private void DeleteOldLogFiles(int retentionDays)
        {
            DateTime retentionDate = DateTime.Now.AddDays(-retentionDays);
            var logFiles = Directory.GetFiles(logFolderPath)
                                    .Where(file => File.GetCreationTime(file) < retentionDate);

            foreach (var file in logFiles)
            {
                File.Delete(file);
            }
        }

        public void OpenLatestLogFile()
        {
            string latestLogFile = Directory.GetFiles(logFolderPath, "*.log")
                                            .OrderByDescending(file => File.GetLastWriteTime(file))
                                            .FirstOrDefault();

            if (!string.IsNullOrEmpty(latestLogFile))
            {
                Process.Start(latestLogFile);
            }
        }
    }
}

위의 코드에서 LogManager 클래스에 OpenLatestLogFile() 메서드를 추가하여 가장 최근에 작성된 로그 파일을 열어주는 기능을 구현했습니다. 이 메서드는 해당 로그 폴더에서 확장자가 ".log"인 파일들을 가져와서 최신 파일을 찾고, Process.Start() 메서드를 사용하여 해당 파일을 엽니다.

사용 예시:

csharp

using System;
using LogManagement;

namespace LogExample
{
    class Program
    {
        static void Main()
        {
            string logFolderPath = @"C:\Agent\KnoxAPILog";

            LogManager logManager = new LogManager(logFolderPath);
            logManager.AddLogEntry("This is a log entry.");

            logManager.OpenLatestLogFile();
        }
    }
}

위의 예시에서는 LogManager 클래스의 인스턴스를 생성한 후, AddLogEntry() 메서드를 호출하여 로그를 추가합니다. 그리고 OpenLatestLogFile() 메서드를 호출하여 가장 최근에 작성된 로그 파일을 엽니다.

버튼 클릭 이벤트 핸들러에서 logManager.OpenLate