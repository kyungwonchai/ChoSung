import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data_utils
import pandas as pd
import numpy as np
import pymssql
import random
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split

# 🚀 GPU 설정
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# 📌 기존 모델에서 샘플링할 데이터 개수
REPLAY_SIZE = 10000  # 기존 데이터 일부 유지하여 추가 학습

# 📌 기존 모델에서 랜덤 샘플링 (MSSQL)
def sample_old_data():
    conn = pymssql.connect(server="your_server", user="your_user", password="your_password", database="your_db")
    query = f"""
    SELECT TOP {REPLAY_SIZE} Model, QR
    FROM ModelQRTable
    ORDER BY NEWID()  -- 무작위 샘플링
    """
    df = pd.read_sql(query, conn)
    conn.close()
    return df

# 📌 QR 값을 벡터로 변환 (고정된 길이로 패딩)
def vectorize_qr(qr_values, max_length):
    vectorized = np.zeros((len(qr_values), max_length), dtype=np.float32)
    for i, qr in enumerate(qr_values):
        for j, char in enumerate(qr[:max_length]):
            vectorized[i, j] = ord(char)
    return vectorized

# 📌 신경망 모델 정의
class QRModel(nn.Module):
    def __init__(self, input_size, num_classes):
        super(QRModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc4 = nn.Linear(32, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.relu(self.fc3(x))
        x = self.fc4(x)
        return x

# 📌 모델 저장 함수
MODEL_PATH = "model.pth"
def save_model(model, encoder, scaler, max_qr_length):
    torch.save({
        "model_state_dict": model.state_dict(),
        "encoder_classes": encoder.classes_,
        "scaler_mean": scaler.mean_,
        "scaler_scale": scaler.scale_,
        "max_qr_length": max_qr_length
    }, MODEL_PATH)

# 📌 모델 불러오기 함수
def load_model():
    if os.path.exists(MODEL_PATH):
        checkpoint = torch.load(MODEL_PATH, map_location=device)
        num_classes = len(checkpoint["encoder_classes"])
        input_size = len(checkpoint["scaler_mean"])

        model = QRModel(input_size, num_classes).to(device)
        model.load_state_dict(checkpoint["model_state_dict"])
        model.eval()

        encoder = LabelEncoder()
        encoder.classes_ = checkpoint["encoder_classes"]

        scaler = StandardScaler()
        scaler.mean_ = checkpoint["scaler_mean"]
        scaler.scale_ = checkpoint["scaler_scale"]

        max_qr_length = checkpoint["max_qr_length"]

        return model, encoder, scaler, max_qr_length
    return None, None, None, None

# 📌 기존 모델 유지하면서 새로운 데이터 추가 학습 (기존 일부 샘플 포함)
def train_model(new_df_data, epochs=10, batch_size=64):
    new_df_data = filter_recent_data(new_df_data)  # 🔥 3개월 지난 데이터 제외

    # 기존 모델 불러오기
    model, encoder, scaler, max_qr_length = load_model()

    if model is None:
        print("🔴 기존 모델 없음. 새로 학습 시작.")
        encoder = LabelEncoder()
        max_qr_length = max(len(qr) for qr in new_df_data["QR"].values)
    else:
        print("🟢 기존 모델 로드됨. 기존 가중치 유지하며 추가 학습 진행.")

        # ✅ 기존 데이터 일부 샘플링하여 추가 학습에 포함
        old_df_data = sample_old_data()
        new_df_data = pd.concat([old_df_data, new_df_data]).drop_duplicates().reset_index(drop=True)

    # QR 값, 모델명 추출
    qr_values = new_df_data["QR"].values
    model_names = new_df_data["Model"].values

    # ✅ 기존 encoder 유지하면서 새로운 데이터 반영
    if model is None:
        encoder.fit(model_names)  # 새로운 데이터 기준으로 학습
    else:
        new_classes = np.setdiff1d(model_names, encoder.classes_)
        if len(new_classes) > 0:
            print(f"🔄 새로운 클래스 추가됨: {len(new_classes)} 개")
            encoder.classes_ = np.concatenate((encoder.classes_, new_classes))

    y_encoded = encoder.transform(model_names)

    # ✅ 기존 모델과 동일한 크기로 QR 벡터 변환
    X_vectorized = vectorize_qr(qr_values, max_qr_length)
    X_scaled = scaler.transform(X_vectorized)

    X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)

    train_dataset = data_utils.TensorDataset(torch.tensor(X_train, dtype=torch.float32),
                                             torch.tensor(y_train, dtype=torch.long))
    train_loader = data_utils.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)

    # ✅ 기존 모델 유지하면서, 새로운 클래스가 추가될 경우만 출력 레이어 업데이트
    num_classes = len(encoder.classes_)
    if model is None:
        model = QRModel(X_train.shape[1], num_classes).to(device)
    elif model.fc4.out_features != num_classes:
        print(f"🔄 출력 레이어 크기 변경: {model.fc4.out_features} → {num_classes}")
        model.fc4 = nn.Linear(32, num_classes).to(device)  # 새로운 클래스 추가 반영

    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)

    # 🔥 기존 가중치 유지하며 새로운 데이터만 추가 학습
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for inputs, targets in train_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        print(f"Epoch [{epoch+1}/{epochs}], Loss: {total_loss/len(train_loader):.4f}")

    save_model(model, encoder, scaler, max_qr_length)