의 클래스 없이 DevExpress의 GridControl에 컬럼을 추가하고, 버튼을 클릭했을 때 해당 행의 특정 컬럼 값을 읽어오는 예제를 만들어 보겠습니다. 여기서는 GridControl이 MES에서 데이터를 바인딩받는 상황을 가정하고, 버튼 클릭 시 해당 행의 데이터를 읽어오는 방법을 설명합니다.

XAML 설정
먼저 GridControl을 정의하고 컬럼을 추가합니다.

xml
코드 복사
<Window x:Class="WpfDevExpressApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="None">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="RecordId" Header="Record ID" />
                <dxg:GridColumn FieldName="RecordTime" Header="Record Time" />
                <dxg:GridColumn Header="Actions" UnboundType="Object">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Delete" Click="DeleteButton_Click" Tag="{Binding}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
다음으로, 버튼 클릭 이벤트를 처리하는 코드를 작성합니다. 여기서는 MES 시스템에서 데이터를 바인딩받는다고 가정하고, 데이터를 DataTable로 처리합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Data;
using System.Windows;

namespace WpfDevExpressApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // 임시 데이터 테이블 생성
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("RecordId", typeof(int));
            dataTable.Columns.Add("RecordTime", typeof(DateTime));

            dataTable.Rows.Add(1, DateTime.Now);
            dataTable.Rows.Add(2, DateTime.Now.AddMinutes(5));
            dataTable.Rows.Add(3, DateTime.Now.AddMinutes(10));

            // GridControl에 데이터 바인딩
            gridControl.ItemsSource = dataTable.DefaultView;
        }

        private void DeleteButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.Tag is DataRowView dataRowView)
            {
                MessageBox.Show($"Record Time: {dataRowView["RecordTime"]}");
            }
        }
    }
}
설명
XAML 설정:

GridControl에 AutoGenerateColumns 속성을 None으로 설정하여 수동으로 컬럼을 추가합니다.
Actions 컬럼을 추가하고, CellTemplate을 사용하여 버튼을 정의합니다. 버튼의 Tag 속성에 현재 행의 데이터를 바인딩합니다.
C# 코드:

임시 DataTable을 생성하여 데이터를 GridControl에 바인딩합니다.
DeleteButton_Click 이벤트 핸들러에서 버튼 클릭 시 Tag 속성에 바인딩된 DataRowView를 가져와 해당 행의 RecordTime 값을 메시지 박스로 표시합니다.
이렇게 하면 GridControl에 수동으로 컬럼을 추가하고, 버튼 클릭 시 해당 행의 RecordTime 값을 메시지 박스로 표시할 수 있습니다. 이 방법을 통해 MES 시스템에서 데이터를 바인딩받아 사용할 수 