PF에서 버튼을 눌렀을 때 하이퍼링크를 통해 웹 브라우저를 바로 여는 기능을 구현하려면, System.Diagnostics.Process 클래스를 사용하여 웹 주소를 브라우저로 여는 방식으로 구현할 수 있습니다. 다음은 이 기능을 구현하는 간단한 코드 예제입니다.

1. XAML 코드 작성
먼저, WPF XAML 파일에 버튼을 추가합니다. 이 버튼을 클릭하면 C# 코드에서 정의한 함수를 호출하여 웹 페이지를 열게 됩니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Hyperlink Example" Height="200" Width="300">
    <Grid>
        <!-- 버튼 클릭 시 OpenWebsiteCommand를 실행 -->
        <Button Content="웹 페이지 열기" Command="{Binding OpenWebsiteCommand}" Width="120" Height="40" HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>
2. ViewModel에 Command 구현
MVVM 패턴을 따르고 있으므로, ViewModel에 OpenWebsiteCommand 커맨드를 정의합니다. 이 커맨드는 버튼을 눌렀을 때 실행될 함수를 연결합니다.

csharp
코드 복사
using System;
using System.Diagnostics;
using System.Windows.Input;

namespace YourNamespace
{
    public class MainViewModel
    {
        public ICommand OpenWebsiteCommand { get; }

        public MainViewModel()
        {
            // Command에 메서드 연결
            OpenWebsiteCommand = new RelayCommand(OpenWebsite);
        }

        private void OpenWebsite()
        {
            try
            {
                // 웹 브라우저에서 URL 열기
                Process.Start(new ProcessStartInfo("http://www.example.com")
                {
                    UseShellExecute = true // 시스템 기본 브라우저로 열기 위해 설정
                });
            }
            catch (Exception ex)
            {
                // 오류 처리
                Console.WriteLine("웹 페이지를 여는 중 오류 발생: " + ex.Message);
            }
        }
    }
}
3. RelayCommand 클래스 구현
RelayCommand는 버튼 클릭 시 특정 동작을 실행할 수 있는 커맨드 클래스입니다. 이 클래스를 추가하여 MVVM 패턴에서 명령을 처리할 수 있습니다.

csharp
코드 복사
using System;
using System.Windows.Input;

namespace YourNamespace
{
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute();

        public void Execute(object parameter) => _execute();

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
4. DataContext 설정
MainWindow.xaml.cs 파일에서 ViewModel을 윈도우의 DataContext로 설정합니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();
    }