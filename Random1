// FILE_ID: Views/MainWindow_CS_ExportMethod_20250410151800
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using DevExpress.Xpf.Printing; // PrintableControlLink 사용
using DevExpress.XtraPrinting; // PrintingSystem, XlsxExportOptionsEx 사용
using DevExpress.Utils; // DefaultBoolean 사용
using System.Collections.Generic; // List 사용 (임시 그룹핑 상태 저장)

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try { disposableViewModel.Dispose(); }
                catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel Dispose 오류: {ex.Message}"); }
            }
        }

        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            string newFieldName = e.NewColumn?.FieldName;
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            var newItem = e.NewItem as LockerAssignment;
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        private void ExportExcelButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Workbook (*.xlsx)|*.xlsx",
                FileName = $"사물함현황_{DateTime.Now:yyyyMMdd}.xlsx",
                Title = "엑셀 파일 저장"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                GridColumnSortInfo[] originalSortInfo = null; // 원래 정렬 정보 저장
                int originalGroupCount = 0; // 원래 그룹핑 수 저장

                try
                {
                    ViewModel.StatusBarText = "엑셀 파일 생성 중...";

                    // 1. 현재 그리드 상태(정렬, 필터 등)를 사용하여 "전체시트" 링크 생성
                    var link1 = new PrintableControlLink((TableView)mainTableView.View) { SheetName = "전체시트" };

                    // 2. "소파트별시트"를 위해 그리드 그룹핑 임시 적용 및 링크 생성
                    originalSortInfo = mainTableView.Grid.SortInfo.ToArray(); // 현재 정렬 저장
                    originalGroupCount = mainTableView.Grid.GroupCount; // 현재 그룹 수 저장
                    mainTableView.Grid.ClearGrouping(); // 기존 그룹핑 해제
                    mainTableView.Grid.GroupBy("SubPart"); // 소파트 컬럼으로 그룹핑
                    mainTableView.ExpandAllGroups(); // 모든 그룹 펼치기 (선택 사항)

                    var link2 = new PrintableControlLink((TableView)mainTableView.View) { SheetName = "소파트별시트" };

                    // 3. 두 링크를 합쳐서 엑셀 파일로 내보내기
                    var compositeLink = new CompositeLink(new List<IPrintable> { link1, link2 });

                    var options = new XlsxExportOptionsEx
                    {
                        ExportType = DevExpress.Export.ExportType.DataAware, // 데이터 형식 유지 (권장)
                        ShowGridLines = true,
                        ShowColumnHeaders = DefaultBoolean.True,
                        ShowGroupSummaries = DefaultBoolean.True, // 그룹 요약 표시
                        GroupRows = true // 그룹 행 유지
                    };

                    compositeLink.ExportToXlsx(filePath, options);

                    ViewModel.StatusBarText = "엑셀 파일 저장 완료.";
                    MessageBox.Show($"엑셀 파일 저장 완료:\n{filePath}", "저장 성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                     ViewModel.StatusBarText = "엑셀 파일 저장 오류.";
                     MessageBox.Show($"엑셀 파일 저장 중 오류 발생:\n{ex.Message}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 4. 그리드 그룹핑 및 정렬 상태 원복
                    try
                    {
                        mainTableView.Grid.ClearGrouping(); // 그룹핑 해제
                        if (originalGroupCount > 0 && originalSortInfo != null) // 원래 그룹핑이 있었다면 정렬 복구 시도
                        {
                             // 원래 그룹핑 상태로 복구하는 것은 더 복잡할 수 있음
                             // 여기서는 정렬만 복구 시도
                             mainTableView.Grid.SortInfo.Clear();
                             foreach(var sortInfo in originalSortInfo)
                             {
                                 mainTableView.Grid.SortInfo.Add(sortInfo);
                             }
                        }
                        else if (originalSortInfo != null) // 그룹핑 없었으면 정렬만 복구
                        {
                            mainTableView.Grid.SortInfo.Clear();
                            foreach(var sortInfo in originalSortInfo)
                            {
                                mainTableView.Grid.SortInfo.Add(sortInfo);
                            }
                        }
                        Debug.WriteLine("Grid layout restored after export.");
                    }
                    catch(Exception layoutEx)
                    {
                        Debug.WriteLine($"!!! 그리드 레이아웃 복구 중 오류: {layoutEx.Message}");
                    }
                }
            }
        }
    }
}
```

**핵심 변경 사항:**

* **`using` 지시문 추가:** `Microsoft.Win32`, `System.Windows`, `DevExpress.Xpf.Printing`, `DevExpress.XtraPrinting`, `DevExpress.Utils`, `System.Collections.Generic` 를 추가했습니다.
* **`ExportExcelButton_Click` 메서드 구현:**
    * `SaveFileDialog`를 사용하여 저장 경로를 얻습니다.
    * DevExpress Printing 라이브러리의 `PrintingSystem`, `PrintableControlLink`, `CompositeLink`를 사용합니다.
    * 첫 번째 `PrintableControlLink` (`link1`)는 현재 그리드 뷰(`mainTableView`)를 그대로 사용하여 "전체시트"를 만듭니다.
    * 두 번째 시트를 만들기 전에, 현재 그리드의 정렬/그룹핑 상태를 저장합니다.
    * 그리드를 "SubPart" 필드로 그룹핑(`mainTableView.Grid.GroupBy("SubPart")`)하고 모든 그룹을 펼칩니다.
    * 두 번째 `PrintableControlLink` (`link2`)를 그룹핑된 뷰를 사용하여 만들고 시트 이름을 "소파트별시트"로 지정합니다.
    * `CompositeLink`를 사용하여 두 링크를 하나로 묶습니다.
    * `XlsxExportOptionsEx`를 설정하여 데이터 형식을 유지하고 그룹 행을 포함하도록 합니다.
    * `compositeLink.ExportToXlsx()`를 호출하여 두 시트가 포함된 엑셀 파일을 생성합니다.
    * `finally` 블록에서 그리드의 그룹핑을 해제하고 원래 정렬 상태를 복원하여 내보내기 후 그리드 모양이 원래대로 돌아오도록 합니다.
    * 전체 과정에 `try-catch-finally`를 적용하여 오류 처리 및 리소스 정리(그리드 상태 복원)를 수행합니다.