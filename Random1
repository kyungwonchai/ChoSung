아래는 각 라인 체크박스의 우측에 VNC 원격 접속 아이콘 버튼을 추가하는 코드입니다. 버튼을 클릭하면 해당 라인의 이름을 메시지 박스로 표시합니다. IP 주소를 나중에 추가하거나 수정할 수 있도록 구현했습니다.

수정된 XAML 코드
아이콘 버튼을 추가했습니다.

xml
코드 복사
<Window x:Class="TreeViewCheckboxExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="TreeView with VNC Access" Height="600" Width="500">
    <Grid>
        <TreeView x:Name="treeView" ItemsSource="{Binding Groups}" Margin="10">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Lines}">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <!-- 체크박스 -->
                        <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}" 
                                  Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked" />
                        <!-- 라인 이름 -->
                        <TextBlock Text="{Binding Name}" Margin="5,0,0,0" />
                        <!-- VNC 버튼 -->
                        <Button Content="🔗" Margin="10,0,0,0" 
                                ToolTip="VNC 원격 접속" Click="VncButton_Click" 
                                Tag="{Binding Name}" Width="25" Height="25" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>
수정된 C# 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;

namespace TreeViewCheckboxExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Group> Groups { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // 데이터 로드 및 초기 설정
            LoadData();
            SetAllChecked(true);
            ExpandAllGroups();
        }

        /// <summary>
        /// 데이터를 로드합니다.
        /// </summary>
        private void LoadData()
        {
            Groups = new ObservableCollection<Group>
            {
                new Group
                {
                    Name = "Group A",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 1.1" },
                        new Line { Name = "Line 1.2" }
                    }
                },
                new Group
                {
                    Name = "Group B",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 2.1" },
                        new Line { Name = "Line 2.2" }
                    }
                }
            };
        }

        /// <summary>
        /// 모든 그룹과 라인을 체크 상태로 설정합니다.
        /// </summary>
        private void SetAllChecked(bool isChecked)
        {
            foreach (var group in Groups)
            {
                group.IsChecked = isChecked;
                foreach (var line in group.Lines)
                {
                    line.IsChecked = isChecked;
                }
            }
        }

        /// <summary>
        /// 모든 그룹을 확장 상태로 설정합니다.
        /// </summary>
        private void ExpandAllGroups()
        {
            foreach (var group in Groups)
            {
                group.IsExpanded = true;
            }
        }

        /// <summary>
        /// VNC 버튼 클릭 이벤트 처리
        /// </summary>
        private void VncButton_Click(object sender, RoutedEventArgs e)
        {
            if (sender is FrameworkElement element && element.Tag is string lineName)
            {
                // VNC 접속 로직 추가 가능
                MessageBox.Show($"VNC 원격 접속: {lineName}");
            }
        }
    }

    public class Group : INotifyPropertyChanged
    {
        private bool _isChecked;
        private bool _isExpanded;
        public string Name { get; set; }
        public ObservableCollection<Line> Lines { get; set; } = new ObservableCollection<Line>();

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public bool IsExpanded
        {
            get => _isExpanded;
            set
            {
                if (_isExpanded != value)
                {
                    _isExpanded = value;
                    OnPropertyChanged(nameof(IsExpanded));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class Line : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
VNC 버튼 추가:

**Button**을 체크박스 우측에 추가하고 클릭 이벤트(Click="VncButton_Click")를 연결.
Tag 속성을 사용하여 버튼이 속한 라인의 이름(Name)을 전달.
VNC 버튼 클릭 이벤트:

VncButton_Click 이벤트에서 버튼의 **Tag**를 통해 라인 이름을 가져옵니다.
메시지 박스에 "VNC 원격 접속: [라인 이름]"을 표시합니다.
실제 VNC 접속 로직은 여기에 추가 가능.
기능 동작:

각 라인에 VNC 버튼이 표시됩니다.
버튼 클릭 시 해당 라인의 이름이 메시지 박스로 출력됩니다.
결과
TreeView UI:

각 라인의 체크박스 우측에 VNC 버튼(🔗 아이콘)이 표시됩니다.
VNC 버튼 클릭:

클릭 시, 해당 라인의 이름이 메시지 박스에 표시됩니다.
예: Line 1.1의 버튼을 클릭하면 "VNC 원격 접속: Line 1.1"이 출력됩니다.