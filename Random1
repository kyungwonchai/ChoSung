겠습니다. 아래는 PLC 통신을 위한 전체 소스 코드입니다. 이 코드는 WPF 응용 프로그램을 위해 작성되었으며, XAML UI와 함께 C# 백엔드 로직을 포함합니다.

1. MainWindow.xaml (UI 구성)
xml
코드 복사
<Window x:Class="PlcApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Mutocol 통신" Height="500" Width="700">
    <Grid>
        <StackPanel>
            <TextBlock Text="PLC 통신 테스트" FontSize="18" HorizontalAlignment="Center" Margin="10" />

            <CheckBox x:Name="ChkWaitForResponse" Content="응답 대기" Margin="10"/>

            <TextBlock Text="주소 입력 (예: D2300):" Margin="5"/>
            <TextBox x:Name="TxtAddress" Width="200" Margin="5"/>

            <TextBlock Text="값 입력:" Margin="5"/>
            <TextBox x:Name="TxtValue" Width="200" Margin="5"/>

            <Button Content="읽기" Click="BtnRead_Click" Width="200" Height="40" Margin="5"/>
            <Button Content="덮어쓰기" Click="BtnOverwrite_Click" Width="200" Height="40" Margin="5"/>
            <Button Content="단순 전달" Click="BtnSendSimple_Click" Width="200" Height="40" Margin="5"/>

            <ListBox x:Name="LstHistory" Width="400" Height="200" Margin="10"/>
            <TextBlock x:Name="OutputText" Text="결과 출력:" FontSize="14" Margin="10" TextWrapping="Wrap"/>
        </StackPanel>
    </Grid>
</Window>
2. MainWindow.xaml.cs (C# 코드 - MainWindow 클래스)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows;

namespace PlcApp
{
    public partial class MainWindow : Window
    {
        private PlcMutocolCommunication _plc;

        public MainWindow()
        {
            InitializeComponent();
            _plc = new PlcMutocolCommunication("COM3", 9600); // 포트와 보드레이트 설정
        }

        private async void BtnRead_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text;
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false;

            await ExecutePlcFunctionAsync(() => _plc.ReadAsync(address, waitForResponse), "읽기", address, "");
        }

        private async void BtnOverwrite_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text;
            string value = TxtValue.Text;
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false;

            await ExecutePlcFunctionAsync(() => _plc.OverwriteAsync(address, value, waitForResponse), "덮어쓰기", address, value);
        }

        private async void BtnSendSimple_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text;
            string value = TxtValue.Text;
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false;

            await ExecutePlcFunctionAsync(() => _plc.SendSimpleAsync(address, value, waitForResponse), "단순 전달", address, value);
        }

        private async Task ExecutePlcFunctionAsync(Func<Task<string>> plcFunc, string actionDescription, string address, string value)
        {
            try
            {
                _plc.OpenPort();
                string result = await plcFunc.Invoke();

                string log = $"{actionDescription}: 주소={address}, 값={value}, 결과={result}";
                LstHistory.Items.Add(log);
                OutputText.Text = $"{actionDescription} 결과: {result}";
            }
            catch (Exception ex)
            {
                OutputText.Text = $"에러: {ex.Message}";
                LstHistory.Items.Add($"에러: {ex.Message}");
            }
            finally
            {
                _plc.ClosePort();
            }
        }
    }
}
3. PlcMutocolCommunication.cs (PLC 통신 클래스)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class PlcMutocolCommunication
{
    private SerialPort _serialPort;
    private const int _timeout = 30000; // 30초 타임아웃

    public PlcMutocolCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.DataBits = 8;
        _serialPort.Parity = Parity.None;
        _serialPort.StopBits = StopBits One;
        _serialPort.ReadTimeout = _timeout;
        _serialPort.WriteTimeout = _timeout;
    }

    public void OpenPort()
    {
        if (!_serialPort.IsOpen)
        {
            _serialPort.Open();
        }
    }

    public void ClosePort()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    public async Task<string> ReadAsync(string address, bool waitForResponse)
    {
        string command = CreateReadCommand(address);
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "응답 없음 (대기 안 함)";
    }

    public async Task<string> OverwriteAsync(string address, string value, bool waitForResponse)
    {
        string command = CreateWriteCommand(address, value);
        await WriteCommandAsync(command);

        string response = await ReadResponseAsync();
        return waitForResponse ? response.Contains("OK") ? "덮어쓰기 성공" : "덮어쓰기 실패" : "응답 없음 (대기 안 함)";
    }

    public async Task<string> SendSimpleAsync(string address, string value, bool waitForResponse)
    {
        string formattedAddress = FormatAddress(address);
        string formattedValue = FormatValue(value);
        string command = $"%01#W{address[0]}D{formattedAddress}{formattedAddress}{formattedValue}0100**";
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "응답 없음 (대기 안 함)";
    }

    private async Task WriteCommandAsync(string command)
    {
        byte[] commandBytes = Encoding.ASCII.GetBytes(command);
        await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
    }

    private async Task<string> ReadResponseAsync()
    {
        byte[] buffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream ReadAsync(buffer, 0, buffer.Length);
        return Encoding.ASCII.GetString(buffer, 0, bytesRead);
    }

    private string FormatAddress(string address)
    {
        if (int.TryParse(address.Substring(1), out int numericAddress))
        {
            return numericAddress.ToString("D4"); // 2300 -> 2300
        }
        return "0000"; // 잘못된 주소 처리
    }

    private string FormatValue(string value)
    {
        if (int.TryParse(value, out int numericValue))
        {
            return numericValue.ToString("D4"); // 1 -> 0001
        }
        else
        {
            return "0000"; // 잘못된 값 처리
        }
    }

    private string CreateReadCommand(string address)
    {
        string plcAddress = FormatAddress(address);
        return $"%01#R{address[0]}D{plcAddress}**";
    }

    private string CreateWriteCommand(string address, string value)
    {
        string plcAddress = FormatAddress(address);
        string formattedValue = FormatValue(value);
        return $"%01#W{address[0]}D{plcAddress}{plcAddress}{formattedValue}0100**";
    }
}
이 코드는 PLC 통신을 처리하는 클래스, WPF 기반의 사용자 인터페이스 및 이벤트 처리를 구현합니다. 특히, PlcMutocolCommunication 클래스에서는 PLC와의 명령어 전송 및 응답 처리를 담당합니