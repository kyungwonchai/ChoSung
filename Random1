ainViewModel과 NumberMapping 간의 값 변경 연동을 위해서는 NumberMapping 클래스에서 변경된 값을 MainViewModel에 알리는 메커니즘이 필요합니다. 이를 위해 INotifyPropertyChanged 인터페이스를 사용하여 NumberMapping 클래스에서 값이 변경될 때 MainViewModel이 이를 인지할 수 있도록 해야 합니다.

해결 방법
NumberMapping 클래스에서 INotifyPropertyChanged 인터페이스를 구현하고, Number나 MappedString 값이 변경될 때 이벤트를 발생시킵니다.
**MainViewModel**은 NumberMapping 클래스의 변경 이벤트를 구독하고, 값이 변경되면 UI에 반영되도록 합니다.
수정된 코드
1. NumberMapping 클래스 수정
NumberMapping 클래스에서 INotifyPropertyChanged 인터페이스를 구현하여 값 변경 시 이벤트를 발생시킵니다.

csharp
코드 복사
using System;
using System.ComponentModel;

public class NumberMapping : INotifyPropertyChanged
{
    private NumberStringMappingModel _model;  // Model 인스턴스
    private int _number;  // 숫자 값
    private string _mappedString;  // 매핑된 문자열

    public event PropertyChangedEventHandler PropertyChanged;

    public NumberMapping(NumberStringMappingModel model)
    {
        _model = model;
        Number = 1;  // 기본 값 설정
    }

    // 숫자 값
    public int Number
    {
        get { return _number; }
        set
        {
            if (_number != value)
            {
                _number = value;
                MappedString = _model.GetMappedString(_number);
                OnPropertyChanged(nameof(Number));
            }
        }
    }

    // 매핑된 문자열
    public string MappedString
    {
        get { return _mappedString; }
        private set
        {
            if (_mappedString != value)
            {
                _mappedString = value;
                OnPropertyChanged(nameof(MappedString));
                LogMappedString();  // 로그 기록
            }
        }
    }

    // 매핑된 문자열과 현재 시간을 로그에 기록
    private void LogMappedString()
    {
        string logMessage = $"[{DateTime.Now}] Number: {Number}, Mapped String: {MappedString}";
        log123(logMessage);  // log123 함수에 로그 메시지를 넘김
    }

    // PropertyChanged 이벤트 호출
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // 이미 존재하는 log123 함수 (가정)
    private void log123(string message)
    {
        // 여기서 로그 파일에 기록하는 작업을 수행한다고 가정
        Console.WriteLine(message);  // 콘솔에 로그 출력
    }
}
2. MainViewModel 수정
MainViewModel은 NumberMapping 클래스의 PropertyChanged 이벤트를 구독하여 값이 변경될 때 UI에 알림을 보냅니다.

csharp
코드 복사
using System.ComponentModel;

public class MainViewModel : INotifyPropertyChanged
{
    private NumberMapping _numberMapping;  // NumberMapping 클래스 인스턴스

    public MainViewModel()
    {
        var model = new NumberStringMappingModel();  // 모델 초기화
        _numberMapping = new NumberMapping(model);   // NumberMapping 초기화
        _numberMapping.PropertyChanged += NumberMapping_PropertyChanged;  // 이벤트 구독
    }

    public event PropertyChangedEventHandler PropertyChanged;

    // 숫자 값
    public int Number
    {
        get { return _numberMapping.Number; }
        set
        {
            _numberMapping.Number = value;  // NumberMapping의 Number 속성 설정
        }
    }

    // 매핑된 문자열
    public string MappedString
    {
        get { return _numberMapping.MappedString; }
    }

    // NumberMapping의 값 변경 이벤트 처리
    private void NumberMapping_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        // Number나 MappedString이 변경될 때 UI에 알림
        if (e.PropertyName == nameof(Number) || e.PropertyName == nameof(MappedString))
        {
            OnPropertyChanged(e.PropertyName);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
3. View (XAML)
XAML에는 변경 사항이 없으며, 여전히 Number와 MappedString을 바인딩합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Number Mapping" Height="200" Width="400">

    <Window.DataContext>
        <!-- MainViewModel을 DataContext로 설정 -->
        <local:MainViewModel />
    </Window.DataContext>

    <Grid>
        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Spacing="10">

            <!-- 숫자를 입력받는 TextBox -->
            <TextBox Width="200" Height="30" 
                     Text="{Binding Number, UpdateSourceTrigger=PropertyChanged}" 
                     VerticalContentAlignment="Center" />

            <!-- 매핑된 문자열을 표시하는 TextBlock -->
            <TextBlock Width="200" Height="30" 
                       Text="{Binding MappedString}" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center" />
        </StackPanel>
    </Grid>
</Window>
주요 변경 사항 설명
NumberMapping에서 INotifyPropertyChanged 구현: Number나 MappedString 값이 변경되면 PropertyChanged 이벤트가 발생하여 MainViewModel이 이를 감지할 수 있습니다.
MainViewModel에서 이벤트 구독: NumberMapping 객체의 PropertyChanged 이벤트를 구독하고, 값이 변경될 때마다 View에 알림을 보냅니다. 이렇게 하면 NumberMapping의 값이 바뀌어도 MainViewModel과 View가 자동으로 업데이트됩니다.
UI와의 연동: TextBox에서 숫자 값을 변경하면 NumberMapping의 Number 값이 업데이트되고, 그에 따라 MappedString도 변경되며, 그 결과가 로그에 기록되고 UI에도 실시간으로 반영됩니다.
이 구조는 NumberMapping 클래스와 MainViewModel 간의 값 변경이 양방향으로 잘 연동되도록 개선되었습니다.






