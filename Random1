동기화 NTP 서버 WinForm
Model: GPT-4
User
win2012 서버에 ntp 서버가 실행중이다. win7, 이나 wi10 pc에서 그 ntp시간으로 1시간마다 체크해서 동기화하려고한다. 서버의 주소를 알면 동기화 시켜주는 c# winform 코드좀
ChatGPT

먼저, NTP 서버에 연결하고 시간을 동기화하는 간단한 C# 콘솔 응용 프로그램 코드를 제공하겠습니다. 이 코드를 WinForms 응용 프로그램에 적용할 수 있습니다.

코드는 System.Net.Sockets 및 System.Threading 네임스페이스를 사용하며 1시간마다 NTP 서버와 시간을 동기화합니다.

아래의 코드는 두 부분으로 분리되어 있습니다. 첫 번째 부분은 NTP 서버로부터 현재 시간을 받아오는 클래스이고, 두 번째 부분은 그 시간을 로컬 시스템에 설정하는 부분입니다.

먼저, NTP 시간을 가져오는 클래스를 만들어보겠습니다.

csharp

using System;
using System.Net;
using System.Net.Sockets;

public class NTPClient
{
    private const string ntpServer = "your.ntp.server.com"; // 여기에 NTP 서버 주소를 입력하십시오.

    public static DateTime GetNetworkTime()
    {
        byte[] ntpData = new byte[48]; //NTP message size - 16 bytes of the digest (RFC 2030) 
        ntpData[0] = 0x1B; //LeapIndicator = 0 (no warning), VersionNum = 3 (IPv4 only), Mode = 3 (Client Mode)

        var addresses = Dns.GetHostEntry(ntpServer).AddressList;

        //The UDP port number assigned to NTP is 123
        IPEndPoint ipEndPoint = new IPEndPoint(addresses[0], 123);
        Socket socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);

        socket.Connect(ipEndPoint);
        socket.Send(ntpData);
        socket.Receive(ntpData);
        socket.Close();

        byte offsetTransmitTime = 40;

        ulong intpart = BitConverter.ToUInt32(ntpData, offsetTransmitTime);
        ulong fractpart = BitConverter.ToUInt32(ntpData, offsetTransmitTime + 4);

        intpart = SwapEndianness(intpart);
        fractpart = SwapEndianness(fractpart);

        var milliseconds = (intpart * 1000) + ((fractpart * 1000) / 0x100000000L);

        TimeSpan timeSpan = TimeSpan.FromTicks((long)milliseconds * TimeSpan.TicksPerMillisecond);
        DateTime dateTime = new DateTime(1900, 1, 1);
        dateTime += timeSpan;

        TimeSpan offsetAmount = TimeZone.CurrentTimeZone.GetUtcOffset(dateTime);
        DateTime networkDateTime = (dateTime + offsetAmount);

        return networkDateTime;
    }

    // stackoverflow.com/a/3294698/162671
    static uint SwapEndianness(ulong x)
    {
        return (uint)(((x & 0x000000ff) << 24) +
                       ((x & 0x0000ff00) << 8) +
                       ((x & 0x00ff0000) >> 8) +
                       ((x & 0xff000000) >> 24));
    }
}

그 다음으로, 해당 시간을 컴퓨터에 설정하는 코드를 살펴보겠습니다.

csharp

using System.Runtime.InteropServices;
using System.Security.Principal;
using System.Threading;

public static class Program

User
이어서
ChatGPT

아, 죄송합니다. 저의 답변이 조금 잘린 것 같습니다.

아래에 시간을 컴퓨터에 설정하는 코드를 추가했습니다. 이것은 PInvoke를 사용하여 SetSystemTime Win32 API를 호출합니다.

csharp

{
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool SetSystemTime(ref SYSTEMTIME st);

    [StructLayout(LayoutKind.Sequential)]
    public struct SYSTEMTIME
    {
        public ushort wYear;
        public ushort wMonth;
        public ushort wDayOfWeek;
        public ushort wDay;
        public ushort wHour;
        public ushort wMinute;
        public ushort wSecond;
        public ushort wMilliseconds;
    }

    static void Main(string[] args)
    {
        new Thread(() =>
        {
            Thread.CurrentThread.IsBackground = true;
            while (true)
            {
                try
                {
                    var networkTime = NTPClient.GetNetworkTime();
                    SYSTEMTIME st = new SYSTEMTIME();
                    st.wYear = (ushort)networkTime.Year;
                    st.wMonth = (ushort)networkTime.Month;
                    st.wDay = (ushort)networkTime.Day;
                    st.wHour = (ushort)networkTime.Hour;
                    st.wMinute = (ushort)networkTime.Minute;
                    st.wSecond = (ushort)networkTime.Second;

                    if (!SetSystemTime(ref st))
                    {
                        Console.WriteLine("Could not set system time. Please run this program as administrator.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }

                // Wait for 1 hour before setting the time again
                Thread.Sleep(TimeSpan.FromHours(1));
            }
        }).Start();

        Console.ReadLine();
    }
}

위 코드는 한 시간마다 NTP 서버에서 시간을 가져와서 로컬 시스템 시간을 설정하는 작업을 수행하는 쓰레드를 생성합니다.

이 코드를 사용하려면 해당 프로그램을 시스템의 시간을 변경할 수 있는 권한으로 실행해야 합니다. 일반적으로 이는 관리자 권한을 필요로 합니다.

이 코드를 WinForms 애플리케이션에 적용하려면, Main 메서드에서 쓰레드를 시작하는 부분을 WinForms 애플리케이션의 적절한 위치에 넣으면 됩니다.

이 솔루션은 컴퓨터의 시간을 직접 변경하므로, 항상 시스템의 시간을 변경할 때는 주의를 기울여야 합니다. 이 코드는 예제로 제공되었으며, 실제 프로덕션 환경에서 사용하기 전에 적절히 테스트하고 검토해야 합니다.
ChatGPT may produce inaccurate information about people, places, or facts. ChatGPT May 12 Version

New chat
