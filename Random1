래는 요청한 기능을 반영한 수정된 C# 전체 솔루션 코드입니다. InspectionTime과 ModelName을 고유 키로 사용하며, 중복 데이터를 방지하고, IP 정보를 ipname 컬럼에 추가하도록 구현하였습니다. 또한 프로그램 중단 상황을 대비하여 데이터베이스에서 마지막 업로드된 정보를 확인하고 작업을 이어갈 수 있도록 수정했습니다.

전체 코드
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // 서비스 실행 시작
        var service = new ServiceRunner();
        await service.StartAsync();
    }
}

public class ServiceRunner
{
    private DateTime _lastInspectionTime;

    public ServiceRunner()
    {
        // DB에서 마지막 InspectionTime 가져오기
        _lastInspectionTime = GetLastInspectionTimeFromDatabase();
    }

    // DB에서 마지막 InspectionTime을 가져오는 함수
    private DateTime GetLastInspectionTimeFromDatabase()
    {
        const string query = "SELECT MAX(InspectionTime) FROM YourTable";

        using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
        {
            connection.Open();
            using (var command = new SqlCommand(query, connection))
            {
                var result = command.ExecuteScalar();
                return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
            }
        }
    }

    public async Task StartAsync()
    {
        while (true)
        {
            try
            {
                Console.WriteLine($"작업 시작: {DateTime.Now}");
                
                // 파일 처리 클래스 초기화
                var processor = new FileProcessor(_lastInspectionTime);
                var newFiles = processor.GetNewFiles(@"\\10.22.22.22\Result");

                if (newFiles.Any())
                {
                    foreach (var file in newFiles)
                    {
                        Console.WriteLine($"파일 처리 중: {file}");
                        
                        // 파일 내용 읽기
                        var rows = processor.ReadCsv(file);

                        // 데이터 업로드
                        var uploader = new DatabaseUploader();
                        await uploader.UploadToDatabaseAsync(rows);
                    }

                    // 마지막 처리된 파일의 InspectionTime 업데이트
                    _lastInspectionTime = GetLastInspectionTimeFromDatabase();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"에러 발생: {ex.Message}");
            }

            // 1분 대기
            Console.WriteLine("1분 대기 중...");
            await Task.Delay(TimeSpan.FromMinutes(1));
        }
    }
}

public class FileProcessor
{
    private readonly DateTime _lastInspectionTime;

    public FileProcessor(DateTime lastInspectionTime)
    {
        _lastInspectionTime = lastInspectionTime;
    }

    public List<string> GetNewFiles(string rootPath)
    {
        // Result 하위 모든 폴더에서 수정 시간 기준 새로운 파일 검색
        return Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories)
                        .Where(file => File.GetLastWriteTime(file) > _lastInspectionTime)
                        .ToList();
    }

    public List<Dictionary<string, object>> ReadCsv(string filePath)
    {
        var rows = new List<Dictionary<string, object>>();

        using (var reader = new StreamReader(new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
        {
            var headers = reader.ReadLine()?.Split(','); // 첫 번째 줄은 헤더
            if (headers == null) throw new InvalidOperationException("CSV 파일이 비어있습니다.");

            while (!reader.EndOfStream)
            {
                var values = reader.ReadLine()?.Split(',');
                if (values == null || values.Length < headers.Length) continue;

                var row = new Dictionary<string, object>();
                for (int i = 0; i < headers.Length; i++)
                {
                    row[headers[i]] = values[i];
                }

                // AlignResult가 N/A인 경우 제외
                if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                {
                    continue;
                }

                // IP 정보 추가
                row["ipname"] = "10.22.22.22"; // 하드코딩된 IP

                rows.Add(row);
            }
        }

        return rows;
    }
}

public class DatabaseUploader
{
    // DB 연결 문자열
    public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

    public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
    {
        using (var connection = new SqlConnection(ConnectionString))
        {
            await connection.OpenAsync();

            foreach (var row in rows)
            {
                using (var command = new SqlCommand(
                    @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                      INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                      VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                {
                    // 매핑
                    command.Parameters.AddWithValue("@InspectionTime", DateTime.Parse(row["InspectionTime"].ToString()));
                    command.Parameters.AddWithValue("@ModelName", row["ModelName"].ToString());
                    command.Parameters.AddWithValue("@AlignResult", row["AlignResult"].ToString());
                    command.Parameters.AddWithValue("@MP1DATA", float.Parse(row["MP1DATA"].ToString()));
                    command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"].ToString());
                    command.Parameters.AddWithValue("@MP2DATA", float.Parse(row["MP2DATA"].ToString()));
                    command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"].ToString());
                    command.Parameters.AddWithValue("@MP3DATA", float.Parse(row["MP3DATA"].ToString()));
                    command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"].ToString());
                    command.Parameters.AddWithValue("@MP4DATA", float.Parse(row["MP4DATA"].ToString()));
                    command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"].ToString());
                    command.Parameters.AddWithValue("@ipname", row["ipname"].ToString());

                    await command.ExecuteNonQueryAsync();
                }
            }
        }
    }
}
MSSQL 테이블 생성
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName) -- 고유 키 설정
);
코드 주요 변경점
고유 키 처리: InspectionTime과 ModelName을 기본 키로 설정.
중복 방지: IF NOT EXISTS를 사용하여 기존 데이터가 존재하면 삽입하지 않음.
IP 정보 저장: ipname 필드에 IP 정보를 추가.
DB 상태 기반 작업 이어가기: 프로그램 시작 시 DB에서 마지막 InspectionTime을 가져와 작업 이어감.
이 코드는 요구 사항을 충족하며 주석을 추가하여 이해하기 쉽게 작성되었습니다. 필요에 따라 DB 연결 문자열을 수정하세요.




