import socket
import threading
from queue import Queue

def check_smb_port(ip_address, port=445, timeout=1):
    """
    주어진 IP 주소의 지정된 포트가 열려 있는지 확인합니다.
    기본 포트는 SMB/CIFS 프로토콜에 사용되는 445번입니다.
    성공하면 True를, 실패하면 False를 반환합니다.
    """
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((ip_address, port))
        sock.close()
        return result == 0
    except (socket.gaierror, socket.timeout, Exception):
        return False

def worker(q, results):
    """큐에서 IP 주소를 가져와 포트 체크를 수행하는 워커 함수"""
    while True:
        ip = q.get()
        if ip is None: # None을 받으면 종료
            break
        
        if check_smb_port(ip):
            print(f"? {ip}:445 포트가 열려 있습니다. 공유 폴더가 있을 가능성이 높습니다.")
            results.append(ip)
        else:
            # 닫혀있는 포트는 출력하지 않아 로그를 깔끔하게 유지합니다.
            pass
        q.task_done()

# --- 스캔 설정 ---
base_ip_prefix = "10.56."
# 스캔할 세 번째 옥텟 (xx 부분)의 시작과 끝을 151부터 173으로 설정
start_third_octet = 151
end_third_octet = 173

# 한 IP 대역 내에서 스캔할 네 번째 옥텟의 범위
start_fourth_octet = 1
end_fourth_octet = 254 # 255는 브로드캐스트 주소일 수 있으므로 254까지

num_threads = 50 # 동시에 체크할 스레드 수 (네트워크 상황에 따라 조절)

# --- 스캔 실행 ---
if __name__ == "__main__":
    print(f"--- 10.56.{start_third_octet}.* ~ 10.56.{end_third_octet}.* 대역 SMB (445) 포트 스캔 시작 ---")
    print(f"스캔 범위: {base_ip_prefix}{start_third_octet}.{start_fourth_octet} 부터 {base_ip_prefix}{end_third_octet}.{end_fourth_octet} 까지")
    print(f"동시 스레드 수: {num_threads}")
    print("---------------------------------------------------\n")

    ip_queue = Queue()
    open_ips = []
    threads = []

    # 큐에 스캔할 IP 주소 추가
    for third_octet in range(start_third_octet, end_third_octet + 1):
        for fourth_octet in range(start_fourth_octet, end_fourth_octet + 1):
            ip = f"{base_ip_prefix}{third_octet}.{fourth_octet}"
            ip_queue.put(ip)

    # 워커 스레드 시작
    for _ in range(num_threads):
        t = threading.Thread(target=worker, args=(ip_queue, open_ips))
        t.daemon = True 
        t.start()
        threads.append(t)

    # 모든 IP 주소가 처리될 때까지 기다림
    ip_queue.join()

    # 워커 스레드 종료 신호 보내기
    for _ in range(num_threads):
        ip_queue.put(None)
    for t in threads:
        t.join() 

    print("\n---------------------------------------------------")
    print("--- 스캔 완료 ---")
    if open_ips:
        print("\n열려있는 445 포트 (공유 폴더 가능성 있는 IP) 목록:")
        for ip in sorted(open_ips):
            print(f"- {ip}")
    else:
        print("열려있는 445 포트를 찾을 수 없었습니다.")
    print("---------------------------------------------------")