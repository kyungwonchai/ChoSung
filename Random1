import os
import shutil
import time
import pandas as pd

def process_npm_list():
    """
    지정된 경로의 NPM_List.csv 파일이 최신 버전일 경우,
    이를 복사하고 판다스를 이용해 처리한 후 NPM_LIB.csv로 저장합니다.
    """
    # 파일 경로 설정
    source_file = '/mnt/npmlib/NPM_List.csv'
    local_file = 'NPM_List.csv'
    output_file = 'NPM_LIB.csv'

    try:
        # 1. 원본 파일 존재 여부 확인
        if not os.path.exists(source_file):
            print(f"오류: 원본 파일 '{source_file}'을(를) 찾을 수 없습니다.")
            return

        # 2. 로컬 파일과 원본 파일의 수정 시간 비교
        source_mtime = os.path.getmtime(source_file)
        # 로컬 파일이 없으면 0으로 설정하여 항상 복사되도록 함
        local_mtime = os.path.getmtime(local_file) if os.path.exists(local_file) else 0

        if source_mtime > local_mtime:
            # 3. 최신 파일 감지 및 5초 대기
            print(f"새로운 버전의 '{os.path.basename(source_file)}' 파일이 감지되었습니다.")
            print("5초 후에 복사 및 처리를 시작합니다...")
            time.sleep(5)

            # 4. 파일 복사
            shutil.copy2(source_file, local_file)
            print(f"'{local_file}' 파일 복사 완료.")

            # 5. Pandas로 데이터 처리
            print("데이터 처리를 시작합니다...")
            # CSV 파일을 DataFrame으로 읽기
            df = pd.read_csv(local_file)

            # 6. '[NPM]' 컬럼 삭제
            if '[NPM]' in df.columns:
                df = df.drop(columns=['[NPM]'])
                print("'[NPM]' 컬럼을 삭제했습니다.")
            else:
                print("'[NPM]' 컬럼이 존재하지 않습니다.")

            # 7. 첫 번째 열에 빈 값이 나오는 첫 행 찾기
            first_column_name = df.columns[0]
            # isna()는 빈 값(NaN)을, isnull()은 None/NaN 모두를 감지합니다.
            empty_rows = df[df[first_column_name].isna()]

            if not empty_rows.empty:
                first_empty_index = empty_rows.index[0]
                # 빈 행 직전까지 데이터 자르기
                df = df.iloc[:first_empty_index]
                print(f"첫 번째 열의 {first_empty_index}번째 줄에서 발견된 빈 셀을 기준으로 데이터를 잘랐습니다.")
            else:
                print("첫 번째 열에서 빈 셀을 찾지 못했습니다. 전체 데이터를 사용합니다.")

            # 8. 결과 파일을 CSV로 저장 (인덱스는 제외)
            df.to_csv(output_file, index=False, encoding='utf-8-sig')
            print(f"성공: 모든 처리가 완료되었으며, 결과가 '{output_file}'에 저장되었습니다. ?")

        else:
            print(f"이미 최신 버전의 '{local_file}' 파일을 가지고 있습니다. 작업을 건너뜁니다.")

    except FileNotFoundError:
        print(f"오류: '{source_file}' 경로 또는 파일이 존재하지 않습니다. mnt 연결을 확인해주세요.")
    except Exception as e:
        print(f"예상치 못한 오류가 발생했습니다: {e}")

if __name__ == "__main__":
    process_npm_list()