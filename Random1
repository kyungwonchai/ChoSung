import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';

const RealtimeChart = () => {
  const [temperatureData, setTemperatureData] = useState([]);
  const [humidityData, setHumidityData] = useState([]);
  const [logs, setLogs] = useState([]);

  const fetchLatestData = async () => {
    setLogs((prevLogs) => [...prevLogs, 'Fetching data...']);
    try {
      const response = await axios.get('http://10.244.111.111:5000/api/getLatestData');
      setLogs((prevLogs) => [...prevLogs, 'Data fetched successfully.', `Fetched data: ${JSON.stringify(response.data)}`]);
      const data = response.data;

      if (!Array.isArray(data)) {
        setLogs((prevLogs) => [...prevLogs, 'Fetched data is not an array.']);
        return;
      }

      const latestTemperatureData = data.map((item) => item.temp1).slice(-200);
      const latestHumidityData = data.map((item) => item.humid1).slice(-200);

      setTemperatureData(latestTemperatureData);
      setHumidityData(latestHumidityData);
    } catch (error) {
      setLogs((prevLogs) => [...prevLogs, `Error fetching data: ${error.message}`]);
    }
  };

  useEffect(() => {
    fetchLatestData();
    const interval = setInterval(() => {
      fetchLatestData();
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div>
      <h1>Realtime Temperature and Humidity Chart</h1>
      {temperatureData.length > 0 && humidityData.length > 0 ? (
        <Line
          data={{
            labels: Array.from({ length: 200 }, (_, i) => i + 1),
            datasets: [
              {
                label: 'Temperature',
                data: temperatureData,
                borderColor: 'red',
                backgroundColor: 'rgba(255, 0, 0, 0.2)',
                fill: true,
                yAxisID: 'temperature-y-axis',
              },
              {
                label: 'Humidity',
                data: humidityData,
                borderColor: 'blue',
                backgroundColor: 'rgba(0, 0, 255, 0.2)',
                fill: true,
                yAxisID: 'humidity-y-axis',
              },
            ],
          }}
          options={{
            scales: {
              x: {
                display: true,
                title: {
                  display: true,
                  text: 'Data Points',
                },
              },
              y: {
                display: true,
                title: {
                  display: true,
                  text: 'Value',
                },
              },
              'temperature-y-axis': {
                min: 20,
                max: 30,
                ticks: {
                  stepSize: 1,
                },
              },
              'humidity-y-axis': {
                min: 30,
                max: 70,
                ticks: {
                  stepSize: 5,
                },
              },
            },
          }}
        />
      ) : (
        <p>Loading...</p>
      )}

      {/* Render the logs */}
      <h2>Logs:</h2>
      <ul>
        {logs.map((log, index) => (
          <li key={index}>{log}</li>
        ))}
      </ul>
    </div>
  );
};

export default RealtimeChart;
