using System;
using System.Data;
using System.Net.NetworkInformation;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

public partial class MainForm : Form
{
    DataTable dataTable;
    int timeout = 100;  // 타임아웃을 100ms로 설정.

    public MainForm()
    {
        InitializeComponent();
        
        // 테스트를 위한 DataTable 생성
        dataTable = new DataTable();
        dataTable.Columns.Add("IPAddress", typeof(string));
        dataTable.Columns.Add("Conn", typeof(int));
        
        // 40개의 IP 주소를 DataTable에 추가
        for (int i = 0; i < 40; i++)
        {
            dataTable.Rows.Add($"192.168.1.{i}", 0);
        }
    }

    private async void btnPing_Click(object sender, EventArgs e)
    {
        await RunPingTest(dataTable);
    }

    private async Task RunPingTest(DataTable dt)
    {
        var tasks = new Task[dt.Rows.Count];

        for (int i = 0; i < dt.Rows.Count; i++)
        {
            var index = i;  // 클로저 때문에 별도의 변수를 만들어줍니다.
            tasks[i] = DoPing(dt.Rows[index]);
        }

        await Task.WhenAll(tasks);
    }

    private async Task DoPing(DataRow row)
    {
        string ipAddress = row["IPAddress"].ToString();

        using (var ping = new Ping())
        {
            var cts = new CancellationTokenSource(timeout);
            var options = new PingOptions(64, true);

            try
            {
                var buffer = new byte[32];
                var reply = await ping.SendPingAsync(ipAddress, timeout, buffer, options).WithCancellation(cts.Token);

                if (reply.Status == IPStatus.Success)
                {
                    this.Invoke((Action)(() =>
                    {
                        row["Conn"] = 1;
                    }));
                }
                else
                {
                    this.Invoke((Action)(() =>
                    {
                        row["Conn"] = 0;
                    }));
                }
            }
            catch (OperationCanceledException) // 타임아웃이 발생한 경우.
            {
                this.Invoke((Action)(() =>
                {
                    row["Conn"] = 0;
                }));
            }
        }
    }
}

public static class TaskExtensions
{
    public static async Task<T> WithCancellation<T>(this Task<T> task, CancellationToken cancellationToken)
    {
        var tcs = new TaskCompletionSource<bool>();
        using(cancellationToken.Register(s => ((TaskCompletionSource<bool>)s).TrySetResult(true), tcs))
            if (task != await Task.WhenAny(task, tcs.Task))
                throw new OperationCanceledException(cancellationToken);
        return await task;
    }
}
