께를 전역 변수로 지정하여 조정할 수 있도록 하겠습니다.

MainWindow.xaml.cs
테두리 두께를 전역 변수로 지정하고, QR 코드 아래의 글자를 2줄로 표시하는 기능을 추가합니다.

csharp
코드 복사
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ZXing;
using IniParser;
using IniParser.Model;
using OfficeOpenXml; // 엑셀 내보내기 위해 추가

namespace QRMAKER
{
    public partial class MainWindow : ThemedWindow
    {
        private List<Item> _items;
        private Dictionary<string, StackPanel> _qrCodePanels;
        private string _settingsFile = "settings.ini";
        private int _qrBorderThickness = 5; // QR 코드 테두리 두께

        public MainWindow()
        {
            InitializeComponent();
            _items = new List<Item>();
            _qrCodePanels = new Dictionary<string, StackPanel>();
            LoadSettings(); // 설정 값을 로드하는 메서드 호출
        }

        private void LoadSettings()
        {
            if (File.Exists(_settingsFile))
            {
                var parser = new FileIniDataParser();
                IniData data = parser.ReadFile(_settingsFile);
                if (data["Settings"].ContainsKey("QRCodeSize"))
                {
                    sizeSlider.Value = double.Parse(data["Settings"]["QRCodeSize"]);
                    sizeTextBox.Text = data["Settings"]["QRCodeSize"];
                }
                if (data["Settings"].ContainsKey("QRCodeSpacing"))
                {
                    spacingSlider.Value = double.Parse(data["Settings"]["QRCodeSpacing"]);
                    spacingTextBox.Text = data["Settings"]["QRCodeSpacing"];
                }
            }
        }

        private void SizeSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                sizeTextBox.Text = sizeSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Size slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SpacingSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                spacingTextBox.Text = spacingSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Spacing slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SizeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(sizeTextBox.Text, out double value))
            {
                sizeSlider.Value = value;
            }
        }

        private void SpacingTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(spacingTextBox.Text, out double value))
            {
                spacingSlider.Value = value;
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (_items != null && _items.Count > 0)
            {
                GenerateQRCodes();
            }
        }

        private void GenerateQRCodes()
        {
            try
            {
                qrCodePanel.Children.Clear();
                double qrCodeWidth = sizeSlider.Value;
                double qrCodeHeight = sizeSlider.Value;
                double spacing = spacingSlider.Value;

                foreach (var item in _items)
                {
                    try
                    {
                        var qrCode = GenerateQRCode(item.Magazine);
                        var image = new System.Windows.Controls.Image
                        {
                            Source = BitmapToImageSource(AddBorderToQRCode(qrCode, _qrBorderThickness)),
                            Width = qrCodeWidth,
                            Height = qrCodeHeight,
                            Margin = new Thickness(spacing)
                        };

                        var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };

                        // QR 코드 아래 텍스트를 2줄로 표시
                        var textBlock = new TextBlock
                        {
                            Text = item.Magazine,
                            Foreground = System.Windows.Media.Brushes.Blue,
                            TextWrapping = TextWrapping.Wrap,
                            HorizontalAlignment = HorizontalAlignment.Center,
                            MaxWidth = qrCodeWidth // 텍스트가 QR 코드 너비를 넘지 않도록 설정
                        };

                        stackPanel.Children.Add(image);
                        stackPanel.Children.Add(textBlock);

                        image.MouseLeftButtonDown += (s, e) =>
                        {
                            DeselectAllRows();
                            int index = _items.IndexOf(item);
                            tableView.FocusedRowHandle = index;
                            gridControl.View.FocusedRowHandle = index;
                            HighlightQRCode(item.Magazine);
                        };

                        qrCodePanel.Children.Add(stackPanel);
                        _qrCodePanels[item.Magazine] = stackPanel;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"QR Code generation error for item '{item.Magazine}': {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"QR Code generation error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Bitmap GenerateQRCode(string text)
        {
            try
            {
                BarcodeWriter writer = new BarcodeWriter
                {
                    Format = BarcodeFormat.QR_CODE,
                    Options = new ZXing.Common.EncodingOptions
                    {
                        Height = 200,
                        Width = 200
                    }
                };
                return writer.Write(text);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error generating QR Code: {ex.Message}");
            }
        }

        private Bitmap AddBorderToQRCode(Bitmap qrCode, int borderThickness)
        {
            int width = qrCode.Width + 2 * borderThickness;
            int height = qrCode.Height + 2 * borderThickness;
            Bitmap result = new Bitmap(width, height);
            using (Graphics g = Graphics.FromImage(result))
            {
                g.Clear(Color.White);
                g.DrawImage(qrCode, new Point(borderThickness, borderThickness));
            }
            return result;
        }

        private BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            try
            {
                using (var memory = new System.IO.MemoryStream())
                {
                    bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
                    memory.Position = 0;
                    var bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.StreamSource = memory;
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    bitmapImage.EndInit();
                    return bitmapImage;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error converting Bitmap to ImageSource: {ex.Message}");
            }
        }

        private bool IsAlphanumeric(string str)
        {
            foreach (char c in str)
            {
                if (!char.IsLetterOrDigit(c))
                {
                    return false;
                }
            }
            return true;
        }

        private void DeselectAllRows()
        {
            try
            {
                for (int i = 0; i < gridControl.VisibleRowCount; i++)
                {
                    int rowHandle = gridControl.GetRowHandleByVisibleIndex(i);
                    tableView.UnselectRow(rowHandle);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deselecting rows: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void HighlightQRCode(string magazine)
        {
            foreach (var key in _qrCodePanels.Keys)
            {
                _qrCodePanels[key].Background = System.Windows.Media.Brushes.Transparent;
            }
            if (_qrCodePanels.ContainsKey(magazine))
            {
                _qrCodePanels[magazine].Background = System.Windows.Media.Brushes.Yellow;
            }
        }

        private void SaveSettings()
        {
            var parser = new FileIniDataParser();
            var data = new IniData();
            data["Settings"]["QRCodeSize"] = sizeSlider.Value.ToString();
            data["Settings"]["QRCodeSpacing"] = spacingSlider.Value.ToString();
            parser.WriteFile(_settingsFile, data);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            SaveSettings();
            ExportGridToExcel();
        }

        private void ExportGridToExcel()
        {
            string folderPath = @"C:\agent\qrcode";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            string filePath = System.IO.Path.Combine(folderPath, "GridData.xlsx");

            using (ExcelPackage pck = new ExcelPackage())
            {
                ExcelWorksheet ws = pck.Workbook.Worksheets.Add("GridData");

                ws.Cells["A1"].LoadFromCollection(_items, true);

                FileStream objFileStrm = File.Create(filePath);
                objFileStrm.Close();
                File.WriteAllBytes(filePath, pck.GetAsByteArray());
            }
        }
    }

    public class Item
    {
        public int No { get; set; }
        public string Magazine { get; set; }
    }
}