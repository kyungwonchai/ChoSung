이스에서 데이터를 가져오고, 이 데이터를 기반으로 라인별 차트를 생성하여 실시간으로 갱신합니다. 실제 구현에서는 데이터베이스로부터 실시간으로 데이터를 가져오는 로직이 필요합니다만, 여기서는 예시를 위해 타이머를 사용하여 가상의 데이터를 생성하고 업데이트하는 방식을 사용하겠습니다.

1. 데이터 클래스 및 SQL 연결 (가정)
csharp
Copy code
public class ChartData
{
    public DateTime FileTime { get; set; }
    public double CTValue { get; set; }
    public string Model { get; set; }
    public string Division { get; set; }
    public string MaskNumber { get; set; }
    public string Rev { get; set; }
    public string Line { get; set; }
    public string Type { get; set; }
}

// 데이터를 가져오는 메소드는 예시로 제외하고, 타이머에서 가상의 데이터를 생성합니다.
2. 차트 생성 및 데이터 바인딩
csharp
Copy code
Dictionary<string, ObservableCollection<ChartData>> lineDataSources = new Dictionary<string, ObservableCollection<ChartData>>();

void CreateCharts()
{
    // 예시로 사용할 라인 목록
    var lines = new List<string> { "Line1", "Line2", "Line3" };

    foreach (var line in lines)
    {
        var lineDataT = new ObservableCollection<ChartData>();
        var lineDataB = new ObservableCollection<ChartData>();
        lineDataSources[line + "-T"] = lineDataT;
        lineDataSources[line + "-B"] = lineDataB;

        var chart = new ChartControl();
        chart.Diagram = new XYDiagram2D();
        MainStackPanel.Children.Add(chart);

        var seriesT = CreateSeries(lineDataT, "T");
        var seriesB = CreateSeries(lineDataB, "B");
        chart.Diagram.Series.Add(seriesT);
        chart.Diagram.Series.Add(seriesB);
    }
}

LineSeries2D CreateSeries(ObservableCollection<ChartData> data, string type)
{
    var series = new LineSeries2D
    {
        DisplayName = type,
        ArgumentDataMember = "FileTime",
        ValueDataMember = "CTValue",
        DataSource = data
    };

    series.ToolTipPointPattern = "Model: {Model}\nDivision: {Division}\nMask Number: {MaskNumber}\nRev: {Rev}\nCT: {CTValue}\nFile Time: {FileTime}";
    return series;
}
3. 실시간 데이터 업데이트 로직
csharp
Copy code
void UpdateData()
{
    // 타이머에서 호출될 메소드로, 가상의 데이터를 생성합니다.
    // 실제 구현에서는 데이터베이스 또는 실시간 데이터 소스에서 데이터를 가져와야 합니다.

    var newData = new ChartData
    {
        FileTime = DateTime.Now,
        CTValue = new Random().NextDouble() * 100,
        Model = "ModelX",
        Division = "T",
        MaskNumber = "Mask123",
        Rev = "RevA",
        Line = "Line1",
        Type = "T"
    };

    var lineDataSource = lineDataSources[newData.Line + "-" + newData.Type];
    Application.Current.Dispatcher.Invoke(() =>
    {
        lineDataSource.Add(newData);
        if (lineDataSource.Count > 1000)
        {
            lineDataSource.RemoveAt(0);
        }
    });
}
4. 타이머 설정
csharp
Copy code
System.Timers.Timer updateTimer;

void SetupTimer()
{
    updateTimer = new System.Timers.Timer(1000); // 매 초마다 업데이트
    updateTimer.Elapsed += (sender, e) => UpdateData();
    updateTimer.Start();
}
5. XAML
xml
Copy code
<Window xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts">
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- 차트가 여기에 동적으로 생성됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
6. 초기화 및 실행
csharp
Copy code
// 프로그램 시작 시 호출
CreateCharts();
SetupTimer();