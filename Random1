using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Diagnostics;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using DevExpress.Xpf.Grid;

namespace LockerManagementApp.Infrastructure
{
    public class HighlightCellStyleSelector : StyleSelector
    {
        public Style DefaultStyle { get; set; }
        public Style HighlightStyle { get; set; }
        public Style UnsavedStyle { get; set; }

        public override Style SelectStyle(object item, DependencyObject container)
        {
            // 유효성 검사: RowData 및 UI 요소 확인
            if (item is not RowData rowData || container is not FrameworkElement element)
                return DefaultStyle;

            // TableView 가져오기 (DevExpress 그리드 뷰)
            var view = GridControl.GetView(element) as TableView;
            if (view?.DataContext is not MainViewModel viewModel)
                return DefaultStyle;

            // 컬럼 정보와 Row 객체 가져오기
            var gridColumn = rowData.Column;
            var entity = rowData.Row;

            if (gridColumn == null || entity == null)
                return DefaultStyle;

            try
            {
                // 엔터티 상태 확인 (추가됨 or 수정됨)
                var state = viewModel.GetEntityState(entity);
                if (state == EntityState.Added || state == EntityState.Modified)
                    return UnsavedStyle;

                // 선택 셀 강조 조건 확인
                var currentFieldName = gridColumn.FieldName;
                var selectedFieldName = viewModel.SelectedCellColumnFieldName;
                var selectedValue = viewModel.SelectedCellValue;

                var targetColumns = new List<string>
                {
                    "LockerType", "Floor", "Zone", "SubPart", "Administrator"
                };

                if (targetColumns.Contains(currentFieldName) &&
                    currentFieldName == selectedFieldName &&
                    selectedValue != null &&
                    entity is LockerAssignment currentAssignment)
                {
                    var propertyInfo = typeof(LockerAssignment).GetProperty(currentFieldName, BindingFlags.Public | BindingFlags.Instance);
                    if (propertyInfo != null)
                    {
                        var currentValue = propertyInfo.GetValue(currentAssignment);
                        if (Equals(currentValue, selectedValue))
                            return HighlightStyle;
                    }
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"[HighlightCellStyleSelector] Error: {ex}");
            }

            return DefaultStyle;
        }
    }
}
