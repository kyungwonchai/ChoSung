PLC 시뮬레이터의 동작을 디버깅하고 모든 상태를 자세히 로깅하려면 각 주요 동작과 메서드에 디버그 로그를 추가해야 합니다. 이를 통해 PLC 시뮬레이터가 어떤 작업을 수행 중인지, 그리고 각 단계에서 어떤 데이터가 처리되고 있는지를 확인할 수 있습니다.

수정된 PLCSimulator.cs
PLCSimulator 클래스에 디버그 로그를 추가하여 동작 상태를 상세히 기록하도록 수정했습니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Diagnostics;

namespace PLCPanaSimul.Services
{
    public class PLCSimulator
    {
        private Dictionary<string, int> _memory; // PLC의 메모리 시뮬레이션
        private Action<string> _logCallback; // 로그 출력 콜백

        public PLCSimulator(Action<string> logCallback)
        {
            _memory = new Dictionary<string, int>
            {
                { "D2300", 0 },
                { "D2330", 0 },
                { "R520", 0 },
                { "R521", 0 }
            };
            _logCallback = logCallback;

            Debug.WriteLine("PLC 시뮬레이터 초기화 완료."); // 디버그 로그
        }

        // 시리얼 포트로 수신된 데이터를 처리하는 메서드
        public void ProcessReceivedData(string data)
        {
            Debug.WriteLine($"수신된 데이터 처리 시작: {data}"); // 디버그 로그
            _logCallback?.Invoke($"Received: {data}");

            // Mewtocol 프로토콜 명령 처리 로직 (간단한 예시)
            if (data.Contains("WDD"))
            {
                Debug.WriteLine($"WDD 명령 발견. 데이터: {data}"); // 디버그 로그

                // 예시: D2330에 쓰기 명령이 포함된 경우 처리
                if (data.Contains("D2330"))
                {
                    Debug.WriteLine($"D2330 쓰기 명령 발견."); // 디버그 로그

                    // 명령에서 값을 추출하여 D2330에 저장
                    var value = ExtractValueFromCommand(data);
                    WriteDataToPLC("D2330", value);
                }
            }
        }

        // PLC 메모리에 데이터를 쓰는 메서드
        public void WriteDataToPLC(string address, int value)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = value;
                _logCallback?.Invoke($"Data written to {address}: {value}");
                Debug.WriteLine($"{address}에 데이터 {value} 기록 완료."); // 디버그 로그
            }
        }

        // PLC로 데이터를 전송하는 메서드 (시뮬레이션)
        public void SendDataToPLC(string address, string value)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = int.Parse(value);
                _logCallback?.Invoke($"Data sent to {address}: {value}");
                Debug.WriteLine($"{address}에 데이터 {value} 전송 완료."); // 디버그 로그

                // 동작 완료를 시뮬레이션하기 위해 3초 후에 D2330에 동작 완료 값을 씀
                Task.Delay(3000).ContinueWith(_ => CompleteOperation("D2330"));
                Debug.WriteLine("3초 후 D2330에 동작 완료 값을 쓸 예정."); // 디버그 로그
            }
        }

        // 동작 완료를 시뮬레이션하는 메서드
        public void CompleteOperation(string address)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = 1; // 동작 완료 상태를 표시하기 위해 1을 씀
                _logCallback?.Invoke($"Operation completed at {address}");
                Debug.WriteLine($"{address}에 동작 완료 표시 (1) 기록 완료."); // 디버그 로그
            }
        }

        // 센서 상태를 설정하는 메서드
        public void SetSensorStatus(string sensor, bool status)
        {
            if (_memory.ContainsKey(sensor))
            {
                _memory[sensor] = status ? 1 : 0;
                _logCallback?.Invoke($"Sensor {sensor} status: {(status ? "Active" : "Inactive")}");
                Debug.WriteLine($"센서 {sensor} 상태 설정: {(status ? "활성화" : "비활성화")}"); // 디버그 로그
            }
        }

        // 명령에서 값을 추출하는 메서드 (예시로, 문자열에서 값 부분을 추출)
        private int ExtractValueFromCommand(string command)
        {
            Debug.WriteLine($"명령에서 값 추출 시작: {command}"); // 디버그 로그
            // 명령의 형식에 따라 값을 추출하는 로직 구현 필요
            // 예시로, "WDD02330001" 형식에서 마지막 4자리의 숫자를 추출한다고 가정
            string valueString = command.Substring(command.Length - 4);
            int extractedValue = int.TryParse(valueString, out int value) ? value : 0;
            Debug.WriteLine($"명령에서 추출된 값: {extractedValue}"); // 디버그 로그
            return extractedValue;
        }
    }
}
수정된 내용 설명
디버그 로그 추가:

각 메서드의 시작 부분, 주요 로직 실행 전후, 그리고 조건문 안에서 디버그 로그를 추가했습니다. 이를 통해 프로그램의 실행 흐름을 자세히 추적할 수 있습니다.
Debug.WriteLine 메서드를 사용하여 디버그 창에 로그 메시지를 출력합니다. 이를 통해 디버깅 시 현재 프로그램이 어떤 동작을 하고 있는지, 어떤 데이터를 처리하고 있는지를 실시간으로 확인할 수 있습니다.
디버그 로그 메시지 내용:

한글로 작성하여 각 동작이 무엇을 의미하는지 쉽게 이해할 수 있도록 했습니다. 예를 들어, "D2330 쓰기 명령 발견."과 같은 메시지는 프로그램이 해당 명령을 인식했음을 알려줍니다.
값 추출이나 데이터 쓰기 등 중요한 동작이 수행될 때마다 해당 동작을 명시적으로 기록합니다.
용도:

이 코드를 실행할 때 Visual Studio의 디버그 창을 통해 출력되는 로그를 확인할 수 있습니다. 이를 통해 프로그램이 예상대로 작동하는지, 또는 특정 명령이 제대로 처리되지 않는지 등을 확인할 수 있습니다.
디버깅 방법
디버그 모드 실행:

Visual Studio에서 프로젝트를 디버그 모드로 실행합니다.
디버그 로그 확인:

프로그램을 실행한 후, Visual Studio의 "출력(Output)" 창에서 "디버그(Debug)" 드롭다운을 선택하여 Debug.WriteLine으로 출력된 로그 메시지를 확인합니다.
테스트:

PLC 시뮬레이터에서 신호를 보내거나 데이터를 쓰고 나서 출력 창에 로그가 제대로 나오는지 확인합니다. 이 과정을 통해 PLC 시뮬레이터의 동작을 정확히 이해하고 필요한 부분을 수정할 수 있습니다.
이와 같은 디버깅 로그를 사용하면 PLC 시뮬레이터의 상태를 더 명확하게 이해하고, 예상치 못한 동작이나 에러를 빠르게 찾을 수 있습니