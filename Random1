파일을 적절하게 관리해야 합니다. 아래에 각 단계별로 어떻게 새로운 버전을 관리하고 배포할 수 있는지 설명드리겠습니다.

1. APK 파일 및 버전 정보 업데이트
새로운 APK 파일 생성:

Android 프로젝트에서 새로운 기능이나 버그 수정 후, 앱을 새 버전으로 빌드합니다.
새 APK 파일을 생성할 때 versionCode와 versionName을 업데이트해야 합니다. build.gradle 파일에서 이 정보를 관리할 수 있습니다.
gradle
코드 복사
android {
    defaultConfig {
        applicationId "com.example.app"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 2  // 버전 코드를 증가시킵니다.
        versionName "1.1"  // 버전 이름을 증가시킵니다.
    }
}
그런 다음, Build -> Build Bundle(s) / APK(s) -> Build APK(s)를 선택하여 새 APK 파일을 생성합니다.
서버에 새로운 APK 파일 업로드:

새 APK 파일이 생성되면, 해당 파일을 서버에 업로드합니다. 서버의 static/apks/ 디렉터리에 기존 APK 파일을 새로운 APK 파일로 교체합니다.
예를 들어, 기존의 apk1.apk 파일을 새 버전의 APK 파일로 교체합니다:
bash
코드 복사
cp /path/to/new/apk1.apk /var/www/html/static/apks/apk1.apk
버전 정보 파일 업데이트:

version_files/ 디렉터리에 있는 apk1_version.json 파일을 업데이트하여 새 버전 번호와 파일 경로를 반영합니다.
예를 들어, apk1_version.json 파일을 다음과 같이 업데이트합니다:

json
코드 복사
{
    "version": "1.1",  // 새로운 버전 이름
    "apk_url": "/download/apk1"
}
이 파일은 Flask API가 제공하는 버전 정보를 업데이트하여 클라이언트가 새로운 버전을 감지할 수 있도록 합니다.

2. 서버 배포 및 테스트
서버의 Flask 애플리케이션 재시작:

서버에 새 APK 파일과 버전 정보 파일을 업로드한 후, Flask 애플리케이션을 재시작하여 변경 사항을 반영합니다.
bash
코드 복사
sudo systemctl restart apkmanager
테스트:

브라우저에서 API 엔드포인트를 테스트하여 새로운 버전 정보가 제대로 반환되는지 확인합니다.
bash
코드 복사
curl http://10.244.122.122:8116/api/apk1/version
이 요청이 올바른 버전 정보를 반환해야 합니다.

3. Android 클라이언트에서 업데이트 확인
클라이언트 앱에서 업데이트 체크:
클라이언트 측에서는 기존 checkForUpdates 함수가 새 버전을 감지하고 다운로드할 수 있어야 합니다. 앱을 실행하면 서버의 새 버전 정보가 감지되고, 필요한 경우 자동으로 APK를 다운로드 및 설치하게 됩니다.
4. 버전 관리 전략
버전 관리 파일 백업:

각 버전 업데이트 전에 기존 APK 파일과 버전 정보를 백업해 두는 것이 좋습니다. 이를 통해 문제가 발생할 경우 이전 버전으로 롤백할 수 있습니다.
버전 기록 유지:

각 버전의 변경 사항을 기록해 두는 것이 중요합니다. 예를 들어, CHANGELOG.md 파일을 만들어 각 버전의 변경 내역을 기록할 수 있습니다.
자동화 도구 고려:

배포 및 버전 관리가 빈번해지면, 이를 자동화할 수 있는 도구를 사용하는 것이 좋습니다. 예를 들어, CI/CD 도구를 사용하여 새로운 빌드를 자동으로 서버에 배포하고 버전 관리 파일을 업데이트할 수 있습니다.
이 과정들을 따라 앱의 새로운 버전을 관리하고 배포할 수 있습니다. 각 단계에서 실수 없이 APK 파일과 버전 정보를 정확히 업데이트하는 것이 중요합니다. 이를 통해 사용자들이 항상 최신 버전을 사용할 수 있도록 보장할 수 있습니다