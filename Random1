아래에 서버와 클라이언트 간의 편집 상태를 실시간으로 공유하기 위한 간단한 예제 코드를 작성해 두었습니다.
서버 측 (ASP.NET)

Startup.cs

csharp

using Microsoft.Owin;
using Owin;

[assembly: OwinStartup(typeof(YourNamespace.Startup))]
namespace YourNamespace
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.MapSignalR();
        }
    }
}

EditHub.cs

csharp

using Microsoft.AspNet.SignalR;

public class EditHub : Hub
{
    public void UpdateEditStatus(string key1, string username, string column)
    {
        Clients.Others.receiveEditStatus(key1, username, column);
    }
}

클라이언트 측 (WPF, .NET 4.8)

csharp

using Microsoft.AspNet.SignalR.Client;
using System.Threading.Tasks;

class YourWpfClass
{
    HubConnection hubConnection;
    IHubProxy hubProxy;

    public async Task InitializeSignalR()
    {
        hubConnection = new HubConnection("http://yourServerAddress");
        hubProxy = hubConnection.CreateHubProxy("EditHub");

        await hubConnection.Start();

        hubProxy.On<string, string, string>("receiveEditStatus", (key1, username, column) =>
        {
            // 편집 상태 처리
        });
    }
}

배포

서버 애플리케이션은 IIS에 배포하면 Windows Server 2012에서도 작동합니다. 클라이언트 애플리케이션은 각 사용자의 PC에 설치됩니다.

이 코드는 가장 기본적인 SignalR의 활용 예시입니다. 필요한 로직을 추가하여 확장할 수 