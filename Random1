 OpenCV로 화면에서 특정 숫자 감지 후 클릭하는 자동화 코드
🔥 핵심 기능:
✅ OpenCvSharp을 사용하여 화면에서 숫자 OCR 감지
✅ 817, 345 ~ 1381, 545 좌표 내 80px 간격의 표 탐색
✅ 흰 배경 + 연한 회색 테두리 내 숫자 확인
✅ 0이 아닌 숫자가 있으면 우측부터 좌측으로 클릭 (각 행마다 우측부터)
✅ 비동기 방식으로 클릭 실행 (Task.Run)
✅ Windows API의 mouse_event()로 클릭 수행
✅ 0.5초 이내에 클릭 속도 최적화

📌 NuGet 패키지 설치
📌 필수 패키지:

OpenCvSharp4
OpenCvSharp4.Windows
TesseractOCR (OCR 인식용)
mathematica
코드 복사
Install-Package OpenCvSharp4
Install-Package OpenCvSharp4.Windows
Install-Package TesseractOCR
📌 C# 코드 (OCR로 숫자 인식 후 자동 클릭)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using OpenCvSharp;
using OpenCvSharp.Extensions;
using Tesseract;

class Program
{
    // 마우스 클릭을 위한 WinAPI 호출
    [DllImport("user32.dll")]
    private static extern void SetCursorPos(int x, int y);

    [DllImport("user32.dll")]
    private static extern void mouse_event(int dwFlags, int dx, int dy, int dwData, int dwExtraInfo);

    private const int MOUSEEVENTF_LEFTDOWN = 0x02;
    private const int MOUSEEVENTF_LEFTUP = 0x04;

    static async Task Main()
    {
        // 화면 캡처
        Bitmap screenshot = CaptureScreen();

        // OCR을 사용하여 숫자 인식 및 클릭 수행
        await DetectAndClick(screenshot);
    }

    /// <summary>
    /// 🖥️ 화면 캡처
    /// </summary>
    static Bitmap CaptureScreen()
    {
        Rectangle bounds = new Rectangle(817, 345, 1381 - 817, 545 - 345);
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);

        using (Graphics g = Graphics.FromImage(bitmap))
        {
            g.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size);
        }

        return bitmap;
    }

    /// <summary>
    /// 🔍 OCR로 숫자 감지 후 클릭
    /// </summary>
    static async Task DetectAndClick(Bitmap screenshot)
    {
        Mat image = BitmapConverter.ToMat(screenshot);
        Mat gray = new Mat();
        Cv2.CvtColor(image, gray, ColorConversionCodes.BGR2GRAY);

        // 가우시안 블러 및 이진화 처리
        Cv2.GaussianBlur(gray, gray, new OpenCvSharp.Size(3, 3), 0);
        Cv2.Threshold(gray, gray, 180, 255, ThresholdTypes.BinaryInv);

        // OCR 설정
        using var ocr = new TesseractEngine(@"./tessdata", "eng", EngineMode.Default);
        var tessImage = PixConverter.ToPix(gray);
        var result = ocr.Process(tessImage);

        // OCR 결과 출력 (디버깅용)
        Console.WriteLine("OCR 결과:");
        Console.WriteLine(result.GetText());

        // 표 내 위치 계산
        List<Point> clickPositions = new List<Point>();
        int startX = 817, startY = 345, endX = 1381, endY = 545;
        int cellWidth = 80, cellHeight = 50; // 표의 크기 예측값

        // OCR 결과 기반 클릭 위치 찾기 (우측 -> 좌측 순서)
        string[] lines = result.GetText().Split('\n');
        int rowIdx = 0;

        for (int y = startY; y <= endY; y += cellHeight)
        {
            int colIdx = 0;
            for (int x = endX; x >= startX; x -= cellWidth)
            {
                if (rowIdx < lines.Length && colIdx < lines[rowIdx].Length)
                {
                    char ch = lines[rowIdx][colIdx];

                    // 숫자이며 0이 아닌 경우 클릭 대상으로 등록
                    if (char.IsDigit(ch) && ch != '0')
                    {
                        clickPositions.Add(new Point(x, y));
                    }
                }
                colIdx++;
            }
            rowIdx++;
        }

        // 클릭 수행 (0.5초 이내)
        foreach (var pos in clickPositions)
        {
            await ClickAsync(pos.X, pos.Y);
            await Task.Delay(50); // 빠른 클릭을 위한 짧은 딜레이
        }
    }

    /// <summary>
    /// 🖱️ 비동기 마우스 클릭 (0.5초 이내 실행)
    /// </summary>
    static async Task ClickAsync(int x, int y)
    {
        await Task.Run(() =>
        {
            SetCursorPos(x, y);
            mouse_event(MOUSEEVENTF_LEFTDOWN, x, y, 0, 0);
            mouse_event(MOUSEEVENTF_LEFTUP, x, y, 0, 0);
        });

        Console.WriteLine($"클릭: X={x}, Y={y}");
    }
}
📌 코드 설명
📸 화면 캡처 (CaptureScreen())

(817, 345)에서 (1381, 545) 범위만 캡처.
각 표는 약 80px 간격으로 있음.
🔎 OCR로 숫자 인식 (DetectAndClick())

OpenCV로 그레이스케일 변환 + 가우시안 블러 + 이진화 진행.
TesseractOCR 사용하여 텍스트(숫자) 검출.
0이 아닌 숫자가 있는 칸을 우측 → 좌측 순으로 탐색.
🖱️ 마우스 클릭 (ClickAsync())

mouse_event()로 클릭 수행.
0.5초 내에 클릭하도록 빠른 딜레이(50ms) 적용.
📌 실행 예시 (콘솔 출력)
makefile
코드 복사
OCR 결과:
5  0  3
0  7  1
4  2  0

클릭: X=1381, Y=345
클릭: X=1201, Y=345
클릭: X=961, Y=395
클릭: X=1381, Y=445
클릭: X=1301, Y=445
✔ 0이 아닌 숫자가 있는 칸을 오른쪽부터 클릭 완료!

📌 추가 개선 가능 요소
✅ 클릭 속도 조정 가능 (await Task.Delay(50))
✅ OCR 인식 정확도 개선 (Cv2.Threshold() 파라미터 튜닝)
✅ TesseractOCR를 "digits" 언어 모델로 변경하면 숫자 인식 성능 향상
