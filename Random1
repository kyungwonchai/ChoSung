네, 계속 진행하겠습니다. 이제 MGSPMonitorControl UI 프로그램의 Services 폴더에 들어갈 클래스들을 작성합니다.

2. Services/ 폴더

2.1. Services/PasswordService.cs (비밀번호 해싱 및 검증)

간단한 SHA256 기반의 해싱 및 검증 예시입니다. 실제 운영 환경에서는 bcrypt, Argon2 등 더 강력한 알고리즘 사용을 권장합니다.

C#

// MGSPMonitorControl/Services/PasswordService.cs
using System;
using System.Security.Cryptography;
using System.Text;

namespace MGSPMonitorControl.Services
{
    public interface IPasswordService
    {
        Tuple<string, string> HashPassword(string password);
        bool VerifyPassword(string password, string storedHash, string storedSalt);
    }

    public class PasswordService : IPasswordService
    {
        private const int SaltSize = 16; // 바이트 단위

        /// <summary>
        /// 비밀번호를 해시하고 해시된 값과 솔트를 반환합니다.
        /// </summary>
        /// <param name="password">해시할 원본 비밀번호.</param>
        /// <returns>튜플 (해시된 비밀번호 Base64 문자열, 솔트 Base64 문자열).</returns>
        public Tuple<string, string> HashPassword(string password)
        {
            if (string.IsNullOrEmpty(password))
            {
                throw new ArgumentNullException(nameof(password));
            }

            byte[] saltBytes = new byte[SaltSize];
            using (var rng = new RNGCryptoServiceProvider())
            {
                rng.GetBytes(saltBytes);
            }
            string saltString = Convert.ToBase64String(saltBytes);

            // 비밀번호와 솔트를 결합하여 해시
            byte[] combinedBytes = Encoding.UTF8.GetBytes(password + saltString);
            using (var sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(combinedBytes);
                string hashString = Convert.ToBase64String(hashBytes);
                return Tuple.Create(hashString, saltString);
            }
        }

        /// <summary>
        /// 입력된 비밀번호가 저장된 해시 및 솔트와 일치하는지 확인합니다.
        /// </summary>
        /// <param name="password">확인할 비밀번호.</param>
        /// <param name="storedHashBase64">DB에 저장된 해시된 비밀번호 (Base64 문자열).</param>
        /// <param name="storedSaltBase64">DB에 저장된 솔트 (Base64 문자열).</param>
        /// <returns>일치하면 true, 그렇지 않으면 false.</returns>
        public bool VerifyPassword(string password, string storedHashBase64, string storedSaltBase64)
        {
            if (string.IsNullOrEmpty(password) || string.IsNullOrEmpty(storedHashBase64) || string.IsNullOrEmpty(storedSaltBase64))
            {
                return false; // 필수 값 누락
            }

            // 저장된 솔트를 사용하여 입력된 비밀번호 해시
            byte[] combinedBytes = Encoding.UTF8.GetBytes(password + storedSaltBase64);
            using (var sha256 = SHA256.Create())
            {
                byte[] hashBytes = sha256.ComputeHash(combinedBytes);
                string computedHashBase64 = Convert.ToBase64String(hashBytes);

                return computedHashBase64 == storedHashBase64;
            }
        }
    }
}
2.2. Services/DatabaseService.cs (DB 연동 로직)

MonitorControlDB 데이터베이스와 상호작용합니다. 사용자 인증, Agent 관리, 로그 기록 등의 기능을 수행합니다.

C#

// MGSPMonitorControl/Services/DatabaseService.cs
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient; // System.Data.SqlClient NuGet 패키지 또는 .NET Framework 참조
using System.Threading.Tasks;
using MGSPMonitorControl.Models;
using System.Configuration; // App.config 사용 위해 System.Configuration.dll 참조 필요

namespace MGSPMonitorControl.Services
{
    public interface IDatabaseService
    {
        Task<UserSession> AuthenticateUserAsync(string username, string password, IPasswordService passwordService);
        Task<bool> CreateUserAsync(string username, string password, bool canManageAgents, bool canControlPower, IPasswordService passwordService); // 예시: 사용자 생성

        Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync();
        Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid);
        Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp);
        Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, int modifierUserId);
        Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, int modifierUserId);
        Task<bool> DeleteManagedAgentAsync(Guid agentGuid);

        Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry);
        Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100);
        Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100);
    }

    public class DatabaseService : IDatabaseService
    {
        private readonly string _connectionString;

        public DatabaseService()
        {
            // App.config에서 연결 문자열을 읽어옵니다.
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["MonitorControlDBConnection"]?.ConnectionString;
                if (string.IsNullOrEmpty(_connectionString))
                {
                    // 개발 편의를 위한 기본 연결 문자열 (실제 환경에서는 App.config 사용)
                    // _connectionString = "Server=(localdb)\\MSSQLLocalDB;Database=MonitorControlDB;Integrated Security=True;";
                    Console.WriteLine("[ERROR] DB Connection string 'MonitorControlDBConnection' not found in App.config or is empty.");
                    // 실제 애플리케이션에서는 여기서 예외를 던지거나, 사용자에게 알리고 종료해야 함.
                    // 여기서는 UI가 뜨기 전에 App.xaml.cs에서 이 문제를 잡고 사용자에게 알리는 것이 좋음.
                    // throw new ConfigurationErrorsException("Database connection string 'MonitorControlDBConnection' not found in App.config.");
                }
            }
            catch (ConfigurationErrorsException configEx)
            {
                 Console.WriteLine($"[ERROR] Configuration error reading DB connection string: {configEx.Message}");
                 //throw; // UI 로딩을 막기 위해 다시 던질 수 있음
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] Unexpected error initializing DatabaseService: {ex.Message}");
                //throw;
            }
        }
        
        // 테스트 또는 외부 주입용 생성자
        public DatabaseService(string connectionString)
        {
            _connectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
        }


        #region User Management

        public async Task<UserSession> AuthenticateUserAsync(string username, string password, IPasswordService passwordService)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            UserSession user = null;
            string query = "SELECT UserId, Username, PasswordHash, Salt, CanManageAgents, CanControlPower, IsActive FROM Users WHERE Username = @Username AND IsActive = 1;";

            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Username", username);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        string storedHash = reader["PasswordHash"].ToString();
                        string storedSalt = reader["Salt"]?.ToString() ?? string.Empty; // Salt가 NULL일 수 있음을 처리

                        if (passwordService.VerifyPassword(password, storedHash, storedSalt))
                        {
                            user = new UserSession
                            {
                                UserId = (int)reader["UserId"],
                                Username = reader["Username"].ToString(),
                                CanManageAgents = (bool)reader["CanManageAgents"],
                                CanControlPower = (bool)reader["CanControlPower"]
                            };
                            // 마지막 로그인 시간 업데이트
                            await UpdateLastLoginAsync(user.UserId);
                        }
                    }
                }
            }
            return user;
        }

        private async Task UpdateLastLoginAsync(int userId)
        {
            if (string.IsNullOrEmpty(_connectionString)) return;
            string query = "UPDATE Users SET LastLoginDate = GETUTCDATE() WHERE UserId = @UserId;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserId", userId);
                try
                {
                    await connection.OpenAsync();
                    await command.ExecuteNonQueryAsync();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[DB ERROR] Failed to update last login for UserId {userId}: {ex.Message}");
                    // 로깅 서비스가 있다면 로깅
                }
            }
        }

        public async Task<bool> CreateUserAsync(string username, string password, bool canManageAgents, bool canControlPower, IPasswordService passwordService)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var (hash, salt) = passwordService.HashPassword(password);
            string query = @"INSERT INTO Users (Username, PasswordHash, Salt, CanManageAgents, CanControlPower, IsActive, CreatedDate) 
                             VALUES (@Username, @PasswordHash, @Salt, @CanManageAgents, @CanControlPower, 1, GETUTCDATE());";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Username", username);
                command.Parameters.AddWithValue("@PasswordHash", hash);
                command.Parameters.AddWithValue("@Salt", salt);
                command.Parameters.AddWithValue("@CanManageAgents", canManageAgents);
                command.Parameters.AddWithValue("@CanControlPower", canControlPower);
                
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        #endregion

        #region ManagedAgents CRUD

        public async Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync()
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var agents = new List<ManagedAgentDisplay>();
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled 
                             FROM ManagedAgents ORDER BY AgentName;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        agents.Add(new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled")),
                            IsOnline = false, // 실시간 상태는 Broker로부터 받음
                            CurrentMonitorStatus = "Unknown" 
                        });
                    }
                }
            }
            return agents;
        }

        public async Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid)
        {
            // ... (위 GetManagedAgentsAsync와 유사하게 단일 조회 구현) ...
            // 예시: string query = "... WHERE AgentGuid = @AgentGuid;";
            // command.Parameters.AddWithValue("@AgentGuid", agentGuid);
            // await reader.ReadAsync() ...
            // return agent; or null
            throw new NotImplementedException(); // 구현 필요
        }
        public async Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp)
        {
             // ... (위 GetManagedAgentsAsync와 유사하게 단일 조회 구현) ...
            // 예시: string query = "... WHERE AgentIdProvidedByApp = @AgentIdProvidedByApp;";
            // command.Parameters.AddWithValue("@AgentIdProvidedByApp", agentIdProvidedByApp);
            throw new NotImplementedException(); // 구현 필요
        }


        public async Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, int modifierUserId)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            string query = @"INSERT INTO ManagedAgents 
                                (AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, PrimaryIpAddress, PrimaryPort, 
                                 GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, CreatedDate, LastModifiedDate, LastModifiedByUserId)
                             VALUES 
                                (@AgentGuid, @AgentIdProvidedByApp, @AgentName, @Description, @ControlType, @PrimaryIpAddress, @PrimaryPort,
                                 @GatewayAgentIpAddress, @GatewayAgentPort, @IsEnabled, GETUTCDATE(), GETUTCDATE(), @UserId);";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid == Guid.Empty ? Guid.NewGuid() : agent.AgentGuid);
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@UserId", modifierUserId);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, int modifierUserId)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            string query = @"UPDATE ManagedAgents SET 
                                AgentIdProvidedByApp = @AgentIdProvidedByApp, AgentName = @AgentName, Description = @Description, 
                                ControlType = @ControlType, PrimaryIpAddress = @PrimaryIpAddress, PrimaryPort = @PrimaryPort,
                                GatewayAgentIpAddress = @GatewayAgentIpAddress, GatewayAgentPort = @GatewayAgentPort, 
                                IsEnabled = @IsEnabled, LastModifiedDate = GETUTCDATE(), LastModifiedByUserId = @UserId
                             WHERE AgentGuid = @AgentGuid;";

            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@UserId", modifierUserId);
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> DeleteManagedAgentAsync(Guid agentGuid)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            // ControlActionLogs 테이블의 FK 제약조건 ON DELETE CASCADE 확인 필요
            string query = "DELETE FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        #endregion

        #region ControlActionLogs

        public async Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            string query = @"INSERT INTO ControlActionLogs 
                                (AgentGuid, ActionType, ActionParameters, RequestedByUserId, RequestTimestamp, 
                                 RelayReceivedTimestamp, AgentReceivedTimestamp, ExecutionCompletedTimestamp, 
                                 FinalStatus, ResultMessage, ExecutedViaGatewayAgentId)
                             VALUES 
                                (@AgentGuid, @ActionType, @ActionParameters, @RequestedByUserId, @RequestTimestamp,
                                 @RelayReceivedTimestamp, @AgentReceivedTimestamp, @ExecutionCompletedTimestamp,
                                 @FinalStatus, @ResultMessage, @ExecutedViaGatewayAgentId); SELECT SCOPE_IDENTITY();"; // LogId 반환
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", logEntry.AgentGuid);
                command.Parameters.AddWithValue("@ActionType", logEntry.ActionType);
                command.Parameters.AddWithValue("@ActionParameters", (object)logEntry.ActionParameters ?? DBNull.Value);
                command.Parameters.AddWithValue("@RequestedByUserId", logEntry.RequestedByUserId);
                command.Parameters.AddWithValue("@RequestTimestamp", logEntry.RequestTimestamp);
                command.Parameters.AddWithValue("@RelayReceivedTimestamp", (object)logEntry.RelayReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@AgentReceivedTimestamp", (object)logEntry.AgentReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutionCompletedTimestamp", (object)logEntry.ExecutionCompletedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@FinalStatus", logEntry.FinalStatus);
                command.Parameters.AddWithValue("@ResultMessage", (object)logEntry.ResultMessage ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutedViaGatewayAgentId", (object)logEntry.ExecutedViaGatewayAgentId ?? DBNull.Value);

                await connection.OpenAsync();
                var result = await command.ExecuteScalarAsync(); // SCOPE_IDENTITY() 반환
                return result != null && Convert.ToInt64(result) > 0;
            }
        }
        
        public async Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100)
        {
             if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var logs = new List<ControlActionLogEntry>();
            string query = $@"SELECT TOP (@Count) cl.LogId, cl.AgentGuid, ma.AgentName, cl.ActionType, cl.ActionParameters, 
                                    cl.RequestedByUserId, u.Username as RequestedByUsername, cl.RequestTimestamp, 
                                    cl.RelayReceivedTimestamp, cl.AgentReceivedTimestamp, cl.ExecutionCompletedTimestamp, 
                                    cl.FinalStatus, cl.ResultMessage, cl.ExecutedViaGatewayAgentId 
                              FROM ControlActionLogs cl
                              JOIN ManagedAgents ma ON cl.AgentGuid = ma.AgentGuid
                              JOIN Users u ON cl.RequestedByUserId = u.UserId
                              ORDER BY cl.RequestTimestamp DESC;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Count", count);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        logs.Add(new ControlActionLogEntry {
                            LogId = reader.GetInt64(reader.GetOrdinal("LogId")),
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            // AgentName은 UI에서 별도로 채우거나, ViewModel에서 조인
                            ActionType = reader.GetString(reader.GetOrdinal("ActionType")),
                            ActionParameters = reader.IsDBNull(reader.GetOrdinal("ActionParameters")) ? null : reader.GetString(reader.GetOrdinal("ActionParameters")),
                            RequestedByUserId = reader.GetInt32(reader.GetOrdinal("RequestedByUserId")),
                            RequestedByUsername = reader.GetString(reader.GetOrdinal("RequestedByUsername")),
                            RequestTimestamp = reader.GetDateTime(reader.GetOrdinal("RequestTimestamp")),
                            RelayReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("RelayReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("RelayReceivedTimestamp")),
                            AgentReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("AgentReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("AgentReceivedTimestamp")),
                            ExecutionCompletedTimestamp = reader.IsDBNull(reader.GetOrdinal("ExecutionCompletedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("ExecutionCompletedTimestamp")),
                            FinalStatus = reader.GetString(reader.GetOrdinal("FinalStatus")),
                            ResultMessage = reader.IsDBNull(reader.GetOrdinal("ResultMessage")) ? null : reader.GetString(reader.GetOrdinal("ResultMessage")),
                            ExecutedViaGatewayAgentId = reader.IsDBNull(reader.GetOrdinal("ExecutedViaGatewayAgentId")) ? null : reader.GetString(reader.GetOrdinal("ExecutedViaGatewayAgentId"))
                        });
                    }
                }
            }
            return logs;
        }

        public Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100)
        {
            // 위 GetRecentControlLogsAsync와 유사하게 특정 AgentGuid에 대한 로그 조회 구현
            throw new NotImplementedException();
        }
        #endregion
    }
}
DatabaseService.cs 중요 참고:

연결 문자열 (_connectionString):
App.config 파일 사용 권장: 위 코드의 기본 생성자는 App.config 파일에서 "MonitorControlDBConnection"이라는 이름의 연결 문자열을 읽어오려고 시도합니다. 이를 위해서는 프로젝트에 App.config 파일을 추가하고 연결 문자열을 설정해야 하며, System.Configuration.dll 참조도 필요합니다.
App.config 파일 예시:
XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <connectionStrings>
        <add name="MonitorControlDBConnection" 
             connectionString="Server=YOUR_DB_SERVER_ADDRESS;Database=MonitorControlDB;User ID=YOUR_DB_USER;Password=YOUR_DB_PASSWORD; Pooling=true; Max Pool Size=100;" 
             providerName="System.Data.SqlClient" />
        </connectionStrings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>
     * ConfigurationManager.ConnectionStrings를 사용하려면 프로젝트에 System.Configuration.dll 어셈블리 참조를 추가해야 합니다. (솔루션 탐색기 > 프로젝트 > 참조 > 참조 추가 > 어셈블리 > 프레임워크에서 System.Configuration 선택)

GetOrdinal 사용: SqlDataReader에서 컬럼 값을 가져올 때, 컬럼 이름을 직접 사용하는 것보다 reader.GetOrdinal("ColumnName")으로 인덱스를 얻어와서 사용하는 것이 약간 더 효율적입니다.
미구현 메서드: GetManagedAgentByGuidAsync, GetManagedAgentByProvidedIdAsync, GetControlLogsForAgentAsync는 예시로 남겨두었으며, 필요시 GetManagedAgentsAsync나 GetRecentControlLogsAsync와 유사한 방식으로 구현해야 합니다.
여기까지 Models와 Services 폴더의 DB 관련 핵심 클래스들을 작성했습니다.