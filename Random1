와 같은 커스텀 속성을 정의하려면, Android의 Custom Attributes 기능을 사용해야 합니다. 이를 통해 XML에서 사용할 수 있는 커스텀 속성을 만들 수 있습니다.

단계별로 설명하겠습니다.
1. attrs.xml 파일 생성 및 커스텀 속성 정의
먼저, res/values/ 디렉터리에 attrs.xml 파일을 생성하고, 커스텀 속성을 정의합니다.

xml
코드 복사
<!-- res/values/attrs.xml -->
<resources>
    <!-- Frame color attribute -->
    <declare-styleable name="CustomFrameLayout">
        <attr name="frameColor" format="color" />
        <attr name="frameCornerSize" format="dimension" />
    </declare-styleable>
</resources>
위 코드에서는 CustomFrameLayout이라는 이름의 스타일을 선언하고, frameColor와 frameCornerSize라는 두 개의 속성을 정의했습니다. frameColor는 색상 형식(color)이고, frameCornerSize는 크기 형식(dimension)입니다.

2. Custom View 클래스 생성
이제, 커스텀 뷰 클래스를 만들어 app:frameColor와 app:frameCornerSize 속성을 처리합니다.

kotlin
코드 복사
package com.example.customview

import android.content.Context
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.RectF
import android.util.AttributeSet
import android.view.View
import androidx.core.content.ContextCompat
import com.example.myapplication.R

class CustomFrameLayout @JvmOverloads constructor(
    context: Context, 
    attrs: AttributeSet? = null, 
    defStyleAttr: Int = 0
) : View(context, attrs, defStyleAttr) {

    private var frameColor: Int = ContextCompat.getColor(context, android.R.color.black)
    private var frameCornerSize: Float = 0f
    private val paint: Paint = Paint()
    private val rect: RectF = RectF()

    init {
        // attrs.xml에 정의한 커스텀 속성을 가져옴
        val typedArray = context.theme.obtainStyledAttributes(
            attrs, 
            R.styleable.CustomFrameLayout, 
            0, 
            0
        )

        try {
            // frameColor 속성을 가져옴
            frameColor = typedArray.getColor(
                R.styleable.CustomFrameLayout_frameColor, 
                frameColor
            )
            // frameCornerSize 속성을 가져옴
            frameCornerSize = typedArray.getDimension(
                R.styleable.CustomFrameLayout_frameCornerSize, 
                frameCornerSize
            )
        } finally {
            typedArray.recycle()
        }

        // Paint 설정
        paint.color = frameColor
        paint.style = Paint.Style.STROKE
        paint.strokeWidth = 10f // 테두리 두께 설정
    }

    override fun onDraw(canvas: Canvas) {
        super.onDraw(canvas)
        // 사각형의 경계선 그리기
        rect.set(0f, 0f, width.toFloat(), height.toFloat())
        canvas.drawRoundRect(rect, frameCornerSize, frameCornerSize, paint)
    }
}
frameColor: TypedArray에서 frameColor 속성을 가져와서 Paint 객체의 색상으로 설정합니다.
frameCornerSize: TypedArray에서 frameCornerSize 속성을 가져와서 사각형의 모서리 크기로 설정합니다.
onDraw 메서드: 커스텀 뷰의 경계선을 그리기 위해 Canvas.drawRoundRect를 사용합니다.
3. XML 레이아웃에서 사용
이제, XML 레이아웃 파일에서 이 커스텀 뷰를 사용할 수 있습니다.

xml
코드 복사
<com.example.customview.CustomFrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="200dp"
    android:layout_height="200dp"
    app:frameColor="@color/black"
    app:frameCornerSize="16dp"/>
위 코드에서는 app:frameColor와 app:frameCornerSize 속성을 정의했습니다. app:frameColor는 프레임의 색상을 정의하고, app:frameCornerSize는 프레임의 모서리 반경을 정의합니다.

4. 사용 시 주의 사항
뷰 초기화: 커스텀 뷰의 초기화를 위해 init 블록에서 TypedArray 객체를 통해 속성을 가져와 초기화합니다. 이렇게 하면 XML에서 정의된 속성을 사용할 수 있습니다.
스타일 재활용: TypedArray 객체는 사용 후 반드시 recycle()을 호출하여 메모리를 해제해야 합니다.
결론
이 가이드에서는 Android에서 커스텀 속성을 정의하고, 이를 사용하는 커스텀 뷰를 생성하는 방법을 다루었습니다. 이를 통해 XML 레이아웃에서 직접 속성을 설정하고, 뷰의 외형을 동적으로 변경할 수 있습니다. 이 방식은 다양한 커스텀 뷰를 만들 때 유용하게 사용될 수 있습니다. 추가적인