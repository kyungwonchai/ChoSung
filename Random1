private SerialPort _serialPort;

private void ForceCloseComPort()
{
    if (_serialPort != null && _serialPort.IsOpen)
    {
        try
        {
            // 포트를 닫을 때 예외가 발생할 수 있으므로 예외를 잡습니다.
            _serialPort.Close();
            System.Diagnostics.Debug.WriteLine("COM 포트를 성공적으로 닫았습니다.");
        }
        catch (UnauthorizedAccessException ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 닫기 실패 (UnauthorizedAccessException): {ex.Message}");
        }
        catch (IOException ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 닫기 실패 (IOException): {ex.Message}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 닫기 실패: {ex.Message}");
        }
        finally
        {
            // 객체 해제 및 null 설정
            _serialPort.Dispose();
            _serialPort = null;
        }
    }
}

private async Task<bool> checkreconnect()
{
    int maxRetries = 10; // 최대 재시도 횟수
    int retryInterval = 2000; // 재시도 간격 (밀리초)

    for (int attempt = 1; attempt <= maxRetries; attempt++)
    {
        System.Diagnostics.Debug.WriteLine($"Reconnect attempt {attempt}/{maxRetries}");
        
        // 포트를 강제로 닫습니다.
        ForceCloseComPort();

        // 새로운 SerialPort 객체 생성
        _serialPort = new SerialPort("COM16", 9600);
        _serialPort.ReadTimeout = 1000;
        _serialPort.WriteTimeout = 1000;

        try
        {
            _serialPort.Open(); // 포트를 엽니다.
            System.Diagnostics.Debug.WriteLine("PLC와 성공적으로 연결되었습니다.");
            return true;
        }
        catch (UnauthorizedAccessException ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 열기 실패 (UnauthorizedAccessException): {ex.Message}");
        }
        catch (IOException ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 열기 실패 (IOException): {ex.Message}");
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"포트 열기 실패: {ex.Message}");
        }

        // 연결 실패 시 대기 후 재시도
        System.Diagnostics.Debug.WriteLine("연결 실패 - 재시도 대기 중...");
        await Task.Delay(retryInterval);
    }

    System.Diagnostics.Debug.WriteLine("최대 재시도 횟수를 초과했습니다. 연결하지 못했습니다.");
    return false;
}
