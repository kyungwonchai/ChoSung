 TextEdit 컨트롤에 동일한 스타일을 적용하기 위해서는 공통의 로직을 한 곳에서 관리하고, 모든 TextEdit 컨트롤에 대해 동일한 이벤트 핸들러를 설정해야 합니다. 이를 위해 아래의 단계를 따르면 됩니다.

XAML 파일에 여러 TextEdit 컨트롤 추가:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <StackPanel>
            <dxg:TextEdit Name="textEdit1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit2" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit3" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit4" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit5" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit6" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit7" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit8" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit9" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
            <dxg:TextEdit Name="textEdit10" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
        </StackPanel>
    </Grid>
</Window>
공통 이벤트 핸들러 설정:

모든 TextEdit 컨트롤에 대해 공통의 CustomDraw 이벤트 핸들러를 설정합니다. 코드 비하인드 파일에서 이를 처리합니다.

C# 코드:

csharp
코드 복사
using DevExpress.Xpf.Editors;
using System;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Media;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadDataFromDatabase();
            ApplyCustomDrawToAllTextEdits();
        }

        private void LoadDataFromDatabase()
        {
            string connectionString = "Your_Connection_String_Here";
            string query = "SELECT Content FROM TextData WHERE Id = 1";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                try
                {
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        string content = reader["Content"].ToString();
                        textEdit1.Text = content;
                        textEdit2.Text = content;
                        textEdit3.Text = content;
                        textEdit4.Text = content;
                        textEdit5.Text = content;
                        textEdit6.Text = content;
                        textEdit7.Text = content;
                        textEdit8.Text = content;
                        textEdit9.Text = content;
                        textEdit10.Text = content;
                    }
                    reader.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }

        private void ApplyCustomDrawToAllTextEdits()
        {
            textEdit1.CustomDraw += TextEdit_CustomDraw;
            textEdit2.CustomDraw += TextEdit_CustomDraw;
            textEdit3.CustomDraw += TextEdit_CustomDraw;
            textEdit4.CustomDraw += TextEdit_CustomDraw;
            textEdit5.CustomDraw += TextEdit_CustomDraw;
            textEdit6.CustomDraw += TextEdit_CustomDraw;
            textEdit7.CustomDraw += TextEdit_CustomDraw;
            textEdit8.CustomDraw += TextEdit_CustomDraw;
            textEdit9.CustomDraw += TextEdit_CustomDraw;
            textEdit10.CustomDraw += TextEdit_CustomDraw;
        }

        private void TextEdit_CustomDraw(object sender, DevExpress.Xpf.Editors.CustomDrawEventArgs e)
        {
            var textEdit = sender as TextEdit;
            if (textEdit != null)
            {
                var lines = textEdit.Text.Split('\n');
                double lineHeight = e.Bounds.Height / lines.Length;

                for (int i = 0; i < lines.Length; i++)
                {
                    string line = lines[i];
                    double yOffset = i * lineHeight;

                    if (line.StartsWith("*"))
                    {
                        e.Cache.DrawString(line, e.Cache.Font, Brushes.Red, new Rect(e.Bounds.X, e.Bounds.Y + yOffset, e.Bounds.Width, lineHeight));
                    }
                    else
                    {
                        e.Cache.DrawString(line, e.Cache.Font, Brushes.Black, new Rect(e.Bounds.X, e.Bounds.Y + yOffset, e.Bounds.Width, lineHeight));
                    }
                }

                e.Handled = true;
            }
        }
    }
}
설명:

LoadDataFromDatabase: 데이터베이스에서 텍스트 데이터를 불러와 각 TextEdit 컨트롤에 동일한 내용을 설정합니다.
ApplyCustomDrawToAllTextEdits: 모든 TextEdit 컨트롤에 대해 CustomDraw 이벤트 핸들러를 설정합니다.
TextEdit_CustomDraw: 각 TextEdit 컨트롤에 대해 텍스트를 줄 단위로 나누어 특정 글자로 시작하는 줄의 스타일을 변경하는 로직을 처리합니다.
이와 같이 하면, 모든 TextEdit 컨트롤에 동일한 스타일을 적용할 수 있습니다. 각 컨트롤에 대해 개별적으로 이벤트 핸들러를 설정할 필요 없이, 공통 핸들러를 사용하여 효율적으로 관리할 수 있습니다