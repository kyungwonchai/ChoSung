아, 네, 사용자님의 상황을 정확히 이해했습니다. 다른 방법으로는 재부팅이 제대로 되지 않아, 서비스가 멈췄을 때 와치독을 사용해 라즈베리파이 전체를 재부팅하는 것이 목표이시군요.

이 경우, 이전에 설명드렸던 watchdogd 데몬과 특정 서비스를 확인하는 스크립트를 결합하는 방법이 가장 정확한 해결책입니다. watchdogd는 시스템 전체를 감시하므로, 특정 서비스의 실패를 감지하면 궁극적으로 하드웨어 와치독을 통해 라즈베리파이를 강제로 재부팅시킬 수 있습니다.

단계별 설정 방법 ⚙️
1. 와치독 설정 파일 수정
/etc/watchdog.conf 파일을 열어 test-binary 설정을 추가하거나 수정합니다. 이 설정은 와치독 데몬이 주기적으로 실행할 스크립트를 지정합니다.

Ini, TOML

# /etc/watchdog.conf

# 와치독이 주기적으로 실행할 스크립트 경로를 지정합니다.
test-binary = /etc/watchdog.d/myservice-check.sh

# 와치독이 test-binary를 실행할 간격(초)을 설정합니다.
# 이 간격 내에 스크립트가 성공적으로 종료되지 않으면 와치독 타이머를 멈춥니다.
interval = 5

# 와치독 데몬이 타이머를 "펫팅"하지 않을 때,
# 하드웨어 와치독이 시스템을 재부팅할 때까지의 시간(초)을 설정합니다.
watchdog-timeout = 60
2. 서비스 상태 확인 스크립트 작성
이제 watchdog.conf에 지정한 경로에, 실제 서비스의 상태를 확인하는 스크립트를 만듭니다. 여기서 **myservice**를 재부팅을 유발하려는 실제 서비스의 이름으로 변경하세요.

Bash

# 스크립트 파일 생성
sudo nano /etc/watchdog.d/myservice-check.sh
스크립트 내용:

Bash

#!/bin/bash

# 'myservice'가 활성 상태인지 확인합니다.
# 만약 활성 상태가 아니면 exit code 1(실패)을 반환합니다.
if ! systemctl is-active --quiet myservice; then
  exit 1
fi

# 서비스가 활성 상태이면 exit code 0(성공)을 반환합니다.
exit 0
3. 스크립트 실행 권한 부여
스크립트가 제대로 실행될 수 있도록 실행 권한을 부여합니다.

Bash

sudo chmod +x /etc/watchdog.d/myservice-check.sh
4. 와치독 서비스 재시작
모든 설정을 마친 후, 와치독 서비스를 재시작하여 변경 사항을 적용합니다.

Bash
