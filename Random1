알겠습니다. 제가 이전의 단계별 접근 방식을 완전히 폐기하고, 사용자의 요구사항을 정확히 반영하여 '선(先) 전체 리팩토링, 후(後) 빌드 안정화' 방식으로 프로토콜을 전면 재설계하겠습니다.

"메모리 누수 함수를 왜 찾냐"는 지적에 따라, AI가 특정 항목을 찾는 것이 아니라, 코드 전체를 보고 알아서 모든 개선점을 적용하도록 명령을 수정했습니다.

[AI-CLI 자동 리팩토링 작업 스크립트 V5.0 - 전체 리팩토링 우선 프로토콜]
[BEGIN SCRIPT]

# 0. 작업 철학 (Operating Philosophy)

새로운 접근 방식: 이 프로토콜은 이전의 반복적인 접근 방식을 완전히 버린다. 단 한 번의 강력한 작업으로 코드베이스 전체를 리팩토링한 후, 오직 그 결과물을 빌드 가능 상태로 만드는 데에만 집중한다.
# 1. 준비 단계 (Phase 1: Preparation)

프로젝트 확정 및 분석: 현재 로드된 솔루션을 대상으로 확정하고, 원본 .NET 버전 및 빌드 구성을 파악한다.
필수 백업: 작업 시작 전, 반드시 원본 프로젝트 전체를 ZIP 파일로 백업한다.
# 2. 전면 리팩토링 단계 (Phase 2: Comprehensive Refactoring)

명령: 지금부터 코드베이스 전체를 단 한 번에 분석하고, 가능한 모든 개선점을 적용하는 전면 리팩토링을 수행한다.

전체 코드 분석 (Holistic Code Analysis):

행동: 솔루션 내의 모든 C# 파일을 처음부터 끝까지 스캔하고 분석한다. 특정 함수나 클래스만 보지 말고, 전체 프로젝트의 구조와 흐름을 파악해야 한다.
모든 개선 동시 적용 (Simultaneous Application of All Improvements):

행동: 위 분석을 기반으로, 아래의 모든 항목에 해당하는 코드 개선 작업을 프로젝트 전체에 걸쳐 동시에 적용한다. 당신이 알아서 최적의 코드로 수정해야 한다.
안정성 문제 자동 해결: 코드 전반의 메모리, CPU, 핸들 누수 가능성을 제거한다.
구조적 문제 자동 해결: 거대 파일 및 거대 메서드를 논리적인 단위로 분할한다.
설계 원칙 자동 적용: SOLID 원칙과 적절한 디자인 패턴을 코드 전체에 적용한다.
코드 현대화: 레거시 코드를 현대적인 C# 스타일로 개선한다.
# 3. 빌드 안정화 단계 (Phase 3: Build Stabilization Loop)

유일한 목표: 2단계에서 완전히 변경된 코드베이스가 성공적으로 빌드되도록 만드는 것이다. 이 단계에서는 더 이상의 기능 추가나 리팩토링을 절대 수행해서는 안 된다. 오직 빌드 에러를 잡는 데에만 집중한다.

반복 루프 시작: 최대 50회 또는 빌드가 성공할 때까지 아래 과정을 반복한다.

빌드 실행 및 로그 생성:

필수 행동: 명령줄(MSBuild)로 솔루션을 빌드하고, 모든 출력 및 에러를 1.log 파일에 저장한다.
커맨드: msbuild YourSolutionName.sln /nologo > 1.log 2>&1
로그 분석 및 조건부 조치:

[빌드 성공 시]: 1.log 파일에 에러가 없다면, 모든 작업이 완료된 것이다. 이 루프를 즉시 종료하고 #4 단계로 넘어간다.

[빌드 실패 시]: 1.log 파일에 에러가 있다면,

에러 분석: 로그 파일에서 가장 첫 번째로 나타난 빌드 에러의 원인(파일, 라인, 메시지)을 정확히 파악한다.
특수 오류 처리: 만약 에러가 smdDBConntction 참조 누락이라면, D:\sDatabaseServer.dll 참조를 추가하는 조치를 최우선으로 수행한다.
일반 오류 수정: 그 외의 에러라면, 파악된 원인을 해결하기 위한 가장 최소한의 코드 수정만을 수행한다. (예: 타입 캐스팅 추가, 네임스페이스 using 추가, 오타 수정 등)
수정 후, 다시 2번(빌드 실행)으로 돌아가 반복한다.
# 4. 최종 보고 단계 (Phase 4: Final Reporting)

로그 파일 생성: D:\refactoringhistory\{SolutionFolderName}\{SolutionName}_{yyyyMMddHHmmss}.txt 경로에 최종 보고 파일을 생성한다.
결과 기록: 생성된 파일에 다음 내용을 기록한다.
작업 요약: "전체 리팩토링 후 빌드 안정화 완료. 총 빌드 시도 횟수: [횟수]"
코드 변경점: 최초 원본 코드와 최종 결과물을 비교하여 주요 변경 사항을 요약하거나, 전체 코드를 커밋할 수 있도록 준비한다.
# 5. 절대 규칙 (Absolute Rules)

실행 금지: 작업의 전 과정 및 완료 후에도, 컴파일된 .exe 파일은 절대로 실행하지 않는다.
제약 조건 준수: password 문자열은 일반 코드로 취급하며, 명시된 DB 접속 정보 등은 수정하지 않는다.
