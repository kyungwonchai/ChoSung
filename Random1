Machine으로 시작하는 각 폴더 안에서만 *.pro 파일을 찾아서 처리하고, 각 Machine 폴더에 있는 Lane1과 Lane2 폴더로 분배하는 코드로 수정하겠습니다. Lane1과 Lane2 폴더는 Machine 폴더 내부에 위치해 있다고 가정하여, 분배 시 해당 경로로 파일을 이동합니다.

1. XAML 코드 (MainWindow.xaml)
버튼과 DataGrid를 정의한 XAML입니다. DataGrid는 파일명, 바코드, Lane 정보를 표시합니다.

xml
코드 복사
<Window x:Class="ProFileProcessor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Pro File Processor" Height="350" Width="525">
    <Grid>
        <!-- 파일 분배 결과를 표시하는 DataGrid -->
        <DataGrid x:Name="ResultDataGrid" HorizontalAlignment="Left" Height="200" Margin="10,10,0,0" VerticalAlignment="Top" Width="480" AutoGenerateColumns="False">
            <DataGrid.Columns>
                <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" Width="*"/>
                <DataGridTextColumn Header="Barcode" Binding="{Binding Barcode}" Width="*"/>
                <DataGridTextColumn Header="Lane" Binding="{Binding Lane}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
        
        <!-- 파일 분배를 시작하는 버튼 -->
        <Button Content="Distribute Files" HorizontalAlignment="Left" Margin="10,220,0,0" VerticalAlignment="Top" Width="120" Height="30" Click="OnDistributeFilesButtonClick"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
여기에서는 비즈니스 로직과 버튼 클릭 이벤트 핸들러를 정의했습니다. ObservableCollection을 사용하여 DataGrid에 분배 결과를 표시합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;

namespace ProFileProcessor
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<FileResult> ResultFiles { get; set; } // DataGrid에 표시할 파일 결과 리스트
        private FileDistributor _fileDistributor;

        public MainWindow()
        {
            InitializeComponent();
            ResultFiles = new ObservableCollection<FileResult>(); // 결과 리스트 초기화
            ResultDataGrid.ItemsSource = ResultFiles; // DataGrid 바인딩
            _fileDistributor = new FileDistributor(LogResult); // 파일 분배기 생성
        }

        // 버튼 클릭 시 파일 분배 작업을 비동기로 실행
        private async void OnDistributeFilesButtonClick(object sender, RoutedEventArgs e)
        {
            ResultFiles.Clear(); // 기존 결과 초기화
            await Task.Run(() => _fileDistributor.DistributeFilesAsync(ResultFiles)); // 파일 분배 비동기 실행
        }

        // 결과를 DataGrid에 추가하는 메서드
        private void LogResult(string message)
        {
            Dispatcher.Invoke(() => Console.WriteLine(message)); // 콘솔에 로그 메시지 출력 (디버깅용)
        }
    }

    // DataGrid에 표시할 파일 정보 모델 클래스
    public class FileResult
    {
        public string FileName { get; set; }
        public string Barcode { get; set; }
        public string Lane { get; set; }
    }
}
3. FileDistributor.cs
FileDistributor 클래스는 각 Machine 폴더 안에서 *.pro 파일을 검색하여 분배를 수행하고, Lane1과 Lane2 폴더로 이동합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;

namespace ProFileProcessor
{
    public class FileDistributor
    {
        private const string DataDirectory = @"C:\proviewer\data";
        private readonly Action<string> _logResult;

        public FileDistributor(Action<string> logResult)
        {
            _logResult = logResult;
        }

        public async Task DistributeFilesAsync(ObservableCollection<FileResult> resultFiles)
        {
            // "Machine"으로 시작하는 모든 폴더 가져오기
            var machineFolders = Directory.GetDirectories(DataDirectory, "Machine*");

            foreach (var folder in machineFolders)
            {
                // 각 Machine 폴더에서만 .pro 파일 찾기
                var proFiles = Directory.GetFiles(folder, "*.pro");

                foreach (var filePath in proFiles)
                {
                    // 파일에서 Code 값을 추출
                    var codeValue = ExtractCodeValue(filePath);
                    if (codeValue != null)
                    {
                        // 데이터베이스에서 Lane 분류 조건 확인
                        var targetLane = GetTargetLaneFromDatabase(codeValue, folder);
                        if (targetLane != null)
                        {
                            // 분류된 파일 정보를 저장하고 결과 DataGrid에 추가
                            await MoveFileToLaneAsync(filePath, targetLane, codeValue, resultFiles);
                        }
                    }
                }
            }

            _logResult("All files have been processed.");
        }

        private string ExtractCodeValue(string filePath)
        {
            foreach (var line in File.ReadLines(filePath))
            {
                if (line.StartsWith("Code="))
                {
                    return line.Substring(5).Trim(); // Code= 이후 값을 추출
                }
            }
            return null;
        }

        private string GetTargetLaneFromDatabase(string code, string folder)
        {
            // 데이터베이스 연결 문자열 설정
            string connectionString = "Server=your_server_name;Database=your_database_name;User Id=your_user_id;Password=your_password;";
            string targetLane = null;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                // 조건에 맞는 szmodelname을 조회하는 쿼리
                string query = "SELECT TOP 1 szmodelname FROM View_SPI_barcode WHERE szbarcode LIKE @code + '%'";

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@code", code);
                    var result = command.ExecuteScalar() as string;

                    // 모델명 결과에 따라 Lane 분류 결정
                    if (!string.IsNullOrEmpty(result))
                    {
                        if (result.Contains("_TM_"))
                        {
                            targetLane = Path.Combine(folder, "Lane2"); // Lane2 폴더 경로
                        }
                        else if (result.Contains("_BM_"))
                        {
                            targetLane = Path.Combine(folder, "Lane1"); // Lane1 폴더 경로
                        }
                    }
                }
            }

            return targetLane;
        }

        private async Task MoveFileToLaneAsync(string filePath, string targetLane, string barcode, ObservableCollection<FileResult> resultFiles)
        {
            if (string.IsNullOrEmpty(targetLane))
            {
                _logResult($"No target lane found for file: {filePath}");
                return;
            }

            try
            {
                // 대상 폴더가 없으면 생성
                if (!Directory.Exists(targetLane))
                {
                    Directory.CreateDirectory(targetLane);
                }

                // 파일 이동
                string fileName = Path.GetFileName(filePath);
                string targetPath = Path.Combine(targetLane, fileName);

                File.Move(filePath, targetPath);

                // DataGrid에 추가할 파일 결과 생성 및 추가
                var fileResult = new FileResult
                {
                    FileName = fileName,
                    Barcode = barcode,
                    Lane = targetLane.Contains("Lane1") ? "Lane1" : "Lane2"
                };
                resultFiles.Add(fileResult);

                _logResult($"File moved to {targetLane}: {fileName}");
            }
            catch (Exception ex)
            {
                _logResult($"Error moving file {filePath}: {ex.Message}");
            }
        }
    }
}
요약:
각 Machine 폴더 안에서만 .pro 파일을 찾도록 했습니다.
파일의 Code= 값을 추출하고, 데이터베이스에서 szmodelname 값을 조회하여 조건에 따라 Lane1 또는 Lane2로 분류합니다.
파일은 각 Machine 폴더의 Lane1 또는 Lane2 하위 폴더로 이동됩니다.