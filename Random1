이터를 올바르게 처리하고 차트에 표시하기 위해서는 각 카테고리(예: 라인, 모델, 발생유형)에 대한 별도의 쿼리를 실행해야 합니다. 이를 위해 저장 프로시저를 수정하고, WPF XAML과 C# 코드를 업데이트하겠습니다.

MS SQL Server 저장 프로시저 (예시)
먼저, 각 카테고리별로 데이터를 가져오는 저장 프로시저를 작성합니다. 아래 예시는 라인별, 모델별, 발생유형별로 수량을 집계하는 쿼리입니다.

sql
Copy code
CREATE PROCEDURE GetChartData
AS
BEGIN
    SELECT 라인 AS Category, COUNT(*) AS Quantity FROM T_현장셑척 GROUP BY 라인
    UNION ALL
    SELECT 모델, COUNT(*) FROM T_현장셑척 GROUP BY 모델
    UNION ALL
    SELECT 발생유형, COUNT(*) FROM T_현장셑척 GROUP BY 발생유형
END
XAML 코드
xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="2*"/>
        </Grid.RowDefinitions>

        <!-- 차트 컨트롤 정의 -->
        <dxc:ChartControl x:Name="chartControl" Grid.Row="0" MouseDown="ChartControl_MouseDown">
            <!-- Diagram 정의 -->
            <dxc:XYDiagram2D>
                <!-- 시리즈 추가 -->
                <dxc:BarSideBySideSeries2D DisplayName="수량" ArgumentDataMember="Category" ValueDataMember="Quantity">
                    <dxc:BarSideBySideSeries2D.View>
                        <dxc:SideBySideBarSeriesView BarWidth="0.4"/>
                    </dxc:BarSideBySideSeries2D.View>
                </dxc:BarSideBySideSeries2D>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>

        <!-- 그리드 컨트롤 정의 -->
        <dxg:GridControl x:Name="gridControl" Grid.Row="1"/>
    </Grid>
</Window>
C# 코드
C# 코드에서는 서버에서 데이터를 가져와 차트 시리즈에 데이터를 할당하며, 차트의 막대를 클릭했을 때 그리드를 필터링하는 로직을 구현합니다.

csharp
Copy code
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

public partial class MainWindow : Window
{
    private string connectionString = "Your Connection String Here";

    public MainWindow()
    {
        InitializeComponent();
        LoadChartData();
    }

    private void LoadChartData()
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            using (SqlCommand cmd = new SqlCommand("GetChartData", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    chartControl.DataSource = dt;
                }
            }
        }
    }

    private void ChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        var hitInfo = chartControl.CalcHitInfo(e.GetPosition(chartControl));
        if (hitInfo.InSeries)
        {
            var seriesPoint = hitInfo.SeriesPoint;
            FilterGridControl(seriesPoint.Argument);
        }
    }

    private void FilterGridControl(string filterArgument)
    {
        gridControl.FilterString = $"[라인] = '{filterArgument}' OR [모델] = '{filterArgument}' OR [발생유형] = '{filterArgument}'";
    }
}
이 코드는 서버로부터 데이터를 가져와 차트에 표시하며, 차





