using UnityEngine;
using UnityEditor; // Editor 스크립팅 필수
using UnityEngine.SceneManagement; // Scene 관리
using UnityEditor.SceneManagement; // Editor Scene 관리
using System.IO; // 파일 경로 관련

public class SimulationSceneSetupTool
{
    // --- Prefab 경로 및 이름 설정 ---
    private const string PrefabFolderPath = "Assets/Prefabs";
    private const string PcbPrefabName = "PCB_Prefab.prefab";
    private static string PcbPrefabFullPath => Path.Combine(PrefabFolderPath, PcbPrefabName); // 전체 경로 계산

    [MenuItem("Simulation Tools/Setup Full Simulation Scene (Auto Prefab)")]
    private static void SetupFullSceneAutoPrefab()
    {
        Debug.Log("Starting full simulation scene setup (Auto Prefab)...");

        // --- 0. 기존 객체 정리 (선택 사항) ---
        // CleanUpExistingObjects();

        // --- 1. PCB Prefab 생성 또는 업데이트 ---
        GameObject pcbPrefab = CreateOrUpdatePCBPrefab();
        if (pcbPrefab == null)
        {
            // CreateOrUpdatePCBPrefab 내부에서 이미 에러 로그 출력됨
            return;
        }

        // --- 2. 기본 구조 및 환경 생성 ---
        GameObject environmentParent = FindOrCreateGameObject("Environment");
        GameObject floor = FindOrCreateGameObject("Environment/Floor");
        // ... (바닥 Plane 설정 코드는 이전과 동일 - 생략 가능 시 생략) ...
        SetupFloor(floor, environmentParent.transform); // 바닥 설정 함수 호출

        GameObject printersParent = FindOrCreateGameObject("Printers");
        GameObject shuttleSystemParent = FindOrCreateGameObject("ShuttleSystem");
        GameObject inputSystemParent = FindOrCreateGameObject("InputSystem");
        GameObject exitSystemParent = FindOrCreateGameObject("ExitSystem");

        // --- 3. 프린터 생성 및 설정 (시각적 요소 포함) ---
        PrinterController frontPrinter = SetupPrinter("FrontPrinter", printersParent.transform, new Vector3(-3, 0, 0));
        PrinterController rearPrinter = SetupPrinter("RearPrinter", printersParent.transform, new Vector3(3, 0, 0));

        // --- 4. 셔틀 생성 및 설정 (시각적 요소 포함) ---
        ShuttleController shuttle = SetupShuttle("ShuttleConveyor", shuttleSystemParent.transform, Vector3.zero);
        GameObject exitPoint = FindOrCreateGameObject("ExitPoint", null, exitSystemParent.transform);
        exitPoint.transform.position = new Vector3(0, 0, 10);

        // --- 5. Input Trigger 생성 및 설정 ---
        // pcbPrefab 변수 (생성 또는 로드된 것)를 사용
        SetupInputTrigger("InputTrigger_Front", inputSystemParent.transform, pcbPrefab, frontPrinter);
        SetupInputTrigger("InputTrigger_Rear", inputSystemParent.transform, pcbPrefab, rearPrinter);

        // --- 6. 최종 참조 연결 ---
        shuttle.frontPrinter = frontPrinter;
        shuttle.rearPrinter = rearPrinter;
        shuttle.frontPickupLocation = frontPrinter.outputBufferPoint;
        shuttle.rearPickupLocation = rearPrinter.outputBufferPoint;
        shuttle.exitPoint = exitPoint.transform;

        Debug.Log("Full simulation scene setup (Auto Prefab) complete!");

        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
    }

    // --- PCB Prefab 생성/업데이트 함수 ---
    private static GameObject CreateOrUpdatePCBPrefab()
    {
        // Prefabs 폴더가 없으면 생성
        if (!AssetDatabase.IsValidFolder(PrefabFolderPath))
        {
            AssetDatabase.CreateFolder("Assets", "Prefabs");
            Debug.Log($"Created folder: {PrefabFolderPath}");
        }

        // 임시 GameObject 생성 (씬에 보이지 않게)
        GameObject tempPcbGO = new GameObject("TempPcbForPrefab");
        tempPcbGO.hideFlags = HideFlags.HideAndDontSave; // 씬에 저장되거나 보이지 않게

        // 1. 루트에 PCBController 추가
        //    PCBController.cs 스크립트가 Assets/Scripts 폴더 등에 존재해야 함!
        PCBController pcbController = tempPcbGO.AddComponent<PCBController>();
        if (pcbController == null)
        {
            Debug.LogError("Failed to add PCBController script. Make sure PCBController.cs exists and compiles.");
            Object.DestroyImmediate(tempPcbGO); // 임시 객체 제거
            return null;
        }

        // 2. 자식으로 Visual Cube 추가
        GameObject visualCube = GameObject.CreatePrimitive(PrimitiveType.Cube);
        visualCube.name = "Visual";
        visualCube.transform.SetParent(tempPcbGO.transform);
        visualCube.transform.localPosition = Vector3.zero; // 루트 기준 중앙
        visualCube.transform.localScale = new Vector3(1, 0.1f, 1.5f); // PCB 크기 설정

        // 3. Visual Cube의 불필요한 Collider 제거
        Collider cubeCollider = visualCube.GetComponent<Collider>();
        if (cubeCollider != null)
        {
            Object.DestroyImmediate(cubeCollider);
        }

        // 4. Prefab으로 저장 (기존 파일 덮어씀)
        bool prefabSuccess;
        GameObject savedPrefab = PrefabUtility.SaveAsPrefabAsset(tempPcbGO, PcbPrefabFullPath, out prefabSuccess);

        // 5. 임시 GameObject 제거
        Object.DestroyImmediate(tempPcbGO);

        if (prefabSuccess)
        {
            Debug.Log($"PCB Prefab created or updated successfully at: {PcbPrefabFullPath}");
            return savedPrefab; // 저장된 프리팹 에셋 반환
        }
        else
        {
            Debug.LogError($"Failed to save PCB Prefab at: {PcbPrefabFullPath}");
            return null;
        }
    }


    // --- Helper 함수들 (이전과 동일 또는 약간 수정) ---

    private static void SetupFloor(GameObject floorGO, Transform parent)
    {
        if (floorGO.GetComponent<Plane>() == null && floorGO.GetComponent<MeshFilter>() == null)
        {
            GameObject planePrim = GameObject.CreatePrimitive(PrimitiveType.Plane);
            floorGO.AddComponent<MeshFilter>().sharedMesh = planePrim.GetComponent<MeshFilter>().sharedMesh;
            floorGO.AddComponent<MeshRenderer>().sharedMaterial = planePrim.GetComponent<MeshRenderer>().sharedMaterial;
             // Collider도 필요하면 추가
             if(floorGO.GetComponent<Collider>() == null) floorGO.AddComponent<MeshCollider>().sharedMesh = planePrim.GetComponent<MeshFilter>().sharedMesh;
            Object.DestroyImmediate(planePrim);
        }
        floorGO.transform.SetParent(parent);
        floorGO.transform.localScale = new Vector3(5, 1, 5);
        floorGO.transform.position = Vector3.zero; // 위치 설정
    }


    // GameObject 찾거나 새로 생성 (컴포넌트 추가 옵션) - 이전 코드 사용
    private static GameObject FindOrCreateGameObject(string path, System.Type componentToAdd = null, Transform parent = null)
    {
        GameObject go = GameObject.Find(path); // 경로 검색 지원하도록 수정 필요할 수 있음
        Transform currentParentT = parent;
        string[] names = path.Split('/');
        GameObject currentGO = null;

        for (int i = 0; i < names.Length; i++)
        {
            string currentName = names[i];
            Transform foundChild = (currentParentT != null) ? currentParentT.Find(currentName) : FindRootObject(currentName); // 루트 검색 함수 사용

            if (foundChild == null)
            {
                currentGO = new GameObject(currentName);
                if (currentParentT != null)
                {
                    currentGO.transform.SetParent(currentParentT);
                }
            }
            else
            {
                currentGO = foundChild.gameObject;
            }
            currentParentT = currentGO.transform; // 다음 레벨 탐색을 위해 업데이트
        }
        go = currentGO; // 최종 객체

        // 최종 객체에 요청된 컴포넌트가 없으면 추가
        if (go != null && componentToAdd != null && go.GetComponent(componentToAdd) == null)
        {
            go.AddComponent(componentToAdd);
        }
        // 요청된 부모와 다르면 부모 설정 (루트 객체 처리 등)
        if(go != null && parent != null && go.transform.parent != parent && go.transform.parent == null)
        {
            go.transform.SetParent(parent);
        }

        return go;
    }

    // 씬의 루트 레벨에서 GameObject를 찾는 함수
    private static Transform FindRootObject(string name)
    {
         Scene activeScene = SceneManager.GetActiveScene();
         GameObject[] rootObjects = activeScene.GetRootGameObjects();
         foreach (GameObject rootObject in rootObjects)
         {
              if(rootObject.name == name) return rootObject.transform;
         }
         return null;
    }


    // 프린터 설정 Helper - 이전 코드 사용 (내부의 FindOrCreateGameObject 호출이 개선됨)
    private static PrinterController SetupPrinter(string name, Transform parent, Vector3 position)
    {
        GameObject printerGO = FindOrCreateGameObject(name, typeof(PrinterController), parent);
        printerGO.transform.position = position;
        PrinterController controller = printerGO.GetComponent<PrinterController>();

        controller.inputPoint = FindOrCreateGameObject($"{name}/InputPoint", null, printerGO.transform).transform;
        controller.processingPoint = FindOrCreateGameObject($"{name}/ProcessingPoint", null, printerGO.transform).transform;
        controller.outputBufferPoint = FindOrCreateGameObject($"{name}/OutputBufferPoint", null, printerGO.transform).transform;

        controller.inputPoint.localPosition = new Vector3(0, 0, -1.0f);
        controller.processingPoint.localPosition = Vector3.zero;
        controller.outputBufferPoint.localPosition = new Vector3(0, 0, 1.0f);

        GameObject visual = FindOrCreateGameObject($"{name}/Visual");
        if (visual.GetComponent<MeshFilter>() == null)
        {
             GameObject cubePrim = GameObject.CreatePrimitive(PrimitiveType.Cube);
             visual.AddComponent<MeshFilter>().sharedMesh = cubePrim.GetComponent<MeshFilter>().sharedMesh;
             visual.AddComponent<MeshRenderer>().sharedMaterial = cubePrim.GetComponent<MeshRenderer>().sharedMaterial;
             Object.DestroyImmediate(cubePrim);
             Collider col = visual.GetComponent<Collider>(); // 프리미티브 생성 시 생긴 콜라이더 제거
             if(col != null) Object.DestroyImmediate(col);
        }
        visual.transform.SetParent(printerGO.transform);
        visual.name = "Visual";
        visual.transform.localPosition = new Vector3(0, -0.2f, 0);
        visual.transform.localScale = new Vector3(1.5f, 0.6f, 2.5f);

        return controller;
    }

    // 셔틀 설정 Helper - 이전 코드 사용
    private static ShuttleController SetupShuttle(string name, Transform parent, Vector3 position)
    {
        GameObject shuttleGO = FindOrCreateGameObject(name, typeof(ShuttleController), parent);
        shuttleGO.transform.position = position;
        ShuttleController controller = shuttleGO.GetComponent<ShuttleController>();

        controller.shuttlePickupPoint = FindOrCreateGameObject($"{name}/PickupPoint", null, shuttleGO.transform).transform;
        controller.shuttlePickupPoint.localPosition = new Vector3(0, 0.2f, 0);

        GameObject visual = FindOrCreateGameObject($"{name}/Visual");
         if (visual.GetComponent<MeshFilter>() == null)
        {
             GameObject cubePrim = GameObject.CreatePrimitive(PrimitiveType.Cube);
             visual.AddComponent<MeshFilter>().sharedMesh = cubePrim.GetComponent<MeshFilter>().sharedMesh;
             visual.AddComponent<MeshRenderer>().sharedMaterial = cubePrim.GetComponent<MeshRenderer>().sharedMaterial;
             Object.DestroyImmediate(cubePrim);
             Collider col = visual.GetComponent<Collider>();
             if(col != null) Object.DestroyImmediate(col);
        }
        visual.transform.SetParent(shuttleGO.transform);
        visual.name = "Visual";
        visual.transform.localPosition = Vector3.zero;
        visual.transform.localScale = new Vector3(1.8f, 0.2f, 0.5f);

        return controller;
    }

    // Input Trigger 설정 Helper - 이전 코드 사용
     private static void SetupInputTrigger(string name, Transform parent, GameObject pcbPrefab, PrinterController targetPrinter)
    {
        GameObject triggerGO = FindOrCreateGameObject(name, typeof(InputTrigger), parent);
        InputTrigger trigger = triggerGO.GetComponent<InputTrigger>();

        trigger.pcbPrefab = pcbPrefab;
        trigger.targetPrinter = targetPrinter;

        if (targetPrinter != null && targetPrinter.inputPoint != null)
        {
            triggerGO.transform.position = targetPrinter.inputPoint.position + Vector3.back * 2.5f;
        }
    }
}