총 네 개의 이벤트 핸들러가 필요합니다: PreviewMouseMove, Drop, CheckBox_Checked, CheckBox_Unchecked.

다음은 CheckBox 상태 변경과 ListBox 드래그 앤 드롭을 함께 처리하는 전체 코드 예시입니다.

ColumnInfo 클래스
csharp
Copy code
public class ColumnInfo
{
    public string XName { get; set; }
    public bool IsVisible { get; set; }
}
설정 윈도우 XAML
xml
Copy code
<Window x:Class="ColumnOrderingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Column Order" Height="300" Width="200">
    <StackPanel>
        <Button Content="Apply Changes" Click="ApplyChanges_Click" Margin="5"/>
        <ListBox x:Name="ListBoxColumns" AllowDrop="True" PreviewMouseMove="ListBoxColumns_PreviewMouseMove" Drop="ListBoxColumns_Drop">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox Content="{Binding XName}" IsChecked="{Binding IsVisible}" Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </StackPanel>
</Window>
설정 윈도우 코드 비하인드
csharp
Copy code
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

public partial class ColumnOrderingWindow : Window
{
    public ObservableCollection<ColumnInfo> ColumnsInfo { get; set; }

    public ColumnOrderingWindow(IEnumerable<ColumnInfo> columns)
    {
        InitializeComponent();
        ColumnsInfo = new ObservableCollection<ColumnInfo>(columns);
        ListBoxColumns.ItemsSource = ColumnsInfo;
    }

    private void ApplyChanges_Click(object sender, RoutedEventArgs e)
    {
        foreach (var column in ColumnsInfo)
        {
            Debug.WriteLine($"XName: {column.XName}, IsVisible: {column.IsVisible}");
        }
        this.Close();
    }

    private void CheckBox_Checked(object sender, RoutedEventArgs e)
    {
        var checkBox = sender as CheckBox;
        var columnInfo = checkBox.DataContext as ColumnInfo;
        if (columnInfo != null)
        {
            columnInfo.IsVisible = checkBox.IsChecked == true;
        }
    }

    private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
    {
        CheckBox_Checked(sender, e);
    }

    private void ListBoxColumns_PreviewMouseMove(object sender, MouseEventArgs e)
    {
        if (e.LeftButton == MouseButtonState.Pressed)
        {
            var listBoxItem = (ListBoxItem)ListBoxColumns.ItemContainerGenerator.ContainerFromItem((sender as ListBox).SelectedItem);
            if (listBoxItem != null)
            {
                DragDrop.DoDragDrop(listBoxItem, listBoxItem.DataContext, DragDropEffects.Move);
            }
        }
    }

    private void ListBoxColumns_Drop(object sender, DragEventArgs e)
    {
        var droppedData = e.Data.GetData(typeof(ColumnInfo)) as ColumnInfo;
        var target = ((ListBoxItem)(ListBoxColumns.ContainerFromElement((DependencyObject)e.OriginalSource))).DataContext as ColumnInfo;

        int removedIdx = ColumnsInfo.IndexOf(droppedData);
        int targetIdx = ColumnsInfo.IndexOf(target);

        if (removedIdx < targetIdx)
        {
            ColumnsInfo.Move(removedIdx, targetIdx);
        }
        else
        {
            ColumnsInfo.Move(removedIdx, targetIdx);
        }
    }
}
드래그 앤 드롭 로직을 처리할 때는 e.OriginalSource를 사용하여 드롭 대상의 ListBoxItem을 찾고, 그 DataContext를 통해 드롭 대상의 ColumnInfo를 확인합니다. 그 후, ObservableCollection의 Move 메소드를 사용하여 컬렉션 내의 아이템 위치를 변경합니다.

위 코드는 CheckBox의 체크 상태가 바뀔 때마다 ColumnInfo의 IsVisible 속성을 업데이트하며, "Apply Changes" 버튼을 클릭하면 현재의 컬럼 순서와 가시성 상태를 Debug.WriteLine을 통해 출력합니다. CheckBox_Checked와 CheckBox_Unchecked 이벤트 핸들러는