에 최대한 깔끔하게 코드를 정리해 보았습니다.
MySplashScreen.xaml

xaml

<Window x:Class="YourNamespace.MySplashScreen"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Grid>
        <ProgressBar Name="progressBar" Maximum="100" Height="30" Width="200"/>
    </Grid>
</Window>

MySplashScreen.xaml.cs

csharp

using System.Windows;

namespace YourNamespace
{
    public partial class MySplashScreen : Window
    {
        public MySplashScreen()
        {
            InitializeComponent();
        }

        public void UpdateProgress(int value)
        {
            progressBar.Value = value;
        }
    }
}

MainWindow.xaml.cs

csharp

using System;
using System.Threading.Tasks;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private async void OnLoadExcelClicked(object sender, RoutedEventArgs e)
        {
            await LoadExcelDataAsync();
        }

        private async Task LoadExcelDataAsync()
        {
            MySplashScreen mySplashScreen = new MySplashScreen();
            mySplashScreen.Show();

            int totalRows = 100;
            await Task.Run(() =>
            {
                for (int i = 0; i < totalRows; i++)
                {
                    System.Threading.Thread.Sleep(50);
                    int progress = (int)((double)(i + 1) / totalRows * 100);
                    Dispatcher.Invoke(() => mySplashScreen.UpdateProgress(progress));
                }
            });

            mySplashScreen.Close();
        }
    }
}

이렇게 하면 MySplashScreen의 프로그레스바는 별도의 스레드에서 작업을 수행하면서도 UI 스레드에서 정상적으로 업데이트됩니다. 이 방식으로 문제가 해결될 것이라고 생