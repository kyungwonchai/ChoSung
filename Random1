I 호출 시 시스템 아이디와 토큰 정보를 HTTP 헤더에 포함하여 전송해야 한다는 내용은 보안 및 인증을 위한 요구사항입니다. 이를 구현하기 위해 다음과 같이 코드를 수정할 수 있습니다.

csharp

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";
        private static readonly string systemId = "시스템 아이디";
        private static readonly string accessToken = "토큰 값";

        public static async Task<string> SendMail(string userId, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
        {
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestData = new
            {
                body = new
                {
                    subject,
                    contents,
                    sender = new
                    {
                        emailAddress = senderEmailAddress,
                        recipientType = "TO"
                    },
                    recipients = new[]
                    {
                        new
                        {
                            emailAddress = recipientEmailAddress,
                            recipientType = "TO"
                        }
                    }
                }
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(requestUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");

                return mailId;
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string errorCode = result.errorCode;
                string errorMessage = result.errorMessage;

                Console.WriteLine("메일 발송에 실패하였습니다.");
                Console.WriteLine($"에러 코드: {errorCode}");
                Console.WriteLine($"에러 메시지: {errorMessage}");

                return null;
            }
        }

        public static async Task<bool> CancelMail(string userId, string mailId)
        {
            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestUrl = $"{apiUrl}/mails/{mailId}/cancel?userId={userId}";

            var response = await client.PostAsync(requestUrl, null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("메일 발신 취소가 성공적으로 처리되었습니다.");
                return true;
            }
            else
            {
                Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                return false;
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string userId = "

User
이어서
ChatGPT

네, 이어서 코드를 작성하겠습니다.

csharp

            string userId = "사용자 아이디";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "보내는 이메일 주소";
            string recipientEmailAddress = "받는 이메일 주소";

            try
            {
                mailId = await MailSender.SendMail(userId, subject, contents, senderEmailAddress, recipientEmailAddress);
            }
            catch (Exception ex)
            {
                Console.WriteLine("메일 발송 중 오류가 발생하였습니다.");
                Console.WriteLine($"오류 메시지: {ex.Message}");
            }
        }

        private async void btnCancelMail_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(mailId))
            {
                string userId = "사용자 아이디";

                try
                {
                    bool cancellationResult = await MailSender.CancelMail(userId, mailId);

                    if (cancellationResult)
                    {
                        Console.WriteLine("메일 발신이 취소되었습니다.");
                    }
                    else
                    {
                        Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("메일 발신 취소 중 오류가 발생하였습니다.");
                    Console.WriteLine($"오류 메시지: {ex.Message}");
                }
            }
        }
    }
}

위의 코드에서는 btnSendMail_Click 이벤트 핸들러와 btnCancelMail_Click 이벤트 핸들러에서 사용자 아이디(userId) 값을 설정하고, MailSender.SendMail 메서드와 MailSender.CancelMail 메서드 호출 시에도 사용자 아이디를 전달합니다.

또한, MailSender 클래스에 시스템 아이디(systemId)와 토큰(accessToken) 값을 추가로 설정하고, client.DefaultRequestHeaders를 사용하여 해당 값을 HTTP 헤더에 포함시킵니다.

이제 시스템 아이디와 토큰을 HTTP 헤더에 포함하여 API를 호출할 수 있습니다. 필요한 경우 시스템 아이디와 토큰 값을 적절히 설정하여 코드를 수정하고, 실제 사용하는 환경에 맞게 값을 입력하여 사용하시면 됩니다.