다. MS SQL Server에서 별도의 테이블을 생성하여 잠금 상태를 저장하고, 클라이언트에서는 이 정보를 사용합니다. 아래 예시를 참고하세요.
MS SQL 테이블 생성

sql

CREATE TABLE LockedRows (
    RowID INT PRIMARY KEY,
    IsLocked BIT
);

C# 코드

csharp

using System.Data.SqlClient;

private void LockRow(int rowHandle)
{
    using (SqlConnection connection = new SqlConnection("Your_Connection_String"))
    {
        SqlCommand command = new SqlCommand(
            "UPDATE LockedRows SET IsLocked = 1 WHERE RowID = @RowID", connection);
        command.Parameters.AddWithValue("@RowID", rowHandle);

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
    }
    lockedRows.Add(rowHandle);
}

private void btnUpdate_Click(object sender, RoutedEventArgs e)
{
    using (SqlConnection connection = new SqlConnection("Your_Connection_String"))
    {
        SqlCommand command = new SqlCommand(
            "UPDATE LockedRows SET IsLocked = 0 WHERE RowID = @RowID", connection);
        command.Parameters.AddWithValue("@RowID", rowHandle);

        connection.Open();
        command.ExecuteNonQuery();
        connection.Close();
    }
    lockedRows.Clear();
}

이렇게 하면 SQL 데이터베이스를 통해 행의 잠금 상태를 관리할 수 있습니다. LockRow 함수가 호출될 때 해당 행은 잠기고, btnUpdate_Click 이벤트가 발생하면 잠금이 해제됩니다.

클라이언트 애플리케이션을 실행할 때 LockedRows 테이블에서 IsLocked 상태를 확인하여 현재의 잠금 상태를 반영해야 합니다.

물론 이것은 기본적인 예시입니다. 실제 구현에서는 트랜잭션, 예외 처리 등을 고려