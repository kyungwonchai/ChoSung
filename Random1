구사항을 반영하여, 프로그램 시작 시 DB에서 IP 리스트를 가져와 순회하면서 각 IP에 대해 데이터를 처리하고, 업로드 시 어느 IP에서 가져온 데이터인지 ipname 컬럼에 추가하도록 코드를 수정했습니다.

전체 코드
XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterVisionInspGather.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Router Vision Inspection Gather" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 작업 시작 버튼 -->
        <Button Content="작업 시작" Grid.Row="0" Margin="10" Click="StartButton_Click"/>

        <!-- 상태 메시지를 표시하는 ListBox -->
        <ListBox x:Name="StatusListBox" Grid.Row="1" Margin="10"/>

        <!-- 하단 상태 텍스트 -->
        <TextBlock Text="작업 상태 메시지:" Grid.Row="2" Margin="10" VerticalAlignment="Center"/>
    </Grid>
</Window>
Code-Behind (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    /// <summary>
    /// MainWindow.xaml의 코드 비하인드
    /// 프로그램의 주요 UI와 CSV 처리 시작 작업을 담당합니다.
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private DateTime _lastUploadedTime; // 마지막 업로드된 InspectionTime

        public MainWindow()
        {
            InitializeComponent();

            // DB에서 IP 리스트 가져오기
            _ipAddresses = GetIpAddressesFromDatabase();
            StatusListBox.Items.Add($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

            // 마지막 업로드된 InspectionTime 가져오기
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 업로드된 시간: {_lastUploadedTime}");
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
            var ipList = new List<string>();

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                    }
                }
            }

            return ipList;
        }

        /// <summary>
        /// 데이터베이스에서 마지막 업로드된 InspectionTime 가져오기
        /// </summary>
        private DateTime GetLastUploadedTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    // 결과값이 없을 경우 1년 전 시간 반환
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }

        /// <summary>
        /// 작업 시작 버튼 클릭 이벤트
        /// </summary>
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                StatusListBox.Items.Add("작업 시작 중...");
                await StartProcessingAsync();
                StatusListBox.Items.Add("작업 완료");
            }
            catch (Exception ex)
            {
                StatusListBox.Items.Add($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                StatusListBox.Items.Add($"IP {ip} 처리 중...");

                // 해당 IP에 대한 파일 처리
                var processor = new FileProcessor(_lastUploadedTime, ip);
                var newRows = processor.GetNewRows($@"\\{ip}\Result");

                if (newRows.Any())
                {
                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(newRows);

                    StatusListBox.Items.Add($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");
                }
                else
                {
                    StatusListBox.Items.Add($"IP {ip}: 새로운 데이터 없음.");
                }
            }

            // 마지막 업로드된 시간 갱신
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastUploadedTime;
        private readonly string _ipAddress;

        public FileProcessor(DateTime lastUploadedTime, string ipAddress)
        {
            _lastUploadedTime = lastUploadedTime;
            _ipAddress = ipAddress;
        }

        /// <summary>
        /// 새로운 데이터 행 가져오기
        /// </summary>
        public List<Dictionary<string, object>> GetNewRows(string rootPath)
        {
            var newRows = new List<Dictionary<string, object>>();
            var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

            foreach (var file in csvFiles)
            {
                using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                {
                    var headers = reader.ReadLine()?.Split(',');
                    if (headers == null) continue;

                    while (!reader.EndOfStream)
                    {
                        var values = reader.ReadLine()?.Split(',');
                        if (values == null || values.Length < headers.Length) continue;

                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < headers.Length; i++)
                        {
                            row[headers[i]] = values[i];
                        }

                        if (DateTime.TryParse(row["InspectionTime"].ToString(), out var inspectionTime))
                        {
                            if (inspectionTime > _lastUploadedTime)
                            {
                                if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                                {
                                    continue;
                                }

                                // IP 정보 추가
                                row["ipname"] = _ipAddress;
                                newRows.Add(row);
                            }
                        }
                    }
                }
            }

            return newRows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", DateTime.Parse(row["InspectionTime"].ToString()));
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"].ToString());
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"].ToString());
                        command.Parameters.AddWithValue("@MP1DATA", float.Parse(row["MP1DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP2DATA", float.Parse(row["MP2DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP3DATA", float.Parse(row["MP3DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP4DATA", float.Parse(row["MP4DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"].ToString());
                        command.Parameters.AddWithValue("@ipname", row["ipname"].ToString());

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
MSSQL 테이블 생성
IP 테이블
sql
코드 복사
CREATE TABLE IpTable (
    IPAddress NVARCHAR(50) NOT NULL PRIMARY KEY
);
데이터 테이블
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName)
);
변경사항 요약
DB에서 IP 리스트 가져오기: IpTable 테이블에서 IP 주소를 가져옵니다.
각 IP에 대해 순회 처리: 가져온 IP로 네트워크 경로를 접근하여 데이터 처리.