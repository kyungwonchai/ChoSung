아래는 비동기 방식을 사용하여 시리얼 포트 데이터를 읽고 데이터베이스에 저장하는 Windows 서비스 코드를 제공합니다. 비동기 처리는 CPU 사용률을 줄이고, 고성능 서비스를 구현할 수 있습니다.

1. 비동기 Windows 서비스 코드
Program.cs
csharp
코드 복사
using System.ServiceProcess;

namespace SerialScannerService
{
    static class Program
    {
        static void Main()
        {
            ServiceBase[] ServicesToRun;
            ServicesToRun = new ServiceBase[]
            {
                new ScannerService()
            };
            ServiceBase.Run(ServicesToRun);
        }
    }
}
ScannerService.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.ServiceProcess;
using System.Threading;
using System.Threading.Tasks;
using System.Data.SqlClient;

namespace SerialScannerService
{
    public partial class ScannerService : ServiceBase
    {
        private SerialPort _serialPort;          // 시리얼 포트 객체
        private CancellationTokenSource _cts;   // 비동기 작업을 중단하기 위한 토큰

        public ScannerService()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                // 서비스 시작 시 초기화
                _cts = new CancellationTokenSource();
                InitializeSerialPort();
                StartListeningAsync(_cts.Token); // 비동기 데이터 읽기 시작
                LogMessage("Service started and serial port initialized.");
            }
            catch (Exception ex)
            {
                LogMessage($"Error on service start: {ex.Message}");
                Stop();
            }
        }

        protected override void OnStop()
        {
            try
            {
                // 서비스 중지 처리
                _cts?.Cancel(); // 비동기 작업 중단
                if (_serialPort?.IsOpen == true)
                {
                    _serialPort.Close();
                }
                LogMessage("Service stopped and serial port closed.");
            }
            catch (Exception ex)
            {
                LogMessage($"Error on service stop: {ex.Message}");
            }
        }

        private void InitializeSerialPort()
        {
            // 시리얼 포트 설정
            _serialPort = new SerialPort("COM3", 9600)
            {
                ReadTimeout = 1000, // 읽기 타임아웃 1초
                WriteTimeout = 1000,
                NewLine = "\r\n"    // 라인 끝 문자 설정
            };

            _serialPort.Open(); // 포트 열기
        }

        private async Task StartListeningAsync(CancellationToken token)
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    // 데이터 읽기 (비동기 방식)
                    string data = await ReadFromSerialPortAsync(token);
                    if (!string.IsNullOrWhiteSpace(data))
                    {
                        LogMessage($"Data received: {data}");

                        // 데이터베이스 저장 (비동기 방식)
                        await SaveToDatabaseAsync(data);
                    }
                }
                catch (TimeoutException)
                {
                    // 읽기 시간 초과는 무시
                }
                catch (OperationCanceledException)
                {
                    // 서비스 중지 시 발생하는 예외 처리
                    LogMessage("Listening canceled.");
                    break;
                }
                catch (Exception ex)
                {
                    LogMessage($"Error during listening: {ex.Message}");
                }
            }
        }

        private async Task<string> ReadFromSerialPortAsync(CancellationToken token)
        {
            return await Task.Run(() =>
            {
                token.ThrowIfCancellationRequested();

                if (_serialPort.IsOpen)
                {
                    return _serialPort.ReadLine(); // 데이터 한 줄 읽기
                }
                return null;
            }, token);
        }

        private async Task SaveToDatabaseAsync(string data)
        {
            string connectionString = "YourDatabaseConnectionStringHere";
            string query = "INSERT INTO ScannerData (ScannedValue, Timestamp) VALUES (@Value, @Timestamp)";

            try
            {
                using (var connection = new SqlConnection(connectionString))
                {
                    using (var command = new SqlCommand(query, connection))
                    {
                        // 파라미터 추가
                        command.Parameters.AddWithValue("@Value", data);
                        command.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                        await connection.OpenAsync();
                        await command.ExecuteNonQueryAsync();
                    }
                }

                LogMessage($"Data saved to database: {data}");
            }
            catch (Exception ex)
            {
                LogMessage($"Database error: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            string logPath = AppDomain.CurrentDomain.BaseDirectory + "\\ScannerServiceLog.txt";
            string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            try
            {
                System.IO.File.AppendAllText(logPath, logMessage + Environment.NewLine);
            }
            catch
            {
                // 로그 작성 실패 시 무시
            }
        }
    }
}
2. 설치 및 실행
InstallUtil 사용
서비스 설치:

관리자 권한 명령 프롬프트를 열고 아래 명령 실행:
bash
코드 복사
InstallUtil SerialScannerService.exe
서비스 시작:

services.msc 실행 → SerialScannerService 찾기 → 시작 버튼 클릭.
3. 코드 주요 포인트
1. 비동기 시리얼 데이터 읽기
ReadFromSerialPortAsync: 시리얼 데이터를 비동기로 읽어 CPU 사용량을 최소화.
Task.Run을 사용하여 데이터를 읽고, CancellationToken으로 작업을 안전하게 중단.
2. 비동기 데이터베이스 저장
SaveToDatabaseAsync: 데이터베이스 작업을 비동기로 처리하여 병렬 작업 중에도 UI 블로킹 없음.
3. 서비스 관리
OnStart: 서비스 시작 시 시리얼 포트를 열고 비동기로 데이터 읽기 시작.
OnStop: 서비스 중지 시 비동기 작업을 취소하고 포트를 닫음.
4. 로깅
서비스 상태와 오류를 로그 파일에 기록 (ScannerServiceLog.txt).
4. 전문가 코드의 장점
비동기 처리:

CPU 리소스 사용 최적화.
높은 트래픽을 처리할 수 있는 확장성.
안정성:

예외 처리 및 서비스 종료 시 자원 정리.
효율성:
