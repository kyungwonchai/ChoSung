기본 액티비티가 ComponentActivity인 경우에 맞게 코드를 수정하겠습니다. ComponentActivity는 AppCompatActivity와 다르게 상속 계층이 단순하며, androidx 라이브러리의 기본 컴포넌트로, 보다 가벼운 액티비티를 제공합니다. 이에 맞춰 XML 레이아웃과 코틀린 코드를 수정하겠습니다.

1. 수정된 MainActivity.kt 코드
kotlin
코드 복사
package com.example.barcodescanner

import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        setContent {
            // Compose UI를 사용하지 않는 경우 기존 XML 레이아웃을 설정합니다.
            setContentView(R.layout.activity_main)
            barcodeView = findViewById(R.id.camera_preview)
            barcodeView.decodeContinuous(callback)
        }
    }

    private val callback = object : BarcodeCallback {
        override fun barcodeResult(result: BarcodeResult) {
            if (result.text != null) {
                val scannedValue = result.text
                val codeType = result.barcodeFormat.toString()

                // 스캔된 데이터를 화면에 표시
                findViewById<TextView>(R.id.text_view_result).text = "Scanned: $scannedValue ($codeType)"

                // 데이터베이스에 저장
                saveToDatabase(codeType, scannedValue)
            }
        }

        override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
        }
    }

    private fun saveToDatabase(codeType: String, codeValue: String) {
        val dbUrl = "jdbc:jtds:sqlserver://<Your_Server_IP>:1433/BarcodeQRData"
        val dbUser = "<Your_DB_Username>"
        val dbPassword = "<Your_DB_Password>"

        try {
            val connection: Connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)
            val statement: PreparedStatement = connection.prepareStatement(
                "INSERT INTO ScannedData (CodeType, CodeValue) VALUES (?, ?)"
            )
            statement.setString(1, codeType)
            statement.setString(2, codeValue)
            statement.executeUpdate()
            statement.close()
            connection.close()
        } catch (e: Exception) {
            Log.e("DatabaseError", "Failed to save data", e)
        }
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
    }
}
2. XML 레이아웃 파일 (activity_main.xml)
XML 레이아웃은 변경 없이 그대로 사용할 수 있습니다. 하지만, ComponentActivity를 사용한다는 점에서 UI와 컴포즈 설정이 필요할 경우 이를 고려할 수 있습니다. 이 예제에서는 기존 XML 기반 UI를 그대로 사용하도록 했습니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <SurfaceView
        android:id="@+id/camera_preview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
3. 추가 설명
ComponentActivity는 보다 경량의 기본 액티비티 클래스로, 앱이 복잡하지 않거나, 직접 필요한 라이브러리나 구성 요소를 구성하고자 할 때 유용합니다.
setContent 함수를 사용하여 Compose 기반 UI를 설정할 수 있으며, 현재 예제에서는 Compose UI 대신 기존의 XML 기반 UI를 사용하였습니다.
이 수정된 코드를 통해 ComponentActivity를 사용하는 환경에서도 QR 코드 및 바코드를 읽고, MSSQL 데이터베이스로 데이터를 전송하는 기능을 동일하게 구현할 수 있습니다.