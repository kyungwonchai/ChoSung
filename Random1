// 필요한 네임스페이스 추가
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic; // List<T> 사용
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 및 ConnectionStrings 사용 위해 추가
using System.Data.Entity;
using System.Data.Entity.Infrastructure; // DbEntityEntry, DbUpdateException 사용
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices; // Marshal 사용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 윈도우(MainWindow)와 연결되는 주 ViewModel 클래스입니다.
    /// 각 ViewModel이 독립적인 DbContext를 사용하도록 수정되었습니다.
    /// (.NET Framework 4.8 버전 - 최종 점검)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        // MainViewModel이 직접 사용하는 DbContext
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A"; // 현재 관리자 (예시 - 실제 구현 시 로그인 정보 사용)

        // --- 마스터 키 관련 속성 ---
        private SecureString _masterPasswordInput; // 마스터 키 입력값 (PasswordBox 바인딩용)
        private bool _isMasterModeEnabled = false; // 마스터 관리 탭 활성화 여부

        // --- 마스터 데이터 목록 (ComboBox 바인딩용) ---
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        // --- 자식 ViewModel 인스턴스 (DbContext를 공유하지 않음) ---
        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }


        #region Public Properties (UI 바인딩용)

        /// <summary>
        /// 사물함 배정 목록 (메인 그리드 바인딩)
        /// </summary>
        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        /// <summary>
        /// 메인 그리드에서 선택된 사물함 항목
        /// </summary>
        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    // 선택 변경 시 관련 Command의 CanExecute 상태 업데이트
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        /// <summary>
        /// 하단 상태 표시줄 메시지
        /// </summary>
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }

        /// <summary>
        /// 마스터 키 입력 PasswordBox와 바인딩될 SecureString
        /// </summary>
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }

        /// <summary>
        /// 마스터 관리 탭의 표시 여부 (마스터 키 확인 후 true로 변경)
        /// 이 속성 값이 변경될 때 SetProperty를 통해 PropertyChanged 이벤트가 발생해야 합니다.
        /// </summary>
        public bool IsMasterModeEnabled
        {
            get => _isMasterModeEnabled;
            // SetProperty를 사용하여 값 변경 및 UI 알림 처리
            set => SetProperty(ref _isMasterModeEnabled, value);
        }

        // --- 콤보박스 ItemsSource 바인딩용 마스터 데이터 목록 ---
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }

        #endregion

        #region Commands (UI 버튼 등과 바인딩)
        public ICommand LoadDataCommand { get; } // 전체 데이터 새로고침
        public ICommand SaveChangesCommand { get; } // 사물함 탭 변경 사항 저장
        public ICommand AddNewCommand { get; } // 새 사물함 추가
        public ICommand DeleteCommand { get; } // 선택 사물함 삭제
        public ICommand ClearAssignmentCommand { get; } // 선택 사물함 배정 해제
        public ICommand CheckMasterPasswordCommand { get; } // 마스터 키 확인
        public ICommand RefreshMasterDataCommand { get; } // 마스터 데이터 목록만 새로고침
        #endregion

        /// <summary>
        /// MainViewModel 생성자
        /// </summary>
        public MainViewModel()
        {
            // DbContext 생성 및 예외 처리
            try
            {
                _context = new LockerDbContext(); // 자신의 DbContext 생성
                StatusBarText = "데이터베이스 연결 준비 완료.";
            }
            catch (Exception ex)
            {
                 MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "DB 연결 오류!";
                 // 생성자에서 오류 발생 시 이후 로직 중단
                 return;
            }

            // ObservableCollection 초기화
            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            // 자식 ViewModel 생성 (DbContext 전달 안 함, 각자 생성)
            MasterDataVM = new MasterDataViewModel();
            LogVM = new LogViewModel();

            // Command 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync()); // 콤보박스용 목록 새로고침

            // DbContext 생성 성공 시 데이터 로드 시작
            if (_context != null)
            {
                 _ = LoadInitialDataAsync();
            }
        }

        /// <summary>
        /// 초기 데이터 로드 (마스터 데이터 먼저 로드)
        /// </summary>
        private async Task LoadInitialDataAsync()
        {
            await LoadMasterDataAsync();
            await LoadAssignmentsAsync();
        }

        /// <summary>
        /// 사물함 배정 목록 로드
        /// </summary>
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                // AsNoTracking() 사용 시 변경 추적 안 됨 (편집 시 주의)
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 로드 (콤보박스용)
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            // 이 메서드는 MainViewModel의 콤보박스에 필요한 목록만 로드합니다.
            // AsNoTracking()을 사용하여 성능 향상 및 충돌 방지 시도
            if (_context == null) return;
            StatusBarText = "마스터 데이터(콤보박스용) 로딩 중...";
            try
            {
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync());
                StatusBarText = "마스터 데이터(콤보박스용) 로드 완료.";
            }
            catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader"))
            {
                 HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx);
                 MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); }
        }


        /// <summary>
        /// 마스터 키 비밀번호 확인 로직
        /// </summary>
        private void CheckMasterPassword(object parameter)
        {
            try
            {
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);
                if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); }
                else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            }
            catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        }

        #region CRUD 및 기타 메서드

        /// <summary>
        /// 사물함 관리 탭의 변경 사항 저장
        /// </summary>
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            // 롤백을 위해 모든 변경된 엔트리를 미리 가져옴
            List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList();
            try
            {
                 // LockerAssignment 타입의 변경된 엔트리만 가져옴 (Entries<T> 사용)
                 var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList();

                 // 중복 위치 검사 (UI 컬렉션 기준)
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);
                 if (duplicates.Any())
                 {
                     MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                     RollbackChanges(allChangedEntriesForRollback); // 전체 변경 롤백
                     return;
                 }

                // 변경된 LockerAssignment 엔티티에 관리자 정보 업데이트
                foreach(var entry in changedLockerEntries)
                {
                    entry.Entity.Administrator = _currentAdmin;
                }

                // 변경 사항 저장 (로그는 DbContext에서 자동으로 기록됨)
                int changedCount = await _context.SaveChangesAsync();
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx)
            {
                HandleDbUpdateException(dbEx);
                // 오류 발생 시 모든 변경된 엔트리 롤백 (ToList() 호출 확인)
                RollbackChanges(allChangedEntriesForRollback);
            }
            catch (Exception ex)
            {
                HandleGenericException("저장", ex);
                // 오류 발생 시 모든 변경된 엔트리 롤백 (ToList() 호출 확인)
                RollbackChanges(allChangedEntriesForRollback);
            }
        }

        /// <summary>
        /// EF6에서 변경 사항 롤백 (간단 버전)
        /// </summary>
        /// <param name="changedEntries">롤백할 엔티티 목록 (IEnumerable<DbEntityEntry>)</param>
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) // 파라미터 타입 IEnumerable 유지
        {
            if (_context == null || changedEntries == null) return;
            // 내부에서 ToList()를 호출하여 안전하게 반복 처리
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break;
                    case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break;
                    case EntityState.Deleted: entry.State = EntityState.Unchanged; break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }

        /// <summary>
        /// 새 사물함 추가 (UI 및 Context)
        /// </summary>
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 세부 정보 입력 후 저장 필요."; }

        /// <summary>
        /// 선택된 사물함 삭제
        /// </summary>
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }

        /// <summary>
        /// 선택된 사물함의 사용자 배정 정보 해제
        /// </summary>
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        #endregion

        #region Helper Methods
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현 (자신의 DbContext 해제)
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } } // DbContext 해제 확인
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }