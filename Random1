using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows;

namespace YourNamespace
{
    public partial class App : Application
    {
        private static Mutex _mutex;
        private const string MutexName = "YourUniqueMutexName"; // 고유한 이름으로 변경하세요

        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);

        [DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [DllImport("user32.dll")]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        private const int SW_RESTORE = 9;

        protected override void OnStartup(StartupEventArgs e)
        {
            bool isNewInstance;
            _mutex = new Mutex(true, MutexName, out isNewInstance);

            if (!isNewInstance)
            {
                // 이미 실행 중인 프로그램이 있는 경우, 기존 인스턴스를 활성화
                ActivateExistingInstance();
                Shutdown(); // 새 인스턴스를 종료
                return;
            }

            base.OnStartup(e);
        }

        private void ActivateExistingInstance()
        {
            // 메인 윈도우 클래스 이름과 타이틀을 변경하세요
            string mainWindowTitle = "YourMainWindowTitle"; // 메인 윈도우 타이틀 변경 필요
            IntPtr hWnd = FindWindow(null, mainWindowTitle);

            if (hWnd != IntPtr.Zero)
            {
                // 트레이에 내려간 상태라면 윈도우를 복원
                ShowWindow(hWnd, SW_RESTORE);
                // 윈도우를 활성화
                SetForegroundWindow(hWnd);
            }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            _mutex?.ReleaseMutex();
            _mutex?.Dispose();
            base.OnExit(e);
        }
    }
}
설명