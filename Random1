, 알겠습니다. 첫 번째 줄에서 인식된 온도 값이 40.0 이상 50.0 미만일 경우에만 해당 값을 절반(1/2)으로 계산하여 DB에 업데이트 및 인서트하도록 수정하겠습니다.

이 로직은 ProcessOcrResult 함수 내에서, 최종적으로 UploadToDatabase 함수를 호출하기 직전에 적용됩니다.

수정된 ProcessOcrResult 함수의 전체 코드를 드립니다.

MainWindow.xaml.cs의 ProcessOcrResult 함수 수정
C#

        // 온습도 값 교정 및 특정 조건 처리 로직이 포함된 ProcessOcrResult 함수
        private void ProcessOcrResult(string rawText)
        {
            string originalPart1 = "";
            string originalPart2 = "";
            string finalPart1String = "";
            string finalPart2String = "";

            try
            {
                // 마이너스 기호는 이미 whitelist에서 제외됨 (필요시 여기서 한 번 더 제거 가능)
                string processedText = rawText.Replace("-", "");
                string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);

                if (parts.Length != 2)
                {
                    lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)";
                    return;
                }

                originalPart1 = parts[0]; // 첫 번째 줄 (온도 추정)
                originalPart2 = parts[1]; // 두 번째 줄 (습도 추정)

                finalPart1String = FormatTemperatureHumidityValue(originalPart1);
                finalPart2String = FormatTemperatureHumidityValue(originalPart2);

                if (decimal.TryParse(finalPart1String, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal val1) &&
                    decimal.TryParse(finalPart2String, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture, out decimal val2))
                {
                    // ## 여기가 핵심 수정 부분입니다: 온도 값 조건부 처리 ##
                    decimal temperatureToUpload = val1; // 기본적으로는 가공된 온도 값 사용

                    // 첫 번째 값(온도)이 40.0 이상이고 50.0 미만인지 확인
                    if (val1 >= 40.0m && val1 < 50.0m)
                    {
                        temperatureToUpload = val1 / 2.0m;
                        // 값 변경 시 소수점 한 자리로 다시 포맷팅 (정밀도 유지)
                        temperatureToUpload = Math.Truncate(temperatureToUpload * 10) / 10m;
                        // LogTrace($"ProcessOcrResult: 온도 값 조건 만족. 원본: {val1}, 변경: {temperatureToUpload}"); // 필요시 로그 추가
                    }
                    else
                    {
                        // LogTrace($"ProcessOcrResult: 온도 값 조건 불만족. 원본: {val1} 그대로 사용."); // 필요시 로그 추가
                    }
                    // ## 핵심 수정 부분 끝 ##

                    UploadToDatabase(temperatureToUpload, val2); // 수정된 온도 값으로 업로드
                }
                else
                {
                    lblStatus.Text = $"상태: 숫자 변환 오류 (가공 후: {finalPart1String},{finalPart2String} / 원본: {originalPart1},{originalPart2})";
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"ProcessOcrResult 오류: {ex.Message}";
                // LogTrace($"!!!!! ProcessOcrResult 에서 예외 발생 !!!!!\n{ex}"); // 필요시 로그 추가
            }
        }
주요 변경점:

ProcessOcrResult 함수 내에서, FormatTemperatureHumidityValue를 통해 얻은 첫 번째 숫자 값(val1, 온도로 간주)을 temperatureToUpload 변수에 우선 할당합니다.
if (val1 >= 40.0m && val1 < 50.0m) 조건을 사용하여 val1이 40.0도 이상 50.0도 미만인지 확인합니다.
m 접미사는 decimal 타입을 명시합니다.
조건이 참이면, temperatureToUpload = val1 / 2.0m;을 실행하여 값을 절반으로 만듭니다.
나누기 연산 후 소수점 정밀도를 유지하기 위해 temperatureToUpload = Math.Truncate(temperatureToUpload * 10) / 10m; 로 다시 한번 소수점 한 자리로 잘라줍니다.