행이 표시되지만 배경색 연산에서만 제외되도록 구현하겠습니다.

즉, 체크된 행은 여전히 테이블에 표시되지만 배경색을 계산할 때는 무시합니다. 아래는 이를 구현한 코드입니다.

HTML 및 JavaScript 코드
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conditional Background Exclusion</title>
    <style>
        table {
            width: 80%;
            border-collapse: collapse;
            margin: 20px auto;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: center;
        }
        tr.excluded {
            background-color: lightgray; /* 체크된 행을 시각적으로 구분 */
        }
        tr.red {
            background-color: red;
        }
        tr.black {
            background-color: black;
        }
    </style>
</head>
<body>
    <h1>Exclude Checked Rows from Background Calculations</h1>
    <table id="data-table">
        <thead>
            <tr>
                <th>Select</th>
                <th>Line</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be dynamically added here -->
        </tbody>
    </table>

    <script>
        const rowData = [
            { Line: 'Line1', Value: 50 },
            { Line: 'Line2', Value: 120 },
            { Line: 'Line3', Value: 80 },
            { Line: 'Line4', Value: 200 }
        ];

        // 체크박스 상태를 로컬 스토리지에 저장
        function saveCheckboxState() {
            const rows = document.querySelectorAll('#data-table tbody tr');
            const checkboxState = {};

            rows.forEach(row => {
                const checkbox = row.querySelector('.row-checkbox');
                const line = row.cells[1].textContent; // Line 열 데이터 가져오기
                checkboxState[line] = checkbox.checked;
            });

            localStorage.setItem('checkboxState', JSON.stringify(checkboxState));
        }

        // 로컬 스토리지에서 체크박스 상태를 로드
        function loadCheckboxState() {
            const checkboxState = JSON.parse(localStorage.getItem('checkboxState')) || {};
            return checkboxState;
        }

        // 테이블 데이터를 로드하고 체크박스를 가장 앞에 추가
        function loadTableData() {
            const tableBody = document.getElementById('data-table').querySelector('tbody');
            tableBody.innerHTML = ''; // 기존 내용을 초기화
            const checkboxState = loadCheckboxState();

            rowData.forEach(item => {
                // 행 추가
                const row = document.createElement('tr');

                // 체크박스 상태 로드
                const isChecked = checkboxState[item.Line] || false;

                // innerHTML로 체크박스와 데이터 추가
                row.innerHTML = `
                    <td><input type="checkbox" class="row-checkbox" ${isChecked ? 'checked' : ''}></td>
                    <td>${item.Line}</td>
                    <td>${item.Value}</td>
                `;

                tableBody.appendChild(row);

                // 체크된 상태면 excluded 클래스를 추가
                if (isChecked) {
                    row.classList.add('excluded');
                }
            });

            // 체크박스 이벤트 등록
            document.querySelectorAll('.row-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', () => {
                    saveCheckboxState();
                    updateBackground();
                });
            });
        }

        // 배경색 업데이트 (체크된 항목은 제외)
        function updateBackground() {
            const rows = document.querySelectorAll('#data-table tbody tr');

            rows.forEach(row => {
                const checkbox = row.querySelector('.row-checkbox');
                const value = parseInt(row.cells[2].textContent); // Value 열 데이터 가져오기

                // 배경색 계산 전 초기화
                row.classList.remove('red', 'black');

                // 체크된 항목은 배경색 계산에서 제외
                if (checkbox.checked) {
                    row.classList.add('excluded');
                    return;
                }

                // 배경색 설정
                if (value >= 100) {
                    row.classList.add('red');
                } else {
                    row.classList.add('black');
                }
            });
        }

        // 데이터 로드 및 초기화
        loadTableData();
        updateBackground();
    </script>
</body>
</html>
코드 설명
체크박스 상태 저장 및 로드:

saveCheckboxState: 체크박스 상태를 로컬 스토리지에 저장합니다.
loadCheckboxState: 로컬 스토리지에서 체크박스 상태를 불러옵니다.
테이블 데이터 로드:

loadTableData 함수는 rowData를 기반으로 테이블 행을 생성합니다.
체크박스가 체크된 경우 excluded 클래스를 추가해 시각적으로 구분합니다.
체크박스 변경 시 saveCheckboxState와 updateBackground가 호출됩니다.
배경색 연산 제외:

updateBackground 함수는 각 행을 순회하며 체크박스가 체크된 경우 해당 행을 배경색 연산에서 제외합니다.
체크되지 않은 행에 대해서만 배경색을 계산합니다.
값이 100 이상이면 red 클래스를 추가.
값이 100 미만이면 black 클래스를 추가.
CSS 클래스 관리:

excluded: 체크된 항목을 시각적으로 구분하기 위해 추가됩니다.
red와 black은 배경색 설정을 위해 동적으로 추가/제거됩니다.
주요 동작
체크된 행은 시각적으로 표시되며, excluded 클래스를 사용하여 구분됩니다.
배경색 계산 시 체크된 행은 제외됩니다.
체크박스 상태는 로컬 스토리지에 저장되며, 페이지 새로고침 후에도 상태가 유지됩니다.
이 방식은 체크된 행이 