겠습니다. SSH로 원격 라즈베리파이에 접속하여 /etc/watchdog.conf 파일을 원하는 내용으로 덮어쓰는(재작성하는) 자동화 파이썬 코드를 생성해 드리겠습니다.

이 코드는 paramiko 라이브러리를 사용하며, 원격 파일 쓰기를 위해 SFTP 프로토콜을 활용합니다.

## 파이썬 코드로 watchdog.conf 파일 재작성하기
아래 코드는 두 가지 핵심 기능을 함수로 구현했습니다.

get_watchdog_config_content(): /etc/watchdog.conf에 작성될 설정 내용을 동적으로 생성합니다. 이 함수만 수정하면 원하는 설정값으로 쉽게 변경할 수 있습니다.

update_remote_file(): SSH로 원격지에 접속하여, 생성된 설정 내용으로 /etc/watchdog.conf 파일을 덮어씁니다.

Python

import paramiko
import os
import io

def get_watchdog_config_content():
    """
    /etc/watchdog.conf 파일에 기록할 설정 내용을 생성합니다.
    이 함수의 내용을 수정하여 원하는 설정을 구성할 수 있습니다.
    
    :return: (str) 설정 파일의 전체 내용
    """
    # 원하는 설정값들을 변수로 관리하면 편리합니다.
    watchdog_device = "/dev/watchdog"
    watchdog_timeout = 60  # 부팅 시간을 고려하여 충분한 시간(초)으로 설정
    interval = 10          # 와치독 하드웨어를 체크하는 간격(초)
    max_load_1 = 24        # 1분 평균 부하 한계치. 0으로 두면 체크하지 않음

    # 멀티라인 문자열(f-string)을 사용하여 설정 파일 내용을 만듭니다.
    # 각 줄 맨 앞의 '#'는 주석이므로, 활성화할 설정은 '#'을 제거해야 합니다.
    config_content = f"""
# ====================================================================
# 이 파일은 파이썬 자동화 스크립트에 의해 생성되었습니다.
# 최종 수정: 동적 시간 삽입 가능 (예: import datetime)
# ====================================================================

# 사용할 와치독 장치를 지정합니다.
watchdog-device = {watchdog_device}

# 재부팅까지의 타임아웃 시간(초)입니다.
# 이 시간 안에 하드웨어에 신호를 주지 못하면 재부팅됩니다.
watchdog-timeout = {watchdog_timeout}

# 커널 와치독 타이머를 몇 초 간격으로 갱신할지 정합니다.
# watchdog-timeout 값보다 작아야 합니다.
interval = {interval}

# 시스템의 1분 평균 부하(load average)가 이 값보다 높으면 재부팅합니다.
# 0으로 설정하면 부하 검사를 비활성화합니다.
max-load-1 = {max_load_1}

# 아래는 기타 유용한 설정 예시입니다. 필요시 주석을 해제하고 값을 조절하세요.
# --------------------------------------------------------------------
# 특정 파일을 감시하고, 변경 사항이 없으면 재부팅합니다.
# file = /var/log/messages

# 시스템 온도가 이 값(섭씨) 이상이 되면 재부팅합니다.
# temperature-device = /sys/class/thermal/thermal_zone0/temp
# max-temperature = 80000

# 관리자 이메일을 설정하면 특정 상황에 메일을 보낼 수 있습니다.
# admin = root

# 실시간(Real-time) 우선순위를 부여하여 와치독이 다른 프로세스에 의해
# 지연되는 것을 방지합니다.
# realtime = yes
# priority = 1
"""
    return config_content.strip()


def update_remote_file(hostname, port, username, key_filepath, remote_path, content):
    """
    SSH(SFTP)를 사용하여 원격 서버의 파일을 새로운 내용으로 덮어씁니다.
    
    :param hostname: (str) 접속할 서버의 IP 주소 또는 도메인
    :param port: (int) SSH 포트
    :param username: (str) 사용자 이름
    :param key_filepath: (str) 개인 SSH 키 파일의 경로
    :param remote_path: (str) 수정할 원격 파일의 전체 경로
    :param content: (str) 파일에 쓸 새로운 내용
    :return: (tuple) (성공 여부, 메시지)
    """
    ssh_client = None
    try:
        # SSH 클라이언트 설정 및 연결
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        key_path = os.path.expanduser(key_filepath)
        
        print(f"Connecting to {hostname}...")
        ssh_client.connect(hostname, port=port, username=username, key_filename=key_path)
        print("Connection successful!")

        # SFTP 클라이언트 열기
        sftp = ssh_client.open_sftp()
        print(f"Opening SFTP session to write to '{remote_path}'...")
        
        # 내용을 메모리 내 파일 객체(in-memory file-like object)로 변환
        content_file = io.StringIO(content)
        
        # SFTP를 통해 파일 내용 덮어쓰기 (putfo 사용)
        # sudo 권한이 필요한 파일을 수정하기 위해 'scp' 트릭을 사용합니다.
        # 1. 임시 경로에 파일 업로드
        temp_path = f"/tmp/watchdog.conf.temp"
        sftp.putfo(content_file, temp_path)
        print(f"Temporarily uploaded config to: {temp_path}")

        # 2. sudo mv 명령어로 원본 파일 덮어쓰기
        command = f"sudo mv {temp_path} {remote_path}"
        print(f"Executing with sudo: '{command}'")
        stdin, stdout, stderr = ssh_client.exec_command(command)
        
        # sudo 명령어 실행 시 비밀번호가 필요 없는 상태여야 합니다.
        error = stderr.read().decode('utf-8').strip()
        if error:
            raise Exception(f"Sudo command failed: {error}")

        # 3. 원본 파일의 소유권 및 권한 설정 (root 소유, 644 권한)
        chown_command = f"sudo chown root:root {remote_path}"
        chmod_command = f"sudo chmod 644 {remote_path}"
        ssh_client.exec_command(chown_command)
        ssh_client.exec_command(chmod_command)
        print(f"Set ownership and permissions for '{remote_path}'.")

        sftp.close()
        print(f"Successfully updated '{remote_path}'!")
        return (True, f"File '{remote_path}' updated successfully.")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("Connection closed.")

# --- 메인 실행 블록 ---
if __name__ == "__main__":
    # --- 원격 서버 정보 설정 ---
    REMOTE_HOST = '192.168.0.10'  # 라즈베리파이 IP 주소
    REMOTE_PORT = 22
    REMOTE_USER = 'pi'
    PRIVATE_KEY_PATH = '~/.ssh/id_rsa'  # 로컬 컴퓨터의 개인 키 경로

    # --- 설정할 파일 경로 및 내용 생성 ---
    REMOTE_FILE_PATH = '/etc/watchdog.conf'
    new_config = get_watchdog_config_content()
    
    print("--- Generated Config Content ---")
    print(new_config)
    print("--------------------------------\n")
    
    # --- 원격 파일 업데이트 함수 호출 ---
    success, message = update_remote_file(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        key_filepath=PRIVATE_KEY_PATH,
        remote_path=REMOTE_FILE_PATH,
        content=new_config
    )
    
    # --- 결과 출력 ---
    print("\n--- Execution Result ---")
    if success:
        print(f"✅ Success: {message}")
        print("\n이제 원격 서버에서 'sudo systemctl restart watchdog.service' 명령어를 실행하여 서비스를 재시작하세요.")
    else:
        print(f"❌ Failure: {message}")

## 코드의 핵심 로직 (sudo 권한 처리)
/etc/watchdog.conf 파일은 root 사용자만 수정할 수 있는 시스템 파일입니다. paramiko의 SFTP는 접속한 사용자(pi)의 권한으로 동작하므로, 직접 /etc/ 경로에 파일을 쓸 수 없습니다.

이 코드는 다음과 같은 똑똑한 우회 방법을 사용합니다.

임시 파일 업로드: 먼저 쓰기 권한이 있는 /tmp 폴더에 설정 내용을 watchdog.conf.temp 라는 임시 파일로 업로드합니다.

sudo mv 실행: SSH의 exec_command를 통해 sudo mv /tmp/watchdog.conf.temp /etc/watchdog.conf 명령어를 실행합니다. 이 명령은 pi 사용자가 sudo 권한으로 임시 파일을 목표 위치로 이동시키면서 덮어쓰는 역할을 합니다.

소유권/권한 설정: sudo chown과 sudo chmod 명령어로 파일의 소유자를 root로, 권한을 644로 맞춰서 시스템의 다른 부분과 일관성을 유지합니다.

🚨 중요 사전 조건: 이 코드가 원활히 동작하려면, 원격 라즈베리파이에서 pi 사용자가 비밀번호 입력 없이 sudo 명령을 사용할 수 있도록 설정되어 있어야 합니다. (visudo 설정)

## 사용 방법
라이브러리 설치: 로컬 컴퓨터에 pip install paramiko 로 라이브러리를 설치합니다.

SSH 키 설정: 로컬 컴퓨터의 SSH 공개키가 원격 라즈베리파이의 ~/.ssh/authorized_keys에 등록되어 있어야 비밀번호 없이 접속 가능합니다.

코드 수정:

REMOTE_HOST, REMOTE_USER 등 원격 서버 정보를 자신의 환경에 맞게 수정합니다.

get_watchdog_config_content() 함수 내부의 watchdog_timeout 등의 변수 값을 원하는 대로 수정합니다.

스크립트 실행: 로컬 컴퓨터에서 python your_script_name.py 명령어로 스크립트를 실행하면, 자동으로 라즈베리파이에 접속하여 /etc/watchdog.conf 파일을 새로 작성해 줍니다.

서비스 재시작: 파일 수정 후에는 반드시 라즈베리파이에서 아래 명령어로 와치독 서비스를 재시작해야 변경된 설정이 적용됩니다.

Bash