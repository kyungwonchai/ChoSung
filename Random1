PF 애플리케이션의 전체 코드 구조를 제공하겠습니다.
1. SQL 뷰 및 저장 프로시저

뷰 (자재코드와 모델 조인):

sql

CREATE VIEW ViewMaterialModel AS
SELECT m.모델, m.자재코드, m.반납수량
FROM MaterialCodeTable m
JOIN MainTable t ON m.모델 = t.모델;

저장 프로시저 (데이터 삽입 및 갱신):

sql

CREATE PROCEDURE InsertOrUpdateMainTable
    @날짜 DATE,
    @작업조 CHAR(1),
    @라인 INT,
    -- 다른 필요한 매개변수들
AS
BEGIN
    -- 삽입 또는 갱신 로직 구현
    -- 예: INSERT INTO MainTable (...) VALUES (...);
    -- 또는 UPDATE MainTable SET ... WHERE ...;
END;

2. WPF 애플리케이션 구조
MainViewModel:

csharp

public class MainViewModel {
    public ObservableCollection<MainModel> MainData { get; set; }
    // 추가 필요한 프로퍼티 및 컬렉션

    public MainViewModel() {
        MainData = new ObservableCollection<MainModel>();
        // 초기화 및 데이터 로딩
    }

    // 데이터 추가 및 업데이트 메소드
    public void AddOrUpdateData(MainModel data) {
        // 데이터베이스에 삽입 또는 업데이트
    }
}

MainModel:

csharp

public class MainModel {
    public DateTime 날짜 { get; set; }
    public string 작업조 { get; set; }
    public int 라인 { get; set; }
    // 다른 필요한 프로퍼티들
}

MainWindow.xaml:

xml

<Window ...>
    <Grid>
        <DatePicker Name="datePicker" />
        <ComboBox Name="workGroupComboBox" ItemsSource="{Binding WorkGroups}" />
        <ComboBox Name="lineComboBox" ItemsSource="{Binding Lines}" />
        <!-- 모델 선택을 위한 별도의 창 또는 컨트롤 -->
        <TextBox Name="modelTextBox" />
        <!-- 다른 UI 요소들 -->
    </Grid>
</Window>

위 코드는 기본적인 구조를 제공합니다. 실제로는 이벤트 핸들링, 데이터 바인딩, UI 업데이트 등의 추가 작업이 필요합니다.

예를 들어, 모델을 선택하면 관련 자재코드와 반납수량을 보여주어야 하고, '반납수량' 컬럼은 수동으로 입력한 후 Array * (보드수T + 보드수B)에서 뺀 수량을 '미반납수량'으로 계산하여 UI에 표시해야 합니다.

이러한 세부 사항은 프로젝트의 구체적인 요구사항과 비즈니스 로직에 따라 달라질 수 있으므로, 여기 제시된 코드는 시작점으로 사용하고 프로젝트에 맞게 조정해야 합니다.
