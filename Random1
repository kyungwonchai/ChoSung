요청하신 대로 PortConfigControl.xaml 파일에 각 항목이 무엇인지 라벨을 추가하고, UI를 다시 구성하겠습니다. 또한, MainWindow.xaml과 MainWindow.xaml.cs를 C# 7.3에 맞게 수정하여 제공하며, 스타일 파일을 만들어 전체적으로 하늘색 계열로 통일하고, 주요 컨트롤의 스타일을 공통적으로 적용되게 하겠습니다.

1. PortConfigControl.xaml (수정된 코드)
xml
코드 복사
<UserControl x:Class="ScanValueTrans.PortConfigControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DesignHeight="150" d:DesignWidth="800">
    <Grid>
        <WrapPanel Orientation="Horizontal" Margin="10">

            <!-- 포트 선택 라벨과 콤보박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="Port" HorizontalAlignment="Center"/>
                <ComboBox x:Name="TargetPortComboBox" SelectionChanged="TargetPortComboBox_SelectionChanged"
                          Width="80" Height="30"/>
            </StackPanel>

            <!-- BaudRate 선택 라벨과 콤보박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="BaudRate" HorizontalAlignment="Center"/>
                <ComboBox x:Name="BaudRateComboBox" SelectionChanged="BaudRateComboBox_SelectionChanged"
                          Width="80" Height="30"/>
            </StackPanel>

            <!-- Parity 선택 라벨과 콤보박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="Parity" HorizontalAlignment="Center"/>
                <ComboBox x:Name="ParityComboBox" SelectionChanged="ParityComboBox_SelectionChanged"
                          Width="80" Height="30"/>
            </StackPanel>

            <!-- DataBits 선택 라벨과 콤보박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="DataBits" HorizontalAlignment="Center"/>
                <ComboBox x:Name="DataBitsComboBox" SelectionChanged="DataBitsComboBox_SelectionChanged"
                          Width="80" Height="30"/>
            </StackPanel>

            <!-- StopBits 선택 라벨과 콤보박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="StopBits" HorizontalAlignment="Center"/>
                <ComboBox x:Name="StopBitsComboBox" SelectionChanged="StopBitsComboBox_SelectionChanged"
                          Width="80" Height="30"/>
            </StackPanel>

            <!-- Character 입력 라벨과 텍스트박스 -->
            <StackPanel Orientation="Vertical" Margin="5,0">
                <Label Content="Character" HorizontalAlignment="Center"/>
                <TextBox x:Name="CharacterTextBox" TextChanged="CharacterTextBox_TextChanged"
                         Width="120" Height="30"/>
            </StackPanel>

            <!-- Clear 버튼 -->
            <Button Content="Clear" Width="60" Height="30" Margin="5,0"
                    Click="ClearTargetPortSelection_Click"/>
            
        </WrapPanel>
    </Grid>
</UserControl>
2. MainWindow.xaml (수정된 코드)
xml
코드 복사
<Window x:Class="ScanValueTrans.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Scan Value Trans" Height="450" Width="900"
        Background="{DynamicResource WindowBackgroundBrush}">

    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="IP Address:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <TextBlock x:Name="IpAddressTextBlock" VerticalAlignment="Center"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="10">
            <TextBlock Text="Port:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox x:Name="PortComboBox" Width="120" VerticalAlignment="Center"/>
            <Button Content="Refresh Ports" Width="100" Margin="10,0,0,0" Click="RefreshPorts_Click"/>
        </StackPanel>

        <Grid Grid.Row="2" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <StackPanel>
                <TextBlock Text="Scanner Port:" Margin="0,0,0,10"/>
                <ComboBox x:Name="ScannerPortComboBox" Width="200" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
                <ComboBox x:Name="ScannerBaudRateComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerParityComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerDataBitsComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerStopBitsComboBox" Width="200" Margin="0,10,0,0"/>
            </StackPanel>

            <StackPanel Grid.Column="1" HorizontalAlignment="Left" Margin="20,0,0,0">
                <TextBlock Text="Target Ports:" Margin="0,0,0,10"/>
                <local:PortConfigControl x:Name="TargetPortConfig1" Width="800" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig2" Width="800" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig3" Width="800" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig4" Width="800" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig5" Width="800" Margin="0,10,0,0"/>
            </StackPanel>
        </Grid>

        <ListBox x:Name="LogListBox" Grid.Row="3" Margin="10"/>
        <Image x:Name="QrCodeImage" Grid.Row="4" Height="150" Margin="10"/>
    </Grid>
</Window>
3. Styles.xaml (새롭게 추가된 스타일 파일)
xml
코드 복사
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 기본 윈도우 배경색 설정 -->
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#E0F7FA"/>

    <!-- ComboBox 스타일 -->
    <Style TargetType="ComboBox">
        <Setter Property="BorderBrush" Value="#0288D1"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="#B3E5FC"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="5"/>
    </Style>

    <!-- TextBox 스타일 -->
    <Style TargetType="TextBox">
        <Setter Property="BorderBrush" Value="#0288D1"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="#B3E5FC"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="5"/>
    </Style>

    <!-- Button 스타일 -->
    <Style TargetType="Button">
        <Setter Property="BorderBrush" Value="#0288D1"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Background" Value="#4FC3F7"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Margin" Value="5"/>
    </Style>

</ResourceDictionary>
4. MainWindow.xaml.cs (필요한 수정 부분만)
csharp
코드 복사
// MainWindow.xaml.cs 수정된 부분

using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        // 메인 윈도우 초기화 메서드
        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        // 주요 초기화 작업 및 로직은 이전과 동일합니다.
    }
}
주요 변경 사항:
라벨 추가: PortConfigControl에 각 콤보박스와 텍스트박스가 무엇을 나타내는지 설명하는 라벨을 추가했습니다.

UI 요소의 배치: WrapPanel을 사용해 각 UI 요소가 적절하게 배치되도록 수정했으며, StackPanel을 이용해 각 항목과 그에 따른 라벨을 그룹화했습니다.

스타일 적용: 모든 주요 UI 요소(ComboBox, TextBox, Button)에 대해 하늘색 계열의 테두리와 배경색을 적용하는 스타일을 정의했습니다. 이 스타일은 Styles.xaml에 작성되어 있으며, 이를 모든 윈도우와 유저 컨트롤에 공통으로 적용했습니다.

배경색과 톤 통일: 전체 윈도우의 배경색을 하늘색 계열로 통일했습니다.

이제 UI가 깔끔하고 일관성 있게 스타일링되었으며, 요청하신 모든 기능과 요소가 추가되