네, 그럼요! 오히려 훨씬 더 좋은 선택입니다.

우분투(Ubuntu)는 웹 서버로 가장 많이 사용되는 운영체제 중 하나이며, C# ASP.NET보다 훨씬 더 쉽고 빠르게 API 서버를 만들 수 있는 방법이 많습니다. Node.js나 Python을 사용하는 것이 일반적이고 자료도 훨씬 많습니다.

여기서는 가장 대중적이고 배우기 쉬운 **Node.js (Express 프레임워크)**를 사용하여 우분투에 API 서버를 구축하는 방법을 상세히 안내해 드리겠습니다.

## 1. 우분투(Ubuntu) 서버 준비
먼저 우분투 서버에 접속해서, API 서버를 실행하는 데 필요한 Node.js를 설치해야 합니다.

우분투 터미널에서 아래 명령어를 순서대로 입력하세요.

Bash

# 1. 패키지 목록 업데이트
sudo apt update

# 2. Node.js 및 npm(노드 패키지 관리자) 설치
sudo apt install nodejs npm -y

# 3. 설치 확인 (버전 정보가 나오면 성공)
node -v
npm -v
## 2. API 서버 프로젝트 생성 및 코드 작성
이제 조도 값을 받아서 MSSQL에 저장하는 API 코드를 작성합니다.

우분투 터미널에서 아래 작업을 순서대로 진행하세요.

1. 프로젝트 폴더 생성 및 이동

Bash

# 'light-api' 라는 이름의 폴더를 만들고 그 안으로 들어갑니다.
mkdir light-api
cd light-api
2. Node.js 프로젝트 시작 및 라이브러리 설치

Bash

# package.json 파일을 생성합니다. (모든 질문에 그냥 Enter를 누르세요)
npm init -y

# API 서버(Express)와 MSSQL 연결에 필요한 라이브러리를 설치합니다.
npm install express mssql
3. API 서버 코드 작성 (server.js)

nano 편집기를 사용해 server.js 파일을 만들고 아래 코드를 그대로 붙여넣으세요.

Bash

# server.js 파일 생성 및 편집기 열기
nano server.js
[아래 코드를 복사해서 터미널에 붙여넣기]

JavaScript

const express = require('express');
const sql = require('mssql');

const app = express();
app.use(express.json()); // 앱이 JSON 형태의 데이터를 받을 수 있게 설정

// --- ★★★ MSSQL 데이터베이스 연결 정보 (사용자 환경에 맞게 수정하세요!) ★★★ ---
const dbConfig = {
    user: '사용자ID',
    password: '비밀번호',
    server: '내서버IP', // MSSQL 서버 IP 주소
    database: '데이터베이스이름',
    options: {
        encrypt: false, // Azure SQL이 아닌 경우 false로 설정
        trustServerCertificate: true // 로컬 또는 사설망의 경우 true로 설정
    }
};
// -------------------------------------------------------------------------

// 안드로이드 앱에서 호출할 주소: http://우분투서버IP:3000/log
app.post('/log', async (req, res) => {
    const { lux } = req.body; // 앱에서 보낸 lux 값을 받음

    if (lux === undefined) {
        return res.status(400).send('lux 값이 없습니다.');
    }

    try {
        // DB 연결
        await sql.connect(dbConfig);
        
        // SQL 쿼리 실행
        const request = new sql.Request();
        request.input('LuxValue', sql.Float, lux);
        await request.query('INSERT INTO LightLog (LuxValue) VALUES (@LuxValue)');
        
        console.log(`데이터 저장 성공: ${lux} lux`);
        res.status(200).send('데이터 저장 성공');

    } catch (err) {
        console.error('DB 오류:', err);
        res.status(500).send('서버 오류 발생');
    } finally {
        // 연결 종료
        sql.close();
    }
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`API 서버가 ${PORT}번 포트에서 실행 중입니다.`);
});
[붙여넣기 후 저장 및 종료]

Ctrl + X 키를 누릅니다.

Y 키를 누릅니다.

Enter 키를 누릅니다.

## 3. API 서버 실행
이제 만든 API 서버를 실행할 차례입니다.

우분투 터미널에서 아래 명령어를 입력하세요.

Bash

node server.js
"API 서버가 3000번 포트에서 실행 중입니다." 라는 메시지가 나오면 성공입니다.

## 4. 안드로이드 앱 최종 수정
마지막으로, 안드로이드 앱이 C# 서버가 아닌 새로 만든 우분투 서버를 바라보도록 MainActivity.kt 파일의 주소만 수정하면 됩니다.

파일 위치: app > src > main > java > com.sec.lightmeter > MainActivity.kt

수정할 부분: setupNetwork() 함수 안의 .baseUrl()

Kotlin

// ... 기존 코드 ...
private fun setupNetwork() {
    val retrofit = Retrofit.Builder()
        // ★★반드시 사용자님의 '우분투 서버 IP' 주소와 포트번호 '3000'으로 변경하세요!★★
        .baseUrl("http://여기에-사용자-우분투-서버-IP주소:3000/") 
        .addConverterFactory(GsonConverterFactory.create())
        .build()

    apiService = retrofit.create(ApiService::class.java)
}

// ... 기존 코드 ...
// ApiService 인터페이스의 @POST 주소도 수정해야 합니다.
interface ApiService {
    // HTTP POST 방식으로 "log" 경로에 데이터를 보냄
    @POST("log")
    fun postLightValue(@Body data: LightData): Call<String>
}