gnalR의 연결 상태를 항상 화면에 표시하도록 구현하려면, 연결 상태가 변경될 때마다 상태를 업데이트하도록 TextView를 지속적으로 관리하는 방식으로 코드를 수정해야 합니다. SignalR의 연결 상태가 변경될 때마다 이를 반영하여 화면에 표시하도록 설정하겠습니다.

수정된 코드
수정할 함수는 updateConnectionStatus와 startConnection, retryConnection 함수입니다. 연결 상태가 변경될 때마다 updateConnectionStatus 함수를 호출하여 TextView에 상태를 업데이트합니다.

MainActivity.kt
kotlin
코드 복사
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import com.microsoft.signalr.HubConnectionState
import kotlinx.coroutines.*

class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var connectionStatusTextView: TextView
    private lateinit var recyclerView: RecyclerView
    private var reconnectJob: Job? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // TextView와 RecyclerView 초기화
        connectionStatusTextView = findViewById(R.id.connectionStatusTextView)
        recyclerView = findViewById(R.id.recyclerView)

        setupRecyclerView()
        initializeSignalR()
    }

    private fun setupRecyclerView() {
        // RecyclerView 설정
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL))

        // 예제 데이터 설정
        val dataList = listOf(
            TableData("Column1", "Column2", "Column3", "Column4"),
            TableData("Data1", "Data2", "Data3", "Data4")
        )

        val adapter = TableAdapter(dataList)
        recyclerView.adapter = adapter
    }

    private fun initializeSignalR() {
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        hubConnection.on("ReceiveMessage", { message: String ->
            Log.d("SignalR", "Message received: $message")
            // 수신된 메시지에 따라 표를 업데이트하거나 다른 작업 수행
        }, String::class.java)

        startConnection()
    }

    private fun startConnection() {
        updateConnectionStatus("연결 시도 중...", "#FFA500") // 주황색

        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            try {
                hubConnection.start().blockingAwait()
                updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                reconnectJob?.cancel()
            } catch (e: Exception) {
                Log.e("SignalR", "Connection failed, retrying...", e)
                updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                retryConnection()
            }
        }

        hubConnection.onClosed {
            Log.e("SignalR", "Connection closed, retrying...")
            updateConnectionStatus("SignalR 연결 끊김 - 재시도 중...", "#FF0000") // 빨간색
            retryConnection()
        }
    }

    private fun retryConnection() {
        reconnectJob?.cancel()
        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            while (hubConnection.connectionState != HubConnectionState.CONNECTED) {
                try {
                    delay(2000) // 2초 대기 후 재연결 시도
                    hubConnection.start().blockingAwait()
                    updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                } catch (e: Exception) {
                    Log.e("SignalR", "Reconnection attempt failed", e)
                    updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                }
            }
        }
    }

    // 연결 상태를 업데이트하는 함수
    private fun updateConnectionStatus(status: String, color: String) {
        runOnUiThread {
            connectionStatusTextView.text = status
            connectionStatusTextView.setTextColor(android.graphics.Color.parseColor(color))
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        reconnectJob?.cancel()
        hubConnection.stop()
    }
}
수정된 함수
updateConnectionStatus 함수:

이 함수는 TextView에 연결 상태를 업데이트하는 함수입니다.
상태 텍스트(status)와 텍스트 색상(color)을 파라미터로 받아 TextView의 내용을 변경합니다.
이 함수는 메인(UI) 스레드에서 실행되도록 runOnUiThread를 사용합니다.
startConnection 함수:

SignalR 연결을 시도하고, 연결 성공 또는 실패에 따라 updateConnectionStatus를 호출하여 연결 상태를 업데이트합니다.
hubConnection.onClosed 이벤트를 설정하여 연결이 끊어질 때 retryConnection을 호출하고, 연결 상태를 업데이트합니다.
retryConnection 함수:

연결이 끊어졌을 때 2초마다 재연결을 시도하며, 재연결 시도 결과에 따라 연결 상태를 업데이트합니다.
결과
이제 SignalR의 연결 상태가 항상 화면 하단에 표시됩니다:

연결 시도 중: "SignalR 연결 시도 중..." (주황색)
연결 성공: "SignalR 연결됨" (녹색)
연결 실패: "SignalR 연결 실패 - 재시도 중..." (빨간색)