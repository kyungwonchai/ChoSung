, 원격 우분투 폴더를 압축해서 백업하는 것은 매우 효율적이고 일반적인 방법입니다. 질문하신 "넷드라이브를 연결해서 백업한다"는 개념은 우분투 서버에 원격 저장소(클라우드, NAS 등)를 로컬 폴더처럼 연결(마운트)하고, 그곳에 압축 파일을 바로 생성하거나 복사하는 방식으로 구현할 수 있습니다.

우분투에서는 넷드라이브(주로 Windows/macOS용) 대신 rclone 이라는 강력한 도구를 사용하는 것이 훨씬 일반적이고 안정적입니다. rclone은 "클라우드 저장소를 위한 rsync"라고 불리며, S3, Google Drive, Dropbox, FTP, SFTP 등 수많은 저장소를 지원합니다.

rclone을 이용한 자동 압축 백업 방법 (가장 추천)
이 방법은 스크립트 하나만 만들어두면 터미널 명령어 한 줄로, 또는 자동으로 백업을 실행할 수 있어 매우 편리합니다.

1. rclone 설치 및 원격 저장소 설정
먼저 우분투 서버에 rclone을 설치하고 백업 파일을 저장할 원격 저장소를 연결합니다.

Bash

# rclone 설치
sudo apt update
sudo apt install rclone

# rclone 설정 시작 (대화형으로 진행됨)
rclone config
rclone config를 실행하면 어떤 종류의 저장소를 연결할지 묻는 메뉴가 나옵니다. 사용하시는 저장소(예: SFTP, Google Drive 등)를 선택하고 안내에 따라 이름, 계정 정보 등을 입력하면 설정이 완료됩니다. 여기서는 원격 저장소의 이름을 myRemote라고 가정하겠습니다.

2. 백업 스크립트 작성
이제 실제 백업을 수행하는 셸 스크립트를 작성합니다.

Bash

# nano 에디터로 backup.sh 파일 생성
nano backup.sh
아래 내용을 backup.sh 파일에 복사하여 붙여넣고, 굵은 글씨 부분을 자신의 환경에 맞게 수정하세요.

Shell

#!/bin/bash

# ================= 설정 =================
# 1. 백업할 로컬 폴더 경로
SOURCE_DIR="**/home/ubuntu/my_project**"

# 2. rclone으로 설정한 원격 저장소 이름 및 백업 폴더 경로
REMOTE_DIR="**myRemote:backup/project**"

# 3. 임시로 압축 파일을 저장할 로컬 경로
TEMP_DIR="**/tmp**"
# ======================================

# 백업 파일 이름에 날짜와 시간을 포함 (예: backup-20250920_150200.tar.gz)
BACKUP_FILENAME="backup-$(date +%Y%m%d_%H%M%S).tar.gz"

# 임시 압축 파일의 전체 경로
TEMP_FILE_PATH="$TEMP_DIR/$BACKUP_FILENAME"

echo "백업 시작: $SOURCE_DIR"

# 1. 지정된 폴더를 tar.gz로 압축하여 임시 경로에 생성
# -c: 새 아카이브 생성
# -z: gzip으로 압축
# -f: 파일 이름 지정
tar -czf "$TEMP_FILE_PATH" -C "$(dirname "$SOURCE_DIR")" "$(basename "$SOURCE_DIR")"

# 압축 성공 여부 확인
if [ $? -eq 0 ]; then
  echo "압축 성공: $TEMP_FILE_PATH"

  # 2. 생성된 압축 파일을 rclone을 이용해 원격 저장소로 복사
  echo "원격 저장소로 업로드 시작: $REMOTE_DIR"
  rclone copy "$TEMP_FILE_PATH" "$REMOTE_DIR"

  # 업로드 성공 여부 확인
  if [ $? -eq 0 ]; then
    echo "✅ 업로드 성공!"
  else
    echo "❌ 업로드 실패."
  fi

  # 3. 로컬에 생성했던 임시 압축 파일 삭제
  rm "$TEMP_FILE_PATH"
  echo "임시 파일 삭제 완료."

else
  echo "❌ 압축 실패."
fi

echo "백업 프로세스 종료."
3. 스크립트 실행 권한 부여 및 실행
스크립트를 실행할 수 있도록 권한을 주고, 직접 실행하여 백업이 잘 되는지 테스트합니다.

Bash

# 실행 권한 부여
chmod +x backup.sh

# 스크립트 실행
./backup.sh
이제 이 스크립트를 실행할 때마다 지정한 폴더가 압축되어 원격 저장소에 자동으로 백업됩니다.

추가 팁: cron을 이용한 자동화 🗓️
매번 직접 실행하는 것이 번거롭다면 cron을 사용하여 백업을 자동화할 수 있습니다. 예를 들어 매일 새벽 3시에 백업을 실행하도록 설정할 수 있습니다.

Crontab 편집기 열기

Bash

crontab -e
스케줄 추가
편집기 맨 아래에 다음 라인을 추가하고 저장합니다. (스크립트의 절대 경로를 사용해야 합니다.)

코드 스니펫

# 매일 새벽 3시에 백업 스크립트 실행
0 3 * * * /home/ubuntu/backup.sh > /home/ubuntu/backup.log 2>&1
/home/ubuntu/backup.sh: 방금 작성한 백업 스크립트의 전체 경로

> /home/ubuntu/backup.log 2>&1: 백업 실행 시 발생하는 모든 메시지를 로그 파일로 저장하여 나중에 확인하기 위함입니다.