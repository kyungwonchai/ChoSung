 알겠습니다. 코드가 길어지면 일부만 수정할 경우 혼란스러울 수 있습니다.

요청하신 모든 기능(PC이름, MySQL 연동, 최소화 오류 방지 등)이 포함된 MainWindow.xaml.cs 파일의 전체 최종 코드를 아래에 드리겠습니다.

다른 코드와 섞지 마시고, 기존 MainWindow.xaml.cs 파일의 모든 내용을 지운 후 아래 코드로 완전히 교체하세요.

## 최종 MainWindow.xaml.cs 전체 코드
C#

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using Tesseract;
using funcenvget.Properties;
using System.Drawing;
using System.Drawing.Imaging;
using MySql.Data.MySqlClient; // MySQL Connector 사용

namespace funcenvget
{
    public partial class MainWindow : Window
    {
        // WinAPI 함수 선언
        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private DispatcherTimer timer;
        private TesseractEngine ocrEngine;

        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }

        private void InitializeApp()
        {
            ocrEngine = new TesseractEngine("./tessdata", "eng", EngineMode.Default);
            ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-");

            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(10);
            timer.Tick += Timer_Tick;
        }

        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
            if (hWnd == IntPtr.Zero)
            {
                MessageBox.Show("먼저 유효한 '대상 창 제목'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);

            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();

            if (selectionWindow.ShowDialog() == true)
            {
                System.Windows.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                UpdatePreviewImage();
            }

            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero) return;

                if (IsIconic(hWnd))
                {
                    MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    imgPreview.Source = null;
                    return;
                }

                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Graphics.FromImage(bmp))
                    {
                        PrintWindow(hWnd, g.GetHdc(), 2);
                        g.ReleaseHdc();
                    }
                    var cropArea = new System.Drawing.Rectangle(
                        int.Parse(txtX.Text), int.Parse(txtY.Text),
                        int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));

                    if (cropArea.Width <= 0 || cropArea.Height <= 0 || cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height)
                    {
                        imgPreview.Source = null;
                        return;
                    }

                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        imgPreview.Source = BitmapToImageSource(croppedBmp);
                        string previewPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "preview_capture.png");
                        croppedBmp.Save(previewPath, System.Drawing.Imaging.ImageFormat.Png);
                        Settings.Default.PreviewImagePath = previewPath;
                    }
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"미리보기 생성 오류: {ex.Message}";
                imgPreview.Source = null;
            }
        }

        BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
                memory.Position = 0;
                BitmapImage bitmapimage = new BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled)
            {
                timer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 로깅이 중지되었습니다.";
            }
            else
            {
                if (string.IsNullOrWhiteSpace(txtPcName.Text) ||
                    string.IsNullOrWhiteSpace(txtWindowTitle.Text) ||
                    string.IsNullOrWhiteSpace(txtDbServer.Text) ||
                    (int.TryParse(txtWidth.Text, out int w) && w <= 0) ||
                    (int.TryParse(txtHeight.Text, out int h) && h <= 0))
                {
                    MessageBox.Show("PC이름, 대상 창 제목, DB서버, 캡처 영역을 모두 올바르게 설정해주세요.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            PerformLogging();
        }

        private void PerformLogging()
        {
            try
            {
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창을 찾을 수 없습니다.";
                    return;
                }

                if (IsIconic(hWnd))
                {
                    lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다.";
                    return;
                }

                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Graphics.FromImage(bmp))
                    {
                        PrintWindow(hWnd, g.GetHdc(), 2);
                        g.ReleaseHdc();
                    }
                    var cropArea = new System.Drawing.Rectangle(
                        int.Parse(txtX.Text), int.Parse(txtY.Text),
                        int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        using (var page = ocrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            if (!string.IsNullOrWhiteSpace(rawText))
                            {
                                ProcessOcrResult(rawText);
                            }
                            else
                            {
                                lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다.";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"상태: 캡처 중 심각한 오류 발생! {ex.Message}";
            }
        }

        private void ProcessOcrResult(string rawText)
        {
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);

            if (parts.Length != 2)
            {
                lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)";
                return;
            }

            if (decimal.TryParse(parts[0], out decimal val1) && decimal.TryParse(parts[1], out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                UploadToDatabase(temp, humid);
            }
            else
            {
                lblStatus.Text = $"상태: 숫자 변환 오류 ({parts[0]},{parts[1]})";
            }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName))
            {
                lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다.";
                return;
            }

            string connectionString = $"Server={txtDbServer.Text};Port={txtDbPort.Text};Database={txtDbName.Text};Uid={txtDbUser.Text};Pwd={txtDbPassword.Password};";
            MySqlConnection conn = null;
            MySqlTransaction trans = null;

            try
            {
                conn = new MySqlConnection(connectionString);
                conn.Open();
                trans = conn.BeginTransaction();

                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;

                    cmd.CommandText = "INSERT INTO smd.repair_func_now (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW()) " +
                                      "ON DUPLICATE KEY UPDATE temp1 = @temp1, humid1 = @humid1, stdtime = NOW();";

                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    cmd.ExecuteNonQuery();
                }

                trans.Commit();
                lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!";
            }
            catch (Exception ex)
            {
                try { trans?.Rollback(); } catch { }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                conn?.Close();
            }
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            txtWindowTitle.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();

            txtPcName.Text = Settings.Default.PcName;
            txtDbServer.Text = Settings.Default.DbServer;
            txtDbPort.Text = Settings.Default.DbPort;
            txtDbUser.Text = Settings.Default.DbUser;
            txtDbName.Text = Settings.Default.DbName;

            if (!string.IsNullOrEmpty(Settings.Default.PreviewImagePath) && File.Exists(Settings.Default.PreviewImagePath))
            {
                try
                {
                    BitmapImage preview = new BitmapImage();
                    preview.BeginInit();
                    preview.UriSource = new Uri(Settings.Default.PreviewImagePath);
                    preview.CacheOption = BitmapCacheOption.OnLoad;
                    preview.EndInit();
                    imgPreview.Source = preview;
                }
                catch { /* 이미지 로드 실패 시 무시 */ }
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            if (ocrEngine != null) ocrEngine.Dispose();
            if (timer != null) timer.Stop();

            Settings.Default.WindowTitle = txtWindowTitle.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.DbServer = txtDbServer.Text;
            Settings.Default.DbPort = txtDbPort.Text;
            Settings.Default.DbUser = txtDbUser.Text;
            Settings.Default.DbName = txtDbName.Text;
            
            Settings.Default.Save();
        }
    }
}
이 코드를 사용하시기 전에, 이전 답변에서 안내해 드린 아래 준비사항들이 모두 완료되었는지 다시 한번 확인해주세요.

NuGet 패키지 설치: MySql.Data
프로젝트 설정: Settings.settings 파일에 PcName, DbServer 등 필요한 항목 추가
XAML 코드: MainWindow.xaml 파일에 PC 이름, DB 접속 정보 UI 추가