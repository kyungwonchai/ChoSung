 이벤트 핸들러가 linkToRemove에 대해 잘못된 참조를 유지하고 있기 때문일 가능성이 큽니다. 한 번 이벤트가 생성된 후, linkToRemove가 바뀌지 않고, 첫 번째 우클릭한 값만 참조하게 되어 나머지 항목이 삭제되지 않는 것입니다.

이를 해결하기 위해, 우클릭할 때마다 linkToRemove가 올바른 값을 참조하도록 수정하겠습니다. 우클릭 시 linkToRemove를 캡처하는 방식이 아닌, 클릭할 때마다 해당 값을 전달하여 항상 최신의 값을 참조하도록 수정하겠습니다.

수정된 코드
CreateRemoveFromMyMenuCommand를 호출할 때마다 linkToRemove의 현재 상태를 정확하게 전달하고, 이를 바탕으로 항목을 삭제할 수 있도록 수정했습니다.

csharp
코드 복사
using System.Diagnostics;

// RibbonControl의 컨텍스트 메뉴를 열 때 발생하는 이벤트 핸들러
private void ribbonControl_ShowCustomizationMenu(object sender, DevExpress.XtraBars.Ribbon.RibbonCustomizationMenuEventArgs e)
{
    // 클릭된 링크를 캡처
    BarItemLink clickedLink = e.Link;
    if (clickedLink == null)
    {
        Debug.WriteLine("[ERROR] 클릭된 링크가 null입니다.");
        return;
    }

    Debug.WriteLine($"[DEBUG] 클릭된 항목 캡션: '{clickedLink.Item.Caption}'");

    // "MyMenu에 추가"와 "MyMenu에서 삭제" 명령을 동적으로 처리
    BarItemLink menuAddToMyMenu = e.CustomizationMenu.ItemLinks
        .Where(link => link.Caption == "MyMenu에 추가").FirstOrDefault();
    BarItemLink menuRemoveFromMyMenu = e.CustomizationMenu.ItemLinks
        .Where(link => link.Caption == "MyMenu에서 삭제").FirstOrDefault();

    // MyMenu에 있는 항목을 우클릭하면 "MyMenu에서 삭제"만 보이도록 설정
    if (clickedLink != null && myMenuPage.Groups.Any(group => group.ItemLinks.Contains(clickedLink)))
    {
        if (menuAddToMyMenu != null)
        {
            e.CustomizationMenu.ItemLinks.Remove(menuAddToMyMenu);
        }

        // "MyMenu에서 삭제" 명령이 없으면 추가
        if (menuRemoveFromMyMenu == null)
        {
            menuRemoveFromMyMenu = e.CustomizationMenu.AddItem(CreateRemoveFromMyMenuCommand(clickedLink));
            menuRemoveFromMyMenu.BeginGroup = true;
        }
    }
    else
    {
        // MyMenu 외부에서 우클릭하면 "MyMenu에서 삭제" 항목은 제거하고 "MyMenu에 추가"만 보이도록 설정
        if (menuRemoveFromMyMenu != null)
        {
            e.CustomizationMenu.ItemLinks.Remove(menuRemoveFromMyMenu);
        }

        // "MyMenu에 추가" 명령이 없으면 추가
        if (menuAddToMyMenu == null)
        {
            menuAddToMyMenu = e.CustomizationMenu.AddItem(GetAddToMyMenuCommand());
            menuAddToMyMenu.BeginGroup = true;
        }
    }
}

// "MyMenu에서 삭제" 명령을 정의하고 반환하는 메서드
BarItem CreateRemoveFromMyMenuCommand(BarItemLink linkToRemove)
{
    // 새 BarButtonItem("MyMenu에서 삭제") 생성
    BarButtonItem removeButton = new BarButtonItem();
    removeButton.Caption = "MyMenu에서 삭제"; // 버튼 제목 설정

    // "MyMenu에서 삭제" 명령이 클릭되었을 때 호출되는 이벤트 핸들러 등록
    removeButton.ItemClick += (sender, e) =>
    {
        // 클릭된 항목의 부모 그룹을 찾아서 삭제 시도
        var parentGroup = myMenuPage.Groups.FirstOrDefault(group => group.ItemLinks.Contains(linkToRemove));

        if (parentGroup != null)
        {
            Debug.WriteLine($"[DEBUG] 그룹 '{parentGroup.Text}'에서 항목을 삭제 시도");

            // 그룹에서 해당 아이템이 있는지 확인하고 삭제
            if (parentGroup.ItemLinks.Contains(linkToRemove))
            {
                parentGroup.ItemLinks.Remove(linkToRemove);
                Debug.WriteLine($"[DEBUG] 항목이 그룹 '{parentGroup.Text}'에서 삭제되었습니다.");

                // 그룹에 다른 아이템이 없으면 그룹도 제거
                if (parentGroup.ItemLinks.Count == 0)
                {
                    Debug.WriteLine($"[DEBUG] 그룹 '{parentGroup.Text}'가 삭제될 예정입니다.");

                    // 페이지에서 그룹 제거
                    myMenuPage.Groups.Remove(parentGroup);
                    Debug.WriteLine($"[DEBUG] 그룹 '{parentGroup.Text}'가 삭제되었습니다.");
                }
                else
                {
                    Debug.WriteLine($"[DEBUG] 그룹 '{parentGroup.Text}'에 남은 항목 수: {parentGroup.ItemLinks.Count}");
                }

                // 전체 그룹 및 항목 수 출력
                Debug.WriteLine($"[DEBUG] MyMenu에 남은 그룹 수: {myMenuPage.Groups.Count}");
            }
            else
            {
                Debug.WriteLine($"[ERROR] 항목이 그룹 '{parentGroup.Text}'에 존재하지 않습니다.");
            }
        }
        else
        {
            Debug.WriteLine($"[ERROR] 클릭한 항목의 부모 그룹을 찾을 수 없습니다.");
        }

        // MyMenu 항목 저장
        SaveMyMenuItems();
    };

    // 리본 컨트롤에 명령 추가
    ribbonControl1.Items.Add(removeButton);

    return removeButton;
}

// MyMenu 단일 그룹 초기화
private void InitializeMyMenu()
{
    // MyMenu 페이지가 없으면 생성
    if (myMenuPage == null)
    {
        myMenuPage = new RibbonPage("MyMenu");
        ribbonControl1.Pages.Add(myMenuPage);
    }
}
주요 수정 사항:
clickedLink 캡처 및 전달:

ribbonControl_ShowCustomizationMenu에서 클릭된 링크(clickedLink)를 캡처하고, CreateRemoveFromMyMenuCommand 호출 시마다 전달하도록 수정했습니다. 이렇게 하면 우클릭 시점의 값을 정확히 참조할 수 있습니다.
CreateRemoveFromMyMenuCommand 호출 시마다 값 전달:

삭제 명령이 생성될 때마다 linkToRemove가 항상 최신의 값을 유지하도록, 우클릭 시의 링크를 전달하는 방식을 사용했습니다.
테스트 및 결과 확인 방법:
이제 각 항목을 우클릭할 때마다 최신의 값을 참조하므로, 디버그 콘솔에서 [DEBUG] 로그를 통해 클릭된 항목의 부모 그룹이 올바르게 참조되고, 삭제가 정확히 이루어지는지 확인할 수 있습니다.