using LockerManagementApp.Data;
using LockerManagementApp.ViewModels;
using LockerManagementApp.Views;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration; // IConfiguration 사용
using Microsoft.Extensions.DependencyInjection; // IServiceCollection, ServiceProvider 사용
using Microsoft.Extensions.Hosting; // IHost, Host 사용
using System;
using System.IO; // Path 사용
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading; // DispatcherUnhandledException 사용

namespace LockerManagementApp
{
    public partial class App : Application
    {
        private IHost? _host;

        public App()
        {
            SetupGlobalExceptionHandling();
        }

        private async void Application_Startup(object sender, StartupEventArgs e)
        {
            // *** 중단점 1: 시작 지점 ***
            System.Diagnostics.Debug.WriteLine("Application_Startup 시작");

            var hostBuilder = CreateHostBuilder(e.Args);
            try
            {
                _host = await hostBuilder.StartAsync();
                // *** 중단점 2: 호스트 시작 후 (_host가 null이 아닌지 확인) ***
                System.Diagnostics.Debug.WriteLine("호스트 시작 완료.");
            }
            catch (Exception ex)
            {
                // 호스트 시작 중 예외 발생 시
                LogAndShowException(ex, "Host Startup");
                Shutdown(); // 즉시 종료
                return;
            }

            MainWindow? mainWindow = null; // Nullable로 선언
            try
            {
                mainWindow = _host.Services.GetService<MainWindow>();
                // *** 중단점 3: MainWindow 가져온 후 (mainWindow가 null이 아닌지 확인) ***
                if (mainWindow == null)
                {
                     System.Diagnostics.Debug.WriteLine("MainWindow를 DI 컨테이너에서 가져오지 못했습니다.");
                     MessageBox.Show("메인 윈도우를 DI 컨테이너에서 찾을 수 없습니다. 서비스 등록을 확인하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                     Shutdown();
                     return;
                }
                 System.Diagnostics.Debug.WriteLine("MainWindow 인스턴스 가져오기 성공.");
            }
            catch (Exception ex)
            {
                // MainWindow 생성 또는 주입 중 예외 발생 시
                LogAndShowException(ex, "MainWindow Resolution/Creation");
                Shutdown();
                return;
            }


            // *** 중단점 4: Show() 호출 직전 ***
            System.Diagnostics.Debug.WriteLine("MainWindow.Show() 호출 시도.");
            try
            {
                 this.MainWindow = mainWindow;
                 mainWindow.Show();
                 System.Diagnostics.Debug.WriteLine("MainWindow.Show() 호출 완료.");
            }
             catch (Exception ex)
            {
                // Show() 메서드 자체에서 예외 발생 시 (드물지만 가능)
                LogAndShowException(ex, "MainWindow.Show()");
                Shutdown();
            }
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((context, config) =>
                {
                    config.SetBasePath(AppContext.BaseDirectory);
                    config.AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
                })
                .ConfigureServices((context, services) =>
                {
                    ConfigureServices(context.Configuration, services);
                });

        private static void ConfigureServices(IConfiguration configuration, IServiceCollection services)
        {
             try
            {
                // DbContext 등록 시도
                services.AddDbContext<LockerDbContext>(options =>
                    options.UseSqlServer(configuration.GetConnectionString("LockerDbConnection")),
                    ServiceLifetime.Scoped); // DbContext는 보통 Scoped로 등록

                // ViewModel 등록
                services.AddTransient<MainViewModel>();

                // View(Window) 등록
                services.AddTransient<MainWindow>();

                System.Diagnostics.Debug.WriteLine("서비스 등록 완료.");
            }
             catch (Exception ex)
            {
                 // 서비스 등록 중 예외 발생 시 (예: 연결 문자열 이름 오류 등)
                 // 이 예외는 Application_Startup에서 잡기 어려울 수 있으므로 여기서 로깅 시도
                 System.Diagnostics.Debug.WriteLine($"서비스 등록 중 오류: {ex.Message}");
                 // 여기서 MessageBox를 띄우는 것은 불안정할 수 있음
                 throw; // 예외를 다시 던져서 상위에서 처리하도록 함
            }
        }

        private async void Application_Exit(object sender, ExitEventArgs e)
        {
             System.Diagnostics.Debug.WriteLine("Application_Exit 시작");
            if (_host != null)
            {
                using (_host)
                {
                    await _host.StopAsync(TimeSpan.FromSeconds(5));
                }
                _host = null;
                 System.Diagnostics.Debug.WriteLine("호스트 중지 완료.");
            }
        }

        // --- 전역 예외 처리 ---
        private void SetupGlobalExceptionHandling()
        {
            DispatcherUnhandledException += (s, e) =>
            {
                LogAndShowException(e.Exception, "UI Thread Exception");
                e.Handled = true; // 처리된 것으로 표시하여 앱 비정상 종료 방지 시도
            };
            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                LogAndShowException(e.Exception, "Background Task Exception");
                e.SetObserved();
            };
            AppDomain.CurrentDomain.UnhandledException += (s, e) =>
            {
                LogAndShowException((Exception)e.ExceptionObject, "AppDomain Exception");
                // 여기서 앱이 종료될 가능성이 높음
            };
        }
        private void LogAndShowException(Exception exception, string source)
        {
            string errorMessage = $"예기치 않은 오류가 발생했습니다 ({source}):\n\n{exception.ToString()}"; // ToString()으로 상세 정보 포함
            System.Diagnostics.Debug.WriteLine($"*** 예외 발생 ({source}) ***\n{errorMessage}"); // 출력 창에 기록
            try
            {
                 // UI 스레드가 아닌 경우 직접 MessageBox 호출 시 문제 발생 가능
                 // Dispatcher.CurrentDispatcher.Invoke(() => MessageBox.Show(errorMessage, "애플리케이션 오류", MessageBoxButton.OK, MessageBoxImage.Error));
                 // 가장 간단하게 일단 직접 호출 시도
                 MessageBox.Show(errorMessage, "애플리케이션 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception msgEx)
            {
                 // 메시지 박스 표시 실패 시 출력 창에 기록
                 System.Diagnostics.Debug.WriteLine($"*** 메시지 박스 표시 실패 ({source}) ***\n{msgEx.ToString()}");
            }
        }
        // --- 전역 예외 처리 끝 ---
    }