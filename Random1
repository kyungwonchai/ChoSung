알겠습니다. Flask 서버 없이 PC에서 직접 index.html 파일을 열어 사용하는 방식으로 변경하고, 지정된 폴더에 agent1.html과 같은 파일을 추가하면 (정확히는 index.html 내의 설정 배열에 해당 파일 정보를 추가하면) 탭이 동적으로 생성되도록 구조화해 드리겠습니다.

핵심 변경 사항:

서버 로직 제거: app.py 파일은 더 이상 사용하지 않습니다. 모든 로직은 index.html 내의 JavaScript로 처리됩니다.
동적 탭 생성 (JavaScript 설정 기반): index.html 파일 내에 JavaScript 배열을 두어, 이 배열에 정의된 정보에 따라 탭 버튼과 각 탭에 해당하는 <iframe>을 동적으로 생성합니다. 새로운 에이전트 페이지를 추가하려면, 해당 HTML 파일을 만들고 이 JavaScript 배열에 새 항목을 추가하는 방식으로 작동합니다. (로컬 파일 시스템을 직접 스캔하는 것은 브라우저 보안 정책상 불가능하므로, 설정 배열을 수정하는 방식이 현실적입니다.)
<iframe> 사용: 각 탭의 내용은 별도의 HTML 파일(예: agents/agent1.html)로 분리되고, <iframe>을 통해 메인 페이지에 삽입됩니다.
레이아웃 유지: 전체 탭 인터페이스는 이전처럼 화면 대부분을 차지하며 작은 여백을 갖고, 각 탭 내부의 <iframe> (그리고 그 안의 채팅창)은 해당 탭의 전체 크기를 차지하도록 합니다.
프로젝트 폴더 구조:

다음과 같은 폴더 구조를 권장합니다.

/MyLocalAgentTabs/
  ├── index.html              <-- 이것을 브라우저에서 직접 엽니다.
  └── agents/                 <-- 각 에이전트의 HTML 파일을 이곳에 저장합니다.
      ├── agent1.html
      ├── agent2.html
      └── agent3.html
      └── (새로운 에이전트_파일.html 등을 이곳에 추가)
1. agents/agent1.html 파일 내용 (예시):

각 에이전트 페이지는 이와 유사한 구조를 가집니다. YOUR_FLOW_ID_X와 YOUR_API_KEY_HERE는 실제 값으로 채워야 합니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>Agent Alpha</title> <script src="https://agent.sec.samsung.net/chat.bundle.min.js" defer></script>
    <style>
        /* iframe 내부 페이지가 iframe 영역을 100% 채우도록 설정 */
        html, body {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            overflow: hidden; /* 중요: agent-chat이 이 페이지(iframe)의 경계를 넘으면 여기서 잘립니다. */
        }
        agent-chat {
            display: block; /* 너비/높이 100%가 제대로 적용되도록 */
            width: 100%;
            height: 100%;
            box-sizing: border-box; /* 테두리/패딩이 크기에 포함되도록 */
            /* 개발 중 agent-chat의 실제 영역 확인을 위한 임시 테두리 (문제 해결 후 제거) */
            /* border: 2px dashed limegreen; */
        }
    </style>
</head>
<body>
    <agent-chat
        window_title="Agent Alpha" flow_id="YOUR_FLOW_ID_1" host_url="https://agent.sec.samsung.net"
        api_key="YOUR_API_KEY_HERE" start_open="true"
        component_inputs="{}"
        width="100%"  height="100%" ></agent-chat>
</body>
</html>
agents/agent2.html, agents/agent3.html 등도 위와 동일한 템플릿을 사용하되, <title>, window_title, 그리고 가장 중요하게 **flow_id**를 각 에이전트에 맞게 수정합니다. api_key도 에이전트별로 다르다면 각각 수정합니다.
2. index.html 파일 내용 (메인 탭 페이지 - 대폭 수정됨):

이 파일이 이제 모든 것을 처리합니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="utf-8"/>
    <title>Dynamic Multi-Agent Tabs (Local)</title>
    <style>
        html {
            box-sizing: border-box;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: sans-serif;
        }

        body {
            background: linear-gradient(135deg, #002266, #001133, #000000);
            background-attachment: fixed;
            display: flex; /* body를 flex 컨테이너로 만들어 page-container를 중앙 정렬 (선택 사항) */
            justify-content: center; /* 수평 중앙 */
            align-items: center; /* 수직 중앙 */
        }

        .page-container { /* 전체 UI를 감싸는 컨테이너, 화면 대부분 차지 */
            width: calc(100vw - 40px); /* 화면 너비 - 양쪽 20px 여백 */
            height: calc(100vh - 40px); /* 화면 높이 - 양쪽 20px 여백 */
            max-width: 1880px; /* 너무 커지는 것을 방지 (선택 사항) */
            max-height: 1040px; /* 너무 커지는 것을 방지 (선택 사항) */

            background-color: rgba(10, 20, 30, 0.85);
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .tab-navigation {
            display: flex;
            flex-shrink: 0;
            background-color: rgba(0, 0, 0, 0.3);
            padding: 5px 5px 0 5px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            overflow-x: auto; /* 탭이 많아지면 가로 스크롤 */
            white-space: nowrap; /* 탭 버튼들이 한 줄로 표시되도록 */
        }

        .tab-button {
            padding: 12px 20px;
            cursor: pointer;
            border: none;
            border-bottom: 3px solid transparent;
            background-color: transparent;
            color: #ccc;
            font-size: 16px;
            margin-right: 2px;
            border-radius: 5px 5px 0 0;
            white-space: nowrap; /* 버튼 내 텍스트 줄바꿈 방지 */
            flex-shrink: 0; /* 탭 버튼 크기 유지 */
        }

        .tab-button:hover {
            background-color: rgba(255, 255, 255, 0.1);
            color: #fff;
        }

        .tab-button.active {
            background-color: rgba(255, 255, 255, 0.05);
            color: #fff;
            font-weight: bold;
            border-bottom: 3px solid #0099ff;
        }

        .tab-content-area {
            flex-grow: 1;
            position: relative;
            overflow: hidden;
        }

        .iframe-pane {
            width: 100%;
            height: 100%;
            border: none;
            display: none; /* 기본 숨김, active 클래스로 표시 */
        }

        .iframe-pane.active {
            display: block;
        }
    </style>
</head>
<body>
    <div class="page-container">
        <div class="tab-navigation" id="tabNavigation">
            </div>

        <div class="tab-content-area" id="tabContentArea">
            </div>
    </div>

    <script>
        // =================================================================================
        // ★★★ 에이전트 설정 ★★★
        // 새 에이전트 HTML 파일을 agents/ 폴더에 추가한 후, 아래 배열에 정보를 추가하세요.
        // id: 고유 식별자 (HTML id로 사용됨)
        // name: 탭에 표시될 이름
        // file: agents/ 폴더 내의 해당 HTML 파일 경로
        // flowId: (선택 사항) agentX.html 파일 내에서 직접 설정하는 것을 권장. 여기서는 참고용.
        // =================================================================================
        const agentsConfig = [
            { id: "agent1", name: "Agent Alpha", file: "agents/agent1.html", flowId_comment: "FLOW_ID_FOR_AGENT_1 (in agent1.html)" },
            { id: "agent2", name: "Agent Beta",  file: "agents/agent2.html", flowId_comment: "FLOW_ID_FOR_AGENT_2 (in agent2.html)" },
            { id: "agent3", name: "Agent Gamma", file: "agents/agent3.html", flowId_comment: "FLOW_ID_FOR_AGENT_3 (in agent3.html)" }
            // 예시: 새 에이전트 추가 시
            // { id: "agent4", name: "Agent Delta", file: "agents/agent4.html", flowId_comment: "YOUR_FLOW_ID_4" }
        ];

        // ★★★ 전역 API 키 (모든 에이전트가 동일한 키를 사용한다면) ★★★
        // 각 agentX.html 파일 내의 api_key="YOUR_API_KEY_HERE" 부분을 실제 키로 바꿔주세요.
        // 이 변수는 현재 코드에서 직접 사용되진 않지만, 참고용으로 남겨둡니다.
        const GLOBAL_API_KEY_INFO = "YOUR_API_KEY_HERE (set this in each agentX.html file)";

        const tabNavigation = document.getElementById('tabNavigation');
        const tabContentArea = document.getElementById('tabContentArea');

        function createTabsAndIframes() {
            agentsConfig.forEach((agent, index) => {
                // 1. 탭 버튼 생성
                const button = document.createElement('button');
                button.classList.add('tab-button');
                button.textContent = agent.name;
                button.dataset.iframeId = agent.id + 'Frame'; // 연결될 iframe의 ID 저장
                button.addEventListener('click', (event) => {
                    openTab(event, agent.id + 'Frame');
                });
                tabNavigation.appendChild(button);

                // 2. IFrame 생성
                const iframe = document.createElement('iframe');
                iframe.id = agent.id + 'Frame';
                iframe.classList.add('iframe-pane');
                iframe.src = agent.file; // 각 에이전트의 HTML 파일 로드
                // iframe.setAttribute('sandbox', 'allow-scripts allow-same-origin'); // 필요시 보안 강화
                tabContentArea.appendChild(iframe);

                // 첫 번째 탭을 기본으로 활성화
                if (index === 0) {
                    button.classList.add('active');
                    iframe.classList.add('active');
                }
            });
        }

        function openTab(event, iframeIdToOpen) {
            // 모든 iframe 숨기기
            const iframePanes = document.querySelectorAll('.iframe-pane');
            iframePanes.forEach(pane => {
                pane.classList.remove('active');
            });

            // 모든 탭 버튼 비활성화
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => {
                button.classList.remove('active');
            });

            // 선택된 iframe 보여주기
            const selectedIframe = document.getElementById(iframeIdToOpen);
            if (selectedIframe) {
                selectedIframe.classList.add('active');
            }
            
            // 클릭된 탭 버튼 활성화
            // 이벤트 객체가 있으면 event.currentTarget 사용, 없으면 data-iframe-id로 버튼 찾기
            if (event && event.currentTarget) {
                 event.currentTarget.classList.add('active');
            } else { // 초기 로드 시 등 event 객체가 없을 때
                tabButtons.forEach(button => {
                    if(button.dataset.iframeId === iframeIdToOpen) {
                        button.classList.add('active');
                    }
                });
            }
        }

        // 페이지 로드 시 탭과 iframe 동적 생성
        window.addEventListener('DOMContentLoaded', () => {
            createTabsAndIframes();
            // 창 크기 변경에 따른 iframe 내부 리사이즈는 각 iframe 페이지가 담당
            // 부모 페이지에서는 iframe 자체의 크기만 관리 (현재는 CSS로 100%)
        });

    </script>
</body>
</html>
사용 방법 및 설명:

폴더 및 파일 생성: 위에서 안내한 /MyLocalAgentTabs/ 폴더 구조대로 index.html과 agents/ 폴더 및 그 안의 agent1.html, agent2.html, agent3.html 파일을 생성하고 내용을 채웁니다.

에이전트 정보 수정:

각 agents/agentX.html 파일:
flow_id="YOUR_FLOW_ID_X" 부분을 각 에이전트에 맞는 실제 flow_id로 수정합니다.
api_key="YOUR_API_KEY_HERE" 부분을 실제 사용하는 API 키로 수정합니다. (모든 에이전트가 같은 키를 쓴다면 동일하게, 다르다면 각각 맞게)
<title>과 <agent-chat>의 window_title도 적절히 수정합니다.
index.html 파일:
JavaScript 상단의 agentsConfig 배열을 수정합니다.
id: 각 에이전트의 고유 ID (HTML 요소 ID에 사용되므로 영어/숫자로 간단하게).
name: 탭에 표시될 이름.
file: agents/ 폴더 내의 해당 에이전트 HTML 파일 경로.
새로운 에이전트를 추가하려면, 먼저 agents/ 폴더에 agent새로운ID.html 파일을 만들고 위와 같이 내용을 채운 후, agentsConfig 배열에 새 객체 { id: "새로운ID", name: "새 에이전트 이름", file: "agents/agent새로운ID.html" }를 추가합니다.
실행:

Flask 서버 없이, MyLocalAgentTabs 폴더에 있는 index.html 파일을 웹 브라우저에서 직접 엽니다 (file:///경로/MyLocalAgentTabs/index.html).
오른쪽/하단 잘림 문제에 대하여:

이 <iframe> 방식에서는 각 agentX.html 페이지가 <iframe> 내부의 "작은 독립된 창"처럼 동작합니다.
각 agentX.html 내부의 CSS에서 html, body, agent-chat 요소에 width: 100%; height: 100%; overflow: hidden; 스타일을 적용했습니다.
이렇게 하면 <agent-chat> 컴포넌트는 <iframe>이 제공하는 공간을 100% 사용하려고 시도합니다.
만약 이 상태에서도 <agent-chat>의 오른쪽/하단 내용이 잘린다면, 그것은 <agent-chat> 컴포넌트 자체가 해당 <iframe>의 너비/높이 내에서 자신의 모든 내용을 표시하지 못하고 넘치기 때문입니다. overflow: hidden;은 이렇게 넘치는 부분을 <iframe> 내부에서 잘라냅니다.