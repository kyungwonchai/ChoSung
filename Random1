import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout, QPushButton, QListWidget
import joblib
from Levenshtein import distance
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('부품코드 유사도 검색')
        self.resize(300, 400)

        self.model_file = 'model.pkl'
        self.vectorizer_file = 'vectorizer.pkl'

        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.input_label = QLabel('부품코드를 입력하세요:')
        layout.addWidget(self.input_label)

        self.input_entry = QLineEdit()
        layout.addWidget(self.input_entry)

        self.search_button = QPushButton('검색')
        self.search_button.clicked.connect(self.search_similar_parts)
        layout.addWidget(self.search_button)

        self.result_list = QListWidget()
        layout.addWidget(self.result_list)

        self.setLayout(layout)

    def load_model(self):
        model_data = joblib.load(self.model_file)
        self.similarity_matrix = model_data['similarity_matrix']
        self.vectorizer = model_data['vectorizer']

    def find_similar_parts(self, input_text):
        input_vector = self.vectorizer.transform([input_text])
        similarity_scores = cosine_similarity(input_vector, self.similarity_matrix).flatten()

        top_indices = similarity_scores.argsort()[:-11:-1]
        similar_parts = self.vectorizer.inverse_transform(self.similarity_matrix[top_indices])

        similarity_scores = [distance(input_text, part) for part in similar_parts]
        similar_parts_with_distance = sorted(zip(similarity_scores, similar_parts))

        return similar_parts_with_distance

    def search_similar_parts(self):
        input_text = self.input_entry.text()

        similar_parts = self.find_similar_parts(input_text)

        self.result_list.clear()
        for distance, part in similar_parts:
            self.result_list.addItem(f'{part}: {distance}')

if __name__ == '__main__':
    app = QApplication(sys.argv)

    window = MainWindow()
    window.load_model()

    window.show()

    sys.exit(app.exec_())
