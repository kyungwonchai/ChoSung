L Server 데이터베이스에서 정보를 가져와서 DevExpress 22.2 WPF 환경에서 막대 차트를 생성하고, 차트의 막대를 클릭했을 때 해당 데이터로 GridControl을 필터링하는 기능을 구현하기 위해서는 여러 단계가 필요합니다. 이를 위해 XAML, C# 코드, 그리고 필요한 경우 MS SQL 저장 프로시저를 제공하겠습니다.

1. MS SQL Server 저장 프로시저 (예시)
먼저, 라인별, 모델별, 발생유형별 수량을 가져오는 저장 프로시저입니다. 이 예시는 테이블 이름과 컬럼 이름을 가정하여 작성되었습니다.

sql
Copy code
CREATE PROCEDURE GetChartData
AS
BEGIN
    SELECT 라인, COUNT(*) AS 수량 FROM T_현장셑척 GROUP BY 라인
    UNION
    SELECT 모델, COUNT(*) FROM T_현장셑척 GROUP BY 모델
    UNION
    SELECT 발생유형, COUNT(*) FROM T_현장셑척 GROUP BY 발생유형
END
2. XAML 코드
다음은 WPF에서 ChartControl과 GridControl을 포함하는 XAML 코드입니다.

xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="2*"/>
        </Grid.RowDefinitions>
        
        <dxc:ChartControl x:Name="chartControl" Grid.Row="0"/>
        <dxg:GridControl x:Name="gridControl" Grid.Row="1"/>
    </Grid>
</Window>
3. C# 코드
C# 코드에서는 차트 데이터를 불러오고, 막대를 클릭했을 때 그리드를 필터링하는 로직을 구현합니다.

csharp
Copy code
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

public partial class MainWindow : Window
{
    private string connectionString = "Your Connection String Here";

    public MainWindow()
    {
        InitializeComponent();
        LoadChartData();
    }

    private void LoadChartData()
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            using (SqlCommand cmd = new SqlCommand("GetChartData", conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    chartControl.DataSource = dt;
                }
            }
        }
    }

    private void ChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        var hitInfo = chartControl.CalcHitInfo(e.GetPosition(chartControl));
        if (hitInfo.InSeries)
        {
            var seriesPoint = hitInfo.SeriesPoint;
            FilterGridControl(seriesPoint.Argument);
        }
    }

    private void FilterGridControl(string filterArgument)
    {
        gridControl.FilterString = $"[라인] = '{filterArgument}' OR [모델] = '{filterArgument}' OR [발생유형] = '{filterArgument}'";
    }
}
주의사항:

XAML에서의 네임스페이스 YourNamespace는 실제 프로젝트의 네임스페이스로 변경해야 합니다.
connectionString을 데이터베이스에 맞게 설정해야 합니다.
ChartControl과 GridControl에 대한 추가 설정(예: 시리즈 타입, 컬럼 정의 등)이 필요할 수 있습니다.
예외 처리 및 데이터베이스 연결 관리에 주의해야 합니다.
이 코드는 기본적인 구조