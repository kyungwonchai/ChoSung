WPF UI 기반으로 작업을 수행할 수 있는 솔루션을 작성했습니다. WPF 애플리케이션에서 데이터베이스 연동 및 CSV 파일 처리 작업을 수행하며, UI를 통해 상태를 표시하도록 구현합니다.

요구사항 반영
WPF UI 구현: 작업 진행 상태를 ListBox 또는 DataGrid를 통해 표시.
고유 키 처리: InspectionTime과 ModelName이 고유 키로, 중복 방지.
IP 정보 저장: 데이터베이스에 ipname 필드로 IP 저장.
작업 이어받기: 프로그램 시작 시 데이터베이스에서 마지막 InspectionTime 가져오기.
전체 코드
XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="CsvToDbUploader.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="CSV to DB Uploader" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Button Content="작업 시작" Grid.Row="0" Margin="10" Click="StartButton_Click"/>
        <ListBox x:Name="StatusListBox" Grid.Row="1" Margin="10"/>

        <TextBlock Text="상태 메시지:" Grid.Row="2" Margin="10" VerticalAlignment="Center"/>
    </Grid>
</Window>
Code-Behind (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace CsvToDbUploader
{
    public partial class MainWindow : Window
    {
        private DateTime _lastInspectionTime;

        public MainWindow()
        {
            InitializeComponent();

            // 프로그램 시작 시 데이터베이스에서 마지막 InspectionTime 가져오기
            _lastInspectionTime = GetLastInspectionTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 처리 시간: {_lastInspectionTime}");
        }

        private DateTime GetLastInspectionTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }

        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            // 버튼 클릭 시 작업 시작
            try
            {
                StatusListBox.Items.Add("작업 시작 중...");
                await StartProcessingAsync();
                StatusListBox.Items.Add("작업 완료");
            }
            catch (Exception ex)
            {
                StatusListBox.Items.Add($"에러 발생: {ex.Message}");
            }
        }

        private async Task StartProcessingAsync()
        {
            var processor = new FileProcessor(_lastInspectionTime);
            var newFiles = processor.GetNewFiles(@"\\10.22.22.22\Result");

            if (newFiles.Any())
            {
                foreach (var file in newFiles)
                {
                    StatusListBox.Items.Add($"파일 처리 중: {file}");
                    var rows = processor.ReadCsv(file);

                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(rows);

                    StatusListBox.Items.Add($"파일 업로드 완료: {file}");
                }

                // 마지막 처리 시간 업데이트
                _lastInspectionTime = GetLastInspectionTimeFromDatabase();
            }
            else
            {
                StatusListBox.Items.Add("처리할 새로운 파일이 없습니다.");
            }
        }
    }

    public class FileProcessor
    {
        private readonly DateTime _lastInspectionTime;

        public FileProcessor(DateTime lastInspectionTime)
        {
            _lastInspectionTime = lastInspectionTime;
        }

        public List<string> GetNewFiles(string rootPath)
        {
            // Result 하위 모든 폴더에서 수정 시간 기준 새로운 파일 검색
            return Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories)
                            .Where(file => File.GetLastWriteTime(file) > _lastInspectionTime)
                            .ToList();
        }

        public List<Dictionary<string, object>> ReadCsv(string filePath)
        {
            var rows = new List<Dictionary<string, object>>();

            using (var reader = new StreamReader(new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
            {
                var headers = reader.ReadLine()?.Split(','); // 첫 번째 줄은 헤더
                if (headers == null) throw new InvalidOperationException("CSV 파일이 비어있습니다.");

                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine()?.Split(',');
                    if (values == null || values.Length < headers.Length) continue;

                    var row = new Dictionary<string, object>();
                    for (int i = 0; i < headers.Length; i++)
                    {
                        row[headers[i]] = values[i];
                    }

                    // AlignResult가 N/A인 경우 제외
                    if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                    {
                        continue;
                    }

                    // IP 정보 추가
                    row["ipname"] = "10.22.22.22"; // 하드코딩된 IP

                    rows.Add(row);
                }
            }

            return rows;
        }
    }

    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", DateTime.Parse(row["InspectionTime"].ToString()));
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"].ToString());
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"].ToString());
                        command.Parameters.AddWithValue("@MP1DATA", float.Parse(row["MP1DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP2DATA", float.Parse(row["MP2DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP3DATA", float.Parse(row["MP3DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP4DATA", float.Parse(row["MP4DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"].ToString());
                        command.Parameters.AddWithValue("@ipname", row["ipname"].ToString());

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
MSSQL 테이블 생성
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName) -- 고유 키 설정
);
구성 설명
UI와 상태 표시:
작업 상태를 ListBox에 출력.
작업 버튼으로 데이터베이스 업로드 수행.
DB 연동:
InspectionTime과 ModelName 고유 키 처리.
마지막 처리 시간 기준 파일 탐색 및 이어서 작업.
IP 정보 추가:
ipname 필드에 하드코딩된 IP 저장.
에러 처리: