bservableCollection에 데이터를 추가했음에도 UI가 갱신되지 않는다면, UI 바인딩 문제 또는 INotifyPropertyChanged 이벤트가 트리거되지 않는 문제일 가능성이 높습니다.

여기서는 UI 업데이트를 강제적으로 알리는 방법과 구조적 문제 해결을 모두 적용합니다.

해결 방법 1: RaisePropertyChanged 강제 트리거 추가
ObservableCollection의 변경을 UI에 강제적으로 알리려면, LogEntries 속성을 다시 평가하도록 바인딩 업데이트를 트리거해야 합니다.

수정된 MainViewModel 코드
csharp
코드 복사
public class MainViewModel : BaseViewModel
{
    private readonly MergeOIErrLogManager _logManager;
    private readonly SocketClientMergeOI _socketClient;

    public ObservableCollection<MergeOIErrLogEntry> LogEntries => _logManager.LogEntries;

    public MainViewModel()
    {
        _logManager = new MergeOIErrLogManager();
        _socketClient = new SocketClientMergeOI();

        // 이벤트 구독
        _socketClient.OnLogReceived += HandleLogEvent;

        // 테스트: 소켓 메시지 시뮬레이션
        Task.Run(() => SimulateSocketMessages());
    }

    /// <summary>
    /// 이벤트를 처리하여 UI 갱신을 강제 트리거
    /// </summary>
    /// <param name="logLine">추가된 로그</param>
    private void HandleLogEvent(string logLine)
    {
        _logManager.HandleLogEvent(logLine);
        OnPropertyChanged(nameof(LogEntries)); // UI 강제 갱신
    }

    /// <summary>
    /// 테스트용: 소켓 메시지 시뮬레이션
    /// </summary>
    private async Task SimulateSocketMessages()
    {
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("ERROR: Connection lost");
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("INFO: Reconnected");
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("ERROR: Timeout");
    }
}
주요 변경 사항
OnPropertyChanged(nameof(LogEntries)) 추가

LogEntries 프로퍼티를 다시 평가하도록 UI에 알립니다.
이벤트 핸들러 직접 호출

SocketClientMergeOI의 이벤트를 구독하여 로그 처리 후 UI에 즉시 반영되도록 수정.
해결 방법 2: UI 업데이트 강제 트리거
만약 위 방식으로도 동작하지 않는다면, ObservableCollection을 직접 새 인스턴스로 교체하여 강제 업데이트를 트리거합니다.

MainViewModel 수정
csharp
코드 복사
public class MainViewModel : BaseViewModel
{
    private MergeOIErrLogManager _logManager;
    private SocketClientMergeOI _socketClient;
    private ObservableCollection<MergeOIErrLogEntry> _logEntries;

    public ObservableCollection<MergeOIErrLogEntry> LogEntries
    {
        get => _logEntries;
        private set
        {
            _logEntries = value;
            OnPropertyChanged(nameof(LogEntries)); // UI 강제 업데이트
        }
    }

    public MainViewModel()
    {
        _logManager = new MergeOIErrLogManager();
        _socketClient = new SocketClientMergeOI();

        _logEntries = _logManager.LogEntries;

        // 이벤트 구독
        _socketClient.OnLogReceived += HandleLogEvent;

        // 테스트: 소켓 메시지 시뮬레이션
        Task.Run(() => SimulateSocketMessages());
    }

    /// <summary>
    /// 로그 이벤트 처리 및 UI 갱신
    /// </summary>
    /// <param name="logLine">추가된 로그</param>
    private void HandleLogEvent(string logLine)
    {
        _logManager.HandleLogEvent(logLine);

        // ObservableCollection 교체를 통한 강제 업데이트
        LogEntries = new ObservableCollection<MergeOIErrLogEntry>(_logManager.LogEntries);
    }

    /// <summary>
    /// 테스트용: 소켓 메시지 시뮬레이션
    /// </summary>
    private async Task SimulateSocketMessages()
    {
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("ERROR: Connection lost");
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("INFO: Reconnected");
        await Task.Delay(1000);
        _socketClient.ProcessSocketMessage("ERROR: Timeout");
    }
}
주요 변경 사항
컬렉션 교체를 통한 강제 업데이트
LogEntries 속성에 새 ObservableCollection을 할당하여 바인딩 업데이트를 강제합니다.
해결 방법 3: XAML 바인딩 속성 확인
DataGrid의 ItemsSource가 LogEntries에 정확히 바인딩되어 있는지 다시 확인합니다.

수정된 XAML
xml
코드 복사
<DataGrid ItemsSource="{Binding LogEntries, UpdateSourceTrigger=PropertyChanged}" 
          AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
    <DataGrid.Columns>
        <DataGridTextColumn Header="시간" Binding="{Binding Time, StringFormat=yyyy-MM-dd HH:mm:ss.fff}" Width="*"/>
        <DataGridTextColumn Header="메시지" Binding="{Binding Message}" Width="2*"/>
        <DataGridTextColumn Header="세부 내용" Binding="{Binding Details}" Width="2*"/>
    </DataGrid.Columns>
</DataGrid>
주요 변경 사항
UpdateSourceTrigger=PropertyChanged 추가
DataGrid가 데이터 변경 사항을 즉시 반영하도록 수정.
최종 결과
위 코드를 적용하면:

SocketClientMergeOI의 이벤트 발생 → MergeOIErrLogManager에서 처리.
LogEntries 속성 업데이트 → UI에 즉시 반영.
강제로 UI를 갱신하도록 구현했기 때문에 이제 추가된 데이터가 항상 표시됩니다.
디버깅 팁
만약 여전히 동작하지 않는다면:

이벤트 호출 확인

SocketClientMergeOI.OnLogReceived가 실제로 호출되고 있는지 디버깅.
MergeOIErrLogManager.LogEntries 데이터 확인

LogEntries에 데이터가 추가되었는지 확인.
UI 바인딩 확인