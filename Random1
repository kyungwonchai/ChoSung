네, 알겠습니다! SControlM 애플리케이션의 사용자 인터페이스를 정의하는 MainWindow.xaml 파일의 코드를 제공해 드리겠습니다.

이 XAML 코드는 MainControlViewModel.cs에서 정의한 속성 및 명령에 바인딩되어 동작합니다.

MainWindow.xaml

XML

<Window x:Class="SControlM.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SControlM"
        xmlns:viewModels="clr-namespace:SControlM.ViewModels"
        mc:Ignorable="d"
        Title="SControlM - Remote Control Panel" Height="600" Width="900"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Vertical" Margin="0,0,0,10">
            <GroupBox Header="SAgentM Target (제어 대상 PC)" Padding="5">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="100"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Column="0" Content="IP 주소:" VerticalAlignment="Center"/>
                    <TextBox Grid.Column="1" Text="{Binding CurrentAgentTarget.IpAddress, UpdateSourceTrigger=PropertyChanged}" Margin="5,0" VerticalAlignment="Center"/>
                    <Label Grid.Column="2" Content="포트:" VerticalAlignment="Center"/>
                    <TextBox Grid.Column="3" Text="{Binding CurrentAgentTarget.Port, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"/>
                </Grid>
            </GroupBox>

            <GroupBox Header="Relay Target (릴레이 최종 목적지 PC - 선택 사항)" Padding="5" Margin="0,5,0,0">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="100"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Label Grid.Column="0" Content="릴레이 IP:" VerticalAlignment="Center"/>
                    <TextBox Grid.Column="1" Text="{Binding CurrentAgentTarget.RelayIpAddress, UpdateSourceTrigger=PropertyChanged}" Margin="5,0" VerticalAlignment="Center"
                             ToolTip="릴레이 명령을 사용할 경우 최종 목적지 PC의 IP 주소를 입력합니다."/>
                    <Label Grid.Column="2" Content="릴레이 포트:" VerticalAlignment="Center"/>
                    <TextBox Grid.Column="3" Text="{Binding CurrentAgentTarget.RelayPort, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center"
                             ToolTip="릴레이 명령을 사용할 경우 최종 목적지 PC의 포트 번호를 입력합니다."/>
                </Grid>
            </GroupBox>
        </StackPanel>

        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,0,0,10">
            <GroupBox Header="직접 명령 (Direct Commands)" Padding="5">
                <StackPanel Orientation="Horizontal">
                    <Button Content="모니터 켜기" Command="{Binding SendCommandMonitorOnCommand}" Width="120" Margin="0,0,5,0"/>
                    <Button Content="모니터 끄기" Command="{Binding SendCommandMonitorOffCommand}" Width="120" Margin="0,0,5,0"/>
                    <Button Content="모니터 대기" Command="{Binding SendCommandMonitorStandbyCommand}" Width="120"/>
                </StackPanel>
            </GroupBox>
            <GroupBox Header="릴레이 명령 (Relay Commands)" Padding="5" Margin="0,5,0,0">
                <StackPanel Orientation="Horizontal">
                    <Button Content="릴레이: 모니터 켜기" Command="{Binding SendRelayMonitorOnCommand}" Width="150" Margin="0,0,5,0"
                            ToolTip="릴레이 대상 PC의 모니터를 켭니다."/>
                    </StackPanel>
            </GroupBox>
        </StackPanel>
        
        <GroupBox Grid.Row="2" Header="SAgentM 응답" Margin="0,0,0,5" Padding="5">
            <TextBox Text="{Binding ResponseText, Mode=OneWay}" IsReadOnly="True" Height="50" VerticalScrollBarVisibility="Auto" TextWrapping="Wrap"/>
        </GroupBox>

        <ListView Grid.Row="3" ItemsSource="{Binding LogEntries}" Margin="0,0,0,5" HorizontalContentAlignment="Stretch">
            <ListView.ItemContainerStyle>
                <Style TargetType="ListViewItem">
                    <Setter Property="Focusable" Value="False"/> </Style>
            </ListView.ItemContainerStyle>
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/> <ColumnDefinition Width="Auto"/> <ColumnDefinition Width="*"/>    </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding Timestamp, StringFormat='[{0:HH:mm:ss.fff}]'}" FontWeight="Normal" Margin="0,0,5,0"/>
                        <TextBlock Grid.Column="1" Text="{Binding Level, StringFormat='[{0}]'}" Margin="0,0,5,0">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Level}" Value="Error">
                                            <Setter Property="Foreground" Value="Red"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Warning">
                                            <Setter Property="Foreground" Value="OrangeRed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Info">
                                            <Setter Property="Foreground" Value="DarkGreen"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Sent">
                                            <Setter Property="Foreground" Value="Blue"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Received">
                                            <Setter Property="Foreground" Value="Purple"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Debug">
                                            <Setter Property="Foreground" Value="Gray"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock Grid.Column="2" Text="{Binding Message}" TextWrapping="Wrap"/>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <StatusBar Grid.Row="4">
            <StatusBarItem>
                <TextBlock Text="{Binding AgentStatus, FallbackValue='Ready', TargetNullValue='Ready'}"/> </StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Processing..." Margin="0,0,5,0" Foreground="DarkGoldenrod" FontWeight="Bold">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsBusy}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <ProgressBar IsIndeterminate="True" Width="100" Height="15" Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <ProgressBar.Style>
                             <Style TargetType="ProgressBar">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsBusy}" Value="True">
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ProgressBar.Style>
                    </ProgressBar>
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
MainWindow.xaml 주요 구성:

입력 영역:
SAgentM Target: 제어할 대상 에이전트의 IP 주소와 포트를 입력합니다 (CurrentAgentTarget.IpAddress, CurrentAgentTarget.Port에 바인딩).
Relay Target: 릴레이 명령을 사용할 경우 최종 목적지 PC의 IP 주소와 포트를 입력합니다 (CurrentAgentTarget.RelayIpAddress, CurrentAgentTarget.RelayPort에 바인딩).
명령 버튼 영역:
직접 명령: 모니터 켜기/끄기/대기 버튼 (SendCommandMonitorOnCommand 등에 바인딩).
릴레이 명령: 릴레이 모니터 켜기 버튼 (SendRelayMonitorOnCommand에 바인딩).
각 버튼의 활성화 상태는 ViewModel의 IsBusy 속성 및 각 Command의 CanExecute 로직에 따라 결정됩니다.
응답 텍스트 영역:
SAgentM으로부터 받은 응답 메시지(ResponseText)를 표시하는 읽기 전용 TextBox입니다.
로그 목록 영역:
SControlM 자체의 동작 로그 및 SAgentM과의 통신 로그(LogEntries)를 ListView에 표시합니다.
로그 레벨(Info, Error, Sent, Received 등)에 따라 다른 색상으로 표시되도록 DataTrigger를 사용했습니다.
타임스탬프는 밀리초까지 표시 (HH:mm:ss.fff) 하도록 수정했습니다.
상태 표시줄:
하단에 현재 애플리케이션 상태 (예: MainControlViewModel에 AgentStatus 속성 추가 시 바인딩 가능)와 IsBusy 상태에 따라 "Processing..." 텍스트 및 ProgressBar를 표시하여 작업 진행 중임을 알립니다.
BooleanToVisibilityConverter가 필요합니다. App.xaml의 리소스나 별도의 Converters 파일에 추가해야 합니다. 여기서는 간단히 Style Trigger로 ProgressBar의 Visibility를 제어했습니다.
참고: ProgressBar의 Visibility를 IsBusy에 바인딩하기 위해 BooleanToVisibilityConverter를 사용하는 것이 일반적입니다. 만약 이 컨버터가 없다면, App.xaml의 <Application.Resources>에 다음과 같이 추가하거나, 스타일 트리거를 사용하여 직접 제어할 수 있습니다. (위 XAML에서는 스타일 트리거를 사용했습니다.)

App.xaml에 컨버터 추가 예시:

XML

<Application.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
</Application.Resources>
만약 BooleanToVisibilityConverter를 직접 구현해야 한다면, 별도의 Converters 폴더에 .cs 파일을 만들어 추가해야 합니다.

이제 UI의 뼈대가 준비되었습니다. 다음으로는 이 XAML 파일의 코드 비하인드 파일인 MainWindow.xaml.cs와, 만약 필요하다면 App.xaml / App.xaml.cs (컨버터 리소스 등록 등)를 작성하게 됩니다.