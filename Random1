// MemoAppMGSP/Services/Implementations/SignalRNotificationService.cs
using MemoAppMGSP.SharedModels; // 공유 모델 사용 (Memo, MemoEventArgs)
using MemoAppMGSP.Services.Interfaces; // INotificationService 인터페이스 구현
using Microsoft.AspNetCore.SignalR.Client; // Microsoft.AspNetCore.SignalR.Client NuGet 패키지 필요
using System;
using System.Diagnostics;
using System.Threading.Tasks; // Task 사용
using System.Windows; // Application.Current.Dispatcher 사용 위해 추가 (선택적)

namespace MemoAppMGSP.Services.Implementations
{
    /// <summary>
    /// SignalR을 사용하여 서버로부터 실시간 알림을 수신하는 INotificationService 구현체입니다. (.NET Framework 4.8 호환)
    /// </summary>
    public class SignalRNotificationService : INotificationService, IDisposable
    {
        private HubConnection _hubConnection;
        private readonly string _hubUrl; // 예: "http://localhost:5000/memohub" (서버 주소 확인 필요)
        private bool _isStarted = false;
        private readonly IAuthService _authService; // 현재 사용자 ID 가져오기 위해 추가 (선택적)

        /// <summary>
        /// MemoReceived 이벤트입니다. 새 메모 수신 시 발생합니다.
        /// </summary>
        public event EventHandler<MemoEventArgs> MemoReceived;

        /// <summary>
        /// SignalRNotificationService의 새 인스턴스를 초기화합니다.
        /// </summary>
        /// <param name="hubUrl">연결할 SignalR Hub의 URL</param>
        /// <param name="authService">현재 사용자 정보 제공 서비스 (선택적)</param>
        public SignalRNotificationService(string hubUrl, IAuthService authService) // IAuthService 추가
        {
            _hubUrl = hubUrl ?? throw new ArgumentNullException(nameof(hubUrl));
            _authService = authService ?? throw new ArgumentNullException(nameof(authService)); // AuthService 주입

            // HubConnection 빌드 및 설정
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl, options =>
                {
                    // TODO: 인증 토큰이 필요하다면 여기서 설정 (예: 로그인 후 받은 토큰)
                    // options.AccessTokenProvider = () => Task.FromResult(_authService.GetAuthToken());
                })
                .WithAutomaticReconnect() // 자동 재연결 설정 (권장)
                .Build();

            // 서버에서 클라이언트로 호출하는 "ReceiveMemo" 메서드 핸들러 등록
            _hubConnection.On<Memo>("ReceiveMemo", (receivedMemo) =>
            {
                if (receivedMemo == null) return; // Null 체크

                Debug.WriteLine($"SignalR Client: Memo received - Title: {receivedMemo.Title}");
                // 이벤트 발생시키기
                OnMemoReceived(new MemoEventArgs(receivedMemo));
            });

            // 연결 상태 변경 이벤트 처리 (로깅 등)
            _hubConnection.Closed += HubConnection_Closed;
            _hubConnection.Reconnecting += HubConnection_Reconnecting;
            _hubConnection.Reconnected += HubConnection_Reconnected;
        }

        /// <summary>
        /// SignalR Hub 연결을 비동기적으로 시작하고 사용자 등록을 시도합니다.
        /// </summary>
        public async Task StartAsync()
        {
            if (_isStarted && _hubConnection.State != HubConnectionState.Disconnected)
            {
                Debug.WriteLine("SignalR Client: Already started or starting.");
                return;
            }

            try
            {
                Debug.WriteLine("SignalR Client: Starting connection...");
                await _hubConnection.StartAsync();
                _isStarted = true;
                Debug.WriteLine($"SignalR Client: Connection successful. State: {_hubConnection.State}");

                // --- !!! 연결 성공 후 서버에 사용자 등록 !!! ---
                var currentUser = _authService.GetCurrentUser();
                if (currentUser != null && _hubConnection.State == HubConnectionState.Connected)
                {
                    try
                    {
                        // 서버 Hub의 RegisterUser 메서드 호출
                        await _hubConnection.InvokeAsync("RegisterUser", currentUser.Id);
                        Debug.WriteLine($"SignalR Client: User {currentUser.Id} registration invoked.");
                    }
                    catch (Exception regEx)
                    {
                         Debug.WriteLine($"SignalR Client: Failed to invoke RegisterUser - {regEx.Message}");
                         // TODO: 사용자 등록 실패 처리
                    }
                }
                else if (currentUser == null)
                {
                     Debug.WriteLine($"SignalR Client: Cannot register user, current user is null.");
                }

            }
            catch (Exception ex)
            {
                _isStarted = false; // 시작 실패
                Debug.WriteLine($"SignalR Client: Connection failed - {ex.Message}");
                // TODO: 연결 실패 처리 (예: 사용자 알림)
            }
        }

        /// <summary>
        /// SignalR Hub 연결을 비동기적으로 중지합니다.
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isStarted || _hubConnection == null || _hubConnection.State == HubConnectionState.Disconnected)
            {
                Debug.WriteLine("SignalR Client: Already stopped or not started.");
                return;
            }
            try
            {
                Debug.WriteLine("SignalR Client: Stopping connection...");
                await _hubConnection.StopAsync();
                _isStarted = false;
                Debug.WriteLine($"SignalR Client: Connection stopped. State: {_hubConnection.State}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"SignalR Client: Error stopping connection - {ex.Message}");
            }
        }

        /// <summary>
        /// MemoReceived 이벤트를 안전하게 발생시킵니다.
        /// UI 스레드에서 처리해야 할 경우 Dispatcher 사용을 고려해야 합니다.
        /// </summary>
        /// <param name="e">MemoEventArgs</param>
        protected virtual void OnMemoReceived(MemoEventArgs e)
        {
            EventHandler<MemoEventArgs> handler = MemoReceived;
            if (handler != null)
            {
                // ViewModel 등 이벤트 구독자에게 전달
                // 만약 View에서 직접 구독한다면 UI 스레드로 전달 필요
                if (Application.Current != null && !Application.Current.Dispatcher.CheckAccess())
                {
                    Application.Current.Dispatcher.Invoke(() => handler.Invoke(this, e));
                }
                else
                {
                    handler.Invoke(this, e);
                }
            }
        }

        // --- Connection Lifecycle Event Handlers ---
        private Task HubConnection_Reconnected(string connectionId) // connectionId 타입 string으로 변경 ('?' 제거)
        {
            Debug.WriteLine($"SignalR Client: Connection reconnected. ConnectionId: {connectionId}");
            // --- !!! 재연결 시 사용자 재등록 !!! ---
            var currentUser = _authService.GetCurrentUser();
            if (currentUser != null && _hubConnection.State == HubConnectionState.Connected)
            {
                 // _ = _hubConnection.InvokeAsync("RegisterUser", currentUser.Id); // 백그라운드 호출
                 // 또는 동기적으로 호출 시도 (에러 핸들링 필요)
                 Task.Run(async () => {
                     try {
                         await _hubConnection.InvokeAsync("RegisterUser", currentUser.Id);
                         Debug.WriteLine($"SignalR Client: User {currentUser.Id} re-registration invoked upon reconnect.");
                     } catch (Exception ex) {
                         Debug.WriteLine($"SignalR Client: Failed to invoke RegisterUser on reconnect - {ex.Message}");
                     }
                 });
            }
            return Task.CompletedTask;
        }

        private Task HubConnection_Reconnecting(Exception error) // 'Exception?' -> 'Exception'
        {
            Debug.WriteLine($"SignalR Client: Connection reconnecting due to error: {error?.Message}");
            return Task.CompletedTask;
        }

        private Task HubConnection_Closed(Exception error) // 'Exception?' -> 'Exception'
        {
            _isStarted = false; // 연결이 닫혔으므로 상태 업데이트
            Debug.WriteLine($"SignalR Client: Connection closed. Error (if any): {error?.Message}");
            // TODO: 연결 완전 종료 시 처리 (예: 사용자 알림)
            return Task.CompletedTask;
        }


        // --- IDisposable Implementation ---
        public void Dispose()
        {
            // 리소스 정리
            _ = StopAsync(); // 비동기 중지 시도
            if (_hubConnection != null)
            {
                // 이벤트 핸들러 제거
                _hubConnection.Closed -= HubConnection_Closed;
                _hubConnection.Reconnecting -= HubConnection_Reconnecting;
                _hubConnection.Reconnected -= HubConnection_Reconnected;
                // HubConnection의 DisposeAsync 호출 (버전 확인, .NET Framework에서는 Task.Run 등 사용)
                Task.Run(async () => await _hubConnection.DisposeAsync());
            }
            GC.SuppressFinalize(this); // GC에게 Finalizer 호출 불필요 알림
        }
    }
}