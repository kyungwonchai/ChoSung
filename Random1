using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace KwLauncher2050
{
    /// <summary>
    /// JupyterStd1.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class JupyterStd1 : Window
    {
        public JupyterStd1()
        {
            InitializeComponent();
        }

        //   private const string FolderName = "C:\\jupyterbb";

        private const string FolderName = "jyputer99";
        private const string IniFileName = "settings.ini";

        Button _selectedButton;
        DispatcherTimer _timer;


        private void UpdateButtonColors(object sender, EventArgs e)
        {
            foreach (Button btn in ButtonPanel.Children)
            {
                if (btn.Content.ToString().Contains("버튼"))
                {
                    btn.Background = System.Windows.Media.Brushes.Black;
                    continue;
                }
                if (btn.Tag is DateTime lastSavedTime)
                {
                    var hoursElapsed = (DateTime.Now - lastSavedTime).TotalHours;
                    var daysElapsed = (DateTime.Now - lastSavedTime).TotalDays;

                    if (hoursElapsed <= 5) // 5시간 이내
                    {
                        btn.Background = System.Windows.Media.Brushes.White;
                    }
                    else if (daysElapsed <= 1) // 오늘
                    {
                        btn.Background = System.Windows.Media.Brushes.DeepSkyBlue;
                    }
                    else if (daysElapsed <= 2) // 1일 전
                    {
                        btn.Background = System.Windows.Media.Brushes.YellowGreen;
                    }
                    else if (daysElapsed <= 5) // 4일 전
                    {
                        btn.Background = System.Windows.Media.Brushes.Yellow;
                    }
                    else if (daysElapsed <= 8) // 7일 전
                    {
                        btn.Background = System.Windows.Media.Brushes.Orange;
                    }
                    else if (daysElapsed <= 15) // 14일 전
                    {
                        btn.Background = System.Windows.Media.Brushes.LightPink;
                    }
                }
            }
        }


        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            CreateFolder();
            CreateInitialFiles();
            GenerateButtons();


            //버튼색상 조정함
            _timer = new DispatcherTimer();
            _timer.Interval = TimeSpan.FromSeconds(1); // 1초마다 타이머 실행
            _timer.Tick += UpdateButtonColors;
            _timer.Start();


        }

        private void CreateFolder()
        {
            if (!Directory.Exists(FolderName))
            {
                Directory.CreateDirectory(FolderName);
            }
        }
        private void CreateInitialFiles()
        {
            string iniFilePath = Path.Combine(FolderName, IniFileName);
            if (!File.Exists(iniFilePath))
            {
                File.WriteAllText(iniFilePath, "Initialized");

                for (int i = 1; i <= 500; i++)
                {
                    string filePath = Path.Combine(FolderName, $"버튼{i}.ipynb");
                    if (!File.Exists(filePath))
                    {
                        JObject notebook = new JObject(
                            new JProperty("metadata", new JObject()),
                            new JProperty("nbformat", 4),
                            new JProperty("nbformat_minor", 4),
                            new JProperty("cells", new JArray())
                        );
                        File.WriteAllText(filePath, notebook.ToString());
                    }
                }
            }
        }





        private void GenerateButtons()
        {
            // 기존 버튼 제거
            ButtonPanel.Children.Clear();

            var directoryInfo = new DirectoryInfo(FolderName);

            var files = directoryInfo.GetFiles("*.ipynb")
                                    .OrderByDescending(f => f.LastWriteTime)
                                    .Select(f => f.FullName)
                                    .ToArray();

            foreach (var file in files)
            {
                string fileName = Path.GetFileNameWithoutExtension(file);

                TextBlock tooltipText = new TextBlock
                {
                    Text = fileName,
                    FontSize = 25  // 글꼴 크기를 크게 설정
                };
                Button newButton = new Button()
                {
                    Content = fileName,
                   
                    Height = 30,
                    ToolTip = tooltipText,  // TextBlock을 툴팁으로 설정
                    Margin = new Thickness(2),
                    Tag = File.GetLastWriteTime(file), // 파일의 최근 수정시간을 Tag에 설정
                    HorizontalAlignment = HorizontalAlignment.Left,
                    HorizontalContentAlignment = HorizontalAlignment.Left,
                    Foreground = System.Windows.Media.Brushes.Black
                };
                ToolTipService.SetInitialShowDelay(newButton, 0); // 툴팁이 즉시 표시되도록 지연 시간 설정

                // 이벤트 핸들러
                newButton.Click += async (sender, e) => await OnButtonClickAsync(sender, e);

                ButtonPanel.Children.Add(newButton);
            }
        }


        // 별도의 async 메서드
        private async Task OnButtonClickAsync(object sender, RoutedEventArgs e)
        {
            _selectedButton = sender as Button;
            string web22 = @"http://localhost:8888/notebooks/";

            if (File.Exists(Path.Combine(FolderName, _selectedButton.Content + ".ipynb")))
            {
                await webview21.EnsureCoreWebView2Async(null);
                webview21.CoreWebView2.Navigate($"{web22}{_selectedButton.Content}.ipynb");
            }
        }

        private void SortByTimeDescending(object sender, RoutedEventArgs e)
        {
            var sortedButtons = ButtonPanel.Children.OfType<Button>()
                .OrderBy(b => b.Content.ToString().StartsWith("버튼") ? 1 : 0)
                .ThenByDescending(b => File.GetLastWriteTime(Path.Combine(FolderName, b.Content + ".ipynb")))
                .ToList();
            RefreshButtonOrder(sortedButtons);
        }

        //오름차순
        private void SortByTimeAscending(object sender, RoutedEventArgs e)
        {
            var sortedButtons = ButtonPanel.Children.OfType<Button>()
                .OrderBy(b => b.Content.ToString().StartsWith("버튼") ? 1 : 0)
                .ThenBy(b => File.GetLastWriteTime(Path.Combine(FolderName, b.Content + ".ipynb")))
                .ToList();
            RefreshButtonOrder(sortedButtons);
        }

        //이름이 버튼인건 뺴고 오름차순 정렬
        private void SortByNameAscending(object sender, RoutedEventArgs e)
        {
            var sortedButtons = ButtonPanel.Children.OfType<Button>()
                .OrderBy(b => b.Content.ToString().StartsWith("버튼") ? 1 : 0)
                .ThenBy(b => b.Content.ToString())
                .ToList();
            RefreshButtonOrder(sortedButtons);
        }

        private void RefreshButtonOrder(List<Button> sortedButtons)
        {
            ButtonPanel.Children.Clear();
            foreach (var btn in sortedButtons)
            {
                ButtonPanel.Children.Add(btn);
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            GenerateButtons();
        }

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            Task.Run(() => StartJupyterServer()).ContinueWith(t => ExecuteFunctionB());

        }
        private void StartJupyterServer()
        {
            var runningNotebookProcesses = Process.GetProcessesByName("jupyter-notebook");
            if (!runningNotebookProcesses.Any())
            {
                ProcessStartInfo startInfo = new ProcessStartInfo
                {
                    FileName = "cmd.exe",
                    Arguments = "/C jupyter notebook --no-browser",
                    UseShellExecute = false,
                    CreateNoWindow = true
                };

                Process process = new Process
                {
                    StartInfo = startInfo
                };

                process.Start();
            }

            WaitForServerToBeReady();
        }

        // 서버가 준비될 때까지 기다리는 메서드
        private void WaitForServerToBeReady()
        {
            using (HttpClient client = new HttpClient())
            {
                while (true)
                {
                    try
                    {
                        // Jupyter Notebook 서버의 상태를 확인
                        var response = client.GetAsync("http://localhost:8888").Result;
                        if (response.IsSuccessStatusCode)
                        {
                            // 서버가 준비되었으므로 루프를 종료
                            break;
                        }
                    }
                    catch (Exception)
                    {
                        // 예외가 발생하면 무시하고 계속 기다립니다.
                    }

                    // 2초 동안 대기
                    Thread.Sleep(2000);
                }
            }
        }

        private void ExecuteFunctionB()
        {
            MessageBox.Show("서버실행완료");
        }
    }


}
