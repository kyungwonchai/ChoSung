어를 실행하고 결과를 받아오는 함수를 작성하겠습니다.

1. 파이썬 함수 코드 (subprocess 사용)
python
코드 복사
import subprocess

def run_adb_command(command: str) -> str:
    """
    ADB 명령어를 실행하고 결과를 반환하는 함수.

    Args:
        command (str): 실행할 ADB 명령어 (예: 'adb devices')

    Returns:
        str: 명령어 실행 결과 문자열
    """
    try:
        # ADB 명령어 실행
        result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        # 실행 결과 확인
        if result.returncode == 0:
            # 정상적으로 실행된 경우 (stdout 리턴)
            return result.stdout.strip()
        else:
            # 오류가 발생한 경우 (stderr 리턴)
            return f"Error: {result.stderr.strip()}"

    except Exception as e:
        return f"Exception: {str(e)}"

# 예제 사용법
command = "adb devices"
output = run_adb_command(command)
print(output)
2. 함수 설명
subprocess.run()을 사용하여 ADB 명령어를 실행합니다.

shell=True: Windows, Linux 모두에서 명령어를 문자열로 실행할 수 있게 합니다.

stdout=subprocess.PIPE: 명령어 실행 결과를 파이프를 통해 받아옵니다.

stderr=subprocess.PIPE: 오류 메시지를 파이프로 받아옵니다.

text=True: 출력 결과를 문자열로 받도록 설정합니다.

result.returncode: 0이면 성공, 0이 아니면 오류로 판단합니다.

strip(): 응답의 앞뒤 공백 제거.

3. 함수 사용 예제
ADB 연결된 기기 확인
python
코드 복사
output = run_adb_command("adb devices")
print(output)
특정 기기에서 앱 목록 가져오기 (기기 ID 지정)
python
코드 복사
device_id = "YOUR_DEVICE_ID"
output = run_adb_command(f"adb -s {device_id} shell pm list packages")
print(output)
앱 설치하기
python
코드 복사
output = run_adb_command("adb install your_app.apk")
print(output)
앱 실행하기
python
코드 복사
output = run_adb_command("adb shell am start -n com.example.yourapp/.MainActivity")
print(output)
4. 주의사항
ADB가 설치되어 있고 adb 명령어가 실행 가능한 환경인지 확인하십시오.

adb devices 명령어를 실행했을 때 기기가 리스트에 표시되어야 합니다.

Python에서 ADB 경로가 설정되지 않았다면, adb 경로를 풀 경로로 지정하세요. 예: C:\\adb\\adb.exe.
