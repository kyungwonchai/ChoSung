당 문제는 Intent와 관련된 것일 수 있습니다. Intent로 전달되는 데이터가 null일 때 발생할 수 있습니다. 우선, Intent를 사용하지 않도록 하여 단순히 Foreground Service를 실행해 봅시다. QRBarcodeService의 onStartCommand 메서드를 추가하여 서비스가 시작될 때 설정을 하도록 합니다.

수정된 전체 코드
1. AndroidManifest.xml 파일 수정

xml
코드 복사
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.FOREGROUND_SERVICE" />

<application
    android:allowBackup="true"
    android:label="@string/app_name"
    android:icon="@mipmap/ic_launcher"
    android:roundIcon="@mipmap/ic_launcher_round"
    android:supportsRtl="true"
    android:theme="@style/AppTheme">
    <service
        android:name=".QRBarcodeService"
        android:foregroundServiceType="camera" />
    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>
2. QRBarcodeService.kt 작성

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.media.RingtoneManager
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.CompoundBarcodeView
import java.sql.DriverManager

class QRBarcodeService : Service() {

    private lateinit var barcodeView: CompoundBarcodeView

    override fun onCreate() {
        super.onCreate()
        try {
            barcodeView = CompoundBarcodeView(this)
            barcodeView.decodeContinuous(object : BarcodeCallback {
                override fun barcodeResult(result: BarcodeResult?) {
                    result?.let {
                        val qrCodeData = it.text
                        // MSSQL 데이터베이스에 저장
                        saveToDatabase(qrCodeData)
                        // 소리 재생
                        playSound()
                    }
                }

                override fun possibleResultPoints(resultPoints: MutableList<com.google.zxing.ResultPoint>?) {}
            })
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error in onCreate", e)
        }
    }

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        startForegroundService()
        return START_STICKY
    }

    private fun startForegroundService() {
        try {
            val channelId = "QRBarcodeServiceChannel"
            val channelName = "QR Barcode Service"
            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
                notificationManager.createNotificationChannel(channel)
            }
            val notification: Notification = NotificationCompat.Builder(this, channelId)
                .setContentTitle("QR Barcode Service")
                .setContentText("Scanning for QR codes and barcodes in the background")
                .setSmallIcon(R.drawable.ic_launcher_foreground)
                .build()
            startForeground(1, notification)
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error starting foreground service", e)
        }
    }

    private fun saveToDatabase(data: String) {
        Thread {
            try {
                // JDBC URL
                val connectionUrl = "jdbc:sqlserver://<SERVER_IP>:<PORT>;databaseName=QRCodeScannerDB;user=<USER>;password=<PASSWORD>"

                // 데이터베이스 연결
                val connection = DriverManager.getConnection(connectionUrl)

                // SQL 쿼리
                val statement = connection.createStatement()
                val sql = "INSERT INTO ScannedData (QRCodeData) VALUES ('$data')"

                // 쿼리 실행
                statement.executeUpdate(sql)

                // 연결 종료
                statement.close()
                connection.close()
            } catch (e: Exception) {
                Log.e("QRBarcodeService", "Error saving to database", e)
            }
        }.start()
    }

    private fun playSound() {
        try {
            val notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
            val r = RingtoneManager.getRingtone(applicationContext, notification)
            r.play()
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error playing sound", e)
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
3. MainActivity.kt 작성

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val serviceIntent = Intent(this, QRBarcodeService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)

        // 메인 액티비티를 백그라운드로 전환
        moveTaskToBack(true)
    }
}
4. activity_main.xml 작성

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="QR and Barcode Scanner Running in Background"
        android:layout_centerInParent="true"/>
</RelativeLayout>
MSSQL 데이터베이스와의 연동
1. MSSQL 데이터베이스 설정

MSSQL 서버가 실행 중인지 확인하고, 애플리케이션에서 사용할 데이터베이스와 테이블을 생성합니다.
sql
코드 복사
CREATE DATABASE QRCodeScannerDB;
GO

USE QRCodeScannerDB;
GO

CREATE TABLE ScannedData (
    ID INT PRIMARY KEY IDENTITY(1,1),
    QRCodeData NVARCHAR(255),
    ScannedAt DATETIME DEFAULT GETDATE()
);
결론
위의 코드는 QR 코드 스캔 애플리케이션을 백그라운드에서 실행하도록 설정하고, Foreground Service를 사용하여 QR코드를 스캔하고 데이터를 MSSQL 데이터베이스에 저장합니다. Intent와 관련된 오류를 방지하기 위해 onStartCommand 메서드를 추가하여 서비스를 시작하도록 했습니다.

앱을 실행하고 Logcat을 확인하여 발생하는 로그를 통해 추가적인 디버깅을 할 수 있습니다. 문제가 계속 발생하면, 발