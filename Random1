는 MSSQL 2014에 저장된 프로시저(PTestA, PTestB, PRealA, PRealB)를 호출하여 데이터를 읽고, 첫 열은 날짜/시간 값이고 나머지는 실수 데이터로 처리하는 Python 코드를 제공합니다. 데이터를 읽은 후 DataFrame으로 변환하고 머신러닝 모델에 사용할 수 있도록 수정한 전체 코드를 작성하였습니다.

전체 코드
python
코드 복사
import numpy as np
import pandas as pd
import pymssql
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt


# 1. 데이터베이스에서 데이터 읽기 함수
def fetch_data_from_procedure(proc_name, connection_details):
    """
    MSSQL 저장 프로시저에서 데이터를 가져오는 함수.
    :param proc_name: 저장 프로시저 이름 (str).
    :param connection_details: 데이터베이스 연결 정보 (dict).
    :return: Pandas DataFrame.
    """
    try:
        conn = pymssql.connect(
            server=connection_details['server'],
            user=connection_details['user'],
            password=connection_details['password'],
            database=connection_details['database']
        )
        query = f"EXEC {proc_name}"  # 저장 프로시저 호출
        df = pd.read_sql(query, conn)  # 데이터를 Pandas DataFrame으로 변환
        conn.close()
        return df
    except Exception as e:
        print(f"Database connection failed: {e}")
        return pd.DataFrame()


# 2. DB 연결 정보
connection_details = {
    "server": "localhost",
    "user": "your_username",
    "password": "your_password",
    "database": "your_database"
}

# 3. 데이터 읽기
df_test_a = fetch_data_from_procedure("PTestA", connection_details)
df_test_b = fetch_data_from_procedure("PTestB", connection_details)
df_real_a = fetch_data_from_procedure("PRealA", connection_details)
df_real_b = fetch_data_from_procedure("PRealB", connection_details)

# 4. 데이터 준비
if df_test_a.empty or df_test_b.empty or df_real_a.empty or df_real_b.empty:
    print("No data available. Check your procedures or database connection.")
    exit()

# 날짜/시간 컬럼 제외 후 실수 데이터 추출
data_a = df_test_a.iloc[:, 1:].values[:4]  # TestA에서 첫 열 제외 후 4개의 실수값
data_b = df_test_b.iloc[:, 1:].values[:4]  # TestB에서 첫 열 제외 후 4개의 실수값
data = np.concatenate([data_a, data_b])  # 총 8개의 값

real_a = df_real_a.iloc[:, 1:].values[:4]  # RealA에서 첫 열 제외 후 4개의 실수값
real_b = df_real_b.iloc[:, 1:].values[:4]  # RealB에서 첫 열 제외 후 4개의 실수값
real_data = np.concatenate([real_a, real_b])

# 모델 리스트
models = {
    "RandomForest": RandomForestRegressor(),
    "LinearRegression": LinearRegression(),
    "SVR": SVR(kernel="linear")
}

# 5. 최적 모델 찾기
best_models = []
errors = []
for i in range(8):
    # i번째 값을 제외한 나머지 7개 값으로 학습 데이터 구성
    X = np.delete(data, i).reshape(-1, 1)  # 7개의 값
    y = np.delete(data, np.arange(len(data)) != i)  # 예측 대상 (1개의 값)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # 각 모델로 학습 및 평가
    best_model = None
    best_error = float("inf")
    for model_name, model in models.items():
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)
        error = mean_squared_error(y_test, predictions)
        
        if error < best_error:
            best_error = error
            best_model = model_name
    
    best_models.append(best_model)
    errors.append(best_error)

# 결과 출력
print("Best model for each data point:", best_models)
print("Errors for each model:", errors)

# 6. 실시간 모니터링
avg_errors = []
for sample in real_data.reshape(-1, 8):  # 새로운 데이터 샘플
    sample_errors = []
    for i, model_name in enumerate(best_models):
        model = models[model_name]
        X_sample = np.delete(sample, i).reshape(-1, 1)
        y_sample = sample[i]
        
        prediction = model.predict(X_sample)
        error = abs(prediction - y_sample)
        sample_errors.append(error)
    
    avg_error = np.mean(sample_errors)
    avg_errors.append(avg_error)

# 평균 오차의 변화 시각화
plt.plot(avg_errors, label="Average Prediction Error")
plt.xlabel("New Sample Index")
plt.ylabel("Average Error")
plt.legend()
plt.title("Real-time Monitoring of Prediction Errors")
plt.show()
코드 설명
1. 저장 프로시저 호출
fetch_data_from_procedure 함수는 주어진 프로시저 이름으로 데이터를 가져옵니다.
pymssql을 사용하여 EXEC 프로시저명 형식으로 실행하고 Pandas DataFrame으로 변환합니다.
2. 데이터 읽기
프로시저에서 반환된 데이터의 첫 열은 날짜/시간이고, 나머지는 실수 데이터로 가정합니다.
첫 열은 제외하고 필요한 실수값만 사용합니다:
python
코드 복사
data_a = df_test_a.iloc[:, 1:].values[:4]
3. 모델 학습 및 평가
각 데이터 점(총 8개)에 대해 한 값을 제외한 나머지 7개의 값으로 학습 데이터를 생성합니다.
RandomForest, LinearRegression, SVR 세 가지 모델로 예측 성능을 비교하고 가장 낮은 MSE(Mean Squared Error)를 가진 모델을 선택합니다.
4. 실시간 모니터링
real_data를 기반으로 예측 오차를 계산하여 평균 오차의 변화를 추적합니다.
5. 시각화
실시간 모니터링 결과를 matplotlib로 시각화하여 오차의 변화를 확인합니다.
필요한 사용자 설정
DB 연결 정보
connection_details의 값을 사용자 MSSQL 서버 환경에 맞게 수정하세요.
프로시저 이름