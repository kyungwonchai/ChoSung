네, 1부터 50000까지의 숫자를 아주 빠르게 섞어 보여주고, 버튼으로 멈추거나 다시 시작할 수 있는 웹 애플리케케이션을 Flask와 JavaScript를 사용하여 구현해 보겠습니다.

Flask는 백엔드에서 숫자 생성 및 셔플을 처리하고, JavaScript는 프론트엔드에서 그 숫자를 받아서 아주 빠르게 화면에 표시하고 버튼 이벤트를 처리하는 방식입니다.

Flask와 JavaScript를 함께 사용하는 이유:

Flask: 웹 서버를 구동하고, 요청에 따라 숫자를 섞어서 클라이언트로 전달하는 역할을 합니다.
JavaScript: 브라우저 상에서 동작하며, Flask로부터 받은 섞인 숫자 목록을 가져와서 setInterval 등을 이용하여 DOM 요소를 아주 빠르게 업데이트합니다. 이렇게 해야 웹 페이지 전체를 새로고침하지 않고도 숫자만 빠르게 바뀌는 것처럼 보이게 할 수 있습니다. 스트림릿만으로는 실시간에 가까운 DOM 요소의 매우 빠른 업데이트를 구현하는 데 제약이 있습니다.
프로젝트 설정:

Flask 설치:

Bash

pip install Flask
프로젝트 폴더 생성:
프로젝트 폴더를 만들고 그 안에 app.py 파일과 templates 폴더를 만듭니다. templates 폴더 안에는 index.html 파일을 만듭니다.

my_shuffler/
├── app.py
└── templates/
    └── index.html
코드:

app.py (Flask 애플리케이션)

Python

from flask import Flask, render_template, jsonify, request
import random
import time

app = Flask(__name__)

# 숫자를 저장할 전역 변수 (간단한 예제용)
# 실제 서비스에서는 메모리 관리나 멀티유저 동시 접근 등을 고려해야 할 수 있습니다.
shuffled_numbers = []

@app.route('/')
def index():
    """메인 페이지 렌더링"""
    return render_template('index.html')

@app.route('/start_shuffling', methods=['POST'])
def start_shuffling():
    """
    숫자 목록을 생성하고 섞은 후 클라이언트로 전송합니다.
    """
    global shuffled_numbers
    # 1부터 50000까지 숫자 목록 생성
    all_numbers = list(range(1, 50001))
    # 숫자를 무작위로 섞기
    random.shuffle(all_numbers)
    shuffled_numbers = all_numbers

    # 섞인 숫자 목록을 JSON 형태로 응답
    return jsonify({'numbers': shuffled_numbers})

@app.route('/stop_shuffling', methods=['POST'])
def stop_shuffling():
    """
    클라이언트에서 셔플 중지를 알리는 요청을 처리합니다.
    (이 예제에서는 클라이언트의 JS 인터벌만 멈추므로, 서버에서는 특별히 할 일은 없습니다)
    """
    # 서버에서는 특별히 상태를 유지할 필요는 없지만,
    # 요청을 받았음을 알리는 응답을 보낼 수 있습니다.
    return jsonify({'status': 'stopped'})

if __name__ == '__main__':
    # 디버그 모드 활성화 (개발 시 편리)
    # host='0.0.0.0' 설정 시 외부 접속 허용 (주의 필요)
    app.run(debug=True)

templates/index.html (HTML 및 JavaScript)

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>빠른 숫자 셔플러</title>
    <style>
        body {
            font-family: sans-serif;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 80vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #display-number {
            font-size: 8em; /* 숫자를 크게 표시 */
            font-weight: bold;
            margin-bottom: 30px;
            color: #333;
            min-width: 300px; /* 숫자가 바뀌어도 레이아웃이 크게 흔들리지 않도록 최소 너비 설정 */
            text-align: center;
        }
        .controls button {
            font-size: 1.5em;
            padding: 10px 20px;
            margin: 0 10px;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h1>빠른 숫자 셔플</h1>

    <div id="display-number">준비</div>

    <div class="controls">
        <button id="start-button">시작</button>
        <button id="stop-button" disabled>정지</button>
    </div>

    <script>
        let shuffledNumbers = []; // 셔플된 숫자를 저장할 배열
        let currentIndex = 0;     // 현재 표시 중인 숫자의 인덱스
        let intervalId = null;    // setInterval ID를 저장하여 정지할 때 사용

        const displayNumberElement = document.getElementById('display-number');
        const startButton = document.getElementById('start-button');
        const stopButton = document.getElementById('stop-button');

        // 숫자를 업데이트하는 함수
        function updateDisplay() {
            if (currentIndex < shuffledNumbers.length) {
                displayNumberElement.textContent = shuffledNumbers[currentIndex];
                currentIndex++;
            } else {
                // 목록의 끝에 도달하면 자동으로 정지
                stopShuffling();
                displayNumberElement.textContent = "완료!";
            }
        }

        // 셔플 시작 함수
        async function startShuffling() {
            startButton.disabled = true;
            stopButton.disabled = false;
            displayNumberElement.textContent = "섞는 중...";

            try {
                // Flask 백엔드에 셔플 시작 요청
                const response = await fetch('/start_shuffling', { method: 'POST' });
                const data = await response.json();

                if (data.numbers) {
                    shuffledNumbers = data.numbers;
                    currentIndex = 0;

                    // 1ms 간격으로 숫자를 빠르게 업데이트 (브라우저 성능에 따라 달라질 수 있습니다)
                    // requestAnimationFrame 을 사용하여 더 부드러운 애니메이션 구현도 가능
                    intervalId = setInterval(updateDisplay, 1); // 숫자를 바꾸는 속도 (밀리초)
                } else {
                    displayNumberElement.textContent = "오류: 숫자를 가져오지 못했습니다.";
                    startButton.disabled = false;
                    stopButton.disabled = true;
                }

            } catch (error) {
                console.error('Error starting shuffling:', error);
                displayNumberElement.textContent = "시작 중 오류 발생";
                startButton.disabled = false;
                stopButton.disabled = true;
            }
        }

        // 셔플 정지 함수
        function stopShuffling() {
            clearInterval(intervalId); // setInterval 멈추기
            intervalId = null;
            startButton.disabled = false;
            stopButton.disabled = true;

            // Flask 백엔드에 정지 알림 (선택 사항, 여기서는 클라이언트 상태만 변경)
            fetch('/stop_shuffling', { method: 'POST' }).catch(error => console.error('Error notifying stop:', error));
        }

        // 이벤트 리스너 연결
        startButton.addEventListener('click', startShuffling);
        stopButton.addEventListener('click', stopShuffling);

        // 초기 상태 설정
        stopButton.disabled = true;

    </script>

</body>
</html>
실행 방법:

위에서 생성한 my_shuffler 폴더로 이동합니다.
터미널 또는 명령 프롬프트에서 다음 명령어를 실행합니다:
Bash

python app.py
Flask 개발 서버가 시작되면 터미널에 표시되는 주소 (보통 http://127.0.0.1:5000/)로 웹 브라우저에서 접속합니다.
동작 설명:

웹 페이지에 접속하면 "준비" 상태로 표시되고 "시작" 버튼만 활성화됩니다.
"시작" 버튼 클릭:
JavaScript에서 /start_shuffling 엔드포인트로 POST 요청을 보냅니다.
Flask 백엔드에서 1부터 50000까지의 숫자 목록을 생성하고 random.shuffle()로 섞습니다.
섞인 숫자 목록을 JSON 형태로 응답합니다.
JavaScript는 이 JSON 응답을 받아 shuffledNumbers 배열에 저장합니다.
setInterval(updateDisplay, 1) 함수를 호출하여 1ms 간격으로 updateDisplay 함수를 반복 실행합니다.
updateDisplay 함수는 shuffledNumbers 배열에서 순서대로 숫자를 가져와 <div id="display-number"> 요소의 내용을 업데이트합니다. currentIndex가 빠르게 증가하면서 숫자가 매우 빠르게 바뀌는 것처럼 보이게 됩니다.
"시작" 버튼은 비활성화되고 "정지" 버튼이 활성화됩니다.
"정지" 버튼 클릭:
JavaScript에서 clearInterval(intervalId)를 호출하여 updateDisplay 함수의 반복 실행을 멈춥니다.
화면에 마지막으로 표시되었던 숫자가 그대로 남게 됩니다.
"정지" 버튼은 비활성화되고 "시작" 버튼이 다시 활성화됩니다. /stop_shuffling 엔드포인트로 요청을 보내지만, 이 예제에서는 주로 클라이언트 상태 관리를 위해 사용됩니다.
다시 "시작" 버튼 클릭:
다시 /start_shuffling 엔드포인트에 요청을 보내 Flask로부터 새롭게 섞인 숫자 목록을 받아옵니다.