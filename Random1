 하는 경우를 위한 수정된 코드를 제공하겠습니다. 이 코드는 이상 현상이 감지되면 카운트를 유지하고, 연속적으로 이상 현상이 감지될 때만 로그를 작성하고 MSSQL에 업데이트합니다.

python
Copy code
import pymssql
import pandas as pd
from datetime import datetime
from sklearn.ensemble import IsolationForest  # 이상 감지에 사용할 머신러닝 모델

# MSSQL 연결 정보 설정 (포트 지정 포함)
server = 'your_server'
port = 'your_port'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# MSSQL 서버에 연결
conn = pymssql.connect(server=server, port=port, user=username, password=password, database=database)

# 이상 감지 모델 초기화
model = IsolationForest(contamination=0.05)  # contamination은 이상치 비율을 나타냅니다.

# 이상 현상 카운트 초기화
anomaly_count = 0

# 데이터 모니터링 루프
while True:
    # IP1, Model1, CT1 값을 조회하는 SQL 쿼리 작성
    sql_query = "SELECT IP1, Model1, CT1 FROM YourTable WHERE YourConditions"
    
    # 데이터베이스에서 데이터를 가져옵니다.
    df = pd.read_sql_query(sql_query, conn)
    
    # 데이터 프레임에서 CT1 컬럼 선택
    ct1_values = df['CT1'].values.reshape(-1, 1)
    
    # 이상 감지 모델로 이상치 감지
    anomalies = model.fit_predict(ct1_values)
    
    # 이상치가 감지된 경우 이상 현상 카운트 증가
    for anomaly in anomalies:
        if anomaly == -1:
            anomaly_count += 1
        else:
            anomaly_count = 0  # 정상 값일 경우 카운트 초기화
            
        # 이상 현상이 5회 이상 지속되고 그 이후에 계속 감지되면 로그 작성
        if anomaly_count >= 5:
            ip = row['IP1']
            model = row['Model1']
            ct = row['CT1']
            print(f"5회 이상 이상 현상 지속 - IP: {ip}, Model: {model}, CT1: {ct}, 시간: {datetime.now()}")
            # 여기에서 MSSQL에 로그를 작성하는 코드 추가
            
    # 일정 시간 간격으로 실행하려면 sleep 함수를 사용합니다.
    # 예: 5분마다 실행
    time.sleep(300)
이 코드는 연속된 이상 현상이 5회 이상 발생한 후에만 이상 현상을 감지하도록 되어 있습니다. 코드 내부에서 anomaly_count 변수를 사용하여 카운트를 유지하고, 이상 현상이 5회 이상 지속된 경우 로그를 작성하고 MSSQL에 업데이트합니다.





