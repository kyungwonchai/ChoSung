겠습니다. COM 포트를 체크하는 기능을 서브 윈도우로 구현하고, 메인 윈도우에서 버튼을 눌렀을 때 서브 윈도우가 열리도록 하겠습니다.

1. COMPortCheckerWindow 클래스 (서브 윈도우)
COMPortCheckerWindow.xaml
xml
코드 복사
<Window x:Class="COMPortCheckerApp.COMPortCheckerWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Checker" Height="350" Width="600">
    <Grid>
        <DataGrid Name="dataGrid" AutoGenerateColumns="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
        <Button Content="Refresh" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" Click="Refresh_Click"/>
    </Grid>
</Window>
COMPortCheckerWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Management;
using System.Windows;

namespace COMPortCheckerApp
{
    public partial class COMPortCheckerWindow : Window
    {
        public COMPortCheckerWindow()
        {
            InitializeComponent();
            RefreshCOMPorts();
        }

        private void Refresh_Click(object sender, RoutedEventArgs e)
        {
            RefreshCOMPorts();
        }

        private void RefreshCOMPorts()
        {
            List<COMPortInfo> comPorts = GetAllCOMPorts();
            dataGrid.ItemsSource = comPorts;
        }

        public List<COMPortInfo> GetAllCOMPorts()
        {
            List<COMPortInfo> comPorts = new List<COMPortInfo>();

            using (var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_SerialPort"))
            {
                foreach (var port in searcher.Get())
                {
                    COMPortInfo comPortInfo = new COMPortInfo
                    {
                        Name = port["DeviceID"].ToString(),
                        Description = port["Caption"].ToString(),
                        Status = port["Status"].ToString(),
                        IsInUse = IsPortInUse(port["DeviceID"].ToString())
                    };
                    comPorts.Add(comPortInfo);
                }
            }

            return comPorts;
        }

        private string IsPortInUse(string portName)
        {
            var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_Process");
            foreach (ManagementObject process in searcher.Get())
            {
                var processId = process["ProcessId"];
                var commandLine = process["CommandLine"];
                if (commandLine != null && commandLine.ToString().Contains(portName))
                {
                    return process["Name"].ToString();
                }
            }

            return "Available";
        }
    }

    public class COMPortInfo
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public string IsInUse { get; set; }
    }
}
2. MainWindow 클래스 (메인 윈도우)
메인 윈도우에서 버튼을 눌렀을 때 서브 윈도우가 열리도록 합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="COMPortCheckerApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Main Window" Height="200" Width="400">
    <Grid>
        <Button Content="Open COM Port Checker" HorizontalAlignment="Center" VerticalAlignment="Center" Click="OpenCOMPortChecker_Click"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace COMPortCheckerApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void OpenCOMPortChecker_Click(object sender, RoutedEventArgs e)
        {
            COMPortCheckerWindow comPortCheckerWindow = new COMPortCheckerWindow();
            comPortCheckerWindow.Show();
        }
    }
}
전체 프로젝트 구조
COMPortCheckerApp 프로젝트

MainWindow.xaml
MainWindow.xaml.cs
COMPortCheckerWindow.xaml
COMPortCheckerWindow.xaml.cs
패키지 참조

System.Management
결론
위와 같이 구성하면 메인 윈도우에 있는 버튼을 눌렀을 때, 서브 윈도우가 열리며 COM 포트를 확인할 수 있는 기능을 구현할 수 있습니다. 서브 윈도우에서 COM 포트를 확인하고, 각 포트가 사용 중인지 여부를 확인할 수 있습니