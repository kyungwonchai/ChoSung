버 소켓을 특정 IP 주소에 바인딩하려면, serverSocket.Bind 메서드에서 IPAddress.Any 대신 특정 IP 주소를 명시적으로 설정해야 합니다. 이렇게 하면 서버가 해당 IP 주소로만 연결 요청을 수락하게 됩니다.

서버 측 프로그램 수정
서버 측 프로그램을 수정하여 특정 IP 주소에 바인딩하는 방법을 설명하겠습니다.

MainWindow.xaml.cs (서버) 수정
다음은 특정 IP 주소에 소켓 서버를 바인딩하도록 수정된 코드입니다:

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Threading; // Dispatcher를 사용하기 위해 추가

namespace SocketServerApp
{
    public partial class MainWindow : Window
    {
        private Socket serverSocket;
        private byte[] buffer = new byte[1024];

        public MainWindow()
        {
            InitializeComponent();
            StartServer();
        }

        private void StartServer()
        {
            try
            {
                serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                // 특정 IP 주소와 포트를 지정하여 서버 소켓을 바인딩합니다.
                IPAddress ipAddress = IPAddress.Parse("서버의_특정_IP_주소"); // 예: "192.168.1.10"
                IPEndPoint localEndPoint = new IPEndPoint(ipAddress, 1433); // 원하는 포트를 지정합니다.

                serverSocket.Bind(localEndPoint);
                serverSocket.Listen(10);
                serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
                UpdateStatus("서버가 시작되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 시작 오류: {ex.Message}");
            }
        }

        private void AcceptCallback(IAsyncResult AR)
        {
            Socket clientSocket = serverSocket.EndAccept(AR);
            UpdateStatus("클라이언트가 연결되었습니다.");
            clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
        }

        private void ReceiveCallback(IAsyncResult AR)
        {
            Socket clientSocket = (Socket)AR.AsyncState;
            int received = clientSocket.EndReceive(AR);
            if (received > 0)
            {
                string data = Encoding.UTF8.GetString(buffer, 0, received);
                UpdateStatus($"받은 데이터: {data}");
                clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                listBox.Items.Add(message);
            }));
        }
    }
}
수정된 코드 설명
IP 주소 지정: IPAddress.Parse("서버의_특정_IP_주소") 부분에 서버가 바인딩될 IP 주소를 넣습니다. 예를 들어, "192.168.1.10"과 같은 로컬 IP 주소나 "127.0.0.1"과 같은 루프백 주소를 사용할 수 있습니다.

IPEndPoint 객체 생성: localEndPoint 객체는 지정된 IP 주소와 포트를 사용하여 소켓 서버를 설정합니다.

서버 소켓 바인딩: serverSocket.Bind(localEndPoint)를 호출하여 서버 소켓을 특정 IP와 포트에 바인딩합니다.

이후 절차 동일: 소켓을 바인딩한 후, 서버는 클라이언트의 연결을 대기하고 데이터를 수신합니다.

이렇게 수정된 코드를 사용하면 서버 소켓이 지정된 IP 주소에서만 클라이언트의 연결을 허용합니다. 이를 통해 네트워크 설정에 따른 제한을 구현하거나, 특정 네트워크 인터페이스를 통해서만 서버가 운영되도록 할 수 있습니다.

참고: 여러 네트워크 인터페이스를 가진 컴퓨터에서 특정 IP 주소를 지정하지 않으면, IPAddress.Any를 사용하여 모든 인터페이스에서의 연결을 수락하도록 설정할 수도 있습니다. 이 방법을 사용하면 서버가 모든 네트워크 어댑터에서 클라이언트 요청을 받을 수 있습니다.