Windows 서비스 에러 코드 1061은 "서비스를 중지하려고 시도할 때 문제가 발생했음을 나타내는 오류"입니다. 이 오류는 주로 서비스가 요청된 작업을 수행하는 중에 시스템이 명령을 처리하지 못했거나, 서비스가 예상치 못한 상태에 있는 경우 발생할 수 있습니다.

1061 에러의 일반적인 원인
동시에 중지 및 시작 명령이 발생: 서비스가 중지되기 전에 다른 스레드나 작업에서 서비스를 다시 시작하려고 시도하는 경우입니다. 예를 들어, 서비스가 중지 중일 때 프로그램에서 재시작을 요청하면 충돌이 발생할 수 있습니다.

서비스가 장기 작업 중인 경우: 서비스가 중지 요청을 받을 때 긴 작업을 수행 중이면, 중지 신호를 처리하지 못하고 응답하지 않는 상태가 될 수 있습니다.

서비스가 응답하지 않거나 정지됨: 서비스가 자체적으로 예외를 던지거나 비정상적으로 동작하여 운영 체제가 서비스와 통신할 수 없는 상태에 있을 수 있습니다.

서비스의 비정상 종료: 네임드 파이프나 기타 시스템 리소스를 사용하는 경우, 리소스가 제대로 해제되지 않아서 서비스가 비정상적으로 종료되었을 수 있습니다.

문제 해결 방법
중복된 서비스 제어 방지:

서비스가 이미 중지 중일 때, 재시작이나 추가 중지 요청을 방지하도록 합니다. 서비스의 OnStop 메서드에서 중복 명령을 처리하지 않도록 보호할 수 있습니다.
서비스의 상태 확인:

서비스가 종료 중에 긴 작업이나 비동기 작업을 수행하고 있는지 확인하고, 이러한 작업이 중단 신호를 제대로 처리하도록 합니다.
서비스 중지 타임아웃 설정:

서비스의 종료 시 타임아웃을 설정하여, 일정 시간이 지나도 종료되지 않으면 강제 종료하도록 합니다.
디버깅 로그 추가:

서비스의 시작과 종료, 중지 시점에 로그를 추가하여 문제가 발생하는 위치와 이유를 파악합니다.
코드 수정 예제
서비스의 OnStop 메서드를 수정하여 중복된 종료 요청을 방지하고, 필요한 경우 강제로 리소스를 해제하도록 수정해보겠습니다.

서비스 클래스 수정
csharp
코드 복사
using System;
using System.ServiceProcess;
using System.Threading.Tasks;

namespace RouterMiddleACRService
{
    public partial class RouterMiddleACRService : ServiceBase
    {
        private LogService _logService;
        private bool _isStopping = false; // 서비스 중지 상태를 나타내는 플래그

        public RouterMiddleACRService()
        {
            InitializeComponent();
            _logService = LogService.Instance;
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _isStopping = false; // 서비스가 시작되면 중지 상태 초기화
                _logService.Start();
                Console.WriteLine("RouterMiddleACRService started successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during OnStart: {ex.Message}");
            }
        }

        protected override void OnStop()
        {
            if (_isStopping)
            {
                Console.WriteLine("Service is already stopping. Ignoring additional stop request.");
                return;
            }

            try
            {
                _isStopping = true; // 중지 상태 설정

                // 로그 서비스 중지
                _logService.Stop();

                // 필요한 경우 작업을 강제 종료하도록 딜레이 설정
                Task.Delay(5000).Wait(); // 5초 동안 대기하여 모든 작업이 종료되도록 유도
                Console.WriteLine("RouterMiddleACRService stopped successfully.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during OnStop: {ex.Message}");
            }
            finally
            {
                _isStopping = false; // 중지 완료 후 상태 초기화
            }
        }
    }
}
코드 설명
_isStopping 플래그:

서비스가 이미 중지 중인지를 확인하는 플래그를 추가하여, 중복된 중지 요청을 방지합니다.
OnStop 메서드:

_isStopping 플래그를 확인하여 서비스가 이미 중지 중이라면 추가 중지 요청을 무시합니다.
로그 서비스의 종료를 시도하며, 서비스의 비정상적인 종료를 방지하기 위해 필요한 경우 작업을 강제로 종료하도록 타임아웃을 설정합니다.
예외 처리 및 로그:

서비스 시작 및 종료 시 예외가 발생하면 이를 로그로 기록하여, 문제의 원인을 쉽게 파악할 수 있도록 합니다.
추가적인 조치
서비스 상태 확인: 서비스 관리자 도구에서 서비스 상태를 확인하고, "중지 중" 상태에서 멈춰있는 경우 명령어(net stop <서비스 이름> 또는 sc query <서비스 이름>)를 사용하여 강제로 종료할 수 있습니다.
서비스 재설치: 서비스가 비정상적으로 설치되었거나 구성 파일이 손상된 경우, 서비스를 재설치하는 것도 방법입니다.
로그 분석: 시스템 이벤트 뷰어나 서비스에서 생성된 로그를 분석하여, 문제가 발생한 원인을 파악하고 수정할 수 있습니다.
이와 같은 방법으로 서비스의 안정성을 높이고, 예상치 못한 충돌을 방지할 수 있습니다