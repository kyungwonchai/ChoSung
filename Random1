# FILE_ID: streamlit/locker_app_20250411174100
import streamlit as st
import pymssql
import pandas as pd
import time # 새로고침 효과용 (선택 사항)

# --- DB 연결 정보 (실제 환경에서는 Secrets 사용 권장) ---
DB_SERVER = "YOUR_SERVER_NAME" # 예: 192.168.1.100 또는 SERVERNAME\SQLEXPRESS
DB_DATABASE = "LockerManagementDB"
DB_USER = "your_db_username"
DB_PASSWORD = "your_db_password"
# ---------------------------------------------------------

# 페이지 기본 설정
st.set_page_config(page_title="시생산 사물함관리", layout="wide")

# --- 데이터 로딩 함수 (캐싱 사용) ---
# 캐싱하여 필터링/검색 시 매번 DB 조회 방지
@st.cache_data(ttl=600) # 10분(600초) 동안 캐시 유지
def load_data():
    """데이터베이스에서 사물함 배정 데이터를 로드합니다."""
    conn = None # finally에서 사용하기 위해 미리 선언
    try:
        conn = pymssql.connect(server=DB_SERVER, user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE)
        query = "SELECT * FROM LockerAssignments ORDER BY Floor, Zone, SpecificLocation"
        df = pd.read_sql(query, conn)
        # SpecificLocation을 문자열로 변환 (혼합 정렬 대비)
        df['SpecificLocation'] = df['SpecificLocation'].astype(str)
        # 날짜 형식 변환 (선택 사항)
        if 'LastUpdated' in df.columns:
            df['LastUpdated'] = pd.to_datetime(df['LastUpdated']).dt.strftime('%Y-%m-%d %H:%M:%S')
        return df
    except Exception as e:
        st.error(f"데이터 로딩 중 오류 발생: {e}")
        return pd.DataFrame() # 오류 시 빈 DataFrame 반환
    finally:
        if conn:
            conn.close()

# --- UI 구성 ---
st.title("시생산 사물함관리")

# 데이터 로드 시도
df_full = load_data()

if df_full.empty:
    st.warning("데이터를 불러올 수 없거나 데이터가 없습니다.")
else:
    # --- 사이드바: 필터 및 검색 ---
    st.sidebar.header("필터 및 검색")

    # 새로고침 버튼
    if st.sidebar.button("새로고침"):
        st.cache_data.clear() # 캐시 지우기
        st.success("데이터를 새로고침했습니다!")
        time.sleep(1) # 메시지 표시 시간
        st.rerun() # 앱 재실행하여 데이터 다시 로드

    # 종류 필터
    locker_types = ["전체"] + sorted(df_full['LockerType'].unique())
    selected_type = st.sidebar.selectbox("종류 선택", locker_types)

    # 층 필터
    floors = ["전체"] + sorted(df_full['Floor'].unique())
    selected_floor = st.sidebar.selectbox("층 선택", floors)

    # 구역 필터
    zones = ["전체"] + sorted(df_full['Zone'].unique())
    selected_zone = st.sidebar.selectbox("구역 선택", zones)

    # 검색어 입력
    search_term = st.sidebar.text_input("검색어 입력")

    # --- 데이터 필터링 및 검색 ---
    df_filtered = df_full.copy()

    if selected_type != "전체":
        df_filtered = df_filtered[df_filtered['LockerType'] == selected_type]
    if selected_floor != "전체":
        df_filtered = df_filtered[df_filtered['Floor'] == selected_floor]
    if selected_zone != "전체":
        df_filtered = df_filtered[df_filtered['Zone'] == selected_zone]

    if search_term:
        # 검색 대상 컬럼 지정 (필요에 따라 수정)
        search_columns = ['LockerType', 'Floor', 'Zone', 'SpecificLocation', 'UserName', 'KnoxId', 'SubPart', 'Administrator', 'TransferStatus', 'Details', 'Remarks', 'Notes']
        # 문자열 컬럼에 대해서만 검색 수행
        df_filtered = df_filtered[
            df_filtered[search_columns].apply(
                lambda row: row.astype(str).str.contains(search_term, case=False, na=False).any(),
                axis=1
            )
        ]

    # --- 메인 화면: 필터링된 데이터 표시 ---
    st.write(f"총 {len(df_filtered)}개의 결과")
    # DataFrame 표시 (인덱스 숨김)
    st.dataframe(df_filtered.reset_index(drop=True), use_container_width=True)

```

**코드 설명 및 사용법:**

1.  **DB 연결 정보 수정:** 코드 상단의 `DB_SERVER`, `DB_DATABASE`, `DB_USER`, `DB_PASSWORD` 변수 값을 실제 환경에 맞게 수정합니다. (보안을 위해 Streamlit Secrets 사용 권장)
2.  **실행 (Ubuntu 터미널):**
    ```bash
    streamlit run locker_app.py
    ```
3.  **사용:** 웹 브라우저가 열리면서 애플리케이션이 실행됩니다.
    * 왼쪽 사이드바에서 종류, 층, 구역 필터를 선택하거나 검색어를 입력하여 데이터를 필터링할 수 있습니다.
    * "새로고침" 버튼을 누르면 데이터베이스에서 최신 데이터를 다시 불러옵니다.
    * 메인 영역에는 필터링/검색된 사물함 목록이 표 형태로 나타납니다.

**참고:**

* `SpecificLocation` 컬럼은 데이터베이스에서 `INT` 타입으로 변경되었을 수 있으나, 문자/숫자 혼합 가능성을 고려하여 코드에서는 `astype(str)`로 문자열로 변환 후 필터링합니다. 정렬은 현재 기본 정렬을 따릅니다. (복합 정렬 필요 시 추가 구현 필요)
* 이 코드는 **읽기 전용**입니다. 데이터 수정/추가/삭제 기능은 포함되어 있지 않습니다.
* 데이터 양이 매우 많을 경우 로딩 및 필터링 성능에 영향을 줄 수 있습니다.