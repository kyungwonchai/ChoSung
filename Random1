import bpy
import time
import math

# 기존 오브젝트 삭제
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# 시뮬레이션 변수 설정
supply_interval = 1  # 공급 간격 (초)
process_interval = 2  # 처리 간격 (초)
max_queue = 5  # 최대 큐 길이

# 컨베이어 벨트 생성
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))
belt = bpy.context.object
belt.name = "ConveyorBelt"
belt.scale[0] = 4  # x 축으로 넓히기
belt.scale[1] = 0.5  # y 축으로 줄이기
belt.location.z = -0.1  # 바닥에 맞추기

# 물품 생성 함수
def create_item(index, start_location=(0, -2, 0)):
    bpy.ops.mesh.primitive_cube_add(size=0.5, location=start_location)
    item = bpy.context.object
    item.name = f"Item_{index}"
    return item

# 시뮬레이션 변수 초기화
queue = []
wait_times = []

# 애니메이션 설정
frame_interval = 24  # Blender에서 24 fps 기준, 초당 24 프레임
start_frame = 0

for i in range(20):  # 총 20개의 물품을 공급
    # 물품 공급
    item = create_item(i)
    queue.append(item)
    
    # 물품을 컨베이어 벨트 위로 이동시키는 애니메이션
    item_start_frame = start_frame + (i * supply_interval * frame_interval)
    item_end_frame = item_start_frame + (process_interval * frame_interval)
    
    item.location = (0, -2, 0)
    item.keyframe_insert(data_path="location", frame=item_start_frame)
    
    # 컨베이어 위로 이동
    item.location = (0, 2, 0)
    item.keyframe_insert(data_path="location", frame=item_end_frame)
    
    # 스택 쌓기 애니메이션
    if len(queue) > max_queue:
        # 큐가 가득 찼으면 가장 먼저 들어온 물품 제거
        old_item = queue.pop(0)
        # 이미 쌓인 물품을 스택 위로 올리기
        stack_z = 0.5 * len(wait_times)
        old_item.location = (2, 0, stack_z)
        old_item.keyframe_insert(data_path="location", frame=item_end_frame + frame_interval)
        
        # 대기 시간 기록
        wait_times.append((old_item.name, item_end_frame - item_start_frame))
    
    time.sleep(supply_interval)  # 실제로는 시간 간격을 맞추기 위해 사용하지만, Blender에선 프레임으로 조정

print("Simulation completed.")
print("Wait times:", wait_times)
