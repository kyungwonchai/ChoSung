겠습니다. WPF 응용 프로그램으로 파일 시스템의 변경 사항을 감지하고, 어떤 프로세스가 파일이나 폴더를 삭제했는지 리스트박스에 표시하는 예제를 제공하겠습니다.

단계별 구현
WPF 인터페이스 설정: XAML 파일에서 UI 요소를 정의합니다.
FileSystemWatcher 및 WMI 설정: 코드 비하인드에서 파일 시스템 변경 사항을 감지하고 삭제된 파일을 찾는 프로세스를 감지합니다.
1. MainWindow.xaml
xml
코드 복사
<Window x:Class="FolderMonitor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Folder Monitor" Height="350" Width="525">
    <Grid>
        <ListBox x:Name="ProcessListBox" HorizontalAlignment="Left" Height="300" VerticalAlignment="Top" Width="500"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Windows;
using System.Windows.Threading;

namespace FolderMonitor
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher watcher;
        private readonly string folderPath = @"C:\YourFolder"; // 감시할 폴더 경로를 설정하세요

        public MainWindow()
        {
            InitializeComponent();
            InitializeWatcher();
        }

        private void InitializeWatcher()
        {
            watcher = new FileSystemWatcher
            {
                Path = folderPath,
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.DirectoryName,
                Filter = "*.*"
            };

            watcher.Deleted += OnDeleted;
            watcher.EnableRaisingEvents = true;
        }

        private void OnDeleted(object sender, FileSystemEventArgs e)
        {
            string filePath = e.FullPath;
            Console.WriteLine($"File Deleted: {filePath}");

            // 삭제 이벤트 발생 시 WMI를 통해 삭제한 프로세스를 찾습니다.
            FindDeletingProcess(filePath);
        }

        private void FindDeletingProcess(string deletedFilePath)
        {
            string query = $"SELECT * FROM __InstanceOperationEvent WITHIN 1 WHERE TargetInstance ISA 'CIM_DataFile' AND TargetInstance.Name = '{deletedFilePath.Replace("\\", "\\\\")}'";

            ManagementEventWatcher watcher = new ManagementEventWatcher(@"\\.\root\cimv2", query);
            watcher.EventArrived += new EventArrivedEventHandler((sender, e) =>
            {
                ManagementBaseObject obj = (ManagementBaseObject)e.NewEvent["TargetInstance"];
                uint processId = (uint)obj["Handle"];

                try
                {
                    Process process = Process.GetProcessById((int)processId);
                    string message = $"Process {process.ProcessName} (ID: {processId}) deleted the file {deletedFilePath}";

                    // UI 스레드에서 리스트박스에 메시지를 추가합니다.
                    Dispatcher.Invoke(() =>
                    {
                        ProcessListBox.Items.Add(message);
                    });
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error finding process: {ex.Message}");
                }
            });

            watcher.Start();
        }
    }
}
코드 설명
MainWindow.xaml:

ListBox 요소를 추가하여 삭제된 파일과 프로세스 정보를 표시합니다.
MainWindow.xaml.cs:

FileSystemWatcher를 사용하여 폴더의 파일 및 폴더 삭제 이벤트를 감지합니다.
파일이 삭제될 때마다 OnDeleted 이벤트 핸들러가 호출됩니다.
FindDeletingProcess 메서드에서 WMI 쿼리를 사용하여 파일을 삭제한 프로세스를 찾습니다.
삭제한 프로세스 정보를 ListBox에 추가합니다.
이 코드는 지정된 폴더에서 파일이나 폴더가 삭제될 때, 해당 작업을 수행한 프로세스를 감지하고, 이를 리스트박스에 표시합니다. 이렇게 하면 어떤 프로세스가 파일을 삭제했는지 쉽게 추적할 수 있습니다.

이 코드를 실행하려면 "C:\YourFolder" 경로를 원하는 감시 경로로 변경하면 됩니다. WPF 프로젝트를 생성한 후 MainWindow.xaml과 MainWindow.xaml.cs 파일