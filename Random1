부분을 보완하여 전체 코드를 드리겠습니다.

    MainPage.xaml (XAML)

xaml

<Window x:Class="DataGridAuthorization.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="DataGrid Authorization" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Button Name="btnA" Content="Button A" Command="{Binding ButtonAClickCommand}" />
            <Button Name="btnB" Content="Button B" Command="{Binding ButtonBClickCommand}" />
            <Button Name="btnC" Content="Button C" Command="{Binding ButtonCClickCommand}" />
            <Button Name="btnD" Content="Button D" Command="{Binding ButtonDClickCommand}" />
        </StackPanel>
        <dxe:GridControl Name="gridControl1" AutoGenerateColumns="AddNew" Margin="10,50,10,10" ItemsSource="{Binding SampleDataList}">
            <dxe:GridControl.Columns>
                <dxe:GridColumn FieldName="ColumnA" ReadOnly="{Binding ReadOnlyColumnA}" />
                <dxe:GridColumn FieldName="ColumnB" ReadOnly="{Binding ReadOnlyColumnB}" />
                <dxe:GridColumn FieldName="ColumnC" ReadOnly="{Binding ReadOnlyColumnC}" />
                <dxe:GridColumn FieldName="ColumnD" ReadOnly="{Binding ReadOnlyColumnD}" />
                <dxe:GridColumn FieldName="ColumnE" ReadOnly="{Binding ReadOnlyColumnE}" />
                <dxe:GridColumn FieldName="ColumnF" ReadOnly="{Binding ReadOnlyColumnF}" />
                <dxe:GridColumn FieldName="ColumnG" ReadOnly="{Binding ReadOnlyColumnG}" />
                <dxe:GridColumn FieldName="ColumnH" ReadOnly="{Binding ReadOnlyColumnH}" />
                <dxe:GridColumn FieldName="ColumnI" ReadOnly="{Binding ReadOnlyColumnI}" />
                <dxe:GridColumn FieldName="ColumnJ" ReadOnly="{Binding ReadOnlyColumnJ}" />
            </dxe:GridControl.Columns>
        </dxe:GridControl>
    </Grid>
</Window>

    MainPage.xaml.cs (C#)

csharp

using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;

namespace DataGridAuthorization
{
    public partial class MainWindow : Window, INotifyPropertyChanged
    {
        private readonly SampleDataViewModel viewModel;

        public MainWindow()
        {
            InitializeComponent();
            viewModel = new SampleDataViewModel();
            DataContext = viewModel;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class SampleDataViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<SampleData> sampleDataList;
        public ObservableCollection<SampleData> SampleDataList
        {
            get { return sampleDataList; }
            set
            {
                if (sampleDataList != value)
                {
                    sampleDataList = value;
                    NotifyPropertyChanged(nameof(SampleDataList));
                }
            }
        }

        // ... (각 컬럼별 ReadOnly 속성)

        public ICommand ButtonAClickCommand { get; private set; }
        public ICommand ButtonBClickCommand { get; private set; }
        public ICommand ButtonCClickCommand { get; private set; }
        public ICommand ButtonDClickCommand { get; private set; }

        public SampleDataViewModel()
        {
            SampleDataList = new ObservableCollection<SampleData>();
            LoadData(); // 데이터베이스 연동을 통해 실제 데이터를 불러오는 코드

            // 처음에는 모든 컬럼이 읽기 전용
            SetReadOnlyColumns(true);

            // 커맨드 초기화
            ButtonAClickCommand = new RelayCommand(ButtonAClick);
            ButtonBClickCommand = new RelayCommand(ButtonBClick);
            ButtonCClickCommand = new RelayCommand(ButtonCClick);
            ButtonDClickCommand = new RelayCommand(ButtonDClick);
        }

        private void LoadData()
        {
            // 데이터를 메모리에 생성 (임시 데이터)
            SampleDataList.Add(new SampleData { ColumnA = "A1", ColumnB = "B1", ColumnC = "C1", ColumnD = "D1", ColumnE = "E1", ColumnF = "F1", ColumnG = "G1", ColumnH = "H1", ColumnI = "I1", ColumnJ = "J1" });
            SampleDataList.Add(new SampleData { ColumnA = "A2", ColumnB = "B2", ColumnC = "C2", ColumnD = "D2", ColumnE = "E2", ColumnF = "F2", ColumnG = "G2", ColumnH = "H2", ColumnI = "I2", ColumnJ = "J2" });
            SampleDataList.Add(new SampleData { ColumnA = "A3", ColumnB = "B3", ColumnC = "C3", ColumnD = "D3", ColumnE = "E3", ColumnF = "F3", ColumnG = "G3", ColumnH = "H3", ColumnI = "I3", ColumnJ = "J3" });
            SampleDataList.Add(new SampleData { ColumnA = "A4", ColumnB = "B4", ColumnC = "C4", ColumnD = "D4", ColumnE = "E4", ColumnF = "F4", ColumnG = "G4", ColumnH = "H4", ColumnI = "I4", ColumnJ = "J4" });
        }

        private void SetReadOnlyColumns(bool value)
        {
            ReadOnlyColumnA = value;
            ReadOnlyColumnB = value;
            ReadOnlyColumnC = value;
            ReadOnlyColumnD = value;
            ReadOnlyColumnE = value;
            ReadOnlyColumnF = value;
            ReadOnlyColumnG = value;
            ReadOnlyColumnH = value;
            ReadOnlyColumnI = value;
            ReadOnlyColumnJ = value;
        }

        private void ButtonAClick(object parameter)
        {
            // 버튼 A를 누르면 ColumnA를 편집 가능하도록 설정
            SetReadOnlyColumns(true);
            ReadOnlyColumnA = false;
        }

        private void ButtonBClick(object parameter)
        {
            // 버튼 B를 누르면 ColumnA~C를 편집 가능하도록 설정
            SetReadOnlyColumns(true);
            ReadOnlyColumnA = false;
            ReadOnlyColumnB = false;
            ReadOnlyColumnC = false;
        }

        private void ButtonCClick(object parameter)
        {
            // 버튼 C를 누르면 ColumnE~G를 편집 가능하도록 설정
            SetReadOnlyColumns(true);
            ReadOnlyColumnE = false;
            ReadOnlyColumnF = false;
            ReadOnlyColumnG

User
이어서
ChatGPT

csharp

            ReadOnlyColumnG = false;
        }

        private void ButtonDClick(object parameter)
        {
            // 버튼 D를 누르면 모든 컬럼을 편집 가능하도록 설정
            SetReadOnlyColumns(false);
        }

        private void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }

    public class SampleData : INotifyPropertyChanged
    {
        private string columnA;
        public string ColumnA
        {
            get { return columnA; }
            set
            {
                if (columnA != value)
                {
                    columnA = value;
                    NotifyPropertyChanged(nameof(ColumnA));
                }
            }
        }

        private string columnB;
        public string ColumnB
        {
            get { return columnB; }
            set
            {
                if (columnB != value)
                {
                    columnB = value;
                    NotifyPropertyChanged(nameof(ColumnB));
                }
            }
        }

        // ... (각 컬럼별 속성 정의)

        private void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }

    public class RelayCommand : ICommand
    {
        private readonly Action<object> execute;
        private readonly Predicate<object> canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            this.execute = execute ?? throw new ArgumentNullException(nameof(execute));
            this.canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return canExecute?.Invoke(parameter) ?? true;
        }

        public void Execute(object parameter)
        {
            execute(parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}

이제 위의 코드를 사용하여 동시 편집 가능한 표를 구현할 수 있습니다. 데이터 바인딩과 버튼 클릭에 따른 컬럼 권한 설정이 잘 동작할 것입니다. 데이터베이스 연동을 원하신다면 LoadData() 메서드를 데이터베이스 쿼리로 대체하시면 됩니다. 프로젝트에 따라서는 MVVM 디자인 패턴을 보다 유연하게 구현하기 위해 더 많은 클래스와 인터페이스를 추가할 수 있습니다.
