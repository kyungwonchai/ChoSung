// FILE_ID: ViewModels/HelpViewModel_20250411100000
using LockerManagementApp.Data;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Models;
using System;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic;
using System.Collections.ObjectModel; // ObservableCollection 사용
using System.Data.Entity.Infrastructure; // DbEntityEntry 사용
using System.Data.Entity.Validation; // DbEntityValidationException 사용

namespace LockerManagementApp.ViewModels
{
    public class HelpViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;

        private string _authorityManagerNameDisplay;
        private string _systemManagerNameDisplay;
        private string _authorityManagerNameEdit;
        private string _systemManagerNameEdit;
        private SecureString _masterPasswordInput;
        private bool _isMasterVerified = false;
        private string _statusMessage;

        public string AuthorityManagerNameDisplay { get => _authorityManagerNameDisplay; private set => SetProperty(ref _authorityManagerNameDisplay, value); }
        public string SystemManagerNameDisplay { get => _systemManagerNameDisplay; private set => SetProperty(ref _systemManagerNameDisplay, value); }
        public string AuthorityManagerNameEdit { get => _authorityManagerNameEdit; set => SetProperty(ref _authorityManagerNameEdit, value); }
        public string SystemManagerNameEdit { get => _systemManagerNameEdit; set => SetProperty(ref _systemManagerNameEdit, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterVerified { get => _isMasterVerified; private set { SetProperty(ref _isMasterVerified, value); RaiseCanExecuteChanged(); } }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadCommand { get; }
        public ICommand CheckMasterKeyCommand { get; }
        public ICommand SaveSettingsCommand { get; }

        public event EventHandler RequestClose;
        public bool PasswordChangeSuccess { get; private set; } = false;


        public HelpViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[Help] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [Help] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; LoadCommand = new RelayCommand(_ => { }, _ => !_disposed); CheckMasterKeyCommand = new RelayCommand(async _ => await CheckMasterKeyAsync(), _ => !_disposed); SaveSettingsCommand = new RelayCommand(async _ => await SaveSettingsAsync(), _ => !_disposed && IsMasterVerified); return; }

            // *** 수정: LoadCommand 초기화 시 람다식 사용 ***
            LoadCommand = new RelayCommand(_ => LoadData(), CanExecuteCommand);
            CheckMasterKeyCommand = new RelayCommand(async _ => await CheckMasterKeyAsync(), CanExecuteCommand);
            SaveSettingsCommand = new RelayCommand(async _ => await SaveSettingsAsync(), CanSaveSettingsExecute);

            LoadData();
        }

        private bool CanExecuteCommand(object parameter = null) => !_disposed && _context != null;
        private bool CanSaveSettingsExecute(object parameter = null) => CanExecuteCommand(parameter) && IsMasterVerified;

        private void LoadData()
        {
            if (!CanExecuteCommand()) return;
            StatusMessage = "담당자 정보 로딩 중...";
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadData (HelpVM) 시작...");
            RaiseCanExecuteChanged();
            try
            {
                var settings = _context.AppSettings
                                       .Where(s => s.SettingKey == "AuthorityManagerName" || s.SettingKey == "SystemManagerName")
                                       .AsNoTracking()
                                       .ToList();

                AuthorityManagerNameDisplay = settings.FirstOrDefault(s => s.SettingKey == "AuthorityManagerName")?.SettingValue ?? "미지정";
                SystemManagerNameDisplay = settings.FirstOrDefault(s => s.SettingKey == "SystemManagerName")?.SettingValue ?? "미지정";
                AuthorityManagerNameEdit = AuthorityManagerNameDisplay;
                SystemManagerNameEdit = SystemManagerNameDisplay;
                StatusMessage = "담당자 정보 로드 완료.";
                Debug.WriteLine($"  -> AppSettings 로드 완료: Auth={AuthorityManagerNameDisplay}, System={SystemManagerNameDisplay}");
            }
            catch (Exception ex)
            {
                StatusMessage = $"담당자 정보 로딩 오류: {ex.Message}";
                Debug.WriteLine($"!!! 담당자 정보 로딩 중 오류 발생:\n{ex.ToString()}");
                if (!App.IsShuttingDown && !_disposed) MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                RaiseCanExecuteChanged();
                Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadData (HelpVM) 종료.");
            }
        }


        private async Task CheckMasterKeyAsync()
        {
            if (!CanExecuteCommand()) return;
            StatusMessage = "마스터 키 확인 중...";
            RaiseCanExecuteChanged();
            try
            {
                var masterKeySetting = await _context.AppSettings.AsNoTracking().FirstOrDefaultAsync(s => s.SettingKey == "MasterKey", _cts.Token);
                if (_cts.IsCancellationRequested || _disposed) return;
                if (masterKeySetting == null || string.IsNullOrEmpty(masterKeySetting.SettingValue)) { MessageBox.Show("데이터베이스에 마스터 키(MasterKey) 설정 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); StatusMessage = "마스터 키 설정 없음."; IsMasterVerified = false; return; }

                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);
                if (plainPassword == masterKeySetting.SettingValue)
                {
                    IsMasterVerified = true;
                    StatusMessage = "마스터 키 확인 완료. 편집 가능.";
                    MessageBox.Show("마스터 키가 확인되었습니다.", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    IsMasterVerified = false;
                    StatusMessage = "마스터 키가 일치하지 않습니다.";
                    MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            catch (OperationCanceledException) { Debug.WriteLine("CheckMasterKeyAsync 작업 취소됨."); StatusMessage = "확인 작업 취소됨."; }
            catch (Exception ex) { StatusMessage = $"마스터 키 확인 오류: {ex.Message}"; if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); IsMasterVerified = false; }
            finally { RaiseCanExecuteChanged(); }
        }

        private async Task SaveSettingsAsync()
        {
            if (!CanSaveSettingsExecute()) return;
            StatusMessage = "담당자 정보 저장 중...";
            RaiseCanExecuteChanged();
            try
            {
                bool changed = false;
                var authSetting = await _context.AppSettings.FirstOrDefaultAsync(s => s.SettingKey == "AuthorityManagerName", _cts.Token);
                if (_cts.IsCancellationRequested || _disposed) return;
                if (authSetting == null) { authSetting = new AppSetting { SettingKey = "AuthorityManagerName" }; _context.AppSettings.Add(authSetting); changed = true; Debug.WriteLine("  -> AuthorityManagerName 설정 추가됨."); }
                if (authSetting.SettingValue != (AuthorityManagerNameEdit ?? "")) { authSetting.SettingValue = AuthorityManagerNameEdit ?? ""; changed = true; Debug.WriteLine("  -> AuthorityManagerName 설정 수정됨."); }

                var sysSetting = await _context.AppSettings.FirstOrDefaultAsync(s => s.SettingKey == "SystemManagerName", _cts.Token);
                 if (_cts.IsCancellationRequested || _disposed) return;
                if (sysSetting == null) { sysSetting = new AppSetting { SettingKey = "SystemManagerName" }; _context.AppSettings.Add(sysSetting); changed = true; Debug.WriteLine("  -> SystemManagerName 설정 추가됨."); }
                if (sysSetting.SettingValue != (SystemManagerNameEdit ?? "")) { sysSetting.SettingValue = SystemManagerNameEdit ?? ""; changed = true; Debug.WriteLine("  -> SystemManagerName 설정 수정됨."); }

                if (changed)
                {
                    Debug.WriteLine("  -> SaveSettingsAsync _context.SaveChangesAsync 호출 시도...");
                    int result = await _context.SaveChangesAsync(_cts.Token);
                    Debug.WriteLine($"  -> SaveSettingsAsync _context.SaveChangesAsync 완료. 결과 = {result}");
                    StatusMessage = $"담당자 정보 저장 완료 ({result}건).";
                    MessageBox.Show("담당자 정보가 저장되었습니다.", "저장 완료", MessageBoxButton.OK, MessageBoxImage.Information);
                    LoadData();
                }
                else { StatusMessage = "변경된 내용이 없어 저장하지 않았습니다."; }
            }
            catch (OperationCanceledException) { Debug.WriteLine("SaveSettingsAsync 작업 취소됨."); StatusMessage = "저장 작업 취소됨."; }
            catch (Exception ex) { HandleGenericExceptionForMasterData("설정 저장", ex); }
            finally { RaiseCanExecuteChanged(); }
        }

        private void RaiseCanExecuteChanged()
        {
            (LoadCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (CheckMasterKeyCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (SaveSettingsCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }

        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }

        private void HandleGenericExceptionForMasterData(string operation, Exception ex) { if (App.IsShuttingDown || _disposed) { Debug.WriteLine($"종료 중 {operation} 오류 무시됨: {ex.Message}"); return; } StatusMessage = $"{operation} 중 오류 발생: {ex.Message}"; MessageBox.Show($"{operation} 중 예기치 않은 오류가 발생했습니다:\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("HelpViewModel Dispose 시작..."); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("HelpViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
```

**핵심 변경 사항:**

* **생성자:** `LoadCommand` 초기화 부분을 `LoadCommand = new RelayCommand(_ => LoadData(), CanExecuteCommand);` 와 같이 람다식을 사용하도록 수정했습니다.