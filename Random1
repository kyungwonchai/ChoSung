@startuml
' =======================================================================================
' 다이어그램 제목 및 기본 설정
' =======================================================================================
title
<font size="32" color="#111111"><b>궁극의 IT 시스템 개발 생명주기(SDLC) 통합 아키텍처 맵</b></font>
<font size="14">비즈니스 전략부터 인프라, 사용자 경험까지 모든 것을 한 눈에 조망하다</font>
endtitle

' =======================================================================================
' 다이어그램 스타일 및 레이아웃 설정 (Skin Parameters)
' =======================================================================================
skinparam handwritten false
skinparam shadowing true
skinparam defaultFontName "맑은 고딕"
skinparam defaultFontSize 15
skinparam titleFontSize 26
skinparam stereotypeFontSize 14
skinparam noteFontSize 13
skinparam Linetype ortho

' 레이아웃 방향을 위에서 아래로 변경하여 수직적 공간 확보
top to bottom direction

' 패키지 스타일
skinparam package {
    BorderColor #555555
    BorderStyle solid
    BackgroundColor #FFFFFF
    FontColor #111111
    FontSize 18
    StereotypeFontColor #555555
    Padding 20
}

' 요소 스타일
skinparam rectangle {
    BorderColor #777777
    BackgroundColor #F8F9FA
    FontColor #333333
}
skinparam database {
    BorderColor #1565C0
    BackgroundColor #E3F2FD
    FontColor #0D47A1
}
skinparam cloud {
    BorderColor #2E7D32
    BackgroundColor #E8F5E9
    FontColor #1B5E20
}
skinparam queue {
    BorderColor #E65100
    BackgroundColor #FFF3E0
}
skinparam note {
    BackgroundColor #FFF9C4
    BorderColor #F57F17
    FontColor #333333
}
skinparam actor {
    BackgroundColor #F3E5F5
    BorderColor #6A1B9A
    ArrowColor #4A148C
}
skinparam legend {
    BackgroundColor #ECEFF1
    BorderColor #37474F
}

' 화살표 스타일
skinparam arrow {
    Color #424242
    Thickness 2
    FontColor #212121
    FontSize 13
}

' =======================================================================================
' 범례 (Legend)
' =======================================================================================
legend top right
    <font size="18"><b>범례 (Legend)</b></font>
    ---
    <b><font color="#6A1B9A">■ 참여자 (Actor)</font></b>
    <b><font color="#E53935">■ 실제 사용자/고객</font></b>
    ---
    <b>흐름(Arrow) 색상 구분</b>
    <font color="#0D47A1"><b>→ 비즈니스/요구사항</b></font>
    <font color="#2E7D32"><b>→ 아키텍처/설계</b></font>
    <font color="#D84315"><b>→ 구현/코드/데이터</b></font>
    <font color="#C62828"><b>→ 사용자 상호작용/피드백</b></font>
    ---
    <b>기술 요소</b>
    <font color="#2E7D32">? 클라우드/인프라</font>
    <font color="#1565C0">??? 데이터베이스</font>
    <font color="#BF360C">?? 방화벽/보안</font>
    <font color="#E65100">↔? 큐/메시징</font>
endlegend

' =======================================================================================
' 참여자 (Actors) 정의
' =======================================================================================
actor "최고 경영진\n(C-Level)" as CEO
actor "프로덕트 매니저\n(PM) / 분석가" as PM
actor "<b>아키텍트\n(System/Software)</b>" as Architect #2E7D32
actor "개발팀\n(Frontend/Backend)" as Dev
actor "DB 관리자\n(DBA)" as DBA
actor "QA / 보안팀" as QA
actor "DevOps / SRE" as DevOps
actor "데이터 분석가" as DataAnalyst
actor "<b>실제 사용자\n고객</b>" as User #E53935

' =======================================================================================
' 영역 1: 비즈니스 & 제품 영역
' =======================================================================================
package "영역 1: 비즈니스 & 제품\n<font size=14 color=#555>아이디어에서 구체적인 요구사항까지</font>" <<Business>> #E3F2FD {
    rectangle "<b>0. 사업/제품 전략</b>\n<font size=12>시장 분석, 목표 설정 (OKR/KPI)</font>" as STAGE_0 #B3E5FC
    rectangle "<b>1. 요구사항 정의/분석</b>\n<font size=12>기능(Functional) / 비기능(Non-functional) 요구사항 구체화</font>" as STAGE_1 #B3E5FC

    CEO -[#0D47A1]-> STAGE_0 : "<b><color:#0D47A1>사업 목표 및\n예산 승인</color></b>"
    PM -[#0D47A1]-> STAGE_0 : "<b><color:#0D47A1>시장 분석/\n기회 발굴</color></b>"
    STAGE_0 -[#0D47A1]-> STAGE_1 : "<b><color:#0D47A1>사업 방향성 전달</color></b>"

    PM -[#0D47A1]-> STAGE_1 : "<b><color:#0D47A1>요구사항\n정의/분석 주도</color></b>"
    User -[#C62828,dashed]-> PM : "<b><color:#C62828>요구사항, 개선점, 불만 제안\n(인터뷰, 설문, 데이터)</color></b>"

    note right of STAGE_1
      <b><font color=#0D47A1>주요 산출물</font></b>
      * 사용자 페르소나 (User Persona)
      * 고객 여정 맵 (Customer Journey Map)
      * 요구사항 명세서 (SRS)
      * 유저 스토리 & 유스케이스
      ---
      <b><font color=#BF360C>비기능 요구사항 예시 (중요)</font></b>
      * <b>성능:</b> 응답시간 200ms 이하
      * <b>가용성:</b> 99.99% (연간 장애 52분 이내)
      * <b>보안:</b> 개인정보보호법, GDPR 준수
      * <b>확장성:</b> 100만 사용자 트래픽 처리 가능
    end note
}

' =======================================================================================
' 영역 2: 기술 설계 (Architecture & Design) - *확장된 핵심 영역*
' =======================================================================================
package "영역 2: 기술 설계\n<font size=14 color=#555>추상적인 요구사항을 견고한 기술 청사진으로</font>" <<Design>> #E8F5E9 {

    package "2a. 시스템 & 인프라 아키텍처\n<font size=12 color=#555>서비스가 동작할 물리적/논리적 환경과 토대 구축</font>" <<Infrastructure>> {

        cloud "<b>클라우드 플랫폼 (AWS)</b>" {
            rectangle "VPC (Virtual Private Cloud)" {
                rectangle "Public Subnet" {
                    cloud "Internet Gateway" as IGW
                    cloud "NAT Gateway" as NAT
                    cloud "<b>로드밸런서 (ALB/NLB)</b>\n<font size=12>HTTPS/TLS 종료점, 트래픽 분산</font>" as LB
                }
                rectangle "Private Subnet" {
                    cloud "<b>애플리케이션 서버 (EC2 / EKS)</b>" as APP_SVR
                    cloud "<b>AI/ML 서버 (SageMaker / GPU EC2)</b>" as AI_SVR
                    queue "<b>메시지 큐 (SQS / Kafka)</b>\n<font size=12>비동기 처리, 서비스 간 결합도↓</font>" as MSG_Q
                }
            }
            database "<b>데이터베이스 (Managed Service)</b>" {
                database "<b>RDBMS (Aurora / RDS)</b>\n<font size=12>정형 데이터, 트랜잭션</font>" as RDB
                database "<b>NoSQL (DynamoDB)</b>\n<font size=12>로그, 세션, 비정형 데이터</font>" as NOSQL
                database "<b>In-Memory (ElastiCache)</b>\n<font size=12>캐싱, 빠른 응답속도</font>" as CACHE
                database "<b>Data Warehouse (Redshift)</b>\n<font size=12>BI, 분석용 데이터</font>" as DWH
            }
            cloud "<b>스토리지 & CDN</b>" {
                 cloud "<b>Object Storage (S3)</b>" as S3
                 cloud "<b>CDN (CloudFront)</b>" as CDN
            }
        }

        rectangle "<b>관측 가능성 (Observability)</b>" {
            cloud "<b>모니터링 & 로깅 (CloudWatch)</b>" as CW
            rectangle "<b>로그 수집/분석 (ELK Stack)</b>" as ELK
            rectangle "<b>APM (DataDog / NewRelic)</b>" as APM
        }

        rectangle "<b>네트워크 & 보안</b>" as INFRA_NET #FFCCBC {
            rectangle "<b><color:#BF360C>방화벽 / WAF</color></b>" as FW
            rectangle "<b><color:#BF360C>IAM / KMS</color></b>\n<font size=12>권한 관리 / 암호화 키 관리</font>" as IAM
            rectangle "<b>HTTPS/TLS, TCP/IP</b>"
        }

        Architect -[#2E7D32]-> APP_SVR : "<b><color:#2E7D32>인프라 설계 (IaC: Terraform)</color></b>"
    }

    package "2b. 소프트웨어 아키텍처 & 상세 설계\n<font size=12 color=#555>소프트웨어의 내부 구조와 동작 방식 정의</font>" <<Application>> {
        rectangle "<b>2b. 소프트웨어 아키텍처 설계</b>" as STAGE_2B #C8E6C9
        rectangle "<b>3. 상세 설계</b>\n<font size=12>OOP, DDD, 디자인패턴 적용</font>" as STAGE_3 #C8E6C9

        Architect -[#2E7D32]-> STAGE_2B
        STAGE_2B --> STAGE_3 : "<b><color:#2E7D32>아키텍처 가이드라인\n(패턴, 표준, 기술 선택) 전달</color></b>"
        note on link
            <b><font size="16" color="#2E7D32">아키텍처 결정의 무게 (Trade-off)</font></b>
            ---
            <b>MSA (마이크로서비스)</b>
            * <b>장점:</b> 팀별 독립적 개발/배포, 높은 확장성, 기술 유연성
            * <b>단점:</b> 복잡도 급증 (통신, 데이터 정합성, 배포), 높은 운영 비용
            * <b>시간/비용:</b> 초기 설계/구축 시간↑, 장기적 유지보수 유연성↑
            ---
            <b>Monolithic (모놀리식)</b>
            * <b>장점:</b> 개발 단순성, 빠른 초기 개발 속도, 쉬운 테스트
            * <b>단점:</b> 서비스 커지면 배포/수정 어려움, 기술 스택 고착화, 장애 영향도↑
            * <b>시간/비용:</b> 초기 개발 시간↓, 장기적 유지보수 복잡도↑
        end note

        Dev -> STAGE_3 : "<b><color:#2E7D32>상세 설계\n(API Spec, Class Diagram)</color></b>"
        DBA -> STAGE_3 : "<b><color:#2E7D32>DB 스키마 설계\n(ERD, 정규화)</color></b>"
    }
}

' =======================================================================================
' 영역 3: 구현 및 품질 (Build & Verify)
' =======================================================================================
package "영역 3: 구현 & 품질\n<font size=14 color=#555>설계도를 실제 동작하는 제품으로 만들고 검증</font>" <<Build & Verify>> #FFF3E0 {

    package "CI (Continuous Integration) - 자동화된 통합 및 검증" {
        rectangle "<b>4. 구현 (Development)</b>" as STAGE_4 #FFE0B2
        rectangle "Git (형상관리)" as GIT
        rectangle "Build (Maven/Gradle/Webpack)" as BUILD
        rectangle "<b>Code Review / Pair Programming</b>" as CODE_REVIEW
        rectangle "<b>정적 분석 & 단위/통합 테스트</b>\n<font size=12>SonarQube, JUnit, Mockito</font>" as UNIT_TEST
    }

    package "품질 보증 (Quality Assurance)" {
        rectangle "<b>5. 시스템 & E2E 테스트</b>" as STAGE_5 #FFE0B2
        rectangle "<b>성능/부하 테스트 (nGrinder)</b>" as PERF_TEST
        rectangle "<b>보안 테스팅 (SAST/DAST)</b>" as SEC_TEST
    }

    Dev -[#D84315]-> STAGE_4 : "<b><color:#D84315>코드 작성\n(FE:React, BE:Java/Spring)</color></b>"
    STAGE_4 -> GIT : "<b><color:#D84315>코드 Push</color></b>"
    GIT -> BUILD : "<b><color:#D84315>Trigger</color></b>"
    BUILD -> UNIT_TEST : "<b><color:#D84315>빌드 & 테스트 자동화</color></b>"
    UNIT_TEST -[#D84315]-> STAGE_5 : "<b><color:#D84315>테스트 가능한 빌드 전달</color></b>"
    QA -[#D84315]-> STAGE_5 : "<b><color:#D84315>시나리오 기반 테스트</color></b>"
    QA -[#D84315]-> PERF_TEST : "<b><color:#D84315>비기능 요구사항 검증</color></b>"
    QA -[#D84315]-> SEC_TEST : "<b><color:#BF360C>보안 취약점 점검</color></b>"
}

' =======================================================================================
' 영역 4: 운영 및 사용자 (Live & Feedback)
' =======================================================================================
package "영역 4: 운영 & 사용자\n<font size=14 color=#555>제품이 사용자를 만나고, 다시 배우는 곳</font>" <<Live & Feedback>> #FFEBEE {

    package "CD (Continuous Deployment) - 자동화된 배포" {
        rectangle "<b>6. 배포 및 출시</b>" as STAGE_6 #FFCDD2
        rectangle "Staging 환경" as STAGING
        rectangle "Production 환경" as PROD
    }

    package "운영 및 피드백 순환" {
        rectangle "<b>7. 운영 및 유지보수 (SRE)</b>" as STAGE_7 #FFCDD2
        rectangle "<b>데이터 분석 및 인사이트 도출</b>" as FEEDBACK_ANALYSIS
        cloud "BI 대시보드 (Tableau)" as BI_DASH
    }

    DevOps -[#D84315]-> STAGE_6 : "<b><color:#D84315>배포 파이프라인\n(Jenkins/GitHub Actions)</color></b>"
    STAGE_6 --> STAGING : "<b><color:#D84315>Staging 배포</color></b>"
    STAGING --> PROD : "<b><color:#D84315>Production 배포\n(Blue/Green, Canary)</color></b>"

    PROD -down-> STAGE_7

    DevOps -[#C62828]-> STAGE_7 : "<b><color:#C62828>모니터링 (SLO/SLI)\n장애 대응, On-Call</color></b>"
    User <-[#C62828,thickness=3]-> PROD : "<b><color:#C62828><size:18>서비스 직접 사용</size></color></b>"
    PROD -[#C62828,dashed]-> DWH : "<b><color:#C62828>사용자 행동 로그 수집 (ETL)</color></b>"
    DWH -[#C62828,dashed]-> FEEDBACK_ANALYSIS
    DataAnalyst -> FEEDBACK_ANALYSIS
    FEEDBACK_ANALYSIS -> BI_DASH

    BI_DASH -[#C62828,dashed]-> PM : "<b><color:#C62828>정량 데이터 기반 리포트 전달</color></b>"
}

' =======================================================================================
' 전체 영역 간의 흐름 정의
' =======================================================================================
STAGE_1 -[#0D47A1,thickness=3]-> Architect : "<b><color:#0D47A1><size:16>확정된 요구사항 전달</size></color></b>"
Architect -[#2E7D32,thickness=3]-> STAGE_3 : "<b><color:#2E7D32><size:16>아키텍처/설계 가이드 전달</size></color></b>"
STAGE_3 -[#2E7D32,thickness=3]-> STAGE_4 : "<b><color:#2E7D32><size:16>상세 설계도 전달</size></color></b>"
SEC_TEST -[#D84315,thickness=3]-> STAGE_6 : "<b><color:#D84315><size:16>QA & 보안 승인된\n릴리즈 후보 전달</size></color></b>"

' 피드백 루프 (가장 중요한 통찰력)
' [수정] 복잡한 스타일을 단순화하여 호환성 문제를 해결 시도
User .[#C62828].> PM : "<color:#C62828><b>사용자 경험 데이터 순환\n(피드백이 다음 혁신의 씨앗이 된다)</b></color>"
@enduml
