분투(Ubuntu)에서 도커(Docker) 설치 실패 시 완벽 해결 가이드: 상태 체크부터 재설치까지
우분투 환경에서 도커 설치에 실패했다면, 시스템에 남아있는 불완전한 설치 파일이나 설정 충돌이 원인일 수 있습니다. 이럴 때는 무작정 재설치를 시도하기보다 현재 상태를 정확히 진단하고, 기존 도커 관련 파일을 완전히 제거한 후 새로 설치하는 것이 중요합니다. 본 가이드에서는 현재 도커 상태를 체크하는 방법부터 깨끗하게 제거하고 성공적으로 재설치한 뒤, 설정을 확인하는 모든 과정을 상세히 안내합니다.

1단계: 현재 도커 상태 진단하기
가장 먼저, 현재 시스템에 도커가 어떻게 설치되어 있는지, 서비스가 실행 중인지 확인해야 합니다.

1.1. 도커 서비스 상태 확인
터미널을 열고 다음 명령어를 입력하여 도커 서비스의 활성화 상태를 확인합니다.

Bash

sudo systemctl status docker
active (running): 도커 서비스가 정상적으로 실행 중이라는 의미입니다. 하지만 다른 문제로 인해 명령어가 작동하지 않을 수 있습니다.

inactive (dead) 또는 failed: 도커 서비스가 실행되고 있지 않거나 시작에 실패한 상태입니다.

Unit docker.service could not be found.: 도커가 설치되지 않았거나, 서비스 파일이 제대로 등록되지 않은 상태입니다.

1.2. 설치된 도커 관련 패키지 확인
다음 명령어로 시스템에 설치된 도커 관련 패키지를 모두 확인할 수 있습니다. 설치 실패 시 어떤 패키지들이 남아있는지 파악하는 데 도움이 됩니다.

Bash

dpkg -l | grep -i docker
이 명령어를 통해 docker-ce, docker-ce-cli, containerd.io 등과 같이 설치된 패키지 목록을 볼 수 있습니다.

2단계: 기존 도커 완전 삭제하기
새로운 설치를 위해 기존에 설치되었거나 불완전하게 남은 도커 관련 구성 요소들을 모두 제거합니다. 주의: 이 과정은 기존의 모든 도커 컨테이너, 이미지, 볼륨, 네트워크 설정을 삭제하므로, 중요한 데이터는 반드시 백업하시기 바랍니다.

2.1. 실행 중인 모든 컨테이너 중지 및 삭제
만약 실행 중인 컨테이너가 있다면 모두 중지하고 삭제합니다.

Bash

# 실행 중인 모든 컨테이너 중지
docker ps -q | xargs -r docker stop

# 모든 컨테이너, 이미지, 볼륨, 네트워크를 한 번에 삭제
docker system prune -a --volumes --force
2.2. 도커 패키지 제거 (Purge)
단순히 remove가 아닌 purge 옵션을 사용하여 설정 파일까지 모두 삭제합니다.

Bash

sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli
2.3. 잔여 디렉토리 및 파일 삭제
패키지 제거 후에도 시스템에 남아있을 수 있는 도커 관련 디렉토리들을 직접 삭제합니다.

Bash

sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
sudo rm -rf /etc/docker
sudo rm -rf ~/.docker
2.4. 불필요한 의존성 패키지 정리
마지막으로, 더 이상 사용되지 않는 패키지들을 정리합니다.

Bash

sudo apt-get autoremove -y
sudo apt-get clean
3단계: 도커 엔진(Docker Engine) 재설치하기
이제 깨끗한 상태의 시스템에 도커를 공식적인 방법으로 재설치합니다.

3.1. 시스템 패키지 업데이트 및 사전 준비
먼저 패키지 목록을 최신 상태로 업데이트하고, HTTPS를 통해 저장소를 사용하는 데 필요한 패키지들을 설치합니다.

Bash

sudo apt-get update
sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
3.2. 도커 공식 GPG 키 추가
도커 패키지의 진위 여부를 확인하기 위해 공식 GPG 키를 시스템에 추가합니다.

Bash

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
3.3. 도커 공식 저장소(Repository) 설정
다음 명령어로 도커의 공식 APT 저장소를 시스템에 추가합니다.

Bash

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
3.4. 도커 엔진 설치
저장소 설정이 완료되었으면, 패키지 목록을 다시 업데이트하고 도커 엔진을 설치합니다.

Bash

sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
4단계: 설치 후 설정 및 확인
설치가 완료된 후, 정상적으로 작동하는지 확인하고 사용 편의를 위한 몇 가지 추가 설정을 진행합니다.

4.1. 설치 버전 및 서비스 상태 확인
다음 명령어로 도커 버전이 출력되는지, 서비스가 정상 실행 중인지 확인합니다.

Bash

docker --version
sudo systemctl status docker
docker --version 명령이 성공적으로 버전을 출력하고, systemctl status docker가 active (running) 상태를 보이면 성공적으로 설치된 것입니다.

4.2. hello-world 이미지로 설치 확인
간단한 테스트 이미지를 실행하여 도커가 완벽하게 작동하는지 최종 확인합니다.

Bash

sudo docker run hello-world
"Hello from Docker!" 메시지가 포함된 출력이 나타나면, 도커가 성공적으로 설치되고 실행된 것입니다.

4.3. (권장) sudo 없이 docker 명령어 사용하기
매번 docker 명령어 앞에 sudo를 붙이는 것은 번거롭습니다. 현재 사용자를 docker 그룹에 추가하면 sudo 없이 명령어를 사용할 수 있습니다.

Bash

# docker 그룹 생성 (이미 있을 수 있음)
sudo groupadd docker

# 현재 사용자를 docker 그룹에 추가
sudo usermod -aG docker $USER

# 변경사항을 적용하기 위해 새 그룹으로 로그인 (또는 시스템 재부팅/재로그인)
newgrp docker
이제 터미널을 새로 열거나 시스템에 다시 로그인하면 sudo 없이 docker ps, docker run 등의 명령어를 바로 사용할 수 있습니다.

이상의 과정을 차근차근 따라 진행하시면 우분투에서 발생했던 도커 설치 문제를 해결하고, 깨끗하고 안정적인 도커 환경을 구축할 수 있을 것입니다.

