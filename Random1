using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Collections.ObjectModel;
using System.Windows.Threading;

namespace GumiWatcher
{
    public class FileWatcher
    {
        private FileSystemWatcher _fileWatcher;
        private string _logDirectory = @"C:\G-MES2.0\GUMI_WEB\log";
        private string _filePattern = @"^\d{1,3}(\.\d{1,3}){3}_M4OI[A-Za-z0-9]+_gumi[A-Za-z0-9]+_(\d{2})\.log$";
        private DispatcherTimer _timer;
        private string _lastMonitoredFile;
        private ProductOrderModel _currentProductOrder;
        private ObservableCollection<ProductOrderModel> _productOrders;

        public FileWatcher(ObservableCollection<ProductOrderModel> productOrders)
        {
            _productOrders = productOrders;

            _fileWatcher = new FileSystemWatcher
            {
                Path = _logDirectory,
                Filter = "*.log",
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.Size
            };
            _fileWatcher.Changed += OnChanged;
            _fileWatcher.Created += OnChanged;
            _fileWatcher.EnableRaisingEvents = true;

            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _timer.Tick += CheckLatestFile;
            _timer.Start();
        }

        private void OnChanged(object sender, FileSystemEventArgs e)
        {
            if (!Regex.IsMatch(e.Name, _filePattern)) return;

            string latestFile = GetLatestLogFile();
            if (latestFile != _lastMonitoredFile)
            {
                _lastMonitoredFile = latestFile;
                ReadLogFile(latestFile);
            }
        }

        private string GetLatestLogFile()
        {
            var logFiles = new DirectoryInfo(_logDirectory).GetFiles("*.log")
                .Where(f => Regex.IsMatch(f.Name, _filePattern))
                .OrderByDescending(f => f.LastWriteTime)
                .ToList();

            return logFiles.FirstOrDefault()?.FullName;
        }

        private void ReadLogFile(string filePath)
        {
            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines)
            {
                ProcessLogLine(line, filePath);
            }
        }

        // 로그의 각 줄을 처리하는 메소드, 파일 경로에서 날짜(day)를 추출하여 yyyyMMdd 형식으로 저장
        private void ProcessLogLine(string line, string filePath)
        {
            // 파일 이름에서 마지막 두 글자를 추출하여 day 값을 가져옴
            string fileName = Path.GetFileNameWithoutExtension(filePath);
            string dayString = fileName.Substring(fileName.Length - 2); // 마지막 두 글자 추출

            // 현재 연도와 월을 구해서 yyyyMMdd 형식으로 조합
            string currentYearMonth = DateTime.Now.ToString("yyyyMM");
            string fullDate = currentYearMonth + dayString; // 예: "20230901" (2023년 9월 1일)

            // PLAN Selected 라인 처리
            if (line.Contains("PLAN Selected"))
            {
                var splitLine = line.Split(' ');
                string productOrder = splitLine[1];

                if (_currentProductOrder == null || _currentProductOrder.ProductOrder != productOrder)
                {
                    _currentProductOrder = new ProductOrderModel
                    {
                        ProductOrder = productOrder,
                        PDate = fullDate, // yyyyMMdd 형식으로 날짜 저장
                        POStatus = "wait"
                    };
                    _productOrders.Add(_currentProductOrder);
                }
            }
            // 나머지 처리 로직은 그대로 유지
            else if (line.Contains("BasicModel"))
            {
                var modelData = line.Split(':')[1].Trim();
                _currentProductOrder.BasicModel = modelData;
            }
            else if (line.Contains("MB^"))
            {
                var mbData = line.Split('^');
                _currentProductOrder.PORemain = int.Parse(mbData[1]);
                _currentProductOrder.MGCount = int.Parse(mbData[2]);
            }
            else if (line.Contains("JB^"))
            {
                _currentProductOrder.PCount++;
            }
            else if (line.Contains("FNL^"))
            {
                _currentProductOrder.POStatus = "stack";
            }
            else if (line.Contains("JD^"))
            {
                _currentProductOrder.POStatus = "out";
                ExecuteOutFunction();
            }
        }

        private void ExecuteOutFunction()
        {
            // 배출 처리에 대한 실제 로직을 여기에 구현
        }

        private void CheckLatestFile(object sender, EventArgs e)
        {
            string latestFile = GetLatestLogFile();
            if (latestFile != _lastMonitoredFile)
            {
                _lastMonitoredFile = latestFile;
                ReadLogFile(latestFile);
            }
        }
    }

    public class ProductOrderModel
    {
        public string ProductOrder { get; set; }
        public string BasicModel { get; set; }
        public int PORemain { get; set; }
        public int MGCount { get; set; }
        public int PCount { get; set; }
        public string POStatus { get; set; }
        public string PDate { get; set; }
    }
}
