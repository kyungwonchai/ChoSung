습니다. ExecuteTaskWithColor 함수는 각 작업 함수가 실행될 때 도형의 색상을 업데이트하여 작업의 진행 상태를 시각적으로 나타내는 역할을 했습니다. 각 작업이 실행되면 도형의 색상이 변경되면서 작업이 완료되었는지, 진행 중인지 쉽게 확인할 수 있도록 돕는 함수입니다.

이 함수는 비동기 함수로, 작업이 완료되기 전까지는 대기 상태가 유지되고, 작업이 완료되면 색상이 초록색으로 바뀌어 작업이 끝났음을 알리는 역할을 수행합니다.

ExecuteTaskWithColor의 원리
시작 시: 함수가 시작되면 도형의 색상이 **하늘색(SkyBlue)**으로 바뀝니다.
비동기 작업 실행: 작업 함수는 비동기적으로 실행됩니다.
완료 시: 작업이 완료되면 색상이 **초록색(Green)**으로 변경됩니다.
관련 코드 및 적용 방법
1. ExecuteTaskWithColor 코드
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;

public class TaskModel : ViewModelBase
{
    // 함수 상태를 관리하는 컬렉션 (도형 색상 업데이트)
    public ObservableCollection<FunctionStatus> FunctionStatusList { get; set; }

    public TaskModel()
    {
        // 작업 상태 초기화
        FunctionStatusList = new ObservableCollection<FunctionStatus>();

        // 각 함수 및 도형 상태 추가 (예시)
        AddFunction("Task A", ExecuteTaskA, Brushes.Gray);
        AddFunction("Task B", ExecuteTaskB, Brushes.Gray);
        AddFunction("Task C", ExecuteTaskC, Brushes.Gray);
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 도형의 색상을 업데이트합니다.
    /// </summary>
    public async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        // 작업 시작 시 도형 색상을 하늘색으로 변경 (진행 중 상태)
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusList[index].UpdateStatus(Brushes.SkyBlue);  // 도형 색상 변경
        });

        // 비동기 작업 실행
        await task();

        // 작업 완료 시 도형 색상을 초록색으로 변경 (완료 상태)
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusList[index].UpdateStatus(Brushes.Green);  // 도형 색상 변경
        });
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    /// <summary>
    /// 작업 함수와 도형 색상을 추가합니다.
    /// </summary>
    public void AddFunction(string functionName, Func<Task> task, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, task, initialColor);
        FunctionStatusList.Add(functionStatus);
    }
}
2. FunctionStatus 클래스
이 클래스는 각 함수의 상태와 도형 색상을 관리합니다.

csharp
코드 복사
public class FunctionStatus : ViewModelBase
{
    public string FunctionName { get; set; }  // 함수 이름
    public Func<Task> Task { get; set; }  // 비동기 함수
    public Brush StatusColor { get; set; }  // 도형 색상

    public FunctionStatus(string functionName, Func<Task> task, Brush statusColor)
    {
        FunctionName = functionName;
        Task = task;
        StatusColor = statusColor;
    }

    /// <summary>
    /// 도형 색상을 업데이트합니다.
    /// </summary>
    public void UpdateStatus(Brush newColor)
    {
        StatusColor = newColor;
        OnPropertyChanged(nameof(StatusColor));
    }
}
3. XAML - 도형과 상태 연결
도형과 상태는 **ItemsControl**을 통해 표시되며, **Ellipse**의 색상은 StatusColor 속성과 바인딩됩니다.

xml
코드 복사
<DataGridTemplateColumn Header="Function Status">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <!-- 도형과 상태를 표시하는 ItemsControl -->
            <ItemsControl ItemsSource="{Binding FunctionStatusList}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <!-- 함수 상태를 표시하는 도형 -->
                            <Ellipse Width="30" Height="30" Fill="{Binding StatusColor}">
                                <Ellipse.ToolTip>
                                    <TextBlock Text="{Binding FunctionName}" />
                                </Ellipse.ToolTip>
                            </Ellipse>
                        </StackPanel>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>
4. 적용 방법
각 작업 함수는 **ExecuteTaskWithColor**를 통해 실행됩니다.
도형 색상은 작업이 진행될 때마다 실시간으로 변경됩니다.
비동기 작업이 완료되면 도형 색상은 **초록색(Green)**으로 변경되며, 작업 완료를 나타냅니다.
사용 흐름:
작업이 추가될 때 **FunctionStatusList**에 작업 함수와 도형 상태를 추가합니다.
각 작업을 실행할 때 **ExecuteTaskWithColor**를 호출하여, 작업이 진행될 때 도형의 색상이 변경되도록 합니다.
작업 완료 후 도형의 색상이 **초록색(Green)**으로 변경되어 완료 상태를 시각적으로 보여줍니다.
이 코드를 통해 도형 상태와 작업 실행을 연동하여 실시간으로 작업 상태를 보여줄 수 있습