COM 포트 상태를 표시하는 WPF MVVM 패턴 코드를 작성해 보겠습니다. 이 코드는 버튼을 눌러 현재 연결된 COM 포트를 ListBox에 표시하는 방식으로 구현됩니다.

1. View (XAML)
MainWindow.xaml에서 ListBox와 Button을 배치하여 사용자 인터페이스를 구성합니다.

xml
코드 복사
<Window x:Class="ComPortViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Viewer" Height="300" Width="400">
    <Grid>
        <Button Content="Load COM Ports" 
                Command="{Binding LoadComPortsCommand}" 
                Width="120" Height="30" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Top" 
                Margin="0,10,0,0"/>
        
        <ListBox ItemsSource="{Binding ComPorts}" 
                 Width="300" Height="200" 
                 HorizontalAlignment="Center" 
                 VerticalAlignment="Center" 
                 Margin="0,50,0,0"/>
    </Grid>
</Window>
Button: Load COM Ports라는 텍스트로 COM 포트를 로드하는 명령을 바인딩합니다.
ListBox: ComPorts라는 ObservableCollection을 데이터 소스로 설정하여 COM 포트 목록을 표시합니다.
2. ViewModel
MainViewModel.cs 파일을 생성하고, COM 포트를 로드하는 명령과 ObservableCollection을 구현합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace ComPortViewer
{
    public class MainViewModel : INotifyPropertyChanged
    {
        // COM 포트 목록을 저장하는 ObservableCollection
        public ObservableCollection<string> ComPorts { get; private set; }

        // COM 포트를 로드하는 명령
        public ICommand LoadComPortsCommand { get; private set; }

        public MainViewModel()
        {
            // 컬렉션 초기화
            ComPorts = new ObservableCollection<string>();

            // 명령 초기화
            LoadComPortsCommand = new RelayCommand(LoadComPorts);
        }

        // COM 포트를 로드하는 메서드
        private void LoadComPorts()
        {
            // 기존 포트 목록 지우기
            ComPorts.Clear();

            // 현재 시스템에 연결된 모든 COM 포트 가져오기
            foreach (string port in System.IO.Ports.SerialPort.GetPortNames())
            {
                ComPorts.Add(port);
            }
        }

        // INotifyPropertyChanged 구현
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand 클래스 - ICommand 구현체
    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }

        public event EventHandler CanExecuteChanged;

        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}
ComPorts: ObservableCollection<string> 타입으로, 현재 연결된 COM 포트를 저장하며, ListBox와 바인딩됩니다.
LoadComPortsCommand: 버튼을 클릭하면 실행되는 명령입니다.
LoadComPorts 메서드: SerialPort.GetPortNames() 메서드를 호출하여 COM 포트를 가져오고, ComPorts 컬렉션에 추가합니다.
RelayCommand: MVVM에서 ICommand를 쉽게 구현할 수 있도록 하는 유틸리티 클래스입니다.
3. View와 ViewModel 연결
MainWindow.xaml.cs에서 DataContext를 MainViewModel로 설정합니다.

csharp
코드 복사
using System.Windows;

namespace ComPortViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }
    }
}
요약
Button을 클릭하면 LoadComPortsCommand가 호출됩니다.
LoadComPortsCommand는 LoadComPorts 메서드를 실행하여 현재 연결된 COM 포트를 ComPorts에 추가합니다.