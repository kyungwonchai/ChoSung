서 다른 윈도우의 함수를 실행하려면, 먼저 해당 윈도우의 인스턴스에 접근해야 합니다. 이를 위해, 대상 윈도우의 인스턴스를 저장하거나 전달하는 방법을 사용할 수 있습니다. 이 예시에서는 두 번째 윈도우의 함수를 첫 번째 윈도우에서 호출하는 방법을 보여드리겠습니다.

단계 1: 대상 윈도우에 공개 함수 정의
먼저, 호출하고자 하는 함수를 대상 윈도우에 정의합니다. 이 함수는 public이어야 합니다.

예를 들어, SecondWindow에 다음과 같은 함수를 추가합니다:

csharp
Copy code
// SecondWindow.xaml.cs
public partial class SecondWindow : Window
{
    public SecondWindow()
    {
        InitializeComponent();
    }

    public void MyFunction()
    {
        // 여기에 실행할 코드
        MessageBox.Show("함수 실행됨");
    }
}
단계 2: 대상 윈도우의 인스턴스 전달
MainWindow에서 SecondWindow의 인스턴스를 생성하고, 필요할 때 이 인스턴스를 통해 SecondWindow의 MyFunction을 호출합니다.

csharp
Copy code
// MainWindow.xaml.cs
public partial class MainWindow : Window
{
    private SecondWindow _secondWindow;

    public MainWindow()
    {
        InitializeComponent();
        _secondWindow = new SecondWindow();
    }

    private void CallFunctionInSecondWindow()
    {
        _secondWindow.MyFunction();
    }
}
이 방법을 사용하면 MainWindow에서 _secondWindow.MyFunction()을 호출하여 SecondWindow의 함수를 실행할 수 있습니다.

단계 3: 버튼 클릭 이벤트에 함수 호출 연결
이제 MainWindow의 버튼 클릭 이벤트에서 CallFunctionInSecondWindow 메서드를 호출하도록 설정합니다.

xml
Copy code
<!-- MainWindow.xaml -->
<Button Content="Call Function in Second Window" Click="CallFunctionInSecondWindow"/>
이 버튼을 클릭하면 MainWindow에서 SecondWindow의 MyFunction이 실행됩니다.

추가 사항
이 방법은 두 윈도우가 서로 독립적인 수명 주기를 가지고 있을 때 유용합니다. 두 윈도우가 서로 밀접하게 연관되어 있는 경우, 더 복잡한 상태 관리나 데이터 바인딩이 필요할 수 있습니다.
윈도우 간의 데이터 전달이 필요하다면, 생성자 파라미터, 이벤트, 또는 데이터 바인딩을 사용할 수 있습니다.
두 윈도우가 서로 참조하는 경우, 메모리 누수를 피하기 위해 주의가 필요합니