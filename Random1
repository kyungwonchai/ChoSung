해했습니다. **ComboBoxEdit**가 아닌 BarEditItem(DevExpress 리본 컨트롤 내에서 사용하는 편집 항목)을 사용하여 언어를 선택하고, 그 선택에 따라 UI가 즉시 변경되도록 구현하라는 말씀이시죠.

아래는 **DevExpress BarEditItem**을 사용하여 언어 선택을 처리하는 방법입니다. 사용자가 BarEditItem에서 언어를 선택할 때마다 UI 텍스트가 선택한 언어로 즉시 변경됩니다.

1. BarEditItem 설정
BarEditItem은 리본에 추가된 편집 항목으로, 이 항목을 통해 사용자가 언어를 선택하게 됩니다.

2. BarEditItem 이벤트 처리
BarEditItem의 값이 변경될 때 이벤트를 처리하여 선택된 언어에 맞춰 UI를 변경하는 방식입니다.

코드 구현:
csharp
코드 복사
using System.Globalization;
using System.Resources;
using DevExpress.XtraEditors;
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;

public partial class MainForm : XtraForm
{
    ResourceManager resManager;
    CultureInfo cultureInfo;

    public MainForm()
    {
        InitializeComponent();

        // ResourceManager 초기화 (리소스 파일 경로에 맞게 설정)
        resManager = new ResourceManager("YourProjectNamespace.Properties.Lang", typeof(MainForm).Assembly);

        // BarEditItem을 통해 언어 선택 항목 설정 (en, kr, vi)
        repositoryItemComboBox1.Items.Add("en");  // 영어
        repositoryItemComboBox1.Items.Add("kr");  // 한국어
        repositoryItemComboBox1.Items.Add("vi");  // 베트남어

        // 기본 시스템 언어 설정
        cultureInfo = CultureInfo.CurrentUICulture;

        // UI 텍스트 기본 적용
        ApplyLocalizationToDevExpressControls(this);
        ApplyLocalizationToRibbonPages();

        // BarEditItem 값 변경 이벤트 핸들러 추가
        barEditItem1.EditValueChanged += BarEditItem1_EditValueChanged;
    }

    // BarEditItem 값 변경 시 호출되는 이벤트 핸들러
    private void BarEditItem1_EditValueChanged(object sender, EventArgs e)
    {
        // BarEditItem에서 선택된 언어 가져오기
        string selectedLanguage = barEditItem1.EditValue.ToString();

        // 선택된 언어에 맞춰 UI 언어 변경
        ChangeLanguage(selectedLanguage);
    }

    // DevExpress 일반 컨트롤에 리소스를 적용하는 함수 (재귀적으로 처리)
    private void ApplyLocalizationToDevExpressControls(Control parentControl)
    {
        if (parentControl is BaseControl devControl)
        {
            string controlTag = devControl.Tag?.ToString();
            if (!string.IsNullOrEmpty(controlTag))
            {
                // 리소스에서 Tag로 지정된 키를 찾아 해당 텍스트를 적용
                string localizedText = resManager.GetString(controlTag, cultureInfo);
                if (!string.IsNullOrEmpty(localizedText))
                {
                    devControl.Text = localizedText;
                }
            }
        }

        // 자식 컨트롤들도 재귀적으로 처리
        foreach (Control childControl in parentControl.Controls)
        {
            ApplyLocalizationToDevExpressControls(childControl);
        }
    }

    // DevExpress RibbonPage 및 관련 컨트롤에 리소스를 적용하는 함수
    private void ApplyLocalizationToRibbonPages()
    {
        foreach (RibbonPage ribbonPage in ribbonControl1.Pages)
        {
            // 각 리본 페이지의 Tag에 해당하는 리소스 적용
            string ribbonPageTag = ribbonPage.Tag?.ToString();
            if (!string.IsNullOrEmpty(ribbonPageTag))
            {
                string localizedText = resManager.GetString(ribbonPageTag, cultureInfo);
                if (!string.IsNullOrEmpty(localizedText))
                {
                    ribbonPage.Text = localizedText;
                }
            }

            // 리본 페이지 내 그룹 처리
            foreach (RibbonPageGroup group in ribbonPage.Groups)
            {
                string groupTag = group.Tag?.ToString();
                if (!string.IsNullOrEmpty(groupTag))
                {
                    string localizedGroupText = resManager.GetString(groupTag, cultureInfo);
                    if (!string.IsNullOrEmpty(localizedGroupText))
                    {
                        group.Text = localizedGroupText;
                    }
                }

                // 그룹 내의 항목 처리 (버튼 등)
                foreach (var item in group.ItemLinks)
                {
                    if (item.Item is BarButtonItem buttonItem)
                    {
                        string buttonTag = buttonItem.Tag?.ToString();
                        if (!string.IsNullOrEmpty(buttonTag))
                        {
                            string localizedButtonText = resManager.GetString(buttonTag, cultureInfo);
                            if (!string.IsNullOrEmpty(localizedButtonText))
                            {
                                buttonItem.Caption = localizedButtonText;
                            }
                        }
                    }
                }
            }
        }
    }

    // 언어 변경 함수
    private void ChangeLanguage(string culture)
    {
        cultureInfo = new CultureInfo(culture);

        // 일반 DevExpress 컨트롤과 리본 페이지 각각에 대해 리소스 적용
        ApplyLocalizationToDevExpressControls(this);
        ApplyLocalizationToRibbonPages();
    }
}
1. 핵심 흐름
BarEditItem을 통해 언어 선택: 사용자가 리본에 있는 BarEditItem에서 en, kr, vi 중 하나를 선택합니다.

선택 변경 이벤트 처리: barEditItem1.EditValueChanged 이벤트를 처리하여 사용자가 선택한 언어를 받아 UI 텍스트를 변경합니다.

UI 언어 변경: 선택된 언어에 따라 ChangeLanguage 함수가 호출되어, UI의 모든 DevExpress 컨트롤과 리본 페이지의 텍스트가 업데이트됩니다.

2. 주요 단계
BarEditItem 설정:

BarEditItem에 repositoryItemComboBox1을 사용하여 en, kr, vi 세 가지 언어를 추가합니다.
사용자가 BarEditItem에서 언어를 선택하면 EditValueChanged 이벤트가 발생하여 UI를 업데이트합니다.
UI 언어 변경 처리:

사용자가 선택한 언어에 맞춰 ChangeLanguage 함수가 호출되고, 리소스 파일에서 해당 언어의 문자열을 로드하여 UI에 적용합니다.
재귀적 처리:

모든 DevExpress 컨트롤과 리본 페이지, 리본 그룹, 버튼들에 대해 리소스를 적용하는 코드를 추가했습니다.