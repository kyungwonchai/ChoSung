는 주어진 MainWindow.xaml.cs 코드를 수정하여 버튼 클릭 없이 프로그램 시작 시 자동 실행되며, 1분 간격으로 작업을 반복하도록 변경한 최종 코드입니다. 타이머를 추가해 작업 완료 후 1분 대기 후 반복 실행되도록 설정했습니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private DateTime _lastUploadedTime; // 마지막 업로드된 InspectionTime
        private bool _isRunning = false; // 현재 작업 실행 상태 플래그

        public MainWindow()
        {
            InitializeComponent();

            // DB에서 IP 리스트 가져오기
            _ipAddresses = GetIpAddressesFromDatabase();
            StatusListBox.Items.Add($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

            // 마지막 업로드된 InspectionTime 가져오기
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 업로드된 시간: {_lastUploadedTime}");

            // 프로그램 시작 시 작업 반복 실행
            _ = StartProcessingLoopAsync();
        }

        /// <summary>
        /// 작업을 1분 간격으로 반복 실행
        /// </summary>
        private async Task StartProcessingLoopAsync()
        {
            while (true) // 무한 반복
            {
                if (!_isRunning)
                {
                    _isRunning = true;

                    try
                    {
                        await StartProcessingAsync(); // 작업 실행
                    }
                    catch (Exception ex)
                    {
                        StatusListBox.Items.Add($"에러 발생: {ex.Message}");
                    }
                    finally
                    {
                        _isRunning = false;
                    }
                }

                // 1분 대기
                await Task.Delay(60000);
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                StatusListBox.Items.Add($"IP {ip} 처리 중...");

                // 해당 IP에 대한 파일 처리
                var processor = new FileProcessor(_lastUploadedTime, ip);
                var newRows = processor.GetNewRows($@"\\{ip}\Result");

                if (newRows.Any())
                {
                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(newRows);

                    StatusListBox.Items.Add($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");
                }
                else
                {
                    StatusListBox.Items.Add($"IP {ip}: 새로운 데이터 없음.");
                }
            }

            // 마지막 업로드된 시간 갱신
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
            var ipList = new List<string>();

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                    }
                }
            }

            return ipList;
        }

        /// <summary>
        /// 데이터베이스에서 마지막 업로드된 InspectionTime 가져오기
        /// </summary>
        private DateTime GetLastUploadedTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    // 결과값이 없을 경우 1년 전 시간 반환
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }
    }
}
변경된 주요 내용
반복 실행 로직 추가 (StartProcessingLoopAsync):

프로그램 시작 시 무한 루프를 통해 작업이 반복 실행되도록 변경.
await Task.Delay(60000)를 사용하여 작업 완료 후 1분 대기.
플래그로 중복 실행 방지:

_isRunning 플래그를 사용하여 작업 중복 실행 방지.
버튼 클릭 코드 제거:

StartButton_Click 이벤트 제거 (자동 실행으로 대체).
작업 실행:

기존의 StartProcessingAsync를 통해 작업 실행.
리스트박스 로그 관리:

작업 상태를 StatusListBox에 표시.
결과
리스트박스 출력 예시
yaml
코드 복사
2025-01-10 10:00:00 - 가져온 IP 목록: 192.168.0.1, 192.168.0.2
2025-01-10 10:00:01 - 마지막 업로드된 시간: 2025-01-09 18:00:00
2025-01-10 10:00:02 - IP 192.168.0.1 처리 중...
2025-01-10 10:00:05 - IP 192.168.0.1에서 5개의 데이터 업로드 완료.
2025-01-10 10:00:06 - IP 192.168.0.2 처리 중...
2025-01-10 10:00:10 - IP 192.168.0.2에서 3개의 데이터 업로드 완료.
2025-01-10 10:00:11 - 1분 대기 시작