래는 기존 코드에서 요청하신 대로 L/R 분류를 추가하고, 범례를 동기화하여 MP1~MP5의 가시성을 두 차트에 동시에 적용하도록 구현한 전체 완성 코드입니다.

XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="900" Width="1200">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*" />
            <RowDefinition Height="1.5*" />
            <RowDefinition Height="1.5*" />
        </Grid.RowDefinitions>

        <!-- 상단 라인별 BoxPlot 차트 -->
        <dxc:ChartControl Grid.Row="0" x:Name="LineChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Line Name" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Values" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>
                    <!-- BoxPlot 시리즈 -->
                    <dxc:BoxPlotSeries2D DataSource="{Binding BoxPlotChartData}"
                                         ArgumentDataMember="LineName"
                                         MinValueDataMember="MinValue"
                                         MaxValueDataMember="MaxValue"
                                         MedianValueDataMember="MedianValue"
                                         LowerQuartileValueDataMember="LowerQuartile"
                                         UpperQuartileValueDataMember="UpperQuartile" />
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 L 모델 차트 -->
        <dxc:ChartControl Grid.Row="1" x:Name="LModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend UseCheckBoxes="True" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Values" />
                    </dxc:XYDiagram2D.AxisY>
                    <!-- 시리즈는 코드 비하인드에서 추가 -->
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 R 모델 차트 -->
        <dxc:ChartControl Grid.Row="2" x:Name="RModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend UseCheckBoxes="True" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Values" />
                    </dxc:XYDiagram2D.AxisY>
                    <!-- 시리즈는 코드 비하인드에서 추가 -->
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadData();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, dataL);

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, dataR);

            // 범례 항목 동기화 설정
            SyncLegends();
        }

        private List<DataPoint> LoadData()
        {
            // 실제 데이터 로드 로직 구현 (예시 데이터)
            return new List<DataPoint>
            {
                new DataPoint { ModelName = "Line1L", Timestamp = DateTime.Now.AddMinutes(-10), MP1 = 10, MP2 = 20, MP3 = 30, MP4 = 40, MP5 = 50 },
                new DataPoint { ModelName = "Line2R", Timestamp = DateTime.Now.AddMinutes(-5), MP1 = 15, MP2 = 25, MP3 = 35, MP4 = 45, MP5 = 55 },
                // 추가 데이터...
            };
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new LineSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = "MP1" // 라인별 데이터를 기준으로 변경 가능
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data)
        {
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName // 범례와 연결
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }
        }

        private void SyncLegends()
        {
            foreach (var item in LModelChart.Legend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }
            foreach (var item in RModelChart.Legend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }
        }

        private void LegendItem_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (sender is LegendItem legendItem && legendItem.Series != null)
            {
                var mpName = legendItem.Series.Tag as string;
                ToggleSeriesVisibility(mpName);
            }
        }

        private void ToggleSeriesVisibility(string mpName)
        {
            // L 모델 차트
            ToggleSeriesInChart(LModelChart, mpName);

            // R 모델 차트
            ToggleSeriesInChart(RModelChart, mpName);
        }

        private void ToggleSeriesInChart(ChartControl chart, string mpName)
        {
            foreach (var series in ((XYDiagram2D)chart.Diagram).Series)
            {
                if (series.Tag as string == mpName)
                {
                    series.Visible = !series.Visible;
                }
            }
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 구현 사항
상단 라인별 차트:

BoxPlotSeries2D로 라인별 데이터를 표시.
하단 L/R 차트:

MP1~MP5 데이터를 각각의 시리즈로 추가.
범례를 통해 MP별로 가시성 조정.
범례 동기화:

L/R 모델 차트의 범례 클릭 시 MP1~MP5의 시리즈가 두 차트에 동시에 적용되도록 구현.
데이터 분리:
