프로젝트 생성 시 기본적으로 제공되는 파일들 외에 추가로 필요한 부분만 설명하고, 각 코드에 주석을 추가하여 설명하겠습니다.

1. AndroidManifest.xml
먼저, AndroidManifest.xml 파일에 필요한 권한과 서비스를 추가합니다. 여기서 권한은 블루투스와 접근성 서비스 사용을 위해 필요합니다.

xml
코드 복사
<!-- AndroidManifest.xml -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.btscannerapp">

    <!-- 블루투스와 접근성 서비스 사용을 위한 권한 추가 -->
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.BLUETOOTH_SCAN"/>
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BTScannerApp">

        <!-- MainActivity 설정 -->
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <!-- 접근성 서비스 설정 -->
        <service
            android:name=".MyAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE"
            android:exported="true">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>

</manifest>
2. res/xml/accessibility_service_config.xml
접근성 서비스 설정 파일을 추가합니다. 이 파일은 접근성 서비스의 속성을 정의합니다.

xml
코드 복사
<!-- 접근성 서비스 설정 파일 -->
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name" <!-- 대상 앱의 패키지 이름으로 수정하세요 -->
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
3. MainActivity.kt
MainActivity에 블루투스 초기화 및 권한 요청 코드를 추가합니다. 블루투스 데이터를 읽고 접근성 서비스를 통해 다른 앱의 입력 창에 값을 넣습니다.

kotlin
코드 복사
package com.example.btscannerapp

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : ComponentActivity() {

    // 블루투스 어댑터와 소켓 변수 선언
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    // 권한 요청을 위한 런처 설정
    private val requestPermissionLauncher = registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissions ->
        permissions.entries.forEach {
            val permissionName = it.key
            val isGranted = it.value
            if (!isGranted) {
                // 권한이 거부된 경우 처리
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 블루투스 권한 요청
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_SCAN) != PackageManager.PERMISSION_GRANTED ||
                ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                requestPermissionLauncher.launch(arrayOf(Manifest.permission.BLUETOOTH_SCAN, Manifest.permission.BLUETOOTH_CONNECT))
            } else {
                initializeBluetooth()
            }
        } else {
            initializeBluetooth()
        }
    }

    // 블루투스 초기화
    private fun initializeBluetooth() {
        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    // 블루투스 연결을 위한 스레드 클래스
    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    // 블루투스 소켓 관리 스레드 클래스
    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
4. MyAccessibilityService.kt
접근성 서비스 클래스에서 다른 앱의 입력 창에 값을 넣는 기능을 구현합니다.

kotlin
코드 복사
package com.example.btscannerapp

import android.accessibilityservice.AccessibilityService
import android.os.Bundle
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class MyAccessibilityService : AccessibilityService() {

    // 접근성 이벤트를 처리하는 메소드
    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // 이벤트 처리 코드 (예: UI 변화 감지)
    }

    // 접근성 서비스가 인터럽트될 때 호출되는 메소드
    override fun onInterrupt() {
        // 서비스 인터럽트 처리 코드
    }

    // 특정 패키지의 텍스트 입력 필드에 텍스트를 설정하는 메소드
    fun setTextToInputField(packageName: String, text: String) {
        val rootNode = rootInActiveWindow ?: return
        val nodeList = ArrayList<AccessibilityNodeInfo>()
        findNodesByText(rootNode, packageName, nodeList)

        for (node in nodeList) {
            if (node.className == "android.widget.EditText" && node.isEditable) {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,
                    text
                )
                node.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
                break
            }
        }
    }

    // 특정 패키지의 노드를 찾아 리스트에 추가하는 재귀 함수
    private fun findNodesByText(
        node: AccessibilityNodeInfo,
        packageName: String,
        nodeList: ArrayList<AccessibilityNodeInfo>
    ) {
        if (node.packageName == packageName) {
            nodeList.add(node)
        }
        for (i in 0 until node.childCount) {
            findNodesByText(node.getChild(i), packageName, nodeList)
        }
    }
}
5. 리소스 파일 추가
res/values/strings.xml
xml
코드 복사
<resources>
    <string name="app_name">BTScannerApp</string>
    <string name="accessibility_service_description">This service helps to input scanned data into the target app.</string>
</resources>
최종 요약
위 코드들을 Android 프로젝트에 추가하여 복사합니다. AndroidManifest.xml, MainActivity.kt, MyAccessibilityService.kt, res/xml/accessibility_service_config.xml, res/values/strings.xml 파일을 적절하게 설정하면 블루투스 스캐너에서 읽은 데이터를 다른 앱의 입력 창에 자동으로 넣는 백그라운드 서비스가 구현됩니다.

com.target.package.name 부분을 접근할 앱의 실제 패키지 이름으로 수정합니다.
minSdkVersion을 16으로 설정하여 접근성 서비스의 속성들이 정상적으로 작동하도록 합니다.
이 모든 설정을 완료한 후에는 Build > Clean Project와 Build > Rebuild Project를 통해 프로젝트를 빌드하고, APK를 생성할 수 있습니다.