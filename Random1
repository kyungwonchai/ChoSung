using UnityEngine;
using UnityEditor;

public class RackLayoutGenerator
{
    // --- 여기서 배치 설정을 수정하세요 ---
    private static readonly int RACK_COUNT_PER_ROW = 12;      // 한 줄(세트)에 배치될 랙의 개수
    private static readonly float RACK_GAP = 0.01f;           // 랙과 랙 사이의 미세한 간격
    // ------------------------------------

    [MenuItem("Tools/SMD Rack/Generate Final Layout")]
    private static void GenerateLayout()
    {
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        string parentName = "Rack_Installations";
        GameObject parentObject = GameObject.Find(parentName);
        if (parentObject == null)
        {
            parentObject = new GameObject(parentName);
        }
        else 
        {
            for (int i = parentObject.transform.childCount - 1; i >= 0; i--)
            {
                GameObject.DestroyImmediate(parentObject.transform.GetChild(i).gameObject);
            }
        }
        
        // 프리팹의 크기 자동 계산
        Bounds totalBounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if(renderers.Length > 0)
        {
            totalBounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers)
            {
                totalBounds.Encapsulate(renderer.bounds);
            }
        }
        // 선 상태에서의 너비(X)와 깊이(Z)
        float rackWidth = totalBounds.size.x;
        float rackDepth = totalBounds.size.z;

        // 눕혀진 랙을 똑바로 세우기 위한 기본 회전 값
        Quaternion standingRotation = Quaternion.Euler(-90, 0, 0);

        // 첫 번째 줄 (A열) 생성: 가로로 배치
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
            rackInstance.name = $"A_{i + 1:02d}";
            
            float posX = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(posX, 0, 0);
            rackInstance.transform.rotation = standingRotation; // 똑바로 세우기
        }
        
        // ★★★ 두 번째 줄 (B열) 생성: 90도 꺾어서 세로로 배치 ★★★
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
            rackInstance.name = $"B_{i + 1:02d}";

            // 위치 설정 (A열의 시작점에서 Z축 방향으로 배치)
            float posZ = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(0, 0, posZ);

            // 회전 설정 (똑바로 세운 뒤, -90도 회전하여 A열을 바라보게 함)
            rackInstance.transform.rotation = standingRotation * Quaternion.Euler(0, -90, 0);
        }

        EditorUtility.DisplayDialog("완료", "'ㄱ'자 형태로 마주보도록 배치했습니다.", "확인");
    }
}