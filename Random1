니다. 가정을 더 명확히 하고 코드를 작성하겠습니다. DevExpress의 GridControl과 TableView를 사용하는 WPF 애플리케이션에서 SQL 데이터베이스에 있는 데이터를 표시한다고 가정합니다. 데이터는 DataTable 객체에 저장됩니다. 특정 행을 잠그려고 하면, 해당 행의 잠금 상태를 별도의 HashSet에 저장합니다.
C# 코드

csharp

using DevExpress.Xpf.Grid;
using System.Collections.Generic;
using System.Data;

public partial class MainWindow : Window
{
    private DataTable dt = new DataTable();
    private HashSet<int> lockedRows = new HashSet<int>();

    public MainWindow()
    {
        InitializeComponent();
        // 데이터 로딩 및 초기화
        // dt = LoadYourData();
        gridControl.ItemsSource = dt;
    }

    private void gridControl_RowClick(object sender, RowClickEventArgs e)
    {
        int rowHandle = e.RowHandle;
        if (!lockedRows.Contains(rowHandle))
        {
            LockRow(rowHandle);
        }
    }

    private void LockRow(int rowHandle)
    {
        // DB나 다른 서비스로 '잠금' 상태 전송
        // SendLockStatusToDB(rowHandle, true);

        lockedRows.Add(rowHandle);
        // Optional: 노란색 배경 설정
        // SetRowBackground(rowHandle, Colors.Yellow);
    }

    private void btnUpdate_Click(object sender, RoutedEventArgs e)
    {
        // DB 업데이트 로직
        // UpdateDBWithLockedRows(lockedRows);

        lockedRows.Clear();
    }
}

XAML 코드

xaml

<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid">
    <Grid>
        <dxg:GridControl Name="gridControl" RowClick="gridControl_RowClick">
            <!-- 다른 설정 -->
        </dxg:GridControl>
        <Button Name="btnUpdate" Content="Update" Click="btnUpdate_Click" />
    </Grid>
</Window>

이 예제에서는 gridControl_RowClick 이벤트에서 행을 잠급니다. 잠긴 행의 목록은 lockedRows에 저장됩니다. "Update" 버튼을 누르면 해당 행들을 데이터베이스에 업데이트하고 잠금을 해제합니다(lockedRows.Clear()). 이 로직을 실제 데이터베이스와 연동하려면 주석 처리된 부분을 구현해야 합니다.