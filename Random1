oolTip이 비어 나오는 문제
현재 문제는 **ToolTip**에서 함수 이름이 제대로 바인딩되지 않는 상황입니다. 이를 해결하기 위해 **ToolTip**에서 함수 이름을 정확히 표시하도록 **ItemsControl**의 데이터 컨텍스트를 적절하게 설정해야 합니다.

수정된 도형의 ToolTip (함수 이름 표시)
xml
코드 복사
<DataGridTemplateColumn Header="Function Status" Width="2*">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <ItemsControl ItemsSource="{Binding FunctionStatusColors}" AlternationCount="{Binding FunctionNames.Count}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Ellipse Width="20" Height="20" Fill="{Binding}" Margin="5">
                            <!-- Tooltip으로 함수 이름 표시 -->
                            <Ellipse.ToolTip>
                                <!-- FunctionNames의 각 함수 이름을 표시 (AlternationIndex를 사용하여 인덱스를 참조) -->
                                <TextBlock Text="{Binding DataContext.FunctionNames[ItemsControl.AlternationIndex], RelativeSource={RelativeSource AncestorType=ItemsControl}}"/>
                            </Ellipse.ToolTip>
                        </Ellipse>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>
변경된 부분 설명:
AlternationCount="{Binding FunctionNames.Count}": 이 속성을 사용하여 ItemsControl의 각 항목이 몇 번째 도형인지 계산할 수 있도록 했습니다.
ItemsControl.AlternationIndex: 이 값을 사용하여 현재 도형의 인덱스에 해당하는 FunctionNames 리스트의 이름을 ToolTip으로 표시했습니다.
이제 도형 위에 마우스를 올리면 해당 도형에 연결된 함수 이름이 올바르게 표시될 것입니다.

2. 함수가 실행된 후 경과 시간을 표시
함수가 실행된 후 얼마나 시간이 지났는지를 표시하기 위해, 각 함수가 실행될 때마다 시작 시간을 기록하고, 경과 시간을 ProgressText 또는 다른 컬럼에 표시할 수 있도록 구현하겠습니다.

TaskModel.cs (경과 시간 표시 코드)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Collections.ObjectModel;
using System.Windows;
using System.Diagnostics; // Stopwatch 사용

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스 플래그에 따라 함수들을 순차적으로 실행합니다.
/// 실행된 함수가 몇 초 동안 실행되었는지 경과 시간을 표시합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }  // 시퀀스 플래그 (1: 시작, 2: 중간, 3: 끝)

    // 함수 상태를 위한 도형 색상 리스트 (각 함수에 따른 도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }
    
    // 각 함수 이름을 저장 (마우스 오버 시 함수 이름 표시)
    public ObservableCollection<string> FunctionNames { get; set; }
    
    // 진행 상태를 표시하는 텍스트 (실시간으로 반영)
    private string _progressText;
    public string ProgressText
    {
        get => _progressText;
        set
        {
            _progressText = value;
            OnPropertyChanged(nameof(ProgressText));
        }
    }

    // 경과 시간을 측정하기 위한 Stopwatch
    private Stopwatch _stopwatch;

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSpecificTaskCommand { get; }  // 도형 우클릭 시 특정 함수만 실행

    // 다음 작업 행을 관리하는 Action 델리게이트 (현재 작업 완료 후 호출)
    public Action<TaskModel> StartNextTask { get; set; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag; // 시퀀스 플래그는 파일에서 결정됨

        _taskQueue = taskQueue;
        Status = "Pending"; // 처음엔 대기 상태
        ProgressText = "Pending"; // 기본 상태 (대기 중)
        
        _stopwatch = new Stopwatch(); // Stopwatch 초기화

        // 각 함수마다 도형을 설정 (시퀀스에 따라 다른 개수)
        FunctionStatusColors = new ObservableCollection<Brush>();
        FunctionNames = new ObservableCollection<string>();

        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        ExecuteSpecificTaskCommand = new RelayCommand<int>(ExecuteSpecificTask);  // 특정 함수 실행

        InitializeFunctionColors(); // 초기 도형 상태 설정
    }

    /// <summary>
    /// 작업을 시작하고 각 함수 완료 시 도형 색상을 변경합니다.
    /// 작업의 경과 시간을 Stopwatch로 계산합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";
        ProgressText = "Running..."; // 실시간 진행 상태 업데이트
        _stopwatch.Restart(); // Stopwatch를 시작하여 경과 시간을 기록

        _taskQueue.EnqueueTask(ExecuteTaskSequence); // 작업 큐에 시퀀스 작업 추가
    }

    /// <summary>
    /// 시퀀스 플래그에 따라 작업을 순차적으로 실행.
    /// 각 작업이 완료될 때마다 경과 시간을 ProgressText로 표시합니다.
    /// </summary>
    private async Task ExecuteTaskSequence()
    {
        switch (SequenceFlag)
        {
            case 1:
                await ExecuteTaskWithColor(0, ExecuteTaskA);
                await ExecuteTaskWithColor(1, ExecuteTaskB);
                await ExecuteTaskWithColor(2, ExecuteTaskC);
                break;
            case 2:
                await ExecuteTaskWithColor(0, ExecuteTaskC);
                await ExecuteTaskWithColor(1, ExecuteTaskB);
                await ExecuteTaskWithColor(2, ExecuteTaskD);
                break;
            case 3:
                await ExecuteTaskWithColor(0, ExecuteTaskA);
                await ExecuteTaskWithColor(1, ExecuteTaskB);
                await ExecuteTaskWithColor(2, ExecuteTaskE);
                break;
        }

        // 작업 완료 후 상태 변경 및 경과 시간 표시
        Status = "Completed";
        ProgressText = $"Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 경과 시간을 ProgressText에 표시

        // 현재 작업이 끝났으므로 다음 작업 행을 실행
        StartNextTask?.Invoke(this);
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 완료되면 해당 인덱스의 도형 색상을 변경합니다.
    /// 작업 완료 시 경과 시간을 갱신합니다.
    /// </summary>
    private async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.SkyBlue; // 작업 진행 중 색상
            OnPropertyChanged(nameof(FunctionStatusColors));
        });

        await task(); // 작업 실행

        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.Green; // 작업 완료 시 색상
            ProgressText = $"Running... ({_stopwatch.Elapsed.Seconds} seconds elapsed)"; // 경과 시간 실시간 갱신
            OnPropertyChanged(nameof(FunctionStatusColors));
        });
    }

    /// <summary>
    /// 특정 함수를 우클릭하여 단독 실행합니다.
    /// </summary>
    private async void ExecuteSpecificTask(int taskIndex)
    {
        switch (FunctionNames[taskIndex])
        {
            case "Task A":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskA);
                break;
            case "Task B":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskB);
                break;
            case "Task C":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskC);
                break;
            case "Task D":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskD);
                break;
            case "Task E":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskE);
                break;
            default:
                throw new ArgumentException("Unknown task");
        }
    }

    /// <summary>
    /// 각 함수의 기본 도형 색상을 설정합니다 (회색).
    /// </summary>
    private void InitializeFunctionColors()
    {
        int functionCount = 3; // 각 시퀀스 플래그에서 기본 3개의 함수

        for (int i = 0; i < functionCount; i++)
        {
            FunctionStatusColors.Add(Brushes.Gray); // 기본 색상 (회색)
        }

        // 각 함수의 이름을 설정
        switch (SequenceFlag)
        {
            case 1:
                FunctionNames.Add("Task A");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task C");
                break;
            case 2:
                FunctionNames.Add("Task C");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task D");
                break;
            case 3:
                FunctionNames.Add("Task A");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task E");
                break;
        }
    }

    /// <summary>
    /// Task A 실행
    /// </summary>
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = $"Task A Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 진행 상태 및 경과 시간 업데이트
    }

    /// <summary>
    /// Task B 실행
    /// </summary>
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = $"Task B Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 진행 상태 및 경과 시간 업데이트
    }

    /// <summary>
    /// Task C 실행
    /// </summary>
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = $"Task C Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 진행 상태 및 경과 시간 업데이트
    }

    /// <summary>
    /// Task D 실행
    /// </summary>
    private async Task ExecuteTaskD()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = $"Task D Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 진행 상태 및 경과 시간 업데이트
    }

    /// <summary>
    /// Task E 실행
    /// </summary>
    private async Task ExecuteTaskE()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = $"Task E Completed in {_stopwatch.Elapsed.Seconds} seconds"; // 진행 상태 및 경과 시간 업데이트
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _taskQueue.Pause();
        ProgressText = "Paused"; // 진행 상태 업데이트
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    private void ResumeTask()
    {
        _taskQueue.Resume();
        ProgressText = "Resumed"; // 진행 상태 업데이트
    }
}
설명:
Stopwatch: 각 작업이 실행될 때마다 Stopwatch를 시작하고, 함수가 완료되었을 때 경과 시간을 ProgressText로 표시합니다.
경과 시간 표시: 각 함수가 완료되면 해당 작업이 몇 초가 지났는지 표시됩니다. 실행 중에도 경과 시간을 실시간으로 업데이트할 수 있습니다.
이제 도형에 마우스를 올리면 함수 이름이 표시되고, 함수가 실행된 후 경과 시간이 ProgressText에 반영됩니다. 추가적인 수정이 필요하다면 언제든지 알려주세