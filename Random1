using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class RackSystemManager : MonoBehaviour
{
    [Header("핵심 연결 대상")]
    public Transform rackContainer;

    [Header("머티리얼")]
    public Material defaultLampMaterial;
    public Material litLampMaterial;

    [Header("애니메이션")]
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    // 데이터 저장소 1: 실제 오브젝트의 고유 주소(A_12d_Mask_A01 등)를 저장
    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    
    // ★★★ 데이터 저장소 2: 깨끗한 주소(A_01)와 실제 랙 이름(A_12d)을 연결하는 번역 맵 ★★★
    private Dictionary<string, string> cleanToMessyRackNameMap = new Dictionary<string, string>();

    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        int rackCounterA = 1;
        int rackCounterB = 1;

        // ★★★ 디버깅을 위해 번역 맵 생성 과정을 콘솔에 출력합니다 ★★★
        Debug.Log("--- 생성된 번역 맵 (깨끗한 ID -> Hierarchy 실제 이름) ---");

        foreach (Transform rackParent in rackContainer)
        {
            string messyRackName = rackParent.name; // 예: "A_12d", "A_22d"
            string cleanRackID;

            // 랙 순서에 따라 깨끗한 ID ("A_01", "B_01" 등)를 생성
            if (messyRackName.StartsWith("A"))
            {
                cleanRackID = $"A_{rackCounterA:02d}";
                rackCounterA++;
            }
            else if (messyRackName.StartsWith("B"))
            {
                cleanRackID = $"B_{rackCounterB:02d}";
                rackCounterB++;
            }
            else
            {
                continue;
            }

            // 번역 맵에 정보 추가: "A_01"은 실제 이름 "A_12d"에 해당한다고 기록
            if (!cleanToMessyRackNameMap.ContainsKey(cleanRackID))
            {
                cleanToMessyRackNameMap.Add(cleanRackID, messyRackName);
                Debug.Log($"매핑: '{cleanRackID}' -> '{messyRackName}'");
            }
            
            // 기존 방식대로 실제 이름(messy name)을 사용해 램프와 마스크 등록
            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name;
                string globalKey = $"{messyRackName}_{localName}";

                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                    {
                        lampRenderers.Add(globalKey, rend);
                        if (defaultLampMaterial != null) rend.material = defaultLampMaterial;
                    }
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                    {
                        maskObjects.Add(globalKey, rend.gameObject);
                    }
                }
            }
        }
        
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    // ★★★ 깨끗한 바코드를 받아, 번역 맵을 통해 실제 주소로 변환하여 찾는 최종 로직 ★★★
    public void ProcessBarcode(string cleanBarcode)
    {
        ResetPreviousSlot();

        if (string.IsNullOrEmpty(cleanBarcode) || cleanBarcode.Length != 11 || !cleanBarcode.StartsWith("MMF10"))
        {
            Debug.LogError($"잘못된 바코드 형식입니다: {cleanBarcode}. (11자리, 예: MMF10A12C05)");
            return;
        }

        // 1. 깨끗한 바코드(MMF10A01C05)를 해석
        string row = cleanBarcode.Substring(5, 1);
        string rackNum = cleanBarcode.Substring(6, 2);
        string floor = cleanBarcode.Substring(8, 1);
        string slotNum = cleanBarcode.Substring(9, 2);

        // 2. 깨끗한 랙 ID("A_01")를 만듦
        string cleanRackID = $"{row}_{rackNum}";

        // 3. 번역 맵을 사용해 깨끗한 ID("A_01")에 해당하는 실제 랙 이름("A_12d")을 찾아냄
        if (cleanToMessyRackNameMap.TryGetValue(cleanRackID, out string messyRackName))
        {
            // 4. 찾아낸 실제 이름으로 최종 키를 조합
            string lampKey = $"{messyRackName}_Lamp_{floor}{slotNum}";
            string maskKey = $"{messyRackName}_Mask_{floor}{slotNum}";
            
            if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
            {
                if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
                lastLitLamp = targetLampRenderer;
            }
            else { Debug.LogWarning($"경고: {lampKey} 이름의 램프를 찾지 못했습니다."); }

            if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
            {
                lastMovedMask = targetMask;
                lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
                lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
            }
            else { Debug.LogWarning($"경고: {maskKey} 이름의 마스크를 찾지 못했습니다."); }
        }
        else
        {
            Debug.LogError($"오류: 입력한 바코드의 랙 ID '{cleanRackID}'에 해당하는 랙이 번역 맵에 없습니다.");
        }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;

        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 
        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }

        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;

        if (rb != null) rb.isKinematic = false;
    }
    
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessBarcode(text.ToUpper());
        }
    }
}