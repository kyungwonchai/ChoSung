PF 프로젝트에서 이미지 추가, 이중 실행 방지, 시스템 트레이 아이콘 기능 등을 구현하는 방법을 상세히 설명드리겠습니다.

1. WPF에 이미지 넣기
이미지를 WPF 프로젝트에 추가하는 방법입니다.

이미지 파일을 프로젝트에 추가:

Visual Studio에서 Solution Explorer에서 프로젝트 이름을 우클릭한 후 Add > New Folder를 선택하여 폴더를 만듭니다. 폴더 이름을 Images로 지정합니다.
Images 폴더를 우클릭하고 Add > Existing Item을 선택하여 사용할 이미지 파일을 추가합니다.
추가된 이미지 파일을 클릭하고 Properties 창에서 Build Action을 Resource로 설정합니다. 이 설정은 WPF 리소스로 이미지 파일을 추가하기 위한 것입니다.
XAML에서 이미지 표시: XAML 파일에서 이미지를 표시하려면 Image 컨트롤을 사용합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <Image Source="Images/yourimage.png" Width="100" Height="100" />
    </Grid>
</Window>
Source="Images/yourimage.png" 부분에 실제 이미지 경로를 넣습니다.
이미지 크기는 Width와 Height 속성을 사용하여 조정할 수 있습니다.
2. 이중 실행 방지 (Single Instance Application)
WPF 프로그램이 여러 번 실행되지 않도록 방지하려면 Mutex를 사용합니다. Mutex는 단일 애플리케이션 인스턴스를 보장하는 데 사용됩니다.

App.xaml.cs 파일 수정: App.xaml.cs 파일에서 OnStartup 메서드를 재정의하여 Mutex를 설정합니다.

csharp
코드 복사
using System;
using System.Threading;
using System.Windows;

namespace WpfApp
{
    public partial class App : Application
    {
        private static Mutex _mutex = null;

        protected override void OnStartup(StartupEventArgs e)
        {
            const string appName = "WpfApp";  // 애플리케이션 이름
            bool createdNew;

            // Mutex 생성
            _mutex = new Mutex(true, appName, out createdNew);

            if (!createdNew)
            {
                // 이미 실행 중인 애플리케이션이 있으면 새 인스턴스를 종료
                Application.Current.Shutdown();
                return;
            }

            base.OnStartup(e);
        }
    }
}
createdNew가 false일 때 이미 실행 중인 애플리케이션이 있다는 의미이며, 이때 새로 실행되는 인스턴스를 종료합니다.
3. 닫기 버튼 클릭 시 시스템 트레이로 이동
애플리케이션이 닫힐 때 트레이로 이동하고, 트레이에서 우클릭하여 애플리케이션을 종료할 수 있도록 구현합니다.

NotifyIcon 사용하기: 시스템 트레이 아이콘을 사용하기 위해 System.Windows.Forms 네임스페이스를 추가합니다.

프로젝트를 우클릭한 후 Add > Reference를 선택하고, System.Windows.Forms를 추가합니다.
MainWindow.xaml.cs 파일에 시스템 트레이 기능 추가:

csharp
코드 복사
using System.Windows;
using System.Windows.Forms;
using System.Drawing;  // 아이콘 관련
using Application = System.Windows.Application;  // 충돌 방지용

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private NotifyIcon _notifyIcon;

        public MainWindow()
        {
            InitializeComponent();
            SetupTrayIcon();  // 트레이 아이콘 설정
        }

        private void SetupTrayIcon()
        {
            _notifyIcon = new NotifyIcon();
            _notifyIcon.Icon = new Icon("Images/youricon.ico"); // 트레이에 사용할 아이콘
            _notifyIcon.Visible = true;
            _notifyIcon.DoubleClick += NotifyIcon_DoubleClick;

            // 트레이 아이콘에 우클릭 메뉴 추가
            var contextMenu = new System.Windows.Forms.ContextMenu();
            var exitMenuItem = new MenuItem("Exit", Exit_Click);
            contextMenu.MenuItems.Add(exitMenuItem);

            _notifyIcon.ContextMenu = contextMenu;
        }

        // 트레이 아이콘 더블클릭 시 창 복구
        private void NotifyIcon_DoubleClick(object sender, EventArgs e)
        {
            this.Show();
            this.WindowState = WindowState.Normal;
        }

        // 트레이 메뉴에서 Exit 클릭 시 애플리케이션 종료
        private void Exit_Click(object sender, EventArgs e)
        {
            _notifyIcon.Visible = false;
            Application.Current.Shutdown();
        }

        // 윈도우 상태 변경 시 (최소화 시) 처리
        protected override void OnStateChanged(EventArgs e)
        {
            if (WindowState == WindowState.Minimized)
            {
                this.Hide();  // 창을 숨김
                _notifyIcon.ShowBalloonTip(1000, "App Minimized", "The application has been minimized to the system tray.", ToolTipIcon.Info);
            }

            base.OnStateChanged(e);
        }

        // 창 닫기 버튼을 눌렀을 때 처리 (창을 닫지 않고 트레이로 이동)
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true; // 닫기 동작을 취소
            this.Hide();     // 창을 트레이로 이동
        }
    }
}
트레이 아이콘 설정: NotifyIcon을 사용하여 시스템 트레이에 아이콘을 표시합니다. 아이콘 파일(youricon.ico)을 프로젝트에 추가해야 합니다.
트레이 더블 클릭: 트레이 아이콘을 더블 클릭하면 숨겨진 창이 다시 나타나도록 설정합니다.
트레이 우클릭 메뉴: 트레이 아이콘에서 우클릭하면 "Exit" 메뉴가 나오며, 이를 통해 애플리케이션을 종료할 수 있습니다.
창 닫기 버튼 누를 시 트레이로 이동: OnClosing 메서드에서 닫기 버튼을 눌렀을 때 창을 닫지 않고 트레이로 숨기도록 처리합니다.
4. 트레이 더블 클릭 시 창 복구
위에서 설명한 대로, 트레이 아이콘을 더블 클릭하면 창을 다시 나타나게 하는 부분은 이미 NotifyIcon_DoubleClick 이벤트에서 구현되었습니다.

csharp
코드 복사
private void NotifyIcon_DoubleClick(object sender, EventArgs e)
{
    this.Show();  // 창을 다시 나타냄
    this.WindowState = WindowState.Normal;  // 최소화 상태 해제
}
요약:
이미지 추가: 이미지를 프로젝트에 추가하고 XAML에서 <Image> 컨트롤로 표시합니다.
이중 실행 방지: Mutex를 사용하여 애플리케이션이 두 번 실행되지 않도록 설정합니다.
시스템 트레이: NotifyIcon을 사용하여 창이 최소화되거나 닫힐 때 트레이로 이동하고, 트레이에서 더블 클릭하면 다시 창을 복구하도록 구현합니다.
트레이 메뉴에서 애플리케이션 종료: 트레이에서 우클릭 메뉴를 통해 애플리케이션을 종료할 수 있게 설정합니다.
이 방법을 통해 요구하신 기능들을 구현할 수 있