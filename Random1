좋아, 그러면 네가 하고 싶은 걸 간단하게 정리하면 이거야:

CSV 데이터를 열어서 복사한다.

그 데이터를 임시로 업로드한다. (Flask 웹 어플리케이션이나 MSSQL 데이터베이스로)

업로드된 데이터로 SQL 쿼리도 실행하고 분석하고 싶다.

1. CSV 데이터를 Flask 웹 어플리케이션에 업로드하고 MSSQL 데이터베이스로 저장하기
(1) Flask 서버 준비하기
bash
코드 복사
pip install flask pandas pymssql
(2) app.py 파일 만들기
python
코드 복사
from flask import Flask, render_template, request, redirect, url_for
import pandas as pd
import pymssql

app = Flask(__name__)

# MSSQL 연결 정보 설정
DB_CONFIG = {
    'server': 'YOUR_SERVER',  # MSSQL 서버 주소
    'user': 'YOUR_USERNAME',
    'password': 'YOUR_PASSWORD',
    'database': 'YOUR_DATABASE'
}

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/upload', methods=['POST'])
def upload():
    if 'csv_file' not in request.files:
        return "파일이 업로드되지 않았습니다.", 400

    file = request.files['csv_file']
    if file.filename == '':
        return "파일이 선택되지 않았습니다.", 400

    # CSV 파일을 pandas DataFrame으로 읽기
    df = pd.read_csv(file)

    # MSSQL 데이터베이스 연결
    conn = pymssql.connect(**DB_CONFIG)
    cursor = conn.cursor()

    # 테이블 생성 (만약 없으면)
    cursor.execute("""
    IF OBJECT_ID('TempData', 'U') IS NOT NULL
        DROP TABLE TempData;
    CREATE TABLE TempData (
        Column1 VARCHAR(255),
        Column2 VARCHAR(255),
        Column3 VARCHAR(255)
    );
    """)
    conn.commit()

    # DataFrame 데이터를 데이터베이스에 삽입
    for index, row in df.iterrows():
        cursor.execute("INSERT INTO TempData (Column1, Column2, Column3) VALUES (%s, %s, %s)",
                       (row[0], row[1], row[2]))
    conn.commit()
    conn.close()

    return redirect(url_for('index'))

@app.route('/query', methods=['POST'])
def query():
    query_text = request.form.get('query')
    
    # MSSQL 데이터베이스 연결
    conn = pymssql.connect(**DB_CONFIG)
    cursor = conn.cursor()
    
    try:
        cursor.execute(query_text)
        result = cursor.fetchall()
        columns = [col[0] for col in cursor.description]
        conn.close()
        return render_template('index.html', result=result, columns=columns)
    except Exception as e:
        conn.close()
        return f"쿼리 오류: {str(e)}"

if __name__ == '__main__':
    app.run(debug=True)
(3) index.html 파일 만들기 (템플릿 폴더 안에 저장)
html
코드 복사
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>CSV 업로드 및 쿼리</title>
</head>
<body>
    <h1>CSV 업로드</h1>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <input type="file" name="csv_file">
        <button type="submit">업로드</button>
    </form>

    <h1>쿼리 실행</h1>
    <form action="/query" method="post">
        <textarea name="query" rows="5" cols="60"></textarea><br>
        <button type="submit">쿼리 실행</button>
    </form>

    {% if result %}
    <h2>쿼리 결과</h2>
    <table border="1">
        <thead>
            <tr>
                {% for column in columns %}
                <th>{{ column }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for row in result %}
            <tr>
                {% for cell in row %}
                <td>{{ cell }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
    {% endif %}
</body>
</html>
2. 사용 방법
app.py 파일을 실행합니다.

bash
코드 복사
python app.py
브라우저에서 http://127.0.0.1:5000/ 에 접속합니다.

CSV 파일을 업로드합니다.

쿼리창에 원하는 SQL을 입력하고 실행합니다. 예시:

sql
코드 복사
SELECT * FROM TempData;
3. 설명
CSV 파일 업로드 후 TempData 테이블에 저장합니다.

SQL 쿼리를 입력하여 데이터를 조회하거나 분석할 수 있습니다.

Flask를 사용하여 웹 인터페이스로 간편하게 CSV 데이터를 관리할 수 있습니다.
