는 라인 조건을 기반으로 SQL Stored Procedure와 WPF에서 이를 호출하는 코드를 제공하는 방식으로 작성되었습니다. 라인 필터링 조건은 IN 연산자로 전달되며, 데이터베이스에서 결과를 반환합니다.

SQL: Stored Procedure 생성
LineTable에서 라인 필터링을 수행하는 프로시저를 생성합니다.

sql
코드 복사
CREATE PROCEDURE GetFilteredLines
    @LineNames NVARCHAR(MAX) -- 라인 이름 필터
AS
BEGIN
    SET NOCOUNT ON;

    -- 동적으로 필터된 라인만 조회
    DECLARE @Query NVARCHAR(MAX)
    SET @Query = '
        SELECT GroupName, LineName
        FROM LineTable
        WHERE LineName IN (' + @LineNames + ')'

    EXEC sp_executesql @Query
END
C# 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeViewCheckboxExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Group> Groups { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // 데이터 로드 및 초기 설정
            LoadData();
            SetAllChecked(true);
            ExpandAllGroups();
        }

        /// <summary>
        /// 데이터를 로드합니다.
        /// </summary>
        private void LoadData()
        {
            Groups = new ObservableCollection<Group>
            {
                new Group
                {
                    Name = "Group A",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 1.1" },
                        new Line { Name = "Line 1.2" }
                    }
                },
                new Group
                {
                    Name = "Group B",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 2.1" },
                        new Line { Name = "Line 2.2" }
                    }
                }
            };
        }

        /// <summary>
        /// 모든 그룹과 라인을 체크 상태로 설정합니다.
        /// </summary>
        private void SetAllChecked(bool isChecked)
        {
            foreach (var group in Groups)
            {
                group.IsChecked = isChecked;
                foreach (var line in group.Lines)
                {
                    line.IsChecked = isChecked;
                }
            }
        }

        /// <summary>
        /// 모든 그룹을 확장 상태로 설정합니다.
        /// </summary>
        private void ExpandAllGroups()
        {
            foreach (var group in Groups)
            {
                group.IsExpanded = true;
            }
        }

        /// <summary>
        /// 선택된 라인을 SQL Stored Procedure로 전달하여 데이터를 조회합니다.
        /// </summary>
        public void QuerySelectedLines()
        {
            var selectedLines = Groups
                .Where(group => group.IsChecked || group.Lines.Any(line => line.IsChecked))
                .SelectMany(group => group.Lines.Where(line => group.IsChecked || line.IsChecked))
                .Select(line => line.Name)
                .ToList();

            if (!selectedLines.Any())
            {
                MessageBox.Show("선택된 라인이 없습니다.");
                return;
            }

            // SQL IN 조건을 위해 라인 이름을 쉼표로 구분
            var lineNamesParam = string.Join(",", selectedLines.Select(name => $"'{name}'"));

            // 프로시저 실행
            ExecuteStoredProcedure(lineNamesParam);
        }

        /// <summary>
        /// Stored Procedure 실행 및 결과 처리
        /// </summary>
        private void ExecuteStoredProcedure(string lineNamesParam)
        {
            string connectionString = "YourConnectionStringHere";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                using (SqlCommand command = new SqlCommand("GetFilteredLines", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add(new SqlParameter("@LineNames", lineNamesParam));

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        DataTable resultTable = new DataTable();
                        resultTable.Load(reader);

                        // 결과를 디버그 출력 또는 메시지로 표시
                        MessageBox.Show($"조회된 행 수: {resultTable.Rows.Count}");
                    }
                }
            }
        }
    }

    public class Group : INotifyPropertyChanged
    {
        private bool _isChecked;
        private bool _isExpanded;
        public string Name { get; set; }
        public ObservableCollection<Line> Lines { get; set; } = new ObservableCollection<Line>();

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public bool IsExpanded
        {
            get => _isExpanded;
            set
            {
                if (_isExpanded != value)