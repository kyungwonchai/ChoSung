아래는 .NET Framework 3.5 환경에서 사용할 수 있도록 수정된 서버와 클라이언트의 전체 코드입니다. XAML 파일과 함께 C# 코드도 다시 제공하겠습니다.

서버 측 프로그램 전체 코드
MainWindow.xaml (서버)
xml
코드 복사
<Window x:Class="SocketServerApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Server" Height="350" Width="525">
    <Grid>
        <ListBox x:Name="listBox" HorizontalAlignment="Left" Height="297" VerticalAlignment="Top" Width="497" Margin="10,10,0,0"/>
    </Grid>
</Window>
MainWindow.xaml.cs (서버)
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Threading; // Dispatcher를 사용하기 위해 추가

namespace SocketServerApp
{
    public partial class MainWindow : Window
    {
        private Socket serverSocket;
        private byte[] buffer = new byte[1024];

        public MainWindow()
        {
            InitializeComponent();
            StartServer();
        }

        private void StartServer()
        {
            try
            {
                serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                serverSocket.Bind(new IPEndPoint(IPAddress.Any, 1433));
                serverSocket.Listen(10);
                serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
                UpdateStatus("서버가 시작되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 시작 오류: {ex.Message}");
            }
        }

        private void AcceptCallback(IAsyncResult AR)
        {
            Socket clientSocket = serverSocket.EndAccept(AR);
            UpdateStatus("클라이언트가 연결되었습니다.");
            clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
        }

        private void ReceiveCallback(IAsyncResult AR)
        {
            Socket clientSocket = (Socket)AR.AsyncState;
            int received = clientSocket.EndReceive(AR);
            if (received > 0)
            {
                string data = Encoding.UTF8.GetString(buffer, 0, received);
                UpdateStatus($"받은 데이터: {data}");
                clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                listBox.Items.Add(message);
            }));
        }
    }
}
클라이언트 측 프로그램 전체 코드
MainWindow.xaml (클라이언트)
xml
코드 복사
<Window x:Class="SocketClientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Client" Height="350" Width="525">
    <Grid>
        <TextBox x:Name="textBox" HorizontalAlignment="Left" Height="23" Margin="10,10,0,0" VerticalAlignment="Top" Width="497"/>
        <Button Content="Send" HorizontalAlignment="Left" Margin="10,38,0,0" VerticalAlignment="Top" Width="497" Height="25" Click="Button_Click"/>
        <ListBox x:Name="listBox" HorizontalAlignment="Left" Height="237" Margin="10,70,0,0" VerticalAlignment="Top" Width="497"/>
    </Grid>
</Window>
MainWindow.xaml.cs (클라이언트)
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Threading; // Dispatcher를 사용하기 위해 추가

namespace SocketClientApp
{
    public partial class MainWindow : Window
    {
        private Socket clientSocket;

        public MainWindow()
        {
            InitializeComponent();
            ConnectToServer();
        }

        private void ConnectToServer()
        {
            try
            {
                clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                clientSocket.Connect("서버의_IP_주소", 1433); // 서버의 IP 주소를 설정하세요.
                UpdateStatus("서버에 연결되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 연결 오류: {ex.Message}");
            }
        }

        private void SendMessage(string message)
        {
            if (clientSocket != null && clientSocket.Connected)
            {
                byte[] data = Encoding.UTF8.GetBytes(message);
                clientSocket.Send(data);
                UpdateStatus($"전송한 메시지: {message}");
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                listBox.Items.Add(message);
            }));
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            string message = textBox.Text;
            SendMessage(message);
        }
    }
}
코드 설명
서버 프로그램은 TCP 소켓 서버를 열어 클라이언트의 연결을 대기하고, 수신된 데이터를 ListBox에 표시합니다.
클라이언트 프로그램은 TCP 소켓 클라이언트를 사용하여 서버에 연결하고, 사용자가 입력한 메시지를 서버로 전송합니다.
Dispatcher.BeginInvoke 메서드를 사용하여 UI 스레드에서 안전하게 ListBox를 업데이트합니다.
사용 방법
Visual Studio에서 각각의 서버와 클라이언트 프로젝트를 생성합니다.
각 프로젝트의 MainWindow.xaml 파일에 해당 XAML 코드를 붙여넣습니다.
각 프로젝트의 MainWindow.xaml.cs 파일에 해당 C# 코드를 붙여넣습니다.
서버 프로젝트를 먼저 실행하여 서버를 시작합니다.
클라이언트 프로젝트를 실행하여 서버의 IP 주소를 입력한 후 "Send" 버튼을 클릭하여 메시지를 전송합니다.
서버에서 메시지를 수신하고, 클라이언트와 서버 모두 ListBox에 상태와 메시지를 표시합니다.
이렇게 하면 기본적인 TCP 소켓 통신을 통해 서버와 클라이언트 간의 네트워크 연결을 테스트할 수 있습니다.