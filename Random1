겠습니다. 주어진 패키지명을 반영하여 수정된 파일을 제공하겠습니다. 또한, findViewById에서 발생할 수 있는 문제를 해결하도록 XML 레이아웃과 MainActivity 코틀린 파일을 수정하겠습니다.

1. 수정된 activity_main.xml
이 XML 파일에서는 DecoratedBarcodeView를 사용하여 카메라 프리뷰를 표시하고, findViewById를 통해 뷰를 참조할 수 있도록 ID를 명확히 정의합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.journeyapps.barcodescanner.DecoratedBarcodeView
        android:id="@+id/camera_preview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. 수정된 MainActivity.kt
이 코틀린 파일은 패키지명을 com.dxmxsmd.mobilechecker로 맞추고, findViewById가 정상적으로 작동하도록 수정했습니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        barcodeView = findViewById(R.id.camera_preview)
        barcodeView.decodeContinuous(callback)
    }

    private val callback = object : BarcodeCallback {
        override fun barcodeResult(result: BarcodeResult) {
            if (result.text != null) {
                val scannedValue = result.text
                val codeType = result.barcodeFormat.toString()

                // 스캔된 데이터를 화면에 표시
                findViewById<TextView>(R.id.text_view_result).text = "Scanned: $scannedValue ($codeType)"

                // 데이터베이스에 저장
                saveToDatabase(codeType, scannedValue)
            }
        }

        override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
        }
    }

    private fun saveToDatabase(codeType: String, codeValue: String) {
        val dbUrl = "jdbc:jtds:sqlserver://<Your_Server_IP>:1433/BarcodeQRData"
        val dbUser = "<Your_DB_Username>"
        val dbPassword = "<Your_DB_Password>"

        try {
            val connection: Connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)
            val statement: PreparedStatement = connection.prepareStatement(
                "INSERT INTO ScannedData (CodeType, CodeValue) VALUES (?, ?)"
            )
            statement.setString(1, codeType)
            statement.setString(2, codeValue)
            statement.executeUpdate()
            statement.close()
            connection.close()
        } catch (e: Exception) {
            Log.e("DatabaseError", "Failed to save data", e)
        }
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
    }
}
주요 수정 사항:
패키지 이름: com.dxmxsmd.mobilechecker로 수정하였습니다.
findViewById: camera_preview ID를 정상적으로 참조할 수 있도록 activity_main.xml과 일치하도록 수정하였습니다.
XML 레이아웃과 액티비티 클래스가 올바르게 연동되도록 설정하였습니다.
이제 이 코드를 사용하여 findViewById에서 오류 없이 QR 코드와 바코드를 스캔할 수 있을 것입니