네, "RequesterInfo 정의가 없습니다"라는 오류는 모델 클래스와 실제 사용 코드 간의 속성 이름이 일치하지 않거나, DB 스키마와 모델 클래스가 일치하지 않을 때 발생할 수 있습니다.

이전 DB 스크립트 수정에서 ControlActionLogs 테이블의 RequestedByUserId (INT) 컬럼을 RequesterInfo (NVARCHAR)로 변경하는 방향으로 갔습니다. 이에 맞춰 ControlActionLogEntry 모델 클래스와 이를 사용하는 코드(주로 DatabaseService.cs와 MainViewModel.cs)도 일관성 있게 수정해야 합니다.

수정할 파일 목록 및 내용:

Models/ControlActionLogEntry.cs: RequestedByUserId와 RequestedByUsername 속성을 RequesterInfo (string) 속성 하나로 통합하거나 명확히 합니다.
Services/DatabaseService.cs: LogControlActionAsync 메서드 등에서 ControlActionLogEntry의 RequesterInfo 속성을 DB의 RequesterInfo 컬럼에 올바르게 매핑합니다. GetRecentControlLogsAsync 등에서도 마찬가지입니다.
ViewModels/MainViewModel.cs: ControlActionLogEntry 객체를 생성하여 DB에 로깅할 때, RequesterInfo 속성에 현재 모드 및 사용자/머신 정보를 올바르게 설정합니다.
아래에 위 세 파일의 수정된 전체 코드를 다시 드리겠습니다. MessageContract.cs는 이전 최종본을 그대로 사용합니다.

1. MGSPMonitorControl/Models/ControlActionLogEntry.cs (수정된 전체 코드)

RequestedByUserId와 RequestedByUsername을 RequesterInfo로 통합합니다.

C#

// MGSPMonitorControl/Models/ControlActionLogEntry.cs
using System;

namespace MGSPMonitorControl.Models
{
    public class ControlActionLogEntry
    {
        public long LogId { get; set; } // DB에서 자동 증가
        public Guid AgentGuid { get; set; }
        public string ActionType { get; set; }
        public string ActionParameters { get; set; } // JSON 문자열로 저장 가능
        
        // RequestedByUserId와 RequestedByUsername 대신 RequesterInfo 사용
        public string RequesterInfo { get; set; } // 예: "Admin Mode (user@machine)", "System"

        public DateTime RequestTimestamp { get; set; } = DateTime.UtcNow;
        
        public DateTime? RelayReceivedTimestamp { get; set; }
        public DateTime? AgentReceivedTimestamp { get; set; }
        public DateTime? ExecutionCompletedTimestamp { get; set; }
        
        public string FinalStatus { get; set; } // "Success", "Failure", "Timeout", "SentToBroker" 등
        public string ResultMessage { get; set; }
        public string ExecutedViaGatewayAgentId { get; set; } // 게이트웨이 경유 시 정보
    }
}
2. MGSPMonitorControl/Services/DatabaseService.cs (수정된 전체 코드)

ControlActionLogs 테이블 관련 메서드에서 RequesterInfo를 사용하도록 수정합니다.

C#

// MGSPMonitorControl/Services/DatabaseService.cs
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using MGSPMonitorControl.Models;
using System.Configuration;

namespace MGSPMonitorControl.Services
{
    public interface IDatabaseService
    {
        Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync();
        Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid);
        Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp);
        Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo);
        Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo);
        Task<bool> DeleteManagedAgentAsync(Guid agentGuid);

        Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry);
        Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100);
        Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100);
    }

    public class DatabaseService : IDatabaseService
    {
        private readonly string _connectionString;

        public DatabaseService()
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["MonitorControlDBConnection"]?.ConnectionString;
                if (string.IsNullOrEmpty(_connectionString))
                {
                    Console.WriteLine("[ERROR] DB Connection string 'MonitorControlDBConnection' not found in App.config or is empty.");
                    throw new ConfigurationErrorsException("Database connection string 'MonitorControlDBConnection' is not configured in App.config.");
                }
            }
            catch (ConfigurationErrorsException configEx) { Console.WriteLine($"[ERROR] Config error: {configEx.Message}"); throw; }
            catch (Exception ex) { Console.WriteLine($"[ERROR] Init DBService: {ex.Message}"); throw; }
        }
        
        public DatabaseService(string connectionString) // 테스트용
        {
            _connectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
        }

        #region ManagedAgents CRUD
        // GetManagedAgentsAsync, GetManagedAgentByGuidAsync, GetManagedAgentByProvidedIdAsync,
        // AddManagedAgentAsync, UpdateManagedAgentAsync, DeleteManagedAgentAsync 메서드들은
        // 이전 답변에서 User 관련 부분이 제거된 최종 버전을 그대로 사용합니다.
        // (modifierInfo를 사용하는 버전)
        public async Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync()
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            var agents = new List<ManagedAgentDisplay>();
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo
                             FROM ManagedAgents ORDER BY AgentName;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync()) { /* ... 이전 답변과 동일한 매핑 ... */ 
                        agents.Add(new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled")),
                            IsOnline = false, 
                            CurrentMonitorStatus = "Unknown" 
                        });
                    }
                }
            }
            return agents;
        }
        public async Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            ManagedAgentDisplay agent = null;
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo
                             FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync()) { /* ... 이전 답변과 동일한 매핑 ... */
                        agent = new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled"))
                        };
                     }
                }
            }
            return agent;
        }
        public async Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp) // 구현 추가
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            ManagedAgentDisplay agent = null;
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo 
                             FROM ManagedAgents WHERE AgentIdProvidedByApp = @AgentIdProvidedByApp;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agentIdProvidedByApp);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                         agent = new ManagedAgentDisplay { /* ... 이전 답변과 동일한 매핑 ... */ };
                    }
                }
            }
            return agent;
        }
        public async Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo)
        {
             if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            if(agent.AgentGuid == Guid.Empty) agent.AgentGuid = Guid.NewGuid();
            string query = @"INSERT INTO ManagedAgents 
                                (AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, PrimaryIpAddress, PrimaryPort, 
                                 GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, CreatedDate, LastModifiedDate, LastModifiedByInfo)
                             VALUES 
                                (@AgentGuid, @AgentIdProvidedByApp, @AgentName, @Description, @ControlType, @PrimaryIpAddress, @PrimaryPort,
                                 @GatewayAgentIpAddress, @GatewayAgentPort, @IsEnabled, GETUTCDATE(), GETUTCDATE(), @ModifierInfo);";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                // ... 파라미터 설정 (이전 답변과 동일, modifierInfo 사용) ...
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@ModifierInfo", (object)modifierInfo ?? DBNull.Value);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }
        public async Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            string query = @"UPDATE ManagedAgents SET 
                                AgentIdProvidedByApp = @AgentIdProvidedByApp, AgentName = @AgentName, Description = @Description, 
                                ControlType = @ControlType, PrimaryIpAddress = @PrimaryIpAddress, PrimaryPort = @PrimaryPort,
                                GatewayAgentIpAddress = @GatewayAgentIpAddress, GatewayAgentPort = @GatewayAgentPort, 
                                IsEnabled = @IsEnabled, LastModifiedDate = GETUTCDATE(), LastModifiedByInfo = @ModifierInfo
                             WHERE AgentGuid = @AgentGuid;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                // ... 파라미터 설정 (이전 답변과 동일, modifierInfo 사용) ...
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@ModifierInfo", (object)modifierInfo ?? DBNull.Value);
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }
        public async Task<bool> DeleteManagedAgentAsync(Guid agentGuid)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            string query = "DELETE FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
             using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }
        #endregion

        #region ControlActionLogs

        public async Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            // DB 스키마의 ControlActionLogs 테이블에 RequesterInfo 컬럼이 있다고 가정 (NVARCHAR(255) NULL)
            string query = @"INSERT INTO ControlActionLogs 
                                (AgentGuid, ActionType, ActionParameters, RequesterInfo, RequestTimestamp, 
                                 RelayReceivedTimestamp, AgentReceivedTimestamp, ExecutionCompletedTimestamp, 
                                 FinalStatus, ResultMessage, ExecutedViaGatewayAgentId)
                             VALUES 
                                (@AgentGuid, @ActionType, @ActionParameters, @RequesterInfo, @RequestTimestamp,
                                 @RelayReceivedTimestamp, @AgentReceivedTimestamp, @ExecutionCompletedTimestamp,
                                 @FinalStatus, @ResultMessage, @ExecutedViaGatewayAgentId); SELECT SCOPE_IDENTITY();";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", logEntry.AgentGuid);
                command.Parameters.AddWithValue("@ActionType", logEntry.ActionType);
                command.Parameters.AddWithValue("@ActionParameters", (object)logEntry.ActionParameters ?? DBNull.Value);
                // ControlActionLogEntry 모델에 RequesterInfo 속성이 있다고 가정
                command.Parameters.AddWithValue("@RequesterInfo", (object)logEntry.RequesterInfo ?? DBNull.Value); 
                command.Parameters.AddWithValue("@RequestTimestamp", logEntry.RequestTimestamp);
                command.Parameters.AddWithValue("@RelayReceivedTimestamp", (object)logEntry.RelayReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@AgentReceivedTimestamp", (object)logEntry.AgentReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutionCompletedTimestamp", (object)logEntry.ExecutionCompletedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@FinalStatus", logEntry.FinalStatus);
                command.Parameters.AddWithValue("@ResultMessage", (object)logEntry.ResultMessage ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutedViaGatewayAgentId", (object)logEntry.ExecutedViaGatewayAgentId ?? DBNull.Value);

                await connection.OpenAsync();
                var result = await command.ExecuteScalarAsync();
                return result != null && Convert.ToInt64(result) > 0;
            }
        }
        
        public async Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            var logs = new List<ControlActionLogEntry>();
            string query = $@"
                SELECT TOP (@Count) 
                    cl.LogId, cl.AgentGuid, 
                    -- ma.AgentName AS AgentNameForLog, -- AgentName은 UI에서 별도 매칭
                    cl.ActionType, cl.ActionParameters, 
                    cl.RequesterInfo, 
                    cl.RequestTimestamp, 
                    cl.RelayReceivedTimestamp, cl.AgentReceivedTimestamp, cl.ExecutionCompletedTimestamp, 
                    cl.FinalStatus, cl.ResultMessage, cl.ExecutedViaGatewayAgentId 
                FROM ControlActionLogs cl
                -- LEFT JOIN dbo.ManagedAgents ma ON cl.AgentGuid = ma.AgentGuid -- 필요시 UI에서 조인
                ORDER BY cl.RequestTimestamp DESC;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Count", count);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        logs.Add(new ControlActionLogEntry {
                            LogId = reader.GetInt64(reader.GetOrdinal("LogId")),
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            ActionType = reader.GetString(reader.GetOrdinal("ActionType")),
                            ActionParameters = reader.IsDBNull(reader.GetOrdinal("ActionParameters")) ? null : reader.GetString(reader.GetOrdinal("ActionParameters")),
                            RequesterInfo = reader.IsDBNull(reader.GetOrdinal("RequesterInfo")) ? "N/A" : reader.GetString(reader.GetOrdinal("RequesterInfo")),
                            RequestTimestamp = reader.GetDateTime(reader.GetOrdinal("RequestTimestamp")),
                            RelayReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("RelayReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("RelayReceivedTimestamp")),
                            AgentReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("AgentReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("AgentReceivedTimestamp")),
                            ExecutionCompletedTimestamp = reader.IsDBNull(reader.GetOrdinal("ExecutionCompletedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("ExecutionCompletedTimestamp")),
                            FinalStatus = reader.GetString(reader.GetOrdinal("FinalStatus")),
                            ResultMessage = reader.IsDBNull(reader.GetOrdinal("ResultMessage")) ? null : reader.GetString(reader.GetOrdinal("ResultMessage")),
                            ExecutedViaGatewayAgentId = reader.IsDBNull(reader.GetOrdinal("ExecutedViaGatewayAgentId")) ? null : reader.GetString(reader.GetOrdinal("ExecutedViaGatewayAgentId"))
                        });
                    }
                }
            }
            return logs;
        }

        public async Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("DB connection string not configured.");
            var logs = new List<ControlActionLogEntry>();
            string query = $@"
                SELECT TOP (@Count) 
                    cl.LogId, cl.AgentGuid, 
                    cl.ActionType, cl.ActionParameters, 
                    cl.RequesterInfo, 
                    cl.RequestTimestamp, 
                    cl.RelayReceivedTimestamp, cl.AgentReceivedTimestamp, cl.ExecutionCompletedTimestamp, 
                    cl.FinalStatus, cl.ResultMessage, cl.ExecutedViaGatewayAgentId 
                FROM ControlActionLogs cl
                WHERE cl.AgentGuid = @AgentGuid
                ORDER BY cl.RequestTimestamp DESC;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Count", count);
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                     while (await reader.ReadAsync()) { /* ... GetRecentControlLogsAsync와 동일한 매핑 ... */ 
                         logs.Add(new ControlActionLogEntry { /* ... */ });
                     }
                }
            }
            return logs;
        }
        #endregion
    }
}
3. ViewModels/MainViewModel.cs (수정된 전체 코드)

ControlActionLogEntry 객체 생성 시 RequesterInfo 속성을 사용하고, DatabaseService의 수정된 메서드 시그니처에 맞게 호출합니다.

C#

// MGSPMonitorControl/ViewModels/MainViewModel.cs
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;
using MGSPMonitorControl.Views;
using MonitorControl.SharedModels; // 공용 네임스페이스
using Newtonsoft.Json;

namespace MGSPMonitorControl.ViewModels
{
    public enum ApplicationMode { Basic, User, Admin } // 동일하게 유지

    public class MainViewModel : ObservableObject
    {
        // --- 비밀번호 (하드코딩 - 실제로는 안전하게 관리) ---
        private const string UserModePassword = "user123";
        private const string AdminModePassword = "admin123";
        // --- ---

        private readonly IDatabaseService _databaseService;
        private readonly IBrokerClientService _brokerClientService;

        public ObservableCollection<ManagedAgentDisplay> Agents { get; }
        public ObservableCollection<string> UiActionLogs { get; }
        public BrokerStatusDisplay BrokerStatus { get; set; } = new BrokerStatusDisplay();

        private ManagedAgentDisplay _selectedAgent;
        public ManagedAgentDisplay SelectedAgent
        {
            get => _selectedAgent;
            set { if (SetProperty(ref _selectedAgent, value)) RefreshAllCommandStates(); }
        }
        
        private string _brokerConnectionStatus = "Disconnected";
        public string BrokerConnectionStatus 
        {
            get => _brokerConnectionStatus;
            set { if (SetProperty(ref _brokerConnectionStatus, value)) RefreshAllCommandStates(); }
        }

        private ApplicationMode _currentMode = ApplicationMode.Basic;
        public ApplicationMode CurrentMode
        {
            get => _currentMode;
            private set 
            { 
                if (SetProperty(ref _currentMode, value))
                {
                    OnPropertyChanged(nameof(CanManageAgents));
                    OnPropertyChanged(nameof(CanControlPower));
                    OnPropertyChanged(nameof(CurrentModeDisplay));
                    RefreshAllCommandStates();
                    AddUiLog($"Application mode changed to: {CurrentMode}");
                }
            }
        }
        public string CurrentModeDisplay => $"Current Mode: {CurrentMode}";
        public bool CanManageAgents => CurrentMode == ApplicationMode.Admin;
        public bool CanControlPower => CurrentMode == ApplicationMode.Admin || CurrentMode == ApplicationMode.User;

        public ICommand LoadAgentsCommand { get; }
        public RelayCommand<PasswordBox> ApplyModeCommand { get; }
        public ICommand LogoutCommand { get; }
        public ICommand AddAgentCommand { get; }
        public ICommand EditAgentCommand { get; }
        public ICommand DeleteAgentCommand { get; }
        public ICommand MonitorOnCommand { get; }
        public ICommand MonitorOffCommand { get; }
        public ICommand PingAgentCommand { get; }
        public ICommand RequestBrokerStatusCommand { get; }
        public ICommand ConnectToBrokerCommand { get; }
        public ICommand DisconnectFromBrokerCommand { get; }
        public ICommand ClearUiLogsCommand { get; }

        public MainViewModel(IDatabaseService databaseService, IBrokerClientService brokerClientService)
        {
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
            _brokerClientService = brokerClientService ?? throw new ArgumentNullException(nameof(brokerClientService));

            Agents = new ObservableCollection<ManagedAgentDisplay>();
            UiActionLogs = new ObservableCollection<string>();

            AddUiLog($"Application started. Initial mode: {CurrentMode}");

            _brokerClientService.Connected += OnBrokerConnected;
            _brokerClientService.Disconnected += OnBrokerDisconnected;
            _brokerClientService.MessageReceived += OnBrokerMessageReceived;

            LoadAgentsCommand = new RelayCommand(async () => await ExecuteLoadAgentsAsync());
            ApplyModeCommand = new RelayCommand<PasswordBox>(ExecuteApplyMode);
            LogoutCommand = new RelayCommand(ExecuteLogout, () => CurrentMode != ApplicationMode.Basic);
            AddAgentCommand = new RelayCommand(ExecuteAddAgent, () => CanManageAgents);
            EditAgentCommand = new RelayCommand(ExecuteEditAgent, () => SelectedAgent != null && CanManageAgents);
            DeleteAgentCommand = new RelayCommand(async () => await ExecuteDeleteAgentAsync(), () => SelectedAgent != null && CanManageAgents);
            MonitorOnCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOn"), () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower);
            MonitorOffCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOff"), () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower);
            PingAgentCommand = new RelayCommand(async () => await ExecutePingAgentAsync(), () => SelectedAgent != null && SelectedAgent.IsOnline);
            RequestBrokerStatusCommand = new RelayCommand(async () => await ExecuteRequestBrokerStatusAsync(), () => _brokerClientService.IsConnected);
            ConnectToBrokerCommand = new RelayCommand(async () => await _brokerClientService.ConnectAsync(), () => !_brokerClientService.IsConnected);
            DisconnectFromBrokerCommand = new RelayCommand(async () => await _brokerClientService.DisconnectAsync(), () => _brokerClientService.IsConnected);
            ClearUiLogsCommand = new RelayCommand(() => UiActionLogs.Clear());

            Task.Run(async () => { await ExecuteLoadAgentsAsync(); if (!_brokerClientService.IsConnected) await _brokerClientService.ConnectAsync(); });
        }

        private void RefreshAllCommandStates()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                (LoadAgentsCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ApplyModeCommand as RelayCommand<PasswordBox>)?.RaiseCanExecuteChanged();
                (LogoutCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (AddAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (EditAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DeleteAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOnCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOffCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (PingAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (RequestBrokerStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ConnectToBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DisconnectFromBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
            });
        }

        private void AddUiLog(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                string logEntry = $"[{DateTime.Now:HH:mm:ss.fff}] {message}";
                UiActionLogs.Insert(0, logEntry);
                if (UiActionLogs.Count > 200) UiActionLogs.RemoveAt(UiActionLogs.Count - 1);
            });
        }

        private void ExecuteApplyMode(PasswordBox passwordBox) { /* ... 이전 답변과 동일 ... */
            if (passwordBox == null) return;
            string enteredPassword = passwordBox.Password;
            passwordBox.Clear(); 

            if (enteredPassword == AdminModePassword) CurrentMode = ApplicationMode.Admin;
            else if (enteredPassword == UserModePassword) CurrentMode = ApplicationMode.User;
            else { AddUiLog("[WARNING] Invalid password entered for mode change."); MessageBox.Show("Invalid password.", "Access Denied", MessageBoxButton.OK, MessageBoxImage.Warning); }
        }
        private void ExecuteLogout() { CurrentMode = ApplicationMode.Basic; }

        private async Task ExecuteLoadAgentsAsync() { /* ... 이전 답변과 동일 (SourceId 부분만 확인) ... */
             AddUiLog("Loading managed agents from database...");
            try
            {
                var dbAgents = await _databaseService.GetManagedAgentsAsync();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    Agents.Clear();
                    foreach (var agent in dbAgents.OrderBy(a=>a.AgentName)) Agents.Add(agent);
                    SelectedAgent = null; 
                });
                AddUiLog($"Loaded {dbAgents.Count} agent configurations from DB.");
                if(_brokerClientService.IsConnected)
                {
                    string uiIdentifier = $"{CurrentMode}Mode_UI_{Environment.MachineName}";
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                }
                RefreshAllCommandStates();
            }
            catch (Exception ex) { AddUiLog($"[ERROR] DB Load Agents: {ex.Message}"); MessageBox.Show($"Error loading agents: {ex.Message}", "DB Error", MessageBoxButton.OK, MessageBoxImage.Error); }
        }
        private void ExecuteAddAgent() { /* ... 이전 답변과 동일 (modifierInfo로 CurrentMode.ToString() 전달) ... */
            AddUiLog("Opening 'Add New Agent' window...");
            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + " Mode");
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm); 
            if (agentConfigWindow.ShowDialog() == true) { AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' config saved. Refreshing."); Task.Run(async () => await ExecuteLoadAgentsAsync()); }
            else { AddUiLog("'Add New Agent' cancelled."); }
        }
        private void ExecuteEditAgent() { /* ... 이전 답변과 동일 (modifierInfo로 CurrentMode.ToString() 전달) ... */
            if (SelectedAgent == null) return;
            // ... (DB에서 최신 정보 로드) ...
            ManagedAgentDisplay agentToEditInDb = Task.Run(async () => await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid)).Result;
            if(agentToEditInDb == null) { /* ... */ return; }
            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + " Mode", agentToEditInDb);
            // ...
        }
        private async Task ExecuteDeleteAgentAsync() { /* ... 이전 답변과 동일 ... */ }

        private async Task ExecuteMonitorControlAsync(string actionType)
        {
            if (SelectedAgent == null) return;
            string correlationId = Guid.NewGuid().ToString();
            AddUiLog($"Sending '{actionType}' (CorrID: {correlationId}) to agent: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");

            ManagedAgentDisplay currentAgentConfig = null;
            try { currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid); }
            catch (Exception ex) { /* ... */ return; }
            if (currentAgentConfig == null) { /* ... */ return; }

            var payload = new UiControlAgentPayload { /* ... 이전과 동일 ... */ };
            var message = new BrokerMessage { /* ... 이전과 동일 (SourceId에 CurrentMode 포함) ... */ 
                 Type = MessageType.UiRequest_ControlAgent,
                CorrelationId = correlationId, 
                Payload = JsonConvert.SerializeObject(payload),
                SourceId = $"{CurrentMode}Mode_UI_{Environment.MachineName}"
            };

            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = currentAgentConfig.AgentGuid,
                ActionType = actionType,
                // RequesterInfo에 현재 모드와 사용자/머신 정보 기록
                RequesterInfo = $"{CurrentMode} Mode ({Environment.UserName}@{Environment.MachineName})",
                RequestTimestamp = DateTime.UtcNow,
                FinalStatus = "SentToBroker",
                ResultMessage = $"Command (CorrID: {correlationId}) sent to broker. Waiting for agent response."
            };
            try { await _databaseService.LogControlActionAsync(logEntry); }
            catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to log initial command send: {ex.Message}"); }

            await _brokerClientService.SendMessageAsync(message);
        }
        
        private async Task ExecutePingAgentAsync() { /* ... 이전과 동일 (SourceId에 CurrentMode 포함) ... */
            if (SelectedAgent == null) return;
            string correlationId = Guid.NewGuid().ToString();
            // ... (currentAgentConfig 로드) ...
            var payload = new UiControlAgentPayload { /* ... */ };
            var message = new BrokerMessage
            {
                Type = MessageType.UiRequest_ControlAgent, 
                CorrelationId = correlationId,
                Payload = JsonConvert.SerializeObject(payload),
                SourceId = $"{CurrentMode}Mode_UI_{Environment.MachineName}"
            };
            await _brokerClientService.SendMessageAsync(message);
        }

        private async Task ExecuteRequestBrokerStatusAsync() { /* ... 이전과 동일 (SourceId에 CurrentMode 포함) ... */
             AddUiLog("Requesting broker status and logs...");
            var message = new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = $"{CurrentMode}Mode_UI_{Environment.MachineName}" };
            await _brokerClientService.SendMessageAsync(message);
        }

        #region Broker Event Handlers
        private void OnBrokerConnected() { /* ... 이전과 동일 (SourceId에 CurrentMode 포함) ... */
             Application.Current.Dispatcher.Invoke(() => { BrokerConnectionStatus = "Connected"; AddUiLog("Successfully connected to Broker."); RefreshAllCommandStates(); });
            Task.Run(async () => {
                string uiIdentifier = $"{CurrentMode}Mode_UI_{Environment.MachineName}";
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiClientHello, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = uiIdentifier });
            });
        }
        private void OnBrokerDisconnected() { /* ... 이전 답변과 동일 ... */ }

        private void OnBrokerMessageReceived(BrokerMessage message) 
        {
             Application.Current.Dispatcher.Invoke(() =>
            {
                try
                {
                    switch (message.Type)
                    {
                        case MessageType.BrokerToUi_ForwardAgentCommandResult:
                            var cmdResultPayload = JsonConvert.DeserializeObject<AgentCommandResultPayload>(message.Payload);
                            if (cmdResultPayload != null)
                            {
                                AddUiLog($"Result for CmdID [{message.CorrelationId}] from Agent [{message.SourceId}]: {(cmdResultPayload.Success ? "OK" : "NG")} - {cmdResultPayload.Message}");
                                var agentForResult = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == message.SourceId);
                                if(agentForResult != null)
                                {
                                    agentForResult.CurrentMonitorStatus = cmdResultPayload.CurrentMonitorStatus;
                                    agentForResult.LastStatusMessageFromAgent = $"Cmd Res: {cmdResultPayload.Message.Substring(0, Math.Min(cmdResultPayload.Message.Length,100))}";
                                    agentForResult.IsOnline = true; 
                                    RefreshAllCommandStates();
                                }
                                // DB 로그 기록 시 RequesterInfo에 현재 모드 전달
                                UpdateControlActionLogAsync(message.CorrelationId, message.SourceId, cmdResultPayload.Success, cmdResultPayload.Message, cmdResultPayload.CurrentMonitorStatus, DateTime.UtcNow, 
                                    null /* statusOverride */, 
                                    $"{CurrentMode} Mode ({Environment.UserName}@{Environment.MachineName})").ConfigureAwait(false);
                            }
                            break;
                        case MessageType.BrokerToUi_CommandDispatchFailed:
                             var dispatchFailPayload = JsonConvert.DeserializeObject<dynamic>(message.Payload);
                             string reason = dispatchFailPayload?.Message ?? "Unknown dispatch error";
                             string failedTargetAgentId = message.TargetId ?? message.SourceId; 
                             AddUiLog($"[ERROR] Broker failed to dispatch command [{message.CorrelationId}] for Agent [{failedTargetAgentId}]: {reason}");
                             UpdateControlActionLogAsync(message.CorrelationId, failedTargetAgentId, false, $"Broker Dispatch Failed: {reason}", null, DateTime.UtcNow, 
                                 "FailureAtBroker", 
                                 $"{CurrentMode} Mode ({Environment.UserName}@{Environment.MachineName})").ConfigureAwait(false);
                            break;
                        // --- 나머지 case 문들은 이전 답변의 OnBrokerMessageReceived 내용과 동일하게 유지 ---
                        // (BrokerToUi_InitialAgentList, BrokerToUi_BroadcastAgentRegisteredOrUpdated, 
                        //  BrokerToUi_BroadcastAgentDisconnected, BrokerToUi_SendBrokerStatus 등)
                        case MessageType.BrokerToUi_InitialAgentList:
                            var agentListPayload = JsonConvert.DeserializeObject<List<LiveAgentInfoForUi>>(message.Payload);
                            if (agentListPayload != null) { UpdateAgentListFromBroker(agentListPayload, true); AddUiLog($"Rcvd initial list of {agentListPayload.Count} live agents."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated:
                        case MessageType.BrokerToUi_BroadcastAgentStatus:
                            var liveAgentInfo = JsonConvert.DeserializeObject<LiveAgentInfoForUi>(message.Payload);
                            if (liveAgentInfo != null) { UpdateSingleAgentStatus(liveAgentInfo); if(message.Type == MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated) AddUiLog($"Agent '{liveAgentInfo.AgentIdProvidedByApp}' registered/updated."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentDisconnected:
                            string disconnectedAgentId = message.SourceId; 
                            var agentToMarkOffline = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == disconnectedAgentId);
                            if (agentToMarkOffline != null) { agentToMarkOffline.IsOnline = false; agentToMarkOffline.CurrentMonitorStatus = "Offline"; agentToMarkOffline.LastStatusMessageFromAgent = "Disconnected"; AddUiLog($"Agent disconnected: {disconnectedAgentId}"); RefreshAllCommandStates(); }
                            break;
                        case MessageType.BrokerToUi_SendBrokerStatus:
                            var brokerStatusPayload = JsonConvert.DeserializeObject<BrokerStatusInfoPayload>(message.Payload);
                            if (brokerStatusPayload != null) { BrokerStatus.UpdateFromServerPayload(brokerStatusPayload); AddUiLog("Broker status and logs updated."); }
                            break;
                        default: AddUiLog($"Rcvd unhandled msg type '{message.Type}' from Broker. Src: {message.SourceId}"); break;
                    }
                }
                catch (JsonException jsonEx) { AddUiLog($"[ERROR] Parse payload error {message.Type}: {jsonEx.Message}"); }
                catch (Exception ex) { AddUiLog($"[ERROR] Processing message {message.Type}: {ex.Message}"); }
            });
        }
        
        // UpdateControlActionLogAsync 메서드 시그니처 수정 (requesterInfo 추가)
        private async Task UpdateControlActionLogAsync(string correlationId, string agentIdProvidedByApp, 
                                                    bool success, string message, string monitorStatus, 
                                                    DateTime completedTime, string statusOverride = null, 
                                                    string requesterInfo = null) // requesterInfo 파라미터 추가
        {
            var agentConfig = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == agentIdProvidedByApp);
            if (agentConfig == null)
            {
                AddUiLog($"[DB LOG ERROR] Cannot log: Agent config {agentIdProvidedByApp} not found for CorrId {correlationId}.");
                return;
            }

            string originalActionType = "UnknownAction"; // TODO: CorrelationId로 원본 ActionType 찾기
            DateTime originalRequestTime = DateTime.UtcNow.AddSeconds(-10); // TODO: 원본 요청 시간 찾기

            // ControlActionLogEntry 모델에 RequesterInfo가 있다고 가정하고 값 할당
            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = agentConfig.AgentGuid,
                ActionType = originalActionType, 
                RequestTimestamp = originalRequestTime, 
                ExecutionCompletedTimestamp = completedTime,
                FinalStatus = statusOverride ?? (success ? "Success" : "FailureAtAgent"),
                ResultMessage = message,
                RequesterInfo = requesterInfo ?? (CurrentMode.ToString() + " Mode") // 여기서 사용
            };
            AddUiLog($"Logging final status for {agentConfig.AgentName} (CorrId: {correlationId}) to DB. Requester: {logEntry.RequesterInfo}");
            try
            {
                await _databaseService.LogControlActionAsync(logEntry);
            }
            catch (Exception ex)
            {
                AddUiLog($"[DB ERROR] Failed to log final command status for {agentConfig.AgentName} to DB: {ex.Message}");
            }
        }
        
        private void UpdateAgentListFromBroker(List<LiveAgentInfoForUi> liveAgents, bool isInitialLoad) { /* ... 이전 답변과 동일 ... */ RefreshAllCommandStates(); }
        private void UpdateSingleAgentStatus(LiveAgentInfoForUi liveInfo) { /* ... 이전 답변과 동일, 필요시 RefreshAllCommandStates() 호출 ... */ }

        #endregion

        public void Cleanup() { /* ... 이전 답변과 동일 ... */ }
    }
}
이것으로 PasswordService.cs 삭제, DatabaseService.cs 수정, 그리고 MainViewModel.cs의 대폭적인 수정이 완료되었습니다.

다음으로 이 MainViewModel을 사용하는 Views/MainWindow.xaml (UI 레이아웃) 과 App.xaml.cs (애플리케이션 시작 로직) 의 최종 코드를 드리겠습니다.

