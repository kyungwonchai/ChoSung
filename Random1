님, 알겠습니다. 이제 단순 뷰어를 넘어, 라인별로 문서를 관리하고 자동으로 최신 파일을 로딩하는 '스마트 뷰어'로 업그레이드하는 작업이군요. 말씀하신 기능들, 아주 중요한 포인트입니다.

라인(Line) 기반 파일 목록: 파일 이름(2라인_파일명.pdf)을 분석해서, 먼저 '라인'을 선택하면 해당 라인의 파일만 보이도록 합니다.

자동 정렬 및 하이라이트: 파일 목록은 항상 최신 날짜순으로 정렬되고, 가장 최신 파일은 파란색으로 눈에 띄게 표시합니다.

세션 유지 및 자동 로딩: 앱을 껐다 켜도 마지막에 선택했던 '라인'을 기억하고, 시작 시 해당 라인의 가장 최신 파일을 자동으로 불러옵니다.

이 모든 '최첨단' 기능을 반영하여 MainActivity.kt를 중심으로 코드를 수정했습니다.

## 1. MainActivity.kt 최종 코드 수정
이번 수정은 파일 목록을 보여주는 방식과 앱 시작 시의 동작을 변경하는 것이 핵심입니다. SharedPreferences라는 기술을 사용하여 사용자의 선택을 기기에 저장하고 기억하게 만듭니다.

MainActivity.kt 파일 전체를 아래 코드로 교체해주세요.

Kotlin

package com.kyungwon.reellistviewer

import android.content.Context
import android.content.SharedPreferences
import android.graphics.Typeface
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.text.Spannable
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.GestureDetectorCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.core.view.setMargins
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.kyungwon.reellistviewer.databinding.ActivityMainBinding
import jcifs.CIFSContext
import jcifs.config.PropertyConfiguration
import jcifs.context.BaseContext
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.util.Properties

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener, SensorEventListener {

    private lateinit var binding: ActivityMainBinding

    // --- PC 공유폴더 접속 정보 ---
    private val SMB_IP = "192.1.1.5"
    private val SMB_SHARED_FOLDER = "tempshare"
    private val SMB_USER = "win10"
    private val SMB_PASS = "tltmxpa2@"

    // --- UI 상태 관리 변수 ---
    private var totalPdfPages = 0
    private val skippedButtons = mutableSetOf<Int>()
    private val currentButtons = mutableListOf<Button>()
    private var selectedButton: Button? = null
    private lateinit var gestureDetector: GestureDetectorCompat
    private var tappedButton: Button? = null

    // --- 지자계 센서 관련 변수 ---
    private lateinit var sensorManager: SensorManager
    private val accelerometerReading = FloatArray(3)
    private val magnetometerReading = FloatArray(3)
    private val rotationMatrix = FloatArray(9)
    private val orientationAngles = FloatArray(3)
    private var isGeomagneticModeOn = false
    private var currentDirection = Direction.OTHER

    // --- 💡 세션 유지를 위한 SharedPreferences ---
    private lateinit var prefs: SharedPreferences
    private val PREFS_FILENAME = "com.kyungwon.reellistviewer.prefs"
    private val KEY_LAST_LINE = "last_selected_line"

    enum class Direction { EAST, WEST, OTHER }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        hideSystemUI()

        // 💡 SharedPreferences 초기화
        prefs = getSharedPreferences(PREFS_FILENAME, Context.MODE_PRIVATE)

        setupGestureDetector()
        setupEventListeners()
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager

        // 💡 앱 시작 시 마지막 세션 자동 로드
        loadLatestFileFromLastLine()
    }

    // (onResume, onPause, hideSystemUI 등은 이전과 동일)

    private fun setupEventListeners() {
        // 💡 Open ReelList 버튼은 이제 라인 선택 창을 띄움
        binding.btnOpenFile.setOnLongClickListener {
            lifecycleScope.launch(Dispatchers.IO) {
                showLineSelectionDialog()
            }
            true
        }
        binding.compassView.setOnLongClickListener {
            isGeomagneticModeOn = !isGeomagneticModeOn
            val modeText = if (isGeomagneticModeOn) "On" else "Off"
            Toast.makeText(this, "지자계 의존 모드: $modeText", Toast.LENGTH_SHORT).show()
            binding.compassView.setGeomagneticMode(isGeomagneticModeOn)
            if (!isGeomagneticModeOn) {
                currentDirection = Direction.OTHER
            }
            updateButtonsAndUI()
            true
        }
    }

    // 💡 --- 새로운 함수들 ---

    /**
     * 마지막으로 선택한 라인을 기억하여, 해당 라인의 최신 PDF를 자동으로 로드합니다.
     */
    private fun loadLatestFileFromLastLine() {
        val lastLine = prefs.getString(KEY_LAST_LINE, null)
        if (lastLine.isNullOrEmpty()) {
            Toast.makeText(this, "라인을 선택해주세요.", Toast.LENGTH_SHORT).show()
            return
        }

        Toast.makeText(this, "'$lastLine'의 최신 파일을 불러옵니다...", Toast.LENGTH_SHORT).show()
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val allFiles = listSmbFiles()
                val latestFile = allFiles
                    .filter { it.name.startsWith("${lastLine}_") }
                    .maxByOrNull { it.lastModified() }

                if (latestFile != null) {
                    loadPdfFromSmbFile(latestFile)
                } else {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@MainActivity, "'$lastLine'에 파일이 없습니다.", Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("SmbTask", "자동 로드 실패", e)
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "자동 로드 실패: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }

    /**
     * 공유 폴더의 PDF 목록에서 '라인' 목록을 추출하여 사용자에게 선택 다이얼로그를 보여줍니다.
     */
    private suspend fun showLineSelectionDialog() {
        try {
            val allFiles = listSmbFiles()
            // 파일명에서 라인 이름 추출 (예: "2라인_파일.pdf" -> "2라인")
            val lineNames = allFiles
                .mapNotNull { it.name.split('_').firstOrNull() }
                .distinct()
                .sorted()

            if (lineNames.isEmpty()) {
                withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "PDF 파일을 찾을 수 없습니다.", Toast.LENGTH_SHORT).show() }
                return
            }

            withContext(Dispatchers.Main) {
                AlertDialog.Builder(this@MainActivity)
                    .setTitle("라인 선택")
                    .setItems(lineNames.toTypedArray()) { _, which ->
                        val selectedLine = lineNames[which]
                        // 선택한 라인 저장
                        prefs.edit().putString(KEY_LAST_LINE, selectedLine).apply()
                        // 해당 라인의 파일 목록 보여주기
                        lifecycleScope.launch(Dispatchers.IO) {
                            showReelListDialog(selectedLine, allFiles)
                        }
                    }
                    .show()
            }

        } catch (e: Exception) {
            Log.e("SmbTask", "라인 목록 조회 실패", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "라인 목록 조회 실패: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    /**
     * 선택된 라인에 해당하는 PDF 파일 목록을 최신순으로 정렬하여 보여줍니다.
     * 가장 최신 파일은 파란색으로 하이라이트됩니다.
     */
    private suspend fun showReelListDialog(selectedLine: String, allFiles: List<SmbFile>) {
        // 선택된 라인의 파일들을 최신순으로 정렬
        val filesInLine = allFiles
            .filter { it.name.startsWith("${selectedLine}_") }
            .sortedByDescending { it.lastModified() }

        if (filesInLine.isEmpty()) {
            withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "선택한 라인에 파일이 없습니다.", Toast.LENGTH_SHORT).show() }
            return
        }

        // 표시할 파일 이름 목록 생성 (라인명, .pdf 제거)
        val displayNames = filesInLine.map {
            it.name.removePrefix("${selectedLine}_").removeSuffix(".pdf")
        }

        withContext(Dispatchers.Main) {
            // 💡 최신 파일(첫 번째 항목)을 파란색으로 만들기 위한 어댑터
            val adapter = ArrayAdapter<SpannableString>(this@MainActivity, android.R.layout.simple_list_item_1)
            displayNames.forEachIndexed { index, name ->
                val spannable = SpannableString(name)
                if (index == 0) { // 첫 번째 항목(최신)
                    spannable.setSpan(ForegroundColorSpan(ContextCompat.getColor(this@MainActivity, android.R.color.holo_blue_dark)), 0, name.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)
                }
                adapter.add(spannable)
            }

            AlertDialog.Builder(this@MainActivity)
                .setTitle("릴리스트 선택 ($selectedLine)")
                .setAdapter(adapter) { _, which ->
                    val selectedFile = filesInLine[which]
                    lifecycleScope.launch(Dispatchers.IO) {
                        loadPdfFromSmbFile(selectedFile)
                    }
                }
                .show()
        }
    }

    /**
     * SMB 공유 폴더에 접속하여 파일 목록을 가져오는 공통 함수
     */
    private suspend fun listSmbFiles(): List<SmbFile> {
        val smbUrl = "smb://$SMB_IP/$SMB_SHARED_FOLDER/"
        val properties = Properties().apply {
            put("jcifs.smb.client.minVersion", "SMB300")
            put("jcifs.smb.client.maxVersion", "SMB311")
        }
        val config = PropertyConfiguration(properties)
        val cifsContext: CIFSContext = BaseContext(config)
        val auth = NtlmPasswordAuthenticator(null, SMB_USER, SMB_PASS)
        val context = cifsContext.withCredentials(auth)
        val dir = SmbFile(smbUrl, context)
        return dir.listFiles { f -> f.name.endsWith(".pdf", ignoreCase = true) }.toList()
    }
    
    // (이하 loadPdfFromSmbFile, onPageError 등 다른 함수들은 이전과 동일)
    private fun onResume() { /* ... */ }
    private fun onPause() { /* ... */ }
    private fun hideSystemUI() { /* ... */ }
    private fun setupGestureDetector() { /* ... */ }
    override fun loadComplete(nbPages: Int) { /* ... */ }
    private fun updateButtonsAndUI() { /* ... */ }
    private fun regenerateButtons(count: Int) { /* ... */ }
    private fun createPageButton(number: Int, layoutParams: LinearLayout.LayoutParams? = null): Button { /* ... */ }
    private fun updateAllButtonStyles() { /* ... */ }
    private fun mapLogicalToPhysical(logicalButtonNum: Int): Int { /* ... */ }
    private fun onPageButtonClick(button: Button) { /* ... */ }
    private fun onPageButtonLongClick(view: View) { /* ... */ }
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) { /* ... */ }
    override fun onSensorChanged(event: SensorEvent) { /* ... */ }
    private fun dpToPx(dp: Int): Int { /* ... */ }
    private suspend fun loadPdfFromSmbFile(smbFile: SmbFile) { /* ... */ }
    override fun onPageError(page:Int,t:Throwable){ /* ... */ }
}
(이전과 동일한 코드는 /* ... */ 로 축약했습니다. 실제로는 MainActivity.kt 파일 전체를 위 코드로 덮어쓰시면 됩니다.)

## 핵심 변경 사항
SharedPreferences 추가: onCreate에서 초기화하여 사용자의 마지막 '라인' 선택을 저장합니다.

loadLatestFileFromLastLine(): 앱 시작 시 SharedPreferences에 저장된 라인 값을 읽어, 해당 라인의 최신 파일을 자동으로 로드하는 함수입니다.

showLineSelectionDialog(): btnOpenFile을 길게 눌렀을 때 실행됩니다. SMB 폴더의 모든 PDF 파일명을 분석하여 고유한 '라인' 목록을 만들어 사용자에게 보여줍니다.

showReelListDialog(): 라인 선택 후 실행됩니다. 해당 라인의 파일만 필터링하여 최신순으로 정렬하고, ArrayAdapter와 SpannableString을 이용해 첫 번째 항목(가장 최신 파일)을 파란색으로 만들어 보여줍니다.

listSmbFiles(): SMB 접속 및 파일 목록을 가져오는 중복 코드를 별도의 함수로 분리하여 코드 재사용성을 높였습니다.