래는 MainViewModel에서 ObservableCollection(ForceEjectNumbers)을 정의하고, 이를 다른 클래스 ABC에 주입하여 두 클래스에서 값을 변경하는 코드입니다. Main 함수 없이 MainViewModel 중심으로 동작하도록 작성했습니다.

MainViewModel 클래스
csharp
코드 복사
using System;
using System.Collections.ObjectModel;

public class MainViewModel
{
    // 숫자 데이터를 저장하는 ObservableCollection
    public ObservableCollection<int> ForceEjectNumbers { get; set; }

    // ABC 클래스 인스턴스
    private ABC _abc;

    public MainViewModel()
    {
        // 초기 값 설정
        ForceEjectNumbers = new ObservableCollection<int> { 10, 20, 30 };

        // ForceEjectNumbers를 ABC 클래스에 주입
        _abc = new ABC(ForceEjectNumbers);
    }

    // MainViewModel에서 ForceEjectNumbers 값을 변경하는 메서드
    public void UpdateValueFromMain(int index, int newValue)
    {
        if (index >= 0 && index < ForceEjectNumbers.Count)
        {
            ForceEjectNumbers[index] = newValue;
            Console.WriteLine($"[MainViewModel] Index {index} updated to {newValue}");
        }
    }

    // ABC 클래스에서 값을 변경하도록 요청하는 메서드
    public void UpdateValueFromABC(int index, int newValue)
    {
        _abc.UpdateValue(index, newValue);
    }
}
ABC 클래스
csharp
코드 복사
public class ABC
{
    private ObservableCollection<int> _forceEjectNumbers;

    // 생성자에서 ObservableCollection 주입
    public ABC(ObservableCollection<int> forceEjectNumbers)
    {
        _forceEjectNumbers = forceEjectNumbers;
    }

    // ForceEjectNumbers 값을 변경하는 메서드
    public void UpdateValue(int index, int newValue)
    {
        if (index >= 0 && index < _forceEjectNumbers.Count)
        {
            _forceEjectNumbers[index] = newValue;
            Console.WriteLine($"[ABC] Index {index} updated to {newValue}");
        }
    }
}
테스트: MainViewModel에서 동작 확인
csharp
코드 복사
public class Program
{
    public static void Main(string[] args)
    {
        // MainViewModel 생성
        var mainViewModel = new MainViewModel();

        // MainViewModel에서 값 변경
        mainViewModel.UpdateValueFromMain(0, 100); // Index 0의 값을 100으로 변경

        // ABC 클래스에서 값 변경
        mainViewModel.UpdateValueFromABC(1, 200); // Index 1의 값을 200으로 변경

        // ForceEjectNumbers 최종 상태 출력
        Console.WriteLine("Final ForceEjectNumbers:");
        foreach (var number in mainViewModel.ForceEjectNumbers)
        {
            Console.WriteLine(number); // 출력: 100, 200, 30
        }
    }
}
출력 결과
plaintext
코드 복사
[MainViewModel] Index 0 updated to 100
[ABC] Index 1 updated to 200
Final ForceEjectNumbers:
100
200
30
코드 동작 설명
MainViewModel 초기화:

ForceEjectNumbers를 정의하고, 초기 값 { 10, 20, 30 }을 설정합니다.
ForceEjectNumbers를 ABC 클래스에 주입합니다.
MainViewModel에서 값 변경:

UpdateValueFromMain 메서드를 통해 MainViewModel 자체에서 ForceEjectNumbers 값을 변경합니다.
ABC 클래스에서 값 변경:

UpdateValueFromABC 메서드를 호출하면, MainViewModel이 관리하는 ForceEjectNumbers를 ABC 클래스에서 수정합니다.
참조 공유:

ForceEjectNumbers는 참조 타입이므로, MainViewModel과 ABC 클래스가 동일한 데이터를 공유합니다.
한 클래스에서 값을 변경하면 다른 클래스에서도 동일한 결과를 확인할 수 있습니다.
최종 요약
MainViewModel 내부에서 ForceEjectNumbers를 정의하고 관리.
ABC 클래스에 ForceEjectNumbers를 주입하여 두 클래스에서 값을 변경.