 위해 하나의 경고창(WarningWindow)에서 여러 에러 메시지를 표시하고, 각 메시지마다 색상을 다르게 하는 방식을 적용하겠습니다.

여러 메시지를 관리하기 위해 ObservableCollection<string>과 색상 리스트를 사용하여 메시지와 색상을 번갈아가며 표시합니다.
중복 메시지가 추가되지 않도록 하고, 새로운 메시지가 들어오면 경고창이 자동으로 업데이트됩니다.
Progress가 0이 되면 모든 메시지를 제거하고 창이 닫힙니다.
1. MainViewModel 수정
먼저, 여러 에러 메시지를 추가하고 중복 없이 관리할 수 있도록 ObservableCollection<string>을 사용합니다. 각 메시지의 색상은 번갈아가며 설정됩니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private int _progress;
        private Timer _mainTimer; // 5초 타이머
        private Timer _delayTimer; // 3초 지연 타이머
        private bool _isWarningVisible;
        private WarningWindow _warningWindow; // 경고창 인스턴스 저장
        private ObservableCollection<ErrorMessage> _errorMessages; // 에러 메시지 목록

        public int Progress
        {
            get => _progress;
            set
            {
                if (_progress != value)
                {
                    _progress = value;
                    OnPropertyChanged();

                    // Progress가 1 이상이면 3초 후 창 표시 여부 확인
                    if (_progress >= 1 && !_isWarningVisible)
                    {
                        StartDelayTimer();
                    }
                    // Progress가 0이면 경고창을 닫음
                    else if (_progress == 0)
                    {
                        CloseWarningWindow();
                    }
                }
            }
        }

        public MainViewModel()
        {
            _mainTimer = new Timer(5000); // 5초 타이머 설정
            _mainTimer.Elapsed += MainTimerElapsed;

            _delayTimer = new Timer(3000); // 3초 지연 타이머 설정
            _delayTimer.Elapsed += DelayTimerElapsed;
            _delayTimer.AutoReset = false; // 한 번만 실행되도록 설정

            _errorMessages = new ObservableCollection<ErrorMessage>();
        }

        private void StartDelayTimer()
        {
            if (_progress >= 1)
            {
                _delayTimer.Start();
            }
        }

        private void DelayTimerElapsed(object sender, ElapsedEventArgs e)
        {
            // 3초 후에도 Progress가 1 이상일 경우 경고창 표시
            if (_progress >= 1 && !_isWarningVisible)
            {
                ShowWarningWindow();
            }
        }

        public void AddErrorMessage(string message)
        {
            // 이미 존재하는 메시지인지 확인하여 중복 추가 방지
            if (_errorMessages.Any(m => m.Content == message)) return;

            // 색상 설정: 순서대로 Yellow와 Aqua 번갈아가며 색상을 설정
            Color color = _errorMessages.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessages.Add(new ErrorMessage(message, new SolidColorBrush(color)));

            // 창이 열려 있는 상태면 새 메시지 업데이트
            if (_isWarningVisible && _warningWindow != null)
            {
                _warningWindow.UpdateMessages(_errorMessages);
            }
            else
            {
                ShowWarningWindow();
            }
        }

        private void ShowWarningWindow()
        {
            if (_isWarningVisible) return;

            Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindow = new WarningWindow(_errorMessages); // 메시지 목록 전달
                _warningWindow.Topmost = true;
                _warningWindow.Show();

                _warningWindow.Closed += (sender, e) =>
                {
                    _isWarningVisible = false;
                    _mainTimer.Start(); // 창을 닫으면 5초 타이머 시작
                };

                _isWarningVisible = true;
            });
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindow != null)
                {
                    _warningWindow.Close();
                    _warningWindow = null; // 경고창 인스턴스를 초기화
                    _mainTimer.Stop(); // 창을 닫을 때 타이머 중지
                    _isWarningVisible = false;
                    _errorMessages.Clear(); // 모든 에러 메시지 삭제
                }
            });
        }

        private void MainTimerElapsed(object sender, ElapsedEventArgs e)
        {
            _mainTimer.Stop();
            if (_progress >= 1)
            {
                ShowWarningWindow();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessage
    {
        public string Content { get; }
        public SolidColorBrush Color { get; }

        public ErrorMessage(string content, SolidColorBrush color)
        {
            Content = content;
            Color = color;
        }
    }
}
AddErrorMessage(string message): 이 메서드는 중복되지 않는 에러 메시지를 추가하고, 창이 열려 있는 경우 업데이트하여 메시지를 반영합니다.
_errorMessages: ObservableCollection으로 관리하여 경고창의 메시지 목록을 실시간으로 업데이트합니다.
ErrorMessage: 메시지와 색상을 저장하는 클래스입니다.
2. WarningWindow 수정
이제 WarningWindow가 여러 에러 메시지를 표시할 수 있도록 리스트를 바인딩하여 설정합니다.

WarningWindow.xaml
xml
코드 복사
<Window x:Class="YourNamespace.WarningWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Warning" Height="500" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="#AAFF0000"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen" 
        MouseDown="Window_MouseDown">
    <Grid>
        <ItemsControl ItemsSource="{Binding ErrorMessages}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Content}"
                               FontSize="15"
                               Foreground="{Binding Color}"
                               TextAlignment="Center"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
ItemsControl을 사용하여 여러 개의 에러 메시지를 표시합니다.
TextBlock의 Foreground를 Binding Color로 설정하여 각각의 메시지 색상을 다르게 표시합니다.
WarningWindow.xaml.cs
경고창에 전달된 메시지를 실시간으로 업데이트할 수 있도록 생성자를 수정합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows;

namespace YourNamespace
{
    public partial class WarningWindow : Window
    {
        public ObservableCollection<ErrorMessage> ErrorMessages { get; }

        public WarningWindow(ObservableCollection<ErrorMessage> errorMessages)
        {
            InitializeComponent();
            ErrorMessages = errorMessages;
            DataContext = this; // DataContext를 설정하여 바인딩 가능하게 함
        }

        public void UpdateMessages(ObservableCollection<ErrorMessage> errorMessages)
        {
            ErrorMessages.Clear();
            foreach (var message in errorMessages)
            {
                ErrorMessages.Add(message);
            }
        }

        private void Window_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            this.Close(); // 클릭하면 창 닫기
        }
    }
}
WarningWindow 생성자에서 ErrorMessages를 받아 경고창에 바인딩합니다.
UpdateMessages 메서드를 통해 기존 메시지를 갱신합니다.