import path from 'path';
import { defineConfig, loadEnv, Plugin } from 'vite';

// IP 화이트리스트 (허용할 IP 목록)
const ipWhitelist = ['127.0.0.1', '::1', '192.168.1.10']; // 로컬호스트, 특정 내부 IP 등

// IP 제한 미들웨어를 추가하는 Vite 플러그인
const ipRestrictionPlugin = (): Plugin => ({
  name: 'vite-plugin-ip-restriction',
  configureServer(server) {
    server.middlewares.use((req, res, next) => {
      // 클라이언트의 IP 주소 확인
      const clientIp = req.socket.remoteAddress;
      
      console.log(`Incoming request from IP: ${clientIp}`); // 접속 시도 IP 로그

      // 허용된 IP가 아니면 접근 거부
      if (clientIp && !ipWhitelist.includes(clientIp)) {
        res.statusCode = 403; // 403 Forbidden
        res.end('Access Denied');
        return;
      }

      // 허용된 IP이면 다음 단계로 진행
      next();
    });
  },
});

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, '.', '');
  return {
    // ?? 여기에 IP 제한 플러그인을 추가합니다.
    plugins: [ipRestrictionPlugin()],
    define: {
      // 참고: 키가 중복되어 있어 하나는 지우셔도 됩니다.
      'process.env.GEMINI_API_KEY': JSON.stringify(env.GEMINI_API_KEY),
    },
    resolve: {
      alias: {
        '@': path.resolve(__dirname, '.'),
      },
    },
    server: {
      host: '0.0.0.0',
    },
  };
});