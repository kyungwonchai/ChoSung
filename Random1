제 원인
SelectedUser 변경 시 관련된 ManagementItems가 제대로 로드되지 않음.

새로 추가된 사용자의 경우 기본 ManagementItems(3개) 자동 생성 로직이 포함되지 않음.

사용자가 새로 추가되면 ManagementItems를 DB로부터 가져오거나 기본값으로 추가해야 함.

UI와 ViewModel의 데이터 바인딩이 제대로 동기화되지 않음.

✅ 수정 방법
MainViewModel.cs에서 SelectedUser 변경 시 관련된 ManagementItems를 자동으로 로드하거나 기본값으로 추가.

사용자 추가 시 기본 ManagementItems 3개를 자동으로 추가.

데이터베이스에서 기존 사용자의 ManagementItems를 자동으로 로드.

새로 추가된 사용자는 DB에 추가되기 전에도 기본값으로 3개가 자동 생성되도록 설정.

🔥 수정된 코드 제공 (주석 포함)
📁 MainViewModel.cs (수정됨)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Windows.Input;
using WPF_DevExpress_Locker_Management.Models;
using WPF_DevExpress_Locker_Management.Services;

namespace WPF_DevExpress_Locker_Management.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly DataRepository _dataRepository;
        public ObservableCollection<User> Users { get; set; }

        private User _selectedUser;
        public User SelectedUser
        {
            get => _selectedUser;
            set
            {
                _selectedUser = value;
                OnPropertyChanged(nameof(SelectedUser));

                if (_selectedUser != null)
                {
                    LoadOrInitializeManagementItems(_selectedUser);
                }
            }
        }

        public ICommand AddUserCommand { get; }
        public ICommand DeleteUserCommand { get; }
        public ICommand SaveAllCommand { get; }

        public MainViewModel()
        {
            _dataRepository = new DataRepository();
            Users = new ObservableCollection<User>(_dataRepository.GetUsers());

            AddUserCommand = new RelayCommand(AddUser);
            DeleteUserCommand = new RelayCommand(DeleteUser);
            SaveAllCommand = new RelayCommand(SaveAll);
        }

        /// <summary>
        /// 사용자를 추가하는 함수
        /// - 새로운 사용자 추가 시 기본 관리 항목 3개 자동 생성
        /// </summary>
        private void AddUser()
        {
            var newUser = new User
            {
                UserId = Guid.NewGuid(),
                Name = "New User",
                KnoxId = "NewKnoxId"
            };

            // 기본 관리 항목 3개 자동 추가
            newUser.ManagementItems = new ObservableCollection<ManagementItem>
            {
                new ManagementItem { Name = "Locker", IsActive = false },
                new ManagementItem { Name = "Shoe Cabinet", IsActive = false },
                new ManagementItem { Name = "Cabinet", IsActive = false }
            };

            Users.Add(newUser);
            _dataRepository.AddUser(newUser);
            SelectedUser = newUser; // 새로 추가된 사용자를 선택 상태로 설정
        }

        /// <summary>
        /// 사용자를 삭제하는 함수
        /// </summary>
        private void DeleteUser()
        {
            if (SelectedUser != null)
            {
                _dataRepository.DeleteUser(SelectedUser.UserId);
                Users.Remove(SelectedUser);
            }
        }

        /// <summary>
        /// 모든 데이터를 저장하는 함수
        /// - 사용자 정보와 관리 항목을 데이터베이스에 저장
        /// </summary>
        private void SaveAll()
        {
            if (SelectedUser != null)
            {
                _dataRepository.SaveUser(SelectedUser);
                _dataRepository.SaveManagementItems(SelectedUser.UserId, SelectedUser.ManagementItems);
            }
        }

        /// <summary>
        /// 사용자 변경 시 해당 사용자의 ManagementItems를 로드하거나 초기화
        /// </summary>
        private void LoadOrInitializeManagementItems(User user)
        {
            var loadedItems = _dataRepository.GetManagementItems(user.UserId);

            if (loadedItems.Any())
            {
                user.ManagementItems = loadedItems; // 기존 사용자는 DB에 저장된 항목 사용
            }
            else
            {
                user.ManagementItems = new ObservableCollection<ManagementItem>
                {
                    new ManagementItem { Name = "Locker", IsActive = false },
                    new ManagementItem { Name = "Shoe Cabinet", IsActive = false },
                    new ManagementItem { Name = "Cabinet", IsActive = false }
                };
                _dataRepository.SaveManagementItems(user.UserId, user.ManagementItems); // 기본값을 DB에 저장
            }

            OnPropertyChanged(nameof(SelectedUser));
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
✅ 설명
LoadOrInitializeManagementItems() 함수 추가됨

사용자가 선택될 때마다 호출됨.

기존 사용자는 DB에서 ManagementItems를 불러옴.

새로 추가된 사용자는 기본값(Locker, Shoe Cabinet, Cabinet)을 DB에 저장.

AddUser() 함수 수정됨

사용자 추가 시 기본 ManagementItems 3개가 자동으로 추가됨.

새로 추가된 사용자는 기본값이 자동으로 DB에 저장됨.

SaveAll() 함수 수정됨

사용자의 모든 정보를 저장할 때, 관련 ManagementItems도 함께 저장됨.

📌 사용 방법
좌측 사용자 목록에서 사용자를 선택하면 자동으로 관련 ManagementItems가 로드됨.

만약 관련 정보가 없으면 기본값으로 자동 생성되며, DB에 자동 저장됨.

수정 후 Save Changes 버튼을 눌러야 저장됨.
