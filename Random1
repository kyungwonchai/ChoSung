이제 명확하게 이해했습니다. 작업 큐를 비우는 것은 Resume 버튼을 눌렀을 때 자동으로 이루어지고, 정지와 재개는 각각 다음과 같은 방식으로 처리되어야 합니다:

정지 버튼: 전체 작업을 멈추는 하나의 대표적인 버튼을 추가합니다. 이 버튼을 누르면 모든 작업이 일시정지됩니다.
Resume 버튼: 각 행에 개별적으로 존재하며, 특정 행의 Resume 버튼을 누르면 그 행 이후의 작업을 다시 시작하고, 이전 작업은 무시됩니다. Resume 버튼을 누르면 기존 큐가 자동으로 비워지고, 새로운 작업이 그 행 이후부터 실행됩니다.
수정된 코드
1. TaskQueue Class (ClearQueue 및 Pause/Resume 추가)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하는 역할을 담당합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false;
    private bool _isPaused = false;

    // IsRunning 속성: 현재 작업이 실행 중인지 여부를 반환
    public bool IsRunning => _isRunning;

    // IsPaused 속성: 작업이 일시정지 상태인지 여부를 반환
    public bool IsPaused => _isPaused;

    /// <summary>
    /// 작업을 큐에 추가하고 순차적으로 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);

        // 현재 작업이 실행 중이 아니고, 일시정지가 아닐 때 작업 실행 시작
        if (!_isRunning && !_isPaused)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 큐의 다음 작업을 실행하는 메서드
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0 || _isPaused)
        {
            _isRunning = false;
            return;
        }

        _isRunning = true; // 작업이 실행 중
        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행

        _isRunning = false; // 작업 완료
        if (_tasks.Count > 0)
        {
            RunNextTask(); // 다음 작업 실행
        }
    }

    /// <summary>
    /// 현재 작업 큐를 비웁니다. (모든 작업을 삭제)
    /// </summary>
    public void ClearQueue()
    {
        _tasks.Clear();
    }

    /// <summary>
    /// 전체 작업을 일시정지합니다.
    /// </summary>
    public void Pause()
    {
        _isPaused = true;
    }

    /// <summary>
    /// 작업을 재개합니다. (Resume 버튼을 누른 행부터)
    /// </summary>
    public void Resume()
    {
        _isPaused = false;

        // 재개할 때 큐에 작업이 없으면, 다음 작업 실행
        if (!_isRunning && _tasks.Count > 0)
        {
            RunNextTask();
        }
    }
}
설명:
Pause(): 전체 작업을 일시정지합니다.
Resume(): 일시정지 상태를 해제하고, 작업이 없으면 큐에 있는 작업을 순차적으로 재개합니다.
ClearQueue(): Resume을 누르면 기존 작업 큐를 비우기 위해 자동으로 호출됩니다.
2. MainViewModel Class
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;

    // 명령어 정의 (정지/Resume)
    public ICommand PauseCommand { get; }
    public ICommand ResumeTasksCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();  // TaskQueue 인스턴스 생성

        // 작업 목록 초기화
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }, _taskQueue),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" }, _taskQueue)
        };

        // 정지 명령어 (전체 작업 일시정지)
        PauseCommand = new RelayCommand(PauseAllTasks);

        // Resume 명령어 (특정 행 이후부터 작업 재개)
        ResumeTasksCommand = new RelayCommand<TaskModel>(ResumeTasksFrom);
    }

    /// <summary>
    /// 전체 작업을 일시정지합니다.
    /// </summary>
    private void PauseAllTasks()
    {
        _taskQueue.Pause(); // 모든 작업 일시정지
    }

    /// <summary>
    /// 특정 행 이후부터 작업을 다시 시작 (DataGrid에서 Resume 버튼 누를 때 호출)
    /// </summary>
    public void ResumeTasksFrom(TaskModel selectedTask)
    {
        int startIndex = TaskList.IndexOf(selectedTask); // 시작할 행의 인덱스

        // 작업 큐를 비워서 이전 작업을 모두 삭제
        _taskQueue.ClearQueue();

        // 선택된 행부터 남은 작업들을 다시 대기열에 추가
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.ResumeTask();  // 해당 행부터 작업 재개
        }

        _taskQueue.Resume(); // Resume 이후 작업 실행
    }
}
설명:
PauseCommand: 전체 작업을 일시정지하는 명령어입니다. Pause 버튼을 클릭하면 작업이 멈춥니다.
ResumeTasksFrom: Resume 버튼을 누른 특정 행 이후의 작업을 다시 시작합니다. 이때 작업 큐가 비워지고, 해당 행 이후의 작업들만 다시 대기열에 추가됩니다.
3. TaskModel Class
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스 플래그에 따라 함수들을 순차적으로 실행합니다.
/// 작업이 완료되면 자동으로 다음 작업을 실행합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    // 로그 엔트리 정보
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 비동기 함수 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 각 함수 상태를 도형으로 표현 (도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 현재 작업이 대기, 실행, 완료 상태인지 나타냄
    public string Status { get; set; }

    // Resume 명령어 (행마다 존재)
    public ICommand ResumeCommand { get; }

    // 작업 큐와 연결
    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;

        _taskQueue = taskQueue;  // TaskQueue를 받아옴

        // 비동기 함수 리스트 초기화 및 함수 추가
        FunctionTasks = new List<Func<Task>>
        {
            ExecuteTaskA,
            ExecuteTaskB,
            ExecuteTaskC
        };

        // FunctionStatusColors 리스트 초기화 (각 함수의 상태를 색상으로 표현)
        FunctionStatusColors = new ObservableCollection<Brush>
        {
            Brushes.Gray,  // Task A 초기 상태
            Brushes.Gray,  // Task B 초기 상태
            Brushes.Gray   // Task C 초기 상태
        };

        // 상태 초기화
        Status = "Pending";

        // Resume 버튼 명령어 설정
        ResumeCommand = new RelayCommand(ResumeTask);
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    public async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행 (스킵 없이 모든 작업 재실행)
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            // 도형 색상을 다시 회색으로 변경 (재실행이므로 초기화)
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Gray;
            });

            await FunctionTasks[i]();  // 비동기 작업 실행

            // 함수 실행 후 색상 변경
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green;
            });
        }
        Status = "Completed";  // 완료 상태로 변경
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
4. XAML (DataGrid 및 버튼들)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- Resume 버튼 -->
                <DataGridTemplateColumn Header="Resume">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Resume" 
                                    Command="{Binding DataContext.ResumeTasksCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 정지 버튼 -->
        <Button Content="Pause All" Command="{Binding PauseCommand}" Width="100" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" />
    </Grid>
</Window>
설명:
Resume 버튼은 각 행마다 존재하고, 특정 행의 Resume 버튼을 누르면 해당 행 이후의 작업이 다시 실행됩니다.
Pause 버튼은 전체 작업을 일시정지합니다.
요약:
PauseCommand: 전체 작업을 일시정지합니다.
ResumeTasksFrom: Resume 버튼을 누른 특정 행 이후의 작업을 다시 시작하며, 기존 대기열은 비워지고, 새로운 작업 대기열에 해당 행 이후의 작업만 다시 추가됩니다.
TaskQueue는 IsPaused 상태를 추가하여, 일시정지/재개 로직을 구현합니다.
이 구조를 통해 특정 행 이후의 작업을 다시 실행할 수 있고, 전체 작업을 일시정지할 수도 있습니