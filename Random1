 팝업이 뜨는 순간에 TextBox의 SelectAll()이 실행되는 현상을 재현하려면, 일시적으로 떠 있는 팝업을 만들고, 그 순간 포커스 이벤트를 감지해야 합니다.

1. 해결 방향
WPF에서 Windows 알림처럼 순간적으로 나타나는 팝업 창을 생성한다.
팝업이 뜨는 순간, TextBox가 SelectAll()을 실행하는지 확인한다.
이를 기반으로 Windows 11의 알림 팝업이 전체 선택을 유발하는지 테스트할 수 있다.
2. WPF 코드: 순간 팝업 창 생성
아래 코드는 일정 시간마다 Windows 알림처럼 순간적으로 사라지는 팝업 창을 띄우는 코드입니다.

✅ MainWindow.xaml
xml
코드 복사
<Window x:Class="FocusTest.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="포커스 테스트" Height="250" Width="400">
    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
        <TextBox Name="TestTextBox" Width="300" Height="30" Text="여기에 입력하세요"/>
        <Button Name="StartButton" Click="StartButton_Click" Width="200" Height="40" Margin="10">
            순간 알림 테스트 시작
        </Button>
        <Button Name="StopButton" Click="StopButton_Click" Width="200" Height="40" Margin="10">
            순간 알림 중지
        </Button>
    </StackPanel>
</Window>
✅ MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace FocusTest
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer _popupTimer;

        public MainWindow()
        {
            InitializeComponent();

            // 3초마다 순간 알림 실행
            _popupTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(3)
            };
            _popupTimer.Tick += PopupTimer_Tick;
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            _popupTimer.Start();
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            _popupTimer.Stop();
        }

        private async void PopupTimer_Tick(object sender, EventArgs e)
        {
            ShowNotificationPopup(); // 알림 팝업 띄우기
            await Task.Delay(500);  // 0.5초 후 자동 닫기

            // 강제 포커스 복구
            TestTextBox.Focus();
        }

        private void ShowNotificationPopup()
        {
            Window popup = new Window
            {
                Title = "알림 팝업",
                Width = 200,
                Height = 100,
                WindowStyle = WindowStyle.ToolWindow,
                Topmost = true,
                ResizeMode = ResizeMode.NoResize,
                ShowInTaskbar = false,
                Content = new System.Windows.Controls.TextBlock
                {
                    Text = "알림이 떴음!",
                    HorizontalAlignment = HorizontalAlignment.Center,
                    VerticalAlignment = VerticalAlignment.Center
                }
            };

            // 메인 창의 우측 하단에 표시
            popup.Left = this.Left + this.Width - 220;
            popup.Top = this.Top + this.Height - 120;

            popup.Show();

            // 일정 시간이 지나면 자동 닫기
            Task.Delay(500).ContinueWith(_ => popup.Dispatcher.Invoke(() => popup.Close()));
        }
    }
}
3. 설명
Windows 11 알림과 유사한 팝업이 3초마다 뜨고 0.5초 후 자동으로 사라짐.
TestTextBox.Focus();를 이용해 팝업이 사라진 후 다시 입력창으로 포커스를 복구.
만약 TextBox가 전체 선택되는 현상이 발생하면, Windows 11 알림과 동일한 문제를 재현한 것.
4. 테스트 방법
TextBox에 텍스트 입력 시작.
"순간 알림 테스트 시작" 버튼 클릭 → 3초마다 순간적으로 알림 팝업이 뜸.
팝업이 뜨는 순간 TextBox의 입력 상태가 전체 선택되는지 확인.
5. 결론
✅ Windows 11 알림처럼 순간적으로 뜨고 사라지는 팝업을 구현하여 TextBox 전체 선택 현상 테스트 가능.