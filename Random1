# Windows Forms를 이용해 해당 기능을 구현하는 방법은 다음과 같습니다.

먼저, Windows API를 사용하여 윈도우를 바탕화면 위에 유지하고, 또한 투명도를 조절하는 방법을 사용합니다. 그리고, Lock 버튼을 사용하여 윈도우를 활성화 또는 비활성화하는 방법을 사용합니다.

아래의 코드를 확인해 주세요.

csharp

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public partial class MainForm : Form
{
    // Windows API 함수를 가져옵니다.
    [DllImport("user32.dll")]
    static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

    // 항상 바탕화면 위에 있도록 지정하는 데 필요한 핸들을 가져옵니다.
    static readonly IntPtr HWND_BOTTOM = new IntPtr(1);

    // 플래그 설정을 위한 상수들
    const UInt32 SWP_NOSIZE = 0x0001;
    const UInt32 SWP_NOMOVE = 0x0002;
    const UInt32 SWP_NOACTIVATE = 0x0010;

    public MainForm()
    {
        InitializeComponent();

        this.FormBorderStyle = FormBorderStyle.None; // 테두리 제거

        // 80% 투명도 설정
        this.Opacity = 0.8;
    }

    // Lock 버튼 클릭 이벤트
    private void btnLock_Click(object sender, EventArgs e)
    {
        // 버튼의 Text를 확인해서 현재 상태를 결정합니다.
        if (btnLock.Text == "Lock")
        {
            // Lock 상태로 바꿉니다.
            btnLock.Text = "Unlock";
            
            // 이제 모든 컨트롤을 비활성화합니다. 해제 버튼만 제외하고.
            foreach (Control control in this.Controls)
            {
                if (control != btnLock)
                    control.Enabled = false;
            }

            // 항상 바탕화면 위에 있도록 설정합니다.
            SetWindowPos(this.Handle, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);
        }
        else
        {
            // Unlock 상태로 바꿉니다.
            btnLock.Text = "Lock";
            
            // 모든 컨트롤을 다시 활성화합니다.
            foreach (Control control in this.Controls)
            {
                control.Enabled = true;
            }
        }
    }
}

위의 코드는 전체 윈도우의 활성화 / 비활성화를 제어하며, 항상 바탕화면 위에 있도록 설정합니다. 또한, 윈도우의 투명도를 80%로 설정합니다. Lock 버튼을 사용하여 윈도우를 활성화 또는 비활성화할 수 있습니다. 윈도우가 비활성화되면 해제 버튼만 작동하고, 다른 모든 컨트롤은 비활성화됩니다. 윈도우가 활성화되면 모든 컨트롤이 다시 