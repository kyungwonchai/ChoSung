    하고, 필요한 네임스페이스를 추가합니다.

csharp

using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json; // for Json serialization, install via NuGet if needed

    다음으로, 메일을 보내는 메서드를 구현합니다. 이 예제에서는 비동기 메서드를 사용합니다.

csharp

public async Task SendMailAsync(string token, string systemId, string recipient, string subject, string message)
{
    string apiUrl = "https://api.mail-service.com/send"; // Replace with the actual API URL

    using (HttpClient client = new HttpClient())
    {
        // Set the authorization token in the header
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

        // Create the payload
        var payload = new
        {
            system_id = systemId,
            recipient = recipient,
            subject = subject,
            message = message
        };

        // Convert payload to JSON
        var jsonPayload = JsonConvert.SerializeObject(payload);

        // Send the POST request
        var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
        var response = await client.PostAsync(apiUrl, content);

        // Handle the response
        if (response.IsSuccessStatusCode)
        {
            MessageBox.Show("Mail sent successfully");
        }
        else
        {
            MessageBox.Show($"Failed to send mail. Status code: {response.StatusCode}");
        }
    }
}

    WinForms 애플리케이션에서 이 메서드를 호출하려면, 예를 들어 버튼 클릭 이벤트 내에서 다음과 같이 사용할 수 있습니다.

csharp

private async void btnSendMail_Click(object sender, EventArgs e)
{
    string token = "your_token_here";
    string systemId = "your_system_id_here";
    string recipient = "recipient@example.com";
    string subject = "Test Email";
    string message = "This is a test email sent via REST API";

    await SendMailAsync(token, systemId, recipient, subject, message);
}

이 코드는 C# WinForms 애플리케이션에서 REST API를 사용하여 이메일을 보내는 방법을 보여줍니다. 실제 사용 시 API 엔드포인트, 토큰, 시스템 ID 등을 적절히 설정해야 합니다. 또한, 사