화면의 특정 위치 색상을 읽고, 텍스트박스에 실시간 마우스 좌표를 표시하며, RGB 조건에 맞을 경우 해당 위치를 클릭하는 코드입니다. WPF 프로젝트에서 사용할 수 있도록 작성하였습니다.

전체 코드 구성
메인 윈도우 UI (XAML)
메인 윈도우 코드 비하인드 (C#)
XAML 코드
xml
코드 복사
<Window x:Class="ColorClicker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Color Clicker" Height="300" Width="400">
    <Grid>
        <TextBox Name="MousePositionTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" 
                 Width="200" Margin="10" IsReadOnly="True" />
        <Button Name="StartButton" Content="Start" HorizontalAlignment="Right" VerticalAlignment="Top" 
                Width="100" Margin="10" Click="StartButton_Click" />
        <Button Name="StopButton" Content="Stop" HorizontalAlignment="Right" VerticalAlignment="Top" 
                Width="100" Margin="120,10,10,0" Click="StopButton_Click" />
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace ColorClicker
{
    public partial class MainWindow : Window
    {
        private CancellationTokenSource _cancellationTokenSource;

        public MainWindow()
        {
            InitializeComponent();
            CompositionTarget.Rendering += UpdateMousePosition;
        }

        // 마우스 좌표 업데이트
        private void UpdateMousePosition(object sender, EventArgs e)
        {
            var position = GetCursorPosition();
            MousePositionTextBox.Text = $"X: {position.X}, Y: {position.Y}";
        }

        // 시작 버튼 클릭
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            _cancellationTokenSource = new CancellationTokenSource();
            await Task.Run(() => MonitorScreenColor(_cancellationTokenSource.Token));
        }

        // 멈춤 버튼 클릭
        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            _cancellationTokenSource?.Cancel();
        }

        // 화면 색상 모니터링
        private void MonitorScreenColor(CancellationToken token)
        {
            while (!token.IsCancellationRequested)
            {
                var cursorPos = GetCursorPosition();
                var color = GetPixelColor(cursorPos.X, cursorPos.Y);

                // 조건: R, G, B가 각각 30 이하, 230 이상, 30 이하
                if (color.R <= 30 && color.G >= 230 && color.B <= 30)
                {
                    PerformClick(cursorPos.X, cursorPos.Y);
                }

                Thread.Sleep(100); // 0.1초 간격으로 확인
            }
        }

        // 특정 위치 클릭
        private void PerformClick(int x, int y)
        {
            mouse_event(MouseEventFlags.MOUSEEVENTF_LEFTDOWN, (uint)x, (uint)y, 0, 0);
            Thread.Sleep(50); // 클릭 유지 시간
            mouse_event(MouseEventFlags.MOUSEEVENTF_LEFTUP, (uint)x, (uint)y, 0, 0);
        }

        // 화면 픽셀 색상 가져오기
        private System.Drawing.Color GetPixelColor(int x, int y)
        {
            using (var bmp = new Bitmap(1, 1))
            {
                using (var g = Graphics.FromImage(bmp))
                {
                    g.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(1, 1));
                }
                return bmp.GetPixel(0, 0);
            }
        }

        // 현재 마우스 위치 가져오기
        private static System.Drawing.Point GetCursorPosition()
        {
            GetCursorPos(out var lpPoint);
            return lpPoint;
        }

        // WinAPI 사용
        [DllImport("user32.dll")]
        private static extern bool GetCursorPos(out System.Drawing.Point lpPoint);

        [DllImport("user32.dll")]
        private static extern void mouse_event(MouseEventFlags dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo);

        [Flags]
        private enum MouseEventFlags : uint
        {
            MOUSEEVENTF_LEFTDOWN = 0x02,
            MOUSEEVENTF_LEFTUP = 0x04,
        }
    }
}
코드 설명
마우스 좌표 표시: GetCursorPosition() 함수로 현재 마우스 위치를 가져와 텍스트박스에 표시합니다.
화면 색상 읽기: GetPixelColor(int x, int y) 함수로 현재 마우스 위치의 색상을 가져옵니다.
조건 만족 시 클릭: RGB 값이 조건을 충족하면 PerformClick() 함수로 해당 위치를 클릭합니다.
비동기 작업: MonitorScreenColor 메서드는 Task.Run으로 비동기 실행되며, CancellationToken을 사용해 실행을 중단할 수 있습니다.
시작/중지 버튼: 작업을 시작/중지할 수 있는 버튼이 포함되어 있습니다.
주의사항
관리자 권한으로 실행해야 화면 캡처 및 마우스 이벤트가 정상 작동합니다.
너무 짧은 Thread.Sleep 주기는 시스템 성능에 영향을 줄 수 있으므로 적절히 조정하세요.
타사 라이브러리 없이 작성되었지만, 고해상도 화면에서는 DPI 설정을 고려해야 할 수 있습니다.
이 코드로 원하는 기능을 구현할 수 있습니다!






지금까지의 대화가 도움이 되었나요?









ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.