네, 정확히 보셨습니다. 로컬 PC(Windows 11)의 ~/.ssh 폴더 안에 키 파일(id_rsa, github_key 등)이 여러 개 있으면, SSH 클라이언트가 어떤 키를 사용해서 우분투 서버에 접속해야 할지 몰라서 기본값으로 시도하다가 결국 비밀번호를 물어보게 됩니다.

아무것도 없는 PC에서 잘 되었던 이유는, 키가 하나뿐이라 클라이언트가 고민 없이 바로 그 키를 사용했기 때문입니다.

이 문제를 해결하는 가장 확실하고 좋은 방법은 config 파일을 만들어 각 서버에 접속할 때 어떤 키를 사용할지 지정해주는 것입니다.

## 해결 방법: SSH config 파일 설정하기
config 파일을 이용하면 '이 서버에 접속할 때는 이 키를 사용해!'라고 명시적으로 알려줄 수 있습니다.

1. config 파일 생성 및 편집
먼저 Windows 11의 .ssh 폴더로 이동합니다. 보통 아래 경로에 있습니다.
C:\Users\사용자이름\.ssh\

해당 폴더에 config 라는 이름의 파일이 있는지 확인하고, 없으면 새로 만듭니다. (확장자는 없습니다.)

메모장이나 다른 텍스트 편집기로 config 파일을 열고 아래와 같이 내용을 추가합니다.

Plaintext

# [별명]은 앞으로 편하게 쓸 접속 이름입니다. (예: my-ubuntu)
Host [별명]

    # 실제 접속할 우분투 서버의 IP 주소 또는 도메인 주소
    HostName [서버 IP 주소]

    # 우분투 서버의 사용자 이름
    User [사용자 이름]

    # 이 서버에 접속할 때 사용할 개인 키 파일의 경로
    # 윈도우 경로 대신 ~/.ssh/ 처럼 리눅스 스타일로 적어도 됩니다.
    IdentityFile ~/.ssh/[우분투 접속용 개인키 파일 이름]
2. 실제 적용 예시
예를 들어, 우분투 서버 정보가 아래와 같다고 가정해 보겠습니다.

서버 IP: 192.168.0.100

사용자 이름: dev

사용할 개인 키: C:\Users\사용자이름\.ssh\ubuntu_key (공개키는 ubuntu_key.pub)

이 경우 config 파일 내용은 다음과 같이 작성합니다.

Plaintext

Host my-ubuntu
    HostName 192.168.0.100
    User dev
    IdentityFile ~/.ssh/ubuntu_key
이제 터미널을 열고 아래와 같이 간단하게 접속할 수 있습니다.

Bash

ssh my-ubuntu
이렇게 하면 SSH 클라이언트는 config 파일을 읽고 'my-ubuntu' 라는 호스트에 접속할 때는 ~/.ssh/ubuntu_key 파일을 사용해야 한다는 것을 인지하여 더 이상 비밀번호를 묻지 않습니다. 깃허브용 키나 다른 키와 헷갈리지도 않습니다.

## ? 서버 측 확인 사항
혹시 모르니 우분투 서버 쪽 설정도 한번 확인해 보세요.

authorized_keys 파일 확인: 사용자가 언급한 auth... 파일은 authorized_keys 일 가능성이 높습니다.

Windows PC의 공개 키(.pub 파일)의 내용 전체가 우분투 서버의 ~/.ssh/authorized_keys 파일 안에 한 줄로 추가되어 있어야 합니다.

cat ~/.ssh/authorized_keys 명령어로 내용이 잘 들어갔는지 확인하세요.

폴더 및 파일 권한 확인: SSH는 보안에 민감해서 권한 설정이 잘못되면 키가 있어도 로그인을 거부합니다. 아래 명령어로 서버에서 권한을 올바르게 설정해주세요.

.ssh 폴더 권한: chmod 700 ~/.ssh

authorized_keys 파일 권한: chmod 600 ~/.ssh/authorized_keys