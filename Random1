아래는 요청하신 대로 1열(날짜/시간)은 제외, 2열은 타겟(y), **3~5열은 입력값(features)**으로 사용하는 모델 훈련 코드입니다. 이 코드는 최적의 모델을 선택하고, 필요시 튜닝 과정을 병행합니다.

1. 모델 훈련 및 최적 모델 저장
주요 내용:
DB에서 PandB 데이터 가져오기: MSSQL 저장 프로시저 사용.
모델 학습: XGBoost, RandomForest, LinearRegression 사용.
최적 모델 선택: K-Fold 교차 검증으로 MSE 기준 최적 모델 선택.
모델 저장: 최적 모델을 저장하여 이후 예측 단계에서 사용.
python
코드 복사
# 필요한 라이브러리 설치 및 임포트
!pip install pandas scikit-learn xgboost pymssql matplotlib joblib --quiet

import pandas as pd
import numpy as np
from sklearn.model_selection import KFold, train_test_split
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from xgboost import XGBRegressor
import pymssql
import joblib

# 데이터베이스에서 PandB 데이터를 불러오는 함수
def fetch_data_from_db(proc_name):
    """
    MSSQL 저장 프로시저를 호출하여 PandB 데이터를 가져옵니다.
    :param proc_name: 저장 프로시저 이름
    :return: 데이터 (DataFrame)
    """
    server = "localhost"  # DB 서버 주소
    user = "your_username"  # 사용자 이름
    password = "your_password"  # 비밀번호
    database = "your_database"  # 데이터베이스 이름

    try:
        conn = pymssql.connect(server=server, user=user, password=password, database=database)
        query = f"EXEC {proc_name}"  # 저장 프로시저 실행
        df = pd.read_sql(query, conn)  # 데이터프레임으로 변환
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

# PandB 데이터 가져오기
data = fetch_data_from_db("GetPandB")  # PandB 데이터 저장 프로시저 호출
if data.empty:
    print("No data fetched. Please check your stored procedure.")
    exit()

# 데이터 준비
X = data.iloc[:, 2:5].values  # 3~5열 (특징값)
y = data.iloc[:, 1].values    # 2열 (타겟값)

# 사용할 모델 정의
models = {
    "XGBoost": XGBRegressor(random_state=42, n_estimators=100, max_depth=5),
    "RandomForest": RandomForestRegressor(random_state=42, n_estimators=100),
    "LinearRegression": LinearRegression()
}

# K-Fold 교차 검증
kf = KFold(n_splits=5, shuffle=True, random_state=42)
best_model_name = None
best_model = None
lowest_mse = float("inf")

print("Training models with K-Fold cross-validation...")
for model_name, model in models.items():
    mse_scores = []

    for train_idx, val_idx in kf.split(X):
        X_train, X_val = X[train_idx], X[val_idx]
        y_train, y_val = y[train_idx], y[val_idx]

        # 모델 학습
        model.fit(X_train, y_train)
        
        # 검증
        predictions = model.predict(X_val)
        mse = mean_squared_error(y_val, predictions)
        mse_scores.append(mse)

    # 평균 MSE 계산
    avg_mse = np.mean(mse_scores)
    print(f"{model_name}: Average MSE = {avg_mse:.4f}")

    # 최적 모델 선택
    if avg_mse < lowest_mse:
        lowest_mse = avg_mse
        best_model_name = model_name
        best_model = model

# 최적 모델 출력 및 저장
print(f"Best model: {best_model_name} with MSE = {lowest_mse:.4f}")
joblib.dump(best_model, "best_model.pkl")
print("Best model saved as 'best_model.pkl'")
코드 설명
DB에서 데이터 가져오기:

MSSQL 저장 프로시저 GetPandB를 호출하여 PandB 데이터를 가져옵니다.
데이터는 다음과 같은 구조를 가정합니다:
1열: 날짜/시간 (사용하지 않음).
2열: 타겟 값 (y).
3~5열: 입력값(features).
모델 학습:

세 가지 모델(XGBoost, RandomForest, LinearRegression)을 사용.
각 모델에 대해 5-Fold 교차 검증을 수행.
최적 모델 선택:

평균 MSE가 가장 낮은 모델을 선택.
최적 모델을 best_model.pkl로 저장.
출력:

각 모델의 평균 MSE와 최적 모델 이름 및 성능 출력.
결과물