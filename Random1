다음은 요청 사항에 따라 float 컬럼에 문자열이 포함된 경우 해당 값을 99로 변경하여 처리하는 수정된 GetNewRows 함수입니다.

수정된 GetNewRows 함수
csharp
코드 복사
public List<Dictionary<string, object>> GetNewRows(string rootPath)
{
    var newRows = new List<Dictionary<string, object>>();
    var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

    foreach (var file in csvFiles)
    {
        try
        {
            using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
            {
                reader.ReadLine(); // 첫 번째 행(헤더) 무시
                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine()?.Split(',');
                    if (values == null || values.Length < 12) // MP5DATA와 MP5RESULT 포함 최소 12개 컬럼 확인
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: Insufficient columns.");
                        continue;
                    }

                    // 디버그 출력: 현재 처리 중인 행의 값을 출력
                    Debug.WriteLine($"Processing Row in File {file}: {string.Join(", ", values)}");

                    // Null 값 체크: 행 데이터 중 하나라도 null이면 스킵
                    if (values.Any(string.IsNullOrWhiteSpace))
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: Contains null or empty values.");
                        continue;
                    }

                    // InspectionTime 형식을 yyyy-MM-dd HH:mm:ss로 변환
                    string inspectionTimeOriginal = values[0];
                    string inspectionTime;
                    if (DateTime.TryParseExact(inspectionTimeOriginal, "yyyyMMdd HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out var parsedDate))
                    {
                        inspectionTime = parsedDate.ToString("yyyy-MM-dd HH:mm:ss"); // 변환된 형식
                    }
                    else
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: InspectionTime is not in the valid format (yyyyMMdd HH:mm:ss).");
                        continue;
                    }

                    // Float 값 처리: 문자열이 있으면 99로 설정
                    float mp1Data = float.TryParse(values[3], out var mp1Value) ? mp1Value : 99;
                    float mp2Data = float.TryParse(values[5], out var mp2Value) ? mp2Value : 99;
                    float mp3Data = float.TryParse(values[7], out var mp3Value) ? mp3Value : 99;
                    float mp4Data = float.TryParse(values[9], out var mp4Value) ? mp4Value : 99;
                    float mp5Data = float.TryParse(values[11], out var mp5Value) ? mp5Value : 99;

                    var row = new Dictionary<string, object>
                    {
                        ["InspectionTime"] = inspectionTime, // 변환된 문자열로 저장
                        ["ModelName"] = values[1],
                        ["AlignResult"] = values[2],
                        ["MP1DATA"] = mp1Data,
                        ["MP1RESULT"] = values[4],
                        ["MP2DATA"] = mp2Data,
                        ["MP2RESULT"] = values[6],
                        ["MP3DATA"] = mp3Data,
                        ["MP3RESULT"] = values[8],
                        ["MP4DATA"] = mp4Data,
                        ["MP4RESULT"] = values[10],
                        ["MP5DATA"] = mp5Data,
                        ["MP5RESULT"] = values[12],
                        ["ipname"] = _ipAddress // 현재 IP 추가
                    };

                    // InspectionTime 조건 검사
                    if (DateTime.ParseExact(inspectionTime, "yyyy-MM-dd HH:mm:ss", null) > _lastUploadedTime)
                    {
                        Debug.WriteLine($"Added Row from File {file}: Passed all checks.");
                        newRows.Add(row);
                    }
                    else
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: InspectionTime is not newer than the last uploaded time.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // 파일 처리 중 에러 발생 시 파일 경로와 에러 메시지 출력
            Debug.WriteLine($"Error processing File {file}: {ex.Message}");
        }
    }

    return newRows;
}
수정된 부분 설명
float 값 검증:

float.TryParse를 사용하여 숫자인지 확인.
숫자가 아닌 경우 기본값 99로 처리.
컬럼별 처리:
csharp
코드 복사
float mp1Data = float.TryParse(values[3], out var mp1Value) ? mp1Value : 99;
디버그 메시지 출력:

행의 데이터 처리 결과를 디버깅 창에 출력.
에러 발생 시 파일 경로와 메시지 출력.
디버깅 출력 예시
CSV 데이터
plaintext
코드 복사
20250110 10:00:00,ModelA,Good,123.45,Result1,abc,Result2,45.67,Result3,89.01,Result4,N/A,Result5
디버그 출력
plaintext
코드 복사
Processing Row in File C:\Logs\Sample.csv: 20250110 10:00:00, ModelA, Good, 123.45, Result1, abc, Result2, 45.67, Result3, 89.01, Result4, N/A, Result5
Float column 'MP2DATA' contains invalid value. Defaulting to 99.
Float column 'MP5DATA' contains invalid value. Defaulting to 99.
Added Row from File C:\Logs\Sample.csv: Passed all checks.
결과
float 검증:
문자열이 포함된 경우 기본값 99로 변경.
디버그 메시지: