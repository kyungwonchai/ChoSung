여 숫자를 인식하고 목록에 추가하며, 연도와 월을 인식하고 사용자가 원하는 달을 선택하는 기능을 포함한 코드를 제공하겠습니다. 여기서는 Emgu CV와 Tesseract OCR을 사용하여 텍스트 인식을 구현합니다.

설치
Visual Studio의 NuGet 패키지 관리자 콘솔에서 다음 패키지를 설치하세요:

bash
코드 복사
Install-Package Emgu.CV
Install-Package Emgu.CV.runtime.windows
Install-Package Tesseract
전체 코드
csharp
코드 복사
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using AForge.Imaging;
using AForge.Imaging.Filters;
using Emgu.CV;
using Emgu.CV.OCR;
using Emgu.CV.Structure;
using Tesseract;

namespace CalendarClicker
{
    public partial class Form1 : Form
    {
        [DllImport("user32.dll")]
        static extern bool SetCursorPos(int X, int Y);

        [DllImport("user32.dll")]
        static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, int dwExtraInfo);

        const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        const uint MOUSEEVENTF_LEFTUP = 0x04;

        private Button clickButton;
        private PictureBox pictureBox;
        private ListBox listBox;
        private TesseractEngine tesseract;

        public Form1()
        {
            InitializeComponent();

            // 버튼 추가
            clickButton = new Button();
            clickButton.Text = "Detect and Highlight Areas";
            clickButton.Location = new Point(10, 10);
            clickButton.Click += new EventHandler(OnButtonClick);
            this.Controls.Add(clickButton);

            // PictureBox 추가
            pictureBox = new PictureBox();
            pictureBox.Location = new Point(10, 50);
            pictureBox.Size = new Size(800, 600);
            this.Controls.Add(pictureBox);

            // ListBox 추가
            listBox = new ListBox();
            listBox.Location = new Point(820, 50);
            listBox.Size = new Size(200, 600);
            this.Controls.Add(listBox);

            // Tesseract 엔진 초기화
            tesseract = new TesseractEngine("./tessdata", "eng", EngineMode.Default);
        }

        private void OnButtonClick(object sender, EventArgs e)
        {
            listBox.Items.Clear();

            // 스크린샷 캡처
            Bitmap screenshot = CaptureScreen(200, 200, 400, 400);

            // 필터 적용 (특정 색상 필터링)
            EuclideanColorFiltering filter = new EuclideanColorFiltering();
            filter.CenterColor = new RGB(Color.FromArgb(146, 202, 173)); // 지정된 색상 중심
            filter.Radius = 30; // 색상 반경
            filter.ApplyInPlace(screenshot);

            // 그레이스케일 변환
            Grayscale grayscaleFilter = new Grayscale(0.2125, 0.7154, 0.0721);
            Bitmap grayImage = grayscaleFilter.Apply(screenshot);

            // 엣지 감지
            DifferenceEdgeDetector edgeDetector = new DifferenceEdgeDetector();
            Bitmap edges = edgeDetector.Apply(grayImage);

            // 윤곽선 찾기
            BlobCounter blobCounter = new BlobCounter();
            blobCounter.FilterBlobs = true;
            blobCounter.MinHeight = 15;
            blobCounter.MinWidth = 15;
            blobCounter.ProcessImage(edges);
            Blob[] blobs = blobCounter.GetObjectsInformation();

            using (Graphics g = Graphics.FromImage(screenshot))
            {
                foreach (Blob blob in blobs)
                {
                    // 흰색 격자를 무시하고 윤곽선을 찾음
                    if (IsInsideGrid(blob.Rectangle))
                    {
                        // 클릭 위치 계산
                        int centerX = 200 + blob.Rectangle.X + blob.Rectangle.Width / 2;
                        int centerY = 200 + blob.Rectangle.Y + blob.Rectangle.Height / 2;

                        // 클릭 위치에 빨간 원 그리기
                        g.DrawEllipse(Pens.Red, blob.Rectangle.X, blob.Rectangle.Y, blob.Rectangle.Width, blob.Rectangle.Height);

                        // OCR을 사용하여 숫자 인식
                        using (Bitmap croppedImage = screenshot.Clone(blob.Rectangle, screenshot.PixelFormat))
                        {
                            using (var page = tesseract.Process(croppedImage))
                            {
                                string text = page.GetText().Trim();
                                listBox.Items.Add(text);
                            }
                        }

                        // 클릭 이벤트 시뮬레이션 (주석 처리 해제 시 실제 클릭)
                        // SetCursorPos(centerX, centerY);
                        // mouse_event(MOUSEEVENTF_LEFTDOWN, centerX, centerY, 0, 0);
                        // mouse_event(MOUSEEVENTF_LEFTUP, centerX, centerY, 0, 0);
                    }
                }

                // 연도와 월을 인식하여 ListBox에 추가
                int year = RecognizeYear(screenshot);
                int month = RecognizeMonth(screenshot);
                listBox.Items.Add($"Year: {year}");
                listBox.Items.Add($"Month: {month}");
            }

            // PictureBox에 이미지 표시
            pictureBox.Image = screenshot;
        }

        private int RecognizeYear(Bitmap screenshot)
        {
            // 연도 인식 (좌측 상단 부분에서 연도를 인식)
            Rectangle yearRect = new Rectangle(0, 0, 100, 50);
            using (Bitmap yearImage = screenshot.Clone(yearRect, screenshot.PixelFormat))
            {
                using (var page = tesseract.Process(yearImage))
                {
                    string text = page.GetText().Trim();
                    if (int.TryParse(text, out int year))
                    {
                        return year;
                    }
                }
            }
            return 0; // 인식 실패 시 0 반환
        }

        private int RecognizeMonth(Bitmap screenshot)
        {
            // 월 인식 (연도 옆에 있는 부분에서 월을 인식)
            Rectangle monthRect = new Rectangle(100, 0, 100, 50);
            using (Bitmap monthImage = screenshot.Clone(monthRect, screenshot.PixelFormat))
            {
                using (var page = tesseract.Process(monthImage))
                {
                    string text = page.GetText().Trim();
                    if (int.TryParse(text, out int month))
                    {
                        return month;
                    }
                }
            }
            return 0; // 인식 실패 시 0 반환
        }

        private bool IsInsideGrid(Rectangle rect)
        {
            // 흰색 격자선을 기준으로 윤곽선이 겹치는지 확인
            // 격자선 두께와 간격을 설정
            int gridThickness = 2; // 격자선 두께
            int gridSpacing = 50; // 격자 간격

            // 윤곽선이 격자선을 포함하지 않으면 true 반환
            return (rect.X % gridSpacing > gridThickness && rect.Y % gridSpacing > gridThickness &&
                    (rect.X + rect.Width) % gridSpacing > gridThickness && (rect.Y + rect.Height) % gridSpacing > gridThickness);
        }

        private Bitmap CaptureScreen(int x, int y, int width, int height)
        {
            Rectangle bounds = new Rectangle(x, y, width, height);
            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);

            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(new Point(x, y), Point.Empty, bounds.Size);
            }

            return bitmap;
        }
    }
}
주요 기능
버튼 추가: 버튼을 추가하여 클릭 시 지정된 색상을 감지하고 빨간 원으로 표시합니다.
PictureBox 추가: PictureBox를 추가하여 처리된 이미지를 표시합니다.
ListBox 추가: ListBox를 추가하여 인식된 숫자를 목록으로 표시합니다.
Tesseract 초기화: Tesseract OCR 엔진을 초기화합니다.
특정 영역 캡처: CaptureScreen 메서드를 사용하여 화면의 특정 영역을 캡처하고 Bitmap으로 반환합니다.
특정 색상 필터 적용: EuclideanColorFiltering을 사용하여 지정된 RGB 색상을 필터링합니다.
윤곽선 찾기: BlobCounter를 사용하여 윤곽선을 찾고, 각 윤곽선의 중심에 빨간 원을 그립니다.
OCR로 숫자 인식: Tesseract OCR을 사용하여 숫자를 인식하고 ListBox에 추가합니다.
연도와 월 인식: 화면의 연도와 월을 인식하여 ListBox에 추가합니다.
이 코드를 실행하면 버튼 클릭 시 특정 영역에서 지정된 색상을 감지하여 빨간 원으로 표시하고, 인식된 숫자와 연도 및 월을 ListBox에 추가합니다. 필요한 경우 세부적인 부분을 조정하