씀하신 내용을 반영하여, ObservableCollection에 항목이 추가될 때에도 POStatus 속성에만 이벤트를 추가하도록 수정된 예제를 제공하겠습니다.

핵심 변경 사항
Items 컬렉션에 항목이 추가될 때마다 POStatus 속성에 이벤트 핸들러를 추가.
Items.CollectionChanged 이벤트를 활용하여 새로 추가된 항목에 대해 POStatus 속성의 변경을 감지하도록 처리.
수정된 ViewModel
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

public class MainViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private bool _showHiddenRows;
    public bool ShowHiddenRows
    {
        get => _showHiddenRows;
        set
        {
            _showHiddenRows = value;
            OnPropertyChanged(nameof(ShowHiddenRows));
            FilterItems(); // 체크박스 상태 변경 시 필터링
        }
    }

    public ObservableCollection<Item> Items { get; set; }
    public ObservableCollection<Item> FilteredItems { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<Item>
        {
            new Item { POStatus = "처리중" },
            new Item { POStatus = "이미 처리됨" },
            new Item { POStatus = "대기중" },
            new Item { POStatus = "이미 처리됨" }
        };

        // 기존 아이템에 대해 POStatus 속성 변경 감지
        foreach (var item in Items)
        {
            AddPOStatusChangeHandler(item);
        }

        // Items 컬렉션 변경 감지 (추가 및 삭제)
        Items.CollectionChanged += OnItemsCollectionChanged;

        // 초기 필터링 적용
        FilteredItems = new ObservableCollection<Item>(Items);
    }

    // Items 컬렉션 변경 시 처리
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        // 새로 추가된 아이템의 POStatus 속성에 이벤트 핸들러 추가
        if (e.NewItems != null)
        {
            foreach (Item newItem in e.NewItems)
            {
                AddPOStatusChangeHandler(newItem);
            }
        }

        // 삭제된 항목에 대한 추가적인 처리도 가능 (필요시 구현)
        // e.OldItems

        // 필터 다시 적용
        FilterItems();
    }

    // POStatus 변경 이벤트 핸들러 추가
    private void AddPOStatusChangeHandler(Item item)
    {
        item.PropertyChanged += (s, e) =>
        {
            if (e.PropertyName == nameof(Item.POStatus))
            {
                // POStatus가 변경되면 필터 다시 적용
                FilterItems();
            }
        };
    }

    // 필터링 로직
    private void FilterItems()
    {
        // 필터 적용 전에 Clear해서 기존 데이터를 비움
        FilteredItems.Clear();

        var filtered = ShowHiddenRows
            ? Items // 체크박스가 선택된 경우 모든 항목을 표시
            : Items.Where(i => !i.POStatus.Contains("이미")); // "이미" 포함 항목 필터링

        // 필터링된 항목을 FilteredItems에 추가
        foreach (var item in filtered)
        {
            FilteredItems.Add(item);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
Item 클래스
Item 클래스는 동일하게 유지됩니다.

csharp
코드 복사
using System.ComponentModel;

public class Item : INotifyPropertyChanged
{
    private string _poStatus;
    public string POStatus
    {
        get => _poStatus;
        set
        {
            if (_poStatus != value)
            {
                _poStatus = value;
                OnPropertyChanged(nameof(POStatus)); // POStatus 값 변경 시 알림
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
XAML (동일)
XAML 파일은 변경 없이 그대로 사용 가능합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    
    <Grid>
        <StackPanel>
            <!-- 체크박스: 숨겨진 행을 보여주기 -->
            <CheckBox Content="숨겨진 행 보기" 
                      IsChecked="{Binding ShowHiddenRows, Mode=TwoWay}"
                      Margin="10"/>
            
            <!-- DataGrid: POStatus 컬럼 표시 -->
            <DataGrid ItemsSource="{Binding FilteredItems}" AutoGenerateColumns="False" Height="200" Margin="10">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="POStatus" Binding="{Binding POStatus}" />
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Grid>
</Window>
핵심 변경 사항
CollectionChanged 이벤트 처리: Items 컬렉션에 새로운 항목이 추가되면 POStatus 속성에만 이벤트 핸들러를 추가하도록 처리합니다.
POStatus 속성만 감지: Item의 POStatus 속성이 변경될 때만 필터링을 다시 적용합니다.
필터링 처리: FilteredItems를 매번 새로 필터링하여 DataGrid가 최신 상태를 유지하도록 합니다.
이제 Items 컬렉션에 항목이 추가되거나 POStatus 값이 변경될 때마다 필터링이 자동으로 적용되어 DataGrid에 반영됩니다.