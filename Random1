트롤)를 사용하여 사용자가 언어를 선택할 수 있도록 하고, 선택 즉시 UI의 언어를 변경하는 기능을 추가하겠습니다. 선택한 언어에 따라 ComboBoxEdit의 값이 변경되면 즉시 UI의 텍스트를 업데이트하도록 구현하겠습니다.

1. ComboBoxEdit 컨트롤에 언어 항목 추가
우선, ComboBoxEdit에 en, kr, vi 세 가지 언어 옵션을 추가합니다. 각 항목을 선택하면 해당 언어로 UI가 즉시 변경됩니다.

2. 콤보박스 값 변경에 따른 언어 변경 이벤트
ComboBoxEdit의 선택 변경 이벤트를 처리하여, 선택한 언어에 따라 즉시 UI 텍스트를 업데이트합니다.

코드 구현:
csharp
코드 복사
using System.Globalization;
using System.Resources;
using DevExpress.XtraEditors;
using DevExpress.XtraBars.Ribbon;

public partial class MainForm : XtraForm
{
    ResourceManager resManager;
    CultureInfo cultureInfo;

    public MainForm()
    {
        InitializeComponent();

        // ResourceManager 초기화 (리소스 파일 경로에 맞게 설정)
        resManager = new ResourceManager("YourProjectNamespace.Properties.Lang", typeof(MainForm).Assembly);

        // ComboBoxEdit에 언어 항목 추가
        comboBoxEdit1.Properties.Items.Add("en");  // 영어
        comboBoxEdit1.Properties.Items.Add("kr");  // 한국어
        comboBoxEdit1.Properties.Items.Add("vi");  // 베트남어

        // 기본 시스템 언어 설정
        cultureInfo = CultureInfo.CurrentUICulture;

        // 기본 UI 텍스트 적용
        ApplyLocalizationToDevExpressControls(this);
        ApplyLocalizationToRibbonPages();

        // ComboBoxEdit 선택 변경 이벤트 핸들러 추가
        comboBoxEdit1.SelectedIndexChanged += ComboBoxEdit1_SelectedIndexChanged;
    }

    // ComboBoxEdit 선택 변경 시 호출되는 이벤트 핸들러
    private void ComboBoxEdit1_SelectedIndexChanged(object sender, EventArgs e)
    {
        // ComboBox에서 선택된 언어를 가져옴
        string selectedLanguage = comboBoxEdit1.SelectedItem.ToString();
        
        // 선택된 언어에 맞춰 UI 언어 변경
        ChangeLanguage(selectedLanguage);
    }

    // DevExpress 일반 컨트롤에 리소스를 적용하는 함수 (재귀적으로 처리)
    private void ApplyLocalizationToDevExpressControls(Control parentControl)
    {
        // DevExpress 컨트롤만 필터링하여 처리
        if (parentControl is BaseControl devControl)
        {
            string controlTag = devControl.Tag?.ToString();
            if (!string.IsNullOrEmpty(controlTag))
            {
                // 리소스에서 Tag로 지정된 키를 찾아 해당 텍스트를 적용
                string localizedText = resManager.GetString(controlTag, cultureInfo);
                if (!string.IsNullOrEmpty(localizedText))
                {
                    devControl.Text = localizedText;  // DevExpress 컨트롤의 Text 속성에 적용
                }
            }
        }

        // 자식 컨트롤들도 재귀적으로 처리
        foreach (Control childControl in parentControl.Controls)
        {
            ApplyLocalizationToDevExpressControls(childControl);
        }
    }

    // DevExpress RibbonPage 및 관련 컨트롤에 리소스를 적용하는 함수
    private void ApplyLocalizationToRibbonPages()
    {
        foreach (RibbonPage ribbonPage in ribbonControl1.Pages)
        {
            // 각 리본 페이지의 Tag에 해당하는 리소스 적용
            string ribbonPageTag = ribbonPage.Tag?.ToString();
            if (!string.IsNullOrEmpty(ribbonPageTag))
            {
                string localizedText = resManager.GetString(ribbonPageTag, cultureInfo);
                if (!string.IsNullOrEmpty(localizedText))
                {
                    ribbonPage.Text = localizedText;  // 리본 페이지의 Text 속성에 리소스 적용
                }
            }

            // 리본 페이지 내 그룹 처리
            foreach (RibbonPageGroup group in ribbonPage.Groups)
            {
                string groupTag = group.Tag?.ToString();
                if (!string.IsNullOrEmpty(groupTag))
                {
                    string localizedGroupText = resManager.GetString(groupTag, cultureInfo);
                    if (!string.IsNullOrEmpty(localizedGroupText))
                    {
                        group.Text = localizedGroupText;  // 그룹의 Text 속성에 리소스 적용
                    }
                }

                // 그룹 내의 항목 처리 (버튼 등)
                foreach (var item in group.ItemLinks)
                {
                    if (item.Item is DevExpress.XtraBars.BarButtonItem buttonItem)
                    {
                        string buttonTag = buttonItem.Tag?.ToString();
                        if (!string.IsNullOrEmpty(buttonTag))
                        {
                            string localizedButtonText = resManager.GetString(buttonTag, cultureInfo);
                            if (!string.IsNullOrEmpty(localizedButtonText))
                            {
                                buttonItem.Caption = localizedButtonText;  // 버튼의 Caption 속성에 리소스 적용
                            }
                        }
                    }
                }
            }
        }
    }

    // 언어 변경 함수
    private void ChangeLanguage(string culture)
    {
        cultureInfo = new CultureInfo(culture);
        // 일반 DevExpress 컨트롤과 리본 페이지 각각에 대해 리소스 적용
        ApplyLocalizationToDevExpressControls(this);
        ApplyLocalizationToRibbonPages();
    }
}
1. 핵심 흐름
ComboBoxEdit에 언어 추가: comboBoxEdit1에 en, kr, vi 3개의 언어 항목을 추가합니다.
선택 변경 이벤트: ComboBoxEdit의 SelectedIndexChanged 이벤트를 처리하여 사용자가 선택한 언어에 맞춰 UI를 즉시 변경합니다.
언어 변경 처리: 사용자가 선택한 언어(en, kr, vi)를 기준으로 ChangeLanguage 함수가 호출되고, 리소스 파일에서 해당 언어의 문자열을 로드하여 UI에 적용됩니다.
2. 주요 단계
ComboBoxEdit에서 언어 선택:

사용자가 ComboBoxEdit에서 en, kr, vi 중 하나를 선택하면 SelectedIndexChanged 이벤트가 발생합니다.
UI 언어 변경:

이벤트 핸들러 ComboBoxEdit1_SelectedIndexChanged에서 선택한 언어를 읽어 ChangeLanguage 함수를 호출합니다.
ChangeLanguage 함수는 선택된 언어에 따라 CultureInfo를 설정하고, UI의 모든 DevExpress 컨트롤에 대해 해당 언어의 리소스를 적용합니다.