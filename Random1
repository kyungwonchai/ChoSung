System.IO.Compression.ZipFile 클래스를 사용하여 로그를 압축하려고 했던 것이 문제라면, 다른 방법으로 로그를 내보내는 코드를 제공해 드리겠습니다. Directory.Exists를 사용하는 기존의 코드에서는 단순히 로그 디렉토리의 존재 여부만을 확인하고, 그 안의 파일들을 직접 복사하여 백업하는 방식으로 수정할 수 있습니다.

수정된 ExportLogs 메서드
다음은 System.IO.Compression.ZipFile을 사용하지 않고, 로그 파일을 특정 디렉토리로 복사하는 방식으로 대체한 코드입니다.

수정된 ExportLogs 메서드 (AdditionalFunctions.cs)
csharp
코드 복사
using System;
using System.IO;

namespace RouterMiddleACR.Services
{
    public class AdditionalFunctions
    {
        // 기존 코드 생략...

        // 로그를 내보내는 메서드
        public void ExportLogs()
        {
            string logDirectory = @"C:\Agent\RouterFlowSync\Log"; // 로그 파일이 저장된 디렉토리
            string exportDirectory = @"C:\ExportedLogs"; // 로그 파일을 복사할 대상 디렉토리

            // 로그 디렉토리가 존재하는지 확인
            if (Directory.Exists(logDirectory))
            {
                // 대상 디렉토리가 없는 경우 생성
                if (!Directory.Exists(exportDirectory))
                {
                    Directory.CreateDirectory(exportDirectory);
                }

                // 로그 디렉토리의 모든 파일을 대상 디렉토리로 복사
                foreach (string logFilePath in Directory.GetFiles(logDirectory))
                {
                    string fileName = Path.GetFileName(logFilePath); // 파일 이름만 추출
                    string destFilePath = Path.Combine(exportDirectory, fileName); // 대상 경로 생성

                    File.Copy(logFilePath, destFilePath, true); // 파일 복사 (덮어쓰기 허용)
                }
            }
            else
            {
                // 로그 디렉토리가 없으면 메시지 출력 또는 예외 처리
                throw new DirectoryNotFoundException($"로그 디렉토리를 찾을 수 없습니다: {logDirectory}");
            }
        }

        // 기존 코드 생략...
    }
}
설명
로그 디렉토리 확인:

Directory.Exists(logDirectory)를 사용하여 지정된 로그 디렉토리가 존재하는지 확인합니다.
대상 디렉토리 생성:

로그 파일을 내보낼 대상 디렉토리가 없으면 Directory.CreateDirectory(exportDirectory)를 사용하여 생성합니다.
파일 복사:

Directory.GetFiles(logDirectory)를 사용하여 로그 디렉토리의 모든 파일 경로를 가져옵니다.
각 파일을 반복문을 통해 대상 디렉토리로 복사합니다. File.Copy 메서드의 overwrite 매개변수를 true로 설정하여 동일한 이름의 파일이 있을 경우 덮어쓰기를 허용합니다.
이렇게 수정하면 System.IO.Compression.ZipFile을 사용하지 않고도 로그 파일을 안전하게 다른 디렉토리로 내보낼 수 있습니다. 이 방법은 기본적으로 로그 파일의 백업을 생성하는 데 사용되며, 압축이 필요하지 않은 경우에도 유용하게 사용할 수 있습니