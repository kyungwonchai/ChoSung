    0부터 9까지의 숫자로 이루어진 리스트 생성하기

python

numbers = [x for x in range(10)]
# numbers 변수에 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] 리스트가 생성됨

    1부터 10까지의 숫자의 제곱으로 이루어진 리스트 생성하기

python

squares = [x**2 for x in range(1, 11)]
# squares 변수에 [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 리스트가 생성됨

    문자열 리스트에서 길이가 5 이상인 문자열만 선택하기

python

words = ["apple", "banana", "grape", "orange", "kiwi", "pear"]
long_words = [word for word in words if len(word) >= 5]
# long_words 변수에 ["apple", "banana", "orange"] 리스트가 생성됨

    1부터 20까지의 숫자 중 짝수만 선택하기

python

even_numbers = [x for x in range(1, 21) if x % 2 == 0]
# even_numbers 변수에 [2, 4, 6, 8, 10, 12, 14, 16, 18, 20] 리스트가 생성됨

    중첩 리스트 풀어서 1차원 리스트로 변환하기

python

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
flattened_list = [element for sublist in nested_list for element in sublist]
# flattened_list 변수에 [1, 2, 3, 4, 5, 6, 7, 8, 9] 리스트가 생성됨

    리스트의 각 요소들을 문자열로 변환하기

python

numbers = [1, 2, 3, 4, 5]
string_numbers = [str(num) for num in numbers]
# string_numbers 변수에 ["1", "2", "3", "4", "5"] 리스트가 생성됨

    문자열 리스트에서 모든 문자들을 대문자로 변환하기

python

words = ["apple", "banana", "grape"]
uppercase_words = [word.upper() for word in words]
# uppercase_words 변수에 ["APPLE", "BANANA", "GRAPE"] 리스트가 생성됨

    조건식을 사용하여 값을 변환하기

python

numbers = [1, 2, 3, 4, 5]
modified_numbers = [num if num % 2 == 0 else num * 2 for num in numbers]
# modified_numbers 변수에 [2, 2, 6, 4, 10] 리스트가 생성됨

    리스트 컴프리헨션으로 2차원 리스트 생성하기

python

rows = 3
cols = 3
matrix = [[0 for _ in range(cols)] for _ in range(rows)]
# matrix 변수에 3x3 크기의 2차원 리스트가 생성되고 모든 요소는 0으로 초기화됨

    딕셔너리에서 특정 조건을 만족하는 항목으로 새로운 딕셔너리 생성하기

python

original_dict = {"apple": 1, "banana": 2, "grape": 3, "orange": 4}
filtered_dict = {key: value for key, value in original_dict.items() if value >= 3}
# filtered_dict 변수에 {"grape": 3, "orange": 4} 딕셔너리가 생성됨

이러한 예제들은 리스트 컴프리헨션의 다양한 활용법을 보여줍니다. 리스트 컴프리헨션은 간결하고 효율적인 코드 작성을 가능하게 해주기 때문에 파이썬에서 매우 자주 사용되는 기술 중 하