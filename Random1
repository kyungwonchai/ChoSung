를 파일로 기록하는 기능과 네임드 파이프(named pipe) 서버를 통해 로그를 전송하는 기능을 모두 포함하고 있었습니다. 또한, 싱글톤 패턴(Singleton pattern)을 사용하여 LogService의 인스턴스를 하나만 생성하여 어디서든 동일한 인스턴스를 사용할 수 있도록 했습니다.

LogService의 개선된 버전
아래는 LogService 클래스의 개선된 버전입니다. 이 버전은 다음 기능을 포함합니다:

로그 디렉터리 설정 및 생성: 로그 파일이 저장될 디렉터리를 설정하고, 해당 디렉터리가 존재하지 않으면 생성합니다.
싱글톤 인스턴스 관리: LogService의 인스턴스를 싱글톤 패턴으로 관리하여 애플리케이션 전역에서 하나의 인스턴스만 사용하도록 합니다.
네임드 파이프 서버 설정: 네임드 파이프 서버를 설정하고, 클라이언트 연결을 기다리며 로그를 전송하는 기능을 제공합니다.
개선된 LogService.cs 코드
csharp
코드 복사
using System;
using System.IO;
using System.IO.Pipes;
using System.Threading;
using System.Threading.Tasks;

namespace RouterMiddleACRService
{
    public class LogService
    {
        private static LogService _instance; // 싱글톤 인스턴스
        private readonly string _logDirectory; // 로그 파일이 저장될 디렉터리 경로
        private readonly string _pipeName = "RouterMiddleACRLogPipe"; // 네임드 파이프 이름
        private NamedPipeServerStream _pipeServer;
        private StreamWriter _pipeWriter;
        private CancellationTokenSource _cancellationTokenSource;

        // 싱글톤 인스턴스 접근자
        public static LogService Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new LogService();
                }
                return _instance;
            }
        }

        // 생성자
        private LogService()
        {
            // 로그 디렉터리 경로 설정 (예: C:\Logs\RouterMiddleACRService\YYYYMM)
            _logDirectory = Path.Combine("C:\\Logs", "RouterMiddleACRService", DateTime.Now.ToString("yyyyMM"));
            Directory.CreateDirectory(_logDirectory); // 디렉터리가 없으면 생성

            Start(); // 네임드 파이프 서버를 시작
        }

        // 로그 서비스를 시작하는 메서드
        public void Start()
        {
            _cancellationTokenSource = new CancellationTokenSource();
            Task.Run(() => StartPipeServer(_cancellationTokenSource.Token));
        }

        // 로그 서비스를 중지하는 메서드
        public void Stop()
        {
            _cancellationTokenSource.Cancel();
            _pipeWriter?.Dispose();
            _pipeServer?.Dispose();
        }

        // 로그 메시지를 파일에 기록하는 메서드
        public void LogToFile(string message)
        {
            try
            {
                string logFilePath = Path.Combine(_logDirectory, $"{DateTime.Now:yyyyMMdd}_Log.txt");
                using (StreamWriter writer = new StreamWriter(logFilePath, true))
                {
                    writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to write log to file: {ex.Message}");
            }
        }

        // 네임드 파이프 서버를 시작하는 메서드
        private void StartPipeServer(CancellationToken cancellationToken)
        {
            try
            {
                _pipeServer = new NamedPipeServerStream(_pipeName, PipeDirection.Out, 1, PipeTransmissionMode.Message, PipeOptions.Asynchronous);

                // 클라이언트의 연결을 기다립니다.
                _pipeServer.WaitForConnection();

                _pipeWriter = new StreamWriter(_pipeServer)
                {
                    AutoFlush = true // 데이터를 즉시 전송하도록 자동 플러시 설정
                };

                // 클라이언트로 로그 메시지를 전송
                while (!cancellationToken.IsCancellationRequested)
                {
                    string logMessage = $"Log message at {DateTime.Now}";
                    _pipeWriter.WriteLine(logMessage); // 로그 메시지를 네임드 파이프로 전송
                    Thread.Sleep(1000); // 1초 대기
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Pipe server error: {ex.Message}");
            }
            finally
            {
                // 리소스 정리
                _pipeWriter?.Dispose();
                _pipeServer?.Dispose();
            }
        }
    }
}
코드 설명
싱글톤 인스턴스 관리:

LogService 클래스는 싱글톤 패턴으로 구현되었습니다. 이는 클래스의 인스턴스가 애플리케이션 전역에서 하나만 생성되도록 보장합니다.
Instance 프로퍼티를 통해 언제든지 동일한 인스턴스를 접근할 수 있습니다. 첫 번째 접근 시 new LogService()를 통해 인스턴스가 생성되고 이후에는 기존 인스턴스를 반환합니다.
로그 디렉터리 설정 및 생성:

클래스 생성자에서 _logDirectory 경로를 설정하고, 해당 경로가 존재하지 않으면 Directory.CreateDirectory를 통해 디렉터리를 생성합니다. 로그는 날짜별로 정리되어 저장됩니다.
네임드 파이프 서버 설정 및 시작:

StartPipeServer 메서드는 네임드 파이프 서버를 설정하고 클라이언트 연결을 기다립니다. 클라이언트가 연결되면, 주기적으로 로그 메시지를 네임드 파이프를 통해 전송합니다.
로그 파일 기록 기능:

LogToFile 메서드는 로그 메시지를 파일에 기록하는 기능을 제공합니다. 로그 파일은 날짜별로 관리되며, 해당 날짜에 맞는 파일에 로그를 추가합니다.
서비스 시작 및 중지:

Start 메서드는 서비스가 시작될 때 호출되어 네임드 파이프 서버를 비동기적으로 시작합니다.
Stop 메서드는 서비스가 중지될 때 호출되어 모든 리소스를 정리하고 파이프 서버를 중지합니다.
LogService 시작 위치
LogService는 서비스 애플리케이션의 메인 서비스 클래스에서 시작됩니다. 서비스가 시작될 때 LogService.Instance.Start()가 호출되어 네임드 파이프 서버를 열고, 로그 기록을 시작합니다.

서비스 메인 클래스 (MainService.cs)
서비스의 메인 클래스에서 LogService를 사용하는 방법은 다음과 같습니다:

csharp
코드 복사
using System.ServiceProcess;

namespace RouterMiddleACRService
{
    public partial class MainService : ServiceBase
    {
        public MainService()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            // 서비스가 시작될 때 LogService를 시작합니다.
            LogService.Instance.Start();
        }

        protected override void OnStop()
        {
            // 서비스가 중지될 때 LogService를 중지합니다.
            LogService.Instance.Stop();
        }
    }
}
요약
LogService 클래스는 싱글톤 패턴으로 구현되어 애플리케이션 전역에서 하나의 인스턴스만 사용하도록 합니다.
로그 디렉터리 설정 및 생성: 로그 파일이 저장될 디렉터리를 설정하고 필요 시 생성합니다.
네임드 파이프 서버 설정: 파이프 서버를 설정하고 클라이언트 연결을 기다리며 로그를 전송합니다.
로그 파일 기록 기능: 로그 메시지를 파일에 기록하는 기능을 제공합니다.
서비스 메인 클래스에서 LogService를 시작하고 중지하는 코드가 추가되었습니다.
이 구조를 통해 LogService가 파일 로그 기록과 네임드 파이프 통신을 모두 관리하며, 서비스의 시작과 중지에 따라 자동으로 동작하도록 설정됩니다.