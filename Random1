해했습니다. 이전 WPF 과제에서 구현한 보낼 포트 5개짜리 설정 기능을 기반으로, 새로운 요구사항을 포함하여 통합된 완성 코드를 작성하겠습니다. 코드에서는 디자인 패턴을 유지하고, 반복 코드를 줄이며 필요한 경우 UserControl을 사용하여 재사용 가능한 컴포넌트를 구현하겠습니다.

1. 코드 구조 및 설계
주요 기능 요약:
PC IP 주소와 포트 설정:

프로그램은 PC의 IP 주소를 표시하고, 사용자가 지정한 포트(20000~65000)를 사용하여 소켓 서버를 실행합니다.
설정된 포트 정보는 QR 코드로 생성되어 표시되며, 이를 통해 외부 클라이언트가 연결할 수 있습니다.
스캐너 포트와 최대 5개의 타겟 포트 설정:

스캐너 포트 및 각 타겟 포트에 대해 보드레이트, 패리티, 데이터 비트, 스톱 비트를 설정할 수 있습니다.
설정된 값은 저장되며, 프로그램 재실행 시 불러와 적용됩니다.
데이터 중계 기능:

소켓 서버가 클라이언트로부터 데이터를 수신하면, 해당 데이터를 특정 포트로 중계합니다.
스캐너 포트에서 수신된 데이터도 동일하게 설정된 타겟 포트로 중계됩니다.
에러 처리 및 UI 갱신:

모든 주요 동작에는 예외 처리(try-catch)가 적용되어 프로그램이 중단되지 않도록 합니다.
UI 갱신은 Dispatcher.Invoke 또는 Delegate를 사용하여 스레드 안전하게 처리합니다.
2. MainWindow.xaml
메인 윈도우는 PC IP 주소, 포트 설정, 스캐너 및 타겟 포트 설정을 위한 UI를 포함합니다. UserControl을 사용하여 타겟 포트 설정 UI를 재사용할 수 있도록 설계했습니다.

xml
코드 복사
<Window x:Class="ScanValueTrans.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ScanValueTrans"
        Title="ScanValueTrans" Height="650" Width="1020">
    <Grid>
        <!-- IP 주소 및 포트 설정 -->
        <TextBlock Text="IP Address:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <TextBlock Name="IpAddressTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="100,10,0,0" FontWeight="Bold"/>

        <TextBlock Text="Port:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="250,10,0,0"/>
        <ComboBox Name="PortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="300,10,0,0" SelectionChanged="PortComboBox_SelectionChanged"/>
        
        <!-- QR 코드 표시 -->
        <Image Name="QrCodeImage" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="200" Margin="420,10,0,0"/>

        <!-- 스캐너 포트 설정 -->
        <TextBlock Text="스캐너 포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,230,0,0"/>
        <ComboBox Name="ScannerPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="100,230,0,0" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="260,230,0,0" Click="ClearScannerPortSelection_Click" Tag="{Binding ElementName=ScannerPortComboBox}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="300,230,0,0"/>
        <ComboBox Name="ScannerBaudRateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="400,230,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="510,230,0,0"/>
        <ComboBox Name="ScannerParityComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,230,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,230,0,0"/>
        <ComboBox Name="ScannerDataBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,230,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,230,0,0"/>
        <ComboBox Name="ScannerStopBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,230,0,0"/>

        <!-- 보낼 포트 설정 탭 -->
        <TabControl HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="220" Margin="10,270,0,0">
            <!-- 첫 번째 포트 탭 -->
            <TabItem Header="Target Port 1">
                <local:PortConfigControl x:Name="TargetPortConfig1"/>
            </TabItem>
            <!-- 두 번째 포트 탭 -->
            <TabItem Header="Target Port 2">
                <local:PortConfigControl x:Name="TargetPortConfig2"/>
            </TabItem>
            <!-- 세 번째 포트 탭 -->
            <TabItem Header="Target Port 3">
                <local:PortConfigControl x:Name="TargetPortConfig3"/>
            </TabItem>
            <!-- 네 번째 포트 탭 -->
            <TabItem Header="Target Port 4">
                <local:PortConfigControl x:Name="TargetPortConfig4"/>
            </TabItem>
            <!-- 다섯 번째 포트 탭 -->
            <TabItem Header="Target Port 5">
                <local:PortConfigControl x:Name="TargetPortConfig5"/>
            </TabItem>
        </TabControl>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="120" Margin="10,500,0,0"/>
    </Grid>
</Window>
3. MainWindow.xaml.cs
메인 윈도우의 코드-비하인드는 UI 이벤트를 처리하고, 소켓 서버 및 시리얼 포트를 관리합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;
using ZXing;
using System.IO.Ports;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                // 설정 관리 클래스 초기화
                settingsManager = SettingsManager.Instance;

                // IP 주소 가져오기 및 표시
                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                // 포트 선택 콤보박스 초기화
                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                // 포트 및 설정 불러오기
                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                // 스캐너 및 타겟 포트 설정 초기화
                InitializePortSettings();
                LoadLastUsedPorts();

                // 소켓 서버 초기화
                serialPortManager = new SerialPortManager();
                socketServer = SocketServer.Instance;
                socketServer.DataReceived += OnSocketDataReceived;

                // QR 코드 생성
                GenerateQRCode(ipAddress, PortComboBox.SelectedItem.ToString());
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (PortComboBox.SelectedItem != null)
                {
                    string selectedPort = PortComboBox.SelectedItem.ToString();
                    settingsManager.SaveSetting("Port", selectedPort);
                    socketServer.Start(int.Parse(selectedPort));

                    // QR 코드 업데이트
                    string ipAddress = GetLocalIPAddress();
                    GenerateQRCode(ipAddress, selectedPort);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                string qrContent = $"{ipAddress}:{port}";
                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                // QR 코드를 이미지로 표시
                QrCodeImage.Source = qrCodeImage;
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                // 스캐너 포트 설정 로드
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }
                else
                {
                    LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }

                // 각 보낼 포트에 대해 설정 로드 및 연결
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }
    }
}
4. PortConfigControl.xaml (UserControl)
이 UserControl은 각 타겟 포트의 설정 UI를 제공합니다.

xml
코드 복사
<UserControl x:Class="ScanValueTrans.PortConfigControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             Height="100" Width="900">
    <Grid>
        <!-- 포트 설정 -->
        <TextBlock Text="포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <ComboBox Name="TargetPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="50,10,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="210,10,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="250,10,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="320,10,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="430,10,0,0"/>
        <ComboBox Name="TargetParityComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="490,10,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="600,10,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="670,10,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="780,10,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="850,10,0,0"/>
    </Grid>
</UserControl>
5. PortConfigControl.xaml.cs
이 UserControl의 코드-비하인드에서는 각 포트의 설정을 관리하고, 필요한 경우 MainWindow에 이벤트를 전달합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;

namespace ScanValueTrans
{
    public partial class PortConfigControl : UserControl
    {
        public SerialPort TargetPort { get; private set; }

        public PortConfigControl()
        {
            InitializeComponent();
            InitializePortSettings();
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(TargetBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(TargetParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(TargetDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(TargetStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        public void LoadPortSettings(int portIndex)
        {
            try
            {
                SettingsManager settingsManager = SettingsManager.Instance;

                string lastUsedPort = settingsManager.GetSetting($"LastUsedTargetPort{portIndex}");
                string baudRate = settingsManager.GetSetting($"TargetBaudRate{portIndex}");
                string parity = settingsManager.GetSetting($"TargetParity{portIndex}");
                string dataBits = settingsManager.GetSetting($"TargetDataBits{portIndex}");
                string stopBits = settingsManager.GetSetting($"TargetStopBits{portIndex}");

                if (!string.IsNullOrEmpty(lastUsedPort) && SerialPort.GetPortNames().Contains(lastUsedPort))
                {
                    TargetPortComboBox.SelectedItem = lastUsedPort;
                    TargetBaudRateComboBox.SelectedItem = baudRate;
                    TargetParityComboBox.SelectedItem = parity;
                    TargetDataBitsComboBox.SelectedItem = dataBits;
                    TargetStopBitsComboBox.SelectedItem = stopBits;

                    OpenTargetPort(lastUsedPort, baudRate, parity, dataBits, stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenTargetPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (TargetPort != null && TargetPort.IsOpen)
                {
                    TargetPort.Close();
                }

                TargetPort = new SerialPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                TargetPort.Open();
                LogMessage($"타겟 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (TargetPortComboBox.SelectedItem != null)
                {
                    string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                    OpenTargetPort(selectedPort, TargetBaudRateComboBox.SelectedItem.ToString(), TargetParityComboBox.SelectedItem.ToString(), TargetDataBitsComboBox.SelectedItem.ToString(), TargetStopBitsComboBox.SelectedItem.ToString());
                    SavePortSettings();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 변경 중 오류 발생: {ex.Message}");
            }
        }

        private void SavePortSettings()
        {
            try
            {
                SettingsManager settingsManager = SettingsManager.Instance;
                int portIndex = GetPortIndex();

                settingsManager.SaveSetting($"LastUsedTargetPort{portIndex}", TargetPortComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetBaudRate{portIndex}", TargetBaudRateComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetParity{portIndex}", TargetParityComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetDataBits{portIndex}", TargetDataBitsComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetStopBits{portIndex}", TargetStopBitsComboBox.SelectedItem.ToString());
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 저장 중 오류 발생: {ex.Message}");
            }
        }

        private int GetPortIndex()
        {
            string controlName = Name.Replace("TargetPortConfig", "");
            return int.Parse(controlName);
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TargetPortComboBox.SelectedItem = null;
                if (TargetPort != null && TargetPort.IsOpen)
                {
                    TargetPort.Close();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            // MainWindow의 LogListBox에 로그 메시지를 추가
            Application.Current.Dispatcher.Invoke(() =>
            {
                var mainWindow = Application.Current.MainWindow as MainWindow;
                mainWindow?.LogMessage(message);
            });
        }
    }
}
6. SerialPortManager.cs
시리얼 포트를 관리하고 데이터를 전송하는 클래스입니다.

csharp
코드 복사
using System;
using System.IO.Ports;

namespace ScanValueTrans
{
    public class SerialPortManager
    {
        public SerialPort ScannerPort { get; private set; }

        public SerialPortManager()
        {
        }

        public void OpenScannerPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            try
            {
                if (ScannerPort != null && ScannerPort.IsOpen)
                {
                    ScannerPort.Close();
                }

                ScannerPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
                ScannerPort.DataReceived += OnScannerDataReceived;
                ScannerPort.Open();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 열기 중 오류 발생: {ex.Message}");
            }
        }

        public void CloseScannerPort()
        {
            try
            {
                if (ScannerPort != null && ScannerPort.IsOpen)
                {
                    ScannerPort.Close();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 닫기 중 오류 발생: {ex.Message}");
            }
        }

        private void OnScannerDataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string data = ScannerPort.ReadExisting();
                SendData(data);
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 데이터 수신 중 오류 발생: {ex.Message}");
            }
        }

        public void SendData(string data)
        {
            try
            {
                string[] splitData = data.Split('^');
                if (splitData.Length > 1)
                {
                    string keyword = splitData[0];
                    string message = splitData[1];

                    foreach (var targetControl in Application.Current.Windows[0].FindName("TargetPortConfig1") as PortConfigControl[])
                    {
                        if (targetControl != null && targetControl.TargetPort != null && targetControl.TargetPort.IsOpen)
                        {
                            targetControl.TargetPort.WriteLine(message);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"데이터 전송 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                var mainWindow = Application.Current.MainWindow as MainWindow;
                mainWindow?.LogMessage(message);
            });
        }
    }
}
7. SocketServer.cs
소켓 서버를 관리하고 데이터를 수신할 때 이벤트를 발생시킵니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace ScanValueTrans
{
    public class SocketDataReceivedEventArgs : EventArgs
    {
        public string Data { get; set; }
    }

    public class SocketServer
    {
        private static SocketServer instance;
        private TcpListener tcpListener;

        public event EventHandler<SocketDataReceivedEventArgs> DataReceived;

        private SocketServer() { }

        public static SocketServer Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new SocketServer();
                }
                return instance;
            }
        }

        public void Start(int port)
        {
            try
            {
                tcpListener = new TcpListener(IPAddress.Any, port);
                tcpListener.Start();
                tcpListener.BeginAcceptTcpClient(AcceptClientCallback, null);
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 서버 시작 중 오류 발생: {ex.Message}");
            }
        }

        private void AcceptClientCallback(IAsyncResult ar)
        {
            try
            {
                TcpClient client = tcpListener.EndAcceptTcpClient(ar);
                NetworkStream stream = client.GetStream();

                byte[] buffer = new byte[1024];
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                string data = Encoding.ASCII.GetString(buffer, 0, bytesRead);

                OnDataReceived(data);

                client.Close();
                tcpListener.BeginAcceptTcpClient(AcceptClientCallback, null);
            }
            catch (Exception ex)
            {
                LogMessage($"클라이언트 연결 중 오류 발생: {ex.Message}");
            }
        }

        protected virtual void OnDataReceived(string data)
        {
            try
            {
                DataReceived?.Invoke(this, new SocketDataReceivedEventArgs { Data = data });
            }
            catch (Exception ex)
            {
                LogMessage($"데이터 수신 이벤트 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                var mainWindow = Application.Current.MainWindow as MainWindow;
                mainWindow?.LogMessage(message);
            });
        }
    }
}
8. QRCodeGenerator.cs
QR 코드를 생성하는 클래스입니다.

csharp
코드 복사
using System;
using System.Windows.Media.Imaging;
using ZXing;

namespace ScanValueTrans
{
    public class QRCodeGenerator
    {
        public BitmapImage GenerateQRCode(string content)
        {
            try
            {
                BarcodeWriter writer = new BarcodeWriter
                {
                    Format = BarcodeFormat.QR_CODE,
                    Options = new ZXing.Common.EncodingOptions
                    {
                        Width = 200,
                        Height = 200
                    }
                };

                var bitmap = writer.Write(content);
                return BitmapToImageSource(bitmap);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private BitmapImage BitmapToImageSource(System.Drawing.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Bmp);
                memory.Position = 0;
                BitmapImage bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = memory;
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapImage.EndInit();
                return bitmapImage;
            }
        }
    }
}
9. SettingsManager.cs
설정을 관리하는 클래스입니다.

csharp
코드 복사
using System.Configuration;

namespace ScanValueTrans
{
    public class SettingsManager
    {
        private static SettingsManager instance;
        private Configuration config;

        private SettingsManager()
        {
            config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
        }

        public static SettingsManager Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new SettingsManager();
                }
                return instance;
            }
        }

        public string GetSetting(string key)
        {
            if (config.AppSettings.Settings[key] != null)
            {
                return config.AppSettings.Settings[key].Value;
            }
            return null;
        }

        public void SaveSetting(string key, string value)
        {
            if (config.AppSettings.Settings[key] == null)
            {
                config.AppSettings.Settings.Add(key, value);
            }
            else
            {
                config.AppSettings.Settings[key].Value = value;
            }
            config.Save(ConfigurationSaveMode.Modified);
        }
    }
}
요약
위 코드는 스캐너 포트와 최대 5개의 타겟 포트를 설정하여 데이터를 중계하고, 소켓 서버와 QR 코드를 통해 클라이언트 연결 정보를 제공합니다. 모든 에러 처리와 UI 갱신은 스레드 안전하게 처리되며, 설정 값은 프로그램 종료 후에도 저장됩니다.

각 클래스와 메소드에는 상세한 주석이 포함되어 있어, 코드의 동작을 쉽게 이해하고 유지 관리할 수 있습니다. 필요한 경우 추가적으로 수정하거나 기능을 확장할 수 있습니다.

추가적인 질문이 있거나 더 많은 도움이 필요하다면 언제든지 말씀해 