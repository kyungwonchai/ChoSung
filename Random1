이전에 제공한 코드에서 라인별 최근 100개의 데이터를 기반으로 **박스플롯(Box Plot)**을 생성하는 방법을 구현하였습니다. 그러나 박스플롯이 제대로 표시되지 않는 문제가 있었습니다. 이를 해결하기 위해 **DevExpress의 BoxPlotSeries2D**를 활용하여 각 라인별로 최근 100개의 데이터에 대한 최소값(Min), 최대값(Max), 제1사분위수(Q1), 제3사분위수(Q3), **중앙값(Median)**을 계산하여 박스플롯을 그리는 방법을 적용하겠습니다.

수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadDataFromDatabase();

            // 상단 라인별 박스플롯 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, data, "Timestamp", "Values", "L");

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, data, "Timestamp", "Values", "R");
        }

        private List<DataPoint> LoadDataFromDatabase()
        {
            var result = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }

            return result;
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            var lineGroups = data.GroupBy(d => d.ModelName);

            foreach (var group in lineGroups)
            {
                // 최근 100개의 데이터 선택
                var recentData = group.OrderByDescending(d => d.Timestamp).Take(100).ToList();

                // MP1~MP5에 대한 박스플롯 데이터 생성
                for (int i = 1; i <= 5; i++)
                {
                    var mpValues = recentData.Select(d => d.GetType().GetProperty($"MP{i}").GetValue(d, null)).Cast<double>().ToList();
                    if (mpValues.Count > 0)
                    {
                        var series = new BoxPlotSeries2D
                        {
                            DisplayName = $"{group.Key} - MP{i}",
                            ArgumentDataMember = "Argument",
                            MinValueDataMember = "Min",
                            Quartile1ValueDataMember = "Quartile1",
                            MedianValueDataMember = "Median",
                            Quartile3ValueDataMember = "Quartile3",
                            MaxValueDataMember = "Max",
                            DataSource = new List<BoxPlotData>
                            {
                                new BoxPlotData
                                {
                                    Argument = $"{group.Key} - MP{i}",
                                    Min = mpValues.Min(),
                                    Quartile1 = GetPercentile(mpValues, 25),
                                    Median = GetPercentile(mpValues, 50),
                                    Quartile3 = GetPercentile(mpValues, 75),
                                    Max = mpValues.Max()
                                }
                            }
                        };
                        ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
                    }
                }
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)LineChart.Diagram, "Model - Measurement Point", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle, string modelSuffix)
        {
            var filteredData = data.Where(d => d.ModelName.EndsWith(modelSuffix)).ToList();

            for (int i = 1; i <= 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"MP{i}",
                    DataSource = filteredData,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i}",
                    Tag = $"MP{i}", // Tag를 사용하여 시리즈 식별
                    CheckedInLegend = true // 초기 상태에서 시리즈를 표시
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = Visibility.Visible };
        }

        private double GetPercentile(List<double> sortedData, double percentile)
        {
            if (sortedData.Count == 0)
                return double.NaN;

            sortedData.Sort();
            double realIndex = percentile / 100.0 * (sortedData.Count - 1);
            int index = (int)realIndex;
            double frac = realIndex - index;

            if (index + 1 < sortedData.Count)
                return sortedData[index] * (1 - frac) + sortedData[index + 1] * frac;
            else
                return sortedData[index];
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class BoxPlotData
    {
        public string Argument { get; set; }
        public double Min { get; set; }
        public double Quartile1 { get; set; }
        public double Median { get; set; }
        public double Quartile3 { get; set; }
        public double Max { get; set; }
    }
}