알겠습니다. 기존의 코드 구조를 유지하면서 새로운 요구 사항을 반영한 업데이트된 MainWindow.xaml.cs와 MainViewModel.cs 파일의 전체 코드를 제공하겠습니다. 이 코드는 기존 기능을 유지하면서, 서비스가 설치되지 않았을 때 자동으로 설치하고, 필요에 따라 업데이트 및 로그 수신 기능을 포함하고 있습니다.

1. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Pipes;
using System.Threading.Tasks;
using System.Windows;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private NamedPipeClientStream _pipeClient;
        private StreamReader _pipeReader;

        public MainWindow()
        {
            InitializeComponent(); // XAML에 정의된 UI 요소 초기화
            _viewModel = new MainViewModel(); // MainViewModel 인스턴스 생성
            DataContext = _viewModel; // 데이터 바인딩을 위해 DataContext 설정

            StartListeningToLogs(); // 로그 수신을 시작
            _viewModel.StartServiceOnLoad(); // UI 로드 시 서비스 설치 및 시작
        }

        // Named Pipe를 통해 서비스로부터 로그를 수신하는 메서드
        private void StartListeningToLogs()
        {
            Task.Run(() =>
            {
                try
                {
                    // Named Pipe 클라이언트를 생성하고 연결
                    _pipeClient = new NamedPipeClientStream(".", "RouterMiddleACRLogPipe", PipeDirection.In);
                    _pipeClient.Connect();

                    _pipeReader = new StreamReader(_pipeClient);

                    // 로그 메시지를 지속적으로 읽어와서 UI에 표시
                    while (true)
                    {
                        var message = _pipeReader.ReadLine();
                        if (message != null)
                        {
                            Dispatcher.Invoke(() => _viewModel.LogMessages.Add(message));
                        }
                    }
                }
                catch (Exception ex)
                {
                    Dispatcher.Invoke(() => _viewModel.LogMessages.Add($"ERROR: {ex.Message}"));
                }
            });
        }

        // Start 버튼 클릭 시 호출되는 메서드
        private void StartService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StartService();
        }

        // Stop 버튼 클릭 시 호출되는 메서드
        private void StopService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StopService();
        }

        // Refresh 버튼 클릭 시 호출되는 메서드
        private void RefreshStatus_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshServiceStatus();
        }

        // Update 버튼 클릭 시 호출되는 메서드
        private void UpdateService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.UpdateService();
        }

        // 시스템 상태 확인 버튼 클릭 시 호출되는 메서드
        private void CheckHealth_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.CheckSystemHealth();
        }

        // 데이터 백업 버튼 클릭 시 호출되는 메서드
        private void BackupData_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.BackupData();
        }

        // 로그 내보내기 버튼 클릭 시 호출되는 메서드
        private void ExportLogs_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.ExportLogs();
        }
    }
}
2. MainViewModel.cs
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ServiceControllerHelper _serviceControllerHelper; // 서비스 제어 헬퍼 인스턴스
        private AdditionalFunctions _additionalFunctions; // 추가 기능 헬퍼 인스턴스
        private string _serviceStatus; // 서비스 상태를 저장하는 필드

        // UI에 실시간으로 업데이트 되는 로그 메시지 리스트
        public ObservableCollection<string> LogMessages { get; } = new ObservableCollection<string>();

        // 서비스 상태를 바인딩할 속성
        public string ServiceStatus
        {
            get => _serviceStatus; // 현재 서비스 상태를 반환
            set
            {
                _serviceStatus = value; // 서비스 상태를 설정
                OnPropertyChanged(nameof(ServiceStatus)); // UI에 상태 변화 알림
            }
        }

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper(); // 서비스 컨트롤 헬퍼 클래스 초기화
            _additionalFunctions = new AdditionalFunctions(); // 추가 기능 헬퍼 클래스 초기화
            RefreshServiceStatus(); // 서비스 상태 초기화
        }

        // 애플리케이션 로드 시 서비스 설치 및 시작 메서드
        public void StartServiceOnLoad()
        {
            if (_serviceControllerHelper.GetServiceStatus() == "서비스가 설치되어 있지 않습니다.")
            {
                _serviceControllerHelper.InstallService(); // 서비스가 설치되어 있지 않다면 설치
            }
            _serviceControllerHelper.StartService(); // 서비스를 시작
        }

        // 서비스를 시작하는 메서드
        public void StartService()
        {
            _serviceControllerHelper.StartService(); // 서비스 시작
            RefreshServiceStatus(); // 서비스 상태 갱신
        }

        // 서비스를 중지하는 메서드
        public void StopService()
        {
            _serviceControllerHelper.StopService(); // 서비스 중지
            RefreshServiceStatus(); // 서비스 상태 갱신
        }

        // 서비스 상태를 갱신하는 메서드
        public void RefreshServiceStatus()
        {
            ServiceStatus = _serviceControllerHelper.GetServiceStatus(); // 현재 서비스 상태를 가져와서 설정
        }

        // 서비스를 업데이트하는 메서드
        public void UpdateService()
        {
            _serviceControllerHelper.UpdateService(); // 서비스 업데이트
            RefreshServiceStatus(); // 서비스 상태 갱신
        }

        // 시스템 상태를 확인하는 메서드
        public void CheckSystemHealth()
        {
            LogMessages.Add("Checking system health..."); // 상태 확인 로그 추가
            var healthStatus = _additionalFunctions.CheckSystemHealth(); // 시스템 상태 확인
            LogMessages.Add(healthStatus ? "System is healthy." : "System has some issues."); // 상태 결과 로그 추가
        }

        // 데이터를 백업하는 메서드
        public void BackupData()
        {
            LogMessages.Add("Backing up data..."); // 데이터 백업 시작 로그 추가
            _additionalFunctions.BackupData(); // 데이터 백업 실행
            LogMessages.Add("Data backup completed."); // 데이터 백업 완료 로그 추가
        }

        // 로그를 내보내는 메서드
        public void ExportLogs()
        {
            LogMessages.Add("Exporting logs..."); // 로그 내보내기 시작 로그 추가
            _additionalFunctions.ExportLogs(); // 로그 내보내기 실행
            LogMessages.Add("Logs exported successfully."); // 로그 내보내기 완료 로그 추가
        }

        // INotifyPropertyChanged 인터페이스 구현: UI에 속성 변화 알림
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName)); // 속성 변화 알림 이벤트 발생
        }
    }
}
주요 업데이트 및 설명
Named Pipe를 통한 로그 수신:

StartListeningToLogs() 메서드를 사용하여, 서비스에서 보내는 로그를 실시간으로 수신하여 LogMessages에 추가합니다.
이는 UI에 실시간으로 로그를 표시하기 위한 기능입니다.
서비스 설치 및 시작 로직:

StartServiceOnLoad() 메서드를 통해 애플리케이션이 로드될 때 서비스가 설치되어 있지 않다면 설치하고, 서비스를 시작합니다.
이 메서드는 MainWindow 생성자에서 호출됩니다.
서비스 제어 기능:

StartService(), StopService(), UpdateService(), RefreshServiceStatus() 메서드를 사용하여 서비스를 제어하고 상태를 업데이트합니다.
각 메서드는 서비스의 현재 상태를 확인하거나 변경하며, UI에 실시간으로 반영됩니다.
추가 기능:

CheckSystemHealth(), BackupData(), ExportLogs() 메서드를 통해 시스템 상태 확인, 데이터 백업, 로그 내보내기와 같은 추가 기능을 제공합니다.
이러한 메서드는 각 기능의 결과를 LogMessages 컬렉션에 추가하여 UI에 표시합니다.
위 코드는 기존의 기능을 유지하면서도 새로운 요구 사항을 반영하여, UI에서 Windows 서비스의 설치, 제어 및 로그 수신을 포함한 다양한 기능을 통합할 수 있도록 수정된 전체 코드입니다