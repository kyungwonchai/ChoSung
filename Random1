녕하세요! VBA의 클래스 개념과, 특히 메서드 체이닝(점을 찍어 연달아 호출하는 방식)에 대해 쉽고 자세하게 설명해 드릴게요. 초보자분들도 이해하기 쉽게 비유를 들어 설명하고, 실전 예제 코드도 함께 제공해 드리겠습니다.

1. VBA 클래스란 무엇일까요? (feat. 붕어빵 틀 비유)

VBA 클래스는 **객체(Object)를 만들기 위한 설계도 또는 틀(Template)**이라고 생각하시면 이해하기 쉬워요.

비유: 우리가 붕어빵을 만든다고 생각해 보세요.
클래스 (Class): 붕어빵을 찍어내는 '붕어빵 틀'입니다. 이 틀에는 붕어 모양, 크기, 팥을 넣는 공간 등이 정해져 있죠. 즉, 앞으로 만들어질 붕어빵의 **속성(모양, 크기, 속재료 종류 등)**과 **기능(만들어진다, 먹힌다 등)**을 정의하는 설계도입니다.
객체 (Object) / 인스턴스 (Instance): '붕어빵 틀'로 실제로 찍어낸 '붕어빵' 하나하나를 객체 또는 인스턴스라고 부릅니다. 각 붕어빵은 같은 틀에서 나왔지만, 팥 대신 슈크림을 넣거나, 조금 더 구워지거나 하는 개별적인 특징을 가질 수 있습니다.
속성 (Property): 객체가 가지는 데이터나 상태입니다. 붕어빵의 '속재료'(팥, 슈크림), '굽기 정도'(바삭, 촉촉) 등이 속성이 될 수 있습니다. VBA에서는 Property Get, Property Let, Property Set으로 정의합니다.
메서드 (Method): 객체가 수행할 수 있는 동작이나 기능입니다. 붕어빵을 '굽는다', '포장한다', '가격을 계산한다' 등이 메서드가 될 수 있습니다. VBA에서는 Sub 또는 Function으로 정의합니다.
왜 클래스를 사용할까요?

코드의 재사용성: 붕어빵 틀 하나로 여러 붕어빵을 만들 수 있듯이, 클래스 하나로 여러 객체를 만들어 사용할 수 있습니다.
코드의 구조화: 관련된 데이터(속성)와 기능(메서드)을 하나의 클래스로 묶어 관리하므로 코드가 훨씬 깔끔하고 이해하기 쉬워집니다. 예를 들어 '고객' 클래스를 만들면 고객의 이름, 연락처(속성)와 주문하기, 정보 수정하기(메서드)를 한 곳에서 관리할 수 있습니다.
유지보수 용이: 특정 기능 수정이 필요할 때 해당 클래스만 수정하면 되므로 유지보수가 편리합니다.
2. "점을 찍고 리턴받은 것에서 점을 찍어 나가는" 디자인 패턴 (메서드 체이닝 / Fluent Interface)

이것은 메서드 체이닝(Method Chaining) 또는 **플루언트 인터페이스(Fluent Interface)**라고 불리는 기법입니다. 코드를 마치 자연스러운 문장처럼 읽기 쉽게 만들어 줍니다.

핵심 원리: 클래스의 메서드(함수)가 **자기 자신(객체)**을 반환(Return Me)하도록 만드는 것입니다.

비유: 레고 블록 조립을 생각해 보세요.

파란색 블록(Block)에 빨간색 블록을 붙이는 동작(.Attach("Red"))을 했다고 가정해 봅시다.
만약 .Attach("Red") 동작 후에 결합된 블록 덩어리 자체를 다시 돌려준다면, 우리는 그 결과물에 바로 이어서 노란색 블록을 붙이는 동작(.Attach("Yellow"))을 할 수 있습니다.
Block.Attach("Red").Attach("Yellow").Attach("Green") 이런 식으로 마치 블록을 계속 이어 붙이듯이 메서드를 연결해서 호출할 수 있는 것입니다.
동작 방식:

객체를 생성합니다 (Dim myObj As New clsMyClass).
첫 번째 메서드를 호출합니다 (myObj.DoSomething("A")).
이 메서드(DoSomething)는 내부적으로 어떤 작업을 수행한 후, 자기 자신 객체(Me)를 반환합니다.
반환된 객체에 대해 다시 점(.)을 찍고 다음 메서드를 호출합니다 (... .DoAnotherThing("B")).
이 메서드(DoAnotherThing)도 작업을 수행하고 자기 자신 객체(Me)를 반환합니다.
이 과정을 필요한 만큼 반복합니다.
장점:

코드가 간결해지고 가독성이 높아집니다. 여러 줄에 걸쳐 객체의 상태를 설정하거나 작업을 수행하는 대신, 한 줄로 표현할 수 있습니다.
마치 문장을 읽는 것처럼 자연스럽게 코드의 흐름을 이해할 수 있습니다.
3. 클래스 모듈은 언제 사용할까요?

클래스 모듈은 다음과 같은 경우에 유용하게 사용됩니다.

현실 세계의 개념이나 사물을 모델링할 때: 예를 들어, '고객', '상품', '주문', '송장', '직원' 등 명확한 속성과 기능을 가진 대상을 코드로 표현하고 싶을 때 사용합니다.
복잡한 데이터 구조를 만들 때: 여러 관련 데이터를 하나로 묶고, 이 데이터에 대한 특정 작업을 정의하여 사용자 정의 '타입'을 만들고 싶을 때 사용합니다. (예: Vector3D 클래스에 x, y, z 좌표와 거리 계산 메서드를 넣는 등)
코드의 재사용성을 높이고 싶을 때: 특정 로직이나 데이터 구조를 여러 곳에서 반복적으로 사용해야 할 경우, 클래스로 만들어두면 필요할 때마다 객체를 생성하여 쉽게 사용할 수 있습니다.
캡슐화(Encapsulation)가 필요할 때: 객체의 내부 데이터(변수)는 숨기고, 정의된 메서드(Property, Sub, Function)를 통해서만 접근하도록 하여 코드의 안정성을 높이고 싶을 때 사용합니다. (예: 잔액 속성은 음수가 될 수 없도록 Property Let에서 유효성 검사를 추가)
메서드 체이닝(Fluent Interface) 같은 디자인 패턴을 구현하고 싶을 때: 위에서 설명한 것처럼 코드를 더 읽기 쉽게 만들고 싶을 때 클래스를 활용합니다.
4. 실전 사용 예제 코드 (메서드 체이닝 포함)

간단한 '메시지 빌더' 클래스를 만들어 메서드 체이닝을 구현해 보겠습니다. 이 클래스는 제목, 내용, 수신자를 설정하고 최종 메시지를 보여주는 기능을 가집니다.

1단계: 클래스 모듈 생성

VBA 편집기(Alt + F11)에서 삽입(Insert) -> 클래스 모듈(Class Module)을 선택합니다.
속성 창(F4)에서 클래스 모듈의 Name을 clsMessageBuilder로 변경합니다.
clsMessageBuilder 클래스 모듈에 다음 코드를 입력합니다.
VBA

' --- clsMessageBuilder 클래스 모듈 ---

Option Explicit

' 비공개 멤버 변수 (클래스 내부에서만 사용)
Private m_Title As String
Private m_Body As String
Private m_Recipient As String

' --- 속성 설정 메서드 (자기 자신을 반환하여 체이닝 가능하게 함) ---

' 제목 설정 메서드
Public Function SetTitle(ByVal title As String) As clsMessageBuilder
    m_Title = title
    Set SetTitle = Me ' 자기 자신 객체를 반환
End Function

' 내용 추가 메서드
Public Function AddBody(ByVal bodyText As String) As clsMessageBuilder
    If m_Body <> "" Then
        m_Body = m_Body & vbCrLf & bodyText ' 기존 내용이 있으면 줄바꿈 후 추가
    Else
        m_Body = bodyText
    End If
    Set AddBody = Me ' 자기 자신 객체를 반환
End Function

' 수신자 설정 메서드
Public Function SetRecipient(ByVal recipient As String) As clsMessageBuilder
    m_Recipient = recipient
    Set SetRecipient = Me ' 자기 자신 객체를 반환
End Function

' --- 최종 동작 메서드 ---

' 메시지 박스로 결과 표시 메서드
Public Sub ShowMessage()
    Dim fullMessage As String
    
    fullMessage = "제목: " & m_Title & vbCrLf & _
                  "수신자: " & m_Recipient & vbCrLf & _
                  "--------------------" & vbCrLf & _
                  m_Body
                  
    MsgBox fullMessage, vbInformation, "메시지 확인"
End Sub

' (선택 사항) 클래스 초기화 시 변수 초기화
Private Sub Class_Initialize()
    m_Title = "제목 없음"
    m_Body = ""
    m_Recipient = "수신자 없음"
End Sub
2단계: 표준 모듈에서 클래스 사용

VBA 편집기에서 삽입(Insert) -> 모듈(Module)을 선택합니다. (기존 모듈이 있다면 사용해도 됩니다)
생성된 모듈(예: Module1)에 다음 코드를 입력합니다.
VBA

' --- 표준 모듈 (예: Module1) ---

Option Explicit

Sub TestMessageBuilder()
    ' 1. clsMessageBuilder 클래스의 객체(인스턴스) 생성
    Dim myMessage As clsMessageBuilder
    Set myMessage = New clsMessageBuilder ' New 키워드로 새 객체 만듦 (붕어빵 찍어내기!)
    
    ' 2. 메서드 체이닝을 사용하여 메시지 구성 및 표시
    myMessage.SetRecipient("홍길동") _
             .SetTitle("VBA 클래스 강의") _
             .AddBody("클래스는 객체를 만드는 설계도입니다.") _
             .AddBody("메서드 체이닝을 사용하면 코드가 간결해집니다.") _
             .ShowMessage ' 최종적으로 메시지 표시
             
    ' 3. 객체 메모리 해제 (더 이상 사용하지 않을 때)
    Set myMessage = Nothing

    ' 다른 메시지 객체를 만들어 사용 가능
    Dim reportMessage As New clsMessageBuilder ' 바로 New 사용도 가능
    
    reportMessage.SetTitle("월간 보고서 알림") _
                 .SetRecipient("팀 전체") _
                 .AddBody("월간 보고서 제출 기한이 내일까지입니다.") _
                 .ShowMessage
                 
    Set reportMessage = Nothing
    
End Sub
코드 설명:

clsMessageBuilder는 메시지를 만들기 위한 **설계도(클래스)**입니다.
SetTitle, AddBody, SetRecipient 메서드는 각각 제목, 내용, 수신자를 설정하는 **기능(메서드)**입니다. 이 메서드들은 As clsMessageBuilder로 선언되고 마지막에 Set ... = Me를 통해 자기 자신 객체를 반환합니다. 이것이 메서드 체이닝의 핵심입니다.
ShowMessage 메서드는 설정된 정보들을 바탕으로 최종 메시지를 보여주는 **기능(메서드)**입니다. 이 메서드는 더 이상 체이닝할 필요가 없으므로 Sub로 선언되었고 아무것도 반환하지 않습니다.
표준 모듈의 TestMessageBuilder 서브루틴에서는 New clsMessageBuilder를 통해 실제 **메시지 객체(붕어빵)**를 만듭니다.
myMessage.SetRecipient(...).SetTitle(...).AddBody(...).ShowMessage 처럼 점을 찍어 메서드를 연속적으로 호출하는 것이 메서드 체이닝입니다. 각 설정 메서드가 객체 자신을 반환하기 때문에 다음 메서드를 바로 이어서 호출할 수 있습니다.