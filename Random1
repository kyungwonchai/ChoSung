dxg:GridControl Name="taskGrid" ItemsSource="{Binding Tasks}" AutoGenerateColumns="False">
    <dxg:GridControl.View>
        <dxg:TableView AllowPerPixelScrolling="True" />
    </dxg:GridControl.View>
    <dxg:GridControl.Columns>
        <!-- 폴더 열기 버튼 컬럼 추가 -->
        <dxg:GridColumn Header="폴더 열기">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <!-- Command 대신 Click 이벤트 사용 -->
                    <Button Content="폴더 열기" Click="OpenFolderButton_Click" />
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>
MainWindow.xaml.cs - OpenFolderButton_Click 구현
**OpenFolderButton_Click**에서 해당 행의 FolderPath를 직접 가져와 ViewModel의 OpenFolderCommand를 호출하여 폴더를 엽니다.

csharp
코드 복사
using System.Windows;
using SwiftAIMaster.ViewModels;

namespace SwiftAIMaster.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => (MainViewModel)DataContext;

        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }

        private void OpenFolderButton_Click(object sender, RoutedEventArgs e)
        {
            // 버튼이 속한 행의 DataContext를 TaskModel로 가져옴
            var task = (sender as FrameworkElement)?.DataContext as TaskModel;
            if (task != null && !string.IsNullOrEmpty(task.FolderPath))
            {
                // ViewModel의 OpenFolderCommand를 호출하여 폴더 열기
                ViewModel.OpenFolderCommand.Execute(task.FolderPath);
            }
            else
            {
                MessageBox.Show("폴더 경로가 유효하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
요약
Button의 Click 이벤트 사용