가능합니다. PM2 데몬 전체가 아닌, 특정 PM2 서비스(애플리케이션)가 온라인 상태인지 확인하도록 와치독을 설정할 수 있습니다. 이것은 PM2 데몬은 살아있지만 특정 애플리케이션만 죽었을 때를 감지하는 더 정교한 방법입니다.

특정 PM2 서비스 감지 스크립트
PM2는 pm2 describe <앱이름> 명령어를 통해 특정 애플리케이션의 상세 상태를 확인할 수 있습니다. 이 스크립트는 이 명령어를 사용해 'status: online' 문자열이 있는지 확인합니다.

/etc/watchdog.d/pm2-app-check.sh 파일을 다음과 같이 작성해주세요. PM2_APP_NAME 변수를 실제 애플리케이션 이름으로 바꿔야 합니다.

Bash

#!/bin/bash

# --- PM2 애플리케이션 정보 설정 ---
# 감시하려는 PM2 애플리케이션의 이름
PM2_APP_NAME="your_pm2_app_name"

# --- 타임아웃 설정 (PM2 응답을 기다리는 시간) ---
# pm2 명령어가 10초 이상 응답이 없으면 실패로 간주합니다.
TIMEOUT_SECONDS=10

# --- PM2 서비스 상태 확인 ---
# 'pm2 describe' 명령어를 통해 특정 앱의 상태를 확인하고,
# 'grep'을 이용해 'status: online' 문자열이 있는지 찾습니다.
# PM2 앱이 존재하지 않거나 'online' 상태가 아닐 경우, grep은 1을 반환합니다.
if timeout "$TIMEOUT_SECONDS" pm2 describe "$PM2_APP_NAME" | grep -q "status: online"; then
  # 'online' 상태가 확인되면 exit 0(성공) 반환
  echo "PM2 app '$PM2_APP_NAME' is online."
  exit 0
else
  # 'online' 상태가 아니면 exit 1(실패) 반환
  echo "PM2 app '$PM2_APP_NAME' is NOT online or PM2 command timed out!"
  exit 1
fi
스크립트 설명:

PM2_APP_NAME: 와치독으로 감시하려는 PM2 애플리케이션의 이름을 설정합니다.

pm2 describe "$PM2_APP_NAME" | grep -q "status: online": pm2 describe 명령어로 특정 앱의 상세 정보를 가져와서, 파이프(|)를 통해 grep으로 넘깁니다. grep -q는 'status: online'이라는 문자열이 있는지 확인하고, 있으면 종료 코드 0을, 없으면 종료 코드 1을 반환합니다.

if ... then ... else ... fi: grep의 종료 코드를 기반으로 스크립트가 최종 종료 코드를 결정합니다.

와치독 설정 및 재시작
스크립트 권한 설정:

Bash

sudo chmod +x /etc/watchdog.d/pm2-app-check.sh
watchdog.conf 수정:
/etc/watchdog.conf 파일의 test-binary 경로를 방금 만든 스크립트로 변경하세요.

Ini, TOML

# /etc/watchdog.conf
test-binary = /etc/watchdog.d/pm2-app-check.sh
interval = 5
와치독 서비스 재시작:

Bash
