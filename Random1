페이지를 새로고침하지 않고 특정 버튼이나 링크 같은 요소를 주기적으로 클릭하는 자동화 프로그램을 C# 등으로 당연히 만들 수 있습니다.

이 방식은 단순히 페이지를 새로고침하는 것보다 훨씬 더 세련되고 안정적인 방법입니다. 사용자가 보고 있는 화면은 그대로 둔 채, 백그라운드에서 조용히 활동(클릭)을 시뮬레이션하여 세션을 유지합니다.

C#으로 이런 기능을 구현하는 가장 현대적이고 안정적인 방법은 WebView2를 사용하는 것입니다.

## C#과 WebView2를 이용한 자동 클릭 프로그램 만들기
WebView2는 Microsoft Edge (Chromium) 브라우저 엔진을 C# 데스크톱 애플리케이션(WinForms, WPF) 안에 내장시키는 기술입니다. 이를 이용하면 웹 페이지를 앱 안에서 완벽하게 제어할 수 있습니다.

⚙️ 핵심 원리
C#으로 데스크톱 앱(창)을 하나 만듭니다.

그 앱 안에 WebView2 브라우저 컨트롤을 추가하고 세션을 유지하고 싶은 사이트를 띄웁니다.

C#의 타이머(Timer) 기능을 이용해 정해진 시간마다(예: 3분) WebView2 컨트롤에 명령을 내립니다.

명령의 내용은 JavaScript 코드를 실행시켜 페이지 안의 특정 버튼(또는 링크)을 클릭(click())하라는 것입니다.

📝 구현 단계 (Windows Forms 기준)
1. 프로젝트 생성 및 WebView2 패키지 설치

Visual Studio에서 'Windows Forms 앱(.NET Framework 또는 .NET)' 프로젝트를 새로 만듭니다.

솔루션 탐색기에서 프로젝트를 마우스 오른쪽 버튼으로 클릭 > NuGet 패키지 관리로 이동합니다.

Microsoft.Web.WebView2를 검색하여 설치합니다.

2. WebView2 컨트롤 추가 및 타이머 설정

도구 상자에서 WebView2 컨트롤을 찾아 폼(Form1) 디자인 화면에 끌어다 놓습니다.

마찬가지로 Timer 컨트롤도 폼에 추가합니다.

timer1의 Interval 속성을 원하는 시간(예: 3분 = 180000ms)으로 설정하고, Enabled 속성을 True로 설정합니다.

3. C# 코드 작성

Form1.cs 파일에 아래와 같이 코드를 작성합니다.

C#

using System;
using System.Windows.Forms;
using Microsoft.Web.WebView2.Core;

public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
        // WebView2 초기화 및 페이지 로딩을 위해 이벤트 핸들러 추가
        this.webView21.NavigationCompleted += WebView21_NavigationCompleted;
        InitializeAsync();
    }

    // 비동기 초기화 메서드
    async void InitializeAsync()
    {
        // WebView2 환경 설정
        await webView21.EnsureCoreWebView2Async(null);
        // 세션 유지를 원하는 초기 페이지 주소로 이동
        webView21.CoreWebView2.Navigate("https://your-target-website.com");
    }

    // 페이지 로딩이 완료된 후 타이머를 시작 (선택사항, 더 안정적)
    private void WebView21_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e)
    {
        // 타이머가 비활성화 상태일 때만 시작
        if (!timer1.Enabled)
        {
            timer1.Start();
            MessageBox.Show("페이지 로딩 완료! 3분마다 자동 클릭을 시작합니다.");
        }
    }

    // 타이머 이벤트 핸들러: 정해진 시간마다 실행됨
    private async void timer1_Tick(object sender, EventArgs e)
    {
        // 실행할 JavaScript 코드
        // 예시: id가 'keepSessionBtn'인 버튼을 클릭
        // 이 부분을 실제 사이트의 버튼에 맞게 수정해야 합니다.
        string elementSelector = "#keepSessionBtn"; // 예시 ID
        string script = $"document.querySelector('{elementSelector}').click();";

        try
        {
            // WebView2에 JavaScript 코드 실행을 명령
            await webView21.CoreWebView2.ExecuteScriptAsync(script);
            Console.WriteLine($"[{DateTime.Now}] '{elementSelector}' 요소를 성공적으로 클릭했습니다.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"클릭 실패: {ex.Message}");
        }
    }
}
4. 클릭할 요소의 선택자(Selector) 찾기 ⭐

가장 중요한 부분입니다. 어떤 버튼을 클릭할지 컴퓨터에 알려줘야 합니다.

크롬이나 엣지 브라우저에서 해당 사이트를 엽니다.

자동으로 클릭하고 싶은 버튼이나 링크 위에서 마우스 오른쪽 버튼을 클릭하고 **검사(Inspect)**를 선택합니다.

개발자 도구 창이 열리면서 해당 요소의 HTML 코드가 파란색으로 하이라이트됩니다.

해당 코드에서 id="값" 또는 class="값" 부분을 찾습니다.

id가 있다면 가장 좋습니다. (예: <button id="keepSessionBtn">연장</button>)

C# 코드의 elementSelector는 "#keepSessionBtn" 이 됩니다. (#은 id를 의미)

id가 없고 class만 있다면 (예: <a class="btn-extend-session">)

C# 코드의 elementSelector는 ".btn-extend-session" 이 됩니다. (.은 class를 의미)

## 대안: Selenium 사용
Selenium은 웹 브라우저 자동화를 위한 매우 강력한 전문 도구입니다. 별도의 브라우저 창(크롬, 엣지 등)을 직접 띄우고 제어하는 방식입니다.

기준	WebView2	Selenium
목적	내 앱 안에 웹 기능을 내장하고 제어	외부 웹 브라우저 자체를 자동화/테스트
설치	NuGet 패키지 하나로 간단	NuGet 패키지 + 브라우저 버전과 맞는 WebDriver 파일 필요
실행 방식	내 앱 창 안에서 모든 것이 실행됨	별도의 브라우저 창이 뜨고, C# 코드가 그 창을 조종
장점	배포가 간편하고 하나의 프로그램으로 완결됨	더 복잡한 상호작용, 브라우저 테스트에 강력함