 위해 GridControl의 ItemsSource를 사용하는 대신, DataTable을 직접 생성하고 데이터 바인딩을 처리하는 방식을 사용해보겠습니다. 이 접근 방식에서는 데이터 변환과 줄 바꿈을 처리한 후, 임시 GridControl을 생성하여 데이터를 엑셀로 내보내는 방법을 사용할 것입니다.

1. XAML 설정
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="myGridControl" AutoGenerateColumns="AddNew">
            <dxg:GridControl.View>
                <dxg:TableView Name="myTableView" />
            </dxg:GridControl.View>
        </dxg:GridControl>
        <Button Content="Export to Excel" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="10" Click="btnExportToExcel_Click"/>
    </Grid>
</Window>
2. Code-Behind 설정 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Export.Xl;
using DevExpress.Xpf.Grid;
using DevExpress.XtraPrinting;
using System.Data;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // 샘플 데이터 추가
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Name");
            dataTable.Columns.Add("Address");

            DataRow row1 = dataTable.NewRow();
            row1["Name"] = "John Doe";
            row1["Address"] = "1234 Elm Street\nApt 5";
            dataTable.Rows.Add(row1);

            DataRow row2 = dataTable.NewRow();
            row2["Name"] = "Jane Smith";
            row2["Address"] = "5678 Oak Avenue\nSuite 12B";
            dataTable.Rows.Add(row2);

            myGridControl.ItemsSource = dataTable;
        }

        private void ExportGridToExcel(GridControl gridControl, string filePath)
        {
            // XlsxExportOptionsEx 객체를 생성합니다.
            XlsxExportOptionsEx options = new XlsxExportOptionsEx();
            options.ExportType = DevExpress.Export.ExportType.WYSIWYG;

            // DataTable을 임시 GridControl에 설정
            DataView dataView = gridControl.ItemsSource as DataView;
            DataTable dataTable = dataView.ToTable();

            foreach (DataRow row in dataTable.Rows)
            {
                row["Address"] = row["Address"].ToString().Replace("\n", "\r\n");
            }

            GridControl tempGrid = new GridControl();
            TableView view = new TableView();
            tempGrid.View = view;
            tempGrid.ItemsSource = dataTable.DefaultView;

            // GridControl 데이터를 Excel 파일로 내보냅니다.
            tempGrid.View.ExportToXlsx(filePath, options);
        }

        private void btnExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            string filePath = "output.xlsx";
            ExportGridToExcel(myGridControl, filePath);
            MessageBox.Show("엑셀로 내보내기가 완료되었습니다: " + filePath);
        }
    }
}
이 코드는 다음과 같은 작업을 수행합니다:

XAML 설정: GridControl과 Export 버튼을 포함하는 간단한 UI를 정의합니다.
Code-Behind 설정:
DataTable을 생성하고 샘플 데이터를 추가하여 GridControl에 바인딩합니다.
ExportGridToExcel 메서드는 DataTable의 데이터를 변환하여 줄 바꿈을 유지합니다.
줄 바꿈을 유지하기 위해 Address 필드의 값을 \r\n으로 대체합니다.
임시 GridControl을 사용하여 데이터를 엑셀로 내보냅니다.
이 방법으로, GridControl의 데이터를 엑셀로 내보낼 때 줄 바꿈이 유지