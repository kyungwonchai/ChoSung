어서 파일 목록의 10, 11, 12번째 파일(Administrator.cs, AuditLog.cs, Floor.cs)의 전체 코드를 여기에 바로 작성해 드리겠습니다. 이 파일들은 모두 Models 폴더에 위치합니다.

10. Models/Administrator.cs

관리자 마스터 데이터를 나타내는 모델 클래스입니다.

C#

using LockerManagementApp.Infrastructure; // ViewModelBase 사용 위해 추가
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 관리자 마스터 데이터 모델
    /// </summary>
    [Table("Administrators")] // 데이터베이스 테이블 이름 명시
    public class Administrator : ViewModelBase // ViewModelBase 상속하여 INotifyPropertyChanged 구현
    {
        private int _id;
        private string _name;

        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id
        {
            get => _id;
            // Id는 일반적으로 설정되지 않으므로 set에 알림은 불필요할 수 있음
            set => SetProperty(ref _id, value);
        }

        [Required(ErrorMessage = "관리자 이름은 필수입니다.")] // 필수 값
        [StringLength(100)] // 문자열 길이 제한
        // 참고: UNIQUE 제약 조건은 SQL 스크립트에서 설정했습니다.
        // EF6 Attribute: [Index("IX_AdministratorName", IsUnique = true)]
        public string Name
        {
            get => _name;
            set => SetProperty(ref _name, value); // 값 변경 시 UI 알림
        }

        // ToString() 재정의 (디버깅 또는 간단 표시용)
        public override string ToString()
        {
            return Name ?? base.ToString();
        }

        // ViewModelBase에서 INotifyPropertyChanged 관련 구현 상속받음
    }
}
11. Models/AuditLog.cs

데이터 변경 감사 로그를 나타내는 모델 클래스입니다. 이 모델은 보통 읽기 전용으로 표시되므로 INotifyPropertyChanged 구현은 하지 않았습니다.

C#

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 데이터 변경 감사 로그 모델
    /// </summary>
    [Table("AuditLogs")] // 데이터베이스 테이블 이름 명시
    public class AuditLog
    {
        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id { get; set; } // 로그 고유 ID

        [Required] // 필수 값
        public DateTime Timestamp { get; set; } // 로그 기록 시간

        [Required]
        [StringLength(100)]
        public string UserName { get; set; } // 변경 수행 사용자

        [Required]
        [StringLength(50)]
        public string Action { get; set; } // 작업 종류 (Added, Modified, Deleted)

        [Required]
        [StringLength(100)]
        public string TableName { get; set; } // 변경된 테이블 이름

        [StringLength(100)]
        public string RecordId { get; set; } // 변경된 레코드 ID (문자열 타입)

        // NVARCHAR(MAX)에 해당, 길이 제한 없음 (EF 기본)
        public string AffectedColumns { get; set; } // 변경된 컬럼 목록 (쉼표 구분 등)

        public string OldValues { get; set; } // 변경 전 값 (JSON 등)

        public string NewValues { get; set; } // 변경 후 값 (JSON 등)
    }
}
12. Models/Floor.cs

층 마스터 데이터를 나타내는 모델 클래스입니다.

C#

using LockerManagementApp.Infrastructure; // ViewModelBase 사용 위해 추가
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 층 마스터 데이터 모델
    /// </summary>
    [Table("Floors")] // 데이터베이스 테이블 이름 명시
    public class Floor : ViewModelBase // ViewModelBase 상속하여 INotifyPropertyChanged 구현
    {
        private int _id;
        private string _name;

        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id
        {
            get => _id;
            set => SetProperty(ref _id, value);
        }

        [Required(ErrorMessage = "층 이름은 필수입니다.")] // 필수 값
        [StringLength(10)] // 문자열 길이 제한
        // 참고: UNIQUE 제약 조건은 SQL 스크립트에서 설정했습니다.
        // EF6 Attribute: [Index("IX_FloorName", IsUnique = true)]
        public string Name
        {
            get => _name;
            set => SetProperty(ref _name, value); // 값 변경 시 UI 알림
        }

        // ToString() 재정의
        public override string ToString()
        {
            return Name ?? base.ToString();
        }

        // ViewModelBase에서 INotifyPropertyChanged 관련 구현 상속받음
    }