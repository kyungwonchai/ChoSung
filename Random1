, Flask를 사용하면 HTML 파일들을 간단하게 웹으로 게시하여 다른 사람들이 볼 수 있도록 하는 사이트를 쉽게 만들 수 있습니다. Ubuntu 서버에서 운영하는 것을 기준으로 상세한 코드와 설명을 드리겠습니다.

목표:

사용자가 작성한 HTML 파일들을 특정 폴더에 넣어두면,
웹사이트의 메인 페이지에는 해당 HTML 파일들의 목록이 나타나고,
목록에서 파일명을 클릭하면 해당 HTML 파일의 내용을 보여주는 웹사이트를 만듭니다.
프로젝트 구조:

my_simple_blog/
├── app.py             # Flask 애플리케이션 로직
├── templates/
│   ├── index.html     # 글 목록을 보여줄 템플릿
│   └── posts/         # 실제 HTML 글 파일을 저장할 폴더
│       ├── my_first_post.html
│       └── another_topic.html
└── static/            # (선택사항) CSS, JS, 이미지 등 정적 파일
    └── style.css      # (예시) 간단한 스타일시트
1. 필요한 라이브러리 설치 (Ubuntu 터미널)

Bash

sudo apt update
sudo apt install python3 python3-pip -y
pip3 install Flask
2. app.py 작성

Python

import os
from flask import Flask, render_template, abort

app = Flask(__name__)

# HTML 글 파일들이 저장된 디렉토리 경로 설정
# app.root_path는 현재 app.py 파일이 있는 디렉토리를 가리킵니다.
POSTS_DIR = os.path.join(app.root_path, 'templates', 'posts')

@app.route('/')
def index():
    """메인 페이지: templates/posts/ 디렉토리의 HTML 파일 목록을 보여줍니다."""
    posts = []
    if not os.path.exists(POSTS_DIR):
        os.makedirs(POSTS_DIR) # 폴더가 없으면 생성

    for filename in os.listdir(POSTS_DIR):
        if filename.endswith('.html'):
            # 파일명에서 .html 확장자를 제거하고, '_'를 공백으로 바꿔 제목처럼 만듭니다.
            title = filename[:-5].replace('_', ' ').title()
            posts.append({'filename': filename, 'title': title})
    
    # 파일명을 기준으로 정렬 (선택사항)
    posts.sort(key=lambda x: x['filename'])
    
    return render_template('index.html', posts=posts)

@app.route('/post/<filename>')
def post(filename):
    """선택한 HTML 파일을 보여줍니다."""
    # 보안: filename에 .. 이나 / 가 포함되어 경로 조작을 시도하는 것을 방지
    if '..' in filename or filename.startswith('/'):
        abort(400, description="잘못된 파일명입니다.")

    filepath = os.path.join('posts', filename) # templates/posts/filename.html 경로
    
    # 파일 존재 여부 확인 후 렌더링
    # templates 폴더를 기준으로 파일 경로를 찾으므로, 'posts/'를 앞에 붙여줍니다.
    # 실제 파일 시스템 경로는 templates/posts/filename.html 입니다.
    if not os.path.exists(os.path.join(app.template_folder, filepath)):
        abort(404, description="요청하신 파일을 찾을 수 없습니다.")
        
    return render_template(filepath)

if __name__ == '__main__':
    # 외부에서 접속 가능하도록 host='0.0.0.0'으로 설정
    # debug=True는 개발 중에만 사용하고, 실제 운영 시에는 False로 변경하거나 제거합니다.
    app.run(debug=True, host='0.0.0.0', port=5000)
3. templates/index.html 작성

이 파일은 글 목록을 보여주는 역할을 합니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>나의 작은 블로그</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <header>
        <h1>나의 글 목록</h1>
    </header>
    <main>
        {% if posts %}
            <ul>
                {% for post_item in posts %}
                    <li>
                        <a href="{{ url_for('post', filename=post_item.filename) }}">
                            {{ post_item.title }}
                        </a>
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>아직 작성된 글이 없습니다. <code>templates/posts/</code> 폴더에 HTML 파일을 추가해주세요.</p>
        {% endif %}
    </main>
    <footer>
        <p>&copy; {{ 2025 }} 나의 작은 블로그</p> {# 현재 연도로 자동 변경하고 싶다면 datetime 모듈 사용 가능 #}
    </footer>
</body>
</html>
4. (선택사항) static/style.css 작성

간단한 스타일을 추가할 수 있습니다.

CSS

body {
    font-family: sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
    color: #333;
}

header {
    background: #333;
    color: #fff;
    padding: 1rem 0;
    text-align: center;
}

header h1 {
    margin: 0;
}

main {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

ul {
    list-style: none;
    padding: 0;
}

ul li {
    padding: 8px 0;
    border-bottom: 1px #eee solid;
}

ul li a {
    text-decoration: none;
    color: #337ab7;
}

ul li a:hover {
    color: #23527c;
}

footer {
    text-align: center;
    padding: 1rem 0;
    margin-top: 20px;
    color: #777;
}

/* 개별 포스트 페이지 스타일 (templates/posts/ 안의 HTML에 직접 작성하거나, 공통 클래스 사용) */
.post-content {
    /* 예시 스타일 */
}
.post-content h1, .post-content h2 {
    color: #333;
}
.post-content p {
    margin-bottom: 1em;
}
5. 글(HTML) 파일 작성 및 저장

templates/posts/ 폴더 안에 HTML 형식으로 글을 작성합니다.
예를 들어, my_first_post.html 파일을 다음과 같이 작성합니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>나의 첫 번째 글</title>
    <style>
        /* 이 HTML 파일에만 적용될 스타일 */
        body { font-family: Arial, sans-serif; margin: 20px; }
        .post-container { max-width: 700px; margin: auto; padding: 20px; border: 1px solid #ddd; }
    </style>
</head>
<body>
    <div class="post-container">
        <h1>나의 첫 번째 글입니다!</h1>
        <p>이것은 Flask를 사용하여 만든 간단한 블로그의 첫 번째 글입니다.</p>
        <p>HTML 형식으로 자유롭게 내용을 작성할 수 있습니다.</p>
        <img src="https://via.placeholder.com/300" alt="예시 이미지">
        <p><a href="{{ url_for('index') }}">목록으로 돌아가기</a></p>
    </div>
</body>
</html>
주의: 개별 HTML 파일 내에서 {{ url_for(...) }} 같은 Flask 템플릿 문법을 사용하려면, render_template 함수가 해당 파일을 직접 처리해야 합니다. 위 app.py의 post 함수는 이미 render_template을 사용하므로 my_first_post.html 내부에서 url_for를 사용할 수 있습니다. 만약 CSS 링크도 url_for를 사용하고 싶다면, 개별 HTML 파일들이 static 폴더에 접근할 수 있도록 app.py에서 해당 부분을 처리하거나, 각 HTML 파일의 head에 <link rel="stylesheet" href="/static/style.css">와 같이 절대 경로로 지정할 수 있습니다 (Flask의 static_url_path가 기본값 /static일 경우). 위 예제에서는 style.css 연결 부분을 주석 처리했습니다. 필요에 따라 주석을 해제하고 사용하세요.
6. Flask 애플리케이션 실행 (Ubuntu 터미널)

my_simple_blog 디렉토리로 이동한 후, 다음 명령어를 실행합니다.

Bash

cd /경로/to/your/my_simple_blog/
python3 app.py
터미널에 다음과 같은 메시지가 나타날 것입니다:
* Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
* Restarting with stat
* Debugger is active!
* Debugger PIN: ...

7. 웹 브라우저에서 확인

이제 웹 브라우저를 열고 Ubuntu 서버의 IP 주소와 포트 번호 5000번으로 접속합니다.
예: http://<Ubuntu_서버_IP_주소>:5000

만약 로컬 PC의 Ubuntu에서 실행했다면 http://127.0.0.1:5000 또는 http://localhost:5000으로 접속합니다.

8. 방화벽 설정 (필요시)

만약 Ubuntu 서버에서 ufw 방화벽을 사용 중이라면 5000번 포트를 열어줘야 외부에서 접속 가능합니다.

Bash

sudo ufw allow 5000/tcp
sudo ufw enable  # 방화벽이 비활성화 상태였다면 활성화
sudo ufw status  # 상태 확인
글 추가 방법:

새로운 글을 추가하려면 my_simple_blog/templates/posts/ 디렉토리 안에 새로운 .html 파일을 만들고 내용을 작성하기만 하면 됩니다. 웹사이트를 새로고침하면 메인 페이지 목록에 새 글이 자동으로 나타납니다 (디버그 모드에서는 코드 변경 시 서버가 자동 재시작됩니다. 운영 환경에서는 서버를 재시작해야 할 수 있습니다).

추후 개선 사항 (운영 환경 고려):

디버그 모드 비활성화: 실제 운영 시에는 app.py에서 app.run(debug=True)를 app.run(debug=False) 또는 해당 라인을 제거하고 WSGI 서버(예: Gunicorn)를 사용해야 합니다.
WSGI 서버 사용: Flask 개발 서버는 운영 환경에 적합하지 않습니다. Gunicorn이나 uWSGI 같은 WSGI 서버를 사용하고, Nginx 같은 웹 서버를 리버스 프록시로 앞에 두는 것이 일반적입니다.
Bash

pip3 install gunicorn
# my_simple_blog 디렉토리에서 실행
gunicorn --bind 0.0.0.0:5000 app:app
HTTPS 적용: SSL/TLS 인증서를 사용하여 HTTPS를 적용하면 보안이 강화됩니다. (Let's Encrypt 사용)