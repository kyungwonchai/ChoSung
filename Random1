// 비동기 작업을 큐에 추가하고 처리하는 메서드
private async void EnqueueTask(Func<Task<string>> taskFunc, string commandText, string sentCommand, Func<string, bool> responseValidator)
{
    // 새로운 명령 아이템 생성
    var newCommand = new CommandItem 
    { 
        CommandText = commandText, 
        Status = "Pending", // 상태를 "Pending"으로 초기화 (대기 중 상태)
        MaxRetryLimit = RetryLimit, 
        RetryCount = 0, 
        CommandTime = DateTime.Now.ToString("yyMMdd HH:mm:ss.fff") 
    };

    // UI 갱신: 남아있는 명령 리스트에 추가
    App.Current.Dispatcher.Invoke(() =>
    {
        RemainingCommands.Add(newCommand);
    });

    // 큐에 비동기 작업 추가
    commandQueue.Enqueue(async () =>
    {
        newCommand.Status = "Processing"; // 명령 처리 중일 때 상태를 "Processing"으로 변경
        App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(RemainingCommands))); // UI 상태 즉시 반영

        int retryCount = 0;
        Stopwatch stopwatch = new Stopwatch(); // 응답 시간 측정을 위한 스톱워치
        _isProcessing = true;

        // 최대 재시도 횟수까지 반복
        while (retryCount < RetryLimit) 
        {
            try
            {
                stopwatch.Restart(); // 스톱워치 시작
                string result = await taskFunc(); // 비동기 작업 실행
                stopwatch.Stop(); // 작업 종료 시 스톱워치 종료

                int responseTime = (int)stopwatch.ElapsedMilliseconds; // 응답 시간 측정
                newCommand.ResponseTime = responseTime;
                newCommand.RetryCount = retryCount;

                // 응답 시간이 초과된 경우
                if (responseTime > ResponseTimeout)
                {
                    newCommand.Status = "Timeout"; // 상태를 "Timeout"으로 변경
                    App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(RemainingCommands))); // UI 상태 즉시 반영
                    newCommand.Result = 0; // 실패로 처리

                    // 데이터베이스에 Timeout 기록
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, "Timeout", "Failed", newCommand.Result, retryCount, responseTime, "Timeout occurred");

                    // UI에 상태가 "Timeout"으로 변경됨을 즉시 반영
                    App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(newCommand.Status)));

                    StopQueueProcessing(newCommand); // 큐 중단
                    return new CommandResult { Success = false, Message = "Response Timeout" };
                }

                // 응답이 정상일 경우
                if (responseValidator(result))
                {
                    newCommand.Status = "Completed"; // 상태를 "Completed"로 변경
                    newCommand.Result = 1; // 성공 처리

                    // 데이터베이스에 성공 기록
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, result);

                    // UI에 상태가 "Completed"로 변경됨을 즉시 반영
                    App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(newCommand.Status)));

                    UpdateProgress();
                    _isProcessing = false;
                    return new CommandResult { Success = true, Message = result };
                }
                else
                {
                    retryCount++;
                    newCommand.Status = $"Retrying {retryCount}/{RetryLimit}"; // 재시도 상태 반영
                    App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(newCommand.Status))); // UI 상태 즉시 반영

                    if (retryCount >= RetryLimit) // 재시도 실패 시
                    {
                        newCommand.Status = "Failed"; // 상태를 "Failed"로 변경
                        newCommand.Result = 0; // 실패 처리

                        // DB에 실패 상태 기록
                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Failed", newCommand.Result, retryCount, responseTime, "Failed after retries");

                        // UI에 상태가 "Failed"로 변경됨을 즉시 반영
                        App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(newCommand.Status)));

                        StopQueueProcessing(newCommand); // 큐 중단
                        return new CommandResult { Success = false, Message = result };
                    }

                    await Task.Delay(RetryInterval); // 재시도 간격 대기
                }
            }
            catch (Exception ex)
            {
                newCommand.Status = "Failed"; // 예외 발생 시 상태를 "Failed"로 변경
                newCommand.Result = 0;

                // 예외 발생 시 DB에 로그 기록
                await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);

                // UI에 상태가 "Failed"로 변경됨을 즉시 반영
                App.Current.Dispatcher.Invoke(() => OnPropertyChanged(nameof(newCommand.Status)));

                StopQueueProcessing(newCommand); // 큐 중단
                return new CommandResult { Success = false, Message = ex.Message };
            }
        }

        UpdateProgress(); // 프로그레스바 업데이트
        _isProcessing = false;
        return new CommandResult { Success = false };
    });

    if (!_isProcessing)
    {
        _isProcessing = true;
        await ProcessCommandQueue(); // 큐 작업 처리 시작
    }

    UpdateProgress(); // 프로그레스바 업데이트
}
