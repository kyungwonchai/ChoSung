#!/usr/bin/env python3
import subprocess
import os
import sys
import re

# ----------------------------------------------------
# ※ 설정: 관리할 포트와 허용할 IP를 여기에 입력하세요.
# ----------------------------------------------------
ALLOWED_IP = "192.168.0.100"  # 허용할 특정 IP 주소
PORTS_TO_MANAGE = [8001, 8002, 9595] # 관리할 포트 목록
PROTO = "tcp" # 프로토콜 (tcp 또는 udp)
# ----------------------------------------------------

def run_command(command):
    """주어진 명령을 실행하고 결과를 반환합니다."""
    try:
        result = subprocess.run(
            command,
            shell=True,
            check=True,
            capture_output=True,
            text=True
        )
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"? 오류가 발생했습니다: {e.stderr.strip()}")
        return None

def main():
    """방화벽 규칙을 관리하는 메인 함수입니다."""
    # 1. 루트 권한 확인
    if os.geteuid() != 0:
        print("? 이 스크립트는 반드시 루트(root) 권한으로 실행해야 합니다.")
        print("   (예: sudo python3 manage_firewall.py)")
        sys.exit(1)

    print(f"▶ 스크립트를 시작합니다. 허용 IP: {ALLOWED_IP}, 관리 포트: {PORTS_TO_MANAGE}")

    for port in PORTS_TO_MANAGE:
        print("\n" + "="*30)
        print(f"??  포트 {port}/{PROTO} 에 대한 규칙을 처리합니다...")
        
        # 2. 삭제할 기존 규칙 찾기
        print(f"   - 기존 규칙을 조회합니다...")
        ufw_status = run_command("ufw status numbered")
        
        if ufw_status is None:
            continue

        rules_to_delete = []
        # 정규표현식을 사용하여 '[ 1]' 과 같은 규칙 번호를 찾음
        rule_pattern = re.compile(r'\[\s*(\d+)\s*\]')
        
        for line in ufw_status.splitlines():
            # 포트 번호가 포함된 라인만 필터링
            if f" {port}/{PROTO}" in line:
                match = rule_pattern.search(line)
                if match:
                    rule_num = int(match.group(1))
                    rules_to_delete.append(rule_num)
                    print(f"   - 삭제 대상 규칙 발견: 번호 {rule_num} -> {line.strip()}")

        # 3. 규칙 삭제 (번호가 큰 것부터 삭제해야 순서가 꼬이지 않음)
        if not rules_to_delete:
            print("   - 삭제할 기존 규칙이 없습니다.")
        else:
            # 규칙 번호를 역순으로 정렬
            for rule_num in sorted(rules_to_delete, reverse=True):
                print(f"   - 규칙 번호 {rule_num}을(를) 삭제합니다...")
                # 'y'를 입력하여 삭제 프롬프트를 자동으로 확인
                delete_command = f"echo 'y' | ufw delete {rule_num}"
                run_command(delete_command)
            print(f"   - 포트 {port}에 대한 기존 규칙 {len(rules_to_delete)}개를 모두 삭제했습니다.")

        # 4. 새로운 규칙 추가
        print(f"   - IP {ALLOWED_IP}에 대한 새로운 규칙을 추가합니다...")
        add_command = f"ufw allow from {ALLOWED_IP} to any port {port} proto {PROTO}"
        run_command(add_command)
        print(f"? 포트 {port}에 새로운 규칙 추가 완료!")

    print("\n" + "="*30)
    print("? 모든 작업이 완료되었습니다. 최종 방화벽 상태를 확인합니다.")
    final_status = run_command("ufw status")
    print("\n--- 최종 UFW 상태 ---")
    print(final_status)
    print("--------------------")

if __name__ == "__main__":
    main()