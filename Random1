SensorDataConsumer 인스턴스를 클래스의 전역 변수로 설정하고 전체 클래스에서 사용하고 싶다면, 해당 클래스 내부에 SensorDataConsumer 객체를 전역 멤버 변수(또는 프로퍼티)로 선언하고, 초기화 과정을 클래스의 생성자 또는 적절한 초기화 메서드에서 수행하면 됩니다. 이렇게 하면 해당 클래스의 다양한 메서드에서 SensorDataConsumer 인스턴스에 접근하여 센서 데이터를 사용할 수 있습니다.

예시: 클래스 전역에서 SensorDataConsumer 사용
아래의 예제 코드는 MyClass라는 클래스를 정의하고, 이 클래스의 전역에서 SensorDataConsumer 인스턴스를 사용하는 방법을 보여줍니다.

1. 클래스 정의
csharp
코드 복사
public class MyClass
{
    // SensorDataConsumer 인스턴스를 클래스의 전역 멤버로 선언
    private SensorDataConsumer _consumer;

    public MyClass(ISensorDataService sensorService)
    {
        // SensorDataConsumer 인스턴스를 초기화
        _consumer = new SensorDataConsumer(sensorService);
    }

    // 센서 데이터를 사용하는 메서드 예제
    public void CheckSensorStatus()
    {
        // 특정 인덱스의 센서 감지 상태를 확인
        int sensorIndex = 10;  // 예를 들어 10번째 센서의 상태를 확인
        int status = _consumer.GetSensorDetectionStatus(sensorIndex);
        Console.WriteLine($"Sensor at index {sensorIndex} is {(status == 1 ? "active" : "inactive")}");
    }

    // 다른 메서드에서도 _consumer를 사용할 수 있습니다
    public void PerformAnotherTask()
    {
        // 다른 센서 데이터를 처리하는 코드
    }
}
2. 사용 예시
MyClass의 인스턴스를 생성하고 사용하는 방법입니다. 이 예에서는 SensorViewModel을 ISensorDataService 인터페이스를 통해 제공하고 있어야 합니다.

csharp
코드 복사
public class Program
{
    public static void Main()
    {
        // SensorViewModel 인스턴스 생성
        var viewModel = new SensorViewModel();

        // MyClass 인스턴스 생성, SensorViewModel 주입
        var myClass = new MyClass(viewModel);

        // 센서 상태 확인
        myClass.CheckSensorStatus();

        // 다른 작업 수행
        myClass.PerformAnotherTask();
    }
}
전역 사용의 장점과 주의점
장점: 클래스 내의 여러 메서드에서 SensorDataConsumer 인스턴스에 쉽게 접근할 수 있어 코드의 중복을 줄이고 편의성을 높일 수 있습니다.
주의점: 클래스가 SensorDataConsumer에 과도하게 의존하게 되면, 테스트와 유지보수가 어려워질 수 있습니다. 따라서 의존성 주입을 통해 이를 외부에서 주입받는 방식을 유지하는 것이 좋습니다. 이는 테스트 용이성과 코드의 유연성을 보장합니다.
이러한 방식으로 SensorDataConsumer를 전역으로 사용하면, 전체 클래스에서 필요한 센서 데이터에 쉽게 접근하고, 관련 작업을 수행할 수 있습