해야 할 것 같습니다. 이 문제를 해결하기 위해 Grid 내에 ItemsControl을 사용하여 ScrollViewer와 함께 사용해 보겠습니다.

MainWindow.xaml
ItemsControl과 ScrollViewer를 사용하여 QR 코드가 여러 줄로 배치되고, 스크롤이 가능하도록 수정합니다.

xml
코드 복사
<dx:ThemedWindow x:Class="QRMAKER.MainWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                 xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                 mc:Ignorable="d"
                 Title="MainWindow" Height="600" Width="800"
                 ThemeName="Office2019Color"
                 Closing="Window_Closing"
                 SizeChanged="Window_SizeChanged">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="제목" FontSize="24" HorizontalAlignment="Center" Margin="10" Grid.Row="0"/>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- GridControl -->
            <dxg:GridControl Name="gridControl" AutoGenerateColumns="None">
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="No" Header="No" Width="70" ReadOnly="True"/>
                    <dxg:GridColumn FieldName="Magazine" Header="Magazine" ReadOnly="True"/>
                </dxg:GridControl.Columns>
                <dxg:GridControl.View>
                    <dxg:TableView Name="tableView" AutoWidth="False" SelectionChanged="TableView_SelectionChanged"/>
                </dxg:GridControl.View>
            </dxg:GridControl>

            <!-- QR 코드 영역 -->
            <ScrollViewer Grid.Column="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                <ItemsControl Name="qrCodePanel">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <WrapPanel />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </ScrollViewer>
        </Grid>

        <!-- 슬라이더 설정 -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10" Grid.Row="2">
            <Button Content="클립보드에서 데이터 가져오기" Click="LoadFromClipboard"/>
            <TextBlock Text="QR 코드 크기: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="sizeSlider" Minimum="50" Maximum="200" Width="100" ValueChanged="SizeSlider_ValueChanged"/>
            <TextBox Name="sizeTextBox" Width="50" TextChanged="SizeTextBox_TextChanged" VerticalAlignment="Center"/>
            <TextBlock Text="QR 코드 간격: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="spacingSlider" Minimum="10" Maximum="50" Width="100" ValueChanged="SpacingSlider_ValueChanged"/>
            <TextBox Name="spacingTextBox" Width="50" TextChanged="SpacingTextBox_TextChanged" VerticalAlignment="Center"/>
        </StackPanel>
    </Grid>
</dx:ThemedWindow>
MainWindow.xaml.cs (관련 이벤트 핸들러 및 QR 코드 생성 로직)
ItemsControl을 사용하여 QR 코드를 WrapPanel에 동적으로 배치하고 스크롤이 가능하도록 설정합니다.

csharp
코드 복사
private void LoadFromClipboard(object sender, RoutedEventArgs e)
{
    try
    {
        _items.Clear();
        qrCodePanel.ItemsSource = null;

        // 클립보드에서 데이터 가져오기
        string clipboardText = Clipboard.GetText();
        if (!string.IsNullOrEmpty(clipboardText))
        {
            var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            int no = 1;
            foreach (var line in lines)
            {
                if (line.Length == 22 && IsAlphanumeric(line) && !_items.Exists(item => item.Magazine == line))
                {
                    _items.Add(new Item { No = no++, Magazine = line });
                }
            }
            gridControl.ItemsSource = _items;
            GenerateQRCodes();
        }
        else
        {
            MessageBox.Show("클립보드에 데이터가 없습니다.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Clipboard loading error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void GenerateQRCodes()
{
    try
    {
        var qrCodeList = new List<UIElement>();
        double qrCodeWidth = sizeSlider.Value;
        double qrCodeHeight = sizeSlider.Value;
        double spacing = spacingSlider.Value;

        foreach (var item in _items)
        {
            try
            {
                var qrCode = GenerateQRCode(item.Magazine);
                var image = new System.Windows.Controls.Image
                {
                    Source = BitmapToImageSource(qrCode),
                    Width = qrCodeWidth,
                    Height = qrCodeHeight,
                    Margin = new Thickness(spacing)
                };

                var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };
                
                // QR 코드 아래 텍스트를 2줄로 표시
                var textBlock = new TextBlock
                {
                    Text = item.Magazine,
                    Foreground = System.Windows.Media.Brushes.Blue,
                    TextWrapping = TextWrapping.Wrap,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    MaxWidth = qrCodeWidth // 텍스트가 QR 코드 너비를 넘지 않도록 설정
                };

                stackPanel.Children.Add(image);
                stackPanel.Children.Add(textBlock);

                image.MouseLeftButtonDown += (s, e) =>
                {
                    DeselectAllRows();
                    int index = _items.IndexOf(item);
                    tableView.FocusedRowHandle = index;
                    gridControl.View.FocusedRowHandle = index;
                    HighlightQRCode(item.Magazine);
                };

                qrCodeList.Add(stackPanel);
                _qrCodePanels[item.Magazine] = stackPanel;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"QR Code generation error for item '{item.Magazine}': {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        qrCodePanel.ItemsSource = qrCodeList;
    }
    catch (Exception ex)
    {
        MessageBox.Show($"QR Code generation error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private Bitmap GenerateQRCode(string text)
{
    try
    {
        BarcodeWriter writer = new BarcodeWriter
        {
            Format = BarcodeFormat.QR_CODE,
            Options = new ZXing.Common.EncodingOptions
            {
                Height = 200,
                Width = 200
            }
        };
        return writer.Write(text);
    }
    catch (Exception ex)
    {
        throw new Exception($"Error generating QR Code: {ex.Message}");
    }
}

private BitmapImage BitmapToImageSource(Bitmap bitmap)
{
    try
    {
        using (var memory = new System.IO.MemoryStream())
        {
            bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
            memory.Position = 0;
            var bitmapImage = new BitmapImage();
            bitmapImage.BeginInit();
            bitmapImage.StreamSource = memory;
            bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
            bitmapImage.EndInit();
            return bitmapImage;
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"Error converting Bitmap to ImageSource: {ex.Message}");
    }
}

private bool IsAlphanumeric(string str)
{
    foreach (char c in str)
    {
        if (!char.IsLetterOrDigit(c))
        {
            return false;
        }
    }
    return true;
}

private void DeselectAllRows()
{
    try
    {
        for (int i = 0; i < gridControl.VisibleRowCount; i++)
        {
            int rowHandle = gridControl.GetRowHandleByVisibleIndex(i);
            tableView.UnselectRow(rowHandle);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error deselecting rows: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void HighlightQRCode(string magazine)
{
    foreach (var key in _qrCodePanels.Keys)
    {
        _qrCodePanels[key].Background = System.Windows.Media.Brushes.Transparent;
    }
    if (_qrCodePanels.ContainsKey(magazine))
    {
        _qrCodePanels[magazine].Background = System.Windows.Media.Brushes.Yellow;
    }
}

private void TableView_SelectionChanged(object sender, GridSelectionChangedEventArgs e)
{
    if (gridControl.SelectedItem is Item selectedItem)
    {
        HighlightQRCode(selectedItem.Magazine);
        ScrollToQRCode(selectedItem.Magazine);
    }
}

private void ScrollToQRCode(string magazine)
{
    if (_qrCodePanels.ContainsKey(magazine))
    {
        var stackPanel = _qrCodePanels[magazine];
        stackPanel.BringIntoView();
    }
}
이제 QR 코드가 여러 줄로 배치되고, 스크롤이 가능하도록 설정되었습니다. ItemsControl과 ScrollViewer를 사용하여 WrapPanel 내부의 QR 코드를 제대로 표시할 수 있도록 했습니다. 이 코드를 실행하여 문제가 해결되었는지 확인해 주