// MGSPMonitorControl/ViewModels/MainViewModel.cs

// ... (다른 using 문 및 클래스 정의 시작은 이전과 동일) ...

namespace MGSPMonitorControl.ViewModels
{
    // ... (ApplicationMode Enum 정의는 이전과 동일) ...

    public class MainViewModel : ObservableObject
    {
        // ... (필드 선언은 이전과 동일) ...
        private readonly IDatabaseService _databaseService; // 이제 null일 수 있음
        private readonly IBrokerClientService _brokerClientService; // 이제 null일 수 있음

        // ... (다른 속성 및 커맨드 선언은 이전과 동일) ...

        // !!! 여기가 수정된 생성자입니다 !!!
        public MainViewModel(IDatabaseService databaseService, IBrokerClientService brokerClientService)
        {
            // null을 허용하도록 수정합니다.
            _databaseService = databaseService; 
            _brokerClientService = brokerClientService;

            // 나머지 초기화 로직은 동일하게 진행하되,
            // _databaseService나 _brokerClientService를 사용하는 모든 곳에서
            // 사용 전에 null 체크를 반드시 해야 합니다.
            // (이전 답변에서 드린 MainViewModel 최종본에는 이 null 체크들이 이미 포함되어 있습니다.)

            Agents = new ObservableCollection<ManagedAgentDisplay>();
            UiActionLogs = new ObservableCollection<string>();
            BrokerStatus = new BrokerStatusDisplay(); 

            AddUiLog($"Application MainViewModel initialized. Initial mode: {CurrentMode}.");
            if (_databaseService == null) AddUiLog("[CRITICAL_WARNING] DatabaseService IS NULL. All database related functions will FAIL.");
            if (_brokerClientService == null) AddUiLog("[CRITICAL_WARNING] BrokerClientService IS NULL. All broker communication will FAIL.");
            else
            {
                _brokerClientService.Connected += OnBrokerConnected;
                _brokerClientService.Disconnected += OnBrokerDisconnected;
                _brokerClientService.MessageReceived += OnBrokerMessageReceived;
                BrokerConnectionStatus = _brokerClientService.IsConnected ? "Connected" : "Disconnected (UI Init)";
            }

            // Commands 초기화 (CanExecute 조건에서 서비스 null 체크 포함)
            LoadAgentsCommand = new RelayCommand(async () => await ExecuteLoadAgentsAsync(), () => _databaseService != null); // null 체크!
            ApplyModeCommand = new RelayCommand<PasswordBox>(ExecuteApplyMode, (pBox) => pBox != null );
            LogoutCommand = new RelayCommand(ExecuteLogout, () => CurrentMode != ApplicationMode.Basic);

            AddAgentCommand = new RelayCommand(ExecuteAddAgent, () => CanManageAgents && _databaseService != null);
            EditAgentCommand = new RelayCommand(ExecuteEditAgent, () => SelectedAgent != null && CanManageAgents && _databaseService != null);
            DeleteAgentCommand = new RelayCommand(async () => await ExecuteDeleteAgentAsync(), () => SelectedAgent != null && CanManageAgents && _databaseService != null);
            
            MonitorOnCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOn"), 
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && IsBrokerConnectedAndReady());
            MonitorOffCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOff"), 
                                               () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && IsBrokerConnectedAndReady());
            PingAgentCommand = new RelayCommand(async () => await ExecutePingAgentAsync(), 
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && IsBrokerConnectedAndReady());

            RequestBrokerStatusCommand = new RelayCommand(async () => await ExecuteRequestBrokerStatusAsync(), () => IsBrokerConnectedAndReady());
            ConnectToBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.ConnectAsync(); }, () => _brokerClientService != null && !_brokerClientService.IsConnected);
            DisconnectFromBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.DisconnectAsync(); }, () => IsBrokerConnectedAndReady());
            ClearUiLogsCommand = new RelayCommand(() => UiActionLogs.Clear());

            // 초기 데이터 로드 및 Broker 연결 시도 (서비스가 null이 아닐 경우)
            if (_databaseService != null)
            {
                // 생성자에서 직접 await 호출은 피하는 것이 좋으므로, 별도 메서드로 분리하거나 Task.Run 사용
                // 여기서는 UI가 로드된 후 사용자가 "Refresh" 버튼을 누르거나,
                // 또는 App.xaml.cs에서 메인 창 Show() 이후에 초기 로드 명령을 실행하도록 유도.
                // 지금은 일단 생성자에서 Task.Run으로 호출.
                Task.Run(async () => await ExecuteLoadAgentsAsync());
            }
            if (_brokerClientService != null && !_brokerClientService.IsConnected)
            {
                 Task.Run(async () => await _brokerClientService.ConnectAsync());
            }
            RefreshAllCommandStates(); // 초기 Command 상태 설정
        }

        // ... (나머지 MainViewModel.cs 코드는 이전 최종본 답변과 동일하게 유지) ...
        // (RefreshAllCommandStates, AddUiLog, ExecuteApplyMode, ExecuteLogout, 
        //  ExecuteLoadAgentsAsync, ExecuteAddAgent, ExecuteEditAgent, ExecuteDeleteAgentAsync,
        //  ExecuteMonitorControlAsync, ExecutePingAgentAsync, ExecuteRequestBrokerStatusAsync,
        //  Broker Event Handlers, UpdateAgentListFromBroker, UpdateSingleAgentStatus,
        //  UpdateControlActionLogAsync, Cleanup 메서드 등)
    }
}