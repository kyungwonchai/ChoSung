using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace AutoInputExample
{
    public partial class MainForm : Form
    {
        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;
        private const int VK_OEM_6 = 0xDD;   // VK_OEM_6 = ']' key code
        private const int VK_0 = 0x30;       // VK_0 = '0' key code
        private const int VK_9 = 0x39;       // VK_9 = '9' key code

        private IntPtr hookId = IntPtr.Zero;
        private bool isRunning = false; // 동작 중 여부를 나타내는 플래그

        public MainForm()
        {
            InitializeComponent();
            hookId = SetHook(KeyboardHookCallback); // Low-Level Keyboard Hook 등록
            Application.ApplicationExit += Application_ApplicationExit; // 애플리케이션 종료 시 후크 해제
        }

        private void Application_ApplicationExit(object sender, EventArgs e)
        {
            UnhookWindowsHookEx(hookId); // Low-Level Keyboard Hook 해제
        }

        private IntPtr SetHook(HookProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        private IntPtr KeyboardHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                if (vkCode == VK_OEM_6) // ']' 키를 눌렀을 때
                {
                    isRunning = false; // 동작 종료
                }
                else if (vkCode == VK_OEM_3 && !isRunning) // '(' 키를 눌렀을 때 동작 중이 아닌 경우
                {
                    isRunning = true; // 동작 시작
                    SendKeys.Send("1d2d3d4f5d6d7d8d9d0d"); // 문자열 자동 입력
                    isRunning = false; // 동작 종료
                }
            }
            return CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam);
        }

        #region Win32 API Definitions

        private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

       

