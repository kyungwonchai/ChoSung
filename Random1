은 화면이 나오는 이유는 여러 가지 원인이 있을 수 있으며, 다음과 같은 사항들을 확인하고 문제를 해결할 수 있습니다.

1. 권한 문제 확인
카메라 권한이 부여되지 않았을 경우, 미리보기가 나타나지 않을 수 있습니다. 코드에서 권한을 요청하는 부분을 확인하고, 권한이 제대로 부여되었는지 확인해야 합니다.

2. PreviewView 설정 확인
PreviewView가 제대로 설정되지 않았을 경우, 카메라 미리보기가 나타나지 않을 수 있습니다. 특히, setSurfaceProvider()가 올바르게 설정되었는지 확인합니다.

3. CameraX 버전 확인
CameraX 라이브러리의 버전 문제로 특정 디바이스에서 호환성 문제가 발생할 수 있습니다. 최신 버전의 CameraX를 사용하고 있는지 확인해보세요.

4. 디바이스 문제
특정 디바이스에서 CameraX가 제대로 작동하지 않는 경우가 있습니다. 이 경우, 동일한 코드로 다른 디바이스에서 테스트해보는 것이 도움이 될 수 있습니다.

문제 해결 방법
권한 부여 여부 확인:
권한이 제대로 부여되지 않으면 카메라가 동작하지 않습니다. 권한이 부여되었는지 확인하세요.

PreviewView 설정 재확인:
PreviewView가 화면에 제대로 표시되고 있는지, setSurfaceProvider가 호출되었는지 확인하세요.

디버깅 로그 추가:
문제를 더 잘 파악하기 위해 중요한 단계마다 로그를 추가해보세요. 예를 들어, startCamera() 함수 내에 로그를 추가하여 unbindAll(), bindToLifecycle() 등이 제대로 호출되는지 확인합니다.

코드 개선
아래는 문제를 디버깅하기 위해 개선한 코드입니다. 디버깅을 위해 로그를 추가하고, 권한 및 카메라 설정이 제대로 이루어지는지 확인합니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    Log.d(TAG, "Setting surface provider for preview.")
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                Log.d(TAG, "Unbinding all use cases.")
                cameraProvider.unbindAll()

                Log.d(TAG, "Binding preview and image analysis use cases to lifecycle.")
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )
            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        @androidx.camera.core.ExperimentalGetImage
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        } else {
            Log.e(TAG, "Image from ImageProxy is null.")
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
디버깅 로그 설명:
Setting surface provider for preview.: Preview 객체에 서피스 제공자가 설정되었는지 확인하는 로그입니다.
Unbinding all use cases.: 모든 기존 카메라 기능이 해제되었는지 확인하는 로그입니다.
Binding preview and image analysis use cases to lifecycle.: 카메라 프리뷰와 이미지 분석 기능이 제대로 바인딩되었는지 확인하는 로그입니다.
Image from ImageProxy is null.: 이미지가 제대로 전달되지 않는 경우를 확인하는 로그입니다.
추가 사항:
이 코드로 로그를 확인하고 어떤 단계에서 문제가 발생하는지 파악할 수 있습니다. 만약 여전히 검은 화면이 나타난다면, 로그를 기반으로 문제가 발생한 부분을 구체적으로 파악할 수 있습니다. 권한 문제와 서피스 제공자 설정이 제대로 이루어졌는지 반드시 확인해 보시기 바랍니다