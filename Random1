Window.xaml - CommandParameter에 행의 DataContext 설정
Button의 CommandParameter를 행의 DataContext로 설정하여, 버튼이 속한 행의 TaskModel을 ViewModel로 전달합니다.

xml
코드 복사
<dxg:GridControl Name="taskGrid" ItemsSource="{Binding Tasks}" AutoGenerateColumns="False">
    <dxg:GridControl.View>
        <dxg:TableView AllowPerPixelScrolling="True" />
    </dxg:GridControl.View>
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Priority" Header="순위" />
        <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
        <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
        <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
        <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
        <dxg:GridColumn Header="폴더 열기">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <!-- DataContext를 CommandParameter로 설정하여 TaskModel 전달 -->
                    <Button Content="폴더 열기"
                            Command="{Binding DataContext.OpenFolderCommand, RelativeSource={RelativeSource AncestorType=Window}}"
                            CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType=dxg:GridRow}}" />
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>
위 코드에서 **CommandParameter="{Binding DataContext, RelativeSource={RelativeSource AncestorType=dxg:GridRow}}"**를 사용하여 Button이 위치한 GridRow의 DataContext, 즉 해당 행의 TaskModel 객체를 CommandParameter로 전달합니다.

MainViewModel.cs - TaskModel 객체에서 FolderPath 가져오기
OpenFolderCommand는 TaskModel 객체를 직접 받아 FolderPath에 접근합니다.

csharp
코드 복사
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Input;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        public ICommand OpenFolderCommand { get; }

        public MainViewModel()
        {
            // TaskModel 전체 객체를 받아 FolderPath를 추출
            OpenFolderCommand = new RelayCommand<TaskModel>(task =>
            {
                if (task == null || string.IsNullOrWhiteSpace(task.FolderPath))
                {
                    MessageBox.Show("폴더 경로가 유효하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                try
                {
                    if (Directory.Exists(task.FolderPath))
                    {
                        Process.Start(new ProcessStartInfo
                        {
                            FileName = task.FolderPath,
                            UseShellExecute = true,
                            Verb = "open"
                        });
                    }
                    else
                    {
                        MessageBox.Show("폴더가 존재하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch
                {
                    MessageBox.Show("폴더를 열 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            });
        }
    }
}
요약
CommandParameter를 GridRow의 DataContext로 설정: RelativeSource={RelativeSource AncestorType=dxg:GridRow}를 사용하여 TaskModel 객체를 CommandParameter로 전달합니다.
ViewModel에서 TaskModel.FolderPa