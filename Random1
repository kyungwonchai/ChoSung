다. 말씀하신대로 쿼리는 고정되어 있으며, UI에 입력하지 않고 함수 안에 내장된 형태로 작업을 하겠다는 말씀이셨죠. 그러면 QR 값만을 입력받고, 여러 개의 고정된 쿼리를 실행하는 구조로 변경하겠습니다.

다시 말해, UI에서 QR 값을 받는 방식만 있고, 쿼리는 코드 내에서 고정되어 있으며 그에 맞춰 결과를 처리하는 구조로 만들겠습니다.

변경 사항:
고정된 쿼리: UI에서 입력할 필요 없이 코드 내에 쿼리를 직접 작성합니다.
QR 값만 입력받고 해당 값을 사용하여 결과를 조회하는 구조로 만듭니다.
코드 구조
functionA는 고정된 쿼리와 QR 값을 사용하여 데이터를 조회합니다.
functionB는 여러 개의 functionA를 순차적으로 호출하여 결과를 가져옵니다.
쿼리 실행 후, 결과를 테이블 형식으로 출력합니다.
전체 코드 (수정된 버전)
1. Flask 애플리케이션 (Python)
python
코드 복사
from flask import Flask, render_template, request, jsonify
import mymssql
import asyncio

app = Flask(__name__)

# 고정된 쿼리들 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = ?"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = ?"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = ?"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # mymssql을 사용하여 데이터베이스 연결
        conn = mymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달
        cursor.execute(query, (qr_value,))  # QR 값을 쿼리 파라미터로 전달

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        # 결과가 있으면 데이터를 테이블 형식으로 변환하여 반환
        if len(rows) > 0:
            data = [dict(zip(columns, row)) for row in rows]
            return data
        else:
            return None
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    # 고정된 쿼리들 실행
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

# 함수 B: QR 값을 받아 여러 개의 functionA를 실행
async def functionB(connection_string, qr_value):
    """
    함수 B는 여러 개의 쿼리를 받아 비동기적으로 함수 A를 여러 번 실행하는 함수.
    각 쿼리의 결과를 리스트로 반환
    """
    # 함수 A를 비동기로 실행
    results = await asyncio.to_thread(functionA, connection_string, qr_value)
    return results

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
async def get_data():
    """
    사용자가 입력한 QR 값을 받아 함수 B를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값
    
    # 함수 B 실행: 여러 개의 쿼리를 비동기로 실행
    data = await functionB(connection_string, qr_value)
    
    # 결과 처리: 데이터가 없으면 "없음" 메시지 출력
    if any(d is None for d in data):
        return jsonify({'status': 'No data', 'message': 'No data found for one or more queries.'})
    else:
        # 결과를 테이블 형식으로 렌더링
        return render_template('table.html', data=data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
2. HTML 템플릿 (입력 폼 - templates/index.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query</title>
</head>
<body>
    <h1>SQL 쿼리 실행</h1>
    <form action="/get_data" method="POST">
        <label for="connection_string">Connection String:</label><br>
        <input type="text" id="connection_string" name="connection_string" required><br><br>

        <label for="qr_value">QR Value:</label><br>
        <input type="text" id="qr_value" name="qr_value" required><br><br>

        <input type="submit" value="Run Queries">
    </form>
</body>
</html>
3. 결과 테이블 (HTML - templates/table.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query Results</title>
</head>
<body>
    <h1>Query Results</h1>

    {% for result in data %}
        {% if result %}
            <h2>Results:</h2>
            <table border="1">
                <thead>
                    <tr>
                        {% for column in result[0].keys() %}
                            <th>{{ column }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for row in result %}
                        <tr>
                            {% for value in row.values() %}
                                <td>{{ value }}</td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p>해당 쿼리의 결과가 없습니다.</p>
        {% endif %}
    {% endfor %}
    
    <br>
    <a href="/">다시 실행</a>
</body>
</html>
코드 설명
고정된 쿼리들 (QUERY1, QUERY2, QUERY3):

쿼리들은 코드 내에서 이미 정의되어 있으며, QR 값을 기반으로 실행됩니다.
fetch_data_from_db 함수는 이 쿼리들을 받아서 데이터를 반환합니다.
functionA:

functionA는 3개의 고정된 쿼리를 실행하고, 결과를 data1, data2, data3로 받아 리스트로 반환합니다.
각 쿼리마다 QR 값이 적용됩니다.
functionB:

functionB는 비동기적으로 functionA를 호출하여 결과를 가져옵니다.
각 쿼리의 실행 결과를 results 리스트에 저장하여 반환합니다.
UI 처리:

사용자가 QR 값을 입력하면 해당 값을 받아 functionB가 호출되어 결과를 반환합니다.
결과는 테이블 형식으로 출력됩니다. 쿼리별로 결과가 있으면 테이블을 보여주고, 없으면 "결과가 없습니다"라고 출력합니다.
실행 방법
필요한 라이브러리 설치:

bash
코드 복사
pip install mymssql Flask
앱 실행:

bash
코드 복사
python app.py
브라우저에서 테스트: 브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.