 상위 그룹과 상위 페이지를 탐색하여 모든 데이터를 CSV에 정리하는 최종 코드입니다. 이 코드는 버튼이 발견될 때마다 파일 전체를 순회하여 상위 그룹과 페이지를 역추적하는 방식으로 작성되었습니다.

Python 코드
python
코드 복사
import csv

def extract_bar_button_details(input_file, output_file):
    """
    XtraBars.BarButtonItem 버튼의 변수 이름, 캡션, 그룹, 페이지 정보를 추출하여 CSV로 저장하는 함수.
    """
    # 결과 데이터를 저장할 리스트
    button_data = []

    try:
        # 입력 파일 읽기
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        # 1. 버튼 정보 추출
        for i, line in enumerate(lines):
            stripped_line = line.strip()

            # BarButtonItem 탐지
            if "XtraBars.BarButtonItem" in stripped_line and "=" in stripped_line:
                # 버튼 변수 이름 추출
                button_name = stripped_line.split('=')[0].strip()

                # 버튼 속성 초기화
                button_details = {
                    "button_name": button_name,
                    "caption": None,
                    "group_name": None,
                    "page_name": None
                }

                # 버튼 속성 추적
                for j in range(i + 1, len(lines)):
                    sub_line = lines[j].strip()

                    if f"{button_name}.Caption" in sub_line and "=" in sub_line:
                        button_details["caption"] = sub_line.split('=')[1].strip().strip('"')

                    # 다른 버튼 선언이 나오면 탐색 종료
                    if "XtraBars.BarButtonItem" in sub_line and "=" in sub_line:
                        break

                # 상위 그룹 탐색
                group_name = None
                for k in range(i, -1, -1):  # 위로 거슬러 올라가며 탐색
                    sub_line = lines[k].strip()
                    if "RibbonPageGroup" in sub_line and "Text =" in sub_line:
                        group_name = sub_line.split('Text =')[1].strip().strip('"')
                        break
                button_details["group_name"] = group_name

                # 상위 페이지 탐색
                page_name = None
                for k in range(i, -1, -1):  # 위로 거슬러 올라가며 탐색
                    sub_line = lines[k].strip()
                    if "RibbonPage" in sub_line and "Text =" in sub_line:
                        page_name = sub_line.split('Text =')[1].strip().strip('"')
                        break
                button_details["page_name"] = page_name

                # 버튼 데이터를 리스트에 추가
                button_data.append(button_details)

        # 2. CSV 파일로 저장
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
            csvwriter = csv.writer(csvfile)
            # CSV 헤더 작성
            csvwriter.writerow(['Button Variable Name', 'Caption', 'Group Name', 'Page Name'])
            # 데이터 작성
            for button in button_data:
                csvwriter.writerow([
                    button.get("button_name", ""),
                    button.get("caption", ""),
                    button.get("group_name", ""),
                    button.get("page_name", "")
                ])

        print(f"버튼 데이터를 {output_file} 파일에 성공적으로 저장했습니다.")

    except Exception as e:
        # 오류 발생 시 출력
        print(f"오류 발생: {e}")

# 실행
input_path = r"C:\agent\txt1.txt"  # 디자이너 파일 경로
output_path = r"C:\agent\bar_button_data.csv"  # 출력 CSV 경로
extract_bar_button_details(input_path, output_path)
주요 동작
버튼 변수 탐지:

XtraBars.BarButtonItem 선언이 포함된 라인을 기준으로 버튼 변수명을 추출합니다.
버튼 속성 탐색:

버튼 변수명 기반으로 .Caption 값을 탐색합니다.
다른 버튼 선언(XtraBars.BarButtonItem)이 나오면 탐색을 중단합니다.
상위 그룹 및 페이지 탐색:

버튼이 속한 그룹(RibbonPageGroup)과 페이지(RibbonPage)를 탐색합니다.
파일의 상단으로 거슬러 올라가며 가장 가까운 Text = 값을 추출합니다.
CSV 저장:

모든 데이터를 리스트로 정리한 뒤, UTF-8 BOM 형식으로 CSV 파일에 저장합니다.
출력 예시 (bar_button_data.csv)
csv
코드 복사
Button Variable Name,Caption,Group Name,Page Name
btnOpenFile,Open File,File Operations,File Management
btnSaveFile,Save File,File Operations,File Management
btnCopy,Copy Text,Clipboard,Edit
결과
버튼의 변수명, 캡션, 그룹 이름, 페이지 이름이 한 행에 정리됩니다.