ISensorDataService 인터페이스를 통해 특정 인덱스의 센서의 IsDetected 상태를 설정할 수 있도록 인터페이스를 확장하고 해당 기능을 구현하는 방법을 설명하겠습니다. 이를 위해 인터페이스에 센서 상태 변경 메서드를 추가하고, SensorViewModel에서 이 메서드를 구현하겠습니다.

1. ISensorDataService 인터페이스 수정
센서의 IsDetected 값을 설정할 수 있는 메서드를 인터페이스에 추가합니다.

csharp
코드 복사
// ISensorDataService.cs
public interface ISensorDataService
{
    IEnumerable<SensorModel> GetAllSensors();
    SensorModel GetSensorByIndex(int index);
    void SetSensorDetection(int index, bool isDetected); // 센서의 감지 상태 설정 메서드 추가
}
2. SensorViewModel에 새 메서드 구현
SensorViewModel 클래스에 SetSensorDetection 메서드를 추가하여 인터페이스를 완전히 구현합니다. 이 메서드는 지정된 인덱스에 있는 센서의 IsDetected 속성을 설정합니다.

csharp
코드 복사
// SensorViewModel.cs
public class SensorViewModel : INotifyPropertyChanged, ISensorDataService
{
    public ObservableCollection<SensorModel> Sensors { get; private set; }

    public SensorViewModel()
    {
        Sensors = new ObservableCollection<SensorModel>();
        LoadSensors(); // 센서 데이터 로드
    }

    private void LoadSensors()
    {
        // 초기 센서 데이터 로드 (예시 데이터)
        for (int i = 0; i < 20; i++)
        {
            Sensors.Add(new SensorModel { SensorName = $"Sensor {i+1}", IsDetected = false });
        }
    }

    public IEnumerable<SensorModel> GetAllSensors()
    {
        return Sensors;
    }

    public SensorModel GetSensorByIndex(int index)
    {
        return Sensors[index];
    }

    public void SetSensorDetection(int index, bool isDetected)
    {
        if (index >= 0 && index < Sensors.Count)
        {
            Sensors[index].IsDetected = isDetected;
            OnPropertyChanged("Sensors");
        }
        else
        {
            throw new ArgumentOutOfRangeException("Index is out of range.");
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
3. 센서 상태 변경 사용 예
다음은 SensorViewModel을 사용하여 특정 센서의 IsDetected 값을 변경하는 예제입니다.

csharp
코드 복사
class Program
{
    static void Main()
    {
        var sensorViewModel = new SensorViewModel();
        sensorViewModel.SetSensorDetection(10, true); // 11번째 센서의 IsDetected를 true로 설정

        foreach (var sensor in sensorViewModel.GetAllSensors())
        {
            Console.WriteLine($"Sensor: {sensor.SensorName}, Detected: {sensor.IsDetected}");
        }
    }
}
요약
위와 같이 인터페이스를 확장하고 SensorViewModel에서 해당 메서드를 구현함으로써, 인터페이스를 통해 센서 데이터의 상태를 안전하고 유연하게 관리할 수 있습니다. 이 구조는 의존성 관리를 간소화하고 코드의 유지보수를 용이하게 만들며, 다양한 테스트 시나리오에 적합한 구조를 제공합니다.