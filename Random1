예제는 mssql 패키지를 사용한 Node.js 백엔드와 React 프론트엔드의 간단한 예제입니다. 데이터베이스에서 데이터를 가져오는 함수가 server.js에 정의되어 있습니다.

server.js:

javascript

const express = require('express');
const sql = require('mssql');
const cors = require('cors');

const app = express();
app.use(cors());

const dbConfig = {
  user: '유저명',
  password: '비밀번호',
  server: '서버주소',
  database: '데이터베이스명'
};

app.get('/api/getData', async (req, res) => {
  try {
    let pool = await sql.connect(dbConfig);
    let result = await pool.request().query('SELECT * FROM 테이블명');
    res.json(result.recordset);
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});

React의 App.js:

javascript

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function App() {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const result = await axios('/api/getData');
      setData(result.data);
    };

    fetchData();
  }, []);

  return (
    <div className="App">
      <table>
        <thead>
          <tr>
            {/* 테이블 헤더를 설정하세요 */}
            <th>Column1</th>
            <th>Column2</th>
            {/* ... */}
          </tr>
        </thead>
        <tbody>
          {data.map((row, index) => (
            <tr key={index}>
              <td>{row.column1}</td>
              <td>{row.column2}</td>
              {/* ... */}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default App;

이 코드는 백엔드에서 테이블의 모든 데이터를 가져오는 API를 제공하고, React에서는 이 API를 호출하여 데이터를 가져온 후, 테이블 형태로 표시합니다. axios를 사용하여 API를 호출하고, React의 useEffect 훅을 사용하여 컴포넌트가 마운트될 때 데이터를 로드합니다.

단, 이 코드는 간단한 예제로 실제 프로젝트에서는 에러 처리, 보안 등에 더 주의해야 합니다. 또한 SQL 쿼리는 실제 쿼리에 맞게 수정해야 합니다.
User
mssql2014쪽의 프로시저에 파라미터를 넘겨서  리턴되는 테이블 3개를 받아서 표시하는 코드도 주세요
ChatGPT

아래는 MSSQL에서 저장 프로시저를 호출하고, 프론트엔드에서 이를 표시하는 예제입니다.

server.js:

javascript

const express = require('express');
const sql = require('mssql');
const cors = require('cors');

const app = express();
app.use(cors());

const dbConfig = {
  user: '유저명',
  password: '비밀번호',
  server: '서버주소',
  database: '데이터베이스명'
};

app.get('/api/getProcedureData/:param1/:param2', async (req, res) => {
  try {
    const { param1, param2 } = req.params;
    let pool = await sql.connect(dbConfig);
    let result = await pool.request()
      .input('inputParam1', sql.Int, param1)
      .input('inputParam2', sql.Int, param2)
      .execute('프로시저명');
    res.json(result.recordsets);  // 프로시저 결과인 recordsets를 반환
  } catch (err) {
    console.error(err);
    res.status(500).send(err);
  }
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});

React의 App.js:

javascript

import React, { useState, useEffect } from 'react';
import axios from 'axios';

function Table({ data }) {
  // ...
}

function App() {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      const param1 = 1;
      const param2 = 2;
      const result = await axios(`/api/getProcedureData/${param1}/${param2}`);
      setData(result.data);
    };

    fetchData();
  }, []);

  return (
    <div className="App">
      {data.map((tableData, index) => (
        <Table key={index} data={tableData} />
      ))}
    </div>
  );
}

export default App;

이 예제에서는 /api/getProcedureData/:param1/:param2 엔드포인트를 통해 2개의 파라미터를 저장 프로시저에 전달합니다. 그 후, 저장 프로시저의 결과를 받아 프론트엔드에서 표시합니다. 결과는 여러 개의 테이블로 반환될 수 있으므로, 각 테이블에 대해 Table 컴포넌트를 사용하여 표시합니다. Table 컴포넌트는 필요에 따라 작성해주세요.