// MGSPMonitorControl/App.xaml.cs
using System;
using System.Configuration; 
using System.Windows;
using MGSPMonitorControl.DataAccess; 
using MGSPMonitorControl.Services;  
using MGSPMonitorControl.ViewModels; 
// using MGSPMonitorControl.Views; // MainWindow가 루트에 있다면 이 using은 MainWindow에 대해선 불필요
using System.Threading.Tasks;     

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        private IDatabaseService _databaseService;
        private IBrokerClientService _brokerClientService;
        private MainViewModel _mainViewModel; // ViewModel 참조 유지

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Application OnStartup.");

            SetupGlobalExceptionHandling(); 

            InitializeAndRunApplication();
        }

        private async void InitializeAndRunApplication() 
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] InitializeAndRunApplication - Attempting to start.");
            bool servicesInitializedSuccessfully = false;
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Initializing DatabaseService...");
                _databaseService = new DatabaseService(); 
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] DatabaseService initialized (or attempted).");
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Initializing BrokerClientService...");
                _brokerClientService = new BrokerClientService(); 
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] BrokerClientService initialized (or attempted).");
                servicesInitializedSuccessfully = true; // 여기까지 오면 기본 생성은 성공
            }
            catch (ConfigurationErrorsException cex)
            {
                ShowCriticalErrorAndShutdown($"Application configuration error: {cex.Message}\nPlease check App.config (connection string and BrokerAddress).\nApplication will exit.", "Configuration Error");
                return;
            }
            catch (Exception ex) 
            {
                 ShowCriticalErrorAndShutdown($"Critical error initializing services: {ex.ToString()}\nApplication will exit.", "Service Initialization Error");
                return;
            }

            // 서비스 초기화가 성공했든 (App.config를 못읽어 null일 수 있음) MainViewModel 생성 시도
            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating MainViewModel...");
                // MainViewModel은 null 서비스를 받을 수 있도록 수정됨
                _mainViewModel = new MainViewModel(_databaseService, _brokerClientService);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainViewModel created.");
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating MainWindow...");
                // MainWindow가 루트에 있다면 new MainWindow(), Views 폴더면 new Views.MainWindow()
                var mainWindow = new MainWindow(_mainViewModel); // ViewModel 주입
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainWindow created.");
                
                this.MainWindow = mainWindow;
                mainWindow.Show();
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainWindow shown.");

                // BrokerClientService가 null이 아니고, 아직 연결 시도를 안했다면 여기서 시도
                if (_brokerClientService != null && !_brokerClientService.IsConnected && servicesInitializedSuccessfully)
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Post-UI Show: Attempting Broker connection...");
                    await _brokerClientService.ConnectAsync(); // 여기서의 결과는 ViewModel 내부에서 처리
                }
            }
            catch (Exception ex) // MainViewModel 또는 MainWindow 생성/표시 중 예외
            {
                 ShowCriticalErrorAndShutdown($"Critical error creating or showing main UI: {ex.ToString()}\nApplication will exit.", "UI Initialization Error");
            }
        }
        
        private void SetupGlobalExceptionHandling()
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Setting up global exception handlers.");
            this.DispatcherUnhandledException += (s, e) =>
            {
                string errorMessage = $"[UNHANDLED UI THREAD EXCEPTION]\n{e.Exception.ToString()}";
                Console.WriteLine(errorMessage);
                try { MessageBox.Show(errorMessage, "Critical UI Error - Application May Close", MessageBoxButton.OK, MessageBoxImage.Error); } catch {}
                // Handled를 true로 하면 앱이 계속 실행될 수 있으나, 불안정한 상태일 수 있음.
                // false로 두거나, 여기서 Shutdown()을 호출하는 것이 더 안전할 수 있음.
                e.Handled = false; // false로 두어 WPF 기본 예외 처리기가 동작하게 하거나, true 후 Shutdown()
                // Shutdown(); // 필요하다면 여기서 강제 종료
            };

            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                string errorMessage = $"[UNHANDLED BACKGROUND TASK EXCEPTION]\n{e.Exception.ToString()}";
                Console.WriteLine(errorMessage);
                // 파일 로그 등에 심각한 오류로 기록
                // 이 예외는 UI 스레드가 아니므로 UI 요소를 직접 건드리면 안됨.
                e.SetObserved(); // 예외를 관찰한 것으로 처리하여 프로세스 강제 종료 방지 (주의해서 사용)
            };
        }
        
        private void ShowCriticalErrorAndShutdown(string message, string title = "Application Startup Error")
        {
            Console.WriteLine($"[FATAL ERROR - SHUTDOWN] {title}: {message}"); 
            try { MessageBox.Show(message, title, MessageBoxButton.OK, MessageBoxImage.Error); } catch {}
            
            // 안전하게 애플리케이션 종료
            if (Application.Current != null)
            {
                // Dispatcher가 종료 중이거나 null이 아닐 때만 Invoke 시도
                if (Application.Current.Dispatcher != null && !Application.Current.Dispatcher.HasShutdownStarted && !Application.Current.Dispatcher.HasShutdownFinished)
                {
                    Application.Current.Dispatcher.Invoke(() => Application.Current.Shutdown(-1));
                }
                else if (Application.Current.Dispatcher == null || Application.Current.Dispatcher.HasShutdownStarted || Application.Current.Dispatcher.HasShutdownFinished)
                {
                    // Dispatcher 사용 불가 시, 직접 종료 시도 (이미 종료 중일 수 있음)
                    try { Environment.Exit(-1); } catch { /* 마지막 시도 */ }
                }
            }
            else { try { Environment.Exit(-1); } catch { /* 마지막 시도 */ } }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Application OnExit. ExitCode: {e.ApplicationExitCode}");
            _mainViewModel?.Dispose(); // MainViewModel이 IDisposable을 구현했다면
            (_brokerClientService as IDisposable)?.Dispose(); // BrokerClientService 정리
            // (_databaseService as IDisposable)?.Dispose(); // DatabaseService가 IDisposable 구현 시

            Console.WriteLine("MGSPMonitorControl application resources cleaned up and exited.");
            base.OnExit(e);
        }
    }
}