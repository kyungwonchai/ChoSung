네, 아주 좋은 생각입니다. 애플리케이션의 핵심 동작이 특정 폴더의 파일을 계속 수정하는 것이라면, 그 폴더의 마지막 수정 시간을 감시하는 것이 가장 직접적이고 확실한 방법입니다.

이전 단계에서 만들었던 long_running_checker.sh와 long-checker.service는 이제 필요 없습니다. 실제 애플리케이션이 그 역할을 대신하기 때문입니다.

전체 과정을 훨씬 더 간단하게 만들 수 있습니다.

수정된 실행 순서
1단계: (선택) 이전에 만든 검사 서비스 중지 및 비활성화
이전 단계에서 만들었던 long-checker.service는 더 이상 필요 없으므로 중지하고 비활성화합니다.

Bash

# 1. 서비스 중지
sudo systemctl stop long-checker.service

# 2. 서비스 비활성화 (부팅 시 자동 실행 방지)
sudo systemctl disable long-checker.service
2단계: Watchdog용 '폴더 시간' 확인 스크립트 생성
quick_heartbeat_check.sh를 폴더 버전으로 수정합니다.

Bash

# 1. 스크립트 파일 생성 (이름을 바꿔서 명확하게 합시다)
sudo nano /etc/watchdog.d/quick_folder_check.sh

# 2. 아래 내용 붙여넣기
#!/bin/bash

# ▼▼▼ 감시할 폴더의 절대 경로를 여기에 넣으세요 ▼▼▼
TARGET_FOLDER="/path/to/your/important/folder"
# ▲▲▲ 감시할 폴더의 절대 경로를 여기에 넣으세요 ▲▲▲

# 허용할 최대 지연 시간(초). 이 시간 이상 폴더 수정이 없으면 재부팅.
MAX_DELAY=300

# 폴더가 존재하지 않으면 즉시 실패
if [ ! -d "$TARGET_FOLDER" ]; then
    exit 1
fi

# 폴더의 마지막 수정 시간과 현재 시간의 차이를 초 단위로 계산
LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))

# 시간 차이가 허용된 지연 시간을 초과하면 실패(exit 1)
if [ $TIME_DIFF -gt $MAX_DELAY ]; then
    exit 1
else
    exit 0
fi

# 3. 저장 후 나와서 실행 권한 부여
sudo chmod +x /etc/watchdog.d/quick_folder_check.sh
3단계: Watchdog 설정 파일 수정
Watchdog이 새로 만든 폴더 확인 스크립트를 바라보도록 경로만 수정합니다.

Bash

# 1. 설정 파일 열기
sudo nano /etc/watchdog.conf

# 2. test-binary 경로를 새 스크립트 이름으로 변경
test-binary = /etc/watchdog.d/quick_folder_check.sh
watchdog.conf 파일의 다른 설정(interval=10, watchdog-timeout=15 등)은 그대로 두시면 됩니다.

4단계: Watchdog 서비스 재시작
Bash

# 설정 적용을 위해 Watchdog 재시작