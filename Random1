웹 테이블 자동 행 높이의 역사와 BI 솔루션 편집 가능 테이블의 고정 행 높이 문제 심층 분석
1. 서론
본 보고서는 웹 개발 환경에서의 테이블 자동 행 높이 기능의 발전 과정과 특정 Business Intelligence(BI) 매트릭스 내 "AUD 솔루션"의 입력 가능 테이블에서 나타나는 고정 행 높이 문제에 대한 사용자의 질의를 해결하는 것을 목표로 한다. 사용자는 웹 개발 자바스크립트에서 표의 행 높이가 자동으로 조절된 시점과, 특정 BI 솔루션의 입력 테이블에서 행 높이가 균일하게 고정되어 발생하는 불편함의 원인 및 해결책에 대해 상세한 조사를 요청했다.

보고서는 먼저 웹 테이블의 행 높이 조절 기능이 HTML 초기부터 CSS, 그리고 최신 JavaScript 라이브러리에 이르기까지 어떻게 발전해 왔는지 살펴볼 것이다. 이후, BI 도구, 특히 데이터 입력 및 쓰기 저장(write-back) 기능이 있는 편집 가능 테이블에서 행 높이가 고정되는 일반적인 이유를 분석하고, 이것이 보편적인 현상인지 검토할 것이다. 마지막으로, 사용자가 겪고 있는 BI 환경에서의 고정 행 높이 문제에 대한 잠재적인 해결책이나 대안을 제시할 것이다.

"AUD 솔루션"이라는 용어에 대한 명확한 정의가 필요하다. 사용자가 "BI matrix", "입력가능한 표"라는 맥락에서 언급한 점을 고려할 때, 본 보고서는 "AUD 솔루션"을 AutoCAD Utility Design(AUD)과 같은 특정 CAD 소프트웨어로 해석하기보다는, BI 시스템 내 데이터 입력, 쓰기 저장 또는 감사 가능한 테이블 구성 요소/기능으로 해석할 것이다. AutoCAD Utility Design도 "AUD"라는 약어를 사용하지만, 사용자가 설명한 "BI matrix의 입력가능한 표"는 BI 도구의 일반적인 기능에 더 가깝다. 이러한 해석은 고정 행 높이로 인한 불편함이 BI 도구에서 자주 제기되는 문제점이라는 사실과도 부합한다. 따라서 본 조사는 BI 도구의 편집 가능 테이블에서의 행 높이 동작에 초점을 맞출 것이다. 예를 들어, "Agile User Data"  또는 Oracle의 "Audit and Compliance Management" , "Unified Audit Trail"  등 데이터 시스템에서 "Audit" 관련 용어가 광범위하게 사용되는 것을 볼 때, "AUD"는 해당 BI 시스템 내 특정 모듈이나 기능(예: "Audited User Data")을 지칭하거나, 사용자가 기억하는 부정확한 용어일 가능성이 있다.   

2. 웹 개발에서의 자동 행 높이: 발전 과정
웹 페이지에서 표(table)는 데이터를 구조화하여 보여주는 핵심 요소이다. 표의 가독성과 사용성을 높이는 중요한 요소 중 하나는 내용에 따라 행의 높이가 유동적으로 조절되는 기능이다. 이러한 자동 행 높이 기능은 웹 기술의 발전과 함께 점진적으로 개선되어 왔다.

2.1. 초기 HTML 테이블과 기본 CSS 제어
초기 HTML <table> 요소는 내용에 따라 행 높이가 어느 정도 자동으로 조절되었으나, 개발자가 명시적으로 제어할 수 있는 수단은 매우 제한적이었다. 브라우저의 렌더링 엔진이 기본적으로 높이를 결정했다.   

CSS가 등장하면서 table-layout 속성을 통해 테이블 레이아웃 방식을 제어할 수 있게 되었다.

auto (기본값): 브라우저는 셀 내용에 맞춰 테이블과 셀의 너비를 계산한다. 내용이 여러 줄로 나뉘면 행 높이도 영향을 받는다. 이 방식은 큰 테이블의 경우 모든 내용을 읽어야 레이아웃을 확정할 수 있어 렌더링 속도가 느릴 수 있다.   
fixed: 테이블 및 열 너비는 width 속성이나 첫 번째 행 셀의 너비에 의해 고정된다. 이 고정된 너비 내에서 내용이 배치되면서 행 높이가 결정된다. 전체 내용을 파악하지 않고도 레이아웃을 빠르게 렌더링할 수 있는 장점이 있다.   
테이블 행(<tr>)이나 셀(<td>)에 직접 height 속성을 CSS로 지정하여 높이를 제어하려는 시도는 역사적으로 브라우저 간 일관성이 부족하거나 신뢰성이 떨어졌다. 특히 내용이 넘칠 때 콘텐츠에 맞춰 자동으로 높이가 조절되도록 하는 것은 단순 height 속성만으로는 어려움이 많았다. 2013년경의 Stack Overflow 논의들을 보면, 개발자들이 height: auto나 height: 100% 등을 사용하여 테이블 행 높이를 자동으로 조절하려 할 때 겪었던 어려움과 브라우저 간 비일관적인 동작을 확인할 수 있다. 이는 초기에 단순 CSS height 속성만으로는 안정적인 동적 행 높이 조절이 어려웠음을 시사하며, 개발자들은 종종 JavaScript 기반의 해결책에 의존해야 했다.   

2.2. CSS Grid Layout의 등장
레이아웃 제어에 있어 획기적인 발전은 CSS Grid Layout의 도입이었다. 특히 grid-auto-rows CSS 속성은 암시적으로 생성된 그리드 행 트랙의 크기를 지정할 수 있게 해준다. 이 기능은 2020년 7월부터 대부분의 주요 브라우저에서 광범위하게 지원되기 시작했다.   

grid-auto-rows에 사용될 수 있는 주요 키워드 값은 다음과 같다:

auto: 해당 트랙에 있는 아이템 중 가장 큰 max-content 크기 또는 가장 큰 min-content 크기에 의해 결정되며, 종종 minmax(min-content, max-content)와 유사하게 동작한다. auto로 크기가 지정된 트랙은 남은 공간을 채우기 위해 늘어날 수도 있다.   
min-content: 내용이 넘치지 않는 선에서 가능한 가장 작은 크기이다.
max-content: 명시적인 줄 바꿈을 제외하고, 내용이 줄 바꿈 없이 차지할 수 있는 가장 큰 크기이다.
CSS Grid는 내용 기반의 자동 행 높이를 구현하는 훨씬 강력하고 표준적인 CSS 메커니즘을 제공함으로써, 기존 테이블 레이아웃 방식의 한계를 크게 개선했다. 2020년 7월이라는 시점은 "어느 시절부터 있었노"라는 사용자의 질문에 대한 중요한 답변이 될 수 있다.

2.3. JavaScript의 지속적인 역할: DOM 조작과 데이터 그리드 라이브러리
강력한 CSS 기능이 등장하기 전, JavaScript는 종종 DOM(Document Object Model) 요소의 크기를 내용 렌더링 후에 직접 검사하고 설정하는 방식으로 행 높이를 수동으로 계산하고 조절하는 데 사용되었다. 이는 특히 복잡한 테이블에서 성능 저하를 유발할 수 있었다.

현대의 JavaScript 데이터 그리드 라이브러리들은 자체적으로 정교한 행 높이 관리 기능을 제공한다:

AG Grid:
autoHeight 컬럼 정의 속성: 특정 컬럼에 autoHeight=true를 설정하면, 해당 컬럼의 내용에 따라 그리드가 행 높이를 계산한다 (주로 wrapText와 함께 사용됨). 다만, 이 기능은 추가적인 크기 리스너를 사용하고 해당 컬럼에 대한 컬럼 가상화를 중단시키므로 성능에 부정적인 영향을 줄 수 있다.   
getRowHeight(params) 콜백: 프로그래밍 방식으로 각 행의 높이를 설정할 수 있는 세밀한 제어 기능을 제공한다.   
기본 행 높이는 테마에 따라 결정되지만 (예: Quartz 테마에서 42px), 전역적으로 또는 행별로 재정의할 수 있다.   
autoHeight 사용 시 스크롤 동작: 스크롤 중 행 높이가 변경되면 수직 스크롤 범위가 동적으로 변할 수 있으며, 스크롤 막대가 마우스를 정확히 따라가지 않을 수 있다.   
Handsontable:
autoRowSize: true 플러그인: DOM에서 실제 행 높이를 측정한다. 정확하지만 런타임 성능에 영향을 미친다.   
rowHeights 옵션: 숫자(모든 행에 고정 높이), 배열(특정 행에 대한 높이 지정), 또는 함수(행 인덱스/내용 기반 동적 높이)를 값으로 가질 수 있다.   
기본 행 높이는 테마에 따라 결정되며(예: 23px-37px), autoRowSize나 명시적인 rowHeights가 사용되지 않는 한 내용이 기본 높이에 맞는다고 가정한다.   
KendoReact Data Grid & MUI DataGrid: 이 라이브러리들도 편집 가능한 그리드 컴포넌트와 다양한 API를 제공하지만, 제공된 자료에서는 AG Grid나 Handsontable만큼 다중 줄 텍스트에 대한 "자동 행 높이" 관련 구체적인 내용이 두드러지지는 않는다. 주로 편집 모드와 데이터 처리에 중점을 둔다.   
JavaScript 기반의 자동 행 높이 기능은 강력하지만, 성능상의 트레이드오프가 따르는 경우가 많다. AG Grid 와 Handsontable  모두 자동 행 크기 조절 기능 활성화 시 성능 문제를 명시적으로 언급한다. AG Grid는 autoHeight가 해당 열의 가상화를 중단시킨다고 지적하고, Handsontable은 autoRowSize가 "런타임 성능에 영향"을 미친다고 밝히고 있다. 이는 대규모 데이터셋을 다룰 때 특히 중요한 고려 사항이며, 이러한 경향은 BI 도구에서도 유사하게 나타난다.   

다음 표는 웹 테이블에서 자동 행 높이 기능의 발전 과정을 요약한 것이다.

표 1: 웹 테이블 자동 행 높이 기능의 발전 과정

기술/방법	주요 특징 및 제어 방식	주요 사용/광범위 지원 시기	관련 자료
기본 HTML <table>	암묵적으로 내용 기반, 제한적인 명시적 제어	CSS 표준화 이전	
CSS table-layout: auto	기본값, 브라우저가 전체 내용 기반으로 계산, 느릴 수 있음	CSS1/CSS2 (1990년대)	
CSS table-layout: fixed + td/th height	빠르지만, 자동 맞춤을 위한 높이 제어 비일관적	CSS2 (1998년)	
JavaScript DOM 조작	높이의 수동 계산 및 설정	2000년대 초반 이후 (현대 CSS 이전)	
CSS Grid (display: grid, grid-auto-rows)	내용 기반 행 크기 조절을 위한 강력한 네이티브 CSS (예: auto, min-content, max-content)	2020년 7월 이후 광범위 지원	
JavaScript 데이터 그리드 라이브러리 (예: AG Grid, Handsontable)	autoHeight/autoRowSize 속성, 콜백, 종종 DOM 측정 포함, 성능 고려 필요	2010년대 중반 이후 (성숙한 라이브러리 기준)	
  
이 표는 개발자들이 웹 테이블의 행 높이를 어떻게 제어하고 자동화해왔는지 연대순으로 명확하게 보여주며, 사용자의 "어느 시절부터 있었노"라는 질문에 직접적으로 답한다. 암묵적인 브라우저 동작에서 명시적인 CSS 제어, 그리고 JavaScript 라이브러리의 역할로 이어지는 과정을 보여준다.

3. BI 편집 가능 데이터 그리드의 고정 행 높이 조사 ("AUD 솔루션" 맥락)
사용자가 언급한 "BI matrix의 AUD 솔루션에서 개발한 어떤 입력가능한 표"는 BI 환경 내 데이터 입력, 쓰기 저장(write-back) 또는 감사 가능한 테이블 기능을 지칭하는 것으로 해석된다. 이러한 시스템에서 행 높이가 고정되는 현상은 드물지 않으며, 그 배경에는 여러 요인이 복합적으로 작용한다.

3.1. BI 환경에서의 "AUD 솔루션" 정의
앞서 언급했듯이, 본 보고서는 "AUD 솔루션"을 AutoCAD Utility Design이 아닌 BI 플랫폼 내 데이터 입력 관련 기능으로 간주한다. 이러한 기능의 예시는 다음과 같다:   

Power BI와 Inforiver 같은 사용자 정의 시각화 도구 (Inforiver는 "EDITable" 및 "Writeback Matrix" 제공 )   
MicroStrategy Transaction Services 그리드    
SAP BusinessObjects Web Intelligence 입력 양식/편집 가능 쿼리    
Retool , Appian , Jedox , Astrato  등 데이터 입력을 제공하는 기타 플랫폼   
Benchling Intelligence의 "Flexible data entry" 나 Oracle의 "Audit and Compliance Management"  또한 감사 가능/입력 데이터 개념과 관련된다.   
"AUD"라는 약어는 사용자의 특정 BI 도구 내 모듈(예: "Audit")이나 기능의 내부 명칭이거나, 혹은 사용자가 부정확하게 기억하는 용어일 수 있다. "BI matrix"와 "입력가능한 표"라는 명확한 맥락을 고려할 때, AutoCAD에 초점을 맞추는 것은 사용자의 핵심적인 문제, 즉 BI 편집 가능 테이블의 고정 행 높이 문제를 해결하는 데 도움이 되지 않을 것이다. 따라서 본 보고서는 BI 도구의 편집 가능하거나 감사 가능한 데이터 입력 그리드에서의 행 높이 동작에 집중한다.

3.2. BI 편집 가능 그리드에서 행 높이가 고정되거나 균일한 일반적인 이유
BI 도구의 편집 가능 그리드에서 행 높이가 고정되거나 균일하게 유지되는 데에는 다음과 같은 주요 이유들이 있다:

성능 최적화:
BI 환경에서는 대용량 데이터셋을 다루는 경우가 흔하다. 수천, 수백만 행에 대해 동적으로 행 높이를 계산하는 것, 특히 셀 내용이 복잡한 경우(예: 서식 있는 텍스트, 내장된 컨트롤)에는 계산 비용이 매우 높아 렌더링 속도와 상호작용성을 저해할 수 있다.   
대용량 데이터를 처리하기 위해 BI 그리드에서 흔히 사용되는 행 가상화(row virtualization) 기술은 스크롤 위치를 계산하고 보이는 행만 렌더링하기 위해 미리 행 높이를 알아야 하는 경우가 많다. 동적 높이는 이러한 가상화 과정을 복잡하게 만든다.   
UI 일관성 및 예측 가능성:
고정된 행 높이는 안정적이고 예측 가능한 레이아웃을 보장한다. 사용자는 UI가 어떻게 보일지 예상할 수 있으며, 스크롤이나 데이터 업데이트 중에 UI가 갑자기 "점프"하거나 재배치되는 현상(사용자를 혼란스럽게 할 수 있음)을 방지한다.   
특히 여러 시각적 객체가 조화롭게 공존해야 하는 대시보드 환경에서 정렬을 유지하고 깔끔하며 전문적인 모양을 보장한다.   
편집 가능 컴포넌트의 기술적 복잡성:
다중 줄 텍스트 입력에 따라 동적으로 크기가 조절되는 셀 내부에 편집 가능한 입력 필드(텍스트 상자, 드롭다운, 날짜 선택기 등)를 렌더링하는 것은 컴포넌트 내부 로직에 상당한 복잡성을 추가한다.
동적으로 크기가 조절되는 편집 가능한 셀에서 포커스, 커서 위치, 입력 이벤트를 관리하는 것은 기술적으로 어려운 과제이다.
데이터 입력 워크플로우 고려 사항:
대량 데이터 입력의 경우, 일부 내용이 처음에 잘리더라도(전체 내용을 보려면 클릭/포커스 필요) 일관된 행 높이가 리듬감 있는 입력을 위해 일부 사용자에게 선호될 수 있다.
하지만 사용자의 "매우불편하던데"라는 표현은 이것이 사용자의 선호가 아님을 시사한다.
BI 그리드 설계의 핵심에는 성능과 사용성 간의 균형 문제가 자리 잡고 있다. (일반 DataGrid), (AG Grid), 13 등의 자료는 자동/동적 크기 조절이 성능 비용과 직결됨을 명확히 보여준다. BI 도구는 방대한 양의 데이터를 처리하므로 성능이 가장 중요한 관심사 중 하나이다. 고정 행 높이는 렌더링과 가상화를 단순화하여  대규모 테이블에서 더 빠른 로드 시간과 부드러운 스크롤을 가능하게 한다. 그러나 이는 사용자가 지적한 것처럼, 특히 다중 줄 텍스트의 경우 편집 가능한 셀의 모든 내용을 보고자 하는 사용성 요구와 직접적으로 충돌한다. 결과적으로 BI 도구 공급업체는 종종 기본적으로 성능과 안정성을 선택하며, 동적 행 높이 조절 기능을 제한적으로 제공하거나 특정 구성 하에서만 지원하는 경향이 있다.   

3.3. 보편성: BI 편집 가능 그리드에서 고정 행 높이가 일반적인가?
일반적으로 많은 BI 도구, 특히 기본 테이블/매트릭스 시각화는 편집 가능한 셀에 대해 콘텐츠에 따라 완전히 동적으로 자동 조절되기보다는 고정되거나 균일하게 조절 가능한(예: 패딩을 통해) 행 높이를 선호하는 경향이 있다.

Power BI 네이티브 매트릭스: 주로 고정되며, 'Row Padding'으로 조절된다. 텍스트 줄 바꿈으로 높이가 증가할 수 있지만, 입력 중인 내용에 실시간으로 "자동 맞춤"되는 것은 아니다.   
MicroStrategy: 'Autofit' 기능을 제공하지만, 편집 가능한 Transaction Grids에 적용될 때는 신중한 검토가 필요하다. 과거 문제 사례 는 어려움이 있었음을 시사한다.   
SAP BO Web Intelligence: 'Autofit height to content' 기능이 있지만, 알려진 제한 사항과 성능 문제가 있다.   
특수 컴포넌트/플랫폼:
Inforiver (Power BI 사용자 정의 시각화): 'Row Height' 설정과 'Word Wrap' 기능을 제공한다. 보고 및 쓰기 저장용으로 설계되었다.   
Retool: "내용에 맞게 확장되는 동적 행 높이"를 명시적으로 지원하지만 , 프로그래밍 방식 제어에 대한 버그가 보고된 바 있다.   
Appian: 그리드 높이는 "AUTO" 또는 고정 값일 수 있다. "AUTO" 높이 사용 시 많은 행이 있는 그리드에서는 셀 내 줄 수를 제한하도록 권장하는데, 이는 확장 가능하지만 실제적인 한계가 있음을 암시한다.   
OutSystems Data Grid: RowHeight는 고정 픽셀 설정이다.   
Jedox Dynatables: 스타일시트에 정의된 고정 행 높이를 사용한다.   
결론적으로, 절대적인 것은 아니지만 주류 BI 도구의 표준 편집 가능 그리드에서는 성능 및 UI 안정성을 이유로 제어되거나 고정된 행 높이를 사용하는 경향이 일반적이다. 보다 유연하고 진정으로 동적인 자동 조절 행 높이는 특화된 데이터 입력 플랫폼(예: Retool, Appian 일부)에서 더 자주 발견되거나 특정 구성/컴포넌트(예: Power BI Paginated Reports 또는 사용자 정의 시각화)를 필요로 한다.

4. 특정 BI 도구 및 편집 가능 그리드 시스템에서의 행 높이 관리
사용자가 경험한 고정 행 높이 문제는 특정 BI 도구 또는 해당 도구 내의 특정 컴포넌트와 관련이 있을 가능성이 높다. 주요 BI 도구 및 관련 시스템에서 편집 가능한 그리드의 행 높이가 어떻게 관리되는지 구체적으로 살펴본다.

4.1. Microsoft Power BI
Power BI는 다양한 시각화 옵션을 제공하지만, 편집 가능한 테이블에서의 행 높이 관리는 시각화 유형에 따라 다르다.

네이티브 매트릭스/테이블 시각화:

행 높이 제어: 주로 서식 옵션의 '행 안쪽 여백(Row Padding)'을 통해 이루어지며, 이는 모든 행에 균일한 안쪽 여백을 적용한다. 이는 고정된 조정이며, 내용에 따라 동적으로 변하지 않는다.   
텍스트 줄 바꿈(Text Wrapping): 값과 머리글에 대해 활성화할 수 있다. 텍스트가 여러 줄로 줄 바꿈되면 행은 이를 수용하기 위해 확장되지만, 이는 일반적으로 렌더링 시점에 이루어지며 편집 가능한 컨텍스트에서 텍스트 입력 중 실시간으로 동적으로 조정되는 것은 아니다 (네이티브 Power BI 시각화는 직접적인 데이터 입력을 주 목적으로 하지 않는다).   
제한 사항: 표준 시각화에는 내용 길이에 따라 행 높이를 자동으로 조정하는 내장 기능이 없으며, 특히 편집 가능한 시나리오에서는 더욱 그렇다. 사용자 토론에서도 행 머리글에 대한 이러한 제한 사항이 확인된다.   
행 머리글 높이 해결 방법: 한 Reddit 사용자는 줄 바꿈된 텍스트를 위해 머리글 행 높이를 강제로 지정하고자 더미 열에 두 글자 제목을 추가하는 방법을 제안했다. 이는 머리글에 대한 편법이며 데이터 행에는 적용되지 않는다.   
페이지를 매긴 보고서 (Power BI Report Builder):

CanGrow 속성: 테이블 셀(테이블릭스 데이터 영역) 내의 텍스트 상자에는 CanGrow 속성이 있다. 이 속성이 True(텍스트 상자의 기본값)이면 텍스트 상자와 결과적으로 행이 내용을 수용하기 위해 세로로 확장될 수 있다. False이면 높이가 고정된다.   
관련성: 페이지를 매긴 보고서는 픽셀 단위의 완벽한 레이아웃과 인쇄를 위해 설계되었으며, 표준 Power BI 시각화보다 동적 콘텐츠 확장에 대한 더 나은 제어 기능을 제공한다. 동적 행 높이가 중요한 경우 핵심 대안이 될 수 있다.
사용자 지정 시각적 개체 (예: Inforiver):

많은 사용자 지정 시각적 개체는 테이블 속성에 대한 더 세분화된 제어를 제공한다. Inforiver는 보고, 분석 및 쓰기 저장(write-back)을 위한 주목할 만한 예이다. Inforiver에 대한 자세한 내용은 다음 하위 섹션에서 다룬다.   
4.2. Inforiver (Power BI 내 잠재적 "AUD 솔루션")
Inforiver는 Power BI 내에서 데이터 입력 및 쓰기 저장 기능을 제공하는 "EDITable" 및 "Writeback Matrix" 제품을 통해 사용자의 "AUD 솔루션"에 해당할 수 있다.   

행 높이 관리:

기본 서식: '행 높이(Row Height)' 설정을 사용하여 원하는 높이를 지정할 수 있다.   
단어 줄 바꿈(Word Wrap): 긴 텍스트를 여러 줄로 줄 바꿈하여 가독성을 향상시키는 옵션이 제공된다.   
머리글 단어 줄 바꿈(Header Word Wrap): 특히 머리글의 경우, 활성화 시 셀 높이에 따라 내용이 줄 바꿈된다.   
다중 줄 텍스트 입력(Multi-line Text Input): 텍스트 입력 열에 대해 지원된다.   
PDF 내보내기: "정밀(Precise)" 단어 줄 바꿈 옵션은 넘치는 행이 줄 바꿈되어 PDF 내보내기에서 완전히 보이도록 보장하며, 이는 잘릴 수 있는 "자동(Auto)" 옵션과 대조된다. 이는 시스템이 전체 내용 높이를 결정할 수 있음을 시사한다.   
디자인 예시: 제공된 전자책의 디자인 예시들은 "데이터에 더 많은 공간을 제공하기 위해 행 높이를 늘리거나" 또는 "더 많은 행을 채우기 위해 행 높이를 줄이는" 등의 표현을 사용하여 구성 가능하지만, 입력 중 완전히 자동적이고 동적인 조정은 아닐 수 있음을 시사한다.   
Inforiver - 사용자 경험 및 동적 동작:
단어 줄 바꿈 및 다중 줄 입력이 지원되지만 , 제공된 자료에서는 사용자가 다중 줄 텍스트를 입력할 때 편집 가능한 데이터 셀의 행 높이가 실시간으로 동적이고 자동으로 조정되는지 명시적으로 확인되지 않는다. 단어 줄 바꿈은 정의되거나 계산된 행 높이 내에서 발생하며, 이 높이는 렌더링 시 또는 입력 완료 후에 조정될 가능성이 더 높다. "정밀(Precise)" PDF 내보내기 기능 은 Inforiver가 전체 내용 높이를 계산할 수 있음을 보여준다. '행 높이(Row Height)' 설정 은 기본 고정 높이 또는 수동 설정 높이를 암시한다. 사용자의 "불편함"과 관련하여 가장 중요한 점은 활성 편집 중의 동작이다. 제공된 자료만으로는 Inforiver가 텍스트 처리에 강력한 기능을 제공하지만, 입력 중 정확한 실시간 동적 조정에 대해서는 완전히 상세히 설명되지 않았으며, 이는 구성 가능한 동작이거나 입력 후/렌더링 시 업데이트되는 동작일 수 있다. 사용자는 특정 Inforiver 버전/구성 내에서 이 부분을 직접 조사해야 할 수 있다.   

4.3. MicroStrategy
MicroStrategy는 그리드 시각화에 대한 다양한 서식 옵션을 제공하며, Transaction Services를 통해 편집 가능한 그리드를 구현할 수 있다.

그리드 서식 옵션:

열 및 행 '자동 맞춤(Autofit)': 그리드 옵션에서 사용자는 열과 행에 대해 '자동 맞춤'을 선택할 수 있다. 자동 열 너비가 사용되면 행 높이도 자동으로 계산된다.   
'단어 줄 바꿈(Wordwrap)': 열 내에서 텍스트를 줄 바꿈하도록 선택할 수 있다.   
고정 높이/너비: 수동 크기 조정도 가능하다.   
Transaction Services (편집 가능 그리드):

KB47992: MicroStrategy Web 9.4.x 버전에서 "Transaction services 텍스트 영역 필드가 Express 모드의 트랜잭션 그리드에서 한 줄 이상 입력 시 확장되지 않는" 문제를 설명한다. 사용자는 이전 줄에 입력한 내용을 볼 수 없었다. 이 문제는 MicroStrategy 10.1에서 수정되었다.   
KB47992의 시사점: 이 버그의 존재와 수정은 텍스트 영역(따라서 잠재적으로 행)이 확장되거나 여러 줄을 볼 수 있도록 하는 것이 예상되는 동작임을 의미한다.
입력 구성: 트랜잭션 그리드는 입력 유형 및 규칙을 구성할 수 있도록 허용한다.   
Python 사용 트랜잭션: 인라인 편집은 지원되지 않으며, 수정은 일괄적으로 이루어진다. 이는 직접적인 인라인 텍스트 입력과는 다른 행 높이 관련 영향을 미칠 수 있다.   
사용자 경험/제한 사항:
의 수정 사항은 동적 확장이 의도된 기능임을 시사한다. 그러나 일반적인 '자동 맞춤' 기능 은 복잡한 편집 가능 그리드, 특히 다양한 데이터 유형과 입력 컨트롤이 있는 경우 실제적인 제한이 있을 수 있다. MicroStrategy는 '자동 맞춤' 및 Transaction Services를 통해 동적 행 높이를 목표로 하지만, 사용자는 그리드의 복잡성, 특정 버전 및 관련된 데이터 유형에 따라 여전히 예외적인 경우나 제한 사항에 직면할 수 있다. 사용자가 경험한 고정 높이는 특정 구성, 해당 버전의 미해결 버그 또는 특정 시나리오에서 '자동 맞춤' 기능의 한계 때문일 수 있다.   

4.4. SAP BusinessObjects Web Intelligence (Webi)
SAP Webi는 보고서 내 테이블 셀 크기 조정을 위한 '자동 맞춤' 기능을 제공하지만, 몇 가지 고려 사항이 있다.

셀 크기 조정 옵션:

'내용에 맞춰 높이 자동 맞춤(Autofit height to content)' / '내용에 맞춰 너비 자동 맞춤(Autofit width to content)': 셀 서식 옵션에서 사용 가능하다. 현재 크기를 최소 크기로 유지하고 내용이 더 크면 셀 크기를 확대한다.   
고정 높이/너비: 테두리를 드래그하거나 셀 서식에서 지정하여 설정할 수 있다.   
텍스트 줄 바꿈(Text Wrapping): 활성화할 수 있다.   
제한 사항 및 성능:

성능: '자동 맞춤' 셀이 있는 문서는 고정 크기 셀이 있는 문서보다 표시하는 데 시간이 더 오래 걸린다. "불필요한 경우 자동 맞춤 피하기"라는 조언도 있다.   
HTML 콘텐츠: '내용 읽기 형식(Read content as)'이 HTML로 설정된 경우 '자동 맞춤'이 잘 작동하지 않는다.   
특수 문자: SAP 노트 2996247은 "'내용에 맞춰 높이 자동 맞춤' 옵션이 활성화된 상태에서 특수 문자가 포함된 Web Intelligence 문서의 행 높이가 잘못되는" 문제를 언급한다. 이는 잠재적인 버그나 불안정성을 나타낸다.   
대규모 데이터셋: Webi는 일반적으로 임시 분석용이며, 대규모 데이터셋(예: 50만 행 초과 또는 100만 셀)은 시스템에 부담을 줄 수 있으며, '자동 맞춤'은 이를 악화시킬 수 있다.   
사용자 경험 (편집 가능한 입력 양식/쿼리):
제공된 자료들은 '자동 맞춤'과 관련하여 편집 가능한 입력 양식보다는 보고서 표시에 더 중점을 둔다. 커뮤니티 토론에서는 사용자가 고정 설정을 사용하더라도 셀 높이 일관성에 어려움을 겪는 경우가 있음을 보여준다. SAP Webi는 자동 행 높이 조정을 위한 기능을 제공하지만, 특히 복잡하거나 대규모의 편집 가능한 입력 시나리오에서의 실제 유용성은 이러한 알려진 문제로 인해 제한될 수 있다. 사용자는 안정성과 성능을 위해 고정 높이를 사용해야 할 수 있으며, 만약 사용자의 "AUD 솔루션"이 SAP 기반이라면 원 질의에서 설명한 불편함을 초래할 수 있다.   

4.5. 기타 주목할 만한 편집 가능 그리드 플랫폼
Retool:
"내용에 맞게 확장되는 고정 또는 동적 행 높이"를 지원한다.   
2025년 2월 버그 보고서 에 따르면 프로그래밍 방식으로 행 높이를 "동적"으로 설정하는 데 문제가 있었지만(변수 기반 동적 높이 설정 버그), 수동 설정은 작동했을 수 있다.   
관련성: 내부 도구(종종 데이터 입력 포함) 구축을 위해 설계된 최신 로우코드 플랫폼에서 동적 동작에 대한 의도를 보여준다.
Appian 편집 가능 그리드:
height 매개변수는 "AUTO"(기본값) 또는 고정 값(SHORT, MEDIUM, TALL 등, 머리글 고정)일 수 있다.   
"AUTO" 사용 시, 그리드에 많은 행이 표시될 경우 Appian 문서는 "특히 다른 그리드 열에 추가 행 높이가 필요하지 않은 경우 정보를 2-3줄 이상으로 서식 지정하는 것을 피하라"고 조언한다. Appian의 "AUTO" 높이는 내용 기반 크기 조정을 시사한다. 그러나 많은 행이 있는 그리드에서 다중 줄 내용을 제한하라는 의 지침은 행이 확장될 수는 있지만, 많은 행에 걸친 과도한 확장은 전체 그리드 사용성 및 성능 문제(사용 가능한 그리드 뷰 유지)로 인해 권장되지 않음을 의미한다. Appian은 어느 정도 자동 행 높이 조정을 제공하지만, 사용자는 일부 시나리오에서 사실상의 고정 높이나 신중한 콘텐츠 관리가 필요할 수 있다.   
JavaScript 데이터 그리드 (AG Grid, Handsontable - BI 컴포넌트에 내장되거나 기반으로 사용될 경우):
2.3절에서 논의된 바와 같이, 이들은 autoHeight/autoRowSize 기능을 제공하지만 성능 고려 사항이 있다.   
이들의 동작(예: AG Grid의 autoHeight 사용 시 스크롤 점프 현상 )은 일부 BI 도구가 더 부드러운 UX를 위해 고정 높이를 선택하는 이유를 설명해준다.   
Qlik Sense:
테이블: 행 높이는 "줄(lines)" 단위(기본 크기의 배수)로 조정할 수 있다.   
피벗 테이블: 열 너비는 "내용에 맞춤(Fit to content)"이 가능하지만, 행 높이도 "줄" 단위이다.   
관련성: Qlik Sense는 임의의 내용 길이에 대한 진정한 "자동 맞춤"보다는 상대적인 행 높이 조정을 제공한다.
Jedox Dynatables:
기본 행 높이는 고정되어 있다 (예: 스타일시트당 30px). 데이터 입력을 지원한다.   
관련성: 편집 가능한 그리드에 대해 기본적으로 고정 높이를 사용하는 BI/EPM 도구의 예이다.
Power Apps (Dataverse/Canvas Apps):
Dataverse에는 "여러 줄 텍스트(Multiline Text)" 열이 존재하며, 표시를 구성할 수 있다.   
Canvas 앱의 텍스트 입력 컨트롤에는 Mode(SingleLine/MultiLine)와 Height 속성이 있다. 갤러리는 유연한 높이를 가질 수 있다.   
관련성: 사용자 지정 데이터 입력 UI에 자주 사용되는 Power Apps는 다중 줄 텍스트를 위한 도구를 제공하지만, 그리드/갤러리 컨텍스트에서의 동적 행 높이는 구성(예: 유연한 높이 갤러리)에 따라 달라진다. 표준 Dynamics 365 뷰(편집 가능 그리드 사용 가능)는 고정된 행 높이를 갖는다.   
다음 표는 선택된 BI 도구/컴포넌트에서 편집 가능한 그리드의 행 높이 관리 방식을 비교한다.

표 2: 선택된 편집 가능 BI 그리드/컴포넌트의 행 높이 관리

BI 도구/컴포넌트	편집 셀 자동 행 높이?	행 높이/텍스트 주요 설정	다중 줄 입력 시 동작/제한	관련 자료
Power BI (네이티브 매트릭스)	아니요 (안쪽 여백으로 고정)	행 안쪽 여백, 텍스트 줄 바꿈	줄 바꿈, 렌더링 시 높이 조절, 입력 중 동적 조절 아님	
Power BI (페이지를 매긴 보고서)	예	텍스트 상자 CanGrow 속성	동적 콘텐츠에 적합	
Inforiver (Power BI 사용자 정의 시각화)	구성 가능 (입력 중 완전 자동은 아닐 수 있음)	행 높이, 단어 줄 바꿈, 다중 줄 텍스트 입력, PDF 정밀 줄 바꿈	PDF 내보내기 시 정밀 줄 바꿈 가능	
MicroStrategy (Transaction Grid)	의도됨 (KB47992 수정 후)	자동 맞춤 (일반 그리드), 단어 줄 바꿈	텍스트 영역 확장되어야 함	
SAP BO Webi (편집 가능 쿼리)	예 (주의 필요)	내용에 맞춰 높이 자동 맞춤, 텍스트 줄 바꿈	성능 문제, HTML/특수 문자 버그	
Retool (테이블)	예	"동적 행 높이"	프로그래밍 방식 설정 버그 보고됨	
Appian (편집 가능 그리드)	예 ("AUTO" 높이)	"AUTO" 높이 (기본값)	많은 행에 대해 다중 줄 내용 제한 권장	
AG Grid (JS 라이브러리)	예 (구성 가능)	autoHeight, getRowHeight, wrapText	성능 영향	
Handsontable (JS 라이브러리)	예 (구성 가능)	autoRowSize, rowHeights	성능 영향	
  
이 표는 다양한 BI 도구/컴포넌트가 사용자의 핵심 문제를 어떻게 처리하는지 직접 비교한다. "원래 그런거냐"라는 질문에 대해 단일 표준이 없으며 기능이 상당히 다양함을 강조한다. 또한 사용자가 자신의 "AUD 솔루션"에서 찾아볼 수 있는 특정 설정을 제시한다.

5. 원하는 행 높이 달성을 위한 전략 및 해결 방법
BI 솔루션의 편집 가능한 테이블에서 고정된 행 높이로 인해 불편을 겪는 경우, 다음과 같은 전략과 해결 방법을 고려할 수 있다. 적용 가능한 방법은 사용 중인 특정 BI 도구 및 "AUD 솔루션"의 특성에 따라 달라진다.

5.1. 특정 BI 도구/컴포넌트 내 구성 활용
텍스트 줄 바꿈 활성화: 가장 기본적인 단계로, 관련 셀/열에 대해 텍스트 줄 바꿈(text wrapping) 기능이 켜져 있는지 확인한다. 이는 Power BI , Inforiver , MicroStrategy , SAP  등 대부분의 도구에서 지원한다.   
'자동 맞춤(Autofit)' 또는 유사 기능 활용: MicroStrategy 나 SAP 처럼 해당 기능이 제공된다면 활성화하고, 제한 사항(SAP의 성능 문제 , MicroStrategy의 과거 KB 이슈 )을 인지한 상태에서 철저히 테스트한다.   
행 안쪽 여백/고정 높이 조정: 완벽하게 동적이지 않더라도, 일반적인 다중 줄 입력을 수용할 수 있도록 행 높이나 안쪽 여백을 수동으로 늘리는 타협안을 고려할 수 있다. Power BI , Inforiver  등에서 가능하다.   
셀/테이블 스타일 속성 확인: 특정 BI 도구 내에서 테이블, 행, 셀에 사용할 수 있는 모든 서식 옵션을 탐색한다. 높이에 영향을 미치는 덜 명확한 설정이 있을 수 있다. (예: AutoCAD 테이블 스타일  - 이는 CAD용이지만 BI 도구에도 유사한 스타일 편집기가 있다).   
머리글 높이 강제 지정 (Power BI): 직접적인 제어 기능이 없을 때, 머리글에 다중 줄 텍스트가 포함된 숨겨진 열을 추가하여 일관되고 더 큰 머리글 높이를 강제로 만드는 해결 방법 은 창의적인 접근 방식을 보여준다. 이는 데이터 행이 아닌 머리글에 해당한다.   
5.2. 적절한 시각화 유형 또는 보고 도구 선택
Power BI 페이지를 매긴 보고서: "AUD 솔루션"이 Power BI 내에 있고 표시/내보내기를 위해 동적 행 높이가 매우 중요하다면, CanGrow 속성 때문에 페이지를 매긴 보고서(Paginated Reports)를 고려할 수 있다. 이는 전체 내용 가시성이 가장 중요한 "인쇄용" 또는 "문서 형식" 출력물에 더 적합하다.   
특화된 데이터 입력 플랫폼: 주 목적이 데이터 입력이고 현재 BI 도구가 너무 제한적이라면, Retool 이나 Appian 과 같이 내부 도구 구축을 위해 설계되었고 동적 레이아웃을 더 잘 지원하는 플랫폼을 고려할 수 있다 (통합 또는 전환이 가능한 경우).   
5.3. 타사 추가 기능 또는 사용자 지정 시각적 개체 활용
예: Power BI용 Inforiver: 앞서 논의된 바와 같이, Inforiver와 같은 사용자 지정 시각적 개체는 네이티브 시각적 개체보다 레이아웃 및 데이터 입력 기능에 대한 더 고급 제어 기능을 제공할 수 있다.   
기타 마켓플레이스 컴포넌트: 많은 BI 도구에는 더 나은 그리드 컴포넌트를 제공할 수 있는 타사 시각적 개체 또는 추가 기능을 위한 마켓플레이스가 있다.   
5.4. 사용자 지정 개발 (내장형/사용자 지정 솔루션에 적용 가능한 경우)
CSS 재정의: BI 솔루션이 웹 기반이고 사용자 지정 CSS를 허용하는 경우, 테이블 행 및 셀의 기본 스타일을 재정의하여 더 나은 높이 조정을 달성할 수 있다. Power BI Embedded 분석은 JavaScript API를 통해 사용자 지정 레이아웃 정의를 허용하며 , 이는 시각적 컴포넌트에 대한 CSS와 잠재적으로 상호 작용할 수 있다.   
JavaScript 솔루션: BI 컴포넌트를 내장하거나 JS 데이터 그리드 라이브러리를 직접 사용하는 사용자 지정 빌드 애플리케이션의 경우, 개발자는 동적 행 높이 로직을 구현하기 위한 완전한 제어권을 갖는다.   
Power Apps Component Framework (PCF): Dynamics 365 / Power Apps의 경우, PCF를 사용하면 HTML/CSS/TypeScript를 사용하여 동적 행 높이 기능을 갖춘 사용자 지정 그리드 컨트롤을 빌드할 수 있다.   
"올바른" 해결책은 "AUD 솔루션"의 성격과 맥락에 따라 달라진다. 다양한 BI 도구와 사용자 지정 컴포넌트가 존재하므로 모든 경우에 적용되는 단일 해결책은 없다. 만약 "AUD 솔루션"이 네이티브 Power BI 매트릭스라면 옵션은 제한적이다(안쪽 여백, 텍스트 줄 바꿈, 페이지를 매긴 보고서 고려). Inforiver라면 특정 Inforiver 설정이 적용된다. MicroStrategy라면 '자동 맞춤' 및 Transaction Services 구성이 핵심이다. 내장된 그리드가 있는 사용자 지정 웹 앱이라면 CSS/JS가 옵션이 될 수 있다. 따라서 사용자는 가장 관련성 높은 전략을 적용하기 위해 자신이 다루고 있는 "AUD 솔루션"의 종류를 파악하는 것이 중요하다.

6. 결론 및 권고 사항
본 보고서는 웹 개발 환경에서의 테이블 자동 행 높이 기능의 역사와 BI 솔루션 내 편집 가능한 테이블, 특히 사용자가 언급한 "AUD 솔루션"에서의 고정 행 높이 문제에 대해 심층적으로 분석했다.

6.1. 주요 분석 결과 요약
웹 개발에서 자동 행 높이 기능은 초기 HTML 테이블의 기본적인 내용 기반 크기 조절에서 시작하여, CSS Grid와 같은 정교한 네이티브 CSS 제어 방식(2020년 7월경부터 광범위하게 사용 ) 및 강력한 JavaScript 라이브러리로 발전해왔다.   
BI 편집 가능 그리드(사용자가 언급한 "AUD 솔루션"의 가능성이 높은 형태)에서는 대용량 데이터 처리 성능, UI 안정성, 그리고 편집 가능한 컴포넌트를 동적으로 렌더링하는 기술적 복잡성 때문에 고정되거나 균일하게 조절되는 행 높이가 일반적이다. 이는 종종 사용자가 겪는 불편함의 원인이 된다.   
BI 도구별 행 높이 관리 기능은 매우 다양하다. 일부 도구는 '자동 맞춤(Autofit)' 기능을 제한적으로 제공하고(예: MicroStrategy , SAP ), 일부는 특정 보고서 유형(예: Power BI 페이지를 매긴 보고서 )에 의존하며, 또 다른 일부는 사용자 지정 시각화나 컴포넌트(예: Inforiver , Retool )를 통해 해결책을 제시한다.   
6.2. 사용자 질의에 대한 직접적인 답변
"웹개발하는 자바스크립트에서 표의 행높이가 자동으로 되는건 어느시절부터있었노" (웹 개발 자바스크립트에서 표의 행 높이가 자동으로 되는 것은 어느 시절부터 있었나?): JavaScript는 DOM 조작을 통해 항상 이러한 기능을 구현할 수 있었지만, CSS Grid와 같이 강력하고 표준적인 CSS 해결책은 2020년 7월경부터 널리 사용 가능하게 되었다. JavaScript 라이브러리들은 그 이전부터 고급 기능을 제공했지만, 성능상의 절충이 필요했다.   
"bi matrix의 aud솔루션에서 개발한 어떤 입력가능한 표를 보니까 행높이를 균일하게 고정만가능해서 매우불편하던데 이건 원래그런거냐 대책없냐" (BI 매트릭스의 AUD 솔루션에서 개발한 어떤 입력 가능한 표를 보니까 행 높이를 균일하게 고정만 가능해서 매우 불편하던데, 이건 원래 그런 것이냐, 대책은 없느냐?):
앞서 설명한 이유들로 인해 많은 표준 BI 편집 가능 그리드에서 이는 일반적인 동작("원래 그런거냐")이다.
해결책("대책없냐")은 존재하지만, 사용 중인 도구에 따라 다르다 (5절 전략 및 해결 방법 참조).
6.3. 사용자를 위한 권고 사항
사용자가 겪고 있는 고정 행 높이 문제를 해결하기 위해 다음 단계를 따를 것을 권고한다:

특정 "AUD 솔루션" 식별: 현재 사용 중인 정확한 BI 도구 및 특정 컴포넌트/시각화가 무엇인지 파악해야 한다. 이것이 관련 설정을 찾는 데 매우 중요하다. Power BI 네이티브 기능인지, Inforiver인지, MicroStrategy인지, SAP인지, 아니면 다른 솔루션인지 확인해야 한다.
내장 설정 탐색: 식별된 도구를 기반으로 다음 사항을 철저히 확인한다:
셀/열에 대한 텍스트 줄 바꿈 옵션.
'행/열 자동 맞춤(Autofit)' 설정.
행 안쪽 여백 또는 명시적인 행 높이 설정.
높이 또는 내용 넘침(overflow)과 관련된 기타 셀 서식 옵션.
대안적인 시각화/보고서 유형 고려: Power BI를 사용 중이고 표시/내보내기에 동적 높이가 필수적이라면, 페이지를 매긴 보고서(CanGrow 속성)가 더 적합할 수 있는지 평가한다.
사용자 지정 시각화/추가 기능 조사: 플랫폼이 이를 지원한다면(예: Power BI AppSource ), 더 나은 행 높이 관리 기능을 제공하는 타사 그리드 컴포넌트(예: Inforiver)를 찾아본다.   
특정 도구에 대한 설명서 및 커뮤니티 포럼 검토: 사용 중인 "AUD 솔루션"의 편집 가능한 테이블에서 행 높이와 관련된 알려진 문제, 제한 사항 또는 해결 방법을 검색한다 (예: MicroStrategy 기술 자료 , SAP 노트 ).   
성능 테스트: 동적 옵션을 찾았다면, 실제 데이터 볼륨으로 해당 기능의 성능을 테스트한다.