알겠습니다. 플라스크(Flask)를 사용하여 요청하신 기능을 갖춘 웹 게시판을 만들어 보겠습니다. 이 게시판은 다음과 같은 특징을 가집니다:

웹 기반 편집기: TinyMCE를 사용하여 HTML 콘텐츠(글자 크기/색상 조절, 이미지 삽입 등)를 작성하고 수정할 수 있습니다.
권한 관리:
글 작성, 수정, 삭제: 공통 비밀번호를 입력해야 가능합니다.
글 조회: 누구나 가능합니다.
공유: 각 글은 고유한 URL을 가지며, 이 URL을 통해 다른 사람과 공유할 수 있습니다.
데이터베이스: SQLite를 사용하여 간단하게 데이터를 관리합니다.
이미지 업로드: 게시글 내 이미지 삽입 시 서버에 이미지를 업로드하고 관리합니다.
아래는 전체 코드 구조와 파일 내용입니다. "전문가 구조"를 최대한 반영하여 모듈성과 확장성을 고려했습니다.

프로젝트 구조:

flask_board/
├── app.py             # Flask 애플리케이션 로직
├── config.py          # 설정 파일 (비밀번호, SECRET_KEY 등)
├── models.py          # 데이터베이스 모델 (SQLAlchemy)
├── requirements.txt   # 필요한 Python 패키지 목록
├── static/            # 정적 파일 (CSS, JS, 업로드된 이미지)
│   ├── css/
│   │   └── style.css  # 기본 스타일 (선택 사항)
│   ├── uploads/       # 이미지 업로드 폴더
│   └── js/            # Javascript 파일 (선택 사항)
└── templates/         # HTML 템플릿
    ├── base.html      # 기본 레이아웃 템플릿
    ├── index.html     # 게시글 목록 페이지
    ├── view_post.html # 게시글 상세 보기 페이지
    ├── edit_post.html # 게시글 작성/수정 페이지
    └── login.html     # 비밀번호 입력 페이지
1. requirements.txt

Plaintext

Flask
Flask-SQLAlchemy
Flask-Login
Werkzeug
Pillow # 이미지 처리를 위해
python-dotenv # .env 파일 관리를 위해 (선택 사항이지만 권장)
터미널에서 pip install -r requirements.txt 명령으로 패키지를 설치합니다.

2. config.py

Python

import os
from dotenv import load_dotenv

load_dotenv() # .env 파일에서 환경 변수를 로드합니다.

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'your_very_secret_key_here' # 매우 중요: 실제 배포 시 변경하세요.
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///board.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD') or 'your_admin_password' # 실제 배포 시 변경하세요.
    UPLOAD_FOLDER = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'static/uploads')
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB 업로드 제한 (선택 사항)

    # TinyMCE API 키 (TinyMCE Cloud 사용 시)
    # 무료로 가입하고 API 키를 받으세요: https://www.tiny.cloud/
    # 직접 호스팅하는 경우 이 키는 필요 없습니다.
    TINYMCE_API_KEY = os.environ.get('TINYMCE_API_KEY') or 'YOUR_TINYMCE_API_KEY' # 실제 API 키로 변경
.env 파일을 프로젝트 루트에 만들고 민감한 정보를 저장할 수 있습니다 (예: SECRET_KEY=mysecret, ADMIN_PASSWORD=superadmin).
TINYMCE_API_KEY는 TinyMCE Cloud를 사용할 경우 필요합니다. TinyMCE 웹사이트에서 무료 API 키를 발급받아 넣어주세요. 만약 TinyMCE를 직접 다운로드하여 static 폴더에 넣고 사용할 경우 이 키는 필요 없습니다. (이 예제에서는 Cloud 버전을 기준으로 설명합니다.)
3. models.py

Python

from datetime import datetime, timezone
from flask_sqlalchemy import SQLAlchemy
from werkzeug.utils import secure_filename
import re

db = SQLAlchemy()

def slugify(text):
    # 한글 지원을 위해 기본적인 slugify 로직 수정
    text = re.sub(r'[^\w\s-]', '', text).strip().lower()
    text = re.sub(r'[-\s]+', '-', text)
    return text

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    slug = db.Column(db.String(200), unique=True, nullable=False)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, index=True, default=lambda: datetime.now(timezone.utc))
    # created_at = db.Column(db.DateTime, default=datetime.utcnow) # KST 등을 원하면 조정
    # updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def __init__(self, title, content, slug=None):
        self.title = title
        self.content = content
        if slug:
            self.slug = slug
        else:
            self.slug = self._generate_unique_slug(title)

    def _generate_unique_slug(self, title):
        base_slug = slugify(title)
        if not base_slug: # 제목이 특수문자로만 이루어진 경우
            base_slug = "post"

        slug = base_slug
        counter = 1
        while Post.query.filter_by(slug=slug).first():
            slug = f"{base_slug}-{counter}"
            counter += 1
        return slug

    def __repr__(self):
        return f'<Post {self.title}>'

class User(db.Model): # Flask-Login 사용을 위한 기본 User 모델 (여기서는 관리자만 존재)
    id = db.Column(db.Integer, primary_key=True)
    # username = db.Column(db.String(64), index=True, unique=True) # 필요시 확장
    # email = db.Column(db.String(120), index=True, unique=True)  # 필요시 확장
    # password_hash = db.Column(db.String(128)) # 필요시 확장

    # Flask-Login 호환성을 위한 속성들
    @property
    def is_active(self):
        return True

    @property
    def is_authenticated(self):
        return True # 실제 로그인 로직에서는 세션 등을 확인

    @property
    def is_anonymous(self):
        return False

    def get_id(self):
        return str(self.id) # 사용자 ID를 문자열로 반환

    # 이 예제에서는 ADMIN_PASSWORD를 config에서 직접 비교하므로 User DB는 단순화
4. app.py

Python

import os
from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify, abort
from werkzeug.utils import secure_filename
from datetime import datetime, timezone
import uuid # 고유 파일명 생성을 위해

from config import Config
from models import db, Post

# Flask-Login 설정 (선택사항이지만 권장)
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user

# User 모델이 UserMixin을 상속하도록 수정해야 합니다.
# 이 예제에서는 간단히 세션 기반으로 관리합니다.
# 실제 사용자 인증 시스템을 원한다면 Flask-Login을 models.User와 함께 제대로 설정하세요.

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)

# 이미지 업로드 폴더 생성
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# --- 인증 관련 ---
# Flask-Login을 사용하지 않고 간단한 세션 기반 인증
def is_admin_logged_in():
    return session.get('is_admin_logged_in', False)

def admin_required(f):
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not is_admin_logged_in():
            flash('이 작업을 수행하려면 로그인이 필요합니다.', 'warning')
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

@app.route('/login', methods=['GET', 'POST'])
def login():
    if is_admin_logged_in():
        return redirect(url_for('index'))

    if request.method == 'POST':
        password = request.form.get('password')
        if password == app.config['ADMIN_PASSWORD']:
            session['is_admin_logged_in'] = True
            flash('로그인되었습니다.', 'success')
            next_url = request.args.get('next')
            return redirect(next_url or url_for('index'))
        else:
            flash('잘못된 비밀번호입니다.', 'danger')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('is_admin_logged_in', None)
    flash('로그아웃되었습니다.', 'info')
    return redirect(url_for('index'))

# --- 라우트 ---
@app.route('/')
def index():
    page = request.args.get('page', 1, type=int)
    # KST로 변환하여 표시하고 싶다면, 템플릿 필터 또는 여기서 변환
    # 예: posts = Post.query.order_by(Post.timestamp.desc()).paginate(page=page, per_page=10)
    posts_pagination = Post.query.order_by(Post.timestamp.desc()).paginate(page=page, per_page=10)
    return render_template('index.html', posts_pagination=posts_pagination, is_admin=is_admin_logged_in())

@app.route('/post/<string:slug>')
def view_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    return render_template('view_post.html', post=post, is_admin=is_admin_logged_in())

@app.route('/new', methods=['GET', 'POST'])
@admin_required
def new_post():
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')

        if not title or not content:
            flash('제목과 내용을 모두 입력해주세요.', 'warning')
            return render_template('edit_post.html', title=title, content=content, tinymce_api_key=app.config['TINYMCE_API_KEY'], is_admin=is_admin_logged_in())

        try:
            post = Post(title=title, content=content)
            db.session.add(post)
            db.session.commit()
            flash('게시글이 성공적으로 작성되었습니다.', 'success')
            return redirect(url_for('view_post', slug=post.slug))
        except Exception as e:
            db.session.rollback()
            flash(f'게시글 작성 중 오류가 발생했습니다: {str(e)}', 'danger')
            app.logger.error(f"Error creating post: {e}")


    return render_template('edit_post.html', tinymce_api_key=app.config['TINYMCE_API_KEY'], is_admin=is_admin_logged_in())

@app.route('/edit/<string:slug>', methods=['GET', 'POST'])
@admin_required
def edit_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')

        if not title or not content:
            flash('제목과 내용을 모두 입력해주세요.', 'warning')
            return render_template('edit_post.html', post=post, title=title, content=content, tinymce_api_key=app.config['TINYMCE_API_KEY'], is_admin=is_admin_logged_in())

        try:
            post.title = title
            post.content = content
            # 슬러그는 일반적으로 수정하지 않지만, 필요하다면 로직 추가
            # post.slug = post._generate_unique_slug(title) # 제목 변경 시 슬러그도 변경하려면
            post.timestamp = datetime.now(timezone.utc) # 수정 시간 업데이트
            db.session.commit()
            flash('게시글이 성공적으로 수정되었습니다.', 'success')
            return redirect(url_for('view_post', slug=post.slug))
        except Exception as e:
            db.session.rollback()
            flash(f'게시글 수정 중 오류가 발생했습니다: {str(e)}', 'danger')
            app.logger.error(f"Error editing post {slug}: {e}")


    return render_template('edit_post.html', post=post, title=post.title, content=post.content, tinymce_api_key=app.config['TINYMCE_API_KEY'], is_admin=is_admin_logged_in())

@app.route('/delete/<string:slug>', methods=['POST'])
@admin_required
def delete_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    try:
        db.session.delete(post)
        db.session.commit()
        flash('게시글이 삭제되었습니다.', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'게시글 삭제 중 오류가 발생했습니다: {str(e)}', 'danger')
        app.logger.error(f"Error deleting post {slug}: {e}")
    return redirect(url_for('index'))

@app.route('/upload_image', methods=['POST'])
@admin_required # 이미지 업로드도 관리자만 가능하도록
def upload_image():
    if 'file' not in request.files:
        return jsonify({'error': {'message': 'No file part in the request'}}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': {'message': 'No file selected for uploading'}}), 400

    if file and allowed_file(file.filename):
        # 고유한 파일명 생성 (UUID + 원래 확장자)
        ext = file.filename.rsplit('.', 1)[1].lower()
        filename = secure_filename(f"{uuid.uuid4()}.{ext}")
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        try:
            file.save(filepath)
            # TinyMCE는 이미지의 웹 경로를 반환받기를 기대합니다.
            # static 폴더 하위는 /static/으로 접근 가능
            image_url = url_for('static', filename=f'uploads/{filename}')
            return jsonify({'location': image_url})
        except Exception as e:
            app.logger.error(f"Image upload failed: {e}")
            return jsonify({'error': {'message': f'Image upload failed: {str(e)}'}}), 500
    else:
        return jsonify({'error': {'message': 'Allowed file types are png, jpg, jpeg, gif'}}), 400


# --- 데이터베이스 초기화 (애플리케이션 컨텍스트 내에서 실행) ---
def init_db():
    with app.app_context():
        db.create_all()
        print("Database initialized!")

if __name__ == '__main__':
    # 명령줄에서 `flask shell`을 실행한 후 `init_db()`를 실행하여 DB를 처음 생성하거나,
    # 아래 코드를 임시로 활성화하여 서버 시작 시 DB를 생성할 수 있습니다.
    # init_db() # 운영 환경에서는 이렇게 직접 호출하지 않는 것이 좋습니다.
    #           # 보통 `flask db init`, `flask db migrate`, `flask db upgrade` (Flask-Migrate 사용 시)
    #           # 또는 별도의 스크립트로 관리합니다.
    #           # 이 예제에서는 간단히 `flask shell` -> `from app import init_db` -> `init_db()`를 사용하세요.
    app.run(debug=True, host='0.0.0.0', port=5000) # Ubuntu에서 외부 접속 허용을 위해 host='0.0.0.0'
5. templates/base.html

HTML

<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <title>{% block title %}나의 게시판{% endblock %}</title>
    {% block head_extra %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <a class="navbar-brand" href="{{ url_for('index') }}">나의 플라스크 게시판</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('index') }}">홈</a>
                </li>
                {% if is_admin %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('new_post') }}">새 글 작성</a>
                </li>
                {% endif %}
            </ul>
            <ul class="navbar-nav">
                {% if is_admin %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}">로그아웃</a>
                </li>
                {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('login') }}">관리자 로그인</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        {% block content %}{% endblock %}
    </div>

    <footer class="mt-5 mb-3 text-center text-muted">
        &copy; {{ now().year }} 나의 게시판
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    {% block scripts_extra %}{% endblock %}
</body>
</html>
base.html에 {% if is_admin %} 블록을 추가하여 로그인 상태에 따라 "새 글 작성", "로그아웃" 또는 "관리자 로그인" 링크를 표시합니다. is_admin 변수는 각 라우트에서 render_template 호출 시 전달되어야 합니다. app.py의 index, view_post, new_post, edit_post 라우트에서 is_admin=is_admin_logged_in()을 추가했습니다.

now()를 사용하기 위해 app.context_processor를 사용할 수 있습니다:

Python

# app.py 상단에 추가
from datetime import datetime

# app.py 하단 (if __name__ == '__main__': 블록 전)
@app.context_processor
def inject_now():
    return {'now': datetime.utcnow} # 또는 datetime.now()
6. templates/index.html

HTML

{% extends "base.html" %}

{% block title %}게시글 목록 - 나의 게시판{% endblock %}

{% block content %}
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>게시글 목록</h1>
        {% if is_admin %}
            <a href="{{ url_for('new_post') }}" class="btn btn-primary">새 글 작성</a>
        {% endif %}
    </div>

    {% if posts_pagination.items %}
        <ul class="list-group">
            {% for post in posts_pagination.items %}
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <a href="{{ url_for('view_post', slug=post.slug) }}">
                        <h5>{{ post.title }}</h5>
                    </a>
                    <small class="text-muted">
                        작성일: {{ post.timestamp.strftime('%Y-%m-%d %H:%M') }} (UTC)
                        {# KST로 표시하려면 필터나 서버단 변환 필요 #}
                    </small>
                </div>
                {% if is_admin %}
                <div>
                    <a href="{{ url_for('edit_post', slug=post.slug) }}" class="btn btn-sm btn-outline-secondary mr-2">수정</a>
                    <form action="{{ url_for('delete_post', slug=post.slug) }}" method="POST" style="display: inline;" onsubmit="return confirm('정말로 이 게시글을 삭제하시겠습니까?');">
                        <button type="submit" class="btn btn-sm btn-outline-danger">삭제</button>
                    </form>
                </div>
                {% endif %}
            </li>
            {% endfor %}
        </ul>

        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                {% if posts_pagination.has_prev %}
                    <li class="page-item"><a class="page-link" href="{{ url_for('index', page=posts_pagination.prev_num) }}">이전</a></li>
                {% else %}
                    <li class="page-item disabled"><span class="page-link">이전</span></li>
                {% endif %}

                {% for page_num in posts_pagination.iter_pages(left_edge=1, right_edge=1, left_current=1, right_current=2) %}
                    {% if page_num %}
                        {% if posts_pagination.page == page_num %}
                            <li class="page-item active"><span class="page-link">{{ page_num }}</span></li>
                        {% else %}
                            <li class="page-item"><a class="page-link" href="{{ url_for('index', page=page_num) }}">{{ page_num }}</a></li>
                        {% endif %}
                    {% else %}
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    {% endif %}
                {% endfor %}

                {% if posts_pagination.has_next %}
                    <li class="page-item"><a class="page-link" href="{{ url_for('index', page=posts_pagination.next_num) }}">다음</a></li>
                {% else %}
                    <li class="page-item disabled"><span class="page-link">다음</span></li>
                {% endif %}
            </ul>
        </nav>

    {% else %}
        <p>게시글이 없습니다. {% if is_admin %}<a href="{{ url_for('new_post') }}">첫 번째 글을 작성해보세요!</a>{% endif %}</p>
    {% endif %}
{% endblock %}
7. templates/view_post.html

HTML

{% extends "base.html" %}

{% block title %}{{ post.title }} - 나의 게시판{% endblock %}

{% block content %}
    <article>
        <header class="mb-4">
            <h1>{{ post.title }}</h1>
            <div class="text-muted mb-2">
                작성일: {{ post.timestamp.strftime('%Y-%m-%d %H:%M') }} (UTC)
            </div>
            {% if is_admin %}
            <div>
                <a href="{{ url_for('edit_post', slug=post.slug) }}" class="btn btn-secondary btn-sm">수정</a>
                <form action="{{ url_for('delete_post', slug=post.slug) }}" method="POST" style="display: inline;" onsubmit="return confirm('정말로 이 게시글을 삭제하시겠습니까?');">
                    <button type="submit" class="btn btn-danger btn-sm">삭제</button>
                </form>
            </div>
            {% endif %}
        </header>
        <section class="post-content">
            {{ post.content | safe }} {# HTML 렌더링을 위해 safe 필터 사용 #}
        </section>
    </article>
    <hr>
    <a href="{{ url_for('index') }}" class="btn btn-outline-primary mt-3">목록으로 돌아가기</a>
{% endblock %}
8. templates/edit_post.html

HTML

{% extends "base.html" %}

{% block title %}{% if post %}게시글 수정{% else %}새 글 작성{% endif %} - 나의 게시판{% endblock %}

{% block head_extra %}
    {# TinyMCE Cloud CDN. API 키가 필요합니다. #}
    {# config.py의 TINYMCE_API_KEY를 사용합니다. #}
    <script src="https://cdn.tiny.cloud/1/{{ tinymce_api_key }}/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
    {# 만약 로컬에 TinyMCE를 설치했다면:
    <script src="{{ url_for('static', filename='js/tinymce/tinymce.min.js') }}"></script>
    #}
{% endblock %}

{% block content %}
    <h1>{% if post %}게시글 수정{% else %}새 글 작성{% endif %}</h1>
    <form method="POST">
        <div class="form-group">
            <label for="title">제목</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ title or post.title or '' }}" required>
        </div>
        <div class="form-group">
            <label for="content">내용</label>
            <textarea class="form-control" id="content" name="content" rows="15">{{ content or post.content or '' }}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">{% if post %}수정 완료{% else %}작성 완료{% endif %}</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">취소</a>
    </form>
{% endblock %}

{% block scripts_extra %}
<script>
tinymce.init({
    selector: 'textarea#content',
    plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons accordion',
    menubar: 'file edit view insert format tools table help',
    toolbar: 'undo redo | accordion accordionremove | blocks fontfamily fontsize | bold italic underline strikethrough | align numlist bullist | link image | table media | lineheight outdent indent| forecolor backcolor removeformat | charmap emoticons | code fullscreen preview | save print | pagebreak anchor codesample | ltr rtl',
    autosave_ask_before_unload: true,
    autosave_interval: '30s',
    autosave_prefix: '{path}{query}-{id}-',
    autosave_restore_when_empty: false,
    autosave_retention: '2m',
    image_advtab: true,
    link_list: [
        { title: 'My page 1', value: 'https://www.tiny.cloud' },
        { title: 'My page 2', value: 'http://www.moxiecode.com' }
    ],
    image_list: [
        { title: 'My page 1', value: 'https://www.tiny.cloud' },
        { title: 'My page 2', value: 'http://www.moxiecode.com' }
    ],
    image_class_list: [
        { title: 'None', value: '' },
        { title: 'Some class', value: 'class-name' }
    ],
    importcss_append: true,
    height: 600,
    file_picker_callback: (callback, value, meta) => {
        /* Provide file and imageÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝಡ್ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ÖRಝడ్ picker picker
        /* ... and other settings according to your needs */
    },
    template_advlist_options: [
        { title: 'Default', value: '' },
        { title: 'Circle', value: 'disc' },
        { title: 'Square', value: 'square' }
    ],
    // TinyMCE가 이미지를 업로드할 때 사용할 URL
    // 이 URL은 Flask의 '/upload_image' 라우트에 매핑되어야 합니다.
    images_upload_url: '{{ url_for("upload_image") }}',
    // 아래 핸들러는 업로드 성공 시 TinyMCE에 이미지 URL을 전달합니다.
    images_upload_handler: (blobInfo, success, failure) => {
        const formData = new FormData();
        formData.append('file', blobInfo.blob(), blobInfo.filename());

        fetch('{{ url_for("upload_image") }}', {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(result => {
            if (result.location) {
                success(result.location);
            } else {
                failure('Image upload failed: ' + (result.error ? result.error.message : 'Unknown error'));
            }
        })
        .catch(() => {
            failure('Image upload failed due to a network error or server error.');
        });
    },
    content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }'
});
</script>
{% endblock %}
9. templates/login.html

HTML

{% extends "base.html" %}

{% block title %}관리자 로그인 - 나의 게시판{% endblock %}

{% block content %}
    <div class="row justify-content-center">
        <div class="col-md-6">
            <h2 class="text-center mb-4">관리자 로그인</h2>
            <form method="POST" action="{{ url_for('login', next=request.args.get('next')) }}">
                <div class="form-group">
                    <label for="password">비밀번호</label>
                    <input type="password" class="form-control" id="password" name="password" required>
                </div>
                <button type="submit" class="btn btn-primary btn-block">로그인</button>
            </form>
        </div>
    </div>
{% endblock %}
10. static/css/style.css (선택 사항 - 기본 스타일)

CSS

body {
    font-family: sans-serif;
    background-color: #f8f9fa;
}

.container {
    max-width: 960px; /* 콘텐츠 최대 너비 조정 */
}

.post-content img {
    max-width: 100%;
    height: auto;
    display: block; /* 이미지가 인라인 요소처럼 동작하지 않도록 */
    margin: 10px 0; /* 이미지 위아래 여백 */
    border-radius: 5px; /* 이미지 모서리 둥글게 (선택 사항) */
}

.navbar-brand {
    font-weight: bold;
}

.list-group-item h5 {
    margin-bottom: 0.3rem;
}

.alert {
    margin-top: 1rem;
}
실행 방법:

프로젝트 폴더 생성: flask_board 라는 이름으로 폴더를 만들고 그 안에 위 파일들을 구조에 맞게 저장합니다.
가상 환경 생성 및 활성화 (권장):
Bash

python3 -m venv venv
source venv/bin/activate  # Linux/macOS
# venv\Scripts\activate    # Windows
패키지 설치:
Bash

pip install -r requirements.txt
TinyMCE API 키 설정:
config.py 파일의 TINYMCE_API_KEY 값을 발급받은 키로 변경하거나,
프로젝트 루트에 .env 파일을 만들고 TINYMCE_API_KEY=your_actual_api_key_here 와 같이 추가합니다.
ADMIN_PASSWORD도 .env 파일이나 config.py에서 원하는 값으로 변경하세요.
데이터베이스 초기화:
터미널에서 Flask 애플리케이션이 있는 flask_board 디렉토리로 이동합니다.
Flask 셸을 실행합니다: flask shell
셸 안에서 다음 명령어를 실행하여 데이터베이스 테이블을 생성합니다:
Python

from app import init_db
init_db()
exit()
(또는, app.py의 if __name__ == '__main__': 블록에서 init_db() 호출을 임시로 주석 해제하고 서버를 한 번 실행한 뒤 다시 주석 처리해도 됩니다.)
애플리케이션 실행:
Bash

flask run --host=0.0.0.0 --port=5000
또는 app.py 파일을 직접 실행 (개발용):
Bash

python app.py
웹 브라우저에서 접속: http://localhost:5000 또는 서버의 IP 주소 (http://<서버_IP>:5000)로 접속합니다.
주요 기능 설명:

app.py: 메인 Flask 애플리케이션 파일입니다. 라우팅, 뷰 함수, 데이터베이스 로직 등을 처리합니다.
config.py: 애플리케이션 설정을 관리합니다 (비밀번호, 데이터베이스 경로, 업로드 폴더 등).
models.py: SQLAlchemy를 사용하여 데이터베이스 모델(Post)을 정의합니다. slugify 함수는 게시글 제목을 URL 친화적인 문자열로 변환합니다.
templates/: HTML 파일들이 위치합니다.
base.html: 모든 페이지의 기본 구조를 정의하며, Bootstrap CSS를 사용하여 기본적인 스타일을 적용합니다.
index.html: 게시글 목록을 보여줍니다.
view_post.html: 특정 게시글의 내용을 보여줍니다. 여기서 {{ post.content | safe }}를 사용하여 HTML 콘텐츠를 안전하게 렌더링합니다.
edit_post.html: TinyMCE 편집기를 사용하여 글을 작성하거나 수정하는 폼입니다. TinyMCE 초기화 스크립트가 포함되어 있습니다.
login.html: 관리자 비밀번호를 입력하는 페이지입니다.
static/uploads/: 이미지 업로드 시 파일이 저장되는 폴더입니다. 웹 서버가 이 폴더에 쓸 수 있는 권한이 있어야 합니다.
인증: 간단한 세션 기반 인증을 사용합니다. /login 경로에서 config.py에 설정된 ADMIN_PASSWORD와 일치하는 비밀번호를 입력하면 세션에 is_admin_logged_in 플래그가 설정됩니다. @admin_required 데코레이터는 이 세션 플래그를 확인하여 특정 기능(글쓰기, 수정, 삭제)에 대한 접근을 제어합니다.
TinyMCE 이미지 업로드:
edit_post.html의 TinyMCE 설정에서 images_upload_url: '{{ url_for("upload_image") }}'는 편집기 내 이미지 업로드 버튼을 눌렀을 때 파일이 전송될 Flask 서버의 엔드포인트를 지정합니다.
app.py의 /upload_image 라우트는 이 요청을 받아 이미지를 static/uploads 폴더에 저장하고, TinyMCE가 요구하는 JSON 형식({'location': 'image_url'})으로 이미지의 URL을 반환합니다.
Slug: 각 게시물은 제목을 기반으로 생성된 고유한 'slug'를 가집니다 (예: "나의 첫 게시물" -> "나의-첫-게시물"). 이는 SEO 친화적이고 읽기 쉬운 URL을 만드는 데 사용됩니다.
Ubuntu 배포 시 고려사항 (WSGI 서버 사용):

개발용 Flask 서버(flask run 또는 app.run())는 프로덕션 환경에 적합하지 않습니다. Ubuntu 서버에 배포할 때는 Gunicorn이나 uWSGI 같은 WSGI 서버를 사용하고, Nginx 같은 웹 서버를 리버스 프록시로 설정하는 것이 일반적입니다.

예시 (Gunicorn 사용):

pip install gunicorn