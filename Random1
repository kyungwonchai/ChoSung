드를 작성했습니다. 이 코드는 앱이 처음 열릴 때, MySQL 데이터베이스에서 해당 deviceID가 등록되어 있는지 확인하고, 등록 상태에 따라 UI를 업데이트하며, QR 코드를 스캔할 때도 등록 상태에 따른 알림을 표시합니다.

1. XML 레이아웃 수정
먼저, activity_main.xml 파일을 수정하여 아래에 TextView를 추가하고, 외측 테두리 색상을 조정할 수 있는 뷰를 추가합니다.

xml
코드 복사
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 테두리를 포함하는 레이아웃 -->
    <RelativeLayout
        android:id="@+id/borderLayout"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="5dp"
        android:background="@drawable/border">

        <!-- QR 코드 스캔 등을 처리할 메인 뷰 -->
        <TextView
            android:id="@+id/textViewResult"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="Scan Result"
            android:textSize="20sp"
            android:layout_centerInParent="true"/>
    </RelativeLayout>

    <!-- 기기 정보 표시 -->
    <TextView
        android:id="@+id/deviceInfo"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Device Info"
        android:textSize="16sp"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:layout_marginBottom="20dp"/>
</RelativeLayout>
2. border.xml drawable 리소스 생성
테두리 색상을 변경하기 위해 res/drawable/border.xml 파일을 생성합니다.

xml
코드 복사
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="@android:color/transparent" />
    <stroke
        android:width="5dp"
        android:color="#00BFFF"/> <!-- 하늘파랑 -->
</shape>
3. MainActivity.kt 수정
앱이 처음 열렸을 때 데이터베이스를 확인하고, 테두리 색상을 설정하며, QR 코드 스캔 시 처리하는 로직을 구현합니다.

kotlin
코드 복사
import android.graphics.Color
import android.os.Bundle
import android.widget.TextView
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException

class MainActivity : ComponentActivity() {

    private lateinit var deviceInfoTextView: TextView
    private lateinit var borderLayout: RelativeLayout
    private val deviceId = "your_device_id" // 실제 기기의 ID로 설정해야 함

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        deviceInfoTextView = findViewById(R.id.deviceInfo)
        borderLayout = findViewById(R.id.borderLayout)

        // 앱 시작 시 MySQL에서 기기 ID를 확인하고 테두리 및 텍스트를 업데이트
        lifecycleScope.launch {
            checkDeviceIdInDatabase(deviceId)
        }
    }

    private suspend fun checkDeviceIdInDatabase(deviceId: String) {
        var mysqlConnection: Connection? = null
        var preparedStatement: java.sql.PreparedStatement? = null
        var resultSet: ResultSet? = null

        try {
            mysqlConnection = withContext(Dispatchers.IO) {
                Class.forName("com.mysql.cj.jdbc.Driver")
                DriverManager.getConnection(
                    "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC",
                    "abc", "1233445"
                )
            }

            val query = "SELECT modelnumber FROM management_mobile_deviceid WHERE deviceid = ?"
            preparedStatement = mysqlConnection.prepareStatement(query)
            preparedStatement.setString(1, deviceId)
            resultSet = preparedStatement.executeQuery()

            if (resultSet.next()) {
                // 기기가 등록된 상태
                val modelnumber = resultSet.getString("modelnumber")
                withContext(Dispatchers.Main) {
                    deviceInfoTextView.text = "내 기기 SN: $modelnumber"
                    borderLayout.background = ContextCompat.getDrawable(this@MainActivity, R.drawable.border)
                }
            } else {
                // 기기가 등록되지 않은 상태
                withContext(Dispatchers.Main) {
                    deviceInfoTextView.text = "등록되지 않은 기기"
                    borderLayout.setBackgroundColor(Color.parseColor("#FFA500")) // 주황색
                }
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "DB 오류: ${e.message}", Toast.LENGTH_LONG).show()
            }
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "JDBC 드라이버를 찾을 수 없습니다.", Toast.LENGTH_LONG).show()
            }
        } catch (e: Exception) {
            e.printStackTrace()
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "예기치 않은 오류 발생", Toast.LENGTH_LONG).show()
            }
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                mysqlConnection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
        }
    }

    private fun handleQrScanResult(qrCode: String) {
        if (!qrCode.contains("^")) {
            lifecycleScope.launch {
                val deviceIdRegistered = checkDeviceIdInDatabase(deviceId)
                if (deviceIdRegistered) {
                    Toast.makeText(this@MainActivity, "등록되지 않은 Android 기기입니다. mySMD에서 등록 바랍니다.", Toast.LENGTH_LONG).show()
                } else {
                    // QR 코드 처리 (등록된 기기)
                    // 여기에 추가 로직을 작성
                }
            }
        }
    }
}
코드 설명:
앱 시작 시 기기 ID 확인:

앱이 시작되면 checkDeviceIdInDatabase 함수가 호출되어 deviceId가 management_mobile_deviceid 테이블에 있는지 확인합니다.
기기 ID가 등록된 경우, 해당 modelnumber를 화면에 표시하고, 테두리 색상을 하늘파랑으로 설정합니다.
등록되지 않은 경우, 텍스트를 "등록되지 않은 기기"로 설정하고, 테두리 색상을 주황색으로 변경합니다.
QR 코드 스캔 처리:

QR 코드에 ^가 포함되지 않은 경우, 기기 ID가 등록되어 있는지 다시 확인합니다.
등록되지 않은 기기라면 "등록되지 않은 Android 기기입니다. mySMD에서 등록 바랍니다."라는 알림을 표시합니다.
결론
이 구현은 앱 시작 시 기기 ID를 확인하고, 등록 상태에 따라 UI를 업데이트하며, QR 코드를 스캔할 때 등록 상태에 따른 알림을 표시합니다. 필요한 부분을 추가로 수정하여 사용하시면 됩니다. 추가적인 질문이 있거나 수정이 필요하면 언제든지 말씀해