이 겪고 있는 문제는 타이틀바 더블 클릭 메시지(WM_NCLBUTTONDBLCLK)가 SkinableForm에서 정상적으로 전달되지 않는 것과 관련되어 있습니다. 이는 DevExpress의 SkinableForm이 기본적으로 Windows의 네이티브 메시지를 차단하거나 자체적으로 처리하기 때문입니다. 이런 상황에서는 기본 메시지 처리 방식이 아닌 DevExpress의 이벤트 체계를 활용하거나, 네이티브 메시지를 강제로 전달받아야 합니다.

다음은 확실히 작동하는 타이틀바 더블 클릭 처리 및 버튼 구현에 대한 전문가 수준의 접근 방식입니다.

해결 방안: 강제 메시지 처리 및 DevExpress 커스터마이징
구현 코드
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private const int WM_SYSCOMMAND = 0x112; // 시스템 명령
    private const int SC_MAXIMIZE = 0xF030; // 최대화
    private const int SC_RESTORE = 0xF120; // 복원
    private const int SC_MINIMIZE = 0xF020; // 최소화

    private Rectangle titleBarBounds;
    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 사용자 정의 타이틀바 영역 확보
        this.DoubleBuffered = true;

        // 타이틀바 영역 초기화
        titleBarBounds = new Rectangle(0, 0, this.Width, 30);

        // 타이틀바 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 버튼 위치 업데이트
        this.SizeChanged += UpdateButtonPositions;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화/복원 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        return new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            },
            FlatStyle = FlatStyle.Flat,
            Click = clickHandler
        };
    }

    private void UpdateButtonPositions(object sender, EventArgs e)
    {
        // 버튼 위치 업데이트
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
        titleBarBounds = new Rectangle(0, 0, this.Width, 30);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, titleBarBounds);
        }

        // 타이틀바 텍스트
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    protected override void WndProc(ref Message m)
    {
        base.WndProc(ref m);

        // 강제로 시스템 명령을 처리
        if (m.Msg == WM_SYSCOMMAND)
        {
            switch (m.WParam.ToInt32())
            {
                case SC_MAXIMIZE:
                    this.WindowState = FormWindowState.Maximized;
                    maximizeButton.Text = "🗗"; // 복원 아이콘
                    break;

                case SC_RESTORE:
                    this.WindowState = FormWindowState.Normal;
                    maximizeButton.Text = "🗖"; // 최대화 아이콘
                    break;

                case SC_MINIMIZE:
                    this.WindowState = FormWindowState.Minimized;
                    break;
            }
        }
    }

    protected override void OnMouseDoubleClick(MouseEventArgs e)
    {
        base.OnMouseDoubleClick(e);

        // 타이틀바에서 더블 클릭 시 최대화/복원
        if (titleBarBounds.Contains(e.Location))
        {
            if (this.WindowState == FormWindowState.Maximized)
            {
                this.WindowState = FormWindowState.Normal;
                maximizeButton.Text = "🗖"; // 최대화 아이콘
            }
            else
            {
                this.WindowState = FormWindowState.Maximized;
                maximizeButton.Text = "🗗"; // 복원 아이콘
            }
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
주요 구현 사항
타이틀바 더블 클릭 처리:

OnMouseDoubleClick 메서드에서 타이틀바(titleBarBounds) 영역을 감지.
더블 클릭 시 창을 최대화/복원.
Windows 메시지 강제 처리:

WM_SYSCOMMAND를 통해 시스템 명령(SC_MAXIMIZE, SC_RESTORE, SC_MINIMIZE)을 강제 처리.
심플 버튼 구현:

최소화, 최대화/복원, 닫기 버튼을 SimpleButton으로 구현.
버튼 위치는 창 크기 변경(SizeChanged)에 따라 동적으로 조정.
디자인 및 스타일:

타이틀바 배경과 텍스트를 OnPaint에서 렌더링.
버튼 스타일은 DevExpress의 SimpleButton 속성을 활용.
결과
타이틀바 더블 클릭:

타이틀바를 더블 클릭하면 창이 최대화/복원됩니다.
타이틀바 드래그:

타이틀바를 드래그하면 창을 이동할 수 있습니다.
버튼 동작:

타이틀바 우측의 최소화, 최대화/복원, 닫기 버튼이 동작하며, 아이콘 상태도 업데이트됩니다.
강제 메시지 처리:

WM_SYSCOMMAND를 강제로 처리하여 창 상태 전환이 DevExpress와의 충돌 없이 작동합니다.