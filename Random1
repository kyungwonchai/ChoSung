makeby 필드를 각각 '이름'과 '등록자'로 표시하고, 각 행에 적용 버튼을 추가하여 버튼을 클릭하면 해당 행의 sortname 값을 디버그로 출력하는 C# 예제 코드를 제공하겠습니다.

먼저, GridColumn의 Header 속성을 사용하여 열 제목을 변경합니다. 그런 다음, TableView의 CustomUnboundColumnData 이벤트를 사용하여 버튼 클릭 이벤트를 처리합니다.

csharp
Copy code
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        this.DataContext = this;
        PopulateGrid();
    }

    private void PopulateGrid()
    {
        // 여기에 데이터 로드 로직 추가
        // 예를 들어, gridControl.ItemsSource = yourDataSource;
    }

    private void Button_Click(object sender, RoutedEventArgs e)
    {
        Button btn = sender as Button;
        GridColumn col = gridControl.Columns["sortname"];
        int rowHandle = gridControl.View.GetRowHandleByMouseEventArgs(e as MouseEventArgs);
        string sortnameValue = gridControl.GetCellValue(rowHandle, col).ToString();
        Debug.WriteLine(sortnameValue);
    }
}

// XAML 코드
<dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew">
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True"
                       CustomUnboundColumnData="OnCustomUnboundColumnData"/>
    </dxg:GridControl.View>
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="sortname" Header="이름" />
        <dxg:GridColumn FieldName="makeby" Header="등록자" />
        <dxg:GridColumn UnboundType="Object">
            <dxg:GridColumn.EditSettings>
                <dxe:ButtonEditSettings ButtonClick="Button_Click"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>
이 코드는 GridControl에 데이터를 로드하고, '이름'과 '등록자'라는 제목의 두 열을 표시합니다. 마지막 열에는 각 행에 대해 '적용' 버튼이 있으며, 이 버튼을 클릭하면 해당 행의 sortname 값을 디버그 창에 출력합니다.

여기서 Button_Click 메소드는 버튼이 클릭될 때 호출되며, 클릭된 행의 sortname 값을 가져와서 디버그합니다. PopulateGrid 메소드는 실제 데이터 로드 로직을 구현하는 곳입니다.

이 예제 코드는 최신 DevExpress WPF 컨트롤과 Visual Studio 환경을 사용하여 작성되었습니다. 코드를 실행하기 전에 DevExpress WPF 컨트롤이 프로젝트에 추가되어 있는지 확인하