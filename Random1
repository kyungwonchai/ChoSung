이 작업은 여러 단계로 나눌 수 있습니다. 각 단계를 자세히 설명하고, 필요한 코드를 제공합니다.

프로젝트 설정
MSSQL 데이터베이스 연결
데이터 받아오기
UI 구성
이미지 가져오기 및 확대/축소, 드로잉 기능 추가
먼저, Android 프로젝트를 설정하는 단계입니다. Android Studio에서 새로운 프로젝트를 생성하고 MainActivity.kt 파일을 설정합니다.

1. 프로젝트 설정
MainActivity.kt
kotlin
코드 복사
package com.example.mssqlimageapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.viewinterop.AndroidView
import com.example.mssqlimageapp.ui.theme.MSSQLImageAppTheme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MSSQLImageAppTheme {
                Surface(color = MaterialTheme.colors.background) {
                    ImageListScreen()
                }
            }
        }
    }
}

@Composable
fun ImageListScreen() {
    var imageList by remember { mutableStateOf(listOf<ImageData>()) }

    LaunchedEffect(Unit) {
        imageList = fetchDataFromDatabase()
    }

    LazyColumn {
        items(imageList.size) { index ->
            val imageData = imageList[index]
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(8.dp)
            ) {
                Text(imageData.imageTitle, modifier = Modifier.weight(1f))
                Text(imageData.datetime, modifier = Modifier.weight(1f))
                Button(onClick = { fetchImage(imageData.imageTitle, imageData.datetime) }) {
                    Text("Load Image")
                }
            }
        }
    }
}

data class ImageData(val imageTitle: String, val datetime: String)

suspend fun fetchDataFromDatabase(): List<ImageData> {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.createStatement()
        val resultSet: ResultSet = statement.executeQuery("EXEC yourProcedure")

        val imageList = mutableListOf<ImageData>()
        while (resultSet.next()) {
            val imageTitle = resultSet.getString("imagetitle")
            val datetime = resultSet.getString("datetime1")
            imageList.add(ImageData(imageTitle, datetime))
        }
        connection.close()
        imageList
    }
}

fun fetchImage(imageTitle: String, datetime: String) {
    // 이 함수는 이미지를 가져와서 화면에 표시하는 기능을 구현합니다.
    // 코드를 추가로 작성하세요.
}
2. MSSQL 데이터베이스 연결
위의 fetchDataFromDatabase 함수에서 데이터베이스에 연결하고 데이터를 가져오는 작업을 합니다. JDBC 드라이버를 사용합니다. 프로젝트의 build.gradle 파일에 의존성을 추가해야 합니다.

gradle
코드 복사
dependencies {
    implementation 'net.sourceforge.jtds:jtds:1.3.1'
}
3. 데이터 받아오기
이미지를 가져오는 fetchImage 함수에서는 imageTitle과 datetime을 사용하여 프로시저를 호출하고 이미지를 가져옵니다. 가져온 이미지는 화면에 표시됩니다.

4. UI 구성
Compose를 사용하여 UI를 구성합니다. ImageListScreen에서 이미지를 리스트로 보여주고, 버튼을 클릭하여 이미지를 로드합니다.

5. 이미지 가져오기 및 확대/축소, 드로잉 기능 추가
이미지를 확대/축소하고 드로잉 기능을 추가하는 방법입니다. 이를 위해서는 추가적인 라이브러리와 Compose 기능을 활용해야 합니다.

build.gradle
gradle
코드 복사
dependencies {
    implementation 'com.github.chrisbanes:accompanist-glide:0.14.0'
    implementation 'androidx.compose.ui:ui-tooling:1.0.0-beta07'
}
MainActivity.kt (추가)
kotlin
코드 복사
@Composable
fun ImageDisplayScreen(bitmap: Bitmap) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    
    Box(modifier = Modifier
        .fillMaxSize()
        .pointerInput(Unit) {
            detectTransformGestures { _, pan, zoom, _ ->
                scale *= zoom
                offset = Offset(offset.x + pan.x, offset.y + pan.y)
            }
        }
    ) {
        Image(
            bitmap = bitmap.asImageBitmap(),
            contentDescription = null,
            modifier = Modifier
                .offset { IntOffset(offset.x.roundToInt(), offset.y.roundToInt()) }
                .graphicsLayer(
                    scaleX = scale,
                    scaleY = scale,
                    translationX = offset.x,
                    translationY = offset.y
                )
        )
    }
}

suspend fun fetchImageFromDatabase(imageTitle: String, datetime: String): Bitmap {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.prepareCall("{call yourImageProcedure(?, ?)}")
        statement.setString(1, imageTitle)
        statement.setString(2, datetime)
        val resultSet: ResultSet = statement.executeQuery()
        
        var bitmap: Bitmap? = null
        if (resultSet.next()) {
            val blob = resultSet.getBlob("imageColumn")
            val byteArray = blob.binaryStream.readBytes()
            bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
        }
        connection.close()
        bitmap ?: throw Exception("Image not found")
    }
}

fun fetchImage(imageTitle: String, datetime: String) {
    CoroutineScope(Dispatchers.Main).launch {
        try {
            val bitmap = fetchImageFromDatabase(imageTitle, datetime)
            setContent {
                MSSQLImageAppTheme {
                    Surface(color = MaterialTheme.colors.background) {
                        ImageDisplayScreen(bitmap)
                    }
                }
            }
        } catch (e: Exception) {
            Log.e("FetchImage", "Error fetching image", e)
        }
    }
}
위 코드는 이미지를 확대/축소하고 드로잉 기능을 추가하는 Compose UI 구성 요소입니다. 이미지 가져오는 부분은 fetchImageFromDatabase 함수에서 처리됩니다.

이 코드를 사용하여 Android 프로젝트를 빌드하고 배포할 수 있습니다. MSSQL 데이터베이스와의 연결, 데이터를 가져오고 표시하는 모든 단계를 포함하고 있습니다. 더 구체적인 요구사항이나 추가 기능이 필요하다면 알려주세요!






