이콘 파일을 리소스로 등록하고 이를 가져오는 방법을 좀 더 자세히 설명드리겠습니다.

1. 아이콘 파일을 리소스로 등록하기
아이콘 파일 추가:

솔루션 탐색기에서 프로젝트를 마우스 오른쪽 버튼으로 클릭하고, Add -> Existing Item을 선택합니다.
아이콘 파일(.ico)을 선택하여 프로젝트에 추가합니다.
아이콘 파일 리소스로 등록:

프로젝트 파일(.csproj)을 편집 모드로 엽니다.
다음과 같은 항목을 추가하여 아이콘 파일을 리소스로 등록합니다:
xml
코드 복사
<ItemGroup>
  <Resource Include="youricon.ico" />
</ItemGroup>
2. 리소스에서 아이콘 가져오기
이제 아이콘 파일이 리소스로 등록되었으니, 이를 NotifyIcon에 설정하는 코드를 작성합니다.

csharp
코드 복사
using System;
using System.Windows;
using System.Windows.Forms; // Windows Forms 사용을 위해 추가
using System.Drawing; // Icon 사용을 위해 추가

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private NotifyIcon _notifyIcon;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTrayIcon();
        }

        private void InitializeTrayIcon()
        {
            _notifyIcon = new NotifyIcon();
            // 리소스에서 아이콘 로드
            var resourceStream = Application.GetResourceStream(new Uri("pack://application:,,,/youricon.ico")).Stream;
            _notifyIcon.Icon = new Icon(resourceStream);

            _notifyIcon.Visible = true;
            _notifyIcon.DoubleClick += NotifyIcon_DoubleClick;

            AppDomain.CurrentDomain.ProcessExit += OnProcessExit;
            Application.Current.Exit += OnApplicationExit;
        }

        private void NotifyIcon_DoubleClick(object sender, EventArgs e)
        {
            // 트레이 아이콘 더블 클릭 시 동작할 코드
            this.Show();
            this.WindowState = WindowState.Normal;
        }

        private void OnApplicationExit(object sender, ExitEventArgs e)
        {
            if (_notifyIcon != null)
            {
                _notifyIcon.Visible = false;
                _notifyIcon.Dispose();
            }
        }

        private void OnProcessExit(object sender, EventArgs e)
        {
            if (_notifyIcon != null)
            {
                _notifyIcon.Visible = false;
                _notifyIcon.Dispose();
            }
        }

        protected override void OnClosed(EventArgs e)
        {
            _notifyIcon.Dispose(); // 트레이 아이콘 파괴
            base.OnClosed(e);
        }
    }
}
App.xaml.cs 수정
App.xaml.cs에서는 MainWindow를 생성하지 않고, 트레이 아이콘 처리만 MainWindow 내에서 하도록 합니다.

csharp
코드 복사
using System;
using System.Windows;

namespace SMDFileCleaner
{
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // MainWindow는 여기서 생성하지 않음
        }
    }
}
이 방법으로 아이콘 파일을 실행 파일에 포함시켜 배포할 수 있으며, 리소스에서 직접 아이콘을 로드하여 사용할 수 있습니