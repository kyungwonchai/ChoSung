라 프리뷰를 설정하고, 포커스 영역을 조정하는 긴 함수와 관련된 부분을 수정해 드리겠습니다. 아래는 Camera2Interop을 사용하여 Preview.Builder와 함께 CaptureRequest 옵션을 설정하는 예시입니다.

수정된 코드 예시 (MainActivity.kt)
kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.Rect
import android.hardware.camera2.CaptureRequest
import android.hardware.camera2.params.MeteringRectangle
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        previewView = findViewById(R.id.previewView)
        cameraExecutor = Executors.newSingleThreadExecutor()

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            // 프리뷰 빌더를 초기화하고 Camera2Interop을 사용해 추가 설정 적용
            val previewBuilder = Preview.Builder()
            val camera2Interop = Camera2Interop.Extender(previewBuilder)

            // 포커스 영역 설정 (예: 화면 중앙의 20% 영역)
            val sensorArraySize = cameraProvider.getAvailableCameraInfos()[0]
                .cameraControl.cameraInfo.sensorInfo.pixelArraySize

            val focusArea = Rect(
                (sensorArraySize.width * 0.4).toInt(),
                (sensorArraySize.height * 0.4).toInt(),
                (sensorArraySize.width * 0.6).toInt(),
                (sensorArraySize.height * 0.6).toInt()
            )

            val meteringRectangle = MeteringRectangle(focusArea, MeteringRectangle.METERING_WEIGHT_MAX)

            camera2Interop.setCaptureRequestOption(
                CaptureRequest.CONTROL_AF_MODE,
                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
            )

            camera2Interop.setCaptureRequestOption(
                CaptureRequest.CONTROL_AF_REGIONS,
                arrayOf(meteringRectangle)
            )

            camera2Interop.setCaptureRequestOption(
                CaptureRequest.CONTROL_AE_REGIONS,
                arrayOf(meteringRectangle)
            )

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA
        )
    }
}
코드 설명:
Preview.Builder 및 Camera2Interop 사용:

Preview.Builder는 카메라 프리뷰를 구성하는 객체입니다. Camera2Interop.Extender를 사용하여 Camera2 API와 통합하여 추가 설정을 할 수 있습니다.
포커스 영역 설정:

sensorArraySize를 통해 카메라 센서의 전체 크기를 가져옵니다.
Rect를 사용해 초점을 맞출 영역을 설정합니다. 이 예제에서는 화면의 중앙 20% 영역을 사용했습니다.
CaptureRequest 설정:

CONTROL_AF_MODE_CONTINUOUS_PICTURE: 자동 초점 모드를 지속적으로 활성화합니다.
CONTROL_AF_REGIONS와 CONTROL_AE_REGIONS를 설정하여 초점 및 노출 영역을 지정합니다. 이때 동일한 MeteringRectangle을 사용하여 중앙 영역에 대한 초점과 노출을 우선시합니다.
카메라 초기화:

startCamera 함수는 CameraX를 통해 카메라를 초기화하고, 지정된 설정을 적용하여 프리뷰를 시작합니다.
에러 해결 팁:
의존성 확인:

Camera2Interop을 사용하려면 아래와 같은 의존성을 build.gradle(:app)에 추가해야 합니다.

gradle
코드 복사
dependencies {
    implementation "androidx.camera:camera-core:1.1.0"
    implementation "androidx.camera:camera-camera2:1.1.0"
    implementation "androidx.camera:camera-lifecycle:1.1.0"
    implementation "androidx.camera:camera-view:1.0.0-alpha31"
}
프로젝트 동기화 및 클린 빌드:

의존성을 추가한 후, 프로젝트를 동기화(Sync)하고 클린 빌드(Clean Build)하여 문제를 해결할 수 있습니다.
이 코드를 사용하면, 카메라 프리뷰에서 포커스 영역을 설정하고 자동 초점 및 노출을 최적화할 수 있습니다. 추가적인 문제나 질문이 있으면 언제든지 말씀해 주세요.