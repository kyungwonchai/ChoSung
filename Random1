네, "마스터 모드 활성화" 메시지는 뜨는데 해당 탭이 보이지 않는 문제는 XAML 바인딩(Binding) 설정, 특히 Visibility 속성과 관련된 부분일 가능성이 높습니다.

가장 유력한 원인은 Visibility 바인딩에 사용된 BooleanToVisibilityConverter가 프로젝트에 정의되지 않았거나 XAML 리소스에 추가되지 않았기 때문입니다. 이 컨버터는 ViewModel의 bool 타입 속성(IsMasterModeEnabled) 값을 UI의 Visibility 속성(Visible/Collapsed)으로 변환하는 역할을 합니다. 컨버터가 없으면 바인딩이 실패하고, FallbackValue=Collapsed 설정 때문에 탭이 숨겨진 상태로 유지됩니다.

해결 단계:

BooleanToVisibilityConverter 클래스 구현: Infrastructure 폴더에 컨버터 클래스 파일을 추가합니다.
XAML 리소스에 컨버터 추가: MainWindow.xaml의 리소스 섹션에 생성한 컨버터를 등록합니다.
MainViewModel 확인: IsMasterModeEnabled 속성이 변경될 때 OnPropertyChanged 알림이 제대로 발생하는지 확인합니다 (SetProperty 메서드 사용 확인).
수정/추가해야 할 파일:

Infrastructure/BooleanToVisibilityConverter.cs (신규)
Views/MainWindow.xaml (리소스 추가)
ViewModels/MainViewModel.cs (확인용으로 전체 코드 제공)
아래에 해당 파일들의 전체 코드를 작성합니다.

1. Infrastructure/BooleanToVisibilityConverter.cs (신규 파일)

이 파일을 프로젝트의 Infrastructure 폴더에 추가하세요.

C#

using System;
using System.Globalization; // CultureInfo 사용
using System.Windows; // Visibility 사용
using System.Windows.Data; // IValueConverter 사용

namespace LockerManagementApp.Infrastructure
{
    /// <summary>
    /// bool 값을 Visibility 값으로 변환하는 WPF IValueConverter 입니다.
    /// true -> Visibility.Visible
    /// false -> Visibility.Collapsed
    /// </summary>
    [ValueConversion(typeof(bool), typeof(Visibility))] // 컨버터 타입 명시 (선택 사항)
    public class BooleanToVisibilityConverter : IValueConverter
    {
        /// <summary>
        /// 소스(bool) 값을 타겟(Visibility) 값으로 변환합니다.
        /// </summary>
        /// <param name="value">소스 값 (bool)</param>
        /// <param name="targetType">타겟 타입 (Visibility)</param>
        /// <param name="parameter">컨버터 파라미터 (여기서는 사용 안 함)</param>
        /// <param name="culture">문화권 정보</param>
        /// <returns>Visibility 값</returns>
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // value가 bool 타입인지 확인하고, true이면 Visible, false이면 Collapsed 반환
            if (value is bool boolValue)
            {
                return boolValue ? Visibility.Visible : Visibility.Collapsed;
            }
            // 기본값 또는 예외 처리 (여기서는 기본값 Collapsed 반환)
            return Visibility.Collapsed;
        }

        /// <summary>
        /// 타겟(Visibility) 값을 소스(bool) 값으로 변환합니다. (여기서는 사용 안 함)
        /// </summary>
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            // 양방향 바인딩이 아니므로 구현 불필요
            throw new NotImplementedException();
        }
    }
}
2. Views/MainWindow.xaml (수정)

<dx:ThemedWindow.Resources> 섹션 안에 BooleanToVisibilityConverter를 추가합니다. Visibility 바인딩 부분은 이전과 동일하게 유지합니다 (컨버터만 추가되면 작동해야 합니다).

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure" Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/> <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal"> <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}"/> <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}"/> </StackPanel>
            </Border>
        </DockPanel>

        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="사물함 관리">
                <Grid>
                    <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                    <Border Grid.Row="0" Background="WhiteSmoke" Padding="3"> <StackPanel Orientation="Horizontal"> <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/> <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/> <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/> </StackPanel> </Border>
                    <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                        <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always"> <dxg:TableView.RowCellMenuCustomizations> <dxb:BarButtonItem Content="배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/> <dxb:BarItemSeparator/> <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/> </dxg:TableView.RowCellMenuCustomizations> </dxg:TableView> </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="변경 로그" DataContext="{Binding LogVM}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>
                     <Button Grid.Row="0" Content="🔄 로그 새로고침" Command="{Binding LoadLogsCommand}" HorizontalAlignment="Left" Margin="5"/>
                     <dxg:GridControl Grid.Row="1" ItemsSource="{Binding AuditLogs}">
                         <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" AllowEditing="False" ShowGroupPanel="False" ShowAutoFilterRow="True"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="Timestamp" Header="시간" Width="150" SortOrder="Descending" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="UserName" Header="사용자" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Action" Header="작업" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="TableName" Header="테이블" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="RecordId" Header="레코드 ID" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="AffectedColumns" Header="변경 컬럼" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="OldValues" Header="변경 전 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="NewValues" Header="변경 후 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                     <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem> </StatusBar>
                 </Grid>
            </TabItem>
            <TabItem Header="마스터 데이터 관리" DataContext="{Binding MasterDataVM}"
                     Visibility="{Binding DataContext.IsMasterModeEnabled, RelativeSource={RelativeSource AncestorType={dx:ThemedWindow}}, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                     <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5"> <Button Content="💾 마스터 데이터 저장" Command="{Binding SaveChangesCommand}" Margin="3"/> <Button Content="🔄 마스터 데이터 새로고침" Command="{Binding LoadAllMasterDataCommand}" Margin="3"/> <TextBlock Text="{Binding StatusMessage}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="Gray"/> </StackPanel>
                     <dxlc:LayoutControl Grid.Row="1" Orientation="Vertical">
                         <dxlc:LayoutGroup Header="사물함 종류" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="종류 추가" Command="{Binding AddItemCommand}" CommandParameter="LockerType" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding LockerTypes}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="종류 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="층" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="층 추가" Command="{Binding AddItemCommand}" CommandParameter="Floor" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Floors}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="층 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="구역" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="구역 추가" Command="{Binding AddItemCommand}" CommandParameter="Zone" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Zones}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="구역 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="소파트" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="소파트 추가" Command="{Binding AddItemCommand}" CommandParameter="SubPart" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding SubParts}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="소파트 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="관리자" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="관리자 추가" Command="{Binding AddItemCommand}" CommandParameter="Administrator" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Administrators}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="관리자 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                     </dxlc:LayoutControl>
                 </Grid>
            </TabItem>
        </TabControl>

        <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem> </StatusBar>
    </Grid>

</dx:ThemedWindow>
3. ViewModels/MainViewModel.cs (확인용)

IsMasterModeEnabled 속성 정의 부분이 SetProperty를 사용하여 PropertyChanged 알림을 제대로 발생시키는지 확인합니다. (이전 코드와 동일하며 올바르게 구현되어 있습니다.)

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;

namespace LockerManagementApp.ViewModels
{
    public class MainViewModel : ViewModelBase, IDisposable
    {
        // ... (다른 멤버 변수들) ...

        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false; // 마스터 관리 탭 활성화 여부

        // ... (다른 컬렉션들) ...

        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }

        #region Public Properties
        // ... (다른 속성들) ...

        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }

        /// <summary>
        /// 마스터 관리 탭의 표시 여부 (마스터 키 확인 후 true로 변경)
        /// 이 속성 값이 변경될 때 SetProperty를 통해 PropertyChanged 이벤트가 발생해야 합니다.
        /// </summary>
        public bool IsMasterModeEnabled
        {
            get => _isMasterModeEnabled;
            // SetProperty를 사용하여 값 변경 및 UI 알림 처리
            set => SetProperty(ref _isMasterModeEnabled, value);
        }

        // ... (다른 속성들) ...
        #endregion

        // ... (생성자, 메서드, IDisposable 구현 등 나머지 코드) ...
        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            MasterDataVM = new MasterDataViewModel();
            LogVM = new LogViewModel();

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());

            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        private async Task LoadInitialDataAsync() { await LoadMasterDataAsync(); await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync() { if (_context == null) return; StatusBarText = "사물함 목록 로딩 중..."; try { var assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(); LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; } catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); } }
        private async Task LoadMasterDataAsync() { if (_context == null) return; StatusBarText = "마스터 데이터(콤보박스용) 로딩 중..."; try { AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync()); AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync()); AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync()); AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync()); AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync()); StatusBarText = "마스터 데이터(콤보박스용) 로드 완료."; } catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader")) { HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx); MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); } catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); } }
        private void CheckMasterPassword(object parameter) { try { string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"]; if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }
        private async Task SaveChangesAsync() { if (_context == null) return; StatusBarText = "변경 사항 저장 중..."; List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); } }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null || changedEntries == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
    }
}
핵심 확인 사항:

BooleanToVisibilityConverter 구현 및 등록: Infrastructure 폴더에 BooleanToVisibilityConverter.cs 파일이 있는지, 그리고 MainWindow.xaml의 <dx:ThemedWindow.Resources> 안에 <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/> 리소스가 주석 처리되지 않고 올바르게 등록되어 있는지 확인하세요. 이 컨버터가 없으면 Visibility 바인딩이 작동하지 않아 탭이 보이지 않습니다.
MainViewModel의 IsMasterModeEnabled 속성: 이 속성의 set 접근자에서 SetProperty(ref _isMasterModeEnabled, value)가 호출되어 UI에 변경 알림이 가는지 확인합니다. (위 코드에는 올바르게 구현되어 있습니다.)
XAML 바인딩 경로: MainWindow.xaml의 마스터 데이터 탭 Visibility 바인딩 경로가 정확한지 다시 확인합니다.
XML

 Visibility="{Binding DataContext.IsMasterModeEnabled, RelativeSource={RelativeSource AncestorType={dx:ThemedWindow}}, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"