음은 pyodbc 대신 pymssql로 대체하여 구현한 Flask 애플리케이션 코드입니다. MSSQL2014에서 데이터를 조회하고, 데이터를 화면에 표시하면서 버튼을 통해 엑셀로 내보내는 기능을 제공합니다.

1. pymssql 설치
pymssql 라이브러리를 설치합니다:

bash
코드 복사
pip install pymssql pandas openpyxl
2. Flask 애플리케이션 코드
python
코드 복사
from flask import Flask, render_template, request, send_file
import pymssql
import pandas as pd
import os

app = Flask(__name__)

# MSSQL 데이터베이스 연결 정보
DB_CONFIG = {
    "server": "YOUR_SERVER",
    "database": "YOUR_DATABASE",
    "username": "YOUR_USERNAME",
    "password": "YOUR_PASSWORD"
}

# MSSQL 연결 함수
def get_db_connection():
    return pymssql.connect(
        server=DB_CONFIG['server'],
        user=DB_CONFIG['username'],
        password=DB_CONFIG['password'],
        database=DB_CONFIG['database']
    )

# /meserr 페이지
@app.route('/meserr', methods=['GET', 'POST'])
def meserr():
    if request.method == 'POST':  # 엑셀로 내보내기 요청
        # 데이터 조회
        conn = get_db_connection()
        query = """
            SELECT 
                linename AS '라인',
                magno AS 'MAG',
                CONVERT(VARCHAR, Time1, 121) AS '시간',
                ngname AS '에러명',
                MessageContent AS '에러메시지',
                Remarks AS '비고'
            FROM View_MESErr_UniqueJoin
        """
        df = pd.read_sql(query, conn)
        conn.close()

        # 엑셀 파일 생성
        file_path = os.path.join(os.getcwd(), 'meserr_export.xlsx')
        df.to_excel(file_path, index=False, engine='openpyxl')

        # 파일 다운로드 제공
        return send_file(file_path, as_attachment=True)

    # GET 요청 - 데이터 조회 및 렌더링
    conn = get_db_connection()
    query = """
        SELECT 
            linename AS '라인',
            magno AS 'MAG',
            CONVERT(VARCHAR, Time1, 121) AS '시간',
            ngname AS '에러명',
            MessageContent AS '에러메시지',
            Remarks AS '비고'
        FROM View_MESErr_UniqueJoin
    """
    df = pd.read_sql(query, conn)
    conn.close()

    # 데이터를 HTML에 전달
    return render_template('meserr.html', data=df.to_dict(orient='records'))

# Flask 실행
if __name__ == '__main__':
    app.run(debug=True)
3. HTML 템플릿 (templates/meserr.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MES Error Viewer</title>
</head>
<body>
    <h1>MES Error Logs</h1>
    <table border="1">
        <thead>
            <tr>
                <th>라인</th>
                <th>MAG</th>
                <th>시간</th>
                <th>에러명</th>
                <th>에러메시지</th>
                <th>비고</th>
            </tr>
        </thead>
        <tbody>
            {% for row in data %}
                <tr>
                    <td>{{ row['라인'] }}</td>
                    <td>{{ row['MAG'] }}</td>
                    <td>{{ row['시간'] }}</td>
                    <td>{{ row['에러명'] }}</td>
                    <td>{{ row['에러메시지'] }}</td>
                    <td>{{ row['비고'] }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>

    <form method="POST" action="/meserr">
        <button type="submit">엑셀로 내보내기</button>
    </form>
</body>
</html>
주요 변경 사항
MSSQL 연결:

pymssql로 MSSQL에 연결합니다.
pymssql.connect를 통해 연결을 생성합니다.
pandas.read_sql을 사용하여 데이터를 DataFrame 형식으로 가져옵니다.
Time1 형식 변환:

CONVERT(VARCHAR, Time1, 121)을 사용해 yyyy-MM-dd HH:mm:ss.fff 형식으로 데이터를 변환합니다.
엑셀 내보내기:

데이터를 Pandas의 to_excel을 사용해 엑셀 파일로 저장합니다.
저장된 파일을 Flask의 send_file을 통해 다운로드합니다.
실행 방법
Flask 애플리케이션을 실행합니다:

bash
코드 복사
python app.py
브라우저에서 /meserr 경로로 이동합니다:

arduino
코드 복사
http://127.0.0.1:5000/meserr
페이지에서 데이터를 확인하고, "엑셀로 내보내기" 버튼을 클릭하면 엑셀 파일이 다운로드됩니다.

주의사항
MSSQL 연결 정보(DB_CONFIG)를 환경에 맞게 설정하세요.
pymssql은 MSSQL 드라이버를 필요로 하므로, 서버에 적절히 설치되어야 합니다.