송합니다. 이전에 충분한 정보를 제공하지 못한 점 사과드립니다. DevExpress의 WPF TreeListView를 사용하여 날짜 선택 및 라인 선택 기능을 구현하는 방법을 자세히 설명드리겠습니다.

1. 프로젝트 설정
먼저, DevExpress WPF 라이브러리가 프로젝트에 포함되어 있는지 확인하세요. NuGet 패키지 관리자를 통해 DevExpress WPF 패키지를 설치할 수 있습니다.

2. 데이터 모델 정의
TreeListView에 바인딩할 데이터를 정의합니다. 예를 들어, 라인 그룹과 라인 정보를 나타내는 클래스를 생성합니다.

csharp
코드 복사
public class LineInfo
{
    public int ID { get; set; }
    public int ParentID { get; set; } // 부모 노드의 ID
    public string LineName { get; set; }
    public bool IsChecked { get; set; }
}
여기서 ID와 ParentID는 트리 구조를 형성하는 데 사용됩니다. ParentID가 0인 경우 최상위 노드로 간주됩니다.

3. XAML에서 TreeListView 설정
TreeListView를 XAML에 추가하고 필요한 속성을 설정합니다.

xml
코드 복사
<dxg:GridControl x:Name="treeListControl" AutoGenerateColumns="AddNew" EnableSmartColumnsGeneration="True">
    <dxg:GridControl.View>
        <dxg:TreeListView x:Name="treeListView"
                          AutoWidth="True"
                          KeyFieldName="ID"
                          ParentFieldName="ParentID"
                          AutoExpandAllNodes="True"
                          ShowCheckBoxSelectorColumn="True"
                          CheckBoxSelectorField="IsChecked" />
    </dxg:GridControl.View>
</dxg:GridControl>
KeyFieldName과 ParentFieldName 속성은 데이터의 계층 구조를 정의합니다.
AutoExpandAllNodes를 True로 설정하면 모든 노드가 기본적으로 확장됩니다.
ShowCheckBoxSelectorColumn을 True로 설정하고 CheckBoxSelectorField를 지정하면 각 노드에 체크박스가 표시됩니다.
4. 날짜 선택 기능 추가
사용자가 날짜를 선택할 수 있도록 DateEdit 컨트롤을 추가합니다.

xml
코드 복사
<StackPanel Orientation="Horizontal" Margin="10">
    <TextBlock Text="시작 날짜:" VerticalAlignment="Center" Margin="0,0,5,0" />
    <dxe:DateEdit x:Name="startDateEdit" EditValue="{Binding StartDate}" DisplayFormat="d" />
    <TextBlock Text="종료 날짜:" VerticalAlignment="Center" Margin="10,0,5,0" />
    <dxe:DateEdit x:Name="endDateEdit" EditValue="{Binding EndDate}" DisplayFormat="d" />
</StackPanel>
여기서 DisplayFormat="d"는 날짜만 표시하도록 설정합니다. 기본적으로 선택된 날짜의 시간은 00:00으로 설정되지만, 필요에 따라 시간 부분을 조정할 수 있습니다.

5. 데이터 바인딩 및 로드
TreeListView에 데이터를 바인딩하고, 날짜 선택에 따른 필터링 기능을 구현합니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    public ObservableCollection<LineInfo> LineData { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    public MainWindow()
    {
        InitializeComponent();
        DataContext = this;

        // 예시 데이터 로드
        LoadLineData();

        // 기본 날짜 설정
        StartDate = DateTime.Now.Date.AddHours(8);
        EndDate = DateTime.Now.Date.AddHours(8);
    }

    private void LoadLineData()
    {
        LineData = new ObservableCollection<LineInfo>
        {
            new LineInfo { ID = 1, ParentID = 0, LineName = "Group A", IsChecked = true },
            new LineInfo { ID = 2, ParentID = 1, LineName = "Line 1", IsChecked = true },
            new LineInfo { ID = 3, ParentID = 1, LineName = "Line 2", IsChecked = true },
            new LineInfo { ID = 4, ParentID = 0, LineName = "Group B", IsChecked = true },
            new LineInfo { ID = 5, ParentID = 4, LineName = "Line 3", IsChecked = true },
            new LineInfo { ID = 6, ParentID = 4, LineName = "Line 4", IsChecked = true }
        };

        treeListControl.ItemsSource = LineData;
    }
}
여기서 LoadLineData 메서드는 예시 데이터를 로드합니다. 실제 애플리케이션에서는 데이터베이스나 다른 데이터 소스에서 데이터를 로드하도록 구현해야 합니다.

6. 필터링 기능 구현
선택된 날짜와 체크된 라인에 따라 데이터를 필터링하는 기능을 구현합니다.

csharp
코드 복사
private void ApplyFilter()
{
    var selectedLines = LineData.Where(line => line.IsChecked).Select(line => line.LineName).ToList();

    if (!selectedLines.Any())
    {
        MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
        return;
    }

    // 선택된 날짜와 라인에 따라 데이터를 필터링하는 로직을 구현하세요.
    // 예를 들어, 데이터베이스에서 해당 조건에 맞는 데이터를 조회하거나,
    // 이미 로드된 데이터에서 필터링할 수 있습니다.
}
필터링 로직은 애플리케이션의 요구사항에 따라 구현해야 합니다. 예를 들어, 선택된 날짜 범위와 라인에 해당하는 데이터를 데이터베이스에서 조회하거나, 이미 로드된 데이터 컬렉션에서 필터링할 수 있습니다.
