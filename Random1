ws 10 및 Windows 11 환경에서 C#을 사용하여 COM 포트 정보를 조회하고, 이를 WPF 애플리케이션의 리스트에 표시하는 방법을 설명드리겠습니다.

1. WMI를 통한 COM 포트 정보 조회:

Windows Management Instrumentation(WMI)을 활용하면 시스템의 COM 포트 정보를 프로그래밍적으로 가져올 수 있습니다. 이를 위해 System.Management 네임스페이스를 사용합니다.

2. WPF 애플리케이션에서 MVVM 패턴 적용:

WPF 애플리케이션에서 MVVM(Model-View-ViewModel) 패턴을 적용하여 COM 포트 정보를 리스트에 표시하는 방법을 구현합니다.

구현 단계:

1. 프로젝트 설정:

Visual Studio에서 새로운 WPF 애플리케이션 프로젝트를 생성합니다.
프로젝트에 System.Management 어셈블리를 참조로 추가합니다.
2. ViewModel 작성:

COM 포트 정보를 가져와서 UI에 바인딩하기 위해 ViewModel을 작성합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Management;
using System.Runtime.CompilerServices;

namespace ComPortViewer
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<string> _comPortDetails;
        public ObservableCollection<string> ComPortDetails
        {
            get => _comPortDetails;
            set
            {
                _comPortDetails = value;
                OnPropertyChanged();
            }
        }

        public MainViewModel()
        {
            ComPortDetails = new ObservableCollection<string>();
            LoadComPortSettings();
        }

        private void LoadComPortSettings()
        {
            ComPortDetails.Clear();

            try
            {
                using (ManagementObjectSearcher searcher = new ManagementObjectSearcher("SELECT * FROM Win32_SerialPort"))
                {
                    foreach (ManagementObject queryObj in searcher.Get())
                    {
                        string portInfo = $"Port: {queryObj["DeviceID"]}, " +
                                          $"Name: {queryObj["Name"]}, " +
                                          $"Baud Rate: {queryObj["MaxBaudRate"]}, " +
                                          $"Parity: {queryObj["Parity"]}, " +
                                          $"Stop Bits: {queryObj["StopBits"]}";
                        ComPortDetails.Add(portInfo);
                    }
                }
            }
            catch (ManagementException ex)
            {
                ComPortDetails.Add($"Error: {ex.Message}");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
3. View 작성:

XAML을 사용하여 UI를 구성하고, ViewModel과 바인딩합니다.

xml
코드 복사
<Window x:Class="ComPortViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Viewer" Height="400" Width="600">
    <Grid>
        <ListBox ItemsSource="{Binding ComPortDetails}" Margin="10"/>
    </Grid>
</Window>
4. View와 ViewModel 연결:

MainWindow.xaml.cs에서 ViewModel을 DataContext로 설정합니다.

csharp
코드 복사
using System.Windows;

namespace ComPortViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }
    }
}
주의사항:

System.Management 네임스페이스를 사용하기 위해서는 해당 어셈블리를 프로젝트에 참조로 추가해야 합니다.
WMI 쿼리를 실행할 때는 예외 처리를 통해 오류를 처리하는 것이 좋습니다.
이러한 방법을 통해 Windows 10과 Windows 11 환경에서 C#을 사용하여 COM 포트 정보를 확인하고, WPF 애플리케이션의 리스트에 표시할 수 있습니다.

