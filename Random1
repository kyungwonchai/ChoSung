 위해 MLModelBuilder 클래스에서 학습된 패턴을 반환하고, MainWindow.xaml.cs에서 이를 UI에 표시하는 코드를 추가하겠습니다.

MLModelBuilder.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace SMDFileCleaner
{
    public class MLModelBuilder
    {
        private readonly MLContext _mlContext;
        private ITransformer _model;
        private List<FileRecord> _fileDataList;
        private List<Regex> _patterns;

        public MLModelBuilder()
        {
            _mlContext = new MLContext();
            _fileDataList = new List<FileRecord>();
            _patterns = new List<Regex>();
        }

        public void TrainModel(List<FileRecord> fileData)
        {
            try
            {
                if (fileData == null || fileData.Count < 10) // 최소 샘플 수 확인
                {
                    throw new InvalidOperationException("Not enough samples to train the model. Minimum required samples: 10");
                }

                _fileDataList = fileData;
                var data = _mlContext.Data.LoadFromEnumerable(fileData);

                var pipeline = _mlContext.Transforms.Concatenate("Features", nameof(FileRecord.Size))
                    .Append(_mlContext.Transforms.Text.FeaturizeText("FolderPathFeaturized", nameof(FileRecord.FolderPath)))
                    .Append(_mlContext.Transforms.Text.FeaturizeText("FilePathFeaturized", nameof(FileRecord.FilePath)))
                    .Append(_mlContext.Transforms.Concatenate("Features", "Features", "FolderPathFeaturized", "FilePathFeaturized"))
                    .Append(_mlContext.Transforms.Conversion.ConvertType("Features", outputKind: DataKind.Single))
                    .Append(_mlContext.Clustering.Trainers.KMeans("Features", numberOfClusters: 2));

                _model = pipeline.Fit(data);

                // 학습된 패턴 생성
                _patterns = ExtractPatterns(_fileDataList);
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Failed to train model: " + ex.Message, ex);
            }
        }

        public bool Predict(FileInfo fileInfo)
        {
            try
            {
                if (_model == null)
                {
                    throw new InvalidOperationException("Model is not trained.");
                }

                var fileData = new FileRecord
                {
                    Size = (float)fileInfo.Length, // float 형식으로 변환
                    FolderPath = fileInfo.DirectoryName,
                    FilePath = fileInfo.FullName
                };

                var predictionEngine = _mlContext.Model.CreatePredictionEngine<FileRecord, FilePrediction>(_model);
                var prediction = predictionEngine.Predict(fileData);

                return prediction.PredictedClusterId == 1; // Cluster 1 is considered as regularly generated files
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Failed to predict file classification: " + ex.Message, ex);
            }
        }

        public List<Regex> GetRegexPatterns()
        {
            return _patterns;
        }

        private List<Regex> ExtractPatterns(List<FileRecord> trainingData)
        {
            var patterns = new List<Regex>();

            // 모든 폴더 경로에서 공통된 부분을 찾아서 정규식 패턴으로 변환
            var folderPaths = trainingData.Select(f => f.FolderPath).Distinct().ToList();
            if (folderPaths.Count > 1)
            {
                var commonPattern = FindCommonPattern(folderPaths);
                if (!string.IsNullOrEmpty(commonPattern))
                {
                    patterns.Add(new Regex(commonPattern));
                }
            }

            // 파일 경로 길이에 대한 패턴 추가
            var filePathLengths = trainingData.Select(f => f.FilePath.Length).ToList();
            var minFilePathLength = filePathLengths.Min();
            var maxFilePathLength = filePathLengths.Max();

            patterns.Add(new Regex(@".{" + minFilePathLength + "," + maxFilePathLength + "}"));

            return patterns;
        }

        private string FindCommonPattern(List<string> paths)
        {
            // 모든 경로에서 공통된 부분을 찾기 위해 LCS(Longest Common Subsequence) 알고리즘 사용
            var lcs = FindLCS(paths);
            if (string.IsNullOrEmpty(lcs))
            {
                return string.Empty;
            }

            // 공통된 부분을 정규식 패턴으로 변환
            var regexPattern = Regex.Escape(lcs).Replace("\\*", ".*").Replace("\\?", ".");
            return regexPattern;
        }

        private string FindLCS(List<string> strs)
        {
            if (strs == null || strs.Count == 0)
            {
                return string.Empty;
            }

            var lcs = strs[0];
            foreach (var str in strs)
            {
                lcs = FindLCS(lcs, str);
            }

            return lcs;
        }

        private string FindLCS(string str1, string str2)
        {
            var lengths = new int[str1.Length, str2.Length];
            var greatestLength = 0;
            var output = string.Empty;

            for (int i = 0; i < str1.Length; i++)
            {
                for (int j = 0; j < str2.Length; j++)
                {
                    if (str1[i] == str2[j])
                    {
                        lengths[i, j] = (i == 0 || j == 0) ? 1 : lengths[i - 1, j - 1] + 1;
                        if (lengths[i, j] > greatestLength)
                        {
                            greatestLength = lengths[i, j];
                            output = str1.Substring(i - greatestLength + 1, greatestLength);
                        }
                    }
                }
            }

            return output;
        }
    }

    public class FilePrediction
    {
        [ColumnName("PredictedLabel")]
        public uint PredictedClusterId { get; set; }
    }
}
MainWindow.xaml.cs
이제 MainWindow.xaml.cs에서 학습된 패턴을 UI에 표시하도록 수정하겠습니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private NotifyIcon notifyIcon;
        private SettingsManager _settingsManager;
        private Logger _logger;
        private MLModelBuilder _mlModelBuilder;
        private FileCleaner _fileCleaner;
        private const long MinimumSampleSize = 21; // 최소 샘플 수를 21개로 설정
        private const long MinimumFreeSpace = 25L * 1024 * 1024 * 1024; // 25 GB
        private const long MaxFolderSize = 8L * 1024 * 1024 * 1024; // 8 GB
        private List<FileRecord> _trainingData;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTrayIcon();
            _settingsManager = new SettingsManager("C:\\Agent\\SMDClean");
            _logger = new Logger("C:\\Agent\\SMDClean\\Logs", Dispatcher, LogRecentActivity, LogDeletionActivity);
            _mlModelBuilder = new MLModelBuilder();
            _fileCleaner = new FileCleaner("C:\\Agent\\SMDClean\\Logs", _mlModelBuilder, Dispatcher, _logger, UpdateFolderStatistics);
            LoadSettings();
        }

        private void InitializeTrayIcon()
        {
            notifyIcon = new NotifyIcon
            {
                Icon = System.Drawing.SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
            };

            notifyIcon.ContextMenuStrip.Items.Add("열기", null, Open_Click);
            notifyIcon.ContextMenuStrip.Items.Add("닫기", null, Close_Click);
            notifyIcon.DoubleClick += Open_Click;
        }

        private void Open_Click(object sender, EventArgs e)
        {
            Show();
            WindowState = WindowState.Normal;
        }

        private void Close_Click(object sender, EventArgs e)
        {
            if (System.Windows.MessageBox.Show("프로그램을 종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
            {
                notifyIcon.Dispose();
                Application.Current.Shutdown();
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
            notifyIcon.BalloonTipText = "프로그램이 트레이로 최소화되었습니다.";
            notifyIcon.ShowBalloonTip(3000);
        }

        private void btnExit_Click(object sender, RoutedEventArgs e)
        {
            Close_Click(sender, e);
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = txtFolderPath.Text;
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    txtFolderPath.Text = dialog.SelectedPath;
                    SaveSettings(); // 폴더 선택 시 설정 저장
                }
            }
        }

        private void SaveSettings()
        {
            try
            {
                _settingsManager.SaveSettings(new Settings
                {
                    FolderPath = txtFolderPath.Text,
                    FileExtension = cmbFileExtension.Text,
                    DriveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = _settingsManager.LoadSettings();
                if (settings != null)
                {
                    txtFolderPath.Text = settings.FolderPath ?? "D:\\";
                    cmbFileExtension.Text = settings.FileExtension ?? ".jpg";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private async void btnStart_Click(object sender, RoutedEventArgs e)
        {
            string folderPath = txtFolderPath.Text;
            string fileExtension = cmbFileExtension.Text;
            string driveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\";

            if (string.IsNullOrEmpty(folderPath) || string.IsNullOrEmpty(fileExtension))
            {
                System.Windows.MessageBox.Show("모든 입력값을 제공해주세요.");
                return;
            }

            try
            {
                LogRecentActivity("학습 중...");

                _trainingData = await Task.Run(() => CollectInitialFileData(folderPath, fileExtension));
                if (_trainingData.Count < MinimumSampleSize)
                {
                    System.Windows.MessageBox.Show($"학습 모델을 훈련시키기에 샘플이 충분하지 않습니다. 최소 샘플 수: {MinimumSampleSize}");
                    LogRecentActivity("학습 실패: 샘플 부족");
                    return;
                }

                _mlModelBuilder.TrainModel(_trainingData);

                LogRecentActivity("학습 완료");
                LogRecentActivity(string.Join(", ", _mlModelBuilder.GetRegexPatterns().Select(p => p.ToString())));

                // 학습된 패턴을 UI에 표시
                var patterns = _mlModelBuilder.GetRegexPatterns();
                txtTrainingStatus.Text = "학습된 패턴:\n" + string.Join("\n", patterns.Select(p => p.ToString()));

                Dispatcher.Invoke(() =>
                {
                    dataGridTrainingData.ItemsSource = _trainingData.Select(f => new
                    {
                        f.FilePath,
                        f.Extension,
                        f.Size,
                        f.FolderPath,
                        Pattern = _mlModelBuilder.GetPattern(f.FilePath)
                    }).ToList();

                    HighlightTrainingData();
                });

                await Task.Run(() => MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName));
            }
            catch (Exception ex)
            {
                _logger.LogError("모델 훈련 실패: " + ex.Message);
                LogRecentActivity("학습 실패: " + ex.Message);
            }
        }

        private List<FileRecord> CollectInitialFileData(string folderPath, string fileExtension)
        {
            var fileDataList = new List<FileRecord>();
            try
            {
                var files = GetFiles(folderPath, fileExtension);
                if (files != null && files.Count >= MinimumSampleSize)
                {
                    fileDataList = files.Select(f => new FileRecord
                    {
                        FilePath = f.FullName,
                        Extension = f.Extension,
                        Size = (float)f.Length,
                        FolderPath = f.DirectoryName
                    }).ToList();

                    LogRecentActivity($"학습 중인 파일 수: {files.Count}개");
                }
                else
                {
                    LogRecentActivity("학습할 파일이 없습니다.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("파일 데이터 수집 실패: " + ex.Message);
                LogRecentActivity("파일 데이터 수집 오류.");
            }
            return fileDataList;
        }

        private List<FileInfo> GetFiles(string folderPath, string fileExtension)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles($"*{fileExtension}", SearchOption.TopDirectoryOnly)
                    .Where(f => f.Length > 1 * 1024 * 1024)); // 1MB 이상의 파일

                foreach (var subDir in directory.GetDirectories())
                {
                    if (!IsSystemVolumeInformation(subDir))
                    {
                        files.AddRange(GetFiles(subDir.FullName, fileExtension));
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                _logger.LogError("폴더 접근 거부됨: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        private bool IsSystemVolumeInformation(DirectoryInfo dirInfo)
        {
            return dirInfo.FullName.Contains("System Volume Information");
        }

        private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
        {
            while (true)
            {
                try
                {
                    long freeSpace = await Task.Run(() => _fileCleaner.GetDriveFreeSpace(driveName));
                    List<FileInfo> filesToDelete;

                    if (freeSpace <= MinimumFreeSpace)
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension, forceDelete: true));
                        _logger.LogRecentActivity($"용량이 {freeSpace / (1024 * 1024 * 1024)} GB 남아서 강제 삭제를 진행합니다.");
                    }
                    else
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension));
                        if (filesToDelete.Count > 0)
                        {
                            _logger.LogRecentActivity("삭제를 진행합니다.");
                        }
                    }

                    Dispatcher.Invoke(() => DisplayFilesToDelete(filesToDelete));
                    await _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath, forceDelete: freeSpace <= MinimumFreeSpace);

                    await Task.Run(() => _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension));
                    await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
                }
                catch (Exception ex)
                {
                    _logger.LogError("모니터링 중 오류 발생: " + ex.Message);
                }
            }
        }

        private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
        {
            Dispatcher.Invoke(() =>
            {
                lstPriorityFiles.Items.Clear();
                foreach (var file in filesToDelete)
                {
                    lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
                }

                if (filesToDelete.Count == 0)
                {
                    var allFiles = GetFiles(txtFolderPath.Text, cmbFileExtension.Text);
                    var prioritizedFiles = allFiles.OrderByDescending(f => f.CreationTime).ToList();
                    lstPriorityFiles.Items.Add("현재 삭제할 파일이 없지만, 우선순위에 따른 목록을 표시합니다:");
                    foreach (var file in prioritizedFiles)
                    {
                        lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
                    }
                }
            });
        }

        private void HighlightTrainingData()
        {
            var data = dataGridTrainingData.ItemsSource as List<dynamic>;
            if (data == null) return;

            foreach (var item in dataGridTrainingData.Items)
            {
                var row = (DataGridRow)dataGridTrainingData.ItemContainerGenerator.ContainerFromItem(item);
                if (row == null) continue;

                var cell = (DataGridCell)dataGridTrainingData.Columns[0].GetCellContent(row).Parent;
                cell.Background = System.Windows.Media.Brushes.LightYellow; // 학습 데이터 셀 강조 색상 설정
            }
        }

        private void LogRecentActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }

        private void LogDeletionActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstDeletionLogs.Items.Add(logMessage);
                if (lstDeletionLogs.Items.Count > 200)
                {
                    lstDeletionLogs.Items.RemoveAt(0);
                }
            });
        }

        private void UpdateFolderStatistics(long totalSize, string folderPath)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: 폴더: {folderPath}, 총 크기: {totalSize / (1024 * 1024)} MB";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }
    }
}
이제 MLModelBuilder에서 학습된 정규식 패턴을 MainWindow.xaml.cs에서 UI에 표시하도록 하였습니다. 학습된 패턴을 txtTrainingStatus 텍스트 박스에 표시하여