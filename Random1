필요한 컬럼을 추가하는 SQL ALTER TABLE 쿼리를 제공합니다:

sql
코드 복사
ALTER TABLE USER_INFO_Trans
ADD USER_CARD_ID VARCHAR(50);
이제, 수정된 클래스와 WPF 코드를 제공합니다. 아래 코드는 데이터를 5분에 한 번씩 동기화하고, 매칭되지 않은 데이터는 빨간색으로 표시하며, 10분에 한 번씩 사용자 변경 작업을 체크합니다.

데이터 동기화 클래스 (수정된 버전):
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;

public class DataSync
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string targetConnectionString = "Data Source=TargetServer;Initial Catalog=TargetDB;User ID=YourUsername;Password=YourPassword";
    private string oracleConnectionString = "Data Source=OracleServer;User ID=YourUsername;Password=YourPassword";

    public async Task StartDataSyncAsync()
    {
        await Task.WhenAll(SyncDataAsync(), CheckUserChangesAsync());
    }

    private async Task SyncDataAsync()
    {
        while (true)
        {
            DataTable sourceData = await GetSourceDataAsync();
            DataTable targetData = await GetTargetDataAsync();

            foreach (DataRow sourceRow in sourceData.Rows)
            {
                DataRow[] targetRows = targetData.Select($"E_NUM = '{sourceRow["E_NUM"]}'");

                if (targetRows.Length == 0)
                {
                    await InsertRowAsync(sourceRow);
                }
                else
                {
                    await UpdateRowAsync(sourceRow, targetRows[0]);
                }
            }

            // Delay for a certain interval before next sync
            await Task.Delay(TimeSpan.FromMinutes(5));
        }
    }

    private async Task<DataTable> GetSourceDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM ESD_USER_INFO WHERE PROCESS LIKE '%REPAIR%'";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private async Task<DataTable> GetTargetDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM, USER_CARD_ID FROM USER_INFO_Trans";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private async Task InsertRowAsync(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "INSERT INTO USER_INFO_Trans (PROCESS, GROUP_NAME, USER_NAME, E_NUM) VALUES (@PROCESS, @GROUP_NAME, @USER_NAME, @E_NUM)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
            cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    private async Task UpdateRowAsync(DataRow sourceRow, DataRow targetRow)
    {
        bool isDifferent = !sourceRow["PROCESS"].Equals(targetRow["PROCESS"]) ||
                           !sourceRow["GROUP_NAME"].Equals(targetRow["GROUP_NAME"]) ||
                           !sourceRow["USER_NAME"].Equals(targetRow["USER_NAME"]);

        if (isDifferent)
        {
            using (SqlConnection conn = new SqlConnection(targetConnectionString))
            {
                await conn.OpenAsync();
                string query = "UPDATE USER_INFO_Trans SET PROCESS = @PROCESS, GROUP_NAME = @GROUP_NAME, USER_NAME = @USER_NAME WHERE E_NUM = @E_NUM";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
                cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
                cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
                cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }

    public async Task<DataTable> GetOracleUserDataAsync()
    {
        using (OracleConnection conn = new OracleConnection(oracleConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT USER_NAME, USER_CARD_ID FROM OracleUserTable";
            OracleDataAdapter adapter = new OracleDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private async Task CheckUserChangesAsync()
    {
        while (true)
        {
            DataTable targetData = await GetTargetDataAsync();
            DataTable oracleData = await GetOracleUserDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                join oracle in oracleData.AsEnumerable()
                                on target.Field<string>("USER_NAME") equals oracle.Field<string>("USER_NAME") into tempJoin
                                from subOracle in tempJoin.DefaultIfEmpty()
                                where target.Field<string>("USER_CARD_ID") == "Not Matched" || subOracle == null
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = target.Field<string>("USER_CARD_ID"),
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            // Log unmatched user changes
            foreach (var row in unmatchedRows)
            {
                Console.WriteLine($"Unmatched User: {row.USER_NAME}, E_NUM: {row.E_NUM}");
            }

            // Delay for a certain interval before next check
            await Task.Delay(TimeSpan.FromMinutes(10));
        }
    }
}
WPF XAML UI (수정된 버전):
xaml
코드 복사
<Window x:Class="DataSyncApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Data Sync Application" Height="450" Width="800">
    <Grid>
        <DataGrid x:Name="dataGrid" AutoGenerateColumns="False" Margin="10" CellEditEnding="DataGrid_CellEditEnding">
            <DataGrid.Columns>
                <DataGridTextColumn Header="USER_NAME" Binding="{Binding USER_NAME}" IsReadOnly="True"/>
                <DataGridTextColumn Header="USER_CARD_ID" Binding="{Binding USER_CARD_ID}"/>
                <DataGridTextColumn Header="E_NUM" Binding="{Binding E_NUM}" IsReadOnly="True"/>
                <DataGridTextColumn Header="PROCESS" Binding="{Binding PROCESS}" IsReadOnly="True"/>
                <DataGridTextColumn Header="GROUP_NAME" Binding="{Binding GROUP_NAME}" IsReadOnly="True"/>
            </DataGrid.Columns>
        </DataGrid>
        <Button Content="Load Data" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10" Click="LoadDataButton_Click"/>
    </Grid>
</Window>
MainWindow.xaml.cs (수정된 버전):
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace DataSyncApp
{
    public partial class MainWindow : Window
    {
        private DataSync dataSync;

        public MainWindow()
        {
            InitializeComponent();
            dataSync = new DataSync();
            Task.Run(() => dataSync.StartDataSyncAsync());
        }

        private async void LoadDataButton_Click(object sender, RoutedEventArgs e)
        {
            await LoadGridControlAsync();
        }

        private async Task LoadGridControlAsync()
        {
            DataTable sourceData = await dataSync.GetSourceDataAsync();
            DataTable oracleData = await dataSync.GetOracleUserDataAsync();

            var unmatchedRows = from source in sourceData.AsEnumerable()
                                join oracle in oracleData.AsEnumerable()
                                on source.Field<string>("USER_NAME") equals oracle.Field<string>("USER_NAME") into tempJoin
                                from subOracle in tempJoin.DefaultIfEmpty()
                                select new
                                {
                                    USER_NAME = source.Field<string>("USER_NAME"),
                                    USER_CARD_ID = subOracle == null ? "Not Matched" : subOracle.Field<string>("USER_CARD_ID"),
                                    E_NUM = source.Field<string>("E_NUM"),
                                    PROCESS = source.Field<string>("PROCESS"),
                                    GROUP_NAME = source.Field<string>("GROUP_NAME")
                                };

            dataGrid.ItemsSource = unmatchedRows.ToList();

            foreach (var item in dataGrid.Items)
            {
                DataGridRow row = (DataGridRow)dataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null && ((dynamic)row.Item).USER_CARD_ID == "Not Matched")
                {
                    row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.Column.Header.ToString() == "USER_CARD_ID")
            {
                string userName = ((TextBox)e.EditingElement).Text;
                string userCardId = ((TextBox)e.EditingElement).Text;

                // Handle manual input for USER_CARD_ID
                // For example, you might update a local list or another table in the database.
            }
        }
    }
}
이 코드는 MSSQL의 USER_INFO_Trans 테이블에 USER_CARD_ID 컬럼을 추가하고, 데이터를 동기화하며, 매칭되지 않은 사용자 정보를 빨간색으로 표시하고, 10분에 한 번씩 사용자 변경 작업을 체크하여 콘솔에 로그를 남깁니다. UI는 사용자가 수동으로 USER_CA