#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pymssql
import time
import sys
import threading

# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
# ※ 사용자 설정 영역 ※
# 사용자의 데이터베이스 환경에 맞게 이 부분을 수정하세요.
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

DB_SERVER = "your_server_ip_or_hostname"  # 예: "192.168.1.100"
DB_PORT = 1433                            # MSSQL 포트 (기본값은 1433)
DB_USER = "your_username"                 # 데이터베이스 사용자 이름
DB_PASSWORD = "your_password"             # 데이터베이스 비밀번호
DB_DATABASE = "your_database_name"        # 대상 데이터베이스 이름
TARGET_TABLE = "your_table_name"          # 데이터를 삽입할 테이블 이름

# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

# 로딩 애니메이션을 위한 전역 플래그
stop_animation_flag = threading.Event()

def animate_loading():
    """콘솔에 로딩 애니메이션을 표시하는 함수"""
    for char in "|/-\\":
        if stop_animation_flag.is_set():
            break
        sys.stdout.write(f'\r업로드 중... {char}')
        sys.stdout.flush()
        time.sleep(0.1)

def main():
    """데이터베이스 연결 및 데이터 업로드를 처리하는 메인 함수"""
    conn = None
    loading_thread = None

    # 업로드할 샘플 데이터 (실제 데이터로 변경하세요)
    # 예: [(1, 'Apple'), (2, 'Banana'), (3, 'Cherry')]
    sample_data = [
        ('user01', 'Alice', 30),
        ('user02', 'Bob', 25),
        ('user03', 'Charlie', 35)
    ]

    print("데이터 업로드를 시작합니다...")
    
    try:
        # 로딩 애니메이션 시작
        stop_animation_flag.clear()
        loading_thread = threading.Thread(target=lambda: \
            [animate_loading() for _ in iter(lambda: not stop_animation_flag.is_set(), True)])
        loading_thread.daemon = True
        loading_thread.start()

        # 데이터베이스 연결 (포트 명시)
        conn = pymssql.connect(
            server=DB_SERVER,
            port=DB_PORT,
            user=DB_USER,
            password=DB_PASSWORD,
            database=DB_DATABASE,
            timeout=15, # 연결 타임아웃 (초)
            login_timeout=10 # 로그인 타임아웃 (초)
        )
        
        cursor = conn.cursor()
        
        # SQL INSERT 문 준비 (SQL Injection 방지를 위해 파라미터화된 쿼리 사용)
        # 테이블 스키마에 맞게 (id, name, age) 부분을 수정하세요.
        sql_query = f"INSERT INTO {TARGET_TABLE} (UserID, UserName, Age) VALUES (%s, %s, %d)"
        
        # executemany를 사용하여 여러 데이터를 한 번에 효율적으로 삽입
        cursor.executemany(sql_query, sample_data)
        
        # 변경사항을 데이터베이스에 최종 반영
        conn.commit()

        # 로딩 애니메이션 정지
        stop_animation_flag.set()
        loading_thread.join()
        sys.stdout.write('\r' + ' ' * 20 + '\r') # 애니메이션 흔적 지우기

        print(f"성공: {len(sample_data)}개의 데이터가 '{TARGET_TABLE}' 테이블에 성공적으로 업로드되었습니다. ?")

    except pymssql.Error as e:
        # 로딩 애니메이션 정지 (에러 발생 시)
        if loading_thread and loading_thread.is_alive():
            stop_animation_flag.set()
            loading_thread.join()
            sys.stdout.write('\r' + ' ' * 20 + '\r')

        print(f"\n오류 발생: 데이터 업로드에 실패했습니다. ?")
        print("--------------------------------------------------")
        print(f"에러 코드: {e.args[0]}")
        # pyrmssql은 에러 메시지를 바이트(byte)로 반환할 수 있으므로, 디코딩이 필요할 수 있습니다.
        try:
            error_message = e.args[1].decode('utf-8')
        except (IndexError, AttributeError):
            error_message = str(e)
        print(f"에러 원인: {error_message}")
        print("--------------------------------------------------")
        print("아래 사항을 확인해 보세요:")
        print(f"1. 서버 주소({DB_SERVER}) 및 포트({DB_PORT})가 정확한가요?")
        print("2. 방화벽에서 해당 포트가 열려 있나요?")
        print(f"3. 사용자 이름({DB_USER}) 또는 비밀번호가 올바른가요?")
        print(f"4. 데이터베이스({DB_DATABASE})와 테이블({TARGET_TABLE}) 이름이 정확한가요?")
        print("5. 해당 사용자에게 테이블에 대한 INSERT 권한이 있나요?")

    finally:
        # 모든 작업이 끝나면 항상 데이터베이스 연결을 닫습니다.
        if conn:
            conn.close()
            print("데이터베이스 연결이 종료되었습니다.")


if __name__ == "__main__":
    main()