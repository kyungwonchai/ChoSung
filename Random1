press Spreadsheet 기능을 사용하여 SQL 데이터를 Excel 파일로 저장하는 예제 코드를 다시 작성한 것입니다. 이번에는 var 키워드 대신 전체 네임스페이스를 포함하여 타입을 명시적으로 선언하였습니다. 이렇게 하면 코드의 가독성이 높아지고, 어떤 클래스가 사용되었는지 명확하게 파악할 수 있습니다.

csharp
코드 복사
using System;
using System.Data.SqlClient;
using DevExpress.Spreadsheet;

// 버튼 클릭 이벤트 핸들러
private void btnSaveToExcel_Click(object sender, EventArgs e) {
    // 데이터베이스 연결 문자열
    string connectionString = "Data Source=서버이름;Initial Catalog=데이터베이스이름;Integrated Security=True";
    string query = "SELECT * FROM Employees";  // Excel로 저장할 테이블

    using (SqlConnection con = new SqlConnection(connectionString)) {
        SqlCommand cmd = new SqlCommand(query, con);
        con.Open();

        using (SqlDataReader reader = cmd.ExecuteReader()) {
            DevExpress.Spreadsheet.Workbook workbook = new DevExpress.Spreadsheet.Workbook();
            DevExpress.Spreadsheet.Worksheet worksheet = workbook.Worksheets[0];

            // 컬럼 헤더 설정
            for (int i = 0; i < reader.FieldCount; i++) {
                worksheet.Cells[0, i].Value = reader.GetName(i);
            }

            int row = 1;
            while (reader.Read()) {
                for (int i = 0; i < reader.FieldCount; i++) {
                    worksheet.Cells[row, i].Value = reader[i].ToString();
                }
                row++;
            }

            // 파일 저장
            workbook.SaveDocument("Employees.xlsx");
        }

        con.Close();
    }
}
이 코드에서는 DevExpress.Spreadsheet.Workbook과 DevExpress.Spreadsheet.Worksheet를 사용하여 네임스페이스를 명시적으로 선언하였습니다. 이렇게 하면 클래스의 출처를 바로 알 수 있으며, 다른 개발자들이 코드를 읽고 이해하는 데 도움이 됩니다. 추가적으로, 데이터베이스 연결과 데이터 읽기 부분에서도 System.Data.SqlClient.SqlConnection과 System.Data.SqlClient.SqlCommand 등의 클래스를 사용하여 명확하게 네임스페이스를 선언했습니다