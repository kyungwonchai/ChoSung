FeatureEnabled가 변경될 때) 자동으로 그에 따른 동작이 실행되어야 한다면, IsFeatureEnabled 속성의 setter에서 명령(Command)을 호출하거나 상태 변경에 따른 동작을 수행하는 방법을 사용해야 합니다.

지금 구조에서는 IsChecked가 변경되더라도 단순히 속성 값만 바뀌고, 체크 상태에 따라 동작하는 로직이 실행되지 않습니다. 이를 해결하려면, IsFeatureEnabled가 변경될 때, 해당 동작(예: EnableFeature, DisableFeature)을 호출하도록 구현하면 됩니다.

해결책: IsFeatureEnabled 속성 변경 시 동작 실행
IsFeatureEnabled 속성의 setter에서 CheckBox가 체크되거나 체크 해제될 때의 동작을 호출하도록 수정해보겠습니다.

1. MainViewModel.cs 수정
csharp
코드 복사
using System;
using System.ComponentModel;
using System.Windows.Input;

namespace WpfApp
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private bool _isFeatureEnabled;

        // 속성 변경 이벤트
        public event PropertyChangedEventHandler PropertyChanged;

        // CheckBox의 IsChecked 상태를 관리하는 속성
        public bool IsFeatureEnabled
        {
            get { return _isFeatureEnabled; }
            set
            {
                _isFeatureEnabled = value;
                OnPropertyChanged("IsFeatureEnabled");

                // 상태가 변경될 때 해당 동작을 실행
                if (_isFeatureEnabled)
                {
                    EnableFeature();
                }
                else
                {
                    DisableFeature();
                }
            }
        }

        // CheckBox 상태 변경을 처리하는 Command
        public ICommand CheckBoxCommand { get; }

        // 생성자
        public MainViewModel()
        {
            // Command 초기화
            CheckBoxCommand = new RelayCommand(OnCheckBoxChanged);
        }

        // CheckBox 상태 변경 처리
        private void OnCheckBoxChanged(object parameter)
        {
            bool isChecked = (bool)parameter;
            IsFeatureEnabled = isChecked; // 이 코드로 인해 setter가 호출되어 Enable/Disable 동작이 수행됨
        }

        // 특정 기능 활성화 메서드
        private void EnableFeature()
        {
            Console.WriteLine("Feature Enabled");
            // 여기서 기능 활성화 동작 구현
        }

        // 특정 기능 비활성화 메서드
        private void DisableFeature()
        {
            Console.WriteLine("Feature Disabled");
            // 여기서 기능 비활성화 동작 구현
        }

        // 속성 변경 알림
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand 클래스 (명령을 처리)
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<object, bool> _canExecute;

        public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged;
    }
}
설명:
IsFeatureEnabled 속성의 변경: IsFeatureEnabled의 setter에서 값이 변경될 때, 해당 값에 따라 EnableFeature 또는 DisableFeature 메서드를 호출합니다. 따라서 IsChecked 속성이 바뀌면 자동으로 체크 상태에 따른 동작이 실행됩니다.

Command와 연동: CheckBoxCommand는 IsFeatureEnabled 값을 직접 변경하며, 이로 인해 IsFeatureEnabled의 setter가 호출됩니다. 따라서 체크 상태가 바뀔 때마다 EnableFeature 또는 DisableFeature가 실행됩니다.

2. XAML 파일 (MainWindow.xaml)
XAML 파일은 기존과 동일하게 유지됩니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WpfApp"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <!-- MainViewModel을 DataContext로 설정 -->
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <!-- CheckBox에 Command 및 IsChecked 바인딩 -->
        <CheckBox Content="Enable Feature" 
                  IsChecked="{Binding IsFeatureEnabled, Mode=TwoWay}"
                  Command="{Binding CheckBoxCommand}"
                  CommandParameter="{Binding IsFeatureEnabled}"
                  HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>
요약:
이제 CheckBox의 IsChecked 상태가 변경될 때마다 IsFeatureEnabled 속성의 setter가 호출되며, 그에 따라 기능이 활성화되거나 비활성화되는 동작이 실행됩니다.
또한, IsFeatureEnabled 속성 자체를 변경해도 동일한 동작을 수행할 수 있