습니다. 이어서 파일 목록의 19, 20, 21번째 파일(MasterDataViewModel.cs, MainWindow.xaml, MainWindow.xaml.cs)의 전체 코드를 여기에 바로 작성해 드리겠습니다.

19. ViewModels/MasterDataViewModel.cs

마스터 데이터 관리 창의 ViewModel입니다. 자체 DbContext를 생성하고 관리하며, 마스터 데이터 CRUD 및 연쇄 업데이트 로직을 포함합니다. IsMasterModeEnabled 관련 로직은 제거되었습니다.

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic;
using System.Diagnostics;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 마스터 데이터 관리 ViewModel (DbContext 자체 생성 및 관리)
    /// </summary>
    public class MasterDataViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context; // 이 ViewModel 전용 DbContext

        #region Observable Collections & Properties
        public ObservableCollection<LockerType> LockerTypes { get; set; }
        public ObservableCollection<Floor> Floors { get; set; }
        public ObservableCollection<Zone> Zones { get; set; }
        public ObservableCollection<SubPart> SubParts { get; set; }
        public ObservableCollection<Administrator> Administrators { get; set; }
        private object _selectedItem;
        public object SelectedItem { get => _selectedItem; set { if (SetProperty(ref _selectedItem, value)) RaiseCanExecuteChanged(); } } // CanExecute 갱신
        private string _statusMessage;
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }
        #endregion

        #region Commands
        public ICommand LoadAllMasterDataCommand { get; }
        public ICommand AddItemCommand { get; }
        public ICommand DeleteItemCommand { get; }
        public ICommand SaveChangesCommand { get; }
        #endregion

        public MasterDataViewModel() // DbContext 매개변수 제거
        {
            try { _context = new LockerDbContext(); } // 자신의 DbContext 생성
            catch (Exception ex) { MessageBox.Show($"[MasterData] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusMessage = "[MasterData] DB 연결 오류!"; LockerTypes = new ObservableCollection<LockerType>(); Floors = new ObservableCollection<Floor>(); Zones = new ObservableCollection<Zone>(); SubParts = new ObservableCollection<SubPart>(); Administrators = new ObservableCollection<Administrator>(); LoadAllMasterDataCommand = new RelayCommand(_ => { }, _ => false); AddItemCommand = new RelayCommand(_ => { }, _ => false); DeleteItemCommand = new RelayCommand(_ => { }, _ => false); SaveChangesCommand = new RelayCommand(_ => { }, _ => false); return; }

            LockerTypes = new ObservableCollection<LockerType>(); Floors = new ObservableCollection<Floor>(); Zones = new ObservableCollection<Zone>(); SubParts = new ObservableCollection<SubPart>(); Administrators = new ObservableCollection<Administrator>();
            // Command 초기화 (CanExecute에서 IsMasterModeEnabled 조건 제거됨)
            LoadAllMasterDataCommand = new RelayCommand(async _ => await LoadAllMasterDataAsync());
            AddItemCommand = new RelayCommand(AddItem, CanAddItemExecute);
            DeleteItemCommand = new RelayCommand(DeleteItem, CanDeleteItemExecute);
            SaveChangesCommand = new RelayCommand(async _ => await SaveMasterDataChangesAsync(), CanSaveChangesExecute); // 저장 가능 조건은 변경 여부만 확인
            if (_context != null) { _ = LoadAllMasterDataAsync(); }
        }

        #region Data Loading and CRUD Methods
        public async Task LoadAllMasterDataAsync() { if (_context == null) return; StatusMessage = "마스터 데이터 로딩 중..."; try { var lockerTypes = await _context.LockerTypes.OrderBy(x => x.Name).AsNoTracking().ToListAsync(); LockerTypes.Clear(); lockerTypes.ForEach(LockerTypes.Add); var floors = await _context.Floors.OrderBy(x => x.Name).AsNoTracking().ToListAsync(); Floors.Clear(); floors.ForEach(Floors.Add); var zones = await _context.Zones.OrderBy(x => x.Name).AsNoTracking().ToListAsync(); Zones.Clear(); zones.ForEach(Zones.Add); var subParts = await _context.SubParts.OrderBy(x => x.Name).AsNoTracking().ToListAsync(); SubParts.Clear(); subParts.ForEach(SubParts.Add); var administrators = await _context.Administrators.OrderBy(x => x.Name).AsNoTracking().ToListAsync(); Administrators.Clear(); administrators.ForEach(Administrators.Add); StatusMessage = "마스터 데이터 로드 완료."; } catch (Exception ex) { StatusMessage = $"마스터 데이터 로딩 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }

        // CanExecute 메서드에서 IsMasterModeEnabled 조건 제거됨
        private bool CanAddItemExecute(object parameter) => _context != null && parameter is string category && !string.IsNullOrEmpty(category);
        private bool CanDeleteItemExecute(object parameter) => _context != null && SelectedItem != null;
        private bool CanSaveChangesExecute(object parameter) => _context != null && _context.ChangeTracker.HasChanges();

        private void AddItem(object parameter) { if (!CanAddItemExecute(parameter)) return; if (parameter is string category) { try { object newItem = null; switch (category.ToLower()) { case "lockertype": newItem = _context.LockerTypes.Add(new LockerType { Name = "새 종류" }); LockerTypes.Add((LockerType)newItem); break; case "floor": newItem = _context.Floors.Add(new Floor { Name = "새 층" }); Floors.Add((Floor)newItem); break; case "zone": newItem = _context.Zones.Add(new Zone { Name = "새 구역" }); Zones.Add((Zone)newItem); break; case "subpart": newItem = _context.SubParts.Add(new SubPart { Name = "새 소파트" }); SubParts.Add((SubPart)newItem); break; case "administrator": newItem = _context.Administrators.Add(new Administrator { Name = "새 관리자" }); Administrators.Add((Administrator)newItem); break; default: MessageBox.Show("알 수 없는 카테고리.", "오류"); return; } SelectedItem = newItem; StatusMessage = "새 항목 추가됨. 저장 필요."; RaiseCanExecuteChanged(); } catch (Exception ex) { StatusMessage = $"항목 추가 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } }
        private void DeleteItem(object parameter) { if (!CanDeleteItemExecute(parameter)) return; string itemName = GetItemName(SelectedItem); if (itemName == null) return; string confirmMessage = $"'{itemName}' 삭제?"; if (HasAssociatedAssignments(SelectedItem, itemName)) { confirmMessage += "\n\n경고: 사용 중인 사물함 정보가 있습니다!"; } if (MessageBox.Show(confirmMessage, "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { try { object entityToDelete = null; if (SelectedItem is LockerType lt) entityToDelete = lt; else if (SelectedItem is Floor f) entityToDelete = f; else if (SelectedItem is Zone z) entityToDelete = z; else if (SelectedItem is SubPart sp) entityToDelete = sp; else if (SelectedItem is Administrator ad) entityToDelete = ad; else return; var entry = _context.Entry(entityToDelete); if (entry.State == EntityState.Detached) _context.Set(entityToDelete.GetType()).Attach(entityToDelete); entry.State = EntityState.Deleted; if (SelectedItem is LockerType lt1) LockerTypes.Remove(lt1); else if (SelectedItem is Floor f1) Floors.Remove(f1); else if (SelectedItem is Zone z1) Zones.Remove(z1); else if (SelectedItem is SubPart sp1) SubParts.Remove(sp1); else if (SelectedItem is Administrator ad1) Administrators.Remove(ad1); SelectedItem = null; StatusMessage = "항목 삭제 대기 중. 저장 필요."; RaiseCanExecuteChanged(); } catch (Exception ex) { StatusMessage = $"항목 삭제 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); _ = LoadAllMasterDataAsync(); } } }
        private string GetItemName(object item) { return item?.GetType().GetProperty("Name")?.GetValue(item)?.ToString(); }
        private bool HasAssociatedAssignments(object item, string itemName) { if (_context == null || item == null || string.IsNullOrEmpty(itemName)) return false; try { if (item is LockerType) return _context.LockerAssignments.Any(a => a.LockerType == itemName); if (item is Floor) return _context.LockerAssignments.Any(a => a.Floor == itemName); if (item is Zone) return _context.LockerAssignments.Any(a => a.Zone == itemName); if (item is SubPart) return _context.LockerAssignments.Any(a => a.SubPart == itemName); if (item is Administrator) return _context.LockerAssignments.Any(a => a.Administrator == itemName); } catch (Exception ex) { Debug.WriteLine($"연관 데이터 확인 오류: {ex.Message}"); return true; } return false; }

        /// <summary>
        /// 마스터 데이터 변경 사항 저장 (연쇄 업데이트 포함) - 마스터 모드 확인 제거됨
        /// </summary>
        private async Task SaveMasterDataChangesAsync()
        {
            if (!CanSaveChangesExecute(null)) { StatusMessage = "저장할 변경 사항이 없습니다."; return; }
            StatusMessage = "마스터 데이터 저장 중...";
            List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList();

            using (var transaction = _context.Database.BeginTransaction()) { try { Debug.WriteLine("마스터 데이터 저장 시작 - 트랜잭션 시작됨."); var modifiedNameEntries = _context.ChangeTracker.Entries().Where(e => e.State == EntityState.Modified && (e.Entity is LockerType || e.Entity is Floor || e.Entity is Zone || e.Entity is SubPart || e.Entity is Administrator)).Select(e => new { Entry = e, EntityType = e.Entity.GetType(), OriginalName = e.OriginalValues["Name"]?.ToString(), CurrentName = e.CurrentValues["Name"]?.ToString() }).Where(x => x.OriginalName != null && x.CurrentName != null && x.OriginalName != x.CurrentName).ToList(); Debug.WriteLine($"이름 변경 감지된 마스터 데이터 수: {modifiedNameEntries.Count}"); foreach (var modified in modifiedNameEntries) { StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' 연쇄 업데이트 중..."; Debug.WriteLine($"연쇄 업데이트 시도: Type={modified.EntityType.Name}, Original='{modified.OriginalName}', New='{modified.CurrentName}'"); int updatedCount = 0; string updateSql = ""; string targetColumn = ""; if (modified.EntityType == typeof(LockerType)) targetColumn = "LockerType"; else if (modified.EntityType == typeof(Floor)) targetColumn = "Floor"; else if (modified.EntityType == typeof(Zone)) targetColumn = "Zone"; else if (modified.EntityType == typeof(SubPart)) targetColumn = "SubPart"; else if (modified.EntityType == typeof(Administrator)) targetColumn = "Administrator"; if (!string.IsNullOrEmpty(targetColumn)) { updateSql = $"UPDATE LockerAssignments SET [{targetColumn}] = {{0}} WHERE [{targetColumn}] = {{1}}"; try { updatedCount = await _context.Database.ExecuteSqlCommandAsync(updateSql, modified.CurrentName, modified.OriginalName); StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' ({updatedCount}개 업데이트 완료)."; Debug.WriteLine($"  SQL 실행 성공: {updateSql} | Params: '{modified.CurrentName}', '{modified.OriginalName}' | Rows Affected: {updatedCount}"); } catch (Exception sqlEx) { Debug.WriteLine($"*** 연쇄 업데이트 SQL 실행 오류! SQL: {updateSql}, Params: '{modified.CurrentName}', '{modified.OriginalName}'\n*** 오류: {sqlEx.ToString()}"); StatusMessage = $"'{modified.OriginalName}' 연쇄 업데이트 중 오류 발생!"; throw; } } else { Debug.WriteLine($"  경고: 엔티티 타입 '{modified.EntityType.Name}'에 대한 대상 컬럼을 찾을 수 없습니다."); } } Debug.WriteLine("마스터 데이터 변경 사항 저장 시도 (SaveChangesAsync)..."); int masterDataChanges = await _context.SaveChangesAsync(); Debug.WriteLine($"마스터 데이터 SaveChanges 완료. 변경 건수: {masterDataChanges}"); transaction.Commit(); Debug.WriteLine("트랜잭션 커밋 완료."); StatusMessage = $"마스터 데이터 변경 사항 ({masterDataChanges}건) 및 연쇄 업데이트가 성공적으로 저장되었습니다."; } catch (Exception ex) { Debug.WriteLine($"*** 마스터 데이터 저장 중 오류 발생! 트랜잭션 롤백 시도...\n*** 오류: {ex.ToString()}"); try { transaction.Rollback(); Debug.WriteLine("트랜잭션 롤백 완료."); } catch (Exception rollbackEx) { Debug.WriteLine($"*** 트랜잭션 롤백 중 오류 발생!\n*** 오류: {rollbackEx.ToString()}"); } StatusMessage = $"마스터 데이터 저장 중 오류 발생: {ex.Message}"; MessageBox.Show($"{StatusMessage}\n\n자세한 내용은 출력 창을 확인하세요.", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error); RollbackMasterDataChanges(changesForRollback); } } await LoadAllMasterDataAsync(); RaiseCanExecuteChanged(); // 저장 후 CanExecute 상태 갱신
        }
        private void RollbackMasterDataChanges(List<DbEntityEntry> changedEntries) { if (_context == null || changedEntries == null) return; foreach (var entry in changedEntries) { switch (entry.State) { case EntityState.Modified: try { entry.Reload(); } catch { entry.State = EntityState.Unchanged; } break; case EntityState.Added: entry.State = EntityState.Detached; break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusMessage = "마스터 데이터 변경 롤백됨."; _ = LoadAllMasterDataAsync(); }
        #endregion

        /// <summary>
        /// 모든 Command의 CanExecute 상태를 갱신합니다.
        /// </summary>
        private void RaiseCanExecuteChanged()
        {
            (AddItemCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (DeleteItemCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }

        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
20. Views/MainWindow.xaml

메인 윈도우 XAML입니다. 마스터 데이터 관리 창을 여는 버튼과 Visibility 바인딩, 메인 그리드의 콤보박스 설정(ValueMember) 등이 포함된 최종 버전입니다.

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/> <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal">
                    <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}" ToolTip="사물함 목록 및 콤보박스 목록을 새로고침합니다."/>
                    <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}" ToolTip="사물함 목록의 변경 내용을 데이터베이스에 저장합니다."/>
                    <Button Content="⚙️ 마스터 데이터 관리" Margin="15,3,3,3"
                             Command="{Binding OpenMasterDataWindowCommand}"
                             ToolTip="마스터 데이터(층, 구역 등)를 관리하는 새 창을 엽니다."
                             Visibility="{Binding IsMasterModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                 </StackPanel>
            </Border>
        </DockPanel>

        <Grid Grid.Row="1" Margin="5">
            <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
            <Border Grid.Row="0" Background="WhiteSmoke" Padding="3"> <StackPanel Orientation="Horizontal"> <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/> <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/> <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/> </StackPanel> </Border>
            <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always"> <dxg:TableView.RowCellMenuCustomizations> <dxb:BarButtonItem Content="배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/> <dxb:BarItemSeparator/> <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/> </dxg:TableView.RowCellMenuCustomizations> </dxg:TableView> </dxg:GridControl.View>
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                </dxg:GridControl.Columns>
            </dxg:GridControl>
        </Grid>

        <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem> </StatusBar>
    </Grid>

</dx:ThemedWindow>
21. Views/MainWindow.xaml.cs

메인 윈도우의 코드 비하인드입니다. Closing 이벤트에서 MainViewModel의 Dispose를 호출합니다.

C#

using DevExpress.Xpf.Core;
using LockerManagementApp.ViewModels;
using System;
using System.ComponentModel;
using System.Windows;

namespace LockerManagementApp.Views
{
    /// <summary>
    /// MainWindow.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
            // 필요 시 테마 설정
            // ApplicationThemeHelper.ApplicationThemeName = Theme.Office2019ColorfulName;
        }

        // DataContext를 MainViewModel 타입으로 캐스팅
        private MainViewModel ViewModel => DataContext as MainViewModel;

        // 창 로드 시 이벤트 (필요 시 사용)
        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        // 창이 닫힐 때 MainViewModel의 Dispose를 호출하여 해당 ViewModel의 DbContext 정리
        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                disposableViewModel.Dispose();
            }
        }
    }