using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json; // For Json serialization, install via NuGet if needed

public static class MailSender
{
    private static readonly HttpClient client = new HttpClient();
    private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";
    private static readonly string systemId = "시스템 아이디";
    private static readonly string accessToken = "토큰 값";

    public static async Task<(string, string)> SendMail(string userId, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
    {
        client.DefaultRequestHeaders.Clear();
        client.DefaultRequestHeaders.Add("System-ID", systemId);
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        var requestData = new
        {
            mail = new
            {
                subject,
                contents,
                sender = new
                {
                    emailAddress = senderEmailAddress,
                    recipientType = "TO"
                },
                recipients = new[]
                {
                    new
                    {
                        emailAddress = recipientEmailAddress,
                        recipientType = "TO"
                    }
                }
            },
            docSecuType = "personal"
        };

        var jsonPayload = JsonConvert.SerializeObject(requestData);

        var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

        var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
        var response = await client.PostAsync(requestUrl, content);

        if (response.IsSuccessStatusCode)
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<dynamic>(responseContent);
            string mailId = result.mailId;
            string sendResult = result.result;

            MessageBox.Show("메일이 성공적으로 발송되었습니다.\n" +
                            $"메일 ID: {mailId}\n" +
                            $"전송 결과: {sendResult}");

            return (mailId, sendResult);
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var result = JsonConvert.DeserializeObject<dynamic>(responseContent);
            string errorCode = result.errorCode;
            string errorMessage = result.errorMessage;

            MessageBox.Show("메일 발송에 실패하였습니다.\n" +
                            $"에러 코드: {errorCode}\n" +
                            $"에러 메시지: {errorMessage}");

            return (errorCode, errorMessage);
        }
    }
}
