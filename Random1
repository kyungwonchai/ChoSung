칙과 디자인 패턴을 고려하여 별도의 클래스로 구현한 예시 코드를 제시하겠습니다. 아래는 파일 관리와 로깅을 위한 클래스입니다.

csharp

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace LogManagement
{
    public class LogManager
    {
        private string logFolderPath;

        public LogManager(string folderPath)
        {
            logFolderPath = folderPath;
        }

        public string CreateLogFilePath()
        {
            string fileName = DateTime.Now.ToString("yyyyMMdd") + ".log";
            string filePath = Path.Combine(logFolderPath, fileName);
            return filePath;
        }

        public void CreateLogFile(string filePath)
        {
            if (!File.Exists(filePath))
            {
                File.Create(filePath).Dispose();
            }
        }

        public void AddLogEntry(string filePath, string logEntry)
        {
            string logLine = $"[{DateTime.Now.ToString("yyyyMMddHHmmss")}]: {logEntry}";
            using (StreamWriter sw = File.AppendText(filePath))
            {
                sw.WriteLine(logLine);
            }
        }

        public void DeleteOldLogFiles(int retentionDays)
        {
            DateTime retentionDate = DateTime.Now.AddDays(-retentionDays);
            var logFiles = Directory.GetFiles(logFolderPath)
                                    .Where(file => File.GetCreationTime(file) < retentionDate);

            foreach (var file in logFiles)
            {
                File.Delete(file);
            }
        }
    }

    public class LogFileProcessor
    {
        private LogManager logManager;

        public LogFileProcessor(LogManager manager)
        {
            logManager = manager;
        }

        public void ProcessLogFile()
        {
            string logFilePath = logManager.CreateLogFilePath();
            logManager.CreateLogFile(logFilePath);
            logManager.AddLogEntry(logFilePath, "This is a log entry.");
        }
    }
}

위의 코드에서 LogManager 클래스는 로그 관리에 필요한 기능을 제공합니다. LogFileProcessor 클래스는 LogManager 객체를 사용하여 로그 파일을 처리하는 역할을 합니다. 이렇게 클래스를 분리하여 단일 책임 원칙을 준수하고, 의존성 주입(Dependency Injection)을 통해 클래스 간의 결합도를 낮추었습니다.

사용 예시:

csharp

using System;

namespace LogManagement
{
    class Program
    {
        static void Main()
        {
            string logFolderPath = @"C:\Agent\KnoxAPILog";

            LogManager logManager = new LogManager(logFolderPath);
            LogFileProcessor logProcessor = new LogFileProcessor(logManager);

            logProcessor.ProcessLogFile();
            logManager.DeleteOldLogFiles(14);
        }
    }
}

위의 코드는 Main() 메서드에서 LogManager 객체와 LogFileProcessor 객체를 생성하여 사용하는 예시입니다. LogManager 객체는 로그 폴더 경로를 전달하여 초기화하고, LogFileProcessor 객체는 LogManager 객체를 생성자로 받아 로그 파일 처리를 수행합니다. 마지막으로 ProcessLogFile() 메서드를 호출하여 로그 파일을 생성하고 내용을 추가하며, DeleteOldLogFiles() 메서드를