류 메시지를 보면, 슬라이싱(slice) 연산을 수행하는 과정에서 데이터 배열의 차원이나 구조가 예상과 다르게 처리된 것으로 보입니다. 이는 데이터가 비어 있거나 1차원 배열로 처리되는 경우에 발생할 수 있습니다. 아래는 문제를 해결하기 위한 상세 가이드입니다.

문제 원인
데이터가 비어 있음:

fetch_data_from_db 함수가 반환한 데이터가 비어 있거나, 슬라이싱하려는 범위(2~5열)에 데이터가 없을 수 있습니다.
데이터 차원이 예상과 다름:

반환된 데이터가 1차원 배열인데, 2차원 배열처럼 슬라이싱하려고 하면 오류가 발생합니다.
1. 반환 데이터 디버깅
먼저, fetch_data_from_db 함수가 반환하는 데이터의 상태를 확인해야 합니다.

디버깅 코드 추가:
python
코드 복사
# fetch_data_from_db 함수 호출 후 디버깅
data = fetch_data_from_db("PRealAandB")
print(f"Fetched data:\n{data}")
print(f"Data shape: {data.shape}")
출력 결과를 확인하여 데이터 구조를 파악합니다:

data가 비어 있다면: 데이터베이스에서 데이터가 제대로 반환되지 않았습니다.
data가 1차원 배열이라면: 다차원 배열로 변환해야 합니다.
2. 문제 해결 코드
Case 1: 데이터가 비어 있을 경우
fetch_data_from_db 함수가 데이터를 반환하지 않을 경우, 데이터베이스 연결과 저장 프로시저를 확인해야 합니다.

데이터 확인:
python
코드 복사
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()
Case 2: 데이터가 1차원 배열인 경우
data가 1차원 배열이라면, 2차원 배열로 변환해야 합니다.

수정 코드:
python
코드 복사
if len(data.shape) == 1:  # 데이터가 1차원 배열이면
    data = data.reshape(1, -1)  # 2차원 배열로 변환
수정된 전체 코드
python
코드 복사
# 저장된 모델 로드
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# PRealAandB 데이터 불러오기
data = fetch_data_from_db("PRealAandB")  # PRealAandB 저장 프로시저 호출

# 데이터 디버깅
print(f"Fetched data:\n{data}")
print(f"Data shape: {data.shape}")

# 데이터가 비어 있는지 확인
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# 데이터가 1차원 배열일 경우 2차원 배열로 변환
if len(data.shape) == 1:
    data = data.reshape(1, -1)

# 데이터 준비
features = data[:, 2:5]  # 3~5열 (입력값)
actual_value = data[0, 1]  # 2열 (실제값)

# 예측 수행
predicted_value = model.predict(features)[0]  # 예측값
print(f"Predicted value for column 2: {predicted_value}")
print(f"Actual value for column 2: {actual_value}")

# 시각화
plt.figure(figsize=(8, 6))

# 예측값과 실제값 시각화
plt.bar(["Predicted", "Actual"], [predicted_value, actual_value], color=['blue', 'red'], alpha=0.7)
plt.title("Predicted vs Actual Value for Column 2")
plt.ylabel("Value")
plt.grid(axis='y')

# 오차 표시
error = np.abs(predicted_value - actual_value)
plt.text(0, predicted_value, f"Pred: {predicted_value:.2f}", ha='center', va='bottom')
plt.text(1, actual_value, f"Actual: {actual_value:.2f}", ha='center', va='bottom')
plt.text(0.5, max(predicted_value, actual_value) + 0.1, f"Error: {error:.2f}", ha='center', color='black')

plt.show()

# 정확도 계산
max_possible_value = max(predicted_value, actual_value)
error_score = 100 - (error / max_possible_value * 100)
print(f"Accuracy Score: {error_score:.2f}/100")
결과
디버깅 추가:

데이터가 비어 있는지, 1차원인지, 2차원인지 확인 가능.
비정상적인 데이터 구조를 자동으로 감지하고 적절히 처리.
데이터 변환:

1차원 배열을 2차원 배열로 변환하여 슬라이싱이 가능하도록 수정.
예측 및 시각화:

3~5열(특징값)을 사용해 2열(목표값)을 예측.
예측값과 실제값 비교 및 오차 계산.
추가 확인 필요
DB 데이터: 저장 프로시저 PRealAandB가 정확히 1행 이상의 데이터를 반환하는지 확인.