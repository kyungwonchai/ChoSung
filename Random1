안드로이드 애플리케이션에서 블루투스 스캐너를 통해 데이터를 받아 처리하는 예제를 Kotlin 언어로 작성하고, 각 부분에 상세한 한글 주석을 추가하여 설명드리겠습니다. 이 코드는 블루투스 장치를 연결하고, 데이터를 수신하여 처리하는 기본적인 흐름을 보여줍니다.

1. AndroidManifest.xml 설정
Android 앱에서 블루투스 기능을 사용하기 위해 필요한 권한을 설정합니다. 위치 권한도 요구되는 경우가 많습니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.bluetoothscanner">

    <!-- 블루투스 사용 권한 요청 -->
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <!-- 블루투스 관리 권한 요청 -->
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <!-- 위치 권한 요청, 블루투스 검색을 위해 필요함 -->
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
2. MainActivity.kt
액티비티 내에서 블루투스 기능을 초기화하고, 연결을 관리하는 코드를 구현합니다.

kotlin
코드 복사
package com.example.bluetoothscanner

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.os.Bundle
import android.os.Handler
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.util.*

class MainActivity : AppCompatActivity() {
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 블루투스가 사용 가능한지 확인
        if (bluetoothAdapter == null) {
            Toast.makeText(this, "블루투스를 지원하지 않는 기기입니다.", Toast.LENGTH_LONG).show()
            finish() // 앱 종료
        }
    }

    // 블루투스 디바이스와 연결을 시도하는 스레드
    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val mmSocket: BluetoothSocket? by lazy(LazyThreadSafetyMode.NONE) {
            // SPP UUID. 보통 블루투스 시리얼 통신에 사용됨
            device.createRfcommSocketToServiceRecord(UUID.fromString("00001101-0000-1000-8000-00805F9B34FB"))
        }

        override fun run() {
            // 연결 시도 전 기기 검색 취소
            bluetoothAdapter?.cancelDiscovery()

            try {
                // 디바이스와 연결 시도
                mmSocket?.connect()
            } catch (connectException: IOException) {
                // 연결 실패 시 소켓 닫기
                try {
                    mmSocket?.close()
                } catch (closeException: IOException) {
                    Toast.makeText(baseContext, "소켓을 닫는 데 실패했습니다.", Toast.LENGTH_SHORT).show()
                }
                return
            }

            // 연결 성공 시 로직 처리
            manageMyConnectedSocket(mmSocket)
        }
    }

    // 연결된 소켓으로부터 데이터를 처리
    private fun manageMyConnectedSocket(socket: BluetoothSocket?) {
        // 데이터 읽기 및 쓰기 로직 구현 필요
    }
}
위 코드는 기본적인 블루투스 연결 및 데이터 통신 과정을 설명합니다. 실제로 데이터를 읽고 쓰는 부분(manageMyConnectedSocket)은 구현 상황에 따라 다르게 작성해야 합니다. 데이터 포맷이나 처리 방법은 연결된 블루투스 장치의 특성에 맞추어 설정해야 합니다.

빌드 및 실행
빌드: Android Studio에서 프로젝트를 열고 상단 메뉴에서 Build > Make Project를 선택합니다.
실행: 연결된 Android 기기가 있거나, 에뮬레이터를 설정했다면 Run > Run 'app'을 선택하여 앱을 실행합니다.
코드 수정이 필요한 부분은 manageMyConnectedSocket 함수 내부 로직입니다. 여기에 데이터 수신, 처리 및 기존 앱과의 연동 방법을 구현해야 합니