의 로그 항목(AuditLog 객체)을 생성해야 하는데, 이 객체를 생성하고 auditEntry라는 변수에 할당하는 코드가 빠져 있었습니다. 그래서 이후 Debug.WriteLine에서 auditEntry를 사용하려고 할 때 해당 변수를 찾을 수 없다는 오류가 발생한 것입니다.

수정해야 할 파일 목록:

Data/LockerDbContext.cs
아래는 auditEntry 변수 선언 및 생성을 추가하여 수정한 LockerDbContext.cs 파일의 전체 코드(주석 제외)입니다.

C#

using LockerManagementApp.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Data.Entity.Core;

namespace LockerManagementApp.Data
{
    public class LockerDbContext : DbContext
    {
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }

        private const string ConnectionStringName = "LockerDbConnection";

        public LockerDbContext() : base(GetConnectionString())
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LockerDbContext instance created.");
        }

        private static string GetConnectionString()
        {
            try { var cs = ConfigurationManager.ConnectionStrings[ConnectionStringName]; if (cs == null || string.IsNullOrWhiteSpace(cs.ConnectionString)) throw new ConfigurationErrorsException($"App.config에서 '{ConnectionStringName}' 연결 문자열 없음/비어있음."); Debug.WriteLine($"ConnectionString '{ConnectionStringName}' 로드 성공."); return cs.ConnectionString; }
            catch (ConfigurationErrorsException confEx) { Debug.WriteLine($"!!! 설정 파일 오류: {confEx.ToString()}"); throw new Exception("App.config 설정 오류.", confEx); }
            catch (Exception ex) { Debug.WriteLine($"!!! 연결 문자열 로드 중 예외: {ex.ToString()}"); throw new Exception($"App.config 연결 문자열 읽기 오류.", ex); }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LockerAssignment>().Property(p => p.UserName).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.KnoxId).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.SubPart).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Administrator).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.TransferStatus).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Details).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Remarks).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Notes).IsOptional();
            base.OnModelCreating(modelBuilder);
        }

        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)
        {
            var result = base.ValidateEntity(entityEntry, items);
            if (entityEntry.Entity is LockerAssignment assignment && (entityEntry.State == EntityState.Added || entityEntry.State == EntityState.Modified)) { var userNameErrors = result.ValidationErrors.Where(err => err.PropertyName == nameof(LockerAssignment.UserName) && string.IsNullOrWhiteSpace(assignment.UserName)).ToList(); if (userNameErrors.Any()) { Debug.WriteLine($"경고: LockerAssignment(ID:{assignment.Id})의 UserName 필수 오류 무시."); foreach (var error in userNameErrors) { result.ValidationErrors.Remove(error); } } }
            return result;
        }

        #region SaveChanges Overrides for Audit Logging

        public int SaveChanges(bool isMaster)
        {
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기, isMaster={isMaster}) Override 시작...");
            List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(isMaster); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 시도..."); this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 AddRange 완료."); var addedLogs = this.ChangeTracker.Entries<AuditLog>().Where(e => e.State == EntityState.Added).ToList(); Debug.WriteLine($"  -> ChangeTracker 확인: {addedLogs.Count}개의 AuditLog 엔티티가 Added 상태임."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
            else { Debug.WriteLine("  -> 추가할 로그 없음 (변경 없거나 로그 생성 실패)."); }

            try { Debug.WriteLine($"  -> base.SaveChanges() 호출 시도..."); var result = base.SaveChanges(); Debug.WriteLine($"  -> base.SaveChanges() 완료. 결과 = {result}"); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChanges 중 일반 오류 (동기): {ex.ToString()}"); throw; }
            finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기) Override 종료."); }
        }

        public Task<int> SaveChangesAsync(bool isMaster)
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChangesAsync(비동기, isMaster={isMaster}) Override 시작...");
             List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(isMaster); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 시도..."); this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 AddRange 완료."); var addedLogs = this.ChangeTracker.Entries<AuditLog>().Where(e => e.State == EntityState.Added).ToList(); Debug.WriteLine($"  -> ChangeTracker 확인: {addedLogs.Count}개의 AuditLog 엔티티가 Added 상태임."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
             else { Debug.WriteLine("  -> 추가할 로그 없음 (변경 없거나 로그 생성 실패)."); }

            try { Debug.WriteLine($"  -> base.SaveChangesAsync() 호출 시도..."); var result = base.SaveChangesAsync(); Debug.WriteLine($"  -> base.SaveChangesAsync() 완료 (Task 반환)."); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChangesAsync 중 일반 오류 (비동기): {ex.ToString()}"); throw; }
        }

        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
            Debug.WriteLine($"경고: SaveChangesAsync(CancellationToken) 오버라이드가 호출되었습니다. isMaster=false로 처리합니다.");
            return SaveChangesAsync(false);
        }

        /// <summary>
        /// 감사 로그 엔트리 생성 (진단용 단순화 버전 - auditEntry 선언 추가)
        /// </summary>
        private List<AuditLog> CreateAuditEntries(bool isMaster)
        {
            Debug.WriteLine("  CreateAuditEntries (진단용 단순화 버전) 시작...");
            string currentPrincipalName = System.Threading.Thread.CurrentPrincipal?.Identity?.Name;
            string userNameForLog = $"{(isMaster ? "[마스터]" : "[일반]")}{currentPrincipalName ?? "UnknownUser"}";
            var auditEntries = new List<AuditLog>();
            var changedEntries = ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged && e.State != EntityState.Detached && !(e.Entity is AuditLog)).ToList();

            if (!changedEntries.Any()) { Debug.WriteLine("  CreateAuditEntries: 감지된 변경 엔티티 없음."); return auditEntries; }

            Debug.WriteLine($"  CreateAuditEntries: 감지된 변경 엔티티 수 = {changedEntries.Count}. 단순 로그 1개 생성 시도.");

            var firstChangedEntry = changedEntries.First();

            // *** 수정된 부분: auditEntry 변수 선언 및 초기화 추가 ***
            var auditEntry = new AuditLog
            {
                Timestamp = DateTime.Now,
                UserName = userNameForLog,
                Action = string.Join(",", changedEntries.Select(e => e.State.ToString()).Distinct()),
                TableName = string.Join(",", changedEntries.Select(e => e.Entity.GetType().Name).Distinct()),
                RecordId = "Simplified",
                OldValues = "Simplified Log Entry",
                NewValues = "Simplified Log Entry",
                AffectedColumns = "Simplified Log Entry"
            };
            auditEntries.Add(auditEntry); // 생성된 로그 항목 추가

            // 이제 auditEntry 변수가 존재하므로 아래 Debug 라인 정상 작동
            Debug.WriteLine($"    - 단순 로그 생성됨: Tables={auditEntry.TableName}, Actions={auditEntry.Action}");

            UpdateLockerAssignmentTimestamps(changedEntries);
            Debug.WriteLine("  CreateAuditEntries (진단용 단순화 버전) 종료.");
            return auditEntries;
        }

        private void UpdateLockerAssignmentTimestamps(List<DbEntityEntry> changedEntries) { var lockerEntries = changedEntries.Where(e => e.Entity is LockerAssignment && (e.State == EntityState.Added || e.State == EntityState.Modified)); int count = 0; foreach (var entry in lockerEntries) { ((LockerAssignment)entry.Entity).LastUpdated = DateTime.Now; count++; } if (count > 0) Debug.WriteLine($"UpdateLockerAssignmentTimestamps: {count}개 LockerAssignment 타임스탬프 업데이트됨."); }

        #endregion

        #region Error Logging Helpers
        private void LogDbUpdateException(DbUpdateException dbEx) { Debug.WriteLine($"!!! DbUpdateException 발생: {dbEx.ToString()}"); if (dbEx.InnerException != null) Debug.WriteLine($"  InnerException: {dbEx.InnerException.ToString()}"); foreach (var entry in dbEx.Entries) { Debug.WriteLine($"  - 오류 엔티티: {entry.Entity.GetType().Name}, 상태: {entry.State}"); } }
        private void LogValidationErrors(DbEntityValidationException vex) { Debug.WriteLine($"!!! DbEntityValidationException 발생: {vex.Message}"); foreach (var validationErrors in vex.EntityValidationErrors) { Debug.WriteLine($"  - 엔티티 타입: {validationErrors.Entry.Entity.GetType().Name}, 상태: {validationErrors.Entry.State}"); foreach (var validationError in validationErrors.ValidationErrors) { Debug.WriteLine($"    - 속성: {validationError.PropertyName}, 오류: {validationError.ErrorMessage}"); } } }
        #endregion
    }
}
핵심 변경 사항:
