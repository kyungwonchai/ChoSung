omPortManager 클래스에서 ReadFromPLCAsync와 같이 PLC로부터 데이터를 읽어오는 비동기 메서드를 추가하려면, 아래와 같이 코드를 작성할 수 있습니다. 이 메서드는 시리얼 포트를 통해 PLC로부터 데이터를 읽어와 반환하는 기능을 제공합니다.

ComPortManager.cs 수정
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

namespace RouterMiddleACRService
{
    public class ComPortManager
    {
        private SerialPort _port;

        public void ConfigurePort(string portName, int baudRate = 9600, Parity parity = Parity.None, int dataBits = 8, StopBits stopBits = StopBits.One)
        {
            _port = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
        }

        public async Task<string> ReadFromPLCAsync(string address)
        {
            if (_port == null || !_port.IsOpen)
            {
                throw new InvalidOperationException("The serial port is not open.");
            }

            try
            {
                // Mewtocol 프로토콜에 맞는 명령어 생성
                string command = $"%01#RDD{address}**\r";
                byte[] commandBytes = Encoding.ASCII.GetBytes(command);

                // PLC에 명령어 전송
                _port.Write(commandBytes, 0, commandBytes.Length);

                // 응답을 읽어옴
                var response = await Task.Run(() => _port.ReadLine());
                return response;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reading from PLC: {ex.Message}");
                return string.Empty;
            }
        }

        public async Task SendDataToPLCAsync(string command)
        {
            if (_port == null || !_port.IsOpen)
            {
                throw new InvalidOperationException("The serial port is not open.");
            }

            try
            {
                byte[] commandBytes = Encoding.ASCII.GetBytes(command);
                await Task.Run(() => _port.Write(commandBytes, 0, commandBytes.Length));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending data to PLC: {ex.Message}");
            }
        }

        public async Task ClearPLCValueAsync(string address)
        {
            if (_port == null || !_port.IsOpen)
            {
                throw new InvalidOperationException("The serial port is not open.");
            }

            try
            {
                // 값 초기화 명령어 생성 (예: %01#WDD02300002300000**\r)
                string command = $"%01#WDD{address}0000**\r";
                byte[] commandBytes = Encoding.ASCII.GetBytes(command);
                await Task.Run(() => _port.Write(commandBytes, 0, commandBytes.Length));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error clearing PLC value: {ex.Message}");
            }
        }

        public void OpenPort()
        {
            if (_port != null && !_port.IsOpen)
            {
                _port.Open();
            }
        }

        public void ClosePort()
        {
            if (_port != null && _port.IsOpen)
            {
                _port.Close();
            }
        }
    }
}
설명
ReadFromPLCAsync 메서드:

이 메서드는 PLC로부터 데이터를 읽어오는 비동기 메서드입니다.
address 파라미터는 PLC의 메모리 주소를 의미하며, Mewtocol 프로토콜에 맞게 명령어를 생성합니다.
명령어를 PLC에 전송한 후, 응답을 읽어옵니다.
await Task.Run()을 사용하여 비동기적으로 데이터를 읽어옵니다.
SendDataToPLCAsync 메서드:

이 메서드는 PLC로 데이터를 전송하는 비동기 메서드입니다.
명령어를 PLC에 전송하고, 오류가 발생할 경우 콘솔에 에러 메시지를 출력합니다.
ClearPLCValueAsync 메서드:

이 메서드는 PLC의 특정 주소의 값을 초기화하는 비동기 메서드입니다.
주소와 초기화할 값을 포함한 명령어를 생성하여 PLC에 전송합니다.
OpenPort 및 ClosePort 메서드:

시리얼 포트를 열고 닫는 메서드입니다. OpenPort 메서드는 시리얼 포트가 설정되어 있고 닫혀 있을 경우 열고, ClosePort 메서드는 시리얼 포트가 열려 있을 경우 닫습니다.
이 수정된 ComPortManager 클래스는 PLC와의 시리얼 통신을 관리하며, 데이터를 읽어오고 전송할 수 있는 기능을 제공합니다. 위의 메서드를 사용하여 원하는 데이터 읽