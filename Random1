 MainWindow.xaml
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD 파일 클리너" Height="600" Width="800">
    <Window.Resources>
        <Style TargetType="Button">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Background" Value="#FF6200EE"/>
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="CornerRadius" Value="5"/>
        </Style>
        <Style TargetType="TextBox">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="BorderBrush" Value="#FF6200EE"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style>
        <Style TargetType="TextBlock">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="ListBox">
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="#FF6200EE"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style>
    </Window.Resources>
    <Grid>
        <TabControl>
            <TabItem Header="메인">
                <StackPanel Margin="10">
                    <TextBlock Text="폴더 경로:"/>
                    <StackPanel Orientation="Horizontal">
                        <TextBox Name="txtFolderPath" Width="400" IsReadOnly="True"/>
                        <Button Name="btnSelectFolder" Content="폴더 선택" Click="btnSelectFolder_Click"/>
                    </StackPanel>
                    <TextBlock Text="파일 확장자:"/>
                    <ComboBox Name="cmbFileExtension" Width="150">
                        <ComboBoxItem Content=".jpg" IsSelected="True"/>
                        <ComboBoxItem Content=".png"/>
                        <ComboBoxItem Content=".bmp"/>
                    </ComboBox>
                    <StackPanel Orientation="Horizontal">
                        <Button Name="btnStart" Content="청소 시작" Click="btnStart_Click"/>
                        <Button Name="btnSaveSettings" Content="설정 저장" Click="btnSaveSettings_Click"/>
                        <Button Name="btnLoadSettings" Content="설정 불러오기" Click="btnLoadSettings_Click"/>
                    </StackPanel>
                    <TextBlock Text="최근 로그:"/>
                    <ListBox Name="lstRecentLogs" Width="750" Height="100"/>
                    <TextBlock Text="삭제 로그:"/>
                    <ListBox Name="lstDeletionLogs" Width="750" Height="100"/>
                    <TextBlock Text="현재 패턴 규칙:"/>
                    <TextBlock Name="txtCurrentPatterns" Width="750" Height="50" TextWrapping="Wrap"/>
                    <TextBlock Text="삭제할 파일 (우선순위 순서):"/>
                    <ListBox Name="lstPriorityFiles" Width="750" Height="100"/>
                    <TextBlock Text="학습 상태:"/>
                    <TextBlock Name="txtTrainingStatus" Width="750" Height="50" Text="아직 시작하지 않음" TextWrapping="Wrap"/>
                </StackPanel>
            </TabItem>
            <TabItem Header="ML 데이터">
                <StackPanel Margin="10">
                    <TextBlock Text="학습 데이터:"/>
                    <DataGrid Name="dataGridTrainingData" Width="750" Height="200" AutoGenerateColumns="True"/>
                    <TextBlock Text="학습 결과:"/>
                    <DataGrid Name="dataGridTrainingResults" Width="750" Height="200" AutoGenerateColumns="True"/>
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private const long MinimumFreeSpace = 20L * 1024 * 1024 * 1024; // 20 GB
        private const int MinimumSampleSize = 10; // 최소 샘플 수
        private string logDirectory = @"C:\Agent\SMDClean\Logs";
        private string settingsDirectory = @"C:\Agent\SMDClean";
        private MLModelBuilder _mlModelBuilder;
        private SettingsManager _settingsManager;
        private FileCleaner _fileCleaner;
        private List<FileRecord> _trainingData;

        public MainWindow()
        {
            InitializeComponent();
            _mlModelBuilder = new MLModelBuilder();
            _settingsManager = new SettingsManager(settingsDirectory);
            _fileCleaner = new FileCleaner(logDirectory, _mlModelBuilder, Dispatcher, LogRecentActivity, LogDeletionActivity, UpdateFolderStatistics);
            LoadSettings();
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveSettings();
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void btnLoadSettings_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                LoadSettings();
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = txtFolderPath.Text;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    txtFolderPath.Text = dialog.SelectedPath;
                }
            }
        }

        private void SaveSettings()
        {
            try
            {
                _settingsManager.SaveSettings(new Settings
                {
                    FolderPath = txtFolderPath.Text,
                    FileExtension = cmbFileExtension.Text,
                    DriveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\"
                });
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = _settingsManager.LoadSettings();
                if (settings != null)
                {
                    txtFolderPath.Text = settings.FolderPath ?? "D:\\";
                    cmbFileExtension.Text = settings.FileExtension ?? ".jpg";
                }
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private async void btnStart_Click(object sender, RoutedEventArgs e)
        {
            string folderPath = txtFolderPath.Text;
            string fileExtension = cmbFileExtension.Text;
            string driveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\";

            if (string.IsNullOrEmpty(folderPath) || folderPath == "Enter folder path" ||
                string.IsNullOrEmpty(fileExtension))
            {
                MessageBox.Show("모든 입력값을 제공해주세요.");
                return;
            }

            try
            {
                Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 중..."; });

                _trainingData = CollectInitialFileData(folderPath, fileExtension);
                if (_trainingData.Count < MinimumSampleSize)
                {
                    MessageBox.Show($"학습 모델을 훈련시키기에 샘플이 충분하지 않습니다. 최소 샘플 수: {MinimumSampleSize}");
                    Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: 샘플 부족"; });
                    return;
                }

                dataGridTrainingData.ItemsSource = _trainingData;
                _mlModelBuilder.TrainModel(_trainingData);

                Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 완료"; });

                await MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName);
            }
            catch (Exception ex)
            {
                LogError("모델 훈련 실패: " + ex.Message);
                Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: " + ex.Message; });
            }
        }

        private List<FileRecord> CollectInitialFileData(string folderPath, string fileExtension)
        {
            var fileDataList = new List<FileRecord>();
            try
            {
                var files = GetFiles(folderPath, fileExtension);
                if (files != null && files.Count > 0)
                {
                    fileDataList = files.Select(f => new FileRecord
                    {
                        FilePath = f.FullName,
                        Extension = f.Extension,
                        Size = (float)f.Length, // float 형식으로 변환
                        FolderPath = f.DirectoryName
                    }).ToList();

                    Dispatcher.Invoke(() =>
                    {
                        txtCurrentPatterns.Text = $"학습 중인 파일 수: {files.Count}개";
                    });
                }
                else
                {
                    Dispatcher.Invoke(() =>
                    {
                        txtCurrentPatterns.Text = "학습할 파일이 없습니다.";
                    });
                }
            }
            catch (Exception ex)
            {
                LogError("파일 데이터 수집 실패: " + ex.Message);
                Dispatcher.Invoke(() =>
                {
                    txtCurrentPatterns.Text = "파일 데이터 수집 오류.";
                });
            }
            return fileDataList;
        }

        private List<FileInfo> GetFiles(string folderPath, string fileExtension)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles($"*{fileExtension}", SearchOption.TopDirectoryOnly)
                    .Where(f => f.Length > 1 * 1024 * 1024)); // 1MB 이상의 파일

                foreach (var subDir in directory.GetDirectories())
                {
                    if (!IsSystemVolumeInformation(subDir))
                    {
                        files.AddRange(GetFiles(subDir.FullName, fileExtension));
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                LogError("폴더 접근 거부됨: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        private bool IsSystemVolumeInformation(DirectoryInfo dirInfo)
        {
            return dirInfo.FullName.Contains("System Volume Information");
        }

        private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
        {
            while (true)
            {
                try
                {
                    long freeSpace = _fileCleaner.GetDriveFreeSpace(driveName);
                    if (freeSpace < MinimumFreeSpace)
                    {
                        List<FileInfo> filesToDelete = _fileCleaner.GetFilesToDelete(folderPath, fileExtension);
                        DisplayFilesToDelete(filesToDelete);
                        //await _fileCleaner.DeleteFilesAsync(filesToDelete); // 실제 삭제 코드 (주석 처리)
                    }

                    _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension);
                    await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
                }
                catch (Exception ex)
                {
                    LogError("모니터링 중 오류 발생: " + ex.Message);
                }
            }
        }

        private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
        {
            Dispatcher.Invoke(() =>
            {
                lstPriorityFiles.Items.Clear();
                foreach (var file in filesToDelete)
                {
                    lstPriorityFiles.Items.Add(file.FullName);
                }
                dataGridTrainingResults.ItemsSource = filesToDelete.Select(f => new { f.Name, f.CreationTime });
            });
        }

        private void LogRecentActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                lstRecentLogs.Items.Add(message);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }

        private void LogDeletionActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                lstDeletionLogs.Items.Add(message);
                if (lstDeletionLogs.Items.Count > 200)
                {
                    lstDeletionLogs.Items.RemoveAt(0);
                }
            });
        }

        private void UpdateFolderStatistics(long totalSize, string folderPath)
        {
            Dispatcher.Invoke(() =>
            {
                lstRecentLogs.Items.Add($"폴더: {folderPath}, 총 크기: {totalSize / (1024 * 1024)} MB");
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }

        private void LogError(string message)
        {
            try
            {
                string logPath = Path.Combine(logDirectory, DateTime.Now.ToString("yyyyMMdd"), "errorlog.txt");
                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
                string logMessage = $"{DateTime.Now}: {message}";

                File.AppendAllText(logPath, logMessage + Environment.NewLine);

                Dispatcher.Invoke(() =>
                {
                    lstRecentLogs.Items.Add(logMessage);
                    if (lstRecentLogs.Items.Count > 200)
                    {
                        lstRecentLogs.Items.RemoveAt(0);
                    }
                });
            }
            catch (Exception ex)
            {
                // 에러 로깅에 실패한 경우 추가 조치 없음
                Console.WriteLine("오류 로깅 실패: " + ex.Message);
            }
        }
    }
}
수정된 FileRecord.cs
csharp
코드 복사
public class FileRecord
{
    public string FilePath { get; set; }
    public string Extension { get; set; }
    public float Size { get; set; } // float 형식으로 변경
    public string FolderPath { get; set; }
    public int Count { get; set; } // 추가된 카운터 변수
}
이제 UI가 한글로 표시되며, 리스트박스에 제목을 추가하여 어떤 리스트박스인지 명확하게 구분할 수 있습니다. 또한, 스타일을 적용하여 더 깔