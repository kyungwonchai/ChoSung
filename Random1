제 설명
좌측의 표 (예: st.selectbox() 혹은 st.radio()) 를 선택하면 우측 내용 (st.text_area(), st.write(), st.text_input() 등) 이 해당 키와 연결된 세부 내용으로 출력되도록 구현하려는 것입니다.

기대 동작: 왼쪽에서 항목을 선택하면 오른쪽에 해당 항목의 세부 내용이 표시됩니다. 만약 해당 항목이 처음 선택되거나 정보가 없으면, 기본 3개의 항목이 자동으로 추가됩니다.

문제 원인
상태 유지 문제: Streamlit은 기본적으로 매번 새로 고침을 할 때마다 상태가 초기화됩니다. st.session_state 를 사용하지 않으면 선택한 값이 제대로 유지되지 않습니다.

초기 데이터 설정 문제: 기본값 3개를 자동 추가할 때, 데이터를 저장하는 session_state 에 초기화하는 코드가 올바르지 않거나 호출 순서가 잘못될 수 있습니다.

수정된 코드 (주석 포함)
python
코드 복사
import streamlit as st

# Streamlit 페이지 설정
st.set_page_config(layout="wide")

# 왼쪽 표에서 선택할 항목 리스트
main_keys = ["항목1", "항목2", "항목3", "항목4"]

# 세부 내용을 저장할 딕셔너리 형태의 상태를 초기화합니다.
if 'details' not in st.session_state:
    st.session_state.details = {}

# 기본 세부 내용 (항목 선택 시 자동으로 추가되는 내용)
default_details = ["기본 내용 1", "기본 내용 2", "기본 내용 3"]

# 왼쪽 영역 (표)
with st.sidebar:
    selected_key = st.selectbox("항목 선택", main_keys)
    
    # 선택한 항목이 세부내용 딕셔너리에 없으면 추가합니다.
    if selected_key not in st.session_state.details:
        st.session_state.details[selected_key] = default_details.copy()  # 깊은 복사로 수정이 독립적으로 이루어지도록 함

# 오른쪽 영역 (선택한 항목의 세부 내용 표시 및 수정)
st.write(f"### '{selected_key}'의 세부 내용")

# 세부 내용을 표시하고, 수정할 수 있는 입력란을 제공합니다.
for i, detail in enumerate(st.session_state.details[selected_key]):
    new_detail = st.text_input(f"세부 내용 {i+1}", value=detail, key=f"{selected_key}_{i}")
    st.session_state.details[selected_key][i] = new_detail  # 입력값을 세션 상태에 반영

# 새로운 내용 추가 기능
if st.button("새 내용 추가"):
    st.session_state.details[selected_key].append(f"새로운 내용 {len(st.session_state.details[selected_key]) + 1}")

# 현재 상태 확인 (디버그용)
st.write("### 현재 상태 확인")
st.write(st.session_state.details)
코드 설명 (주석 포함)
1. 상태 초기화 (st.session_state)
python
코드 복사
if 'details' not in st.session_state:
    st.session_state.details = {}
Streamlit은 기본적으로 페이지가 새로 고침될 때 상태가 초기화됩니다.

st.session_state를 사용하여 데이터를 저장하면, 사용자가 선택을 변경하거나 내용을 수정해도 정보가 유지됩니다.

st.session_state.details 딕셔너리를 사용하여, 각 키마다 독립적으로 세부 정보를 저장합니다.

2. 기본 세부 내용 추가 로직
python
코드 복사
if selected_key not in st.session_state.details:
    st.session_state.details[selected_key] = default_details.copy()
사용자가 새로운 항목을 선택했을 때, 해당 항목의 정보가 없으면 기본 항목 (default_details) 을 자동으로 추가합니다.

.copy() 메서드를 사용하여 깊은 복사를 수행하므로, 서로 다른 항목의 데이터가 겹치지 않습니다.

3. 세부 내용 수정 기능
python
코드 복사
for i, detail in enumerate(st.session_state.details[selected_key]):
    new_detail = st.text_input(f"세부 내용 {i+1}", value=detail, key=f"{selected_key}_{i}")
    st.session_state.details[selected_key][i] = new_detail
사용자가 오른쪽 영역에서 세부 내용을 수정할 때마다, st.session_state.details에 값이 즉시 반영되도록 합니다.

st.text_input의 key는 선택된 키와 인덱스를 조합하여 고유하게 유지되도록 설정합니다.

4. 새로운 내용 추가 기능
python
코드 복사
if st.button("새 내용 추가"):
    st.session_state.details[selected_key].append(f"새로운 내용 {len(st.session_state.details[selected_key]) + 1}")
버튼을 눌러 새로운 내용을 추가하면, 선택된 항목의 세부 내용 리스트에 새로운 값이 추가됩니다.

리스트는 즉시 업데이트되고 화면에 표시됩니다.

문제 해결
상태 유지: st.session_state 를 사용하여 모든 정보가 페이지 새로 고침 없이 유지되도록 처리했습니다.

기본 데이터 추가: 기본 항목들이 자동으로 추가되도록 코드를 수정했습니다.

유연한 수정 및 추가: 사용자가 내용을 수정하거나 새로 추가할 때 즉시 반영되도록 했습니다.