, 알겠습니다. 사용자가 실행한 제어 이력을 최근 3일치 모아서 로그로 보고, 상단에는 관련 통계 차트를 표시하는 기능을 구현하겠습니다.

이 기능은 다음 단계로 나누어 진행됩니다:

라우트 및 로직 추가 (app/routes_logs.py 신규 생성 또는 기존 파일에 추가):
지난 3일간의 action_logs 데이터를 조회합니다.
차트에 필요한 데이터(예: "켜기 설정" 성공/실패 횟수, "끄기 설정" 성공/실패 횟수, "즉시 켜기" 성공/실패 횟수)를 집계합니다.
조회된 로그 데이터와 차트 데이터를 템플릿에 전달합니다.
HTML 템플릿 생성 (app/templates/logs/view_logs.html 신규 생성):
Chart.js 라이브러리를 사용하여 전달받은 차트 데이터로 막대 차트 등을 그립니다.
상세 로그 목록을 테이블 형태로 표시하고 페이지네이션을 구현합니다.
블루프린트 등록 및 네비게이션 추가 (app/__init__.py 및 app/templates/layout.html 수정).
1. 신규: app/routes_logs.py (제어 이력 조회 및 차트 데이터 준비)
app 폴더에 routes_logs.py 파일을 새로 만들고 다음 코드를 작성합니다. (또는 이 로직을 routes_user.py나 routes_admin.py에 추가할 수도 있지만, 기능 분리를 위해 새 파일을 권장합니다.)

Python

# scontrol_flask_web/app/routes_logs.py
from flask import Blueprint, render_template, request, current_app, g, flash
from app.db_utils import get_db_connection
from app.auth import ip_auth_required # 모든 로그인 사용자 접근 허용 ('user' 역할)
from datetime import datetime as dt, timedelta
import math
import json # 차트 데이터 json 변환용

logs_bp = Blueprint('logs', __name__)

@logs_bp.route('/action_logs')
@ip_auth_required('user') # 관리자 및 허용된 사용자만 접근 가능
def view_action_logs():
    page = request.args.get('page', 1, type=int)
    per_page = 15 # 페이지 당 로그 수
    offset = (page - 1) * per_page
    
    logs_on_page = []
    total_logs = 0
    chart_data_raw = {
        '켜기설정_성공': 0, '켜기설정_실패': 0,
        '끄기설정_성공': 0, '끄기설정_실패': 0,
        '즉시켜기_성공': 0, '즉시켜기_실패': 0,
    }
    conn = None

    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            # 최근 3일간의 로그만 조회
            three_days_ago = dt.now() - timedelta(days=3)
            
            # 전체 로그 수 (최근 3일)
            count_query = "SELECT COUNT(*) AS total FROM dbo.action_logs WHERE log_timestamp >= %s"
            cursor.execute(count_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            total_logs_result = cursor.fetchone()
            if total_logs_result:
                total_logs = total_logs_result.get('total', 0)

            if total_logs > 0:
                # 현재 페이지 로그 데이터 (최근 3일)
                data_query = """
                    SELECT id, log_timestamp, target_pc_name, target_ip_sent_to, final_target_ip,
                           command_name, command_payload_summary, action_type,
                           result_success, result_message, triggered_by_ip
                    FROM dbo.action_logs
                    WHERE log_timestamp >= %s
                    ORDER BY log_timestamp DESC
                    OFFSET %s ROWS FETCH NEXT %s ROWS ONLY
                """
                cursor.execute(data_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'), offset, per_page))
                logs_on_page = cursor.fetchall()

            # 차트 데이터 집계 (최근 3일)
            chart_query = """
                SELECT 
                    action_type, 
                    result_success, 
                    COUNT(*) as count
                FROM dbo.action_logs
                WHERE log_timestamp >= %s
                GROUP BY action_type, result_success
            """
            cursor.execute(chart_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            aggregated_data = cursor.fetchall()
            for row in aggregated_data:
                action = row['action_type']
                success = bool(row['result_success'])
                count = row['count']
                if "디스플레이 항상 켜기 설정" in action: # "켜기 설정"
                    if success: chart_data_raw['켜기설정_성공'] += count
                    else: chart_data_raw['켜기설정_실패'] += count
                elif "디스플레이 1분 후 자동 꺼짐 설정" in action: # "끄기 설정"
                    if success: chart_data_raw['끄기설정_성공'] += count
                    else: chart_data_raw['끄기설정_실패'] += count
                elif "모니터 즉시 켜기" in action: # "즉시 켜기"
                    if success: chart_data_raw['즉시켜기_성공'] += count
                    else: chart_data_raw['즉시켜기_실패'] += count
            
    except Exception as e:
        current_app.logger.error(f"제어 이력 조회 중 오류: {e}", exc_info=True)
        flash("제어 이력을 불러오는 중 오류가 발생했습니다.", "error")
        # 오류 시 빈 데이터로 렌더링

    total_pages = math.ceil(total_logs / per_page) if total_logs > 0 else 1
    pagination_data = {
        'page': page, 'per_page': per_page, 'total_items': total_logs, 
        'total_pages': total_pages, 'items': logs_on_page, # 현재 페이지 로그
        'has_prev': page > 1, 'has_next': page < total_pages,
        'prev_num': page - 1 if page > 1 else 1,
        'next_num': page + 1 if page < total_pages else total_pages
    }

    # Chart.js에 전달할 데이터 형식으로 변환
    chart_data_for_template = {
        'labels': ["켜기 설정", "끄기 설정", "즉시 켜기"],
        'datasets': [
            {
                'label': '성공',
                'data': [chart_data_raw['켜기설정_성공'], chart_data_raw['끄기설정_성공'], chart_data_raw['즉시켜기_성공']],
                'backgroundColor': 'rgba(75, 192, 192, 0.6)', # 초록 계열
                'borderColor': 'rgba(75, 192, 192, 1)',
                'borderWidth': 1
            },
            {
                'label': '실패',
                'data': [chart_data_raw['켜기설정_실패'], chart_data_raw['끄기설정_실패'], chart_data_raw['즉시켜기_실패']],
                'backgroundColor': 'rgba(255, 99, 132, 0.6)', # 빨강 계열
                'borderColor': 'rgba(255, 99, 132, 1)',
                'borderWidth': 1
            }
        ]
    }
        
    return render_template('logs/view_logs.html', 
                           title="최근 3일 제어 이력", 
                           logs=logs_on_page, 
                           pagination=pagination_data,
                           chart_data_json=json.dumps(chart_data_for_template) # JSON 문자열로 변환하여 전달
                           )
app/routes_logs.py 설명:

logs_bp 블루프린트 생성: 로그 관련 라우트를 그룹화합니다.
view_action_logs() 라우트:
@ip_auth_required('user')로 'admin' 또는 'user' 역할만 접근 가능하게 합니다.
최근 3일치 데이터 조회: log_timestamp >= (오늘 - 3일) 조건을 사용하여 dbo.action_logs 테이블에서 데이터를 가져옵니다.
페이지네이션: 로그 목록에 대한 페이지네이션을 구현합니다.
차트 데이터 집계: action_type과 result_success를 기준으로 로그 수를 집계하여 chart_data_raw 딕셔너리를 채웁니다.
"켜기 설정": action_type이 "디스플레이 항상 켜기 설정..."인 경우
"끄기 설정": action_type이 "디스플레이 1분 후 자동 꺼짐 설정..."인 경우
"즉시 켜기": action_type이 "모니터 즉시 켜기..."인 경우
차트 데이터 가공: 집계된 데이터를 Chart.js가 사용하기 쉬운 형식으로 변환(chart_data_for_template)하고, json.dumps()를 사용하여 JSON 문자열로 만들어 템플릿에 전달합니다.
view_logs.html 템플릿을 렌더링하면서 필요한 데이터를 전달합니다.
2. 신규: app/templates/logs/view_logs.html (제어 이력 및 차트 표시 UI)
app/templates/ 폴더 아래에 logs 폴더를 새로 만들고, 그 안에 view_logs.html 파일을 생성합니다.

HTML

{% extends "layout.html" %}

{% block title %}{{ title }}{% endblock %}

{% block styles %}
{{ super() }}
<style>
    .chart-container {
        width: 80%;
        max-width: 700px;
        margin: 20px auto;
        padding: 20px;
        border: 1px solid #eee;
        border-radius: 8px;
        background-color: #fdfdfd;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    .log-table th, .log-table td {
        font-size: 0.85em; /* 로그 테이블 폰트 약간 작게 */
        white-space: nowrap; /* 자동 줄바꿈 방지 (필요시) */
    }
    .log-table td.message-col { /* 메시지 컬럼만 자동 줄바꿈 허용 및 최대 너비 */
        white-space: normal;
        word-break: break-all;
        max-width: 300px; 
    }
    .log-table .success-true { color: green; }
    .log-table .success-false { color: red; font-weight: bold; }
</style>
{% endblock %}


{% block content %}
    <h1>{{ title }}</h1>

    {# --- 차트 표시 영역 --- #}
    <div class="chart-container">
        <canvas id="actionLogChart"></canvas>
    </div>

    {# --- 로그 목록 테이블 --- #}
    <h2>상세 제어 이력 (최근 3일)</h2>
    {% if logs %}
    <table class="log-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>시간</th>
                <th>대상 PC</th>
                <th>전송 IP</th>
                <th>최종 IP (릴레이 시)</th>
                <th>명령 이름</th>
                <th>페이로드 요약</th>
                <th>작업 유형</th>
                <th>결과</th>
                <th class="message-col">결과 메시지</th>
                <th>실행자 IP</th>
            </tr>
        </thead>
        <tbody>
            {% for log_entry in logs %}
            <tr>
                <td>{{ log_entry.id }}</td>
                <td title="{{ log_entry.log_timestamp|datetimeformat('%Y-%m-%d %H:%M:%S.%f') }}">
                    {{ log_entry.log_timestamp|datetimeformat('%y-%m-%d %H:%M') }}
                </td>
                <td>{{ log_entry.target_pc_name if log_entry.target_pc_name else '-' }}</td>
                <td>{{ log_entry.target_ip_sent_to }}</td>
                <td>{{ log_entry.final_target_ip if log_entry.final_target_ip else '-' }}</td>
                <td>{{ log_entry.command_name }}</td>
                <td>{{ log_entry.command_payload_summary|truncate(30, True) if log_entry.command_payload_summary else '-' }}</td>
                <td>{{ log_entry.action_type }}</td>
                <td class="{{ 'success-true' if log_entry.result_success else 'success-false' }}">
                    {{ '성공' if log_entry.result_success else '실패' }}
                </td>
                <td class="message-col" title="{{ log_entry.result_message }}">
                    {{ log_entry.result_message|truncate(50, True, '...') if log_entry.result_message else '-' }}
                </td>
                <td>{{ log_entry.triggered_by_ip if log_entry.triggered_by_ip else '-' }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {# 페이지네이션 (제어판과 동일한 스타일 사용) #}
    {% if pagination and pagination.total_pages > 1 %}
    <div class="pagination">
        {% if pagination.has_prev %}
            <a href="{{ url_for(request.endpoint, page=pagination.prev_num) }}">&laquo; 이전</a>
        {% else %}<span class="disabled">&laquo; 이전</span>{% endif %}
        <span style="margin: 0 10px;">페이지 {{ pagination.page }} / {{ pagination.total_pages }}</span>
        {% if pagination.has_next %}
            <a href="{{ url_for(request.endpoint, page=pagination.next_num) }}">다음 &raquo;</a>
        {% else %}<span class="disabled">다음 &raquo;</span>{% endif %}
        <span style="margin-left: 15px;">(총 {{ pagination.total_items }}개)</span>
    </div>
    {% endif %}

    {% else %}
    <p>지난 3일간의 제어 이력이 없습니다.</p>
    {% endif %}
{% endblock %}

{% block scripts %}
{{ super() }}
{# Chart.js CDN 추가 #}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('actionLogChart');
        if (ctx) {
            // Flask 템플릿에서 전달된 JSON 문자열을 JavaScript 객체로 변환
            // 'tojson' 필터는 XSS 공격에 안전하게 문자열을 변환하고, 
            // JavaScript에서 JSON.parse를 사용해야 함.
            // 또는 Flask에서 이미 JSON 문자열로 전달했으므로 바로 사용 가능 (주의: HTML 인코딩 문제)
            // 가장 안전한 방법은 템플릿 변수를 script 태그 내에 직접 JSON으로 출력하고 JS 변수에 할당하는 것.
            // 여기서는 chart_data_json이 이미 Flask에서 json.dumps()로 처리되었다고 가정.
            // HTML 특수문자가 포함될 수 있으므로 |safe 필터는 주의해서 사용해야 하지만,
            // 여기서는 JSON 구조이므로 괜찮을 수 있음. 더 안전하게는 script 태그 내에 변수로 할당.
            try {
                var chartData = JSON.parse({{ chart_data_json|tojson|safe }});
                new Chart(ctx, {
                    type: 'bar', // 또는 'pie', 'line' 등
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: true, // 필요에 따라 false로 하고 높이 조절
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1 // Y축 눈금 간격
                                }
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: '최근 3일간 명령 실행 현황',
                                font: { size: 16 }
                            },
                            legend: {
                                position: 'top',
                            }
                        }
                    }
                });
            } catch (e) {
                console.error("Error parsing chart data or initializing chart:", e);
                // ctx.parentElement.innerHTML = "<p style='color:red;'>차트 데이터를 불러오는데 실패했습니다.</p>";
            }
        } else {
            console.warn("Chart canvas element 'actionLogChart' not found.");
        }
    });
</script>
{% endblock %}
view_logs.html 설명:

Chart.js CDN: <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>를 통해 Chart.js 라이브러리를 불러옵니다.
<canvas id="actionLogChart">: 차트가 그려질 HTML5 캔버스 요소입니다.
JavaScript 로직 ({% block scripts %} 내):
페이지 로드 완료 후 실행됩니다 (DOMContentLoaded).
chart_data_json (Flask 라우트에서 JSON 문자열로 전달됨)을 JSON.parse()를 사용하여 JavaScript 객체로 변환합니다. 이때 tojson 필터와 safe 필터를 사용하여 안전하게 JavaScript 변수로 만듭니다.
Chart.js를 사용하여 막대 차트(type: 'bar')를 생성합니다. data 속성에 변환된 chartData를 사용합니다.
간단한 차트 옵션(반응형, Y축 설정, 제목, 범례)을 설정합니다.
로그 테이블: logs (페이지네이션된 로그 목록)를 순회하며 각 로그 항목의 상세 정보를 테이블 형태로 표시합니다.
페이지네이션: 로그 목록이 많을 경우를 대비해 페이지네이션 링크를 표시합니다.
3. 수정: app/__init__.py (새로운 블루프린트 등록)
create_app 함수 내에 logs_bp 블루프린트를 등록합니다.

Python

# scontrol_flask_web/app/__init__.py
# ... (다른 import 및 코드는 이전 답변 #55의 내용과 동일) ...

def create_app(config_name='default'):
    # ... (app 생성, 설정 로드, 확장 기능, 필터, 컨텍스트 프로세서 등록은 이전과 동일) ...

    # --- 블루프린트(Blueprint) 등록 ---
    from .routes_main import main_bp
    app.register_blueprint(main_bp) 

    from .routes_admin import admin_bp
    app.register_blueprint(admin_bp, url_prefix='/admin') 
    
    from .routes_user import user_bp
    app.register_blueprint(user_bp, url_prefix='/user') 

    from .routes_logs import logs_bp # <<--- 신규 로그 블루프린트 임포트
    app.register_blueprint(logs_bp, url_prefix='/history') # <<--- '/history' 등의 경로로 등록

    # ... (APScheduler 초기화 및 시작, 나머지 로깅 등은 이전과 동일) ...

    return app
4. 수정: app/templates/layout.html (네비게이션 메뉴에 링크 추가)
<nav> 섹션 안에 "제어 이력 보기" 링크를 추가합니다. (예: "원격 제어판" 링크 옆)

HTML

{# scontrol_flask_web/app/templates/layout.html #}
{# ... <head> 및 <style> 내용은 이전 답변 #43과 동일 ... #}
<body>
    <nav>
        <a href="{{ url_for('main.index') }}">홈</a>
        {% if current_user_role == 'admin' %}
            <a href="{{ url_for('admin.manage_target_pcs') }}">PC 관리</a>
            <a href="{{ url_for('admin.manage_user_ips') }}">사용자 IP 관리</a>
            <a href="{{ url_for('admin.manage_admin_ips') }}">관리자 IP 관리</a>
            <a href="{{ url_for('admin.manage_calendar_exceptions') }}">달력 예외 관리</a> 
        {% endif %}
        {% if current_user_role in ['admin', 'user'] %}
             <a href="{{ url_for('user.control_panel') }}">원격 제어판</a>
             <a href="{{ url_for('logs.view_action_logs') }}">제어 이력 보기</a> {# <<--- 신규 링크 추가 #}
        {% endif %}
        <span class="user-info">(접속 IP: {{ current_user_ip }} | 역할: {{ current_user_role }})</span>
    </nav>
    {# ... 나머지 layout.html 내용 ... #}
</body>
</html>
위 파일들을 프로젝트에 적용하시면, 사용자는 네비게이션 바의 "제어 이력 보기" 링크를 통해 최근 3일간의 제어 로그와 간단한 통계 차트를 볼 수 있게 됩니다.

테스트 시나리오:

몇 가지 제어 명령을 "원격 제어판"을 통해 실행하여 action_logs 테이블에 데이터를 쌓습니다.
스케줄러가 동작하여 자동 명령을 실행하게 하고, 해당 로그도 쌓이는지 확인합니다.
"/history/action_logs" (또는 url_prefix를 다르게 설정했다면 해당 경로) 페이지에 접속합니다.
상단에 차트가 올바르게 표시되는지 확인합니다.
하단에 로그 테이블이 최근 3일치 데이터로 채워지고, 페이지네이션이 잘 동작하는지 확인합니다.
모든 기능이 잘 동작하는지 확인해보세요!