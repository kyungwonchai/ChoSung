untu 서버에서 SSH를 통해 C++ 및 C 개발을 Visual Studio Code(VSCode)에서 진행하는 방법을 단계별로 설명합니다. 이 과정은 VSCode의 Remote-SSH 확장을 사용하여 원격 서버에서 코드를 작성하고 실행하는 방식입니다. 마지막에는 C++과 C로 Hello World 프로그램을 실행하는 예제도 포함합니다.

1. 환경 준비
로컬 PC 준비
Visual Studio Code 설치

VSCode 다운로드에서 운영 체제에 맞는 설치 파일을 다운로드 후 설치하세요.
Remote-SSH 확장 설치

VSCode를 열고 Ctrl + Shift + X를 눌러 확장 창을 엽니다.
Remote - SSH를 검색하여 설치합니다.
SSH 클라이언트 설치

Windows: OpenSSH 클라이언트 설치 가이드를 참조하세요.
Mac/Linux: 기본적으로 설치되어 있습니다.
우분투 서버 준비
SSH 서버 설치

우분투 서버에서 SSH 서버가 설치되어 있는지 확인하세요.
설치 명령:
bash
코드 복사
sudo apt update
sudo apt install openssh-server
SSH 서버 상태 확인:
bash
코드 복사
sudo systemctl status ssh
SSH 서버가 실행 중이어야 합니다. 실행되지 않았다면 아래 명령으로 시작하세요:
bash
코드 복사
sudo systemctl start ssh
GCC 및 G++ 설치

C와 C++ 컴파일러(GCC 및 G++)를 설치합니다.
bash
코드 복사
sudo apt update
sudo apt install build-essential
설치 확인:
bash
코드 복사
gcc --version
g++ --version
2. VSCode에서 SSH 연결
VSCode Remote-SSH 연결 설정

VSCode에서 Ctrl + Shift + P를 눌러 명령 팔레트를 엽니다.
Remote-SSH: Connect to Host를 선택합니다.
SSH 연결 문자열을 입력합니다. 예:
kotlin
코드 복사
user@<Ubuntu 서버 IP 주소>
처음 연결 시 SSH 키나 비밀번호를 입력해야 합니다.
서버 환경 설정

서버에 연결되면 VSCode의 좌측 하단에 SSH: <호스트 이름>이 표시됩니다.
VSCode에서 자동으로 서버에 필요한 확장 및 환경을 설치합니다.
3. C/C++ 개발 환경 설정
C/C++ 확장 설치

VSCode의 확장 창에서 C/C++을 검색하고 Microsoft에서 제공하는 확장을 설치합니다.
빌드 및 디버그 환경 설정

프로젝트 폴더를 만듭니다:
bash
코드 복사
mkdir ~/projects/hello_world
cd ~/projects/hello_world
VSCode에서 해당 폴더를 열고 .vscode 디렉터리 아래에 tasks.json과 launch.json 파일을 생성합니다.
tasks.json 예제 (빌드 설정)
json
코드 복사
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Build C++",
      "type": "shell",
      "command": "g++",
      "args": [
        "-g",
        "${file}",
        "-o",
        "${fileDirname}/${fileBasenameNoExtension}"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$gcc"],
      "detail": "컴파일 설정"
    }
  ]
}
launch.json 예제 (디버그 설정)
json
코드 복사
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Run C++",
      "type": "cppdbg",
      "request": "launch",
      "program": "${fileDirname}/${fileBasenameNoExtension}",
      "args": [],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
        {
          "description": "gdb를 시작합니다.",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ]
    }
  ]
}
4. Hello World 작성 및 실행
C++ Hello World 프로그램
파일 생성

VSCode에서 hello.cpp 파일을 생성하고 아래 코드를 작성합니다:
cpp
코드 복사
#include <iostream>
using namespace std;

int main() {
    cout << "Hello, World! C++" << endl;
    return 0;
}
빌드 및 실행

Ctrl + Shift + B를 눌러 빌드합니다.
터미널에서 실행:
bash
코드 복사
./hello
C Hello World 프로그램
파일 생성

VSCode에서 hello.c 파일을 생성하고 아래 코드를 작성합니다:
c
코드 복사
#include <stdio.h>

int main() {
    printf("Hello, World! C\n");
    return 0;
}
빌드 및 실행

터미널에서 빌드:
bash
코드 복사
gcc hello.c -o hello
실행:
bash
코드 복사
./hello
5. 추가 팁
코드 자동 완성

C/C++ 확장을 설치하면 코드 자동 완성 및 IntelliSense가 활성화됩니다.
디버깅

F5를 눌러 디버깅을 시작합니다.
리눅스 패키지 관리
