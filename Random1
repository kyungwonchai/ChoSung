MS SQL Server 2014의 경우, 클라이언트와 서버 간의 통신은 기본적으로 TCP 포트 1433을 통해 이루어집니다. 클라이언트에서 서버로의 접근이 가능하다는 것은, 클라이언트에서 SQL Server로의 기본 연결은 잘 이루어지고 있다는 것을 의미합니다. 하지만, 서버에서 브로커를 통해 통신할 때 문제가 발생한다면, 다음과 같은 몇 가지 원인이 있을 수 있습니다.

추정 원인
방화벽 설정: 서버에서 브로커로의 통신이 방화벽에 의해 차단될 수 있습니다. TCP 포트 1433이 방화벽에서 열려 있는지 확인해야 합니다.
네트워크 설정: 서버의 네트워크 설정에서 해당 포트에 대한 접근이 제한될 수 있습니다. 서버의 네트워크 설정을 확인하고, 포트 1433이 올바르게 설정되어 있는지 확인해야 합니다.
SQL Server 설정: SQL Server에서 TCP/IP 프로토콜이 활성화되어 있는지 확인해야 합니다. 또한, 브로커 서비스가 올바르게 구성되어 있고, 필요한 권한이 부여되었는지 확인해야 합니다.
SQL Server 브로커 설정: Service Broker가 올바르게 설정되지 않았거나, 활성화되지 않았을 수 있습니다. 브로커가 활성화되어 있는지 확인해야 합니다.
이러한 문제들을 진단하기 위해, 클라이언트와 서버 간의 기본 통신이 제대로 이루어지는지 확인하는 것이 좋습니다. 이를 위해 C# .NET 3.5 WPF를 사용하여 간단한 소켓 서버와 클라이언트 프로그램을 작성해보겠습니다.

소켓 서버 프로그램 (서버 측)
먼저, 서버 측 프로그램을 작성합니다. 이 프로그램은 클라이언트로부터 연결을 받고, 데이터를 수신하여 화면에 표시합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;

namespace SocketServerApp
{
    public partial class MainWindow : Window
    {
        private Socket serverSocket;
        private byte[] buffer = new byte[1024];

        public MainWindow()
        {
            InitializeComponent();
            StartServer();
        }

        private void StartServer()
        {
            try
            {
                serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                serverSocket.Bind(new IPEndPoint(IPAddress.Any, 1433));
                serverSocket.Listen(10);
                serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
                UpdateStatus("서버가 시작되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 시작 오류: {ex.Message}");
            }
        }

        private void AcceptCallback(IAsyncResult AR)
        {
            Socket clientSocket = serverSocket.EndAccept(AR);
            UpdateStatus("클라이언트가 연결되었습니다.");
            clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
        }

        private void ReceiveCallback(IAsyncResult AR)
        {
            Socket clientSocket = (Socket)AR.AsyncState;
            int received = clientSocket.EndReceive(AR);
            if (received > 0)
            {
                string data = Encoding.UTF8.GetString(buffer, 0, received);
                UpdateStatus($"받은 데이터: {data}");
                clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.Invoke(() => { listBox.Items.Add(message); });
        }
    }
}
소켓 클라이언트 프로그램 (클라이언트 측)
이제, 클라이언트 측 프로그램을 작성합니다. 이 프로그램은 서버에 연결하여 메시지를 전송합니다.

csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Windows;

namespace SocketClientApp
{
    public partial class MainWindow : Window
    {
        private Socket clientSocket;

        public MainWindow()
        {
            InitializeComponent();
            ConnectToServer();
        }

        private void ConnectToServer()
        {
            try
            {
                clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                clientSocket.Connect("서버의_IP_주소", 1433); // 서버의 IP 주소를 설정하세요.
                UpdateStatus("서버에 연결되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 연결 오류: {ex.Message}");
            }
        }

        private void SendMessage(string message)
        {
            if (clientSocket != null && clientSocket.Connected)
            {
                byte[] data = Encoding.UTF8.GetBytes(message);
                clientSocket.Send(data);
                UpdateStatus($"전송한 메시지: {message}");
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.Invoke(() => { listBox.Items.Add(message); });
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            string message = textBox.Text;
            SendMessage(message);
        }
    }
}
사용 방법
서버 프로그램을 실행하여 서버를 시작합니다. 서버는 포트 1433에서 클라이언트 연결을 대기합니다.
클라이언트 프로그램에서 서버의 IP 주소를 설정하고 실행합니다. 클라이언트는 서버에 연결을 시도하고, 연결이 성공하면 메시지를 전송할 수 있습니다.
클라이언트에서 메시지를 전송하면 서버에서 해당 메시지를 수신하고, 화면에 표시합니다.
이 프로그램을 사용하여 서버와 클라이언트 간의 네트워크 통신이 제대로 이루어지는지 확인할 수 있습니다. 만약 통신이 이루어지지 않는다면, 네트워크 설정이나 방화벽 설정을 다시 확인해 보아야 합니다