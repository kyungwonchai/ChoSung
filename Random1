제 이해했습니다. **Task Status**에 표시되는 텍스트를 동그라미 도형으로 바꾸고, 작업 완료 시 녹색, 대기 중이면 스카이블루, 에러 발생 시는 빨간색으로 표시하도록 구현하겠습니다. 또한, 도형을 우클릭하여 특정 작업을 **"여기서부터 시작"**할 수 있는 기능을 추가하겠습니다. 이 기능은 작업 목록에서 선택한 작업 이후의 모든 작업을 대기 상태로 만들고, 선택된 작업부터 다시 시작하는 방식입니다.

요약
Task Status 텍스트 대신 동그라미 도형으로 상태를 표시:
녹색: 작업 완료
스카이블루: 대기 중
빨간색: 에러 발생
우클릭 메뉴에서 "여기서부터 시작" 기능 추가:
선택된 작업 이후의 작업을 모두 대기 상태로 변경하고, 선택된 작업부터 다시 시작.
작업 재시작: 선택된 작업 이후에 있는 모든 함수는 대기 상태로 변환되며, 선택한 작업부터 실행됩니다.
효율적이고 종교한 구조: 코드에는 상세한 주석과 함께 구조적인 설계를 적용하여 PLC 통신 중 에러 발생 시 복구가 가능합니다.
MainWindow.xaml (DataGrid의 동그라미 도형 및 우클릭 메뉴 추가)
Views/MainWindow.xaml

xml
코드 복사
<Window x:Class="LogisticsApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Logistics Task Manager" Height="400" Width="1000">
    <Grid>
        <!-- DataGrid: 작업 목록과 상태를 표시 -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <DataGridTextColumn Header="PO Number" Binding="{Binding PONumber}" Width="*" />
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                <DataGridTextColumn Header="BASIC_MODEL" Binding="{Binding BASIC_MODEL}" Width="*" />
                <DataGridTextColumn Header="MODEL_CODE" Binding="{Binding MODEL_CODE}" Width="*" />
                <DataGridTextColumn Header="PO_PLAN_QTY" Binding="{Binding PO_PLAN_QTY}" Width="*" />
                <DataGridTextColumn Header="PO_PROD_QTY" Binding="{Binding PO_PROD_QTY}" Width="*" />
                <DataGridTextColumn Header="MAG_QTY" Binding="{Binding MAG_QTY}" Width="*" />
                <DataGridTextColumn Header="SequenceFlag" Binding="{Binding SequenceFlag}" Width="*" />

                <!-- 작업 진행 상태를 동그라미로 표시하는 열 -->
                <DataGridTemplateColumn Header="Task Status" Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <!-- 상태를 표시할 동그라미 도형 -->
                                <Ellipse Width="20" Height="20" Stroke="Black" StrokeThickness="1">
                                    <Ellipse.Style>
                                        <Style TargetType="Ellipse">
                                            <Style.Triggers>
                                                <!-- 완료된 작업은 녹색 -->
                                                <DataTrigger Binding="{Binding IsCompleted}" Value="True">
                                                    <Setter Property="Fill" Value="LightGreen"/>
                                                </DataTrigger>
                                                <!-- 에러가 발생한 작업은 빨간색 -->
                                                <DataTrigger Binding="{Binding IsError}" Value="True">
                                                    <Setter Property="Fill" Value="Red"/>
                                                </DataTrigger>
                                                <!-- 대기 중인 작업은 스카이블루 -->
                                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                    <Setter Property="Fill" Value="SkyBlue"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 모든 작업을 취소하는 버튼 -->
        <Button Content="Cancel All" Command="{Binding CancelAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="100" Margin="10"/>
    </Grid>
</Window>
TaskModel.cs (작업 상태 및 재시작 로직 추가)
Models/TaskModel.cs

csharp
코드 복사
using System.Threading.Tasks;
using System.Windows.Input;

public class TaskModel : ViewModelBase
{
    public string PONumber { get; set; }
    public string MAG_NO { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int MAG_QTY { get; set; }
    public int SequenceFlag { get; set; }

    private string _status;
    public string Status
    {
        get => _status;
        set
        {
            _status = value;
            OnPropertyChanged(nameof(Status));
        }
    }

    public bool IsCompleted { get; set; }
    public bool IsError { get; set; }
    public bool IsCancelled { get; set; }
    public bool IsRunning { get; set; }

    private TaskQueue _taskQueue;
    public ICommand StartCommand { get; }
    public ICommand CancelCommand { get; }
    public ICommand RestartCommand { get; } // 작업 재시작 명령어 추가

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue, bool isExecutable)
    {
        PONumber = logEntry.PO_NO;
        MAG_NO = logEntry.MAG_NO;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        MAG_QTY = logEntry.MAG_QTY;
        SequenceFlag = logEntry.SequenceFlag;

        _taskQueue = taskQueue;

        StartCommand = new RelayCommand(StartTask);
        CancelCommand = new RelayCommand(CancelTask);
        RestartCommand = new RelayCommand(RestartTask); // 재시작 명령어

        Status = "Pending";
        if (isExecutable) StartTask();
    }

    private async void StartTask()
    {
        Status = "Running";
        IsRunning = true;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsRunning));

        // 비동기 작업을 실행하고, TaskQueue의 상태를 실시간으로 업데이트
        var success = await _taskQueue.ExecuteTaskQueue(UpdateTaskStatus);

        Status = success ? "Completed" : "Failed";
        IsCompleted = success;
        IsError = !success;
        IsRunning = false;

        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsCompleted));
        OnPropertyChanged(nameof(IsError));
        OnPropertyChanged(nameof(IsRunning));
    }

    private void CancelTask()
    {
        _taskQueue.Cancel();
        Status = "Cancelled";
        IsCancelled = true;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsCancelled));
    }

    /// <summary>
    /// 작업을 특정 시점부터 다시 시작하는 메서드
    /// </summary>
    private void RestartTask()
    {
        // 모든 작업을 대기 상태로 설정하고, 선택한 작업부터 실행
        Status = "Running";
        IsRunning = true;
        IsCompleted = false;
        IsError = false;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsRunning));
        OnPropertyChanged(nameof(IsCompleted));
        OnPropertyChanged(nameof(IsError));

        StartTask(); // 다시 작업 실행
    }

    /// <summary>
    /// TaskQueue의 상태를 실시간으로 업데이트하는 메서드
    /// </summary>
    private async Task UpdateTaskStatus(string message)
    {
        Status = message;
        OnPropertyChanged(nameof(Status));
        await Task.CompletedTask; // 비동기 처리 완료
    }
}
MainViewModel.cs (우클릭 메뉴 및 작업 재시작 로직 추가)
ViewModels/MainViewModel.cs

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;
    private FileProcessor _fileProcessor;

    public ICommand CancelAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>();
        _taskQueue = new TaskQueue();

        // PLC 통신 클래스 생성
        var plcCommunication = new PlcCommunication();

        // 파일 처리 클래스 생성 (경로와 PLC 통신 클래스 전달)
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG", plcCommunication);

        // 파일 감지 이벤트 연결 (작업 실행 여부에 따라 다르게 처리)
        _fileProcessor.NewFileDetected += OnNewFileDetected;

        CancelAllCommand = new RelayCommand(CancelAllTasks);
    }

    /// <summary>
    /// 새로운 파일이 감지되었을 때 호출되는 메서드.
    /// Dispatcher.Invoke를 사용하여 UI 스레드에서 안전하게 작업 추가.
    /// </summary>
    private void OnNewFileDetected(LogEntry logEntry, bool executeTask)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            var taskModel = new TaskModel(logEntry, _taskQueue, executeTask);
            TaskList.Add(taskModel);

            // 최대 18개의 항목만 유지
            if (TaskList.Count > 18)
            {
                TaskList.RemoveAt(0);
            }
        });
    }

    /// <summary>
    /// 모든 작업을 취소합니다.
    /// </summary>
    private void CancelAllTasks()
    {
        _taskQueue.CancelAll();
        foreach (var task in TaskList)
        {
            task.Status = "Cancelled";
        }
    }

    /// <summary>
    /// 우클릭 메뉴에서 "여기서부터 시작" 버튼을 클릭했을 때 해당 작업부터 재시작하는 메서드
    /// </summary>
    public void RestartFromHere(TaskModel selectedTask)
    {
        // 선택한 작업 이후의 모든 작업을 대기 상태로 변경
        var startIndex = TaskList.IndexOf(selectedTask);
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.Status = "Pending";
            task.IsRunning = false;
            task.IsCompleted = false;
            task.IsError = false;
            task.OnPropertyChanged(nameof(task.Status));
            task.OnPropertyChanged(nameof(task.IsRunning));
            task.OnPropertyChanged(nameof(task.IsCompleted));
            task.OnPropertyChanged(nameof(task.IsError));
        }

        // 선택한 작업부터 재시작
        selectedTask.RestartCommand.Execute(null);
    }
}
Context Menu 추가 (XAML)
DataGrid에 우클릭으로 "여기서부터 시작" 기능을 사용할 수 있도록 ContextMenu를 추가합니다.

xml
코드 복사
<DataGridTemplateColumn Header="Task Status" Width="*">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <Grid>
                <Ellipse Width="20" Height="20" Stroke="Black" StrokeThickness="1">
                    <Ellipse.Style>
                        <Style TargetType="Ellipse">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsCompleted}" Value="True">
                                    <Setter Property="Fill" Value="LightGreen"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsError}" Value="True">
                                    <Setter Property="Fill" Value="Red"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                    <Setter Property="Fill" Value="SkyBlue"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Ellipse.Style>
                </Ellipse>
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="여기서부터 시작" Command="{Binding DataContext.RestartFromHereCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}" CommandParameter="{Binding}"/>
                    </ContextMenu>
                </Grid.ContextMenu>
            </Grid>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>
설명:
TaskModel.cs:

RestartCommand를 추가하여 작업을 특정 시점부터 다시 시작할 수 있도록 구현했습니다.
RestartTask() 메서드에서 해당 작업부터 다시 실행되도록 하였으며, 이전 작업들은 대기 상태로 변환됩니다.
MainViewModel.cs:

우클릭 메뉴에서 선택한 작업 이후의 작업들을 대기 상태로 변경하고, 선택된 작업부터 재시작하는 기능을 구현했습니다.
RestartFromHere 메서드를 통해 선택한 작업부터 다시 시작합니다.
MainWindow.xaml:

DataGrid에서 동그라미 도형을 통해 작업 상태를 시각적으로 표시하며, 상태에 따라 색상이 변경됩니다.
ContextMenu(우클릭 메뉴)를 추가하여, "여기서부터 시작" 버튼을 클릭할 수 있도록 했습니다.
이제 이 코드에서는 작업 상태를 시각적으로 동그라미로 표시하며, 우클릭 메뉴에서 특정 작업부터 재시작하는 기능을 사용할 수 있습니