수(비동기 함수)를 다른 클래스의 생성자에 파라미터로 넘겨서, 특정 이벤트가 발생했을 때 실행되도록 하려면 Func<Task> 델리게이트를 사용하면 됩니다. Func<Task>는 반환 값이 없는 비동기 작업을 참조할 수 있습니다.

아래는 async Task 함수를 다른 클래스의 생성자에 넘겨서 이벤트 발생 시 실행되도록 하는 예제입니다.

예시 코드
csharp
코드 복사
using System;
using System.Threading.Tasks;

public class EventTriggerClass
{
    private readonly Func<Task> _asyncTask;

    // 생성자에서 비동기 작업을 파라미터로 전달받음
    public EventTriggerClass(Func<Task> asyncTask)
    {
        _asyncTask = asyncTask;
    }

    // 이벤트가 발생했을 때 비동기 작업을 실행하는 메서드
    public async void OnEventTriggered()
    {
        if (_asyncTask != null)
        {
            Console.WriteLine("이벤트 발생! 비동기 작업을 실행합니다...");
            await _asyncTask();  // 비동기 작업 실행
            Console.WriteLine("비동기 작업 완료!");
        }
    }
}

public class Program
{
    // 비동기 작업 (async Task)
    public async Task MyAsyncTask()
    {
        Console.WriteLine("비동기 작업 중...");
        await Task.Delay(3000);  // 3초 대기
        Console.WriteLine("3초 후 작업 완료!");
    }

    public static void Main(string[] args)
    {
        Program program = new Program();

        // 비동기 작업을 EventTriggerClass 생성자로 전달
        EventTriggerClass eventTrigger = new EventTriggerClass(program.MyAsyncTask);

        // 이벤트가 발생한 것처럼 시뮬레이션하여 메서드를 호출
        eventTrigger.OnEventTriggered();

        // 메인 스레드가 끝나지 않도록 잠시 대기
        Console.ReadLine();
    }
}
설명:
EventTriggerClass:

Func<Task> 타입의 델리게이트 _asyncTask를 생성자로 전달받습니다. 이 델리게이트는 비동기 작업을 참조합니다.
OnEventTriggered 메서드에서 이벤트가 발생했을 때 await _asyncTask()로 비동기 작업을 실행합니다.
Program 클래스:

MyAsyncTask()는 비동기 작업을 수행하는 함수입니다.
EventTriggerClass의 생성자로 MyAsyncTask를 넘겨서 이벤트 발생 시 이 작업이 실행되도록 합니다.
실행 흐름:

OnEventTriggered()가 호출되면, MyAsyncTask()가 실행되고 3초 대기 후 완료됩니다.
중요한 점:
Func<Task>를 사용하여 async Task 메서드를 다른 클래스에 파라미터로 넘깁니다.
await 키워드를 사용하여 비동기 작업이 완료될 때까지 기다릴 수 있습니다.