, 알겠습니다. Flask 웹 애플리케이션의 관리자 기능들을 처리하는 app/routes_admin.py 파일의 최종 전체 코드를 한국어 설명과 함께 다시 제공해 드리겠습니다.

이 파일에는 다음 관리 기능들에 대한 라우트(웹 페이지 경로 및 처리 함수)가 포함됩니다:

대상 PC 관리: 목록 조회, 추가, 수정, 삭제
허용된 사용자 IP 관리: 목록 조회, 추가, 수정, 삭제
관리자 IP 관리: 목록 조회, 추가, 수정, 삭제 (자신 IP 삭제 방지 등 안전장치 포함)
모든 관리자 기능은 @ip_auth_required('admin') 데코레이터를 사용하여 관리자 IP로 등록된 사용자만 접근할 수 있도록 제한됩니다.

최종 수정: app/routes_admin.py (전체 코드)
Python

# scontrol_flask_web/app/routes_admin.py
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app, g
from . import db  # app/__init__.py 에서 생성된 db SQLAlchemy 객체
from .models import TargetPC, AllowedUserIP, AdminIP  # SQLAlchemy 모델 클래스들
from .forms import TargetPCForm, AllowedUserIPForm, AdminIPForm  # WTForms 폼 클래스들
from .auth import ip_auth_required, get_current_user_role # IP 인증 데코레이터 및 현재 사용자 역할 함수

# 'admin' 이름으로 블루프린트 생성. url_prefix='/admin'은 app/__init__.py 에서 설정.
admin_bp = Blueprint('admin', __name__)

# --- 1. 대상 PC 관리 (Target PC Management) ---
@admin_bp.route('/pcs')
@ip_auth_required('admin') # 관리자만 접근 가능
def manage_target_pcs():
    """대상 PC 목록을 조회하고 페이지네이션하여 표시합니다."""
    page = request.args.get('page', 1, type=int)
    per_page = 10 # 페이지 당 보여줄 항목 수 (설정 파일에서 관리 가능)
    # TargetPC 모델에서 pc_name 순으로 정렬하여 페이지네이션 객체 생성
    pagination = TargetPC.query.order_by(TargetPC.pc_name).paginate(page=page, per_page=per_page, error_out=False)
    pcs_on_current_page = pagination.items # 현재 페이지의 PC 목록
    return render_template('admin/manage_target_pcs.html', 
                           pcs=pcs_on_current_page, 
                           pagination=pagination, 
                           title="대상 PC 관리")

@admin_bp.route('/pcs/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_target_pc():
    """새로운 대상 PC 정보를 추가합니다."""
    form = TargetPCForm()
    if form.validate_on_submit(): # POST 요청이고 폼 데이터가 유효하면
        # address2가 비어있으면 None으로 처리하여 DB에 NULL로 저장되도록 함
        addr2_value = form.address2.data if form.address2.data and form.address2.data.strip() else None
        
        new_pc = TargetPC(
            pc_name=form.pc_name.data,
            address1=form.address1.data,
            address2=addr2_value,
            description=form.description.data
        )
        try:
            db.session.add(new_pc)
            db.session.commit()
            flash(f"PC '{new_pc.pc_name}' 정보가 성공적으로 추가되었습니다.", 'success')
            return redirect(url_for('admin.manage_target_pcs')) # PC 관리 목록 페이지로 이동
        except Exception as e: # 주로 UNIQUE 제약조건 위반 (pc_name 중복 등)
            db.session.rollback() # 오류 발생 시 롤백
            error_message = f"PC 정보 추가 중 오류 발생: {e}"
            if 'UNIQUE constraint failed' in str(e) or 'UNIQUE KEY constraint' in str(e).upper():
                 error_message = f"이미 등록된 PC 이름입니다: {form.pc_name.data}"
            flash(error_message, 'error')
            current_app.logger.error(f"Error adding PC '{form.pc_name.data}': {e}")
            
    return render_template('admin/edit_target_pc.html', form=form, title="새 PC 추가")

@admin_bp.route('/pcs/edit/<int:pc_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_target_pc(pc_id):
    """기존 대상 PC 정보를 수정합니다."""
    pc_to_edit = TargetPC.query.get_or_404(pc_id) # 해당 ID의 PC가 없으면 404 오류 발생
    form = TargetPCForm(obj=pc_to_edit) # 폼에 기존 PC 데이터 채우기
    
    if form.validate_on_submit():
        pc_to_edit.pc_name = form.pc_name.data
        pc_to_edit.address1 = form.address1.data
        pc_to_edit.address2 = form.address2.data if form.address2.data and form.address2.data.strip() else None
        pc_to_edit.description = form.description.data
        try:
            db.session.commit() # 변경사항 DB에 저장
            flash(f"PC '{pc_to_edit.pc_name}' 정보가 성공적으로 수정되었습니다.", 'success')
            return redirect(url_for('admin.manage_target_pcs'))
        except Exception as e:
            db.session.rollback()
            error_message = f"PC 정보 수정 중 오류 발생: {e}"
            if 'UNIQUE constraint failed' in str(e) or 'UNIQUE KEY constraint' in str(e).upper():
                 error_message = f"수정하려는 PC 이름 '{form.pc_name.data}'가 이미 다른 항목에 등록되어 있습니다."
            flash(error_message, 'error')
            current_app.logger.error(f"Error editing PC ID {pc_id}: {e}")

    return render_template('admin/edit_target_pc.html', form=form, title=f"PC 정보 수정: {pc_to_edit.pc_name}", pc=pc_to_edit)

@admin_bp.route('/pcs/delete/<int:pc_id>', methods=['POST']) # CSRF 방지를 위해 POST 권장
@ip_auth_required('admin')
def delete_target_pc(pc_id):
    """대상 PC 정보를 삭제합니다."""
    pc_to_delete = TargetPC.query.get_or_404(pc_id)
    pc_name_deleted = pc_to_delete.pc_name # 삭제 메시지용 이름 저장
    try:
        db.session.delete(pc_to_delete)
        db.session.commit()
        flash(f"PC '{pc_name_deleted}' 정보가 성공적으로 삭제되었습니다.", 'success')
    except Exception as e:
        db.session.rollback()
        flash(f"PC 정보 삭제 중 오류 발생: {e}", 'error')
        current_app.logger.error(f"Error deleting PC ID {pc_id}: {e}")
    return redirect(url_for('admin.manage_target_pcs'))


# --- 2. 허용된 사용자 IP 관리 (Allowed User IP Management) ---
@admin_bp.route('/users')
@ip_auth_required('admin')
def manage_user_ips():
    """허용된 사용자 IP 목록을 조회하고 페이지네이션하여 표시합니다."""
    page = request.args.get('page', 1, type=int)
    per_page = 10
    pagination = AllowedUserIP.query.order_by(AllowedUserIP.ip_address).paginate(page=page, per_page=per_page, error_out=False)
    user_ips_on_current_page = pagination.items
    return render_template('admin/manage_user_ips.html', 
                           user_ips=user_ips_on_current_page, 
                           pagination=pagination, 
                           title="허용된 사용자 IP 관리")

@admin_bp.route('/users/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_user_ip():
    """새로운 허용 사용자 IP를 추가합니다."""
    form = AllowedUserIPForm()
    if form.validate_on_submit():
        # 현재 접속한 관리자(g.user_ip)의 AdminIP 레코드를 찾아 ID를 가져옴
        admin_record = AdminIP.query.filter_by(ip_address=g.user_ip).first()
        admin_id = admin_record.id if admin_record else None
        
        new_user_ip = AllowedUserIP(
            ip_address=form.ip_address.data,
            description=form.description.data,
            added_by_admin_id=admin_id
        )
        try:
            db.session.add(new_user_ip)
            db.session.commit()
            flash(f"사용자 IP '{new_user_ip.ip_address}'가 성공적으로 추가되었습니다.", 'success')
            return redirect(url_for('admin.manage_user_ips'))
        except Exception as e:
            db.session.rollback()
            error_message = f"사용자 IP 추가 중 오류 발생: {e}"
            if 'UNIQUE constraint failed' in str(e) or 'UNIQUE KEY constraint' in str(e).upper():
                 error_message = f"이미 등록된 IP 주소입니다: {form.ip_address.data}"
            flash(error_message, 'error')
            current_app.logger.error(f"Error adding user IP '{form.ip_address.data}': {e}")
    return render_template('admin/edit_user_ip.html', form=form, title="새 사용자 IP 추가")

@admin_bp.route('/users/edit/<int:user_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_user_ip(user_ip_id):
    """기존 허용 사용자 IP 정보를 수정합니다."""
    user_ip_to_edit = AllowedUserIP.query.get_or_404(user_ip_id)
    form = AllowedUserIPForm(obj=user_ip_to_edit)
    if form.validate_on_submit():
        user_ip_to_edit.ip_address = form.ip_address.data
        user_ip_to_edit.description = form.description.data
        # added_by_admin_id는 일반적으로 수정하지 않음
        try:
            db.session.commit()
            flash(f"사용자 IP '{user_ip_to_edit.ip_address}' 정보가 성공적으로 수정되었습니다.", 'success')
            return redirect(url_for('admin.manage_user_ips'))
        except Exception as e:
            db.session.rollback()
            error_message = f"사용자 IP 수정 중 오류 발생: {e}"
            if 'UNIQUE constraint failed' in str(e) or 'UNIQUE KEY constraint' in str(e).upper():
                 error_message = f"수정하려는 IP 주소 '{form.ip_address.data}'가 이미 다른 항목에 등록되어 있습니다."
            flash(error_message, 'error')
            current_app.logger.error(f"Error editing user IP ID {user_ip_id}: {e}")
    return render_template('admin/edit_user_ip.html', form=form, title=f"사용자 IP 수정: {user_ip_to_edit.ip_address}", user_ip_obj=user_ip_to_edit)

@admin_bp.route('/users/delete/<int:user_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_user_ip(user_ip_id):
    """허용 사용자 IP 정보를 삭제합니다."""
    user_ip_to_delete = AllowedUserIP.query.get_or_404(user_ip_id)
    ip_address_deleted = user_ip_to_delete.ip_address
    try:
        db.session.delete(user_ip_to_delete)
        db.session.commit()
        flash(f"사용자 IP '{ip_address_deleted}' 정보가 성공적으로 삭제되었습니다.", 'success')
    except Exception as e:
        db.session.rollback()
        flash(f"사용자 IP 삭제 중 오류 발생: {e}", 'error')
        current_app.logger.error(f"Error deleting user IP ID {user_ip_id}: {e}")
    return redirect(url_for('admin.manage_user_ips'))


# --- 3. 관리자 IP 관리 (Admin IP Management) ---
@admin_bp.route('/admins')
@ip_auth_required('admin') # 이 기능은 최상위 관리자만 접근하도록 더 세분화된 권한 관리가 필요할 수 있음
def manage_admin_ips():
    """관리자 IP 목록을 조회하고 페이지네이션하여 표시합니다."""
    page = request.args.get('page', 1, type=int)
    per_page = 10
    pagination = AdminIP.query.order_by(AdminIP.ip_address).paginate(page=page, per_page=per_page, error_out=False)
    admin_ips_on_current_page = pagination.items
    return render_template('admin/manage_admin_ips.html', 
                           admin_ips=admin_ips_on_current_page, 
                           pagination=pagination, 
                           title="관리자 IP 관리")

@admin_bp.route('/admins/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_admin_ip():
    """새로운 관리자 IP를 추가합니다."""
    form = AdminIPForm()
    if form.validate_on_submit():
        new_admin_ip = AdminIP(
            ip_address=form.ip_address.data,
            description=form.description.data
        )
        try:
            db.session.add(new_admin_ip)
            db.session.commit()
            flash(f"관리자 IP '{new_admin_ip.ip_address}'가 성공적으로 추가되었습니다.", 'success')
            return redirect(url_for('admin.manage_admin_ips'))
        except Exception as e:
            db.session.rollback()
            error_message = f"관리자 IP 추가 중 오류 발생: {e}"
            if 'UNIQUE constraint failed' in str(e) or 'UNIQUE KEY constraint' in str(e).upper():
                 error_message = f"이미 등록된 IP 주소입니다: {form.ip_address.data}"
            flash(error_message, 'error')
            current_app.logger.error(f"Error adding admin IP '{form.ip_address.data}': {e}")
    return render_template('admin/edit_admin_ip.html', form=form, title="새 관리자 IP 추가")

@admin_bp.route('/admins/edit/<int:admin_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_admin_ip(admin_ip_id):
    """기존 관리자 IP 정보를 수정합니다 (주로 설명)."""
    admin_ip_to_edit = AdminIP.query.get_or_404(admin_ip_id)
    form = AdminIPForm(obj=admin_ip_to_edit) # 폼에 기존 데이터 채우기
    
    original_ip = admin_ip_to_edit.ip_address # 수정 전 IP 저장

    if form.validate_on_submit():
        new_ip = form.ip_address.data
        # IP 주소 변경 시도 확인
        if original_ip != new_ip:
            # 현재 접속한 관리자 자신의 IP를 변경하려는 경우 방지
            if original_ip == g.user_ip:
                flash("보안상의 이유로 현재 접속 중인 자신의 관리자 IP 주소는 변경할 수 없습니다. 설명을 수정하거나, 다른 관리자 IP를 통해 시도하세요.", 'error')
                return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_to_edit)
            
            # 변경하려는 새 IP가 이미 다른 관리자 IP로 등록되어 있는지 확인
            existing_admin_with_new_ip = AdminIP.query.filter(AdminIP.ip_address == new_ip, AdminIP.id != admin_ip_id).first()
            if existing_admin_with_new_ip:
                flash(f"수정하려는 IP 주소 '{new_ip}'가 이미 다른 관리자 항목에 등록되어 있습니다.", 'error')
                return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_to_edit)
        
        admin_ip_to_edit.ip_address = new_ip
        admin_ip_to_edit.description = form.description.data
        try:
            db.session.commit()
            flash(f"관리자 IP '{admin_ip_to_edit.ip_address}' 정보가 성공적으로 수정되었습니다.", 'success')
            return redirect(url_for('admin.manage_admin_ips'))
        except Exception as e: # 주로 UNIQUE 제약조건 위반
            db.session.rollback()
            flash(f"관리자 IP 수정 중 오류 발생: {e}", 'error')
            current_app.logger.error(f"Error editing admin IP ID {admin_ip_id}: {e}")
            
    return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_to_edit)

@admin_bp.route('/admins/delete/<int:admin_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_admin_ip(admin_ip_id):
    """관리자 IP 정보를 삭제합니다."""
    admin_ip_to_delete = AdminIP.query.get_or_404(admin_ip_id)
    ip_address_deleted = admin_ip_to_delete.ip_address

    # 현재 접속한 관리자 자신의 IP는 삭제하지 못하도록 방지
    if admin_ip_to_delete.ip_address == g.user_ip:
        flash("현재 접속 중인 관리자 자신의 IP는 삭제할 수 없습니다.", 'error')
        return redirect(url_for('admin.manage_admin_ips'))

    # 시스템에 최소 1개의 관리자 IP는 남아 있어야 함
    if AdminIP.query.count() <= 1:
        flash("최소 1개의 관리자 IP는 시스템에 남아 있어야 합니다. 마지막 관리자 IP는 삭제할 수 없습니다.", 'error')
        return redirect(url_for('admin.manage_admin_ips'))
        
    try:
        # 이 관리자 IP에 의해 추가된 AllowedUserIP들의 added_by_admin_id를 NULL로 설정
        # (DB에서 ON DELETE SET NULL 제약조건이 설정되어 있다면 자동 처리됨. SQLAlchemy 모델에서도 설정 가능)
        # 여기서는 명시적으로 처리하지 않음. DB 스키마의 ON DELETE SET NULL에 의존.
        # 필요시: AllowedUserIP.query.filter_by(added_by_admin_id=admin_ip_id).update({'added_by_admin_id': None})

        db.session.delete(admin_ip_to_delete)
        db.session.commit()
        flash(f"관리자 IP '{ip_address_deleted}' 정보가 성공적으로 삭제되었습니다.", 'success')
    except Exception as e:
        db.session.rollback()
        flash(f"관리자 IP 삭제 중 오류 발생: {e}", 'error')
        current_app.logger.error(f"Error deleting admin IP ID {admin_ip_id}: {e}")
    return redirect(url_for('admin.manage_admin_ips'))
routes_admin.py 주요 변경 사항:

임포트: AdminIP 모델, AdminIPForm 폼, 그리고 g (Flask의 요청 컨텍스트 전역 객체)와 get_current_user_role 함수를 임포트 목록에 추가했습니다.
관리자 IP 관리 CRUD:
manage_admin_ips: 관리자 IP 목록을 페이지네이션하여 표시합니다.
add_admin_ip: 새 관리자 IP를 추가합니다.
edit_admin_ip: 기존 관리자 IP 정보를 수정합니다. 자신의 현재 접속 IP를 다른 IP로 변경하려고 할 때, 또는 변경하려는 IP가 이미 다른 관리자 IP로 존재할 때를 방지하는 로직이 추가되었습니다.
delete_admin_ip: 관리자 IP를 삭제합니다. 현재 접속 중인 자신의 IP를 삭제하거나, 시스템에 관리자 IP가 하나만 남았을 경우 삭제를 방지하는 안전장치가 포함되었습니다.
오류 메시지 상세화: 데이터베이스 제약조건 위반(예: UNIQUE) 시 사용자에게 좀 더 명확한 오류 메시지를 보여주도록 수정했습니다 (MSSQL 오류 메시지 패턴도 일부 고려).
로깅: current_app.logger를 사용하여 서버 측 로그를 남기도록 했습니다.
이것으로 app/routes_admin.py 파일에 관리자 IP 관리 기능까지 포함한 전체 코드가 되었습니다.
이전에 제공해 드린 app/templates/admin/manage_admin_ips.html 과 새로 추가/수정할 app/templates/admin/edit_admin_ip.html 템플릿을 함께 사용하시면 됩니다. (edit_admin_ip.html은 edit_user_ip.html과 내용이 거의 동일하므로, 이전 응답의 edit_user_ip.html을 복사하여 파일 이름을 바꾸고, 내부의 url_for 경로만 admin.manage_admin_ips로 수정하시면 됩니다.)

다음 단계는 사용자용 "원격 제어판" 페이지를 만들고, SAgentM.App 에이전트와 통신하는 Python 소켓 클라이언트 로직을 구현하는 것입니다.