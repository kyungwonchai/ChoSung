안드로이드 스튜디오에서 플라스크 웹서버와 연동되는 간단한 앱을 만드는 과정은 다음과 같습니다.

1. 프로젝트 생성
안드로이드 스튜디오를 열고, 새 프로젝트를 생성합니다.
"Empty Activity"를 선택합니다.
프로젝트 이름과 저장 위치를 설정하고, "Finish"를 클릭합니다.
2. 레이아웃 디자인
activity_main.xml 파일을 수정하여 다음과 같은 레이아웃을 만듭니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- Line 입력 -->
    <EditText
        android:id="@+id/line_input"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Enter line value"
        android:inputType="number" />

    <!-- 버튼들 -->
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal">

        <!-- 윗줄 홀수 버튼 -->
        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">

            <!-- 버튼 1~15 -->
            <Button
                android:id="@+id/button1"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="1" />
            <!-- ... 중간 생략 ... -->
            <Button
                android:id="@+id/button15"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="15" />
        </LinearLayout>

        <!-- 아래줄 짝수 버튼 -->
        <LinearLayout
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:orientation="vertical">

            <!-- 버튼 2~16 -->
            <Button
                android:id="@+id/button2"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="2" />
            <!-- ... 중간 생략 ... -->
            <Button
                android:id="@+id/button16"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="16" />
        </LinearLayout>
    </LinearLayout>

    <!-- WebView -->
    <WebView
        android:id="@+id/webview"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1" />
</LinearLayout>
3. Java/Kotlin 코드 작성
MainActivity.java 또는 MainActivity.kt 파일을 수정합니다.

Java:
java
코드 복사
package com.example.simpleapp;

import android.os.Bundle;
import android.view.View;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;
import android.widget.EditText;
import androidx.appcompat.app.AppCompatActivity;

public class MainActivity extends AppCompatActivity {
    private WebView webView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        EditText lineInput = findViewById(R.id.line_input);
        webView = findViewById(R.id.webview);
        webView.getSettings().setJavaScriptEnabled(true);
        webView.setWebViewClient(new WebViewClient());

        // 예제 버튼 클릭 리스너 설정
        findViewById(R.id.button1).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                loadWebPage("http://example.com/A");
            }
        });

        findViewById(R.id.button2).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                loadWebPage("http://example.com/B");
            }
        });

        // ... 나머지 버튼들도 동일하게 설정 ...
    }

    private void loadWebPage(String url) {
        webView.loadUrl(url);
    }
}
Kotlin:
kotlin
코드 복사
package com.example.simpleapp

import android.os.Bundle
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.Button
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {
    private lateinit var webView: WebView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val lineInput: EditText = findViewById(R.id.line_input)
        webView = findViewById(R.id.webview)
        webView.settings.javaScriptEnabled = true
        webView.webViewClient = WebViewClient()

        findViewById<Button>(R.id.button1).setOnClickListener {
            loadWebPage("http://example.com/A")
        }

        findViewById<Button>(R.id.button2).setOnClickListener {
            loadWebPage("http://example.com/B")
        }

        // ... 나머지 버튼들도 동일하게 설정 ...
    }

    private fun loadWebPage(url: String) {
        webView.loadUrl(url)
    }
}
4. AndroidManifest.xml 수정
AndroidManifest.xml 파일에 인터넷 권한을 추가합니다.

xml
코드 복사
<uses-permission android:name="android.permission.INTERNET" />
5. 플라스크 서버 설정
간단한 플라스크 서버를 설정합니다.

python
코드 복사
from flask import Flask, render_template

app = Flask(__name__)

@app.route("/A")
def page_a():
    return "<h1>Page A</h1>"

@app.route("/B")
def page_b():
    return "<h1>Page B</h1>"

if __name__ == "__main__":
    app.run(debug=True)
이 과정을 통해 안드로이드 앱과 플라스크 서버 간의 간단한 상호작용을 구현할 수 있습니다. 앱의 버튼을 클릭하면 지정된 웹 페이지로 이동하며, WebView를 통해 내용을 표시합니