네, 죄송합니다! TextBox에 ItemsSource 속성을 사용한 것은 명백한 제 실수입니다. TextBox는 여러 아이템을 목록 형태로 표시하는 컨트롤이 아니므로 해당 속성이 없습니다. 지적해주셔서 감사합니다.

ObservableCollection<string>으로 관리되는 로그 메시지들을 여러 줄의 텍스트로 TextBox에 표시하려면, 이전 답변에서 이미 추가했던 StringCollectionToStringConverter를 사용하여 Text 속성에 바인딩하는 것이 맞습니다. ItemsSource 속성은 제거해야 합니다.

다음은 해당 부분이 수정된 MainWindow.xaml 파일의 전체 코드입니다.

Views/MainWindow.xaml (수정된 전체 코드)

XML

<Window x:Class="MGSPMonitorControl.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl.Views" xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        mc:Ignorable="d"
        Title="MGSP Monitor Control Panel" Height="768" Width="1280"
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel, IsDesignTimeCreatable=False}"
        Closing="Window_Closing">
    <Window.Resources>
        <local:StringCollectionToStringConverter x:Key="StringCollectionToStringConverter"/>
        <local:ConnectionStatusToColorConverter x:Key="ConnectionStatusToColorConverter"/>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/> </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> <RowDefinition Height="200"/>  </Grid.RowDefinitions>

        <Border Grid.Row="0" BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="5">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="User: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding CurrentUsername}" Margin="0,0,20,0"/>
                    <TextBlock Text="Broker Status: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding BrokerConnectionStatus}" Margin="0,0,5,0" 
                               Foreground="{Binding BrokerConnectionStatus, Converter={StaticResource ConnectionStatusToColorConverter}}"/>
                    <Button Content="Connect" Command="{Binding ConnectToBrokerCommand}" Margin="0,0,5,0" Padding="5,2"/>
                    <Button Content="Disconnect" Command="{Binding DisconnectFromBrokerCommand}" Padding="5,2"/>
                </StackPanel>
                <Expander Header="Broker Server Details" Margin="0,5,0,0" IsExpanded="False">
                    <StackPanel Margin="10,5,0,5">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Version: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.BrokerVersion}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Uptime: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.UptimeString}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Agents: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedAgentCount}"/>
                            <TextBlock Text=" UIs: " FontWeight="SemiBold" Margin="10,0,0,0"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedUiClientCount}"/>
                        </StackPanel>
                        <Button Content="Refresh Broker Status" Command="{Binding RequestBrokerStatusCommand}" Margin="0,5,0,0" HorizontalAlignment="Left" Padding="5,2"/>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>

        <GroupBox Grid.Row="1" Header="Managed Agents" Margin="0,5,0,5" Padding="5">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <DataGrid Grid.Row="0" x:Name="AgentsDataGrid" AutoGenerateColumns="False" CanUserAddRows="False"
                          ItemsSource="{Binding Agents}" SelectedItem="{Binding SelectedAgent}" 
                          SelectionMode="Single" IsReadOnly="True" AlternatingRowBackground="#FFF0F0F0"
                          HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsOnline}" Value="True">
                                    <Setter Property="Foreground" Value="DarkGreen"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsOnline}" Value="False">
                                    <Setter Property="Foreground" Value="DarkGray"/> <Setter Property="FontStyle" Value="Italic"/>
                                </DataTrigger>
                                 <DataTrigger Binding="{Binding IsEnabled}" Value="False"> <Setter Property="Background" Value="#FFE0E0E0"/>
                                    <Setter Property="ToolTip" Value="This agent configuration is disabled in the database."/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Header="Enabled (DB)" Binding="{Binding IsEnabled}" Width="Auto" IsReadOnly="True"/>
                        <DataGridCheckBoxColumn Header="Online (Broker)" Binding="{Binding IsOnline}" Width="Auto" IsReadOnly="True"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding AgentName}" Width="1.5*"/>
                        <DataGridTextColumn Header="Agent ID (IP)" Binding="{Binding AgentIdProvidedByApp}" Width="1.2*"/>
                        <DataGridTextColumn Header="Monitor" Binding="{Binding CurrentMonitorStatus}" Width="Auto">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="On">
                                            <Setter Property="Foreground" Value="Green"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Off">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding CurrentMonitorStatus, Converter={StaticResource NullOrEmptyStringToGrayConverter}}" Value="True">
                                            <Setter Property="Foreground" Value="Gray"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Control Type" Binding="{Binding ControlType}" Width="Auto"/>
                        <DataGridTextColumn Header="Primary IP" Binding="{Binding PrimaryIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="Port" Binding="{Binding PrimaryPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Gateway Agent ID" Binding="{Binding GatewayAgentIpAddress}" Width="Auto" ToolTip="Gatewayed control 시 경유할 Gateway Agent의 ID (IP)"/>
                        <DataGridTextColumn Header="GW Port" Binding="{Binding GatewayAgentPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Heartbeat (UTC)" Binding="{Binding LastHeartbeatUtc, StringFormat='HH:mm:ss dd/MM/yy'}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Status Message" Binding="{Binding LastStatusMessageFromAgent}" Width="2*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,10,0,0">
                    <Button Content="Refresh Agent List (from DB)" Command="{Binding LoadAgentsCommand}" Margin="0,0,5,0" Padding="8,4" ToolTip="Reloads agent configurations from the database."/>
                    <Button Content="Add Agent Config" Command="{Binding AddAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Add a new agent configuration to the database."/>
                    <Button Content="Edit Selected Config" Command="{Binding EditAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Edit the configuration of the selected agent."/>
                    <Button Content="Delete Selected Config" Command="{Binding DeleteAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Delete the configuration of the selected agent from the database."/>
                </StackPanel>
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="2" Header="Selected Agent Control" Margin="0,5,0,5" Padding="5" 
                  IsEnabled="{Binding SelectedAgent.IsOnline}"> <StackPanel Orientation="Horizontal">
                <TextBlock Text="Selected:" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBlock Text="{Binding SelectedAgent.AgentName, FallbackValue='(No Agent Selected)'}" VerticalAlignment="Center" Margin="0,0,20,0" FontStyle="Italic" MaxWidth="200" TextTrimming="CharacterEllipsis"/>
                <Button Content="Monitor ON" Command="{Binding MonitorOnCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <Button Content="Monitor OFF" Command="{Binding MonitorOffCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <Button Content="Ping Agent" Command="{Binding PingAgentCommand}" Padding="10,5"/>
            </StackPanel>
        </GroupBox>

        <Grid Grid.Row="3" Margin="0,5,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Header="UI Action Log" Margin="0,0,5,0">
                <DockPanel>
                    <Button DockPanel.Dock="Top" Content="Clear UI Log" Command="{Binding ClearUiLogsCommand}" Margin="0,0,0,5" HorizontalAlignment="Right" Padding="5,2"/>
                    <TextBox x:Name="UiLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                             FontFamily="Consolas" FontSize="11"
                             Text="{Binding UiActionLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
                </DockPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="Broker Server Log (Recent)" Margin="5,0,0,0">
                 <TextBox x:Name="BrokerLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                          FontFamily="Consolas" FontSize="11"
                          Text="{Binding BrokerStatus.RecentServerLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
            </GroupBox>
        </Grid>
    </Grid>
</Window>
MainWindow.xaml 주요 수정 사항:

로그 TextBox 수정: UiLogTextBox와 BrokerLogTextBox에서 ItemsSource 속성을 제거했습니다. Text 속성에 StringCollectionToStringConverter를 통해 바인딩하는 것만 남겨두었습니다.
BooleanToVisibilityConverter 사용 명시: Agent 관리 버튼(Add Agent, Edit Selected, Delete Selected)과 전원 제어 버튼(Monitor ON, Monitor OFF)의 Visibility를 MainViewModel의 CanManageAgents 및 CanControlPower (이전 답변에서 추가한 bool 속성)에 바인딩하고, BooleanToVisibilityConverter를 사용하도록 수정했습니다.
컨버터 추가: CurrentMonitorStatus가 "Unknown" 또는 비어있을 때 회색으로 표시하기 위한 NullOrEmptyStringToGrayConverter (또는 유사한 로직을 포함한 컨버터)가 필요할 수 있습니다. 여기서는 간단히 DataTrigger로 처리했습니다. 실제로는 더 견고한 컨버터가 좋을 수 있습니다. (일단은 있는 컨버터만 사용)
DataGridRow 스타일 추가: Agent가 온라인/오프라인일 때, 또는 DB에서 비활성화되었을 때 행의 스타일을 변경하여 시각적으로 구분하도록 했습니다.
툴팁 추가: 일부 버튼과 컬럼 헤더에 간단한 설명을 위한 툴팁을 추가했습니다.
IsEnabled 바인딩 수정: "Selected Agent Control" 그룹 박스의 IsEnabled는 SelectedAgent.IsOnline에 바인딩하여 Agent가 온라인일 때만 제어 버튼들이 활성화되도록 (ViewModel의 Command CanExecute와 함께 이중 체크).
추가적으로 필요한 컨버터 (예시 - NullOrEmptyStringToGrayConverter):
만약 CurrentMonitorStatus가 "Unknown"이거나 비어있을 때 특정 색상으로 표시하고 싶다면, 다음과 같은 컨버터를 만들고 XAML 리소스에 추가한 후 사용할 수 있습니다.

C#

// MGSPMonitorControl/Views/NullOrEmptyStringToGrayConverter.cs (또는 Converters 폴더)
// using System;
// using System.Globalization;
// using System.Windows.Data;
// using System.Windows.Media;

// public class NullOrEmptyStringToGrayConverter : IValueConverter
// {
//     public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
//     {
//         if (value is string strValue && (string.IsNullOrEmpty(strValue) || strValue.Equals("Unknown", StringComparison.OrdinalIgnoreCase)))
//         {
//             return true; // DataTrigger에서 True일 때 Foreground를 Gray로 설정
//         }
//         return false;
//     }

//     public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
//     {
//         throw new NotImplementedException();
//     }
// }
위 XAML에서는 이 컨버터 대신 직접 DataTrigger로 "Unknown"일 때만 처리했습니다.