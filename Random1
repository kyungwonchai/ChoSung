// MGSPMonitorControl/Services/BrokerClientService.cs
using System;
using System.Collections.Generic; // List<T> 사용
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MonitorControl.SharedModels; // 공용 MessageContract 사용
using Newtonsoft.Json;
using System.Configuration;

namespace MGSPMonitorControl.Services
{
    public interface IBrokerClientService
    {
        bool IsConnected { get; }
        bool IsAttemptingConnection { get; }
        Task<Tuple<bool, string>> ConnectAsync(bool isManualAttempt = false);
        Task DisconnectAsync(bool initiatedByUser = false);
        Task SendMessageAsync(BrokerMessage message);

        event Action<BrokerMessage> MessageReceived;
        event Action Connected;
        event Action<string> Disconnected;
        event Action<string> ConnectionFailed;
        event Action ConnectingAttempt;
    }

    public class BrokerClientService : IBrokerClientService, IDisposable
    {
        private TcpClient _tcpClient;
        private NetworkStream _networkStream;
        private StreamReader _streamReader;
        private StreamWriter _streamWriter;

        private CancellationTokenSource _mainCts;
        private Task _connectionMaintenanceTask;
        private Task _receiveLoopTask;

        private readonly object _sendLock = new object();
        private readonly object _connectLock = new object();
        private bool _isDisposed = false;
        private bool _isConnectingFlag = false; // Interlocked 대신 단순 bool과 lock 사용
        private volatile bool _userRequestedDisconnect = false;

        private readonly string _brokerIp = "127.0.0.1";
        private readonly int _brokerPort = 9001;
        private readonly bool _configValid = false;
        private readonly TimeSpan _retryDelay = TimeSpan.FromSeconds(10); // 재연결 시도 간격
        private TimeSpan _currentRetryDelay;


        public bool IsConnected => !_isDisposed && _tcpClient != null && _tcpClient.Connected &&
                                  _networkStream != null && _streamReader != null && _streamWriter != null;
        public bool IsAttemptingConnection => _isConnectingFlag;


        public event Action<BrokerMessage> MessageReceived;
        public event Action Connected;
        public event Action<string> Disconnected;
        public event Action<string> ConnectionFailed;
        public event Action ConnectingAttempt;

        public BrokerClientService()
        {
            SafeConsoleLog("BrokerClientService: Constructor - Initializing...");
            string brokerAddressSetting = null;
            bool configReadSuccess = false;
            try
            {
                var appSettings = ConfigurationManager.AppSettings;
                brokerAddressSetting = appSettings["BrokerAddress"];
                configReadSuccess = true;
            }
            catch (ConfigurationErrorsException confEx) { SafeConsoleLog($"[CRITICAL_CONFIG_ERROR] App.config load failed: {confEx.Message}. Using defaults."); }
            catch (Exception ex) { SafeConsoleLog($"[ERROR] Reading BrokerAddress from App.config: {ex.Message}. Using defaults."); }

            string addressToParse = (configReadSuccess && !string.IsNullOrWhiteSpace(brokerAddressSetting)) ? brokerAddressSetting : $"{_brokerIp}:{_brokerPort}";
            if (configReadSuccess && string.IsNullOrWhiteSpace(brokerAddressSetting)) SafeConsoleLog($"[CONFIG_WARN] 'BrokerAddress' empty. Using default: {addressToParse}");

            var parts = addressToParse.Split(':');
            if (parts.Length == 2 &&
                IPAddress.TryParse(parts[0].Trim(), out IPAddress ip) &&
                int.TryParse(parts[1].Trim(), System.Globalization.NumberStyles.None, System.Globalization.CultureInfo.InvariantCulture, out int port) &&
                port > 0 && port <= 65535)
            { _brokerIp = ip.ToString(); _brokerPort = port; _configValid = true; SafeConsoleLog($"BrokerClientService: Target Broker configured to {_brokerIp}:{_brokerPort}"); }
            else
            { SafeConsoleLog($"[CONFIG_ERROR] Invalid 'BrokerAddress' format: '{addressToParse}'. Using compiled default: {_brokerIp}:{_brokerPort}."); _configValid = true; }

            _currentRetryDelay = _initialRetryDelay;

            if (!_isDisposed)
            {
                 _mainCts = new CancellationTokenSource();
                 // ConnectionMaintenanceLoopAsync를 Task.Run으로 시작하고 _connectionMaintenanceTask에 할당
                 _connectionMaintenanceTask = Task.Run(() => ConnectionMaintenanceLoopAsync(_mainCts.Token), _mainCts.Token);
            }
        }

        private async Task ConnectionMaintenanceLoopAsync(CancellationToken token)
        {
            SafeConsoleLog("BrokerClientService: ConnectionMaintenanceLoopAsync started.");
            while (!token.IsCancellationRequested && !_isDisposed)
            {
                bool performConnectAttempt;
                lock (_connectLock)
                {
                    performConnectAttempt = !IsConnected && !_isConnectingFlag && !_userRequestedDisconnect;
                    if (performConnectAttempt)
                    {
                        _isConnectingFlag = true; // 연결 시도 시작 플래그 설정
                    }
                }

                if (performConnectAttempt)
                {
                    ConnectingAttempt?.Invoke();
                    SafeConsoleLog($"BrokerClientService: Attempting connection (Retry delay: {_currentRetryDelay.TotalSeconds}s)...");
                    Tuple<bool, string> connectResult = await ConnectInternalAsync(token); 
                    
                    lock (_connectLock) { _isConnectingFlag = false; } // 시도 후 플래그 해제

                    if (!connectResult.Item1)
                    {
                        ConnectionFailed?.Invoke(connectResult.Item2);
                        if (token.IsCancellationRequested || _isDisposed || _userRequestedDisconnect) break;
                        SafeConsoleLog($"BrokerClientService: Auto-reconnect failed: {connectResult.Item2}. Next attempt in {_currentRetryDelay.TotalSeconds}s...");
                        try { await Task.Delay(_currentRetryDelay, token);
                            if (_currentRetryDelay < _maxRetryDelay) _currentRetryDelay = TimeSpan.FromSeconds(Math.Min(_maxRetryDelay.TotalSeconds, _currentRetryDelay.TotalSeconds * 1.5));
                        } catch (OperationCanceledException) { break; }
                    }
                    else { _currentRetryDelay = _initialRetryDelay; } // 연결 성공 시 재시도 간격 초기화
                }
                else
                {
                    try { await Task.Delay(TimeSpan.FromSeconds(1), token); } catch (OperationCanceledException) { break; }
                }
            }
            SafeConsoleLog("BrokerClientService: ConnectionMaintenanceLoopAsync ended.");
        }
        
        public async Task<Tuple<bool, string>> ConnectAsync(bool isManualAttempt = true)
        {
            SafeConsoleLog($"BrokerClientService: ConnectAsync called (Manual: {isManualAttempt}). ConfigValid: {_configValid}, IsConnected: {IsConnected}, IsDisposed: {_isDisposed}");
            if (!_configValid)
            { string errMsg = "Broker configuration invalid. Cannot connect."; SafeConsoleLog(errMsg); ConnectionFailed?.Invoke(errMsg); return Tuple.Create(false, errMsg); }
            if (IsConnected) { SafeConsoleLog("Already connected."); return Tuple.Create(true, "Already connected.");}
            if (_isDisposed) { string errMsg = "Service is disposed."; SafeConsoleLog(errMsg); return Tuple.Create(false, errMsg); }
            
            if (isManualAttempt) _userRequestedDisconnect = false;

            ConnectingAttempt?.Invoke();
            // _mainCts가 null일 수 있으므로, null 체크 또는 생성자에서 반드시 초기화 보장 (현재는 생성자에서 초기화)
            return await ConnectInternalAsync(_mainCts?.Token ?? CancellationToken.None); 
        }

        private async Task<Tuple<bool, string>> ConnectInternalAsync(CancellationToken token)
        {
            // _isConnectingFlag는 호출부(ConnectionMaintenanceLoopAsync 또는 ConnectAsync)에서 이미 lock으로 관리됨
            // 여기서는 실제 연결 작업만 수행

            string connectResultMessage = "Connection attempt failed (internal).";
            // 항상 새 TcpClient 인스턴스로 연결 시도
            _tcpClient = new TcpClient(); 
            SafeConsoleLog($"BrokerClientService: New TcpClient. Target: {_brokerIp}:{_brokerPort}");

            try
            {
                if (string.IsNullOrEmpty(_brokerIp)) throw new InvalidOperationException("Broker IP address is not configured or invalid (null/empty).");
                if (token.IsCancellationRequested) throw new OperationCanceledException("Connection attempt cancelled before start by outer token.", token);

                SafeConsoleLog($"BrokerClientService: Attempting _tcpClient.ConnectAsync to {_brokerIp}:{_brokerPort}...");
                
                // ConnectAsync에 대한 타임아웃 처리
                using (var connectCts = new CancellationTokenSource(TimeSpan.FromSeconds(7))) // 7초 연결 타임아웃
                using (var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(token, connectCts.Token)) // 외부 토큰과 연결
                {
                    try
                    {
                        // ConfigureAwait(false)는 UI 스레드로 돌아가지 않도록 함
                        await _tcpClient.ConnectAsync(_brokerIp, _brokerPort).ConfigureAwait(false); 
                        linkedCts.Token.ThrowIfCancellationRequested(); // 타임아웃 또는 외부 취소 확인
                    }
                    catch (OperationCanceledException) when (connectCts.IsCancellationRequested && !token.IsCancellationRequested)
                    {
                        // 연결 자체 타임아웃 발생
                        throw new TimeoutException($"Timeout connecting to Broker {_brokerIp}:{_brokerPort} after 7 seconds.");
                    }
                    // 메인 토큰(token)에 의한 취소는 바깥 catch에서 처리
                }


                if (_tcpClient.Connected) // 연결 성공
                {
                    _networkStream = _tcpClient.GetStream();
                    if (_networkStream == null) throw new NullReferenceException("CRITICAL: NetworkStream is null after TcpClient successfully connected.");
                    
                    _streamReader = new StreamReader(_networkStream, Encoding.UTF8);
                    _streamWriter = new StreamWriter(_networkStream, Encoding.UTF8) { AutoFlush = true };
                    
                    connectResultMessage = "Successfully connected. Streams initialized.";
                    SafeConsoleLog($"BrokerClientService: {connectResultMessage}");
                    
                    Connected?.Invoke();   

                    if (_receiveLoopTask == null || _receiveLoopTask.IsCompleted)
                    {
                         _receiveLoopTask = Task.Run(() => ReceiveMessagesAsync(token), token); // 메인 루프의 CancellationToken 사용
                    }
                    return Tuple.Create(true, connectResultMessage);
                }
                else // 연결 실패 (Connected가 false)
                {
                    connectResultMessage = "TcpClient.ConnectAsync completed but client is not in a connected state.";
                    SafeConsoleLog($"[ERROR] BrokerClientService: {connectResultMessage}");
                    throw new SocketException((int)SocketError.NotConnected); 
                }
            }
            catch (OperationCanceledException opEx) when (token.IsCancellationRequested) { connectResultMessage = $"Connection operation cancelled by main token: {opEx.Message}"; SafeConsoleLog(connectResultMessage); }
            catch (SocketException sockEx) { connectResultMessage = $"SocketException: {sockEx.Message} (Code: {sockEx.SocketErrorCode}). Broker: {_brokerIp}:{_brokerPort}"; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            catch (TimeoutException timeEx) { connectResultMessage = timeEx.Message; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            catch (InvalidOperationException invOpEx) { connectResultMessage = $"Invalid operation: {invOpEx.Message}"; SafeConsoleLog($"[ERROR] {connectResultMessage}");}
            catch (Exception ex) { connectResultMessage = $"General Connect Error: {ex.ToString()}"; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            
            // 연결 실패 시 사용한 _tcpClient는 여기서 정리
            _tcpClient?.Close(); 
            _tcpClient = null;

            // Disconnected 이벤트는 ConnectionMaintenanceLoopAsync에서 호출될 것임
            return Tuple.Create(false, connectResultMessage);
        }

        private async Task ReceiveMessagesAsync(CancellationToken token)
        {
            SafeConsoleLog($"BrokerClientService: ReceiveMessagesAsync loop started for connection {_tcpClient?.Client?.RemoteEndPoint}.");
            try
            {
                while (!token.IsCancellationRequested && IsConnected && _streamReader != null)
                {
                    string messageJson = null;
                    try
                    {
                        var readLineTask = _streamReader.ReadLineAsync();
                        var delayTask = Task.Delay(Timeout.Infinite, token); // 취소 감지용
                        var completedTask = await Task.WhenAny(readLineTask, delayTask).ConfigureAwait(false);

                        if (completedTask == delayTask) // Task.Delay가 먼저 완료되면 CancellationToken에 의해 취소된 것
                        {
                            token.ThrowIfCancellationRequested();
                        }
                        messageJson = await readLineTask.ConfigureAwait(false); // 실제 결과 가져오기
                    }
                    catch (ObjectDisposedException) { SafeConsoleLog("StreamReader disposed in Receive."); break; }
                    catch (IOException) { SafeConsoleLog("IOException in receive (connection lost)."); break; }
                    // OperationCanceledException은 바깥 catch에서 처리

                    if (messageJson == null) { SafeConsoleLog("Broker disconnected (ReadLine null)."); break; }
                    if (string.IsNullOrWhiteSpace(messageJson)) continue;

                    try
                    {
                        var message = JsonConvert.DeserializeObject<BrokerMessage>(messageJson);
                        if (message != null) { SafeConsoleLog($"Msg Rcvd: Type={message.Type}"); MessageReceived?.Invoke(message); }
                        else { SafeConsoleLog($"[WARN] Failed to deserialize: {messageJson}"); }
                    }
                    catch (JsonException jsonEx) { SafeConsoleLog($"[ERROR] JSON deserialize error: {jsonEx.Message}. Rcvd: {messageJson}"); }
                }
            }
            catch (OperationCanceledException) { SafeConsoleLog("ReceiveMessagesAsync cancelled."); }
            catch (Exception ex) { if(!token.IsCancellationRequested && !_isDisposed) SafeConsoleLog($"[ERROR] Unexpected error in ReceiveMessagesAsync: {ex.ToString()}"); }
            finally
            {
                SafeConsoleLog("BrokerClientService: ReceiveMessagesAsync loop ended.");
                if (!_isDisposed && !token.IsCancellationRequested && !_userRequestedDisconnect)
                {
                    CleanupCurrentConnectionOnly("Receive loop ended or connection lost");
                    Disconnected?.Invoke("Receive loop ended or connection lost.");
                }
            }
        }
        
        private void CleanupCurrentConnectionOnly(string reason)
        {
            SafeConsoleLog($"BrokerClientService: Cleaning up CURRENT connection resources. Reason: {reason}");
            lock(_sendLock) { try { _streamWriter?.Dispose(); } catch {} _streamWriter = null; }
            try { _streamReader?.Dispose(); } catch {} _streamReader = null;
            try { _networkStream?.Dispose(); } catch {} _networkStream = null;
            try { _tcpClient?.Close(); } catch {} _tcpClient = null;
            SafeConsoleLog("BrokerClientService: Current connection resources released.");
        }

        public async Task SendMessageAsync(BrokerMessage message)
        {
            if (!IsConnected || _streamWriter == null || _isDisposed || (_mainCts != null && _mainCts.IsCancellationRequested))
            { SafeConsoleLog($"Cannot send. Invalid state. Type: {message.Type}"); return; }

            string messageJson = "";
            try
            {
                messageJson = JsonConvert.SerializeObject(message);
                bool sentSuccessfully = false;
                lock (_sendLock)
                {
                    if (IsConnected && _streamWriter != null && !_isDisposed && (_mainCts == null || !_mainCts.IsCancellationRequested))
                    { 
                        _streamWriter.WriteLine(messageJson); // 동기 쓰기
                        // .NET 4.5에는 WriteLineAsync(string)이 없음. FlushAsync()는 있음.
                        // await _streamWriter.FlushAsync(); // AutoFlush = true 이므로 필요 없을 수 있음
                        sentSuccessfully = true;
                    }
                }
                if (sentSuccessfully) { SafeConsoleLog($"Msg sent: {message.Type}, CorrId: {message.CorrelationId}");}
                else { SafeConsoleLog($"[WARN] Send cancelled or not possible for {message.Type} inside lock."); }
            }
            catch (ObjectDisposedException) { SafeConsoleLog($"[WARN] Send {message.Type} on disposed object."); HandleSendErrorInternal("Stream/Writer disposed."); }
            catch (IOException ioEx) { SafeConsoleLog($"[ERROR] IOException sending {message.Type}: {ioEx.Message}"); HandleSendErrorInternal($"IO Error: {ioEx.Message}"); }
            catch (JsonException jsonEx) { SafeConsoleLog($"[ERROR] Error serializing {message.Type}: {jsonEx.Message}."); }
            catch (Exception ex) { SafeConsoleLog($"[ERROR] Error sending {message.Type}: {ex.ToString()}"); HandleSendErrorInternal($"General Send Error: {ex.Message}"); }
        }
        
        private void HandleSendErrorInternal(string reason)
        {
            if (!_isDisposed) { CleanupCurrentConnectionOnly($"Send Error: {reason}"); Disconnected?.Invoke($"Send failed: {reason}"); }
        }

        public async Task DisconnectAsync(bool initiatedByUser = true)
        {
            SafeConsoleLog($"BrokerClientService: DisconnectAsync called. User: {initiatedByUser}");
            if (_isDisposed) return;
            if (initiatedByUser) _userRequestedDisconnect = true; 
            
            // 현재 연결만 끊고, 메인 루프(_mainCts)는 계속 돌면서 재연결을 시도하지 않도록 함 (_userRequestedDisconnect 플래그)
            // 현재 활성 _receiveLoopTask만 정리 시도
            Task currentReceiveLoop = _receiveLoopTask;
            CleanupCurrentConnectionOnly(initiatedByUser ? "User requested disconnect" : "System requested disconnect"); 
            Disconnected?.Invoke(initiatedByUser ? "User requested disconnect" : "System requested disconnect"); 

            if (currentReceiveLoop != null && !currentReceiveLoop.IsCompleted) { try { await Task.WhenAny(currentReceiveLoop, Task.Delay(200)); } catch {}}
        }

        public void Dispose()
        {
            if (_isDisposed) return; _isDisposed = true;
            SafeConsoleLog("BrokerClientService: Disposing...");
            _userRequestedDisconnect = true; // Dispose는 명시적 종료

            _mainCts?.Cancel(); // 모든 루프 종료 요청
            
            Task mainLoop = _connectionMaintenanceTask; 
            Task receiveLoop = _receiveLoopTask;

            List<Task> tasksToWait = new List<Task>();
            if (mainLoop != null && !mainLoop.IsCompleted) tasksToWait.Add(mainLoop);
            if (receiveLoop != null && !receiveLoop.IsCompleted) tasksToWait.Add(receiveLoop);

            if (tasksToWait.Any())
            {
                SafeConsoleLog($"BrokerClientService: Waiting for {tasksToWait.Count} background task(s) on Dispose...");
                try { Task.WaitAll(tasksToWait.ToArray(), TimeSpan.FromSeconds(1)); } 
                catch (AggregateException ae) { foreach(var exLoop in ae.Flatten().InnerExceptions) if(!(exLoop is OperationCanceledException)) SafeConsoleLog($"Error waiting task on dispose: {exLoop.Message}"); }
                catch (OperationCanceledException) { SafeConsoleLog("Tasks cancelled during dispose wait.");}
                catch (Exception ex) { SafeConsoleLog($"Error waiting tasks on dispose: {ex.Message}");}
            }
            
            CleanupCurrentConnectionOnly("Dispose called"); // 현재 연결 리소스 정리
            
            _mainCts?.Dispose(); _mainCts = null; // 메인 CancellationTokenSource 정리
            
            SafeConsoleLog("BrokerClientService: Disposed.");
            GC.SuppressFinalize(this);
        }
        private void SafeConsoleLog(string message) => Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] {message}");
    }
}