안녕하세요. JSP 사이트에서 일정 시간 동안 활동이 없으면 세션이 만료되어 잠기는 현상을 방지하는 방법을 쉬운 순서대로, 그리고 각 방법의 장단점을 포함하여 알려드리겠습니다.

크게 일반 사용자가 자신의 브라우저에서 할 수 있는 방법과 웹사이트 개발자/관리자가 서버에서 직접 조치하는 방법으로 나뉩니다.

👩‍💻 일반 사용자가 시도할 수 있는 방법 (클라이언트 측)
서버 설정에 접근할 수 없는 일반 사용자가 임시방편으로 사용할 수 있는 방법입니다.

1. 브라우저 확장 프로그램 사용 (가장 쉬움)
가장 간단한 방법으로, 특정 시간마다 페이지를 자동으로 새로고침해주는 브라우저 확장 프로그램을 설치하는 것입니다.

방법:

사용 중인 브라우저(크롬, 파이어폭스 등)의 웹 스토어에 접속합니다.

'Auto Refresh', 'Tab Reloader' 등으로 검색하여 원하는 확장 프로그램을 설치합니다.

세션을 유지하고 싶은 JSP 페이지를 열고, 확장 프로그램 아이콘을 클릭하여 세션 만료 시간보다 짧은 간격(예: 5분, 10분)으로 새로고침을 설정합니다.

장점: 매우 간단하며 코딩 지식이 전혀 필요 없습니다.

단점: 페이지 전체가 새로고침되므로, 입력 중이던 내용이 있다면 사라질 수 있습니다. 불필요한 트래픽이 계속 발생합니다.

2. 브라우저 개발자 도구에서 스크립트 실행
약간의 지식이 필요하지만, 확장 프로그램 설치 없이 일회성으로 세션을 유지할 수 있습니다.

방법:

세션을 유지할 페이지에서 F12 키를 눌러 개발자 도구를 엽니다.

Console(콘솔) 탭으로 이동합니다.

아래 코드를 복사하여 붙여넣고 Enter 키를 누릅니다. 10분(600,000 밀리초)마다 페이지를 새로고침합니다.

JavaScript

// 10분(600000ms)마다 페이지를 자동으로 새로고침하여 세션을 유지합니다.
setInterval(function() {
    location.reload();
}, 600000);
장점: 별도의 프로그램 설치가 필요 없습니다.

단점: 페이지를 이동하거나 탭을 닫으면 스크립트 실행이 중지됩니다. 위 방법과 마찬가지로 페이지 전체가 새로고침됩니다.

🛠️ 웹 개발자/관리자가 해결하는 방법 (서버 측)
웹 애플리케이션의 소스 코드나 서버 설정에 접근할 수 있는 경우, 더 근본적이고 효율적인 해결이 가능합니다.

1. web.xml 파일에서 세션 유효 시간 설정 (가장 일반적인 방법)
웹 애플리케이션의 전역적인 세션 유효 시간을 설정하는 가장 표준적인 방법입니다.

방법:

프로젝트의 WEB-INF 폴더 안에 있는 web.xml 파일을 엽니다.

아래와 같이 <session-config> 태그를 추가하거나 수정합니다.

XML

<web-app ...>

    <session-config>
        <session-timeout>60</session-timeout>
    </session-config>

</web-app>
설명: <session-timeout>에 입력하는 숫자는 분(minute) 단위입니다. 0 또는 음수 값을 설정하면 세션이 만료되지 않지만, 메모리 누수와 보안 문제(세션 하이재킹 등)를 유발할 수 있으므로 절대 권장하지 않습니다.

장점: 코드 수정 없이 설정 파일 변경만으로 애플리케이션 전체에 일괄 적용됩니다.

단점: 너무 길게 설정하면 서버의 메모리 사용량이 늘어날 수 있습니다.

2. JSP/Servlet 코드에서 프로그래밍적으로 시간 설정
특정 페이지나 특정 조건에서만 세션 시간을 다르게 적용하고 싶을 때 사용합니다.

방법: 세션이 생성되는 시점의 JSP 파일이나 Servlet 클래스에 아래 코드를 추가합니다.

Java

<%
  // 세션 객체를 가져옵니다.
  HttpSession sess = request.getSession();

  // 세션 유효 시간을 초 단위로 설정합니다. (예: 3600초 = 1시간)
  sess.setMaxInactiveInterval(3600);
%>
설명: setMaxInactiveInterval() 메소드의 인자는 초(second) 단위입니다. web.xml 설정보다 우선적으로 적용됩니다.

장점: 특정 사용자나 기능에 따라 유동적으로 세션 시간을 제어할 수 있습니다.

단점: 여러 곳에서 설정하면 관리가 복잡해질 수 있습니다.

3. AJAX를 이용한 세션 연장 (가장 세련된 방법) ✨
사용자 경험을 해치지 않으면서 세션을 안전하게 유지하는 가장 권장되는 방법입니다. 사용자가 모르는 사이에 백그라운드에서 서버와 통신하여 세션을 갱신합니다.

방법:

(클라이언트 측 Javascript) 주기적으로 서버에 신호를 보내는 JavaScript 코드를 작성합니다. 이 코드는 모든 페이지에 포함되거나, 공통 레이아웃 파일에 추가합니다.

JavaScript

// 5분(300000ms)마다 서버의 특정 URL에 요청을 보내 세션을 갱신합니다.
setInterval(function() {
    fetch('/프로젝트경로/api/keep-alive') // 실제 프로젝트 경로에 맞춰 수정하세요.
        .then(response => {
            if (response.ok) {
                console.log("Session has been successfully extended.");
            }
        });
}, 300000);
(서버 측 keep-alive.jsp 또는 Servlet) 위 JavaScript가 호출할 간단한 JSP 파일이나 서블릿을 만듭니다. 이 파일은 아무런 작업을 할 필요가 없습니다. 요청을 받는 것 자체가 세션 만료 시간을 초기화하기 때문입니다.

Java

<%-- /api/keep-alive.jsp --%>
<%
  // 이 페이지에 접근하는 것만으로 세션 시간이 연장됩니다.
  // 클라이언트에게 성공적으로 응답했음을 알립니다.
  response.setStatus(HttpServletResponse.SC_OK);
%>
장점:

페이지 새로고침이 없어 사용자 경험을 전혀 해치지 않습니다.

최소한의 데이터만 주고받아 효율적입니다.

사용자가 실제로 페이지를 보고 있을 때만 세션이 유지되므로 안전합니다.

단점: 클라이언트와 서버 양쪽에 코드를 작성해야 하므로 구현이 가장 복잡합니다.

한눈에 보는 방법 비교
방법	대상	장점	단점
브라우저 확장 프로그램	일반 사용자	매우 쉬움, 코딩 불필요	페이지 전체 새로고침, 입력 데이터 소실 위험
콘솔 스크립트	일반 사용자	프로그램 설치 불필요	일회성, 탭/페이지 이동 시 중지됨
web.xml 설정	개발자/관리자	전체 적용, 표준적인 방법	과도한 시간 설정 시 서버 부하 및 보안 문제
JSP/Servlet 코딩	개발자/관리자	유연한 시간 제어 가능	코드 관리 복잡성 증가