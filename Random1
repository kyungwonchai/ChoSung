요청하신 대로 첫 번째 탭 페이지를 대시보드로 설계하여 각 기능(라우터 설비 로그 수집, PLC 중계, 병합 OI 중계)의 최근 동작 시간과 에러 발생 여부를 시각적으로 표시하고, 해당 항목을 클릭하면 각 기능의 탭으로 이동할 수 있도록 수정하겠습니다.

주요 변경 사항
대시보드 개념: 첫 번째 탭에 각 기능의 상태를 보여주는 램프(전구) 형태의 UI 추가.
탭 이동 기능: 각 상태 표시 항목을 클릭하면 해당 기능의 탭으로 이동.
파일 수정: MainWindow.xaml과 MainWindow.xaml.cs 파일을 수정해야 합니다.
수정할 파일 및 전체 코드
1. MainWindow.xaml 수정
이 파일은 UI 요소를 정의합니다. 각 기능의 상태를 시각적으로 표시하고, 클릭 시 탭으로 이동하도록 이벤트를 설정합니다.

xml
코드 복사
<Window x:Class="RouterFlowSync.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="RouterFlowSync" Height="600" Width="800">
    <Grid>
        <!-- 대시보드 영역 -->
        <StackPanel Orientation="Vertical" Height="100" Background="Lavender">
            <!-- 제목 영역 -->
            <TextBlock Text="라우터병합OI미들웨어 대시보드" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" Margin="10"/>

            <!-- 대시보드 상태 표시 영역 -->
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!-- 라우터 설비 로그 수집 상태 표시 -->
                <StackPanel Grid.Column="0" Margin="10" MouseDown="RouterLog_Click">
                    <!-- 전구 형태의 상태 표시 -->
                    <Ellipse Fill="{Binding IsRouterLogRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                    <TextBlock Text="라우터 설비 로그" FontWeight="Bold"/>
                    <!-- 최근 동작 시간 표시 -->
                    <TextBlock Text="{Binding LastRouterLogTime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                </StackPanel>

                <!-- PLC 중계 상태 표시 -->
                <StackPanel Grid.Column="1" Margin="10" MouseDown="PLCRelay_Click">
                    <!-- 전구 형태의 상태 표시 -->
                    <Ellipse Fill="{Binding IsPLCRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                    <TextBlock Text="PLC 중계" FontWeight="Bold"/>
                    <!-- 최근 동작 시간 표시 -->
                    <TextBlock Text="{Binding LastPLCTime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                </StackPanel>

                <!-- 병합 OI 중계 상태 표시 -->
                <StackPanel Grid.Column="2" Margin="10" MouseDown="OICombine_Click">
                    <!-- 전구 형태의 상태 표시 -->
                    <Ellipse Fill="{Binding IsOIRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                    <TextBlock Text="병합 OI 중계" FontWeight="Bold"/>
                    <!-- 최근 동작 시간 표시 -->
                    <TextBlock Text="{Binding LastOITime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                </StackPanel>
            </Grid>
        </StackPanel>

        <!-- 탭 컨트롤 영역 -->
        <TabControl Name="MainTabControl" Margin="10" VerticalAlignment="Top">
            <!-- 라우터 설비 로그 수집 탭 -->
            <TabItem Header="라우터 설비 로그 수집">
                <!-- 탭 내용 -->
            </TabItem>

            <!-- PLC 중계 탭 -->
            <TabItem Header="PLC 중계">
                <!-- 탭 내용 -->
            </TabItem>

            <!-- 병합 OI 중계 탭 -->
            <TabItem Header="병합 OI 중계">
                <!-- 탭 내용 -->
            </TabItem>

            <!-- 설정 탭 -->
            <TabItem Header="설정">
                <!-- 탭 내용 -->
            </TabItem>
        </TabControl>
    </Grid>
</Window>
주요 설명:
Ellipse와 TextBlock: 각 기능의 상태를 시각적으로 표시하는 전구 형태의 도형과 텍스트입니다. MouseDown 이벤트를 사용하여 클릭 시 해당 기능의 탭으로 이동합니다.
Data Binding: IsRouterLogRunning, IsPLCRunning, IsOIRunning, LastRouterLogTime, LastPLCTime, LastOITime 등의 속성을 바인딩하여 UI와 ViewModel을 연결합니다.
TabControl: 네 개의 탭이 정의되어 있으며, 사용자가 각 기능에 대한 상세 정보를 확인할 수 있습니다.
2. MainWindow.xaml.cs 수정
이 파일은 XAML에서 정의한 UI 요소의 이벤트 처리를 담당합니다. 각 램프(전구) 클릭 시 탭을 전환하는 로직을 추가해야 합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;  // MSSQL 연결을 위한 네임스페이스
using System.IO;
using System.IO.Ports;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;  // 트레이 아이콘을 위한 네임스페이스
using RouterFlowSync.Services;
using RouterFlowSync.ViewModels;
using Microsoft.AspNet.SignalR.Client;  // SignalR 클라이언트를 위한 네임스페이스
using System.Windows.Media;

namespace RouterFlowSync.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;  // ViewModel 인스턴스
        private NotifyIcon _notifyIcon;  // 트레이 아이콘 관리 객체
        private string _connectionString = "Data Source=YOUR_SERVER_NAME;Initial Catalog=YOUR_DATABASE_NAME;Integrated Security=True";  // 데이터베이스 연결 문자열
        private HubConnection _signalRConnection;  // SignalR 서버 연결 객체
        private IHubProxy _hubProxy;  // SignalR 허브 프록시 객체

        public MainWindow()
        {
            InitializeComponent();  // XAML 요소 초기화
            _viewModel = new MainViewModel();  // ViewModel 초기화
            DataContext = _viewModel;  // ViewModel을 DataContext로 설정
            SetupTrayIcon();  // 트레이 아이콘 설정
            LoadSettings();  // 설정 불러오기

            // 프로그램 시작 시 상태를 "Running"으로 설정하고 데이터베이스에 기록
            UpdateDatabaseStatus("Running", "Application started successfully");
            StartStatusCheckTimer();  // 상태 확인 타이머 시작
        }

        // 대시보드에서 라우터 설비 로그 섹션 클릭 시 호출되는 메서드
        private void RouterLog_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 라우터 설비 로그 수집 탭으로 전환
            MainTabControl.SelectedIndex = 0;
        }

        // 대시보드에서 PLC 중계 섹션 클릭 시 호출되는 메서드
        private void PLCRelay_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 PLC 중계 탭으로 전환
            MainTabControl.SelectedIndex = 1;
        }

        // 대시보드에서 병합 OI 중계 섹션 클릭 시 호출되는 메서드
        private void OICombine_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 병합 OI 중계 탭으로 전환
            MainTabControl.SelectedIndex = 2;
        }

        // 트레이 아이콘 설정 메서드
        private void SetupTrayIcon()
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = new System.Drawing.Icon("appicon.ico"),  // 아이콘 설정
                Visible = true  // 트레이 아이콘 표시
            };
            _notifyIcon.DoubleClick += (s, e) => ShowWindow();  // 더블 클릭 시 메인 윈도우 표시

            // 트레이 아이콘의 컨텍스트 메뉴 설정
            var contextMenu = new ContextMenu();
            contextMenu.MenuItems.Add("Open", (s, e) => ShowWindow());
            contextMenu.MenuItems.Add("Exit", (s, e) => CloseApplication());
            _notifyIcon.ContextMenu = contextMenu;
        }

        // 메인 윈도우를 표시하는 메서드
        private void ShowWindow()
        {
            this.Show();
            this.WindowState = WindowState.Normal;  // 윈도우 상태를 정상으로 변경
        }

        // 프로그램 종료 메서드
        private void CloseApplication()
        {
            UpdateDatabaseStatus("Stopped", "Application closed by user");  // 데이터베이스에 종료 기록
            _notifyIcon.Dispose();  // 트레이 아이콘 해제
            Application.Current.Shutdown();  // 애플리케이션 종료
        }

        // 데이터베이스 상태 업데이트 메서드
        private void UpdateDatabaseStatus(string status, string message)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(_connectionString))  // 데이터베이스 연결
                {
                    conn.Open();  // 연결 열기
                    string query = "INSERT INTO RouterFlowSyncStatus (Status, Message) VALUES (@Status, @Message)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))  // SQL 명령 설정
                    {
                        cmd.Parameters.AddWithValue("@Status", status);  // 상태 매개변수 추가
                        cmd.Parameters.AddWithValue("@Message", message);  // 메시지 매개변수 추가
                        cmd.ExecuteNonQuery();  // 쿼리 실행
                    }
                }
            }
            catch (Exception ex)
            {
                HandleError($"Database update failed: {ex.Message}");  // 예외 처리
            }
        }

        // 설정을 불러오는 메서드
        private void LoadSettings()
        {
            // SignalR 설정 로드
            if (SettingsManager.Instance.GetSetting("UseSignalR") == "true")
            {
                InitializeSignalR(SettingsManager.Instance.GetSetting("SignalRServerUrl"));  // SignalR 초기화
            }

            // 에러 로그를 데이터베이스에 기록할지 여부 설정
            if (SettingsManager.Instance.GetSetting("LogErrorsToDatabase") == "true")
            {
                _viewModel.LogErrorsToDatabase = true;  // 설정 반영
            }
        }

        // SignalR 서버 초기화 메서드
        private void InitializeSignalR(string serverUrl)
        {
            try
            {
                _signalRConnection = new HubConnection(serverUrl);  // SignalR 서버 연결 설정
                _hubProxy = _signalRConnection.CreateHubProxy("ErrorHub");  // 허브 프록시 생성
                _signalRConnection.Start().Wait();  // SignalR 서버 시작

                LogService.Instance.LogOperation("Connected to SignalR server successfully");  // 연결 성공 로그 기록
            }
            catch (Exception ex)
            {
                HandleError($"Failed to connect to SignalR server: {ex.Message}");  // 연결 실패 예외 처리
            }
        }

        // 에러 처리 메서드
        private void HandleError(string errorMessage)
        {
            LogService.Instance.LogError(errorMessage);  // 에러 로그 기록
            SetUIErrorState(true);  // UI를 에러 상태로 변경

            // 에러 로그를 데이터베이스에 기록할지 여부 확인
            if (_viewModel.LogErrorsToDatabase)
            {
                UpdateDatabaseStatus("Error", errorMessage);  // 데이터베이스에 에러 로그 기록
            }

            // SignalR 연결이 활성화된 경우 에러 전송
            if (_signalRConnection != null && _signalRConnection.State == ConnectionState.Connected)
            {
                _hubProxy.Invoke("SendError", errorMessage);  // SignalR 서버로 에러 전송
            }
        }

        // UI 에러 상태 설정 메서드
        private void SetUIErrorState(bool isError)
        {
            if (isError)
            {
                this.BorderBrush = Brushes.Red;  // UI 테두리를 빨간색으로 변경
                LogListBox.Foreground = Brushes.Red;  // 로그 리스트박스의 글씨를 빨간색으로 변경
            }
            else
            {
                this.BorderBrush = Brushes.Gray;  // UI 테두리를 기본 색상으로 변경
                LogListBox.Foreground = Brushes.Black;  // 로그 리스트박스의 글씨를 기본 색상으로 변경
            }
        }

        // 포트 갱신 버튼 클릭 이벤트 핸들러
        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshAvailablePorts();  // 사용 가능한 포트 갱신
        }

        // PLC 설정 저장 버튼 클릭 이벤트 핸들러
        private void SavePLCSettings_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SavePLCSettings();  // PLC 설정 저장
        }

        // OI 설정 저장 버튼 클릭 이벤트 핸들러
        private void SaveOISettings_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SaveOISettings();  // OI 설정 저장
        }

        // 로그 폴더 열기 버튼 클릭 이벤트 핸들러
        private void OpenLogFolder_Click(object sender, RoutedEventArgs e)
        {
            string logFolderPath = "C:\\Agent\\RouterFlowSync\\Log";  // 로그 폴더 경로 설정
            if (Directory.Exists(logFolderPath))  // 로그 폴더가 존재하는지 확인
            {
                System.Diagnostics.Process.Start("explorer.exe", logFolderPath);  // 탐색기에서 로그 폴더 열기
            }
            else
            {
                MessageBox.Show("로그 폴더가 존재하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);  // 오류 메시지 표시
            }
        }

        // 윈도우 닫기 버튼 클릭 이벤트 핸들러
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;  // 닫기 동작 취소
            this.Hide();  // 윈도우 숨기기
        }

        // 상태 확인 타이머 시작
        private void StartStatusCheckTimer()
        {
            var timer = new System.Windows.Threading.DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(5);  // 5초마다 상태 체크
            timer.Tick += (s, e) => CheckSystemStatus();
            timer.Start();
        }

        // 시스템 상태 확인 메서드
        private void CheckSystemStatus()
        {
            _viewModel.IsRunning = true;  // 시스템이 정상적으로 실행 중임을 가정

            // PLC 또는 OI 연결 상태가 비정상인 경우
            if (!_viewModel.IsPLCConnected || !_viewModel.IsOIConnected)
            {
                _viewModel.CheckList.Clear();  // 기존 점검 목록 초기화

                // PLC 연결 상태가 비정상인 경우 점검 항목 추가
                if (!_viewModel.IsPLCConnected)
                {
                    _viewModel.CheckList.Add("PLC 연결 상태를 확인하세요.");
                }

                // OI 연결 상태가 비정상인 경우 점검 항목 추가
                if (!_viewModel.IsOIConnected)
                {
                    _viewModel.CheckList.Add("OI 연결 상태를 확인하세요.");
                }

                _viewModel.IsRunning = false;  // 동작 상태를 비정상으로 표시
                HandleError("PLC 또는 OI 연결이 끊어졌습니다.");  // 에러 처리
            }
        }
    }
}
주요 설명:
새로운 Click 이벤트 핸들러 추가: 각 램프(전구) 클릭 시 탭을 전환하는 메서드를 추가했습니다. RouterLog_Click, PLCRelay_Click, OICombine_Click 이벤트 핸들러가 이를 처리합니다.
기타 기본 기능 유지: 기존의 기능(트레이 아이콘 설정, 데이터베이스 업데이트, 에러 처리 등)을 유지하고 있습니다.
응용 예제
UI 요소와 ViewModel 바인딩
대시보드 램프 상태:

MainViewModel에서 상태 속성(IsRouterLogRunning, IsPLCRunning, IsOIRunning)을 정의하고, UI에서 이를 바인딩합니다.
예: XAML에서 <Ellipse Fill="{Binding IsRouterLogRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
상태 전환과 이벤트 핸들러:

각 기능의 상태를 클릭하면 해당 기능의 탭으로 전환합니다.
예: C#에서 private void RouterLog_Click(object sender, System.Windows.Input.MouseButtonEventArgs e) { MainTabControl.SelectedIndex = 0; }
이러한 변경 사항을 통해 대시보드 개념을 구현하고, 사용자에게 각 기능의 상태를 시각적으로 쉽게 전달할 수 있습니다. 또한, 클릭 시 각 기능의 탭으로 전환되므로 사용자 경험을 향상시킵니다.

추가적인 질문이나 요청이 있으시면 언제든지 말씀해 주