이런, TypeError: unsupported operand type(s) for ...: 'ModelMetaclass' and 'type' 와 같은 오류가 발생하셨군요. 이 오류는 보통 파이썬에서 서로 호환되지 않는 두 가지 타입의 객체에 대해 어떤 연산(예: 덧셈, 비교 등)을 시도할 때 발생합니다. 특히 ModelMetaclass라는 키워드가 나오는 것으로 보아, Hugging Face Transformers 라이브러리 같은 곳에서 모델을 로드하거나 다룰 때 모델 클래스 자체와 다른 어떤 타입 간의 문제일 가능성이 큽니다.

이 문제를 해결하려면 몇 가지 정보가 더 필요합니다. 하지만 우선 몇 가지 일반적인 원인과 점검 사항을 알려드릴게요.

오류의 일반적인 원인:

모델 로딩 문제: --embedding-dir에 지정된 경로의 모델을 불러오는 과정에서 문제가 생겨, 예상치 못한 타입의 객체가 생성되었을 수 있습니다.
라이브러리 버전 충돌: transformers, torch, sentence-transformers 등 관련 라이브러리들 간의 버전이 맞지 않아 내부적으로 타입 오류가 발생할 수 있습니다.
잘못된 인자 전달: parrot_chain 코드 내부에서 모델 클래스나 설정 객체를 잘못된 방식으로 함수에 전달했을 수 있습니다.
경로 문제: --embedding-dir에 지정한 경로가 잘못되었거나, 해당 경로에 모델 파일이 제대로 존재하지 않을 수 있습니다.
문제 해결을 위해 다음 정보를 알려주시면 더 정확한 진단이 가능합니다:

전체 오류 메시지 (Full Traceback): 에러 메시지의 가장 윗부분부터 맨 아래까지 전체 내용을 복사해서 알려주세요. 어느 파일의 몇 번째 줄에서 오류가 시작되었는지 알 수 있어 매우 중요합니다.
실행한 정확한 명령어: 오류가 발생했을 때 터미널에 입력했던 python3 -m parrot_chain generate-text-db ... 명령어 전체를 알려주세요. 모든 옵션과 경로를 포함해야 합니다.
Python 및 주요 라이브러리 버전:
Python 버전: 터미널에서 python --version 실행 결과
주요 라이브러리 버전: 가상환경이 활성화된 상태에서 pip list 또는 pip freeze 실행 결과 중 transformers, torch, sentence-transformers, parrot-chain (만약 pip로 설치했다면) 등의 버전을 알려주세요.
--embedding-dir 경로의 내용:
--embedding-dir embedding_model/multi-qa-MiniLM-L6-cos-V1 라고 지정하셨는데, 이 embedding_model/multi-qa-MiniLM-L6-cos-V1 폴더 안에 어떤 파일들이 들어있는지 알려주실 수 있나요? (예: config.json, pytorch_model.bin, tokenizer.json 등이 있는지)
이 경로는 명령어를 실행하는 위치(현재 터미널의 디렉토리)를 기준으로 한 상대 경로인가요, 아니면 절대 경로인가요?
우선 시도해 볼 수 있는 점검 사항:

--embedding-dir 경로 확인:

명령어에 입력한 --embedding-dir의 경로가 정확한지, 오타는 없는지 다시 한번 확인해주세요.
해당 경로에 multi-qa-MiniLM-L6-cos-V1 모델 파일들이 실제로 존재하는지 확인합니다. (보통 config.json, pytorch_model.bin, tokenizer_config.json, tokenizer.json 또는 vocab.txt 등의 파일이 있어야 합니다.)
만약 embedding_model/multi-qa-MiniLM-L6-cos-V1이 상대 경로라면, 명령어를 실행하는 현재 작업 디렉토리에서 해당 경로가 올바른지 확인합니다. (예: parrot_chain-main 폴더 안에서 실행 중이고, 그 안에 embedding_model 폴더가 있는지)
가상 환경 확인: parrot_chain을 설치하고 실행하는 데 필요한 모든 라이브러리가 설치된 올바른 가상 환경에서 명령어를 실행하고 있는지 확인해주세요.

parrot_chain 문서 확인: 혹시 parrot_chain 프로젝트의 README.md 파일이나 다른 문서에 특정 버전의 라이브러리를 사용해야 한다거나, 모델을 특정 방식으로 배치해야 한다는 안내가 있는지 확인해보세요.

명령어 단순화 테스트 (가능하다면): 만약 parrot_chain이 다른 임베딩 모델 지정 방식을 지원한다면 (예: Hugging Face 모델 이름을 직접 지정), 잠시 다른 방식으로 테스트해볼 수 있지만, 현재로서는 경로 문제일 가능성을 먼저 점검하는 것이 좋습니다.