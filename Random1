import pandas as pd
import joblib
from Levenshtein import distance

def load_model(model_file, vectorizer_file):
    # 모델 로드
    similarity_matrix = joblib.load(model_file)
    vectorizer = joblib.load(vectorizer_file)

    return similarity_matrix, vectorizer

def find_similar_parts(input_text, similarity_matrix, vectorizer, parts_data):
    # 입력된 텍스트와 각 부품코드의 유사도 계산
    input_vector = vectorizer.transform([input_text])
    similarity_scores = cosine_similarity(input_vector, similarity_matrix).flatten()

    # 유사도가 가장 높은 순서대로 정렬하여 상위 10개 부품코드 추출
    top_indices = similarity_scores.argsort()[:-11:-1]
    similar_parts = parts_data[top_indices]

    # Levenshtein 거리를 계산하여 가장 유사한 순서로 정렬
    similarity_scores = [distance(input_text, part) for part in similar_parts]
    similar_parts_with_distance = sorted(zip(similarity_scores, similar_parts))

    return similar_parts_with_distance

# 저장된 모델과 데이터 로드
similarity_matrix, vectorizer = load_model('model.pkl', 'vectorizer.pkl')
parts_data = pd.read_csv('부품코드.csv')['부품코드'].values

# 사용자 입력 받기
input_text = input("부품코드를 입력하세요: ")

# 유사한 부품코드 검색
similar_parts = find_similar_parts(input_text, similarity_matrix, vectorizer, parts_data)

# 결과 출력
for distance, part in similar_parts:
    print(f'{part}: {distance}')
