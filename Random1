구사항을 반영하여 다음과 같이 수정했습니다:

ipname 컬럼은 CSV 파일에 없으며, 프로그램에서 추가합니다.
헤더(첫 행)는 무시하며, 데이터는 2행부터 처리합니다.
CSV 파일의 4열이 숫자(정수 또는 실수)가 아닌 경우 해당 행은 업로드하지 않습니다.
컬럼 매핑은 순서대로 처리하며, InspectionTime, ModelName, ... 순서로 데이터를 인식합니다.
다음은 수정된 전체 코드입니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="RouterVisionInspGather.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Router Vision Inspection Gather" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 작업 시작 버튼 -->
        <Button Content="작업 시작" Grid.Row="0" Margin="10" Click="StartButton_Click"/>

        <!-- 상태 메시지를 표시하는 ListBox -->
        <ListBox x:Name="StatusListBox" Grid.Row="1" Margin="10"/>

        <!-- 하단 상태 텍스트 -->
        <TextBlock Text="작업 상태 메시지:" Grid.Row="2" Margin="10" VerticalAlignment="Center"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private DateTime _lastUploadedTime; // 마지막 업로드된 InspectionTime

        public MainWindow()
        {
            InitializeComponent();

            // DB에서 IP 리스트 가져오기
            _ipAddresses = GetIpAddressesFromDatabase();
            StatusListBox.Items.Add($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

            // 마지막 업로드된 InspectionTime 가져오기
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 업로드된 시간: {_lastUploadedTime}");
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
            var ipList = new List<string>();

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                    }
                }
            }

            return ipList;
        }

        /// <summary>
        /// 데이터베이스에서 마지막 업로드된 InspectionTime 가져오기
        /// </summary>
        private DateTime GetLastUploadedTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    // 결과값이 없을 경우 1년 전 시간 반환
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }

        /// <summary>
        /// 작업 시작 버튼 클릭 이벤트
        /// </summary>
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                StatusListBox.Items.Add("작업 시작 중...");
                await StartProcessingAsync();
                StatusListBox.Items.Add("작업 완료");
            }
            catch (Exception ex)
            {
                StatusListBox.Items.Add($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                StatusListBox.Items.Add($"IP {ip} 처리 중...");

                // 해당 IP에 대한 파일 처리
                var processor = new FileProcessor(_lastUploadedTime, ip);
                var newRows = processor.GetNewRows($@"\\{ip}\Result");

                if (newRows.Any())
                {
                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(newRows);

                    StatusListBox.Items.Add($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");
                }
                else
                {
                    StatusListBox.Items.Add($"IP {ip}: 새로운 데이터 없음.");
                }
            }

            // 마지막 업로드된 시간 갱신
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastUploadedTime;
        private readonly string _ipAddress;

        public FileProcessor(DateTime lastUploadedTime, string ipAddress)
        {
            _lastUploadedTime = lastUploadedTime;
            _ipAddress = ipAddress;
        }

        /// <summary>
        /// 새로운 데이터 행 가져오기
        /// </summary>
        public List<Dictionary<string, object>> GetNewRows(string rootPath)
        {
            var newRows = new List<Dictionary<string, object>>();
            var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

            foreach (var file in csvFiles)
            {
                using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                {
                    reader.ReadLine(); // 첫 번째 행(헤더) 무시
                    while (!reader.EndOfStream)
                    {
                        var values = reader.ReadLine()?.Split(',');
                        if (values == null || values.Length < 4) continue;

                        // 4열이 숫자(정수 또는 실수)가 아니면 제외
                        if (!decimal.TryParse(values[3], out _)) continue;

                        var row = new Dictionary<string, object>
                        {
                            ["InspectionTime"] = DateTime.Parse(values[0]),
                            ["ModelName"] = values[1],
                            ["AlignResult"] = values[2],
                            ["MP1DATA"] = float.Parse(values[3]),
                            ["MP1RESULT"] = values[4],
                            ["MP2DATA"] = float.Parse(values[5]),
                            ["MP2RESULT"] = values[6],
                            ["MP3DATA"] = float.Parse(values[7]),
                            ["MP3RESULT"] = values[8],
                            ["MP4DATA"] = float.Parse(values[9]),
                            ["MP4RESULT"] = values[10],
                            ["ipname"] = _ipAddress // 현재 IP 추가
                        };

                        // InspectionTime 조건 검사
                        if ((DateTime)row["InspectionTime"] > _lastUploadedTime)
                        {
                            newRows.Add(row);
                        }
                    }
                }
            }

            return newRows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]);
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
                        command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);
                        command.Parameters.AddWithValue("@MP2DATA", row["MP2DATA"]);
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"]);
                        command.Parameters.AddWithValue("@MP3DATA", row["MP3DATA"]);
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"]);
                        command.Parameters.AddWithValue("@MP4DATA", row["MP4DATA"]);
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"]);
                        command.Parameters.AddWithValue("@ipname", row["ipname"]);

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
MSSQL 테이블 생성
IP 테이블
sql
코드 복사
CREATE TABLE IpTable (
    IPAddress NVARCHAR(50) NOT NULL PRIMARY KEY
);
데이터 테이블
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName)
);
변경사항 요약
헤더 무시: CSV의 첫 번째 행(헤더)은 무시하고 2행부터 처리.
4열 검증: 4열이 숫자가 아닌 경우 해당 행 제외.
ipname 추가: 데이터베이스 업로드 시 IP 정보를 함께 저장.
필요한 경우 데이터베이스 연결 문자열을 수정하여 사용하세요.






나의 말:
get new row할때 지금 그 컬럼값이 뭔지 한행으로 debug에 찍어주ㅗ도록해줘 그 함수만 수정해서줘 뭔가 오류가 나는데 좀 잡으려고
ChatGPT의 말:
ChatGPT
다음은 GetNewRows 함수에 디버깅용 출력을 추가한 수정된 코드입니다. 각 행의 컬럼 값을 Debug.WriteLine으로 출력하도록 수정했습니다.

수정된 GetNewRows 함수
csharp
코드 복사
using System.Diagnostics;

public List<Dictionary<string, object>> GetNewRows(string rootPath)
{
    var newRows = new List<Dictionary<string, object>>();
    var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

    foreach (var file in csvFiles)
    {
        using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
        {
            reader.ReadLine(); // 첫 번째 행(헤더) 무시
            while (!reader.EndOfStream)
            {
                var values = reader.ReadLine()?.Split(',');
                if (values == null || values.Length < 4) continue;

                // 디버그 출력: 현재 처리 중인 행의 값을 출력
                Debug.WriteLine($"Processing Row: {string.Join(", ", values)}");

                // 4열이 숫자(정수 또는 실수)가 아니면 제외
                if (!decimal.TryParse(values[3], out _))
                {
                    Debug.WriteLine("Skipped Row: 4th column is not a valid number.");
                    continue;
                }

                var row = new Dictionary<string, object>
                {
                    ["InspectionTime"] = DateTime.Parse(values[0]),
                    ["ModelName"] = values[1],
                    ["AlignResult"] = values[2],
                    ["MP1DATA"] = float.Parse(values[3]),
                    ["MP1RESULT"] = values[4],
                    ["MP2DATA"] = float.Parse(values[5]),
                    ["MP2RESULT"] = values[6],
                    ["MP3DATA"] = float.Parse(values[7]),
                    ["MP3RESULT"] = values[8],
                    ["MP4DATA"] = float.Parse(values[9]),
                    ["MP4RESULT"] = values[10],
                    ["ipname"] = _ipAddress // 현재 IP 추가
                };

                // InspectionTime 조건 검사
                if ((DateTime)row["InspectionTime"] > _lastUploadedTime)
                {
                    Debug.WriteLine("Added Row: Passed all checks.");
                    newRows.Add(row);
                }
                else
                {
                    Debug.WriteLine("Skipped Row: InspectionTime is not newer than the last uploaded time.");
                }
            }
        }
    }

    return newRows;
}
추가된 디버깅 기능
현재 처리 중인 행 출력:

각 행의 값을 Debug.WriteLine으로 출력: Processing Row: ...
스킵된 이유 출력:

4열이 숫자가 아닌 경우: Skipped Row: 4th column is not a valid number.
InspectionTime이 이미 처리된 시간보다 이전인 경우: Skipped Row: InspectionTime is not newer than the last uploaded time.
추가된 행 출력:

모든 조건을 통과한 경우: Added Row: Passed all checks.
디버그 출력 예시
plaintext
코드 복사
Processing Row: 2025-01-10 10:00:00, ModelA, Good, 123.45, Result1, 67.89, Result2, 45.67, Result3, 89.01, Result4
Added Row: Passed all checks.
Processing Row: 2025-01-10 09:00:00, ModelB, Good, N/A, Result1, 67.89, Result2, 45.67, Result3, 89.01, Result4
Skipped Row: 4th column is not a valid number.
디버깅 활용
출력 확인:

Visual Studio 디버그 창에서 출력 내용을 확인합니다.
문제 있는 행을 분석할 수 있습니다.
행 처리 단계별 확인:
