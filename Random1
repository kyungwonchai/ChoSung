xpress의 WPF GridControl에서 ALT 키를 누를 때 선택된 행의 테두리 색을 핑크색으로 굵게 변경하고, ALT 키를 떼면 원래대로 돌아가게 하는 로직을 구현하겠습니다. 여기서는 Style과 Trigger를 사용해 보겠습니다.

단계별 구현 방법
XAML에 스타일 정의하기: 선택된 행에 적용할 스타일을 XAML 파일에 정의합니다.
이벤트 핸들러 구현: ALT 키의 상태를 감지하여 스타일을 변경합니다.
예제 코드
xml
Copy code
<!-- MainWindow.xaml -->
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl">
            <dxg:GridControl.View>
                <dxg:TableView x:Name="tableView" AutoWidth="True">
                    <dxg:TableView.RowStyle>
                        <Style TargetType="dxg:GridRowContent">
                            <Setter Property="BorderBrush" Value="Transparent"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=IsAltKeyPressed}" Value="True">
                                    <Setter Property="BorderBrush" Value="Pink"/>
                                    <Setter Property="BorderThickness" Value="2"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </dxg:TableView.RowStyle>
                </dxg:TableView>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
csharp
Copy code
// MainWindow.xaml.cs
public partial class MainWindow : Window {
    public static readonly DependencyProperty IsAltKeyPressedProperty =
        DependencyProperty.Register("IsAltKeyPressed", typeof(bool), typeof(MainWindow), new PropertyMetadata(false));

    public bool IsAltKeyPressed {
        get { return (bool)GetValue(IsAltKeyPressedProperty); }
        set { SetValue(IsAltKeyPressedProperty, value); }
    }

    public MainWindow() {
        InitializeComponent();
        DataContext = this;
        this.PreviewKeyDown += MainWindow_PreviewKeyDown;
        this.PreviewKeyUp += MainWindow_PreviewKeyUp;
    }

    private void MainWindow_PreviewKeyDown(object sender, KeyEventArgs e) {
        if (e.Key == Key.LeftAlt || e.Key == Key.RightAlt) {
            IsAltKeyPressed = true;
        }
    }

    private void MainWindow_PreviewKeyUp(object sender, KeyEventArgs e) {
        if (e.Key == Key.LeftAlt || e.Key == Key.RightAlt) {
            IsAltKeyPressed = false;
        }
    }
}
설명
XAML 스타일: GridRowContent에 대한 스타일을 정의하여 테두리 색을 Transparent로 설정합니다. ALT 키가 눌릴 때 DataTrigger를 사용하여 테두리를 핑크색으로 굵게 변경합니다.
이벤트 핸들러: PreviewKeyDown과 PreviewKeyUp 이벤트를 사용하여 ALT 키가 눌렸는지 여부를 감지하고, 해당 상태를 IsAltKeyPressed 속성을 통해 관리합니다.
위 코드를 자신의 환경에 맞게 조정하여 사용할 수 있습니다. 게시한 코드는 기본적인 구현을 위한 것이므로, 추가적인 세부 설정이 필요할 수 있습니