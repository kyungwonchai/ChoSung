// MGSPMonitorControl/ViewModels/MainViewModel.cs

// ... (다른 코드는 그대로) ...

        #region Broker Event Handlers
        private void OnBrokerConnected()
        {
            SafeRunOnUi(() => { BrokerConnectionStatus = "Connected"; SafeAddUiLog("Successfully connected to Broker Service."); RefreshAllCommandStates(); });
            if (_brokerClientService == null) return;
            Task.Run(async () => {
                string uiIdentifier = UiUserIdentifier;
                if (_brokerClientService != null)
                {
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiClientHello, SourceId = uiIdentifier });
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = uiIdentifier });
                }
            });
        }

        // !!! 시그니처 수정 !!!
        private void OnBrokerDisconnected(string reason) // string reason 파라미터 추가
        {
             SafeRunOnUi(() => {
                BrokerConnectionStatus = "Disconnected"; 
                SafeAddUiLog($"Disconnected from Broker Service: {reason}. Check Broker. Auto-retry may be active."); // reason 사용
                foreach(var agent in Agents) { agent.IsOnline = false; agent.CurrentMonitorStatus = "Offline (Broker D/C)"; }
                RefreshAllCommandStates();
             });
        }

        // MessageReceived 핸들러는 BrokerMessage 파라미터를 받으므로 시그니처 문제 없을 것임
        private void OnBrokerMessageReceived(BrokerMessage message) 
        {
            // ... (이전과 동일한 내용) ...
        }
        #endregion

        public void Cleanup() 
        {
            if (_isCleanupDone) return;
            _isCleanupDone = true;
            SafeAddUiLog("MainViewModel is cleaning up resources...");
            if (_brokerClientService != null)
            {
                // 이벤트 구독 해제
                _brokerClientService.Connected -= OnBrokerConnected;
                _brokerClientService.Disconnected -= OnBrokerDisconnected; // 이제 시그니처가 맞아야 함
                _brokerClientService.MessageReceived -= OnBrokerMessageReceived;
                
                try 
                { 
                    // 애플리케이션 종료 시에는 UI 스레드가 아닐 수 있으므로 Task.Run으로 감싸고 짧게만 기다림
                    Task.Run(async () => await _brokerClientService.DisconnectAsync()).Wait(TimeSpan.FromMilliseconds(500));  
                } 
                catch (Exception ex) { SafeAddUiLog($"Error during broker disconnect on cleanup: {ex.Message}");}

                (_brokerClientService as IDisposable)?.Dispose();
            }
            SafeAddUiLog("MainViewModel cleanup finished.");
        }

        public void Dispose() 
        {
            Cleanup();
            GC.SuppressFinalize(this);
        }

        // ... (나머지 메서드들은 이전과 동일) ...
    }
}