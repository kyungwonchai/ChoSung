
import React from 'react';
import type { LabelElement, ElementType } from '../App';

interface SettingsPanelProps {
  selectedElement: LabelElement | null;
  onUpdateElement: (id: string, newProps: Partial<LabelElement>) => void;
  onDeleteElement: (id: string) => void;
  printSettings: { width: number; height: number };
  onUpdatePrintSettings: (newSettings: Partial<{ width: number; height: number }>) => void;
  onSaveLayout: () => void;
  onLoadLayout: () => void;
  onSaveToDb: () => void;
  onLoadFromDb: () => void;
}

const PropertyInput: React.FC<{ label: string; name: string; value: string | number; onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => void; type?: string, suffix?: string, rows?: number, min?: number, placeholder?: string, disabled?: boolean }> = 
  ({ label, name, value, onChange, type = 'text', suffix, rows, min = 1, placeholder, disabled = false }) => (
  <div>
    <label htmlFor={name} className="block text-xs font-medium text-slate-600 mb-1">{label}</label>
    <div className="flex items-center">
      { type === 'textarea' ? (
        <textarea
            id={name}
            name={name}
            value={value}
            onChange={onChange}
            rows={rows}
            placeholder={placeholder}
            disabled={disabled}
            className="mt-1 block w-full px-3 py-1.5 text-sm border-slate-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md shadow-sm disabled:bg-slate-50 disabled:text-slate-500"
        />
      ) : (
        <input
            type={type}
            id={name}
            name={name}
            value={value}
            onChange={onChange}
            min={min}
            placeholder={placeholder}
            disabled={disabled}
            className="mt-1 block w-full px-3 py-1.5 text-sm border-slate-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md shadow-sm disabled:bg-slate-50 disabled:text-slate-500"
        />
      )}
      {suffix && <span className="ml-2 text-sm text-slate-500">{suffix}</span>}
    </div>
  </div>
);

const ColorInput: React.FC<{ label: string; name: string; value: string; onChange: (e: React.ChangeEvent<HTMLInputElement>) => void; }> =
    ({ label, name, value, onChange }) => (
    <div>
        <label htmlFor={name} className="block text-xs font-medium text-slate-600 mb-1">{label}</label>
        <div className="flex items-center gap-2">
             <input
                type="color"
                id={`${name}-picker`}
                name={name}
                value={value}
                onChange={onChange}
                className="h-9 w-10 p-1 border-slate-300 rounded-md shadow-sm cursor-pointer"
            />
            <input
                type="text"
                id={name}
                value={value}
                onChange={onChange}
                name={name}
                className="block w-full px-3 py-1.5 text-sm border-slate-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 rounded-md shadow-sm"
            />
        </div>
    </div>
);


const SettingsPanel: React.FC<SettingsPanelProps> = ({ 
    selectedElement, onUpdateElement, onDeleteElement, 
    printSettings, onUpdatePrintSettings,
    onSaveLayout, onLoadLayout,
    onSaveToDb, onLoadFromDb
 }) => {

  const handleElementChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!selectedElement) return;
    const { name, value, type } = e.target as HTMLInputElement;
    const newValue = type === 'number' ? (Number(value) || 0) : value;
    onUpdateElement(selectedElement.id, { [name]: newValue });
  };

  const handlePrintSettingsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    const numericValue = Number(value) || 0;
    onUpdatePrintSettings({ [name]: numericValue });
  };
  
  const renderNoSelectionPanel = () => (
    <aside className="w-72 bg-white shadow-lg flex-shrink-0 p-4 print:hidden space-y-6 overflow-y-auto">
      <div>
        <h3 className="text-base font-semibold text-slate-800 border-b pb-2 mb-3">
            Print Area Settings
        </h3>
        <div className="space-y-4">
            <PropertyInput label="Width" name="width" type="number" value={printSettings.width} onChange={handlePrintSettingsChange} suffix="px" min={50} />
            <PropertyInput label="Height" name="height" type="number" value={printSettings.height} onChange={handlePrintSettingsChange} suffix="px" min={50} />
        </div>
      </div>
      <div className="space-y-6">
        <h3 className="text-base font-semibold text-slate-800 border-b pb-2 mb-3">
            Data Management
        </h3>
        
        {/* Browser Storage Section */}
        <div className="p-3 bg-slate-50 rounded-lg border">
            <h4 className="text-sm font-semibold text-slate-700 mb-2">Browser Storage</h4>
            <p className="text-xs text-slate-500 mb-3">
                Quickly save or load all layouts to this browser. Good for temporary work.
            </p>
            <div className="flex items-center gap-2">
                <button onClick={onSaveLayout} className="w-full px-3 py-2 text-xs font-semibold bg-slate-600 text-white rounded-lg shadow-sm hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-500">
                    Save to Browser
                </button>
                <button onClick={onLoadLayout} className="w-full px-3 py-2 text-xs font-semibold bg-slate-200 text-slate-800 rounded-lg shadow-sm hover:bg-slate-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-slate-400">
                    Load from Browser
                </button>
            </div>
        </div>

        {/* Database Section */}
        <div className="p-3 bg-blue-50 rounded-lg border border-blue-200">
            <h4 className="text-sm font-semibold text-blue-800 mb-2">Database (via Backend)</h4>
            <p className="text-xs text-blue-600 mb-3">
                Permanently store layouts by communicating with the backend server.
            </p>
            <div className="flex items-center gap-2 pt-2">
                 <button onClick={onSaveToDb} className="w-full px-4 py-2 text-sm font-semibold bg-blue-600 text-white rounded-lg shadow-sm hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                    Save to DB
                 </button>
                 <button onClick={onLoadFromDb} className="w-full px-4 py-2 text-sm font-semibold bg-blue-200 text-blue-800 rounded-lg shadow-sm hover:bg-blue-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400 transition-colors">
                    Load from DB
                 </button>
            </div>
        </div>
      </div>
      <div className="text-center text-sm text-slate-500 pt-6 px-4">
          <p>Select an element on the canvas to edit its properties.</p>
      </div>
    </aside>
  );

  if (!selectedElement) {
    return renderNoSelectionPanel();
  }
  
  const typeNameMap: Record<ElementType, string> = {
    'label': 'Label',
    'textbox': 'Textbox',
    'line': 'Line',
    'rectangle': 'Rectangle',
    'relative-time': 'Relative Time'
  }

  return (
    <aside className="w-72 bg-white shadow-lg flex-shrink-0 overflow-y-auto print:hidden p-4 space-y-6">
      <div>
        <h3 className="text-base font-semibold text-slate-800 border-b pb-2 mb-3">
            {typeNameMap[selectedElement.type]} Properties
        </h3>
        <div className="space-y-4">
            { (selectedElement.type === 'label' || selectedElement.type === 'textbox') && (
              <>
                <PropertyInput label="Content" name="content" type="textarea" value={selectedElement.content} onChange={handleElementChange} rows={3} />
                <PropertyInput label="Font Size" name="fontSize" type="number" value={selectedElement.fontSize} onChange={handleElementChange} suffix="px" />
                <ColorInput label="Text Color" name="color" value={selectedElement.color} onChange={handleElementChange} />
              </>
            )}

            { selectedElement.type === 'relative-time' && (
                 <>
                    <PropertyInput label="Hours Ago" name="hoursAgo" type="number" value={selectedElement.hoursAgo || 0} onChange={handleElementChange} suffix="hr" min={0}/>
                    <PropertyInput label="Font Size" name="fontSize" type="number" value={selectedElement.fontSize} onChange={handleElementChange} suffix="px" />
                    <ColorInput label="Text Color" name="color" value={selectedElement.color} onChange={handleElementChange} />
                 </>
            )}

            { selectedElement.type === 'line' && (
              <>
                <PropertyInput label="Width" name="width" type="number" value={selectedElement.width} onChange={handleElementChange} suffix="px" />
                <PropertyInput label="Thickness" name="height" type="number" value={selectedElement.height} onChange={handleElementChange} suffix="px" />
                <ColorInput label="Color" name="backgroundColor" value={selectedElement.backgroundColor} onChange={handleElementChange} />
              </>
            )}

            { (selectedElement.type === 'textbox' || selectedElement.type === 'rectangle' || selectedElement.type === 'relative-time') && (
                 <>
                    <ColorInput label="Background Color" name="backgroundColor" value={selectedElement.backgroundColor} onChange={handleElementChange} />
                    <PropertyInput label="Border Width" name="borderWidth" type="number" value={selectedElement.borderWidth} onChange={handleElementChange} suffix="px" min={0} />
                    <ColorInput label="Border Color" name="borderColor" value={selectedElement.borderColor} onChange={handleElementChange} />
                 </>
            )}
             { selectedElement.type === 'label' && (
                 <ColorInput label="Background Color" name="backgroundColor" value={selectedElement.backgroundColor} onChange={handleElementChange} />
             )}
            
            <button
                onClick={() => onDeleteElement(selectedElement.id)}
                className="w-full mt-4 px-4 py-2 bg-red-600 text-white text-sm font-semibold rounded-lg shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors"
              >
                Delete Element
            </button>
        </div>
      </div>
    </aside>
  );
};
