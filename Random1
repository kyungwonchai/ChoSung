죄송합니다. 문제가 해결되지 않은 것에 대해 사과드리며, 다른 접근 방식을 제안드리겠습니다. DriverManager 방식이 동작하지 않는 경우, 다른 방법을 시도해볼 수 있습니다. 이 경우, HikariCP라는 커넥션 풀링 라이브러리를 사용하거나, JDBC URL 대신 MySQL Connector/J의 DataSource 기능을 활용하는 방법이 있습니다.

HikariCP를 이용한 MySQL 연결
HikariCP는 성능이 뛰어난 커넥션 풀 라이브러리입니다. 이를 사용하여 MySQL에 연결하는 방법을 시도해 보겠습니다.

1. Gradle 의존성 추가
build.gradle 파일에 HikariCP와 MySQL 커넥터 의존성을 추가합니다.

gradle
코드 복사
dependencies {
    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'mysql:mysql-connector-java:8.0.28'
}
2. HikariCP를 사용한 MySQL 연결 코드
아래는 HikariCP를 사용하여 MySQL에 연결하는 예제 코드입니다.

kotlin
코드 복사
import com.zaxxer.hikari.HikariConfig
import com.zaxxer.hikari.HikariDataSource
import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Statement

private fun createDataSource(): HikariDataSource {
    val config = HikariConfig().apply {
        jdbcUrl = "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC"
        username = "abc"
        password = "1233445"
        driverClassName = "com.mysql.cj.jdbc.Driver"
        maximumPoolSize = 10 // 최대 커넥션 풀 크기
    }
    return HikariDataSource(config)
}

private fun checkModelInMySQL(qrCode: String): String? {
    var connection: Connection? = null
    var statement: Statement? = null
    var resultSet: ResultSet? = null
    var result: String? = null

    try {
        val dataSource = createDataSource()
        connection = dataSource.connection

        statement = connection.createStatement()
        resultSet = statement.executeQuery("SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = '$qrCode'")

        if (resultSet.next()) {
            val district = resultSet.getString("district")
            val at = resultSet.getString("at")
            val modelnumber = resultSet.getString("modelnumber")
            result = "District: $district, At: $at, Model: $modelnumber"
        }

    } catch (e: SQLException) {
        e.printStackTrace()
        result = "SQL error: ${e.message}"
    } finally {
        try {
            resultSet?.close()
            statement?.close()
            connection?.close()
        } catch (e: SQLException) {
            e.printStackTrace()
        }
    }

    return result
}
3. 주요 포인트
HikariCP 설정:

HikariConfig 클래스를 사용해 데이터베이스 연결 설정을 구성합니다.
jdbcUrl, username, password를 설정하고, 최대 커넥션 풀 크기를 설정합니다.
예외 처리:

SQLException 예외를 처리하고, 문제가 발생할 경우 스택 트레이스와 함께 구체적인 오류 메시지를 출력합니다.
자원 정리:

모든 데이터베이스 리소스(ResultSet, Statement, Connection)를 사용 후 반드시 닫습니다.
결론
이 방법을 사용하여 MySQL 서버에 연결을 시도해보시기 바랍니다. HikariCP는 신뢰성이 높은 커넥션 풀 라이브러리로, 대부분의 환경에서 안정적인 연결을 제공합니다. 이 코드가 여러분의 문제를 해결하는 데 도움이 되기를 바랍니다.

다시 한 번 불편을 끼쳐드려 죄송합니다. 추가적인 문제가 발생하면 언제든지 말씀해 주세