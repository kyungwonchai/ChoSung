1. DatabaseScript.sql
sql
코드 복사
-- DatabaseScript.sql
-- 이 스크립트는 MS SQL Server 2014에서 LockerManagementDB 데이터베이스 및
-- LockerAssignments, MasterSelections, ChangeLogs 테이블을 생성합니다.
-- LockerAssignments 테이블은 사물함 배정 정보를 저장하며, 추가 컬럼(전배복직, 내용, 특이사항, 비고)도 포함합니다.
-- MasterSelections 테이블은 관리 항목(관리항목, 층, 구역, 소파트, 관리자)의 선택 항목들을 저장합니다.
-- ChangeLogs 테이블은 모든 추가, 수정, 삭제 작업의 로그를 기록합니다.

-- 1) 데이터베이스 생성 (존재하지 않으면)
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'LockerManagementDB')
BEGIN
    CREATE DATABASE LockerManagementDB;
END
GO

-- 생성된 데이터베이스 사용
USE LockerManagementDB;
GO

-- 2) LockerAssignments 테이블 생성
IF OBJECT_ID('dbo.LockerAssignments', 'U') IS NOT NULL
    DROP TABLE dbo.LockerAssignments;
GO

CREATE TABLE LockerAssignments (
    Id INT PRIMARY KEY IDENTITY(1,1),             -- 고유 식별자 (자동 증가)
    LockerType NVARCHAR(50) NOT NULL,             -- 관리 항목 (예: '개인사물함', '락커', '신발장')
    Floor NVARCHAR(10) NOT NULL,                  -- 층 (예: 'B1', '1', '2', '3', '4')
    Zone NVARCHAR(50) NOT NULL,                   -- 구역 (예: 'A'~'H', 'B1'~'B4', '기타')
    SpecificLocation NVARCHAR(100) NOT NULL,      -- 세부 위치 (수기입력)
    UserName NVARCHAR(100) NULL,                  -- 사용자 성명 (수기입력)
    KnoxId NVARCHAR(100) NULL,                    -- Knox ID (수기입력)
    SubPart NVARCHAR(50) NULL,                    -- 소파트 (예: 'Main(시생산)', 'MainA'~'MainZ')
    Administrator NVARCHAR(100) NULL,             -- 관리자 (예: '홍길동A'~'홍길동X')
    전배복직 NVARCHAR(100) NULL,                   -- 추가 컬럼: 전배복직
    내용 NVARCHAR(MAX) NULL,                      -- 추가 컬럼: 내용
    특이사항 NVARCHAR(MAX) NULL,                  -- 추가 컬럼: 특이사항
    비고 NVARCHAR(MAX) NULL,                      -- 추가 컬럼: 비고
    LastUpdated DATETIME2 NOT NULL DEFAULT GETDATE()  -- 마지막 수정일시 (변경 추적)
);
GO

-- 초기 데이터 삽입 (옵션)
INSERT INTO LockerAssignments (LockerType, Floor, Zone, SpecificLocation, Administrator, LastUpdated)
VALUES
('개인사물함', '1', 'A', 'A-01', 'System', GETDATE()),
('개인사물함', '1', 'A', 'A-02', 'System', GETDATE()),
('락커', 'B1', 'B1', 'R-B1-01', 'System', GETDATE()),
('신발장', '2', '2F', 'S-2F-01', 'System', GETDATE());

INSERT INTO LockerAssignments (LockerType, Floor, Zone, SpecificLocation, UserName, KnoxId, SubPart, Administrator, LastUpdated)
VALUES
('개인사물함', '1', 'B', 'B-15', '김철수', 'kimcs', 'MainA', '홍길동A', GETDATE());
GO

-- 인덱스 생성 (검색 성능 향상)
CREATE INDEX IX_LockerAssignments_Location ON dbo.LockerAssignments (Floor, Zone, SpecificLocation);
CREATE INDEX IX_LockerAssignments_User ON dbo.LockerAssignments (UserName);
GO

-- 3) MasterSelections 테이블 생성 (관리 항목 등 선택 목록 저장)
IF OBJECT_ID('dbo.MasterSelections', 'U') IS NOT NULL
    DROP TABLE dbo.MasterSelections;
GO

CREATE TABLE MasterSelections (
    Id INT PRIMARY KEY IDENTITY(1,1),              -- 고유 식별자
    Category NVARCHAR(50) NOT NULL,                -- 카테고리 (예: 'LockerType', 'Floor', 'Zone', 'SubPart', 'Administrator')
    Value NVARCHAR(50) NOT NULL                    -- 선택 항목 값
);
GO

-- 초기 MasterSelections 데이터 삽입 (예시)
INSERT INTO MasterSelections (Category, Value) VALUES
('LockerType', '개인사물함'),
('LockerType', '락커'),
('LockerType', '신발장'),
('Floor', 'B1'),
('Floor', '1'),
('Floor', '2'),
('Floor', '3'),
('Floor', '4'),
('Zone', 'A'),
('Zone', 'B'),
('Zone', 'C'),
('Zone', 'D'),
('Zone', 'E'),
('Zone', 'F'),
('Zone', 'G'),
('Zone', 'H'),
('Zone', 'B1'),
('Zone', 'B2'),
('Zone', 'B3'),
('Zone', 'B4'),
('Zone', '기타'),
('SubPart', 'Main(시생산)'),
('SubPart', 'MainA'),
('SubPart', 'MainB'),
('SubPart', 'MainC'),
('SubPart', 'MainD'),
('Administrator', '홍길동A'),
('Administrator', '홍길동B'),
('Administrator', '홍길동C');
GO

-- 4) ChangeLogs 테이블 생성 (모든 작업 로그 기록)
IF OBJECT_ID('dbo.ChangeLogs', 'U') IS NOT NULL
    DROP TABLE dbo.ChangeLogs;
GO

CREATE TABLE ChangeLogs (
    Id INT PRIMARY KEY IDENTITY(1,1),             -- 고유 식별자
    LogTime DATETIME2 NOT NULL DEFAULT GETDATE(), -- 로그 발생 시간
    Operation NVARCHAR(50) NOT NULL,              -- 작업 유형 (예: 추가, 수정, 삭제)
    UserName NVARCHAR(100) NULL,                  -- 작업자
    Description NVARCHAR(MAX) NOT NULL            -- 작업 설명
);
GO

PRINT '데이터베이스 및 테이블 생성이 완료되었습니다.';
2. App.config
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<!-- App.config: 애플리케이션 구성 파일 (연결 문자열 및 EF 설정 포함) -->
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>

  <connectionStrings>
    <!-- 서버명 및 데이터베이스명을 실제 환경에 맞게 수정 -->
    <add name="LockerDbConnection"
         connectionString="Server=YOUR_SERVER_NAME;Database=LockerManagementDB;Trusted_Connection=True;"
         providerName="System.Data.SqlClient"/>
  </connectionStrings>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
  </startup>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" />
      </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>
3. Models/LockerAssignment.cs
csharp
코드 복사
using System;
using System.Collections.Generic; // EqualityComparer 사용
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 사물함 배정 정보를 나타내는 데이터 모델 클래스 (추가 컬럼 포함)
    /// INotifyPropertyChanged를 구현하여 속성 변경 시 UI가 자동 갱신됩니다.
    /// </summary>
    [Table("LockerAssignments")]
    public class LockerAssignment : INotifyPropertyChanged
    {
        // 내부 필드 선언
        private int _id;
        private string _lockerType = string.Empty;
        private string _floor = string.Empty;
        private string _zone = string.Empty;
        private string _specificLocation = string.Empty;
        private string _userName;
        private string _knoxId;
        private string _subPart;
        private string _administrator;
        private string _전배복직;
        private string _내용;
        private string _특이사항;
        private string _비고;
        private DateTime _lastUpdated = DateTime.Now;

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id
        {
            get => _id;
            set => SetProperty(ref _id, value);
        }

        [Required(ErrorMessage = "사물함 종류는 필수 항목입니다.")]
        [StringLength(50)]
        public string LockerType
        {
            get => _lockerType;
            set => SetProperty(ref _lockerType, value);
        }

        [Required(ErrorMessage = "층 정보는 필수 항목입니다.")]
        [StringLength(10)]
        public string Floor
        {
            get => _floor;
            set => SetProperty(ref _floor, value);
        }

        [Required(ErrorMessage = "구역 정보는 필수 항목입니다.")]
        [StringLength(50)]
        public string Zone
        {
            get => _zone;
            set => SetProperty(ref _zone, value);
        }

        [Required(ErrorMessage = "세부 위치는 필수 항목입니다.")]
        [StringLength(100)]
        public string SpecificLocation
        {
            get => _specificLocation;
            set => SetProperty(ref _specificLocation, value);
        }

        [StringLength(100)]
        public string UserName
        {
            get => _userName;
            set
            {
                if (SetProperty(ref _userName, value))
                    OnPropertyChanged(nameof(IsAssigned));
            }
        }

        [StringLength(100)]
        public string KnoxId
        {
            get => _knoxId;
            set => SetProperty(ref _knoxId, value);
        }

        [StringLength(50)]
        public string SubPart
        {
            get => _subPart;
            set => SetProperty(ref _subPart, value);
        }

        [StringLength(100)]
        public string Administrator
        {
            get => _administrator;
            set => SetProperty(ref _administrator, value);
        }

        // 추가 컬럼들
        [StringLength(100)]
        public string 전배복직
        {
            get => _전배복직;
            set => SetProperty(ref _전배복직, value);
        }

        public string 내용
        {
            get => _내용;
            set => SetProperty(ref _내용, value);
        }

        public string 특이사항
        {
            get => _특이사항;
            set => SetProperty(ref _특이사항, value);
        }

        public string 비고
        {
            get => _비고;
            set => SetProperty(ref _비고, value);
        }

        public DateTime LastUpdated
        {
            get => _lastUpdated;
            set => SetProperty(ref _lastUpdated, value);
        }

        [NotMapped]
        public bool IsAssigned => !string.IsNullOrWhiteSpace(UserName);

        public override string ToString()
        {
            return $"{Floor}-{Zone}-{SpecificLocation}: {(IsAssigned ? UserName : "(비어 있음)")}";
        }

        // INotifyPropertyChanged 구현
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName]string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName]string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value))
                return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}
4. Models/MasterSelection.cs
csharp
코드 복사
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 마스터 선택 항목 정보를 나타내는 데이터 모델 클래스
    /// 관리항목, 층, 구역, 소파트, 관리자를 포함하여 선택 가능한 값을 저장합니다.
    /// </summary>
    [Table("MasterSelections")]
    public class MasterSelection
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        [Required(ErrorMessage = "카테고리는 필수 항목입니다.")]
        [StringLength(50)]
        public string Category { get; set; }

        [Required(ErrorMessage = "값은 필수 항목입니다.")]
        [StringLength(50)]
        public string Value { get; set; }
    }
}
5. Models/ChangeLog.cs
csharp
코드 복사
using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 시스템 로그 정보를 기록하는 데이터 모델 클래스
    /// 모든 추가/수정/삭제 작업의 로그를 ChangeLogs 테이블에 저장합니다.
    /// </summary>
    [Table("ChangeLogs")]
    public class ChangeLog
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        // 로그가 발생한 시간 (자동 설정)
        public DateTime LogTime { get; set; } = DateTime.Now;

        [Required(ErrorMessage = "작업 유형은 필수 항목입니다.")]
        [StringLength(50)]
        public string Operation { get; set; }  // 예: "추가", "수정", "삭제"

        [StringLength(100)]
        public string UserName { get; set; }

        [Required(ErrorMessage = "설명은 필수 항목입니다.")]
        public string Description { get; set; }
    }
}
6. Data/LockerDbContext.cs
csharp
코드 복사
using LockerManagementApp.Models;
using System;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;

namespace LockerManagementApp.Data
{
    /// <summary>
    /// Entity Framework 6 DbContext 클래스
    /// LockerAssignments, MasterSelections, ChangeLogs 테이블을 관리합니다.
    /// </summary>
    public class LockerDbContext : DbContext
    {
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<MasterSelection> MasterSelections { get; set; }
        public DbSet<ChangeLog> ChangeLogs { get; set; }

        public LockerDbContext() : base("name=LockerDbConnection")
        {
            // App.config의 연결 문자열을 사용
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
        }

        public override int SaveChanges()
        {
            UpdateTimestamps();
            return base.SaveChanges();
        }

        public override Task<int> SaveChangesAsync()
        {
            UpdateTimestamps();
            return base.SaveChangesAsync();
        }

        /// <summary>
        /// 추가 혹은 수정된 LockerAssignment 엔티티의 LastUpdated 값을 현재 시간으로 업데이트합니다.
        /// </summary>
        private void UpdateTimestamps()
        {
            var entries = ChangeTracker.Entries<LockerAssignment>()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

            foreach (var entry in entries)
                entry.Entity.LastUpdated = DateTime.Now;
        }

        /// <summary>
        /// 로그를 기록하는 헬퍼 메서드
        /// </summary>
        public void AddChangeLog(string operation, string userName, string description)
        {
            ChangeLogs.Add(new ChangeLog {
                Operation = operation,
                UserName = userName,
                Description = description,
                LogTime = DateTime.Now
            });
        }
    }
}
7. Infrastructure/ViewModelBase.cs
csharp
코드 복사
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Infrastructure
{
    /// <summary>
    /// 모든 ViewModel의 기본 클래스 (INotifyPropertyChanged 구현)
    /// </summary>
    public abstract class ViewModelBase : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName]string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName]string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value))
                return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}
8. Infrastructure/RelayCommand.cs
csharp
코드 복사
using System;
using System.Windows.Input;

namespace LockerManagementApp.Infrastructure
{
    /// <summary>
    /// RelayCommand 클래스: ICommand 인터페이스 구현체로, 커맨드 실행 및 활성화 여부를 제어합니다.
    /// </summary>
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public event EventHandler CanExecuteChanged
        {
            add    { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);
        public void Execute(object parameter) => _execute(parameter);
        public void RaiseCanExecuteChanged() => CommandManager.InvalidateRequerySuggested();
    }
}
9. ViewModels/MainViewModel.cs
csharp
코드 복사
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 사물함 관리 ViewModel
    /// 데이터 로드, 추가, 수정, 삭제 및 작업 로그 기록 기능을 포함합니다.
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A"; // 예제 관리자

        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public string StatusBarText
        {
            get => _statusBarText;
            set => SetProperty(ref _statusBarText, value);
        }

        // 명령들
        public RelayCommand LoadDataCommand { get; }
        public RelayCommand SaveChangesCommand { get; }
        public RelayCommand AddNewCommand { get; }
        public RelayCommand DeleteCommand { get; }
        public RelayCommand ClearAssignmentCommand { get; }

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                MessageBox.Show($"데이터베이스 컨텍스트 생성 오류: {ex}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusBarText = "데이터베이스 연결 오류!";
                return;
            }
            LockerAssignments = new ObservableCollection<LockerAssignment>();

            // 커맨드 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(_ => ClearSelectedAssignment(), _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);

            _ = LoadDataAsync();
        }

        public async Task LoadDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "데이터 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                    .OrderBy(l => l.Floor)
                                    .ThenBy(l => l.Zone)
                                    .ThenBy(l => l.SpecificLocation)
                                    .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개 레코드 로드 완료.";
            }
            catch (Exception ex)
            {
                StatusBarText = $"로드 오류: {ex.Message}";
                MessageBox.Show($"데이터 로드 중 오류 발생: {ex.Message}", "로드 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public async Task SaveChangesAsync()
        {
            if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            try
            {
                var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified)
                    .ToList();

                // 중복 검사 (물리적 위치 중복)
                var duplicates = LockerAssignments.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                                    .Where(g => g.Count() > 1)
                                    .Select(g => $"{g.Key.Floor}-{g.Key.Zone}-{g.Key.SpecificLocation}");
                if (duplicates.Any())
                {
                    MessageBox.Show($"저장 실패: 중복 위치 발견 - {string.Join(", ", duplicates)}", "중복 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    StatusBarText = "중복으로 저장 실패.";
                    RollbackChanges(changedEntries);
                    return;
                }

                // 관리자 정보 업데이트 및 각 작업별 로그 기록
                foreach (var entry in changedEntries)
                {
                    entry.Entity.Administrator = _currentAdmin;
                    if (entry.State == EntityState.Added)
                        _context.AddChangeLog("추가", _currentAdmin, $"새 사물함 추가: {entry.Entity}");
                    else if (entry.State == EntityState.Modified)
                        _context.AddChangeLog("수정", _currentAdmin, $"사물함 수정: {entry.Entity}");
                }

                int count = await _context.SaveChangesAsync();
                StatusBarText = $"총 {count}건 변경 저장 완료.";
            }
            catch (DbUpdateException dbEx)
            {
                string err = dbEx.InnerException?.Message ?? dbEx.Message;
                StatusBarText = $"저장 오류: {err}";
                MessageBox.Show($"저장 중 오류 발생: {err}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged));
            }
            catch (Exception ex)
            {
                StatusBarText = $"저장 오류: {ex.Message}";
                MessageBox.Show($"저장 중 예외 발생: {ex.Message}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged));
            }
        }

        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries)
        {
            if (_context == null) return;
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified:
                        entry.CurrentValues.SetValues(entry.OriginalValues);
                        entry.State = EntityState.Unchanged;
                        break;
                    case EntityState.Added:
                        entry.State = EntityState.Detached;
                        if (entry.Entity is LockerAssignment addEntity)
                            LockerAssignments.Remove(addEntity);
                        break;
                    case EntityState.Deleted:
                        entry.State = EntityState.Unchanged;
                        break;
                }
            }
            StatusBarText = "변경 사항 롤백 완료.";
        }

        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment
            {
                LockerType = "개인사물함",
                Floor = "1",
                Zone = "A",
                SpecificLocation = "새 위치-" + Guid.NewGuid().ToString().Substring(0, 4),
                Administrator = _currentAdmin,
                LastUpdated = DateTime.Now
            };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 세부 정보 입력 후 저장하세요.";
        }

        private async Task DeleteSelectedAsync()
        {
            if (_context == null || SelectedAssignment == null) return;
            if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제하시겠습니까?",
                                "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                try
                {
                    _context.LockerAssignments.Remove(SelectedAssignment);
                    _context.AddChangeLog("삭제", _currentAdmin, $"사물함 삭제: {SelectedAssignment}");
                    int count = await _context.SaveChangesAsync();
                    LockerAssignments.Remove(SelectedAssignment);
                    SelectedAssignment = null;
                    StatusBarText = $"총 {count}건 삭제 완료.";
                }
                catch (DbUpdateException dbEx)
                {
                    string err = dbEx.InnerException?.Message ?? dbEx.Message;
                    StatusBarText = $"삭제 오류: {err}";
                    MessageBox.Show($"삭제 중 오류 발생: {err}", "삭제 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    await LoadDataAsync();
                }
                catch (Exception ex)
                {
                    StatusBarText = $"삭제 오류: {ex.Message}";
                    MessageBox.Show($"삭제 중 예외 발생: {ex.Message}", "삭제 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    await LoadDataAsync();
                }
            }
        }

        private void ClearSelectedAssignment()
        {
            if (_context == null || SelectedAssignment == null) return;
            SelectedAssignment.UserName = null;
            SelectedAssignment.KnoxId = null;
            SelectedAssignment.SubPart = null;
            _context.Entry(SelectedAssignment).State = EntityState.Modified;
            SelectedAssignment.Administrator = _currentAdmin;
            _context.AddChangeLog("수정", _currentAdmin, $"배정 해제: {SelectedAssignment}");
            StatusBarText = $"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 배정 해제됨.";
        }

        #region IDisposable 구현
        private bool disposed = false;
        public void Dispose()
        {
            if (!disposed)
            {
                _context?.Dispose();
                disposed = true;
            }
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}
10. ViewModels/MasterSettingsViewModel.cs
csharp
코드 복사
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 마스터 설정 ViewModel
    /// 관리 항목, 층, 구역, 소파트, 관리자 등의 선택 항목을 추가/수정/삭제하고,
    /// 변경 시 기존 LockerAssignments 레코드의 값도 업데이트할 수 있습니다.
    /// </summary>
    public class MasterSettingsViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<MasterSelection> _masterSelections;
        private MasterSelection _selectedMasterSelection;
        private string _statusMessage = "마스터 설정 준비 완료.";

        public ObservableCollection<MasterSelection> MasterSelections
        {
            get => _masterSelections;
            set => SetProperty(ref _masterSelections, value);
        }

        public MasterSelection SelectedMasterSelection
        {
            get => _selectedMasterSelection;
            set => SetProperty(ref _selectedMasterSelection, value);
        }

        public string StatusMessage
        {
            get => _statusMessage;
            set => SetProperty(ref _statusMessage, value);
        }

        // 명령들
        public RelayCommand LoadMasterSelectionsCommand { get; }
        public RelayCommand SaveMasterSelectionCommand { get; }
        public RelayCommand AddMasterSelectionCommand { get; }
        public RelayCommand DeleteMasterSelectionCommand { get; }
        public RelayCommand UpdateRelatedRecordsCommand { get; }

        public MasterSettingsViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                MessageBox.Show($"DbContext 생성 오류: {ex}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusMessage = "DB 연결 오류";
                return;
            }

            MasterSelections = new ObservableCollection<MasterSelection>();
            LoadMasterSelectionsCommand = new RelayCommand(async _ => await LoadMasterSelectionsAsync());
            SaveMasterSelectionCommand = new RelayCommand(async _ => await SaveMasterSelectionAsync(), _ => SelectedMasterSelection != null);
            AddMasterSelectionCommand = new RelayCommand(async _ => await AddMasterSelectionAsync());
            DeleteMasterSelectionCommand = new RelayCommand(async _ => await DeleteMasterSelectionAsync(), _ => SelectedMasterSelection != null);
            UpdateRelatedRecordsCommand = new RelayCommand(async _ => await UpdateRelatedRecordsAsync(), _ => SelectedMasterSelection != null);

            _ = LoadMasterSelectionsAsync();
        }

        public async Task LoadMasterSelectionsAsync()
        {
            if (_context == null) return;
            try
            {
                var selections = await _context.MasterSelections
                                    .OrderBy(m => m.Category)
                                    .ThenBy(m => m.Value)
                                    .ToListAsync();
                MasterSelections = new ObservableCollection<MasterSelection>(selections);
                StatusMessage = $"총 {MasterSelections.Count}개 로드 완료.";
            }
            catch (Exception ex)
            {
                StatusMessage = $"로드 오류: {ex.Message}";
            }
        }

        public async Task SaveMasterSelectionAsync()
        {
            if (_context == null || SelectedMasterSelection == null) return;
            try
            {
                // 신규 항목이면 Added, 기존이면 Modified 처리
                _context.Entry(SelectedMasterSelection).State = SelectedMasterSelection.Id == 0
                    ? EntityState.Added : EntityState.Modified;
                _context.AddChangeLog("마스터 수정", "관리자", $"마스터 항목 저장: {SelectedMasterSelection.Category} - {SelectedMasterSelection.Value}");
                await _context.SaveChangesAsync();
                StatusMessage = "저장 완료.";
                await LoadMasterSelectionsAsync();
            }
            catch (Exception ex)
            {
                StatusMessage = $"저장 오류: {ex.Message}";
            }
        }

        public async Task AddMasterSelectionAsync()
        {
            if (_context == null) return;
            try
            {
                var newSelection = new MasterSelection { Category = "새 카테고리", Value = "새 값" };
                _context.MasterSelections.Add(newSelection);
                _context.AddChangeLog("마스터 추가", "관리자", $"새 항목 추가: {newSelection.Category} - {newSelection.Value}");
                await _context.SaveChangesAsync();
                MasterSelections.Add(newSelection);
                SelectedMasterSelection = newSelection;
                StatusMessage = "새 항목 추가 완료.";
            }
            catch (Exception ex)
            {
                StatusMessage = $"추가 오류: {ex.Message}";
            }
        }

        public async Task DeleteMasterSelectionAsync()
        {
            if (_context == null || SelectedMasterSelection == null) return;
            try
            {
                _context.MasterSelections.Remove(SelectedMasterSelection);
                _context.AddChangeLog("마스터 삭제", "관리자", $"삭제 항목: {SelectedMasterSelection.Category} - {SelectedMasterSelection.Value}");
                await _context.SaveChangesAsync();
                MasterSelections.Remove(SelectedMasterSelection);
                SelectedMasterSelection = null;
                StatusMessage = "삭제 완료.";
            }
            catch (Exception ex)
            {
                StatusMessage = $"삭제 오류: {ex.Message}";
            }
        }

        /// <summary>
        /// 마스터 항목 변경 시, 기존 LockerAssignments 테이블의 해당 값(예: 소파트, 관리항목 등)을 일괄 업데이트합니다.
        /// </summary>
        public async Task UpdateRelatedRecordsAsync()
        {
            if (_context == null || SelectedMasterSelection == null) return;
            try
            {
                // 각 카테고리별로 해당 값이 같은 레코드를 찾아 업데이트합니다.
                if (SelectedMasterSelection.Category == "SubPart")
                {
                    var records = _context.LockerAssignments.Where(x => x.SubPart == SelectedMasterSelection.Value);
                    foreach (var record in records)
                        record.SubPart = SelectedMasterSelection.Value;
                }
                else if (SelectedMasterSelection.Category == "LockerType")
                {
                    var records = _context.LockerAssignments.Where(x => x.LockerType == SelectedMasterSelection.Value);
                    foreach (var record in records)
                        record.LockerType = SelectedMasterSelection.Value;
                }
                else if (SelectedMasterSelection.Category == "Floor")
                {
                    var records = _context.LockerAssignments.Where(x => x.Floor == SelectedMasterSelection.Value);
                    foreach (var record in records)
                        record.Floor = SelectedMasterSelection.Value;
                }
                else if (SelectedMasterSelection.Category == "Zone")
                {
                    var records = _context.LockerAssignments.Where(x => x.Zone == SelectedMasterSelection.Value);
                    foreach (var record in records)
                        record.Zone = SelectedMasterSelection.Value;
                }
                else if (SelectedMasterSelection.Category == "Administrator")
                {
                    var records = _context.LockerAssignments.Where(x => x.Administrator == SelectedMasterSelection.Value);
                    foreach (var record in records)
                        record.Administrator = SelectedMasterSelection.Value;
                }
                _context.AddChangeLog("마스터 업데이트", "관리자", $"관련 레코드 업데이트: {SelectedMasterSelection.Category} - {SelectedMasterSelection.Value}");
                await _context.SaveChangesAsync();
                StatusMessage = "관련 레코드 업데이트 완료.";
                await LoadMasterSelectionsAsync();
            }
            catch (Exception ex)
            {
                StatusMessage = $"업데이트 오류: {ex.Message}";
            }
        }

        #region IDisposable 구현
        private bool disposed = false;
        public void Dispose()
        {
            if (!disposed)
            {
                _context?.Dispose();
                disposed = true;
            }
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}
11. ViewModels/LogViewModel.cs
csharp
코드 복사
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 로그 보기 ViewModel
    /// ChangeLogs 테이블의 작업 로그를 로드하여 화면에 표시합니다.
    /// </summary>
    public class LogViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<ChangeLog> _logs;
        private string _statusMessage = "로그 로드 준비 완료.";

        public ObservableCollection<ChangeLog> Logs
        {
            get => _logs;
            set => SetProperty(ref _logs, value);
        }

        public string StatusMessage
        {
            get => _statusMessage;
            set => SetProperty(ref _statusMessage, value);
        }

        public RelayCommand LoadLogsCommand { get; }

        public LogViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                MessageBox.Show($"DbContext 생성 오류: {ex}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                StatusMessage = "DB 연결 오류";
                return;
            }
            Logs = new ObservableCollection<ChangeLog>();
            LoadLogsCommand = new RelayCommand(async _ => await LoadLogsAsync());
            _ = LoadLogsAsync();
        }

        public async Task LoadLogsAsync()
        {
            if (_context == null) return;
            try
            {
                var logs = await _context.ChangeLogs.OrderByDescending(l => l.LogTime).ToListAsync();
                Logs = new ObservableCollection<ChangeLog>(logs);
                StatusMessage = $"총 {Logs.Count}건 로드 완료.";
            }
            catch (Exception ex)
            {
                StatusMessage = $"로그 로드 오류: {ex.Message}";
            }
        }

        #region IDisposable 구현
        private bool disposed = false;
        public void Dispose()
        {
            if (!disposed)
            {
                _context?.Dispose();
                disposed = true;
            }
            GC.SuppressFinalize(this);
        }
        #endregion
    }
}
12. ViewModels/MainWindowViewModel.cs
csharp
코드 복사
using LockerManagementApp.Infrastructure;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 윈도우의 종합 ViewModel
    /// 사물함 관리(MainViewModel), 로그(LogViewModel), 마스터 설정(MasterSettingsViewModel)
    /// 세 개의 개별 ViewModel을 포함합니다.
    /// </summary>
    public class MainWindowViewModel : ViewModelBase
    {
        public MainViewModel MainVM { get; set; }
        public LogViewModel LogVM { get; set; }
        public MasterSettingsViewModel MasterVM { get; set; }

        public MainWindowViewModel()
        {
            MainVM = new MainViewModel();
            LogVM = new LogViewModel();
            MasterVM = new MasterSettingsViewModel();
        }
    }
}
13. Views/MainWindow.xaml
xml
코드 복사
<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:vm="clr-namespace:LockerManagementApp.ViewModels"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="700" Width="1200"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing">

    <!-- 메인 윈도우의 DataContext는 MainWindowViewModel -->
    <dx:ThemedWindow.DataContext>
        <vm:MainWindowViewModel/>
    </dx:ThemedWindow.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- 상단 영역: 좌측에는 각종 기능 버튼, 우측에는 관리자 비밀번호 입력 및 로그인 버튼 -->
        <DockPanel Grid.Row="0" Background="LightGray" LastChildFill="False" Margin="0,0,0,5">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Left" VerticalAlignment="Center">
                <Button Content="🔄 로드/새로고침" Margin="3" Command="{Binding MainVM.LoadDataCommand}" ToolTip="데이터베이스에서 최신 정보를 불러옵니다."/>
                <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding MainVM.SaveChangesCommand}" ToolTip="변경된 내용을 저장합니다."/>
                <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding MainVM.AddNewCommand}" ToolTip="새로운 사물함 추가"/>
                <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding MainVM.DeleteCommand}" ToolTip="선택된 항목 삭제"/>
                <Button Content="🧹 배정 해제" Margin="3" Command="{Binding MainVM.ClearAssignmentCommand}" ToolTip="배정 해제"/>
            </StackPanel>
            <!-- 관리자 로그인 영역 -->
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" VerticalAlignment="Center" Margin="0,0,10,0">
                <TextBlock Text="관리자 비번:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="AdminPasswordBox" Width="120" VerticalAlignment="Center"/>
                <Button Content="로그인" Margin="5,0,0,0" Click="AdminLogin_Click"/>
            </StackPanel>
        </DockPanel>

        <!-- 탭컨트롤: 사물함 관리, 로그, 마스터 설정 -->
        <TabControl Grid.Row="1" x:Name="MainTabControl">
            <!-- [1] 사물함 관리 탭 -->
            <TabItem Header="사물함 관리">
                <dxg:GridControl ItemsSource="{Binding MainVM.LockerAssignments}" SelectedItem="{Binding MainVM.SelectedAssignment, Mode=TwoWay}"
                                 AutoGenerateColumns="None" EnableSmartColumnsGeneration="False" SelectionMode="Row">
                    <dxg:GridControl.View>
                        <dxg:TableView AllowPerPixelScrolling="True" ShowTotalSummary="False" ShowGroupPanel="True"
                                        AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True"
                                        NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always"
                                        ShowSearchPanelFindButton="True" ShowSearchPanelCloseButton="True"
                                        SearchPanelHighlightResults="True"/>
                    </dxg:GridControl.View>
                    <dxg:GridControl.Columns>
                        <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left">
                            <dxg:GridColumn.EditSettings>
                                <!-- 관리항목: MasterSelections 중 LockerType에 해당하는 목록 바인딩 -->
                                <dxe:ComboBoxEditSettings ItemsSource="{Binding MainVM.MasterLockerTypes}" IsTextEditable="False"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <dxg:GridColumn FieldName="Floor" Header="층" Width="60">
                            <dxg:GridColumn.EditSettings>
                                <dxe:ComboBoxEditSettings ItemsSource="{Binding MainVM.MasterFloors}" IsTextEditable="False"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <dxg:GridColumn FieldName="Zone" Header="구역" Width="80">
                            <dxg:GridColumn.EditSettings>
                                <dxe:ComboBoxEditSettings ItemsSource="{Binding MainVM.MasterZones}" IsTextEditable="True"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120"/>
                        <dxg:GridColumn FieldName="UserName" Header="성명" Width="100"/>
                        <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100"/>
                        <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120">
                            <dxg:GridColumn.EditSettings>
                                <dxe:ComboBoxEditSettings ItemsSource="{Binding MainVM.MasterSubParts}" IsTextEditable="True"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120">
                            <dxg:GridColumn.EditSettings>
                                <dxe:ComboBoxEditSettings ItemsSource="{Binding MainVM.MasterAdministrators}" IsTextEditable="True"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                        <!-- 추가 컬럼들 -->
                        <dxg:GridColumn FieldName="전배복직" Header="전배복직" Width="120"/>
                        <dxg:GridColumn FieldName="내용" Header="내용" Width="150"/>
                        <dxg:GridColumn FieldName="특이사항" Header="특이사항" Width="150"/>
                        <dxg:GridColumn FieldName="비고" Header="비고" Width="150"/>
                        <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True">
                            <dxg:GridColumn.EditSettings>
                                <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True"/>
                            </dxg:GridColumn.EditSettings>
                        </dxg:GridColumn>
                    </dxg:GridControl.Columns>
                    <!-- 컬럼 헤더와 셀 중앙 정렬, 헤더 배경색: 하늘색 적용 -->
                    <dxg:GridControl.Resources>
                        <Style TargetType="dxg:ColumnHeaderContentPresenter">
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            <Setter Property="Background" Value="LightSkyBlue"/>
                        </Style>
                        <Style TargetType="dxg:CellContentPresenter">
                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        </Style>
                    </dxg:GridControl.Resources>
                </dxg:GridControl>
            </TabItem>

            <!-- [2] 로그 탭 (누구나 조회 가능) -->
            <TabItem Header="로그">
                <DockPanel>
                    <Button Content="로그 새로고침" DockPanel.Dock="Top" Margin="5" Command="{Binding LogVM.LoadLogsCommand}"/>
                    <dxg:GridControl ItemsSource="{Binding LogVM.Logs}" AutoGenerateColumns="False" EnableSmartColumnsGeneration="False">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AutoWidth="True"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="LogTime" Header="로그 시간" Width="150"/>
                            <dxg:GridColumn FieldName="Operation" Header="작업" Width="100"/>
                            <dxg:GridColumn FieldName="UserName" Header="사용자" Width="100"/>
                            <dxg:GridColumn FieldName="Description" Header="설명" Width="400"/>
                        </dxg:GridControl.Columns>
                        <dxg:GridControl.Resources>
                            <Style TargetType="dxg:ColumnHeaderContentPresenter">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="Background" Value="LightSkyBlue"/>
                            </Style>
                            <Style TargetType="dxg:CellContentPresenter">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            </Style>
                        </dxg:GridControl.Resources>
                    </dxg:GridControl>
                </DockPanel>
            </TabItem>

            <!-- [3] 마스터 설정 탭 (관리자 로그인 후 활성화) -->
            <TabItem Header="마스터 설정" x:Name="MasterSettingsTab" Visibility="Collapsed">
                <DockPanel>
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top" Margin="5">
                        <Button Content="새 항목 추가" Margin="3" Command="{Binding MasterVM.AddMasterSelectionCommand}"/>
                        <Button Content="저장" Margin="3" Command="{Binding MasterVM.SaveMasterSelectionCommand}"/>
                        <Button Content="삭제" Margin="3" Command="{Binding MasterVM.DeleteMasterSelectionCommand}"/>
                        <Button Content="관련 레코드 업데이트" Margin="3" Command="{Binding MasterVM.UpdateRelatedRecordsCommand}"/>
                    </StackPanel>
                    <dxg:GridControl ItemsSource="{Binding MasterVM.MasterSelections}" SelectedItem="{Binding MasterVM.SelectedMasterSelection, Mode=TwoWay}" AutoGenerateColumns="False" EnableSmartColumnsGeneration="False">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AutoWidth="True"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="Category" Header="카테고리" Width="150"/>
                            <dxg:GridColumn FieldName="Value" Header="값" Width="150"/>
                        </dxg:GridControl.Columns>
                        <dxg:GridControl.Resources>
                            <Style TargetType="dxg:ColumnHeaderContentPresenter">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="Background" Value="LightSkyBlue"/>
                            </Style>
                            <Style TargetType="dxg:CellContentPresenter">
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                            </Style>
                        </dxg:GridControl.Resources>
                    </dxg:GridControl>
                </DockPanel>
            </TabItem>
        </TabControl>
    </Grid>
</dx:ThemedWindow>
14. Views/MainWindow.xaml.cs
csharp
코드 복사
using DevExpress.Xpf.Core;
using LockerManagementApp.ViewModels;
using System;
using System.ComponentModel;
using System.Windows;

namespace LockerManagementApp.Views
{
    /// <summary>
    /// MainWindow.xaml 코드 비하인드
    /// 전역 예외 처리, 관리자 비번 체크 및 각 ViewModel dispose 처리를 포함합니다.
    /// </summary>
    public partial class MainWindow : ThemedWindow
    {
        // 관리자 마스터 비밀번호 (예시)
        private const string MasterPassword = "Admin@123";

        public MainWindow()
        {
            InitializeComponent();
        }

        // DataContext는 MainWindowViewModel로 캐스팅
        private MainWindowViewModel ViewModel => DataContext as MainWindowViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // 필요 시 추가 초기화 처리
        }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            // 각 하위 ViewModel의 Dispose 호출
            ViewModel.MainVM.Dispose();
            ViewModel.LogVM.Dispose();
            ViewModel.MasterVM.Dispose();
        }

        // 관리자 로그인 버튼 클릭 이벤트 핸들러
        private void AdminLogin_Click(object sender, RoutedEventArgs e)
        {
            if (AdminPasswordBox.Password == MasterPassword)
            {
                // 비밀번호 일치 시 마스터 설정 탭 보이기
                MasterSettingsTab.Visibility = Visibility.Visible;
                MessageBox.Show("관리자 로그인 성공. 마스터 설정 탭이 활성화되었습니다.", "로그인 성공", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("관리자 비밀번호가 일치하지 않습니다.", "로그인 실패", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}
15. App.xaml
xml
코드 복사
<Application x:Class="LockerManagementApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="Views/MainWindow.xaml">
    <Application.Resources>
    </Application.Resources>
</Application>
16. App.xaml.cs
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace LockerManagementApp
{
    /// <summary>
    /// App.xaml 코드 비하인드: 전역 예외 처리 설정 포함
    /// </summary>
    public partial class App : Application
    {
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            SetupGlobalExceptionHandling();
        }

        private void SetupGlobalExceptionHandling()
        {
            DispatcherUnhandledException += (s, ex) =>
            {
                LogAndShowException(ex.Exception, "UI 스레드 예외");
                ex.Handled = true;
            };
            TaskScheduler.UnobservedTaskException += (s, ex) =>
            {
                LogAndShowException(ex.Exception, "백그라운드 작업 예외");
                ex.SetObserved();
            };
            AppDomain.CurrentDomain.UnhandledException += (s, ex) =>
            {
                LogAndShowException((Exception)ex.ExceptionObject, "AppDomain 예외");
            };
        }

        private void LogAndShowException(Exception exception, string source)
        {
            string errorMessage = $"예외 발생 ({source}):\n\n{exception}";
            Debug.WriteLine(errorMessage);
            try
            {
                MessageBox.Show(errorMessage, "애플리케이션 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception msgEx)
            {
                Debug.WriteLine($"메시지 박스 오류: {msgEx}");
            }
        }