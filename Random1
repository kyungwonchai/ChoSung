bservableCollection처럼 리스트 형태로 보여주는 것이 아니라, 줄바꿈으로 연결된 하나의 문자열로 보여주고 싶다면, Queue<string> 값을 하나의 문자열로 변환하여 바인딩할 수 있습니다. 이를 위해 Queue<string>의 내용을 가공하여 줄바꿈된 문자열을 반환하는 속성을 만들면 됩니다.

다음은 그 방법을 설명한 코드입니다.

1. ViewModel 코드 변경
Queue<string>의 내용을 줄바꿈으로 연결된 문자열로 변환하여 UI에 바인딩하기 위한 속성을 추가합니다:

csharp
코드 복사
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Text;

public class MainViewModel : INotifyPropertyChanged
{
    // Queue 정의
    private Queue<string> _stringQueue = new Queue<string>();

    // Queue 값을 줄바꿈된 문자열로 반환하는 속성
    private string _queueText;
    public string QueueText
    {
        get { return _queueText; }
        set
        {
            _queueText = value;
            OnPropertyChanged();
        }
    }

    // INotifyPropertyChanged 구현
    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // Queue에 값을 추가하는 메서드
    public void AddToQueue(string value)
    {
        _stringQueue.Enqueue(value); // Queue에 값 추가
        UpdateQueueText(); // 문자열 업데이트
    }

    // Queue에서 값을 제거하는 메서드
    public void RemoveFromQueue()
    {
        if (_stringQueue.Count > 0)
        {
            _stringQueue.Dequeue(); // Queue에서 값 제거
            UpdateQueueText(); // 문자열 업데이트
        }
    }

    // Queue 값을 줄바꿈 문자열로 변환하는 메서드
    private void UpdateQueueText()
    {
        StringBuilder sb = new StringBuilder();
        foreach (var item in _stringQueue)
        {
            sb.AppendLine(item);
        }
        QueueText = sb.ToString();
    }
}
여기서 중요한 부분은 UpdateQueueText 메서드입니다. 이 메서드는 Queue<string>의 모든 값을 가져와 줄바꿈을 포함한 문자열로 만들어 QueueText 속성에 할당합니다. 이 속성은 UI에 바인딩됩니다.

2. XAML (View)
QueueText 속성을 TextBlock에 바인딩하여 줄바꿈된 문자열로 표시할 수 있습니다:

xml
코드 복사
<Window x:Class="QueueExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Queue Example" Height="250" Width="400">
    <Grid>
        <StackPanel>
            <!-- 줄바꿈된 Queue 내용을 보여주는 TextBlock -->
            <TextBlock Text="{Binding QueueText}" Height="150" Margin="10" />

            <!-- 텍스트 박스와 값 추가 버튼 -->
            <TextBox x:Name="inputTextBox" Width="200" Height="30" Margin="10" />
            <Button Content="Add to Queue" Width="100" Height="30" 
                    Command="{Binding AddCommand}" 
                    CommandParameter="{Binding Text, ElementName=inputTextBox}" 
                    Margin="10" />

            <!-- 값 제거 버튼 -->
            <Button Content="Remove from Queue" Width="150" Height="30"
                    Command="{Binding RemoveCommand}" Margin="10" />
        </StackPanel>
    </Grid>
</Window>
3. ViewModel의 Command 설정 (Optional)
Command를 사용하여 버튼 클릭을 처리하려면, ICommand를 추가할 수 있습니다. 이 부분은 이전에 설명한 것과 동일합니다:

csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private Action<object> execute;
    private Func<object, bool> canExecute;

    public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
    {
        this.execute = execute;
        this.canExecute = canExecute;
    }

    public event EventHandler CanExecuteChanged;

    public bool CanExecute(object parameter)
    {
        return canExecute == null || canExecute(parameter);
    }

    public void Execute(object parameter)
    {
        execute(parameter);
    }
}

public class MainViewModel : INotifyPropertyChanged
{
    // Queue 관련 코드...

    public ICommand AddCommand { get; }
    public ICommand RemoveCommand { get; }

    public MainViewModel()
    {
        AddCommand = new RelayCommand(param => AddToQueue(param as string));
        RemoveCommand = new RelayCommand(param => RemoveFromQueue());
    }

    // 나머지 코드...
}
설명
QueueText는 Queue<string>의 내용을 줄바꿈으로 연결된 문자열로 표시합니다.
TextBlock에 QueueText 속성을 바인딩하여 Queue의 값을 줄바꿈된 형태로 보여줍니다.
사용자가 버튼을 클릭하면 Queue에 문자열을 추가하거나 제거하며, UI가 자동으로 업데이트됩니다.
이 코드를 통해 Queue<string>의 내용을 줄바꿈된 문자열로 UI에 표시할 수 있