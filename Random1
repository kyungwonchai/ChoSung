합니다, 명확한 지시에 따라 DB에서 데이터를 주기적으로 가져와 차트를 갱신하는 코드를 제공하겠습니다. 이를 위해 타이머를 사용하여 정해진 간격으로 데이터베이스에서 데이터를 읽고 차트를 업데이트하는 방식을 구현하겠습니다.

1. 데이터 클래스 및 데이터베이스 연결
csharp
Copy code
public class ChartData
{
    public DateTime FileTime { get; set; }
    public double CTValue { get; set; }
    public string Model { get; set; }
    public string Division { get; set; }
    public string MaskNumber { get; set; }
    public string Rev { get; set; }
    public string Line { get; set; }
    public string Type { get; set; }
}

public ObservableCollection<ChartData> FetchDataFromDatabase()
{
    var data = new ObservableCollection<ChartData>();
    using (var connection = new SqlConnection("Your Connection String Here"))
    {
        connection.Open();
        var query = "SELECT TOP 1000 FileTime, CT, Model, Division, MaskNumber, Rev, Line, Type FROM YourTable ORDER BY FileTime DESC";
        using (var command = new SqlCommand(query, connection))
        {
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    var chartData = new ChartData
                    {
                        FileTime = reader.GetDateTime(0),
                        CTValue = reader.GetDouble(1),
                        Model = reader.GetString(2),
                        Division = reader.GetString(3),
                        MaskNumber = reader.GetString(4),
                        Rev = reader.GetString(5),
                        Line = reader.GetString(6),
                        Type = reader.GetString(7)
                    };
                    data.Insert(0, chartData); // 최신 데이터를 앞에 삽입
                }
            }
        }
    }
    return data;
}
2. 차트 생성 및 데이터 바인딩
csharp
Copy code
void CreateCharts()
{
    var data = FetchDataFromDatabase(); // 데이터베이스에서 데이터 가져오기
    var lines = data.Select(d => d.Line).Distinct();

    foreach (var line in lines)
    {
        var chart = new ChartControl();
        chart.Diagram = new XYDiagram2D();
        MainStackPanel.Children.Add(chart);

        foreach (var type in new[] { "T", "B" })
        {
            var series = new LineSeries2D
            {
                DisplayName = type,
                ArgumentDataMember = "FileTime",
                ValueDataMember = "CTValue",
                DataSource = new ObservableCollection<ChartData>(data.Where(d => d.Line == line && d.Type == type))
            };

            series.ToolTipPointPattern = "Model: {Model}\nDivision: {Division}\nMask Number: {MaskNumber}\nRev: {Rev}\nCT: {CTValue}\nFile Time: {FileTime}";
            chart.Diagram.Series.Add(series);
        }
    }
}
3. 타이머 설정 및 데이터 갱신
csharp
Copy code
System.Timers.Timer updateTimer;

void SetupTimer()
{
    updateTimer = new System.Timers.Timer(10000); // 10초 간격으로 설정
    updateTimer.Elapsed += (sender, e) =>
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            CreateCharts(); // 차트를 다시 생성하여 데이터를 업데이트
        });
    };
    updateTimer.Start();
}
4. XAML 설정
xml
Copy code
<Window xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts">
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- 차트가 여기에 동적으로 생성됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
5. 초기화 및 실행
csharp
Copy code
// 프로그램 시작 시
CreateCharts(); // 최초 차트 생성
SetupTimer(); // 타이머 설정 및 시작
이 코드는 데이터베이스에서 데이터를 가져와 차트를 생성하고, 주기적으로 차트를 갱신합니다. 타이머 간격은 10초로 설정했으며, 필요에 따라 조절할 수 있습니다. 또한, 데이터베이스 연결 문자열과 쿼리는 귀하