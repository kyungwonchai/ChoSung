해했습니다. FunctionTasks가 List<Func<Task>> 형태로 관리되고 있고, 이 리스트에 비동기 함수들을 Add하는 방식으로 사용 중이므로, FunctionStatusColors와 연동된 도형 ItemsControl에 커맨드를 물리고, FunctionTasks를 사용하여 이를 관리하도록 수정하겠습니다.

요구 사항:
FunctionTasks에 비동기 함수를 Add하고, 이를 FunctionStatusColors 컬럼과 연동된 도형에서 관리.
도형을 클릭하면 해당 도형에 연동된 함수가 실행될 수 있도록 커맨드를 연동.
FunctionTasks의 각 항목과 도형이 일대일로 연동되어, 비동기 함수가 실행되면 도형의 색상이 변하게 처리.
코드 구조 설명:
FunctionTasks는 List<Func<Task>>로 비동기 함수들을 관리합니다.
FunctionStatusColors는 각 함수의 상태를 도형으로 시각화하는 리스트로 사용됩니다.
ItemsControl의 도형을 클릭하면, 해당 도형에 연동된 비동기 함수가 실행되며, 작업이 완료되면 도형의 색상이 변경됩니다.
수정된 코드 예시
1. TaskModel Class (FunctionTasks와 FunctionStatusColors 연동)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;
using System.Collections.Generic;

public class TaskModel : ViewModelBase
{
    // 로그 엔트리 정보
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 비동기 함수 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 각 함수 상태를 도형으로 표현 (도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 도형 클릭 명령어
    public ICommand FunctionClickCommand { get; }

    public TaskModel(LogEntry logEntry)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;

        // 비동기 함수 리스트 초기화 및 함수 추가
        FunctionTasks = new List<Func<Task>>
        {
            ExecuteTaskA,
            ExecuteTaskB,
            ExecuteTaskC
        };

        // FunctionStatusColors 리스트 초기화 (각 함수의 상태를 색상으로 표현)
        FunctionStatusColors = new ObservableCollection<Brush>
        {
            Brushes.Gray,  // Task A 초기 상태
            Brushes.Gray,  // Task B 초기 상태
            Brushes.Gray   // Task C 초기 상태
        };

        // 도형 클릭 명령어 설정
        FunctionClickCommand = new RelayCommand<int>(ExecuteSpecificTask);
    }

    /// <summary>
    /// 도형을 클릭하여 특정 함수를 실행합니다.
    /// </summary>
    private async void ExecuteSpecificTask(int index)
    {
        // 해당 인덱스의 비동기 함수 실행
        await FunctionTasks[index]();

        // 함수 실행 후 도형 색상을 업데이트 (녹색으로 변경)
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.Green;
        });
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
설명:
FunctionTasks: List<Func<Task>> 타입의 리스트로 각 작업(Task A, B, C)을 비동기 함수로 관리.
FunctionStatusColors: ObservableCollection<Brush>로 각 작업의 도형 상태(Gray, Green 등)를 관리.
FunctionClickCommand: RelayCommand<int>로 도형을 클릭할 때 해당 함수의 인덱스(int index)를 넘겨, 그 함수만 실행하도록 처리.
2. MainViewModel Class (작업 추가 및 바인딩)
csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" })
        };
    }
}
설명:
TaskList: 각 작업(TaskModel)들의 목록을 관리하며, **UI(DataGrid)**와 바인딩되어 표시됩니다.
3. LogEntry Class (로그 엔트리 데이터 클래스)
csharp
코드 복사
public class LogEntry
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }
}
설명:
LogEntry: 각 작업의 로그 정보를 저장하는 클래스입니다. (MAG_NO, PO_NO 등)
4. XAML (UI - 도형과 비동기 함수 연동)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- Function Status (도형 상태) Column -->
                <DataGridTemplateColumn Header="Function Status">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{Binding FunctionStatusColors}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <!-- 도형 (Ellipse) -->
                                        <Ellipse Width="20" Height="20" Fill="{Binding}" Stroke="Black" StrokeThickness="1">
                                            <!-- 도형 클릭 시 함수 실행 -->
                                            <Ellipse.InputBindings>
                                                <MouseBinding Command="{Binding DataContext.FunctionClickCommand, 
                                                                        RelativeSource={RelativeSource AncestorType=DataGrid}}" 
                                                              CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=(ItemsControl.AlternationIndex)}"
                                                              MouseAction="LeftClick"/>
                                            </Ellipse.InputBindings>
                                        </Ellipse>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
설명:
FunctionStatusColors 컬럼은 Ellipse 도형으로 각 함수의 상태를 시각적으로 표시합니다.
도형을 클릭하면 FunctionClickCommand가 호출되며, 해당 도형의 인덱스(ItemsControl의 인덱스)를 파라미터로 넘겨줍니다.
각 도형은 **비동기 함수(FunctionTasks[index])**와 연결되어 있으며, 클릭 시 해당 함수가 실행되고 완료되면 도형의 색상이 녹색으로 변경됩니다.
최종 요약:
FunctionTasks는 List<Func<Task>>로 각 함수(Task A, B, C)를 비동기 함수로 관리하며, 각 함수가 도형과 연동되어 있습니다.
FunctionStatusColors는 ObservableCollection<Brush>로 각 도형의 상태(Gray, Green 등)를 관리합니다.
도형을 클릭하면 해당 함수만 실행되며, 함수가 완료되면 도형의 색상이 녹색으로 변경됩니다.
**UI(DataGrid)**에는 MAG_NO, PO_NO와 함께 FunctionStatusColors(도형 상태) 컬럼이 표시됩니다.
이 구조로, 비동기 함수 실행과 도형 상태 관리가 원활하게 이루어질 수 있으며, 각 도형을 클릭하면 개별 함수 실행이 가능합니다