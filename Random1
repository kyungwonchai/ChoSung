hank you for clarifying! Below is the updated code that handles multi-row data from PRealAandB, where:

Each row is used to generate its own chart.
The X-axis is the timestamp column (1st column).
For each row:
Predicted values are shown in blue.
Actual values are shown in green.
A range of ±0.1 around the actual values is plotted.
Updated Code: Multi-Row Data with Individual Charts
python
코드 복사
# Load the trained model
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# Fetch the multi-row data from the database
data = fetch_data_from_db("PRealAandB")  # Fetch PRealAandB multi-row data

# Validate the data
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# Ensure the data is in the correct format (numpy array)
if not isinstance(data, np.ndarray):
    data = np.array(data)

# Extract columns
timestamps = data[:, 0]  # First column (timestamps)
features = data[:, 2:5]  # Columns 3~5 (features for prediction)
actual_values = data[:, 1]  # Column 2 (actual values)

# Make predictions for all rows
predicted_values = model.predict(features)

# Loop through each row and plot a separate chart
for i in range(len(data)):
    plt.figure(figsize=(10, 5))

    # Plot actual value with ±0.1 range
    plt.fill_between(
        [timestamps[i]],
        [actual_values[i] - 0.1],
        [actual_values[i] + 0.1],
        color="green",
        alpha=0.2,
        label="Actual ± 0.1 Range"
    )

    # Plot actual value (green point)
    plt.scatter([timestamps[i]], [actual_values[i]], color="green", label="Actual Value", zorder=5)

    # Plot predicted value (blue point)
    plt.scatter([timestamps[i]], [predicted_values[i]], color="blue", label="Predicted Value", zorder=5)

    # Draw lines for better visualization
    plt.plot(
        [timestamps[i], timestamps[i]],
        [actual_values[i], predicted_values[i]],
        linestyle="--",
        color="gray",
        alpha=0.7,
        label="Prediction Error"
    )

    # Chart settings
    plt.title(f"Prediction vs Actual for Row {i + 1}")
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.xticks(rotation=45)
    plt.legend()
    plt.grid()

    # Show the chart
    plt.show()

    # Print details for this row
    print(f"Row {i + 1} - Timestamp: {timestamps[i]}")
    print(f"  Predicted Value: {predicted_values[i]:.2f}")
    print(f"  Actual Value: {actual_values[i]:.2f}")
    print(f"  Error: {abs(predicted_values[i] - actual_values[i]):.2f}")
Code Explanation
Data Preparation:

timestamps: First column (used as the X-axis).
features: Columns 3 to 5 (used as input for prediction).
actual_values: Column 2 (used as the target).
Prediction:

The model (best_model.pkl) is used to predict the 2nd column values based on the 3rd to 5th column.
Visualization:

Each row of the data generates its own chart.
Actual Value: Plotted as a green point.
Predicted Value: Plotted as a blue point.
Actual ± 0.1 Range: Shown as a green shaded area.
Error Line: A dashed line connecting the actual and predicted values.
Console Output:

For each row, details are printed, including:
Timestamp.
Predicted value.
Actual value.
Prediction error.
Expected Results
For multi-row data, each row will produce an individual chart.
The X-axis will display timestamps from the first column.