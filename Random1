using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private TcpListener _tcpListener;
        private bool _isServerRunning = false;
        private readonly string _logFilePath = "C:\\Logs\\RouterMiddleACRService\\ServerErrorLog.txt";

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            StartTcpServer(); // TCP 서버를 시작
        }

        // TCP 서버 시작 메서드
        private void StartTcpServer()
        {
            Task.Run(async () =>
            {
                while (true)
                {
                    try
                    {
                        _tcpListener = new TcpListener(IPAddress.Any, 9000); // 포트 9000에서 대기
                        _tcpListener.Start();
                        _isServerRunning = true;
                        UpdateServerStatus(true);
                        Console.WriteLine("TCP server started on port 9000.");

                        while (_isServerRunning)
                        {
                            var client = await _tcpListener.AcceptTcpClientAsync(); // 클라이언트 연결 대기
                            _ = Task.Run(() => HandleClient(client)); // 클라이언트 처리
                        }
                    }
                    catch (Exception ex)
                    {
                        LogServerError(ex.Message);
                        _isServerRunning = false;
                        UpdateServerStatus(false);
                        Console.WriteLine($"Server error: {ex.Message}");

                        // 일정 시간 대기 후 서버 재시작 시도
                        await Task.Delay(5000);
                    }
                }
            });
        }

        // 클라이언트 연결을 처리하는 메서드
        private async Task HandleClient(TcpClient client)
        {
            using (client)
            using (NetworkStream stream = client.GetStream())
            {
                byte[] buffer = new byte[1024];
                int bytesRead;

                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Dispatcher.Invoke(() => _viewModel.LogMessages.Add($"Received from service: {message}")); // UI에 로그 메시지 추가
                }
            }
        }

        // 서버 상태를 UI에 반영하는 메서드
        private void UpdateServerStatus(bool isRunning)
        {
            Dispatcher.Invoke(() =>
            {
                if (isRunning)
                {
                    ServerStatusIndicator.Fill = Brushes.Green; // 서버가 실행 중이면 초록색으로 표시
                }
                else
                {
                    ServerStatusIndicator.Fill = Brushes.Red; // 서버가 중단되면 빨간색으로 표시
                }
            });
        }

        // 서버 오류를 로그 파일에 기록하는 메서드
        private void LogServerError(string errorMessage)
        {
            try
            {
                string logEntry = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {errorMessage}";
                File.AppendAllText(_logFilePath, logEntry + Environment.NewLine);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to log server error: {ex.Message}");
            }
        }

        // 필요한 UI 이벤트 핸들러 (예: 서버 시작/중지 등)
        private void StartService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StartService();
        }

        private void StopService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StopService();
        }

        private void RefreshStatus_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshServiceStatus();
        }
    }
}
