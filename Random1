습니다! 제가 이전 답변에서 스플래시 창 파일들과 App.xaml 수정 내용만 드리고, 정작 스플래시 창과 메인 창을 띄우는 로직이 들어갈 App.xaml.cs 파일의 수정 코드를 빠뜨렸습니다. 죄송합니다.

App.xaml에서 StartupUri를 제거했기 때문에, App.xaml.cs의 OnStartup 메서드에서 어떤 창을 먼저 보여주고, 언제 메인 창을 보여줄지 직접 코드로 작성해야 합니다.

수정해야 할 파일 목록:

App.xaml.cs
아래는 스플래시 창을 먼저 보여주고, 메인 창을 생성한 뒤 스플래시 창을 닫고 메인 창을 보여주는 로직이 추가된 App.xaml.cs 파일 전체 코드(주석 제외)입니다.

C#

using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;
using System.Data.Entity.Infrastructure.Interception;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Views; // Views 네임스페이스 추가

namespace LockerManagementApp
{
    public partial class App : Application
    {
        public static bool IsShuttingDown { get; private set; } = false;

        protected override void OnStartup(StartupEventArgs e)
        {
            // *** 수정: 스플래시 창 및 메인 창 표시 로직 추가 ***
            base.OnStartup(e);

            // 1. 스플래시 창 생성 및 표시
            var splashScreen = new SplashScreenWindow();
            splashScreen.Show();

            // 전역 예외 처리기 설정 (가능한 한 빨리)
            SetupGlobalExceptionHandling();
            Debug.WriteLine("애플리케이션 시작됨 및 전역 예외 처리기 설정 완료.");

            // 2. 메인 창 생성 (이 과정에서 MainViewModel 및 초기 데이터 로딩 시작됨)
            // 메인 창 생성 자체는 UI 스레드에서 수행되어야 함
            var mainWindow = new MainWindow();

            // 3. 메인 창 생성이 완료되면 스플래시 창 닫기
            splashScreen.Close();

            // 4. 메인 창 표시
            // MainWindow 속성을 설정하거나 직접 Show() 호출
            this.MainWindow = mainWindow;
            mainWindow.Show();

            Debug.WriteLine("메인 창 표시 완료.");
        }

        protected override void OnExit(ExitEventArgs e)
        {
            Debug.WriteLine("애플리케이션 종료 시작됨.");
            IsShuttingDown = true;
            base.OnExit(e);
            Debug.WriteLine("애플리케이션 종료 완료.");
        }

        #region 전역 예외 처리 (Global Exception Handling)
        private void SetupGlobalExceptionHandling()
        {
            DispatcherUnhandledException += App_DispatcherUnhandledException;
            TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;
            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;
            Debug.WriteLine("전역 예외 처리기 설정 완료.");
        }
        private void App_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e) { Debug.WriteLine("--- DispatcherUnhandledException 발생 ---"); LogAndShowException(e.Exception, "UI Thread Exception"); e.Handled = true; }
        private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e) { Debug.WriteLine("--- TaskScheduler_UnobservedTaskException 발생 ---"); LogAndShowException(e.Exception, "Background Task Exception"); e.SetObserved(); }
        private void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e) { Debug.WriteLine("--- CurrentDomain_UnhandledException 발생 ---"); LogAndShowException((Exception)e.ExceptionObject, "AppDomain Exception", !e.IsTerminating); }
        private void LogAndShowException(Exception exception, string source, bool showMessageBox = true) { string errorMessage = $"예기치 않은 오류 발생 ({source}):\n\n{exception.ToString()}"; Debug.WriteLine($"*** 예외 발생 ({source}) ***\n{errorMessage}"); if (showMessageBox && !IsShuttingDown) { try { MessageBox.Show(errorMessage, "애플리케이션 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception msgEx) { Debug.WriteLine($"*** 메시지 박스 표시 실패 ({source}) ***\n{msgEx.ToString()}"); } } }
        #endregion
    }
}

핵심 변경 사항:

OnStartup 메서드 재정의:
base.OnStartup(e); 호출.
SplashScreenWindow 인스턴스를 생성하고 Show() 메서드를 호출하여 화면에 표시합니다.
전역 예외 처리기를 설정합니다.
MainWindow 인스턴스를 생성합니다. (MainWindow.xaml에 설정된 DataContext에 따라 MainViewModel도 이 시점에 생성됩니다.)
splashScreen.Close()를 호출하여 스플래시 창을 닫습니다.
this.MainWindow = mainWindow; 및 mainWindow.Show();를 호출하여 메인 창을 표시합니다.