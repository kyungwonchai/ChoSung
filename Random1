고, 실시간 검색 기능을 추가하며, 로그 탭에서도 선택한 날짜에 따라 데이터를 조회할 수 있도록 하겠습니다.

1. 데이터베이스 설정 (저장 프로시저)
먼저 MSSQL에 저장 프로시저를 추가하여 최근 1개월 치 데이터를 가져오는 기능과 로그 조회 기능을 설정합니다.

sql
코드 복사
-- GetLastMonthReports stored procedure
CREATE PROCEDURE GetLastMonthReports
AS
BEGIN
    SELECT * FROM ShiftReport
    WHERE Date >= DATEADD(month, -1, GETDATE())
    ORDER BY Date DESC;
END

-- GetLogByDate stored procedure
CREATE PROCEDURE GetLogByDate
    @Date NVARCHAR(10)
AS
BEGIN
    SELECT * FROM ReportLog WHERE Date = @Date;
END
2. XAML 코드 수정
XAML 코드에서는 검색 및 로그 조회를 위한 UI 요소를 추가합니다.

xml
코드 복사
<Window x:Class="ShiftReportApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="Shift Report Manager" Height="600" Width="800">
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="날짜" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="번호" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="주" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="3" Text="후" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" Text="야" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="5" Text="공통인계사항" Background="Black" Foreground="White" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Date1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" x:Name="Date2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="0" x:Name="Date3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" x:Name="Date4" Background="LightGray" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="1" Text="4" Background="LightGray" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="2" x:Name="DayShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="2" x:Name="DayShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="2" x:Name="DayShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="2" x:Name="DayShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="3" x:Name="EveningShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="3" x:Name="EveningShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="3" x:Name="EveningShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="3" x:Name="EveningShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="4" x:Name="NightShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="4" x:Name="NightShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="4" x:Name="NightShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="4" x:Name="NightShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="5" x:Name="CommonReport1" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="5" x:Name="CommonReport2" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="5" x:Name="CommonReport3" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="5" x:Name="CommonReport4" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="10">
                        <TextBox x:Name="searchTextBox" Width="200" VerticalAlignment="Center" PlaceholderText="Search..." TextChanged="OnSearchTextChanged"/>
                        <Button Content="조회" Click="OnSearchReports"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlSearch">
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="로그">
                <Grid>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="10">
                        <DatePicker Name="logDatePicker"/>
                        <Button Content="조회" Click="OnLogSearch"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlLog">
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                            <dxg:GridColumn Header="IP주소" FieldName="IPAddress"/>
                            <dxg:GridColumn Header="시간" FieldName="Timestamp"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
3. 수정된 C# 코드 (비하인드 코드)
C# 코드에서는 최근 1개월 치 데이터를 날짜 순으로 정렬하고, 실시간 검색 및 로그 조회 기능을 구현합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using System.Windows.Controls;

namespace ShiftReportApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string_here";
        private DataTable searchTable;
        private DataTable logTable;

        public MainWindow()
        {
            InitializeComponent();
            LoadTodayReport();
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count > 0)
            {
                ClearReports();

                foreach (DataRow row in dataTable.Rows)
                {
                    int number = Convert.ToInt32(row["Number"]);
                    string shiftType = row["ShiftType"].ToString();

                    if (shiftType == "주")
                    {
                        ((TextBox)FindName($"DayShiftReport{number}")).Text = row["Report"].ToString();
                        ((TextBox)FindName($"DayShiftReport{number}")).Background = new SolidColorBrush(Colors.White);
                    }
                    else if (shiftType == "후")
                    {
                        ((TextBox)FindName($"EveningShiftReport{number}")).Text = row["Report"].ToString();
                        ((TextBox)FindName($"EveningShiftReport{number}")).Background = new SolidColorBrush(Colors.White);
                    }
                    else if (shiftType == "야")
                    {
                        ((TextBox)FindName($"NightShiftReport{number}")).Text = row["Report"].ToString();
                        ((TextBox)FindName($"NightShiftReport{number}")).Background = new SolidColorBrush(Colors.White);
                    }
                    else if (shiftType == "공통")
                    {
                        ((TextBox)FindName($"CommonReport{number}")).Text = row["Report"].ToString();
                        ((TextBox)FindName($"CommonReport{number}")).Background = new SolidColorBrush(Colors.LightSkyBlue);
                    }

                    ((TextBlock)FindName($"Date{number}")).Text = date;
                }
            }
            else
            {
                ClearReports();
                for (int i = 1; i <= 4; i++)
                {
                    ((TextBlock)FindName($"Date{i}")).Text = date;
                }
            }
        }

        private void ClearReports()
        {
            for (int i = 1; i <= 4; i++)
            {
                ((TextBox)FindName($"DayShiftReport{i}")).Text = "";
                ((TextBox)FindName($"DayShiftReport{i}")).Background = new SolidColorBrush(Colors.LightGray);
                ((TextBox)FindName($"EveningShiftReport{i}")).Text = "";
                ((TextBox)FindName($"EveningShiftReport{i}")).Background = new SolidColorBrush(Colors.LightGray);
                ((TextBox)FindName($"NightShiftReport{i}")).Text = "";
                ((TextBox)FindName($"NightShiftReport{i}")).Background = new SolidColorBrush(Colors.LightGray);
                ((TextBox)FindName($"CommonReport{i}")).Text = "";
                ((TextBox)FindName($"CommonReport{i}")).Background = new SolidColorBrush(Colors.LightSkyBlue);
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            DateTime date;
            if (DateTime.TryParseExact(((TextBlock)FindName($"Date{number}")).Text, "yyyy-MM-dd", null, System.Globalization.DateTimeStyles.None, out date))
            {
                string ipAddress = GetLocalIPAddress();
                SaveReport(date.ToString("yyyy-MM-dd"), number, shiftType, report, ipAddress);
            }
            else
            {
                MessageBox.Show("날짜 형식이 잘못되었습니다.");
            }
        }

        private void SaveReport(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnDateSelected(object sender, SelectionChangedEventArgs e)
        {
            DateTime? selectedDate = datePicker.SelectedDate;
            if (selectedDate.HasValue)
            {
                LoadSearchReport(selectedDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReport(string date)
        {
            searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLastMonthReports", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnSearchTextChanged(object sender, TextChangedEventArgs e)
        {
            if (searchTable != null)
            {
                string filter = $"Date LIKE '%{searchTextBox.Text}%' OR " +
                                $"Number LIKE '%{searchTextBox.Text}%' OR " +
                                $"DayShift LIKE '%{searchTextBox.Text}%' OR " +
                                $"EveningShift LIKE '%{searchTextBox.Text}%' OR " +
                                $"NightShift LIKE '%{searchTextBox.Text}%' OR " +
                                $"CommonReport LIKE '%{searchTextBox.Text}%'";
                searchTable.DefaultView.RowFilter = filter;
            }
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            DateTime? selectedDate = logDatePicker.SelectedDate;
            if (selectedDate.HasValue)
            {
                LoadLogReport(selectedDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadLogReport(string date)
        {
            logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLogByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            if (logTable.Rows.Count > 0)
            {
                gridControlLog.ItemsSource = logTable.DefaultView;
            }
            else
            {
                MessageBox.Show("선택한 날짜에 대한 로그가 없습니다.");
            }
        }
    }
}
이제 전체적으로 기능이 구현되었습니다. 주요 변경 사항은 다음과 같습니다:

최근 1개월 치 데이터 조회: 최근 1개월 치 데이터를 가져와 날짜 순으로 표시합니다.
실시간 검색 기능: 검색 창에 입력된 내용에 따라 실시간으로 데이터를 필터링합니다.
로그 조회 기능: 선택한 