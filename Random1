동적 행 교체: LTR(서쪽) 방향일 때는 홀수 행이 아래(주력)로, RTL(동쪽) 방향일 때는 짝수 행이 아래(주력)로 위치가 바뀌도록 합니다.

참조 행 시각화: 위쪽(참조) 행 중앙에 굵은 화살표를 추가하여 주력 행이 아님을 시각적으로 표시합니다. (버튼 클릭은 계속 가능)

이 두 가지 '최첨단' 기술을 적용하기 위해, 아이콘(Drawable) 1개, 레이아웃(activity_main.xml), 그리고 로직(MainActivity.kt)을 모두 수정하겠습니다.

## 1. '참조' 행을 위한 화살표 아이콘 추가
위쪽 줄에 표시할 아래 방향 화살표 아이콘이 필요합니다. res/drawable 폴더에 ic_thick_arrow.xml 파일을 새로 만들어 아래 코드를 붙여넣으세요.

<details>
<summary><strong>res/drawable/ic_thick_arrow.xml (새 파일) - (클릭하여 코드 보기)</strong></summary>

XML

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="48dp"
    android:height="48dp"
    android:viewportWidth="24"
    android:viewportHeight="24"
    android:tint="?attr/colorControlNormal">
  <path
      android:fillColor="@android:color/white"
      android:pathData="M12,16.5l-6,-6l1.41,-1.41L12,13.67l4.59,-4.58L18,10.5L12,16.5z"/>
</vector>
</details>

## 2. activity_main.xml 레이아웃 구조 변경
이제 행의 위치가 바뀌어야 하므로, 기존의 buttonRowOdd, buttonRowEven ID를 topButtonRow, bottomButtonRow로 변경합니다. 또한 위쪽 줄에는 화살표를 겹쳐서 표시하기 위해 FrameLayout을 사용합니다.

activity_main.xml 파일 전체를 아래 코드로 교체해주세요.

XML

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="8dp"
    tools:context=".MainActivity">

    <com.kyungwon.reellistviewer.CompassView
        android:id="@+id/compassView"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:clickable="true"
        android:focusable="true" />
    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="wrap_content"
        android:layout_height="40dp"
        android:layout_alignParentTop="true"
        android:layout_marginTop="5dp"
        android:layout_marginEnd="8dp"
        android:layout_toStartOf="@id/compassView"
        android:background="@drawable/button_gradient_purple"
        android:paddingHorizontal="16dp"
        android:text="Open ReelList"
        android:textColor="@android:color/white" />
    <TextView
        android:id="@+id/tvFileName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentTop="true"
        android:layout_centerVertical="true"
        android:layout_marginTop="12dp"
        android:layout_toStartOf="@id/btnOpenFile"
        android:ellipsize="end"
        android:maxLines="1"
        android:textSize="16sp"
        android:textStyle="bold"
        tools:text="열린 파일 이름" />

    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/pageButtonContainer"
        android:layout_marginTop="8dp" />

    <LinearLayout
        android:id="@+id/pageButtonContainer"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/btnOpenFile"
        android:layout_marginTop="8dp"
        android:orientation="vertical"
        android:visibility="gone"
        tools:visibility="visible">

        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <LinearLayout
                android:id="@+id/topButtonRow"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal" />

            <ImageView
                android:id="@+id/ivTopRowArrow"
                android:layout_width="48dp"
                android:layout_height="48dp"
                android:layout_gravity="center"
                android:src="@drawable/ic_thick_arrow"
                android:visibility="gone"
                android:clickable="false"
                android:focusable="false"
                tools:visibility="visible"/>

        </FrameLayout>

        <LinearLayout
            android:id="@+id/bottomButtonRow"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal" />
    </LinearLayout>

</RelativeLayout>
## 3. MainActivity.kt 최종 로직 수정
이제 regenerateButtons 함수에서 현재 방향에 따라 홀수/짝수 버튼들을 topButtonRow 또는 bottomButtonRow에 동적으로 할당하는 로직을 구현합니다.

MainActivity.kt 파일 전체를 아래 코드로 교체해주세요.

Kotlin

package com.kyungwon.reellistviewer

import android.content.Context
import android.graphics.Typeface
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.GestureDetectorCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.core.view.setMargins
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.kyungwon.reellistviewer.databinding.ActivityMainBinding
import jcifs.CIFSContext
import jcifs.config.PropertyConfiguration
import jcifs.context.BaseContext
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.util.Properties

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener, SensorEventListener {

    private lateinit var binding: ActivityMainBinding
    private val SMB_IP = "192.1.1.5"
    private val SMB_SHARED_FOLDER = "tempshare"
    private val SMB_USER = "win10"
    private val SMB_PASS = "tltmxpa2@"
    private var totalPdfPages = 0
    private val skippedButtons = mutableSetOf<Int>()
    private val currentButtons = mutableListOf<Button>()
    private var selectedButton: Button? = null
    private lateinit var gestureDetector: GestureDetectorCompat
    private var tappedButton: Button? = null
    private lateinit var sensorManager: SensorManager
    private val accelerometerReading = FloatArray(3)
    private val magnetometerReading = FloatArray(3)
    private val rotationMatrix = FloatArray(9)
    private val orientationAngles = FloatArray(3)
    private var isGeomagneticModeOn = false
    private var currentDirection = Direction.OTHER

    enum class Direction { EAST, WEST, OTHER }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        hideSystemUI()
        setupGestureDetector()
        setupEventListeners()
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
    }
    
    // ... (onResume, onPause, hideSystemUI 등 많은 함수는 이전과 동일)

    private fun setupGestureDetector() {
        gestureDetector = GestureDetectorCompat(this, object : GestureDetector.SimpleOnGestureListener() {
            override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
                tappedButton?.let { onPageButtonClick(it) }
                return true
            }
            override fun onDoubleTap(e: MotionEvent): Boolean {
                tappedButton?.let {
                    onPageButtonClick(it)
                    binding.pdfView.resetZoom()
                    Toast.makeText(this@MainActivity, "화면에 맞춤", Toast.LENGTH_SHORT).show()
                }
                return true
            }
            override fun onLongPress(e: MotionEvent) {
                tappedButton?.let { onPageButtonLongClick(it) }
            }
        })
    }

    private fun setupEventListeners() {
        binding.btnOpenFile.setOnLongClickListener {
            lifecycleScope.launch(Dispatchers.IO) { showPdfListFromSmb() }
            Toast.makeText(this, "파일 목록을 엽니다.", Toast.LENGTH_SHORT).show()
            true
        }
        binding.compassView.setOnLongClickListener {
            isGeomagneticModeOn = !isGeomagneticModeOn
            val modeText = if (isGeomagneticModeOn) "On" else "Off"
            Toast.makeText(this, "지자계 의존 모드: $modeText", Toast.LENGTH_SHORT).show()
            binding.compassView.setGeomagneticMode(isGeomagneticModeOn)
            if (!isGeomagneticModeOn) {
                currentDirection = Direction.OTHER
            }
            updateButtonsAndUI()
            true
        }
    }

    override fun loadComplete(nbPages: Int) {
        totalPdfPages = nbPages
        skippedButtons.clear()
        selectedButton = null
        binding.pageButtonContainer.visibility = View.VISIBLE
        isGeomagneticModeOn = false
        binding.compassView.setGeomagneticMode(false)
        updateButtonsAndUI()
    }

    private fun updateButtonsAndUI() {
        var requiredLogicalButtons=0;var physicalPageCounter=0;var logicalButtonCounter=0
        while(physicalPageCounter<totalPdfPages){logicalButtonCounter++;if(!skippedButtons.contains(logicalButtonCounter)){physicalPageCounter++}};requiredLogicalButtons=logicalButtonCounter
        val currentButtonCount=currentButtons.size
        var newButtonCount=if(requiredLogicalButtons%2!=0)requiredLogicalButtons+1 else requiredLogicalButtons
        if(totalPdfPages>0&&newButtonCount==0)newButtonCount=2;newButtonCount=maxOf(newButtonCount,currentButtonCount)
        regenerateButtons(newButtonCount)
        updateAllButtonStyles()
    }

    /**
     * 버튼 동적 생성 (행 교체 및 화살표 표시 로직 적용)
     */
    private fun regenerateButtons(count: Int) {
        binding.topButtonRow.removeAllViews()
        binding.bottomButtonRow.removeAllViews()
        currentButtons.clear()

        val buttonHeight = dpToPx(44)
        val margin = dpToPx(2)
        val buttonParams = LinearLayout.LayoutParams(0, buttonHeight, 1.0f)
        buttonParams.setMargins(margin)
        
        // 💡 지자계 모드 ON일 때만 화살표 표시
        binding.ivTopRowArrow.visibility = if (isGeomagneticModeOn) View.VISIBLE else View.GONE
        
        // 💡 현재 방향에 따라 홀수/짝수 버튼이 들어갈 행을 결정
        val (oddRowContainer, evenRowContainer) = when {
            // 지자계 ON & 서쪽 방향(LTR) -> 홀수 행이 아래(주력)
            isGeomagneticModeOn && currentDirection == Direction.WEST -> binding.bottomButtonRow to binding.topButtonRow
            // 지자계 ON & 동쪽 방향(RTL) -> 짝수 행이 아래(주력)
            isGeomagneticModeOn && currentDirection == Direction.EAST -> binding.topButtonRow to binding.bottomButtonRow
            // 그 외 모든 경우 (지자계 OFF 등) -> 기본값 (홀수 위, 짝수 아래)
            else -> binding.topButtonRow to binding.bottomButtonRow
        }

        // 💡 방향에 따른 정렬 방식 결정
        val isRtl = isGeomagneticModeOn && currentDirection == Direction.EAST

        for (i in 1..count) {
            val button = createPageButton(i, buttonParams.also { it.height = buttonHeight })
            if (i % 2 != 0) { // 홀수 버튼
                if (isRtl) oddRowContainer.addView(button, 0) else oddRowContainer.addView(button)
            } else { // 짝수 버튼
                if (isRtl) evenRowContainer.addView(button, 0) else evenRowContainer.addView(button)
            }
            currentButtons.add(button)
        }
    }


    private fun createPageButton(number: Int, layoutParams: LinearLayout.LayoutParams? = null): Button {
        return Button(this).apply {
            text = number.toString(); tag = number
            layoutParams?.let { this.layoutParams = it }
            textSize = 20f; typeface = Typeface.DEFAULT_BOLD
            setOnTouchListener { view, event ->
                tappedButton = view as Button
                gestureDetector.onTouchEvent(event)
                true
            }
        }
    }

    // ... (updateAllButtonStyles 이하 모든 함수는 이전과 동일합니다)
    private fun updateAllButtonStyles() { if (isGeomagneticModeOn) { for (button in currentButtons) { val buttonNumber = button.tag as Int; val isActiveRow = (currentDirection == Direction.WEST && buttonNumber % 2 != 0) || (currentDirection == Direction.EAST && buttonNumber % 2 == 0); when { button == selectedButton -> { button.setBackgroundResource(R.drawable.button_bg_geo_selected); button.setTextColor(ContextCompat.getColor(this, android.R.color.white)) } skippedButtons.contains(buttonNumber) -> { button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark); button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray)) } isActiveRow && mapLogicalToPhysical(buttonNumber) in 1..totalPdfPages -> { button.setBackgroundResource(R.drawable.button_bg_geo_active); button.setTextColor(ContextCompat.getColor(this, android.R.color.black)) } else -> { button.setBackgroundResource(R.drawable.button_bg_page_normal); button.setTextColor(ContextCompat.getColor(this, android.R.color.black)) } } } } else { for (button in currentButtons) { val buttonNumber = button.tag as Int; if (button == selectedButton) { button.setBackgroundResource(R.drawable.button_bg_page_selected); button.setTextColor(ContextCompat.getColor(this, android.R.color.black)); continue }; when { skippedButtons.contains(buttonNumber) -> { button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark); button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray)) } else -> { val physicalPage = mapLogicalToPhysical(buttonNumber); if (physicalPage in 1..totalPdfPages) { button.setBackgroundResource(R.drawable.button_bg_page_normal); button.setTextColor(ContextCompat.getColor(this, android.R.color.black)) } else { button.setBackgroundResource(R.drawable.button_border_invalid); button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray)) } } } } } }
    private fun mapLogicalToPhysical(logicalButtonNum: Int): Int { val skipsBefore = skippedButtons.count { it < logicalButtonNum }; return logicalButtonNum - skipsBefore }
    private fun onPageButtonClick(button: Button) { val buttonNumber = button.tag as Int; if (skippedButtons.contains(buttonNumber)) { Toast.makeText(this, "$buttonNumber 페이지는 스킵되었습니다.", Toast.LENGTH_SHORT).show(); return }; val physicalPage = mapLogicalToPhysical(buttonNumber); if (physicalPage in 1..totalPdfPages) { binding.pdfView.jumpTo(physicalPage - 1, false); selectedButton = button; updateAllButtonStyles() } else { Toast.makeText(this, "내용이 없는 페이지입니다.", Toast.LENGTH_SHORT).show() } }
    private fun onPageButtonLongClick(view: View) { val button = view as Button; val buttonNumber = button.tag as Int; if (skippedButtons.contains(buttonNumber)) { skippedButtons.remove(buttonNumber); Toast.makeText(this, "$buttonNumber 페이지 스킵 해제", Toast.LENGTH_SHORT).show() } else { skippedButtons.add(buttonNumber); Toast.makeText(this, "$buttonNumber 페이지 스킵 설정", Toast.LENGTH_SHORT).show(); if (selectedButton == button) { selectedButton = null } }; updateButtonsAndUI() }
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}
    override fun onSensorChanged(event: SensorEvent) { if (event.sensor.type == Sensor.TYPE_ACCELEROMETER) { System.arraycopy(event.values, 0, accelerometerReading, 0, accelerometerReading.size) } else if (event.sensor.type == Sensor.TYPE_MAGNETIC_FIELD) { System.arraycopy(event.values, 0, magnetometerReading, 0, magnetometerReading.size) }; SensorManager.getRotationMatrix(rotationMatrix, null, accelerometerReading, magnetometerReading); SensorManager.getOrientation(rotationMatrix, orientationAngles); val azimuthInDegrees = Math.toDegrees(orientationAngles[0].toDouble()).toFloat(); val normalizedAzimuth = (azimuthInDegrees + 360) % 360; binding.compassView.updateBearing(normalizedAzimuth); if (isGeomagneticModeOn) { var newDirection = currentDirection; val tolerance = 2.0f; if (normalizedAzimuth in (270f - tolerance)..(270f + tolerance)) { newDirection = Direction.WEST } else if (normalizedAzimuth in (90f - tolerance)..(90f + tolerance)) { newDirection = Direction.EAST }; if (newDirection != currentDirection) { currentDirection = newDirection; updateButtonsAndUI() } } }
    private fun dpToPx(dp: Int): Int { return (dp * resources.displayMetrics.density).toInt() }
    private suspend fun loadPdfFromSmbFile(smbFile: SmbFile) { withContext(Dispatchers.Main) { binding.btnOpenFile.isEnabled = false; binding.btnOpenFile.text = "로딩중..." }; try { val tempPdfFile = File(cacheDir, smbFile.name); smbFile.inputStream.use { input -> FileOutputStream(tempPdfFile).use { output -> input.copyTo(output) } }; withContext(Dispatchers.Main) { binding.tvFileName.text = smbFile.name.substringBeforeLast("."); binding.pdfView.fromFile(tempPdfFile).onLoad(this@MainActivity).onPageError(this@MainActivity).load() } } catch (e: Exception) { Log.e("SmbTask", "파일 다운로드 실패", e) } finally { withContext(Dispatchers.Main) { binding.btnOpenFile.isEnabled = true; binding.btnOpenFile.text = "Open ReelList" } } }
    private suspend fun showPdfListFromSmb(){val smbUrl="smb://$SMB_IP/$SMB_SHARED_FOLDER/";try{val properties=Properties();properties["jcifs.smb.client.minVersion"]="SMB300";properties["jcifs.smb.client.maxVersion"]="SMB311";val config=PropertyConfiguration(properties);val cifsContext:CIFSContext=BaseContext(config);val auth=NtlmPasswordAuthenticator(null,SMB_USER,SMB_PASS);val context=cifsContext.withCredentials(auth);val dir=SmbFile(smbUrl,context);val pdfFiles=dir.listFiles{f->f.name.endsWith(".pdf",ignoreCase=true)};if(pdfFiles.isNullOrEmpty()){withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더에 PDF 파일이 없습니다.",Toast.LENGTH_SHORT).show()};return};val fileNames=pdfFiles.map{it.name}.toTypedArray();withContext(Dispatchers.Main){AlertDialog.Builder(this@MainActivity).setTitle("PDF 파일 선택").setItems(fileNames){_,which->val selectedFile=pdfFiles[which];lifecycleScope.launch(Dispatchers.IO){loadPdfFromSmbFile(selectedFile)}}.setNegativeButton("취소",null).show()}}catch(e:Exception){Log.e("SmbTask","SMB 연결 실패",e);withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더 연결 실패\n오류: ${e.message}",Toast.LENGTH_LONG).show()}}}