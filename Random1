이제 명확하게 이해했습니다. **FunctionNames**는 **ObservableCollection<string>**로, 각 함수의 이름을 관리하고 있었고, 이를 AddFunction 호출 시 함께 추가하고 싶으셨던 것 같습니다. 이때, 함수 이름을 **FunctionTasks**와 **FunctionNames**에 함께 추가하여 도형에 바인딩된 툴팁에서 함수 이름을 표시하는 구조를 유지하려고 하셨던 것이죠.

아래는 **FunctionNames**와 **FunctionTasks**를 함께 관리하는 코드와 XAML에 도형의 툴팁으로 함수 이름을 표시하는 전체 흐름을 설명하겠습니다.

해결 방안:
AddFunction 호출 시 **FunctionTasks**와 **FunctionNames**에 함수와 함수 이름을 함께 추가합니다.
FunctionNames를 XAML의 **ToolTip**에 바인딩하여 각 도형에 해당 함수 이름을 표시합니다.
1. TaskModel 코드 수정
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 함수와 도형 상태 컬렉션
    public List<Func<Task>> FunctionTasks { get; set; } // 비동기 함수 리스트
    public ObservableCollection<string> FunctionNames { get; set; } // 함수 이름 리스트
    public ObservableCollection<Brush> FunctionStatusColors { get; set; } // 도형 상태 리스트

    public string Status { get; set; }
    public ICommand ResumeCommand { get; }

    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;
        _taskQueue = taskQueue;

        // 리스트 초기화
        FunctionTasks = new List<Func<Task>>();
        FunctionNames = new ObservableCollection<string>();
        FunctionStatusColors = new ObservableCollection<Brush>();

        Status = "Pending";
        ResumeCommand = new RelayCommand(ResumeTask);

        // 함수 추가 (예시)
        AddFunction("Task A", ExecuteTaskA);
        AddFunction("Task B", ExecuteTaskB);
        AddFunction("Task C", ExecuteTaskC);
    }

    /// <summary>
    /// 함수를 추가하고 함수 이름과 도형 색상을 함께 관리합니다.
    /// </summary>
    public void AddFunction(string functionName, Func<Task> task)
    {
        FunctionTasks.Add(task); // 함수 추가
        FunctionNames.Add(functionName); // 함수 이름 추가
        FunctionStatusColors.Add(Brushes.Gray); // 기본 도형 상태
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    public async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.SkyBlue; // 실행 중
            });

            await FunctionTasks[i]();  // 비동기 작업 실행

            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green; // 완료됨
            });
        }
        Status = "Completed";
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
2. XAML에서 도형과 ToolTip 바인딩
xml
코드 복사
<ItemsControl ItemsSource="{Binding FunctionStatusColors}">
    <ItemsControl.ItemTemplate>
        <DataTemplate>
            <!-- 도형 (Ellipse) -->
            <Ellipse Width="30" Height="30" Fill="{Binding}">
                <Ellipse.ToolTip>
                    <TextBlock Text="{Binding DataContext.FunctionNames[ItemsControl.AlternationIndex], 
                                      RelativeSource={RelativeSource AncestorType=ItemsControl}}" />
                </Ellipse.ToolTip>
            </Ellipse>
        </DataTemplate>
    </ItemsControl.ItemTemplate>
</ItemsControl>
설명:
FunctionTasks: 비동기 작업 함수들이 들어갑니다.
FunctionNames: 각 함수의 이름을 저장하여 ToolTip으로 표시할 때 사용합니다.
FunctionStatusColors: 각 함수의 상태를 색상으로 표현합니다.
AddFunction: 함수를 추가할 때 함수 이름, 비동기 작업, 기본 도형 색상을 함께 관리합니다.
ToolTip: **FunctionNames**의 AlternationIndex 값을 사용하여 ToolTip에 함수 이름을 표시합니다.
결론:
이제 AddFunction 메서드를 통해 함수를 추가할 때 함수 이름도 함께 추가할 수 있습니다.
ToolTip에서 각 도형 위에 마우스를 올리면 해당 도형에 연결된 함수 이름을 툴팁으로 표시할 수 있게 됩니다.