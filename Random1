PF에서 ViewModel을 사용하여 파일 감시 작업을 수행하고, 프로그램이 예기치 않게 종료되더라도 마지막으로 읽은 줄을 저장하기 위해 MVVM 패턴에 맞춰 코드를 수정해드리겠습니다. 이를 위해 다음과 같은 방법을 적용할 수 있습니다:

ViewModel에서 파일 감시와 상태 저장: FileSystemWatcher와 파일 감시 작업을 ViewModel로 옮겨 관리하고, 프로그램 종료 시 마지막 읽은 줄을 저장하는 로직을 구현합니다.
ViewModel에서 INotifyPropertyChanged 구현: WPF에서 바인딩이 가능하도록 INotifyPropertyChanged를 구현하여 UI와 ViewModel이 데이터를 주고받을 수 있도록 합니다.
Application.Exit 이벤트 처리: 프로그램이 종료될 때 마지막 상태를 저장하기 위해 Application.Exit 이벤트를 활용합니다.
수정된 WPF ViewModel 코드
csharp
코드 복사
using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.ComponentModel;
using System.Windows;

namespace LogFileWatcher.ViewModels
{
    public class FileWatcherViewModel : INotifyPropertyChanged
    {
        private FileSystemWatcher _watcher;
        private readonly string _folderPath = @"C:\G-MES2.0\GUMI_WEB\log"; // 로그 파일이 있는 폴더 경로
        private readonly string _positionFolderPath = @"C:\G-MES2.0\GUMI_WEB\log_positions"; // 마지막 줄 위치를 저장할 폴더
        private readonly string[] _keywords = { "FST", "FNL", "PLAN" };  // 감지할 키워드 목록
        private Dictionary<string, int> _fileLinePositions = new Dictionary<string, int>();  // 파일별 마지막 읽은 줄 저장

        public event PropertyChangedEventHandler PropertyChanged;

        public FileWatcherViewModel()
        {
            LoadLastPositions();  // 프로그램 시작 시 마지막 읽은 위치 로드
            SetupWatcher();
            Application.Current.Exit += OnExit;  // 프로그램 종료 시 이벤트 처리
        }

        // 마지막으로 읽은 줄 번호를 파일로부터 로드하는 메서드
        private void LoadLastPositions()
        {
            if (!Directory.Exists(_positionFolderPath))
            {
                Directory.CreateDirectory(_positionFolderPath);
            }

            var positionFiles = Directory.GetFiles(_positionFolderPath, "*.txt");
            foreach (var positionFile in positionFiles)
            {
                string fileName = Path.GetFileNameWithoutExtension(positionFile);
                if (int.TryParse(File.ReadAllText(positionFile), out int lastLine))
                {
                    _fileLinePositions[fileName] = lastLine;
                }
            }
        }

        // 마지막으로 읽은 줄 번호를 저장하는 메서드
        private void SaveLastPosition(string fileName, int lastLine)
        {
            string positionFilePath = Path.Combine(_positionFolderPath, fileName + ".txt");
            File.WriteAllText(positionFilePath, lastLine.ToString());
        }

        // FileSystemWatcher 설정
        private void SetupWatcher()
        {
            _watcher = new FileSystemWatcher
            {
                Path = _folderPath,  // 감시할 폴더 경로 설정
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName,  // 파일 이름과 파일 변경 시 감지
                Filter = "*.log",  // .log 확장자 파일만 감지
                EnableRaisingEvents = true,  // 이벤트 활성화
                IncludeSubdirectories = false  // 하위 폴더는 감지하지 않음
            };

            _watcher.Created += OnChanged;
            _watcher.Changed += OnChanged;
        }

        // 파일이 생성되거나 변경되었을 때 호출되는 이벤트 핸들러
        private void OnChanged(object sender, FileSystemEventArgs e)
        {
            string fileName = Path.GetFileName(e.FullPath);
            string pattern = @"^\d{1,3}(\.\d{1,3}){3}_M4OI[A-Za-z0-9]+_gumi[A-Za-z0-9]+_\d{2}\.log$";

            if (Regex.IsMatch(fileName, pattern))
            {
                if (!_fileLinePositions.ContainsKey(fileName))
                {
                    _fileLinePositions[fileName] = 0;
                }

                CheckFileForKeywords(e.FullPath, fileName);
            }
        }

        // 변경된 파일의 내용을 읽고 특정 키워드(FST, FNL, PLAN)가 있는지 확인하는 메서드
        private void CheckFileForKeywords(string filePath, string fileName)
        {
            try
            {
                int lastReadLine = _fileLinePositions[fileName];  // 마지막 읽은 줄 번호
                int currentLineNumber = 0;

                using (StreamReader reader = new StreamReader(filePath))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        currentLineNumber++;

                        if (currentLineNumber > lastReadLine)
                        {
                            foreach (var keyword in _keywords)
                            {
                                if (line.Contains(keyword))
                                {
                                    Console.WriteLine($"[{fileName}] 특정 문구 발견: {line}");
                                }
                            }

                            _fileLinePositions[fileName] = currentLineNumber;
                        }
                    }
                }

                SaveLastPosition(fileName, _fileLinePositions[fileName]);
            }
            catch (IOException ex)
            {
                Console.WriteLine("파일을 읽는 도중 오류가 발생했습니다: " + ex.Message);
            }
        }

        // 프로그램 종료 시 마지막 상태를 저장하는 메서드
        private void OnExit(object sender, ExitEventArgs e)
        {
            foreach (var kvp in _fileLinePositions)
            {
                SaveLastPosition(kvp.Key, kvp.Value);
            }
        }

        // INotifyPropertyChanged 구현
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
주요 수정 사항:
ViewModel로 로직 분리: 파일 감시 및 상태 저장 로직을 FileWatcherViewModel로 이동하여 MVVM 패턴에 맞췄습니다.

프로그램 종료 시 상태 저장:

Application.Current.Exit 이벤트를 활용하여 프로그램 종료 시 마지막으로 읽은 파일 줄 번호를 자동으로 저장합니다.
UI와의 데이터 바인딩: INotifyPropertyChanged를 구현하여 필요한 경우 UI와 데이터 바인딩이 가능하게 했습니다.

View와 연결:
WPF에서는 ViewModel과 View를 연결하여 바인딩할 수 있습니다. 예를 들어, MainWindow.xaml의 DataContext를 ViewModel로 설정합니다.

MainWindow.xaml.cs에서 ViewModel 설정:
csharp
코드 복사
using System.Windows;

namespace LogFileWatcher
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new LogFileWatcher.ViewModels.FileWatcherViewModel();  // ViewModel 설정
        }
    }
}
동작 방식:
파일 감시: FileSystemWatcher가 파일 변경을 감시합니다.
키워드 확인 및 처리: 특정 키워드(FST, FNL, PLAN)가 포함된 줄을 처리하며, 해당 파일의 마지막 줄 정보를 기억합니다.
종료 시 자동 저장: 프로그램이 종료되면 마지막으로 읽은 줄 번호를 기록하여, 프로그램 재시작 시 중복 없이 이어서 작업할 수 있습니다.
이제 WPF의 ViewModel을 활용해 파일 감시 및 프로그램 종료 시 마지막 줄 저장을 처리할 수 있습니다. 추가적인 요청이 있으면 알려주세