nitializefunc 안에서 호출하는 AddFunc 함수가 일반 함수이지만, 이를 비동기로 처리하여 순서대로 실행하도록 만들려면 async/await를 활용하여 처리 순서를 제어할 수 있습니다.

1. AddFunc를 Task 기반으로 변경
기존의 AddFunc를 비동기로 동작하도록 변경하고, 호출 시 반드시 await를 사용하도록 구성합니다.

코드 구현:
csharp
코드 복사
public class TaskModel
{
    private readonly Queue<Func<Task>> _taskQueue = new Queue<Func<Task>>();
    private bool _isExecuting = false;

    // AddFunc 함수 (Task 기반으로 변경)
    public async Task AddFunc(Func<Task> func)
    {
        _taskQueue.Enqueue(func);

        // 순차적으로 실행되도록 처리
        if (!_isExecuting)
        {
            _isExecuting = true;

            while (_taskQueue.Count > 0)
            {
                var taskToExecute = _taskQueue.Dequeue();
                await taskToExecute(); // 대기 후 다음 작업으로 이동
            }

            _isExecuting = false;
        }
    }

    // 테스트용 작업
    public async Task ExampleWork(string message, int delay)
    {
        await Task.Delay(delay);
        Console.WriteLine(message);
    }

    // 초기화 함수
    public async Task InitializeFunc()
    {
        await AddFunc(() => ExampleWork("첫 번째 작업 실행", 1000));
        await AddFunc(() => ExampleWork("두 번째 작업 실행", 2000));
        await AddFunc(() => ExampleWork("세 번째 작업 실행", 500));
    }
}
2. 사용 예제
InitializeFunc 호출 예제:
csharp
코드 복사
public static async Task Main(string[] args)
{
    var taskModel = new TaskModel();

    // InitializeFunc 호출 (AddFunc 순차 실행)
    await taskModel.InitializeFunc();

    Console.WriteLine("모든 작업 완료");
}
출력 결과:
코드 복사
첫 번째 작업 실행
두 번째 작업 실행
세 번째 작업 실행
모든 작업 완료
3. 작업 순서 제어 방식 설명
AddFunc가 일반 함수일 경우:

동작을 바로 실행하여 순서를 제어하기 어렵습니다.
이를 해결하기 위해 Task 기반으로 변경하였고, Queue를 이용해 작업 순서를 보장했습니다.
Task를 활용하여 순차적 실행:

AddFunc 호출 시 내부적으로 대기열(Queue)에 작업을 추가합니다.
작업이 끝난 후 대기열의 다음 작업을 실행하여 순차 처리를 보장합니다.