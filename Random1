네, 그럼요! pm2는 한번 익숙해지면 정말 편리한 도구입니다. 다른 작업을 추가하실 때 참고하실 수 있도록 상세 정보 확인부터 추가, 삭제까지 모든 과정을 아주 상세하게 설명해 드리겠습니다.

## 1. 현재 실행 중인 작업 목록 확인하기 (기본)
가장 먼저, 현재 어떤 작업들이 pm2에 등록되어 있는지 확인해야 합니다. 이 목록을 통해 각 작업의 **id**와 **name**을 알 수 있으며, 이 두 가지 정보가 앞으로 모든 명령어의 기준이 됩니다.

터미널에 아래 명령어를 입력하세요:

Bash

pm2 list
결과 예시:

Bash

┌────┬────────────────────┬──────────┬──────┬───────────┬──────────┬──────────┐
│ id │ name               │ mode     │ pid  │ status    │ restart  │ uptime   │
├────┼────────────────────┼──────────┼──────┼───────────┼──────────┼──────────┤
│ 0  │ server             │ fork     │ 1234 │ online    │ 0        │ 2h       │
│ 1  │ another-api        │ fork     │ 5678 │ online    │ 3        │ 15m      │
└────┴────────────────────┴──────────┴──────┴───────────┴──────────┴──────────┘
여기서 id는 0, name은 server인 것을 확인할 수 있습니다.

## 2. 작업 상세 정보 확인하기 (따라하기 위해)
사용자님께서 원하시는, "다른 작업을 추가할 때 따라하기 위한" 상세 정보를 보는 명령어입니다. pm2 list에서 확인한 id나 name을 사용합니다.

터미널에 아래 명령어를 입력하세요 (id 또는 name 사용):

Bash

# 이름으로 확인하는 방법 (추천)
pm2 show server

# 또는 ID로 확인하는 방법
pm2 show 0
결과 예시 (주요 정보 위주 설명):

Bash

 Describing process with id 0 - name server
┌───────────────────┬──────────────────────────────────────────────────┐
│ status            │ online                                           │
│ name              │ server                                           │
│ id                │ 0                                                │
│ mode              │ fork                                             │
│ pid               │ 1234                                             │
│ uptime            │ 2h                                               │
│ restarts          │ 0                                                │
│ script path       │ /home/ubuntu/light-api/server.js                 │ <--- ★★★ 실행된 스크립트의 전체 경로
│ script args       │ N/A                                              │ <--- 스크립트에 전달된 인자
│ log path          │ /home/ubuntu/.pm2/logs/server-out.log            │ <--- ★★★ 일반 로그 파일 위치
│ error log path    │ /home/ubuntu/.pm2/logs/server-error.log          │ <--- ★★★ 에러 로그 파일 위치
│ out log           │ /home/ubuntu/.pm2/logs/server-out.log            │
│ err log           │ /home/ubuntu/.pm2/logs/server-error.log          │
│ exec interpreter  │ node                                             │ <--- ★★★ 실행에 사용된 인터프리터 (node)
└───────────────────┴──────────────────────────────────────────────────┘
여기서 script path, exec interpreter 등의 정보를 보면, "아, 이 작업은 /home/ubuntu/light-api/server.js 파일을 node로 실행했구나" 하고 정확하게 파악할 수 있습니다. 이 정보를 바탕으로 다른 작업도 똑같이 추가하시면 됩니다.

## 3. 새로운 작업 추가하기
새로운 Node.js 서버를 pm2에 등록하는 방법입니다.

새로운 프로젝트 폴더로 이동합니다.

Bash

cd /home/ubuntu/new-project
pm2 start 명령어로 작업을 추가합니다.

--name 옵션으로 관리하기 쉬운 별명을 꼭 지정해 주는 것이 좋습니다.

Bash

# 'new-api'라는 이름으로 new-server.js 파일을 실행
pm2 start new-server.js --name new-api
pm2 list로 추가되었는지 확인합니다.

Bash

pm2 list
이제 목록에 new-api가 새로 추가된 것을 볼 수 있습니다.

## 4. 기존 작업 삭제하기
더 이상 사용하지 않는 작업을 pm2 목록에서 완전히 제거하는 방법입니다.

주의: stop과 delete는 다릅니다!

pm2 stop <name|id>: 작업을 중지하지만 목록에는 남아있습니다. (나중에 pm2 restart로 다시 켤 수 있음)

pm2 delete <name|id>: 작업을 중지하고 목록에서 완전히 삭제합니다.

new-api 작업을 삭제하는 예시:

Bash

# 1. 삭제할 작업의 이름이나 id를 확인
pm2 list

# 2. delete 명령어로 삭제
pm2 delete new-api

# 3. 삭제되었는지 다시 확인
pm2 list
## 5. (매우 중요) 현재 작업 목록 저장 및 서버 재부팅 시 자동 실행 설정
pm2 start로 작업을 추가해도, 서버를 재부팅하면 모든 작업이 사라집니다. 이를 방지하려면 현재 작업 목록을 저장하고, 부팅 시 자동으로 시작되도록 설정해야 합니다.

이 작업은 최초 한 번만 해주면 됩니다.

Bash

# 1. 현재 pm2에 등록된 작업 목록을 저장합니다. (작업을 추가/삭제할 때마다 실행해주는 것이 좋습니다)
pm2 save

# 2. 서버 부팅 시 pm2를 자동으로 시작하도록 설정 스크립트를 생성합니다.
pm2 startup
```pm2 startup`을 실행하면 `sudo ...`로 시작하는 명령어가 하나 나타나는데, 그것을 그대로 복사해서 터미널에 붙여넣고 실행해 주면 모든 설정이 끝납니다.