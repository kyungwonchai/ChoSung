이터를 사용하는 완전한 코드입니다. **LineItem**과 같은 혼란스러운 이름은 제거하고 명확한 구조로 다시 작성했습니다.

이 코드는 그룹과 라인의 이름만 가져와 계층적으로 표시하고, 체크박스를 동기화하도록 구현했습니다.

XAML 코드
xml
코드 복사
<Window x:Class="TreeListExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="TreeList Example" Height="600" Width="800">
    <Grid>
        <dxg:TreeListControl x:Name="treeListControl"
                             AutoExpandAllNodes="True"
                             AutoGenerateColumns="None"
                             KeyFieldName="Id"
                             ParentFieldName="ParentId"
                             ItemsSource="{Binding TreeData}">
            <dxg:TreeListControl.Columns>
                <!-- 체크박스 -->
                <dxg:TreeListColumn FieldName="IsChecked" Header="선택">
                    <dxg:TreeListColumn.EditSettings>
                        <dxg:CheckEditSettings />
                    </dxg:TreeListColumn.EditSettings>
                </dxg:TreeListColumn>
                <!-- 그룹/라인 이름 -->
                <dxg:TreeListColumn FieldName="Name" Header="구역/라인 이름" />
            </dxg:TreeListControl.Columns>
        </dxg:TreeListControl>
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeListExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<TreeNode> TreeData { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // MSSQL에서 데이터 로드
            LoadTreeData();

            // 체크박스 동기화 이벤트 등록
            treeListControl.CellValueChanged += TreeListControl_CellValueChanged;
        }

        private void LoadTreeData()
        {
            TreeData = new ObservableCollection<TreeNode>();

            string connectionString = "YourConnectionStringHere";
            string query = @"
                SELECT DISTINCT GroupName, LineName
                FROM LineTable
                ORDER BY GroupName, LineName";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    int idCounter = 1; // 노드 ID 관리
                    while (reader.Read())
                    {
                        string groupName = reader.GetString(0);
                        string lineName = reader.GetString(1);

                        // 그룹 추가
                        if (!TreeData.Any(node => node.Name == groupName))
                        {
                            TreeData.Add(new TreeNode
                            {
                                Id = idCounter++,
                                ParentId = 0,
                                Name = groupName,
                                IsChecked = false
                            });
                        }

                        // 라인 추가
                        TreeData.Add(new TreeNode
                        {
                            Id = idCounter++,
                            ParentId = TreeData.First(node => node.Name == groupName).Id,
                            Name = lineName,
                            IsChecked = false
                        });
                    }
                }
            }

            // 데이터 바인딩
            treeListControl.ItemsSource = TreeData;
        }

        private void TreeListControl_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "IsChecked")
            {
                var changedNode = e.Row as TreeNode;
                if (changedNode != null)
                {
                    // 자식 노드 체크 상태 업데이트
                    UpdateChildNodesCheckState(changedNode);

                    // 부모 노드 체크 상태 업데이트
                    UpdateParentNodesCheckState(changedNode);
                }
            }
        }

        private void UpdateChildNodesCheckState(TreeNode parentNode)
        {
            var childNodes = TreeData.Where(node => node.ParentId == parentNode.Id).ToList();
            foreach (var child in childNodes)
            {
                child.IsChecked = parentNode.IsChecked;
                UpdateChildNodesCheckState(child);
            }
        }

        private void UpdateParentNodesCheckState(TreeNode childNode)
        {
            var parentNode = TreeData.FirstOrDefault(node => node.Id == childNode.ParentId);
            if (parentNode != null)
            {
                parentNode.IsChecked = TreeData.Where(node => node.ParentId == parentNode.Id).All(node => node.IsChecked);
                UpdateParentNodesCheckState(parentNode);
            }
        }
    }

    public class TreeNode
    {
        public int Id { get; set; }          // 노드 ID
        public int ParentId { get; set; }    // 부모 노드 ID
        public string Name { get; set; }     // 그룹/라인 이름
        public bool IsChecked { get; set; }  // 체크 상태
    }
}
SQL 테이블 구조
sql
코드 복사
CREATE TABLE LineTable (
    GroupName NVARCHAR(100),  -- 그룹 이름
    LineName NVARCHAR(100)    -- 라인 이름
);

INSERT INTO LineTable (GroupName, LineName)
VALUES 
    ('Group A', 'Line 1.1'),
    ('Group A', 'Line 1.2'),
    ('Group B', 'Line 2.1'),
    ('Group B', 'Line 2.2');
핵심 변경 사항
모델 명확화:

TreeNode로 데이터 모델을 단순화하여 그룹과 라인을 같은 데이터 구조로 관리합니다.
데이터 로드:

GroupName과 LineName만 가져와서 트리 구조를 형성합니다.
그룹은 ParentId = 0으로 설정하고, 각 라인은 해당 그룹의 ID를 ParentId로 참조합니다.
체크박스 동기화:

CellValueChanged 이벤트를 통해 자식 노드와 부모 노드의 체크 상태를 동기화합니다.
SQL 데이터 처리:

MSSQL에서 데이터를 가져와 중복 없이 그룹화합니다.
결과
TreeListControl에 그룹과 라인이 계층적으로 표시됩니다.
체크박스 동기화:
그룹 체크박스를 선택하면 해당 그룹의 모든 라인이 선택됩니다.