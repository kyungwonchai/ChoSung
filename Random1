두 가지 문제 모두 전형적인 WPF 윈도우 컨트롤 문제입니다. 원인을 정확히 파악하고 해결할 수 있습니다.

문제 원인 분석
"영역설정 누르면... 작업표시줄의 그 창 눌러야되며" (포커스 문제)

원인: 메인 창(MainWindow)을 최소화(WindowState.Minimized) 시키면 프로그램 자체가 포커스를 잃게 됩니다. 이 상태에서 새 창(SelectionWindow)을 띄우면, 운영체제는 이 새 창에 즉시 포커스를 주지 못하고 작업 표시줄에만 표시하는 경우가 많습니다.
해결책: 메인 창을 최소화하는 대신, 눈에 보이지 않게 숨기는 Visibility = Visibility.Hidden 속성을 사용합니다. 이렇게 하면 프로그램의 포커스는 유지된 상태로 새 창이 뜨기 때문에 바로 활성화됩니다.
"선택이 안되요 영역이 클릭이 안먹힘" (마우스 이벤트 문제)

원인: 이것은 WPF의 투명도와 관련된 매우 흔한 문제입니다. Canvas의 기본 배경(Background)은 null(아무것도 없는 상태)입니다. 눈에는 투명하게 보이지만, 시스템 입장에서는 '비어있는 공간'으로 인식하여 마우스 클릭을 통과시켜 버립니다. 따라서 Canvas에 마우스 이벤트가 전달되지 않습니다.
해결책: Canvas에 마우스 클릭을 받게 하려면, '투명한 색'의 브러시를 배경으로 지정해야 합니다. Background="Transparent" 속성을 추가하면, 눈에는 똑같이 투명하게 보이지만 시스템은 이를 '클릭 가능한 투명한 영역'으로 인지하여 마우스 이벤트를 정상적으로 처리합니다.
해결 방법 적용
아래의 2가지 코드만 수정하시면 두 문제가 모두 해결됩니다.

1. SelectionWindow.xaml 수정
Canvas가 마우스 입력을 받을 수 있도록 Background="Transparent" 속성을 추가합니다.

SelectionWindow.xaml 파일을 열고 <Canvas ... /> 부분을 아래와 같이 수정하세요.

기존 코드:

XML

<Canvas x:Name="SelectionCanvas" MouseDown="SelectionCanvas_MouseDown" MouseMove="SelectionCanvas_MouseMove" MouseUp="SelectionCanvas_MouseUp"/>
수정된 코드:

XML

<Canvas x:Name="SelectionCanvas" Background="Transparent" MouseDown="SelectionCanvas_MouseDown" MouseMove="SelectionCanvas_MouseMove" MouseUp="SelectionCanvas_MouseUp"/>
2. MainWindow.xaml.cs의 btnSelectArea_Click 메소드 수정
메인 창을 최소화하는 대신 숨기고, 새 창을 명시적으로 활성화하도록 코드를 변경합니다.

MainWindow.xaml.cs 파일에서 btnSelectArea_Click 함수를 아래 코드로 통째로 교체해주세요.

기존 코드:

C#

private void btnSelectArea_Click(object sender, RoutedEventArgs e)
{
    IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
    if (hWnd == IntPtr.Zero)
    {
        MessageBox.Show("먼저 유효한 '대상 창 제목'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
        return;
    }

    this.WindowState = WindowState.Minimized; // <<-- 문제의 원인

    var selectionWindow = new SelectionWindow();
    if (selectionWindow.ShowDialog() == true)
    {
        // ... (생략) ...
    }

    this.WindowState = WindowState.Normal; // <<-- 문제의 원인
}
수정된 코드:

C#

private void btnSelectArea_Click(object sender, RoutedEventArgs e)
{
    IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
    if (hWnd == IntPtr.Zero)
    {
        MessageBox.Show("먼저 유효한 '대상 창 제목'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
        return;
    }

    // 1. 메인 창을 최소화 대신 숨김 처리
    this.Visibility = Visibility.Hidden;

    // ShowDialog() 전에 잠시 딜레이를 주어 렌더링 스레드가 숨김 처리를 완료할 시간을 줍니다.
    System.Threading.Thread.Sleep(200);

    var selectionWindow = new SelectionWindow();
    
    // 2. 새 창을 명시적으로 활성화 (선택 사항이지만 안정성을 높여줌)
    selectionWindow.Activate();

    if (selectionWindow.ShowDialog() == true)
    {
        // SelectionWindow에서 반환된 값은 System.Windows.Rect
        System.Windows.Rect screenRect = selectionWindow.SelectedArea;

        GetWindowRect(hWnd, out RECT windowRect);
        int relativeX = (int)screenRect.X - windowRect.Left;
        int relativeY = (int)screenRect.Y - windowRect.Top;

        relativeX = Math.Max(0, relativeX);
        relativeY = Math.Max(0, relativeY);

        txtX.Text = relativeX.ToString();
        txtY.Text = relativeY.ToString();
        txtWidth.Text = ((int)screenRect.Width).ToString();
        txtHeight.Text = ((int)screenRect.Height).ToString();

        UpdatePreviewImage();
    }

    // 3. 메인 창을 다시 보이게 처리
    this.Visibility = Visibility.Visible;
    this.Activate(); // 메인 창으로 포커스 다시 가져오기
}
요약
SelectionWindow.xaml: <Canvas>에 Background="Transparent" 추가.