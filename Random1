터를 순회하며 콘솔에 출력하고 업데이트하는 비동기 C# 코드입니다.

기능 요약
SelectDataAsync():
MySQL에서 ind, barcode, model 데이터를 조회합니다.
조회된 데이터를 List<Tuple<int, string, string>>에 저장하고 콘솔에 출력합니다.
UpdateDataAsync(int ind, string model, int mesreplace):
UPDATE 쿼리를 실행합니다.
await을 사용하여 비동기 실행이 끝나기 전에 다른 함수가 실행되지 않도록 합니다.
Main()에서 조회된 모든 데이터를 순회하면서 업데이트를 실행합니다.
C# 코드 (MySQL 데이터 조회 및 전체 업데이트)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
using MySql.Data.MySqlClient;

class Program
{
    private static string connectionString = "server=localhost;port=3306;database=your_db;user=your_user;password=your_password;";

    static async Task Main(string[] args)
    {
        // 1. 데이터 조회
        var dataList = await SelectDataAsync();

        // 2. 조회된 모든 데이터를 순회하면서 업데이트 실행
        foreach (var data in dataList)
        {
            int ind = data.Item1;
            string barcode = data.Item2;
            string model = data.Item3;

            Console.WriteLine($"[처리 중] ind: {ind}, barcode: {barcode}, model: {model}");

            // 3. 비동기 업데이트 실행
            await UpdateDataAsync(ind, "ffff", 1);
        }

        Console.WriteLine("모든 데이터 업데이트 완료!");
    }

    /// <summary>
    /// MySQL에서 데이터를 조회하는 비동기 함수
    /// </summary>
    private static async Task<List<Tuple<int, string, string>>> SelectDataAsync()
    {
        var dataList = new List<Tuple<int, string, string>>();

        using (MySqlConnection conn = new MySqlConnection(connectionString))
        {
            await conn.OpenAsync();

            string query = "SELECT ind, barcode, model FROM abc WHERE intime > '2024-06-01' AND modelch IS NULL ORDER BY ind";

            using (MySqlCommand cmd = new MySqlCommand(query, conn))
            using (MySqlDataReader reader = (MySqlDataReader)await cmd.ExecuteReaderAsync())
            {
                while (await reader.ReadAsync())
                {
                    int ind = reader.GetInt32(0);
                    string barcode = reader.GetString(1);
                    string model = reader.IsDBNull(2) ? "NULL" : reader.GetString(2);

                    dataList.Add(new Tuple<int, string, string>(ind, barcode, model));
                }
            }
        }

        // 콘솔 출력
        Console.WriteLine("조회된 데이터:");
        foreach (var data in dataList)
        {
            Console.WriteLine($"ind: {data.Item1}, barcode: {data.Item2}, model: {data.Item3}");
        }

        return dataList;
    }

    /// <summary>
    /// MySQL에서 특정 ind 값을 업데이트하는 비동기 함수
    /// </summary>
    private static async Task UpdateDataAsync(int ind, string model, int mesreplace)
    {
        using (MySqlConnection conn = new MySqlConnection(connectionString))
        {
            await conn.OpenAsync();

            string query = "UPDATE abc SET model = @model, mesreplace = @mesreplace WHERE ind = @ind";

            using (MySqlCommand cmd = new MySqlCommand(query, conn))
            {
                cmd.Parameters.AddWithValue("@model", model);
                cmd.Parameters.AddWithValue("@mesreplace", mesreplace);
                cmd.Parameters.AddWithValue("@ind", ind);

                int rowsAffected = await cmd.ExecuteNonQueryAsync();
                Console.WriteLine($"[업데이트 완료] ind={ind}, 변경된 행: {rowsAffected}");
            }
        }
    }
}
실행 흐름
데이터 조회 (SelectDataAsync())
MySQL에서 ind, barcode, model을 조회
List<Tuple<int, string, string>>에 저장
모든 데이터를 콘솔에 출력
조회된 모든 데이터를 foreach로 순회
ind, barcode, model을 출력
UpdateDataAsync()를 실행하여 데이터 업데이트
비동기 업데이트 (UpdateDataAsync())
UPDATE abc SET model='ffff', mesreplace=1 WHERE ind=?
await을 사용하여 업데이트가 완료될 때까지 대기
콘솔에 업데이트 성공 메시지 출력
실행 결과 예시
yaml
코드 복사
조회된 데이터:
ind: 12445, barcode: ABC123, model: NULL
ind: 12446, barcode: XYZ789, model: TEST1
ind: 12447, barcode: LMN456, model: TEST2

[처리 중] ind: 12445, barcode: ABC123, model: NULL
[업데이트 완료] ind=12445, 변경된 행: 1

[처리 중] ind: 12446, barcode: XYZ789, model: TEST1
[업데이트 완료] ind=12446, 변경된 행: 1

[처리 중] ind: 12447, barcode: LMN456, model: TEST2
[업데이트 완료] ind=12447, 변경된 행: 1

모든 데이터 업데이트 완료!
특징 및 최적화
비동기 await 처리:

await를 사용하여 하나의 업데이트가 끝난 후 다음 데이터를 처리하도록 보장.
병렬 처리가 필요하면 Task.WhenAll()을 활용 가능 (현재는 순차 실행).
데이터 누락 없이 전체 처리:

foreach로 List<Tuple<int, string, string>>에 저장된 모든 데이터를 순회하여 업데이트.
MySQL 드라이버 최적화:

MySqlCommand.Parameters.AddWithValue()를 사용하여 SQL 인젝션 방지.
추가 개선 가능 사항
병렬 업데이트 (성능 개선)
만약 데이터를 병렬로 업데이트하고 싶다면 foreach 대신 Task.WhenAll()을 활용할 수 있음.

csharp
코드 복사
await Task.WhenAll(dataList.Select(data => UpdateDataAsync(data.Item1, "ffff", 1)));
await을 걸어주면 모든 업데이트가 병렬 실행됨 (속도 증가).
로그 파일 저장
업데이트된 데이터를 로그 파일로 저장하는 기능 추가 가능.

csharp
코드 복사
System.IO.File.AppendAllText("log.txt", $"Updated ind={ind}, model=ffff, time={DateTime.Now}\n");
정리
✅ MySQL에서 데이터를 조회하고 전체 순회
✅ foreach로 모든 데이터 출력 후 순차적 업데이트
✅ 비동기 처리 (await)로 업데이트 완료 후 다음 작업 실행
✅ SQL Injection 방지 및 로그 출력 추가 가능