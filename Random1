에만 값에 따라 색상을 적용해야 하는 경우, innerHTML을 사용하면서도 동적으로 색상을 설정할 수 있습니다. 아래는 코드와 함께 상세 설명을 제공합니다.

HTML 파일 (수정된 index.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dynamic Table</title>
    <style>
        table {
            width: 50%;
            border-collapse: collapse;
            margin: 20px auto;
        }
        th, td {
            border: 1px solid #ddd;
            text-align: center;
            padding: 8px;
        }
        th {
            background-color: #f4f4f4;
        }
        .yellow {
            background-color: yellow;
        }
        .orange {
            background-color: orange;
        }
    </style>
</head>
<body>
    <table>
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>CPAPER</th>
            </tr>
        </thead>
        <tbody id="table-body">
            <!-- 데이터가 여기에 추가됩니다 -->
        </tbody>
    </table>

    <script>
        // 서버에서 전달된 데이터
        const data = {{ data | tojson }};

        // 테이블 본문 요소 가져오기
        const tableBody = document.getElementById("table-body");

        // 데이터 순회
        data.forEach(row => {
            // 각 행 생성
            const tr = document.createElement('tr');

            // 행의 HTML 내용 설정
            tr.innerHTML = `
                <td>${row.id}</td>
                <td>${row.name}</td>
                <td id="cpaper-cell">${row.CPAPER}</td>
            `;

            // CPAPER 셀 가져오기
            const cpaperCell = tr.querySelector('#cpaper-cell');

            // CPAPER 값에 따라 색상 클래스 적용
            if (row.CPAPER > 20) {
                cpaperCell.classList.add('orange');
            } else if (row.CPAPER <= 0) {
                cpaperCell.classList.add('yellow');
            }

            // 완성된 행을 테이블 본문에 추가
            tableBody.appendChild(tr);
        });
    </script>
</body>
</html>
변경 사항 상세 설명
테이블 행 동적 생성

tr.innerHTML을 사용하여 테이블 행에 필요한 HTML을 문자열 템플릿으로 작성합니다.
템플릿 문자열 내에 데이터를 ${row.id}, ${row.name}, ${row.CPAPER} 형태로 삽입하여 가독성을 높였습니다.
CPAPER 셀에 ID 지정

id="cpaper-cell"을 셀에 추가하여 셀을 쉽게 선택할 수 있도록 했습니다.
querySelector를 사용해 행 내부의 #cpaper-cell 셀을 가져옵니다.
값에 따른 색상 적용

CPAPER 값을 조건에 따라 확인(if, else if).
조건에 따라 classList.add()를 사용하여 yellow 또는 orange 클래스를 동적으로 적용합니다.
classList.add()는 CSS 클래스를 동적으로 추가하므로, 기존 구조를 깨뜨리지 않고 스타일 변경이 가능합니다.
완성된 행 추가

tableBody.appendChild(tr)를 사용해 생성된 행을 테이블 본문에 추가합니다.
코드 실행 과정
Flask 서버는 JSON 데이터(data)를 HTML 템플릿으로 전달합니다.
JavaScript는 데이터를 순회하며 각 행(<tr>)을 생성하고, 데이터를 채워 넣습니다.
생성된 각 행에서 CPAPER 값에 따라 해당 셀에 CSS 클래스를 적용하여 색상을 변경합니다.
CPAPER > 20: orange 클래스 (주황색)
CPAPER <= 0: yellow 클래스 (노란색)
완성된 테이블은 브라우저 화면에 표시됩니다.
장점
innerHTML을 사용하므로 가독성이 높아지고 코드를 간결하게 유지.