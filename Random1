송합니다. 제가 실수로 원래 제공했던 코드와 다른 부분을 제시해 드렸습니다. 원래 코드와의 일관성을 유지하며, 수정 사항을 반영한 MainWindow.xaml.cs와 SerialPortManager.cs 전체 코드를 제공하겠습니다. 특히, 이벤트 핸들러 등록 및 필요한 모든 로직이 포함되도록 하겠습니다.

1. MainWindow.xaml.cs (전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer; // 소켓 서버 인스턴스
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                // 설정 관리 클래스 초기화
                settingsManager = SettingsManager.Instance;

                // 소켓 서버 초기화
                socketServer = SocketServer.Instance;
                if (socketServer == null)
                {
                    throw new InvalidOperationException("소켓 서버 인스턴스를 초기화할 수 없습니다.");
                }
                socketServer.DataReceived += OnSocketDataReceived;

                // 시리얼 포트 매니저 초기화
                serialPortManager = new SerialPortManager();
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저를 초기화할 수 없습니다.");
                }

                // IP 주소 가져오기 및 표시
                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                // 포트 선택 콤보박스 초기화
                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                // 포트 및 설정 불러오기
                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                // 스캐너 및 타겟 포트 설정 초기화
                InitializePortSettings();
                LoadLastUsedPorts();

                // QR 코드 생성
                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                // 포트 목록 갱신
                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedPort = PortComboBox.SelectedItem?.ToString() ?? "20000";

                if (int.TryParse(selectedPort, out int portNumber))
                {
                    if (socketServer != null)
                    {
                        socketServer.Start(portNumber); // 포트 번호 변경 시 소켓 서버 재시작
                        settingsManager.SaveSetting("Port", selectedPort);
                    }
                    else
                    {
                        LogMessage("소켓 서버 인스턴스가 초기화되지 않았습니다.");
                    }
                }
                else
                {
                    LogMessage($"포트 번호가 유효하지 않습니다: {selectedPort}");
                }

                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저가 초기화되지 않았습니다.");
                }

                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    serialPortManager.CloseScannerPort();
                }

                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), 
                    (Parity)Enum.Parse(typeof(Parity), parity), 
                    int.Parse(dataBits), 
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                // 스캐너 포트의 DataReceived 이벤트 핸들러 설정
                serialPortManager.ScannerPort.DataReceived += ScannerPort_DataReceived;

                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {portName} 접근 권한이 없습니다: {ex.Message}");
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {portName}에서 I/O 오류 발생: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    string data = serialPortManager.ScannerPort.ReadExisting();

                    // 타겟 포트로 데이터 전송
                    serialPortManager.SendData(data);

                    // 로그에 데이터 기록
                    Dispatcher.Invoke(() => LogMessage($"스캐너 포트에서 받은 데이터: {data}"));
                }
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"스캐너 포트 데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem != null)
                {
                    string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                    string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                    string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                    string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                    string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                    OpenScannerPort(selectedPort, baudRate, parity, dataBits, stopBits);

                    // 설정 저장
                    settingsManager.SaveSetting("LastUsedScannerPort", selectedPort);
                    settingsManager.SaveSetting("ScannerBaudRate", baudRate);
                    settingsManager.SaveSetting("ScannerParity", parity);
                    settingsManager.SaveSetting("ScannerDataBits", dataBits);
                    settingsManager.SaveSetting("ScannerStopBits", stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                string[] portNames = SerialPort.GetPortNames();

                ScannerPortComboBox.ItemsSource = portNames;

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
2. SerialPortManager.cs (전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Collections.Generic;

namespace ScanValueTrans
{
    public class SerialPortManager
    {
        public SerialPort ScannerPort { get; private set; }
        public List<SerialPort> TargetPorts { get; private set; }

        public SerialPortManager()
        {
            TargetPorts = new List<SerialPort>();
        }

        public void OpenScannerPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            try
            {
                ScannerPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
                ScannerPort.Open();
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        public void CloseScannerPort()
        {
            try
            {
                if (ScannerPort != null && ScannerPort.IsOpen)
                {
                    ScannerPort.Close();
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"스캐너 포트 닫는 중 오류 발생: {ex.Message}");
            }
        }

        public void AddTargetPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            try
            {
                SerialPort targetPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
                targetPort.Open();
                TargetPorts.Add(targetPort);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"타겟 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        public void CloseTargetPorts()
        {
            foreach (var port in TargetPorts)
            {
                try
                {
                    if (port != null && port.IsOpen)
                    {
                        port.Close();
                    }
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException($"타겟 포트 닫는 중 오류 발생: {ex.Message}");
                }
            }
        }

        public void SendData(string data)
        {
            foreach (var port in TargetPorts)
            {
                if (port != null && port.IsOpen)
                {
                    try
                    {
                        port.WriteLine(data);
                    }
                    catch (Exception ex)
                    {
                        throw new InvalidOperationException($"타겟 포트로 데이터 전송 중 오류 발생: {ex.Message}");
                    }
                }
            }
        }
    }
}
요약
위의 코드가 스캐너 포트에서 데이터를 읽고, 이를 미리 설정한 타겟 포트로 전송하며, 발생한 모든 이벤트를 로그에 기록할 수 있도록 수정되었습니다. 추가적으로 문제가 발생