buntu에서 C, C++ 14버전으로 개발 환경을 설정하고 GCC 10.3.0 및 G++ 10.3.0을 설치하는 과정을 설명하겠습니다. 마지막으로 VSCode에서 SSH를 통해 개발할 수 있도록 설정까지 안내드리겠습니다.

1. Ubuntu 환경에서 GCC/G++ 10.3.0 설치
기본 패키지 업데이트 및 필수 패키지 설치

bash
코드 복사
sudo apt update
sudo apt upgrade -y
sudo apt install -y build-essential software-properties-common
GCC/G++ 10.3.0 설치를 위한 Toolchain 추가 GCC 10.3.0은 Ubuntu의 기본 저장소에 포함되지 않을 수 있으므로 PPA를 추가해야 합니다.

bash
코드 복사
sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
sudo apt update
GCC/G++ 10.3.0 설치

bash
코드 복사
sudo apt install -y gcc-10 g++-10
기본 GCC/G++ 버전을 10.3.0으로 설정 여러 버전의 GCC/G++이 설치되어 있는 경우 기본 버전을 설정해야 합니다.

bash
코드 복사
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100
sudo update-alternatives --config gcc
sudo update-alternatives --config g++
위 명령을 실행하면 설치된 GCC/G++ 버전 목록이 표시됩니다. 원하는 버전 (10.3.0)을 선택하세요.

GCC/G++ 설치 및 버전 확인

bash
코드 복사
gcc --version
g++ --version
출력에 gcc (Ubuntu 10.3.0 ...)와 같이 표시되면 성공적으로 설치된 것입니다.

2. C, C++ 14 표준 사용 설정
GCC/G++에서 C++14 표준을 사용하도록 컴파일러 플래그를 추가하세요:

C 파일: gcc -std=c11 your_file.c -o your_program
C++ 파일: g++ -std=c++14 your_file.cpp -o your_program
CMake를 사용하는 경우, CMakeLists.txt에 아래와 같이 설정:

cmake
코드 복사
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
3. VSCode 설치 및 SSH 개발 환경 설정
VSCode 설치 로컬 PC에서 VSCode 다운로드 페이지로 이동하여 설치합니다.

SSH 확장 프로그램 설치 VSCode를 열고, Extensions(확장) 메뉴에서 Remote - SSH를 검색하여 설치합니다.

Ubuntu 서버에 SSH 설정 Ubuntu에서 SSH 서버를 설치하고 실행합니다.

bash
코드 복사
sudo apt install -y openssh-server
sudo systemctl enable ssh
sudo systemctl start ssh
SSH 상태 확인:

bash
코드 복사
sudo systemctl status ssh
VSCode에서 SSH 연결

VSCode 왼쪽 하단의 >< 아이콘(원격 접속)을 클릭합니다.
Connect to Host를 선택한 후 ssh username@your-server-ip를 입력합니다.
암호를 입력하고 연결합니다.
GCC/G++ 빌드 환경 설정 SSH 연결 후 VSCode의 터미널에서 GCC와 G++이 제대로 설치되었는지 확인하세요:

bash
코드 복사
gcc --version
g++ --version
4. 디버깅 및 빌드 설정
C/C++ 확장 설치 VSCode Extensions에서 C/C++ 확장을 설치합니다.

빌드 및 디버그 설정 파일 생성 프로젝트 폴더에서 tasks.json 및 launch.json 파일을 설정합니다.

tasks.json:
json
코드 복사
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Build C++",
      "type": "shell",
      "command": "g++",
      "args": [
        "-std=c++14",
        "-g",
        "${file}",
        "-o",
        "${fileDirname}/${fileBasenameNoExtension}"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "problemMatcher": ["$gcc"],
      "detail": "Generated task for building C++ files"
    }
  ]
}
launch.json:
json
코드 복사
{
  "version": "0.2.0",
  "configurations": [
    {
      "name": "Debug C++",
      "type": "cppdbg",
      "request": "launch",
      "program": "${fileDirname}/${fileBasenameNoExtension}",
      "args": [],
      "stopAtEntry": false,
      "cwd": "${workspaceFolder}",
      "environment": [],
      "externalConsole": false,
      "MIMode": "gdb",
      "setupCommands": [
        {
          "description": "Enable pretty-printing for gdb",
          "text": "-enable-pretty-printing",
          "ignoreFailures": true
        }
      ],
      "preLaunchTask": "Build C++"
    }
  ]
}
코드 작성 및 실행

새 C++ 파일을 만들고 코드를 작성합니다.
Ctrl+Shift+B로 빌드하고, F5로 디버깅을 시작합니다.