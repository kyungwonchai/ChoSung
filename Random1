네, 알겠습니다. HTML 파일 하나하나 고치는 거 말고, Flask 설정 딱 한 군데만 고쳐서 해결하는 방법 알려드릴게요. Nginx와 함께 쓸 때 가장 정석적이고 쉬운 방법입니다.

ProxyFix 라는 걸 쓰면 됩니다.

## 해결책: ProxyFix로 Flask를 똑똑하게 만들기
이 방법의 핵심은, Nginx가 Flask에게 "너 지금 /service라는 하위 경로로 서비스되고 있어!"라고 알려주고, Flask가 그 말을 알아듣고 스스로 모든 경로(static 파일 등)를 바로잡게 하는 것입니다.

1단계: Flask 앱 수정 (app.py)
Flask 앱 코드에 딱 두 줄만 추가하면 됩니다.

ProxyFix 불러오기: 파일 상단에 from werkzeug.middleware.proxyfix import ProxyFix 를 추가합니다.

ProxyFix 적용하기: app = Flask(__name__) 코드 바로 아래에 app.wsgi_app = ... 코드를 추가합니다.

Python

# app.py

from flask import Flask
# 1. 이 줄을 추가하세요.
from werkzeug.middleware.proxyfix import ProxyFix

app = Flask(__name__)

# 2. 이 줄을 추가하세요. Nginx가 주는 X-Forwarded-Prefix 헤더를 신뢰하라는 뜻입니다.
app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_prefix=1)


@app.route("/")
def index():
    # 이제 HTML 템플릿의 url_for가 자동으로 '/service/static/...' 경로를 생성합니다.
    return render_template("index.html")

# ... 나머지 코드는 그대로 ...
이게 끝입니다. 이제 Flask는 Nginx가 주는 힌트를 알아듣고 똑똑하게 작동합니다.

2단계: Nginx 설정 수정 (alpha-project.conf)
Nginx 설정 파일에는 Flask에게 힌트(X-Forwarded-Prefix)를 주는 코드 한 줄만 추가하면 됩니다.

Nginx

# /etc/nginx/sites-available/alpha-project.conf

location /service/ {
    proxy_pass http://127.0.0.1:8110/;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    
    # 이 줄을 추가하세요! '너의 경로 접두사는 /service야' 라고 알려주는 역할
    proxy_set_header X-Forwarded-Prefix /service;
}
## 최종 정리
Flask 앱(app.py)에 ProxyFix 코드 두 줄 추가.

Nginx의 location /service/ 블록에 proxy_set_header X-Forwarded-Prefix /service; 한 줄 추가.

Flask 앱 서비스 재시작 (sudo systemctl restart your-flask-app.service).

Nginx 설정 리로드 (sudo systemctl reload nginx).