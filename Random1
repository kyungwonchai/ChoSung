Microsoft Interop 라이브러리를 사용하여 PowerPoint, Excel, Word 파일을 처리하고 각 페이지를 이미지로 변환한 후, 이를 하나의 큰 이미지로 합치는 코드는 아래와 같습니다. 이 코드는 Microsoft.Office.Interop 네임스페이스를 사용합니다.

먼저, 프로젝트에 Microsoft.Office.Interop.PowerPoint, Microsoft.Office.Interop.Excel, Microsoft.Office.Interop.Word를 참조로 추가해야 합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Microsoft.Office.Interop.PowerPoint;
using Microsoft.Office.Interop.Excel;
using Microsoft.Office.Interop.Word;
using Application = System.Windows.Forms.Application;
using Image = System.Drawing.Image;

namespace FileToImageConverter
{
    class Program
    {
        [STAThread]
        static void Main(string[] args)
        {
            string filePath = "example.pptx";
            List<Image> images = ConvertFileToImages(filePath);
            Image combinedImage = CombineImages(images);
            SaveImageToClipboard(combinedImage);
        }

        static List<Image> ConvertFileToImages(string filePath)
        {
            List<Image> images = new List<Image>();
            string fileExt = Path.GetExtension(filePath).ToLower();

            switch (fileExt)
            {
                case ".pptx":
                case ".ppt":
                    images = ConvertPptToImages(filePath);
                    break;
                case ".docx":
                case ".doc":
                    images = ConvertDocxToImages(filePath);
                    break;
                case ".xlsx":
                case ".xls":
                    images = ConvertExcelToImages(filePath);
                    break;
                default:
                    throw new NotSupportedException("Unsupported file format");
            }

            return images;
        }

        static List<Image> ConvertPptToImages(string pptPath)
        {
            List<Image> images = new List<Image>();
            Application pptApplication = new Application();
            Presentation pptPresentation = pptApplication.Presentations.Open(pptPath, WithWindow: MsoTriState.msoFalse);

            foreach (Slide slide in pptPresentation.Slides)
            {
                string tempPath = Path.GetTempFileName();
                slide.Export(tempPath, "PNG", 960, 540);
                images.Add(Image.FromFile(tempPath));
            }

            pptPresentation.Close();
            pptApplication.Quit();
            Marshal.ReleaseComObject(pptPresentation);
            Marshal.ReleaseComObject(pptApplication);

            return images;
        }

        static List<Image> ConvertDocxToImages(string docxPath)
        {
            List<Image> images = new List<Image>();
            Application wordApplication = new Application();
            Document wordDocument = wordApplication.Documents.Open(docxPath);

            for (int i = 1; i <= wordDocument.Pages.Count; i++)
            {
                string tempPath = Path.GetTempFileName();
                object page = i;
                wordDocument.ExportAsFixedFormat(tempPath, WdExportFormat.wdExportFormatPDF, false, WdExportOptimizeFor.wdExportOptimizeForPrint,
                    WdExportRange.wdExportFromTo, page, page, WdExportItem.wdExportDocumentWithMarkup, true, true, WdExportCreateBookmarks.wdExportCreateNoBookmarks, true, true, false, ref missing, ref missing);
                images.Add(Image.FromFile(tempPath));
            }

            wordDocument.Close(false);
            wordApplication.Quit();
            Marshal.ReleaseComObject(wordDocument);
            Marshal.ReleaseComObject(wordApplication);

            return images;
        }

        static List<Image> ConvertExcelToImages(string excelPath)
        {
            List<Image> images = new List<Image>();
            Application excelApplication = new Application();
            Workbook excelWorkbook = excelApplication.Workbooks.Open(excelPath);

            foreach (Worksheet sheet in excelWorkbook.Sheets)
            {
                string tempPath = Path.GetTempFileName();
                sheet.ExportAsFixedFormat(XlFixedFormatType.xlTypePDF, tempPath);
                images.Add(Image.FromFile(tempPath));
            }

            excelWorkbook.Close(false);
            excelApplication.Quit();
            Marshal.ReleaseComObject(excelWorkbook);
            Marshal.ReleaseComObject(excelApplication);

            return images;
        }

        static Image CombineImages(List<Image> images)
        {
            int width = images.Max(img => img.Width);
            int height = images.Sum(img => img.Height);

            Bitmap combinedImage = new Bitmap(width, height);
            using (Graphics g = Graphics.FromImage(combinedImage))
            {
                int yOffset = 0;
                foreach (Image img in images)
                {
                    g.DrawImage(img, 0, yOffset);
                    yOffset += img.Height;
                }
            }

            return combinedImage;
        }

        static void SaveImageToClipboard(Image image)
        {
            using (MemoryStream ms = new MemoryStream())
            {
                image.Save(ms, ImageFormat.Png);
                DataObject dataObject = new DataObject();
                dataObject.SetData(DataFormats.Bitmap, Image.FromStream(ms));
                Clipboard.SetDataObject(dataObject, true);
            }
        }
    }
}
코드 설명
ConvertFileToImages: 파일 확장자에 따라 적절한 변환 함수를 호출합니다.
ConvertPptToImages: PowerPoint 파일의 각 슬라이드를 이미지로 변환합니다. 슬라이드를 PNG 형식으로 임시 파일에 저장한 후 이를 이미지로 로드합니다.
ConvertDocxToImages: Word 파일의 각 페이지를 이미지로 변환합니다. 각 페이지를 PDF로 변환한 후 이를 이미지로 로드합니다.
ConvertExcelToImages: Excel 파일의 각 시트를 이미지로 변환합니다. 각 시트를 PDF로 변환한 후 이를 이미지로 로드합니다.
CombineImages: 각 이미지를 세로로 길게 이어 붙여 하나의 큰 이미지로 만듭니다.
SaveImageToClipboard: 이미지를 클립보드에 저장합니다.
이 코드는 파일 형식에 따라 각 페이지나 시트를 이미지로 변환하고, 이를 세로로 긴 하나의 이미지로 합친 후, 클립보드에 저장하는 전체 과정을 포함하고 있습니다.






