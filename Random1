님, 알겠습니다. 이제 현장에서 장시간 사용하는 상황을 고려한 필수 기능이네요.

화면 항상 켜기 (기본): 앱 실행 중에는 화면이 절대 저절로 꺼지지 않도록 합니다.

절전 모드 (옵션): 설정에서 '미사용 시 화면 끄기'를 체크하고 시간을 설정하면,

지정된 시간 동안 아무런 터치가 없을 때, 화면이 검게 변해 전력을 아낍니다. (OLED 화면에서 효과적)

검은 화면을 다시 터치하면 즉시 원래 화면으로 복귀합니다.

이 두 가지 기능을 완벽하게 구현하기 위해 레이아웃 파일 1개와 MainActivity.kt 파일 1개를 수정하겠습니다. 이번에도 전체 코드를 다 드리겠습니다.

## 1. activity_main.xml 레이아웃 수정
화면 전체를 덮을 검은색 '절전 화면' 뷰를 추가합니다. 이 뷰는 평소에는 숨겨져 있다가, 필요할 때만 나타납니다.

activity_main.xml 파일 전체를 아래 코드로 교체해주세요.

XML

<?xml version="1.0" encoding="utf-8"?>
<!-- 💡 최상위 레이아웃을 FrameLayout으로 변경하여 뷰를 겹칠 수 있도록 함 -->
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/rootLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 기존 UI가 들어가는 RelativeLayout -->
    <RelativeLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:padding="8dp"
        tools:context=".MainActivity">

        <!-- (상단 UI, PDF 뷰어, 버튼 컨테이너 등은 이전과 동일) -->
        <com.kyungwon.reellistviewer.CompassView
            android:id="@+id/compassView"
            android:layout_width="50dp"
            android:layout_height="50dp"
            android:layout_alignParentTop="true"
            android:layout_alignParentEnd="true"
            android:clickable="true"
            android:focusable="true" />
        <Button
            android:id="@+id/btnSetup"
            android:layout_width="wrap_content"
            android:layout_height="40dp"
            android:layout_alignParentTop="true"
            android:layout_marginTop="5dp"
            android:layout_marginEnd="8dp"
            android:layout_toStartOf="@id/compassView"
            android:text="Set"
            android:textColor="@android:color/white"
            android:background="@drawable/button_gradient_purple"/>
        <Button
            android:id="@+id/btnOpenFile"
            android:layout_width="wrap_content"
            android:layout_height="40dp"
            android:layout_alignParentTop="true"
            android:layout_marginTop="5dp"
            android:layout_marginEnd="8dp"
            android:layout_toStartOf="@id/btnSetup"
            android:background="@drawable/button_gradient_purple"
            android:paddingHorizontal="16dp"
            android:text="Open"
            android:textColor="@android:color/white" />
        <TextView
            android:id="@+id/tvFileName"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_alignBottom="@id/btnOpenFile"
            android:layout_alignParentStart="true"
            android:layout_alignParentTop="true"
            android:layout_toStartOf="@id/btnOpenFile"
            android:gravity="center_vertical"
            android:maxLines="1"
            android:textStyle="bold"
            app:autoSizeTextType="uniform"
            app:autoSizeMinTextSize="12sp"
            app:autoSizeMaxTextSize="24sp"
            tools:text="열린 파일 이름" />
        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_below="@id/btnOpenFile"
            android:layout_marginTop="8dp"
            android:orientation="vertical"
            android:visibility="gone"
            tools:visibility="visible">
            <FrameLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content">
                <LinearLayout
                    android:id="@+id/topButtonRow"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="horizontal" />
                <ImageView
                    android:id="@+id/ivTopRowArrow"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:layout_gravity="center_vertical"
                    android:src="@drawable/ic_long_arrow_down"
                    android:visibility="gone"
                    android:clickable="false"
                    android:focusable="false"
                    tools:visibility="visible"/>
            </FrameLayout>
            <LinearLayout
                android:id="@+id/bottomButtonRow"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal" />
        </LinearLayout>
        <com.github.barteksc.pdfviewer.PDFView
            android:id="@+id/pdfView"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_below="@id/pageButtonContainer"
            android:layout_marginTop="8dp" />
    </RelativeLayout>

    <!-- 💡💡💡 화면 전체를 덮는 검은색 절전 화면 (평소엔 숨김) 💡💡💡 -->
    <FrameLayout
        android:id="@+id/screenSaver"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@android:color/black"
        android:visibility="gone"
        tools:visibility="visible"/>

</FrameLayout>
## 2. MainActivity.kt 최종 코드
설정값 저장/로드, 절전 모드 타이머 로직이 모두 포함된 최종 코드입니다.

Kotlin

package com.kyungwon.reellistviewer

import android.content.Context
import android.content.SharedPreferences
import android.graphics.Typeface
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.text.Spannable
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.view.WindowManager
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.GestureDetectorCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.core.view.setMargins
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.kyungwon.reellistviewer.databinding.ActivityMainBinding
import jcifs.CIFSContext
import jcifs.config.PropertyConfiguration
import jcifs.context.BaseContext
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.util.Properties

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener, SensorEventListener {

    private lateinit var binding: ActivityMainBinding
    private val SMB_IP = "192.1.1.5"; private val SMB_SHARED_FOLDER = "tempshare"
    private val SMB_USER = "win10"; private val SMB_PASS = "tltmxpa2@"
    private var totalPdfPages = 0; private val skippedButtons = mutableSetOf<Int>()
    private val currentButtons = mutableListOf<Button>(); private var selectedButton: Button? = null
    private lateinit var gestureDetector: GestureDetectorCompat; private var tappedButton: Button? = null
    private lateinit var sensorManager: SensorManager
    private val accelerometerReading = FloatArray(3); private val magnetometerReading = FloatArray(3)
    private val rotationMatrix = FloatArray(9); private val orientationAngles = FloatArray(3)
    private var isGeomagneticModeOn = false; private var currentDirection = Direction.OTHER

    // --- SharedPreferences 및 설정값 ---
    private lateinit var prefs: SharedPreferences
    private val PREFS_FILENAME = "com.kyungwon.reellistviewer.prefs"
    private val KEY_LAST_LINE = "last_selected_line"
    private val KEY_MAX_BUTTONS = "max_buttons_per_row"
    private val KEY_SCREENSAVER_TIMEOUT = "screensaver_timeout" // 💡 절전 모드 시간(초)
    private var maxButtonsPerRow = 0
    private var screenSaverTimeout = 0 // 💡 0이면 사용 안 함

    // --- 💡 절전 모드 타이머 관련 변수 ---
    private val screenSaverHandler = Handler(Looper.getMainLooper())
    private val screenSaverRunnable = Runnable {
        binding.screenSaver.visibility = View.VISIBLE
    }

    enum class Direction { EAST, WEST, OTHER }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 💡 화면 항상 켜기 설정
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        hideSystemUI()

        prefs = getSharedPreferences(PREFS_FILENAME, Context.MODE_PRIVATE)
        maxButtonsPerRow = prefs.getInt(KEY_MAX_BUTTONS, 0)
        screenSaverTimeout = prefs.getInt(KEY_SCREENSAVER_TIMEOUT, 0) // 💡 절전 모드 설정 불러오기

        setupGestureDetector()
        setupEventListeners()
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        loadLatestFileFromLastLine()
    }

    override fun onResume() {
        super.onResume()
        hideSystemUI()
        resetScreenSaverTimer() // 💡 화면에 돌아올 때마다 타이머 리셋
        sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
        sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        screenSaverHandler.removeCallbacks(screenSaverRunnable) // 💡 앱이 백그라운드로 가면 타이머 중지
        sensorManager.unregisterListener(this)
    }
    
    // 💡 사용자가 화면을 터치할 때마다 호출되어 타이머를 리셋
    override fun onUserInteraction() {
        super.onUserInteraction()
        resetScreenSaverTimer()
    }

    private fun setupEventListeners() {
        binding.btnOpenFile.setOnLongClickListener {
            lifecycleScope.launch(Dispatchers.IO) { showLineSelectionDialog() }
            true
        }
        binding.btnSetup.setOnLongClickListener {
            showSetupDialog()
            true
        }
        binding.compassView.setOnLongClickListener {
            isGeomagneticModeOn = !isGeomagneticModeOn
            val modeText = if (isGeomagneticModeOn) "On" else "Off"
            Toast.makeText(this, "지자계 의존 모드: $modeText", Toast.LENGTH_SHORT).show()
            binding.compassView.setGeomagneticMode(isGeomagneticModeOn)
            if (!isGeomagneticModeOn) { currentDirection = Direction.OTHER }
            updateButtonsAndUI()
            true
        }
        // 💡 검은 절전 화면을 터치하면 다시 원래 화면으로
        binding.screenSaver.setOnClickListener {
            binding.screenSaver.visibility = View.GONE
            resetScreenSaverTimer()
        }
    }

    private fun showSetupDialog() {
        val options = arrayOf("무제한 (0)", "2개", "4개", "6개", "8개", "10개", "12개")
        val values = arrayOf(0, 2, 4, 6, 8, 10, 12)
        val currentSelection = values.indexOf(maxButtonsPerRow)

        AlertDialog.Builder(this)
            .setTitle("한 줄에 표시할 최대 버튼 수")
            .setSingleChoiceItems(options, currentSelection) { dialog, which ->
                val selectedValue = values[which]
                maxButtonsPerRow = selectedValue
                prefs.edit().putInt(KEY_MAX_BUTTONS, selectedValue).apply()
                Toast.makeText(this, "최대 ${options[which]} 표시로 설정됨", Toast.LENGTH_SHORT).show()
                updateButtonsAndUI()
                dialog.dismiss()
            }
            .setNeutralButton("절전 설정") { _, _ ->
                showScreenSaverDialog()
            }
            .show()
    }

    // 💡 --- 신규 함수: 절전 모드 설정 다이얼로그 ---
    private fun showScreenSaverDialog() {
        val options = arrayOf("사용 안 함", "15초", "30초", "1분", "5분")
        val values = arrayOf(0, 15, 30, 60, 300) // 초 단위
        val currentSelection = values.indexOf(screenSaverTimeout)

        AlertDialog.Builder(this)
            .setTitle("미사용 시 화면 끄기 (절전)")
            .setSingleChoiceItems(options, currentSelection) { dialog, which ->
                val selectedValue = values[which]
                screenSaverTimeout = selectedValue
                prefs.edit().putInt(KEY_SCREENSAVER_TIMEOUT, selectedValue).apply()
                Toast.makeText(this, "${options[which]} 후 절전 모드로 설정됨", Toast.LENGTH_SHORT).show()
                resetScreenSaverTimer() // 설정을 바꾸면 바로 타이머 리셋
                dialog.dismiss()
            }
            .show()
    }
    
    // 💡 --- 신규 함수: 절전 모드 타이머 리셋 ---
    private fun resetScreenSaverTimer() {
        // 기존 타이머가 있다면 제거
        screenSaverHandler.removeCallbacks(screenSaverRunnable)
        // 절전 모드가 켜져있을 때만 새 타이머 설정
        if (screenSaverTimeout > 0) {
            screenSaverHandler.postDelayed(screenSaverRunnable, screenSaverTimeout * 1000L)
        }
    }

    // (이하 모든 함수는 이전 답변과 동일합니다)
    private fun hideSystemUI() { /*...*/ }
    private fun setupGestureDetector() { /*...*/ }
    private fun loadLatestFileFromLastLine() { /*...*/ }
    private suspend fun showLineSelectionDialog() { /*...*/ }
    private suspend fun showReelListDialog(selectedLine: String, allFiles: List<SmbFile>) { /*...*/ }
    private suspend fun listSmbFiles(): List<SmbFile> { /*...*/ }
    override fun loadComplete(nbPages: Int) { /*...*/ }
    private fun updateButtonsAndUI() { /*...*/ }
    private fun regenerateButtons(count: Int) { /*...*/ }
    private fun createPageButton(number: Int, layoutParams: LinearLayout.LayoutParams? = null): Button { /*...*/ }
    private fun updateAllButtonStyles() { /*...*/ }
    private fun mapLogicalToPhysical(logicalButtonNum: Int): Int { /*...*/ }
    private fun onPageButtonClick(button: Button) { /*...*/ }
    private fun onPageButtonLongClick(view: View) { /*...*/ }
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) { /*...*/ }
    override fun onSensorChanged(event: SensorEvent) { /*...*/ }
    private fun dpToPx(dp: Int): Int { /*...*/ }
    private suspend fun loadPdfFromSmbFile(smbFile: SmbFile) { /*...*/ }
    override fun onPageError(page:Int,t:Throwable){ /*...*/ }