윈도우 7에서 특정 폴더를 모니터링하여 파일이나 폴더가 삭제될 때 이를 수행한 프로세스를 감시하는 프로그램을 C#으로 만들 수 있습니다. 이를 위해 Windows Management Instrumentation (WMI)와 FileSystemWatcher 클래스를 사용할 수 있습니다.

다음은 이러한 요구 사항을 만족하는 프로그램의 예입니다.

1. FileSystemWatcher 설정
FileSystemWatcher를 사용하여 폴더의 변경 사항을 모니터링합니다.

2. WMI 설정
WMI를 사용하여 파일 삭제 이벤트가 발생할 때 해당 프로세스를 찾습니다.

3. 코드 구현
csharp
코드 복사
using System;
using System.Diagnostics;
using System.IO;
using System.Management;
using System.Windows;

namespace FolderMonitor
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher watcher;
        private readonly string folderPath = @"C:\YourFolder"; // 감시할 폴더 경로를 설정하세요

        public MainWindow()
        {
            InitializeComponent();
            InitializeWatcher();
        }

        private void InitializeWatcher()
        {
            watcher = new FileSystemWatcher
            {
                Path = folderPath,
                NotifyFilter = NotifyFilters.FileName | NotifyFilters.DirectoryName,
                Filter = "*.*"
            };

            watcher.Deleted += OnDeleted;
            watcher.EnableRaisingEvents = true;
        }

        private void OnDeleted(object sender, FileSystemEventArgs e)
        {
            string filePath = e.FullPath;
            Console.WriteLine($"File Deleted: {filePath}");

            // 삭제 이벤트 발생 시 WMI를 통해 삭제한 프로세스를 찾습니다.
            FindDeletingProcess(filePath);
        }

        private void FindDeletingProcess(string deletedFilePath)
        {
            string query = $"SELECT * FROM __InstanceOperationEvent WITHIN 1 WHERE TargetInstance ISA 'CIM_DataFile' AND TargetInstance.Name = '{deletedFilePath.Replace("\\", "\\\\")}'";

            ManagementEventWatcher watcher = new ManagementEventWatcher(@"\\.\root\cimv2", query);
            watcher.EventArrived += new EventArrivedEventHandler((sender, e) =>
            {
                ManagementBaseObject obj = (ManagementBaseObject)e.NewEvent["TargetInstance"];
                uint processId = (uint)obj["Handle"];

                try
                {
                    Process process = Process.GetProcessById((int)processId);
                    MessageBox.Show($"Process {process.ProcessName} (ID: {processId}) deleted the file {deletedFilePath}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error finding process: {ex.Message}");
                }
            });

            watcher.Start();
        }
    }
}
코드 설명
FileSystemWatcher 설정:

FileSystemWatcher 객체를 생성하고 감시할 폴더 경로를 설정합니다.
Deleted 이벤트 핸들러를 추가하여 파일 삭제 이벤트를 감지합니다.
WMI 설정:

파일 삭제 이벤트가 발생하면 FindDeletingProcess 메서드가 호출됩니다.
WMI 쿼리를 통해 삭제된 파일을 감지하고, 해당 파일을 삭제한 프로세스를 찾습니다.
이벤트 핸들러:

OnDeleted 이벤트 핸들러는 파일 삭제 이벤트를 처리하고, WMI를 통해 삭제한 프로세스를 찾습니다.
이 코드를 실행하면 지정한 폴더에서 파일이나 폴더가 삭제될 때 이를 감지하고, 어떤 프로세스가 삭제했는지 알 수 있습니다. 이 정보를 메시지 박스로 표시합니다.

이 코드를 프로젝트에 추가하고 MainWindow.xaml.cs 파일에 넣으면 됩니다. WPF 프로젝트를 생성한 후 이 코드를 추가하면 동작합니다.

참고: WMI 쿼리는 시스템 리소스를 사용할 수 있으므로 적절하게 사용해야 합니다. 더 최적화된 방법이 필요할 경우 추가 조