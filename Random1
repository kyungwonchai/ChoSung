import bpy
import math

# 실행 전 기존 씬의 모든 오브젝트 삭제
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# =================================================================
# 랙 생성을 위한 파라미터 (여기서 수치를 조절하세요)
# =================================================================
# --- 슬롯 관련 ---
SLOT_COUNT = 12
FLOOR_NAMES = ['A', 'B', 'C']  # 위에서부터 A, B, C 층

# --- 크기 관련 (미터 단위) ---
SLOT_WIDTH = 0.08      # 슬롯 1개의 너비
SLOT_HEIGHT = 0.6      # 슬롯 1개의 높이
SLOT_DEPTH = 0.5       # 랙의 깊이
DIVIDER_THICKNESS = 0.01 # 칸막이 두께

# --- 프레임 관련 ---
FRAME_THICKNESS = 0.04 # 외부 프레임 두께

# --- 램프 관련 ---
LAMP_RADIUS = 0.01     # 램프의 반지름
LAMP_DEPTH = 0.005     # 램프의 깊이(두께)

# =================================================================
# 자동 계산 변수 (수정할 필요 없음)
# =================================================================
FLOOR_COUNT = len(FLOOR_NAMES)
RACK_TOTAL_WIDTH = (SLOT_WIDTH * SLOT_COUNT) + (DIVIDER_THICKNESS * (SLOT_COUNT + 1))
RACK_TOTAL_HEIGHT = (SLOT_HEIGHT * FLOOR_COUNT) + (DIVIDER_THICKNESS * (FLOOR_COUNT - 1)) + (FRAME_THICKNESS * 2)

# =================================================================
# 랙 모델링 시작
# =================================================================

# 1. 최상위 부모가 될 빈 오브젝트(Empty) 생성
bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))
rack_parent = bpy.context.active_object
rack_parent.name = "Rack_Template"

# 2. 기본 프레임 및 뒷면 패널 생성
def create_box(name, size, position):
    bpy.ops.mesh.primitive_cube_add(location=position)
    box = bpy.context.active_object
    box.name = name
    box.scale = (size[0] / 2, size[1] / 2, size[2] / 2)
    box.parent = rack_parent
    return box

# --- 외부 프레임 및 패널들...
top_frame_z = RACK_TOTAL_HEIGHT / 2 - FRAME_THICKNESS / 2
bottom_frame_z = -RACK_TOTAL_HEIGHT / 2 + FRAME_THICKNESS / 2
create_box("Frame_Top", (RACK_TOTAL_WIDTH, SLOT_DEPTH, FRAME_THICKNESS), (0, 0, top_frame_z))
create_box("Frame_Bottom", (RACK_TOTAL_WIDTH, SLOT_DEPTH, FRAME_THICKNESS), (0, 0, bottom_frame_z))
back_panel_y = -SLOT_DEPTH / 2 + (DIVIDER_THICKNESS / 2)
panel_height = RACK_TOTAL_HEIGHT - (FRAME_THICKNESS * 2)
create_box("Back_Panel", (RACK_TOTAL_WIDTH, DIVIDER_THICKNESS, panel_height), (0, back_panel_y, 0))

# 3. 층별 구조 생성
start_x = -RACK_TOTAL_WIDTH / 2
start_z = RACK_TOTAL_HEIGHT / 2 - FRAME_THICKNESS

# ★★★ 모든 램프에 동일하게 적용될 고정된 '정면' 방향 값 ★★★
forward_rotation = (math.radians(90), 0, 0)

for i, floor_name in enumerate(FLOOR_NAMES):
    floor_base_z = start_z - i * (SLOT_HEIGHT + DIVIDER_THICKNESS)
    
    if i < FLOOR_COUNT - 1:
        divider_z = floor_base_z - SLOT_HEIGHT - (DIVIDER_THICKNESS / 2)
        create_box(f"Floor_Divider_{floor_name}", (RACK_TOTAL_WIDTH, SLOT_DEPTH, DIVIDER_THICKNESS), (0, 0, divider_z))
    
    for j in range(SLOT_COUNT + 1):
        divider_x = start_x + (DIVIDER_THICKNESS / 2) + j * (SLOT_WIDTH + DIVIDER_THICKNESS)
        divider_z = floor_base_z - (SLOT_HEIGHT / 2)
        create_box(f"Vertical_Divider_{floor_name}{j+1:02d}", (DIVIDER_THICKNESS, SLOT_DEPTH, SLOT_HEIGHT), (divider_x, 0, divider_z))

        if j < SLOT_COUNT:
            slot_center_x = divider_x + (DIVIDER_THICKNESS / 2) + (SLOT_WIDTH / 2)
            slot_center_z = floor_base_z - (SLOT_HEIGHT / 2)

            lamp_y = SLOT_DEPTH / 2 - LAMP_DEPTH / 2
            lamp_z = floor_base_z - 0.001
            
            # 램프 생성 시, 위에서 정의한 'forward_rotation' 값을 그대로 사용
            bpy.ops.mesh.primitive_cylinder_add(
                vertices=16, 
                radius=LAMP_RADIUS, 
                depth=LAMP_DEPTH, 
                location=(slot_center_x, lamp_y, lamp_z),
                rotation=forward_rotation  # 모든 램프에 동일한 정면 방향 적용
            )
            lamp_obj = bpy.context.active_object
            lamp_obj.name = f"Lamp_{floor_name}{j+1:02d}"
            lamp_obj.parent = rack_parent
            
            mask_size = (SLOT_WIDTH / 2, SLOT_DEPTH * 0.98, SLOT_HEIGHT * 0.85)
            mask_position = (slot_center_x, 0, slot_center_z)
            create_box(f"Mask_{floor_name}{j+1:02d}", mask_size, mask_position)

print("마스크와 램프가 포함된 최종 랙 생성이 완료되었습니다: Rack_Template")