아, 아래는 WPF MVVM 패턴으로 구성된 고급 스타일의 핑체크 전체 예제야.
녹색은 정상, 주황은 실패, PC명, IP, 비고, 상태 4개 컬럼을 가진 표 형태로 UI 구성했어.

✅ 1. 전역 IP 리스트 (Sample)
csharp
코드 복사
// App.xaml.cs 혹은 MainViewModel.cs에 위치
public static class GlobalIPList
{
    public static ObservableCollection<PingTarget> IPList { get; set; } = new ObservableCollection<PingTarget>
    {
        new PingTarget { PCName = "PC1", IP = "8.8.8.8", Note = "Google DNS" },
        new PingTarget { PCName = "PC2", IP = "1.1.1.1", Note = "Cloudflare DNS" },
        new PingTarget { PCName = "PC3", IP = "192.168.0.123", Note = "Local" }
    };
}
✅ 2. 모델 클래스: PingTarget.cs
csharp
코드 복사
public class PingTarget : INotifyPropertyChanged
{
    public string PCName { get; set; }
    public string IP { get; set; }
    public string Note { get; set; }

    private string _status;
    public string Status
    {
        get => _status;
        set { _status = value; OnPropertyChanged(nameof(Status)); }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string prop) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(prop));
}
✅ 3. ViewModel: MainViewModel.cs
csharp
코드 복사
public class MainViewModel : INotifyPropertyChanged
{
    public ObservableCollection<PingTarget> IPList => GlobalIPList.IPList;

    public ICommand StartPingCommand { get; }

    public MainViewModel()
    {
        StartPingCommand = new RelayCommand(async () => await PingAllAsync());
    }

    private async Task PingAllAsync()
    {
        var throttle = new SemaphoreSlim(50);

        List<Task> tasks = new List<Task>();

        foreach (var target in IPList)
        {
            await throttle.WaitAsync();

            tasks.Add(Task.Run(async () =>
            {
                try
                {
                    using (var ping = new Ping())
                    {
                        var reply = await ping.SendPingAsync(target.IP, 10);
                        target.Status = reply.Status == IPStatus.Success ? "OK" : "NG";
                    }
                }
                catch
                {
                    target.Status = "NG";
                }
                finally
                {
                    throttle.Release();
                }
            }));
        }

        await Task.WhenAll(tasks);
    }

    public event PropertyChangedEventHandler PropertyChanged;
}
✅ 4. RelayCommand.cs (MVVM용 명령 클래스)
csharp
코드 복사
public class RelayCommand : ICommand
{
    private readonly Func<Task> _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Func<Task> execute, Func<bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute ?? (() => true);
    }

    public event EventHandler CanExecuteChanged;

    public bool CanExecute(object parameter) => _canExecute();
    public async void Execute(object parameter) => await _execute();
}
✅ 5. View: MainWindow.xaml
xml
코드 복사
<Window x:Class="PingChecker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PingChecker"
        Title="Ping Checker" Height="400" Width="600">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>

    <Window.Resources>
        <!-- 상태에 따른 배경색 스타일 -->
        <Style TargetType="DataGridRow">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Status}" Value="OK">
                    <Setter Property="Background" Value="#D9FFD9" /> <!-- 연한 녹색 -->
                </DataTrigger>
                <DataTrigger Binding="{Binding Status}" Value="NG">
                    <Setter Property="Background" Value="#FFF4CC" /> <!-- 연한 주황 -->
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <DockPanel Margin="10">
        <Button Content="Start Ping" Command="{Binding StartPingCommand}" 
                Padding="10" DockPanel.Dock="Top" Margin="0 0 0 10" />

        <DataGrid ItemsSource="{Binding IPList}" AutoGenerateColumns="False" HeadersVisibility="Column" 
                  CanUserAddRows="False" IsReadOnly="True" FontSize="14">
            <DataGrid.Columns>
                <DataGridTextColumn Header="PC Name" Binding="{Binding PCName}" Width="*"/>
                <DataGridTextColumn Header="IP" Binding="{Binding IP}" Width="*"/>
                <DataGridTextColumn Header="Note" Binding="{Binding Note}" Width="*"/>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="80"/>
            </DataGrid.Columns>
        </DataGrid>
    </DockPanel>
</Window>
✅ 결과 예시
OK: 연한 녹색 행 배경

NG: 연한 주황색 행 배경

시작 버튼 클릭 시 자동으로 병렬 핑 검사 시작

✅ 확장 가능
결과에 응답 시간 표시 가능 (RoundtripTime)

Status에 OK 대신 3ms, NG 대신 Timeout 등의 세부 내용 표시 가능

자동 주기적 체크 타이머로 확장 가능
