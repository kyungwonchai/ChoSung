RelayCommand는 매개변수를 받는 명령으로 사용할 때 문제가 발생하는 경우가 있습니다. 특히, 기본적으로 제공되는 RelayCommand 클래스는 매개변수를 명시적으로 받을 수 있는 형태로 구현되어 있지 않은 경우가 많습니다.

이를 해결하기 위해 **매개변수를 받는 RelayCommand**를 직접 정의할 수 있습니다. 아래에 **매개변수를 받는 RelayCommand<T>**를 정의하여 사용하겠습니다.

RelayCommand.cs (매개변수 지원 추가)
csharp
코드 복사
using System;
using System.Windows.Input;

/// <summary>
/// 매개변수를 받는 RelayCommand 클래스 정의
/// </summary>
public class RelayCommand<T> : ICommand
{
    private readonly Action<T> _execute;
    private readonly Func<T, bool> _canExecute;

    public RelayCommand(Action<T> execute, Func<T, bool> canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute((T)parameter);
    }

    public void Execute(object parameter)
    {
        _execute((T)parameter);
    }

    public event EventHandler CanExecuteChanged
    {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }
}
이 클래스를 사용하면, RelayCommand<int>와 같은 형태로 매개변수를 받을 수 있는 명령을 사용할 수 있습니다.

TaskModel.cs (RelayCommand<int> 사용)
Models/TaskModel.cs

csharp
코드 복사
using System.Threading.Tasks;
using System.Windows.Input;

public class TaskModel : ViewModelBase
{
    public string PONumber { get; set; }
    public string MAG_NO { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int MAG_QTY { get; set; }
    public int SequenceFlag { get; set; }

    private string _status;
    public string Status
    {
        get => _status;
        set
        {
            _status = value;
            OnPropertyChanged(nameof(Status));
        }
    }

    public bool IsCompleted { get; set; }
    public bool IsError { get; set; }
    public bool IsPaused { get; set; }
    public bool IsRunning { get; set; }

    private TaskQueue _taskQueue;
    public ICommand StartCommand { get; }
    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSpecificTaskCommand { get; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue, bool isExecutable)
    {
        PONumber = logEntry.PO_NO;
        MAG_NO = logEntry.MAG_NO;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        MAG_QTY = logEntry.MAG_QTY;
        SequenceFlag = logEntry.SequenceFlag;

        _taskQueue = taskQueue;

        StartCommand = new RelayCommand(StartTask);
        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        
        // RelayCommand<int> 사용하여 특정 작업 실행 명령어 설정
        ExecuteSpecificTaskCommand = new RelayCommand<int>(ExecuteSpecificTask);

        Status = "Pending";
        if (isExecutable) StartTask();
    }

    private async void StartTask()
    {
        Status = "Running";
        IsRunning = true;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsRunning));

        var success = await _taskQueue.ExecuteTaskQueue(UpdateTaskStatus);

        Status = success ? "Completed" : "Failed";
        IsCompleted = success;
        IsError = !success;
        IsRunning = false;

        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsCompleted));
        OnPropertyChanged(nameof(IsError));
        OnPropertyChanged(nameof(IsRunning));
    }

    private void PauseTask()
    {
        _taskQueue.PauseAllTasks();
        Status = "Paused";
        IsPaused = true;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsPaused));
    }

    private void ResumeTask()
    {
        _taskQueue.ResumeAllTasks();
        Status = "Running";
        IsPaused = false;
        OnPropertyChanged(nameof(Status));
        OnPropertyChanged(nameof(IsPaused));
    }

    private async void ExecuteSpecificTask(int taskIndex)
    {
        Status = $"Running task {taskIndex}";
        var success = await _taskQueue.ExecuteSpecificTask(UpdateTaskStatus, taskIndex);
        Status = success ? "Completed" : "Failed";
        OnPropertyChanged(nameof(Status));
    }

    private async Task UpdateTaskStatus(string message)
    {
        Status = message;
        OnPropertyChanged(nameof(Status));
        await Task.CompletedTask;
    }
}
MainWindow.xaml (Ctrl + 도형 클릭하여 특정 함수 실행)
xml
코드 복사
<Window x:Class="LogisticsApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Logistics Task Manager" Height="400" Width="1000">
    <Grid>
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <DataGridTextColumn Header="PO Number" Binding="{Binding PONumber}" Width="*" />
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                <DataGridTextColumn Header="BASIC_MODEL" Binding="{Binding BASIC_MODEL}" Width="*" />
                <DataGridTextColumn Header="MODEL_CODE" Binding="{Binding MODEL_CODE}" Width="*" />
                <DataGridTextColumn Header="PO_PLAN_QTY" Binding="{Binding PO_PLAN_QTY}" Width="*" />
                <DataGridTextColumn Header="PO_PROD_QTY" Binding="{Binding PO_PROD_QTY}" Width="*" />
                <DataGridTextColumn Header="MAG_QTY" Binding="{Binding MAG_QTY}" Width="*" />
                <DataGridTextColumn Header="SequenceFlag" Binding="{Binding SequenceFlag}" Width="*" />

                <!-- 작업 진행 상태를 동그라미로 표시하는 열 -->
                <DataGridTemplateColumn Header="Task Status" Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Grid>
                                <Ellipse Width="20" Height="20" Stroke="Black" StrokeThickness="1">
                                    <Ellipse.Style>
                                        <Style TargetType="Ellipse">
                                            <Style.Triggers>
                                                <!-- 완료된 작업은 녹색 -->
                                                <DataTrigger Binding="{Binding IsCompleted}" Value="True">
                                                    <Setter Property="Fill" Value="LightGreen"/>
                                                </DataTrigger>
                                                <!-- 에러가 발생한 작업은 빨간색 -->
                                                <DataTrigger Binding="{Binding IsError}" Value="True">
                                                    <Setter Property="Fill" Value="Red"/>
                                                </DataTrigger>
                                                <!-- 대기 중인 작업은 스카이블루 -->
                                                <DataTrigger Binding="{Binding IsRunning}" Value="True">
                                                    <Setter Property="Fill" Value="SkyBlue"/>
                                                </DataTrigger>
                                                <!-- 일시정지된 작업은 회색 -->
                                                <DataTrigger Binding="{Binding IsPaused}" Value="True">
                                                    <Setter Property="Fill" Value="Gray"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>

                                <!-- 우클릭 컨텍스트 메뉴 -->
                                <Grid.ContextMenu>
                                    <ContextMenu>
                                        <!-- Ctrl + 도형 클릭하여 특정 함수 실행 -->
                                        <MenuItem Header="여기서부터 실행" Command="{Binding ExecuteSpecificTaskCommand}" CommandParameter="0"/>
                                    </ContextMenu>
                                </Grid.ContextMenu>
                            </Grid>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 일시정지 및 다시 시작 버튼 -->
        <Button Content="Pause All" Command="{Binding PauseAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="100" Margin="10"/>
        <Button Content="Resume All" Command="{Binding ResumeAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Width="100" Margin="120,0,0,10"/>
    </Grid>
</Window>
요약:
RelayCommand<T>: 매개변수를 받을 수 있는 **RelayCommand<int>**를 직접 정의했습니다. 이를 통해 RelayCommand<int>를 사용할 수 있습니다.
TaskModel.cs: 특정 함수 실행을 위한 명령어로 RelayCommand<int>를 사용하여, **ExecuteSpecificTaskCommand**로 특정 작업의 함수를 실행할 수 있습니다.
MainWindow.xaml: Ctrl + 도형 클릭 시 해당 작업에서 특정 함수를 실행할 수 있도록 컨텍스트 메뉴를 추가했습니다.
이제 이 코드는 Ctrl + 도형 클릭을 통해 특정 함수를 실행할 수 있으며, 매개변수로 함수를 구분하여 처리할 수 있습니다