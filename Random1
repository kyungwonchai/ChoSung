el.py):

python

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import joblib

def preprocess_data(data):
    # 데이터 전처리 작업을 수행합니다.
    # 예시로 특수 문자 제거 및 소문자 변환 작업을 수행합니다.
    data = data.apply(lambda x: x.replace('[^\w\s]', '').lower())

    return data

def train_model(data):
    # 데이터 전처리
    preprocessed_data = preprocess_data(data)

    # 벡터 변환
    vectorizer = CountVectorizer()
    parts_vector = vectorizer.fit_transform(preprocessed_data)

    # 유사도 계산
    similarity_matrix = cosine_similarity(parts_vector)

    return similarity_matrix, vectorizer

def save_model(similarity_matrix, vectorizer, model_file, vectorizer_file):
    # 모델 저장
    model_data = {'similarity_matrix': similarity_matrix, 'vectorizer': vectorizer}
    joblib.dump(model_data, model_file)
    joblib.dump(vectorizer, vectorizer_file)

# 데이터베이스에서 데이터 추출
# 예시 데이터를 데이터프레임으로 가정하고 부품코드 컬럼이 있다고 가정합니다.
data = pd.read_sql_query("SELECT 부품코드 FROM 테이블명", connection)

# 모델 학습
similarity_matrix, vectorizer = train_model(data['부품코드'])

# 학습된 모델 저장
save_model(similarity_matrix, vectorizer, 'model.pkl', 'vectorizer.pkl')

구현 코드 (search_parts.py):

python

import joblib
from Levenshtein import distance
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def load_model(model_file, vectorizer_file):
    # 모델 로드
    model_data = joblib.load(model_file)
    similarity_matrix = model_data['similarity_matrix']
    vectorizer = joblib.load(vectorizer_file)

    return similarity_matrix, vectorizer

def find_similar_parts(input_text, similarity_matrix, vectorizer):
    input_vector = vectorizer.transform([input_text])
    similarity_scores = cosine_similarity(input_vector, similarity_matrix).flatten()

    top_indices = similarity_scores.argsort()[:-11:-1]
    similar_parts = vectorizer.inverse_transform(similarity_matrix[top_indices])

    similarity_scores = [distance(input_text, part) for part in similar_parts]
    similar_parts_with_distance = sorted(zip(similarity_scores, similar_parts))

    return similar_parts_with_distance

# 입력 받기
input_text = input("부품코드를 입력하세요: ")

# 모델 로드
similarity_matrix, vectorizer = load_model('model.pkl', 'vectorizer.pkl')

# 유사한 부품 코드 검색
similar_parts = find_similar_parts(input_text, similarity_matrix, vectorizer)

# 출력
for distance, part in similar_parts:
    print(f'{part}: {distance}')