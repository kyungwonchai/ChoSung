이 기능을 구현하기 위해서 다음과 같은 단계로 코드를 작성할 수 있습니다:

QR 코드를 스캔하고 필요한 값을 전역 변수에 저장.
MySQL의 view_management_mobile_mainsheet에서 조건에 맞는 데이터를 조회.
조회된 데이터를 qr_code_list 레이아웃에 표시.
1. 전역 변수 선언 및 QR 코드 스캔
먼저, part, district, floor 값을 저장할 전역 변수를 선언하고, QR 코드를 스캔할 때 이 변수들에 값을 저장합니다.

kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.ArrayAdapter
import android.widget.ListView
import androidx.activity.ComponentActivity
import androidx.camera.core.Camera
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.Statement
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private var camera: Camera? = null
    private lateinit var barcodeScanner: BarcodeScanner
    private lateinit var qrCodeListView: ListView

    // 전역 변수로 선언된 부분
    private var part: String? = null
    private var district: String? = null
    private var floor: String? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        previewView = findViewById(R.id.previewView)
        qrCodeListView = findViewById(R.id.qr_code_list) // ListView의 ID가 qr_code_list라고 가정
        cameraExecutor = Executors.newSingleThreadExecutor()

        // BarcodeScanner 초기화
        barcodeScanner = BarcodeScanning.getClient()

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val previewBuilder = Preview.Builder()

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            // 이미지 분석을 위한 설정
            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(imageProxy)
                    })
                }

            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(imageProxy: ImageAnalysis.ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        if (rawValue != null) {
                            // QR 코드 값을 처리하고 전역 변수에 저장
                            val values = rawValue.split("^")
                            if (values.size >= 3) {
                                part = values[0]
                                district = values[1]
                                floor = values[2]
                                
                                // MySQL 데이터 조회 및 ListView 업데이트
                                queryAndDisplayData()
                            }
                        }
                    }
                }
                .addOnFailureListener {
                    Log.e(TAG, "Barcode scanning failed", it)
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        } else {
            imageProxy.close()
        }
    }

    private fun queryAndDisplayData() {
        val dataList = mutableListOf<String>()
        val jdbcUrl = "jdbc:mysql://<DB_HOST>:<DB_PORT>/<DB_NAME>"
        val connectionProps = Properties().apply {
            put("user", "<DB_USER>")
            put("password", "<DB_PASSWORD>")
        }

        var connection: Connection? = null
        var statement: Statement? = null
        var resultSet: ResultSet? = null

        try {
            // MySQL 연결
            connection = DriverManager.getConnection(jdbcUrl, connectionProps)
            statement = connection.createStatement()

            // SQL 쿼리 작성 및 실행
            val query = """
                SELECT at, modelnumber
                FROM view_management_mobile_mainsheet
                WHERE part = '$part' AND district = '$district' AND floor = '$floor' AND read1 IS NULL
            """
            resultSet = statement.executeQuery(query)

            // 결과 처리 및 ListView 업데이트
            while (resultSet.next()) {
                val at = resultSet.getString("at")
                val modelNumber = resultSet.getString("modelnumber")
                dataList.add("AT: $at, Model: $modelNumber")
            }

            // ListView에 데이터를 설정
            val adapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, dataList)
            qrCodeListView.adapter = adapter

        } catch (e: Exception) {
            Log.e(TAG, "Database query failed", e)
        } finally {
            // 리소스 정리
            resultSet?.close()
            statement?.close()
            connection?.close()
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA
        )
    }
}
2. 코드 설명
전역 변수 저장: QR 코드를 스캔한 후 part, district, floor 값을 전역 변수에 저장합니다.

MySQL 쿼리: QR 코드를 스캔한 후 view_management_mobile_mainsheet 테이블에서 part, district, floor 값에 해당하는 행을 조회합니다. read1 컬럼이 NULL인 데이터만 조회하여, AT와 ModelNumber를 가져옵니다.

리스트 뷰 업데이트: 조회된 결과를 ListView에 표시합니다.

3. ListView 설정
activity_main.xml 파일에서 ListView를 정의합니다.

xml
코드 복사
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1" />

    <ListView
        android:id="@+id/qr_code_list"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:divider="@android:color/darker_gray"
        android:dividerHeight="1dp" />

</LinearLayout>
4. 결론
이 코드는 QR 코드가 스캔될 때마다 view_management_mobile_mainsheet 테이블에서 조건에 맞는 데이터를 조회하고, 이를 ListView에 표시합니다. 이로써 스캔된 QR 코드에 맞는 데이터를 실시간으로 확인할 수 있습니다. 추가적인 질문이 있거나 더 필요한 기능이 있으면 언제든지 도와드리겠습니