import bpy

# 거울 평면 생성
bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 1))
mirror = bpy.context.object
mirror.rotation_euler = (1.5708, 0, 0)  # X축으로 90도 회전하여 수직 배치

# 거울 재질 생성
mirror_material = bpy.data.materials.new(name="MirrorMaterial")
mirror_material.use_nodes = True
nodes = mirror_material.node_tree.nodes
links = mirror_material.node_tree.links

# 기본 노드 제거
for node in nodes:
    nodes.remove(node)

# 노드 추가
output_node = nodes.new(type='ShaderNodeOutputMaterial')
glossy_node = nodes.new(type='ShaderNodeBsdfGlossy')
mix_shader_node = nodes.new(type='ShaderNodeMixShader')
transparent_node = nodes.new(type='ShaderNodeBsdfTransparent')
light_path_node = nodes.new(type='ShaderNodeLightPath')

# 노드 속성 설정
glossy_node.inputs['Roughness'].default_value = 0.0  # 완전한 반사

# 노드 연결
links.new(glossy_node.outputs['BSDF'], mix_shader_node.inputs[2])
links.new(transparent_node.outputs['BSDF'], mix_shader_node.inputs[1])
links.new(light_path_node.outputs['Is Shadow Ray'], mix_shader_node.inputs['Fac'])
links.new(mix_shader_node.outputs['Shader'], output_node.inputs['Surface'])

# 거울 재질을 거울 평면에 적용
mirror.data.materials.append(mirror_material)

# EEVEE 렌더링 엔진 설정
bpy.context.scene.render.engine = 'BLENDER_EEVEE'
bpy.context.scene.eevee.use_gtao = True
bpy.context.scene.eevee.use_bloom = True
bpy.context.scene.eevee.use_ssr = True  # 화면 공간 반사 활성화
bpy.context.scene.eevee.use_ssr_refraction = True
bpy.context.scene.eevee.ssr_thickness = 0.1
bpy.context.scene.eevee.ssr_quality = 1.0

# 반사 평면 추가 (EEVEE에서 정확한 반사를 위해 필요)
bpy.ops.object.lightprobe_add(type='PLANAR', location=mirror.location)
reflection_plane = bpy.context.object
reflection_plane.scale = mirror.scale
reflection_plane.rotation_euler = mirror.rotation_euler
