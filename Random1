안드로이드에서 버튼 클릭 시 특정 파일에 값을 기록하는 앱을 만드는 방법을 설명하겠습니다. 여기에서는 Kotlin을 사용하여 16개의 버튼을 두 줄로 배치하고, 버튼 클릭 시 192.168.102.1의 공유 폴더에 있는 1.txt 파일에 값을 기록하도록 하겠습니다. 이 과정은 다음과 같습니다:

프로젝트 생성 및 설정: Android Studio에서 새로운 프로젝트를 생성하고 필요한 권한을 설정합니다.
UI 디자인: 16개의 버튼을 배치하는 레이아웃을 만듭니다.
네트워크 설정: Wi-Fi로 네트워크 공유 폴더에 접근하여 파일에 값을 기록할 수 있도록 설정합니다.
버튼 클릭 이벤트 처리: 버튼 클릭 시 해당 값을 1.txt 파일에 기록합니다.
1. 프로젝트 생성 및 설정
새 프로젝트를 생성하고 필요한 권한을 설정합니다. AndroidManifest.xml 파일에 인터넷 권한을 추가합니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.YourApp">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
2. UI 디자인
activity_main.xml 파일을 수정하여 16개의 버튼을 배치합니다.

xml
코드 복사
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity">

    <GridLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:columnCount="8"
        android:rowCount="2">

        <Button
            android:id="@+id/button1T"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_columnWeight="1"
            android:layout_rowWeight="1"
            android:text="1T" />

        <!-- 여기에 다른 버튼들도 추가합니다 (2T~8T, 1T~8T) -->

    </GridLayout>
</LinearLayout>
3. 네트워크 설정 및 파일 쓰기
네트워크 공유 폴더에 파일을 쓰기 위해서는 SMB 라이브러리를 사용할 수 있습니다. 여기에서는 jcifs-ng 라이브러리를 사용하여 네트워크 폴더에 파일을 씁니다.

build.gradle 파일에 종속성 추가:

groovy
코드 복사
dependencies {
    implementation 'com.github.agna:smbj:0.11.0'
}
MainActivity.kt 파일에서 파일 쓰기 작업 처리:

kotlin
코드 복사
package com.example.yourapp

import android.os.Bundle
import android.util.Log
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import com.hierynomus.smbj.SMBClient
import com.hierynomus.smbj.auth.AuthenticationContext
import com.hierynomus.smbj.connection.Connection
import com.hierynomus.smbj.session.Session
import com.hierynomus.smbj.share.DiskShare
import com.hierynomus.smbj.share.File
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import java.io.OutputStreamWriter

class MainActivity : AppCompatActivity() {

    private val smbClient = SMBClient()
    private lateinit var connection: Connection
    private lateinit var session: Session
    private lateinit var share: DiskShare

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        connectToSmb()

        val buttons = listOf(
            findViewById<Button>(R.id.button1T),
            // 다른 버튼들도 여기 추가하세요 (R.id.button2T, R.id.button3T, ...)
        )

        buttons.forEach { button ->
            button.setOnClickListener {
                writeToFile(button.text.toString())
            }
        }
    }

    private fun connectToSmb() {
        GlobalScope.launch(Dispatchers.IO) {
            try {
                connection = smbClient.connect("192.168.102.1")
                val ac = AuthenticationContext("username", "password".toCharArray(), "domain")
                session = connection.authenticate(ac)
                share = session.connectShare("sfolder") as DiskShare
            } catch (e: Exception) {
                Log.e("SMB", "Connection error: ${e.message}")
            }
        }
    }

    private fun writeToFile(content: String) {
        GlobalScope.launch(Dispatchers.IO) {
            try {
                val remoteFile: File = share.openFile(
                    "1.txt",
                    setOf(AccessMask.GENERIC_WRITE),
                    null,
                    SMB2CreateDisposition.FILE_OPEN_IF,
                    null
                )

                remoteFile.outputStream.use { output ->
                    OutputStreamWriter(output).use { writer ->
                        writer.write(content)
                        writer.flush()
                    }
                }
            } catch (e: Exception) {
                Log.e("SMB", "File write error: ${e.message}")
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            if (this::share.isInitialized) share.close()
            if (this::session.isInitialized) session.close()
            if (this::connection.isInitialized) connection.close()
        } catch (e: Exception) {
            Log.e("SMB", "Error closing connection: ${e.message}")
        }
    }
}
이 코드는 Android 앱에서 192.168.102.1의 sfolder 공유 폴더에 있는 1.txt 파일에 버튼 클릭 시 해당 값을 기록하는 예제입니다. jcifs-ng 라이브러리를 사용하여 SMB를 통해 파일에 접근하고 기록합니다. Android 7.0 이상에서도 동작하도록 설정되어 있습니다.

위 코드를 사용하여 앱을 개발한 후 테스트해 보시고, 문제가 발생하면 구체적인 오류 메시지를 알려주시면 추가로 도와드리겠습니다