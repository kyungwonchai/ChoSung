네, 알겠습니다. 하나씩 수정하고 확인하는 것이 혼란을 줄이는 좋은 방법입니다.

1. MessageContract.cs 파일 최종 코드 (3개 프로젝트 공통 사용)

이 파일은 MGSPBrokerService (중계 프로그램), MonitorAgent (Agent 프로그램), 그리고 잠시 후 작업할 MGSPMonitorControl (제어 UI) 프로젝트 모두에서 내용이 완전히 동일하게 사용되어야 합니다. 그래야 세 프로그램 간의 메시지 형식이 일치하여 정상적으로 통신할 수 있습니다.

가장 최신 요구사항(Agent의 IP 정보 명확화 등)을 반영한 MessageContract.cs 파일의 전체 코드는 다음과 같습니다. 이 파일을 각 프로젝트의 Models 폴더 (또는 적절한 위치)에 동일하게 넣어주세요.

C#

// 공통 사용: MGSPBrokerService/Models/MessageContract.cs
// 공통 사용: MonitorAgent/Models/MessageContract.cs
// 공통 사용: MGSPMonitorControl/Models/MessageContract.cs
using System.Collections.Generic;
using System; // DateTime 사용을 위해 추가

namespace SharedModels // 세 프로젝트가 모두 이 네임스페이스를 참조하거나, 각 프로젝트의 네임스페이스로 맞추되 내용은 동일하게
{
    // 메시지 타입 구분용 Enum
    public enum MessageType
    {
        // 공통
        Ping,
        Pong,

        // Agent -> Broker (최초 연결 및 상태 보고)
        AgentHello,                 // Agent가 Broker에 처음 연결 시 자신을 알림 (AgentId, IP, Version 등)
        AgentStatusUpdate,          // Agent가 Broker에게 자신의 현재 상태 보고 (예: 모니터 상태)
        AgentCommandResult,         // Agent가 Broker에게 명령 실행 결과 보고

        // UI -> Broker (명령 및 요청)
        UiClientHello,              // UI 클라이언트가 Broker에 처음 연결 시 자신을 알림 (선택적)
        UiRequest_ControlAgent,     // UI가 Agent 제어 명령을 Broker에게 요청
        UiRequest_GetBrokerStatus,  // UI가 Broker에게 상태 및 로그 요청
        UiRequest_GetInitialAgentList, // UI가 Broker에게 현재 Agent 목록 요청 (RegisterUiClient 시 자동 전송될 수도 있음)


        // Broker -> Agent (명령 및 연결 관리)
        BrokerToAgent_ExecuteControl, // Broker가 Agent에게 실제 제어 명령 전달
        BrokerAck_AgentHello,       // Broker가 AgentHello에 대한 응답
        BrokerPingToAgent,          // Broker가 Agent 생존 확인용 Ping (Agent는 Pong으로 응답)
        BrokerRequestReRegistration, // Broker가 Agent에게 재등록 요청

        // Broker -> UI (상태 브로드캐스트 및 응답)
        BrokerToUi_BroadcastAgentRegisteredOrUpdated, // 새 Agent 연결/정보 업데이트 시 모든 UI에 알림
        BrokerToUi_BroadcastAgentDisconnected,      // Agent 연결 끊김 시 모든 UI에 알림
        BrokerToUi_BroadcastAgentStatus,            // Broker가 UI에게 특정 Agent의 현재 상태 브로드캐스트
        BrokerToUi_ForwardAgentCommandResult,       // Broker가 UI에게 Agent의 명령 실행 결과 전달
        BrokerToUi_SendBrokerStatus,                // Broker가 UI에게 자신의 상태 및 로그 전달
        BrokerToUi_InitialAgentList,                // Broker가 새 UI 클라이언트에게 현재 Agent 목록 전달
        BrokerToUi_CommandDispatchFailed            // Broker가 UI의 명령을 Agent에게 전달 실패 시 알림
    }

    // 모든 메시지의 기본 구조
    public class BrokerMessage
    {
        public MessageType Type { get; set; }
        public string SourceId { get; set; } // 메시지를 보낸 주체 (AgentId, UI의 ConnectionId, 또는 "BROKER")
        public string TargetId { get; set; } // 메시지를 받을 대상 (AgentId, UI의 ConnectionId, "ALL_UIS", "BROKER")
        public string CorrelationId { get; set; } // 요청과 응답을 매칭하기 위한 ID (UI가 생성하여 요청 시 전달)
        public DateTime TimestampUtc { get; set; } = DateTime.UtcNow;
        public string Payload { get; set; } // 실제 데이터 (JSON 문자열)
    }

    // --- 페이로드 클래스들 ---

    // AgentHello 메시지의 페이로드 (Agent -> Broker)
    public class AgentHelloPayload
    {
        public string AgentIdProvidedByApp { get; set; } // Agent의 고유 식별자 (예: IP 또는 IP+MAC)
        public string MachineName { get; set; }
        public string PrimaryReportedIpAddress { get; set; } // Agent가 식별한 주 IP 주소
        public List<string> AllIpAddresses { get; set; } // Agent가 가진 모든 유효한 IPv4 주소 목록
        public string AgentVersion { get; set; }
        public string OsVersion { get; set; }
        public string InitialMonitorStatus { get; set; } // 예: "On", "Off", "Unknown"
    }

    // UiRequest_ControlAgent 메시지의 페이로드 (UI -> Broker)
    // 이 정보는 UI가 DB에서 가져와서 Broker에게 전달함
    public class UiControlAgentPayload
    {
        public string TargetAgentIdProvidedByApp { get; set; } // 제어할 Agent의 고유 ID (IP 기반)
        public string ControlAction { get; set; } // 예: "TurnMonitorOn", "TurnMonitorOff"
        
        // Agent 제어 경로 정보 (UI가 DB에서 읽어옴)
        public string ControlType { get; set; } // "Direct" 또는 "Gatewayed"
        public string PrimaryIpAddress { get; set; } // 직접 제어 시 이 Agent의 IP, 또는 Gateway 경유 시 최종 Agent의 내부 IP
        public int PrimaryPort { get; set; }      // 직접 제어 시 이 Agent의 포트, 또는 Gateway 경유 시 최종 Agent의 내부 포트
        
        // ControlType이 "Gatewayed"일 경우, UI가 DB에서 조회하여 Broker에게 알려줄 게이트웨이 Agent의 식별자(IP기반 ID)
        public string GatewayAgentIdToUse { get; set; } 
        // 참고: Broker는 이 GatewayAgentIdToUse를 보고, 연결된 Agent 중 해당 ID를 가진 Gateway Agent에게
        // 아래 BrokerExecuteControlPayload에 FinalTargetAgentIp/Port 정보를 담아 중계 요청함.

        public string OriginalParameters { get; set; } // 명령에 필요한 추가 파라미터 (JSON)
    }

    // BrokerToAgent_ExecuteControl 메시지의 페이로드 (Broker -> Agent 또는 Broker -> GatewayAgent)
    public class BrokerExecuteControlPayload
    {
        public string ActionToPerform { get; set; } // 예: "TurnMonitorOn"
        public string Parameters { get; set; }      // 명령 파라미터

        // 만약 이 명령이 GatewayAgent를 통해 최종 Agent로 가야 한다면 (Broker가 설정)
        public bool IsGatewayRelayRequired { get; set; } = false;
        public string FinalTargetAgentIp { get; set; }    // Gateway가 이 IP로 최종 전달
        public int FinalTargetAgentPort { get; set; }   // Gateway가 이 Port로 최종 전달
        public string FinalTargetAgentId { get; set; } // 최종 대상 Agent의 ID (정보용, Gateway가 로깅 등에 사용)
    }

    // AgentCommandResult 메시지의 페이로드 (Agent -> Broker)
    // (또는 Gateway Agent가 최종 Agent의 결과를 받아 Broker로 전달할 때도 이 페이로드 사용)
    public class AgentCommandResultPayload
    {
        public bool Success { get; set; }
        public string Message { get; set; }
        public string CurrentMonitorStatus { get; set; } // 명령 실행 후 모니터 상태
    }
    
    // AgentStatusUpdate 메시지의 페이로드 (Agent -> Broker)
    public class AgentStatusUpdatePayload
    {
        public string CurrentMonitorStatus { get; set; }
        // 추가적인 상태 정보 (예: CPU 사용량, 메모리 등) 포함 가능
        public bool IsRespondingToPing { get; set; } // Broker의 Ping에 대한 응답으로 상태 업데이트 시 사용 가능
    }

    // BrokerToUi_SendBrokerStatus 메시지의 페이로드 (Broker -> UI)
    // (이전 ServerStatusInfo와 유사)
    public class BrokerStatusInfoPayload
    {
        public DateTime ServerStartTimeUtc { get; set; }
        public string UptimeString { get; set; }
        public int ConnectedUiClientCount { get; set; }
        public int ConnectedAgentCount { get; set; }
        public List<string> RecentServerLogs { get; set; }
        public string BrokerVersion { get; set; }
    }

    // BrokerToUi_BroadcastAgentRegisteredOrUpdated 및 BrokerToUi_BroadcastAgentStatus 에서 사용될 Agent 정보
    // (DB의 ManagedAgent 모델과 유사하지만, 실시간 상태 위주)
    public class LiveAgentInfoForUi
    {
        public string AgentIdProvidedByApp { get; set; }
        public string AgentNameFromUiDb { get; set; } // UI가 DB에서 가져와서 Broker가 채워주거나, UI가 직접 채움
        public string AgentRoleReported { get; set; } // Agent가 Hello 시 보고한 역할 (Direct/Gateway/Proxied) - 참고용
        public string PrimaryReportedIpAddress { get; set; }
        public List<string> AllIpAddresses { get; set; }
        public bool IsOnline { get; set; } // Broker와의 연결 상태
        public string CurrentMonitorStatus { get; set; }
        public DateTime LastHeartbeatUtc { get; set; }
        public string StatusMessageFromAgent { get; set; } // Agent가 보낸 마지막 상태 메시지
        // UI는 DB에서 가져온 설정 정보(ControlType, GatewayAgentIdToUse 등)와 이 LiveAgentInfo를 조합하여 화면에 표시
    }
}
네임스페이스 참고:
위 코드에서는 SharedModels 라는 네임스페이스를 사용했습니다.

옵션 1 (권장): 세 프로젝트(MGSPBrokerService, MonitorAgent, MGSPMonitorControl)가 모두 참조하는 별도의 클래스 라이브러리 프로젝트 (예: MonitorControl.SharedModels)를 만들고, 이 MessageContract.cs 파일을 그곳에 넣습니다. 그러면 모든 프로젝트에서 동일한 모델을 참조하여 사용하게 됩니다.
옵션 2: 각 프로젝트의 Models 폴더에 이 MessageContract.cs 파일을 복사해 넣고, 각 파일의 네임스페이스를 해당 프로젝트의 네임스페이스(예: MGSPBrokerService.Models, MonitorAgent.Models, MGSPMonitorControl.Models)로 수정합니다. 다만, 내용(클래스명, 프로퍼티명, Enum 값 등)은 반드시 동일하게 유지해야 합니다.
여기서는 설명의 편의상 파일 내용만 드렸습니다. 프로젝트 구성 시 위 옵션 중 하나를 선택하시면 됩니다.

이제 이 MessageContract.cs를 기준으로, 이전에 수정을 시작했던 MonitorAgent 프로그램의 관련 파일들 전체 코드를 이어서 드리겠습니다. "IP 기반 ID", "명령줄 인자로 중계기 주소 수신", "날짜별 로그 및 오래된 로그 자동 삭제" 기능이 반영된 버전입니다.

MonitorAgent 프로젝트의 수정 대상 파일 목록:

Config/AppConstants.cs (수정)
Config/AgentIdentifier.cs (수정 - IP 기반 ID 사용)
Config/BrokerAddressProvider.cs (삭제 - App.xaml.cs에서 명령줄 인자 처리)
Services/LoggingService.cs (수정 - 날짜별 로그, 오래된 로그 삭제)
Models/MessageContract.cs (위에서 제공한 공통 파일로 교체)
Network/BrokerTcpClient.cs (수정 - 새 AgentHelloPayload 사용 등)
Network/DownstreamAgentClient.cs (수정 - 새 메시지 규약 반영)
Core/AgentCore.cs (수정 - 새 설정 방식, 새 메시지 규약, 게이트웨이 로직 명확화)
UI/TrayIconManager.cs (큰 변경 없을 수 있으나 확인)
App.xaml.cs (수정 - 명령줄 인자 파싱, 로그 정리 트리거, BrokerAddressProvider 사용 않음)