 데이터베이스에서 각 IP에 대해 최근 두 개의 QR 코드만 유지되도록 FIFO(First-In, First-Out) 방식으로 구현해보겠습니다. 이 방식에서는 새로운 QR 코드가 추가될 때, 기존의 가장 오래된 QR 코드가 삭제되거나 덮어쓰여야 합니다.

1. 데이터베이스 스크립트
먼저 테이블 구조를 조금 변경하여 각 QR 코드에 대한 시간 정보를 관리하고, FIFO 방식으로 처리할 수 있도록 합니다.

sql
코드 복사
CREATE TABLE QRCodeData (
    ID INT PRIMARY KEY IDENTITY(1,1),
    IPAddress VARCHAR(15) NOT NULL,
    QRCode VARCHAR(20) NOT NULL,
    CreatedAt DATETIME DEFAULT GETDATE()
);

-- Index to ensure uniqueness and efficient lookup
CREATE INDEX IDX_QRCodeData_IPAddress_CreatedAt ON QRCodeData(IPAddress, CreatedAt);
2. QR 코드 생성 및 표시 로직 (C#)
이제 코드를 수정하여 데이터베이스에 최신 두 개의 QR 코드를 유지하도록 합니다.

csharp
코드 복사
using System;
using System.Data.SqlClient;
using System.Drawing;
using System.Net;
using System.Text;
using System.Threading;
using System.Windows.Forms;
using ZXing;

public class MainForm : Form
{
    private NotifyIcon trayIcon;
    private ContextMenu trayMenu;
    private PictureBox qrPictureBox;
    private string connectionString = "YourConnectionStringHere";

    public MainForm()
    {
        this.Text = "QR Code Generator";
        this.Size = new Size(300, 300);
        this.StartPosition = FormStartPosition.CenterScreen;

        qrPictureBox = new PictureBox
        {
            Dock = DockStyle.Fill,
            SizeMode = PictureBoxSizeMode.StretchImage
        };
        this.Controls.Add(qrPictureBox);

        trayMenu = new ContextMenu();
        trayMenu.MenuItems.Add("Exit", OnExit);

        trayIcon = new NotifyIcon();
        trayIcon.Text = "QR Code Generator";
        trayIcon.Icon = new Icon(SystemIcons.Application, 40, 40);
        trayIcon.ContextMenu = trayMenu;
        trayIcon.Visible = true;
        trayIcon.DoubleClick += (sender, e) => this.Show();

        this.FormClosing += (sender, e) => { e.Cancel = true; this.Hide(); };

        Thread qrThread = new Thread(new ThreadStart(UpdateQRCode));
        qrThread.IsBackground = true;
        qrThread.Start();
    }

    private void UpdateQRCode()
    {
        while (true)
        {
            string ipAddress = GetLocalIPAddress();
            string qrCode = QRCodeGenerator.GenerateQRCode(20);
            Bitmap qrBitmap = GenerateQRCodeBitmap(qrCode);

            this.Invoke((MethodInvoker)delegate
            {
                qrPictureBox.Image = qrBitmap;
            });

            UpdateDatabase(ipAddress, qrCode);
            Thread.Sleep(3000);
        }
    }

    private string GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                return ip.ToString();
            }
        }
        throw new Exception("Local IP Address Not Found!");
    }

    private void UpdateDatabase(string ipAddress, string qrCode)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            // Insert new QR code
            string insertQuery = @"
                INSERT INTO QRCodeData (IPAddress, QRCode)
                VALUES (@IPAddress, @QRCode)";
            using (SqlCommand command = new SqlCommand(insertQuery, connection))
            {
                command.Parameters.AddWithValue("@IPAddress", ipAddress);
                command.Parameters.AddWithValue("@QRCode", qrCode);
                command.ExecuteNonQuery();
            }

            // Remove the oldest QR code if more than two entries exist
            string deleteQuery = @"
                DELETE FROM QRCodeData
                WHERE IPAddress = @IPAddress
                AND ID NOT IN (
                    SELECT TOP 2 ID
                    FROM QRCodeData
                    WHERE IPAddress = @IPAddress
                    ORDER BY CreatedAt DESC
                )";
            using (SqlCommand command = new SqlCommand(deleteQuery, connection))
            {
                command.Parameters.AddWithValue("@IPAddress", ipAddress);
                command.ExecuteNonQuery();
            }
        }
    }

    private Bitmap GenerateQRCodeBitmap(string qrCode)
    {
        var writer = new BarcodeWriter
        {
            Format = BarcodeFormat.QR_CODE,
            Options = new ZXing.Common.EncodingOptions
            {
                Width = 250,
                Height = 250
            }
        };
        return writer.Write(qrCode);
    }

    private void OnExit(object sender, EventArgs e)
    {
        Application.Exit();
    }

    [STAThread]
    public static void Main()
    {
        StartupManager.EnsureStartup();
        Application.Run(new MainForm());
    }
}

public static class QRCodeGenerator
{
    private static Random random = new Random();

    public static string GenerateQRCode(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        StringBuilder result = new StringBuilder(length);
        for (int i = 0; i < length; i++)
        {
            result.Append(chars[random.Next(chars.Length)]);
        }
        return result.ToString();
    }
}

public static class StartupManager
{
    private const string StartupKey = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run";
    private const string AppName = "QR Code Generator";
    private const string AppPath = "C:\\Agent\\MobileQR.exe";

    public static void EnsureStartup()
    {
        RegistryKey key = Registry.CurrentUser.OpenSubKey(StartupKey, true);
        if (key.GetValue(AppName) == null)
        {
            key.SetValue(AppName, AppPath);
        }
    }
}
설명
데이터베이스: 테이블 QRCodeData는 IP 주소, QR 코드, 그리고 생성 시간을 기록합니다. 각 IP 주소에 대해 최대 두 개의 QR 코드가 유지되도록 하는 구조입니다.
코드 업데이트: 새로운 QR 코드가 생성되면 데이터베이스에 삽입됩니다. 삽입 후, 해당 IP 주소에 대해 가장 오래된 QR 코드를 삭제하는 쿼리가 실행됩니다. 이로써 최신 두 개의 QR 코드만 유지되게 됩니다.
이제 이 코드로 실행하면