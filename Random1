네, 여러 문제가 한꺼번에 발생하여 많이 답답하실 것 같습니다. 차근차근 하나씩 해결해 보겠습니다.

1. BrokerStatus.RecentServerLogs 바인딩 오류: "읽기 전용 속성에서 TwoWay 또는 OneWayToSource 바인딩이 작동하지 않습니다."

이 오류는 TextBox의 Text 속성에 ObservableCollection<string>을 바인딩하면서 발생한 것으로 보입니다. TextBox.Text는 기본적으로 사용자의 입력도 받을 수 있는 TwoWay 바인딩을 시도할 수 있는데, ObservableCollection<string> 자체를 Text 속성이 직접 수정할 수는 없기 때문입니다.

해결 방법: Text 속성의 바인딩 모드를 명시적으로 OneWay로 설정합니다. 어차피 로그 표시는 단방향(ViewModel -> View)이기 때문입니다. 그리고 StringCollectionToStringConverter가 이 컬렉션을 문자열로 잘 변환해주고 있을 것입니다.

수정된 MGSPMonitorControl/Views/MainWindow.xaml (로그 표시 TextBox 부분만):

XML

<GroupBox Grid.Column="0" Header="UI Action Log" Margin="0,0,5,0">
                <DockPanel>
                    <Button DockPanel.Dock="Top" Content="Clear UI Log" Command="{Binding ClearUiLogsCommand}" Margin="0,0,0,5" HorizontalAlignment="Right" Padding="5,2"/>
                    <TextBox x:Name="UiLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                             FontFamily="Consolas" FontSize="11"
                             Text="{Binding UiActionLogs, Converter={StaticResource StringCollectionToStringConverter}, Mode=OneWay}"/> 
                             </DockPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="Broker Server Log (Recent)" Margin="5,0,0,0">
                 <TextBox x:Name="BrokerLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                          FontFamily="Consolas" FontSize="11"
                          Text="{Binding BrokerStatus.RecentServerLogs, Converter={StaticResource StringCollectionToStringConverter}, Mode=OneWay}"/>
                          </GroupBox>
위와 같이 Mode=OneWay를 추가해주시면 해당 바인딩 오류는 해결될 것입니다. BrokerStatus.RecentServerLogs는 ObservableCollection이므로, 컬렉션에 아이템이 추가/삭제될 때마다 StringCollectionToStringConverter가 다시 호출되어 Text 속성이 업데이트됩니다.

2. Broker 연결 안 됨 오류 및 UI 즉시 종료 문제

원인 가능성:

Broker 주소/포트 불일치: UI의 App.config 파일에 있는 BrokerAddress 값 (IP:Port)이 실제로 실행 중인 MGSPBrokerService가 리슨하는 UI 연결용 IP 및 포트(기본값 localhost:9001)와 다를 수 있습니다.
방화벽 문제: MGSPBrokerService가 실행되는 PC의 방화벽 또는 제어 UI가 실행되는 PC의 방화벽이 해당 포트의 TCP 통신을 차단하고 있을 수 있습니다.
Broker 서버 시작 실패: MGSPBrokerService 실행 시 콘솔 창에 오류 메시지 없이 "Server started successfully at..." 메시지가 정상적으로 출력되었는지 확인해야 합니다.
네트워크 구성: 두 PC가 서로 통신 불가능한 네트워크 환경일 수 있습니다.
UI 프로그램 시작 시 예외 처리 미흡: App.xaml.cs의 OnStartup 메서드에서 BrokerClientService 연결 시도 등 초기화 과정 중에 발생하는 예외가 제대로 처리되지 않아 프로그램이 즉시 종료될 수 있습니다.
해결 및 안정성 강화 방안:

2.1. MGSPMonitorControl/App.xaml.cs 수정 (오류 처리 강화)

OnStartup 메서드에서 서비스 초기화 및 Broker 연결 시도 부분을 더 강력한 try-catch로 감싸고, 치명적인 오류 발생 시 사용자에게 명확히 알린 후 애플리케이션을 정상적으로 종료하도록 합니다.

C#

// MGSPMonitorControl/App.xaml.cs
using System;
using System.Configuration; 
using System.Windows;
using MGSPMonitorControl.DataAccess; 
using MGSPMonitorControl.Services;  
using MGSPMonitorControl.ViewModels; 
using MGSPMonitorControl.Views;      
using System.Threading.Tasks; // TaskScheduler

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        private IDatabaseService _databaseService;
        private IBrokerClientService _brokerClientService;
        // private ILoggingService _uiLocalLogger; // 필요시 UI 자체 파일 로깅

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            SetupGlobalExceptionHandling(); // 전역 예외 처리기 먼저 설정

            // 서비스 초기화 및 메인 윈도우 로드 로직을 별도 메서드로 분리하여 try-catch 용이하게
            InitializeAndRunApplication();
        }

        private async void InitializeAndRunApplication() // async void 사용 (최상위 이벤트 핸들러)
        {
            try
            {
                // 1. 서비스 인스턴스 생성
                // DatabaseService는 생성자에서 App.config의 연결 문자열을 읽음
                _databaseService = new DatabaseService(); 
                
                // BrokerClientService도 생성자에서 App.config의 BrokerAddress를 읽음
                _brokerClientService = new BrokerClientService(/* _uiLocalLogger */); 

                // 2. 메인 창 ViewModel 및 메인 창 바로 생성 및 표시
                var mainViewModel = new MainViewModel(_databaseService, _brokerClientService);
                
                var mainWindow = new MainWindow(mainViewModel); 
                
                this.MainWindow = mainWindow;
                mainWindow.Show();
                
                Console.WriteLine("MGSPMonitorControl UI started. Main window shown.");
                // UI 로딩 후 Broker 연결 시도 (MainViewModel 생성자에서도 시도함, 중복될 수 있으나 여기서도 확인)
                if (!_brokerClientService.IsConnected)
                {
                    bool connected = await _brokerClientService.ConnectAsync();
                    if (!connected)
                    {
                        // 연결 실패 시 MainViewModel의 BrokerConnectionStatus가 업데이트 될 것임
                        // 사용자에게 명시적 알림이 필요하면 여기서 MessageBox 표시 가능
                        MessageBox.Show($"Failed to connect to Broker Service at specified address (check App.config and Broker service status).\nUI will operate in offline mode regarding Broker communication.",
                                        "Broker Connection Failed", MessageBoxButton.OK, MessageBoxImage.Warning);
                    }
                }
            }
            catch (ConfigurationErrorsException cex)
            {
                ShowCriticalErrorAndShutdown($"Application configuration error: {cex.Message}\nPlease check App.config (especially 'MonitorControlDBConnection' connection string and 'BrokerAddress' appSetting).\nThe application will now exit.");
            }
            catch (Exception ex) 
            {
                 ShowCriticalErrorAndShutdown($"A critical error occurred during application startup: {ex.ToString()}\nThe application will now exit.");
            }
        }


        private void SetupGlobalExceptionHandling()
        {
            // UI 스레드에서 처리되지 않은 예외
            this.DispatcherUnhandledException += (s, e) =>
            {
                string errorMessage = $"An unhandled UI exception occurred: {e.Exception.GetBaseException().Message}\n\nStack Trace:\n{e.Exception.StackTrace}\n\nApplication may become unstable. It's recommended to restart.";
                MessageBox.Show(errorMessage, "Unhandled UI Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                Console.WriteLine($"[FATAL UI ERROR] {e.Exception.ToString()}");
                // 실제로는 파일 로그에 기록
                // _uiLocalLogger?.LogFatal("Unhandled UI exception.", e.Exception);
                e.Handled = true; // true로 설정하면 애플리케이션이 즉시 종료되지 않도록 시도 (주의)
                // 원한다면 여기서 Shutdown() 호출하여 강제 종료
                // if (MessageBox.Show("An unhandled error occurred. Do you want to close the application?", "Critical Error", MessageBoxButton.YesNo, MessageBoxImage.Error) == MessageBoxResult.Yes)
                // {
                //    Shutdown();
                // }
            };

            // 백그라운드 스레드에서 처리되지 않은 예외
            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                Console.WriteLine($"[FATAL BACKGROUND ERROR] {e.Exception.ToString()}");
                // _uiLocalLogger?.LogFatal("Unobserved task exception.", e.Exception.GetBaseException());
                // 이 예외는 UI 스레드가 아니므로 MessageBox 직접 사용 시 문제 발생 가능.
                // e.SetObserved()를 호출하여 프로세스가 종료되는 것을 방지할 수 있지만, 근본 원인 해결 필요.
                e.SetObserved(); 
            };
        }
        
        private void ShowCriticalErrorAndShutdown(string message)
        {
            MessageBox.Show(message, "Application Startup Error", MessageBoxButton.OK, MessageBoxImage.Error);
            Console.WriteLine($"[FATAL STARTUP ERROR] {message}");
            // 애플리케이션이 이미 종료 중이 아닐 때만 Shutdown 호출
            if (Application.Current != null && Application.Current.Dispatcher.CheckAccess()) 
            {
                 if (Application.Current.MainWindow != null && Application.Current.MainWindow.IsLoaded) 
                    Application.Current.MainWindow.Close(); // 메인 창이 있다면 닫기 시도
                 Application.Current.Shutdown(-1); // 오류 코드로 종료
            }
            else if (Application.Current != null)
            {
                Application.Current.Dispatcher.Invoke(() => {
                    if (Application.Current.MainWindow != null && Application.Current.MainWindow.IsLoaded) Application.Current.MainWindow.Close();
                    Application.Current.Shutdown(-1);
                });
            }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            // MainViewModel의 Cleanup은 MainWindow.xaml.cs의 Window_Closing에서 호출됨
            // 여기서는 BrokerClientService의 Dispose만 명시적으로 호출 (중복 방지 로직이 내부에 있어야 함)
            (_brokerClientService as IDisposable)?.Dispose();
            
            Console.WriteLine("MGSPMonitorControl application exited.");
            base.OnExit(e);
        }
    }
}
App.xaml.cs 수정 사항:

OnStartup의 로직을 InitializeAndRunApplication 메서드로 분리하고 async void로 만들어 내부에서 await 사용이 가능하도록 했습니다.
InitializeAndRunApplication 내부의 서비스 생성 및 _brokerClientService.ConnectAsync() 호출 부분을 try-catch로 감싸서, 초기화 또는 초기 연결 실패 시 사용자에게 오류 메시지를 보여주고 애플리케이션을 정상적으로 종료하도록 ShowCriticalErrorAndShutdown 메서드를 호출합니다.
SetupGlobalExceptionHandling 메서드를 두어 UI 스레드 및 백그라운드 스레드의 전역 예외를 처리하고 로깅(현재는 콘솔)하도록 했습니다. 이는 프로그램이 예기치 않게 "바로 꺼지는" 현상을 줄이는 데 도움이 됩니다.
ShowCriticalErrorAndShutdown 메서드는 메시지 박스를 보여주고 안전하게 애플리케이션을 종료합니다.
2.2. Broker 연결 문제 해결을 위한 점검 사항:

UI 프로그램이 Broker에 연결되지 않는 문제를 해결하려면 다음 사항들을 순서대로 점검해보세요.

Broker (MGSPBrokerService) 실행 상태 확인:

MGSPBrokerService.exe를 실행했을 때, 콘솔 창에 "Server started successfully at http://localhost:9001" (또는 설정한 주소)와 "UI Listener started on port 9001", "Agent Listener started on port 9002" 같은 메시지가 오류 없이 뜨는지 확인합니다.
만약 Broker 실행 시 오류가 발생한다면, 그 오류 메시지를 먼저 해결해야 합니다.
UI의 App.config 파일 확인 (MGSPMonitorControl 프로젝트):

App.config 파일이 프로젝트에 있고, "빌드 작업"이 "콘텐츠", "출력 디렉터리로 복사"가 "항상 복사" 또는 "변경된 내용만 복사"로 되어 있는지 확인합니다. (빌드 시 MGSPMonitorControl.exe.config 파일로 출력 폴더에 복사되어야 함)
appSettings 섹션의 BrokerAddress 키 값을 확인합니다.
XML

<appSettings>
    <add key="BrokerAddress" value="127.0.0.1:9001"/> 
    </appSettings>
이 주소와 포트가 실제로 MGSPBrokerService가 UI 연결을 위해 리슨하는 주소 및 포트와 정확히 일치해야 합니다. (Broker의 Program.cs에 설정된 uiPort)
방화벽 확인:

Broker PC: Windows 방화벽 또는 다른 보안 프로그램이 TCP 포트 9001 (UI 리슨 포트)에 대한 인바운드 연결을 허용하고 있는지 확인합니다.
UI PC: 혹시 아웃바운드 연결을 제한하는 방화벽 정책이 있는지 확인합니다 (일반적으로는 잘 없음).
네트워크 연결 확인 (UI PC에서 Broker PC로):

UI PC의 명령 프롬프트(cmd)에서 ping <Broker_PC_IP주소>를 실행하여 Broker PC와 네트워크 통신이 가능한지 확인합니다.
가능하다면, telnet <Broker_PC_IP주소> 9001 명령을 실행하여 해당 포트로 TCP 연결이 수립되는지 확인합니다. (Telnet 클라이언트가 Windows 기능에서 활성화되어 있어야 함) 연결이 바로 끊기거나 오류가 발생하면 포트가 막혀있거나 서버가 해당 포트에서 리슨하지 않는 것입니다.
로그 확인:

MGSPBrokerService 실행 시 콘솔에 출력되는 로그를 확인합니다. UI가 접속을 시도할 때 어떤 로그가 남는지 (예: "Client attempting to connect...", "UI Client connected..." 등) 확인합니다.
MGSPMonitorControl UI 프로그램 실행 시 UiActionLogs 텍스트 박스에 "Attempting to connect to Broker..." 등의 로그가 남는지, 연결 실패 시 오류 메시지가 기록되는지 확인합니다. (현재 UI 로컬 파일 로그는 구현 안됨, 콘솔 및 UI 텍스트박스 로그 활용)
수정된 MGSPMonitorControl/Views/MainWindow.xaml (전체 코드 - 바인딩 오류 수정 반영)

이전 답변에서 TextBox의 ItemsSource을 제거하고 Mode=OneWay를 Text 바인딩에 추가한 버전입니다.

XML

<Window x:Class="MGSPMonitorControl.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl" 
        xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        xmlns:converters="clr-namespace:MGSPMonitorControl.Views" mc:Ignorable="d"
        Title="MGSP Monitor Control Panel - v1.0" Height="768" Width="1280"
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel, IsDesignTimeCreatable=True}" 
        Closing="Window_Closing">
    <Window.Resources>
        <converters:StringCollectionToStringConverter x:Key="StringCollectionToStringConverter"/>
        <converters:ConnectionStatusToColorConverter x:Key="ConnectionStatusToColorConverter"/>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> 
            <RowDefinition Height="*"/>    
            <RowDefinition Height="Auto"/> 
            <RowDefinition Height="200"/>  
        </Grid.RowDefinitions>

        <Border Grid.Row="0" BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="5">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                    <TextBlock Text="Broker Status: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding BrokerConnectionStatus}" Margin="0,0,5,0" 
                               Foreground="{Binding BrokerConnectionStatus, Converter={StaticResource ConnectionStatusToColorConverter}}"/>
                    <Button Content="Connect" Command="{Binding ConnectToBrokerCommand}" Margin="0,0,5,0" Padding="5,2"/>
                    <Button Content="Disconnect" Command="{Binding DisconnectFromBrokerCommand}" Padding="5,2"/>
                    <TextBlock Text="{Binding BrokerStatus.BrokerVersion, StringFormat='Broker Ver: {0}'}" Margin="20,0,0,0" Foreground="DarkSlateGray" VerticalAlignment="Center"/>
                </StackPanel>
                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                    <TextBlock Text="{Binding CurrentModeDisplay}" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,15,0" MinWidth="180"/>
                    <TextBlock Text="Enter Password for Mode Change:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <PasswordBox x:Name="ModePasswordBox" Width="150" Height="24" VerticalContentAlignment="Center" Margin="0,0,5,0"/>
                    <Button Content="Apply Mode" Command="{Binding ApplyModeCommand}" CommandParameter="{Binding ElementName=ModePasswordBox}" Padding="5,2" Margin="0,0,10,0"/>
                    <Button Content="Logout (Basic Mode)" Command="{Binding LogoutCommand}" Padding="5,2"/>
                </StackPanel>
                <Expander Header="Broker Server Details" Margin="0,0,0,5" IsExpanded="False">
                    <StackPanel Margin="10,5,0,5">
                        <StackPanel Orientation="Horizontal"><TextBlock Text="Uptime: " FontWeight="SemiBold" MinWidth="80"/><TextBlock Text="{Binding BrokerStatus.UptimeString}"/></StackPanel>
                        <StackPanel Orientation="Horizontal"><TextBlock Text="Agents: " FontWeight="SemiBold" MinWidth="80"/><TextBlock Text="{Binding BrokerStatus.ConnectedAgentCount}"/><TextBlock Text=" UIs: " FontWeight="SemiBold" Margin="10,0,0,0"/><TextBlock Text="{Binding BrokerStatus.ConnectedUiClientCount}"/></StackPanel>
                        <Button Content="Refresh Broker Status" Command="{Binding RequestBrokerStatusCommand}" Margin="0,5,0,0" HorizontalAlignment="Left" Padding="5,2"/>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>

        <GroupBox Grid.Row="1" Header="Managed Agents" Margin="0,5,0,5" Padding="5">
            <Grid>
                <Grid.RowDefinitions><RowDefinition Height="*"/><RowDefinition Height="Auto"/></Grid.RowDefinitions>
                <DataGrid Grid.Row="0" x:Name="AgentsDataGrid" AutoGenerateColumns="False" CanUserAddRows="False"
                          ItemsSource="{Binding Agents}" SelectedItem="{Binding SelectedAgent}" 
                          SelectionMode="Single" IsReadOnly="True" AlternatingRowBackground="#FFF0F0F0"
                          HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsOnline}" Value="True"><Setter Property="Foreground" Value="DarkGreen"/></DataTrigger>
                                <DataTrigger Binding="{Binding IsOnline}" Value="False"><Setter Property="Foreground" Value="DarkGray"/><Setter Property="FontStyle" Value="Italic"/></DataTrigger>
                                <DataTrigger Binding="{Binding IsEnabled}" Value="False"><Setter Property="Background" Value="#FFEFEFEF"/><Setter Property="ToolTip" Value="This agent configuration is disabled."/></DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Header="DB On" Binding="{Binding IsEnabled}" Width="Auto" IsReadOnly="True"/>
                        <DataGridCheckBoxColumn Header="Live" Binding="{Binding IsOnline}" Width="Auto" IsReadOnly="True"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding AgentName}" Width="1.5*"/>
                        <DataGridTextColumn Header="Agent ID (IP)" Binding="{Binding AgentIdProvidedByApp}" Width="1.2*"/>
                        <DataGridTextColumn Header="Monitor" Binding="{Binding CurrentMonitorStatus}" Width="Auto">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="On"><Setter Property="Foreground" Value="ForestGreen"/></DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Off"><Setter Property="Foreground" Value="Crimson"/></DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Unknown"><Setter Property="Foreground" Value="SlateGray"/></DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus, ConverterParameter=Offline, Converter={StaticResource StringToSpecificBrushConverter}, FallbackValue=DarkSlateGray}"><Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=(TextBlock.Foreground)}"/></DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Type" Binding="{Binding ControlType}" Width="Auto"/>
                        <DataGridTextColumn Header="Target IP" Binding="{Binding PrimaryIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="Target Port" Binding="{Binding PrimaryPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Gateway ID" Binding="{Binding GatewayAgentIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="GW Port" Binding="{Binding GatewayAgentPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Seen" Binding="{Binding LastHeartbeatUtc, StringFormat='HH:mm:ss dd/MM'}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Message" Binding="{Binding LastStatusMessageFromAgent}" Width="2*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,10,0,0">
                    <Button Content="Refresh List (DB)" Command="{Binding LoadAgentsCommand}" Margin="0,0,5,0" Padding="8,4"/>
                    <Button Content="Add Config" Command="{Binding AddAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <Button Content="Edit Config" Command="{Binding EditAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                    <Button Content="Delete Config" Command="{Binding DeleteAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                </StackPanel>
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="2" Header="Selected Agent Control" Margin="0,5,0,5" Padding="5" IsEnabled="{Binding SelectedAgent.IsOnline}">
             <StackPanel Orientation="Horizontal">
                <TextBlock Text="Selected:" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBlock Text="{Binding SelectedAgent.AgentName, FallbackValue='(None)'}" VerticalAlignment="Center" Margin="0,0,20,0" FontStyle="Italic" MaxWidth="200" TextTrimming="CharacterEllipsis"/>
                <Button Content="Monitor ON" Command="{Binding MonitorOnCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <Button Content="Monitor OFF" Command="{Binding MonitorOffCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                <Button Content="Ping Agent" Command="{Binding PingAgentCommand}" Padding="10,5"/>
            </StackPanel>
        </GroupBox>

        <Grid Grid.Row="3" Margin="0,5,0,0">
            <Grid.ColumnDefinitions><ColumnDefinition Width="*"/><ColumnDefinition Width="*"/></Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Header="UI Action Log" Margin="0,0,5,0">
                <DockPanel>
                    <Button DockPanel.Dock="Top" Content="Clear UI Log" Command="{Binding ClearUiLogsCommand}" Margin="0,0,0,5" HorizontalAlignment="Right" Padding="5,2"/>
                    <TextBox x:Name="UiLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                             FontFamily="Consolas" FontSize="11"
                             Text="{Binding UiActionLogs, Converter={StaticResource StringCollectionToStringConverter}, Mode=OneWay}"/>
                </DockPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="Broker Server Log (Recent)" Margin="5,0,0,0">
                 <TextBox x:Name="BrokerLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                          FontFamily="Consolas" FontSize="11"
                          Text="{Binding BrokerStatus.RecentServerLogs, Converter={StaticResource StringCollectionToStringConverter}, Mode=OneWay}"/>
            </GroupBox>
        </Grid>
    </Grid>
</Window>
MainWindow.xaml 수정:

CurrentMonitorStatus 컬럼의 DataTrigger에서 StringContainsToSpecificValueConverter 대신, "Offline" 관련 값들에 대해 명시적인 DataTrigger를 더 추가하거나, MainViewModel의 ManagedAgentDisplay.CurrentMonitorStatus 값을 더 표준화하여 (예: "Online-On", "Online-Off", "Offline") 간단한 값 비교로 처리할 수 있도록 하는 것이 좋습니다. 위 코드에서는 "Offline (Broker D/C)" 등 몇 가지 상태에 대한 예시를 추가했습니다. 실제 Agent가 보내는 상태 문자열에 맞춰 DataTrigger를 조정해야 합니다.
StringToSpecificBrushConverter 같은 새로운 컨버터가 필요하다면 해당 C# 코드와 XAML 리소스 정의가 필요합니다. 여기서는 일단 이 부분을 주석 처리하고, 직접적인 값 비교로 가능한 부분만 남겼습니다.
StringToSpecificBrushConverter 예시 (필요하다면 Converters 폴더에 추가):

C#

// using System;
// using System.Globalization;
// using System.Windows.Data;
// using System.Windows.Media;

// public class StringToSpecificBrushConverter : IValueConverter
// {
//     public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
//     {
//         string stringValue = value as string;
//         string parameterString = parameter as string; // 비교할 부분 문자열 (예: "Offline")

//         if (stringValue != null && parameterString != null && 
//             stringValue.IndexOf(parameterString, StringComparison.OrdinalIgnoreCase) >= 0)
//         {
//             return Brushes.DarkSlateGray; // 예시 색상
//         }
//         // 기본값 또는 다른 조건에 따른 색상 반환 가능
//         return Binding.DoNothing; // 변경 없음 또는 기본값 사용
//     }
//     public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) => throw new NotImplementedException();