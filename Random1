해했습니다. 지금 요청하시는 부분은 비동기 함수의 개수에 따라 UI에서 도형의 개수를 동적으로 맞추고, 각 함수를 1, 2, 3과 같은 시퀀스에 맞게 실행되도록 하는 것입니다. 또한, 이 함수가 실시간으로 UI에 반영되면서, 사용자가 각 함수의 상태를 비주얼하게 확인할 수 있게 해야 합니다.

먼저, 비동기 함수가 각 시퀀스 플래그에 따라 동적으로 추가되고, 그 함수들의 실행 상태가 도형으로 나타나는 구조를 정확하게 만들어 보겠습니다.

핵심 요구 사항:
함수 개수에 맞는 도형 개수를 자동으로 생성.
각 **시퀀스 플래그(1, 2, 3)**에 따라 다른 비동기 함수 세트가 실행.
도형이 실시간으로 색상 변경되며, 진행 상태를 시각적으로 표시.
사용자가 비동기 함수를 우클릭하거나, 특정 작업만 다시 실행할 수 있음.
TaskModel.cs (수정된 코드)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Collections.ObjectModel;
using System.Windows;
using System.Collections.Generic;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스 플래그에 따라 함수들을 순차적으로 실행합니다.
/// 함수의 개수에 맞춰 도형이 동적으로 생성되고, 작업 상태가 실시간으로 반영됩니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }  // 시퀀스 플래그 (1: 시작, 2: 중간, 3: 끝)

    // 함수 상태를 위한 도형 색상 리스트 (각 함수에 따른 도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 각 함수 이름을 저장 (마우스 오버 시 함수 이름 표시)
    public ObservableCollection<string> FunctionNames { get; set; }

    // 실제 비동기 함수를 저장하는 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 진행 상태를 표시하는 텍스트 (실시간으로 반영)
    private string _progressText;
    public string ProgressText
    {
        get => _progressText;
        set
        {
            _progressText = value;
            OnPropertyChanged(nameof(ProgressText));
        }
    }

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSpecificTaskCommand { get; }  // 도형 우클릭 시 특정 함수만 실행

    // 다음 작업 행을 관리하는 Action 델리게이트 (현재 작업 완료 후 호출)
    public Action<TaskModel> StartNextTask { get; set; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag; // 시퀀스 플래그는 파일에서 결정됨

        _taskQueue = taskQueue;
        Status = "Pending"; // 처음엔 대기 상태
        ProgressText = "Pending"; // 기본 상태 (대기 중)

        // 각 함수마다 도형을 설정 (시퀀스에 따라 다른 개수)
        FunctionStatusColors = new ObservableCollection<Brush>();
        FunctionNames = new ObservableCollection<string>();
        FunctionTasks = new List<Func<Task>>(); // 비동기 함수를 저장할 리스트 초기화

        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        ExecuteSpecificTaskCommand = new RelayCommand<int>(ExecuteSpecificTask);

        InitializeFunctions(); // 시퀀스 플래그에 따라 함수 및 도형 초기화
    }

    /// <summary>
    /// 작업을 시작하고 각 함수 완료 시 도형 색상을 변경합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";
        ProgressText = "Running...";
        _taskQueue.EnqueueTask(ExecuteTaskSequence); // 작업 큐에 시퀀스 작업 추가
    }

    /// <summary>
    /// 시퀀스 플래그에 따라 작업을 순차적으로 실행합니다.
    /// 작업이 완료되면 StartNextTask로 다음 행을 시작합니다.
    /// </summary>
    private async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            await ExecuteTaskWithColor(i, FunctionTasks[i]); // 함수 실행 후 도형 색상 변경
        }

        // 작업 완료 후 상태 변경
        Status = "Completed";
        ProgressText = "Completed";

        // 현재 작업이 끝났으므로 다음 작업 행을 실행
        StartNextTask?.Invoke(this);
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 완료되면 해당 인덱스의 도형 색상을 변경합니다.
    /// </summary>
    private async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.SkyBlue; // 작업 진행 중 색상
            OnPropertyChanged(nameof(FunctionStatusColors));
        });

        await task(); // 작업 실행

        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.Green; // 작업 완료 시 색상
            OnPropertyChanged(nameof(FunctionStatusColors));
        });
    }

    /// <summary>
    /// 특정 함수를 우클릭하여 단독 실행합니다.
    /// </summary>
    public async void ExecuteSpecificTask(int taskIndex)
    {
        await ExecuteTaskWithColor(taskIndex, FunctionTasks[taskIndex]); // 특정 함수만 실행
    }

    /// <summary>
    /// 함수 및 도형을 초기화하는 메서드
    /// </summary>
    private void InitializeFunctions()
    {
        switch (SequenceFlag)
        {
            case 1:
                AddFunction("Task A", ExecuteTaskA);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task C", ExecuteTaskC);
                break;
            case 2:
                AddFunction("Task C", ExecuteTaskC);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task D", ExecuteTaskD);
                break;
            case 3:
                AddFunction("Task A", ExecuteTaskA);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task E", ExecuteTaskE);
                break;
        }
    }

    /// <summary>
    /// 함수와 도형을 추가하는 메서드입니다.
    /// 함수가 추가되면 도형도 자동으로 회색으로 추가됩니다.
    /// </summary>
    private void AddFunction(string functionName, Func<Task> function)
    {
        FunctionNames.Add(functionName); // 함수 이름 추가
        FunctionTasks.Add(function); // 실제 비동기 함수 추가
        FunctionStatusColors.Add(Brushes.Gray); // 기본 색상 (회색) 추가
    }

    /// <summary>
    /// Task A 실행
    /// </summary>
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task A Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task B 실행
    /// </summary>
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task B Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task C 실행
    /// </summary>
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task C Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task D 실행
    /// </summary>
    private async Task ExecuteTaskD()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task D Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task E 실행
    /// </summary>
    private async Task ExecuteTaskE()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task E Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _taskQueue.Pause();
        ProgressText = "Paused";
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    private void ResumeTask()
    {
        _taskQueue.Resume();
        ProgressText = "Resumed";
    }
}
주요 수정 사항:
함수와 도형 동적 추가:

AddFunction() 메서드를 통해 비동기 함수와 도형 색상이 자동으로 추가됩니다. 즉, 시퀀스 플래그에 따라 적절한 함수가 동적으로 결정되고, 그에 따라 도형 개수도 자동으로 생성됩니다.
도형 색상 변경:

각 함수가 실행될 때 도형의 색상이 변경되며, 진행 중일 때는 파란색(SkyBlue), 완료되면 **녹색(Green)**으로 표시됩니다.
함수 추가의 유연성:

새로운 비동기 함수를 추가하려면 **InitializeFunctions()**에서 원하는 **함수를 AddFunction()**으로 추가하면 됩니다.
예를 들어, Task F를 추가하고 싶으면 AddFunction("Task F", ExecuteTaskF)와 같은 방식으로 추가할 수 있습니다.
실시간 UI 반영:

UI에서 실시간으로 함수 실행 상태가 반영되며, 작업 진행 상황이 도형 색상으로 표시됩니다. 각 작업이 끝나면 다음 작업이 자동으로 실행됩니다.
결론:
이제 **시퀀스 플래그(1, 2, 3)**에 따라 비동기 함수가 실행되고, 그에 맞춰 UI에서 도형의 개수와 색상이 자동으로 설정됩니다. 또한, 각 작업이 끝난 후 다음 작업이 순차적으로 실행되며, 특정 작업만 우클릭하여 실행하는 기능도 동작합니다.

필요한 추가 사항이나