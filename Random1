본적으로 페이지를 재사용하지만, 각 구역에 맞는 데이터베이스를 불러오도록 하겠습니다. 이를 위해 구역 선택 버튼을 추가하고, 각 버튼 클릭 시 해당 구역에 맞는 데이터베이스 연결 문자열을 사용하여 페이지를 로드하도록 구현하겠습니다.

XAML 코드
구역 선택 버튼을 추가하고, 페이지를 다시 로드할 때마다 다른 데이터베이스를 사용하도록 이벤트를 설정합니다.

xml
코드 복사
<Page x:Class="ShiftReportApp.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
      xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
      xmlns:local="clr-namespace:ShiftReportApp"
      Title="Shift Report Manager">
    <Grid>
        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="구역 A" Click="LoadAreaA"/>
            <Button Content="구역 B" Click="LoadAreaB"/>
        </StackPanel>
        <Frame Name="ContentFrame" NavigationUIVisibility="Hidden"/>
    </Grid>
</Page>
C# 코드 (MainPage.xaml.cs)
구역 선택 버튼 클릭 시 페이지를 다른 데이터베이스 연결 문자열로 로드하도록 구현합니다.

csharp
코드 복사
using System.Windows;
using System.Windows.Controls;

namespace ShiftReportApp
{
    public partial class MainPage : Page
    {
        public MainPage()
        {
            InitializeComponent();
        }

        private void LoadAreaA(object sender, RoutedEventArgs e)
        {
            LoadAreaPage("your_connection_string_for_A");
        }

        private void LoadAreaB(object sender, RoutedEventArgs e)
        {
            LoadAreaPage("your_connection_string_for_B");
        }

        private void LoadAreaPage(string connectionString)
        {
            var shiftReportPage = new ShiftReportPage(connectionString);
            ContentFrame.Navigate(shiftReportPage);
        }
    }
}
ShiftReportPage.xaml
인계장 페이지의 XAML 구조를 그대로 유지합니다.

xml
코드 복사
<Page x:Class="ShiftReportApp.ShiftReportPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
      xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
      xmlns:local="clr-namespace:ShiftReportApp"
      Title="Shift Report">
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlReports" AutoGenerateColumns="None" Grid.Row="1">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AutoWidth="False"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="Date" Header="날짜" Width="130" HorizontalHeaderContentAlignment="Center">
                                <dxg:GridColumn.EditSettings>
                                    <dxe:TextEditSettings HorizontalContentAlignment="Center"/>
                                </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Number" Header="번호" Width="70" HorizontalHeaderContentAlignment="Center">
                                <dxg:GridColumn.EditSettings>
                                    <dxe:TextEditSettings HorizontalContentAlignment="Center"/>
                                </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="DayShift" Header="주" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn FieldName="EveningShift" Header="후" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn FieldName="NightShift" Header="야" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn FieldName="CommonReport" Header="공통인계사항" HorizontalHeaderContentAlignment="Center"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10" Grid.Row="0">
                        <TextBlock Text="검색 시작일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="startDatePicker" Width="130" DisplayFormatString="yyyy-MM-dd"/>
                        <TextBlock Text="검색 종료일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="endDatePicker" Width="130" DisplayFormatString="yyyy-MM-dd"/>
                        <Button Content="조회" Click="OnSearchReports"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlSearch" AutoGenerateColumns="None" Grid.Row="1">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True" ShowSearchPanelMode="Always"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date" Width="130" HorizontalHeaderContentAlignment="Center" 
                                            HorizontalContentAlignment="Center"/>
                            <dxg:GridColumn Header="번호" FieldName="Number" Width="70" HorizontalHeaderContentAlignment="Center" 
                                            HorizontalContentAlignment="Center"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport" HorizontalHeaderContentAlignment="Center"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="로그">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10" Grid.Row="0">
                        <TextBlock Text="검색어:" VerticalAlignment="Center" Margin="5"/>
                        <TextBox Name="logSearchTextBox" Width="200" KeyDown="OnLogSearchKeyDown"/>
                        <Button Content="조회" Click="OnLogSearch"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlLog" AutoGenerateColumns="None" Grid.Row="1">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True" ShowSearchPanelMode="Always"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date" Width="130" HorizontalHeaderContentAlignment="Center" 
                                            HorizontalContentAlignment="Center"/>
                            <dxg:GridColumn Header="번호" FieldName="Number" Width="70" HorizontalHeaderContentAlignment="Center" 
                                            HorizontalContentAlignment="Center"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="IP주소" FieldName="IPAddress" HorizontalHeaderContentAlignment="Center"/>
                            <dxg:GridColumn Header="시간" FieldName="Timestamp" HorizontalHeaderContentAlignment="Center"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Page>
C# 코드 (ShiftReportPage.xaml.cs)
페이지 로드 시 전달받은 데이터베이스 연결 문자열을 사용하여 데이터를 불러오도록 구현합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;

namespace ShiftReportApp
{
    public partial class ShiftReportPage : Page
    {
        private string connectionString;

        public ShiftReportPage(string connectionString)
        {
            InitializeComponent();
            this.connectionString = connectionString;
            Loaded += ShiftReportPage_Loaded;
        }

        private void ShiftReportPage_Loaded(object sender, RoutedEventArgs e)
        {
            LoadTodayReport(null, null);
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                AddEmptyReportsForDate(date);
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Date", date);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dataTable);
                }
            }

            gridControlReports.ItemsSource = dataTable.DefaultView;
        }

        private void AddEmptyReportsForDate(string date)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                for (int i = 1; i <= 4; i++)
                {
                    foreach (string shiftType in new[] { "주", "후", "야", "공통" })
                    {
                        SqlCommand cmd = new SqlCommand("SaveReport", conn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Date", date);
                        cmd.Parameters.AddWithValue("@Number", i);
                        cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                        cmd.Parameters.AddWithValue("@Report", "");
                        cmd.Parameters.AddWithValue("@IPAddress", GetLocalIPAddress());
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            string date = ((Label)FindName($"Date{number}")).Content.ToString();
            string ipAddress = GetLocalIPAddress();
            SaveReport(date, number, shiftType, report, ipAddress);
        }

        private void SaveReport(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();

                // 로그 기록
                SaveLog(date, number, shiftType, report, ipAddress);
            }
        }

        private void SaveLog(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveLog", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);
                cmd.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnSearchReports(object sender, RoutedEventArgs e)
        {
            DateTime? startDate = startDatePicker.DateTime;
            DateTime? endDate = endDatePicker.DateTime;

            if (startDate.HasValue && endDate.HasValue)
            {
                LoadSearchReports(startDate.Value.ToString("yyyy-MM-dd"), endDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReports(string startDate, string endDate)
        {
            DataTable searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDateRange", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@StartDate", startDate);
                cmd.Parameters.AddWithValue("@EndDate", endDate);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            string searchText = logSearchTextBox.Text.Trim();
            if (!string.IsNullOrEmpty(searchText))
            {
                LoadLogReport(searchText);
            }
        }

        private void OnLogSearchKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                OnLogSearch(sender, e);
            }
        }

        private void LoadLogReport(string searchText)
        {
            DataTable logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("SearchLogs", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SearchText", searchText);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            gridControlLog.ItemsSource = logTable.DefaultView;
        }
    }
}
이제 각 구역에 따라 다른 데이터베이스 연결 문자열을 사용하