, 요청하신 대로 파이썬 코드와 C# WPF 코드를 각각 준비했습니다. 두 코드 모두 API 요청 후 성공 시 깔끔하게 정리된 결과를 출력하고, 오류 발생 시에는 오류 메시지를 출력하여 바로 복사해서 사용하실 수 있도록 했습니다.

1. 파이썬 (Python) 코드
이 파이썬 코드는 API에 요청을 보내고, 성공하면 응답 JSON을, 실패하면 오류 메시지를 출력합니다. 성공적인 JSON 응답은 보기 좋게 들여쓰기 되어 출력됩니다.

Python

import requests
import json

def make_api_request(api_key, user_message):
    """
    지정된 API에 요청을 보내고 결과를 반환합니다.

    :param api_key: 사용할 API 키
    :param user_message: 전송할 사용자 메시지
    :return: 성공 시 API 응답 문자열 (JSON 형식), 실패 시 오류 메시지 문자열
    """
    url = "https://agent.sec.samsung.net/api/v1/run/9dba307d-2ba3-44f0-a0ed-79d47b2f4de8?stream=false"
    
    headers = {
        "Content-Type": "application/json",
        "x-api-key": api_key  # 전달받은 API 키 사용
    }
    
    data = {
        "input_value": user_message, # 전달받은 메시지 사용
        "input_type": "chat",
        "output_type": "chat",
        "component_inputs": {}
    }

    try:
        # API에 POST 요청을 보냅니다.
        response = requests.post(url, headers=headers, data=json.dumps(data))

        # HTTP 상태 코드가 200 (성공)인 경우
        if response.status_code == 200:
            try:
                # 응답 내용을 JSON으로 파싱하여 보기 좋게 문자열로 변환 후 반환
                response_json = response.json()
                return json.dumps(response_json, indent=2, ensure_ascii=False)
            except json.JSONDecodeError:
                # 응답이 JSON 형식이 아닐 경우, 텍스트 그대로 반환
                return response.text
        else:
            # HTTP 상태 코드가 200이 아닌 경우, 오류 코드와 메시지 반환
            return f"Error: {response.status_code}\n{response.text}"

    except requests.exceptions.RequestException as e:
        # 요청 중 예외 발생 시 (네트워크 문제 등)
        return f"Request Exception: {e}"

if __name__ == "__main__":
    # 사용자로부터 API 키와 메시지를 직접 입력받습니다.
    # 실제 사용 시에는 이 부분을 환경 변수, 설정 파일 등에서 가져오도록 수정하는 것이 좋습니다.
    my_api_key = input("API 키를 입력하세요: ")
    my_message = input("전송할 메시지를 입력하세요: ")

    # API 요청 함수 호출
    result = make_api_request(my_api_key, my_message)
    
    # 결과 출력
    print(result)

사용 방법 (파이썬):

requests 라이브러리 설치: 터미널이나 명령 프롬프트에서 pip install requests를 실행하여 라이브러리를 설치합니다.
코드 실행: 위 코드를 .py 파일 (예: api_caller.py)로 저장한 후, 터미널에서 python api_caller.py를 실행합니다.
입력: 실행하면 API 키와 전송할 메시지를 입력하라는 프롬프트가 나타납니다. 해당 값을 입력하고 Enter 키를 누릅니다.
출력 확인: 성공 시 API 응답이 JSON 형태로 깔끔하게 출력되며, 오류 발생 시 오류 메시지가 출력됩니다. 출력된 내용을 바로 복사하여 사용할 수 있습니다.
2. C# WPF 코드
C# WPF 애플리케이션으로 API 요청을 보내고 그 결과를 UI에 표시하는 방법입니다.

프로젝트 준비:

Visual Studio를 열고 '새 프로젝트 만들기'를 선택합니다.
'WPF 앱(.NET)' 또는 'WPF 애플리케이션(.NET Framework)'을 선택하고 프로젝트를 생성합니다. (아래 코드는 .NET Core/5/6/7/8 기반으로 System.Text.Json을 사용합니다. .NET Framework의 경우 Newtonsoft.Json 사용을 고려할 수 있습니다.)
XAML 코드 (MainWindow.xaml):

애플리케이션의 UI를 정의합니다.

XML

<Window x:Class="WpfApiRequestApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApiRequestApp"
        mc:Ignorable="d"
        Title="API Request Tool" Height="500" Width="800">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    </Grid.RowDefinitions>

        <Label Content="API Key:" Grid.Row="0"/>
        <TextBox x:Name="ApiKeyTextBox" Grid.Row="1" Margin="0,0,0,10" Text="여기에 API 키를 입력하세요"/>

        <Label Content="Message:" Grid.Row="2"/>
        <TextBox x:Name="MessageTextBox" Grid.Row="3" Margin="0,0,0,10" Text="전송할 메시지를 입력하세요"/>

        <Button x:Name="SendButton" Content="Send Request" Grid.Row="4" Margin="0,0,0,10" Padding="10,5" Click="SendButton_Click"/>

        <Label Content="Response:" Grid.Row="5"/>
        <TextBox x:Name="ResponseTextBox" Grid.Row="6" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" IsReadOnly="True" AcceptsReturn="True" FontFamily="Consolas"/>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs):

버튼 클릭 시 API 요청을 처리하는 로직입니다.

C#

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json; // System.Text.Json 네임스페이스 사용
using System.Threading.Tasks;
using System.Windows;

namespace WpfApiRequestApp // 프로젝트 이름에 맞게 네임스페이스 수정
{
    public partial class MainWindow : Window
    {
        // HttpClient는 애플리케이션 전체에서 재사용하는 것이 좋습니다.
        private static readonly HttpClient client = new HttpClient();

        public MainWindow()
        {
            InitializeComponent();
        }

        private async void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string apiKey = ApiKeyTextBox.Text;
            string userMessage = MessageTextBox.Text;

            // API 키 또는 메시지가 비어있는지 확인
            if (string.IsNullOrWhiteSpace(apiKey) || apiKey == "여기에 API 키를 입력하세요")
            {
                ResponseTextBox.Text = "오류: API 키를 입력해주세요.";
                return;
            }
            if (string.IsNullOrWhiteSpace(userMessage) || userMessage == "전송할 메시지를 입력하세요")
            {
                ResponseTextBox.Text = "오류: 메시지를 입력해주세요.";
                return;
            }

            string url = "https://agent.sec.samsung.net/api/v1/run/9dba307d-2ba3-44f0-a0ed-79d47b2f4de8?stream=false";

            // API 요청에 필요한 데이터 객체 생성
            var requestData = new
            {
                input_value = userMessage,
                input_type = "chat",
                output_type = "chat",
                component_inputs = new { } // 비어있는 JSON 객체
            };

            // 데이터 객체를 JSON 문자열로 직렬화
            string jsonPayload = JsonSerializer.Serialize(requestData);

            try
            {
                ResponseTextBox.Text = "요청을 보내는 중..."; // 사용자에게 진행 상황 알림

                // HttpRequestMessage 객체 생성
                HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Post, url);
                
                // 헤더 설정
                request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
                request.Headers.Add("x-api-key", apiKey);
                
                // 요청 본문(Content) 설정
                request.Content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");

                // 비동기적으로 API 요청 전송
                HttpResponseMessage response = await client.SendAsync(request);
                
                // 응답 본문 읽기
                string responseContent = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode) // 요청 성공 시
                {
                    try
                    {
                        // 응답 JSON을 보기 좋게 포맷팅하여 출력
                        using (JsonDocument doc = JsonDocument.Parse(responseContent))
                        {
                            ResponseTextBox.Text = JsonSerializer.Serialize(doc.RootElement, new JsonSerializerOptions { WriteIndented = true });
                        }
                    }
                    catch (JsonException)
                    {
                        // 응답이 JSON 형식이 아닌 경우, 텍스트 그대로 출력
                        ResponseTextBox.Text = responseContent;
                    }
                }
                else // 요청 실패 시
                {
                    ResponseTextBox.Text = $"오류: {response.StatusCode}\n{responseContent}";
                }
            }
            catch (HttpRequestException httpEx) // 네트워크 관련 예외 처리
            {
                ResponseTextBox.Text = $"요청 예외 발생: {httpEx.Message}\n{(httpEx.InnerException != null ? httpEx.InnerException.Message : string.Empty)}";
            }
            catch (JsonException jsonEx) // JSON 처리 관련 예외 처리
            {
                ResponseTextBox.Text = $"JSON 처리 예외 발생: {jsonEx.Message}";
            }
            catch (Exception ex) // 그 외 모든 예외 처리
            {
                ResponseTextBox.Text = $"예상치 못한 오류 발생: {ex.Message}";
            }
        }
    }
}
사용 방법 (C# WPF):

프로젝트 생성 및 코드 복사: WPF 프로젝트를 생성하고, 위의 XAML 코드를 MainWindow.xaml 파일에, C# 코드를 MainWindow.xaml.cs 파일에 각각 붙여넣습니다.
NuGet 패키지 (필요시): System.Text.Json은 최신 .NET 버전에 기본 포함되어 있으나, 만약 오류가 발생하면 NuGet 패키지 관리자에서 System.Text.Json을 검색하여 설치합니다.
빌드 및 실행: 프로젝트를 빌드(Ctrl+Shift+B)하고 실행(F5)합니다.
사용: 애플리케이션 창이 뜨면 "API Key"와 "Message" 입력란에 각각 값을 입력하고 "Send Request" 버튼을 클릭합니다.
결과 확인: 하단의 "Response" 텍스트 상자에 API 응답 결과 또는 오류 메시지가 표시됩니다. 이 텍스트 상자의 내용은 마우스로 선택하여 쉽게 복사할 수 있습니다.
두 가지 방법 중 편하신 것을 선택하여 사용하시면 됩니다.