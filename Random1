아래는 pymssql을 사용하여 Test 데이터(TestA, TestB)와 Real 데이터(RealA, RealB)를 읽어와 머신러닝 모델을 학습하고 모니터링하는 수정된 전체 코드입니다. 데이터베이스 쿼리는 사용자 설정으로 가정하며, 쿼리 실행 결과를 사용하도록 설계하였습니다.

전체 코드
python
코드 복사
import numpy as np
import pandas as pd
import pymssql
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt


# 1. 데이터베이스에서 데이터 읽기 함수
def fetch_data_from_db(query, connection_details):
    """
    데이터베이스에서 데이터를 가져오는 함수.
    :param query: SQL 쿼리 문자열.
    :param connection_details: 데이터베이스 연결 정보 (dict).
    :return: Pandas DataFrame.
    """
    try:
        conn = pymssql.connect(
            server=connection_details['server'],
            user=connection_details['user'],
            password=connection_details['password'],
            database=connection_details['database']
        )
        df = pd.read_sql(query, conn)
        conn.close()
        return df
    except Exception as e:
        print(f"Database connection failed: {e}")
        return pd.DataFrame()


# 2. DB 연결 정보와 쿼리 정의
connection_details = {
    "server": "your_server_address",
    "user": "your_username",
    "password": "your_password",
    "database": "your_database_name"
}

# Test 데이터 (TestA, TestB)
query_test = """
SELECT TestA, TestB FROM your_table
"""
df_test = fetch_data_from_db(query_test, connection_details)

# Real 데이터 (RealA, RealB)
query_real = """
SELECT RealA, RealB FROM your_table
"""
df_real = fetch_data_from_db(query_real, connection_details)


# 3. 데이터 준비
if df_test.empty or df_real.empty:
    print("No data available. Check your queries or database connection.")
    exit()

# Test 데이터
data_a = df_test['TestA'].values[:4]  # TestA의 4개 값
data_b = df_test['TestB'].values[:4]  # TestB의 4개 값
data = np.concatenate([data_a, data_b])  # 총 8개의 값

# Real 데이터
real_a = df_real['RealA'].values[:4]
real_b = df_real['RealB'].values[:4]
real_data = np.concatenate([real_a, real_b])

# 모델 리스트
models = {
    "RandomForest": RandomForestRegressor(),
    "LinearRegression": LinearRegression(),
    "SVR": SVR(kernel="linear")
}

# 4. 최적 모델 찾기
best_models = []
errors = []
for i in range(8):
    # i번째 값을 제외한 나머지 7개 값으로 학습 데이터 구성
    X = np.delete(data, i).reshape(-1, 1)  # 7개의 값
    y = np.delete(data, np.arange(len(data)) != i)  # 예측 대상 (1개의 값)
    
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    # 각 모델로 학습 및 평가
    best_model = None
    best_error = float("inf")
    for model_name, model in models.items():
        model.fit(X_train, y_train)
        predictions = model.predict(X_test)
        error = mean_squared_error(y_test, predictions)
        
        if error < best_error:
            best_error = error
            best_model = model_name
    
    best_models.append(best_model)
    errors.append(best_error)

# 결과 출력
print("Best model for each data point:", best_models)
print("Errors for each model:", errors)

# 5. 실시간 모니터링
avg_errors = []
for sample in real_data.reshape(-1, 8):  # 새로운 데이터 샘플
    sample_errors = []
    for i, model_name in enumerate(best_models):
        model = models[model_name]
        X_sample = np.delete(sample, i).reshape(-1, 1)
        y_sample = sample[i]
        
        prediction = model.predict(X_sample)
        error = abs(prediction - y_sample)
        sample_errors.append(error)
    
    avg_error = np.mean(sample_errors)
    avg_errors.append(avg_error)

# 평균 오차의 변화 시각화
plt.plot(avg_errors, label="Average Prediction Error")
plt.xlabel("New Sample Index")
plt.ylabel("Average Error")
plt.legend()
plt.title("Real-time Monitoring of Prediction Errors")
plt.show()
코드 상세 설명
1. 데이터베이스 데이터 가져오기
pymssql을 사용하여 SQL 서버에서 데이터를 읽어옵니다.

fetch_data_from_db 함수는 연결 정보를 받아 쿼리를 실행하고 결과를 DataFrame으로 반환합니다.
2. 데이터 준비
TestA, TestB는 학습 데이터로, RealA, RealB는 실시간 모니터링 데이터로 사용됩니다.
TestA와 TestB의 처음 4개의 값을 사용하여 총 8개의 값을 구성합니다.

3. 모델 학습 및 평가
각 데이터 점(총 8개)에 대해 한 값을 제외한 나머지로 학습 데이터를 생성합니다.
3가지 모델(RandomForest, LinearRegression, SVR)을 테스트하여 가장 낮은 MSE를 가진 모델을 선택합니다.
4. 실시간 모니터링
실시간 데이터(real_data)를 입력받아 각 값에 대해 선택된 모델로 예측합니다.
예측 오차의 평균치를 계산하여 모니터링합니다.
5. 시각화
matplotlib를 사용하여 평균 오차의 변화를 그래프로 표시합니다.

사용자 설정 부분
데이터베이스 연결 정보
connection_details의 값을 사용자의 DB 서버 정보에 맞게 수정하세요.

SQL 쿼리
query_test와 query_real의 쿼리는 필요에 따라 수정 가능합니다.