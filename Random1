래는 이전에 제공했던 코드에 딥러닝 모델을 추가하여 랜덤포레스트, XGBoost, 선형 회귀, 딥러닝 모델을 비교할 수 있도록 수정한 코드입니다. 딥러닝 모델을 기존 평가 결과에 포함시켰으며, 이를 다른 모델들과 비교합니다.

수정된 코드: 딥러닝 모델 추가
python
코드 복사
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import joblib

# 데이터 가져오기 함수
def fetch_data_from_db(proc_name):
    """
    MSSQL 저장 프로시저에서 데이터를 가져옵니다.
    :param proc_name: 저장 프로시저 이름
    :return: pandas DataFrame
    """
    import pymssql
    server = "localhost"
    user = "your_username"
    password = "your_password"
    database = "your_database"
    try:
        conn = pymssql.connect(server=server, user=user, password=password, database=database)
        query = f"EXEC {proc_name}"
        df = pd.read_sql(query, conn)
        return df
    except Exception as e:
        print(f"Error fetching data: {e}")
        return pd.DataFrame()

# 데이터 준비
data = fetch_data_from_db("PRealAandB")
if data.empty:
    print("No data fetched. Exiting...")
    exit()

# 데이터 전처리
timestamps = data.iloc[:, 0]  # 시간 데이터 (첫 번째 열)
X = data.iloc[:, 2:5].values  # 특징 데이터 (3~5열)
y = data.iloc[:, 1].values    # 타겟 데이터 (2열)

# 학습 및 테스트 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 사용할 모델 정의
models = {
    "LinearRegression": LinearRegression(),
    "RandomForest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBoostRegressor(n_estimators=100, random_state=42)
}

# 평가지표 저장 딕셔너리
results = {
    "Model": [],
    "MSE": [],
    "RMSE": [],
    "MAE": [],
    "R2_Score": []
}

# 머신러닝 모델 학습 및 평가
print("Training and evaluating models...")
for model_name, model in models.items():
    print(f"Training {model_name}...")
    
    # 모델 학습
    model.fit(X_train, y_train)
    
    # 예측
    y_pred = model.predict(X_test)
    
    # 평가지표 계산
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)
    
    # 결과 저장
    results["Model"].append(model_name)
    results["MSE"].append(mse)
    results["RMSE"].append(rmse)
    results["MAE"].append(mae)
    results["R2_Score"].append(r2)
    
    print(f"{model_name}: MSE={mse:.4f}, RMSE={rmse:.4f}, MAE={mae:.4f}, R²={r2:.4f}")

# 딥러닝 모델 정의 및 학습
def train_neural_network(X_train, y_train, X_test, y_test):
    model = Sequential([
        Dense(16, input_dim=X_train.shape[1], activation='relu'),
        Dense(8, activation='relu'),
        Dense(1, activation='linear')  # 출력층
    ])
    model.compile(optimizer=Adam(learning_rate=0.01), loss='mse', metrics=['mae'])
    model.fit(X_train, y_train, epochs=100, batch_size=4, validation_data=(X_test, y_test), verbose=0)
    loss, mae = model.evaluate(X_test, y_test, verbose=0)
    return model, loss, mae

# 딥러닝 모델 학습 및 평가
print("Training Neural Network...")
nn_model, nn_mse, nn_mae = train_neural_network(X_train, y_train, X_test, y_test)
nn_rmse = np.sqrt(nn_mse)
results["Model"].append("NeuralNetwork")
results["MSE"].append(nn_mse)
results["RMSE"].append(nn_rmse)
results["MAE"].append(nn_mae)
results["R2_Score"].append(None)  # 딥러닝 모델에서 R² 계산 생략

# 결과 데이터프레임 생성
results_df = pd.DataFrame(results)

# 최적 모델 선택 (MSE 기준)
best_model_idx = results_df["MSE"].idxmin()
best_model_name = results_df.loc[best_model_idx, "Model"]
print(f"\nBest model: {best_model_name} with MSE={results_df.loc[best_model_idx, 'MSE']:.4f}")

# 최적 모델 저장
if best_model_name != "NeuralNetwork":
    best_model = models[best_model_name]
    joblib.dump(best_model, "best_model.pkl")
else:
    nn_model.save("best_nn_model.h5")
print(f"Best model saved as {'best_model.pkl' if best_model_name != 'NeuralNetwork' else 'best_nn_model.h5'}")

# 시각화: 평가지표 비교
metrics = ["MSE", "RMSE", "MAE"]
fig, axes = plt.subplots(1, 3, figsize=(15, 5))

for i, metric in enumerate(metrics):
    axes[i].bar(results_df["Model"], results_df[metric], color=["blue", "orange", "green", "purple"])
    axes[i].set_title(f"Comparison of {metric}")
    axes[i].set_ylabel(metric)
    axes[i].grid(axis="y")

plt.tight_layout()
plt.show()
코드 설명
딥러닝 모델 추가:

train_neural_network 함수: 딥러닝 모델을 정의하고 학습 및 평가합니다.
2개의 은닉층(Dense 레이어)로 구성된 간단한 신경망을 사용.
활성화 함수: ReLU.
출력층: 선형 회귀를 위한 1개의 노드.
모델 평가:

MSE, RMSE, MAE를 계산하여 모든 모델의 성능을 비교.
R²는 딥러닝 모델에서는 생략.
최적 모델 저장:

최적 모델이 딥러닝이 아니면 .pkl 파일로 저장.
딥러닝 모델이면 .h5 파일로 저장.
시각화:

MSE, RMSE, MAE를 막대 그래프로 비교.
결과
평가지표 비교:

딥러닝 모델을 포함하여 모든 모델의 MSE, RMSE, MAE 비교.
최적 모델 선택 및 저장:
