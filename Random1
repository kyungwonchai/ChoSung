네, 알겠습니다! "헬로 도커" 다음 단계에 딱 맞는, 가장 기본적인 방법부터 한 걸음씩 차근차근 밟아나가 보겠습니다.

기존에 운영하시던 Flask API와 React 앱을 도커 환경으로 옮기는 과정을 단계별로 아주 자세하게 안내해 드릴게요. Python 스크립트 없이, 직접 파일을 하나하나 만들면서 개념을 이해하는 데 집중해 보겠습니다.

🏁 시작 전: 프로젝트 구조 준비
먼저, 작업할 폴더를 하나 만들고 그 안에 기존 소스 코드를 정리해서 넣는 것부터 시작하겠습니다.

my-docker-project 라는 이름의 새 폴더를 만드세요.

그 안에 backend 와 frontend 라는 두 개의 폴더를 만듭니다.

backend 폴더에는 기존에 만드셨던 Flask API 관련 파일들(app.py 등)을 모두 복사해 넣으세요.

frontend 폴더에는 기존 React 프로젝트 파일들(src 폴더, public 폴더, package.json 등)을 모두 복사해 넣으세요.

최종적인 폴더 구조는 아래와 같은 모습이 될 겁니다.

my-docker-project/
├── backend/
│   ├── app.py          <-- 👈 여기에 기존 Flask 코드를!
│   └── ... (다른 파이썬 파일들)
└── frontend/
    ├── src/
    │   └── App.js      <-- 👈 여기에 기존 React 코드를!
    ├── package.json
    └── ... (다른 리액트 파일들)
이제 이 구조를 가지고 도커 이미지를 만들어 보겠습니다.

1단계: Flask 백엔드 Docker 이미지 만들기 📦
먼저 Flask API 서버를 도커 위에서 실행할 수 있는 '설계도'를 만들 겁니다. 이걸 Dockerfile 이라고 불러요.

backend 폴더 안에 requirements.txt 파일을 만드세요.

역할: Flask 앱이 실행되기 위해 필요한 파이썬 라이브러리 목록입니다. (pip install 할 것들)

backend/requirements.txt

Plaintext

Flask
gunicorn  # Flask 앱을 실제 서비스 환경처럼 실행해주는 도구
Flask-Cors # React와 통신을 위해 필요할 수 있음
# ... 그 외 사용하시는 라이브러리 (예: SQLAlchemy, requests 등)
backend 폴더 안에 Dockerfile 이라는 이름의 파일을 만드세요. (확장자 없음)

역할: 우리 Flask 앱을 실행할 격리된 리눅스 환경(컨테이너)을 어떻게 만들지 적어놓은 설명서입니다.

backend/Dockerfile

Dockerfile

# 1. 베이스 이미지 선택 (어떤 환경에서 시작할지)
# 파이썬 3.9 버전이 설치된 가벼운 리눅스에서 시작하겠습니다.
FROM python:3.9-slim

# 2. 컨테이너 안에서 작업할 폴더를 정합니다.
WORKDIR /app

# 3. 필요한 라이브러리를 먼저 설치합니다.
# requirements.txt 파일을 컨테이너의 /app 폴더로 복사
COPY requirements.txt .
# 복사한 파일로 라이브러리 설치
RUN pip install --no-cache-dir -r requirements.txt

# 4. 우리 소스 코드를 컨테이너로 복사합니다.
# 현재 폴더(backend)의 모든 것을 컨테이너의 /app 폴더로 복사
COPY . .

# 5. 이 컨테이너가 시작될 때 실행할 명령어를 지정합니다.
# 0.0.0.0:5000 주소로 app.py 안의 app 변수를 실행
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]
✅ 중간 점검: 백엔드만 따로 실행해보기
지금까지 잘 되었는지 백엔드만 독립적으로 실행해서 테스트해 볼 수 있습니다. my-docker-project/backend 폴더로 이동해서 아래 명령어를 실행해 보세요.

Bash

# 1. Dockerfile을 기반으로 'my-backend-image' 라는 이름의 이미지를 만든다
docker build -t my-backend-image .

# 2. 방금 만든 이미지로 컨테이너를 실행한다
# -p 5000:5000 : 내 컴퓨터의 5000번 포트와 컨테이너의 5000번 포트를 연결
docker run -p 5000:5000 my-backend-image
이제 웹 브라우저나 Postman 같은 도구로 http://localhost:5000/api/your-endpoint 처럼 기존 API 주소에 접속했을 때 데이터가 잘 보이면 백엔드 도커화 성공입니다!

2단계: React 프론트엔드 Docker 이미지 만들기 🎨
이제 사용자가 보게 될 React 화면을 도커 이미지로 만들 차례입니다.

frontend 폴더 안에 Dockerfile 이라는 이름의 파일을 만드세요.

역할: React 코드를 웹사이트 파일(HTML, CSS, JS)로 변환(build)하고, 이 파일들을 보여줄 웹서버(Nginx)를 설정하는 설명서입니다.

frontend/Dockerfile

Dockerfile

# --- 1단계: React 코드를 빌드하는 환경 ---
# Node.js 18 버전이 설치된 리눅스에서 시작
FROM node:18 as build

WORKDIR /app

# package.json 파일만 먼저 복사해서 라이브러리 설치
# (소스코드가 바뀌지 않으면 이 단계는 캐시를 사용해 빌드 속도가 빨라짐)
COPY package.json .
RUN npm install

# 나머지 모든 소스 코드를 복사
COPY . .

# React 프로젝트를 웹사이트 파일로 빌드
RUN npm run build


# --- 2단계: 빌드된 파일을 서빙하는 환경 ---
# 가벼운 Nginx(웹서버) 이미지에서 시작
FROM nginx:stable-alpine

# 위 'build' 단계에서 생성된 /app/build 폴더의 내용물을
# Nginx의 기본 웹사이트 폴더로 복사
COPY --from=build /app/build /usr/share/nginx/html

# 80번 포트를 외부에 개방
EXPOSE 80

# Nginx 웹서버 실행
CMD ["nginx", "-g", "daemon off;"]
✅ 중간 점검: 프론트엔드만 따로 실행해보기
my-docker-project/frontend 폴더로 이동해서 아래 명령어를 실행해 보세요.

Bash

# 1. 'my-frontend-image' 라는 이름의 이미지 만들기
docker build -t my-frontend-image .

# 2. 이미지로 컨테이너 실행
# -p 8080:80 : 내 컴퓨터의 8080번 포트와 컨테이너의 80번 포트를 연결
docker run -p 8080:80 my-frontend-image
이제 웹 브라우저에서 http://localhost:8080 으로 접속했을 때 React 화면이 보이면 프론트엔드 도커화도 성공입니다! (아직 백엔드와 통신은 안 될 겁니다.)

3단계: Docker Compose로 두 컨테이너 한번에 실행하기 🎶
이제 두 개의 컨테이너를 하나로 묶어서 동시에 실행하고, 서로 통신할 수 있게 만들어주는 지휘자가 필요합니다. 그게 바로 Docker Compose 입니다.

프로젝트 최상위 폴더 (my-docker-project) 로 돌아오세요.

여기에 docker-compose.yml 이라는 파일을 만듭니다.

역할: 우리 프로젝트에 필요한 모든 서비스(백엔드, 프론트엔드)의 목록과 설정을 담고 있는 파일입니다.

my-docker-project/docker-compose.yml

YAML

# docker-compose 파일 형식 버전
version: '3.8'

# 여기에 우리 프로젝트를 구성할 서비스(컨테이너)들을 정의합니다.
services:
  # 'backend' 라는 이름의 서비스 정의
  backend:
    # backend 폴더의 Dockerfile을 사용해서 이미지를 빌드합니다.
    build: ./backend
    # 컨테이너의 이름을 지정합니다. (관리를 위해)
    container_name: my_api_server
    # 컨테이너 내부에서 5000번 포트를 사용합니다.
    expose:
      - 5000

  # 'frontend' 라는 이름의 서비스 정의
  frontend:
    # frontend 폴더의 Dockerfile을 사용해서 이미지를 빌드합니다.
    build: ./frontend
    container_name: my_web_client
    # 내 컴퓨터의 8080 포트와 컨테이너의 80 포트를 연결합니다.
    # 우리가 실제 접속할 주소입니다.
    ports:
      - "8080:80"
    # backend 서비스가 먼저 실행된 후에 frontend를 실행합니다.
    depends_on:
      - backend
🚨 잠깐! React 코드 수정 (중요)
지금까지 React 코드 안에서 API를 호출할 때 아마 fetch('http://localhost:5000/api/...') 처럼 주소를 직접 입력했을 겁니다. 하지만 도커 환경에서는 localhost가 자기 자신(프론트엔드 컨테이너)을 가리키기 때문에 백엔드와 통신할 수 없습니다.

가장 간단한 해결책은 Nginx 리버스 프록시를 도입하는 것이지만, 지금 단계에서는 먼저 백엔드 서비스 이름을 사용해 통신을 확인해 보겠습니다.

기존 React 코드의 API 호출 부분을 아래와 같이 수정해주세요.

변경 전: fetch('http://localhost:5000/api/data')

변경 후: fetch('http://backend:5000/api/data')

backend는 docker-compose.yml에 우리가 정의한 서비스 이름입니다. Docker Compose는 같은 파일에 정의된 서비스들끼리 이 이름으로 서로를 찾아 통신할 수 있게 해줍니다.

참고: 이 방법은 개발 및 테스트 시에는 유용하지만, 최종 배포 시에는 다음 단계에서 설명할 'Nginx 리버스 프록시'를 사용하는 것이 훨씬 좋습니다.

4단계: 모두 함께 실행하기 ✨
이제 모든 준비가 끝났습니다.

프로젝트 최상위 폴더 (my-docker-project)에서 터미널을 여세요.

아래 명령어를 입력합니다.

Bash

docker-compose up --build
up: docker-compose.yml에 정의된 모든 서비스를 실행합니다.

--build: 실행하기 전에 Dockerfile의 내용이 바뀌었을 수 있으니 이미지를 새로 만듭니다.

터미널에 각 서비스의 로그가 쭉 올라가면서 실행되는 것을 볼 수 있습니다.

이제 웹 브라우저에서 http://localhost:8080 으로 접속해 보세요. React 화면이 보이고, 백엔드 API를 호출해서 데이터를 정상적으로 가져온다면 드디어 기존 프로젝트의 도커화에 완벽하게 성공한 것입니다!

종료할 때는 터미널에서 Ctrl + C를 누르거나, 다른 터미널을 열어 같은 폴더에서 docker-compose down 명령어를 입력하면 됩니다.

여기까지가 가장 기본적이고 핵심적인 과정입니다. 이 구조가 익숙해지시면, 다음 단계로 Nginx 리버스 프록시를 도입하여 URL을 깔끔하게 정리하고 여러 서비스를 더 효율적으로 관리하는 방법을 시도해 보시는 것을 추천합니다.

