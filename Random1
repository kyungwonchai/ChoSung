✅ 라인 값이 문자라면, 그대로 사용할 수 없고 숫자로 변환해야 함
✅ 문자형 라인을 Label Encoding하여 숫자로 변환 후 학습에 포함
✅ 훈련 데이터에서는 LabelEncoder를 사용하여 변환하고, 예측 시에도 동일한 변환 적용

✅ 최종 코드 (라인을 Label Encoding하여 숫자로 변환)
python
Copy code
import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data_utils
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# 📌 TXT 파일에서 데이터 읽기 (라인 포함하여 학습)
def load_data_from_txt(file_path, sample_ratio=0.1):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    # 🔹 "라인, 시간, 모델명, QR 코드" 값만 추출
    data = [line.strip().split()[:4] for line in lines if len(line.strip().split()) >= 4]
    df = pd.DataFrame(data, columns=["Line", "Time", "Model", "QR"])

    # 🔹 시간(Time) 컬럼을 숫자로 변환 후 정렬
    df["Time"] = pd.to_numeric(df["Time"], errors="coerce")
    df = df.sort_values(by=["Line", "Time"]).reset_index(drop=True)

    # 🔹 라인별로 샘플링 수행 (각 라인별 일정 비율 유지)
    df_sampled = df.groupby("Line").apply(lambda x: x.sample(frac=sample_ratio, random_state=42)).reset_index(drop=True)

    return df_sampled

# 📌 QR 값을 숫자 벡터로 변환 + 라인 정보를 숫자로 변환하여 추가
def vectorize_qr_with_line(qr_values, line_values, line_encoder, max_length=10):
    vectorized = np.zeros((len(qr_values), max_length + 1), dtype=np.int32)  # QR 길이 + 라인 정보
    for i, (qr, line) in enumerate(zip(qr_values, line_values)):
        for j, char in enumerate(qr[:max_length]):  # QR을 숫자로 변환
            vectorized[i, j] = ord(char)
        vectorized[i, -1] = line_encoder.transform([line])[0]  # 마지막 위치에 변환된 라인 값 추가
    return vectorized

# 📌 MLP 기반 QR 모델 정의 (라인 정보 포함)
class QRMLPModel(nn.Module):
    def __init__(self, input_size, num_classes):
        super(QRMLPModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc4 = nn.Linear(32, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.relu(self.fc3(x))
        x = self.fc4(x)  # 최종 출력
        return x

# 📌 모델 학습 함수 (훈련 후 검증 결과 포함)
def train_and_validate_model(df_data, epochs=20, batch_size=64, learning_rate=0.001):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # 🔹 데이터 전처리 (라인 포함)
    qr_values = df_data["QR"].values
    line_values = df_data["Line"].values  # 라인 값 추가
    model_names = df_data["Model"].values

    # Label Encoding (모델명 및 라인 값을 숫자로 변환)
    model_encoder = LabelEncoder()
    line_encoder = LabelEncoder()

    y_encoded = model_encoder.fit_transform(model_names)
    line_encoded = line_encoder.fit_transform(line_values)

    # QR 코드 벡터화 (라인 정보 포함)
    X_vectorized = vectorize_qr_with_line(qr_values, line_values, line_encoder, max_length=10)

    # 🔹 데이터셋 분할 (Train 70%, Validation 30%)
    X_train, X_val, y_train, y_val = train_test_split(X_vectorized, y_encoded, test_size=0.3, random_state=42)

    # PyTorch 데이터 로더 생성
    train_dataset = data_utils.TensorDataset(torch.tensor(X_train, dtype=torch.float32), torch.tensor(y_train, dtype=torch.long))
    val_dataset = data_utils.TensorDataset(torch.tensor(X_val, dtype=torch.float32), torch.tensor(y_val, dtype=torch.long))

    train_loader = data_utils.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = data_utils.DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

    # 모델 초기화
    model = QRMLPModel(input_size=X_vectorized.shape[1], num_classes=len(model_encoder.classes_)).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)

    # 🔹 훈련 과정
    train_losses = []
    val_losses = []
    val_accuracies = []

    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for inputs, targets in train_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        avg_loss = total_loss / len(train_loader)
        train_losses.append(avg_loss)

        # 🔹 검증 과정
        model.eval()
        val_loss = 0
        correct = 0
        total = 0
        with torch.no_grad():
            for inputs, targets in val_loader:
                inputs, targets = inputs.to(device), targets.to(device)
                outputs = model(inputs)
                val_loss += criterion(outputs, targets).item()
                predicted = torch.argmax(outputs, dim=1)
                correct += (predicted == targets).sum().item()
                total += targets.size(0)

        val_loss /= len(val_loader)
        accuracy = correct / total
        val_losses.append(val_loss)
        val_accuracies.append(accuracy)

        print(f"Epoch [{epoch+1}/{epochs}] - Loss: {avg_loss:.4f}, Val Loss: {val_loss:.4f}, Val Accuracy: {accuracy:.4f}")

    print("🎉 훈련 완료!")
    
    # 🔹 검증 결과 시각화
    plot_validation_results(train_losses, val_losses, val_accuracies)

    return model, model_encoder, line_encoder

# 📌 검증 결과 시각화 함수
def plot_validation_results(train_losses, val_losses, val_accuracies):
    plt.figure(figsize=(12, 5))

    # 🔹 Loss 그래프
    plt.subplot(1, 2, 1)
    plt.plot(train_losses, label="Train Loss", marker="o")
    plt.plot(val_losses, label="Validation Loss", marker="o")
    plt.xlabel("Epoch")
    plt.ylabel("Loss")
    plt.title("Train vs Validation Loss")
    plt.legend()

    # 🔹 Accuracy 그래프
    plt.subplot(1, 2, 2)
    plt.plot(val_accuracies, label="Validation Accuracy", marker="o", color="green")
    plt.xlabel("Epoch")
    plt.ylabel("Accuracy")
    plt.title("Validation Accuracy")
    plt.legend()

    plt.show()

# 📌 예측 함수 (라인 정보도 입력)
def predict_qr(model, model_encoder, line_encoder, qr_value, line_value):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    max_qr_length = 10  # 기존 모델과 동일한 길이
    X_vectorized = vectorize_qr_with_line([qr_value], [line_value], line_encoder, max_length=max_qr_length)

    # 🔹 예측 수행
    model.eval()
    with torch.no_grad():
        inputs = torch.tensor(X_vectorized, dtype=torch.float32).to(device)
        outputs = model(inputs)
        predicted = torch.argmax(outputs, dim=1).cpu().numpy()[0]
    
    predicted_model = model_encoder.inverse_transform([predicted])[0]
    print(f"✅ 예측된 모델: {predicted_model}")

# 📌 실행 예제
if __name__ == "__main__":
    txt_file_path = "runwait.txt"  # 🔥 QR 데이터가 포함된 TXT 파일 경로
    df_data = load_data_from_txt(txt_file_path, sample_ratio=0.1)  # 🔥 데이터 샘플링
    
    # 🔥 모델 학습 및 검증 과정 포함
    trained_model, trained_model_encoder, trained_line_encoder = train_and_validate_model(df_data, epochs=20)

    # 🔥 예측 예제 (라인 정보 포함)
    test_qr = "123ABC456"  # 예측할 QR 값
    test_line = "LINE_A"  # 예측할 라인 값