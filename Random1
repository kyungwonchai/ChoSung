네, 알겠습니다. 기존의 파일 선택 방식에서 한 단계 나아가, 코드에 지정된 공유 폴더의 PDF 목록을 보여주고, 사용자가 그중 하나를 선택하여 열람하는 기능으로 수정해 보겠습니다.

안드로이드 최신 버전의 저장소 정책(Scoped Storage)을 준수하면서 안정적으로 동작하는 방법을 안내해 드리겠습니다. 사용자가 접근하기 쉬운 다운로드 폴더 내에 우리 앱만의 폴더(예: ReellistViewerPdfs)를 지정하고, 그 안의 파일 목록을 불러오는 방식으로 구현하겠습니다.

📝 1단계: 권한 설정 (AndroidManifest.xml)
외부 저장소(공유 폴더)의 파일을 읽기 위해서는 먼저 AndroidManifest.xml 파일에 권한을 선언해야 합니다.

XML

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.sec.ReellistViewer">

    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

    <application
        ...>
        ...
    </application>
</manifest>
참고: 안드로이드 13 이상을 타겟으로 할 경우, READ_EXTERNAL_STORAGE 대신 세분화된 미디어 권한(READ_MEDIA_IMAGES, READ_MEDIA_VIDEO 등)이 권장되지만, PDF와 같은 문서는 여전히 READ_EXTERNAL_STORAGE가 필요하며, 런타임에 사용자에게 직접 권한을 요청해야 합니다.

💻 2단계: MainActivity.kt 코드 수정
이제 본격적으로 MainActivity.kt 파일을 수정합니다. 기존 코드에서 파일 열기 로직을 변경하고, 권한 요청 및 파일 목록을 보여주는 기능을 추가합니다.

전체 코드는 다음과 같습니다. 변경 및 추가된 부분을 중심으로 확인해 주세요.

Kotlin

// MainActivity.kt
package com.sec.ReellistViewer // 패키지 이름 확인

import android.Manifest
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Bundle
import android.os.Environment
import android.util.Log
import android.view.View
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.sec.ReellistViewer.databinding.ActivityMainBinding
import java.io.File

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener {

    private lateinit var binding: ActivityMainBinding
    
    // 지정할 공유 폴더 이름
    private val sharedFolderName = "ReellistViewerPdfs"

    // 권한 요청을 위한 ActivityResultLauncher
    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        if (isGranted) {
            // 권한이 승인되면 파일 목록을 보여줌
            Toast.makeText(this, "권한이 승인되었습니다.", Toast.LENGTH_SHORT).show()
            showPdfListFromSharedFolder()
        } else {
            // 권한이 거부되면 사용자에게 알림
            Toast.makeText(this, "파일을 읽으려면 저장소 읽기 권한이 필요합니다.", Toast.LENGTH_LONG).show()
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupEventListeners()
    }

    private fun setupEventListeners() {
        // 'PDF 파일 열기' 버튼 클릭 리스너 수정
        binding.btnOpenFile.setOnClickListener {
            checkPermissionAndShowPdfList()
        }

        // 페이지 이동 버튼 리스너 (기존과 동일)
        setupPageButtons()
    }

    private fun setupPageButtons() {
        val pageButtons = mapOf(
            binding.btnPage1 to 1, binding.btnPage2 to 2, binding.btnPage3 to 3, binding.btnPage4 to 4,
            binding.btnPage5 to 5, binding.btnPage6 to 6, binding.btnPage7 to 7, binding.btnPage8 to 8,
            binding.btnPage9 to 9, binding.btnPage10 to 10, binding.btnPage11 to 11, binding.btnPage12 to 12,
            binding.btnPage13 to 13, binding.btnPage14 to 14, binding.btnPage15 to 15, binding.btnPage16 to 16
        )
        pageButtons.forEach { (button, pageNumber) ->
            button.setOnClickListener {
                jumpToPage(pageNumber)
            }
        }
    }

    /**
     * 저장소 읽기 권한을 확인하고, 없으면 요청합니다.
     * 권한이 이미 있으면 바로 파일 목록을 보여줍니다.
     */
    private fun checkPermissionAndShowPdfList() {
        when {
            ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) == PackageManager.PERMISSION_GRANTED -> {
                // 권한이 이미 있는 경우
                showPdfListFromSharedFolder()
            }
            else -> {
                // 권한이 없는 경우, 사용자에게 요청
                requestPermissionLauncher.launch(Manifest.permission.READ_EXTERNAL_STORAGE)
            }
        }
    }

    /**
     * 지정된 공유 폴더에서 PDF 파일 목록을 가져와 다이얼로그로 보여줍니다.
     */
    private fun showPdfListFromSharedFolder() {
        // 다운로드 폴더 내의 지정된 폴더 경로
        val sharedFolderPath = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
            .resolve(sharedFolderName)

        if (!sharedFolderPath.exists() || !sharedFolderPath.isDirectory) {
            Toast.makeText(this, "폴더를 찾을 수 없습니다: ${sharedFolderPath.absolutePath}", Toast.LENGTH_LONG).show()
            // 폴더가 없다면 자동으로 생성해 줄 수도 있습니다.
            // sharedFolderPath.mkdirs()
            return
        }
        
        // .pdf로 끝나는 파일만 필터링
        val pdfFiles = sharedFolderPath.listFiles { _, name -> name.endsWith(".pdf", ignoreCase = true) }

        if (pdfFiles.isNullOrEmpty()) {
            Toast.makeText(this, "폴더에 PDF 파일이 없습니다.", Toast.LENGTH_SHORT).show()
            return
        }

        // 파일 이름을 배열로 변환
        val fileNames = pdfFiles.map { it.name }.toTypedArray()

        // 파일 선택 다이얼로그 생성 및 표시
        AlertDialog.Builder(this)
            .setTitle("PDF 파일 선택")
            .setItems(fileNames) { _, which ->
                // 사용자가 선택한 파일 로드
                val selectedFile = pdfFiles[which]
                loadPdfFromFile(selectedFile)
            }
            .setNegativeButton("취소", null)
            .show()
    }
    
    /**
     * 전달받은 File 객체를 사용하여 PDF를 PDFView에 로드합니다.
     * @param pdfFile 로드할 PDF 파일 객체
     */
    private fun loadPdfFromFile(pdfFile: File) {
        binding.pdfView.fromFile(pdfFile)
            .defaultPage(0)
            .enableSwipe(true)
            .swipeHorizontal(false)
            .enableAnnotationRendering(true)
            .onLoad(this)
            .onPageError(this)
            .scrollHandle(null)
            .load()
    }

    private fun jumpToPage(pageNumber: Int) {
        binding.pdfView.jumpTo(pageNumber - 1, true)
    }

    override fun loadComplete(nbPages: Int) {
        Toast.makeText(this, "총 ${nbPages}페이지 PDF 로드 완료", Toast.LENGTH_SHORT).show()
        binding.pageButtonContainer.visibility = View.VISIBLE
    }

    override fun onPageError(page: Int, t: Throwable) {
        Log.e("PDFView", "페이지 로드 에러: ${page + 1} 페이지", t)
        Toast.makeText(this, "${page + 1}페이지 로드 중 에러가 발생했습니다.", Toast.LENGTH_SHORT).show()
    }
}
🔧 주요 변경 및 추가 사항 설명
sharedFolderName 변수 추가:

private val sharedFolderName = "ReellistViewerPdfs"

우리가 사용할 공유 폴더의 이름을 상수로 지정하여 관리하기 용이하게 만들었습니다.

requestPermissionLauncher (권한 요청 처리기):

registerForActivityResult(ActivityResultContracts.RequestPermission())를 사용하여 권한 요청 결과를 처리합니다.

사용자가 권한을 '허용'하면 showPdfListFromSharedFolder() 함수를 호출하여 즉시 파일 목록을 보여주고, '거부'하면 안내 메시지를 띄웁니다.

btnOpenFile 클릭 이벤트 수정:

기존에는 파일 선택기를 바로 열었지만, 이제 checkPermissionAndShowPdfList() 함수를 호출하여 권한 상태를 먼저 확인하도록 변경했습니다.

checkPermissionAndShowPdfList() 함수 (권한 확인 로직):

ContextCompat.checkSelfPermission으로 앱이 READ_EXTERNAL_STORAGE 권한을 가지고 있는지 확인합니다.

권한이 있으면, 바로 showPdfListFromSharedFolder()를 호출합니다.

권한이 없으면, requestPermissionLauncher.launch()를 통해 사용자에게 권한을 요청하는 시스템 팝업을 띄웁니다.

showPdfListFromSharedFolder() 함수 (파일 목록 표시):

Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)를 통해 시스템의 공용 '다운로드' 폴더 경로를 가져옵니다.

.resolve(sharedFolderName)를 사용하여 그 안에 우리가 지정한 폴더 경로(.../Download/ReellistViewerPdfs/)를 완성합니다.

listFiles를 사용해 해당 폴더 내에서 이름이 .pdf로 끝나는 파일만 찾아냅니다.

찾아낸 파일 목록이 있으면, AlertDialog.Builder를 사용하여 사용자에게 파일 이름을 담은 목록 다이얼로그를 보여줍니다.

사용자가 목록에서 파일을 선택하면, 선택된 File 객체를 loadPdfFromFile() 함수로 넘겨줍니다.

loadPdfFromFile(pdfFile: File) 함수:

기존의 loadPdfFromUri 대신 File 객체를 직접 받아 처리하도록 새 함수를 만들었습니다. pdfView.fromFile(...)를 사용하여 파일을 바로 로드합니다.

실행 방법 및 테스트
수정된 코드를 빌드하여 앱을 실행합니다.

PC와 스마트폰을 연결한 뒤, 스마트폰의 Download 폴더 안에 ReellistViewerPdfs 라는 이름의 폴더를 생성합니다.

생성한 ReellistViewerPdfs 폴더 안에 테스트할 PDF 파일들을 몇 개 복사해 넣습니다.

앱에서 'PDF 파일 열기' 버튼을 누릅니다.

(최초 실행 시) 저장소 접근 권한을 요청하는 팝업이 뜨면 '허용'을 누릅니다.

ReellistViewerPdfs 폴더 안에 있는 PDF 파일 목록이 다이얼로그 형태로 나타납니다.

목록에서 파일을 선택하면 해당 PDF가 뷰어에 로드됩니다.

이제 앱은 지정된 폴더의 파일 목록을 지능적으로 보여주고, 사용자는 그 목록에서 원하는 파일을 손쉽게 선택하여 열 수 있습니다.

