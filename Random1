알겠습니다. 좋습니다! 이번에는 반드시 성공할 수 있도록, 모든 함정을 피해 가는 완벽한 가이드로 처음부터 끝까지 안내해 드리겠습니다.

이전의 실패는 잊으세요. 시스템에 남아있는 찌꺼기부터 완벽하게 청소하고, 사내망 프록시 환경에 맞춰 한 단계씩 정확하게 진행할 겁니다. 이대로만 따라 하시면 됩니다.

🐳 우분투 + 사내망(Proxy) 환경 도커 설치 완벽 가이드
0단계: 모든 흔적 지우기 (완벽한 초기화) 🧹
가장 먼저, 이전 설치 시도로 인해 남아있을 수 있는 모든 찌꺼기를 흔적도 없이 제거하여 시스템을 완벽하게 깨끗한 상태로 만듭니다.

Bash

# 1. 실행 중인 도커 서비스 모두 중지
sudo systemctl stop docker.service docker.socket

# 2. 도커 관련 모든 패키지를 설정 파일까지 완벽하게 삭제
sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras docker docker-engine docker.io runc

# 3. 남아있는 도커 데이터 및 설정 폴더 수동 삭제
sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
sudo rm -rf /etc/docker
sudo rm -rf /etc/systemd/system/docker.service.d

# 4. apt 저장소 목록 및 GPG 키 찌꺼기 삭제
sudo rm -f /etc/apt/sources.list.d/docker.list
sudo rm -f /etc/apt/keyrings/docker.gpg
sudo rm -f /etc/apt/trusted.gpg.d/docker.gpg

# 5. 이제는 필요 없는 패키지들 자동 정리
sudo apt-get autoremove -y

# 6. 깨끗해졌는지 최종 확인 (아무런 메시지도 안 나와야 정상)
sudo apt-get update
마지막 apt-get update에서 도커 관련 메시지가 전혀 보이지 않으면 성공입니다.

1단계: 사내망 프록시(bart) 설정 (가장 중요!)
모든 인터넷 통신이 프록시를 통하도록 시스템 전체에 설정을 적용합니다. 이 부분이 잘못되면 이후 모든 단계가 실패합니다.

http://YOUR_PROXY_ADDRESS:PORT 부분은 본인의 실제 bart망 프록시 주소로 반드시 변경해주세요.

Bash

# 1. apt가 프록시를 사용하도록 설정 파일 생성
echo 'Acquire::http::Proxy "http://YOUR_PROXY_ADDRESS:PORT";' | sudo tee /etc/apt/apt.conf.d/proxy.conf
echo 'Acquire::https::Proxy "http://YOUR_PROXY_ADDRESS:PORT";' | sudo tee -a /etc/apt/apt.conf.d/proxy.conf

# 2. 터미널(curl 등)이 프록시를 사용하도록 환경 변수 설정 및 영구 저장
export PROXY_URL="http://YOUR_PROXY_ADDRESS:PORT"
echo "export http_proxy='$PROXY_URL'" | sudo tee /etc/profile.d/proxy.sh
echo "export https_proxy='$PROXY_URL'" | sudo tee -a /etc/profile.d/proxy.sh
echo "export HTTP_PROXY='$PROXY_URL'" | sudo tee -a /etc/profile.d/proxy.sh
echo "export HTTPS_PROXY='$PROXY_URL'" | sudo tee -a /etc/profile.d/proxy.sh

# 3. 현재 터미널 세션에 즉시 적용
source /etc/profile.d/proxy.sh
확인: echo $http_proxy 라고 입력했을 때 프록시 주소가 출력되면 성공입니다.

2단계: 도커 설치 준비 및 GPG 키 추가 (최신 방식 + 프록시 적용) 🔑
이제 프록시를 통해 외부와 통신하며 설치 준비를 합니다.

Bash

# 1. 프록시를 통해 패키지 목록 업데이트 및 필수 패키지 설치
sudo apt-get update
sudo apt-get install -y ca-certificates curl gnupg

# 2. GPG 키를 저장할 폴더 생성 (최신 방식)
sudo install -m 0755 -d /etc/apt/keyrings

# 3. 프록시를 사용하여 도커 GPG 키 다운로드 (핵심!)
# curl이 프록시를 사용하도록 -x 옵션을 명시적으로 추가합니다.
curl -fsSL -x $http_proxy https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

# 4. GPG 키 파일 권한 설정
sudo chmod a+r /etc/apt/keyrings/docker.gpg
3단계: 도커 공식 저장소 등록
apt에게 "앞으로 도커는 여기서, 이 GPG 키로 인증해서 받아와" 라고 알려줍니다.

Bash

# 'signed-by' 옵션을 사용하여 우리가 방금 받은 GPG 키를 명확히 지정합니다.
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
4단계: 도커 엔진 설치
모든 준비가 끝났습니다. 이제 도커를 설치합니다.

Bash

# 프록시를 통해 도커 저장소 목록을 새로고침
sudo apt-get update

# 최신 버전 도커 패키지 설치
sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
5단계: 도커 서비스(데몬)에 프록시 설정 적용 (핵심!)
도커 설치는 끝났지만, docker pull 같은 명령으로 이미지를 받아오려면 도커 서비스 자체도 프록시를 사용하도록 설정해야 합니다.

Bash

# 1. 도커 서비스 설정 폴더 생성
sudo mkdir -p /etc/systemd/system/docker.service.d

# 2. 프록시 설정 파일 생성 (YOUR_PROXY_ADDRESS:PORT는 실제 주소로 변경)
sudo tee /etc/systemd/system/docker.service.d/http-proxy.conf > /dev/null <<EOF
[Service]
Environment="HTTP_PROXY=http://YOUR_PROXY_ADDRESS:PORT"
Environment="HTTPS_PROXY=http://YOUR_PROXY_ADDRESS:PORT"
Environment="NO_PROXY=localhost,127.0.0.1"
EOF

# 3. 변경된 서비스 설정 적용 및 도커 재시작
sudo systemctl daemon-reload
sudo systemctl restart docker
6단계: sudo 없이 docker 명령어 사용하기 (권장) 👍
매번 sudo를 치는 것은 불편하니, 현재 사용자를 docker 그룹에 추가합니다.

Bash

sudo usermod -aG docker $USER
중요: 이 설정을 적용하려면 터미널을 껐다가 다시 켜거나, 시스템에서 로그아웃 후 다시 로그인해야 합니다.

7단계: 최종 설치 확인 ✅
모든 설정이 완료되었습니다. 이제 프록시를 통해 도커가 정상적으로 이미지를 받아오고 실행하는지 확인합니다. (로그아웃 후 다시 로그인했거나 새 터미널을 열고 실행하세요)

Bash

docker run hello-world
아래와 같은 메시지가 포함된 출력이 나타나면, 모든 어려움을 이겨내고 완벽하게 성공한 것입니다!

Hello from Docker!