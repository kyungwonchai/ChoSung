 설명해 드리겠습니다. 아래의 예제 코드는 ADO.NET을 사용하여 CheckAvailability 저장 프로시저를 호출하고, 결과를 받는 방법을 보여줍니다. 이 코드는 SQL Server에 연결하는 데 필요한 기본적인 구조를 포함하고 있습니다.

먼저, 필요한 네임스페이스를 포함시킵니다:

csharp
Copy code
using System;
using System.Data;
using System.Data.SqlClient;
다음으로, 저장 프로시저를 호출하고 결과를 처리하는 메소드를 정의합니다:

csharp
Copy code
class Program
{
    static void Main(string[] args)
    {
        string connectionString = "Your Connection String Here"; // 데이터베이스 연결 문자열
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            try
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand("CheckAvailability", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        string status = reader["상태"].ToString();
                        Console.WriteLine("상태: " + status);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error: " + ex.Message);
            }
        }
    }
}
이 코드는 다음과 같이 동작합니다:

SQL Server에 연결하기 위한 연결 문자열을 설정합니다. 이 문자열은 서버 주소, 데이터베이스 이름, 인증 정보 등을 포함합니다.
SqlConnection 객체를 사용하여 데이터베이스에 연결합니다.
SqlCommand 객체를 생성하고, CommandType을 StoredProcedure로 설정하여 저장 프로시저를 호출합니다.
ExecuteReader 메소드를 사용하여 결과를 SqlDataReader를 통해 읽습니다.
결과를 반복하며 각 레코드의 상태를 출력합니다.
이 코드를 실행하기 전에, connectionString 변수에 올바른 연결 정보를 입력해야 합니다. 연결 문자열은 데이터베이스 서버 주소, 데이