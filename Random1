요청하신 기능을 반영한 WPF 애플리케이션 코드를 제공해드리겠습니다. 이 프로그램은 스캐너가 연결된 포트를 선택하는 콤보박스와, 데이터를 보낼 최대 5개의 포트를 선택할 수 있는 콤보박스를 제공합니다. 모든 포트 설정은 저장되며, 선택된 포트가 유효하지 않으면 콤보박스 텍스트가 빨간색으로 표시되고, 유효하면 파란색으로 표시됩니다. 포트를 선택하는 순간 해당 포트가 열리거나 닫히며, 이 동작은 로그에 기록됩니다.

1. XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="ComPortScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Scanner" Height="500" Width="650">
    <Grid>
        <TextBlock Text="스캐너 포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <ComboBox Name="ScannerPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,10,0,0" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
        
        <TextBlock Text="보낼 포트 1:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,50,0,0"/>
        <ComboBox Name="TargetPortComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,50,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        
        <TextBlock Text="보낼 포트 2:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,90,0,0"/>
        <ComboBox Name="TargetPortComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,90,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        
        <TextBlock Text="보낼 포트 3:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,130,0,0"/>
        <ComboBox Name="TargetPortComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,130,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        
        <TextBlock Text="보낼 포트 4:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,170,0,0"/>
        <ComboBox Name="TargetPortComboBox4" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,170,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        
        <TextBlock Text="보낼 포트 5:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,210,0,0"/>
        <ComboBox Name="TargetPortComboBox5" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="100,210,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>

        <Button Content="Refresh Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="320,10,0,0" Click="RefreshPorts_Click"/>
        
        <TextBox Name="DataTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="420" Height="50" Margin="10,250,0,0"/>
        <Button Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,250,0,0" Click="SendData_Click"/>
        <TextBlock Name="StatusTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,310,0,0" Width="500" Height="30" Text="Status: Not Connected"/>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="560" Height="150" Margin="10,350,0,0"/>
    </Grid>
</Window>
2. C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _scannerPort; // 스캐너가 연결된 시리얼 포트 객체
        private SerialPort[] _targetPorts = new SerialPort[5]; // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100; // 로그 표시의 최대 개수
        private const string LastUsedScannerPortKey = "LastUsedScannerPort"; // 마지막으로 사용한 스캐너 포트 설정 키
        private const string LastUsedTargetPortKey = "LastUsedTargetPort"; // 마지막으로 사용한 보낼 포트 설정 키

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                LoadLastUsedPorts(); // 마지막으로 사용된 포트 설정 불러오기
                RefreshPorts(); // 포트 목록 갱신
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
                MessageBox.Show($"프로그램 초기화 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadLastUsedPorts()
        {
            // 스캐너 포트 불러오기
            string lastUsedScannerPort = Properties.Settings.Default[LastUsedScannerPortKey]?.ToString();
            if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
            {
                ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                OpenPort(ref _scannerPort, lastUsedScannerPort, ScannerPortComboBox);
            }
            else
            {
                LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }

            // 보낼 포트 불러오기 (최대 5개)
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                string key = $"{LastUsedTargetPortKey}{i + 1}";
                string lastUsedTargetPort = Properties.Settings.Default[key]?.ToString();
                ComboBox targetComboBox = GetTargetPortComboBox(i);

                if (!string.IsNullOrEmpty(lastUsedTargetPort) && SerialPort.GetPortNames().Contains(lastUsedTargetPort))
                {
                    targetComboBox.SelectedItem = lastUsedTargetPort;
                    OpenPort(ref _targetPorts[i], lastUsedTargetPort, targetComboBox);
                }
                else
                {
                    LogMessage($"마지막으로 사용한 보낼 포트 {i + 1}를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }
            }
        }

        private void SaveLastUsedPort(string portName, string key)
        {
            Properties.Settings.Default[key] = portName;
            Properties.Settings.Default.Save();
        }

        private void RefreshPorts()
        {
            try
            {
                // 현재 사용 가능한 COM 포트 목록을 모든 ComboBox에 업데이트
                var portNames = SerialPort.GetPortNames();
                ScannerPortComboBox.ItemsSource = portNames;
                TargetPortComboBox1.ItemsSource = portNames;
                TargetPortComboBox2.ItemsSource = portNames;
                TargetPortComboBox3.ItemsSource = portNames;
                TargetPortComboBox4.ItemsSource = portNames;
                TargetPortComboBox5.ItemsSource = portNames;

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
                MessageBox.Show($"포트 목록 갱신 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenPort(ref SerialPort serialPort, string portName, ComboBox comboBox)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                }

                // 선택된 포트로 시리얼 포트를 설정하고 엽니다.
                serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                serialPort.Open();
                comboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"포트 {portName}가 열렸습니다.");

                // 포트가 스캐너 포트인지 확인하고, 해당 키로 저장
                if (comboBox == ScannerPortComboBox)
                {
                    SaveLastUsedPort(portName, LastUsedScannerPortKey);
                }
                else
                {
                    int index = GetTargetPortComboBoxIndex(comboBox);
                    SaveLastUsedPort(portName, $"{LastUsedTargetPortKey}{index + 1}");
                }
            }
            catch (Exception ex)
            {
                comboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClosePort(ref SerialPort serialPort, ComboBox comboBox)
        {
            try
            {
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                    comboBox.Foreground = Brushes.Red; // 포트가 닫혔을 때 빨간색 표시
                    LogMessage($"포트 {serialPort.PortName}가 닫혔습니다.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ScannerPortComboBox.SelectedItem != null)
            {
                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                OpenPort(ref _scannerPort, selectedPort, ScannerPortComboBox);
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (comboBox.SelectedItem != null)
            {
                string selectedPort = comboBox.SelectedItem.ToString();
                OpenPort(ref _targetPorts[index], selectedPort, comboBox);
            }
        }

        private int GetTargetPortComboBoxIndex(ComboBox comboBox)
        {
            // 각 ComboBox에 대해 인덱스를 반환
            if (comboBox == TargetPortComboBox1) return 0;
            if (comboBox == TargetPortComboBox2) return 1;
            if (comboBox == TargetPortComboBox3) return 2;
            if (comboBox == TargetPortComboBox4) return 3;
            if (comboBox == TargetPortComboBox5) return 4;
            return -1;
        }

        private ComboBox GetTargetPortComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetPortComboBox1;
                case 1: return TargetPortComboBox2;
                case 2: return TargetPortComboBox3;
                case 3: return TargetPortComboBox4;
                case 4: return TargetPortComboBox5;
                default: return null;
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_scannerPort != null && _scannerPort.IsOpen)
            {
                try
                {
                    string data = DataTextBox.Text;
                    _scannerPort.WriteLine(data); // 데이터를 스캐너 포트로 전송
                    LogMessage($"스캐너 포트로 데이터 전송: {data}");

                    // 특정 조건이 충족되면 데이터를 다른 포트로 전달
                    for (int i = 0; i < _targetPorts.Length; i++)
                    {
                        if (_targetPorts[i] != null && _targetPorts[i].IsOpen && ShouldForwardData(data))
                        {
                            _targetPorts[i].WriteLine(data);
                            LogMessage($"데이터가 {_targetPorts[i].PortName}로 전달되었습니다: {data}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"데이터 전송 실패: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    LogMessage($"데이터 전송 실패: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("스캐너 포트가 열려 있지 않습니다. 먼저 스캐너 포트를 여세요.", "경고", MessageBoxButton.OK, MessageBoxImage.Warning);
                LogMessage("데이터 전송 실패: 스캐너 포트가 열려 있지 않습니다.");
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시 조건: 데이터에 "FORWARD"가 포함된 경우에만 다른 포트로 전송
            // 이 조건을 필요에 따라 수정 가능
            return data.Contains("FORWARD");
        }

        private void LogMessage(string message)
        {
            // 현재 시간을 로그에 추가
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그의 개수가 최대치를 넘으면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. 코드 상세 설명
주요 기능
스캐너 포트 및 보낼 포트 설정: 스캐너 포트를 선택하는 콤보박스와, 데이터를 보낼 최대 5개의 포트를 선택하는 콤보박스가 제공됩니다. 모든 포트 설정은 저장됩니다.
포트 선택 및 상태 표시: 사용자가 포트를 선택하면 해당 포트가 자동으로 열리며, 정상적으로 열렸으면 파란색으로 표시되고, 열지 못했을 경우 빨간색으로 표시됩니다.
에러 처리 및 로그 기록: 포트 열기, 닫기, 데이터 전송 등의 모든 동작에 대해 에러 처리가 되어 있으며, 발생하는 모든 이벤트와 오류는 로그에 기록됩니다.
데이터 전달: 특정 조건(예: "FORWARD" 문자열 포함)이 만족될 때만 데이터가 다른 포트로 전달됩니다.
세부 주석과 코드 내 설명
LoadLastUsedPorts: 마지막에 사용한 포트 설정을 불러와 자동으로 연결을 시도합니다. 스캐너 포트와 5개의 타겟 포트를 각각 설정하고 열리게 합니다.
OpenPort: 선택된 포트를 열고, 포트가 정상적으로 열렸는지 확인하여 콤보박스 텍스트 색상을 변경합니다. 열리지 않은 경우 에러를 기록하고, 텍스트 색상을 빨간색으로 설정합니다.
ShouldForwardData: 특정 조건을 만족하는 경우에만 데이터를 다른 포트로 전달합니다. 이 조건은 필요에 따라 변경할 수 있습니다.
LogMessage: 모든 동작과 에러를 로그에 기록하며, 로그는 최대 100개까지 저장됩니다.
4. 사용 방법
포트 선택 및 연결: 스캐너 포트와 보낼 포트를 각각 선택하면 자동으로 연결됩니다. 포트가 정상적으로 열렸는지 확인하기 위해 콤보박스의 텍스트 색상을 확인합니다.
데이터 전송: DataTextBox에 데이터를 입력하고 "Send Data" 버튼을 클릭하면, 선택된 스캐너 포트로 데이터가 전송됩니다. 특정 조건이 만족되면 다른 포트로도 데이터가 전달됩니다.
로그 확인: 모든 동작 및 에러는 ListBox에 기록되므로, 프로그램의 상태를 쉽게 모니터링할 수 있습니다.
이 코드가 요청하신 기능을 충실히 구현할 수 있기를 바랍니다. 추가적인 기능 요청이나 질문이 있으면 언제든지 말씀해 주세요!