WITH LotChanges AS (
    SELECT *,
           CASE 
               WHEN LAG(lotname) OVER (ORDER BY datetime1) = lotname THEN 0 
               ELSE 1 
           END AS IsNewLot
    FROM LOG_MEV_Backup
),
LotGroups AS (
    SELECT *,
           SUM(IsNewLot) OVER (ORDER BY datetime1 ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS GroupID
    FROM LotChanges
),
RankedLots AS (
    SELECT *,
           ROW_NUMBER() OVER (PARTITION BY GroupID ORDER BY datetime1) AS rn
    FROM LotGroups
)
UPDATE LOG_MEV_Backup
SET xxx = CASE 
            WHEN RankedLots.rn <= 20 THEN 1
            ELSE 0
          END
FROM LOG_MEV_Backup
INNER JOIN RankedLots
ON LOG_MEV_Backup.line1 = RankedLots.line1
   AND LOG_MEV_Backup.machine1 = RankedLots.machine1
   AND LOG_MEV_Backup.lane1 = RankedLots.lane1
   AND LOG_MEV_Backup.lotname = RankedLots.lotname
   AND LOG_MEV_Backup.tb = RankedLots.tb
   AND LOG_MEV_Backup.datetime1 = RankedLots.datetime1;
