tartForegroundService를 사용할 때, Android 9 (API 레벨 28) 이상에서는 foregroundServiceType 속성을 지정해야 합니다. 이를 해결하기 위해 AndroidManifest.xml 파일과 startForegroundService 메서드를 수정해야 합니다.

1. AndroidManifest.xml 파일 수정
QRBarcodeService에 foregroundServiceType 속성을 추가합니다:

xml
코드 복사
<service
    android:name=".QRBarcodeService"
    android:foregroundServiceType="camera" />
2. QRBarcodeService.kt 수정
import 문을 포함한 QRBarcodeService 파일을 수정합니다:

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.media.RingtoneManager
import android.os.Build
import android.os.IBinder
import androidx.core.app.NotificationCompat
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.CompoundBarcodeView
import java.sql.DriverManager

class QRBarcodeService : Service() {

    private lateinit var barcodeView: CompoundBarcodeView

    override fun onCreate() {
        super.onCreate()
        barcodeView = CompoundBarcodeView(this)
        barcodeView.decodeContinuous(object : BarcodeCallback {
            override fun barcodeResult(result: BarcodeResult?) {
                result?.let {
                    val qrCodeData = it.text
                    // MSSQL 데이터베이스에 저장
                    saveToDatabase(qrCodeData)
                    // 소리 재생
                    playSound()
                }
            }

            override fun possibleResultPoints(resultPoints: MutableList<com.google.zxing.ResultPoint>?) {}
        })
        startForegroundService()
    }

    private fun startForegroundService() {
        val channelId = "QRBarcodeServiceChannel"
        val channelName = "QR Barcode Service"
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
            notificationManager.createNotificationChannel(channel)
        }
        val notification: Notification = NotificationCompat.Builder(this, channelId)
            .setContentTitle("QR Barcode Service")
            .setContentText("Scanning for QR codes and barcodes in the background")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .build()
        startForeground(1, notification)
    }

    private fun saveToDatabase(data: String) {
        Thread {
            try {
                // JDBC URL
                val connectionUrl = "jdbc:sqlserver://<SERVER_IP>:<PORT>;databaseName=QRCodeScannerDB;user=<USER>;password=<PASSWORD>"

                // 데이터베이스 연결
                val connection = DriverManager.getConnection(connectionUrl)

                // SQL 쿼리
                val statement = connection.createStatement()
                val sql = "INSERT INTO ScannedData (QRCodeData) VALUES ('$data')"

                // 쿼리 실행
                statement.executeUpdate(sql)

                // 연결 종료
                statement.close()
                connection.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }.start()
    }

    private fun playSound() {
        val notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
        val r = RingtoneManager.getRingtone(applicationContext, notification)
        r.play()
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
3. MainActivity.kt 수정
import 문을 포함한 MainActivity 파일을 수정합니다:

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val serviceIntent = Intent(this, QRBarcodeService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)

        // 메인 액티비티를 백그라운드로 전환
        moveTaskToBack(true)
    }
}
4. activity_main.xml 작성
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="QR and Barcode Scanner Running in Background"
        android:layout_centerInParent="true"/>
</RelativeLayout>
5. MSSQL 데이터베이스와의 연동
1. MSSQL 데이터베이스 설정

MSSQL 서버가 실행 중인지 확인하고, 애플리케이션에서 사용할 데이터베이스와 테이블을 생성합니다.
sql
코드 복사
CREATE DATABASE QRCodeScannerDB;
GO

USE QRCodeScannerDB;
GO

CREATE TABLE ScannedData (
    ID INT PRIMARY KEY IDENTITY(1,1),
    QRCodeData NVARCHAR(255),
    ScannedAt DATETIME DEFAULT GETDATE()
);
결론
위의 코드는 백그라운드에서 QR코드나 바코드를 스캔하고, 스캔된 데이터를 MSSQL 데이터베이스에 저장하며, 스캔될 때 소리를 재생하는 애플리케이션을 구현합니다. 앱이 실행되면 바로 백그라운드로 전환되며, Foreground Service를 사용하여 계속해서 QR/바코드를 스캔합니다.

전체 프로젝트를 빌드하고 실행하여 모든 기능이 올바르게 작동하는지 확인하십