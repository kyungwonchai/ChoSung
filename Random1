합니다. 요청하신 사항에 따라 Flask 서버에서 여러 APK 버전에 대해 공용으로 사용할 수 있는 함수를 작성해드리겠습니다. 이 함수는 여러 APK의 버전 정보를 관리하고, 필요한 경우 특정 APK에 대한 버전 정보를 제공하도록 할 것입니다.

Flask app.py 수정 예제
아래는 여러 APK에 대해 공용으로 사용할 수 있는 API를 제공하기 위해 Flask app.py 파일을 수정한 예제입니다.

1. 수정된 app.py 파일
python
코드 복사
from flask import Flask, jsonify, send_from_directory, abort, request
import os
import json

app = Flask(__name__)

# 버전 정보를 제공하는 엔드포인트 (여러 APK 지원)
@app.route('/api/version', methods=['GET'])
def get_version():
    apk_name = request.args.get('apk')  # 쿼리 파라미터에서 apk 이름을 가져옴
    if not apk_name:
        return jsonify({"error": "APK name is required"}), 400
    
    version_file = f'version_files/{apk_name}_version.json'
    
    try:
        with open(version_file, 'r') as f:
            version_info = json.load(f)
        return jsonify(version_info)
    except FileNotFoundError:
        return jsonify({"error": "Version file not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# APK 파일을 제공하는 엔드포인트 (여러 APK 지원)
@app.route('/download/<apk_name>', methods=['GET'])
def download_apk(apk_name):
    try:
        return send_from_directory('static/apks', f'{apk_name}.apk')
    except FileNotFoundError:
        abort(404)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8116)
2. 주요 변경 사항 설명
/api/version 엔드포인트:

쿼리 파라미터(apk)를 사용하여 특정 APK의 이름을 받습니다. 예를 들어, 요청 URL이 /api/version?apk=apk1이면, apk1에 대한 버전 정보를 제공합니다.
각 APK에 대해 별도의 버전 파일이 필요합니다. 예를 들어, apk1_version.json, apk2_version.json 등의 파일을 version_files 디렉토리에 저장합니다.
/download/<apk_name> 엔드포인트:

동적으로 APK 이름을 받아서 해당 APK 파일을 제공하도록 설정했습니다.
예를 들어, /download/apk1 요청을 받으면 apk1.apk 파일을 제공합니다.
3. version.json 파일 예제
각 APK에 대한 버전 정보는 별도의 JSON 파일에 저장됩니다. 파일 이름은 <apk_name>_version.json 형식입니다. 예를 들어, apk1_version.json 파일의 예제는 다음과 같습니다:

json
코드 복사
{
    "version": "1.2.3"
}
apk2_version.json 파일은 다음과 같을 수 있습니다:

json
코드 복사
{
    "version": "2.0.1"
}
이러한 파일은 version_files 폴더에 위치해야 합니다.

테스트 및 배포
Flask 서버 실행:

Flask 서버를 실행하여 API가 정상적으로 동작하는지 확인합니다.
python app.py 명령어로 서버를 실행합니다.
엔드포인트 테스트:

/api/version?apk=apk1와 같이 쿼리 파라미터로 APK 이름을 지정하여 요청을 보내고 올바른 버전 정보가 반환되는지 확인합니다.
/download/apk1와 같은 엔드포인트를 테스트하여 APK 파일이 정상적으로 다운로드되는지 확인합니다.
안드로이드 앱과 연동:

Android 앱이 Flask 서버로부터 버전 정보를 요청하고, 필요시 업데이트를 수행하도록 설정합니다.
이 설정을 통해 여러 APK의 버전 정보를 공용으로 관리하고 제공할 수 있는 API가 구성되었습니다. 추가적인 도움이 필요하시거나 문제가 발생하면 말씀해 주세요.