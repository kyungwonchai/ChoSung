네, 정확하게 지적하셨습니다! async void 메서드는 직접 await 할 수 없습니다. await 키워드는 Task 또는 Task<TResult>를 반환하는 비동기 메서드와 함께 사용되어야 합니다.

이벤트 핸들러(buttonSearch_Click) 자체는 async void로 두는 것이 일반적이지만, 이벤트 핸들러 내에서 await 하려는 메서드(SearchAndDisplay)는 Task를 반환해야 합니다.

해결 방법:

FolderFinderPro 클래스의 SearchAndDisplay 메서드 시그니처를 다음과 같이 수정해야 합니다.

기존 코드:

C#

// public static async void SearchAndDisplay(string startPath, ListBox targetListBox)
수정 후 코드:

C#

public static async Task SearchAndDisplay(string startPath, ListBox targetListBox)
//             ^^^^  <-- void 대신 Task 로 변경
{
    if (targetListBox == null) return; // Task 반환하므로 return; 가능

    targetListBox.Items.Clear();
    targetListBox.Items.Add("검색 중... (병렬 처리)");
    targetListBox.Enabled = false;

    try
    {
        // FindTargetsParallelAsync는 이미 Task<List<string>>을 반환하므로 await 가능
        List<string> results = await FindTargetsParallelAsync(startPath);

        targetListBox.Items.Clear();

        if (results.Any())
        {
            targetListBox.Items.AddRange(results.ToArray());
        }
        else
        {
            targetListBox.Items.Add("지정된 조건에 맞는 항목을 찾지 못했습니다.");
        }
    }
    catch (Exception ex)
    {
         targetListBox.Items.Clear();
         targetListBox.Items.Add($"오류 발생: {ex.Message}");
         // UI 스레드에서 MessageBox 표시 보장 (상황에 따라 Invoke 필요할 수 있음)
         if (targetListBox.InvokeRequired)
         {
             targetListBox.Invoke((MethodInvoker)delegate {
                 MessageBox.Show($"검색 중 심각한 오류 발생: {ex.Message}", "오류", MessageBoxButtons.OK, MessageBoxIcon.Error);
             });
         }
         else
         {
             MessageBox.Show($"검색 중 심각한 오류 발생: {ex.Message}", "오류", MessageBoxButtons.OK, MessageBoxIcon.Error);
         }
    }
    finally
    {
        // UI 스레드에서 컨트롤 상태 변경 보장
        if (targetListBox.InvokeRequired)
        {
            targetListBox.Invoke((MethodInvoker)delegate { targetListBox.Enabled = true; });
        }
        else
        {
            targetListBox.Enabled = true;
        }
    }
    // 메서드 끝에 도달하면 Task가 자동으로 완료 상태가 됨 (명시적 return 필요 없음)
}
변경 이유:

async Task로 변경하면 SearchAndDisplay 메서드는 이제 그 안의 모든 비동기 작업(await FindTargetsParallelAsync(startPath))이 완료될 때까지의 진행 상황을 나타내는 Task 객체를 반환합니다.
buttonSearch_Click 메서드(여전히 async void임)는 이제 SearchAndDisplay가 반환하는 이 Task를 await 할 수 있게 되어, 검색 작업이 완전히 끝날 때까지 기다렸다가 다음 코드를 실행할 수 있습니다.
buttonSearch_Click 코드는 변경할 필요가 없습니다.

C#

private async void buttonSearch_Click(object sender, EventArgs e)
{
    string rootPath = @"C:\temp\smd-pgm-server"; // 실제 경로로 변경

    // 이제 SearchAndDisplay가 Task를 반환하므로 await 가능
    await FolderFinderPro.SearchAndDisplay(rootPath, listBoxResults);

    // SearchAndDisplay 작업이 모두 완료된 후에 이 부분이 실행됩니다.
    // 예를 들어, 검색 완료 메시지를 표시할 수 있습니다.
    // MessageBox.Show("검색 완료!");