이해했습니다! 세 개의 고정된 COM 포트 설정(ComPlc, ComMergeOI, ComOther)을 선택하는 방식으로 수정해드리겠습니다. 각 COM 포트는 고정된 문자열로 지정되며, 사용자에게는 해당 설정을 선택하는 창이 제공됩니다.

요구 사항 정리:
세 가지 고정 COM 포트 이름: ComPlc, ComMergeOI, ComOther만 사용할 수 있습니다.
BaudRate는 고정: 사용자에게 BaudRate 선택 옵션은 없고, 고정된 값으로 설정됩니다.
설정창을 열었을 때, 이전에 저장된 COM 포트 설정을 ComboBox에 자동으로 보여줍니다.
1. App.config (COM 포트 설정 저장)
xml
코드 복사
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- 세 가지 COM 포트 설정 -->
    <add key="ComPlc" value="COM3"/>
    <add key="ComMergeOI" value="COM4"/>
    <add key="ComOther" value="COM5"/>
    <add key="BaudRate" value="9600"/>
  </appSettings>
</configuration>
2. Settings.cs (설정 저장 클래스)
세 가지 COM 포트 값을 저장하는 클래스입니다.

csharp
코드 복사
public class Settings
{
    public string ComPlc { get; set; }       // 첫 번째 COM 포트
    public string ComMergeOI { get; set; }   // 두 번째 COM 포트
    public string ComOther { get; set; }     // 세 번째 COM 포트
    public int BaudRate { get; set; } = 9600; // 고정된 BaudRate
}
3. SettingsManager.cs (설정 관리 클래스)
세 가지 COM 포트를 불러오고 저장할 수 있는 설정 관리 클래스입니다.

csharp
코드 복사
using System;
using System.Configuration;

public static class SettingsManager
{
    // App.config에서 설정을 불러오는 함수
    public static Settings LoadSettings()
    {
        try
        {
            // 세 가지 COM 포트와 BaudRate를 App.config에서 불러옴
            string comPlc = ConfigurationManager.AppSettings["ComPlc"];
            string comMergeOI = ConfigurationManager.AppSettings["ComMergeOI"];
            string comOther = ConfigurationManager.AppSettings["ComOther"];
            string baudRateString = ConfigurationManager.AppSettings["BaudRate"];
            int baudRate = int.Parse(baudRateString);

            return new Settings
            {
                ComPlc = comPlc,
                ComMergeOI = comMergeOI,
                ComOther = comOther,
                BaudRate = baudRate
            };
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 불러오기 실패: {ex.Message}");
            return null;
        }
    }

    // App.config에 설정을 저장하는 함수
    public static void SaveSettings(Settings settings)
    {
        try
        {
            // 현재 설정 파일을 열어 설정을 변경
            var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);

            // 설정 값을 저장
            config.AppSettings.Settings["ComPlc"].Value = settings.ComPlc;
            config.AppSettings.Settings["ComMergeOI"].Value = settings.ComMergeOI;
            config.AppSettings.Settings["ComOther"].Value = settings.ComOther;
            config.AppSettings.Settings["BaudRate"].Value = settings.BaudRate.ToString();

            // 변경된 설정을 저장
            config.Save(ConfigurationSaveMode.Modified);
            ConfigurationManager.RefreshSection("appSettings");

            msgvs.Instance.LogT5($"설정 저장 완료: ComPlc={settings.ComPlc}, ComMergeOI={settings.ComMergeOI}, ComOther={settings.ComOther}");
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 저장 실패: {ex.Message}");
        }
    }
}
4. ComPortConfigWindow.xaml.cs (설정창)
세 가지 고정된 COM 포트를 선택하는 창입니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;

public partial class ComPortConfigWindow : Window
{
    public string SelectedComPlc { get; private set; }       // ComPlc 포트 선택
    public string SelectedComMergeOI { get; private set; }   // ComMergeOI 포트 선택
    public string SelectedComOther { get; private set; }     // ComOther 포트 선택
    public int SelectedBaudRate { get; private set; } = 9600; // 고정된 BaudRate

    private Settings _currentSettings;

    public ComPortConfigWindow()
    {
        InitializeComponent();
        LoadAvailablePorts();
        LoadCurrentSettings();
    }

    // 현재 사용 가능한 COM 포트를 불러옴
    private void LoadAvailablePorts()
    {
        var ports = SerialPort.GetPortNames();
        PortComboBox1.ItemsSource = ports;  // ComPlc 포트
        PortComboBox2.ItemsSource = ports;  // ComMergeOI 포트
        PortComboBox3.ItemsSource = ports;  // ComOther 포트

        if (ports.Length > 0)
        {
            PortComboBox1.SelectedIndex = 0;
            PortComboBox2.SelectedIndex = 0;
            PortComboBox3.SelectedIndex = 0;
        }
    }

    // 저장된 설정을 불러와 ComboBox에 적용
    private void LoadCurrentSettings()
    {
        _currentSettings = SettingsManager.LoadSettings();

        if (_currentSettings != null)
        {
            // 이전 설정 값을 ComboBox에 표시
            PortComboBox1.Text = _currentSettings.ComPlc;
            PortComboBox2.Text = _currentSettings.ComMergeOI;
            PortComboBox3.Text = _currentSettings.ComOther;
        }
    }

    // 설정 버튼 클릭 시
    private void OnSetButtonClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(PortComboBox1.Text) && !string.IsNullOrEmpty(PortComboBox2.Text) && !string.IsNullOrEmpty(PortComboBox3.Text))
        {
            SelectedComPlc = PortComboBox1.SelectedItem.ToString();
            SelectedComMergeOI = PortComboBox2.SelectedItem.ToString();
            SelectedComOther = PortComboBox3.SelectedItem.ToString();

            // 설정값 저장
            _currentSettings.ComPlc = SelectedComPlc;
            _currentSettings.ComMergeOI = SelectedComMergeOI;
            _currentSettings.ComOther = SelectedComOther;

            SettingsManager.SaveSettings(_currentSettings);

            this.DialogResult = true;
            this.Close();
        }
        else
        {
            MessageBox.Show("모든 COM 포트를 선택해주세요.");
        }
    }
}
ComPortConfigWindow.xaml
xml
코드 복사
<Window x:Class="YourNamespace.ComPortConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM 포트 설정" Height="250" Width="400">
    <Grid>
        <!-- ComPlc 포트를 선택하는 ComboBox -->
        <ComboBox x:Name="PortComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="10,10,0,0" />
        <TextBlock Text="ComPlc" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,15,150,0"/>
        
        <!-- ComMergeOI 포트를 선택하는 ComboBox -->
        <ComboBox x:Name="PortComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="10,50,0,0" />
        <TextBlock Text="ComMergeOI" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,55,150,0"/>
        
        <!-- ComOther 포트를 선택하는 ComboBox -->
        <ComboBox x:Name="PortComboBox3" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="10,90,0,0" />
        <TextBlock Text="ComOther" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,95,150,0"/>

        <Button Content="설정" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="100" Height="30" Click="OnSetButtonClick"/>
    </Grid>
</Window>
5. MainViewModel.cs (뷰모델에서 COM 포트 설정 불러오기 및 사용)
COM 포트 설정을 불러오고, 설정창에서 사용자가 설정을 완료하면 저장합니다.

csharp
코드 복사
public class MainViewModel : ViewModelBase
{
    private ComPortMergeOI _comPort;
    private bool _isComPortConfigured = false;

    public ICommand OpenConfigCommand { get; set; }

    public MainViewModel()
    {
        OpenConfigCommand = new RelayCommand(OpenConfigWindow);

        // 프로그램 시작 시 설정을 불러옴
        LoadComPortSettings();
    }

    // App.config에서 COM 포트 설정을 불러오는 함수
    private void LoadComPortSettings()
    {
        var settings = SettingsManager.LoadSettings();

        if (settings != null)
        {
            try
            {
                // ComPortMergeOI 인스턴스 생성 및 포트 열기
                _comPort = new ComPortMergeOI(settings.ComMergeOI, settings.BaudRate);
                _comPort.OpenPort();
                _isComPortConfigured = true;
                msgvs.Instance.LogT5($"COM 포트 {settings.ComMergeOI} 열림");
            }
            catch (Exception ex)
            {
                msgvs.Instance.LogT5($"포트 열기 오류: {ex.Message}");
                OpenConfigWindow(); // 설정된 포트가 잘못되었을 경우 설정창을 띄움
            }
        }
        else
        {
            msgvs.Instance.LogT5("COM 포트 설정이 없습니다.");
            OpenConfigWindow(); // 설정이 없을 경우 설정창을 띄움
        }
    }

    // 설정창을 열고 설정을 저장하는 함수
    private void OpenConfigWindow()
    {
        var configWindow = new ComPortConfigWindow(); // 설정창 인스턴스
        if (configWindow.ShowDialog() == true)
        {
            string comMergeOI = configWindow.SelectedComMergeOI;
            int baudRate = configWindow.SelectedBaudRate;

            _comPort = new ComPortMergeOI(comMergeOI, baudRate);
            _comPort.OpenPort();
            _isComPortConfigured = true;

            msgvs.Instance.LogT5($"COM 포트 {comMergeOI} 설정 및 저장 완료");
        }
    }
}
설명:
**세 가지 고정된 COM 포트 (ComPlc, ComMergeOI, ComOther)**를 사용하여 포트를 설정하고, 이전 설정 값을 불러옵니다.
BaudRate는 고정값으로 설정되어 있으며, 사용자는 ComboBox에서 포트만 선택할 수 있습니다.
설정창을 열면 이전에 저장된 설정값이 자