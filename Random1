클릭원스(ClickOnce)로 배포한 프로그램이 실행 직후 종료되는 문제와 추가 요청사항을 모두 반영하여, 안정성을 대폭 향상시킨 최종 코드를 드리겠습니다.

실행이 안 되는(꺼지는) 이유
이 문제의 가장 흔한 원인은 **'실행 경로'**와 **'필수 파일 누락'**입니다.

경로 문제: tessdata 폴더나 icon.ico 같은 파일을 상대 경로 (./tessdata)로 지정하면, Visual Studio에서 디버깅할 때는 잘 동작하지만 클릭원스로 설치된 경로(C:\Users\사용자이름\AppData\...)에서는 파일을 찾지 못해 오류가 발생하며 프로그램이 즉시 종료됩니다.
필수 파일 누락: 클릭원스 배포 시, Tesseract 엔진 파일이나 tessdata 폴더의 언어 파일들이 패키지에 포함되지 않으면 실행에 필요한 파일을 찾지 못해 꺼집니다.
해결책 및 추가 요청사항 반영
안정적인 폴더 관리: 요청하신 대로 C:\Agent\funcenvget 폴더를 생성하고, 모든 설정 및 로그 파일을 이곳에서 관리하도록 변경합니다. 이렇게 하면 경로 문제가 해결되고 관리가 용이해집니다.
치명적 오류 로그(Crash Log) 생성: 만약 예상치 못한 이유로 프로그램이 꺼지게 되면, 그 원인을 C:\Agent\funcenvget\logs 폴더에 crash_log.txt 파일로 기록하도록 '글로벌 예외 처리' 로직을 추가합니다. 이제 왜 꺼지는지 원인을 파악할 수 있습니다.
일반 텍스트 로그 제거: DB에만 데이터를 저장하도록, 일반적인 파일 로그 기능은 모두 제거했습니다.
클릭원스 배포 설정 가이드: 배포 시 필수 파일이 누락되지 않도록 설정하는 방법을 안내해 드립니다.
## 1. App.xaml 및 App.xaml.cs 수정 (오류 로깅 기능 추가)
이 부분은 프로그램의 모든 예상치 못한 오류를 잡아내어 기록하는 매우 중요한 역할을 합니다.

App.xaml
App.xaml 파일을 열고 StartupUri="MainWindow.xaml" 속성을 지우고, 대신 DispatcherUnhandledException="Application_DispatcherUnhandledException" 속성을 추가합니다.

XML

<Application x:Class="funcenvget.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:funcenvget"
             DispatcherUnhandledException="Application_DispatcherUnhandledException">
    <Application.Resources>
         
    </Application.Resources>
</Application>
App.xaml.cs
App.xaml.cs 파일을 열고 아래 코드로 전체를 교체합니다.

C#

using System;
using System.IO;
using System.Windows;
using System.Windows.Threading;

namespace funcenvget
{
    public partial class App : Application
    {
        // 앱 시작 시 MainWindow를 직접 생성하여 실행
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            MainWindow mainWindow = new MainWindow();
            // OnContentRendered 이벤트에서 창을 숨기므로 Show()를 호출해도 바로 나타나지 않음
            mainWindow.Show();
        }

        // 앱 전체에서 처리되지 않은 모든 예외를 잡는 핸들러
        private void Application_DispatcherUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)
        {
            // 오류 로그를 저장할 경로 지정
            string logFolderPath = @"C:\Agent\funcenvget\logs";
            string logFilePath = Path.Combine(logFolderPath, "crash_log.txt");

            try
            {
                // 로그 폴더가 없으면 생성
                Directory.CreateDirectory(logFolderPath);
                
                // 오류 정보 구성
                string errorMessage = $"[CRASH] {DateTime.Now:yyyy-MM-dd HH:mm:ss}\r\n" +
                                      $"- Message: {e.Exception.Message}\r\n" +
                                      $"- StackTrace: {e.Exception.StackTrace}\r\n\r\n";
                
                // 파일에 오류 기록
                File.AppendAllText(logFilePath, errorMessage);

                // 사용자에게 알림
                MessageBox.Show($"치명적인 오류가 발생하여 프로그램을 종료합니다.\n\nC:\\Agent\\funcenvget\\logs\\crash_log.txt 파일을 확인해주세요.",
                                "프로그램 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                // 로그 기록 자체에 실패할 경우를 대비한 최후의 메시지
                MessageBox.Show($"오류 로그 기록에 실패했습니다: {ex.Message}", "심각한 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                // OS의 기본 충돌 대화상자가 뜨지 않도록 처리하고 앱 종료
                e.Handled = true;
                Application.Current.Shutdown();
            }
        }
    }
}
## 2. MainWindow.xaml.cs 최종 코드 (안정성 강화)
파일 경로를 절대 경로(C:\Agent\...)로 지정하고, 안정성을 높인 최종 코드입니다. 이 코드로 MainWindow.xaml.cs 전체를 교체하세요.

C#

using System;
using System.ComponentModel;
using System.IO;
using System.Runtime.InteropServices;
using System.Text.RegularExpressions;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;

// 네임스페이스 충돌을 피하기 위한 별칭(alias) 사용
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        // P/Invoke 선언
        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private TesseractEngine ocrEngine;
        private bool isLocked = true;
        
        // C:\Agent 폴더를 기본 경로로 사용
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private string previewImagePath;

        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }

        // 창이 화면에 렌더링 된 후 숨기기
        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            // Tesseract 엔진 경로를 응용 프로그램 실행 폴더 기준으로 설정
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string tessDataPath = Path.Combine(exePath, "tessdata");
            ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
            ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-");

            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;

            // 설정 파일 경로 초기화
            Directory.CreateDirectory(agentBasePath); // 폴더가 없으면 생성
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            txtWindowTitle.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (File.Exists(previewImagePath))
            {
                try
                {
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    // 파일 잠금을 피하기 위해 스트림으로 로드
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                }
                catch { }
            }
            UpdateLockState(true);
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && FindWindow(null, txtWindowTitle.Text) != IntPtr.Zero)
            {
                if (!timer.IsEnabled)
                {
                    btnStart_Click(this, new RoutedEventArgs());
                }
            }
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled)
            {
                MessageBox.Show("로깅이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtWindowTitle.IsReadOnly = isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            if (isLocked)
            {
                btnToggleEdit.Content = "수정";
                txtPcName.Background = Wpf.Media.Brushes.LightGray;
                txtWindowTitle.Background = Wpf.Media.Brushes.LightGray;
            }
            else
            {
                btnToggleEdit.Content = "잠금";
                txtPcName.Background = Wpf.Media.Brushes.White;
                txtWindowTitle.Background = Wpf.Media.Brushes.White;
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled)
            {
                timer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 로깅이 중지되었습니다.";
            }
            else
            {
                if (!isLocked)
                {
                    MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
                    return;
                }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtWindowTitle.Text))
                {
                    MessageBox.Show("PC이름과 대상 창 제목을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e)
        {
            this.Show();
            this.WindowState = WindowState.Normal;
            this.Activate();
        }

        private void MenuOpen_Click(object sender, RoutedEventArgs e)
        {
            this.Show();
            this.WindowState = WindowState.Normal;
            this.Activate();
        }

        private void MenuExit_Click(object sender, RoutedEventArgs e)
        {
            MyNotifyIcon.Dispose();
            Application.Current.Shutdown();
        }

        protected override void OnClosing(CancelEventArgs e)
        {
            Settings.Default.Save();
            if (Application.Current.ShutdownMode != ShutdownMode.OnExplicitShutdown)
            {
                e.Cancel = true;
                this.Hide();
            }
            base.OnClosing(e);
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            Settings.Default.WindowTitle = txtWindowTitle.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.Save();
        }
        
        private void Timer_Tick(object sender, EventArgs e)
        {
            PerformLogging();
        }

        private void PerformLogging()
        {
            try
            {
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창을 찾을 수 없습니다.";
                    return;
                }
                if (IsIconic(hWnd))
                {
                    lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다.";
                    return;
                }
                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Gdi.Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                    }
                    var cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        using (var page = ocrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            if (!string.IsNullOrWhiteSpace(rawText))
                            {
                                ProcessOcrResult(rawText);
                            }
                            else
                            {
                                lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다.";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"상태: 캡처 중 오류 발생! {ex.Message}";
            }
        }

        private void ProcessOcrResult(string rawText)
        {
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 2)
            {
                lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)";
                return;
            }
            if (decimal.TryParse(parts[0], out decimal val1) && decimal.TryParse(parts[1], out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                UploadToDatabase(temp, humid);
            }
            else
            {
                lblStatus.Text = $"상태: 숫자 변환 오류 ({parts[0]},{parts[1]})";
            }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName))
            {
                lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다.";
                return;
            }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;";
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                conn = new MySqlConnection(connectionString);
                conn.Open();
                trans = conn.BeginTransaction();
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    rowsAffected = cmd.ExecuteNonQuery();
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    cmd.ExecuteNonQuery();
                }
                trans.Commit();
                if (rowsAffected > 0)
                {
                    lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!";
                }
                else
                {
                    lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)";
                }
            }
            catch (Exception ex)
            {
                try { trans?.Rollback(); } catch { }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                conn?.Close();
            }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
            if (hWnd == IntPtr.Zero)
            {
                MessageBox.Show("먼저 유효한 '대상 창 제목'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero) return;
                if (IsIconic(hWnd))
                {
                    MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    imgPreview.Source = null;
                    return;
                }
                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Gdi.Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                    }
                    var cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Width <= 0 || cropArea.Height <= 0) return;
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        imgPreview.Source = BitmapToImageSource(croppedBmp);
                        croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png);
                    }
                }
            }
            catch {}
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }
}
## 3. 클릭원스 배포 시 필수 파일 포함하기 (중요)
프로그램이 꺼지는 문제를 막기 위해, 배포 시 Tesseract 관련 파일들이 반드시 포함되어야 합니다.

솔루션 탐색기에서 **프로젝트를 마우스 오른쪽 버튼으로 클릭 > 속성(Properties)**을 엽니다.
게시(Publish) 탭으로 이동한 후, 응용 프로그램 파일(Application Files...) 버튼을 클릭합니다.
목록에서 아래 항목들의 **'게시 상태(Publish Status)'**가 **'포함(Include)'**으로 되어 있는지 반드시 확인합니다.
Tesseract.dll
Hardcodet.NotifyIcon.Wpf.dll
MySql.Data.dll 및 관련 dll
tesseract53.dll (또는 비슷한 이름의 엔진 파일)
leptonica-1.83.1.dll (또는 비슷한 이름의 엔진 파일)
**'모든 파일 표시'**를 체크하고, 목록에 tessdata 폴더가 보이는지 확인합니다. 만약 보이지 않는다면, 아래 5번 단계를 진행해야 합니다.
tessdata 폴더 및 언어 파일 포함시키기:
솔루션 탐색기에서 '모든 파일 표시' 아이콘을 클릭합니다.
bin\Debug (또는 bin\Release) 폴더 아래에 있는 tessdata 폴더를 찾습니다.
tessdata 폴더를 **마우스 오른쪽 버튼으로 클릭 > 프로젝트에 포함(Include In Project)**을 선택합니다.
프로젝트에 포함된 tessdata 폴더와 그 안의 eng.traineddata 파일을 선택하고, 속성 창에서 **'출력 디렉터리로 복사(Copy to Output Directory)'**를 **'변경 내용이 있으면 복사(Copy if newer)'**로 설정합니다.
이제 다시 게시(Publish)하면 모든 필수 파일이 포함되어 프로그램이 정상적으로 실행될 것입니다. 만약 그래도 꺼진다면, C:\Agent\funcenvget\logs\crash_log.txt 파일을 열어 정확한 오류 원인을 확인해 보세요.

