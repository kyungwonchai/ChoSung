# Blazor 서버 앱에서 Counter.razor 파일에 HTML 테이블을 만들고, 각 링크를 내부 파일 /download_router에 연결하여, cshtml 및 cshtml.cs 파일에서 IActionResult OnGet으로 파일을 바이너리 형태로 다운로드하는 구조를 간소화하려면, 특정 폴더 내의 파일 목록을 동적으로 생성하고, 사용자가 선택한 파일을 다운로드할 수 있도록 하는 접근 방식을 사용할 수 있습니다. 다음은 이러한 기능을 구현하는 방법에 대한 개요입니다.

1단계: 파일 목록을 보여줄 Razor 페이지 생성
먼저, 사용자에게 파일 목록을 보여주고 선택한 파일을 다운로드할 수 있도록 하는 Razor 페이지를 생성합니다. 이 페이지에서는 서버의 특정 폴더 내 모든 파일 목록을 가져와 표시합니다.

2단계: 파일 목록을 불러오는 로직 구현
서버의 특정 폴더에서 파일 목록을 동적으로 불러오는 로직을 구현합니다. 이를 위해 서버 측 코드에서 System.IO 네임스페이스의 메서드를 사용하여 해당 폴더의 파일 목록을 읽어옵니다.

3단계: 파일 다운로드 기능 구현
사용자가 파일 명을 클릭했을 때 해당 파일을 다운로드할 수 있도록 하는 로직을 구현합니다. 이 기능을 구현하기 위해서는 파일의 경로를 받아, 해당 파일을 바이너리 형태로 읽어와 사용자에게 다운로드하게 합니다.

예제 코드
Razor 페이지 (.razor)
razor
Copy code
@page "/file-downloads"

<h3>Available Files</h3>

@if (files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul>
    @foreach (var file in files)
    {
        <li><a href="download_file/@file.Name">@file.Name</a></li>
    }
    </ul>
}

@code {
    private FileInfo[] files;

    protected override async Task OnInitializedAsync()
    {
        var directoryPath = "wwwroot/files"; // 파일이 위치한 폴더 경로
        var directoryInfo = new DirectoryInfo(directoryPath);
        files = directoryInfo.GetFiles();
        await base.OnInitializedAsync();
    }
}
파일 다운로드 처리를 위한 Controller (.cs)
csharp
Copy code
[Route("[controller]")]
public class DownloadFileController : Controller
{
    [HttpGet("{fileName}")]
    public IActionResult Get(string fileName)
    {
        var filePath = Path.Combine("wwwroot/files", fileName);
        var mimeType = "application/octet-stream";
        var fileBytes = System.IO.File.ReadAllBytes(filePath);
        return File(fileBytes, mimeType, fileName);
    }
}
위 코드에서는 wwwroot/files 폴더 내의 모든 파일을 리스트로 나열하고, 사용자가 파일 이름을 클릭하면 해당 파일을 다운로드할 수 있도록 구현하고 있습니다. 이 구현을 기반으로 사용자 요구에 맞게 조정하면 됩니다. 파일 목록을 보여주는 페이지와 파일 다운로드 기능을 처리하는 컨트롤러를 분리하여 관리하는 것이 좋습