송합니다. NetworkOnMainThreadException이 isQrCodeInDatabase 메서드 내에서 발생하는 것으로, 이 메서드에서 데이터베이스 연결을 시도할 때 발생한 것입니다. 이 문제를 해결하려면 isQrCodeInDatabase 메서드 내에서 네트워크 작업이 메인 스레드에서 실행되지 않도록 해야 합니다.

이 문제를 해결하기 위해, isQrCodeInDatabase 메서드를 비동기 방식으로 실행하고, catch 블록에서 발생한 예외를 제대로 처리하도록 수정하겠습니다.

아래는 수정된 코드입니다.

1. isQrCodeInDatabase 메서드의 수정
isQrCodeInDatabase 메서드를 dbExecutor를 사용해 백그라운드에서 실행하고, 결과를 callback으로 전달하도록 수정했습니다.

kotlin
코드 복사
private fun isQrCodeInDatabase(qrCode: String, callback: (Boolean) -> Unit) {
    dbExecutor.execute {
        var connection: Connection? = null
        var statement: Statement? = null
        var resultSet: ResultSet? = null
        var result = false
        try {
            // JDBC 드라이버 로드
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")

            // 데이터베이스 연결
            connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)

            // 쿼리 실행
            val query = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
            val preparedStatement = connection.prepareStatement(query)
            preparedStatement.setString(1, qrCode)
            
            resultSet = preparedStatement.executeQuery()

            // 결과 처리
            if (resultSet.next()) {
                result = resultSet.getInt(1) > 0
            }
        } catch (e: Exception) {
            e.printStackTrace()
        } finally {
            try {
                resultSet?.close()
                statement?.close()
                connection?.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
        // 콜백으로 결과 전달
        handler.post {
            callback(result)
        }
    }
}
2. processImageProxy에서의 호출 방식 수정
이제 processImageProxy 메서드 내에서 isQrCodeInDatabase를 호출할 때, 콜백을 사용하여 결과를 처리합니다.

kotlin
코드 복사
private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
    val mediaImage = imageProxy.image
    if (mediaImage != null) {
        val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
        barcodeScanner.process(image)
            .addOnSuccessListener { barcodes ->
                for (barcode in barcodes) {
                    val rawValue = barcode.rawValue
                    findViewById<TextView>(R.id.text_view_result).text = rawValue

                    // 데이터베이스 쿼리를 비동기로 실행하고 콜백으로 결과 처리
                    isQrCodeInDatabase(rawValue) { isInDatabase ->
                        if (isInDatabase) {
                            // QR 코드가 DB에 존재할 경우 테두리를 녹색으로 변경
                            cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))
                            // 5분 후에 다시 주황색으로 변경
                            handler.postDelayed({
                                cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_orange_light))
                            }, TimeUnit.MINUTES.toMillis(5))
                        } else {
                            // QR 코드가 DB에 존재하지 않을 경우 주황색 테두리 유지
                            cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_orange_light))
                        }
                    }
                }
            }
            .addOnFailureListener {
                // Handle failure
            }
            .addOnCompleteListener {
                imageProxy.close()
            }
    }
}
주요 변경 사항:
비동기 데이터베이스 호출:

isQrCodeInDatabase 함수가 메인 스레드가 아닌 dbExecutor에서 실행되도록 수정되었습니다. 이 메서드는 이제 결과를 callback으로 전달합니다.
콜백 방식으로 결과 처리:

processImageProxy에서 데이터베이스 쿼리 결과를 콜백으로 받아서 UI를 업데이트합니다. 이로 인해 네트워크 작업이 메인 스레드에서 발생하지 않으며, NetworkOnMainThreadException을 피할 수 있습니다.
이 수정으로 인해 isQrCodeInDatabase에서 발생하는 NetworkOnMainThreadException이 해결될 것입니다. 네트워크 작업은 백그라운드에서 실행되고, 결과는 메인 스레드에서 처리되어 UI를 업데이트합