래는 ButtonConfig를 사용할 때, 생성하는 곳에서 직접 함수를 구현하지 않고 미리 정의된 함수를 지정하여 사용하는 코드입니다.

1. ButtonConfig 클래스 (그대로 유지)
csharp
코드 복사
using DevExpress.XtraBars;
using System;
using System.Windows.Forms;

public class ButtonConfig
{
    public string Name { get; set; }
    public string Tag { get; set; }
    public string Icon { get; set; }  // 아이콘 이름 (리소스에서 사용)
    public BarItemPaintStyle Style { get; set; } = BarItemPaintStyle.Standard;
    public Action OnClickAction { get; set; } // 클릭 액션 (선택적)

    public BarButtonItem CreateBarItem(BarManager barManager)
    {
        var button = new BarButtonItem(barManager, Name)
        {
            Tag = Tag,
            PaintStyle = Style
        };

        if (!string.IsNullOrEmpty(Icon))
        {
            button.ImageOptions.SvgImage = barManager.Images.GetImageByName(Icon);
        }

        // 클릭 이벤트 설정
        button.ItemClick += (s, e) =>
        {
            if (OnClickAction != null)
                OnClickAction.Invoke(); // 사용자가 지정한 액션 실행
            else
                DefaultAction(); // 기본 동작 실행
        };

        return button;
    }

    private void DefaultAction()
    {
        MessageBox.Show($"기본 동작: {Name} 클릭됨", "Info");
    }
}
2. MainForm에서 미리 정의된 함수를 지정하여 사용
csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    private BarManager barManager;

    public MainForm()
    {
        InitializeComponent();
        barManager = new BarManager();
        barManager.Form = this;

        // 리본 페이지 생성
        var ribbonPage = new RibbonPage("메뉴");
        var ribbonGroup = new RibbonPageGroup("기능 버튼");

        // 미리 정의된 이벤트 핸들러 함수 사용
        var button1 = new ButtonConfig
        {
            Name = "버튼1",
            Tag = "Btn1",
            Icon = "save",
            Style = BarItemPaintStyle.CaptionGlyph,
            OnClickAction = HandleButton1Click  // 미리 구현된 함수 지정
        }.CreateBarItem(barManager);

        var button2 = new ButtonConfig
        {
            Name = "버튼2",
            Tag = "Btn2",
            Icon = "edit",
            Style = BarItemPaintStyle.CaptionGlyph,
            OnClickAction = HandleButton2Click  // 미리 구현된 함수 지정
        }.CreateBarItem(barManager);

        var button3 = new ButtonConfig
        {
            Name = "버튼3",
            Tag = "Btn3",
            Icon = "delete",
            Style = BarItemPaintStyle.CaptionGlyph
            // OnClickAction 없음 → 기본 동작 실행됨
        }.CreateBarItem(barManager);

        barManager.Items.Add(button1);
        barManager.Items.Add(button2);
        barManager.Items.Add(button3);

        ribbonGroup.ItemLinks.Add(button1);
        ribbonGroup.ItemLinks.Add(button2);
        ribbonGroup.ItemLinks.Add(button3);
        ribbonPage.Groups.Add(ribbonGroup);
        ribbonControl1.Pages.Add(ribbonPage);
    }

    // 미리 구현된 버튼 클릭 핸들러 함수
    private void HandleButton1Click()
    {
        MessageBox.Show("버튼1: 저장 기능 실행됨", "알림");
    }

    private void HandleButton2Click()
    {
        MessageBox.Show("버튼2: 편집 기능 실행됨", "알림");
    }
}
동작 설명
ButtonConfig는 기존 코드와 동일하게 유지됩니다.
MainForm에서 HandleButton1Click, HandleButton2Click을 미리 구현해둡니다.
OnClickAction을 지정할 때, new ButtonConfig { ... }에서 HandleButton1Click과 같은 미리 구현된 함수를 지정합니다.
button3은 OnClickAction을 지정하지 않았으므로 DefaultAction()이 실행됩니다.
결과
버튼1 클릭 시 → "버튼1: 저장 기능 실행됨"
버튼2 클릭 시 → "버튼2: 편집 기능 실행됨"
버튼3 클릭 시 → "기본 동작: 버튼3 클릭됨"
이제 동적으로 버튼을 생성하면서도 미리 정의된 함수를 할당할 수 있습니다!


1/2












검색

심층 리서치



ChatGPT는 실수를 할 수 있습니다. 중요한 정보는 재차 확인하세요.