는 타이머를 사용하여 5초마다 새로 생성된 파일이 있는지 체크하고, 파일을 로컬로 복사 및 처리하는 코드입니다. 추가적으로, 각 기능에 대한 주석을 달아 드리겠습니다.

FileProcessor 전체 코드 (타이머 포함)
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;

public class FileProcessor
{
    private string _networkPath = @"\\10.44.44.44\file_log";  // 네트워크 경로
    private string _localPath = @"C:\prod_file_log";          // 로컬 경로
    private string _backupPath = @"C:\MESPRODFILE_Backup";    // 백업 경로
    private DateTime _lastProcessedTime = DateTime.MinValue;  // 마지막 처리된 파일 시간 기록
    private Timer _fileCheckTimer;                           // 타이머 객체

    public FileProcessor()
    {
        // 로컬 및 백업 디렉터리 존재 여부 확인 후 없으면 생성
        EnsureDirectoryExists(_localPath);
        EnsureDirectoryExists(_backupPath);

        // 5초마다 새로 생성된 파일이 있는지 체크하는 타이머 설정
        _fileCheckTimer = new Timer(5000); // 5초
        _fileCheckTimer.Elapsed += OnTimedEvent;
        _fileCheckTimer.AutoReset = true;
        _fileCheckTimer.Enabled = true;  // 타이머 시작
    }

    /// <summary>
    /// 디렉토리의 존재 여부를 확인하고 없으면 생성하는 함수
    /// </summary>
    /// <param name="path">생성할 디렉토리 경로</param>
    private void EnsureDirectoryExists(string path)
    {
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
    }

    /// <summary>
    /// 타이머가 5초마다 호출하는 이벤트 핸들러. 새로 생성된 파일을 체크합니다.
    /// </summary>
    private void OnTimedEvent(Object source, ElapsedEventArgs e)
    {
        // 새로 생성된 파일이 있는지 확인하고 처리
        ProcessFilesFromNetwork().Wait(); 
    }

    /// <summary>
    /// 네트워크 경로에서 파일을 로컬 경로로 안전하게 복사한 후 처리 및 삭제
    /// </summary>
    public async Task ProcessFilesFromNetwork()
    {
        // 네트워크 경로에서 모든 파일을 가져옴
        var files = Directory.GetFiles(_networkPath);

        // 각 파일을 로컬로 복사한 후 처리
        foreach (var file in files)
        {
            string fileName = Path.GetFileName(file);
            string localFile = Path.Combine(_localPath, fileName);

            // 파일이 다 쓰여졌는지 확인
            if (IsFileReady(file))
            {
                // 네트워크에서 로컬로 파일 복사
                File.Copy(file, localFile, true);  // 파일 덮어쓰기 허용

                // 파일을 로컬에서 처리
                await ProcessFile(localFile);

                // 처리 후 파일을 백업 경로로 이동
                MoveFileToBackup(localFile);

                // 네트워크 경로의 파일 삭제
                DeleteNetworkFile(file);
            }
        }
    }

    /// <summary>
    /// 파일이 다 쓰여졌는지 확인하는 함수
    /// </summary>
    /// <param name="filePath">확인할 파일 경로</param>
    /// <returns>파일이 준비되었는지 여부</returns>
    private bool IsFileReady(string filePath)
    {
        try
        {
            using (FileStream inputStream = File.Open(filePath, FileMode.Open, FileAccess.Read, FileShare.None))
            {
                return inputStream.Length > 0;  // 파일 크기가 0보다 크면 읽기 가능
            }
        }
        catch (IOException)
        {
            // 파일이 잠겨 있거나 접근할 수 없으면 아직 준비되지 않음
            return false;
        }
    }

    /// <summary>
    /// 파일을 로컬에서 처리하는 함수
    /// </summary>
    private async Task ProcessFile(string filePath)
    {
        // 파일 처리 로직 (파일 내용 읽기, 분석 등)
        Console.WriteLine($"Processing file: {filePath}");

        // 예시로 파일 내용을 읽어들이는 코드
        string[] lines = await File.ReadAllLinesAsync(filePath);
        foreach (var line in lines)
        {
            // 각 줄 처리 로직 (필요에 따라 구현)
            Console.WriteLine(line);
        }
    }

    /// <summary>
    /// 파일을 백업 폴더로 이동하는 함수 (날짜별로 폴더 생성)
    /// </summary>
    /// <param name="filePath">백업할 파일 경로</param>
    private void MoveFileToBackup(string filePath)
    {
        // 백업 폴더에 날짜별 폴더 생성
        string dateFolder = DateTime.Now.ToString("yyyyMMdd");
        string backupFolder = Path.Combine(_backupPath, dateFolder);

        // 백업 디렉터리 생성 (날짜별로)
        EnsureDirectoryExists(backupFolder);

        // 원본 파일명 가져오기
        string fileName = Path.GetFileName(filePath);

        // 백업 경로 설정
        string backupFilePath = Path.Combine(backupFolder, fileName);

        // 파일 이동 (백업 경로로)
        File.Move(filePath, backupFilePath);
    }

    /// <summary>
    /// 네트워크 경로에서 파일을 삭제하는 함수
    /// </summary>
    /// <param name="filePath">삭제할 네트워크 파일 경로</param>
    private void DeleteNetworkFile(string filePath)
    {
        try
        {
            File.Delete(filePath);  // 네트워크 경로에서 파일 삭제
            Console.WriteLine($"File deleted from network path: {filePath}");
        }
        catch (IOException ex)
        {
            Console.WriteLine($"Error deleting file from network path: {ex.Message}");
        }
    }

    /// <summary>
    /// 백업된 파일 중 3개월 이상 된 파일을 삭제하는 함수
    /// </summary>
    public void DeleteOldBackupFiles()
    {
        // 백업 디렉터리에서 날짜별 폴더 확인
        var directories = Directory.GetDirectories(_backupPath);

        foreach (var dir in directories)
        {
            // 폴더명을 날짜로 변환하여 3개월 이전의 폴더는 삭제
            string folderName = Path.GetFileName(dir);
            if (DateTime.TryParseExact(folderName, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime folderDate))
            {
                if (folderDate < DateTime.Now.AddMonths(-3))
                {
                    Directory.Delete(dir, true);  // 폴더 및 하위 파일 삭제
                }
            }
        }
    }
}
주요 기능 설명
타이머 설정 (_fileCheckTimer):

타이머는 5초마다 OnTimedEvent 메서드를 호출하여 새로 생성된 파일이 있는지 확인합니다.
타이머는 AutoReset을 true로 설정하여 반복 실행됩니다.
파일 준비 상태 체크:

IsFileReady 메서드를 통해 파일이 완전히 쓰여졌는지 확인한 후에 파일을 복사합니다.
파일 처리 흐름:

네트워크에서 파일을 가져온 뒤, 로컬로 복사하고 처리를 진행합니다.
처리된 파일은 백업 폴더로 이동하고, 네트워크 상의 원본 파일은 삭제합니다.
백업 및 파일 삭제:

3개월 이상 지난 파일은 자동으로 백업에서 삭제되도록 구현되어 있으며, 이 부분은 스케줄러를 이용하여 하루에 한 번 실행하는 방식으로 구현할 수 있습니다.
이 코드로 5초마다 새로 생성된 파일을 체크하고, 처리한 후 백업 및 삭제 작업을 진행할 수 있습니다. 추가 요구 사항이 있으면 말씀해주세