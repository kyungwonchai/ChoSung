VVM 패턴에서 ICommand 인터페이스를 구현하는 필수 클래스
✅ UI 이벤트와 ViewModel을 연결하는 역할
✅ 버튼 클릭, 달력 변경 등의 이벤트를 ViewModel에서 처리 가능하게 함

🔥 RelayCommand.cs (MVVM용 명령어 바인딩)
csharp
코드 복사
using System;
using System.Windows.Input;

namespace MonitorControlApp
{
    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T> _execute;
        private readonly Func<T, bool> _canExecute;

        public RelayCommand(Action<T> execute, Func<T, bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute((T)parameter);
        }

        public void Execute(object parameter)
        {
            _execute((T)parameter);
        }

        public event EventHandler CanExecuteChanged;
        public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }

    public class RelayCommand : RelayCommand<object>
    {
        public RelayCommand(Action execute, Func<bool> canExecute = null)
            : base(_ => execute(), canExecute == null ? (Func<object, bool>)null : _ => canExecute()) { }
    }
}
📌 RelayCommand의 역할
MVVM에서 버튼, 명령 실행을 ViewModel과 바인딩
Execute를 통해 액션을 실행
CanExecute로 실행 가능 여부 제어
XAML에서 ICommand 바인딩을 쉽게 연결
📌 프로젝트 구조 (최종 완성)
scss
코드 복사
📂 MonitorControlApp
 ├── 📂 ViewModels
 │    ├── MainViewModel.cs (비즈니스 로직)
 ├── 📂 Views
 │    ├── MainWindow.xaml (UI)
 ├── 📂 Models
 │    ├── HolidayModel.cs (휴일 데이터 관리)
 ├── 📂 Data
 │    ├── (YYYY-MM.dat) (각 연월별 데이터 저장)
 ├── 📂 Utils
 │    ├── RelayCommand.cs (MVVM 패턴용 명령 클래스)
 ├── App.xaml
 ├── MainWindow.xaml.cs (MainViewModel과 연결)
 ├── Program.cs (진입점)
🚀 이제 완벽한 MVVM 구조로 동작합니다! 🚀
💡 XAML과 ViewModel 간의 모든 명령 실행이 가능해졌습니다! 💡






나의 말:
viewmodeld에 toggleholiday이건머고
ChatGPT의 말:
ChatGPT
ToggleHoliday는 사용자가 달력에서 날짜를 클릭할 때 호출되는 함수로, 해당 날짜를 쉬는 날(노란색) 으로 설정하거나 기존에 쉬는 날이었다면 제거하는 역할을 합니다.

📌 ToggleHoliday 메서드의 역할
✅ 달력에서 클릭된 날짜가 쉬는 날이 아니라면 → 추가 (노란색)
✅ 이미 쉬는 날이라면 → 제거 (기본 색상으로 변경)
✅ 변경된 휴일 목록을 파일(YYYY-MM.dat)에 즉시 저장
✅ 사용자가 선택한 달을 변경해도 데이터가 유지됨

🔥 ToggleHoliday 메서드 (MainViewModel.cs 내부)
csharp
코드 복사
private void ToggleHoliday(DateTime date)
{
    // 현재 선택된 연/월 데이터 파일 경로 설정
    string fileName = $"{_dataPath}/{date.Year}-{date.Month:D2}.dat";

    // 날짜가 기존에 포함되어 있으면 제거 (토글)
    if (Holidays.Contains(date))
    {
        Holidays.Remove(date);
    }
    else
    {
        Holidays.Add(date);
    }

    // 변경된 데이터 즉시 저장
    SaveHolidays(fileName);
    OnPropertyChanged(nameof(Holidays));
}
📌 ToggleHoliday의 동작 흐름
사용자가 달력에서 특정 날짜를 클릭
ToggleHoliday(DateTime date) 호출됨
클릭된 날짜가 Holidays 목록에 있으면 제거, 없으면 추가
해당 월(YYYY-MM.dat) 파일을 업데이트하여 변경사항 저장
UI에 반영 (달력에서 해당 날짜가 노란색/기본색 변경됨)
🔥 CalendarControl_SelectedDatesChanged (달력에서 클릭 감지)
💡 이벤트 핸들러가 ToggleHoliday를 호출하여 동작을 연결함

csharp
코드 복사
private void CalendarControl_SelectedDatesChanged(object sender, SelectionChangedEventArgs e)
{
    foreach (var date in e.AddedItems.OfType<DateTime>())
    {
        ViewModel.ToggleHoliday(date);  // 클릭된 날짜를 토글
    }
    HighlightHolidays();
}
📌 최종 동작 예시
✅ 사용자가 2024-06-20을 클릭 → 노란색(쉬는 날 추가됨)
✅ 다시 2024-06-20을 클릭 → 기본색(쉬는 날 해제됨)
✅ 데이터 파일(2024-06.dat)이 즉시 업데이트됨
✅ 다음 실행 시에도 변경 사항 유지됨
