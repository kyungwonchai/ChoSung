press GridControl에서 각 행에 삭제 버튼을 추가하고, 해당 버튼을 클릭하면 그 행을 삭제하도록 하는 방법을 설명하겠습니다. 또한, connectionString 초기화 문제를 해결하기 위해 필요한 코드를 포함합니다.

먼저, XAML 파일에서 GridControl과 Delete 버튼을 포함한 열을 설정합니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew"
                         ItemsSource="{Binding DataTable}"
                         AllowEditing="True">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Column1" Header="Column1"/>
                <dxg:GridColumn FieldName="Column2" Header="Column2"/>
                <!-- 필요한 다른 컬럼들 추가 -->
                <dxg:GridColumn FieldName="Delete" UnboundType="Object" Header="Delete">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Delete" Command="{Binding DataContext.DeleteCommand, RelativeSource={RelativeSource AncestorType=dxg:GridControl}}" CommandParameter="{Binding}">
                            </Button>
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" NewItemRowPosition="Top"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
다음으로, C# 코드에서 데이터 로드 및 삭제 기능을 구현합니다. ViewModel을 사용하여 명령을 바인딩하고, ConnectionString 초기화 문제를 해결합니다:

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Input;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new ViewModel();
        }
    }

    public class ViewModel
    {
        public DataTable DataTable { get; set; }
        private SqlDataAdapter dataAdapter;
        private SqlConnection connection;
        public ICommand DeleteCommand { get; }

        public ViewModel()
        {
            DeleteCommand = new RelayCommand<DataRowView>(DeleteRow);
            LoadData();
        }

        private void LoadData()
        {
            // 데이터베이스 연결 문자열을 설정합니다.
            string connectionString = "your_connection_string_here";

            // SQL 쿼리를 설정합니다.
            string query = "SELECT * FROM YourTable";

            // 연결을 초기화합니다.
            connection = new SqlConnection(connectionString);

            // DataAdapter와 DataTable을 초기화합니다.
            dataAdapter = new SqlDataAdapter(query, connection);
            DataTable = new DataTable();

            // DataAdapter를 사용하여 DataTable을 채웁니다.
            dataAdapter.Fill(DataTable);

            // InsertCommand와 DeleteCommand 설정
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(dataAdapter);
            dataAdapter.InsertCommand = commandBuilder.GetInsertCommand();
            dataAdapter.DeleteCommand = commandBuilder.GetDeleteCommand();
        }

        private void DeleteRow(DataRowView row)
        {
            if (row != null)
            {
                row.Row.Delete();
                dataAdapter.Update(DataTable);
            }
        }
    }

    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T> _execute;
        private readonly Predicate<T> _canExecute;

        public RelayCommand(Action<T> execute, Predicate<T> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute((T)parameter);
        }

        public void Execute(object parameter)
        {
            _execute((T)parameter);
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
위 코드에서는 다음과 같은 작업을 수행합니다:

ViewModel을 사용하여 데이터를 로드하고, 명령을 바인딩합니다.
RelayCommand 클래스를 사용하여 DeleteCommand를 구현하고, 이를 버튼에 바인딩합니다.
DeleteRow 메서드를 통해 선택된 행을 삭제하고, 데이터베이스에 변경 사항을 반영합니다.
이렇게 하면 각 행에 삭제 버튼이 추가되고, 해당 버튼을 클릭하면 해당 행이 삭제됩니다. connectionString 초기화 문제도 해결하여 코드가 제대로 실행되도록 합니