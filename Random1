reamlit으로 npmlog 조회 대시보드 만들기 (for Ubuntu)
아래는 pymssql을 사용하여 SQL Server의 npmlog 테이블 데이터를 조회하고, Streamlit을 이용해 웹 테이블 형태로 표시하는 전체 코드입니다.

Ubuntu 환경에서 실행하기 위한 설치 안내도 포함되어 있습니다.

1. Ubuntu에 필요 라이브러리 설치
터미널을 열고 아래 명령어를 순서대로 실행하세요. pymssql은 FreeTDS 라이브러리에 의존하므로 먼저 설치해야 합니다.

Bash

# FreeTDS 개발 라이브러리 설치
sudo apt-get update
sudo apt-get install freetds-dev -y

# Python 패키지 설치
pip install streamlit pandas pymssql
2. Streamlit 파이썬 코드 (app.py)
아래 코드를 app.py와 같은 파일 이름으로 저장하세요.

⚠️ 중요: 코드 내의 SERVER, USER, PASSWORD, DATABASE 값을 실제 DB 접속 정보로 반드시 수정해야 합니다.

Python

import streamlit as st
import pandas as pd
import pymssql
from datetime import datetime

# -----------------------------------------------------------
# DB 접속 정보 (사용자 환경에 맞게 반드시 수정해주세요)
# -----------------------------------------------------------
DB_CONFIG = {
    'server': 'YOUR_SERVER_IP_OR_HOSTNAME',  # 예: 192.168.0.100 또는 mssql.example.com
    'user': 'YOUR_USERNAME',                # 예: sa
    'password': 'YOUR_PASSWORD',            # 예: 'your_strong_password'
    'database': 'SControlFlaskDB',
    'as_dict': True # 결과를 딕셔너리 형태로 받기
}
# -----------------------------------------------------------

# 페이지 기본 설정
st.set_page_config(
    page_title="npmlog 실시간 조회",
    page_icon="📜",
    layout="wide"
)

# 제목
st.title("📜 npmlog 실시간 로그 조회")

# 데이터 로딩 함수 (캐시 사용으로 성능 향상)
@st.cache_data(ttl=10) # 10초마다 캐시 만료
def load_data():
    """npmlog 테이블에서 데이터를 조회하여 Pandas DataFrame으로 반환합니다."""
    try:
        conn = pymssql.connect(**DB_CONFIG)
        # 최신 로그가 위로 오도록 no1 기준 내림차순 정렬
        query = "SELECT no1, line, onoff, datetime1 FROM npmlog ORDER BY no1 DESC;"
        df = pd.read_sql(query, conn)
        conn.close()
        
        # datetime1 컬럼의 시간 포맷을 보기 좋게 변경 (밀리초 제거)
        if 'datetime1' in df.columns:
            df['datetime1'] = pd.to_datetime(df['datetime1']).dt.strftime('%Y-%m-%d %H:%M:%S')

        return df

    except Exception as e:
        # DB 연결 실패 또는 쿼리 오류 시 에러 메시지 표시
        st.error(f"데이터베이스 연결 또는 조회 중 오류 발생: {e}")
        return pd.DataFrame() # 빈 데이터프레임 반환

# 데이터 로드
df_log = load_data()

# 새로고침 버튼과 마지막 업데이트 시간 표시
col1, col2 = st.columns([1, 5])
with col1:
    if st.button("새로고침 🔄"):
        st.cache_data.clear() # 캐시 지우고 새로 로드
        st.experimental_rerun()

with col2:
    st.markdown(f"""
    <div style="text-align: right; color: grey;">
        마지막 업데이트: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    </div>
    """, unsafe_allow_html=True)

# 데이터프레임 표시
if not df_log.empty:
    st.dataframe(df_log, use_container_width=True, height=600)
    st.info(f"총 {len(df_log)}개의 로그가 조회되었습니다.")
else:
    st.warning("조회할 데이터가 없거나, DB 연결 정보를 확인해주세요.")

3. Streamlit 앱 실행
터미널에서 app.py 파일이 있는 디렉토리로 이동한 후 아래 명령어를 실행하세요.

Bash
