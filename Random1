# Python MDB 리더 v3 (TXT 파일 출력 기능)
# 특정 부품 코드의 모든 관련 정보를 찾아 한 줄로 만들어 TXT 파일로 저장합니다.

import os
import pandas as pd
from pandas_access import read_table, list_tables
import sys

# 터미널 및 파일 출력 시 한글 깨짐 방지
sys.stdout.reconfigure(encoding='utf-8')

def search_and_save_part_details(mdb_file_path, part_code, output_file_path):
    """
    MDB 파일 전체에서 특정 부품 코드를 검색하여, 관련된 모든 정보를
    한 줄로 엮어 지정된 TXT 파일에 저장합니다.
    """
    if not os.path.exists(mdb_file_path):
        print(f"오류: MDB 파일을 찾을 수 없습니다 -> '{mdb_file_path}'")
        return

    # [수정] 하이픈(-)이 있는 부품 코드와 없는 부품 코드 모두를 처리합니다.
    # 예: '1234-5678901' -> '12345678901'
    part_code_normalized = part_code.replace('-', '')
    
    print(f"'{part_code}' (검색 키: '{part_code_normalized}')에 대한 정보 검색을 시작합니다...")
    
    # [수정] 발견된 모든 관련 정보를 저장할 리스트
    all_related_info = []

    try:
        table_names = list_tables(mdb_file_path)

        for table_name in table_names:
            try:
                # 'cp949' 인코딩으로 테이블을 읽어옵니다.
                df = read_table(mdb_file_path, table_name, encoding='cp949')
                if df.empty:
                    continue

                # DataFrame의 각 컬럼을 순회하며 검색
                for column in df.columns:
                    # 데이터 타입을 문자열로 변환하여, 하이픈 없는 코드로 검색합니다.
                    # .str.contains()를 사용하여 부분 일치도 찾을 수 있습니다.
                    matching_rows = df[df[column].astype(str).str.replace('-', '') == part_code_normalized]

                    if not matching_rows.empty:
                        print(f"- 테이블 [{table_name}], 컬럼 [{column}] 에서 정보 발견.")
                        # 일치하는 각 행에 대해 처리
                        for index, row in matching_rows.iterrows():
                            # 행의 모든 값을 문자열로 변환
                            row_values = [str(item) for item in row.values]
                            # 부품 코드 자체는 중복되므로 제외하고, 나머지 정보만 리스트에 추가
                            for value in row_values:
                                normalized_value = value.replace('-', '')
                                if normalized_value != part_code_normalized and value not in all_related_info:
                                    all_related_info.append(value)
            
            except Exception as e:
                # 오류가 발생해도 멈추지 않고 다음 테이블을 계속 검색합니다.
                print(f"테이블 [{table_name}] 처리 중 오류 발생 (무시하고 계속): {e}")
                continue
        
        # [수정] 최종 결과 처리 및 파일 저장
        if not all_related_info:
            print("해당 부품 코드에 대한 관련 정보를 찾을 수 없습니다.")
            return

        # 찾은 모든 정보를 ' | ' 문자로 구분하여 하나의 긴 문자열로 합칩니다.
        single_line_data = " | ".join(all_related_info)
        
        # utf-8 인코딩으로 TXT 파일에 저장합니다.
        with open(output_file_path, 'w', encoding='utf-8') as f:
            f.write(single_line_data)
            
        print("\n--- 작업 완료 ---")
        print(f"'{part_code}'에 대한 모든 정보가 아래 파일에 한 줄로 저장되었습니다:")
        print(f"-> {output_file_path}")
        print("\n저장된 내용:")
        print(single_line_data)

    except Exception as e:
        print(f"전체 작업 중 심각한 오류 발생: {e}")


# --- 메인 실행 부분 ---
if __name__ == "__main__":
    # 1. MDB 파일의 전체 경로를 지정하세요.
    mdb_path = "/home/kw/kv122/mdbtest/md/VISION_BGA_PARAM_Det.mdb"

    # 2. 검색할 11자리 부품 코드를 입력하세요. (하이픈 포함/미포함 모두 가능)
    part_code_to_search = "TMPCLP-157851" # 예시 부품 코드

    # 3. 결과를 저장할 TXT 파일의 경로와 이름을 지정하세요.
    output_txt_path = f"./{part_code_to_search}_details.txt"

    # 4. 함수를 실행합니다.
    search_and_save_part_details(mdb_path, part_code_to_search, output_txt_path)
