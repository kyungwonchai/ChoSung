(WinForms) DevExpress RibbonControl에서 **"버튼 우클릭"**으로 즐겨찾기를 추가/제거하고, 이 정보를 유지하며 리본에서 즐겨찾기 그룹을 업데이트하는 방법을 Tag 기반으로 아래와 같이 완전히 다시 설계합니다.

구현 목표
우클릭 메뉴를 사용하여 리본 버튼에서 즐겨찾기 추가/제거.
버튼 캡션 변경 가능:
즐겨찾기는 **고유 ID(Tag)**를 기준으로 관리하며, 캡션 변경은 즐겨찾기에 영향을 미치지 않음.
JSON 파일에 즐겨찾기 정보 저장:
애플리케이션 재시작 시 즐겨찾기를 유지.
즐겨찾기 그룹 동적 생성:
리본의 별도 그룹에 즐겨찾기 버튼을 표시.
1. FavoriteManager 클래스
Tag 값을 기준으로 즐겨찾기를 관리하며, JSON 파일로 데이터를 저장/로드합니다.

csharp
코드 복사
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public class FavoriteManager
{
    private const string FilePath = @"C:\Users\<사용자>\AppData\Local\MyRibbonApp\favorites.json";

    public List<string> Favorites { get; private set; }

    public FavoriteManager()
    {
        Favorites = LoadFavorites();
    }

    public void AddToFavorites(string buttonId)
    {
        if (!Favorites.Contains(buttonId))
        {
            Favorites.Add(buttonId);
            SaveFavorites();
        }
    }

    public void RemoveFromFavorites(string buttonId)
    {
        if (Favorites.Contains(buttonId))
        {
            Favorites.Remove(buttonId);
            SaveFavorites();
        }
    }

    private List<string> LoadFavorites()
    {
        if (File.Exists(FilePath))
        {
            string json = File.ReadAllText(FilePath);
            return JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }
        return new List<string>();
    }

    private void SaveFavorites()
    {
        Directory.CreateDirectory(Path.GetDirectoryName(FilePath));
        string json = JsonSerializer.Serialize(Favorites);
        File.WriteAllText(FilePath, json);
    }
}
2. MainForm 구현
2.1 리본 및 팝업 메뉴 구성
우클릭 메뉴를 활용하여 즐겨찾기 추가/제거를 구현합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Linq;

public partial class MainForm : RibbonForm
{
    private FavoriteManager _favoriteManager;
    private RibbonPageGroup _favoritesGroup;

    public MainForm()
    {
        InitializeComponent();

        // 즐겨찾기 매니저 초기화
        _favoriteManager = new FavoriteManager();

        // 즐겨찾기 그룹 생성
        CreateFavoritesGroup();

        // 기존 버튼에 우클릭 메뉴 추가
        AddContextMenuToButtons();

        // 즐겨찾기 버튼 로드
        RefreshFavorites();
    }

    private void CreateFavoritesGroup()
    {
        // Favorites 그룹 생성
        _favoritesGroup = new RibbonPageGroup("Favorites");
        ribbonPage1.Groups.Add(_favoritesGroup);
    }

    private void AddContextMenuToButtons()
    {
        foreach (BarItem item in ribbonControl1.Items)
        {
            if (item is BarButtonItem button)
            {
                button.ItemClick += Button_ItemClick; // 기본 클릭 동작
                button.RibbonStyle = RibbonItemStyles.Large; // 큰 버튼 스타일
                
                // 팝업 메뉴 생성
                var popupMenu = new PopupMenu();
                popupMenu.Ribbon = ribbonControl1;

                // 즐겨찾기 추가 메뉴
                var addMenuItem = new BarButtonItem
                {
                    Caption = "Add to Favorites"
                };
                addMenuItem.ItemClick += (s, e) =>
                {
                    _favoriteManager.AddToFavorites(button.Tag.ToString());
                    RefreshFavorites();
                };

                // 즐겨찾기 제거 메뉴
                var removeMenuItem = new BarButtonItem
                {
                    Caption = "Remove from Favorites"
                };
                removeMenuItem.ItemClick += (s, e) =>
                {
                    _favoriteManager.RemoveFromFavorites(button.Tag.ToString());
                    RefreshFavorites();
                };

                // 팝업 메뉴에 항목 추가
                popupMenu.AddItem(addMenuItem);
                popupMenu.AddItem(removeMenuItem);

                // 버튼 우클릭 시 팝업 메뉴 표시
                button.ShowItemShortcut += (s, e) => popupMenu.ShowPopup(Cursor.Position);
            }
        }
    }

    private void RefreshFavorites()
    {
        // Favorites 그룹 초기화
        _favoritesGroup.ItemLinks.Clear();

        foreach (var buttonId in _favoriteManager.Favorites)
        {
            var button = ribbonControl1.Items
                .OfType<BarButtonItem>()
                .FirstOrDefault(b => b.Tag?.ToString() == buttonId);

            if (button != null)
            {
                _favoritesGroup.ItemLinks.Add(button);
            }
        }
    }

    private void Button_ItemClick(object sender, ItemClickEventArgs e)
    {
        BarButtonItem button = e.Item as BarButtonItem;
        if (button != null)
        {
            // 버튼 클릭 기본 동작
            MessageBox.Show($"Clicked: {button.Caption}");
        }
    }
}
2.2 버튼과 Tag 설정
각 버튼에 Tag 값을 설정합니다. Tag는 고유 ID로, 즐겨찾기 추가/제거 및 상태 유지를 위해 사용됩니다.

csharp
코드 복사
private void InitializeComponent()
{
    this.ribbonControl1 = new DevExpress.XtraBars.Ribbon.RibbonControl();
    this.ribbonPage1 = new DevExpress.XtraBars.Ribbon.RibbonPage();
    this.ribbonPageGroup1 = new DevExpress.XtraBars.Ribbon.RibbonPageGroup();

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).BeginInit();
    this.SuspendLayout();

    // ribbonControl1
    this.ribbonControl1.Pages.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPage[] {
        this.ribbonPage1});
    this.ribbonControl1.Location = new System.Drawing.Point(0, 0);
    this.ribbonControl1.Size = new System.Drawing.Size(800, 150);
    this.ribbonControl1.Name = "ribbonControl1";

    // ribbonPage1
    this.ribbonPage1.Groups.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPageGroup[] {
        this.ribbonPageGroup1});
    this.ribbonPage1.Text = "Main";

    // ribbonPageGroup1
    this.ribbonPageGroup1.Text = "Commands";

    // 버튼 생성 및 Tag 설정
    var button1 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Button 1",
        Tag = "btn1" // 고유 ID
    };
    var button2 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Button 2",
        Tag = "btn2" // 고유 ID
    };
    this.ribbonPageGroup1.ItemLinks.Add(button1);
    this.ribbonPageGroup1.ItemLinks.Add(button2);

    // MainForm
    this.ClientSize = new System.Drawing.Size(800, 450);
    this.Controls.Add(this.ribbonControl1);
    this.Name = "MainForm";
    this.Text = "Ribbon Form with Favorites";

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).EndInit();
    this.ResumeLayout(false);
    this.PerformLayout();
}
작동 방식
기본 클릭: 버튼 클릭 시 기본 동작이 실행됩니다.
우클릭 팝업 메뉴:
"Add to Favorites": 해당 버튼을 즐겨찾기에 추가.
"Remove from Favorites": 해당 버튼을 즐겨찾기에서 제거.
즐겨찾기 그룹:
즐겨찾기 버튼은 리본의 "Favorites" 그룹에 자동 추가.
JSON 저장/로드:
애플리케이션 종료 시 즐겨찾기 정보는 JSON 파일에 저장.
재시작 시 JSON 파일에서 로드하여 즐겨찾기 그룹을 복원.
결과
우클릭으로 즐겨찾기 추가/제거: 버튼 우클릭 메뉴에서 바로 즐겨찾기를 관리.
Tag 기반 동작: 캡션이 변경되어도 기능에는 영향이 없음.
즐겨찾기 상태 유지: JSON 파일을 사용하여 재시작 후에도 즐겨찾기 유지.