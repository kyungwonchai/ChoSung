로줄을 연녹색으로 설정하려면, 커스텀 drawable 파일을 만들어 RecyclerView의 DividerItemDecoration에 적용해야 합니다. 아래는 이를 구현하는 방법입니다.

1. 커스텀 Divider Drawable 파일 생성
res/drawable/divider.xml 파일을 생성하고, 연녹색의 선을 정의합니다.

xml
코드 복사
<!-- res/drawable/divider.xml -->
<shape xmlns:android="http://schemas.android.com/apk/res/android" android:height="2dp">
    <solid android:color="#90EE90"/> <!-- 연녹색 (라이트 그린) -->
</shape>
android:height는 선의 두께를 나타냅니다. 여기서는 2dp로 설정했습니다. 필요에 따라 조정할 수 있습니다.
android:color 속성에 연녹색(LightGreen) 색상을 설정했습니다. (#90EE90은 연녹색의 16진수 코드입니다.)
2. DataActivity.kt 수정
이제 RecyclerView에 이 커스텀 drawable을 적용하도록 DataActivity.kt를 수정합니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataActivity.kt
package com.dxmxsmd.routeracralarm

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager

/**
 * 데이터 활동 클래스
 * MSSQL 데이터베이스에서 최근 20개의 데이터를 가져와 RecyclerView에 표시
 */
class DataActivity : ComponentActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // RecyclerView 초기화
        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        // 커스텀 DividerItemDecoration 추가 (연녹색 가로줄)
        val dividerItemDecoration = DividerItemDecoration(
            recyclerView.context,
            (recyclerView.layoutManager as LinearLayoutManager).orientation
        )
        // 커스텀 drawable을 DividerItemDecoration에 설정
        val dividerDrawable = ContextCompat.getDrawable(this, R.drawable.divider)
        if (dividerDrawable != null) {
            dividerItemDecoration.setDrawable(dividerDrawable)
        }
        recyclerView.addItemDecoration(dividerItemDecoration)

        // 데이터 가져오기
        lifecycleScope.launch {
            val data = fetchDataFromDatabase()
            adapter = DataAdapter(data)
            recyclerView.adapter = adapter
        }
    }

    /**
     * 데이터베이스에서 데이터를 가져오는 함수
     *
     * @return TableData 리스트
     */
    private suspend fun fetchDataFromDatabase(): List<TableData> {
        return withContext(Dispatchers.IO) {
            val dataList = mutableListOf<TableData>()
            try {
                // JDBC URL 구성 (jTDS 드라이버 사용)
                val url = "jdbc:jtds:sqlserver://your-database-server:1433/your-database;useSSL=false"
                val username = "your-username"
                val password = "your-password"

                // 데이터베이스 연결
                Class.forName("net.sourceforge.jtds.jdbc.Driver")
                val connection: Connection = DriverManager.getConnection(url, username, password)
                val statement = connection.createStatement()

                // 쿼리 실행
                val resultSet = statement.executeQuery("SELECT TOP 20 * FROM table2")

                // 결과 처리
                while (resultSet.next()) {
                    val column1 = resultSet.getString("column1")
                    val column2 = resultSet.getString("column2")
                    dataList.add(TableData(column1, column2))
                }

                resultSet.close()
                statement.close()
                connection.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
            dataList
        }
    }
}
설명
커스텀 Divider 적용:

ContextCompat.getDrawable(this, R.drawable.divider)를 사용하여 커스텀 drawable을 가져오고, 이를 DividerItemDecoration에 설정했습니다.
가져온 drawable이 null이 아닌 경우에만 설정합니다.
DividerItemDecoration:

커스텀 divider.xml 파일을 사용하여 RecyclerView의 각 항목 사이에 연녹색 가로줄이 추가됩니다.