inForms 코드의 예입니다. 이 코드는 Windows 환경에서 작동합니다.

csharp

using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;
using OpenCvSharp;
using OpenCvSharp.Extensions;

public class Program
{
    [DllImport("user32.dll")]
    public static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

    [DllImport("user32.dll")]
    public static extern IntPtr FindWindowEx(IntPtr hwndParent, IntPtr hwndChildAfter, string lpszClass, string lpszWindow);

    [DllImport("user32.dll")]
    public static extern bool GetWindowRect(IntPtr hWnd, out Rectangle lpRect);

    [DllImport("user32.dll")]
    public static extern bool SetForegroundWindow(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern IntPtr GetDC(IntPtr hWnd);

    [DllImport("user32.dll")]
    public static extern int ReleaseDC(IntPtr hWnd, IntPtr hDC);

    [DllImport("gdi32.dll")]
    public static extern uint GetPixel(IntPtr hdc, int nXPos, int nYPos);

    public static void Main()
    {
        // 팝업 윈도우 제목
        string windowTitle = "팝업 윈도우 제목";

        // OpenCV를 사용하여 팝업 윈도우 캡처
        using (var mat = CaptureWindow(windowTitle))
        {
            if (mat == null)
            {
                Console.WriteLine("윈도우를 찾을 수 없거나 캡처할 수 없습니다.");
                return;
            }

            // 캡처된 이미지를 Bitmap으로 변환
            var bitmap = mat.ToBitmap();

            // 윈도우 찾기 및 닫기 버튼 클릭
            FindAndClickCloseButton(bitmap);

            // 이미지 및 비트맵 리소스 해제
            mat.Dispose();
            bitmap.Dispose();
        }
    }

    public static Mat CaptureWindow(string windowTitle)
    {
        // 윈도우 핸들 찾기
        IntPtr hWnd = FindWindow(null, windowTitle);
        if (hWnd == IntPtr.Zero)
            return null;

        // 윈도우 위치 및 크기 가져오기
        GetWindowRect(hWnd, out Rectangle windowRect);

        // 윈도우의 너비와 높이 계산
        int width = windowRect.Width - windowRect.X;
        int height = windowRect.Height - windowRect.Y;

        // 윈도우의 너비와 높이가 0 이하인 경우 반환
        if (width <= 0 || height <= 0)
            return null;

        // 윈도우 디바이스 컨텍스트 가져오기
        IntPtr hdcSrc = GetDC(hWnd);

        // OpenCV로 윈도우 캡처
        using (var source = new Mat(height, width, MatType.CV_8UC4))
        {
            using (var bmp = new Bitmap(width, height, width * 4, System.Drawing.Imaging.PixelFormat.Format32bppArgb, hdcSrc))
            {
                var data = bmp.LockBits(new Rectangle(Point.Empty, bmp.Size), System.Drawing.Imaging.ImageLockMode.ReadOnly, bmp.PixelFormat);
                source.SetArray(0, 0, data.Scan0, data.Stride * data.Height);

User
이어서
ChatGPT

java

            // 캡처된 이미지 리소스 해제
            bmp.UnlockBits(data);

            // 윈도우 디바이스 컨텍스트 해제
            ReleaseDC(hWnd, hdcSrc);

            // 이미지 반환
            return source.Clone();
        }
    }
}

public static void FindAndClickCloseButton(Bitmap bitmap)
{
    // Bitmap을 OpenCV Mat으로 변환
    Mat mat = BitmapConverter.ToMat(bitmap);

    // 창틀 상단 색상 조건 검사
    bool isTopColorValid = true;
    for (int x = 0; x < mat.Width; x++)
    {
        Scalar color = mat.At<Vec3b>(0, x);
        if (color.Item0 > 75 || color.Item1 > 75 || color.Item2 > 75)
        {
            isTopColorValid = false;
            break;
        }
    }

    // 주변색상 및 창틀 어두운 정도 조건 검사
    bool isSurroundingColorValid = true;
    for (int y = 0; y < mat.Height; y++)
    {
        Scalar colorLeft = mat.At<Vec3b>(y, 0);
        Scalar colorRight = mat.At<Vec3b>(y, mat.Width - 1);
        if (colorLeft.Item0 <= 100 || colorLeft.Item1 <= 100 || colorLeft.Item2 <= 100 ||
            colorRight.Item0 <= 100 || colorRight.Item1 <= 100 || colorRight.Item2 <= 100)
        {
            isSurroundingColorValid = false;
            break;
        }
    }

    // Y 높이 조건 검사
    bool isYHeightValid = mat.Height >= 150 && mat.Height <= 300;

    // 조건 검사 결과 확인
    if (isTopColorValid && isSurroundingColorValid && isYHeightValid)
    {
        // 창 닫기 버튼 클릭
        IntPtr hWnd = FindWindow(null, "팝업 윈도우 제목");
        IntPtr closeButtonHWnd = FindWindowEx(hWnd, IntPtr.Zero, "CloseButton", null);
        if (closeButtonHWnd != IntPtr.Zero)
        {
            SetForegroundWindow(hWnd);
            Thread.Sleep(500); // 윈도우가 활성화되기를 기다림

            // 마우스 클릭 위치 계산
            GetWindowRect(closeButtonHWnd, out Rectangle closeButtonRect);
            int clickX = closeButtonRect.X + (closeButtonRect.Width / 2);
            int clickY = closeButtonRect.Y + (closeButtonRect.Height / 2);

            // 마우스 클릭 시뮬레이션
            Cursor.Position = new Point(clickX, clickY);
            MouseClick();
        }
    }
}

public static void MouseClick()
{
    mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0);
    Thread.Sleep(100);
    mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0);
}

private const int MOUSEEVENTF_LEFTDOWN = 0x02;
private const int MOUSEEVENTF_LEFTUP = 0x04;
[DllImport("user32.dll")]
public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo)

}


위의 코드는 주어진 팝업
