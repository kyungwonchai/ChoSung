DB 조회는 GetInfo 계열 함수에서 직접 처리
✅ DatabaseReader에서 직접 비동기로 정보를 가져와 DataRow 반환
✅ 책임 분리: 데이터 조회와 매크로 실행을 독립적으로 유지
✅ 예제: GetInfo_QR() 함수가 QR 관련 정보를 비동기로 조회하여 반환
✅ 조회된 정보를 매크로 실행에 활용

📂 1. 프로젝트 구조
pgsql
코드 복사
📦 AutoHandleSolution
 ┣ 📂 AAutoHandle
 ┃ ┣ 📂 Commands
 ┃ ┣ 📂 Core
 ┃ ┣ 📂 Database
 ┃ ┃ ┣ 📜 MySqlHelper.cs
 ┃ ┃ ┣ 📜 MsSqlHelper.cs
 ┃ ┃ ┣ 📜 DatabaseReader.cs
 ┃ ┃ ┗ 📜 GetInfoManager.cs  ★ 데이터 조회 전담
 ┃ ┣ 📂 MacroActions
 ┃ ┃ ┣ 📜 MacroActionA.cs
 ┃ ┃ ┣ 📜 MacroActionB.cs
 ┃ ┃ ┗ 📜 MacroActionC.cs
 ┃ ┣ 📂 Forms
 ┃ ┃ ┗ 📜 MainForm.cs
 ┃ ┣ 📜 Program.cs
 ┃ ┗ 📜 AAutoHandle.csproj
 ┗ 📜 AutoHandleSolution.sln
✅ 조회 로직을 GetInfoManager.cs에서 독립적으로 관리
✅ MacroActionA에서 필요할 때 GetInfoManager를 호출하여 데이터 조회

📜 2. GetInfoManager.cs (DB 조회 담당)
csharp
코드 복사
namespace AAutoHandle.Database
{
    using System;
    using System.Data;
    using System.Threading.Tasks;
    using MySql.Data.MySqlClient;
    using System.Data.SqlClient;

    public class GetInfoManager
    {
        private readonly string _mysqlConnString;
        private readonly string _mssqlConnString;

        public GetInfoManager(string mysqlConn, string mssqlConn)
        {
            _mysqlConnString = mysqlConn;
            _mssqlConnString = mssqlConn;
        }

        public async Task<DataRow> GetInfo_QR(string qrCode)
        {
            using (var connection = new MySqlConnection(_mysqlConnString))
            {
                await connection.OpenAsync();
                using (var command = new MySqlCommand("sp_GetInfo_QR", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.AddWithValue("@qr_code", qrCode);

                    using (var adapter = new MySqlDataAdapter(command))
                    {
                        var table = new DataTable();
                        adapter.Fill(table);

                        if (table.Rows.Count > 0)
                            return table.Rows[0]; // 첫 번째 결과 반환
                        else
                            return null; // 결과 없음
                    }
                }
            }
        }
    }
}
✅ QR 관련 정보를 sp_GetInfo_QR 프로시저로 조회
✅ 조회 결과가 있으면 DataRow 반환, 없으면 null 반환

📜 3. MacroActionA.cs (QR 정보를 받아 매크로 실행)
csharp
코드 복사
namespace AAutoHandle.MacroActions
{
    using System;
    using System.Data;
    using System.Threading.Tasks;
    using AAutoHandle.Core;
    using AAutoHandle.Commands;
    using AAutoHandle.Database;

    public class MacroActionA
    {
        private readonly GetInfoManager _infoManager;

        public MacroActionA(string mysqlConn, string mssqlConn)
        {
            _infoManager = new GetInfoManager(mysqlConn, mssqlConn);
        }

        public async Task ExecuteAsync(string qrCode)
        {
            var macroManager = MacroManager.Instance;

            // **QR 코드 기반으로 정보 조회**
            DataRow qrInfo = await _infoManager.GetInfo_QR(qrCode);

            if (qrInfo != null)
            {
                int x = Convert.ToInt32(qrInfo["x"]);
                int y = Convert.ToInt32(qrInfo["y"]);
                string capturePath = qrInfo["capturePath"].ToString();

                macroManager.AddCommand(new MouseClickCommand(x, y));
                macroManager.AddCommand(new DelayCommand(500));
                macroManager.AddCommand(new ScreenCaptureCommand(capturePath));

                await macroManager.StartExecutionAsync();
            }
            else
            {
                MacroLogger.Instance.AddLog($"QR 코드 '{qrCode}'에 대한 정보 없음.");
            }
        }
    }
}
✅ QR 코드 기반으로 GetInfo_QR을 통해 정보 조회
✅ 조회된 정보를 기반으로 매크로 실행 (MouseClickCommand, ScreenCaptureCommand)

📜 4. MainForm.cs (UI에서 실행)
csharp
코드 복사
using System;
using System.Windows.Forms;
using AAutoHandle.MacroActions;

namespace AAutoHandle
{
    public partial class MainForm : Form
    {
        private MacroActionA _macroActionA;

        public MainForm()
        {
            InitializeComponent();

            string mysqlConn = "Server=localhost;Database=mydb;User=root;Password=1234;";
            string mssqlConn = "Server=myserver;Database=mydb;User Id=myuser;Password=mypassword;";

            _macroActionA = new MacroActionA(mysqlConn, mssqlConn);
        }

        private async void btnStartMacro_Click(object sender, EventArgs e)
        {
            string qrCode = "QRCODE123"; // 테스트 QR 코드
            await _macroActionA.ExecuteAsync(qrCode);
        }
    }
}
✅ 버튼 클릭 시 특정 QR 코드 정보 조회 & 매크로 실행
✅ QR 코드 변경 시 해당 정보 기반으로 자동 실행 가능

📜 5. MySQL 프로시저 예시 (sp_GetInfo_QR)
sql
코드 복사
DELIMITER //
CREATE PROCEDURE sp_GetInfo_QR(IN qr_code VARCHAR(255))
BEGIN
    SELECT x, y, capturePath FROM qr_table WHERE qr_value = qr_code;
END //
DELIMITER ;
✅ QR 코드 값으로 위치 정보 (x, y), 캡처 경로 조회
✅ 조회된 데이터가 매크로 실행에 사용됨

📜 6. 실행 흐름
✅ btnStartMacro_Click() 실행
MacroActionA.ExecuteAsync(qrCode) 실행
QR 코드 정보 (qrCode = "QRCODE123")를 GetInfo_QR에서 조회
조회된 데이터를 기반으로 매크로 실행
마우스 클릭 (MouseClickCommand)
0.5초 대기 (DelayCommand)
화면 캡처 (ScreenCaptureCommand)
ListBox에 실행 결과 추가
📜 7. 확장 가능성
✅ GetInfo_XXX() 방식으로 다양한 정보 조회 가능
✅ DB 조회 후 특정 동작 실행 (키 입력, 마우스 클릭 등) 가능
✅ QR 코드 외에도 바코드, RFID 등의 데이터 기반 매크로 실행 확장 가능

📌 결론
🔹 데이터베이스 조회와 매크로 실행을 독립적으로 분리 (GetInfoManager)
🔹 QR 코드 기반으로 필요한 정보를 가져와 매크로 실행 (MacroActionA)
🔹 새로운 데이터 유형 추가 시 GetInfo_XXX()만 추가하면 확장 가능
🔹 닷넷 4.8 완벽 지원, MySQL & MSSQL 연동, 비동기 매크로 실행 가능