 WPF에서 ObservableCollection에 CmdType이라는 클래스형 구조체를 추가하고, CmdType의 속성 중 Cmd에 rdcc가 포함되고 Status1 값이 "Pending"인 항목이 3개 이상일 때 더 이상 추가하지 않도록 구현하는 방법을 설명하겠습니다.

Step 1: CmdType 클래스 정의
먼저, CmdType 클래스는 명령과 상태 값을 포함하는 간단한 구조입니다. 이 클래스에 Cmd와 Status1이라는 속성을 정의하겠습니다.

csharp
코드 복사
public class CmdType
{
    public string Cmd { get; set; } // 명령을 저장
    public string Status1 { get; set; } // 상태값을 저장 ("Pending", "Completed" 등)
}
Step 2: ObservableCollection 정의 및 초기화
ObservableCollection<CmdType>을 사용하여 데이터를 관리합니다. ObservableCollection은 UI와 자동으로 바인딩되어 변경 사항을 실시간으로 반영할 수 있는 데이터 구조입니다.

csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel
{
    public ObservableCollection<CmdType> Queue1 { get; set; }

    public MainViewModel()
    {
        Queue1 = new ObservableCollection<CmdType>();
    }
}
Step 3: CmdType 추가 조건 구현
Queue1에 CmdType을 추가할 때, 먼저 Queue1에 이미 Cmd에 "rdcc"가 포함되고 Status1이 "Pending"인 항목이 3개 이상 있는지 확인합니다. 조건을 만족하는 경우 더 이상 "rdcc" 명령을 추가하지 않도록 제한하는 로직을 구현합니다.

csharp
코드 복사
public class MainViewModel
{
    public ObservableCollection<CmdType> Queue1 { get; set; }

    public MainViewModel()
    {
        Queue1 = new ObservableCollection<CmdType>();
    }

    // CmdType 추가하는 함수
    public void AddCmdType(CmdType newCmdType)
    {
        // rdcc가 포함되고 status1이 pending인 항목의 개수를 카운트
        int rdccPendingCount = 0;
        foreach (var cmd in Queue1)
        {
            if (cmd.Cmd.Contains("rdcc") && cmd.Status1 == "Pending")
            {
                rdccPendingCount++;
            }
        }

        // rdcc pending 개수가 3개 미만일 때만 추가
        if (rdccPendingCount < 3)
        {
            Queue1.Add(newCmdType);
        }
        else
        {
            // 3개 이상이면 추가하지 않고, 필요한 경우 알림을 보냄
            // 예: 로깅 메시지 출력 또는 UI 경고 메시지 등
            Console.WriteLine("Cannot add more 'rdcc' commands with status 'Pending'.");
        }
    }
}
Step 4: 사용 예제
이제 AddCmdType 메소드를 사용하여 CmdType을 추가할 수 있습니다. 예를 들어, "rdcc" 명령이 있는 새로운 CmdType 객체를 추가하려면 아래와 같이 호출할 수 있습니다.

csharp
코드 복사
public class Program
{
    public static void Main(string[] args)
    {
        MainViewModel viewModel = new MainViewModel();

        // 새로운 CmdType 생성
        CmdType cmd1 = new CmdType { Cmd = "rdcc", Status1 = "Pending" };
        CmdType cmd2 = new CmdType { Cmd = "other", Status1 = "Completed" };
        CmdType cmd3 = new CmdType { Cmd = "rdcc", Status1 = "Pending" };

        // Queue에 추가
        viewModel.AddCmdType(cmd1); // 추가됨
        viewModel.AddCmdType(cmd2); // 다른 명령이므로 추가됨
        viewModel.AddCmdType(cmd3); // 추가됨

        // rdcc가 3개 이상이 되면 더 이상 추가되지 않음
        CmdType cmd4 = new CmdType { Cmd = "rdcc", Status1 = "Pending" };
        viewModel.AddCmdType(cmd4); // 추가되지 않음
    }
}
상세 설명
CmdType 클래스: 이 클래스는 두 가지 속성 Cmd(명령어)와 Status1(상태값)을 포함하고 있습니다.

ObservableCollection<CmdType>: ObservableCollection은 데이터가 변경될 때 자동으로 UI에 업데이트가 반영됩니다. 여기서 Queue1은 CmdType 객체들의 리스트로 사용됩니다.

AddCmdType 메서드: Queue1에 새 항목을 추가하기 전에, 이미 Cmd 속성에 "rdcc"가 포함되고 Status1이 "Pending"인 항목이 몇 개인지 확인합니다. 이 개수가 3개 이상이면 새 항목을 추가하지 않습니다.

foreach 루프: Queue1의 모든 항목을 검사하면서 Cmd 속성에 "rdcc"가 포함되고, Status1이 "Pending"인 항목을 카운트합니다.

조건 검사 및 추가 제한: rdccPendingCount가 3개 미만일 때만 새 명령을 추가하고, 그렇지 않으면 명령이 추가되지 않습니다.

이 코드를 사용하면, Cmd에 "rdcc"가 포함된 명령이 3개 이상 "Pending" 상태로 있을 때 더 이상 명령이 추가되지 않도록 관리할 