PF에서는 이벤트를 정의할 때 기본적으로 EventHandler를 사용하는 것이 일반적입니다. 그러나 특정 시나리오에 따라 Action 또는 EventHandler 중 어떤 것을 사용하는지 선택할 수 있습니다. 이를 이해하려면 두 개념의 차이를 알아야 합니다.

1. EventHandler
표준 이벤트 패턴으로, 이벤트를 정의하고 사용할 때 EventHandler 또는 제네릭 타입인 EventHandler<T>를 사용합니다.
이벤트를 구독하고 해제하기가 용이하며, 이벤트 구독자가 메모리에서 해제되지 않으면 메모리 누수가 발생할 수 있습니다.
추천 상황: 이벤트가 데이터를 전달하거나 표준 방식으로 처리되길 원할 때.
EventHandler 사용 예제
csharp
코드 복사
public class MainViewModel
{
    // 표준 이벤트 정의
    public event EventHandler OnCustomEvent;

    // 이벤트 호출
    public void TriggerEvent()
    {
        OnCustomEvent?.Invoke(this, EventArgs.Empty); // sender와 EventArgs 전달
    }
}
2. Action
Action은 .NET의 대표적인 델리게이트(delegate) 타입입니다.
단순히 실행할 코드를 전달할 때 사용되며, 이벤트처럼 데이터를 주고받는 역할을 수행하지 않습니다.
추천 상황: 단순한 실행 흐름만 필요하고, EventArgs를 사용하지 않아도 될 때.
Action 사용 예제
csharp
코드 복사
public class MainViewModel
{
    // Action 델리게이트로 이벤트 정의
    public Action OnCustomAction;

    // 이벤트 호출
    public void TriggerAction()
    {
        OnCustomAction?.Invoke(); // 매개변수 없음
    }
}
비교: EventHandler vs Action
특징	EventHandler	Action
기본 용도	표준 이벤트 처리 패턴	단순 실행 흐름
매개변수 전달 가능 여부	EventArgs로 데이터를 전달 가능	매개변수를 추가해야 전달 가능
구독/해제 지원 여부	구독 및 해제 지원 (+=, -=)	일반 메서드 참조처럼 사용 (+=, -=)
사용 추천 상황	데이터를 포함한 이벤트를 처리해야 할 때	단순 실행 흐름만 필요한 경우
결론
**EventHandler**는 WPF와 같은 이벤트 중심 애플리케이션에서 기본적으로 사용되며, 표준적이고 확장성이 높습니다.
**Action**은 간단한 이벤트 흐름(데이터 전달 불필요)에서 더 간결하고 직관적으로 사용할 수 있습니다.
사용 추천:

이벤트 기반 프로그래밍(WPF UI 이벤트 처리 등): EventHandler 사용.
단순 함수 호출 또는 데이터 필요 없는 간단한 시나리오: Action 사용.
상황별 수정
EventHandler로 작성된 예제
csharp
코드 복사
public class MainViewModel
{
    public event EventHandler OnCustomEvent;

    public void TriggerEvent()
    {
        OnCustomEvent?.Invoke(this, EventArgs.Empty);
    }
}
Action으로 작성된 예제
csharp
코드 복사
public class MainViewModel
{
    public Action OnCustomAction;

    public void TriggerAction()
    {
        OnCustomAction?.Invoke();
    }