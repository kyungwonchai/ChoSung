래는 PRealAandB 데이터를 DB에서 불러와 예측 및 실제 값을 비교하는 수정된 2번째 코드입니다.

2. 예측 및 시각화 코드 (DB에서 실제값 불러오기 포함)
python
코드 복사
# 필요한 라이브러리 임포트
import joblib
import pymssql
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# 데이터베이스에서 실제값(PRealAandB)을 불러오는 함수
def fetch_actual_from_db(proc_name):
    """
    MSSQL 저장 프로시저를 호출하여 실제값 데이터를 가져옵니다.
    :param proc_name: 저장 프로시저 이름
    :return: 실제값 데이터 (numpy 배열)
    """
    server = "localhost"  # DB 서버 주소
    user = "your_username"  # 사용자 이름
    password = "your_password"  # 비밀번호
    database = "your_database"  # 데이터베이스 이름

    try:
        conn = pymssql.connect(server=server, user=user, password=password, database=database)
        query = f"EXEC {proc_name}"  # 저장 프로시저 실행
        df = pd.read_sql(query, conn)  # 데이터프레임으로 변환
        return df.values  # numpy 배열로 변환
    except Exception as e:
        print(f"Error fetching data: {e}")
        return np.array([])

# 저장된 모델 로드
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# 예측 데이터 (pnowab)
# 예제 데이터: 실제 상황에 맞게 변경 필요
pnowab = np.array([[1.5, 3.3, 5.5, 7.2]])  # 1개 행으로 예측할 데이터
print(f"Input data (pnowab): {pnowab}")

# 예측 수행
predicted = model.predict(pnowab).flatten()
print(f"Predicted values: {predicted}")

# 실제값 불러오기 (DB에서 PRealAandB)
actual_data = fetch_actual_from_db("PRealAandB")  # PRealAandB 저장 프로시저 호출
if actual_data.size == 0:
    print("Error: No actual data fetched from PRealAandB.")
    exit()

# 실제값 확인
actual = actual_data[0]  # PRealAandB에서 첫 번째 행을 실제값으로 사용
print(f"Actual values: {actual}")

# 시각화: 예측값 vs 실제값
features = ['ap', 'bp', 'cp', 'dp']

# 예측값 선 연결
plt.figure(figsize=(10, 6))
plt.plot(features, predicted, label='Predicted', linestyle='--', marker='o')

# 실제값 점 표시
plt.scatter(features, actual, color='red', label='Actual', zorder=5)

# 오차 표시
for i, (pred, act) in enumerate(zip(predicted, actual)):
    plt.plot([features[i], features[i]], [pred, act], 'k--', alpha=0.7)

# 레이블 및 제목
plt.title("Prediction vs Actual")
plt.xlabel("Features")
plt.ylabel("Values")
plt.legend()
plt.grid()
plt.show()

# 오차 점수 시각화
errors = np.abs(predicted - actual)  # 오차 계산
error_scores = 100 - (errors / np.max(errors) * 100)  # 100점 만점 기준

plt.figure(figsize=(10, 6))
plt.bar(features, error_scores, color='blue', alpha=0.7)
plt.axhline(100, color='green', linestyle='--', label='Max Score (100)')
plt.title("Error Score (100-point scale)")
plt.xlabel("Features")
plt.ylabel("Score")
plt.legend()
plt.ylim(0, 100)
plt.grid()
plt.show()

# 오차 점수 출력
print(f"Error Scores (100-point scale): {error_scores}")
수정된 코드 요약
DB에서 실제값 불러오기:

MSSQL 저장 프로시저 PRealAandB를 호출하여 실제값 데이터를 가져옵니다.
데이터는 numpy 배열 형태로 반환되며, 첫 번째 행을 실제값으로 사용합니다.
예측 수행:

저장된 모델(best_model.pkl)을 불러와 pnowab 값을 입력하여 예측값을 생성합니다.
시각화:

예측값 vs 실제값 비교: 선(예측값)과 점(실제값)을 비교하고, 차이를 선으로 연결합니다.
오차 점수 막대 그래프: 100점 만점 기준으로 오차 점수를 계산하여 막대 그래프로 표시합니다.
에러 처리:

실제값 데이터가 비어 있거나, 모델 로드가 실패한 경우 에러 메시지를 출력하고 실행을 종료합니다.
결과
예측값 vs 실제값 비교 차트:

ap, bp, cp, dp 특징별로 예측값과 실제값의 차이를 선으로 연결.
오차 점수 차트:

각 특징(feature)에 대한 정확도를 100점 만점으로 계산하여 막대 그래프로 표시.
필요한 환경
MSSQL 저장 프로시저:

PRealAandB가 실제값을 반환해야 합니다.
데이터 형식은 모델 학습 데이터와 동일해야 합니다.
모델 파일:
