# app.py
import os
import threading
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_socketio import SocketIO
from dotenv import load_dotenv

load_dotenv() # .env 파일에서 환경 변수를 로드합니다.

# --- 전역 상태 및 로깅 ---
IS_RASPBERRY_PI = os.uname().machine.startswith(('arm', 'aarch64')) if hasattr(os, 'uname') else False
EXPECTED_PI_API_KEY = os.getenv("PI_API_KEY")

# .env 파일에 PI_API_KEY가 설정되었는지 확인
if not EXPECTED_PI_API_KEY:
    print("?? [FATAL ERROR] PI_API_KEY가 .env 파일에 설정되지 않았습니다. 서버를 시작할 수 없습니다.")
    exit()

def log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

# --- LED 인덱스 <-> 슬롯 ID 변환 ---
def ledIndexToSlotId(index):
    if not (0 <= index < 792): return None
    SLOTS_PER_LEVEL, LEVELS_PER_RACK, RACKS_IN_A = 12, 3, 8
    SLOTS_PER_RACK = SLOTS_PER_LEVEL * LEVELS_PER_RACK
    
    rack_index_abs = index // SLOTS_PER_RACK
    slot_in_rack = index % SLOTS_PER_RACK
    
    section = 'A' if rack_index_abs < RACKS_IN_A else 'B'
    rack_num = (rack_index_abs + 1) if section == 'A' else (rack_index_abs - RACKS_IN_A + 1)
    
    level_index = slot_in_rack // SLOTS_PER_LEVEL
    slot_num_in_level = (slot_in_rack % SLOTS_PER_LEVEL) + 1
    
    level = {0: 'A', 1: 'B', 2: 'C'}[level_index]
    
    rack_id = f"{section}{str(rack_num).zfill(2)}"
    slot_id_num = str(slot_num_in_level).zfill(2)
    return f"{rack_id}-{level}-{slot_id_num}"

# --- LED 제어 로직 ---
if IS_RASPBERRY_PI:
    from rpi_ws281x import PixelStrip, Color
    class LedController:
        def __init__(self):
            self.LED_COUNT, self.LED_PIN, self.LED_BRIGHTNESS = 792, 18, 128
            self.strip = PixelStrip(self.LED_COUNT, self.LED_PIN, 800000, 10, False, self.LED_BRIGHTNESS)
            self.strip.begin()
            log("? 실제 LED 컨트롤러 초기화 완료 (Raspberry Pi).")
            self.turn_off_all()

        def light_up(self, index, duration):
            if not (0 <= index < self.LED_COUNT):
                log(f"?? [ERROR] LED 인덱스 {index}가 범위를 벗어남.")
                return
            self.turn_off_all()
            self.strip.setPixelColor(index, Color(255, 180, 0))
            self.strip.show()
            threading.Timer(duration, self.turn_off_all).start()

        def turn_off_all(self):
            for i in range(self.strip.numPixels()):
                self.strip.setPixelColor(i, Color(0, 0, 0))
            self.strip.show()
else: # 에뮬레이션 모드
    class LedController: # MockLedController in non-Pi
        def __init__(self): log("?? 에뮬레이션 모드로 LED 컨트롤러 초기화 (Not a Raspberry Pi).")
        def light_up(self, index, duration):
            log(f"?? [EMULATE] LED {index} 점등 ({duration}초).")
            threading.Timer(duration, lambda: log(f"? [EMULATE] LED {index} 자동 소등.")).start()
        def turn_off_all(self): log("? [EMULATE] 모든 LED 소등.")

# --- Flask 웹 서버 및 WebSocket 설정 ---
app = Flask(__name__, static_folder='.', static_url_path='')
socketio = SocketIO(app, async_mode='threading')
led_controller = LedController()

# --- API 엔드포인트 ---
@app.route('/api/v1/light-up', methods=['POST'])
def handle_light_up_request():
    data = request.get_json()
    if not data: return jsonify({"error": "Bad Request"}), 400

    # The key sent from the gateway must match the key this server expects.
    if data.get('apiKey') != EXPECTED_PI_API_KEY:
        log("?? [AUTH] 인증 실패! Ubuntu 게이트웨이에서 전달된 API 키가 유효하지 않습니다.")
        log("   - 확인 사항 1: Ubuntu 서버의 .env 파일에 'PI_API_KEY'가 올바르게 설정되었는지 확인하세요.")
        log("   - 확인 사항 2: 이 Raspberry Pi의 .env 파일에 설정된 'PI_API_KEY'와 동일한 값인지 확인하세요.")
        return jsonify({"error": "Unauthorized: API Key mismatch between Gateway and Pi"}), 401

    led_index = data.get('ledIndex')
    if led_index is None or not isinstance(led_index, int) or led_index < 0:
        return jsonify({"error": "Invalid 'ledIndex'"}), 400

    log(f"? 인증 성공. LED {led_index} 점등 명령 실행.")
    led_controller.light_up(index=led_index, duration=11)
    
    slot_id = ledIndexToSlotId(led_index)
    if slot_id:
        socketio.emit('led_update', {'slotId': slot_id})
        log(f"?? WebSocket으로 UI 업데이트 전송: {slot_id}")

    return jsonify({"status": "success"}), 200

# --- 웹 UI 제공 라우트 ---
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

# WebSocket 연결 이벤트 핸들러
@socketio.on('connect')
def handle_connect():
    log(f"???  웹 브라우저 연결됨: {request.sid}")
