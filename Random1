겠습니다. DataSync 클래스와 EsdCheckSync 클래스가 모두 동작하도록 하고, 로그는 두 개의 ListBox에 분리해서 표시되도록 하겠습니다. MainWindow.xaml 및 MainWindow.xaml.cs 파일만 수정하면 됩니다.

MainWindow.xaml 수정:
xaml
코드 복사
<Window x:Class="DataSyncApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Data Sync Application" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="General Log" FontWeight="Bold" Margin="0,0,0,10" />
            <ListBox x:Name="logListBox1" Height="350" Margin="0,0,0,10" />
            <Button Content="Load Data" HorizontalAlignment="Left" VerticalAlignment="Top" Click="LoadDataButton_Click" />
        </StackPanel>
        
        <StackPanel Grid.Column="1" Margin="10">
            <TextBlock Text="ESD Check Log" FontWeight="Bold" Margin="0,0,0,10" />
            <ListBox x:Name="logListBox2" Height="350" Margin="0,0,0,10" />
        </StackPanel>
    </Grid>
</Window>
MainWindow.xaml.cs 수정:
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace DataSyncApp
{
    public partial class MainWindow : Window
    {
        private DataSync dataSync;
        private EsdCheckSync esdCheckSync;

        public MainWindow()
        {
            InitializeComponent();
            dataSync = new DataSync();
            esdCheckSync = new EsdCheckSync();

            Task.Run(() => dataSync.StartDataSyncAsync(LogAction1));
            Task.Run(() => esdCheckSync.StartDataSyncAsync(LogAction2));
        }

        private async void LoadDataButton_Click(object sender, RoutedEventArgs e)
        {
            await LoadGridControlAsync();
        }

        private async Task LoadGridControlAsync()
        {
            DataTable targetData = await dataSync.GetTargetDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                where string.IsNullOrEmpty(target.Field<string>("USER_CARD_ID"))
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = "Not Matched",
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            dataGrid.ItemsSource = unmatchedRows.ToList();

            foreach (var item in dataGrid.Items)
            {
                DataGridRow row = (DataGridRow)dataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null && ((dynamic)row.Item).USER_CARD_ID == "Not Matched")
                {
                    row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.Column.Header.ToString() == "USER_CARD_ID")
            {
                string userName = ((TextBox)e.EditingElement).Text;
                string userCardId = ((TextBox)e.EditingElement).Text;

                // Handle manual input for USER_CARD_ID
                // For example, you might update a local list or another table in the database.
            }
        }

        private void LogAction1(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox1.Items.Count >= 500)
                {
                    logListBox1.Items.Clear();
                }
                logListBox1.Items.Add(message);
            });
        }

        private void LogAction2(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox2.Items.Count >= 500)
                {
                    logListBox2.Items.Clear();
                }
                logListBox2.Items.Add(message);
            });
        }
    }
}
이제 DataSync 클래스와 EsdCheckSync 클래스가 모두 동작하고, 로그는 두 개의 ListBox에 각각 분리되어 표시됩니다. MainWindow.xaml 및 MainWindow.xaml.cs 파일만 수정하