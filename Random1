<!DOCTYPE html>
<html>
<head>
    <title>Image Gallery with Doodle</title>
    <style>
        .imageWrapper {
            position: relative;
            display: inline-block;
            margin: 10px;
        }

        .imageWrapper img {
            display: block;
        }

        .doodleCanvas {
            position: absolute;
            top: 0;
            left: 0;
        }
    </style>
</head>
<body>
    <h1>Image Gallery with Doodle</h1>

    <div id="gallery">
        {% for image in images %}
            <div class="imageWrapper">
                <img src="data:image/png;base64,{{ image }}" alt="Image">
                <canvas class="doodleCanvas"></canvas>
            </div>
        {% endfor %}
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', (event) => {
            const imageWrappers = document.querySelectorAll('.imageWrapper');
            const doodleCanvases = document.querySelectorAll('.doodleCanvas');
            const contextArray = [];

            for (let i = 0; i < doodleCanvases.length; i++) {
                const canvas = doodleCanvases[i];
                const context = canvas.getContext('2d');
                contextArray.push(context);
                const imageWrapper = imageWrappers[i];
                const image = imageWrapper.querySelector('img');

                canvas.width = image.clientWidth;
                canvas.height = image.clientHeight;

                let isDrawing = false;
                let drawingPath = [];

                canvas.addEventListener('mousedown', startDrawing);
                canvas.addEventListener('mousemove', draw);
                canvas.addEventListener('mouseup', stopDrawing);
                canvas.addEventListener('mouseout', stopDrawing);

                function startDrawing(event) {
                    isDrawing = true;
                    draw(event);
                }

                function draw(event) {
                    if (!isDrawing) return;

                    const rect = canvas.getBoundingClientRect();
                    const x = event.clientX - rect.left;
                    const y = event.clientY - rect.top;

                    context.lineTo(x, y);
                    context.stroke();

                    drawingPath.push({ x, y });
                }

                function stopDrawing() {
                    isDrawing = false;
                    context.beginPath();
                }
            }
        });
    </script>
</body>
</html>
