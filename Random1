using System;
using System.Globalization;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
using ScreenRecorderLib;

namespace ScreenRecorderTrayApp
{
    public partial class MainForm : Form
    {
        static Recorder _recorder;
        static string _folderPath = @"D:\kwblackbox";

        public MainForm()
        {
            InitializeComponent();
            notifyIcon.Visible = false;

            // 녹화 옵션 설정
            RecorderOptions options = new RecorderOptions();
            _recorder = Recorder.CreateRecorder(options);

            // 녹화 시작
            StartRecording();
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Minimized)
            {
                notifyIcon.Visible = true;
                Hide();
            }
        }

        private void notifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Show();
            WindowState = FormWindowState.Normal;
            notifyIcon.Visible = false;
        }

        private async void StartRecording()
        {
            while (true)
            {
                string timestamp = DateTime.Now.ToString("yyyyMMddHHmm");
                string directoryPath = Path.Combine(_folderPath, DateTime.Now.ToString("yyyyMMddHH"));
                Directory.CreateDirectory(directoryPath); // 폴더 생성

                string fileName = Path.Combine(directoryPath, $"recording{timestamp}.mp4");
                _recorder.Record(fileName);

                await Task.Delay(60000); // 1분 대기

                _recorder.Stop();

                // 1시간마다 파일 삭제 체크
                if (DateTime.Now.Minute == 0)
                {
                    DeleteOldFiles();
                }
            }
        }

        private void DeleteOldFiles()
        {
            DirectoryInfo mainDir = new DirectoryInfo(_folderPath);
            foreach (DirectoryInfo dir in mainDir.GetDirectories())
            {
                if (DateTime.TryParseExact(dir.Name, "yyyyMMddHH", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dirDate)
                    && dirDate < DateTime.Now.AddDays(-7))
                {
                    dir.Delete(true);
                }
            }
        }
    }
}
