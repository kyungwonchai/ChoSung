생성된 TabControl과 그 내부의 TabItem에 접근하기 위해서는 TabControl을 관리할 수 있는 방법을 구현해야 합니다. 이름이 없는 동적 컨트롤에 접근하려면 이 컨트롤을 참조하는 변수나 컬렉션을 사용해야 합니다.

예를 들어, 모든 동적 TabControl을 리스트에 저장하고, 그 리스트를 순회하면서 각 TabControl 내의 TabItem에 접근해 UserControl의 함수를 실행할 수 있습니다.
동적 TabControl 저장 및 관리

먼저, 모든 동적 TabControl을 저장할 리스트를 정의합니다.

csharp

using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private List<TabControl> dynamicTabControls = new List<TabControl>();

        public MainWindow()
        {
            InitializeComponent();
            CreateDynamicTabControl();
        }

        private void CreateDynamicTabControl()
        {
            TabControl newTabControl = new TabControl();
            // TabControl에 TabItem 추가 로직...
            // 예: newTabControl.Items.Add(new TabItem { Content = new MyUserControl(), Header = "Tab 1" });

            MainGrid.Children.Add(newTabControl); // MainGrid에 TabControl 추가
            dynamicTabControls.Add(newTabControl); // 리스트에 TabControl 추가
        }

        public void ExecuteAllUserControlFunctions()
        {
            foreach (var tabControl in dynamicTabControls)
            {
                foreach (TabItem tabItem in tabControl.Items)
                {
                    if (tabItem.Content is MyUserControl userControl)
                    {
                        userControl.PublicMethod(); // MyUserControl의 PublicMethod 실행
                    }
                }
            }
        }
    }
}

설명

    dynamicTabControls: 동적으로 생성된 모든 TabControl을 저장하는 리스트입니다.
    CreateDynamicTabControl: 동적으로 TabControl을 생성하고 dynamicTabControls 리스트에 추가합니다.
    ExecuteAllUserControlFunctions: dynamicTabControls 리스트의 모든 TabControl을 순회하며, 각 TabItem에 있는 UserControl의 함수를 실행합니다.

이렇게 하면 동적으로 생성된 TabControl과 그 내부의 TabItem에 접근하여, 각 UserControl의 함수를 실행할 수 있습니다. MyUserControl과 PublicMethod는 사용자 정의 컨트롤과 그