위아래 두 개의 차트에 대해 마우스 휠과 스크롤을 동기화하거나, 하나의 차트로 통합하는 방법은 다음과 같습니다.

1. 위아래 차트 스크롤/휠 동기화 방법
WPF에서는 SyncScrollViewer 또는 동기화된 뷰 모델 방식으로 구현할 수 있습니다. 아래는 구현 방법입니다:

1.1 ScrollViewer 동기화
ScrollViewer를 사용해서 두 차트를 감싸고, 스크롤 위치를 동기화합니다.

XAML
xml
코드 복사
<Grid>
    <ScrollViewer x:Name="ScrollViewer1" VerticalScrollBarVisibility="Visible" ScrollChanged="ScrollViewer_ScrollChanged">
        <!-- 위 차트 -->
        <devexpress:ChartControl Name="Chart1"/>
    </ScrollViewer>
    
    <ScrollViewer x:Name="ScrollViewer2" VerticalScrollBarVisibility="Visible" ScrollChanged="ScrollViewer_ScrollChanged">
        <!-- 아래 차트 -->
        <devexpress:ChartControl Name="Chart2"/>
    </ScrollViewer>
</Grid>
Code-Behind (C#)
csharp
코드 복사
private void ScrollViewer_ScrollChanged(object sender, ScrollChangedEventArgs e)
{
    // ScrollViewer를 동기화
    if (sender == ScrollViewer1)
    {
        ScrollViewer2.ScrollToVerticalOffset(ScrollViewer1.VerticalOffset);
    }
    else if (sender == ScrollViewer2)
    {
        ScrollViewer1.ScrollToVerticalOffset(ScrollViewer2.VerticalOffset);
    }
}
1.2 마우스 휠 동기화
마우스 휠 이벤트를 추가로 동기화하려면, PreviewMouseWheel 이벤트를 사용합니다.

XAML
xml
코드 복사
<ScrollViewer x:Name="ScrollViewer1" VerticalScrollBarVisibility="Visible" PreviewMouseWheel="ScrollViewer_PreviewMouseWheel">
    <devexpress:ChartControl Name="Chart1"/>
</ScrollViewer>

<ScrollViewer x:Name="ScrollViewer2" VerticalScrollBarVisibility="Visible" PreviewMouseWheel="ScrollViewer_PreviewMouseWheel">
    <devexpress:ChartControl Name="Chart2"/>
</ScrollViewer>
Code-Behind (C#)
csharp
코드 복사
private void ScrollViewer_PreviewMouseWheel(object sender, MouseWheelEventArgs e)
{
    var offsetChange = e.Delta > 0 ? -20 : 20; // 마우스 휠 스크롤 단계
    ScrollViewer1.ScrollToVerticalOffset(ScrollViewer1.VerticalOffset + offsetChange);
    ScrollViewer2.ScrollToVerticalOffset(ScrollViewer2.VerticalOffset + offsetChange);
    e.Handled = true; // 이벤트가 다른 곳으로 전달되지 않도록 방지
}
2. 하나의 차트로 통합 방법
만약 위의 동기화 방식이 어렵거나 성능 문제가 있다면, L/R 차트를 하나의 차트로 통합할 수 있습니다.

2.1 데이터 통합
차트 데이터를 통합하여 동일한 Series에 각기 다른 축 데이터를 추가합니다.

XAML
xml
코드 복사
<devexpress:ChartControl>
    <devexpress:ChartControl.Diagram>
        <devexpress:XYDiagram2D>
            <devexpress:XYDiagram2D.Series>
                <!-- L 데이터 -->
                <devexpress:Series DisplayName="L Data" ArgumentDataMember="Time" ValueDataMember="LValue" />
                <!-- R 데이터 -->
                <devexpress:Series DisplayName="R Data" ArgumentDataMember="Time" ValueDataMember="RValue" />
            </devexpress:XYDiagram2D.Series>
        </devexpress:XYDiagram2D>
    </devexpress:ChartControl.Diagram>
</devexpress:ChartControl>
2.2 서로 다른 축 사용
L/R 데이터를 구분하기 위해 보조 축을 추가합니다.

XAML
xml
코드 복사
<devexpress:ChartControl>
    <devexpress:ChartControl.Diagram>
        <devexpress:XYDiagram2D>
            <!-- 기본 Y축 -->
            <devexpress:XYDiagram2D.AxisY>
                <devexpress:AxisY Name="PrimaryY" Title="L Value" />
            </devexpress:XYDiagram2D.AxisY>
            
            <!-- 보조 Y축 -->
            <devexpress:XYDiagram2D.SecondaryAxesY>
                <devexpress:SecondaryAxisY Name="SecondaryY" Title="R Value" />
            </devexpress:XYDiagram2D.SecondaryAxesY>

            <!-- L 데이터 -->
            <devexpress:Series ArgumentDataMember="Time" ValueDataMember="LValue">
                <devexpress:Series.View>
                    <devexpress:LineSeriesView AxisY="{Binding ElementName=PrimaryY}" />
                </devexpress:Series.View>
            </devexpress:Series>

            <!-- R 데이터 -->
            <devexpress:Series ArgumentDataMember="Time" ValueDataMember="RValue">
                <devexpress:Series.View>
                    <devexpress:LineSeriesView AxisY="{Binding ElementName=SecondaryY}" />
                </devexpress:Series.View>
            </devexpress:Series>
        </devexpress:XYDiagram2D>
    </devexpress:ChartControl.Diagram>
</devexpress:ChartControl>
결론
두 차트 동기화: ScrollViewer와 MouseWheel 이벤트를 사용하여 두 차트의 스크롤과 휠을 동기화하세요.