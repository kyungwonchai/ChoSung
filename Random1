겠습니다. 메모마다 삭제 버튼을 추가하고, 파스텔톤 배경색을 선택하여 적용 및 저장할 수 있도록 코드를 업데이트하겠습니다. 또한, 메모의 배경색 선택이 가능하며, 저장 후 프로그램을 다시 실행해도 저장된 메모와 색상이 유지되도록 할 것입니다.

1. MSSQL 데이터베이스 테이블 업데이트
메모의 배경색을 저장할 수 있도록 MemoBoard 테이블에 BackgroundColor 컬럼을 추가합니다.

sql
코드 복사
ALTER TABLE MemoBoard
ADD BackgroundColor NVARCHAR(50) NOT NULL DEFAULT 'LightYellow';
2. App.config (DB 연결 문자열 설정)
xml
코드 복사
<configuration>
  <connectionStrings>
    <add name="MemoDB"
         connectionString="Server=your_server_name;Database=your_database_name;User Id=your_user_id;Password=your_password;"
         providerName="System.Data.SqlClient" />
  </connectionStrings>
</configuration>
3. XAML 코드 (MainWindow.xaml)
메모를 추가하는 버튼과 메모를 표시하는 그리드, 그리고 색상 선택을 위한 ComboBox를 추가합니다.

xml
코드 복사
<Window x:Class="MemoApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Memo App" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Vertical">
            <!-- 메모를 추가하는 버튼 -->
            <Button x:Name="buttonC" Content="클립보드 내용 추가" Width="150" Height="50" Click="buttonC_Click"/>

            <!-- 색상 선택을 위한 ComboBox -->
            <ComboBox x:Name="colorPicker" Width="150" Height="30" SelectionChanged="ColorPicker_SelectionChanged">
                <ComboBoxItem Content="LightYellow" IsSelected="True"/>
                <ComboBoxItem Content="LightPink"/>
                <ComboBoxItem Content="LightBlue"/>
                <ComboBoxItem Content="LightGreen"/>
                <ComboBoxItem Content="Lavender"/>
            </ComboBox>

            <!-- 메모를 보여줄 탭 아이템 -->
            <dx:DXTabControl x:Name="tabControl">
                <dx:DXTabItem Header="Memo Tab">
                    <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                        <Grid x:Name="memoGrid" Background="LightGray" Width="2000">
                            <!-- 메모가 동적으로 추가될 공간 -->
                        </Grid>
                    </ScrollViewer>
                </dx:DXTabItem>
            </dx:DXTabControl>
        </StackPanel>
    </Grid>
</Window>
4. MainWindow.xaml.cs
이제 버튼 클릭 시 클립보드 내용을 메모로 추가하고, 메모를 삭제할 수 있으며, 배경색을 저장하고 다시 불러올 수 있도록 C# 코드를 완성합니다.

csharp
코드 복사
using System;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using DevExpress.Xpf.Core;

namespace MemoApp
{
    public partial class MainWindow : DXWindow
    {
        private string connectionString;
        private string selectedColor = "LightYellow"; // 기본 배경색

        public MainWindow()
        {
            InitializeComponent();
            connectionString = System.Configuration.ConfigurationManager.ConnectionStrings["MemoDB"].ConnectionString;
            LoadMemosFromDatabase(); // 프로그램 실행 시 DB에서 메모 로드
        }

        // 메모를 DB에서 로드하는 메서드
        private void LoadMemosFromDatabase()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = "SELECT MemoID, MemoContent, CreatedAt, BackgroundColor FROM MemoBoard ORDER BY CreatedAt";
                SqlCommand command = new SqlCommand(query, connection);
                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    int memoID = (int)reader["MemoID"];
                    string memoContent = reader["MemoContent"].ToString();
                    DateTime createdAt = (DateTime)reader["CreatedAt"];
                    string backgroundColor = reader["BackgroundColor"].ToString();
                    AddMemoToGrid(memoID, memoContent, createdAt, backgroundColor); // 메모 그리드에 추가
                }
            }
        }

        // 메모를 그리드에 추가하는 메서드
        private void AddMemoToGrid(int memoID, string content, DateTime createdAt, string backgroundColor)
        {
            Border memoBorder = CreateMemo(memoID, content, createdAt, backgroundColor);
            memoGrid.Children.Add(memoBorder);  // 그리드에 메모 추가
        }

        // 버튼 클릭 시 클립보드 내용을 가져와 메모로 추가
        private void buttonC_Click(object sender, RoutedEventArgs e)
        {
            if (Clipboard.ContainsText())
            {
                string clipboardText = Clipboard.GetText();
                DateTime createdAt = DateTime.Now;

                // DB에 메모 저장 후 그리드에 추가
                int memoID = SaveMemoToDatabase(clipboardText, createdAt, selectedColor);
                AddMemoToGrid(memoID, clipboardText, createdAt, selectedColor);
            }
            else
            {
                MessageBox.Show("클립보드에 텍스트가 없습니다.");
            }
        }

        // 메모를 DB에 저장하는 메서드
        private int SaveMemoToDatabase(string content, DateTime createdAt, string backgroundColor)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = "INSERT INTO MemoBoard (MemoContent, CreatedAt, BackgroundColor) OUTPUT INSERTED.MemoID VALUES (@content, @createdAt, @backgroundColor)";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@content", content);
                command.Parameters.AddWithValue("@createdAt", createdAt);
                command.Parameters.AddWithValue("@backgroundColor", backgroundColor);

                return (int)command.ExecuteScalar(); // 생성된 MemoID 반환
            }
        }

        // 동적으로 메모장을 생성하는 메서드
        private Border CreateMemo(int memoID, string content, DateTime createdAt, string backgroundColor)
        {
            // 메모의 기본 UI (Border로 둘러싸인 StackPanel)
            Border memoBorder = new Border
            {
                Width = 200,
                Height = 200,
                Background = (Brush)new BrushConverter().ConvertFromString(backgroundColor),
                BorderBrush = Brushes.Black,
                BorderThickness = new Thickness(2),
                CornerRadius = new CornerRadius(5)
            };

            // 상단에 날짜와 삭제 버튼을 배치
            StackPanel memoPanel = new StackPanel();
            TextBlock dateText = new TextBlock
            {
                Text = createdAt.ToString("yyyy-MM-dd HH:mm:ss"),
                FontWeight = FontWeights.Bold,
                Margin = new Thickness(5)
            };

            Button deleteButton = new Button
            {
                Content = "삭제",
                Width = 50,
                Margin = new Thickness(5)
            };

            deleteButton.Click += (s, e) => DeleteMemo(memoID, memoBorder); // 삭제 이벤트

            // 메모 내용
            TextBox memoText = new TextBox
            {
                Text = content,
                TextWrapping = TextWrapping.Wrap,
                IsReadOnly = true,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto,
                Background = Brushes.Transparent
            };

            memoPanel.Children.Add(dateText);
            memoPanel.Children.Add(deleteButton);
            memoPanel.Children.Add(memoText);
            memoBorder.Child = memoPanel;

            return memoBorder;
        }

        // 메모를 삭제하는 메서드
        private void DeleteMemo(int memoID, Border memoBorder)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = "DELETE FROM MemoBoard WHERE MemoID = @memoID";
                SqlCommand command = new SqlCommand(query, connection);
                command.Parameters.AddWithValue("@memoID", memoID);
                command.ExecuteNonQuery();
            }

            memoGrid.Children.Remove(memoBorder); // UI에서 메모 삭제
        }

        // 색상 선택 변경 이벤트
        private void ColorPicker_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBoxItem selectedItem = (ComboBoxItem)colorPicker.SelectedItem;
            selectedColor = selectedItem.Content.ToString(); // 선택한 색상 저장
        }
    }
}
5. 주요 기능 설명
메모 추가: buttonC_Click 메서드가 실행될 때 클립보드의 내용을 가져와 메모로 추가하며, 선택한 색상을 적용하고 데이터베이스에 저장합니다.
색상 선택: 사용자가 ComboBox에서 색상을 선택하면 ColorPicker_SelectionChanged 메서드를 통해 선택한 색상을 저장합니다.
메모 삭제: 각 메모에 삭제 버튼이 있으며, 버튼을 클릭하면 해당 메모가 UI와 데이터베이스에서 삭제됩니다.
메모 불러오기: 프로그램을 실행할 때 데이터베이스에 저장된 메모를 불러와 화면에 표시합니다. 메모는 배경색과 함께 저장된 날짜도 표시됩니다.