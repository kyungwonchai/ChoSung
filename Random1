 WPF 클라이언트에서 ASP.NET 서버의 SignalR Hub와 통신하기 위한 예제 코드를 제공하겠습니다.
WPF 클라이언트 프로젝트

    NuGet에서 Microsoft.AspNetCore.SignalR.Client 패키지를 설치합니다.

    MainPage.xaml.cs에 다음 코드를 추가합니다.

csharp

using Microsoft.AspNetCore.SignalR.Client;
using System;
using System.Threading.Tasks;

namespace WpfClient
{
    public partial class MainWindow : Window
    {
        private HubConnection _hubConnection;
        
        public MainWindow()
        {
            InitializeComponent();
            InitializeSignalR().ConfigureAwait(false);
        }

        private async Task InitializeSignalR()
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://yourServerAddress/editHub")
                .Build();

            // 이벤트를 구독합니다.
            _hubConnection.On<string, string, string>("receiveEditStatus", ReceiveEditStatus);

            await _hubConnection.StartAsync();
        }

        private void ReceiveEditStatus(string key1, string username, string column)
        {
            // 편집 상태 처리 로직
            // 예: Dispatcher.Invoke(() => YourUIElement.Text = $"{username} is editing {column} in {key1}");
        }

        private async void OnEdit(string key1, string column)
        {
            // 사용자가 편집을 시작할 때 호출됩니다.
            await _hubConnection.SendAsync("UpdateEditStatus", key1, "YourUsername", column);
        }

        private void SomeUIElement_EditStart(object sender, EventArgs e)
        {
            // UI 이벤트 핸들러에서 OnEdit 함수 호출
            OnEdit("someKey1", "someColumn");
        }
    }
}

이 예제에서 http://yourServerAddress/editHub는 실제 서버의 주소로 바꿔주세요. YourUsername와 같은 값을 적절히 설정하면 됩니다.

또한 SomeUIElement_EditStart 함수는 특정 UI 요소가 편집이 시작될 때 호출되는 함수입니다. 이를 실제 UI 요소와 연결해야 합니다.

이제 WPF 클라이언트 앱이 서버의 SignalR Hub와 통신할 수 있게 됐습니다. OnEdit 함수를 호출하여 서버에 편집 상태를 알리고, ReceiveEditStatus 메서드를 통해 다른 사용자의 편집 상태를 받아올 수 있습니다.