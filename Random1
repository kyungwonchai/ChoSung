네, 알겠습니다! "BooleanToVisibilityConverter를 찾을 수 없다"는 오류는 XAML에서 BooleanToVisibilityConverter라는 이름의 리소스를 사용하려고 하지만, 해당 리소스가 정의되어 있지 않기 때문에 발생합니다.

이전에 SControlM/MainWindow.xaml의 StatusBar 내 ProgressBar 부분에서 이 컨버터를 사용하도록 코드가 포함되어 있었습니다.

XML

<ProgressBar IsIndeterminate="True" Width="100" Height="15" Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}">
    <ProgressBar.Style>
            <Style TargetType="ProgressBar">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </ProgressBar.Style>
</ProgressBar>
여기서 Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}" 부분이 문제의 원인입니다. ProgressBar.Style 내부의 DataTrigger도 동일한 역할을 하고 있어서 중복되기도 합니다.

해결 방법:

BooleanToVisibilityConverter 클래스 파일을 프로젝트에 추가합니다.
App.xaml 파일에 이 컨버터를 리소스로 등록합니다.
(선택 사항) ProgressBar XAML에서 중복되는 스타일 정의를 정리합니다.
아래 단계에 따라 수정해 주세요.

1. BooleanToVisibilityConverter.cs 파일 추가

SControlM 프로젝트에 Converters 라는 새 폴더를 만드시고, 그 안에 다음 내용으로 BooleanToVisibilityConverter.cs 파일을 추가합니다.

C#

// SControlM/Converters/BooleanToVisibilityConverter.cs
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SControlM.Converters
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool boolValue)
            {
                // Invert an optional "Invert" string parameter is passed
                bool invert = false;
                if (parameter is string stringParameter && stringParameter.ToLower() == "invert")
                {
                    invert = true;
                }

                if (invert)
                {
                    return boolValue ? Visibility.Collapsed : Visibility.Visible;
                }
                return boolValue ? Visibility.Visible : Visibility.Collapsed;
            }
            return Visibility.Collapsed; // Default or if value is not a bool
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is Visibility visibilityValue)
            {
                bool invert = false;
                if (parameter is string stringParameter && stringParameter.ToLower() == "invert")
                {
                    invert = true;
                }

                if (invert)
                {
                    return visibilityValue == Visibility.Collapsed;
                }
                return visibilityValue == Visibility.Visible;
            }
            return false; // Default or if value is not a Visibility
        }
    }
}
2. App.xaml에 컨버터 리소스 등록

SControlM 프로젝트의 App.xaml 파일을 열고, <Application.Resources> 섹션 안에 컨버터를 등록합니다. Converters 네임스페이스를 사용하기 위해 xmlns:converters="clr-namespace:SControlM.Converters"를 <Application> 태그에 추가해야 합니다.

XML

<Application x:Class="SControlM.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SControlM"
             xmlns:converters="clr-namespace:SControlM.Converters" StartupUri="MainWindow.xaml">
    <Application.Resources>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Application.Resources>
</Application>
3. MainWindow.xaml의 ProgressBar XAML 정리 (권장)

이제 BooleanToVisibilityConverter가 리소스로 등록되었으므로 MainWindow.xaml에서 이를 사용할 수 있습니다. ProgressBar의 Visibility를 제어하는 방법은 두 가지가 있었습니다:
a. 직접 Converter를 사용하는 방법
b. Style 내의 DataTrigger를 사용하는 방법

현재 XAML에는 두 가지가 혼용되어 있으며, 직접 Converter를 사용하는 부분(Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}")이 오류의 원인이었습니다.

컨버터를 사용하기로 했으므로, ProgressBar의 XAML을 다음과 같이 더 간결하게 수정하는 것이 좋습니다. (기존 <ProgressBar.Style>...</ProgressBar.Style> 부분은 삭제하거나, Visibility 관련 DataTrigger를 제거합니다.)

권장되는 ProgressBar 수정안 (컨버터 직접 사용):

XML

<ProgressBar IsIndeterminate="True" Width="100" Height="15"
             Visibility="{Binding IsBusy, Converter={StaticResource BooleanToVisibilityConverter}}"/>
이 경우, 이전에 ProgressBar 태그 내에 있던 <ProgressBar.Style>...</ProgressBar.Style> 부분은 삭제하거나, 최소한 Visibility를 제어하는 DataTrigger는 제거해야 중복이 없어집니다. 가장 간단한 것은 위와 같이 스타일 블록 없이 컨버터만 사용하는 것입니다.

또는, 스타일 트리거를 유지하고 싶다면 (컨버터 사용 안 함):

만약 스타일 트리거 방식을 선호한다면, ProgressBar 태그에서 Converter={StaticResource BooleanToVisibilityConverter} 부분을 삭제하고 스타일 블록은 그대로 두면 됩니다.

XML

<ProgressBar IsIndeterminate="True" Width="100" Height="15"> <ProgressBar.Style>
            <Style TargetType="ProgressBar">
            <Setter Property="Visibility" Value="Collapsed"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsBusy}" Value="True">
                    <Setter Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </ProgressBar.Style>
</ProgressBar>
둘 중 하나의 방식만 선택하여 ProgressBar의 Visibility를 제어하도록 XAML을 정리해주세요. 컨버터를 추가했으므로 첫 번째 방식(컨버터 직접 사용)이 조금 더 간결합니다.

위의 1, 2단계를 적용하고, 3단계에서 MainWindow.xaml의 ProgressBar 부분을 정리한 후 다시 빌드해보시면 "BooleanToVisibilityConverter를 찾을 수 없다"는 오류가 해결될 것입니다.

결과를 알려주세요!

