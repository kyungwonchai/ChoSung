화면에 펜 쓰기 기능을 추가하려면 Canvas를 사용하여 사용자가 그릴 수 있도록 구성할 수 있습니다. 펜 색깔은 파란색, 굵기는 3pt로 설정하겠습니다.

아래는 ImageDisplayScreen 컴포저블 함수에 Draw 버튼을 추가하고, 클릭 시 펜 쓰기 모드로 전환하는 코드입니다.

MainActivity.kt
기존 코드에 변동사항 없습니다.

ImageListScreen.kt
ImageDisplayScreen 컴포저블 함수를 업데이트합니다.

kotlin
코드 복사
package com.example.mssqlimageapp

import android.graphics.Bitmap
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.launch
import java.util.*

@Composable
fun ImageListScreen(
    imageList: List<ImageData>,
    selectedImage: Bitmap?,
    selectedImageTitle: String,
    selectedDatetime: String,
    onFetchData: () -> Unit,
    onImageSelected: (String, String) -> Unit,
    onBack: () -> Unit,
    onFit: () -> Unit,
    isRefreshing: Boolean,
    onToggleRefresh: (Boolean) -> Unit
) {
    Column {
        if (selectedImage == null) {
            Button(
                onClick = { onFetchData() },
                modifier = Modifier.padding(20.dp)
            ) {
                Text(if (imageList.isEmpty()) "Fetch Data" else "Reload Data")
            }
        }

        LazyColumn(modifier = Modifier.weight(1f).padding(horizontal = 20.dp)) {
            items(imageList) { imageData ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp)
                ) {
                    Text(imageData.datetime, modifier = Modifier.weight(1f))
                    Button(onClick = {
                        onImageSelected(imageData.imageTitle, imageData.datetime)
                    }) {
                        Text(imageData.imageTitle)
                    }
                }
            }
        }

        selectedImage?.let {
            ImageDisplayScreen(
                bitmap = it,
                imageTitle = selectedImageTitle,
                datetime = selectedDatetime,
                onBack = onBack,
                onFit = onFit,
                isRefreshing = isRefreshing,
                onToggleRefresh = onToggleRefresh
            )
        }
    }
}

@Composable
fun ImageDisplayScreen(
    bitmap: Bitmap,
    imageTitle: String,
    datetime: String,
    onBack: () -> Unit,
    onFit: () -> Unit,
    isRefreshing: Boolean,
    onToggleRefresh: (Boolean) -> Unit
) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    var currentBitmap by remember { mutableStateOf(bitmap) }
    val scope = rememberCoroutineScope()
    var drawMode by remember { mutableStateOf(false) }
    var pathPoints by remember { mutableStateOf(listOf<Offset>()) }

    LaunchedEffect(bitmap) {
        currentBitmap = bitmap
    }

    LaunchedEffect(isRefreshing) {
        var timer: Timer? = null
        if (isRefreshing) {
            timer = fixedRateTimer("imageRefresher", true, 0L, 60000) {
                scope.launch {
                    val newBitmap = fetchImageFromDatabase(imageTitle, datetime)
                    if (newBitmap != null) {
                        withContext(Dispatchers.Main) {
                            currentBitmap = newBitmap
                        }
                    }
                }
            }
        } else {
            timer?.cancel()
        }
        onDispose {
            timer?.cancel()
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Image(
            bitmap = currentBitmap.asImageBitmap(),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectTransformGestures { _, pan, zoom, _ ->
                        scale *= zoom
                        offset = Offset(offset.x + pan.x, offset.y + pan.y)
                    }
                }
                .graphicsLayer(
                    scaleX = scale,
                    scaleY = scale,
                    translationX = offset.x,
                    translationY = offset.y
                )
        )
        if (drawMode) {
            Canvas(modifier = Modifier.fillMaxSize().pointerInput(Unit) {
                detectTransformGestures { _, pan, zoom, _ ->
                    if (drawMode) {
                        pathPoints = pathPoints + pan
                    }
                }
            }) {
                for (i in 1 until pathPoints.size) {
                    drawLine(
                        color = Color.Blue,
                        start = pathPoints[i - 1],
                        end = pathPoints[i],
                        strokeWidth = 3f
                    )
                }
            }
        }
        Column(
            modifier = Modifier.align(Alignment.BottomCenter).fillMaxWidth()
                .background(MaterialTheme.colors.surface).padding(20.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth().padding(8.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Button(onClick = onBack) {
                    Text("Back")
                }
                Button(onClick = {
                    scale = 1f
                    offset = Offset.Zero
                    onFit()
                }) {
                    Text("Fit")
                }
                Button(onClick = {
                    drawMode = !drawMode
                }) {
                    Text("Draw")
                }
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Checkbox(
                        checked = isRefreshing,
                        onCheckedChange = onToggleRefresh
                    )
                    Text("Auto Refresh")
                }
            }
        }
    }
}
ImageData.kt
기존 코드에 변동사항 없습니다.

DatabaseHelper.kt
기존 코드에 변동사항 없습니다.

위 코드에서:

drawMode 변수를 사용하여 드로잉 모드를 토글합니다.
pathPoints 변수를 사용하여 그려진 경로의 점들을 저장합니다.
Canvas를 사용하여 드로잉 모드일 때 그린 경로를 화면에 표시합니다.
Draw 버튼을 추가하여 클릭 시 drawMode를 토글합니다.
이제 사용자는 Draw 버튼을 클릭하여 드로잉 모드를 활성화하고, 화면에 파란색 3pt 굵기의 펜으로 그림을 그릴 수 있습니다.






