PF에서 로그가 정상적으로 수집 중일 때 이를 시각적으로 표현하는 애니메이션을 적용할 수 있는 방법으로, 푸른 계열의 그라데이션이 물 흐르듯이 자연스럽게 흐르는 무한 애니메이션을 구현할 수 있습니다. 문제가 생기면 색상과 애니메이션의 동작이 바뀌도록 바인딩을 통해 상태를 변경할 수 있습니다.

아래는 Ellipse(타원)와 LinearGradientBrush를 활용하여 물 흐르듯이 보이는 애니메이션을 만들고, Trigger 및 데이터 바인딩을 통해 애니메이션과 색상을 변경하는 예시입니다.

XAML 및 ViewModel 코드 설명:
1. ViewModel 구현 (LogStatusViewModel.cs)
애니메이션 상태를 제어할 수 있는 속성을 만들어 바인딩합니다.
로그가 정상적으로 수집 중인지 여부에 따라 색상과 애니메이션 상태를 변경할 수 있는 로직을 구현합니다.
csharp
코드 복사
using System.ComponentModel;

namespace GradientAnimationExample
{
    public class LogStatusViewModel : INotifyPropertyChanged
    {
        private bool _isLoggingActive;

        public bool IsLoggingActive
        {
            get { return _isLoggingActive; }
            set
            {
                if (_isLoggingActive != value)
                {
                    _isLoggingActive = value;
                    OnPropertyChanged("IsLoggingActive");
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
2. XAML 코드 (MainWindow.xaml)
타원형의 Ellipse에 그라데이션이 흐르듯이 보이는 애니메이션을 적용합니다.
DataTrigger를 통해 로그 상태가 변경될 때 색상 및 애니메이션 동작을 제어합니다.
xml
코드 복사
<Window x:Class="GradientAnimationExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Animation Example" Height="300" Width="300"
        DataContext="{StaticResource LogStatusViewModel}">
    <Window.Resources>
        <!-- ViewModel을 Window에 등록 -->
        <local:LogStatusViewModel x:Key="LogStatusViewModel" />

        <!-- 로그가 활성화 상태일 때 사용하는 그라데이션 브러시 -->
        <LinearGradientBrush x:Key="ActiveGradientBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientStop Color="LightBlue" Offset="0" />
            <GradientStop Color="Blue" Offset="1" />
        </LinearGradientBrush>

        <!-- 로그가 비활성화 상태일 때 사용하는 브러시 (오류 시 붉은 색상) -->
        <SolidColorBrush x:Key="ErrorBrush" Color="Red" />
    </Window.Resources>

    <Grid>
        <!-- 애니메이션이 적용될 타원형 엘리먼트 -->
        <Ellipse Width="200" Height="200" StrokeThickness="5">
            <Ellipse.Stroke>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="LightBlue" Offset="0" />
                    <GradientStop Color="Blue" Offset="1" />
                </LinearGradientBrush>
            </Ellipse.Stroke>
            <Ellipse.Fill>
                <SolidColorBrush Color="White" />
            </Ellipse.Fill>

            <!-- 애니메이션 적용 -->
            <Ellipse.Triggers>
                <!-- 로그 상태가 활성화일 때 무한 애니메이션 실행 -->
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard>
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimation Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)"
                                             From="0" To="200" Duration="0:0:2" AutoReverse="True" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Ellipse.Triggers>

            <!-- 로그 상태에 따른 색상 변경 (로그 비활성 시 오류 색상 적용) -->
            <Ellipse.Style>
                <Style TargetType="Ellipse">
                    <Style.Triggers>
                        <!-- 로그 활성 상태일 때 -->
                        <DataTrigger Binding="{Binding IsLoggingActive}" Value="True">
                            <Setter Property="Stroke" Value="{StaticResource ActiveGradientBrush}" />
                        </DataTrigger>

                        <!-- 로그 비활성 상태일 때 -->
                        <DataTrigger Binding="{Binding IsLoggingActive}" Value="False">
                            <Setter Property="Stroke" Value="{StaticResource ErrorBrush}" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Ellipse.Style>

            <!-- 타원 애니메이션의 움직임을 위한 RenderTransform -->
            <Ellipse.RenderTransform>
                <TranslateTransform />
            </Ellipse.RenderTransform>
        </Ellipse>
    </Grid>
</Window>
코드 설명:
LogStatusViewModel:

IsLoggingActive 속성은 로그가 정상적으로 수집 중인지 아닌지를 나타냅니다.
이 속성의 값에 따라 UI에서 애니메이션과 색상이 동적으로 변경됩니다.
Ellipse와 애니메이션:

Ellipse(타원)에 그라데이션을 적용하며, TranslateTransform을 통해 좌우로 움직이는 애니메이션을 만듭니다.
Storyboard를 사용하여 타원이 좌우로 부드럽게 흐르는 무한 애니메이션을 구성하고, AutoReverse를 통해 양방향으로 자연스러운 흐름을 만듭니다.
Style.Triggers와 DataTrigger:

DataTrigger를 통해 ViewModel의 IsLoggingActive 속성 값에 따라 애니메이션의 색상과 동작을 제어합니다.
로그가 정상 수집 중일 때는 파란 계열의 그라데이션이 적용되고, 오류가 발생하면 붉은 색상이 적용됩니다.
바인딩과 상태 변경:

IsLoggingActive 속성은 WPF 바인딩을 통해 Ellipse의 Stroke 색상을 변경합니다.
XAML에서는 ViewModel과 연결된 데이터 바인딩을 사용하여 UI에서 상태 변화에 맞춰 동작하도록 설계되었습니다.
추가:
문제가 발생할 때 ViewModel에서 IsLoggingActive 값을 false로 변경하여 애니메이션이 정지하거나 색상이 변경되는 동작을 추가할 수 있습니다.
로그가 정상적으로 수집되고 있는 동안은 파란색 그라데이션이 흐르듯이 움직이지만, 문제가 발생하면 애니메이션이 멈추고 타원에 빨간색이 적용됩니다.
이 코드는 시각적으로 로그 수집 상태를 효과적으로 보여주면서 문제 발생 시 즉각적으로 사용자가 인식할 수 있게 