릭하면 현재 상태를 Debug.WriteLine으로 출력하는 코드입니다. 설정 윈도우는 메인 윈도우의 GridControl에 있는 GridColumn의 순서와 가시성을 반영합니다. 이 예제에서는 GridColumn의 Name 속성을 사용합니다. (XName은 x:Name의 대체로 사용하는 것으로 가정합니다.)

1. ColumnInfo 클래스 정의:
csharp
Copy code
public class ColumnInfo
{
    public string XName { get; set; }  // x:Name의 대체로 사용
    public bool IsVisible { get; set; }
    public int DisplayIndex { get; set; }
}
2. 설정 윈도우 XAML (ColumnOrderingWindow.xaml):
xml
Copy code
<Window x:Class="ColumnOrderingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Column Order" Height="300" Width="200">
    <StackPanel>
        <Button Content="Apply Changes" Click="ApplyChanges_Click" Margin="5"/>
        <ListBox x:Name="ListBoxColumns" AllowDrop="True">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding IsVisible}" Content="{Binding XName}"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </StackPanel>
</Window>
3. 설정 윈도우 코드 비하인드 (ColumnOrderingWindow.xaml.cs):
csharp
Copy code
public partial class ColumnOrderingWindow : Window
{
    public ObservableCollection<ColumnInfo> ColumnsInfo { get; set; }

    public ColumnOrderingWindow(IEnumerable<ColumnInfo> columns)
    {
        InitializeComponent();
        ColumnsInfo = new ObservableCollection<ColumnInfo>(columns);
        ListBoxColumns.ItemsSource = ColumnsInfo;
    }

    private void ApplyChanges_Click(object sender, RoutedEventArgs e)
    {
        // 현재 조정된 순서와 체크박스 값, XName을 출력합니다.
        foreach (var column in ColumnsInfo)
        {
            Debug.WriteLine($"XName: {column.XName}, IsVisible: {column.IsVisible}, DisplayIndex: {column.DisplayIndex}");
        }
        this.Close();
    }
}
4. 메인 윈도우에서 설정 윈도우 호출 (MainWindow.xaml.cs):
csharp
Copy code
private void OpenColumnOrderingWindow_Click(object sender, RoutedEventArgs e)
{
    var columnsInfo = gridControl1.Columns
        .Select((c, index) => new ColumnInfo
        {
            XName = c.Name,  // Name 속성을 XName으로 사용
            IsVisible = c.Visible,
            DisplayIndex = index  // 실제 컬럼의 순서를 DisplayIndex로 사용
        })
        .OrderBy(c => c.DisplayIndex)
        .ToList();

    var columnOrderingWindow = new ColumnOrderingWindow(columnsInfo);
    columnOrderingWindow.ShowDialog();
}
위 코드는 메인 윈도우에서 설정 윈도우를 열고, 설정 윈도우에서 "적용" 버튼을 누르면 현재 설정 상태를 출력하고 윈도우를 닫습니다. 설정 윈도우에서는 ObservableCollection<ColumnInfo>를 사용하여 컬럼의 순서와 가시성을 관리하며, 이 컬렉션은 설정 윈도우의 ListBox에 바인딩됩니다.

메인 윈도우의 GridControl에서 컬럼의 순서를 변경하는 기능은 복잡하고 여기서 제공한 코드에는 포함되어 있지 않습니다. DisplayIndex는 단순히 Select 메서드에서 생성된 인덱스를 기반으로 한 것이며, 실제 GridControl의 DisplayIndex 속