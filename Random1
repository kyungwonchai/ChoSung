ObservableCollection<T>은 데이터 바인딩을 지원하는 WPF에서 자주 사용되는 컬렉션 유형으로, 컬렉션의 내용이 변경될 때마다 자동으로 UI에 갱신이 반영되도록 합니다. ObservableCollection<T>에 값을 추가하거나 삭제하면 CollectionChanged 이벤트가 자동으로 발생하고, 이 이벤트는 WPF 바인딩 시스템에 의해 감지되어 UI가 자동으로 갱신됩니다.

ObservableCollection<T>를 사용하여 자동 갱신하는 방법
ObservableCollection<T>를 사용하여 UI에서 데이터가 자동으로 갱신되도록 하려면, 다음과 같은 단계를 따릅니다:

ViewModel에서 ObservableCollection<T> 선언: ViewModel에서 로그 메시지를 저장할 ObservableCollection<string>을 선언합니다.
UI에서 ItemsSource 바인딩: XAML에서 ListBox 등의 컨트롤에 ItemsSource를 ObservableCollection<T>에 바인딩합니다.
값 변경 시 자동 갱신: 코드에서 ObservableCollection<T>에 아이템을 추가하거나 제거하면, UI가 자동으로 갱신됩니다.
예제 코드
1. ViewModel에서 ObservableCollection<T> 선언
MainViewModel.cs 파일에서 ObservableCollection<string>을 선언합니다:

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<string> LogMessages { get; } = new ObservableCollection<string>();

        // 다른 ViewModel의 속성 및 명령들...

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // 로그 메시지를 추가하는 메서드
        public void AddLogMessage(string message)
        {
            LogMessages.Add(message); // ObservableCollection에 메시지를 추가하면 UI가 자동으로 갱신됩니다.
        }
    }
}
LogMessages는 로그 메시지를 저장하는 ObservableCollection<string>입니다.
AddLogMessage 메서드를 통해 로그 메시지를 추가하면, ObservableCollection의 CollectionChanged 이벤트가 발생하여 UI가 자동으로 업데이트됩니다.
2. XAML에서 ItemsSource 바인딩
MainWindow.xaml 파일에서 ListBox를 정의하고 ItemsSource를 ViewModel의 LogMessages 컬렉션에 바인딩합니다:

xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="RouterMiddleACR" Height="450" Width="800">
    <Grid>
        <!-- 로그를 표시할 ListBox -->
        <ListBox x:Name="LogListBox" ItemsSource="{Binding LogMessages}" />
    </Grid>
</Window>
ListBox의 ItemsSource 속성을 LogMessages로 바인딩합니다. 이때, DataContext가 MainViewModel로 설정되어 있어야 합니다.
3. 값 변경 시 자동 갱신
MainWindow.xaml.cs 파일에서 MainViewModel의 AddLogMessage 메서드를 호출하여 로그 메시지를 추가합니다:

csharp
코드 복사
using System.Windows;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            // 로그 메시지 추가 예시
            _viewModel.AddLogMessage("Application started.");
        }
    }
}
AddLogMessage 메서드를 호출하여 로그 메시지를 추가하면, ObservableCollection<string>에 값이 추가되고, 이로 인해 UI가 자동으로 갱신됩니다.
정리
ObservableCollection<T>는 WPF에서 데이터 바인딩을 지원하며, 컬렉션의 변경 사항이 UI에 자동으로 반영되도록 합니다.
ObservableCollection<T>에 값을 추가하거나 삭제하면 CollectionChanged 이벤트가 발생하고, WPF 바인딩 시스템이 이를 감지하여 UI를 갱신합니다.
UI 요소의 ItemsSource를 ObservableCollection<T>에 바인딩하면, 데이터가 변경될 때마다 UI가 자동으로 업데이트됩니다.
이 방식을 사용하면 데이터 변경 시 UI 갱신을 수동으로 처리할 필요가 없기 때문에, 코드가 간결해지고 유지보수가 용이해집니다.