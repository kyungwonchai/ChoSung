니다. 사용자가 진동과 소리를 충분히 인지할 수 있도록 진동과 사운드를 길게 유지하고, 팝업 창을 띄워 사용자가 터치하면 꺼지도록 구현하겠습니다. 이 기능은 AlertDialog를 사용하여 팝업 창을 띄우고, 사용자가 창을 닫을 때 소리와 진동을 멈추도록 할 수 있습니다.

구현 개요
진동 및 사운드 재생: Vibrator와 MediaPlayer를 사용하여 진동과 사운드를 동시에 시작합니다.
팝업 창 띄우기: 사용자가 팝업 창을 터치하면 진동과 사운드가 멈추도록 합니다.
사용자 권한 처리: Android 12(API 31) 이상에서 진동 권한을 요청해야 하므로 권한 요청을 포함합니다.
코드 구현
아래는 이 기능을 구현한 전체 코드입니다.

kotlin
코드 복사
package com.dxmxsmd.routeracralarm

import android.Manifest
import android.app.AlertDialog
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.AudioAttributes
import android.media.MediaPlayer
import android.media.RingtoneManager
import android.net.Uri
import android.os.*
import android.util.Log
import android.widget.Button
import android.widget.CheckBox
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.lifecycle.lifecycleScope
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var notificationManager: NotificationManager
    private lateinit var vibrationCheckBox: CheckBox
    private lateinit var viewMessagesButton: Button
    private var wakeLock: PowerManager.WakeLock? = null
    private var mediaPlayer: MediaPlayer? = null
    private var vibrator: Vibrator? = null

    // 런타임 권한 요청을 위한 launcher 정의
    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        if (isGranted) {
            Log.d("Permission", "Notification permission granted")
        } else {
            Log.d("Permission", "Notification permission denied")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 진동 체크박스 초기화
        vibrationCheckBox = findViewById(R.id.vibrationCheckBox)

        // 최근 메시지 보기 버튼 초기화 및 클릭 리스너 설정
        viewMessagesButton = findViewById(R.id.viewMessagesButton)
        viewMessagesButton.setOnClickListener {
            openOrReplaceDataActivity() // DataActivity 열기 또는 교체
        }

        // 알림 채널 생성
        createNotificationChannel()

        // Android 13 이상에서 알림 권한 요청
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            requestNotificationPermission()
        }

        // Android 12 이상에서 진동 권한 요청
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            requestVibrationPermission()
        }

        // Wake Lock 설정
        acquireWakeLock()

        // SignalR 서버 연결 설정
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        // SignalR 메시지 수신 대기
        hubConnection.on("ReceiveMessage", { message: String ->
            showNotification(message) // 메시지 수신 시 알림
            openOrReplaceDataActivity() // DataActivity 열기 또는 기존 액티비티 교체

            // 메시지에 "err1"이 포함되어 있으면 사운드와 진동 재생 후 팝업 창 띄우기
            if (message.contains("err1", ignoreCase = true)) {
                playAlarmAndVibration()
                showAlertDialog()
            }
        }, String::class.java)

        lifecycleScope.launch {
            try {
                hubConnection.start().blockingAwait()
                Log.d("SignalR", "Connected to SignalR server.")
            } catch (e: Exception) {
                Log.e("SignalR", "SignalR connection failed", e)
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        releaseWakeLock() // 액티비티가 파괴될 때 Wake Lock 해제
        stopAlarmAndVibration() // 미디어 플레이어와 진동 해제
    }

    private fun acquireWakeLock() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        wakeLock = powerManager.newWakeLock(
            PowerManager.SCREEN_DIM_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
            "RouterACRAlarm::WakeLock"
        )
        wakeLock?.acquire()
    }

    private fun releaseWakeLock() {
        wakeLock?.let {
            if (it.isHeld) {
                it.release()
            }
        }
    }

    private fun playAlarmAndVibration() {
        // 사운드 재생 설정
        try {
            val alarmSound: Uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)
                ?: RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)

            mediaPlayer = MediaPlayer().apply {
                setAudioAttributes(
                    AudioAttributes.Builder()
                        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                        .setUsage(AudioAttributes.USAGE_ALARM)
                        .build()
                )
                setDataSource(this@MainActivity, alarmSound)
                isLooping = true // 사운드를 반복 재생
                prepare()
                start()
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "Failed to play alarm sound", e)
        }

        // 진동 설정
        vibrator = getSystemService(Context.VIBRATOR_SERVICE) as Vibrator
        if (vibrationCheckBox.isChecked) {
            val pattern = longArrayOf(0, 1000, 1000) // 진동 패턴 (1초 진동, 1초 멈춤)
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                vibrator?.vibrate(
                    VibrationEffect.createWaveform(pattern, 0) // 0: 반복 진동
                )
            } else {
                vibrator?.vibrate(pattern, 0) // 0: 반복 진동
            }
        }
    }

    private fun stopAlarmAndVibration() {
        mediaPlayer?.let {
            if (it.isPlaying) {
                it.stop()
                it.release()
            }
        }
        vibrator?.cancel()
    }

    private fun showAlertDialog() {
        // 팝업 창 설정
        val builder = AlertDialog.Builder(this)
        builder.setTitle("알림")
            .setMessage("문제를 확인하고 창을 터치하여 경고음을 종료하세요.")
            .setPositiveButton("확인") { dialog, _ ->
                stopAlarmAndVibration() // 사운드와 진동 멈춤
                dialog.dismiss()
            }
            .setCancelable(false) // 사용자가 창을 닫기 전까지 팝업이 꺼지지 않음
        builder.create().show()
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SignalR Channel"
            val descriptionText = "Channel for SignalR notifications"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel("SIGNALR_CHANNEL", name, importance).apply {
                description = descriptionText
            }
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        } else {
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        }
    }

    private fun requestNotificationPermission() {
        when {
            ActivityCompat.checkSelfPermission(
                this, Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED -> {
                Log.d("Permission", "Notification permission already granted")
            }
            else -> {
                requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
            }
        }
    }

    private fun requestVibrationPermission() {
        if (ActivityCompat.checkSelfPermission(
                this, Manifest.permission.VIBRATE
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this, arrayOf(Manifest.permission.VIBRATE), 0
            )
        }
    }

    private fun openOrReplaceDataActivity() {
        val intent = Intent(this, DataActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK
        startActivity(intent)
    }
}
설명
사운드와 진동 재생:

playAlarmAndVibration 함수는 사운드와 진동을 동시에 시작합니다. 진동은 VibrationEffect를 사용하여 패턴을 설정하고 반복합니다.
mediaPlayer를 사용하여 알람 소리를 반복 재생합니다.
팝업 창 띄우기: