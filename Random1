ontrol에 동적으로 버튼을 추가할 때, 특정 페이지(예: "File")에 서로 다른 그룹에 속하는 여러 버튼을 추가하고, 해당 페이지가 이미 존재하면 이를 감지하여 그룹만 추가하는 방법을 설명하겠습니다. 또한, 모든 버튼의 아이콘은 프로젝트 리소스의 "Donut" 이미지로 설정하겠습니다.

1. 버튼 설정을 위한 클래스 및 딕셔너리 정의:

각 버튼의 속성을 관리하기 위해 ButtonConfig 클래스를 정의하고, 이를 저장하는 딕셔너리를 생성합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System.Collections.Generic;
using System.Drawing; // Image를 사용하기 위해 필요
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    // 버튼 설정을 위한 클래스 정의
    public class ButtonConfig
    {
        public string GroupName { get; set; }
        public string ButtonName { get; set; }
        public string Caption { get; set; }
        public string Tag { get; set; }
        public RibbonItemStyles Style { get; set; }
    }

    // 버튼 설정을 저장할 딕셔너리
    private Dictionary<string, ButtonConfig> buttonConfigs = new Dictionary<string, ButtonConfig>
    {
        { "btnNew", new ButtonConfig { GroupName = "FileOperations", ButtonName = "btnNew", Caption = "새로 만들기", Tag = "NewDocument", Style = RibbonItemStyles.Large } },
        { "btnOpen", new ButtonConfig { GroupName = "FileOperations", ButtonName = "btnOpen", Caption = "열기", Tag = "OpenDocument", Style = RibbonItemStyles.Large } },
        { "btnSave", new ButtonConfig { GroupName = "FileOperations", ButtonName = "btnSave", Caption = "저장", Tag = "SaveDocument", Style = RibbonItemStyles.Large } },
        { "btnPrint", new ButtonConfig { GroupName = "Print", ButtonName = "btnPrint", Caption = "인쇄", Tag = "PrintDocument", Style = RibbonItemStyles.Large } },
        { "btnHelp", new ButtonConfig { GroupName = "Support", ButtonName = "btnHelp", Caption = "도움말", Tag = "Help", Style = RibbonItemStyles.SmallWithText } }
    };

    public MainForm()
    {
        InitializeComponent();

        // 커스텀 버튼 추가 메서드 호출
        AddCustomButtons("File");

        // 체크박스 생성 및 설정
        CheckBox toggleButtonVisibilityCheckBox = new CheckBox
        {
            Text = "커스텀 버튼 표시",
            Checked = true, // 기본적으로 체크 상태 (버튼 표시)
            AutoSize = true,
            Dock = DockStyle.Top
        };

        // 체크박스의 체크 상태 변경 이벤트 핸들러 등록
        toggleButtonVisibilityCheckBox.CheckedChanged += ToggleButtonVisibilityCheckBox_CheckedChanged;

        // 체크박스를 폼에 추가
        this.Controls.Add(toggleButtonVisibilityCheckBox);
    }

    private void AddCustomButtons(string pageName)
    {
        // RibbonControl 인스턴스가 'ribbonK'라고 가정합니다.

        // RibbonPage 찾기
        RibbonPage page = ribbonK.Pages.FirstOrDefault(p => p.Name == pageName);
        if (page == null)
        {
            // 페이지가 없으면 생성하여 추가
            page = new RibbonPage(pageName) { Text = pageName };
            ribbonK.Pages.Add(page);
        }

        // 그룹별로 버튼 추가
        foreach (var groupConfig in buttonConfigs.GroupBy(b => b.Value.GroupName))
        {
            string groupName = groupConfig.Key;

            // RibbonPageGroup 찾기
            RibbonPageGroup group = page.Groups.FirstOrDefault(g => g.Name == groupName);
            if (group == null)
            {
                // 그룹이 없으면 생성하여 추가
                group = new RibbonPageGroup(groupName) { Text = groupName };
                page.Groups.Add(group);
            }

            // 그룹에 속하는 버튼들 추가
            foreach (var buttonConfig in groupConfig)
            {
                var config = buttonConfig.Value;

                // BarButtonItem 생성
                BarButtonItem newButton = new BarButtonItem
                {
                    Name = config.ButtonName,
                    Caption = config.Caption,
                    Tag = config.Tag,
                    Id = ribbonK.Manager.GetNewItemId(),
                    ImageOptions = { Image = Properties.Resources.Donut }, // 아이콘 설정
                    RibbonStyle = config.Style
                };

                // 그룹에 새로운 버튼 추가
                group.ItemLinks.Add(newButton);
            }
        }
    }

    private void ToggleButtonVisibilityCheckBox_CheckedChanged(object sender, System.EventArgs e)
    {
        CheckBox checkBox = sender as CheckBox;
        bool isChecked = checkBox.Checked;

        // 딕셔너리에 정의된 버튼들의 가시성 설정
        foreach (var config in buttonConfigs.Values)
        {
            BarButtonItem button = ribbonK.Items.OfType<BarButtonItem>().FirstOrDefault(b => b.Name == config.ButtonName);
            if (button != null)
            {
                button.Visibility = isChecked ? BarItemVisibility.Always : BarItemVisibility.Never;
            }
        }
    }
}
코드 설명:

ButtonConfig 클래스 정의:

각 버튼의 그룹 이름(GroupName), 버튼 이름(ButtonName), 캡션(Caption), 태그(Tag), 스타일(Style)을 속성으로 가집니다.
buttonConfigs 딕셔너리 생성:

버튼 이름을 키로 사용하고, ButtonConfig 객체를 값으로 가지는 딕셔너리를 생성합니다.
모든 버튼의 아이콘은 Properties.Resources.Donut으로 설정됩니다.
AddCustomButtons 메서드:

지정된 페이지 이름(pageName)을 받아 해당 페이지를 찾고, 없으면 생성합니다.
buttonConfigs를 그룹 이름별로 그룹화하여 각 그룹에 대해 RibbonPageGroup을 찾고, 없으면 생성하여 페이지에 추가합니다.
각 그룹에 속하는 버튼들을 생성하여 해당 그룹에 추가합니다.
체크박스를 통한 버튼 가시성 제어:

체크박스의 체크 상태에 따라 buttonConfigs에 정의된 버튼들의 가시성을 설정합니다.
참고 사항: