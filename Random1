kinableForm에서 더블 클릭 문제가 발생하는 이유는 DevExpress에서 제공하는 폼이 Windows 메시지를 완전히 제어하고 있기 때문입니다. 기본적으로 더블 클릭은 WM_NCLBUTTONDBLCLK 메시지로 처리되지만, SkinableForm에서는 이 메시지가 차단되거나 DevExpress 내부적으로 처리되면서 정상적으로 동작하지 않을 수 있습니다.

지금 상황에서 우클릭은 반응하지만 좌클릭은 반응하지 않는 문제를 해결하려면, Windows 메시지를 강제로 처리하거나 DevExpress의 이벤트 루프를 우회하여 더블 클릭을 확실히 감지해야 합니다.

해결책: 강제 더블 클릭 처리
코드 구현
아래 코드는 Windows 메시지 및 MouseEventArgs를 결합하여 더블 클릭을 정확히 처리합니다.

csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;
    private Rectangle titleBarBounds; // 타이틀바 영역
    private const int TitleBarHeight = 30;

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, TitleBarHeight, 0, 0); // 타이틀바 높이 확보
        this.DoubleBuffered = true; // 깜빡임 방지

        // 타이틀바 영역 초기화
        titleBarBounds = new Rectangle(0, 0, this.Width, TitleBarHeight);

        // 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 타이틀바와 버튼 위치 업데이트
        this.SizeChanged += UpdateLayout;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        var button = new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            }
        };
        button.Click += clickHandler; // 클릭 이벤트 등록
        return button;
    }

    private void UpdateLayout(object sender, EventArgs e)
    {
        // 버튼 위치 업데이트
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
        titleBarBounds = new Rectangle(0, 0, this.Width, TitleBarHeight); // 타이틀바 영역 재설정
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, new Rectangle(0, 0, this.Width, TitleBarHeight));
        }

        // 타이틀바 텍스트
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    protected override void WndProc(ref Message m)
    {
        base.WndProc(ref m);

        // 강제로 좌클릭 더블 클릭 처리
        if (m.Msg == 0x203 && titleBarBounds.Contains(PointToClient(Cursor.Position))) // WM_LBUTTONDBLCLK
        {
            ToggleMaximizeRestore();
        }
    }

    private void ToggleMaximizeRestore()
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        ToggleMaximizeRestore(); // 최대화/복원
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
핵심 변경 사항
더블 클릭 강제 처리:

WndProc에서 WM_LBUTTONDBLCLK 메시지(값: 0x203)를 감지.
더블 클릭이 타이틀바 영역(titleBarBounds)에서 발생했는지 확인 후 창의 상태를 전환.
타이틀바 좌클릭 이벤트 정상화: