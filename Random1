적인 방법입니다. 이 작업을 수행하기 위해 사용자 정의 함수나 저장 프로시저를 생성할 수 있습니다. 여기서는 간단한 사용자 정의 함수를 예시로 들어 설명하겠습니다.

함수는 로그 데이터를 매개변수로 받아, 해당 데이터를 로그 테이블에 삽입하는 작업을 수행합니다. 아래 예시 코드는 이를 구현한 것입니다.

sql
Copy code
CREATE FUNCTION dbo.InsertLog
(
    @LogMessage NVARCHAR(MAX),
    @LogDate DATETIME = NULL
)
RETURNS INT
AS
BEGIN
    IF @LogDate IS NULL
        SET @LogDate = GETDATE();

    INSERT INTO dbo.LogTable (Message, LogDate)
    VALUES (@LogMessage, @LogDate);

    RETURN SCOPE_IDENTITY();
END;
이 함수는 @LogMessage와 @LogDate (선택적) 두 매개변수를 사용합니다. @LogDate가 제공되지 않으면 현재 날짜와 시간이 사용됩니다. 함수는 dbo.LogTable에 로그 메시지와 날짜를 삽입한 후, 생성된 로그의 ID를 반환합니다.

사용 예시:

sql
Copy code
DECLARE @LogID INT;
SET @LogID = dbo.InsertLog('샘플 로그 메시지', '2023-11-21T14:00:00');

SELECT '생성된 로그 ID: ' + CAST(@LogID AS NVARCHAR);
주의사항:

이 예시는 dbo.LogTable이라는 테이블이 이미 존재하고, Message와 LogDate 두 컬럼이 있다고 가정합니다.
함수와 테이블 생성 시, 실제 데이터베이스 구조에 맞게 조정이 필요합니다.
로그 기록은 자주 발생하는 작업이므로, 함수의 성능 및 테이블 인덱싱에 주의를 기울여야 합니다.
이 코드를 기반으로 실제 환경에 맞게 