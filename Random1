모든 연결이 "Closed"로 표시된다면 다음을 확인하고 문제를 해결해야 합니다. 아래는 문제의 원인과 해결 방안을 정리한 것입니다.

1. 포트 접근 제한
원인:
Flask 서버가 실행 중인 PC에서 타겟 IP/포트로 연결 시도 중 방화벽이나 네트워크 제한이 있을 수 있습니다.
타겟 포트가 특정 프로토콜(TCP/UDP)에만 열려 있을 수 있습니다.
해결:
방화벽 확인:
Flask 서버가 실행 중인 PC에서 타겟 포트로 연결이 가능한지 확인합니다.
Windows:
bash
코드 복사
telnet <IP> <PORT>
Linux/Ubuntu:
bash
코드 복사
nc -zv <IP> <PORT>
성공하면 "Connection successful" 또는 유사 메시지가 나타납니다.
포트 프로토콜 확인:
Flask 코드에서 socket.create_connection()은 TCP 연결만 지원합니다.
UDP 포트를 확인하려면 별도의 라이브러리나 방법을 사용해야 합니다.
2. Flask 코드 타임아웃 문제
원인:
socket.create_connection()의 기본 타임아웃이 너무 짧아 연결 시도가 실패할 수 있습니다.
해결:
타임아웃을 늘려 포트 접근 시도를 안정화합니다.

python
코드 복사
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=5):  # 타임아웃을 5초로 설정
            return True
    except Exception as e:
        print(f"Error connecting to {ip}:{port} - {e}")  # 디버깅용 에러 메시지 출력
        return False
3. 클라이언트-서버 네트워크 차단
원인:
Flask 서버가 실행 중인 PC에서 타겟 IP/포트로의 트래픽이 차단되었을 수 있습니다.
클라이언트와 Flask 서버가 다른 네트워크 세그먼트에 있을 경우, 라우팅 문제가 발생할 수 있습니다.
해결:
같은 네트워크 확인:

Flask 서버와 타겟 IP가 동일 네트워크에 있는지 확인합니다.
ping <IP> 명령어로 확인.
라우팅 확인:

클라이언트가 다른 서브넷에 있는 경우, 라우터에서 라우팅 정책을 확인해야 합니다.
4. 실제 서버 상태 확인
원인:
대상 서버의 포트가 실제로 열려 있지 않거나, 접근이 제한될 수 있습니다.
해결:
Flask 서버에서 수동으로 연결 확인:
bash
코드 복사
telnet 10.10.100.11 80
성공하면 연결 가능한 상태입니다.
실패하면 대상 서버 또는 네트워크 설정 문제입니다.
서버 포트 열림 상태 확인:
대상 서버에서 열려 있는 포트 확인 (Linux 기준):
bash
코드 복사
sudo netstat -tuln
포트가 열려 있지 않다면 해당 서비스를 시작하거나 포트를 열어야 합니다.
5. UDP 포트 확인 필요
원인:
Flask 코드는 기본적으로 TCP만 확인합니다.
UDP를 확인하려면 별도로 구현해야 합니다.
해결:
UDP 확인 코드 추가:

python
코드 복사
import socket

def check_udp_port(ip, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        sock.settimeout(2)
        sock.sendto(b"test", (ip, port))
        sock.close()
        return True
    except Exception as e:
        print(f"Error with UDP {ip}:{port} - {e}")
        return False
디버깅 로그 추가
코드에 디버깅 정보를 추가해 문제를 정확히 파악합니다.

python
코드 복사
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=5):
            print(f"Connection successful: {ip}:{port}")
            return True
    except Exception as e:
        print(f"Connection failed: {ip}:{port} - {e}")
        return False
Flask 서버 실행 후 터미널 로그를 확인하여 어떤 문제가 발생했는지 분석합니다.

최종 업데이트된 Flask 코드
python
코드 복사
from flask import Flask, jsonify, render_template, request
import socket

app = Flask(__name__)

def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=5):  # 타임아웃 5초
            print(f"Connection successful: {ip}:{port}")
            return True
    except Exception as e:
        print(f"Connection failed: {ip}:{port} - {e}")
        return False

@app.route('/ipchk', methods=['GET', 'POST'])
def ip_check():
    if request.method == 'POST':
        data = request.json
        ip_ports = data.get('ip_ports', [])
        results = []

        for entry in ip_ports:
            ip = entry.get('ip')
            ports = entry.get('ports', [])
            for port in ports:
                status = check_port(ip, port)
                results.append({
                    "ip": ip,
                    "port": port,
                    "status": "Open" if status else "Closed"
                })
        return jsonify(results)

    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
디버깅 방법 요약
Flask 서버 실행 후 터미널에서 출력되는 로그 확인.
대상 포트가 TCP 또는 UDP인지 확인 후 적절한 코드 사용.