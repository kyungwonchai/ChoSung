알겠습니다. EsdCheckSync 클래스를 EsdCheckMiddleSync로 명칭을 변경하고, 필요한 주석을 추가하며, 중간 테이블을 생성하는 스크립트와 함께 제공하겠습니다.

새로운 테이블 생성 스크립트 (MSSQL):
sql
코드 복사
CREATE TABLE ESD_CHECK_MIDDLE (
    USER_CARD_ID NVARCHAR(50) PRIMARY KEY,
    USER_NAME NVARCHAR(100),
    WORK_GROUP NVARCHAR(50),
    ESD_CHECK_TF NVARCHAR(50),
    UPDATE_TIME DATETIME,
    INSERTED_TO_SOURCE BIT DEFAULT 0,
    INSERTED_TIME DATETIME NULL
);
EsdCheckMiddleSync 클래스:
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;

public class EsdCheckMiddleSync
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string middleConnectionString = "Data Source=MiddleServer;Initial Catalog=MiddleDB;User ID=YourUsername;Password=YourPassword";
    private string oracleConnectionString = "Data Source=OracleServer;User ID=YourUsername;Password=YourPassword";

    // 데이터 동기화를 시작하고 로그 액션을 인수로 받음
    public async Task StartDataSyncAsync(Action<string> logAction)
    {
        // 오라클 데이터 동기화
        logAction("Starting Initial Oracle Data Sync...");
        await SyncOracleDataAsync(logAction);
        logAction("Initial Oracle Data Sync Completed.");

        // 중간 데이터에서 소스 데이터베이스로 동기화
        _ = SyncDataFromMiddleToSourceAsync(logAction);
    }

    // Oracle 데이터를 중간 데이터베이스로 동기화하는 함수
    private async Task SyncOracleDataAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting Oracle Data Sync...");

            DataTable oracleData = await GetOracleDataAsync(); // 오라클 데이터 가져오기
            DataTable middleData = await GetMiddleDataAsync(); // 중간 데이터 가져오기

            foreach (DataRow oracleRow in oracleData.Rows)
            {
                DataRow[] middleRows = middleData.Select($"USER_CARD_ID = '{oracleRow["USER_CARD_ID"]}'");

                if (middleRows.Length == 0)
                {
                    await InsertMiddleRowAsync(oracleRow); // 중간 테이블에 새로운 행 삽입
                    logAction($"Inserted new row for USER_CARD_ID: {oracleRow["USER_CARD_ID"]}");
                }
            }

            await Task.Delay(TimeSpan.FromMinutes(1)); // 1분 대기
        }
    }

    // 오라클 데이터 가져오는 함수
    private async Task<DataTable> GetOracleDataAsync()
    {
        using (OracleConnection conn = new OracleConnection(oracleConnectionString))
        {
            await conn.OpenAsync();
            string query = @"SELECT u.USER_CARD_ID, u.USER_NAME, u.work_group, e.USER_CARD_ID, e.esd_check_tf, e.update_time 
                             FROM ut_esc_user u 
                             JOIN ut_esd_check_status_list e ON u.user_card_id = e.user_card_id 
                             WHERE u.work_group = 'REPAIR' AND e.update_TIME >= SYSDATE - INTERVAL '1000' HOUR";
            OracleDataAdapter adapter = new OracleDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 중간 데이터 가져오는 함수
    private async Task<DataTable> GetMiddleDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(middleConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT USER_CARD_ID FROM ESD_CHECK_MIDDLE";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 중간 테이블에 새로운 행 삽입하는 함수
    private async Task InsertMiddleRowAsync(DataRow oracleRow)
    {
        using (SqlConnection conn = new SqlConnection(middleConnectionString))
        {
            await conn.OpenAsync();
            string query = @"INSERT INTO ESD_CHECK_MIDDLE (USER_CARD_ID, USER_NAME, WORK_GROUP, ESD_CHECK_TF, UPDATE_TIME) 
                             VALUES (@USER_CARD_ID, @USER_NAME, @WORK_GROUP, @ESD_CHECK_TF, @UPDATE_TIME)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", oracleRow["USER_CARD_ID"]);
            cmd.Parameters.AddWithValue("@USER_NAME", oracleRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@WORK_GROUP", oracleRow["WORK_GROUP"]);
            cmd.Parameters.AddWithValue("@ESD_CHECK_TF", oracleRow["esd_check_tf"]);
            cmd.Parameters.AddWithValue("@UPDATE_TIME", oracleRow["update_time"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    // 중간 데이터에서 소스 데이터베이스로 동기화하는 함수
    private async Task SyncDataFromMiddleToSourceAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting Data Sync from Middle to Source...");

            DataTable middleData = await GetMiddleDataAsync(); // 중간 데이터 가져오기

            foreach (DataRow middleRow in middleData.Rows)
            {
                if (!(bool)middleRow["INSERTED_TO_SOURCE"])
                {
                    string userCardId = middleRow["USER_CARD_ID"].ToString();
                    DataTable sourceData = await GetSourceDataAsync(userCardId);

                    if (sourceData.Rows.Count > 0)
                    {
                        await InsertSourceDataAsync(sourceData.Rows[0]); // 소스 테이블에 새로운 행 삽입
                        logAction($"Inserted new row for USER_CARD_ID: {userCardId} in ESC_CHECK_HISTORY");

                        // 중간 테이블 업데이트
                        await UpdateMiddleTableAsync(userCardId);
                    }
                }
            }

            await Task.Delay(TimeSpan.FromMinutes(1)); // 1분 대기
        }
    }

    // 소스 데이터 가져오는 함수
    private async Task<DataTable> GetSourceDataAsync(string userCardId)
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = @"SELECT USER_CARD_ID, USER_NAME, WORK_GROUP, ESD_CHECK_TF, UPDATE_TIME 
                             FROM ESD_CHECK_MIDDLE 
                             WHERE USER_CARD_ID = @USER_CARD_ID"; // 중간 테이블 이름으로 변경
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", userCardId);
            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 소스 테이블에 새로운 행 삽입하는 함수
    private async Task InsertSourceDataAsync(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = @"INSERT INTO ESC_CHECK_HISTORY (USER_CARD_ID, USER_NAME, WORK_GROUP, ESD_CHECK_TF, UPDATE_TIME) 
                             VALUES (@USER_CARD_ID, @USER_NAME, @WORK_GROUP, @ESD_CHECK_TF, @UPDATE_TIME)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", sourceRow["USER_CARD_ID"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@WORK_GROUP", sourceRow["WORK_GROUP"]);
            cmd.Parameters.AddWithValue("@ESD_CHECK_TF", sourceRow["ESD_CHECK_TF"]);
            cmd.Parameters.AddWithValue("@UPDATE_TIME", sourceRow["UPDATE_TIME"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    // 중간 테이블을 업데이트하는 함수
    private async Task UpdateMiddleTableAsync(string userCardId)
    {
        using (SqlConnection conn = new SqlConnection(middleConnectionString))
        {
            await conn.OpenAsync();
            string query = "UPDATE ESD_CHECK_MIDDLE SET INSERTED_TO_SOURCE = 1, INSERTED_TIME = @INSERTED_TIME WHERE USER_CARD_ID = @USER_CARD_ID";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@INSERTED_TIME", DateTime.Now);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", userCardId);
            await cmd.ExecuteNonQueryAsync();
        }
    }
}
MainWindow.xaml.cs 수정:
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace DataSyncApp
{
    public partial class MainWindow : Window
    {
        private DataSync dataSync;
        private EsdCheckMiddleSync esdCheckMiddleSync;

        public MainWindow()
        {
            InitializeComponent();
            dataSync = new DataSync();
            esdCheckMiddleSync = new EsdCheckMiddleSync();

            Task.Run(() => dataSync.StartDataSyncAsync(LogAction1));
            Task.Run(() => esdCheckMiddleSync.StartDataSyncAsync(LogAction2));
        }

        private async void LoadDataButton_Click(object sender, RoutedEventArgs e)
        {
            await LoadGridControlAsync();
        }

        private async Task LoadGridControlAsync()
        {
            DataTable targetData = await dataSync.GetTargetDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                where string.IsNullOrEmpty(target.Field<string>("USER_CARD_ID"))
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = "Not Matched",
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            dataGrid.ItemsSource = unmatchedRows.ToList();

            foreach (var item in dataGrid.Items)
            {
                DataGridRow row = (DataGridRow)dataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null && ((dynamic)row.Item).USER_CARD_ID == "Not Matched")
                {
                    row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.Column.Header.ToString() == "USER_CARD_ID")
            {
                string userName = ((TextBox)e.EditingElement).Text;
                string userCardId = ((TextBox)e.EditingElement).Text;

                // Handle manual input for USER_CARD_ID
                // For example, you might update a local list or another table in the database.
            }
        }

        private void LogAction1(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox1.Items.Count >= 500)
                {
                    logListBox1.Items.Clear();
                }
                logListBox1.Items.Add(message);
            });
        }

        private void LogAction2(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox2.Items.Count >= 500)
                {
                    logListBox2.Items.Clear();
                }
                logListBox2.Items.Add(message);
            });
        }
    }
}
이제 EsdCheckMiddleSync 클래스는 오라클 데이터베이스에서 데이터를 가져와 중간 테이블에 삽입하고, 중간 테이블에서 소스 데이터베이스로 데이터를 전송합니다. 작업은 1분마다 수행되며, 필요한 로그는 두 개의 ListBox에 각각 표시됩니다. MainWindow.xaml과 MainWindow.xaml.cs 파일만 수정하시면 됩니다.