에서 데이터베이스 업데이트
사용자가 색상을 선택하여 CellColor 값이 변경되면, CellValueChanged 이벤트가 호출되어 변경된 값을 데이터베이스에 반영합니다.

csharp
코드 복사
private void OnCellValueChanged(object sender, DevExpress.Xpf.Grid.CellValueChangedEventArgs e)
{
    // 변경된 셀의 TaskModel 객체를 가져옴
    var updatedTask = e.Row as TaskModel;
    
    if (updatedTask != null)
    {
        SaveTaskToDatabase(updatedTask);  // 변경된 항목을 데이터베이스에 저장
    }
}

// 데이터베이스 저장 메서드 예시
private void SaveTaskToDatabase(TaskModel task)
{
    using (var connection = new SqlConnection("your_connection_string"))
    {
        connection.Open();
        
        // 모든 컬럼을 업데이트하는 SQL 구문
        var command = new SqlCommand(@"
            UPDATE Tasks 
            SET 
                Priority = @Priority, 
                CreatedTime = @CreatedTime,
                UpdateCount = @UpdateCount,
                LastUpdateTime = @LastUpdateTime,
                FolderPath = @FolderPath,
                CellColor = @CellColor,  -- 색상 컬럼 업데이트
                Assignee = @Assignee,
                IsCompleted = @IsCompleted
            WHERE Id = @Id", connection);

        // 모든 파라미터 추가
        command.Parameters.AddWithValue("@Priority", task.Priority);
        command.Parameters.AddWithValue("@CreatedTime", task.CreatedTime);
        command.Parameters.AddWithValue("@UpdateCount", task.UpdateCount);
        command.Parameters.AddWithValue("@LastUpdateTime", task.LastUpdateTime);
        command.Parameters.AddWithValue("@FolderPath", task.FolderPath);
        command.Parameters.AddWithValue("@CellColor", task.CellColor.ToString()); // 색상 값을 문자열로 저장
        command.Parameters.AddWithValue("@Assignee", task.Assignee);
        command.Parameters.AddWithValue("@IsCompleted", task.IsCompleted);
        command.Parameters