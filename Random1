체적인 로직을 구현해 드리겠습니다.

csharp

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Forms;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using ClosedXML.Excel;

namespace PartAppUploader
{
    public partial class MainForm : Form
    {
        private const string connectionString = "YourConnectionString"; // 데이터베이스 연결 문자열

        public MainForm()
        {
            InitializeComponent();
        }

        private void UploadButton_Click(object sender, EventArgs e)
        {
            string downloadsFolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + "\\Downloads";
            string[] files = Directory.GetFiles(downloadsFolder, "PartAppSearch*.xlsx");

            foreach (string file in files)
            {
                // 엑셀 파일 처리 및 데이터베이스 업로드
                ProcessExcelFile(file);
            }

            MessageBox.Show("업로드가 완료되었습니다.");
        }

        private void ProcessExcelFile(string filePath)
        {
            using (XLWorkbook workbook = new XLWorkbook(filePath))
            {
                IXLWorksheet worksheet = workbook.Worksheet(1);

                bool hasData = true;
                int row = 4; // B4부터 시작

                while (hasData)
                {
                    string partCode = worksheet.Cell("B" + row.ToString()).Value.ToString();
                    string vendor = worksheet.Cell("C" + row.ToString()).Value.ToString();
                    string partNumber = worksheet.Cell("D" + row.ToString()).Value.ToString();
                    string approvalStatus = worksheet.Cell("E" + row.ToString()).Value.ToString();
                    string approvalDateStr = worksheet.Cell("F" + row.ToString()).Value.ToString();
                    string productName = worksheet.Cell("L" + row.ToString()).Value.ToString();
                    string specification = worksheet.Cell("M" + row.ToString()).Value.ToString();

                    if (string.IsNullOrEmpty(partCode))
                    {
                        hasData = false;
                        break;
                    }

                    DateTime approvalDate;
                    if (!DateTime.TryParse(approvalDateStr, out approvalDate))
                    {
                        approvalDate = DateTime.MinValue;
                    }

                    string key = partCode + vendor;

                    InsertOrUpdateData(key, partCode, vendor, partNumber, approvalStatus, approvalDate, productName, specification);

                    row++;
                }
            }
        }

        private void InsertOrUpdateData(string key, string partCode, string vendor, string partNumber, string approvalStatus, DateTime approvalDate, string productName, string specification)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string commandText = "IF EXISTS (SELECT * FROM PLM부품 WHERE [키] = @Key) " +
                                     "UPDATE PLM부품 SET [부쿰코드] = @PartCode, [업체명] = @Vendor, [업체PN] = @PartNumber, " +
                                     "[승인상태] = @ApprovalStatus, [승인일자] = @ApprovalDate, [품명] = @ProductName, [규격] = @Specification, " +
                                     "[업데이트시간] = GETDATE() WHERE [키] = @Key " +
                                     "ELSE " +
                                     "INSERT INTO PLM부품 ([키], [부쿰코드], [업체명], [업체PN], [승인상태], [승인일자], [품명], [규격],

User
이어서
ChatGPT

less

[업데이트시간]) " +
                                 "VALUES (@Key, @PartCode, @Vendor, @PartNumber, @ApprovalStatus, @ApprovalDate, @ProductName, @Specification, GETDATE())";

                using (SqlCommand command = new SqlCommand(commandText, connection))
                {
                    command.Parameters.AddWithValue("@Key", key);
                    command.Parameters.AddWithValue("@PartCode", partCode);
                    command.Parameters.AddWithValue("@Vendor", vendor);
                    command.Parameters.AddWithValue("@PartNumber", partNumber);
                    command.Parameters.AddWithValue("@ApprovalStatus", approvalStatus);
                    command.Parameters.AddWithValue("@ApprovalDate", approvalDate);
                    command.Parameters.AddWithValue("@ProductName", productName);
                    command.Parameters.AddWithValue("@Specification", specification);

                    command.ExecuteNonQuery();
                }
            }
        }
    }
}

위의 코드는 Downloads 폴더에서 "PartAppSearch"로 시작하는 모든 xlsx 파일을 찾아서 데이터베이스로 업로드하는 기능을 구현한 예시입니다. 코드를 사용하기 전에 데이터베이스 연결 문자열을 실제 환경에 맞게 수정해야 합니다.

SQL 스크립트:

sql

CREATE TABLE PLM부품
(
    [키] NVARCHAR(100) PRIMARY KEY,
    [부쿰코드] NVARCHAR(10),
    [업체명] NVARCHAR(100),
    [업체PN] NVARCHAR(100),
    [승인상태] NVARCHAR(100),
    [승인일자] DATETIME,
    [품명] NVARCHAR(100),
    [규격] NVARCHAR(100),
    [업데이트시간] DATETIME
)

위의 스크립트는 "PLM부품"이라는 테이블을 생성하는 SQL 문입니다. 테이블의 컬럼명은 문장에 제시된 대로 한글로 작성되었습니다. 테이블명이나 컬럼명이 실제 환경에 맞게 수정되어야 합니다.

위의 코드와 스크립트는 참고용으로 제공되었으며, 실제 업무 환경에 맞게 수정해야 합니다. 또한, 코드에 대한 예외 처리나 유효성 검사 등을 추가하여 안정성을 높이는 것이 좋습니다.