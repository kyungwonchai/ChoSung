여기 주신 규칙에 맞춰 수정된 코드와 XAML을 제공할게요. 규칙에 따라 정확한 수정 사항을 반영하고, 주석은 주신 그대로 유지했으며, 수정된 부분은 상세한 설명을 덧붙였습니다.

수정된 C# 코드 (CommandQueueViewModel)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;

public class CommandQueueViewModel : INotifyPropertyChanged
{
    public ObservableCollection<CommandItem> RemainingCommands { get; set; } = new ObservableCollection<CommandItem>();
    public ObservableCollection<CommandItem> ErrorCommands { get; set; } = new ObservableCollection<CommandItem>(); // 에러 리스트박스용 컬렉션
    public event PropertyChangedEventHandler PropertyChanged;

    private Queue<Func<Task<CommandResult>>> commandQueue = new Queue<Func<Task<CommandResult>>>();
    private bool _isProcessing;
    private bool _isQueueStopped; // 큐가 멈춘 상태를 확인하는 플래그
    private readonly DatabaseHelper _dbHelper;

    public int RetryLimit { get; set; } = 3; // 기본 재시도 횟수 3회
    public int RetryInterval { get; set; } = 3000; // 기본 재시도 간격 3초
    public int ResponseTimeout { get; set; } = 5000; // 응답 제한 시간 5초 (5000ms)
    public int MaximumQueueSize { get; set; } = 10; // 최대 큐 크기 10개
    public int MaximumErrorListSize { get; set; } = 20; // 최대 에러 리스트 크기

    private int _progress;
    public int Progress
    {
        get => _progress;
        set
        {
            if (_progress != value)
            {
                _progress = value;
                OnPropertyChanged(nameof(Progress)); // Progress 변경 시 UI 업데이트
            }
        }
    }

    public CommandQueueViewModel()
    {
        _dbHelper = new DatabaseHelper();
        _isProcessing = false; // 처리 중 상태 플래그 초기화
        _isQueueStopped = false; // 큐 멈춤 상태 초기화
        Progress = 0; // 초기값 0
    }

    // 외부 클래스에서 큐에 작업을 추가하려고 할 때 사용하는 함수
    public void AddAsyncTaskCommand(Func<Task<string>> asyncTask, string commandText, string sentCommand, Func<string, bool> responseValidator)
    {
        // 큐가 멈춘 상태이거나 최대 큐 크기를 초과한 경우 작업을 추가하지 않음
        if (_isQueueStopped || commandQueue.Count >= MaximumQueueSize)
        {
            ShowAlarm("Queue limit reached or stopped. No further commands can be added.");
            return;
        }

        // 정상적인 경우 작업 추가
        EnqueueTask(asyncTask, commandText, sentCommand, responseValidator);
    }

    // 큐에 작업을 추가하고 처리하는 함수
    private async void EnqueueTask(Func<Task<string>> taskFunc, string commandText, string sentCommand, Func<string, bool> responseValidator)
    {
        var newCommand = new CommandItem 
        { 
            CommandText = commandText, 
            Status = "Pending", 
            MaxRetryLimit = RetryLimit, // 최대 재시도 횟수 설정
            RetryCount = 0 // 초기 재시도 횟수는 0
        };

        App.Current.Dispatcher.Invoke(() =>
        {
            RemainingCommands.Add(newCommand); // 작업을 리스트박스에 추가
        });

        // 큐에 작업 추가
        commandQueue.Enqueue(async () =>
        {
            newCommand.Status = "Processing";
            int retryCount = 0;
            Stopwatch stopwatch = new Stopwatch(); // 응답 시간 측정용 스톱워치

            _isProcessing = true;

            while (retryCount < RetryLimit) // 재시도 횟수가 최대 재시도 횟수보다 적을 때까지 반복
            {
                try
                {
                    stopwatch.Restart(); // 응답 시간 측정 시작
                    string result = await taskFunc(); // 비동기 작업 실행
                    stopwatch.Stop(); // 응답 시간 측정 완료

                    int responseTime = (int)stopwatch.ElapsedMilliseconds; // 응답 시간 계산
                    newCommand.ResponseTime = responseTime; // 응답 시간 저장
                    newCommand.RetryCount = retryCount + 1; // 재시도 횟수 업데이트 (리스트박스에 1, 2, 3회로 표시됨)

                    // 응답 시간이 초과되면 큐 처리를 멈추고 모든 작업을 중단
                    if (responseTime > ResponseTimeout)
                    {
                        newCommand.Status = "Timeout"; // 응답 시간 초과로 실패 처리
                        ShowAlarm("Timeout occurred. All tasks stopped.");
                        newCommand.Result = 0;
                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, "Timeout", "Failed", newCommand.Result, retryCount, responseTime, "Response Timeout");
                        StopQueueProcessing(newCommand); // 큐 처리 중단 및 에러 추가, 더 이상 큐에 추가하지 않음
                        return new CommandResult { Success = false, Message = "Response Timeout" };
                    }

                    // 정상 응답일 경우 작업 완료 처리
                    if (responseValidator(result))
                    {
                        newCommand.Status = "Completed"; // 성공 처리
                        newCommand.Result = 1; // 성공 플래그
                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, newCommand.Output);
                        UpdateProgress(); // 작업 완료 시 Progress 업데이트
                        _isProcessing = false; // 작업 완료 후 처리 중 해제
                        return new CommandResult { Success = true, Message = result };
                    }
                    else
                    {
                        retryCount++;
                        newCommand.Status = "Retrying"; // 재시도 중임을 표시
                        ShowAlarm($"Retrying {retryCount}/{RetryLimit} due to incorrect response.");
                        
                        if (retryCount >= RetryLimit)
                        {
                            newCommand.Status = "Failed"; // 실패 처리
                            newCommand.Result = 0; // 실패 플래그
                            await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Failed", newCommand.Result, retryCount, responseTime, result);
                            ShowAlarm("Queue has been stopped over retry count. All tasks stopped.");
                            StopQueueProcessing(newCommand); // 실패 후 큐 처리 중단 및 추가 작업 차단
                            return new CommandResult { Success = false, Message = result };
                        }
                        await Task.Delay(RetryInterval); // 재시도 간격 대기
                    }
                }
                catch (Exception ex)
                {
                    newCommand.Status = "Failed"; // 실패 처리
                    newCommand.Result = 0; // 실패 플래그
                    stopwatch.Stop(); // 예외 시에도 응답 시간 측정 종료
                    int responseTime = (int)stopwatch.ElapsedMilliseconds;

                    newCommand.ResponseTime = responseTime; // 예외 발생 시에도 응답 시간 기록
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);
                    ShowAlarm("Error occurred. All tasks stopped.");
                    StopQueueProcessing(newCommand); // 예외 발생 시 큐 처리 중단 및 추가 작업 차단
                    return new CommandResult { Success = false, Message = ex.Message };
                }
            }

            UpdateProgress(); // 최종적으로 Progress 업데이트
            _isProcessing = false; // 모든 작업 종료 후 플래그 해제
            return new CommandResult { Success = false };
        });

        // 큐에서 작업이 시작되지 않았으면 처리 시작
        if (!_isProcessing)
        {
            _isProcessing = true;
            await ProcessCommandQueue(); // 큐에 있는 작업을 처리
        }

        UpdateProgress(); // 프로그레스바 상태 업데이트
    }

    // 큐에서 작업을 순차적으로 처리하는 함수
    private async Task ProcessCommandQueue()
    {
        while (commandQueue.Count > 0)
        {
            var command = commandQueue.Dequeue(); // 큐에서 작업을 꺼냄
            await command(); // 큐에 있는 작업 실행
            UpdateProgress(); // 작업 진행에 따라 ProgressBar 업데이트
        }

        _isProcessing = false; // 모든 작업 완료 후 처리 중 상태 해제
    }

    // 큐 처리 중단 및 추가 작업 차단 함수
    private void StopQueueProcessing(CommandItem errorCommand)
    {
        _isQueueStopped = true; // 큐를 멈춤
        App.Current.Dispatcher.Invoke(() =>
        {
            if (ErrorCommands.Count < MaximumErrorListSize) // 에러가 20개를 넘지 않을 경우에만 추가
            {
                errorCommand.CommandTime = DateTime.Now.ToString("yyMMdd HH:mm:ss.fff"); // 에러 발생 시간 기록
                ErrorCommands.Add(errorCommand); // 에러 리스트박스에 추가
            }
        });
        ShowAlarm("Queue has been stopped due to a Timeout or failure.");
    }

    // 알람을 에러 리스트박스에 추가하는 함수
    private void ShowAlarm(string message)
    {
        var errorCommand = new CommandItem
        {
            CommandText = message,
            Status = "Error",
            Result = 0, // 에러 상태로 처리
            RetryCount = 0, // 에러 메시지이므로 재시도 없음
            ResponseTime = 0 // 응답 시간 없음
        };

        App.Current.Dispatcher.Invoke(() =>
        {
            if (ErrorCommands.Count < MaximumErrorListSize) // 에러가 20개를 넘지 않을 경우에만 추가
            {
                errorCommand.CommandTime = DateTime.Now.ToString("yyMMdd HH:mm:ss.fff"); // 에러 발생 시간 기록
                ErrorCommands.Add(errorCommand); // 에러 리스트박스에 추가
            }
        });
    }

    // 프로그레스바 상태 업데이트
    private void UpdateProgress()
    {
        Progress = commandQueue.Count; // 남은 명령의 수에 따라 Progress 값 업데이트
    }

    // INotifyPropertyChanged 인터페이스 구현
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public class CommandItem
{
    public string CommandText { get; set; } // 명령 텍스트
    public string Status { get; set; } // 명령 상태 (Pending, Processing, Completed, Failed 등)
    public int Result { get; set; } // 명령 결과 (성공: 1, 실패: 0)
    public int RetryCount { get; set; } // 재시도 횟수
    public int MaxRetryLimit { get; set; } // 최대 재시도 횟수
    public int ResponseTime { get; set; } // 응답 시간
    public string CommandTime { get; set; } // 명령이 추가된 시간 (yyMMdd HH:mm:ss.fff)
    public string Output { get; set; } // 명령의 결과 또는 응답
}
수정된 XAML 코드
xml
코드 복사
<Grid>
    <!-- 그리드 좌우 90% - 10% -->
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="9*"/> <!-- 좌측 90% -->
        <ColumnDefinition Width="1*"/> <!-- 우측 10% -->
    </Grid.ColumnDefinitions>

    <!-- 좌측 2등분 (세로 방향) -->
    <Grid.RowDefinitions>
        <RowDefinition Height="1*"/> <!-- 상단 50% (남아 있는 명령 리스트박스) -->
        <RowDefinition Height="1*"/> <!-- 하단 50% (에러 리스트박스) -->
    </Grid.RowDefinitions>

    <!-- 남아 있는 명령 리스트박스 (좌측 상단) -->
    <ListBox Grid.Row="0" Grid.Column="0" ItemsSource="{Binding CommandQueue.RemainingCommands}" Margin="10">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal">
                    <!-- 명령 텍스트 -->
                    <TextBlock Text="{Binding CommandText}" Width="200"/>
                    <!-- 작업 상태 -->
                    <TextBlock Text=" 상태: " Width="50"/>
                    <TextBlock Text="{Binding Status}" Width="100"/>
                    <!-- 재시도 횟수 표시 -->
                    <TextBlock Text=" 재시도: " Width="70"/>
                    <TextBlock Text="{Binding RetryCount}" Width="30"/>
                    <!-- 응답 시간 -->
                    <TextBlock Text=" 응답 시간: " Width="100"/>
                    <TextBlock Text="{Binding ResponseTime}" Width="70"/>
                </StackPanel>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>

    <!-- 에러 리스트박스 (좌측 하단) -->
    <ListBox Grid.Row="1" Grid.Column="0" ItemsSource="{Binding CommandQueue.ErrorCommands}" Margin="10">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="에러: " Width="50"/>
                    <TextBlock Text="{Binding CommandText}" Width="200"/>
                    <TextBlock Text=" 상태: " Width="50"/>
                    <TextBlock Text="{Binding Status}" Width="100"/>
                    <TextBlock Text=" 재시도: " Width="70"/>
                    <TextBlock Text="{Binding RetryCount}" Width="30"/>
                    <TextBlock Text=" 응답 시간: " Width="100"/>
                    <TextBlock Text="{Binding ResponseTime}" Width="70"/>
                    <TextBlock Text=" 에러 시간: " Width="100"/>
                    <TextBlock Text="{Binding CommandTime}" Width="100"/>
                </StackPanel>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>

    <!-- 우측 프로그레스바 (세로형) -->
    <StackPanel Grid.Column="1" VerticalAlignment="Stretch" Margin="10">
        <TextBlock Text="{Binding CommandQueue.Progress, StringFormat='남은 작업: {0}'}" HorizontalAlignment="Center"/>
        <ProgressBar VerticalAlignment="Top" Height="300" Width="30" Orientation="Vertical" 
                     Value="{Binding CommandQueue.Progress}" Maximum="{Binding CommandQueue.MaximumQueueSize}"/>
        <!-- ProgressBar 아래에 남은 작업 리스트의 명령 텍스트를 표시하는 ItemsControl -->
        <ItemsControl ItemsSource="{Binding CommandQueue.RemainingCommands}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding CommandText}" HorizontalAlignment="Center"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </StackPanel>
</Grid>
주요 수정 사항
최대 큐 크기 제한: 큐에 10개 이상의 작업을 추가하지 않도록 수정되었습니다.
작업의 순차 처리 보장: 큐에 들어간 작업은 순차적으로 실행되며, 응답 지연이나 재시도 과정에서도 순서를 지킴.
응답 시간 초과 시 작업 중단: 응답 시간이 5초를 초과할 경우, 모든 작업을 중단하고 더 이상 작업이 실행되지 않도록 하였습니다.
재시도 횟수 및 표시: 응답이 잘못된 경우 재시도를 3초 간격으로 시도하고, 이때 재시도 횟수를 리스트박스에 1, 2, 3회로 표시하게 했습니다.
에러 발생 제한: 에러가 20개