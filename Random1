네, 이해했습니다. 카메라의 미리보기 화면에서 QR 코드 또는 바코드 인식을 위한 영역을 제한하고, 해당 영역만 선명하게 표시하며 나머지 부분은 흐리게 처리하는 방법을 구현하겠습니다. 또한, 인식 영역의 경계에 노란색 테두리를 추가하겠습니다.

1. XML 레이아웃 (activity_main.xml)
먼저, 카메라 미리보기와 인식 영역을 설정하기 위한 XML 레이아웃을 구성하겠습니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 흐리게 처리될 부분 -->
    <ImageView
        android:id="@+id/blurred_background"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:scaleType="centerCrop"
        android:visibility="visible" />

    <!-- 카메라 미리보기 -->
    <androidx.camera.view.PreviewView
        android:id="@+id/viewFinder"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerInParent="true" />

    <!-- 인식 영역 -->
    <View
        android:id="@+id/focus_area"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_centerInParent="true"
        android:background="@drawable/focus_border" />

    <!-- 인식된 텍스트를 보여줄 영역 -->
    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. Drawable 리소스 (focus_border.xml)
노란색 테두리를 만들기 위해 res/drawable/focus_border.xml 파일을 생성합니다.

xml
코드 복사
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="@android:color/transparent" />
    <stroke
        android:width="2dp"
        android:color="#FFFF00" /> <!-- 노란색 테두리 -->
</shape>
3. Kotlin 코드 (MainActivity.kt)
이제 카메라 미리보기를 설정하고, 흐리게 처리된 배경을 적용하는 Kotlin 코드를 작성하겠습니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.Canvas
import android.graphics.Paint
import android.os.Bundle
import android.widget.ImageView
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.core.graphics.drawable.toBitmap
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var blurredBackground: ImageView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)
        blurredBackground = findViewById(R.id.blurred_background)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

                // 흐리게 처리된 배경 설정
                applyBlurredBackground()

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun applyBlurredBackground() {
        // PreviewView의 현재 비트맵을 가져옵니다.
        val bitmap = viewFinder.bitmap ?: return
        val blurredBitmap = blurBitmap(bitmap)
        blurredBackground.setImageBitmap(blurredBitmap)
    }

    private fun blurBitmap(bitmap: Bitmap): Bitmap {
        // 흐림 효과를 적용합니다.
        val output = Bitmap.createBitmap(bitmap.width, bitmap.height, bitmap.config)
        val canvas = Canvas(output)
        val paint = Paint()
        paint.alpha = 100  // 투명도 조정
        canvas.drawBitmap(bitmap, 0f, 0f, paint)
        return output
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 기능:
카메라 미리보기:

카메라 미리보기 화면 전체를 PreviewView로 구성하고 있습니다.
인식 영역:

focus_area 뷰는 인식 영역으로, 가로 100dp, 세로 100dp 크기로 중앙에 배치되어 있습니다.
이 영역은 노란색 테두리가 적용된 상태입니다.
흐림 효과:

applyBlurredBackground() 메서드를 통해 미리보기 화면을 흐리게 처리하고, 인식 영역만 선명하게 유지합니다.
이 코드로 QR 코드나 바코드 인식 영역을 제한하고, 해당 영역만 선명하게 표시하며, 나머지 부분은 흐리게 처리할 수 있습니다. 카메라가 초점을 더 쉽게 잡을 수 있도록 중앙에 집중된 인식 영역을 통해 인식 효율을 높일 수 있습니다