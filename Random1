아래는 기존에 제공된 코드를 C#으로 변형하여, 상하단으로 이격된 축을 동일한 0점을 기준으로 두 데이터(L/R)를 표시하도록 작성한 전체 코드입니다.

전체 코드 (C#)
XAML
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:devexpress="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <devexpress:ChartControl Name="chartControl" />
    </Grid>
</Window>
Code-Behind (C#)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Windows;
using DevExpress.Xpf.Charts;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            ConfigureChart();
        }

        private void ConfigureChart()
        {
            // XYDiagram 생성
            var diagram = new XYDiagram2D();

            // 기본 Y축 추가 (Primary AxisY)
            var primaryAxisY = new AxisY2D
            {
                Title = new AxisTitle { Content = "L Data", Visibility = Visibility.Visible },
                Alignment = AxisAlignment.Near,
                Label = { Visibility = Visibility.Visible }
            };
            diagram.AxisY = primaryAxisY;

            // 보조 Y축 추가 (Secondary AxisY)
            var secondaryAxisY = new SecondaryAxisY2D
            {
                Title = new AxisTitle { Content = "R Data", Visibility = Visibility.Visible },
                Alignment = AxisAlignment.Far,
                Label = { Visibility = Visibility.Visible },
                LabelOffset = 30 // 보조 축 이격
            };
            diagram.SecondaryAxesY.Add(secondaryAxisY);

            // L 데이터 시리즈 추가
            var lSeries = new Series
            {
                DisplayName = "L Data",
                ArgumentDataMember = "Time",
                ValueDataMember = "LValue",
                View = new LineSeriesView { AxisY = primaryAxisY }
            };

            // R 데이터 시리즈 추가
            var rSeries = new Series
            {
                DisplayName = "R Data",
                ArgumentDataMember = "Time",
                ValueDataMember = "RValue",
                View = new LineSeriesView { AxisY = secondaryAxisY }
            };

            // 데이터 바인딩
            lSeries.DataSource = GenerateLData();
            rSeries.DataSource = GenerateRData();

            // 차트에 추가
            diagram.Series.AddRange(new[] { lSeries, rSeries });
            chartControl.Diagram = diagram;
        }

        private List<DataPoint> GenerateLData()
        {
            return new List<DataPoint>
            {
                new DataPoint { Time = "00:00", LValue = 10 },
                new DataPoint { Time = "01:00", LValue = 20 },
                new DataPoint { Time = "02:00", LValue = 15 },
                new DataPoint { Time = "03:00", LValue = 25 }
            };
        }

        private List<DataPoint> GenerateRData()
        {
            return new List<DataPoint>
            {
                new DataPoint { Time = "00:00", RValue = 12 },
                new DataPoint { Time = "01:00", RValue = 18 },
                new DataPoint { Time = "02:00", RValue = 10 },
                new DataPoint { Time = "03:00", RValue = 22 }
            };
        }
    }

    // 데이터 모델
    public class DataPoint
    {
        public string Time { get; set; }
        public double LValue { get; set; }
        public double RValue { get; set; }
    }
}
주요 코드 설명
XYDiagram2D 생성:

차트의 주요 다이어그램으로, 두 개의 Y축을 추가.
AxisY2D (Primary Axis):

L 데이터를 담당하며, 차트의 아래쪽(Near)에 위치.
SecondaryAxisY2D (Secondary Axis):

R 데이터를 담당하며, 차트의 위쪽(Far)에 위치.
LabelOffset 속성을 통해 라벨을 차트에서 이격.
데이터 시리즈:

L 데이터와 R 데이터를 각각의 축에 연결.
View.AxisY 속성을 통해 각 시리즈가 사용할 축을 명시적으로 지정.
데이터 생성:
