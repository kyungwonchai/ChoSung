아래는 WPF와 DevExpress의 GridControl을 사용하여 시트2와 동일한 기능을 구현한 코드입니다. 이 코드는 Python 코드에서 시트2의 기능을 그대로 반영하여, 보낸값 + 응답값의 조합이 시간에 따라 변경될 때마다 기록하고, 결과를 GridControl에 출력합니다.

주요 기능:
폴더 선택: 사용자가 선택 버튼을 눌러 폴더를 선택할 수 있습니다.
분석 버튼: 선택한 폴더 내의 파일을 분석하여 보낸값과 응답값의 조합이 시간 흐름에 따라 변경될 때마다 모든 변경 사항을 GridControl에 표시합니다.
DevExpress GridControl에 시트2의 결과 표시: 시트2와 동일한 필터링 및 시간 순서 정렬 결과를 GridControl에 출력합니다.
전체 코드 (C# WPF, DevExpress)
XAML 코드 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="FileAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="File Analysis" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="Select Folder" Click="SelectFolder_Click" Width="100" Margin="5"/>
            <Button Content="Analyze" Click="Analyze_Click" Width="100" Margin="5"/>
            <TextBlock Text="Selected Folder:" VerticalAlignment="Center" Margin="10,0"/>
            <TextBlock x:Name="SelectedFolderText" VerticalAlignment="Center" Margin="5,0"/>
        </StackPanel>

        <dxg:GridControl Name="DataGrid" Grid.Row="1" AutoGenerateColumns="AddNew">
            <dxg:GridControl.View>
                <dxg:TableView />
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;

namespace FileAnalysisApp
{
    public partial class MainWindow : Window
    {
        private string selectedFolderPath = string.Empty;
        public ObservableCollection<LogEntry> LogEntries { get; set; } = new ObservableCollection<LogEntry>();

        public MainWindow()
        {
            InitializeComponent();
            DataGrid.ItemsSource = LogEntries;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    selectedFolderPath = dialog.SelectedPath;
                    SelectedFolderText.Text = selectedFolderPath;
                }
            }
        }

        private void Analyze_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFolderPath))
            {
                System.Windows.MessageBox.Show("Please select a folder first.");
                return;
            }

            LogEntries.Clear();
            AnalyzeFiles(selectedFolderPath);
        }

        private void AnalyzeFiles(string folderPath)
        {
            var threeDaysAgo = DateTime.Now.AddDays(-3);
            var responseTracker = new Dictionary<string, string>();
            var dataForGrid = new List<LogEntry>();
            
            var timePattern = new Regex(@"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}");
            var keyPattern = new Regex(@"고유키:[^\s]+");
            var sendPattern = new Regex(@"보낸값:[^\s]+");
            var recvPattern = new Regex(@"받은값:[^\s]+");

            foreach (var filePath in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
            {
                var fileCreationTime = File.GetCreationTime(filePath);
                if (fileCreationTime < threeDaysAgo) continue;

                string fileName = Path.GetFileName(filePath);
                var lines = File.ReadAllLines(filePath);
                for (int i = 0; i < lines.Length; i++)
                {
                    var sendMatch = sendPattern.Match(lines[i]);
                    if (sendMatch.Success)
                    {
                        var timeMatch = timePattern.Match(lines[i]);
                        var keyMatch = keyPattern.Match(lines[i]);
                        var recvMatch = (i + 1 < lines.Length) ? recvPattern.Match(lines[i + 1]) : null;

                        if (timeMatch.Success && keyMatch.Success && recvMatch != null && recvMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            string uniqueKey = keyMatch.Value.Split(':')[1];
                            string sendValue = sendMatch.Value.Split(':')[1];
                            string recvValue = recvMatch.Value.Split(':')[1];
                            string combinedKey = $"{sendValue}_{recvValue}";

                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");

                            // WD 포함된 경우 모든 로그 기록, 50자 이하인 경우 변경 사항 기록
                            if (sendValue.Contains("WD") || combinedKey.Length <= 50)
                            {
                                if (sendValue.Contains("WD") || !responseTracker.ContainsKey(sendValue) || responseTracker[sendValue] != recvValue)
                                {
                                    responseTracker[sendValue] = recvValue;
                                    dataForGrid.Add(new LogEntry
                                    {
                                        Filename = fileName,
                                        Time = formattedTime,
                                        UniqueKey = uniqueKey,
                                        SentValue = sendValue,
                                        ReceivedValue = recvValue,
                                        AdditionalData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD"
                                    });
                                }
                            }
                        }
                    }
                }
            }

            // 시간 순으로 정렬
            var sortedData = dataForGrid.OrderBy(entry => entry.Time).ToList();
            foreach (var entry in sortedData)
            {
                LogEntries.Add(entry);
            }
        }
    }

    public class LogEntry
    {
        public string Filename { get; set; }
        public string Time { get; set; }
        public string UniqueKey { get; set; }
        public string SentValue { get; set; }
        public string ReceivedValue { get; set; }
        public string AdditionalData { get; set; }
    }
}
코드 설명
폴더 선택: SelectFolder_Click 메서드에서 폴더 선택 창을 띄워 사용자가 폴더를 선택하고, selectedFolderPath에 경로를 저장합니다.
분석 버튼 기능: Analyze_Click 메서드가 호출되면 AnalyzeFiles 메서드를 통해 선택한 폴더 내 파일을 분석하고, LogEntries 컬렉션에 추가합니다.
시트2 기능 구현: AnalyzeFiles 메서드에서 DetailCMD 파일의 보낸값 + 응답값 조합이 시간 흐름에 따라 변경될 때마다 새로운 로그를 dataForGrid에 추가합니다.