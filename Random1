DB 정보

데이터베이스 이름: AgentLogMonitor

테이블 이름: MESMacroLogs

테이블 컬럼:

id1 (Primary Key, INT 타입, 자동 증가)

logvalue (NVARCHAR(MAX), 로그 내용)

time1 (DATETIME, 로그가 저장된 시간)

DB 작업

테이블 생성 쿼리 제공

로그 삽입 함수 제공 (비동기 방식)

로그 저장 과정에서 발생하는 오류가 메인 프로그램에 영향을 주지 않도록 설계 (예외 처리 포함)

오류 발생 시에도 프로그램은 계속 정상적으로 작동하도록 구성

1. 데이터베이스 테이블 생성 쿼리
sql
코드 복사
USE AgentLogMonitor;
GO

CREATE TABLE MESMacroLogs (
    id1 INT IDENTITY(1,1) PRIMARY KEY,
    logvalue NVARCHAR(MAX) NOT NULL,
    time1 DATETIME DEFAULT GETDATE()
);
GO
2. 로그 관리 클래스 (LogManager.cs)
csharp
코드 복사
using System;
using System.Data.SqlClient;
using System.Threading.Tasks;

namespace YourNamespace
{
    public class LogManager
    {
        // 데이터베이스 연결 문자열 (MSSQL 2014)
        private readonly string _connectionString;

        // 생성자: 연결 문자열을 설정합니다.
        public LogManager(string connectionString)
        {
            _connectionString = connectionString;
        }

        /// <summary>
        /// MSSQL 데이터베이스에 로그를 비동기 방식으로 삽입합니다.
        /// </summary>
        /// <param name="logValue">저장할 로그 내용</param>
        /// <returns>Task로 비동기 처리</returns>
        public async Task InsertLogAsync(string logValue)
        {
            // 로그 저장 SQL 쿼리
            string query = "INSERT INTO MESMacroLogs (logvalue) VALUES (@logvalue);";

            try
            {
                // 데이터베이스 연결을 생성합니다.
                using (SqlConnection connection = new SqlConnection(_connectionString))
                {
                    await connection.OpenAsync();

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        // 파라미터 설정 (SQL Injection 방지)
                        command.Parameters.AddWithValue("@logvalue", logValue);

                        // 비동기 방식으로 쿼리를 실행합니다.
                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
            catch (Exception ex)
            {
                // 예외 발생 시 프로그램에 영향을 주지 않기 위해 예외를 무시합니다.
                // 원한다면 여기서 예외를 파일 로그로 남기거나 Console로 출력할 수 있습니다.
                Console.WriteLine($"[Log Error] {ex.Message}");
            }
        }
    }
}
3. 메인 프로그램에서의 사용 예시
csharp
코드 복사
using System;
using System.Threading.Tasks;
using YourNamespace;

namespace YourProgram
{
    class Program
    {
        static async Task Main(string[] args)
        {
            // 연결 문자열 설정 (MSSQL 2014)
            string connectionString = "Server=localhost;Database=AgentLogMonitor;User Id=your_username;Password=your_password;";

            // LogManager 인스턴스 생성
            LogManager logManager = new LogManager(connectionString);

            // 로그를 저장하는 예시
            await logManager.InsertLogAsync("Program started successfully.");

            // 프로그램의 메인 Task 작업 중에서도 언제든지 호출하여 로그를 남길 수 있습니다.
            await logManager.InsertLogAsync("Task completed successfully.");
        }
    }
}
4. 상세 설명
A. LogManager 클래스
역할: MSSQL 데이터베이스에 로그를 저장하는 기능을 제공.

예외 처리: try-catch 블록으로 오류를 감지하고, 오류 발생 시 프로그램에 영향을 주지 않도록 예외를 무시하도록 설정.

비동기 처리: await connection.OpenAsync() 와 await command.ExecuteNonQueryAsync() 로 비동기 접근을 사용하여 성능을 최적화.

B. InsertLogAsync() 메서드
매개변수 logValue 를 받아 데이터베이스 테이블에 삽입.

SQL Injection 방지를 위해 SqlCommand.Parameters.AddWithValue() 를 사용.

C. 프로그램에서의 호출 방법
LogManager 인스턴스를 생성하여 언제든지 로그를 남길 수 있음.

로그 저장 중 오류가 발생해도 프로그램에 영향을 미치지 않음.

이제 LogManager 클래스를 별도로 만들어서 현재 Task 기반 비동기 프로그램에 통합하면 됩니다.