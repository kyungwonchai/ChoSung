el ID= 뒤에 오는 값만을 추출하려면 정규식을 수정하여 Reel ID= 바로 뒤에 공백이나 특수문자가 나오기 전까지의 문자열을 잡도록 해야 합니다. Reel ID= 뒤에 =로 시작하여 공백이 나오기 전까지의 문자열을 찾도록 수정하겠습니다.

다음은 코드에서 정규식을 수정한 버전입니다:

python
코드 복사
import pymssql
import csv
import re
from datetime import datetime, timedelta
from collections import Counter

# 데이터베이스 연결 정보
server = '192.168.1.100'
user = 'sa'
password = 'mypassword123'
database = 'NPM_DAS_DATAS'

# MSSQL 데이터베이스 연결 (포트 5555로 설정)
conn = pymssql.connect(server=server, user=user, password=password, database=database, port=5555)
cursor = conn.cursor()

# LOG로 시작하는 모든 테이블 이름 가져오기
cursor.execute("""
    SELECT TABLE_NAME
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_NAME LIKE 'LOG%'
""")

tables = cursor.fetchall()
# Reel ID= 이후 공백이나 특수문자가 나오기 전까지 추출할 패턴
pattern = re.compile(r'Reel ID=([^\s]+)')

# 결과를 저장할 리스트 초기화
result_rows = []

# 각 테이블에서 log1 컬럼 값이 'splicing'인 행 찾기
partid_list = []
for table in tables:
    table_name = table[0]
    query = f"SELECT line1, machine1, lane1, log1, log2, datatime1 FROM {table_name} WHERE log1 = 'splicing'"
    cursor.execute(query)
    rows = cursor.fetchall()

    for row in rows:
        line1, machine1, lane1, log1, log2, datatime1 = row
        
        # `partid` 추출
        partid_match = pattern.search(log2)
        partid = partid_match.group(1) if partid_match else None
        partid_list.append(partid)
        
        # 날짜와 시간에 따른 date1과 shift1 계산
        datatime = datetime.strptime(datatime1, '%Y-%m-%d %H:%M:%S')
        if datatime.hour < 7:
            date1 = (datatime - timedelta(days=1)).strftime('%Y-%m-%d')
        else:
            date1 = datatime.strftime('%Y-%m-%d')
        
        # shift1 계산
        if 7 <= datatime.hour < 17 or (datatime.hour == 17 and datatime.minute == 0):
            shift1 = 'day'
        else:
            shift1 = 'night'

        # 결과 리스트에 추가
        result_rows.append([line1, machine1, lane1, log1, log2, partid, date1, shift1, datatime1])

# 중복 개수 계산
partid_counter = Counter(partid_list)
for row in result_rows:
    partid = row[5]
    row.append(partid_counter[partid])  # `dup` 컬럼 추가

# CSV 파일로 내보내기
csv_file = 'splicing_logs.csv'
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    # 헤더 작성
    writer.writerow(['line1', 'machine1', 'lane1', 'log1', 'log2', 'partid', 'date1', 'shift1', 'datatime1', 'dup'])
    # 데이터 작성
    writer.writerows(result_rows)

print(f"CSV 파일이 '{csv_file}' 이름으로 성공적으로 생성되었습니다.")

# 연결 종료
conn.close()
변경사항 설명
정규식: pattern = re.compile(r'Reel ID=([^\s]+)')로 수정했습니다.
Reel ID= 뒤에 나오는 문자열을 추출하며, 공백이나 특수문자가 나오기 전까지의 모든 문자를 매칭합니다.
예를 들어, Reel ID=abcd1234에서 abcd1234만 추출됩니다.