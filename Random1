escription"만 수정할 수 있는 DEdit 화면을 추가하고, 첫 화면에서 "Description" 컬럼의 글자가 넘치면 잘라낸 후 마우스를 올리면 전체 내용이 툴팁으로 보이게 하는 기능을 구현하겠습니다.

1. app.py 수정
먼저, app.py 파일에 "Description"만 수정할 수 있는 DEdit 라우트를 추가합니다.

python
코드 복사
from flask import Flask, render_template, send_from_directory, request, redirect, url_for, flash
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # 세션 및 보안 메시지에 사용될 시크릿 키 설정

# 파일들이 저장된 메인 디렉토리 경로
FILE_DIRECTORY = os.path.join(os.getcwd(), 'files')

# 업로드를 위한 허용된 파일 확장자 설정
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'zip', 'exe', 'csv'}

# 파일 확장자 확인 함수
def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    programs = []  # 프로그램 목록을 저장할 리스트
    
    # 메인 디렉토리에서 각 폴더를 확인
    for folder in os.listdir(FILE_DIRECTORY):
        folder_path = os.path.join(FILE_DIRECTORY, folder)
        if os.path.isdir(folder_path):  # 해당 경로가 폴더인지 확인
            files = os.listdir(folder_path)
            txt_files = [f for f in files if f.endswith('.txt')]  # 텍스트 파일 리스트
            non_txt_files = [f for f in files if not f.endswith('.txt')]  # 텍스트 파일이 아닌 리스트
            
            # 폴더에 텍스트 파일과 다른 파일이 각각 하나씩만 있는 경우 처리
            if len(txt_files) == 1 and len(non_txt_files) == 1:
                # 텍스트 파일 내용 읽기
                with open(os.path.join(folder_path, txt_files[0]), 'r') as f:
                    description = f.read()
                # 프로그램 정보를 리스트에 추가
                programs.append({
                    'folder': folder,
                    'filename': non_txt_files[0],
                    'description': description
                })
    
    # 템플릿 렌더링과 함께 프로그램 정보를 전달
    return render_template('index.html', programs=programs)

@app.route('/download/<program>/<filename>')
def download_file(program, filename):
    # 프로그램 폴더 경로 설정
    folder_path = os.path.join(FILE_DIRECTORY, program)
    # 지정된 파일을 클라이언트에게 전송
    return send_from_directory(folder_path, filename, as_attachment=True)

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        password = request.form.get('password')  # 업로드를 위한 비밀번호 입력받기
        if password != 'yourpassword':  # 비밀번호가 틀리면 에러 메시지와 함께 리다이렉트
            flash('Incorrect password', 'danger')
            return redirect(request.url)

        folder_name = request.form.get('folder')  # 업로드할 폴더 이름
        file = request.files.get('file')  # 업로드할 파일
        description = request.form.get('description')  # 파일 설명

        if file and allowed_file(file.filename):  # 파일이 있고 허용된 확장자인지 확인
            # 폴더 경로 생성
            folder_path = os.path.join(FILE_DIRECTORY, folder_name)
            if not os.path.exists(folder_path):  # 폴더가 없으면 생성
                os.makedirs(folder_path)

            # 기존 파일 삭제
            for existing_file in os.listdir(folder_path):
                if not existing_file.endswith('.txt'):
                    os.remove(os.path.join(folder_path, existing_file))

            # 새 파일과 설명 저장
            file.save(os.path.join(folder_path, file.filename))
            with open(os.path.join(folder_path, 'description.txt'), 'w') as f:
                f.write(description)

            # 성공 메시지와 함께 홈으로 리다이렉트
            flash('File successfully uploaded', 'success')
            return redirect(url_for('index'))

    # GET 요청 시 업로드 페이지 렌더링
    return render_template('upload.html')

@app.route('/edit/<program>', methods=['GET', 'POST'])
def edit_file(program):
    folder_path = os.path.join(FILE_DIRECTORY, program)  # 수정할 프로그램 폴더 경로
    txt_file = None
    non_txt_file = None

    if request.method == 'POST':
        password = request.form.get('password')  # 수정을 위한 비밀번호 입력받기
        if password != 'yourpassword':  # 비밀번호가 틀리면 에러 메시지와 함께 리다이렉트
            flash('Incorrect password', 'danger')
            return redirect(request.url)

        file = request.files.get('file')  # 새로 업로드할 파일
        description = request.form.get('description')  # 새 설명

        if file and allowed_file(file.filename):  # 파일이 있고 허용된 확장자인지 확인
            # 기존 파일 삭제
            for existing_file in os.listdir(folder_path):
                if not existing_file.endswith('.txt'):
                    os.remove(os.path.join(folder_path, existing_file))

            # 새 파일과 설명 저장
            file.save(os.path.join(folder_path, file.filename))
            with open(os.path.join(folder_path, 'description.txt'), 'w') as f:
                f.write(description)

            # 성공 메시지와 함께 홈으로 리다이렉트
            flash('File successfully updated', 'success')
            return redirect(url_for('index'))

    # 파일 정보 로드
    for filename in os.listdir(folder_path):
        if filename.endswith('.txt'):
            txt_file = filename
        else:
            non_txt_file = filename

    description = ''
    if txt_file:
        with open(os.path.join(folder_path, txt_file), 'r') as f:
            description = f.read()

    # GET 요청 시 수정 페이지 렌더링, 현재 파일과 설명 정보를 전달
    return render_template('edit.html', program=program, non_txt_file=non_txt_file, description=description)

@app.route('/dedit/<program>', methods=['GET', 'POST'])
def edit_description(program):
    folder_path = os.path.join(FILE_DIRECTORY, program)  # 수정할 프로그램 폴더 경로

    if request.method == 'POST':
        password = request.form.get('password')  # 수정을 위한 비밀번호 입력받기
        if password != 'yourpassword':  # 비밀번호가 틀리면 에러 메시지와 함께 리다이렉트
            flash('Incorrect password', 'danger')
            return redirect(request.url)

        description = request.form.get('description')  # 새 설명

        # 텍스트 파일 경로 설정 및 설명 저장
        txt_file_path = os.path.join(folder_path, 'description.txt')
        with open(txt_file_path, 'w') as f:
            f.write(description)

        # 성공 메시지와 함께 홈으로 리다이렉트
        flash('Description successfully updated', 'success')
        return redirect(url_for('index'))

    # 텍스트 파일 내용 로드
    description = ''
    txt_file_path = os.path.join(folder_path, 'description.txt')
    if os.path.exists(txt_file_path):
        with open(txt_file_path, 'r') as f:
            description = f.read()

    # GET 요청 시 수정 페이지 렌더링, 현재 설명 정보 전달
    return render_template('dedit.html', program=program, description=description)

if __name__ == '__main__':
    app.run(host='10.222.222.222', port=8090)  # 애플리케이션 실행, 지정된 IP와 포트에서 실행
2. index.html 수정
첫 화면에서 "Description" 컬럼의 너비를 400px로 설정하고, 글자가 넘치면 잘라내며 마우스를 올리면 전체 내용을 툴팁으로 표시되도록 수정합니다. 그리고 DEdit 버튼을 추가합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Download</title>
    <!-- Bootstrap CSS 추가 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS 추가 -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-dark">
    <div class="container mt-5">
        <!-- 페이지 제목과 설명 -->
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="display-4 text-light">Program Files</h1>
                <p class="lead text-light d-inline">Select a file to download and view its description.</p>
                <!-- 새 파일 업로드 버튼 (문구 옆에 배치) -->
                <a href="{{ url_for('upload_file') }}" class="btn btn-primary ml-3">Upload New File</a>
            </div>
            <!-- 검색 입력란 -->
            <input type="text" id="searchInput" class="form-control ml-auto mt-3" placeholder="Search..." style="width: 200px;">
        </div>
        <div class="row justify-content-center mt-4">
            <div class="col-md-10">
                <!-- 프로그램 목록 테이블 -->
                <table class="table table-striped table-dark">
                    <thead>
                        <tr>
                            <th style="width: 50px;">#</th> <!-- 번호 열 -->
                            <th style="width: 200px;">Folder Name</th>
                            <th style="width: 200px;">File Name</th>
                            <th style="width: 400px;">Description</th> <!-- Description 컬럼 넓이 설정 -->
                            <th style="width: 200px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="programTable">
                        {% for program in programs|sort(attribute='folder') %}
                            <tr class="program-row">
                                <td>{{ loop.index }}</td> <!-- 자동 번호매김 -->
                                <td>{{ program.folder }}</td>
                                <!-- 파일 다운로드 링크, 노란색 텍스트와 밑줄 스타일 적용 -->
                                <td>
                                    <a href="{{ url_for('download_file', program=program.folder, filename=program.filename) }}" style="color: yellow; text-decoration: underline;">
                                        {{ program.filename }}
                                    </a>
                                </td>
                                <!-- Description 컬럼에 텍스트 잘라내기와 툴팁 기능 추가 -->
                                <td>
                                    <div class="description-cell" title="{{ program.description }}">
                                        {{ program.description }}
                                    </div>
                                </td>
                                <!-- Edit 버튼 추가, 클릭 시 수정 페이지로 이동 -->
                                <td>
                                    <a href="{{ url_for('edit_file', program=program.folder) }}" class="btn btn-sm btn-edit">Edit</a>
                                    <a href="{{ url_for('edit_description', program=program.folder) }}" class="btn btn-sm btn-dedit">DEdit</a> <!-- DEdit 버튼 추가 -->
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS 추가 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 검색 기능 구현
        document.getElementById('searchInput').addEventListener('input', function() {
            let filter = this.value.toLowerCase();  // 검색어를 소문자로 변환
            let rows = document.querySelectorAll('.program-row');  // 모든 프로그램 행 선택

            // 각 행에 대해 검색어가 포함되는지 확인
            rows.forEach(function(row) {
                let folderName = row.children[1].textContent.toLowerCase();  // 폴더명
                let fileName = row.children[2].textContent.toLowerCase();  // 파일명
                let description = row.children[3].textContent.toLowerCase();  // 설명

                // 검색어가 폴더명, 파일명, 설명 중 하나에 포함되면 표시
                if (folderName.includes(filter) || fileName.includes(filter) || description.includes(filter)) {
                    row.style.display = '';  // 행 표시
                    row.style.backgroundColor = '#6a0dad'; // 검색된 행의 배경색 변경
                } else {
                    row.style.display = 'none';  // 행 숨기기
                }
            });
        });

        // 성공 메시지 표시 (업로드 또는 수정 성공 시)
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    alert("{{ message }}");  // 메시지를 팝업으로 표시
                {% endfor %}
            {% endif %}
        {% endwith %}
    </script>
</body>
</html>
3. dedit.html 추가
"Description"만 수정할 수 있는 dedit.html 파일을 추가합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Description</title>
    <!-- Bootstrap CSS 추가 -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS 추가 -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-dark">
    <div class="container mt-5">
        <!-- 파일 수정 페이지의 제목 -->
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h1 class="text-center text-light">Edit Description for {{ program }}</h1>
                <!-- Description 수정 폼 -->
                <form action="{{ url_for('edit_description', program=program) }}" method="post">
                    <div class="mb-3">
                        <!-- 비밀번호 입력 -->
                        <label for="password" class="form-label text-light">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3">
                        <!-- 설명 입력 -->
                        <label for="description" class="form-label text-light">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="5" required>{{ description }}</textarea>
                    </div>
                    <!-- 변경사항 저장 버튼 -->
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS 추가 -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
4. style.css 수정
"Description" 컬럼의 텍스트 잘라내기와 툴팁 기능을 추가하기 위해 style.css 파일을 수정합니다.

css
코드 복사
body {
    font-family: 'Arial', sans-serif;
    background-color: #2c003e; /* 짙은 보라색 배경 */
}

h1 {
    color: #e6b3ff; /* 밝은 보라색 텍스트 */
    font-weight: bold;
}

.table {
    background-color: #3c005f; /* 테이블 배경 보라색 */
}

.table td, .table th {
    vertical-align: middle;
    color: #e6b3ff; /* 밝은 보라색 텍스트 */
}

.table a {
    color: #e6b3ff; /* 링크 색상 보라색 */
    text-decoration: none;
}

.table a:hover {
    text-decoration: underline;
}

.table-striped > tbody > tr:nth-of-type(odd) {
    background-color: #4b0082; /* 어두운 보라색 행 배경 */
}

.form-control-sm {
    margin-right: 5px;
}

.btn-primary {
    background-color: #8a2be2; /* 버튼 보라색 */
    border-color: #8a2be2;
}

.btn-primary:hover {
    background-color: #7a1be2; /* 버튼 hover 색상 */
    border-color: #7a1be2;
}

.btn-edit {
    background-color: #8a2be2; /* 보라색 배경 */
    color: #ffeb3b; /* 노란색 글자 */
    border-color: #8a2be2;
}

.btn-edit:hover {
    background-color: #7a1be2; /* hover 시 보라색 진하게 */
    color: #ffd700; /* hover 시 글자색 노란색 */
    border-color: #7a1be2;
}

.btn-dedit {
    background-color: #6a0dad; /* 보라색 배경 */
    color: #ffffff; /* 흰색 글자 */
    border-color: #6a0dad;
}

.btn-dedit:hover {
    background-color: #5a009d; /* hover 시 더 짙은 보라색 */
    color: #ffffff; /* hover 시 흰색 글자 */
    border-color: #5a009d;
}

/* Description 셀의 텍스트를 자르고 툴팁으로 전체 내용 표시 */
.description-cell {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    max-width: 400px;
}
5. 애플리케이션 실행
모든 수정이 완료되었으므로, Flask 애플리케이션을 실행하여 웹 서버를 시작합니다.

bash
코드 복사
python3 app.py
6. 웹사이트 테스트
브라우저에서 http://10.222.222.222:8090으로 접속하여 프로그램별 파일 목록을 확인합니다.
"Description" 컬럼이 400px로 고정되어, 텍스트가 넘칠 경우 잘라지며, 마우스를 올리면 전체 내용이 툴팁으로 표시됩니다.
각 행에서 "DEdit" 버튼을 클릭하면, "Description"만 수정할 수 있는 페이지로 이동할 수 있습니다.
파일을 수정하거나 설명을 변경한 후, 저장 버튼을 클릭하면 변경 사항이 적용되며, 성공 메시지가 팝업으로 표시됩니다.
이제 요청하신 모든 사항이 반영된 Flask