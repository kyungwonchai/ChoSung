using UnityEngine;

public class SceneCameraController : MonoBehaviour
{
    [Header("타겟 설정")]
    [Tooltip("카메라가 바라볼 중심 타겟입니다.")]
    public Transform target;

    [Header("카메라 속도 설정")]
    [Tooltip("키보드(WASD) 이동 속도입니다.")]
    public float moveSpeed = 10.0f;
    [Tooltip("카메라 회전 속도입니다.")]
    public float orbitSpeed = 10.0f;
    [Tooltip("카메라 마우스 이동(패닝) 속도입니다.")]
    public float panSpeed = 0.5f;
    [Tooltip("카메라 줌 속도입니다.")]
    public float zoomSpeed = 10.0f;

    [Header("카메라 제한 설정")]
    [Tooltip("타겟으로부터의 최소 거리입니다.")]
    public float minDistance = 3.0f;
    [Tooltip("타겟으로부터의 최대 거리입니다.")]
    public float maxDistance = 20.0f;
    [Tooltip("카메라의 최소 수직 각도입니다.")]
    public float yMinLimit = -80f;
    [Tooltip("카메라의 최대 수직 각도입니다.")]
    public float yMaxLimit = 80f;

    // 내부 계산용 변수
    private float distance;
    private float x = 0.0f;
    private float y = 0.0f;

    void Start()
    {
        Vector3 angles = transform.eulerAngles;
        x = angles.y;
        y = angles.x;

        if (target != null)
        {
            distance = Vector3.Distance(transform.position, target.position);
        }
    }

    void LateUpdate()
    {
        if (target == null)
        {
            return;
        }

        // 1. 카메라 회전 (마우스 우클릭)
        if (Input.GetMouseButton(1))
        {
            x += Input.GetAxis("Mouse X") * orbitSpeed;
            y -= Input.GetAxis("Mouse Y") * orbitSpeed;
            y = ClampAngle(y, yMinLimit, yMaxLimit);
        }
        
        // 2. 카메라 줌 (마우스 휠 스크롤)
        distance -= Input.GetAxis("Mouse ScrollWheel") * zoomSpeed;
        distance = Mathf.Clamp(distance, minDistance, maxDistance);

        // 3. 카메라 이동/패닝 (마우스 휠 클릭)
        if (Input.GetMouseButton(2))
        {
            Vector3 pan = -transform.right * Input.GetAxis("Mouse X") * panSpeed;
            pan += -transform.up * Input.GetAxis("Mouse Y") * panSpeed;
            target.Translate(pan, Space.World);
        }

        // 4. 카메라 이동 (키보드 WASD) - << 추가된 부분 >>
        float horizontalInput = Input.GetAxis("Horizontal"); // A, D 키
        float verticalInput = Input.GetAxis("Vertical");   // W, S 키

        if (horizontalInput != 0 || verticalInput != 0)
        {
            // 카메라의 정면과 오른쪽 방향을 기준으로 이동 방향 계산
            Vector3 forward = transform.forward;
            Vector3 right = transform.right;

            // y축 움직임(상하 이동)을 막기 위해 수평으로 만듦
            forward.y = 0;
            right.y = 0;
            forward.Normalize();
            right.Normalize();

            // 최종 이동 방향 계산
            Vector3 desiredMoveDirection = forward * verticalInput + right * horizontalInput;

            // Time.deltaTime을 곱해 프레임 속도와 관계없이 일정한 속도로 이동
            target.Translate(desiredMoveDirection * moveSpeed * Time.deltaTime, Space.World);
        }


        // 최종 위치 및 회전값 계산 및 적용
        Quaternion rotation = Quaternion.Euler(y, x, 0);
        Vector3 position = rotation * new Vector3(0.0f, 0.0f, -distance) + target.position;

        transform.rotation = rotation;
        transform.position = position;
    }

    public static float ClampAngle(float angle, float min, float max)
    {
        if (angle < -360f) angle += 360f;
        if (angle > 360f) angle -= 360f;
        return Mathf.Clamp(angle, min, max);
    }
}