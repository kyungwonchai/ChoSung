ntrol에 모델을 추가하면 그 하나의 행에서 자재코드 컬럼은
여러줄의 목록과 수량이 표시되야해 커스텀하게 
그러려먼 자재코드와 부품수는 모델에 조인되어서 나올걸 대비해서
테이블을 분리하고 처리해야되지않나?
스크립트 다시주고 그에대한 wpf 코드 줘바 생각해서 
ChatGPT

네, 설명해주신 내용에 따라 테이블 구조와 WPF 구현 방법을 조정해야 할 것 같습니다. 모델에 따라 자재코드와 부품수가 다른 값을 가질 수 있으므로, 이를 별도의 테이블로 관리하고 모델 테이블과 조인하는 것이 적절해 보입니다.
1. MS SQL Server 테이블 생성

메인 테이블:

sql

CREATE TABLE MainTable (
    날짜 DATE,
    작업조 CHAR(1),
    라인 INT,
    모델 VARCHAR(20),
    귀책부서 VARCHAR(5),
    array INT,
    보드수T INT,
    보드수B INT,
    발생사유 VARCHAR(255),
    현장점검사항 VARCHAR(255),
    유관부서확인사항 VARCHAR(255),
    발생유형 VARCHAR(20),
    부품수 INT
);

자재코드 테이블:

sql

CREATE TABLE MaterialCodeTable (
    모델 VARCHAR(20),
    자재코드 VARCHAR(11),
    반납수량 INT
);

이렇게 두 테이블을 만들고, MainTable의 모델 컬럼과 MaterialCodeTable의 모델 컬럼을 조인하여 사용할 수 있습니다.
2. WPF 및 Devexpress 구현

WPF에서는 MainTable과 MaterialCodeTable을 별도로 관리하고, UI에서 모델을 선택할 때 MaterialCodeTable에서 관련 데이터를 가져와 표시해야 합니다.
대략적인 WPF 구현:

csharp

public class MainViewModel {
    public ObservableCollection<MainModel> MainData { get; set; }
    public ObservableCollection<MaterialCodeModel> MaterialCodeData { get; set; }

    public MainViewModel() {
        MainData = new ObservableCollection<MainModel>();
        MaterialCodeData = new ObservableCollection<MaterialCodeModel>();
        // 데이터 로딩 로직
    }

    // 모델 선택 시 자재코드 데이터 로딩
    public void LoadMaterialCodeData(string model) {
        // MaterialCodeTable에서 해당 모델의 자재코드와 반납수량 로드
        // MaterialCodeData 컬렉션에 추가
    }
}

public class MainModel {
    // MainTable의 컬럼에 해당하는 프로퍼티
    // ...
}

public class MaterialCodeModel {
    // MaterialCodeTable의 컬럼에 해당하는 프로퍼티
    // ...
}

MainWindow.xaml:

xml

<Window ...>
    <Grid>
        <dxg:GridControl ItemsSource="{Binding MainData}">
            <!-- MainTable 컬럼 정의 -->
        </dxg:GridControl>
        <dxg:GridControl ItemsSource="{Binding MaterialCodeData}">
            <!-- MaterialCodeTable 컬럼 정의 -->
        </dxg:GridControl>
    </Grid>
</Window>

이 구조는 MainTable과 MaterialCodeTable 데이터를 별도로 관리하고, 모델을 선택할 때 관련 자재코드 데이터를 로드하여 표시합니다. 이 예제는 기본적인 구조만 제공하며, 실제 프로젝트 요구사항에 맞게 데이터 로딩 및 이벤트 처리 로직을 추가해야 합니다.