 방법으로 일반적으로 잘 동작해야 합니다. 그러나 만약 여전히 텍스트가 업데이트되지 않는다면, 몇 가지 다른 문제가 있을 수 있습니다. 이를 해결하기 위해 다음과 같이 코드를 개선해보겠습니다.

문제 해결
runOnUiThread를 확인: runOnUiThread는 올바르게 사용되고 있지만, 업데이트가 제대로 반영되지 않을 수 있는 다른 이유가 있을 수 있습니다. 예를 들어, updateConnectionStatus 함수가 올바르게 호출되지 않거나, hubConnection의 연결 상태 이벤트가 제대로 설정되지 않았을 가능성이 있습니다.

runOnUiThread 대신 Handler 사용: runOnUiThread는 일반적으로 잘 동작하지만, Handler를 사용해도 비슷한 효과를 얻을 수 있습니다. 그러나 이 경우 코드가 제대로 동작하는지 확인하는 것이 중요합니다.

개선된 코드
updateConnectionStatus 함수와 initializeSignalR의 연결 상태 이벤트 설정을 수정하여 올바르게 텍스트가 업데이트되도록 합니다.

kotlin
코드 복사
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import com.microsoft.signalr.HubConnectionState
import kotlinx.coroutines.*

class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var connectionStatusTextView: TextView
    private lateinit var recyclerView: RecyclerView
    private var reconnectJob: Job? = null
    private val mainHandler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // TextView와 RecyclerView 초기화
        connectionStatusTextView = findViewById(R.id.connectionStatusTextView)
        recyclerView = findViewById(R.id.recyclerView)

        setupRecyclerView()
        initializeSignalR()
    }

    private fun setupRecyclerView() {
        // RecyclerView 설정
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL))

        // 예제 데이터 설정
        val dataList = listOf(
            TableData("Column1", "Column2", "Column3", "Column4"),
            TableData("Data1", "Data2", "Data3", "Data4")
        )

        val adapter = TableAdapter(dataList)
        recyclerView.adapter = adapter
    }

    private fun initializeSignalR() {
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        hubConnection.on("ReceiveMessage", { message: String ->
            Log.d("SignalR", "Message received: $message")
            // 수신된 메시지에 따라 표를 업데이트하거나 다른 작업 수행
        }, String::class.java)

        startConnection()
    }

    private fun startConnection() {
        updateConnectionStatus("연결 시도 중...", "#FFA500") // 주황색

        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            try {
                hubConnection.start().blockingAwait()
                updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                reconnectJob?.cancel()
            } catch (e: Exception) {
                Log.e("SignalR", "Connection failed, retrying...", e)
                updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                retryConnection()
            }
        }

        hubConnection.onClosed {
            Log.e("SignalR", "Connection closed, retrying...")
            updateConnectionStatus("SignalR 연결 끊김 - 재시도 중...", "#FF0000") // 빨간색
            retryConnection()
        }
    }

    private fun retryConnection() {
        reconnectJob?.cancel()
        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            while (hubConnection.connectionState != HubConnectionState.CONNECTED) {
                try {
                    delay(2000) // 2초 대기 후 재연결 시도
                    hubConnection.start().blockingAwait()
                    updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                } catch (e: Exception) {
                    Log.e("SignalR", "Reconnection attempt failed", e)
                    updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                }
            }
        }
    }

    // 연결 상태를 업데이트하는 함수
    private fun updateConnectionStatus(status: String, color: String) {
        mainHandler.post {
            connectionStatusTextView.text = status
            connectionStatusTextView.setTextColor(android.graphics.Color.parseColor(color))
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        reconnectJob?.cancel()
        hubConnection.stop()
    }
}
설명
mainHandler:

Handler를 사용해 메인(UI) 스레드에서 작업을 실행합니다. Handler는 Looper.getMainLooper()를 통해 생성되며, 이를 사용해 텍스트 업데이트 작업을 실행합니다.
updateConnectionStatus 함수:

mainHandler.post를 사용하여 UI 업데이트 작업이 메인 스레드에서 실행되도록 합니다. 이는 runOnUiThread와 유사한 역할을 하지만, 명확하게 메인 스레드에서 실행되는 것을 보장할 수 있습니다.
문제 해결 확인
Handler 사용: Handler를 사용하여 UI 업데이트 작업을 메인 스레드에서 실행되도록 보장했습니다. 이 방법으로 TextView가 항상 업데이트되는지 확인할 수 있습니다.