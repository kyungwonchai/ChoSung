령 전송 후에 PLC로부터 응답을 기다리는 방법은, 명령을 전송한 뒤에 읽기 작업을 수행하여 응답을 기다리는 방식으로 작성할 수 있습니다. 아래 코드에서는 명령을 전송한 후에 응답을 기다리는 함수와 함께 동작하는 방식을 설명하겠습니다.

실제 명령 전송 후 응답을 기다리는 함수 사용 예시
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public class PLCCommunication
{
    private SerialPort _serialPort;
    private const byte STX = 0x02;  // Start of Text
    private const byte ETX = 0x03;  // End of Text

    public PLCCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate, Parity.None, 8, StopBits.One);
        _serialPort.Encoding = Encoding.ASCII; // ASCII 인코딩 설정
        _serialPort.Open();
    }

    // 비동기적으로 데이터 읽기
    public async Task<string> ReadUntilETXAsync(CancellationToken cancellationToken)
    {
        var buffer = new byte[256];
        var stringBuilder = new StringBuilder();
        bool reading = false;  // STX 이후 데이터를 읽기 위한 플래그
        int bytesRead;

        while (!cancellationToken.IsCancellationRequested)
        {
            // 1. 데이터를 비동기적으로 읽는다.
            bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length, cancellationToken);
            
            // 2. 바이트 배열을 문자로 변환한다.
            for (int i = 0; i < bytesRead; i++)
            {
                if (buffer[i] == STX)
                {
                    // STX 문자를 만나면 읽기를 시작한다.
                    reading = true;
                    stringBuilder.Clear();  // 새로운 패킷 시작, 기존 데이터 초기화
                }
                else if (buffer[i] == ETX && reading)
                {
                    // ETX 문자를 만나면 읽기를 종료하고 데이터 반환
                    reading = false;
                    return stringBuilder.ToString();  // ETX가 오면 패킷을 반환
                }
                else if (reading)
                {
                    // STX 이후 ETX 전까지의 데이터를 수집
                    stringBuilder.Append((char)buffer[i]);
                }
            }
        }
        
        // 작업이 취소되거나 읽기 중단 시 빈 문자열 반환
        return string.Empty;
    }

    // 명령 전송 후 응답을 기다리는 함수
    public async Task<string> SendCommandAndWaitForResponseAsync(string command, CancellationToken cancellationToken)
    {
        // 1. 명령을 전송한다.
        await SendCommandAsync(command);

        // 2. 응답을 기다리고 읽는다.
        string response = await ReadUntilETXAsync(cancellationToken);

        return response;  // 완전한 응답 패킷 반환
    }

    // 명령 전송 함수
    private async Task SendCommandAsync(string command)
    {
        if (_serialPort.IsOpen)
        {
            byte[] commandBytes = Encoding.ASCII.GetBytes(command);
            await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
            await _serialPort.BaseStream.FlushAsync();  // 명령 전송 후 플러시
        }
        else
        {
            throw new InvalidOperationException("Serial port is not open.");
        }
    }

    public void Close()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }
}
사용 예시 (명령 전송 후 응답 기다리기)
csharp
코드 복사
public async Task MainAsync()
{
    // 시리얼 포트 설정
    var plcCommunication = new PLCCommunication("COM1", 9600);

    // 취소 토큰 설정 (필요시 작업을 취소할 수 있도록)
    using (var cts = new CancellationTokenSource())
    {
        try
        {
            // PLC에 명령을 전송하고 응답을 기다림
            string command = "YOUR_COMMAND";  // PLC에 전송할 명령
            string response = await plcCommunication.SendCommandAndWaitForResponseAsync(command, cts.Token);

            // 응답 처리
            Console.WriteLine($"응답: {response}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"오류 발생: {ex.Message}");
        }
        finally
        {
            // 시리얼 포트 닫기
            plcCommunication.Close();
        }
    }
}
설명:
SendCommandAndWaitForResponseAsync 함수: 이 함수는 PLC에 명령을 전송한 후 응답을 받을 때까지 기다립니다.

먼저 SendCommandAsync 함수를 사용해 명령을 전송하고,
ReadUntilETXAsync 함수를 호출하여 STX에서 ETX까지의 응답을 비동기적으로 읽습니다.
SendCommandAsync 함수: PLC에 명령을 전송하는 함수로, 명령을 ASCII로 인코딩한 후 시리얼 포트를 통해 비동기적으로 전송합니다.

ReadUntilETXAsync 함수: 앞서 설명한 것처럼, PLC로부터 STX부터 ETX까지의 응답을 비동기적으로 읽습니다.

취소 토큰: 작업을 취소할 수 있도록 CancellationToken을 사용했습니다. 만약 특정 시간 내에 응답이 오지 않거나 작업을 취소하고 싶을 때 유용하게 사용할 수 있습니다.

이 방식은 명령을 전송하고 PLC의 응답을 완전히 받을 때까지 기다렸다가 처리하는 구조