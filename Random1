이런 요구사항을 처리하기 위해서는 사용자가 접속한 IP 주소를 확인하고, 해당 IP 주소에 따라 파일 목록을 필터링하는 로직을 구현해야 합니다. Flask 애플리케이션을 사용하여 이를 구현하는 방법을 단계별로 설명하겠습니다.

1. Flask에서 클라이언트 IP 주소 확인
Flask 애플리케이션에서 클라이언트의 IP 주소를 확인하려면 request.remote_addr를 사용할 수 있습니다.

2. 파일 목록 필터링 로직 구현
접속한 IP 주소가 10.249로 시작하는 경우에는 .apk 파일만 보여주고, 그렇지 않은 경우에는 모든 파일을 보여주는 로직을 추가합니다.

3. 코드 구현
아래는 Flask 애플리케이션에서 이 로직을 구현한 예시입니다.

app.py (Flask 서버)
python
코드 복사
from flask import Flask, render_template, request
import os

app = Flask(__name__)

# 파일 디렉토리 설정
FILE_DIRECTORY = os.path.join(os.getcwd(), 'files')

@app.route('/')
def index():
    # 클라이언트의 IP 주소 확인
    client_ip = request.remote_addr
    
    # 파일 목록 필터링 로직
    files = []
    for filename in os.listdir(FILE_DIRECTORY):
        # APK 파일만 표시할 경우
        if client_ip.startswith('10.249'):
            if filename.endswith('.apk'):
                files.append(filename)
        # 모든 파일을 표시할 경우
        else:
            files.append(filename)
    
    return render_template('index.html', files=files, client_ip=client_ip)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
index.html (템플릿)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File List</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/bootstrap.min.css') }}">
</head>
<body>
    <div class="container">
        <h1>File List</h1>
        <p>Your IP: {{ client_ip }}</p>

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>File Name</th>
                </tr>
            </thead>
            <tbody>
                {% for file in files %}
                <tr>
                    <td>{{ file }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>

    <script src="{{ url_for('static', filename='js/bootstrap.bundle.min.js') }}"></script>
</body>
</html>
4. 코드 설명
클라이언트 IP 확인: request.remote_addr를 사용하여 클라이언트의 IP 주소를 가져옵니다.

IP에 따른 파일 목록 필터링:

클라이언트 IP가 10.249로 시작하는 경우, files 리스트에 .apk 확장자를 가진 파일만 추가합니다.
그 외의 IP 주소에서는 디렉토리의 모든 파일을 files 리스트에 추가합니다.
HTML 템플릿:

files 리스트를 순회하면서 테이블에 파일 이름을 표시합니다.
클라이언트 IP 주소도 페이지에 표시되며, 이는 디버깅이나 확인 목적으로 유용할 수 있습니다.
5. 실행 방법
위 코드를 app.py로 저장하고, Flask 애플리케이션을 실행합니다:

bash
코드 복사
python app.py
웹 브라우저에서 http://localhost:5000으로 접속합니다.

접속한 기기의 IP 주소가 10.249로 시작하면 .apk 파일만 표시되고, 그 외의 IP 주소에서는 모든 파일이 표시됩니다.

요약
IP 주소 확인: request.remote_addr를 사용해 클라이언트 IP를 확인합니다.
파일 목록 필터링: 클라이언트 IP가 특정 범위에 속하는지 확인하고, 이에 따라 파일 목록을 필터링합니다.
Flask 템플릿 사용: 필터링된 파일 목록을 HTML 템플릿에서 표시합니다.
이 접근 방식을 통해 특정 IP 주소 범위에서만 특정 파일 형식(예: .apk)을 표시할 수 있