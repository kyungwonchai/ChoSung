using System;
using System.Collections.Concurrent;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace GumiChecker
{
    public class FileCheckerMES20
    {
        private ObservableCollection<ProductOrderModel> _productOrders; // UI에 표시할 주문 목록
        private ComportManager _comPortPLC; // PLC와 통신할 객체
        private ConcurrentQueue<string> _taskQueue = new ConcurrentQueue<string>(); // 큐에 들어갈 작업 목록
        private DispatcherTimer _timer; // 작업을 주기적으로 처리하는 타이머
        private bool _isProcessingTask = false; // 현재 작업이 진행 중인지 여부
        private int _R520SensorTimeout = 180000; // 3분 타임아웃 (3 * 60 * 1000ms)
        private ObservableCollection<string> _taskList; // 리스트박스에 표시할 큐 상태

        // 생성자
        public FileCheckerMES20(ObservableCollection<ProductOrderModel> productOrders, ComportManager comPortManager, ObservableCollection<string> taskList)
        {
            _productOrders = productOrders;
            _comPortPLC = comPortManager;
            _taskList = taskList;

            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _timer.Tick += ProcessQueue; // 큐에서 작업을 처리
            _timer.Start();
        }

        // 적재 함수
        public async Task ExecuteStackFunctionAsync(ProductOrderModel order)
        {
            // 작업을 큐에 추가
            _taskQueue.Enqueue($"적재: {order.ProductOrder}");
            _taskList.Add($"적재 대기: {order.ProductOrder}");

            if (!_isProcessingTask)
            {
                await ProcessQueueAsync(); // 작업 처리 시작
            }
        }

        // 큐에서 작업을 처리하는 함수
        private async Task ProcessQueueAsync()
        {
            _isProcessingTask = true;

            while (_taskQueue.TryDequeue(out string task))
            {
                _taskList.Remove(task); // 큐에서 작업을 제거하고 리스트에서 표시 제거
                string[] taskParts = task.Split(':');
                string taskType = taskParts[0].Trim();
                string productOrder = taskParts[1].Trim();

                if (taskType == "적재")
                {
                    msgvs.Instance.LogT2($"적재 작업 시작: {productOrder}");
                    await ProcessStackAsync(productOrder); // 적재 작업 처리
                }
                else if (taskType == "배출")
                {
                    msgvs.Instance.LogT2($"배출 작업 시작: {productOrder}");
                    await ProcessOutAsync(productOrder); // 배출 작업 처리
                }
            }

            _isProcessingTask = false;
        }

        // 적재 작업 처리
        private async Task ProcessStackAsync(string productOrder)
        {
            // 뮤토콜을 사용해 PLC에 적재 신호 전송 (뮤토콜 함수는 이미 준비된 상태)
            bool isCommandSent = SendStackCommandToPLC();

            if (isCommandSent)
            {
                msgvs.Instance.LogT2($"PLC 적재 신호 전송 완료: {productOrder}");

                // 추가 작업: 다른 값 전송 후 응답 대기 (중간 작업)
                bool anotherResponse = await WaitForAnotherResponseAsync();
                
                if (anotherResponse)
                {
                    msgvs.Instance.LogT2($"다른 응답 완료: {productOrder}");

                    // R520/R521 센서 감지 대기
                    bool isSensorSuccess = await MonitorSensorsAsync();
                    
                    if (isSensorSuccess)
                    {
                        msgvs.Instance.LogT2($"적재 완료: {productOrder}");
                    }
                    else
                    {
                        msgvs.Instance.LogT2($"적재 실패: {productOrder}");
                        // 에러 발생: 적재가 완료되지 않음
                        ShowError($"적재 실패: {productOrder} (3분 내 감지되지 않음)");
                    }
                }
                else
                {
                    msgvs.Instance.LogT2($"응답 실패: {productOrder}");
                    // 응답 실패에 대한 추가 처리
                    ShowError($"응답 실패: {productOrder}");
                }
            }
        }

        // 배출 작업 처리
        private async Task ProcessOutAsync(string productOrder)
        {
            // 뮤토콜을 사용해 PLC에 배출 신호 전송 (배출 처리 로직 구현)
            bool isCommandSent = SendOutCommandToPLC();

            if (isCommandSent)
            {
                msgvs.Instance.LogT2($"PLC 배출 신호 전송 완료: {productOrder}");
            }
        }

        // PLC에 적재 신호 전송 함수 (구현되어 있다고 가정)
        private bool SendStackCommandToPLC()
        {
            // PLC에 적재 신호를 전송하는 로직
            // 예시: 뮤토콜로 명령 전송 및 응답 처리
            return true; // 신호가 정상적으로 전송되었다고 가정
        }

        // PLC에 배출 신호 전송 함수 (구현되어 있다고 가정)
        private bool SendOutCommandToPLC()
        {
            // PLC에 배출 신호를 전송하는 로직
            return true; // 신호가 정상적으로 전송되었다고 가정
        }

        // 센서 감시 함수 (3분 동안 R520, R521 감시)
        private async Task<bool> MonitorSensorsAsync()
        {
            var startTime = DateTime.Now;

            while ((DateTime.Now - startTime).TotalMilliseconds < _R520SensorTimeout)
            {
                // PLC에서 센서 상태를 읽어옴 (R520 감지 -> 꺼짐 -> R521 감지 순서)
                bool isR520Detected = ReadSensor("R520");
                bool isR521Detected = ReadSensor("R521");

                if (isR520Detected)
                {
                    msgvs.Instance.LogT2("R520 감지됨");
                    // R520이 감지되고 꺼졌는지 확인
                    while (!ReadSensor("R520"))
                    {
                        await Task.Delay(100); // 0.1초 대기
                    }

                    msgvs.Instance.LogT2("R520 꺼짐 확인");

                    // R521 감지 확인
                    if (isR521Detected)
                    {
                        msgvs.Instance.LogT2("R521 감지됨");
                        return true; // 적재 완료
                    }
                }

                await Task.Delay(100); // 0.1초 대기
            }

            return false; // 3분 내에 적재 완료되지 않음
        }

        // 센서 값을 읽는 함수 (구현되어 있다고 가정)
        private bool ReadSensor(string sensorId)
        {
            // PLC에서 센서 값을 읽어오는 로직
            // 예시: R520, R521 감지 여부 반환
            return false; // 센서 감지 여부를 반환 (가정)
        }

        // 에러 창을 표시하는 함수
        private void ShowError(string message)
        {
            // 에러 메시지 창을 띄움
            msgvs.Instance.LogT2(message);
        }

        // 다른 작업에 대한 응답을 기다리는 함수 (샘플 함수)
        private async Task<bool> WaitForAnotherResponseAsync()
        {
            // 이 함수는 특정 PLC나 다른 장치에서 값을 보내고 응답을 기다리는 비동기 함수입니다.
            // 예시로 일정 시간 후 응답을 받았다고 가정합니다.
            await Task.Delay(2000); // 2초 대기 (예시)
            return true; // 응답을 정상적으로 받았다고 가정
        }
    }
}
