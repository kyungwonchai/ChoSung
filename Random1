는 요구사항을 반영하여:

범례에 체크박스 추가: 각 선(Line)의 범례에 체크박스를 추가하고, 체크된 선만 동적으로 필터링하여 표시.
선 선택 시 산점도 표시: 라인 차트의 선 중 하나를 선택하면 해당 데이터를 산점도로 나타냄.
이를 구현한 전체 코드는 다음과 같습니다.

XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="800" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <!-- Main Chart 영역 -->
            <RowDefinition Height="2*" />
            <!-- Detail Chart 영역 -->
            <RowDefinition Height="2*" />
            <!-- Scatter Plot (산점도) 영역 -->
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Main Chart: 라인별 표준편차 -->
        <dxc:ChartControl Grid.Row="0" x:Name="MainChart" MouseUp="MainChart_MouseUp">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Line Name" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Standard Deviation" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>

                    <!-- Main Chart Series -->
                    <dxc:BarSideBySideSeries2D DisplayName="Standard Deviation"
                                               DataSource="{Binding MainChartData}"
                                               ArgumentDataMember="LineName"
                                               ValueDataMember="StdDev">
                    </dxc:BarSideBySideSeries2D>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- Detail Chart: 라인 데이터 -->
        <dxc:ChartControl Grid.Row="1" x:Name="DetailChart" MouseUp="DetailChart_MouseUp">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Timestamp" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="MP Data" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:XYDiagram2D.AxisY>

                    <!-- Line Series with Checkboxes in Legend -->
                    <dxc:LineSeries2D DisplayName="MP1" DataSource="{Binding DetailChartData}" ArgumentDataMember="Timestamp" ValueDataMember="MP1" CheckedInLegendChanged="Line_CheckedInLegendChanged" />
                    <dxc:LineSeries2D DisplayName="MP2" DataSource="{Binding DetailChartData}" ArgumentDataMember="Timestamp" ValueDataMember="MP2" CheckedInLegendChanged="Line_CheckedInLegendChanged" />
                    <dxc:LineSeries2D DisplayName="MP3" DataSource="{Binding DetailChartData}" ArgumentDataMember="Timestamp" ValueDataMember="MP3" CheckedInLegendChanged="Line_CheckedInLegendChanged" />
                    <dxc:LineSeries2D DisplayName="MP4" DataSource="{Binding DetailChartData}" ArgumentDataMember="Timestamp" ValueDataMember="MP4" CheckedInLegendChanged="Line_CheckedInLegendChanged" />
                    <dxc:LineSeries2D DisplayName="MP5" DataSource="{Binding DetailChartData}" ArgumentDataMember="Timestamp" ValueDataMember="MP5" CheckedInLegendChanged="Line_CheckedInLegendChanged" />
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- Scatter Plot: 선택된 데이터 -->
        <dxc:ChartControl Grid.Row="2" x:Name="ScatterChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Timestamp" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Value" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:XYDiagram2D.AxisY>

                    <!-- Scatter Series -->
                    <dxc:PointSeries2D DisplayName="Scatter Data"
                                       DataSource="{Binding ScatterChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="Value">
                    </dxc:PointSeries2D>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using System.Windows.Input;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<LineData> MainChartData { get; set; } = new ObservableCollection<LineData>();
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();
        public ObservableCollection<ScatterData> ScatterChartData { get; set; } = new ObservableCollection<ScatterData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            LoadMainChartData();
        }

        private void LoadMainChartData()
        {
            try
            {
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM YourTable WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0);
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            var stdDev = CalculateStandardDeviation(mpData);

                            MainChartData.Add(new LineData { LineName = lineName, StdDev = stdDev });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void MainChart_MouseUp(object sender, MouseButtonEventArgs e)
        {
            var hitInfo = MainChart.Diagram.CalcHitInfo(e.GetPosition(MainChart));
            if (hitInfo.SeriesPoint != null)
            {
                var selectedLineName = hitInfo.SeriesPoint.Argument.ToString();
                LoadDetailChartData(selectedLineName);
            }
        }

        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear();
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM YourTable
                                  WHERE LineName = @lineName
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                DetailChartData.Add(new DetailData
                                {
                                    Timestamp = reader.GetDateTime(0),
                                    MP1 = reader.GetDouble(1),
                                    MP2 = reader.GetDouble(2),
                                    MP3 = reader.GetDouble(3),
                                    MP4 = reader.GetDouble(4),
                                    MP5 = reader.GetDouble(5)
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void DetailChart_MouseUp(object sender, MouseButtonEventArgs e)
        {
            var hitInfo = DetailChart.Diagram.CalcHitInfo(e.GetPosition(DetailChart));
            if (hitInfo.SeriesPoint != null)
            {
                var selectedSeries = hitInfo.SeriesPoint.Series;
                var selectedDataMember = selectedSeries.ValueDataMember;
                LoadScatterChartData(selectedDataMember);
            }
        }

        private void LoadScatterChartData(string dataMember)
        {
            ScatterChartData.Clear();

            foreach (var detail in DetailChartData)
            {
                ScatterChartData.Add(new ScatterData
                {
                    Timestamp = detail.Timestamp,
                    Value = (double)detail.GetType().GetProperty(dataMember).GetValue(detail)
                });
            }
        }

        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    public class LineData
    {
        public string LineName { get; set; }
        public double StdDev { get; set; }
    }

    public class DetailData
    {
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class ScatterData
    {
        public DateTime Timestamp { get; set; }
        public double Value { get; set; }
    }
}
주요 변경사항
범례 체크박스: CheckedInLegendChanged 이벤트를 활용해 동적으로 표시할 선을 필터링.