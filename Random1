DevExpress의 TabbedView와 DocumentManager를 WinForms MVVM 패턴으로 구현하려면, 비즈니스 로직과 UI 로직을 분리해야 합니다. ViewModel은 Form에 표시될 데이터를 관리하고, View는 그 데이터를 표시하며, Model은 애플리케이션의 상태를 나타냅니다.

이 예제에서는 DevExpress의 DocumentManager와 TabbedView를 MVVM 패턴에 맞추어 사용하는 방법을 설명하겠습니다. 자식 폼을 탭으로 도킹하여 열고, 이 작업을 ViewModel을 통해 처리합니다.

프로젝트 구조
MainForm.xaml: View
MainViewModel.cs: ViewModel
ChildForm.xaml: View for child forms
1. MainForm (View)
csharp
코드 복사
using DevExpress.XtraBars.Docking2010.Views.Tabbed;
using DevExpress.XtraBars.Docking2010;
using System.Windows.Forms;

public partial class MainForm : Form
{
    private DocumentManager documentManager;
    private TabbedView tabbedView;

    public MainForm()
    {
        InitializeComponent();

        // ViewModel 인스턴스
        var viewModel = new MainViewModel();

        // DocumentManager 생성
        documentManager = new DocumentManager();
        tabbedView = new TabbedView();

        // DocumentManager와 TabbedView 설정
        documentManager.MdiParent = this;
        documentManager.View = tabbedView;

        // MDI 모드 활성화
        this.IsMdiContainer = true;

        // ViewModel의 자식 폼 열기 명령과 연결
        viewModel.OpenFormCommand = new RelayCommand(() => OpenForm(new ChildForm()));

        // 초기 폼 열기 (예: 두 개의 자식 폼 열기)
        viewModel.OpenFormCommand.Execute(null);
        viewModel.OpenFormCommand.Execute(null);
    }

    // 자식 폼을 여는 함수
    private void OpenForm(Form frm)
    {
        frm.MdiParent = this;
        frm.Show();
    }
}
2. MainViewModel (ViewModel)
csharp
코드 복사
using System;
using System.Windows.Input;

public class MainViewModel
{
    // 자식 폼을 열기 위한 명령
    public ICommand OpenFormCommand { get; set; }

    public MainViewModel()
    {
        // 초기화 로직을 여기에 넣을 수 있습니다.
    }
}

// RelayCommand 클래스: MVVM 패턴에서 명령을 처리하기 위한 일반적인 명령 클래스
public class RelayCommand : ICommand
{
    private readonly Action _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute();
    }

    public void Execute(object parameter)
    {
        _execute();
    }

    public event EventHandler CanExecuteChanged
    {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }
}
3. ChildForm (View)
csharp
코드 복사
using System.Windows.Forms;

public class ChildForm : Form
{
    public ChildForm()
    {
        this.Text = "Child Form - " + DateTime.Now.Ticks.ToString();
        this.Size = new System.Drawing.Size(300, 200);
    }
}
설명
1. MainForm (View):
MainForm은 DevExpress의 DocumentManager와 TabbedView를 사용하여 자식 폼을 탭으로 표시합니다.
DocumentManager의 MdiParent 속성을 통해 이 폼을 MDI 부모로 설정하고, TabbedView를 통해 자식 폼을 탭으로 관리합니다.
MainViewModel과 연결하여 OpenFormCommand 명령을 실행할 수 있게 만듭니다.
2. MainViewModel:
MainViewModel은 자식 폼을 열기 위한 명령인 OpenFormCommand를 가지고 있습니다. 이 명령은 폼을 열기 위해 RelayCommand를 사용하여 구현됩니다.
RelayCommand는 MVVM 패턴에서 명령 처리를 위한 일반적인 클래스로, 버튼 클릭이나 특정 이벤트가 발생했을 때 특정 작업을 수행할 수 있게 합니다.
3. ChildForm (View):
ChildForm은 자식 폼으로, 여러 개의 자식 폼이 탭으로 열릴 수 있습니다. 자식 폼을 간단히 표시할 수 있는 기본 구조입니다.
MVVM 패턴과 DevExpress 연동
이 구조는 MVVM 패턴을 사용하여 자식 폼을 열고 닫는 작업을 명령(Command)으로 처리할 수 있게 해 줍니다. 이 방식을 사용하면 View와 ViewModel 간의 의존성을 줄이면서도 탭 UI를 통해 여러 문서를 관리할 수 있습니다.

이를 통해 WinForms에서 DevExpress의 DocumentManager와 TabbedView를 MVVM 패턴에 맞춰 구현할 수 있으며, 이 패턴을 확장하여 더욱 복잡한 UI 로직도 쉽게 처리할 수 있습니다.