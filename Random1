네, 그럼요! 이전 기능이 잘 동작한다니 정말 다행입니다. 요청하신 기기 ID 입력/저장 기능과 1분 단위 데이터 추가 전송 기능을 모두 반영하여 프로젝트 전체를 개선해 드리겠습니다.

이번 수정에서는 단순히 기능만 추가하는 것이 아니라, 코드를 더 체계적으로 관리할 수 있도록 구조를 개선하고 상세한 주석을 달아두었습니다. 말씀하신 대로, 조금이라도 수정되는 파일은 전체 코드를 제공해 드립니다.

## 개선 사항 요약
기기 ID 관리:

화면에 ID 입력창과 저장 버튼을 추가합니다.

저장된 ID는 앱을 종료했다 켜도 사라지지 않도록 휴대폰 내부에 영구 저장(SharedPreferences 사용)됩니다.

현재 저장된 ID가 무엇인지 화면에 표시하여 사용자가 쉽게 확인할 수 있습니다.

데이터 전송 방식 변경:

(기존) 1초마다 실시간 데이터 전송: 이제 기기 ID와 조도 값을 함께 /log 주소로 보냅니다.

(신규) 1분마다 평균 데이터 전송: 1분 동안 측정된 조도 값들의 평균을 계산하여, 기기 ID와 함께 새로운 /log1min 주소로 보냅니다.

코드 구조 개선:

MainActivity.kt의 코드를 기능별(UI 설정, 센서 설정, 네트워크 설정, 타이머 설정 등)로 함수를 분리하여 가독성과 유지보수성을 높였습니다.

## 1단계: build.gradle.kts (Module :app) - 변경 없음
새로운 라이브러리가 필요 없으므로 이 파일은 수정할 필요가 없습니다. 하지만 완전성을 위해 전체 파일을 제공합니다.

Kotlin

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

android {
    namespace = "com.sec.lightmeter"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.lightmeter"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.material)
    implementation(libs.androidx.constraintlayout)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)

    // 네트워크 통신 라이브러리
    implementation("com.squareup.retrofit2:retrofit:2.9.0")
    implementation("com.squareup.retrofit2:converter-scalars:2.9.0")
    implementation("com.squareup.retrofit2:converter-gson:2.9.0")
    implementation("com.squareup.okhttp3:logging-interceptor:4.10.0")
}
## 2단계: strings.xml - 문자열 추가
기기 ID 입력창과 버튼에 사용할 텍스트를 추가합니다.

파일 위치: app/src/main/res/values/strings.xml

XML

<resources>
    <string name="app_name">LightMeter</string>
    <string name="spec_info_format">Spec: %.1f ~ %.1f lux</string>

    <!-- [추가] 기기 ID 관련 문자열 -->
    <string name="device_id_hint">기기 ID를 입력하세요</string>
    <string name="save_button_text">저장</string>
    <string name="current_device_id_label">현재 기기 ID: %s</string>
    <string name="device_id_not_set">설정 안됨</string>
    <string name="device_id_saved_message">기기 ID가 저장되었습니다.</string>
</resources>
## 3단계: activity_main.xml - UI 요소 추가
기기 ID를 입력받을 EditText와 저장할 Button, 그리고 현재 ID를 보여줄 TextView를 추가합니다.

파일 위치: app/src/main/res/layout/activity_main.xml

XML

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="@color/black"
    android:padding="16dp"
    tools:context=".MainActivity">

    <!-- 조도 값 표시 (기존과 동일) -->
    <TextView
        android:id="@+id/tv_lux_value"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="-"
        android:textSize="80sp"
        android:textStyle="bold"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintVertical_bias="0.3" />

    <TextView
        android:id="@+id/tv_unit"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="8dp"
        android:text="lux"
        android:textColor="@color/white"
        android:textSize="24sp"
        app:layout_constraintEnd_toEndOf="@+id/tv_lux_value"
        app:layout_constraintStart_toStartOf="@+id/tv_lux_value"
        app:layout_constraintTop_toBottomOf="@+id/tv_lux_value" />

    <TextView
        android:id="@+id/tv_spec_info"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="24dp"
        android:textColor="@color/white"
        android:textSize="16sp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/tv_unit"
        tools:text="Spec: 100.0 ~ 500.0 lux" />


    <!-- [수정 및 추가] 기기 ID 입력 섹션 -->
    <EditText
        android:id="@+id/et_device_id"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_marginTop="32dp"
        android:layout_marginEnd="8dp"
        android:hint="@string/device_id_hint"
        android:inputType="text"
        android:textColor="@color/white"
        android:textColorHint="#CCCCCC"
        app:layout_constraintEnd_toStartOf="@+id/btn_save_device_id"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/tv_spec_info" />

    <Button
        android:id="@+id/btn_save_device_id"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="@string/save_button_text"
        app:layout_constraintBottom_toBottomOf="@+id/et_device_id"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="@+id/et_device_id" />

    <TextView
        android:id="@+id/tv_current_device_id"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginTop="16dp"
        android:textColor="@color/white"
        android:textSize="16sp"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/et_device_id"
        tools:text="현재 기기 ID: MY-DEVICE-01" />

</androidx.constraintlayout.widget.ConstraintLayout>
## 4단계: MainActivity.kt - 모든 로직 수정
가장 많은 부분이 변경됩니다. 1초/1분 타이머, 기기 ID 저장/불러오기, 새로운 데이터 전송 로직이 모두 포함됩니다.

파일 위치: app/src/main/java/com/sec/lightmeter/MainActivity.kt

Kotlin

package com.sec.lightmeter

import android.content.Context
import android.content.SharedPreferences
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.WindowManager
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.sec.lightmeter.databinding.ActivityMainBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import retrofit2.converter.scalars.ScalarsConverterFactory
import retrofit2.http.Body
import retrofit2.http.POST

// --- [수정] API 통신을 위한 데이터 클래스 정의 ---
// 1초 실시간 로그용: 기기 ID와 조도 값 포함
data class RealtimeLog(val deviceId: String, val lux: Float)
// 1분 평균 로그용: 기기 ID와 평균 조도 값 포함
data class MinuteLog(val deviceId: String, val avgLux: Float)


// --- [수정] Retrofit API 명세 ---
interface ApiService {
    // 실시간 로그 전송 API
    @POST("log")
    fun postRealtimeLog(@Body data: RealtimeLog): Call<String>

    // [추가] 1분 평균 로그 전송 API
    @POST("log1min")
    fun postMinuteLog(@Body data: MinuteLog): Call<String>
}


class MainActivity : AppCompatActivity(), SensorEventListener {

    private lateinit var binding: ActivityMainBinding
    private lateinit var sensorManager: SensorManager
    private var lightSensor: Sensor? = null
    private lateinit var apiService: ApiService

    // --- [추가] 기기 ID 저장을 위한 SharedPreferences ---
    private lateinit var sharedPreferences: SharedPreferences
    private var currentDeviceId: String = ""

    // --- [수정] 1초 타이머 및 1분 타이머 분리 ---
    private var latestLuxValue: Float = 0.0f
    private val handlerRealtime = Handler(Looper.getMainLooper())
    private val handlerMinute = Handler(Looper.getMainLooper())

    // --- [추가] 1분간의 조도 값을 저장할 리스트 ---
    private val minuteLuxReadings = mutableListOf<Float>()

    // 1초마다 실행될 작업 (실시간 데이터 전송)
    private val runnableRealtime = object : Runnable {
        override fun run() {
            // 기기 ID가 설정되었을 때만 데이터 전송
            if (currentDeviceId.isNotEmpty()) {
                sendRealtimeDataToServer(currentDeviceId, latestLuxValue)
            }
            // 1분 평균 계산을 위해 현재 조도 값을 리스트에 추가
            minuteLuxReadings.add(latestLuxValue)
            // 1초 후에 다시 실행
            handlerRealtime.postDelayed(this, 1000)
        }
    }

    // 1분마다 실행될 작업 (평균 데이터 전송)
    private val runnableMinute = object : Runnable {
        override fun run() {
            // 기기 ID가 설정되었고, 측정된 데이터가 있을 때만 전송
            if (currentDeviceId.isNotEmpty() && minuteLuxReadings.isNotEmpty()) {
                val avgLux = minuteLuxReadings.average().toFloat()
                sendMinuteDataToServer(currentDeviceId, avgLux)
                minuteLuxReadings.clear() // 전송 후 리스트 비우기
            }
            // 1분(60000ms) 후에 다시 실행
            handlerMinute.postDelayed(this, 60000)
        }
    }

    // 조도 스펙 (기존과 동일)
    private val SPEC_MIN_LUX = 100.0f
    private val SPEC_MAX_LUX = 500.0f

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 화면 계속 켜기 (기존과 동일)
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        // --- [추가] SharedPreferences 초기화 ---
        sharedPreferences = getSharedPreferences("LightMeterPrefs", Context.MODE_PRIVATE)

        // --- [수정] 기능별 초기화 함수 호출로 코드 구조 개선 ---
        setupUI()
        loadDeviceId() // 저장된 기기 ID 불러오기
        setupSensor()
        setupNetwork()
    }

    // --- [추가] UI 관련 설정 함수 ---
    private fun setupUI() {
        binding.tvSpecInfo.text = getString(R.string.spec_info_format, SPEC_MIN_LUX, SPEC_MAX_LUX)
        binding.btnSaveDeviceId.setOnClickListener {
            val deviceId = binding.etDeviceId.text.toString().trim()
            if (deviceId.isNotEmpty()) {
                saveDeviceId(deviceId)
            }
        }
    }

    // --- [추가] 기기 ID를 불러오는 함수 ---
    private fun loadDeviceId() {
        val savedId = sharedPreferences.getString("DEVICE_ID", "") ?: ""
        currentDeviceId = savedId
        if (savedId.isNotEmpty()) {
            binding.tvCurrentDeviceId.text = getString(R.string.current_device_id_label, savedId)
        } else {
            binding.tvCurrentDeviceId.text = getString(R.string.current_device_id_label, getString(R.string.device_id_not_set))
        }
    }

    // --- [추가] 기기 ID를 저장하는 함수 ---
    private fun saveDeviceId(deviceId: String) {
        sharedPreferences.edit().putString("DEVICE_ID", deviceId).apply()
        currentDeviceId = deviceId
        binding.tvCurrentDeviceId.text = getString(R.string.current_device_id_label, deviceId)
        Toast.makeText(this, getString(R.string.device_id_saved_message), Toast.LENGTH_SHORT).show()
    }

    private fun setupSensor() {
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT)
        if (lightSensor == null) {
            binding.tvLuxValue.text = "조도 센서 없음"
            binding.tvUnit.text = ""
        }
    }

    private fun setupNetwork() {
        val retrofit = Retrofit.Builder()
            .baseUrl("http://여기에-사용자-우분투-서버-IP주소:3000/")
            .addConverterFactory(ScalarsConverterFactory.create())
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        apiService = retrofit.create(ApiService::class.java)
    }

    // --- [수정] 실시간 데이터 전송 함수 ---
    private fun sendRealtimeDataToServer(deviceId: String, lux: Float) {
        val logData = RealtimeLog(deviceId = deviceId, lux = lux)
        apiService.postRealtimeLog(logData).enqueue(object : Callback<String> {
            override fun onResponse(call: Call<String>, response: Response<String>) {
                if (response.isSuccessful) Log.d("NetworkSuccess", "실시간 전송 성공")
                else Log.e("NetworkError", "실시간 전송 실패: ${response.code()}")
            }
            override fun onFailure(call: Call<String>, t: Throwable) {
                Log.e("NetworkFailure", "실시간 네트워크 오류: ${t.message}")
            }
        })
    }

    // --- [추가] 1분 평균 데이터 전송 함수 ---
    private fun sendMinuteDataToServer(deviceId: String, avgLux: Float) {
        val logData = MinuteLog(deviceId = deviceId, avgLux = avgLux)
        apiService.postMinuteLog(logData).enqueue(object : Callback<String> {
            override fun onResponse(call: Call<String>, response: Response<String>) {
                if (response.isSuccessful) Log.d("NetworkSuccess", "1분 평균 전송 성공")
                else Log.e("NetworkError", "1분 평균 전송 실패: ${response.code()}")
            }
            override fun onFailure(call: Call<String>, t: Throwable) {
                Log.e("NetworkFailure", "1분 평균 네트워크 오류: ${t.message}")
            }
        })
    }

    override fun onResume() {
        super.onResume()
        sensorManager.registerListener(this, this, lightSensor, SensorManager.SENSOR_DELAY_UI)
        // --- [수정] 두 개의 타이머를 모두 시작 ---
        handlerRealtime.post(runnableRealtime)
        handlerMinute.post(runnableMinute)
    }

    override fun onPause() {
        super.onPause()
        sensorManager.unregisterListener(this)
        // --- [수정] 두 개의 타이머를 모두 중지 ---
        handlerRealtime.removeCallbacks(runnableRealtime)
        handlerMinute.removeCallbacks(runnableMinute)
    }

    override fun onSensorChanged(event: SensorEvent?) {
        if (event?.sensor?.type == Sensor.TYPE_LIGHT) {
            val luxValue = event.values[0]
            binding.tvLuxValue.text = "%.1f".format(luxValue)
            latestLuxValue = luxValue

            val colorResId = when {
                luxValue < SPEC_MIN_LUX -> R.color.spec_out_dark_blue
                luxValue > SPEC_MAX_LUX -> R.color.spec_out_bright_red
                else -> R.color.spec_in_black
            }
            binding.tvLuxValue.setTextColor(ContextCompat.getColor(this, colorResId))
        }
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
        // Do nothing
    }
}
## 5단계: API 서버 측에서 하실 일
안드로이드 앱은 이제 모든 준비가 끝났습니다. 이제 우분투 Node.js 서버에서 /log1min 주소로 오는 요청을 받아서 처리하는 코드만 추가하시면 됩니다.

server.js 파일에 아래 app.post('/log1min', ...) 부분을 추가해 주세요.

JavaScript

// ... 기존 /log 처리 코드 ...

// [추가] 1분 평균 로그를 처리하는 주소
app.post('/log1min', async (req, res) => {
    // 앱에서 보낸 deviceId와 avgLux 값을 받음
    const { deviceId, avgLux } = req.body; 

    if (deviceId === undefined || avgLux === undefined) {
        return res.status(400).send('deviceId 또는 avgLux 값이 없습니다.');
    }

    try {
        await sql.connect(dbConfig);
        
        // 참고: 1분 평균 데이터를 저장할 별도의 테이블(예: LightLogMinute)을 만드시는 것을 추천합니다.
        // 여기서는 편의상 같은 테이블에 넣는 예시를 보여드립니다.
        const request = new sql.Request();
        request.input('DeviceId', sql.VarChar, deviceId);
        request.input('AvgLuxValue', sql.Float, avgLux);
        
        // 예시: INSERT INTO LightLogMinute (DeviceId, AvgLuxValue) VALUES (@DeviceId, @AvgLuxValue)
        // 아래 쿼리는 실제 DB 테이블 구조에 맞게 수정해야 합니다.
        await request.query('INSERT INTO YourMinuteLogTable (DeviceId, AvgLuxValue) VALUES (@DeviceId, @AvgLuxValue)');
        
        console.log(`1분 평균 데이터 저장 성공: ${deviceId} - ${avgLux} lux`);
        res.status(200).send('1분 평균 데이터 저장 성공');

    } catch (err) {
        console.error('DB 오류 (1분):', err);
        res.status(500).send('서버 오류 발생');
    } finally {
        sql.close();
    }
});
