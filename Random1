장 기능 전체 구현 및 설명 (모든 데이터 저장하기)
요구 사항 확인
사용자(User)와 관리 항목(ManagementItems) 둘 다 저장되어야 함.

사용자 정보 (이름, KnoxId), 관리 항목 정보 (Name, Floor, Zone, SubPart, Manager, IsActive) 모두 저장 대상.

저장 기능은 버튼 클릭 시(Save Changes) 실행되도록 설정.

저장 로직은 DataRepository에서 관리하며, MSSQL 데이터베이스에 저장됨.

저장 함수는 SaveAll()로 통합하여 전체 정보를 저장하도록 구성.

📁 1. MainWindow.xaml (Save 버튼 추가 및 커맨드 바인딩)
xml
코드 복사
<Button Content="Save Changes" Command="{Binding SaveAllCommand}" Width="100" Margin="0,10,0,0"/>
📁 2. MainViewModel.cs (SaveAllCommand 추가 및 SaveAll() 구현)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Input;
using WPF_DevExpress_Locker_Management.Models;
using WPF_DevExpress_Locker_Management.Services;

namespace WPF_DevExpress_Locker_Management.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly DataRepository _dataRepository;
        public ObservableCollection<User> Users { get; set; }
        public User SelectedUser { get; set; }

        public ICommand AddUserCommand { get; }
        public ICommand DeleteUserCommand { get; }
        public ICommand SaveAllCommand { get; }

        public MainViewModel()
        {
            _dataRepository = new DataRepository();
            Users = new ObservableCollection<User>(_dataRepository.GetUsers());

            AddUserCommand = new RelayCommand(AddUser);
            DeleteUserCommand = new RelayCommand(DeleteUser);
            SaveAllCommand = new RelayCommand(SaveAll);
        }

        /// <summary>
        /// 모든 데이터를 저장하는 함수
        /// - 사용자 정보와 관리 항목 정보를 모두 저장한다.
        /// - DataRepository에서 SaveUser() 및 SaveManagementItems() 함수 호출.
        /// </summary>
        private void SaveAll()
        {
            if (SelectedUser != null)
            {
                _dataRepository.SaveUser(SelectedUser); // 사용자 정보 저장
                _dataRepository.SaveManagementItems(SelectedUser.UserId, SelectedUser.ManagementItems); // 관리 항목 저장
            }
        }

        private void AddUser()
        {
            var newUser = new User
            {
                UserId = Guid.NewGuid(),
                Name = "New User",
                KnoxId = "NewKnoxId"
            };
            Users.Add(newUser);
            _dataRepository.AddUser(newUser);
        }

        private void DeleteUser()
        {
            if (SelectedUser != null)
            {
                _dataRepository.DeleteUser(SelectedUser.UserId);
                Users.Remove(SelectedUser);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
📁 3. DataRepository.cs (저장 로직 구현 - 사용자 및 관리 항목 모두 저장)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using WPF_DevExpress_Locker_Management.Models;

namespace WPF_DevExpress_Locker_Management.Services
{
    public class DataRepository
    {
        private readonly string _connectionString = "Server=localhost;Database=LockerDB;User Id=your_user;Password=your_password;";

        /// <summary>
        /// 사용자 정보 저장 또는 업데이트
        /// </summary>
        public void SaveUser(User user)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand(@"
                    IF EXISTS (SELECT 1 FROM Users WHERE UserId = @UserId)
                        UPDATE Users SET Name = @Name, KnoxId = @KnoxId WHERE UserId = @UserId;
                    ELSE
                        INSERT INTO Users (UserId, Name, KnoxId) VALUES (@UserId, @Name, @KnoxId);
                ", conn);

                cmd.Parameters.AddWithValue("@UserId", user.UserId);
                cmd.Parameters.AddWithValue("@Name", user.Name);
                cmd.Parameters.AddWithValue("@KnoxId", user.KnoxId);

                cmd.ExecuteNonQuery();
            }
        }

        /// <summary>
        /// 관리 항목 정보 저장 또는 업데이트
        /// </summary>
        public void SaveManagementItems(Guid userId, ObservableCollection<ManagementItem> items)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();

                foreach (var item in items)
                {
                    var cmd = new SqlCommand(@"
                        IF EXISTS (SELECT 1 FROM ManagementItems WHERE UserId = @UserId AND Name = @Name)
                            UPDATE ManagementItems
                            SET Floor = @Floor, Zone = @Zone, SubPart = @SubPart, Manager = @Manager, IsActive = @IsActive
                            WHERE UserId = @UserId AND Name = @Name;
                        ELSE
                            INSERT INTO ManagementItems (UserId, Name, Floor, Zone, SubPart, Manager, IsActive)
                            VALUES (@UserId, @Name, @Floor, @Zone, @SubPart, @Manager, @IsActive);
                    ", conn);

                    cmd.Parameters.AddWithValue("@UserId", userId);
                    cmd.Parameters.AddWithValue("@Name", item.Name);
                    cmd.Parameters.AddWithValue("@Floor", item.Floor ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@Zone", item.Zone ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@SubPart", item.SubPart ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@Manager", item.Manager ?? (object)DBNull.Value);
                    cmd.Parameters.AddWithValue("@IsActive", item.IsActive);

                    cmd.ExecuteNonQuery();
                }
            }
        }
    }
}
✅ 전체 저장 기능 설명
SaveAll() 함수 (MainViewModel.cs)

SelectedUser와 그에 속한 ManagementItems를 데이터베이스에 저장한다.

호출 순서: SaveUser() → SaveManagementItems()

SaveUser() 함수 (DataRepository.cs)

사용자가 수정된 정보를 MSSQL 데이터베이스에 저장하거나 업데이트한다.

SaveManagementItems() 함수 (DataRepository.cs)

사용자가 수정된 관리 항목 정보를 MSSQL 데이터베이스에 저장하거나 업데이트한다.

📌 저장 버튼 클릭 시 실행 흐름
사용자가 버튼(Save Changes) 클릭.

SaveAll() 함수 호출.

사용자 정보 저장 (SaveUser()).

관리 항목 정보 저장 (SaveManagementItems()).

모든 데이터가 MSSQL 데이터베이스에 저장됨.
