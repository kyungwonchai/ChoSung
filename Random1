using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    // 버튼 설정을 위한 클래스 정의
    public class ButtonConfig
    {
        public string PageName { get; set; }
        public string GroupName { get; set; }
        public string ButtonName { get; set; }
        public string Caption { get; set; }
        public string Tag { get; set; }
        public Image Icon { get; set; }
        public RibbonItemStyles Style { get; set; }
    }

    // 버튼 설정을 저장할 리스트
    private List<ButtonConfig> buttonConfigs = new List<ButtonConfig>
    {
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnNew", Caption = "새로 만들기", Tag = "NewDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnOpen", Caption = "열기", Tag = "OpenDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnSave", Caption = "저장", Tag = "SaveDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "Print", ButtonName = "btnPrint", Caption = "인쇄", Tag = "PrintDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "Help", GroupName = "Support", ButtonName = "btnHelp", Caption = "도움말", Tag = "Help", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.SmallWithText }
    };

    public MainForm()
    {
        InitializeComponent();

        // 커스텀 버튼 추가 메서드 호출
        AddCustomButtons();

        // 체크박스 생성 및 설정
        CheckBox toggleButtonVisibilityCheckBox = new CheckBox
        {
            Text = "커스텀 버튼 표시",
            Checked = true, // 기본적으로 체크 상태 (버튼 표시)
            AutoSize = true,
            Dock = DockStyle.Top
        };

        // 체크박스의 체크 상태 변경 이벤트 핸들러 등록
        toggleButtonVisibilityCheckBox.CheckedChanged += ToggleButtonVisibilityCheckBox_CheckedChanged;

        // 체크박스를 폼에 추가
        this.Controls.Add(toggleButtonVisibilityCheckBox);
    }

    private void AddCustomButtons()
    {
        // RibbonControl 인스턴스가 'ribbonK'라고 가정합니다.

        // 버튼 설정 리스트를 순회하며 버튼 생성 및 추가
        foreach (var config in buttonConfigs)
        {
            // RibbonPage 찾기
            RibbonPage page = ribbonK.Pages.FirstOrDefault(p => p.Name == config.PageName);
            if (page == null)
            {
                // 페이지가 없으면 생성하여 추가
                page = new RibbonPage(config.PageName) { Text = config.PageName };
                ribbonK.Pages.Add(page);
            }

            // RibbonPageGroup 찾기
            RibbonPageGroup group = page.Groups.FirstOrDefault(g => g.Name == config.GroupName);
            if (group == null)
            {
                // 그룹이 없으면 생성하여 추가
                group = new RibbonPageGroup(config.GroupName) { Text = config.GroupName };
                page.Groups.Add(group);
            }

            // BarButtonItem 생성
            BarButtonItem newButton = new BarButtonItem
            {
                Name = config.ButtonName,
                Caption = config.Caption,
                Tag = config.Tag,
                Id = ribbonK.Manager.GetNewItemId(),
                ImageOptions = { Image = config.Icon },
                RibbonStyle = config.Style
            };

            // 그룹에 새로운 버튼 추가
            group.ItemLinks.Add(newButton);
        }
    }

    private void ToggleButtonVisibilityCheckBox_CheckedChanged(object sender, System.EventArgs e)
    {
        CheckBox checkBox = sender as CheckBox;
        bool isChecked = checkBox.Checked;

        // 버튼 설정 리스트에 정의된 버튼들의 가시성 설정
        foreach (var config in buttonConfigs)
        {
            BarButtonItem button = ribbonK.Items.OfType<BarButtonItem>().FirstOrDefault(b => b.Name == config.ButtonName);
            if (button != null)
            {
                button.Visibility = isChecked ? BarItemVisibility.Always : BarItemVisibility.Never;
            }
        }
    }