겠습니다. commandqueue를 포함한 파일의 데이터와 나머지 txt 파일들의 로그 데이터를 모두 하나의 CSV 파일로 병합하여 시간 순서대로 정렬해서 함께 표시하도록 수정하겠습니다. 두 종류의 파일을 처리하고, commandqueue 파일과 그렇지 않은 파일을 구분하여 각각의 로그를 처리한 후, 최종적으로 시간 순으로 병합하여 CSV 파일에 저장합니다.

python
코드 복사
import os
import csv
from datetime import datetime

# Log file directory
log_directory = "c:/test"

# List to store the parsed log data for both commandqueue and other logs
log_data = []

# Process commandqueue files
for filename in os.listdir(log_directory):
    if filename.endswith(".txt") and "commandqueue" in filename.lower():
        file_path = os.path.join(log_directory, filename)
        
        # Open and read the file once
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                # Split the line by '|'
                parts = line.strip().split('|')
                if len(parts) == 7:  # Only process if all required fields are present
                    # Extract the first 14 characters of SentValue as a prefix
                    prefix = parts[1][:14]
                    response_value = parts[2]
                    
                    # Extracted values based on conditions
                    if "WDD" in prefix:
                        sent_value = parts[1]
                        extracted_value = sent_value[19:] if len(sent_value) >= 20 else ""
                    else:
                        extracted_value = response_value[-7:] if len(response_value) >= 7 else response_value
                    
                    # Remove the last 2 characters from the extracted value
                    extracted_value = extracted_value[:-2] if len(extracted_value) > 2 else ""
                    
                    # Add the row to the log data list
                    log_data.append([parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], prefix, extracted_value])

# Process other .txt files (non-commandqueue files)
for filename in os.listdir(log_directory):
    if filename.endswith(".txt") and "commandqueue" not in filename.lower():
        file_path = os.path.join(log_directory, filename)
        
        # Open and read the file once, process all lines at once
        with open(file_path, 'r', encoding='utf-8') as file:
            lines = file.readlines()
            for line in lines:
                # Extract time value enclosed in [] and the remaining part as SentValue
                if '[' in line and ']' in line:
                    start_idx = line.index('[')
                    end_idx = line.index(']', start_idx) + 1
                    time_value = line[start_idx:end_idx]  # Extract the time value with brackets
                    remaining_value = line[end_idx:].strip()  # Remaining part of the line as SentValue
                    
                    # Add a row for non-commandqueue logs, filling other columns as empty
                    log_data.append([time_value, remaining_value, "", "", "", "", "", "", ""])

# Sort the log data by the time value
log_data.sort(key=lambda x: x[0])

# Prepare the output directory
output_directory = "c:/test/csv2"
os.makedirs(output_directory, exist_ok=True)

# Create the output file name with the current timestamp
timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
output_file = os.path.join(output_directory, f"{timestamp}_merged_log_output.csv")

# Save the sorted data to a CSV file
with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
    csvwriter = csv.writer(csvfile)
    # Write column headers
    headers = ["Time", "SentValue", "ResponseValue", "Result", "Result2", "Retry", "Speed", "Prefix", "ExtractedValue"]
    csvwriter.writerow(headers)
    # Write all the data at once
    csvwriter.writerows(log_data)

print(f"CSV file has been saved as '{output_file}'.")
코드 설명
두 종류의 파일을 병합:
commandqueue를 포함한 파일은 기존 방식대로 처리하여 여러 컬럼 (예: SentValue, ResponseValue, Result, 등)을 포함하고 추가적인 컬럼 (Prefix, ExtractedValue)을 계산합니다.
commandqueue를 포함하지 않은 파일 (txt 파일)에서는 시간 값 (Time)과 나머지 텍스트 값을 SentValue에 넣어 하나의 데이터로 저장합니다.
시간 순서로 병합:
두 종류의 로그 데이터를 log_data 리스트에 추가한 후, 시간 순서대로 정렬하여 병합합니다.
CSV 파일 저장: