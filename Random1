TERMEC PF 4i 프린터에서 WPF를 사용하여 C#으로 표 형태의 데이터를 인쇄하는 코드 샘플을 제공해 드리겠습니다. 이 예제에서는 5행 3열의 데이터를 ViewBox를 활용하여 출력하는 방법을 설명드립니다.

먼저, WPF XAML에서 인쇄할 내용을 표시할 DataGrid를 정의하고, ViewBox를 사용하여 화면에 꽉 차게 출력하도록 설정합니다. 그리고 C# 코드에서는 PrintDialog를 사용하여 인쇄를 수행합니다.

XAML 구성
xml
Copy code
<Window x:Class="PrintSample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Printer Sample" Height="450" Width="800">
    <Grid>
        <Viewbox Stretch="Uniform">
            <DataGrid x:Name="dataGrid" AutoGenerateColumns="False" IsReadOnly="True">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="Column1" Binding="{Binding Column1}" />
                    <DataGridTextColumn Header="Column2" Binding="{Binding Column2}" />
                    <DataGridTextColumn Header="Column3" Binding="{Binding Column3}" />
                </DataGrid.Columns>
            </DataGrid>
        </Viewbox>
    </Grid>
</Window>
C# 코드
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Documents;

namespace PrintSample
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            var items = new List<MyItem>
            {
                new MyItem { Column1 = "Row1, Col1", Column2 = "Row1, Col2", Column3 = "Row1, Col3" },
                new MyItem { Column1 = "Row2, Col1", Column2 = "Row2, Col2", Column3 = "Row2, Col3" },
                // Add more rows as needed
            };

            dataGrid.ItemsSource = items;
        }

        private void PrintData()
        {
            PrintDialog printDialog = new PrintDialog();
            if (printDialog.ShowDialog() == true)
            {
                printDialog.PrintVisual(dataGrid, "Printing DataGrid");
            }
        }
    }

    public class MyItem
    {
        public string Column1 { get; set; }
        public string Column2 { get; set; }
        public string Column3 { get; set; }
    }
}
이 코드는 DataGrid를 사용하여 데이터를 구조화하고, 이를 ViewBox를 사용해 확장하여 전체 페이지에 균일하게 출력될 수 있도록 합니다. PrintData 메소드에서는 PrintDialog를 통해 인쇄를 시작합니다.

인쇄 버튼을 추가하거나 인쇄를 시작하는 다른 방법을 구현해야 할 수도 있습니다. 데이터와 필드는 예시를 위한 것이므로, 실제 필요에 맞게