MainWindow.xaml.cs 파일이 너무 길기 때문에 일부 기능을 별도의 클래스로 분리하겠습니다.

프로젝트 구조
MainWindow.xaml
MainWindow.xaml.cs
SettingsManager.cs
MLModelBuilder.cs
FileCleaner.cs
FileRecord.cs
1. MainWindow.xaml
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD File Cleaner" Height="600" Width="800">
    <Grid>
        <StackPanel>
            <StackPanel Orientation="Horizontal" Margin="10">
                <TextBox Name="txtFolderPath" Width="400" Margin="10" Text="D:\" IsReadOnly="True"/>
                <Button Name="btnSelectFolder" Content="Select Folder" Width="150" Margin="10" Click="btnSelectFolder_Click"/>
            </StackPanel>
            <TextBox Name="txtFileExtension" Width="400" Margin="10" Text="Enter file extension (e.g., .jpg)"/>
            <TextBox Name="txtDriveName" Width="400" Margin="10" Text="D:\" IsReadOnly="True"/>
            <Button Name="btnStart" Content="Start Cleaning" Width="200" Margin="10" Click="btnStart_Click"/>
            <Button Name="btnSaveSettings" Content="Save Settings" Width="200" Margin="10" Click="btnSaveSettings_Click"/>
            <Button Name="btnLoadSettings" Content="Load Settings" Width="200" Margin="10" Click="btnLoadSettings_Click"/>
            <ListBox Name="lstRecentLogs" Width="750" Height="150" Margin="10"/>
            <ListBox Name="lstDeletionLogs" Width="750" Height="150" Margin="10"/>
            <TextBlock Text="Current Pattern Rules:" Margin="10"/>
            <TextBlock Name="txtCurrentPatterns" Width="750" Height="50" Margin="10"/>
            <TextBlock Text="Files to Delete (Priority Order):" Margin="10"/>
            <ListBox Name="lstPriorityFiles" Width="750" Height="150" Margin="10"/>
        </StackPanel>
    </Grid>
</Window>
2. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private const long MinimumFreeSpace = 20L * 1024 * 1024 * 1024; // 20 GB
        private string logDirectory = @"C:\agent\SMDFIleClean";
        private MLModelBuilder _mlModelBuilder;
        private SettingsManager _settingsManager;
        private FileCleaner _fileCleaner;

        public MainWindow()
        {
            InitializeComponent();
            _mlModelBuilder = new MLModelBuilder();
            _settingsManager = new SettingsManager();
            _fileCleaner = new FileCleaner(logDirectory, _mlModelBuilder, Dispatcher);
            LoadSettings();
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                SaveSettings();
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void btnLoadSettings_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                LoadSettings();
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = txtFolderPath.Text;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    txtFolderPath.Text = dialog.SelectedPath;
                }
            }
        }

        private void SaveSettings()
        {
            try
            {
                _settingsManager.SaveSettings(new Settings
                {
                    FolderPath = txtFolderPath.Text,
                    FileExtension = txtFileExtension.Text,
                    DriveName = txtDriveName.Text
                });
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = _settingsManager.LoadSettings();
                if (settings != null)
                {
                    txtFolderPath.Text = settings.FolderPath ?? "D:\\";
                    txtFileExtension.Text = settings.FileExtension ?? "Enter file extension (e.g., .jpg)";
                    txtDriveName.Text = settings.DriveName ?? "D:\\";
                }
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private async void btnStart_Click(object sender, RoutedEventArgs e)
        {
            string folderPath = txtFolderPath.Text;
            string fileExtension = txtFileExtension.Text;
            string driveName = txtDriveName.Text;

            if (string.IsNullOrEmpty(folderPath) || folderPath == "Enter folder path" ||
                string.IsNullOrEmpty(fileExtension) || fileExtension == "Enter file extension (e.g., .jpg)" ||
                string.IsNullOrEmpty(driveName) || driveName == "Enter drive name (e.g., D:\\)")
            {
                MessageBox.Show("Please provide all inputs.");
                return;
            }

            try
            {
                var initialFiles = CollectInitialFileData(folderPath, fileExtension);
                _mlModelBuilder.TrainModel(initialFiles);

                await MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName);
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private List<FileRecord> CollectInitialFileData(string folderPath, string fileExtension)
        {
            try
            {
                DirectoryInfo directory = new DirectoryInfo(folderPath);
                var files = directory.GetFiles($"*{fileExtension}", SearchOption.AllDirectories);

                var fileDataList = files.Select(f => new FileRecord
                {
                    Hour = f.CreationTime.Hour,
                    DayOfWeek = (int)f.CreationTime.DayOfWeek
                }).ToList();

                Dispatcher.Invoke(() =>
                {
                    txtCurrentPatterns.Text = $"Training on {files.Length} files";
                });

                return fileDataList;
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
                return new List<FileRecord>();
            }
        }

        private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
        {
            while (true)
            {
                try
                {
                    long freeSpace = _fileCleaner.GetDriveFreeSpace(driveName);
                    if (freeSpace < MinimumFreeSpace)
                    {
                        List<FileInfo> filesToDelete = _fileCleaner.GetFilesToDelete(folderPath, fileExtension);
                        DisplayFilesToDelete(filesToDelete);
                        //await _fileCleaner.DeleteFilesAsync(filesToDelete); // 실제 삭제 코드 (주석 처리)
                    }

                    _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension);
                    await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
                }
                catch (Exception ex)
                {
                    LogError(ex.Message);
                }
            }
        }

        private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
        {
            Dispatcher.Invoke(() =>
            {
                lstPriorityFiles.Items.Clear();
                foreach (var file in filesToDelete)
                {
                    lstPriorityFiles.Items.Add(file.FullName);
                }
            });
        }

        private void LogError(string message)
        {
            try
            {
                string logPath = Path.Combine(logDirectory, DateTime.Now.ToString("yyyyMMdd"), "errorlog.txt");
                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
                string logMessage = $"{DateTime.Now}: {message}";

                File.AppendAllText(logPath, logMessage + Environment.NewLine);

                Dispatcher.Invoke(() =>
                {
                    lstRecentLogs.Items.Add(logMessage);
                    if (lstRecentLogs.Items.Count > 200)
                    {
                        lstRecentLogs.Items.RemoveAt(0);
                    }
                });
            }
            catch (Exception)
            {
                // 에러 로깅에 실패한 경우 추가 조치 없음
            }
        }
    }

    public class FileRecord
    {
        public float Hour { get; set; }
        public float DayOfWeek { get; set; }
    }
}
3. FileCleaner.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public class FileCleaner
    {
        private const long MinimumFreeSpace = 20L * 1024 * 1024 * 1024; // 20 GB
        private readonly string logDirectory;
        private readonly MLModelBuilder mlModelBuilder;
        private readonly Dispatcher dispatcher;

        public FileCleaner(string logDirectory, MLModelBuilder mlModelBuilder, Dispatcher dispatcher)
        {
            this.logDirectory = logDirectory;
            this.mlModelBuilder = mlModelBuilder;
            this.dispatcher = dispatcher;
        }

        public long GetDriveFreeSpace(string driveName)
        {
            try
            {
                DriveInfo drive = new DriveInfo(driveName);
                return drive.AvailableFreeSpace;
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
                return 0;
            }
        }

        public List<FileInfo> GetFilesToDelete(string folderPath, string fileExtension)
        {
            try
            {
                DirectoryInfo directory = new DirectoryInfo(folderPath);
                var files = directory.GetFiles($"*{fileExtension}", SearchOption.AllDirectories)
                                      .OrderBy(f => f.CreationTime)
                                      .ToList();

                var filesToDelete = files.Where(file => mlModelBuilder.Predict(file)).ToList();

                dispatcher.Invoke(() =>
                {
                    // 현재 패턴을 UI에 업데이트
                });

                return filesToDelete;
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
                return new List<FileInfo>();
            }
        }

        public async Task DeleteFilesAsync(List<FileInfo> files)
        {
            foreach (var file in files)
            {
                try
                {
                    // 실제 파일 삭제 (주석 처리)
                    // file.Delete();
                    LogDeletion(file.FullName);
                    await Task.Delay(100); // 파일 삭제 시 딜레이 추가
                }
                catch (Exception ex)
                {
                    LogError(ex.Message);
                }
            }
        }

        public void UpdateFolderStatistics(string folderPath, string fileExtension)
        {
            try
            {
                DirectoryInfo directory = new DirectoryInfo(folderPath);
                var files = directory.GetFiles($"*{fileExtension}", SearchOption.AllDirectories);
                long totalSize = files.Sum(f => f.Length);

                dispatcher.Invoke(() =>
                {
                    // 폴더 통계를 UI에 업데이트
                });
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void LogDeletion(string filePath)
        {
            try
            {
                string logPath = Path.Combine(logDirectory, DateTime.Now.ToString("yyyyMMdd"), "yyyyMMddlog.txt");
                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
                string logMessage = $"{DateTime.Now}: Deleted {filePath}";

                File.AppendAllText(logPath, logMessage + Environment.NewLine);

                dispatcher.Invoke(() =>
                {
                    // 삭제 로그를 UI에 업데이트
                });
            }
            catch (Exception ex)
            {
                LogError(ex.Message);
            }
        }

        private void LogError(string message)
        {
            try
            {
                string logPath = Path.Combine(logDirectory, DateTime.Now.ToString("yyyyMMdd"), "errorlog.txt");
                Directory.CreateDirectory(Path.GetDirectoryName(logPath));
                string logMessage = $"{DateTime.Now}: {message}";

                File.AppendAllText(logPath, logMessage + Environment.NewLine);
            }
            catch (Exception)
            {
                // 에러 로깅에 실패한 경우 추가 조치 없음
            }
        }
    }
}
4. MLModelBuilder.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace SMDFileCleaner
{
    public class MLModelBuilder
    {
        private readonly MLContext _mlContext;
        private ITransformer _model;
        private List<FileRecord> _fileDataList;

        public MLModelBuilder()
        {
            _mlContext = new MLContext();
            _fileDataList = new List<FileRecord>();
        }

        public void TrainModel(List<FileRecord> fileData)
        {
            try
            {
                _fileDataList = fileData;
                var data = _mlContext.Data.LoadFromEnumerable(fileData);
                var pipeline = _mlContext.Transforms.Concatenate("Features", nameof(FileRecord.Hour), nameof(FileRecord.DayOfWeek))
                    .Append(_mlContext.Clustering.Trainers.KMeans("Features", numberOfClusters: 2));

                _model = pipeline.Fit(data);
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Failed to train model.", ex);
            }
        }

        public bool Predict(FileInfo fileInfo)
        {
            try
            {
                if (_model == null)
                {
                    throw new InvalidOperationException("Model is not trained.");
                }

                var fileData = new FileRecord
                {
                    Hour = fileInfo.CreationTime.Hour,
                    DayOfWeek = (int)fileInfo.CreationTime.DayOfWeek
                };

                var predictionEngine = _mlContext.Model.CreatePredictionEngine<FileRecord, FilePrediction>(_model);
                var prediction = predictionEngine.Predict(fileData);

                return prediction.PredictedClusterId == 1; // Cluster 1 is considered as regularly generated files
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Failed to predict file classification.", ex);
            }
        }

        public string GetCurrentPatterns()
        {
            try
            {
                var patternGroups = _fileDataList.GroupBy(f => new { f.Hour, f.DayOfWeek })
                    .Select(g => new { g.Key.Hour, g.Key.DayOfWeek, Count = g.Count() })
                    .OrderByDescending(g => g.Count);

                return string.Join(", ", patternGroups.Select(g => $"Hour: {g.Hour}, Day: {g.DayOfWeek}, Count: {g.Count}"));
            }
            catch (Exception ex)
            {
                throw new ApplicationException("Failed to get current patterns.", ex);
            }
        }
    }

    public class FileRecord
    {
        public float Hour { get; set; }
        public float DayOfWeek { get; set; }
    }

    public class FilePrediction
    {
        [ColumnName("PredictedLabel")]
        public uint PredictedClusterId { get; set; }
    }
}
설명
UI 개선: 더 깔끔하고 직관적인 UI로 수정합니다.
폴더 선택 기능: 폴더를 선택할 때 선택 창이 뜨도록 합니다.
기본 경로 설정: 기본 폴더 경로를 D:\로 설정합니다.
삭제 시뮬레이션: 실제로 파일을 삭제하지 않고 삭제할 파일 목록만 로그에 남깁니다.
우선순위 파일 표시: 삭제 우선순위에 따라 파일을 리스트박스에 표시합니다.
이제 이 코드를 사용하면 설정이 자동으로 저장되고 불러와지며, 머신러닝 모델을 통