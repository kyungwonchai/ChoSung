using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class SocketClientMergeOI
{
    private TcpClient _client;
    private NetworkStream _stream;
    private readonly string _ipAddress;
    private readonly int _port;
    private bool _isConnected;
    private const int _retryInterval = 2000;  // 2초 간격으로 재시도
    private const int _maxRetryTime = 5 * 60 * 1000;  // 최대 5분 (300초)

    public SocketClientMergeOI(string ipAddress, int port)
    {
        _ipAddress = ipAddress;
        _port = port;
        _client = new TcpClient();
        _isConnected = false;
    }

    // 메시지를 보내고 응답을 받는 비동기 함수
    public async Task<string> SendAndReceiveMessageAsync(string message)
    {
        if (!_isConnected)
        {
            bool isConnected = await TryReconnectAsync();
            if (!isConnected)
                return "NG";  // 재연결 실패
        }

        try
        {
            byte[] dataToSend = Encoding.ASCII.GetBytes(message);  // 메시지 인코딩
            await _stream.WriteAsync(dataToSend, 0, dataToSend.Length);  // 메시지 전송

            // 수신 대기
            byte[] buffer = new byte[1024];
            int bytesRead = await _stream.ReadAsync(buffer, 0, buffer.Length);  // 응답 읽기
            string receivedMessage = Encoding.ASCII.GetString(buffer, 0, bytesRead);  // 응답을 문자열로 변환

            return receivedMessage;  // 정상 응답 반환
        }
        catch (Exception ex)
        {
            Console.WriteLine($"예외 발생: {ex.Message}");

            // 연결 상태 확인 후 재연결 시도
            if (!_client.Connected || (ex is SocketException))
            {
                _isConnected = false;
                bool isConnected = await TryReconnectAsync();
                if (!isConnected)
                    return "NG";  // 재연결 실패
                else
                    return await SendAndReceiveMessageAsync(message);  // 재연결 성공 후 메시지 재전송
            }

            return "NG";  // 재연결할 수 없는 경우 NG 반환
        }
    }

    // 재연결 시도 함수 (최대 5분 동안 2초 간격으로 재시도)
    private async Task<bool> TryReconnectAsync()
    {
        int elapsedTime = 0;

        while (elapsedTime < _maxRetryTime)
        {
            try
            {
                // 클라이언트가 연결이 안 된 상태라면 재연결 시도
                if (!_isConnected)
                {
                    _client = new TcpClient();
                    await _client.ConnectAsync(_ipAddress, _port);
                    _stream = _client.GetStream();  // 스트림 설정
                    _isConnected = true;  // 연결 성공
                    return true;  // 재연결 성공
                }
            }
            catch (SocketException)
            {
                // 연결 실패시 타이머로 재시도
                await Task.Delay(_retryInterval);  // 2초 대기 후 재시도
                elapsedTime += _retryInterval;
            }
        }

        return false;  // 5분 내에 연결 실패
    }
}
