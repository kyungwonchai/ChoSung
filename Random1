rocessFilesAsync 함수에서 Directory.GetFiles를 호출할 때, 파일의 쓰기 시간 기준으로 정렬된 순서로 처리되도록 수정한 코드를 아래에 제공합니다.

Directory.GetFiles는 기본적으로 정렬을 지원하지 않으므로, 검색 후 FileInfo를 사용해 정렬하는 로직을 추가했습니다.

수정된 ProcessFilesAsync 함수
csharp
코드 복사
/// <summary>
/// 파일 처리 - 쓰기 시간이 오래된 순서대로 파일 처리
/// </summary>
private async Task ProcessFilesAsync()
{
    string sourceDirectory = GetAvailableDrive();
    if (sourceDirectory == null)
    {
        AddLog("사용 가능한 드라이브가 없습니다. 작업을 건너뜁니다.");
        return;
    }

    try
    {
        // 드라이브에서 .crb 파일 검색 후 쓰기 시간 기준으로 정렬
        var crbFiles = Directory.GetFiles(sourceDirectory, "*.crb", SearchOption.AllDirectories)
            .Select(file => new FileInfo(file))
            .OrderBy(fileInfo => fileInfo.LastWriteTime) // 쓰기 시간 기준 정렬
            .ToList();

        if (!crbFiles.Any())
        {
            AddLog("복사할 파일이 없습니다.");
            return;
        }

        bool fileProcessed = false;

        foreach (var fileInfo in crbFiles)
        {
            // 새로운 파일만 처리
            if (fileInfo.LastWriteTime <= _lastCopiedTime)
                continue;

            string formattedTime = fileInfo.LastWriteTime.ToString("yyyyMMddHHmmss");
            string destinationPath = Path.Combine(DestinationDirectory, $"{formattedTime}_{fileInfo.Name}");

            if (File.Exists(destinationPath))
            {
                AddLog($"이미 존재: {destinationPath}");
            }
            else
            {
                await Task.Run(() => File.Copy(fileInfo.FullName, destinationPath, true));
                AddLog($"파일 복사 완료: {destinationPath}");
            }

            _lastCopiedTime = fileInfo.LastWriteTime; // 마지막 복사 시간 갱신
            fileProcessed = true;
        }

        if (!fileProcessed)
        {
            AddLog("복사할 파일이 없습니다.");
        }

        // 1개월 지난 파일 삭제
        DeleteOldFiles();
    }
    catch (Exception ex)
    {
        AddLog($"에러 발생: {ex.Message}");
    }
}
변경 사항 설명
파일 정렬 로직 추가:

Directory.GetFiles 결과를 FileInfo 객체로 변환.
파일 리스트를 OrderBy(fileInfo => fileInfo.LastWriteTime)로 정렬하여 쓰기 시간이 가장 오래된 파일부터 처리.
리스트 변환:

.ToList()를 사용해 파일을 리스트로 변환하여 재사용 가능.
정렬된 파일 처리:

정렬된 순서대로 반복하며, _lastCopiedTime보다 새로운 파일만 복사.
예상 로그 출력
파일이 복사되면:

csharp
코드 복사
[20250116 120000] 파일 복사 완료: C:\MountCrbShare\20250115120000_File1.crb
이미 존재하는 파일:

csharp
코드 복사
[20250116 120001] 이미 존재: C:\MountCrbShare\20250115120000_File1.crb
복사할 파일이 없으면:

csharp
코드 복사