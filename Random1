문제는 이벤트 핸들러의 클로저 문제로 인해 발생하는 현상입니다. 이벤트 핸들러가 생성될 때마다 항상 최신의 clickedItemLink를 참조하게 되어서, 버튼 클릭 시마다 마지막으로 참조된 항목의 동작을 수행하게 됩니다. 또한, 삭제 동작 역시 이와 관련된 문제로 인해 첫 번째 삭제만 정상적으로 동작하고, 이후 삭제가 제대로 되지 않는 현상이 발생합니다.

이 문제를 해결하기 위해서는 이벤트 핸들러가 올바른 컨텍스트를 갖도록 특정 정보를 클로저로 캡처하거나, 변수를 복사하여 이벤트 핸들러에서 사용하도록 해야 합니다.

수정된 코드
이벤트 핸들러가 각 항목에 대해 올바르게 동작하도록, BarButtonItem과 BarItemLink를 각각 캡처하여 이벤트 핸들러에서 사용할 수 있도록 수정했습니다.

csharp
코드 복사
// RibbonControl의 컨텍스트 메뉴를 열 때 발생하는 이벤트 핸들러
private void ribbonControl_ShowCustomizationMenu(object sender, DevExpress.XtraBars.Ribbon.RibbonCustomizationMenuEventArgs e)
{
    clickedItemLink = e.Link;
    if (clickedItemLink == null) return;

    // 클릭된 메뉴 항목이 MyMenu에 속한 항목인지 확인
    var isInMyMenu = myMenuPage.Groups.Any(group => group.ItemLinks.Contains(clickedItemLink));

    // "MyMenu에 추가"와 "MyMenu에서 삭제" 항목을 동적으로 처리
    BarItemLink menuAddToMyMenu = e.CustomizationMenu.ItemLinks
        .Where(link => link.Caption == "MyMenu에 추가").FirstOrDefault();
    BarItemLink menuRemoveFromMyMenu = e.CustomizationMenu.ItemLinks
        .Where(link => link.Caption == "MyMenu에서 삭제").FirstOrDefault();

    // MyMenu에 있는 항목을 우클릭하면 "MyMenu에서 삭제"만 보이도록 설정
    if (isInMyMenu)
    {
        if (menuAddToMyMenu != null)
        {
            e.CustomizationMenu.ItemLinks.Remove(menuAddToMyMenu);
        }

        // "MyMenu에서 삭제" 명령이 없으면 추가
        if (menuRemoveFromMyMenu == null)
        {
            menuRemoveFromMyMenu = e.CustomizationMenu.AddItem(CreateRemoveFromMyMenuCommand(clickedItemLink));
            menuRemoveFromMyMenu.BeginGroup = true;
        }
    }
    else
    {
        // MyMenu 외부에서 우클릭하면 "MyMenu에서 삭제" 항목은 제거하고 "MyMenu에 추가"만 보이도록 설정
        if (menuRemoveFromMyMenu != null)
        {
            e.CustomizationMenu.ItemLinks.Remove(menuRemoveFromMyMenu);
        }

        // "MyMenu에 추가" 명령이 없으면 추가
        if (menuAddToMyMenu == null)
        {
            menuAddToMyMenu = e.CustomizationMenu.AddItem(GetAddToMyMenuCommand());
            menuAddToMyMenu.BeginGroup = true;
        }
    }
}

// "MyMenu에 추가" 명령 클릭 시 호출되는 이벤트 핸들러
void biAddToMyMenu_ItemClick(object sender, ItemClickEventArgs e)
{
    // 클릭된 항목(우클릭된 항목)이 null이 아니면 MyMenu에 추가
    if (clickedItemLink != null && myMenuPage != null)
    {
        // 중복 추가를 방지 (이미 동일한 항목이 있으면 추가하지 않음)
        if (myMenuPage.Groups.Any(group => group.Text == clickedItemLink.Caption))
        {
            MessageBox.Show("이미 MyMenu에 추가된 항목입니다.");
            return;
        }

        // 새 그룹을 생성하여 항목을 추가 (그룹별로 하나의 아이콘)
        RibbonPageGroup newGroup = new RibbonPageGroup();
        newGroup.Text = clickedItemLink.Item.Caption; // 그룹 텍스트 설정
        myMenuPage.Groups.Add(newGroup);

        // 우클릭했던 항목의 캡션, 아이콘 등 동일한 속성을 유지하여 MyMenu에 추가
        BarButtonItem newMenuItem = new BarButtonItem
        {
            Caption = clickedItemLink.Item.Caption,
            Glyph = ((BarButtonItem)clickedItemLink.Item).Glyph,
            LargeGlyph = ((BarButtonItem)clickedItemLink.Item).LargeGlyph,
        };

        // 원래 우클릭했던 항목의 기능을 동일하게 실행하도록 캡처하여 이벤트 할당
        BarItemLink capturedLink = clickedItemLink; // 캡처한 링크
        newMenuItem.ItemClick += (s, args) =>
        {
            capturedLink.Item.PerformClick(); // 캡처한 링크의 기능 실행
        };

        // 새 그룹에 추가
        newGroup.ItemLinks.Add(newMenuItem);

        // MyMenu 항목 저장
        SaveMyMenuItems();
    }
}

// "MyMenu에서 삭제" 명령을 정의하고 반환하는 메서드
BarItem CreateRemoveFromMyMenuCommand(BarItemLink linkToRemove)
{
    // 새 BarButtonItem("MyMenu에서 삭제") 생성
    BarButtonItem removeButton = new BarButtonItem();
    removeButton.Caption = "MyMenu에서 삭제"; // 버튼 제목 설정

    // "MyMenu에서 삭제" 명령이 클릭되었을 때 호출되는 이벤트 핸들러 등록
    removeButton.ItemClick += (sender, e) =>
    {
        // 우클릭 시 캡처한 BarItemLink 사용
        BarItemLink itemToRemove = linkToRemove;

        // 현재 우클릭한 아이템의 그룹을 찾기
        var groupToRemove = myMenuPage.Groups.FirstOrDefault(group => group.ItemLinks.Contains(itemToRemove));

        if (groupToRemove != null)
        {
            // 그룹에서 해당 아이템을 제거
            groupToRemove.ItemLinks.Remove(itemToRemove);

            // 그룹에 다른 아이템이 없으면 그룹도 제거
            if (groupToRemove.ItemLinks.Count == 0)
            {
                myMenuPage.Groups.Remove(groupToRemove);
            }

            // MyMenu 항목 저장
            SaveMyMenuItems();
        }
    };

    // 리본 컨트롤에 명령 추가
    ribbonControl1.Items.Add(removeButton);

    return removeButton;
}
주요 수정 사항:
클로저 문제 해결:

capturedLink와 같은 변수로 clickedItemLink를 캡처하여, 각 이벤트 핸들러가 올바른 항목을 참조하도록 수정했습니다. 이렇게 하면 각 항목에 대한 이벤트가 독립적으로 동작합니다.
삭제 동작 수정:

삭제 동작에서 linkToRemove를 캡처하여, 각 삭제 명령이 올바른 항목을 참조하고 독립적으로 동작하도록 했습니다. 이로 인해 이제 모든 항목에 대해 삭제가 정상적으로 수행됩니다.
테스트 및 결과
여러 개의 항목을 MyMenu에 추가하고, 각 항목을 클릭하면 원래 항목의 기능이 그대로 실행됩니다.