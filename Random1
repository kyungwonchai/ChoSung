겠습니다. SELECT 쿼리에서 문자열 값은 **작은따옴표(')**로 감싸야 합니다. 그리고 200 OK가 뜨는데도 "No data found" 메시지가 나오는 이유는 데이터베이스 쿼리가 실행된 후 결과가 없기 때문일 수 있습니다. 이는 쿼리에서 문자열 값을 올바르게 처리하지 않았거나, 실제로 해당 QR 값에 대한 데이터가 없기 때문일 수 있습니다.

여러 가지 문제를 해결하기 위해 단계별로 설명하고, 코드와 로깅을 통해 데이터를 확인할 수 있도록 하겠습니다.

1. 쿼리 파라미터 처리
pymssql을 사용할 때 문자열 값은 쿼리 내에서 작은따옴표로 자동으로 감싸져야 합니다. 파라미터를 명시적으로 작은따옴표로 감싸지 않더라도 pymssql이 이를 처리합니다.
따라서 파라미터 값을 바인딩할 때는 '%s' 대신 ?를 사용하여 qr_value를 안전하게 바인딩할 수 있습니다.
2. 에러 로그 출력
200 OK는 요청이 성공적으로 처리되었음을 의미하지만, 쿼리 결과가 없을 때 "No data found" 메시지를 출력하고 있습니다. 쿼리 실행 결과가 올바르게 반환되지 않는 이유를 찾기 위해 로깅을 추가하여 실제로 쿼리가 어떻게 실행되고 있는지 확인할 수 있도록 해야 합니다.
3. 쿼리 로그 및 파라미터 출력
쿼리가 제대로 실행되고 있는지 확인하려면, 쿼리와 파라미터를 출력하고, 결과가 None인지, 빈 결과인지 정확히 확인할 수 있도록 해야 합니다.

수정된 코드
쿼리 파라미터를 문자열로 제대로 처리하고,
로깅을 추가하여 쿼리 실행 및 결과를 추적할 수 있게 합니다.
최종 수정된 코드:
python
Copy code
from flask import Flask, render_template, request
import pandas as pd
import pymssql
import logging

# 로그 설정
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# 고정된 쿼리 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = %s"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = %s"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = %s"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # pymssql을 사용하여 데이터베이스 연결
        conn = pymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달 (문자열이면 작은 따옴표로 감싸짐)
        logging.debug(f"Executing query: {query} with parameter: {qr_value}")  # 실행되는 쿼리와 파라미터 출력
        cursor.execute(query, (qr_value,))

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        logging.debug(f"Query executed, fetched rows: {len(rows)}")  # 데이터가 몇 개 나왔는지 출력

        # 결과가 있으면 데이터를 pandas DataFrame으로 변환하여 반환
        if len(rows) > 0:
            df = pd.DataFrame(rows, columns=columns)
            return df
        else:
            logging.debug("No data found for the query.")
            return None
    except Exception as e:
        logging.error(f"Error executing query: {e}")
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    logging.debug("Starting to fetch data for functionA")
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
def get_data():
    """
    사용자가 입력한 QR 값을 받아 functionA를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값

    logging.debug(f"Received QR value: {qr_value}")
    logging.debug(f"Received connection string: {connection_string}")

    # 함수 A 실행: 여러 개의 쿼리를 동기적으로 실행
    data = functionA(connection_string, qr_value)
    
    # DataFrame을 HTML 테이블로 변환
    html_tables = []
    for df in data:
        if isinstance(df, pd.DataFrame):  # df가 DataFrame일 경우에만 to_html()을 호출
            html_tables.append(df.to_html(classes='data', header=True, index=False))
        else:
            html_tables.append("<p>No data found.</p>")

    # 결과를 HTML 테이블 형식으로 렌더링
    return render_template('table.html', tables=html_tables)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
변경된 부분:
쿼리 실행 로그:

logging.debug(f"Executing query: {query} with parameter: {qr_value}")로 실제 실행되는 쿼리와 전달된 파라미터를 출력합니다.
결과가 없는 경우 로그:

쿼리 실행 후 결과가 없다면 "No data found for the query."라는 로그가 출력됩니다. 이 부분은 디버깅에 유용합니다.
에러 발생 시 로그:

예외가 발생하면 logging.error(f"Error executing query: {e}")로 에러 메시지를 출력합니다.
파라미터 바인딩:

쿼리에서 %s는 pymssql에서 자동으로 문자열을 작은따옴표로 감싸 사용하기 때문에, 추가로 작은따옴표를 수동으로 추가할 필요는 없습니다.
실행 방법:
필요한 라이브러리 설치:

bash
Copy code
pip install pymssql pandas Flask
앱 실행:

bash
Copy code
python app.py
브라우저에서 테스트:

브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.
로그 확인:
200 OK 상태라도 **"No data found"**가 출력된다면, QR 값에 해당하는 데이터가 실제로 데이터베이스에 없는 경우일 수 있습니다.
로그를 통해 qr_value와 실행된 쿼리, 그리고 결과 개수를 확인하여 데이터베이스에 값이 있는지, 쿼리 파라미터가 올바르게 전달되었는지 확인하세요.