MainViewModel에서 제어하는 방법을 설명하겠습니다. DropShadowEffect의 Color 속성을 MainViewModel의 속성에 바인딩하고, 뷰 모델에서 RGB 값을 동적으로 변경할 수 있도록 구현할 수 있습니다.

1. MVVM 패턴 구조 개요
MainViewModel: DropShadowEffect의 색상 값을 관리하는 속성을 포함하며, UI와 데이터 바인딩됩니다.
XAML (View): DropShadowEffect를 적용할 UI 요소에서 ViewModel에 바인딩된 색상 속성을 참조합니다.
XAML.cs (Code-behind): 뷰 모델을 DataContext로 설정합니다.
2. XAML 파일 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WpfApp"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <!-- MainViewModel을 DataContext로 설정 -->
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <!-- 버튼에 DropShadowEffect 적용 -->
        <Button Content="Shadowed Button" Width="200" Height="100" HorizontalAlignment="Center" VerticalAlignment="Center">
            <Button.Effect>
                <DropShadowEffect Color="{Binding ShadowColor}" ShadowDepth="5" BlurRadius="10"/>
            </Button.Effect>
        </Button>

        <!-- 색상 변경 버튼 -->
        <Button Content="Change Color" Width="100" Height="50" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{Binding ChangeColorCommand}" />
    </Grid>
</Window>
설명:
DataContext 설정: MainViewModel을 Window.DataContext로 설정하여 뷰와 뷰모델 간의 바인딩을 가능하게 합니다.
DropShadowEffect 바인딩: Button의 DropShadowEffect에서 Color 속성을 ShadowColor 속성에 바인딩합니다. 이 속성은 MainViewModel에서 정의됩니다.
Change Color 버튼: 이 버튼은 MainViewModel의 ChangeColorCommand를 호출하여 색상을 변경합니다.
3. MainViewModel.cs (뷰모델)
csharp
코드 복사
using System;
using System.ComponentModel;
using System.Windows.Input;
using System.Windows.Media;

namespace WpfApp
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private Color _shadowColor;

        // 속성 변경 이벤트
        public event PropertyChangedEventHandler PropertyChanged;

        // DropShadowEffect에 바인딩될 색상 속성
        public Color ShadowColor
        {
            get { return _shadowColor; }
            set
            {
                _shadowColor = value;
                OnPropertyChanged("ShadowColor");
            }
        }

        // 색상을 변경할 명령
        public ICommand ChangeColorCommand { get; }

        // 생성자
        public MainViewModel()
        {
            // 기본 색상 설정
            ShadowColor = Colors.Red;

            // Command 초기화
            ChangeColorCommand = new RelayCommand(ChangeColor);
        }

        // 색상 변경 메서드 (랜덤 RGB 값으로 변경)
        private void ChangeColor(object parameter)
        {
            Random random = new Random();
            byte r = (byte)random.Next(256);
            byte g = (byte)random.Next(256);
            byte b = (byte)random.Next(256);

            // ShadowColor 속성을 새로운 색상으로 업데이트
            ShadowColor = Color.FromRgb(r, g, b);
        }

        // 속성 변경 알림
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand 클래스 (명령을 처리)
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<object, bool> _canExecute;

        public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged;
    }
}
설명:
ShadowColor 속성: DropShadowEffect의 색상을 관리하는 ShadowColor 속성을 정의했습니다. 이 속성은 XAML에서 바인딩되어 버튼의 DropShadowEffect 색상을 변경합니다.
ChangeColorCommand: 색상을 변경할 때 사용하는 명령입니다. 이 명령은 RelayCommand를 사용하여 구현하였으며, Change Color 버튼을 클릭하면 랜덤으로 RGB 값을 생성하여 색상을 변경합니다.
INotifyPropertyChanged: 뷰와 데이터 간의 업데이트를 자동으로 반영하기 위해 INotifyPropertyChanged 인터페이스를 사용하여 속성 변경을 알립니다.
4. MainWindow.xaml.cs (XAML Code-behind)
csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }
}
여기서는 특별한 로직 없이, 기본적으로 XAML에서 설정한 DataContext를 그대로 사용합니다.

5. 결과
이 설정을 통해 MVVM 패턴을 적용하여, MainViewModel에서 DropShadowEffect의 색상을 제어하고, 버튼을 클릭하여 동적으로 색상을 변경할 수 있습니다. ShadowColor 속성은 바인딩되어 있으므로, 색상이 변경될 때 자동으로 UI에 반영됩니다.