아래는 MainWindow.xaml과 MainWindow.xaml.cs 파일을 포함한 전체 수정된 코드입니다. 모든 파일에 상세 주석을 추가하여 PLC 시뮬레이터의 기능을 완벽하게 설명합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="PLCPanaSimul.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Simulator" Height="450" Width="800"
        Closing="Window_Closing">
    <Grid>
        <!-- 로그를 출력하는 ListBox -->
        <ListBox x:Name="LogListBox" HorizontalAlignment="Stretch" VerticalAlignment="Top" Height="300" Margin="10"/>

        <!-- 버튼과 텍스트박스를 배치하기 위한 StackPanel -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="10">
            <!-- 임의의 테스트 버튼 예시 -->
            <Button Content="Start Test" Width="100" Height="30" Margin="5" Click="StartTest_Click"/>
            <Button Content="Stop Test" Width="100" Height="30" Margin="5" Click="StopTest_Click"/>
        </StackPanel>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Threading.Tasks;

namespace PLCPanaSimul
{
    public partial class MainWindow : Window
    {
        private PLCSimulator _plcSimulator; // PLC 시뮬레이터 인스턴스
        private SerialPort _serialPort; // 시리얼 포트 객체

        public MainWindow()
        {
            InitializeComponent();

            // PLC 시뮬레이터 초기화
            _plcSimulator = new PLCSimulator(LogMessage, "COM3"); // COM3 포트를 사용하는 시뮬레이터
            _plcSimulator.StartCheckingMemory(); // 메모리 체크 시작

            // 시리얼 포트 초기화
            _serialPort = new SerialPort("COM3", 9600, Parity.None, 8, StopBits.One);
            _serialPort.DataReceived += SerialPort_DataReceived; // 데이터 수신 이벤트 핸들러 등록
            _serialPort.Open(); // 시리얼 포트 열기
        }

        // 시리얼 포트로 수신된 데이터를 처리하는 메서드
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string data = _serialPort.ReadExisting(); // 수신된 데이터 읽기
            LogMessage($"PLC 시뮬레이터로부터 수신: {data}");

            // 수신된 데이터에 따라 시뮬레이터가 동작하도록 처리
            _plcSimulator.ProcessReceivedData(data);
        }

        // 로그 메시지를 UI에 출력하는 메서드
        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                LogListBox.Items.Add(message); // ListBox에 로그 메시지 추가
                LogListBox.ScrollIntoView(LogListBox.Items[LogListBox.Items.Count - 1]); // 항상 마지막 항목으로 스크롤
            });
        }

        // "Start Test" 버튼 클릭 이벤트 핸들러
        private void StartTest_Click(object sender, RoutedEventArgs e)
        {
            // 테스트 시작 관련 로직 추가
            LogMessage("테스트 시작");
        }

        // "Stop Test" 버튼 클릭 이벤트 핸들러
        private void StopTest_Click(object sender, RoutedEventArgs e)
        {
            // 테스트 중지 관련 로직 추가
            LogMessage("테스트 중지");
        }

        // 윈도우 닫기 시 포트 닫기
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            _serialPort.Close(); // 시리얼 포트 닫기
        }
    }

    // PLC 시뮬레이터 클래스
    public class PLCSimulator
    {
        private Action<string> _logCallback; // 로그 출력 콜백
        private SerialPort _serialPort; // 시리얼 포트 객체
        private Dictionary<string, int> _memory; // PLC의 메모리 시뮬레이션
        private Dictionary<string, string> _stringMemory; // 문자열을 저장하는 메모리 시뮬레이션

        public PLCSimulator(Action<string> logCallback, string comPort)
        {
            _logCallback = logCallback;

            // PLC 메모리 초기화
            _memory = new Dictionary<string, int>
            {
                { "D2300", 0 },
                { "D2330", 0 },
                { "R520", 0 },
                { "R521", 0 }
            };

            // 문자열 메모리 초기화
            _stringMemory = new Dictionary<string, string>
            {
                { "D2310", string.Empty }
            };

            // 시리얼 포트 초기화
            _serialPort = new SerialPort(comPort, 9600, Parity.None, 8, StopBits.One);
            _serialPort.DataReceived += SerialPort_DataReceived;
            _serialPort.Open(); // 시리얼 포트 열기
        }

        // 시리얼 포트로 수신된 데이터를 처리하는 메서드
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string data = _serialPort.ReadExisting(); // 수신된 데이터 읽기
            ProcessReceivedData(data);
        }

        // 수신된 데이터를 처리하는 메서드
        public void ProcessReceivedData(string data)
        {
            _logCallback?.Invoke($"Received: {data}");

            // 명령 처리 로직
            if (data.Contains("WDD"))
            {
                if (data.Contains("D2300"))
                {
                    var value = ExtractValueFromCommand(data);
                    WriteDataToPLC("D2300", value);
                    WriteDataToPLC("D2330", value);
                }
            }

            if (data.Contains("WDS"))
            {
                if (data.Contains("D2310"))
                {
                    var value = ExtractStringFromCommand(data);
                    WriteStringToPLC("D2310", value);
                }
            }
        }

        // PLC 메모리에 데이터를 쓰는 메서드
        public void WriteDataToPLC(string address, int value)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = value;
                _logCallback?.Invoke($"Data written to {address}: {value}");
            }
        }

        // PLC 메모리에 문자열 데이터를 쓰는 메서드
        public void WriteStringToPLC(string address, string value)
        {
            if (_stringMemory.ContainsKey(address))
            {
                _stringMemory[address] = value.Length > 20 ? value.Substring(0, 20) : value;
                _logCallback?.Invoke($"String written to {address}: {_stringMemory[address]}");
            }
        }

        // PLC 메모리 값을 주기적으로 체크하는 메서드
        public async void StartCheckingMemory()
        {
            while (true)
            {
                if (_memory.ContainsKey("D2330"))
                {
                    int currentValue = _memory["D2330"];

                    if (currentValue != 0)
                    {
                        _logCallback?.Invoke($"Checking D2330, value: {currentValue}");
                        WriteDataToPLC("D2330", 0);
                    }
                }

                await Task.Delay(1000); // 1초마다 체크
            }
        }

        // 명령에서 값을 추출하는 메서드
        private int ExtractValueFromCommand(string command)
        {
            string valueString = command.Substring(command.Length - 4);
            return int.TryParse(valueString, out int value) ? value : 0;
        }

        // 명령에서 문자열을 추출하는 메서드
        private string ExtractStringFromCommand(string command)
        {
            string valueString = command.Substring(8); // 시작 위치 조정 필요
            return valueString;
        }
    }
}
주요 변경 사항 및 설명
MainWindow.xaml:

로그 출력을 위한 ListBox와 테스트 버튼을 포함합니다.
Window_Closing 이벤트를 통해 윈도우가 닫힐 때 포트를 닫도록 설정했습니다.
MainWindow.xaml.cs:

PLC 시뮬레이터를 초기화하고 시리얼 포트를 통해 데이터를 송수신합니다.
SerialPort_DataReceived 메서드는 시리얼 포트를 통해 데이터를 수신할 때마다 호출되며, 해당 데이터를 시뮬레이터로 전달합니다.
LogMessage 메서드는 로그 메시지를 UI에 출력합니다.
PLCSimulator 클래스:

PLCSimulator 클래스는 PLC 시뮬레이터로, COM 포트를 통해 데이터를 송수신하고, 내부 메모리(D2300, D2330, D2310)를 시뮬레이션합니다.
ProcessReceivedData 메서드는 수신된 명령에 따라 메모리에 데이터를 쓰거나 문자열 데이터를 처리합니다.
StartCheckingMemory 메서드는 주기적으로 D2330의 값을 확인하고, 특정 조건에 맞는 동작을 수행합니다.
이 코드를 사용하면 PLC 시뮬레이터를 WPF 애플리케이션으로 실행하여, 시리얼 포트를 통해 PLC와의 통신을 시뮬레이션할 수 있습니다. UI를 통해 로그를 확인하고, 특정 명령을 수신하거나 전송할 수 있습니다.