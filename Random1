MSSQL 2014에 값을 저장하고 WPF DevExpress TextEdit 컨트롤에 표시하기 위해서는 데이터베이스 테이블과 컬럼을 적절히 설계해야 합니다. 예를 들어, 텍스트 데이터를 저장할 수 있는 테이블을 만들고, 이를 WPF 애플리케이션에서 불러와 TextEdit에 표시하는 방법을 설명하겠습니다.

데이터베이스 테이블 설계:

우선, MSSQL 데이터베이스에서 텍스트 데이터를 저장할 테이블을 만듭니다. 이 예제에서는 간단하게 TextData라는 테이블을 만들어, Id와 Content 컬럼을 사용합니다.

sql
코드 복사
CREATE TABLE TextData (
    Id INT IDENTITY(1,1) PRIMARY KEY,
    Content NVARCHAR(MAX)
);
여기서 Id는 기본 키 역할을 하고, Content는 텍스트 데이터를 저장하는 컬럼입니다.

데이터 삽입:

데이터를 삽입하기 위해 다음 SQL 명령을 사용할 수 있습니다.

sql
코드 복사
INSERT INTO TextData (Content) VALUES (N'This is a test.\n*This line should be styled differently.\nAnother line.');
WPF 애플리케이션에서 데이터 불러오기 및 표시:

이제 WPF 애플리케이션에서 MSSQL 데이터베이스와 연결하고 데이터를 불러와 TextEdit에 표시하는 방법을 설명합니다. System.Data.SqlClient를 사용하여 MSSQL 데이터베이스와 연결합니다.

XAML 코드:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:TextEdit Name="textEdit" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" FontSize="14"/>
    </Grid>
</Window>
C# 코드:

csharp
코드 복사
using DevExpress.Xpf.Editors;
using System;
using System.Data.SqlClient;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadDataFromDatabase();
        }

        private void LoadDataFromDatabase()
        {
            string connectionString = "Your_Connection_String_Here";
            string query = "SELECT Content FROM TextData WHERE Id = 1";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                try
                {
                    connection.Open();
                    SqlDataReader reader = command.ExecuteReader();
                    if (reader.Read())
                    {
                        textEdit.Text = reader["Content"].ToString();
                    }
                    reader.Close();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("An error occurred: " + ex.Message);
                }
            }
        }
    }
}
위 코드에서 LoadDataFromDatabase 메서드는 데이터베이스에서 텍스트 데이터를 불러와 TextEdit 컨트롤에 표시합니다. 연결 문자열을 적절히 설정하고, TextData 테이블에서 데이터를 읽어와 TextEdit의 텍스트로 설정합니다.

CustomDraw 이벤트로 스타일 변경:

이전 예제에서 설명한 대로, CustomDraw 이벤트를 사용하여 특정 조건에 맞는 줄의 스타일을 변경할 수 있습니다. 이를 위해 앞서 제공한 CustomDraw 이벤트 코드를 그대로 사용하면 됩니다.

위 가이드를 따라 MSSQL 데이터베이스에 값을 저장하고, WPF 애플리케이션에서 불러와 TextEdit에 표시할 수 있습니