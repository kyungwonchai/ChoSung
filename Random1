Dispatcher.Invoke 메서드를 사용할 때 빨간색 줄이 나타나는 문제는 몇 가지 일반적인 원인이 있을 수 있습니다. 가장 흔한 원인 중 하나는 관련 네임스페이스가 프로젝트에 포함되지 않거나, 잘못된 Dispatcher 객체를 참조할 때 발생합니다.

WPF 프로젝트에서 Dispatcher 사용하기
WPF 프로젝트에서 Dispatcher.Invoke를 사용하여 UI 컨트롤을 업데이트하는 예제를 살펴보면, 다음과 같이 System.Windows.Threading 네임스페이스를 추가해야 할 수 있습니다.

네임스페이스 확인: System.Windows.Threading 네임스페이스가 정확히 사용되고 있는지 확인하세요.
Dispatcher 객체 사용: Application.Current.Dispatcher 또는 Window의 Dispatcher 속성을 사용하여 UI 스레드에 접근할 수 있습니다.
코드 예제 수정
만약 이전에 제공된 코드에서 Dispatcher.Invoke가 오류를 발생시킨다면, 다음과 같이 코드를 수정해보세요.

csharp
Copy code
using System;
using System.IO;
using System.Threading;
using System.Windows;
using System.Windows.Threading;  // 필요한 네임스페이스 추가

namespace DiskSpaceAnalyzer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            StartFolderAnalysis(@"C:\Path\To\Start");
        }

        private void StartFolderAnalysis(string path)
        {
            Thread thread = new Thread(() => AnalyzeFolders(path));
            thread.Start();
        }

        private void AnalyzeFolders(string path)
        {
            DirectoryInfo rootDir = new DirectoryInfo(path);
            foreach (DirectoryInfo dir in rootDir.GetDirectories())
            {
                long size = CalculateFolderSize(dir);
                if (size >= 1073741824) // 1GB 이상
                {
                    string info = $"{dir.FullName} ({size} bytes)";
                    Application.Current.Dispatcher.Invoke(() => listBoxFolders.Items.Add(info));  // Application.Current.Dispatcher 사용
                }
                AnalyzeFolders(dir.FullName);  // 재귀적으로 하위 폴더 분석
            }
        }

        private long CalculateFolderSize(DirectoryInfo directory)
        {
            long size = 0;
            FileInfo[] files = directory.GetFiles();
            foreach (FileInfo file in files)
            {
                size += file.Length;
            }
            return size;
        }
    }
}
핵심 변경점
네임스페이스 추가: System.Windows.Threading를 추가하여 Dispatcher 관련 클래스에 접근합니다.
Dispatcher 호출 변경: Application.Current.Dispatcher.Invoke를 사용하여 모든 윈도우에서 공통적으로 사용할 수 있는 Dispatcher를 참조합니다.
이 방법을 통해 UI 업데이트 중 발생하는 스레드 문제를 해결할 수 있으며, 백그라운드 스레드에서 안전하게 UI 요소를 업데이트할 수 있