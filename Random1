, 알겠습니다. dx:ThemeResource와 TableView의 CurrentItemChanged 이벤트 관련 오류를 해결하기 위해 MainWindow.xaml과 MainWindow.xaml.cs 파일을 수정하겠습니다.

오류 해결 방향:

dx:ThemeResource 오류: 이 오류는 DevExpress 테마 리소스가 제대로 로드되지 않거나 참조되지 않을 때 발생합니다. 문제를 확실히 해결하기 위해, 코드에서 모든 dx:ThemeResource 사용을 제거하고, 대신 LightGray, CornflowerBlue, White, Black 등 표준 색상 이름이나 직접적인 색상 코드(예: #FF0000)를 사용하도록 수정합니다. (테마 자체는 ThemedWindow를 통해 적용될 수 있습니다.) 특히 스타일의 BasedOn 속성도 테마 리소스에 의존할 수 있으므로 제거하고 필요한 속성을 직접 설정합니다.
TableView.CurrentItemChanged 오류: TableView에서 해당 이벤트를 직접 지원하지 않는 것 같습니다. 대신, GridControl 자체의 CurrentItemChanged 이벤트를 사용하도록 변경합니다. 이 이벤트는 선택된 행(데이터 항목)이 변경될 때 발생합니다.
수정해야 할 파일 목록:

Views/MainWindow.xaml
Views/MainWindow.xaml.cs
아래에 이 두 파일의 수정된 전체 코드를 작성합니다.

1. Views/MainWindow.xaml (수정)

모든 dx:ThemeResource 사용 제거 및 대체 색상/값 사용.
LightBlueHeaderStyle에서 BasedOn 제거 및 속성 직접 설정.
ConditionalRowHighlightStyle에서 ThemeResource 제거 및 직접 색상 사용, TargetType은 dxg:GridRowContent 유지.
TableView에서 CurrentItemChanged 이벤트 핸들러 제거.
GridControl에 CurrentItemChanged 이벤트 핸들러 추가.
XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys" xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    FontSize="14"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <infra:HighlightRowConverter x:Key="HighlightRowConverter"/>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader">
            <Setter Property="Background" Value="LightBlue"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Foreground" Value="Black"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
        <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>

        <Style x:Key="ConditionalRowHighlightStyle" TargetType="dxg:GridRowContent">
            <Setter Property="Background">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource HighlightRowConverter}">
                        <Binding Path="RowData.Row"/>
                        <Binding Path="View.DataContext.SelectedCellValue"/>
                        <Binding Path="View.DataContext.SelectedCellColumnFieldName"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
            <Setter Property="Foreground" Value="Black"/>
            <Style.Triggers>
                <Trigger Property="dxg:DataViewBase.IsFocusedRow" Value="True">
                    <Setter Property="Background" Value="CornflowerBlue"/>
                    <Setter Property="Foreground" Value="White"/>
                </Trigger>
                 </Style.Triggers>
        </Style>

    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal"> <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}"/> <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}"/>
                     <Button Content="⚙️ 마스터 데이터 관리" Margin="15,3,3,3" Command="{Binding OpenMasterDataWindowCommand}" ToolTip="마스터 데이터(층, 구역 등)를 관리하는 새 창을 엽니다." Visibility="{Binding IsMasterModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                 </StackPanel>
            </Border>
        </DockPanel>

        <Grid Grid.Row="1" Margin="5">
            <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
            <Border Grid.Row="0" Background="WhiteSmoke" Padding="3"> <StackPanel Orientation="Horizontal"> <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/> <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/> <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/> </StackPanel> </Border>
            <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}"
                             CurrentItemChanged="GridControl_CurrentItemChanged">
                <dxg:GridControl.View>
                    <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True"
                                   NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None"
                                   ShowIndicator="True" ShowSearchPanelMode="Always"
                                   FocusedColumnChanged="TableView_FocusedColumnChanged"
                                   RowStyle="{StaticResource ConditionalRowHighlightStyle}">
                        <dxg:TableView.RowCellMenuCustomizations> <dxb:BarButtonItem Content="배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/> <dxb:BarItemSeparator/> <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/> </dxg:TableView.RowCellMenuCustomizations>
                    </dxg:TableView>
                </dxg:GridControl.View>
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                </dxg:GridControl.Columns>
            </dxg:GridControl>
        </Grid>

        <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem> </StatusBar>
    </Grid>

</dx:ThemedWindow>
2. Views/MainWindow.xaml.cs (수정)

TableView_CurrentItemChanged 이벤트 핸들러 제거.
GridControl_CurrentItemChanged 이벤트 핸들러 추가 및 구현.
TableView_FocusedColumnChanged 이벤트 핸들러는 유지 및 로직 확인.
C#

using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid; // GridControl, TableView, CurrentItemChangedEventArgs 등 사용
using LockerManagementApp.Models; // LockerAssignment 모델 사용
using LockerManagementApp.ViewModels;
using System;
using System.ComponentModel;
using System.Windows;

namespace LockerManagementApp.Views
{
    /// <summary>
    /// MainWindow.xaml에 대한 상호 작용 논리 (이벤트 핸들러 수정)
    /// </summary>
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
            // ApplicationThemeHelper.ApplicationThemeName = Theme.Office2019ColorfulName;
        }

        // DataContext를 MainViewModel 타입으로 캐스팅
        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        // 창이 닫힐 때 ViewModel의 Dispose를 호출
        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                disposableViewModel.Dispose();
            }
        }

        /// <summary>
        /// 그리드에서 포커스된 컬럼이 변경될 때 호출됩니다.
        /// </summary>
        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;

            // 현재 선택된 행(아이템) 가져오기
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            // 새로 포커스된 컬럼의 FieldName 가져오기
            string newFieldName = e.NewColumn?.FieldName;

            // ViewModel에 정보 업데이트 요청
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        /// <summary>
        /// *** 수정: TableView.CurrentItemChanged -> GridControl.CurrentItemChanged ***
        /// 그리드에서 현재 선택된 행(아이템)이 변경될 때 호출됩니다.
        /// </summary>
        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;

            // 현재 포커스된 컬럼 정보 가져오기 (TableView에서)
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            // 새로 선택된 행(아이템) 가져오기
            var newItem = e.NewItem as LockerAssignment;

            // ViewModel에 정보 업데이트 요청
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        // *** 제거: TableView_CurrentItemChanged 이벤트 핸들러 ***
        // private void TableView_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e) { ... }
    }
}
핵심 변경 사항:

MainWindow.xaml:
dx:ThemeResource를 사용하는 모든 부분을 제거하고 하드코딩된 값(예: LightBlue, CornflowerBlue, LightGray)으로 대체했습니다. 스타일의 BasedOn 속성도 제거했습니다.
TableView 태그에서 CurrentItemChanged 이벤트 핸들러 연결을 제거했습니다.
GridControl 태그에 CurrentItemChanged="GridControl_CurrentItemChanged" 이벤트 핸들러 연결을 추가했습니다.
MainWindow.xaml.cs:
TableView_CurrentItemChanged 메서드를 제거했습니다.