using System;
using System.Threading.Tasks;

/// <summary>
/// TaskModel은 개별 작업의 상태를 관리하고, 작업의 시작 및 상태를 업데이트합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;

        _taskQueue = taskQueue;
        Status = "Pending";
    }

    /// <summary>
    /// 작업을 시작하고 작업이 완료될 때까지 상태를 업데이트합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";

        // 작업을 TaskQueue에 추가
        _taskQueue.EnqueueTask(async () =>
        {
            try
            {
                // 실제 작업을 비동기적으로 실행 (여기서는 대기 1초)
                await Task.Delay(1000);

                // 작업 완료 시 상태를 업데이트
                Status = "Completed";
            }
            catch (Exception)
            {
                Status = "Failed";
            }
        });
    }
}
