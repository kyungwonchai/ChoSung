와 OpenCV를 사용하여 클립보드의 이미지를 가져와서 최적화하고 QR코드를 인식하는 방법을 설명하겠습니다. 이 과정에서 ZXing 라이브러리도 사용하여 QR코드를 디코딩합니다.

먼저, 필요한 NuGet 패키지를 설치해야 합니다:

OpenCvSharp4.Windows
OpenCvSharp4
ZXing.Net
설치가 완료되면, 아래와 같이 WPF 프로젝트를 구성할 수 있습니다.

XAML 구성
MainWindow.xaml 파일을 다음과 같이 구성합니다:

xml
코드 복사
<Window x:Class="QRCodeScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="QR Code Scanner" Height="450" Width="800">
    <Grid>
        <Button Name="CaptureButton" Content="Capture Image" Click="CaptureButton_Click" Width="100" Height="30" Margin="10"/>
        <Image Name="CapturedImage" Width="400" Height="300" Margin="10,50,10,10"/>
        <Image Name="OptimizedImage" Width="400" Height="300" Margin="420,50,10,10"/>
        <Label Name="QRCodeLabel" Content="QR Code: " HorizontalAlignment="Left" VerticalAlignment="Top" Margin="120,10,0,0"/>
    </Grid>
</Window>
C# 코드
MainWindow.xaml.cs 파일에 로직을 추가합니다:

csharp
코드 복사
using OpenCvSharp;
using System;
using System.Windows;
using System.Windows.Media.Imaging;
using ZXing;

namespace QRCodeScanner
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void CaptureButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // 클립보드에서 이미지를 가져옴
                var clipboardImage = Clipboard.GetImage();
                if (clipboardImage != null)
                {
                    // BitmapSource를 Bitmap으로 변환
                    var bitmap = BitmapSourceToBitmap(clipboardImage);
                    CapturedImage.Source = clipboardImage;

                    // OpenCV를 사용하여 이미지 최적화
                    Mat src = OpenCvSharp.Extensions.BitmapConverter.ToMat(bitmap);
                    Mat gray = new Mat();
                    Mat enhanced = new Mat();

                    // 그레이스케일 변환
                    Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);

                    // 대비를 높여서 이미지 최적화
                    Cv2.EqualizeHist(gray, enhanced);

                    // 최적화된 이미지를 WPF 이미지 컨트롤에 표시
                    OptimizedImage.Source = OpenCvSharp.WpfExtensions.BitmapSourceConverter.ToBitmapSource(enhanced);

                    // ZXing을 사용하여 QR 코드 디코딩
                    var barcodeReader = new BarcodeReader();
                    var result = barcodeReader.Decode(OpenCvSharp.Extensions.BitmapConverter.ToBitmap(enhanced));

                    if (result != null)
                    {
                        QRCodeLabel.Content = "QR Code: " + result.Text;
                    }
                    else
                    {
                        QRCodeLabel.Content = "QR Code: Not found";
                    }
                }
                else
                {
                    MessageBox.Show("클립보드에 이미지가 없습니다.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("오류가 발생했습니다: " + ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private System.Drawing.Bitmap BitmapSourceToBitmap(BitmapSource source)
        {
            using (var outStream = new System.IO.MemoryStream())
            {
                BitmapEncoder encoder = new BmpBitmapEncoder();
                encoder.Frames.Add(BitmapFrame.Create(source));
                encoder.Save(outStream);
                return new System.Drawing.Bitmap(outStream);
            }
        }
    }
}
코드 설명
클립보드에서 이미지 가져오기: Clipboard.GetImage()를 사용하여 클립보드에서 이미지를 가져옵니다.
이미지 변환: BitmapSourceToBitmap 메서드를 사용하여 BitmapSource를 Bitmap으로 변환합니다.
이미지 최적화: OpenCV를 사용하여 이미지를 그레이스케일로 변환하고 대비를 높입니다.
QR 코드 디코딩: ZXing 라이브러리를 사용하여 최적화된 이미지