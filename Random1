알겠습니다. PLC에서 오는 신호도 받아서 ListBox에 표시하는 기능을 추가하겠습니다. 또한, 코드 전체를 좀 더 상세하게 주석을 달아 드리겠습니다.

다음은 WPF 프로젝트의 전체 코드입니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Communication" Height="450" Width="800" Closing="Window_Closing">
    <Grid>
        <Button Name="BtnCheckConnection" Content="Check Connection" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10" Click="BtnCheckConnection_Click"/>
        <Button Name="BtnSendData" Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,70,0,0" Click="BtnSendData_Click"/>
        <TextBox Name="TxtPOInfo" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,140,0,0" />
        <Label Content="Enter PO Information" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,200,0,0"/>
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="550" Height="250" Margin="220,10,0,0" />
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;
        private const int MaxRetries = 3; // 에러 발생 시 최대 재시도 횟수
        private DispatcherTimer timer;

        public MainWindow()
        {
            InitializeComponent();
            InitializeSerialPort();
            InitializeTimer();
        }

        // 시리얼 포트를 초기화하고 열기
        private void InitializeSerialPort()
        {
            serialPort = new SerialPort("COM1", 9600, Parity.None, 8, StopBits.One);
            serialPort.DataReceived += SerialPort_DataReceived;
            try
            {
                serialPort.Open();
                LogMessage("Serial port opened successfully.");
            }
            catch (Exception ex)
            {
                LogMessage($"Error opening serial port: {ex.Message}");
            }
        }

        // 타이머 초기화
        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        // 주기적으로 실행되는 타이머 이벤트 핸들러
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 주기적으로 상태 체크 로직을 여기에 추가할 수 있습니다.
        }

        // "Check Connection" 버튼 클릭 이벤트 핸들러
        private void BtnCheckConnection_Click(object sender, RoutedEventArgs e)
        {
            for (int i = 1; i <= 4; i++)
            {
                SendMessageWithRetry(() => SendDataToPLC(2300, i), MaxRetries);
                Thread.Sleep(500);
            }
            LogMessage("Connection check signals sent successfully.");
        }

        // "Send Data" 버튼 클릭 이벤트 핸들러
        private void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            SendMessageWithRetry(() => SendDataToPLC(2300, 1), MaxRetries); // 예: 신규 LOT 배출
            string poInfo = TxtPOInfo.Text;
            SendMessageWithRetry(() => SendPOInfoToPLC(poInfo), MaxRetries);
            LogMessage("Data sent successfully!");
        }

        // PLC로 데이터를 전송하는 메소드
        private void SendDataToPLC(int address, int value)
        {
            string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
            byte[] messageBytes = Encoding.ASCII.GetBytes(message);
            serialPort.Write(messageBytes, 0, messageBytes.Length);
            LogMessage($"Sent data to PLC: {message.Trim()}");
        }

        // PO 정보를 PLC로 전송하는 메소드
        private void SendPOInfoToPLC(string poInfo)
        {
            for (int i = 0; i < poInfo.Length; i += 2)
            {
                string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                SendDataToPLC(2310 + (i / 2), value);
            }
            LogMessage($"Sent PO info to PLC: {poInfo}");
        }

        // 메시지를 재시도 로직과 함께 전송하는 메소드
        private void SendMessageWithRetry(Action sendMessage, int maxRetries)
        {
            int attempts = 0;
            bool success = false;
            while (attempts < maxRetries && !success)
            {
                try
                {
                    sendMessage();
                    success = true;
                }
                catch (Exception ex)
                {
                    attempts++;
                    LogMessage($"Error sending message (Attempt {attempts}): {ex.Message}");
                    if (attempts >= maxRetries)
                    {
                        LogMessage("Max retry attempts reached. Giving up.");
                    }
                    else
                    {
                        Thread.Sleep(1000); // 잠시 대기 후 재시도
                    }
                }
            }
        }

        // 시리얼 포트 데이터 수신 이벤트 핸들러
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string receivedData = serialPort.ReadExisting();
            Dispatcher.Invoke(() => LogMessage($"Received data from PLC: {receivedData}"));
        }

        // 로그 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                LogListBox.Items.Add($"{DateTime.Now}: {message}");
                LogListBox.ScrollIntoView(LogListBox.Items[LogListBox.Items.Count - 1]);
            });
            // 로그를 파일로 저장
            using (System.IO.StreamWriter file = new System.IO.StreamWriter("log.txt", true))
            {
                file.WriteLine($"{DateTime.Now}: {message}");
            }
        }

        // 윈도우가 닫힐 때 타이머를 중지하고 시리얼 포트를 닫는 메소드
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            timer.Stop();
            if (serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }
    }
}
주요 기능 설명:
시리얼 포트 초기화 및 열기: 시리얼 포트를 초기화하고 열어 통신을 설정합니다. 연결이 성공하면 로그에 기록합니다.
타이머 설정: 주기적으로 상태를 체크하거나 유지보수를 위한 작업을 수행할 수 있는 타이머를 설정합니다.
버튼 클릭 이벤트:
Check Connection 버튼: PLC에 1, 2, 3, 4 신호를 전송하여 통신 체크.
Send Data 버튼: DT2300에 값을 설정하고 PO 정보를 DT2310 ~ DT2319로 전송.
데이터 전송:
SendDataToPLC 메소드: MEWTOCOL 형식의 메시지를 생성하고 PLC로 전송.
SendPOInfoToPLC 메소드: PO 정보를 2글자씩 잘라서 DT2310 ~ DT2319로 전송.
재시도 로직: 메시지 전송이 실패할 경우 최대 재시도 횟수까지 재시도합니다.
로그 기록: 로그 메시지를 ListBox에 추가하고 파일로 저장합니다.
시리얼 포트 데이터 수신: PLC에서 데이터를 수신하면 로그에 기록합니다.
창 닫힘 이벤트: 창이 닫힐 때 타이머를 중지하고 시리얼 포트를 닫습니다.
이 코드는 RS232 통신을 통해 PLC와의 연결을 유지하고, 로그를 기록하며, 에러가 발생하면 재시도 로직을 통해 안정적인 통신을 유지할 수 있습니다. serialPort 객체의 포트 이름("COM1")을 실제 환경에 맞게 변경하고 사용하세요