하도록 수정할 수 있습니다. 여기서 출력은 콘솔이나 GUI 상의 TextBlock에 표시될 수 있습니다.

아래는 해당 요구 사항을 충족하는 코드입니다.

C# 코드 (특정 문구 포함된 줄 출력)
csharp
코드 복사
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace FileLineWriter
{
    public partial class MainWindow : Window
    {
        private readonly string _sourceFilePath = @"C:\Agent\_Gen1\largefile.txt";  // 원본 파일 경로
        private readonly double _defaultDelay = 50;  // 0.05초 (밀리초 단위)
        private readonly int _specialDelay = 5000;  // 5초 (특정 키워드가 있을 때 대기 시간)

        public MainWindow()
        {
            InitializeComponent();
        }

        // '시작' 버튼 클릭 시 호출되는 메서드
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            string destinationFilePath = FilePathTextBox.Text;

            // 파일 경로가 입력되지 않았으면 알림 표시
            if (string.IsNullOrEmpty(destinationFilePath))
            {
                MessageBox.Show("파일 경로를 입력해주세요.");
                return;
            }

            // 파일이 존재하는지 확인
            if (!File.Exists(_sourceFilePath))
            {
                MessageBox.Show("원본 파일을 찾을 수 없습니다.");
                return;
            }

            // 파일 경로가 유효한지 확인
            if (!File.Exists(destinationFilePath))
            {
                MessageBox.Show("지정한 로그 파일이 존재하지 않습니다.");
                return;
            }

            // 상태 표시 업데이트
            StatusTextBlock.Text = "상태: 처리 중";

            // 원본 파일의 내용을 한 줄씩 읽기
            using (StreamReader reader = new StreamReader(_sourceFilePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    // 지정된 파일에 한 줄씩 추가
                    await WriteLineToLog(line, destinationFilePath);

                    // 특정 문구가 포함된 줄을 출력 (콘솔이나 TextBlock에 출력 가능)
                    if (line.Contains("FST") || line.Contains("FNL") || line.Contains("PLAN"))
                    {
                        OutputSpecialLine(line);
                    }

                    // 기본 지연 시간 (0.05초)
                    await Task.Delay(TimeSpan.FromMilliseconds(_defaultDelay));
                }
            }

            // 상태 표시 완료
            StatusTextBlock.Text = "상태: 완료";
        }

        // 지정된 로그 파일에 한 줄씩 쓰는 메서드
        private async Task WriteLineToLog(string line, string destinationFilePath)
        {
            // 지정된 파일에 라인을 추가
            using (StreamWriter writer = File.AppendText(destinationFilePath))
            {
                await writer.WriteLineAsync(line);
            }

            // FST, FNL, PLAN 이 포함된 줄이 있을 때는 5초 대기
            if (line.Contains("FST") || line.Contains("FNL") || line.Contains("PLAN"))
            {
                await Task.Delay(_specialDelay);
            }
        }

        // 특정 문구가 포함된 줄을 출력하는 메서드
        private void OutputSpecialLine(string line)
        {
            // TextBlock에 특정 문구가 포함된 줄 출력
            StatusTextBlock.Text = $"특정 문구 발견: {line}";

            // 또는 콘솔에 출력
            Console.WriteLine($"특정 문구 발견: {line}");
        }
    }
}
주요 수정 사항:
OutputSpecialLine 메서드: FST, FNL, PLAN이 포함된 줄을 발견했을 때 해당 줄을 출력하는 메서드를 추가했습니다.
TextBlock: GUI 상의 TextBlock에 해당 줄을 표시.
Console: 콘솔에 해당 줄을 출력.
특정 문구 포함 여부 확인:
파일을 한 줄씩 읽을 때, 해당 줄에 FST, FNL, PLAN이 포함되어 있는지 확인하고, 포함되어 있다면 OutputSpecialLine 메서드를 호출하여 출력.
동작 방식:
사용자가 로그 파일 경로를 입력한 후, "시작" 버튼을 클릭하면 작업이 시작됩니다.
largefile.txt의 내용을 한 줄씩 읽고, 지정한 로그 파일에 기록합니다.
만약 해당 줄에 특정 문구(FST, FNL, PLAN)가 포함되어 있으면, 해당 줄을 콘솔이나 UI의 TextBlock에 출력합니다.
기본적으로 0.05초마다 한 줄씩 기록되며, 특정 문구가 있을 때는 5초 동안 대기 후 기록이 계속됩니다.
이 코드를 통해 특정 문구가 포함된 줄을 출력할 수 있습니다. 추가로 필요한