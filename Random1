용자별로 하나의 행(row)으로 관리하려면 데이터베이스 테이블에 Favorites 컬럼을 추가하고, 각 사용자의 즐겨찾기 버튼 목록을 구분자로 연결된 문자열로 저장하는 방식으로 구현할 수 있습니다. 기본적으로 **쉼표(,)**를 구분자로 사용하겠습니다. 이 방식은 단순한 문자열 조작을 통해 데이터 관리가 가능합니다.

테이블 구조
테이블 수정
sql
코드 복사
-- Favorites 테이블 수정
ALTER TABLE Favorites
ADD Favorites NVARCHAR(MAX); -- 사용자의 즐겨찾기를 구분자로 연결하여 저장

-- 기존 데이터 이전 (Optional)
UPDATE Favorites
SET Favorites = '';
수정된 코드
전역 변수
csharp
코드 복사
private static readonly string ConnectionString = "Server=your_server,1633;Database=your_database;User Id=your_user;Password=your_password;";
private const string Separator = ","; // 즐겨찾기 구분자
LoadFavorites 함수
csharp
코드 복사
private void LoadFavorites()
{
    // user 객체가 null이거나 user.idnum이 비어 있으면 빈 목록 유지
    if (user == null || string.IsNullOrWhiteSpace(user.idnum))
    {
        favoriteKeys.Clear();
        Console.WriteLine("[Info] LoadFavorites: User is null or idnum is invalid.");
        return;
    }

    try
    {
        favoriteKeys.Clear();

        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();
            var command = new SqlCommand("SELECT Favorites FROM Favorites WHERE UserId = @UserId", connection);
            command.Parameters.AddWithValue("@UserId", user.idnum);

            using (var reader = command.ExecuteReader())
            {
                if (reader.Read() && !reader.IsDBNull(0))
                {
                    var favorites = reader.GetString(0);
                    favoriteKeys.UnionWith(favorites.Split(new[] { Separator }, StringSplitOptions.RemoveEmptyEntries));
                }
            }
        }
    }
    catch (Exception ex)
    {
        // 에러 발생 시 로그 기록
        Console.WriteLine($"[Error] LoadFavorites: {ex.Message}");
    }
}
SaveFavorites 함수
csharp
코드 복사
private void SaveFavorites()
{
    // user 객체가 null이거나 user.idnum이 비어 있으면 저장하지 않음
    if (user == null || string.IsNullOrWhiteSpace(user.idnum))
    {
        Console.WriteLine("[Info] SaveFavorites: User is null or idnum is invalid.");
        return;
    }

    try
    {
        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();

            // 즐겨찾기 문자열 생성
            var favorites = string.Join(Separator, favoriteKeys);

            // 사용자별 즐겨찾기 업데이트 또는 삽입
            var command = new SqlCommand(@"
                IF EXISTS (SELECT 1 FROM Favorites WHERE UserId = @UserId)
                BEGIN
                    UPDATE Favorites SET Favorites = @Favorites WHERE UserId = @UserId
                END
                ELSE
                BEGIN
                    INSERT INTO Favorites (UserId, Favorites) VALUES (@UserId, @Favorites)
                END", connection);

            command.Parameters.AddWithValue("@UserId", user.idnum);
            command.Parameters.AddWithValue("@Favorites", favorites);
            command.ExecuteNonQuery();
        }
    }
    catch (Exception ex)
    {
        // 에러 발생 시 로그 기록
        Console.WriteLine($"[Error] SaveFavorites: {ex.Message}");
    }
}
ToggleFavorite 함수
csharp
코드 복사
private void ToggleFavorite(string buttonName, BarButtonItem button)
{
    if (favoriteKeys.Contains(buttonName))
    {
        favoriteKeys.Remove(buttonName);
        ResetButtonStyle(button);
        RemoveFromFavorites(button);
    }
    else
    {
        favoriteKeys.Add(buttonName);
        ApplyFavoriteStyle(button);
        AddToFavorites(button, GetButtonGroupName(button));
    }

    SaveFavorites(); // DB에 즉시 반영
}
주요 변경 사항
테이블 수정:

사용자별로 하나의 행에 즐겨찾기를 저장.
Favorites 컬럼에 쉼표로 구분된 문자열로 즐겨찾기 버튼 이름 저장.
데이터 로드:

LoadFavorites: Favorites 컬럼에서 데이터를 읽고 쉼표로 나눠 favoriteKeys로 변환.
데이터 저장:

SaveFavorites: favoriteKeys를 쉼표로 연결하여 Favorites 컬럼에 저장.
IF EXISTS 구문을 사용해 사용자 데이터가 존재하면 업데이트, 없으면 삽입.
구분자 정의:

Separator 상수를 통해 구분자를 쉽게 변경 가능 (현재는 ,).
동작 흐름
프로그램 실행 시:

LoadFavorites: 현재 사용자 ID(user.idnum)의 데이터를 로드.
즐겨찾기 버튼 이름을 favoriteKeys에 저장.
즐겨찾기 추가/제거 시:

ToggleFavorite: favoriteKeys를 수정하고, SaveFavorites로 즉시 DB에 반영.
다른 사용자 또는 다른 PC:
