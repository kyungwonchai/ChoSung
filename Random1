st to handle the sampling at the SQL level rather than fetching all rows and filtering in Python. Here's how you can modify the SQL query to retrieve only every 16th row directly from the database:

python
Copy code
import pymssql
import pandas as pd

# Database connection details
server = "your_server"
database = "your_database"
username = "your_username"
password = "your_password"

# Connect to the database
conn = pymssql.connect(server=server, user=username, password=password, database=database)
cursor = conn.cursor(as_dict=True)

# Optimized SQL query to fetch every 16th row
query = """
WITH OrderedData AS (
    SELECT modelname2 AS model, jdbarcode2 AS barcode,
           ROW_NUMBER() OVER (ORDER BY ipadd2, rowtime2 ASC) AS row_num
    FROM Table_jdbarcode
)
SELECT model, barcode FROM OrderedData WHERE (row_num % 16) = 1;
"""

# Execute query and fetch data into a DataFrame
df_sampled = pd.read_sql(query, conn)

# Close the connection
conn.close()

# Display the DataFrame
import ace_tools as tools
tools.display_dataframe_to_user(name="Sampled Data", dataframe=df_sampled)
Explanation:
Uses ROW_NUMBER() to create a sequential index (row_num) based on ipadd2, rowtime2 ASC.
Selects only rows where row_num % 16 = 1 (every 16th row).
Reduces network traffic by filtering inside the database before sending data to Python.