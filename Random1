네, 두 가지 오류에 대해 확인했습니다.

HandleDataAccessException 메서드 누락: 이전 코드에서 데이터 로딩(LoadAssignmentsAsync, LoadMasterDataAsync)의 catch 블록에서 HandleDataAccessException이라는 메서드를 호출하도록 되어 있었는데, 실제로 이 이름의 메서드를 정의하지 않았습니다. 대신 HandleGenericException과 HandleDbUpdateException 메서드를 정의했으므로, 해당 호출 부분을 HandleGenericException을 사용하도록 수정해야 합니다.
ConfigurationManager 찾을 수 없음: ConfigurationManager는 App.config 파일의 <appSettings> 나 <connectionStrings> 를 읽기 위해 .NET Framework에서 사용하는 클래스입니다. 이 클래스를 사용하려면 코드 상단에 using System.Configuration; 지시문을 추가해야 하고, 프로젝트에 System.Configuration 어셈블리 참조가 포함되어 있어야 합니다. (일반적으로 .NET Framework 프로젝트에는 기본적으로 포함되어 있습니다.)
이 두 가지 문제를 수정한 MainViewModel.cs 파일 전체 코드를 다시 여기에 작성해 드립니다.

C#

// 필요한 네임스페이스 추가
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 및 ConnectionStrings 사용 위해 추가
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel 클래스 (.NET Framework 4.8 버전 - 오류 수정)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";

        // --- 마스터 키 관련 ---
        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;

        // --- 마스터 데이터 목록 (ComboBox용) ---
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        // --- 자식 ViewModel 인스턴스 ---
        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }


        #region Public Properties

        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }

        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }

        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }

        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }

        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                 MessageBox.Show($"데이터베이스 컨텍스트 생성 중 오류 발생:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "데이터베이스 연결 오류!";
                 return;
            }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            MasterDataVM = new MasterDataViewModel(_context);
            LogVM = new LogViewModel(_context);

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());

            if (_context != null)
            {
                 _ = LoadInitialDataAsync();
            }
        }

        /// <summary>
        /// 초기 데이터 로드
        /// </summary>
        private async Task LoadInitialDataAsync()
        {
            await LoadAssignmentsAsync();
            await LoadMasterDataAsync();
        }

        /// <summary>
        /// 사물함 배정 목록 로드
        /// </summary>
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            // *** 수정된 부분: HandleGenericException 호출 ***
            catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 로드 및 MasterDataViewModel 갱신
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "마스터 데이터 로딩 중...";
            try
            {
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync());
                StatusBarText = "마스터 데이터 로드 완료.";

                if (MasterDataVM != null)
                {
                    await MasterDataVM.LoadAllMasterDataAsync();
                }
            }
            // *** 수정된 부분: HandleGenericException 호출 ***
            catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); }
        }


        /// <summary>
        /// 마스터 키 비밀번호 확인
        /// </summary>
        private void CheckMasterPassword(object parameter)
        {
            try
            {
                // ConfigurationManager 사용 (using System.Configuration 필요)
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey))
                {
                    MessageBox.Show("설정 파일(App.config)에 마스터 키(MasterKey)가 정의되지 않았습니다.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);

                if (plainPassword == storedMasterKey)
                {
                    IsMasterModeEnabled = true;
                    StatusBarText = "마스터 관리자 모드가 활성화되었습니다.";
                    MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    IsMasterModeEnabled = false;
                    MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (ConfigurationErrorsException confEx) // 설정 관련 오류 처리
            {
                 MessageBox.Show($"설정 파일(App.config) 처리 중 오류 발생:\n{confEx.Message}\n\nApp.config 파일 구조를 확인하세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"마스터 키 확인 중 오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // --- SaveChangesAsync, AddNewLocker, DeleteSelectedAsync, ClearSelectedAssignment 등 ---
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            try
            {
                 var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);
                 if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); return; }
                foreach(var entry in changedEntries) { entry.Entity.Administrator = _currentAdmin; }
                int changedCount = await _context.SaveChangesAsync();
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
            catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
        }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries)
        {
            if (_context == null) return;
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break;
                    case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break;
                    case EntityState.Deleted: entry.State = EntityState.Unchanged; break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }
        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 저장 필요.";
        }
        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;
            if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 사물함 정보를 정말 삭제하시겠습니까?", "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                StatusBarText = "삭제 중...";
                try
                {
                    var assignmentToDelete = SelectedAssignment;
                    var entry = _context.Entry(assignmentToDelete);
                    if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); }
                     _context.LockerAssignments.Remove(assignmentToDelete);
                    int changedCount = await _context.SaveChangesAsync();
                    LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null;
                    StatusBarText = $"성공적으로 {changedCount}개의 레코드를 삭제했습니다.";
                }
                catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); await LoadAssignmentsAsync(); }
                catch (Exception ex) { HandleGenericException("삭제", ex); await LoadAssignmentsAsync(); }
            }
        }
        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;
            SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null;
            _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin;
            StatusBarText = "배정 해제됨. 저장 필요.";
        }
        // --- 기존 메서드 끝 ---

        /// <summary>
        /// 데이터 접근 중 발생하는 일반 예외 처리
        /// </summary>
        private void HandleGenericException(string operation, Exception ex)
        {
            StatusBarText = $"{operation} 중 오류 발생: {ex.Message}";
            MessageBox.Show($"{operation} 중 예기치 않은 오류가 발생했습니다:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }
         /// <summary>
        /// 데이터베이스 업데이트 예외 처리
        /// </summary>
        private void HandleDbUpdateException(DbUpdateException dbEx)
        {
            // InnerException 내용을 포함하여 더 자세한 오류 메시지 표시
            var innerExceptionMessage = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message;
            StatusBarText = $"데이터 저장/삭제 오류: {innerExceptionMessage}";
            MessageBox.Show($"데이터베이스 작업 중 오류가 발생했습니다:\n{innerExceptionMessage}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            // 오류 발생 엔티티 상태 복원 시도
            try {
                foreach(var entry in dbEx.Entries) { entry.Reload(); } // DB 값으로 되돌리기
            } catch { /* Reload 실패 시 무시 */ }
        }

        /// <summary>
        /// SecureString을 일반 string으로 변환 (메모리 보안 주의)
        /// </summary>
        private string ConvertToUnsecureString(SecureString securePassword)
        {
            if (securePassword == null) return string.Empty;
            IntPtr unmanagedString = IntPtr.Zero;
            try
            {
                unmanagedString = Marshal.SecureStringToGlobalAllocUnicode(securePassword);
                return Marshal.PtrToStringUni(unmanagedString);
            }
            finally { Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString); }
        }


        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
 1 주요 수정 사항:   
1.
github.com
github.com

using System.Configuration; 추가: 파일 상단에 ConfigurationManager를 사용하기 위한 using 지시문을 추가했습니다.
HandleDataAccessException 호출 수정: LoadAssignmentsAsync와 LoadMasterDataAsync 메서드의 catch 블록에서 HandleGenericException 메서드를 호출하도록 수정했습니다.
CheckMasterPassword 오류 처리: ConfigurationManager.AppSettings 접근 시 발생할 수 있는 ConfigurationErrorsException을 처리하는 catch 블록을 추가했습니다.
예외 처리 메서드: HandleGenericException과 HandleDbUpdateException 메서드가 코드 내에 정의되어 있는지 확인했습니다 (이전 코드에 포함되어 있었음).
추가 확인 사항:
