F에서는 Style을 미리 정의해놓고 여러 곳에서 재사용할 수 있습니다. 텍스트 정렬 스타일을 몇 가지 만들어서, 가운데 정렬, 우측 정렬 등의 스타일을 쉽게 적용할 수 있도록 설정할 수 있습니다.

1. Styles 정의하기
WPF에서 텍스트 정렬 스타일을 미리 정의하고, TextBlock에 적용하도록 만들어 보겠습니다.

XAML에서 스타일 정의:
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">

    <Window.Resources>
        <!-- TextBlock을 위한 가운데 정렬 스타일 -->
        <Style x:Key="CenterAlignedTextBlock" TargetType="TextBlock">
            <Setter Property="TextAlignment" Value="Center" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <!-- TextBlock을 위한 우측 정렬 스타일 -->
        <Style x:Key="RightAlignedTextBlock" TargetType="TextBlock">
            <Setter Property="TextAlignment" Value="Right" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>

        <!-- TextBlock을 위한 좌측 정렬 스타일 -->
        <Style x:Key="LeftAlignedTextBlock" TargetType="TextBlock">
            <Setter Property="TextAlignment" Value="Left" />
            <Setter Property="VerticalAlignment" Value="Center" />
        </Style>
    </Window.Resources>

    <Grid>
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" 
                  IsReadOnly="True" CanUserSortColumns="False" Margin="10" 
                  RowHeight="30" FontSize="14" ColumnHeaderHeight="35">
            
            <DataGrid.Columns>
                <!-- PO_NO 컬럼 (가운데 정렬 스타일 적용) -->
                <DataGridTextColumn Header="PO NO" Binding="{Binding PO_NO}" Width="*" MinWidth="100">
                    <DataGridTextColumn.ElementStyle>
                        <Style BasedOn="{StaticResource CenterAlignedTextBlock}" TargetType="TextBlock" />
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>

                <!-- SequenceFlag 컬럼 (우측 정렬 스타일 적용) -->
                <DataGridTextColumn Header="Sequence" Width="Auto" MinWidth="100">
                    <DataGridTextColumn.ElementStyle>
                        <Style BasedOn="{StaticResource RightAlignedTextBlock}" TargetType="TextBlock" />
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.Binding>
                        <Binding Path="SequenceFlag" />
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>

                <!-- Function Status 컬럼 (좌측 정렬 스타일 적용) -->
                <DataGridTemplateColumn Header="Function Status" Width="*" MinWidth="150">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{Binding FunctionStatusList}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <Ellipse Width="30" Height="30" Fill="{Binding StatusColor}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
2. Style 적용 설명:
Window.Resources:

가운데 정렬 스타일 (CenterAlignedTextBlock): TextAlignment="Center", VerticalAlignment="Center".
우측 정렬 스타일 (RightAlignedTextBlock): TextAlignment="Right", VerticalAlignment="Center".
좌측 정렬 스타일 (LeftAlignedTextBlock): TextAlignment="Left", VerticalAlignment="Center".
Style 적용:

BasedOn 속성을 사용하여 미리 정의한 스타일을 적용합니다.
각 DataGridTextColumn에 필요한 스타일을 적용하여 가운데 정렬, 우측 정렬, 좌측 정렬을 쉽게 설정할 수 있습니다.
3. 다양한 스타일을 적용한 예시:
PO_NO 컬럼: 가운데 정렬 스타일 적용.
Sequence 컬럼: 우측 정렬 스타일 적용.
Function Status 컬럼: 좌측 정렬 스타일 적용.
추가적으로 행 높이나 컬럼의 너비 조정도 가능:
xml
코드 복사
<DataGridTextColumn Header="PO NO" Binding="{Binding PO_NO}" Width="Auto" MinWidth="100">
    <DataGridTextColumn.ElementStyle>
        <Style BasedOn="{StaticResource CenterAlignedTextBlock}" TargetType="TextBlock" />
    </DataGridTextColumn.ElementStyle>
</DataGridTextColumn>
이렇게 하면 여러 가지 스타일을 미리 정의해두고, 필요에 따라 TextBlock에 쉽게 적용할 수 있습니다