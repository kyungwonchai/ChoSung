지금까지 안된 이유는 docker-compose나 Dockerfile 문제가 아니라, 도커 프로그램(데몬) 자체가 인터넷에 접속을 못 하는 것이기 때문입니다.

지금까지 우리는 컨테이너 안으로 들어갈 '손님(npm)'에게 프록시 명함을 쥐여주려고 했는데, 정작 '건물(도커)' 자체가 인터넷 선이 끊겨있는 상태인 겁니다.

건물 전체에 인터넷을 연결해주는, 가장 확실한 방법을 알려드리겠습니다.

## ? Step 1: 도커(Docker) 서비스에 프록시 설정 파일 생성
터미널에 아래 명령어를 순서대로 입력하세요.

도커 서비스 설정 폴더 생성

Bash

sudo mkdir -p /etc/systemd/system/docker.service.d
프록시 설정 파일을 텍스트 편집기로 열기 (파일이 없으면 새로 만들어집니다)

Bash

sudo nano /etc/systemd/system/docker.service.d/http-proxy.conf
열린 편집기에 아래 내용을 그대로 복사해서 붙여넣으세요.
http://your-proxy-server:port 부분은 본인의 프록시 주소로 바꿔야 합니다. 아이디/비번이 있다면 포함시키세요.

Ini, TOML

[Service]
Environment="HTTP_PROXY=http://your_id:your_password@your-proxy-server:port"
Environment="HTTPS_PROXY=http://your_id:your_password@your-proxy-server:port"
Environment="NO_PROXY=localhost,127.0.0.1"
파일 저장하고 닫기 (Ctrl+X 누르고 Y 누르고 Enter)

## ? Step 2: 도커 재시작
새로운 설정을 도커가 읽어오도록 시스템과 도커를 재시작합니다.

설정 파일 다시 불러오기

Bash

sudo systemctl daemon-reload
도커 서비스 재시작

Bash

sudo systemctl restart docker
## ? Step 3: Dockerfile과 docker-compose.yml 원상복구
이제 도커 자체가 프록시를 알게 되었으니, 지저분하게 추가했던 프록시 관련 설정들은 전부 삭제해서 코드를 깨끗하게 만듭니다.

3개의 Dockerfile 모두에서 아래 두 줄을 삭제하세요.

Dockerfile

# 이 두 줄 삭제
ARG http_proxy
ARG https_proxy
docker-compose.yml 파일을 아래의 깨끗한 버전으로 전체 교체하세요. args 부분이 전부 사라진 원래 버전입니다.

YAML

version: '3.8'

services:
  homepage:
    build: ./homepage25
    networks:
      - app-network

  plantuml:
    build: ./react_plantuml
    networks:
      - app-network

  zenithnote:
    build: ./react_zenithnote
    networks:
      - app-network

  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - homepage
      - plantuml
      - zenithnote
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
## ? Step 4: 최종 실행
이제 모든 준비가 끝났습니다. 터미널에서 마지막으로 명령어를 실행하세요.

Bash

# 만약을 위해 기존 찌꺼기 정리
sudo docker-compose down

# 프록시 옵션 없이 깔끔하게 실행
sudo docker-compose up --build -d
?? 이제 npm install은 무조건 통과할 겁니다. 이 방법은 개별 컨테이너가 아니라 도커 시스템 자체에 프록시를 설정하는 것이기 때문에 가장 근본적이고 확실한 해결책입니다.