겠습니다. 테이블에 이미지 컬럼을 추가하고, 이미지를 클릭하면 확대해서 볼 수 있는 모달(modal) 기능을 추가해 보겠습니다.

프로젝트 구조 (동일):

flask_auto_row_height/
├── app.py
└── templates/
    └── index.html
1. app.py (Flask 애플리케이션 - 이미지 URL 추가)

샘플 데이터에 이미지 URL을 추가합니다. 실제 사용 시에는 실제 이미지 경로 또는 URL을 사용해야 합니다. 여기서는 예시로 placeholder 이미지를 사용하겠습니다.

Python

from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    # Sample data to display in the table
    data = [
        {
            "id": 1,
            "name": "John Doe",
            "description": "This is a short description.",
            "image_url": "https://via.placeholder.com/150/FF0000/FFFFFF?Text=Image1"
        },
        {
            "id": 2,
            "name": "Jane Smith",
            "description": "This is a medium-length description. It might span multiple lines if the content is long enough to wrap.",
            "image_url": "https://via.placeholder.com/150/00FF00/FFFFFF?Text=Image2"
        },
        {
            "id": 3,
            "name": "Peter Jones",
            "description": "This item requires a very long description. If the text is extensive, it should automatically wrap to fit within the cell, and explicitly entered\nnew lines\nlike this one\nshould also be respected.\nThe content will be displayed across multiple lines.\nThis is the last line.",
            "image_url": "https://via.placeholder.com/150/0000FF/FFFFFF?Text=Image3"
        },
        {
            "id": 4,
            "name": "Alice Brown",
            "description": "First line.\nSecond line.\nThird line.\n\nFifth line (includes an empty line).",
            "image_url": "https://via.placeholder.com/150/FFFF00/000000?Text=Image4" # Black text for yellow bg
        },
        {
            "id": 5,
            "name": "Robert Wilson",
            "description": "All cells in the same row will adjust to the height of the cell with the most content.",
            "image_url": "https://via.placeholder.com/150/FF00FF/FFFFFF?Text=Image5"
        }
    ]
    return render_template('index.html', table_data=data)

if __name__ == '__main__':
    app.run(debug=True)
2. templates/index.html (HTML 템플릿, CSS 및 JavaScript 수정)

HTML: 이미지 컬럼 및 모달 구조 추가
CSS: 썸네일 이미지 및 모달 스타일 추가
JavaScript: 모달 열기/닫기 기능 및 이미지 클릭 이벤트 핸들러 추가
HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Row Height Table with Image Modal</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 5px; /* Reduced padding for tighter fit */
            text-align: left;
            vertical-align: top;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        th {
            background-color: #f2f2f2;
        }
        td.description-cell {
            white-space: pre-wrap;
        }
        .thumbnail-image {
            max-width: 80px; /* Max width for thumbnails */
            max-height: 80px; /* Max height for thumbnails */
            height: auto;
            cursor: pointer;
            display: block; /* To prevent extra space below image if cell is taller */
        }

        /* Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            padding-top: 50px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.85); /* Black w/ opacity */
        }
        .modal-content {
            margin: auto;
            display: block;
            max-width: 80%;
            max-height: 80vh; /* Max height relative to viewport height */
        }
        .modal-caption {
            margin: 15px auto;
            display: block;
            width: 80%;
            max-width: 700px;
            text-align: center;
            color: #ccc;
            padding: 10px 0;
            height: 50px; /* Fixed height for caption area */
        }
        .close-button {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
        }
        .close-button:hover,
        .close-button:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h1>Flask Table (Auto Row Height with Image Modal)</h1>

    <table id="myTable">
        <thead>
            <tr>
                <th style="width: 5%;">ID</th>
                <th style="width: 15%;">Name</th>
                <th style="width: 15%;">Image</th> {/* New Image Column Header */}
                <th style="width: 65%;">Description</th>
            </tr>
        </thead>
        <tbody>
            {% for row in table_data %}
            <tr>
                <td>{{ row.id }}</td>
                <td>{{ row.name }}</td>
                <td>
                    {% if row.image_url %}
                    <img src="{{ row.image_url }}" alt="Image for {{ row.name }}" class="thumbnail-image" data-title="{{ row.name }}">
                    {% endif %}
                </td>
                <td class="description-cell">{{ row.description }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="imageModal" class="modal">
        <span class="close-button">&times;</span>
        <img class="modal-content" id="modalImage">
        <div id="modalCaption" class="modal-caption"></div>
    </div>

    <script>
        function adjustRowHeights() {
            const table = document.getElementById('myTable');
            if (!table) return;

            const tbody = table.getElementsByTagName('tbody')[0];
            if (!tbody) return;

            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                row.style.height = 'auto';

                let maxHeight = 0;
                const cells = row.getElementsByTagName('td');

                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    cell.style.height = 'auto';
                    // For cells with images, scrollHeight might not be accurate until image is loaded.
                    // 'load' event listener for window helps, but for dynamic content, more robust handling might be needed.
                    // The image itself has a height due to max-height CSS or its natural dimensions.
                    if (cell.scrollHeight > maxHeight) {
                        maxHeight = cell.scrollHeight;
                    }
                }
                
                // Ensure a minimum height if maxHeight is too small (e.g. only small icons)
                // This is more important if images are very small and text cells are empty.
                // For this example with 80px max-height images, it should be fine.
                // if (maxHeight < 80 && maxHeight > 0) maxHeight = 80; // Example minimum height

                if (maxHeight > 0) {
                    for (let j = 0; j < cells.length; j++) {
                         cells[j].style.height = maxHeight + 'px';
                    }
                }
            }
        }

        // Modal Get Elements
        const modal = document.getElementById("imageModal");
        const modalImg = document.getElementById("modalImage");
        const captionText = document.getElementById("modalCaption");
        const closeButton = document.getElementsByClassName("close-button")[0];

        // Function to open modal
        function openModal(element) {
            modal.style.display = "block";
            modalImg.src = element.src; // Use the same src for enlarged image
            captionText.innerHTML = element.dataset.title || element.alt; // Use data-title or alt text for caption
        }

        // Get all thumbnail images and add click event listeners
        const thumbnails = document.querySelectorAll(".thumbnail-image");
        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function() {
                openModal(this);
            });
        });

        // When the user clicks on <span> (x), close the modal
        if(closeButton) {
            closeButton.onclick = function() {
                modal.style.display = "none";
            }
        }

        // When the user clicks anywhere outside of the modal content, close it
        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        // Execute functions when the page is fully loaded (including images)
        window.addEventListener('load', function() {
            adjustRowHeights();
        });

        // Optional: Re-adjust heights on window resize
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function() {
                adjustRowHeights();
                // If modal is open, you might want to recenter/resize modal image too
            }, 150);
        });
    </script>

</body>
</html>
주요 변경 및 추가 사항:

app.py:

data 딕셔너리에 각 항목마다 image_url 키를 추가했습니다.
HTML (templates/index.html):

테이블 헤더 추가: "Image" 라는 새 <th>를 추가했습니다.
테이블 바디 셀 추가: 각 행에 <td><img src="{{ row.image_url }}" ... ></td>를 추가하여 이미지를 표시합니다.
<img> 태그에 class="thumbnail-image"를 부여하여 CSS와 JavaScript에서 선택하기 쉽도록 했습니다.
data-title="{{ row.name }}" 속성을 추가하여 모달 캡션에 사용할 이름을 저장합니다.
모달 HTML 구조: 페이지 하단에 모달창을 위한 HTML 구조를 추가했습니다 (<div id="imageModal" ...>). 여기에는 닫기 버튼, 확대될 이미지를 담을 <img> 태그, 그리고 캡션을 표시할 <div>가 포함됩니다.
CSS (templates/index.html의 <style> 태그 내부):

.thumbnail-image 스타일: 테이블 내의 썸네일 이미지 크기를 제한하고 커서를 포인터로 변경합니다. display: block;은 이미지 하단에 불필요한 공백이 생기는 것을 방지할 수 있습니다.
모달 스타일 (.modal, .modal-content, .modal-caption, .close-button): 모달창이 화면 전체를 덮고, 이미지가 중앙에 오며, 닫기 버튼이 보기 좋게 표시되도록 스타일을 지정했습니다.
JavaScript (templates/index.html의 <script> 태그 내부):

모달 요소 가져오기: getElementById 와 getElementsByClassName을 사용하여 모달 관련 HTML 요소들을 가져옵니다.
openModal 함수: 썸네일 이미지를 클릭했을 때 모달을 표시하고, 클릭된 이미지의 src를 모달 이미지의 src로 설정하며, data-title 또는 alt 속성을 캡션으로 사용합니다.
이벤트 리스너 추가: 모든 .thumbnail-image 요소에 click 이벤트 리스너를 추가하여 openModal 함수를 호출합니다.
모달 닫기:
닫기 버튼 (<span> (x))을 클릭하면 모달이 닫힙니다.
모달의 배경(이미지 외부 영역)을 클릭해도 모달이 닫힙니다.