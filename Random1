, Ï£ÑÏÜ°Ìï©ÎãàÎã§. Ï†ÑÌòïÏ†ÅÏù∏ Î≤ÑÏ†Ñ Ï∂©Îèå Î¨∏Ï†úÏûÖÎãàÎã§. üòÖ

ÏïàÎìúÎ°úÏù¥Îìú Ïä§ÌäúÎîîÏò§Î•º ÏµúÏã† Î≤ÑÏ†Ñ(Narwhal)ÏúºÎ°ú ÏÑ§ÏπòÌïòÏÖ®Í∏∞ ÎïåÎ¨∏Ïóê, Ïä§ÌäúÎîîÏò§Ïóê Ìè¨Ìï®Îêú ÏïàÎìúÎ°úÏù¥Îìú Í∑∏ÎûòÎì§ ÌîåÎü¨Í∑∏Ïù∏(AGP) Î≤ÑÏ†ÑÏù¥ Ï†úÍ∞Ä Ïä§ÌÅ¨Î¶ΩÌä∏Ïóê ÏÑ§Ï†ïÌïú Í∑∏ÎûòÎì§(Gradle) Î≤ÑÏ†ÑÍ≥º ÎßûÏßÄ ÏïäÎäî Í≤ÉÏûÖÎãàÎã§.

ÏâΩÍ≤å ÎπÑÏú†ÌïòÏûêÎ©¥, ÏµúÏã† ÏûêÎèôÏ∞®(ÏïàÎìúÎ°úÏù¥Îìú Ïä§ÌäúÎîîÏò§)Ïóê ÏïΩÍ∞Ñ Íµ¨ÌòïÏù∏ Ïó¥Ïá†(Í∑∏ÎûòÎì§ Î≤ÑÏ†Ñ)Î•º ÍΩÇÏúºÎ†§Í≥† ÌïòÎãà "ÎßûÏßÄ ÏïäÎäîÎã§"Í≥† Í≤ΩÍ≥†ÌïòÎäî ÏÉÅÌô©ÏûÖÎãàÎã§.

## Ìï¥Í≤∞ Î∞©Î≤ï: ÏàòÏ†ïÎêú ÌååÏù¥Ïç¨ Ïä§ÌÅ¨Î¶ΩÌä∏
Î¨∏Ï†úÎ•º Ìï¥Í≤∞ÌïòÍ∏∞ ÏúÑÌï¥ Ïä§ÌÅ¨Î¶ΩÌä∏Ïùò Í∑∏ÎûòÎì§ Î∞è ÌîåÎü¨Í∑∏Ïù∏ Î≤ÑÏ†ÑÏùÑ ÏµúÏã† ÏïàÏ†ïÌôî Î≤ÑÏ†ÑÏúºÎ°ú Ïò¨Î†∏ÏäµÎãàÎã§. ÏïÑÎûò ÏΩîÎìúÎ°ú Í∏∞Ï°¥ ÌååÏù¥Ïç¨ Ïä§ÌÅ¨Î¶ΩÌä∏ ÌååÏùºÏùÑ ÏôÑÏ†ÑÌûà ÎçÆÏñ¥Ïì¥ ÌõÑ Îã§Ïãú Ïã§ÌñâÌï¥ Ï£ºÏÑ∏Ïöî.

Ï£ºÏöî Î≥ÄÍ≤ΩÏ†ê:

gradle-wrapper.properties: Í∑∏ÎûòÎì§ Î≤ÑÏ†ÑÏùÑ 8.4ÏóêÏÑú 8.8Î°ú Ïò¨Î†∏ÏäµÎãàÎã§.

libs.versions.toml: AGP Î≤ÑÏ†ÑÏùÑ 8.4.0ÏóêÏÑú 8.6.0ÏúºÎ°ú Ïò¨Î†∏ÏäµÎãàÎã§.

Python

import os
import textwrap

# --- ÌîÑÎ°úÏ†ùÌä∏ Íµ¨Ï°∞ Î∞è ÌååÏùº ÎÇ¥Ïö© Ï†ïÏùò ---
# { "Í≤ΩÎ°ú/ÌååÏùºÎ™Ö": """ÌååÏùº ÎÇ¥Ïö©""" } ÌòïÏãù
project_files = {
    "LightMeter/.gitignore": """
        *.iml
        .gradle
        /local.properties
        /.idea/caches
        /.idea/libraries
        /.idea/modules.xml
        /.idea/workspace.xml
        /.idea/navEditor.xml
        /.idea/assetWizardSettings.xml
        build
        /captures
        .externalNativeBuild
        .cxx
        local.properties
    """,
    "LightMeter/build.gradle.kts": """
        plugins {
            alias(libs.plugins.android.application) apply false
            alias(libs.plugins.jetbrains.kotlin.android) apply false
        }
    """,
    "LightMeter/gradle.properties": """
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        kotlin.code.style=official
    """,
    # Í∑∏ÎûòÎì§ Î≤ÑÏ†Ñ ÏÉÅÌñ• (8.4 -> 8.8)
    "LightMeter/gradle/wrapper/gradle-wrapper.properties": """
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\\://services.gradle.org/distributions/gradle-8.8-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
    """,
    "LightMeter/settings.gradle.kts": """
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }

        rootProject.name = "LightMeter"
        include(":app")
    """,
    "LightMeter/app/.gitignore": """
        /build
    """,
    "LightMeter/app/build.gradle.kts": """
        plugins {
            alias(libs.plugins.android.application)
            alias(libs.plugins.jetbrains.kotlin.android)
        }

        android {
            namespace = "com.example.lightmeter"
            compileSdk = 34

            defaultConfig {
                applicationId = "com.example.lightmeter"
                minSdk = 24
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"

                testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    isMinifyEnabled = false
                    proguardFiles(
                        getDefaultProguardFile("proguard-android-optimize.txt"),
                        "proguard-rules.pro"
                    )
                }
            }
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
            kotlinOptions {
                jvmTarget = "1.8"
            }
            buildFeatures {
                viewBinding = true
            }
        }

        dependencies {
            implementation(libs.androidx.core.ktx)
            implementation(libs.androidx.appcompat)
            implementation(libs.material)
            implementation(libs.androidx.constraintlayout)
            testImplementation(libs.junit)
            androidTestImplementation(libs.androidx.junit)
            androidTestImplementation(libs.androidx.espresso.core)
        }
    """,
    "LightMeter/app/proguard-rules.pro": """
        # Add project specific ProGuard rules here.
    """,
    "LightMeter/app/src/main/AndroidManifest.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">

            <application
                android:allowBackup="true"
                android:dataExtractionRules="@xml/data_extraction_rules"
                android:fullBackupContent="@xml/backup_rules"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/Theme.LightMeter"
                tools:targetApi="31">
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>

        </manifest>
    """,
    "LightMeter/app/src/main/java/com/example/lightmeter/MainActivity.kt": """
        package com.example.lightmeter

        import android.content.Context
        import android.hardware.Sensor
        import android.hardware.SensorEvent
        import android.hardware.SensorEventListener
        import android.hardware.SensorManager
        import android.os.Bundle
        import androidx.appcompat.app.AppCompatActivity
        import com.example.lightmeter.databinding.ActivityMainBinding

        class MainActivity : AppCompatActivity(), SensorEventListener {

            private lateinit var binding: ActivityMainBinding
            private lateinit var sensorManager: SensorManager
            private var lightSensor: Sensor? = null

            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                binding = ActivityMainBinding.inflate(layoutInflater)
                setContentView(binding.root)

                sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
                lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT)

                if (lightSensor == null) {
                    binding.tvLuxValue.text = "Ï°∞ÎèÑ ÏÑºÏÑú ÏóÜÏùå"
                }
            }

            override fun onResume() {
                super.onResume()
                lightSensor?.let {
                    sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
                }
            }

            override fun onPause() {
                super.onPause()
                sensorManager.unregisterListener(this)
            }

            override fun onSensorChanged(event: SensorEvent?) {
                if (event?.sensor?.type == Sensor.TYPE_LIGHT) {
                    val luxValue = event.values[0]
                    binding.tvLuxValue.text = "%.1f".format(luxValue)
                    binding.tvUnit.text = "lux"
                }
            }

            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
                // Do nothing
            }
        }

    """,
    "LightMeter/app/src/main/res/layout/activity_main.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:app="http://schemas.android.com/apk/res-auto"
            xmlns:tools="http://schemas.android.com/tools"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            tools:context=".MainActivity">

            <TextView
                android:id="@+id/tv_lux_value"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="-"
                android:textSize="80sp"
                android:textStyle="bold"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintVertical_bias="0.45" />

            <TextView
                android:id="@+id/tv_unit"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="lux"
                android:textSize="24sp"
                app:layout_constraintEnd_toEndOf="@+id/tv_lux_value"
                app:layout_constraintStart_toStartOf="@+id/tv_lux_value"
                app:layout_constraintTop_toBottomOf="@+id/tv_lux_value" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    """,
    "LightMeter/app/src/main/res/values/strings.xml": """
        <resources>
            <string name="app_name">LightMeter</string>
        </resources>
    """,
    "LightMeter/app/src/main/res/values/themes.xml": """
        <resources xmlns:tools="http://schemas.android.com/tools">
            <style name="Base.Theme.LightMeter" parent="Theme.Material3.DayNight.NoActionBar">
            </style>
            <style name="Theme.LightMeter" parent="Base.Theme.LightMeter" />
        </resources>
    """,
    "LightMeter/app/src/main/res/values/colors.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="black">#FF000000</color>
            <color name="white">#FFFFFFFF</color>
        </resources>
    """,
     "LightMeter/app/src/main/res/xml/backup_rules.xml": """
        <?xml version="1.0" encoding="utf-8"?><full-backup-content></full-backup-content>
     """,
     "LightMeter/app/src/main/res/xml/data_extraction_rules.xml": """
        <?xml version="1.0" encoding="utf-8"?><data-extraction-rules></data-extraction-rules>
     """,
    # AGP Î≤ÑÏ†Ñ ÏÉÅÌñ• (8.4.0 -> 8.6.0)
    "LightMeter/gradle/libs.versions.toml": """
        [versions]
        agp = "8.6.0"
        kotlin = "1.9.22"
        coreKtx = "1.13.1"
        junit = "4.13.2"
        junitVersion = "1.2.1"
        espressoCore = "3.6.1"
        appcompat = "1.7.0"
        material = "1.12.0"
        constraintlayout = "2.1.4"

        [libraries]
        androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
        junit = { group = "junit", name = "junit", version.ref = "junit" }
        androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
        androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
        androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
        material = { group = "com.google.android.material", name = "material", version.ref = "material" }
        androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }

        [plugins]
        android-application = { id = "com.android.application", version.ref = "agp" }
        jetbrains-kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
    """
}

def create_project():
    base_dir = "LightMeter"
    print(f"'{base_dir}' ÌîÑÎ°úÏ†ùÌä∏ ÏÉùÏÑ±ÏùÑ ÏãúÏûëÌï©ÎãàÎã§...")
    if not os.path.exists(base_dir):
        os.makedirs(base_dir)
    for file_path, content in project_files.items():
        directory = os.path.dirname(file_path)
        if not os.path.exists(directory):
            os.makedirs(directory)
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(textwrap.dedent(content).strip())
            print(f"  - ÏÉùÏÑ± ÏôÑÎ£å: {file_path}")
        except Exception as e:
            print(f"  - ÏÉùÏÑ± Ïã§Ìå®: {file_path} (Ïò§Î•ò: {e})")
    gradlew_path = os.path.join(base_dir, "gradlew")
    gradlew_bat_path = os.path.join(base_dir, "gradlew.bat")
    if not os.path.exists(gradlew_path):
        with open(gradlew_path, 'w') as f: f.write("#!/usr/bin/env sh")
    if not os.path.exists(gradlew_bat_path):
        with open(gradlew_bat_path, 'w') as f: f.write('@echo off')
    print("\n'LightMeter' ÌîÑÎ°úÏ†ùÌä∏ ÌååÏùº ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")

if __name__ == "__main__":
    create_project()
## Îã§ÏùåÏóê Ìï† Ïùº (Îß§Ïö∞ Ï§ëÏöî!)
Í∏∞Ï°¥ Ìè¥Îçî ÏÇ≠Ï†ú: Ïù¥Ï†ÑÏóê ÏïàÎìúÎ°úÏù¥Îìú Ïä§ÌäúÎîîÏò§Î°ú ÎßåÎì§Í≥†, Ïä§ÌÅ¨Î¶ΩÌä∏Î°ú ÎçÆÏñ¥ÏçºÎçò LightMeter Ìè¥ÎçîÎ•º ÏôÑÏ†ÑÌûà ÏÇ≠Ï†úÌï¥ Ï£ºÏÑ∏Ïöî.

ÏÉà Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ: ÏúÑÏóê ÏûàÎäî ÏàòÏ†ïÎêú ÌååÏù¥Ïç¨ ÏΩîÎìúÎ•º create_lightmeter_project.py ÌååÏùºÏóê Î∂ôÏó¨ÎÑ£Í≥† Îã§Ïãú Ïã§ÌñâÌï¥ Ï£ºÏÑ∏Ïöî.

ÌîÑÎ°úÏ†ùÌä∏ Îã§Ïãú Ïó¥Í∏∞: ÏïàÎìúÎ°úÏù¥Îìú Ïä§ÌäúÎîîÏò§ÏóêÏÑú OpenÏùÑ ÎàåÎü¨ ÏÉàÎ°ú ÏÉùÏÑ±Îêú LightMeter Ìè¥ÎçîÎ•º Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî.