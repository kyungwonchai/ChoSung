해했습니다. 파일을 감지하여 작업이 추가되면, 각 작업에 대한 세부적인 함수 흐름이 표에 추가되어 표시되고, 각 행이 완료되면 녹색으로 표시되며, 개별적으로 실행하는 버튼과 전체 일시정지 및 재개 기능을 제공하는 더 심플하고 강력한 구조로 수정해야 한다는 것이군요.

또한, 각 행에 개별 실행 버튼이 있어야 하고, 전체 작업 일시정지 및 특정 작업부터 재개 기능이 필요하다고 이해했습니다.

주요 요구 사항 정리:
파일 감지 후 1, 2, 3 플래그에 따라 작업이 추가되고, 해당 작업은 하나의 표(DataGrid)에 표시.
세부적인 함수 흐름을 표에 표시하며, 각 작업이 완료되면 그 행은 녹색으로 표시.
개별 실행 버튼이 각 작업에 포함되어 있어, 특정 작업을 실행할 수 있음.
전체 일시정지 및 재개 기능 제공.
특정 행부터 재개시 그 이후 작업들은 전부 대기 상태로 남김.
수정된 TaskModel (개별 실행 및 전체 일시정지 반영)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Collections.ObjectModel;
using System.Windows;
using System.Diagnostics;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 개별 실행 및 전체 일시정지/재개 기능을 제공합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }  // 시퀀스 플래그 (1: 시작, 2: 중간, 3: 끝)

    // 상태 컬러를 결정하는 Brush (완료 시 녹색으로 변경)
    public Brush StatusColor { get; set; } = Brushes.Gray;

    // 경과 시간을 측정하는 Stopwatch
    private Stopwatch _stopwatch;

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    public ICommand StartTaskCommand { get; }  // 개별 작업 실행 명령어
    public ICommand PauseAllCommand { get; }
    public ICommand ResumeAllCommand { get; }

    private bool _isPaused = false;  // 작업이 일시정지되었는지 여부

    public Action<TaskModel> StartNextTask { get; set; }  // 다음 작업을 실행할 델리게이트

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag;

        _taskQueue = taskQueue;
        Status = "Pending";  // 기본 상태는 대기 상태
        _stopwatch = new Stopwatch();  // Stopwatch 초기화

        // 명령어 설정
        StartTaskCommand = new RelayCommand(StartTask);
        PauseAllCommand = new RelayCommand(PauseTask);
        ResumeAllCommand = new RelayCommand(ResumeTask);
    }

    /// <summary>
    /// 작업을 시작하고 각 함수 완료 시 상태를 업데이트합니다.
    /// </summary>
    public void StartTask()
    {
        if (_isPaused) return;  // 일시정지 중이라면 실행하지 않음

        Status = "Running";
        _stopwatch.Restart();
        ExecuteTaskSequence();
    }

    /// <summary>
    /// 시퀀스 플래그에 따라 작업을 순차적으로 실행합니다.
    /// </summary>
    private async void ExecuteTaskSequence()
    {
        switch (SequenceFlag)
        {
            case 1:
                await ExecuteTask("Task A");
                await ExecuteTask("Task B");
                await ExecuteTask("Task C");
                break;
            case 2:
                await ExecuteTask("Task C");
                await ExecuteTask("Task B");
                await ExecuteTask("Task D");
                break;
            case 3:
                await ExecuteTask("Task A");
                await ExecuteTask("Task B");
                await ExecuteTask("Task E");
                break;
        }

        // 작업이 완료되면 상태와 색상을 완료 상태로 변경
        Status = "Completed";
        StatusColor = Brushes.Green;
        _stopwatch.Stop();

        StartNextTask?.Invoke(this);
    }

    /// <summary>
    /// 개별 함수를 실행합니다.
    /// </summary>
    private async Task ExecuteTask(string taskName)
    {
        if (_isPaused) return;  // 일시정지 중이라면 실행하지 않음

        // 각 작업은 1초 동안 실행된다고 가정
        await Task.Delay(1000);
        Status = $"{taskName} Completed";
        OnPropertyChanged(nameof(Status));
    }

    /// <summary>
    /// 모든 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _isPaused = true;
        Status = "Paused";
    }

    /// <summary>
    /// 모든 작업을 재개합니다.
    /// 재개 시 선택된 행부터 다시 실행되며 나머지는 대기 상태.
    /// </summary>
    private void ResumeTask()
    {
        _isPaused = false;
        _stopwatch.Restart();
        StartTask();  // 다시 첫 함수부터 실행
        Status = "Resumed";
    }
}
TaskQueue.cs 수정 (작업 큐 관리)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Threading;

public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    public ObservableCollection<TaskModel> TaskEntries { get; private set; }

    private bool _isRunning = false;
    private bool _isPaused = false;
    private Dispatcher _dispatcher;

    public TaskQueue()
    {
        TaskEntries = new ObservableCollection<TaskModel>();
        _dispatcher = Dispatcher.CurrentDispatcher;
    }

    /// <summary>
    /// 새로운 작업 엔트리를 큐에 추가하고 실행합니다.
    /// </summary>
    public void EnqueueTask(TaskModel taskModel)
    {
        TaskEntries.Add(taskModel);  // ObservableCollection에 TaskModel 추가
        RunNextTask();  // 작업 실행
    }

    /// <summary>
    /// 다음 작업을 실행합니다.
    /// </summary>
    private void RunNextTask()
    {
        if (_tasks.Count == 0 || _isPaused) return;  // 더 이상 실행할 작업이 없거나 일시정지된 경우

        _isRunning = true;
        var task = _tasks.Dequeue();
        task.Invoke();
        _isRunning = false;
    }

    /// <summary>
    /// 작업 일시정지
    /// </summary>
    public void Pause()
    {
        _isPaused = true;
    }

    /// <summary>
    /// 작업 재개
    /// </summary>
    public void Resume()
    {
        if (_isPaused)
        {
            _isPaused = false;
            RunNextTask();  // 다시 작업 실행
        }
    }
}
MainViewModel.cs (작업 큐와 UI 연동)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    public ObservableCollection<TaskModel> TaskList { get; set; }
    private TaskQueue _taskQueue;

    public ICommand PauseAllCommand { get; }
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();
        TaskList = _taskQueue.TaskEntries;

        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);

        // 테스트용 작업 추가
        _taskQueue.EnqueueTask(new TaskModel(new LogEntry("MAG001", "PO123", 1), _taskQueue));
        _taskQueue.EnqueueTask(new TaskModel(new LogEntry("MAG002", "PO456", 2), _taskQueue));
        _taskQueue.EnqueueTask(new TaskModel(new LogEntry("MAG003", "PO789", 3), _taskQueue));
    }

    /// <summary>
    /// 모든 작업을 일시정지
    /// </summary>
    private void PauseAllTasks()
    {
        _taskQueue.Pause();
    }

    /// <summary>
    /// 모든 작업을 재개
    /// </summary>
    private void ResumeAllTasks()
    {
        _taskQueue.Resume();
    }
}
XAML (UI 연동)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid: TaskList 바인딩하여 각 작업의 상태를 표시 -->
        <DataGrid ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO 표시 -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />

                <!-- PO_NO 표시 -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- 개별 실행 버튼 -->
                <DataGridTemplateColumn Header="Actions">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Start Task" Command="{Binding StartTaskCommand}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 전체 일시정지 버튼 -->
        <Button Content="Pause All" Command="{Binding PauseAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10"/>
        
        <!-- 전체 재개 버튼 -->
        <Button Content="Resume All" Command="{Binding ResumeAllCommand}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="10"/>
    </Grid>
</Window>
요약:
파일 감지 후 작업이 표에 추가되면, 해당 작업의 상태(진행, 완료 등)가 DataGrid에 표시됩니다.
각 작업에는 Start Task 버튼이 있어 개별 실행이 가능합니다.
Pause All 및 Resume All 버튼을 통해 전체 작업의 일시정지 및 재개가 가능합니다.
작업이 완료되면 녹색으로 표시되고, 각 작업의 상태는 실시간으로 업데이트됩니다.
이 구조는 심플하면서도 강력하게 개별 작업의 흐름을 제어하고, 전체 작업의 관리가 가능하도록 설계되었습니다. 추가적인 요구 사항이 있으면 언제든지 말씀해 주세요