마포어(Semaphore)는 프로그래밍에서 동시에 접근할 수 있는 공유 자원의 개수를 제한하기 위해 사용되는 동기화 도구입니다. 주로 멀티스레드 환경에서 여러 스레드가 동일한 자원에 동시에 접근하려고 할 때, 이를 관리하기 위해 활용됩니다. 세마포어는 프로세스 전체에 걸쳐 자원을 관장한다기보다는, 특정 자원이나 코드 블록에 대한 접근을 제어하는 역할을 합니다.

세마포어의 기본 개념
세마포어는 정해진 값(일반적으로 숫자)을 가지며, 이 값은 자원에 접근할 수 있는 허용 가능한 스레드 또는 프로세스의 개수를 나타냅니다.
Wait(): 세마포어 값을 하나 감소시키면서 자원에 접근할 권한을 얻습니다. 세마포어 값이 0이면, 해당 자원에 접근할 수 있는 스레드가 더 이상 없음을 의미하므로 대기하게 됩니다.
Release(): 세마포어 값을 하나 증가시키면서 자원 접근 권한을 해제합니다. 대기 중인 스레드가 있으면 이들이 자원에 접근할 수 있게 됩니다.
세마포어와 인터럽트
세마포어는 인터럽트를 직접적으로 발생시키거나 제어하지 않습니다. 세마포어는 특정 자원에 대한 접근을 제어하는 역할만을 수행하며, 프로세스 전체에 걸쳐 중단을 발생시키거나 전체 프로세스를 관장하지 않습니다.

세마포어의 사용 예시
예를 들어, 2개의 스레드만 동시에 실행할 수 있는 작업이 있다면, 세마포어를 2로 설정하고 다음과 같은 방식으로 자원 접근을 제어할 수 있습니다.

csharp
코드 복사
SemaphoreSlim semaphore = new SemaphoreSlim(2); // 동시에 2개만 접근 허용

async Task AccessResource()
{
    await semaphore.WaitAsync(); // 자원 접근 권한 획득 대기
    try
    {
        // 공유 자원에 접근
        Console.WriteLine("자원 접근 중...");
        await Task.Delay(1000); // 작업 수행
    }
    finally
    {
        semaphore.Release(); // 자원 접근 권한 해제
    }
}
세마포어의 용도와 특징
동시 접근 제한: 여러 스레드가 자원에 동시에 접근하는 것을 방지하거나 제한하고 싶을 때 사용합니다.