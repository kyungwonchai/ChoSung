인터널 서버 에러" (Internal Server Error, HTTP 상태 코드 500)는 요청을 처리하는 API 서버 쪽에서 예상치 못한 문제가 발생했을 때 나타나는 일반적인 오류 메시지입니다. WPF 클라이언트 코드 자체의 문제라기보다는, 호출된 ASP.NET Core API 애플리케이션 내부에서 오류가 발생했을 가능성이 높습니다.

문제를 해결하려면 API 서버 쪽을 자세히 살펴봐야 합니다. 다음 단계를 따라 원인을 찾아보세요.

1. API 서버 로그 확인 (가장 중요!)

Visual Studio에서 실행 중인 경우:

Visual Studio의 출력(Output) 창을 확인하세요. 드롭다운 메뉴에서 "디버그(Debug)" 또는 "ASP.NET Core Web Server" 를 선택하면 API 실행 중 발생하는 오류 메시지나 예외(Exception) 정보, 스택 추적(Stack Trace)이 표시될 수 있습니다. 500 오류가 발생했을 때 어떤 예외가 기록되었는지 찾아보세요.
dotnet run으로 실행 중인 경우:

API를 실행한 콘솔(터미널) 창에 오류 메시지나 예외 정보가 출력됩니다. 해당 내용을 확인하세요.
IIS 등에 배포된 경우:

Windows **이벤트 뷰어(Event Viewer)**의 Windows 로그 > 응용 프로그램(Application) 섹션에 ASP.NET Core 관련 오류가 기록될 수 있습니다.
web.config 파일에서 stdoutLogEnabled="true" 및 stdoutLogFile 경로를 설정하여 표준 출력 로그를 파일로 남기도록 설정했다면 해당 로그 파일을 확인하세요.
Serilog나 NLog 같은 로깅 라이브러리를 사용하도록 설정했다면, 해당 라이브러리가 기록하는 로그 파일이나 데이터베이스 등을 확인하세요.
로그에서 찾아야 할 내용:

Exception 이라는 단어와 함께 표시되는 오류 유형 (예: MySqlException, NullReferenceException, InvalidOperationException 등)
오류가 발생한 코드 위치를 알려주는 스택 추적 (Stack Trace)
오류 메시지 본문
2. 데이터베이스 연결 및 쿼리 점검 (API 코드)

500 오류의 흔한 원인 중 하나는 데이터베이스 관련 문제입니다. API 서버의 RepairInfoController.cs 코드를 다시 확인하세요.

연결 문자열 (appsettings.json): 서버 주소, 데이터베이스 이름(smd), 사용자 이름, 비밀번호가 정확한지 다시 확인하세요. DefaultConnection 이름이 코드에서 사용한 이름과 일치하는지도 확인합니다.
MySQL 서버 상태: MySQL 데이터베이스 서버가 정상적으로 실행 중인지 확인하세요.
방화벽: API 서버와 MySQL 서버 사이에 방화벽이 있다면, MySQL 포트(기본값 3306)가 열려 있는지 확인하세요.
데이터베이스 사용자 권한: appsettings.json에 지정된 DB 사용자가 smd 데이터베이스의 repair_instock 테이블에 대해 SELECT 권한을 가지고 있는지 확인하세요.
SQL 쿼리: 컨트롤러의 GetRepairInfoByBarcode 메서드 안에 있는 SQL 쿼리 문자열에 오타가 없는지 확인하세요.
SQL

SELECT model, point, detail FROM smd.repair_instock WHERE barcode = @barcode
테이블 이름 (smd.repair_instock) 이 정확한가?
컬럼 이름 (model, point, detail, barcode) 이 정확한가? (대소문자 구분 여부도 확인 - MySQL 설정에 따라 다름)
파라미터: @barcode 파라미터가 command.Parameters.AddWithValue("@barcode", barcode); 를 통해 올바르게 추가되고 있는지 확인하세요.
3. API 코드 로직 점검 (RepairInfoController.cs)

Null 참조: _configuration 객체가 생성자에서 제대로 주입되지 않아 null일 가능성은 없는지, 또는 다른 객체가 예기치 않게 null이 되어 NullReferenceException이 발생할 수 있는 곳은 없는지 확인하세요.
예외 처리: try...catch 블록이 데이터베이스 작업을 포함한 주요 로직을 감싸고 있는지 확인하세요. 혹시 try 블록 시작 전이나 catch 블록 이후, 또는 reader 사용 후 Ok(repairInfo) 반환 전에 다른 예외가 발생할 가능성은 없는지 검토하세요.
4. API 직접 테스트

WPF 애플리케이션을 통하지 않고, 이전에 사용했던 도구(VS Code REST Client, Thunder Client, Postman, curl 등)를 사용하여 API 엔드포인트(https://localhost:PORT/api/RepairInfo/{실제바코드})를 직접 호출해 보세요.

데이터베이스에 실제로 존재하는 바코드로 호출했을 때 500 오류가 나는지 확인합니다.
데이터베이스에 존재하지 않는 바코드로 호출했을 때 예상대로 404 Not Found가 반환되는지 확인합니다. (만약 이때도 500이 난다면 오류 처리 로직 자체에 문제가 있을 수 있습니다.)
결과가 어떻게 나오는지 확인하면 문제가 API 자체에 있는지, 아니면 WPF 클라이언트와의 통신 과정에 있는지 범위를 좁힐 수 있습니다.
5. API 디버깅

Visual Studio에서 API 프로젝트를 열고 RepairInfoController.cs 파일의 GetRepairInfoByBarcode 메서드 내부에 중단점(Breakpoint, F9 키)을 설정합니다. 특히 try 블록 시작 부분, await command.ExecuteReaderAsync() 호출 직전/직후, Ok(repairInfo) 반환 직전에 설정하면 좋습니다.
F5 키를 눌러 디버그 모드로 API를 시작합니다.
WPF 애플리케이션이나 API 테스트 도구를 사용하여 해당 API를 호출합니다.
호출 시 Visual Studio의 디버거가 중단점에서 멈추면, 코드를 한 줄씩 실행(F10)하면서 변수 값(connectionString, barcode, reader 결과 등)을 조사하고 어느 부분에서 예외가 발생하는지 정확히 찾아냅니다.
오류 정보 공유: