습니다. UserControl의 XAML에서 모든 UI 설정을 하고, 데이터 바인딩을 사용하여 차트를 구성하는 전체 코드를 제공하겠습니다.

1. UserControl XAML 정의
UserControl XAML에서 차트와 시리즈의 스타일링을 정의합니다. 데이터 바인딩을 사용하여 DisplayName을 설정합니다.

ChartUserControl.xaml

xml
Copy code
<UserControl x:Class="YourNamespace.ChartUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
             xmlns:local="clr-namespace:YourNamespace">
    <Grid>
        <dxc:ChartControl x:Name="chartControl">
            <dxc:ChartControl.Legend>
                <dxc:Legend HorizontalPosition="RightOutside" VerticalPosition="Top" Orientation="Vertical"/>
            </dxc:ChartControl.Legend>
            <dxc:XYDiagram2D>
                <dxc:LineSeries2D DisplayName="{Binding Path=Type}"
                                 ArgumentScaleType="DateTime"
                                 ArgumentDataMember="FileTime"
                                 ValueDataMember="CTValue"
                                 DataSource="{Binding}" 
                                 MarkerVisible="True"
                                 MarkerSize="5"
                                 MarkerKind="Circle">
                    <!-- 기타 시리즈 설정 -->
                </dxc:LineSeries2D>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
    </Grid>
</UserControl>
2. UserControl 코드 뒷면
UserControl의 코드 뒷면에서 데이터를 추가하는 로직을 구현합니다.

ChartUserControl.xaml.cs

csharp
Copy code
public partial class ChartUserControl : UserControl
{
    private const int MaxDataPoints = 100;

    public ChartUserControl()
    {
        InitializeComponent();
    }

    public void SetupChart(ObservableCollection<ChartData> data, string type)
    {
        var series = chartControl.Diagram.Series[0] as LineSeries2D;
        series.DataSource = new ObservableCollection<ChartData>(data.Where(d => d.Type == type));
        series.DataContext = new { Type = type };
    }

    public void AddData(ChartData newData)
    {
        var series = chartControl.Diagram.Series[0] as LineSeries2D;
        var seriesData = series.DataSource as ObservableCollection<ChartData>;
        if (seriesData == null) return;

        seriesData.Add(newData);
        while (seriesData.Count > MaxDataPoints)
        {
            seriesData.RemoveAt(0);
        }
    }
}
3. 메인 윈도우에서 UserControl 사용하기
MainWindow.xaml.cs

csharp
Copy code
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        CreateCharts();
    }

    void CreateCharts()
    {
        var data = FetchDataFromDatabase();
        var types = new[] { "T", "B" };

        foreach (var type in types)
        {
            var chartUserControl = new ChartUserControl();
            chartUserControl.SetupChart(data, type);
            MainStackPanel.Children.Add(chartUserControl);
        }

        SetupTimer();
    }

    void SetupTimer()
    {
        // 타이머 설정 및 데이터 업데이트 로직
    }

    // 기타 메서드 (FetchDataFromDatabase, UpdateCharts 등)
}
MainWindow.xaml

xml
Copy code
<Window ...>
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- UserControl 인스턴스들이 여기에 추가됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
이 코드는 UserControl을 사용하여 차트의 모든 UI 요소를 XAML에서 정의합니다. SetupChart 메서드는 차트를 초기화하고, AddData 메서드는 새 데이터를 추가합니다. 메인 윈도우의 CreateCharts 메서드에서는 차트를 초기화하고, SetupTimer 메서드는 주기적으로 데이터를 업데이트합니다.

YourNamespace는 UserControl과 MainWindow가 속한 네임스페이스로, 실제 프로젝트의 네임스페이스에 맞게 변경해야 합니다. FetchDataFromDatabase 및 타이머 관련 메서드는 데이터베이스 