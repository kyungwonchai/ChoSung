시 프로그램이므로 메인 UI에서 버튼을 누르면 30초에서 60초 사이의 랜덤한 간격으로 파일이 생성되는 기능을 함수형으로 만들어 보겠습니다. await 키워드를 사용하여 비동기적으로 동작하도록 하여 UI가 차단되지 않도록 하겠습니다.

수정된 ViewModel 코드
csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Input;

public class FileWatcherViewModel : ViewModelBase
{
    private readonly string _prodLogPath = @"C:\PROD_FILE_LOG";
    private bool _isGenerating;

    public ICommand StartGeneratingFilesCommand { get; }

    public FileWatcherViewModel()
    {
        // 로그 파일 생성 시작 명령어 초기화
        StartGeneratingFilesCommand = new RelayCommand(async () => await StartGeneratingFiles());
    }

    // 파일 생성 시작 함수 (비동기)
    private async Task StartGeneratingFiles()
    {
        // 파일 생성이 이미 진행 중이라면 중복 실행 방지
        if (_isGenerating)
            return;

        _isGenerating = true;
        Log("Starting to generate files...");

        try
        {
            while (_isGenerating)
            {
                // 30~60초 랜덤 간격 설정
                var randomInterval = new Random().Next(30, 61);
                Log($"Next file will be generated in {randomInterval} seconds...");

                // 랜덤 간격 대기
                await Task.Delay(randomInterval * 1000);

                // 파일 생성 함수 호출
                GenerateLogFile();
            }
        }
        catch (Exception ex)
        {
            Log($"Error during file generation: {ex.Message}");
        }
    }

    // 로그 파일 생성 함수
    private void GenerateLogFile()
    {
        try
        {
            // 현재 시간을 기반으로 파일 이름 생성
            var currentTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            var fileName = $"W_test_{currentTime}.txt";
            var filePath = Path.Combine(_prodLogPath, fileName);

            // 폴더가 없으면 생성
            if (!Directory.Exists(_prodLogPath))
            {
                Directory.CreateDirectory(_prodLogPath);
            }

            // 파일 내용 작성
            var fileContent = "MAG_NO='MAG1234'\nMAG_QTY=100\nBASIC_MODEL='MODEL_ABC'\nMODEL_CODE='CODE_XYZ'\nPO_NO='PO98765'\nPO_PLAN_QTY=500\nPO_PROD_QTY=450";

            // 파일 생성
            File.WriteAllText(filePath, fileContent);

            // 로그 출력
            Log($"Log file generated: {filePath}");
        }
        catch (Exception ex)
        {
            Log($"Error generating log file: {ex.Message}");
        }
    }

    // 로그 출력 함수
    private void Log(string message)
    {
        msgvs.Instance.LogT5(message);
        Debug.WriteLine(message);
    }
}
MainWindow.xaml (UI)
xml
코드 복사
<Window x:Class="FileWatcherApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Watcher" Height="350" Width="525">
    <Grid>
        <StackPanel>
            <!-- 로그 메시지를 표시하는 ListBox -->
            <ListBox ItemsSource="{Binding LogMessages}" />

            <!-- 로그 파일 생성 시작 버튼 -->
            <Button Content="Start Generating Files" Command="{Binding StartGeneratingFilesCommand}" />
        </StackPanel>
    </Grid>
</Window>
설명
랜덤 간격 파일 생성: StartGeneratingFiles 함수에서 30~60초 사이의 랜덤한 시간 간격으로 파일을 생성합니다. Task.Delay를 사용하여 비동기 대기를 처리하여 UI 차단을 방지합니다.
버튼 클릭 후 파일 생성: "Start Generating Files" 버튼을 클릭하면, 랜덤 간격으로 C:\PROD_FILE_LOG 경로에 로그 파일이 생성됩니다.
로그 기록: 생성된 파일의 경로와 상태 메시지는 로그로 기록됩니다.
이 코드를 실행하면 버튼을 클릭한 후 일정한 랜덤 간격으로 파일이 생성되는 프로그