겠습니다. 제대로 문제를 해결하지 못해 매우 죄송합니다. 오류를 추적하고 해결하기 위해 쿼리와 파라미터를 출력하여 실제 쿼리와 파라미터가 제대로 전달되고 있는지 확인하고, 다른 로그들도 출력하도록 추가하겠습니다.

수정 사항:
쿼리와 파라미터 출력: 실제로 실행되는 쿼리와 그에 전달된 파라미터를 로그로 출력합니다.
로그 추가: 각 단계에서 어떤 일이 발생했는지 로그로 확인할 수 있도록 출력합니다.
최종 수정된 코드:
python
Copy code
from flask import Flask, render_template, request
import pandas as pd
import pymssql
import logging

# 로그 설정
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# 고정된 쿼리 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = %s"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = %s"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = %s"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # pymssql을 사용하여 데이터베이스 연결
        conn = pymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달
        logging.debug(f"Executing query: {query} with parameter: {qr_value}")  # 실행되는 쿼리와 파라미터 출력
        cursor.execute(query, (qr_value,))  # 여기서 qr_value가 제대로 전달됩니다

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        logging.debug(f"Query executed, fetched rows: {len(rows)}")  # 데이터가 몇 개 나왔는지 출력

        # 결과가 있으면 데이터를 pandas DataFrame으로 변환하여 반환
        if len(rows) > 0:
            df = pd.DataFrame(rows, columns=columns)
            return df
        else:
            return None
    except Exception as e:
        logging.error(f"Error executing query: {e}")
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    # 고정된 쿼리들 실행
    logging.debug("Starting to fetch data for functionA")
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
def get_data():
    """
    사용자가 입력한 QR 값을 받아 functionA를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값
    
    logging.debug(f"Received QR value: {qr_value}")
    logging.debug(f"Received connection string: {connection_string}")

    # 함수 A 실행: 여러 개의 쿼리를 동기적으로 실행
    data = functionA(connection_string, qr_value)
    
    # DataFrame을 HTML 테이블로 변환
    html_tables = []
    for df in data:
        if isinstance(df, pd.DataFrame):  # df가 DataFrame일 경우에만 to_html()을 호출
            html_tables.append(df.to_html(classes='data', header=True, index=False))
        else:
            html_tables.append("<p>No data found.</p>")

    # 결과를 HTML 테이블 형식으로 렌더링
    return render_template('table.html', tables=html_tables)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
주요 변경 사항:
쿼리와 파라미터 출력:

logging.debug(f"Executing query: {query} with parameter: {qr_value}")로 실제 실행되는 쿼리와 파라미터를 출력합니다.
logging.debug(f"Query executed, fetched rows: {len(rows)}")로 조회된 결과 개수를 출력합니다.
에러 로깅:

쿼리 실행 중 문제가 생기면 에러 메시지를 logging.error()로 출력하여 문제를 추적할 수 있게 합니다.
기타 로그 추가:

logging.debug(f"Received QR value: {qr_value}") 및 logging.debug(f"Received connection string: {connection_string}")로 입력받은 값을 확인합니다.
함수가 실행되는 각 단계에서 로그를 찍어서 오류를 추적할 수 있습니다.
로그 설정:
로그 레벨을 DEBUG로 설정하여 상세한 로그가 출력되도록 했습니다. 로그는 console에 출력되며, 에러가 발생할 경우에도 이를 콘솔에서 확인할 수 있습니다.
실행 방법:
필요한 라이브러리 설치:

bash
Copy code
pip install pymssql pandas Flask
앱 실행:

bash
Copy code
python app.py
브라우저에서 테스트: 브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.

로그 확인: 서버 콘솔에서 출력된 로그를 확인하여 쿼리 실행 결과나 에러를 추적할 수 있습니다.

추가 확인 사항: