안녕하세요. DevExpress WinForms GridView (v22.2)에서 동적으로 추가된 컬럼들을 기준으로 특정 조건에 따라 행의 배경색을 변경하는 방법을 알려드리겠습니다.

요청하신 내용은 "재고" 컬럼의 값이 "부족기준" 컬럼의 값보다 작거나 같을 경우 해당 행 전체를 노란색으로 표시하는 것입니다. 이 기능은 DevExpress GridView의 Conditional Formatting (조건부 서식) 기능을 사용하거나 RowStyle 이벤트를 사용하여 구현할 수 있습니다.

방법 1: 조건부 서식 (Conditional Formatting) 사용 (권장)

이 방법은 GridView 자체의 기능을 활용하여 코드가 더 간결하고 관리가 용이합니다.

C#

using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using System.Drawing;

// --- 이 코드는 컬럼을 동적으로 추가한 *후*에 실행되어야 합니다. ---
// 예: Form_Load 이벤트 핸들러 내부 또는 컬럼 추가 로직 직후

// GridView 인스턴스 가져오기 (gridView1 이라고 가정)
GridView gridView = gridView1; // 실제 GridView 이름으로 변경하세요.

// 1. 새로운 스타일 서식 조건 생성
StyleFormatCondition condition = new StyleFormatCondition();

// 2. 조건 유형 설정: Expression (표현식) 사용
condition.Condition = FormatConditionEnum.Expression;

// 3. 표현식 정의: [FieldName1] <= [FieldName2] 형태
// *** 중요: "재고"와 "부족기준"은 실제 컬럼을 추가할 때 사용한 FieldName 속성값이어야 합니다. ***
condition.Expression = "[재고] <= [부족기준]"; // FieldName이 다르면 여기를 수정하세요.

// 4. 서식 적용 대상: 전체 행 (Row)
condition.ApplyToRow = true;

// 5. 조건 만족 시 적용할 모양 설정
condition.Appearance.BackColor = Color.Yellow;
condition.Appearance.Options.UseBackColor = true; // BackColor 사용 명시

// 6. GridView의 FormatConditions 컬렉션에 조건 추가
gridView.FormatConditions.Add(condition);
주의사항:

[재고] 와 [부족기준] 부분은 Columns.AddRange 또는 개별 GridColumn을 생성할 때 설정한 FieldName 속성값과 정확히 일치해야 합니다. 대소문자를 구분할 수 있으니 주의하세요.
이 코드는 GridView가 초기화되고, 동적으로 컬럼들이 추가된 이후에 실행되어야 합니다. Form의 Load 이벤트나 해당 컬럼들을 추가하는 로직 바로 뒤에 배치하는 것이 좋습니다.
방법 2: RowStyle 이벤트 사용

이 방법은 각 행이 그려질 때마다 직접 조건을 확인하고 스타일을 적용합니다. 좀 더 복잡한 로직이 필요할 때 유용할 수 있습니다.

C#

using DevExpress.XtraGrid.Views.Grid;
using System.Drawing;
using System; // Convert 클래스 사용

// --- Form의 생성자나 Load 이벤트 등 초기화 시점에 이벤트를 구독합니다. ---
// gridView1.RowStyle += GridView1_RowStyle;

private void GridView1_RowStyle(object sender, RowStyleEventArgs e)
{
    // 데이터 행에 대해서만 처리 (그룹 행, 새 항목 행 등 제외)
    if (e.RowHandle >= 0)
    {
        GridView view = sender as GridView;
        if (view == null) return;

        try
        {
            // *** 중요: "재고"와 "부족기준"은 실제 컬럼의 FieldName 이어야 합니다. ***
            string stockFieldName = "재고";     // 실제 FieldName으로 변경
            string thresholdFieldName = "부족기준"; // 실제 FieldName으로 변경

            // 현재 행에서 각 컬럼의 값을 가져옵니다.
            // GetRowCellValue는 object를 반환하므로 적절한 타입으로 변환해야 합니다.
            // DBNull.Value나 null 값 처리를 위해 Convert.ToInt32 등을 사용합니다.
            object stockValueObj = view.GetRowCellValue(e.RowHandle, stockFieldName);
            object thresholdValueObj = view.GetRowCellValue(e.RowHandle, thresholdFieldName);

            // 값이 null이거나 DBNull이 아닌지 확인 후 int로 변환
            if (stockValueObj != null && stockValueObj != DBNull.Value &&
                thresholdValueObj != null && thresholdValueObj != DBNull.Value)
            {
                int stock = Convert.ToInt32(stockValueObj);
                int threshold = Convert.ToInt32(thresholdValueObj);

                // 조건 확인: 재고 <= 부족기준
                if (stock <= threshold)
                {
                    // 조건 만족 시 배경색을 노란색으로 설정
                    e.Appearance.BackColor = Color.Yellow;
                    // 다른 스타일보다 우선 적용되도록 설정 (선택 사항)
                    e.HighPriority = true;
                }
            }
        }
        catch (Exception ex)
        {
            // 오류 처리 (예: 컬럼을 찾을 수 없거나, 값을 int로 변환할 수 없는 경우)
            Console.WriteLine($"Error in RowStyle event: {ex.Message}");
            // 실제 애플리케이션에서는 로깅 등의 처리를 하는 것이 좋습니다.
        }
    }
}
주의사항:

RowStyle 이벤트 핸들러(GridView1_RowStyle)를 GridView의 RowStyle 이벤트에 연결해야 합니다 (주석 처리된 부분 참고).
GetRowCellValue 사용 시 FieldName이 정확해야 합니다.
GetRowCellValue는 object를 반환하므로, null 또는 DBNull.Value 가능성을 고려하고 Convert.ToInt32 등을 사용하여 안전하게 int 타입으로 변환해야 합니다. try-catch 블록으로 예외 처리하는 것이 좋습니다.
e.HighPriority = true;는 다른 기본 스타일이나 조건부 서식보다 이 스타일을 우선 적용하도록 합니다.
어떤 방법을 선택해야 할까요?

단순한 조건 비교 (예: 두 컬럼 값 비교)의 경우, 조건부 서식 (방법 1) 이 더 간결하고 DevExpress에서 권장하는 방식입니다.