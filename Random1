알겠습니다. COM 포트 목록이 제대로 표시되지 않거나 새로 고침이 제대로 작동하지 않는 문제를 수정하겠습니다. 해당 문제를 해결하기 위해 COM 포트 목록 갱신, 리프레시 버튼, 그리고 관련된 모든 요소가 올바르게 동작하도록 수정하겠습니다.

1. MainWindow.xaml
먼저, COM 포트 리프레시 기능을 추가합니다. 리프레시 버튼을 추가하고, 관련된 이벤트 핸들러를 설정합니다.

xml
코드 복사
<Window x:Class="ScanValueTrans.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:ScanValueTrans"
        Title="ScanValueTrans" Height="650" Width="1020">
    <Grid>
        <!-- IP 주소 및 포트 설정 -->
        <TextBlock Text="IP Address:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <TextBlock Name="IpAddressTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="100,10,0,0" FontWeight="Bold"/>

        <TextBlock Text="Port:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="250,10,0,0"/>
        <ComboBox Name="PortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="300,10,0,0" SelectionChanged="PortComboBox_SelectionChanged"/>
        
        <!-- 리프레시 버튼 추가 -->
        <Button Content="Refresh COM Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="420,10,0,0" Click="RefreshPorts_Click"/>

        <!-- QR 코드 표시 -->
        <Image Name="QrCodeImage" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="200" Margin="580,10,0,0"/>

        <!-- 스캐너 포트 설정 -->
        <TextBlock Text="스캐너 포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,230,0,0"/>
        <ComboBox Name="ScannerPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="100,230,0,0" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="260,230,0,0" Click="ClearScannerPortSelection_Click" Tag="{Binding ElementName=ScannerPortComboBox}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="300,230,0,0"/>
        <ComboBox Name="ScannerBaudRateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="400,230,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="510,230,0,0"/>
        <ComboBox Name="ScannerParityComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,230,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,230,0,0"/>
        <ComboBox Name="ScannerDataBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,230,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,230,0,0"/>
        <ComboBox Name="ScannerStopBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,230,0,0"/>

        <!-- 보낼 포트 설정 탭 -->
        <TabControl HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="220" Margin="10,270,0,0">
            <!-- 첫 번째 포트 탭 -->
            <TabItem Header="Target Port 1">
                <local:PortConfigControl x:Name="TargetPortConfig1"/>
            </TabItem>
            <!-- 두 번째 포트 탭 -->
            <TabItem Header="Target Port 2">
                <local:PortConfigControl x:Name="TargetPortConfig2"/>
            </TabItem>
            <!-- 세 번째 포트 탭 -->
            <TabItem Header="Target Port 3">
                <local:PortConfigControl x:Name="TargetPortConfig3"/>
            </TabItem>
            <!-- 네 번째 포트 탭 -->
            <TabItem Header="Target Port 4">
                <local:PortConfigControl x:Name="TargetPortConfig4"/>
            </TabItem>
            <!-- 다섯 번째 포트 탭 -->
            <TabItem Header="Target Port 5">
                <local:PortConfigControl x:Name="TargetPortConfig5"/>
            </TabItem>
        </TabControl>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="120" Margin="10,500,0,0"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
이 파일에서는 COM 포트 목록을 갱신하는 RefreshPorts_Click 이벤트 핸들러를 추가하고, 포트 목록을 갱신하는 기능을 구현합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                // 설정 관리 클래스 초기화
                settingsManager = SettingsManager.Instance;

                // IP 주소 가져오기 및 표시
                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                // 포트 선택 콤보박스 초기화
                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                // 포트 및 설정 불러오기
                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                // 스캐너 및 타겟 포트 설정 초기화
                InitializePortSettings();
                LoadLastUsedPorts();

                // 소켓 서버 초기화
                serialPortManager = new SerialPortManager();
                socketServer = SocketServer.Instance;
                socketServer.DataReceived += OnSocketDataReceived;

                // QR 코드 생성
                GenerateQRCode(ipAddress, PortComboBox.SelectedItem.ToString());

                // 포트 목록 갱신
                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (PortComboBox.SelectedItem != null)
                {
                    string selectedPort = PortComboBox.SelectedItem.ToString();
                    settingsManager.SaveSetting("Port", selectedPort);
                    socketServer.Start(int.Parse(selectedPort));

                    // QR 코드 업데이트
                    string ipAddress = GetLocalIPAddress();
                    GenerateQRCode(ipAddress, selectedPort);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                string qrContent = $"{ipAddress}:{port}";
                QRCodeGenerator qrGenerator = new QRCodeGenerator();
                BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                // QR 코드를 이미지로 표시
                QrCodeImage.Source = qrCodeImage;
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                // 스캐너 포트 설정 로드
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }
                else
                {
                    LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }

                // 각 보낼 포트에 대해 설정 로드 및 연결
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                // COM 포트 목록 갱신
                string[] portNames = SerialPort.GetPortNames();

                // 스캐너 포트 콤보박스 갱신
                ScannerPortComboBox.ItemsSource = portNames;

                // 각 타겟 포트 설정 컨트롤 갱신
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
3. PortConfigControl.xaml.cs
PortConfigControl.xaml.cs 파일에 RefreshPortList 메소드를 추가하여, 포트 목록을 갱신할 수 있도록 합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;

namespace ScanValueTrans
{
    public partial class PortConfigControl : UserControl
    {
        public SerialPort TargetPort { get; private set; }

        public PortConfigControl()
        {
            InitializeComponent();
            InitializePortSettings();
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(TargetBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(TargetParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(TargetDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(TargetStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        public void LoadPortSettings(int portIndex)
        {
            try
            {
                SettingsManager settingsManager = SettingsManager.Instance;

                string lastUsedPort = settingsManager.GetSetting($"LastUsedTargetPort{portIndex}");
                string baudRate = settingsManager.GetSetting($"TargetBaudRate{portIndex}");
                string parity = settingsManager.GetSetting($"TargetParity{portIndex}");
                string dataBits = settingsManager.GetSetting($"TargetDataBits{portIndex}");
                string stopBits = settingsManager.GetSetting($"TargetStopBits{portIndex}");

                if (!string.IsNullOrEmpty(lastUsedPort) && SerialPort.GetPortNames().Contains(lastUsedPort))
                {
                    TargetPortComboBox.SelectedItem = lastUsedPort;
                    TargetBaudRateComboBox.SelectedItem = baudRate;
                    TargetParityComboBox.SelectedItem = parity;
                    TargetDataBitsComboBox.SelectedItem = dataBits;
                    TargetStopBitsComboBox.SelectedItem = stopBits;

                    OpenTargetPort(lastUsedPort, baudRate, parity, dataBits, stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenTargetPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (TargetPort != null && TargetPort.IsOpen)
                {
                    TargetPort.Close();
                }

                TargetPort = new SerialPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                TargetPort.Open();
                LogMessage($"타겟 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (TargetPortComboBox.SelectedItem != null)
                {
                    string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                    OpenTargetPort(selectedPort, TargetBaudRateComboBox.SelectedItem.ToString(), TargetParityComboBox.SelectedItem.ToString(), TargetDataBitsComboBox.SelectedItem.ToString(), TargetStopBitsComboBox.SelectedItem.ToString());
                    SavePortSettings();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 변경 중 오류 발생: {ex.Message}");
            }
        }

        private void SavePortSettings()
        {
            try
            {
                SettingsManager settingsManager = SettingsManager.Instance;
                int portIndex = GetPortIndex();

                settingsManager.SaveSetting($"LastUsedTargetPort{portIndex}", TargetPortComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetBaudRate{portIndex}", TargetBaudRateComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetParity{portIndex}", TargetParityComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetDataBits{portIndex}", TargetDataBitsComboBox.SelectedItem.ToString());
                settingsManager.SaveSetting($"TargetStopBits{portIndex}", TargetStopBitsComboBox.SelectedItem.ToString());
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 저장 중 오류 발생: {ex.Message}");
            }
        }

        private int GetPortIndex()
        {
            string controlName = Name.Replace("TargetPortConfig", "");
            return int.Parse(controlName);
        }

        public void RefreshPortList(string[] portNames)
        {
            try
            {
                TargetPortComboBox.ItemsSource = portNames;
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TargetPortComboBox.SelectedItem = null;
                if (TargetPort != null && TargetPort.IsOpen)
                {
                    TargetPort.Close();
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                var mainWindow = Application.Current.MainWindow as MainWindow;
                mainWindow?.LogMessage(message);
            });
        }
    }
}
요약
MainWindow.xaml: COM 포트 리프레시 버튼을 추가했습니다.
MainWindow.xaml.cs: 포트 목록을 갱신하는 RefreshPorts_Click 이벤트 핸들러와 RefreshPorts 메소드를 추가했습니다.
PortConfigControl.xaml.cs: 포트 목록을 갱신할 수 있는 RefreshPortList 메소드를 추가했습니다.
이제 COM 포트 목록이 제대로 표시되며, "Refresh COM Ports" 버튼을 통해 COM 포트 목록을 갱신할 수 있습니다. 수정된 파일의 전체 코드를 제공해 드렸으며, 이 코드를 적용하면 문제를 해결할 수 있을 것입니다. 추가적으로 문제가 발생하거나 질문이 있으시면 언제든지 알려주세요