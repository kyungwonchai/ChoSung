정된 요구사항에 따라, 각 CSV 파일의 왼쪽 첫 번째 열(InspectionTime) 값을 기준으로 데이터베이스 업로드를 판단하도록 코드를 변경했습니다. 데이터베이스에서 마지막으로 업로드된 InspectionTime 값을 가져와 새로 처리해야 할 데이터만 업로드합니다.

다음은 수정된 전체 솔루션입니다.

XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterVisionInspGather.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Router Vision Inspection Gather" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 작업 시작 버튼 -->
        <Button Content="작업 시작" Grid.Row="0" Margin="10" Click="StartButton_Click"/>

        <!-- 상태 메시지를 표시하는 ListBox -->
        <ListBox x:Name="StatusListBox" Grid.Row="1" Margin="10"/>

        <!-- 하단 상태 텍스트 -->
        <TextBlock Text="작업 상태 메시지:" Grid.Row="2" Margin="10" VerticalAlignment="Center"/>
    </Grid>
</Window>
Code-Behind (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    /// <summary>
    /// MainWindow.xaml의 코드 비하인드
    /// 프로그램의 주요 UI와 CSV 처리 시작 작업을 담당합니다.
    /// </summary>
    public partial class MainWindow : Window
    {
        // 마지막 업로드된 InspectionTime 값
        private DateTime _lastUploadedTime;

        public MainWindow()
        {
            InitializeComponent();

            // 프로그램 시작 시 데이터베이스에서 마지막 업로드된 InspectionTime 가져오기
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 업로드된 시간: {_lastUploadedTime}");
        }

        /// <summary>
        /// 데이터베이스에서 마지막 업로드된 InspectionTime 가져오기
        /// </summary>
        /// <returns>마지막 업로드된 InspectionTime</returns>
        private DateTime GetLastUploadedTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    // 결과값이 없을 경우 1년 전 시간 반환
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }

        /// <summary>
        /// 작업 시작 버튼 클릭 이벤트
        /// </summary>
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                StatusListBox.Items.Add("작업 시작 중...");
                await StartProcessingAsync();
                StatusListBox.Items.Add("작업 완료");
            }
            catch (Exception ex)
            {
                StatusListBox.Items.Add($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            var processor = new FileProcessor(_lastUploadedTime);
            var newRows = processor.GetNewRows(@"\\10.22.22.22\Result");

            if (newRows.Any())
            {
                var uploader = new DatabaseUploader();
                await uploader.UploadToDatabaseAsync(newRows);

                StatusListBox.Items.Add($"총 {newRows.Count}개의 데이터가 업로드되었습니다.");
                
                // 마지막 업로드된 시간 갱신
                _lastUploadedTime = GetLastUploadedTimeFromDatabase();
            }
            else
            {
                StatusListBox.Items.Add("처리할 새로운 데이터가 없습니다.");
            }
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastUploadedTime;

        public FileProcessor(DateTime lastUploadedTime)
        {
            _lastUploadedTime = lastUploadedTime;
        }

        /// <summary>
        /// 새로운 데이터 행 가져오기
        /// </summary>
        public List<Dictionary<string, object>> GetNewRows(string rootPath)
        {
            var newRows = new List<Dictionary<string, object>>();
            var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

            foreach (var file in csvFiles)
            {
                using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                {
                    var headers = reader.ReadLine()?.Split(',');
                    if (headers == null) continue;

                    while (!reader.EndOfStream)
                    {
                        var values = reader.ReadLine()?.Split(',');
                        if (values == null || values.Length < headers.Length) continue;

                        // CSV 행 데이터 매핑
                        var row = new Dictionary<string, object>();
                        for (int i = 0; i < headers.Length; i++)
                        {
                            row[headers[i]] = values[i];
                        }

                        // InspectionTime 확인
                        if (DateTime.TryParse(row["InspectionTime"].ToString(), out var inspectionTime))
                        {
                            if (inspectionTime > _lastUploadedTime)
                            {
                                // AlignResult가 N/A인 경우 제외
                                if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                                {
                                    continue;
                                }

                                // IP 정보 추가
                                row["ipname"] = "10.22.22.22";
                                newRows.Add(row);
                            }
                        }
                    }
                }
            }

            return newRows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", DateTime.Parse(row["InspectionTime"].ToString()));
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"].ToString());
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"].ToString());
                        command.Parameters.AddWithValue("@MP1DATA", float.Parse(row["MP1DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP2DATA", float.Parse(row["MP2DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP3DATA", float.Parse(row["MP3DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP4DATA", float.Parse(row["MP4DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"].ToString());
                        command.Parameters.AddWithValue("@ipname", row["ipname"].ToString());

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
MSSQL 테이블 생성
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName) -- 고유 키 설정
);
변경사항 요약
InspectionTime 열 사용: CSV 각 행의 첫 번째 열(InspectionTime)을 기준으로 업로드 여부 판단.
새로운 데이터 필터링: _lastUploadedTime 이후의 데이터만 업로드.
데이터 구조 통합: 각 CSV 파일의 모든 행을 List<Dictionary<string, object>>로 관리.
UI 상태 업데이트: 파일 처리 및 업로드 상태를 ListBox에 실시간 출력.
필요한 경우 데이터베이스 연결 문자열을 수정하여 사용하세요.






나의 말:
ip정보는 한번 처음 실행할때 얻어서 쭉쓰면되는데 이거 어디구현하까 겟아이피어드레스 ...수정해야할것만줘바
ChatGPT의 말:
ChatGPT
IP 정보를 처음 실행 시 한 번만 가져오고 이후에 계속 사용할 수 있도록 수정하려면, IP 주소를 프로그램 시작 시 가져와 저장하고 이후 이를 참조하는 방식으로 구현해야 합니다.

수정해야 할 부분
1. IP 정보를 가져오는 함수 추가
csharp
코드 복사
using System.Net;

public static class NetworkUtils
{
    /// <summary>
    /// 로컬 머신의 IP 주소를 가져옵니다.
    /// </summary>
    public static string GetLocalIPAddress()
    {
        var host = Dns.GetHostEntry(Dns.GetHostName());
        foreach (var ip in host.AddressList)
        {
            if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
            {
                return ip.ToString(); // 첫 번째 IPv4 주소 반환
            }
        }
        throw new Exception("로컬 IP 주소를 찾을 수 없습니다.");
    }
}
2. MainWindow.xaml.cs에서 IP 정보 저장
프로그램 시작 시 한 번 IP 주소를 가져와 저장하고 이후 계속 참조합니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    // IP 정보를 저장하는 변수
    private readonly string _ipAddress;

    public MainWindow()
    {
        InitializeComponent();

        // 프로그램 시작 시 IP 주소를 가져와 저장
        _ipAddress = NetworkUtils.GetLocalIPAddress();
        StatusListBox.Items.Add($"IP 주소 가져옴: {_ipAddress}");

        // 프로그램 시작 시 마지막 업로드된 InspectionTime 가져오기
        _lastUploadedTime = GetLastUploadedTimeFromDatabase();
        StatusListBox.Items.Add($"마지막 업로드된 시간: {_lastUploadedTime}");
    }

    // 파일 처리 시 IP 주소를 추가로 사용
    private async Task StartProcessingAsync()
    {
        var processor = new FileProcessor(_lastUploadedTime, _ipAddress); // IP 전달
        var newRows = processor.GetNewRows(@"\\10.22.22.22\Result");

        if (newRows.Any())
        {
            var uploader = new DatabaseUploader();
            await uploader.UploadToDatabaseAsync(newRows);

            StatusListBox.Items.Add($"총 {newRows.Count}개의 데이터가 업로드되었습니다.");
            
            // 마지막 업로드된 시간 갱신
            _lastUploadedTime = GetLastUploadedTimeFromDatabase();
        }
        else
        {
            StatusListBox.Items.Add("처리할 새로운 데이터가 없습니다.");
        }
    }
}
3. FileProcessor에 IP 전달
IP 주소를 FileProcessor 생성자에서 전달받아 파일 처리 시 사용하도록 수정합니다.

csharp
코드 복사
public class FileProcessor
{
    private readonly DateTime _lastUploadedTime;
    private readonly string _ipAddress;

    public FileProcessor(DateTime lastUploadedTime, string ipAddress)
    {
        _lastUploadedTime = lastUploadedTime;
        _ipAddress = ipAddress;
    }

    public List<Dictionary<string, object>> GetNewRows(string rootPath)
    {
        var newRows = new List<Dictionary<string, object>>();
        var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

        foreach (var file in csvFiles)
        {
            using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
            {
                var headers = reader.ReadLine()?.Split(',');
                if (headers == null) continue;

                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine()?.Split(',');
                    if (values == null || values.Length < headers.Length) continue;

                    var row = new Dictionary<string, object>();
                    for (int i = 0; i < headers.Length; i++)
                    {
                        row[headers[i]] = values[i];
                    }

                    if (DateTime.TryParse(row["InspectionTime"].ToString(), out var inspectionTime))
                    {
                        if (inspectionTime > _lastUploadedTime)
                        {
                            if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                            {
                                continue;
                            }

                            // IP 정보 추가
                            row["ipname"] = _ipAddress;
                            newRows.Add(row);
                        }
                    }
                }
            }
        }

        return newRows;
    }
}
수정된 부분 요약
NetworkUtils.GetLocalIPAddress:

프로그램 시작 시 IP 주소를 한 번만 가져옵니다.
MainWindow.xaml.cs:

NetworkUtils.GetLocalIPAddress를 호출해 IP 주소를 저장하고 이후 참조합니다.
FileProcessor:
