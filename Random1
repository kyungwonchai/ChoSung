TaskModel의 FunctionStatusList에 반환값이 있는 함수를 넣고, 그 함수를 실행하면서 반환된 값을 처리하려고 합니다. 이때 리턴값이 있는 함수를 처리하도록 FunctionStatus와 AddFunction()을 수정해야 합니다.

수정 사항:
FunctionStatus 클래스를 비동기 함수의 리턴 타입을 처리할 수 있도록 수정해야 합니다.
AddFunction()을 리턴값이 있는 함수와 리턴값이 없는 함수를 모두 지원하도록 변경해야 합니다.
리턴값이 있는 함수의 경우, 리턴된 값을 별도로 저장할 수 있어야 합니다.
1. FunctionStatus 클래스 수정
기존 FunctionStatus 클래스
기존의 FunctionStatus는 비동기 함수만을 저장하고, 도형의 상태를 업데이트하는 데 사용되었습니다. 이제 함수가 문자열을 반환할 경우 그 값을 저장할 수 있도록 수정하겠습니다.

수정된 FunctionStatus 클래스
csharp
코드 복사
public class FunctionStatus
{
    public string FunctionName { get; set; }  // 함수 이름
    public Func<Task<string>> TaskWithReturn { get; set; }  // 리턴값이 있는 함수
    public Func<Task> TaskWithoutReturn { get; set; }  // 리턴값이 없는 함수
    public Brush StatusColor { get; set; }  // 도형 색상
    public string ReturnValue { get; set; }  // 리턴된 값 저장

    // 생성자 (리턴값이 있는 함수)
    public FunctionStatus(string functionName, Func<Task<string>> taskWithReturn, Brush initialColor)
    {
        FunctionName = functionName;
        TaskWithReturn = taskWithReturn;
        StatusColor = initialColor;
    }

    // 생성자 (리턴값이 없는 함수)
    public FunctionStatus(string functionName, Func<Task> taskWithoutReturn, Brush initialColor)
    {
        FunctionName = functionName;
        TaskWithoutReturn = taskWithoutReturn;
        StatusColor = initialColor;
    }

    // 상태 색상 업데이트
    public void UpdateStatus(Brush newColor)
    {
        StatusColor = newColor;
    }
}
주요 수정 사항:
TaskWithReturn: 리턴값이 있는 비동기 함수 (Func<Task<string>>)를 저장합니다.
TaskWithoutReturn: 리턴값이 없는 비동기 함수 (Func<Task>)를 저장합니다.
ReturnValue: 함수 실행 후 반환된 문자열을 저장하는 속성입니다.
2. AddFunction() 함수 수정
AddFunction() 함수
리턴값이 있는 함수와 리턴값이 없는 함수를 모두 처리할 수 있도록 AddFunction()을 오버로드합니다.

csharp
코드 복사
public partial class TaskModel
{
    // 리턴값이 있는 함수를 추가
    public void AddFunction(string functionName, Func<Task<string>> taskWithReturn, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, taskWithReturn, initialColor);
        FunctionStatusList.Add(functionStatus);
    }

    // 리턴값이 없는 함수를 추가
    public void AddFunction(string functionName, Func<Task> taskWithoutReturn, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, taskWithoutReturn, initialColor);
        FunctionStatusList.Add(functionStatus);
    }
}
주요 수정 사항:
두 가지 오버로드된 AddFunction() 함수:
하나는 리턴값이 있는 함수 (Func<Task<string>>)를 처리.
다른 하나는 리턴값이 없는 함수 (Func<Task>)를 처리.
3. ExecuteTaskWithColor() 함수 수정
함수 실행 후 리턴값이 있는지 없는지에 따라 다른 처리를 해야 합니다. 이를 반영하여 ExecuteTaskWithColor() 함수를 수정합니다.

csharp
코드 복사
private async Task ExecuteTaskWithColor(int index)
{
    var functionStatus = FunctionStatusList[index];

    Application.Current.Dispatcher.Invoke(() =>
    {
        functionStatus.UpdateStatus(Brushes.SkyBlue);  // 작업 진행 중 색상
    });

    if (functionStatus.TaskWithReturn != null)
    {
        // 리턴값이 있는 함수를 실행
        string returnValue = await functionStatus.TaskWithReturn();
        functionStatus.ReturnValue = returnValue;  // 리턴값 저장
    }
    else if (functionStatus.TaskWithoutReturn != null)
    {
        // 리턴값이 없는 함수를 실행
        await functionStatus.TaskWithoutReturn();
    }

    Application.Current.Dispatcher.Invoke(() =>
    {
        functionStatus.UpdateStatus(Brushes.Green);  // 작업 완료 시 색상
    });
}
주요 수정 사항:
리턴값이 있는 함수를 처리하는 경우, ReturnValue에 리턴된 값을 저장합니다.
리턴값이 없는 함수는 기존 방식대로 처리됩니다.
4. 샘플 코드
이제 샘플 함수와 함께 전체적인 코드 흐름을 보겠습니다.

TaskModel 샘플 코드
csharp
코드 복사
public partial class TaskModel : ViewModelBase
{
    public ObservableCollection<FunctionStatus> FunctionStatusList { get; set; }
    public string Status { get; set; }
    private TaskQueue _taskQueue;

    public TaskModel(TaskQueue taskQueue)
    {
        _taskQueue = taskQueue;
        FunctionStatusList = new ObservableCollection<FunctionStatus>();
        Status = "Pending";

        // 리턴값이 있는 함수 추가
        AddFunction("Task A (Returns string)", ExecuteTaskAWithReturn, Brushes.Gray);

        // 리턴값이 없는 함수 추가
        AddFunction("Task B (No return)", ExecuteTaskBWithoutReturn, Brushes.Gray);
    }

    // 리턴값이 있는 함수 (string을 리턴)
    private async Task<string> ExecuteTaskAWithReturn()
    {
        await Task.Delay(1000);  // 비동기 작업 시뮬레이션
        return "Task A 완료됨";  // 리턴값
    }

    // 리턴값이 없는 함수
    private async Task ExecuteTaskBWithoutReturn()
    {
        await Task.Delay(1000);  // 비동기 작업 시뮬레이션
    }

    // 작업 순차 실행
    public async Task StartTask()
    {
        Status = "Running";
        foreach (var functionStatus in FunctionStatusList)
        {
            await ExecuteTaskWithColor(FunctionStatusList.IndexOf(functionStatus));
        }
        Status = "Completed";
    }

    // 리턴값이 있는 함수와 없는 함수를 처리
    private async Task ExecuteTaskWithColor(int index)
    {
        var functionStatus = FunctionStatusList[index];

        Application.Current.Dispatcher.Invoke(() =>
        {
            functionStatus.UpdateStatus(Brushes.SkyBlue);  // 작업 진행 중 색상
        });

        if (functionStatus.TaskWithReturn != null)
        {
            // 리턴값이 있는 함수를 실행
            string returnValue = await functionStatus.TaskWithReturn();
            functionStatus.ReturnValue = returnValue;  // 리턴값 저장
        }
        else if (functionStatus.TaskWithoutReturn != null)
        {
            // 리턴값이 없는 함수를 실행
            await functionStatus.TaskWithoutReturn();
        }

        Application.Current.Dispatcher.Invoke(() =>
        {
            functionStatus.UpdateStatus(Brushes.Green);  // 작업 완료 시 색상
        });
    }

    // 리턴값이 있는 함수를 추가
    public void AddFunction(string functionName, Func<Task<string>> taskWithReturn, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, taskWithReturn, initialColor);
        FunctionStatusList.Add(functionStatus);
    }

    // 리턴값이 없는 함수를 추가
    public void AddFunction(string functionName, Func<Task> taskWithoutReturn, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, taskWithoutReturn, initialColor);
        FunctionStatusList.Add(functionStatus);
    }
}
5. 동작 흐름 설명
함수 추가:
AddFunction()을 통해 리턴값이 있는 함수(Func<Task<string>>)와 없는 함수(Func<Task>)를 추가합니다.
작업 실행:
StartTask()를 호출하여 FunctionStatusList에 등록된 함수들을 순차적으로 실행합니다.
실행 중:
함수가 실행되면, 도형의 색상이 회색에서 **스카이블루(진행 중)**로 변경됩니다.
리턴값 처리:
리턴값이 있는 함수는 실행 후 반환된 문자열을 ReturnValue에 저장합니다.
작업 완료:
함수가 완료되면, 도형 색상이 **녹색(완료)**으로 변경됩니다.
결론:
이 구조를 통해 리턴값이 있는 함수와 리턴값이 없는 함수를 모두 처리할 수 있습니다. 추가한 함수는 작업 큐에서 순차적으로 실행되며, 실행된 함수의 리턴값은 저