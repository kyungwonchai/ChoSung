아래는 입력값을 넘기면 해당 값을 데이터베이스에서 확인하고, 값이 존재하면 true, 존재하지 않으면 false를 리턴하는 함수를 C#으로 구현한 예제입니다. 또한 이 함수는 입력값을 기반으로 기존 값이 존재하면 ExistAlreadyTable에, 존재하지 않으면 MainTable에 값을 삽입하는 처리까지 수행합니다.

C# 함수 구현
csharp
코드 복사
using System;
using System.Data.SqlClient;

class Program
{
    static void Main(string[] args)
    {
        // 예시: 함수 호출
        string inputValue = "yourInputValue";  // 체크할 문자열 값
        string bbValue = "yourBBValue";        // BB 변수 값

        bool exists = CheckAndInsertValue(inputValue, bbValue);

        if (exists)
        {
            Console.WriteLine("값이 이미 존재합니다.");
            // 추가적인 처리
        }
        else
        {
            Console.WriteLine("값이 존재하지 않아 새로 삽입되었습니다.");
            // 다른 처리
        }
    }

    /// <summary>
    /// 값이 메인 테이블에 존재하는지 확인하고, 존재하면 중복 테이블에 기록,
    /// 존재하지 않으면 메인 테이블에 삽입하는 함수
    /// </summary>
    /// <param name="inputValue">체크할 값</param>
    /// <param name="bbValue">함께 삽입할 BB 값</param>
    /// <returns>기존에 값이 있으면 true, 없으면 false</returns>
    static bool CheckAndInsertValue(string inputValue, string bbValue)
    {
        // 데이터베이스 연결 문자열
        string connectionString = "Server=yourServer;Database=yourDatabase;User Id=yourUsername;Password=yourPassword;";

        // SQL 쿼리: 값이 존재하는지 확인하고, 존재하면 중복 테이블에 삽입, 없으면 메인 테이블에 삽입
        string query = @"
        DECLARE @inputValue NVARCHAR(20) = @inputParam;
        DECLARE @BBValue NVARCHAR(100) = @bbParam;

        IF EXISTS (SELECT 1 FROM MainTable WHERE UniqueValue = @inputValue)
        BEGIN
            INSERT INTO ExistAlreadyTable (DuplicateValue, BBValue)
            VALUES (@inputValue, @BBValue);
            SELECT 1;  -- 값이 존재하면 1 리턴
        END
        ELSE
        BEGIN
            INSERT INTO MainTable (UniqueValue, BBValue)
            VALUES (@inputValue, @BBValue);
            SELECT 0;  -- 값이 없으면 0 리턴
        END";

        // 데이터베이스 연결 및 실행
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            try
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    // 파라미터 추가
                    command.Parameters.AddWithValue("@inputParam", inputValue);
                    command.Parameters.AddWithValue("@bbParam", bbValue);

                    // 쿼리 실행 후 결과 값을 리턴받음
                    object result = command.ExecuteScalar();

                    // 결과가 1이면 값이 이미 존재, 0이면 값이 없어서 삽입
                    return (int)result == 1;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("오류 발생: " + ex.Message);
                return false; // 오류 발생 시 false 리턴 (예외 처리 방식에 따라 변경 가능)
            }
        }
    }
}
설명:
CheckAndInsertValue 함수:

이 함수는 두 개의 파라미터를 받습니다: inputValue (체크할 값)와 bbValue (함께 삽입할 값).
함수는 입력값이 MainTable에 이미 존재하는지 확인한 후, 존재하면 ExistAlreadyTable에 값을 삽입하고 true를 반환합니다.
존재하지 않으면 MainTable에 값을 삽입하고 false를 반환합니다.
ExecuteScalar:

ExecuteScalar는 SQL 쿼리에서 하나의 값을 반환할 때 사용됩니다. 여기서는 1 또는 0을 반환하여 값이 존재하는지 여부를 판별합니다.
파라미터화된 쿼리:

SQL 쿼리 내에서 파라미터를 사용하여 SQL 인젝션 공격을 방지하고 안전하게 데이터를 처리합니다.
반환 값 처리:

true가 반환되면 값이 이미 존재하므로, 이 값을 활용해 추가 처리를 할 수 있습니다.
false가 반환되면 값이 존재하지 않아 새로 삽입되었음을 의미하며, 이에 따라 다른 처리를 할 수 있습니다.
이 방식으로 C#에서 MSSQL2014와의 상호작용을 통해 입력값의 중복 여부를 체크하고, 그에 따른 데이터베이스 처리 및 결과 반환이 가능