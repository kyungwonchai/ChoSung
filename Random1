필요한 파일에 대해 전체 코드를 제공하겠습니다. 각 파일에서 수정해야 할 부분을 포함하여 전체 구현 코드를 드리겠습니다.

1. AddTaskWindow.xaml - 새 작업 추가 창 (전체 코드)
xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.AddTaskWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="작업 추가" Height="300" Width="400">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="100"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- 폴더 경로 입력 -->
        <TextBlock Text="폴더 경로:" VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" Margin="0,5"/>
        <TextBox Name="FolderPathTextBox" VerticalAlignment="Center" Grid.Row="0" Grid.Column="1" Margin="0,5"/>

        <!-- 색상 선택 (ColorEdit) -->
        <TextBlock Text="색상:" VerticalAlignment="Center" Grid.Row="1" Grid.Column="0" Margin="0,5"/>
        <dxe:ColorEdit x:Name="ColorEdit" VerticalAlignment="Center" Grid.Row="1" Grid.Column="1" Margin="0,5"
                       EditValue="{Binding Path=CellColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

        <!-- 담당자 입력 -->
        <TextBlock Text="담당자:" VerticalAlignment="Center" Grid.Row="2" Grid.Column="0" Margin="0,5"/>
        <TextBox Name="AssigneeTextBox" VerticalAlignment="Center" Grid.Row="2" Grid.Column="1" Margin="0,5"/>

        <!-- 버튼 패널 -->
        <StackPanel Grid.Row="3" Grid.ColumnSpan="2" Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,10">
            <Button Content="저장" Width="100" Margin="10,0" Click="SaveButton_Click"/>
            <Button Content="취소" Width="100" Margin="10,0" Click="CancelButton_Click"/>
        </StackPanel>
    </Grid>
</Window>
2. AddTaskWindow.xaml.cs - 새 작업 추가 창 코드비하인드 (전체 코드)
csharp
코드 복사
using System.IO;
using System.Windows;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Views
{
    public partial class AddTaskWindow : Window
    {
        public TaskModel Task { get; private set; }

        // 기본 폴더 경로 설정
        private readonly string _baseFolderPath = @"D:\_KwTaskist";

        public AddTaskWindow()
        {
            InitializeComponent();
            Task = new TaskModel();

            // 기본 폴더가 없으면 생성
            if (!Directory.Exists(_baseFolderPath))
            {
                Directory.CreateDirectory(_baseFolderPath);
            }
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            Task.FolderPath = Path.Combine(_baseFolderPath, FolderPathTextBox.Text);

            // 폴더가 존재하지 않으면 생성
            if (!Directory.Exists(Task.FolderPath))
            {
                Directory.CreateDirectory(Task.FolderPath);
            }

            // ColorEdit의 선택된 색상을 Hex 코드로 저장
            var selectedColor = ColorEdit.EditValue;
            Task.CellColor = selectedColor != null ? selectedColor.ToString() : "#FFFFFF";

            Task.Assignee = AssigneeTextBox.Text;
            DialogResult = true;
            Close();
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
3. MainWindow.xaml - 메인 창 (전체 코드)
xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="SwiftAIMaster" Height="600" Width="1000">
    <Grid>
        <!-- 제목 영역 -->
        <Grid.RowDefinitions>
            <RowDefinition Height="40"/>   <!-- 제목 영역 -->
            <RowDefinition Height="*"/>    <!-- 메인 레이아웃 영역 -->
        </Grid.RowDefinitions>

        <TextBlock Text="작업 관리 시스템" FontSize="20" FontWeight="Bold" 
                   VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0"/>

        <!-- 메인 레이아웃 영역 -->
        <Grid Grid.Row="1">
            <!-- TabControl을 사용하여 작업 관리 탭 구성 -->
            <TabControl>
                <TabItem Header="작업 관리">
                    <Grid>
                        <!-- 좌측: 버튼 영역, 우측: 작업 목록 그리드 -->
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="200"/> <!-- 버튼 영역 -->
                            <ColumnDefinition Width="*"/>   <!-- 작업 목록 영역 -->
                        </Grid.ColumnDefinitions>

                        <!-- 좌측 버튼 패널 -->
                        <StackPanel Grid.Column="0" VerticalAlignment="Top">
                            <Button Content="작업 추가" Width="180" Height="40" 
                                    HorizontalAlignment="Center" Margin="10" 
                                    Click="AddTaskButton_Click"/>
                        </StackPanel>

                        <!-- 우측 작업 목록 그리드 -->
                        <dxg:GridControl Name="taskGrid" Grid.Column="1" ItemsSource="{Binding TaskManager.Tasks}" 
                                         AutoGenerateColumns="False" MouseDown="taskGrid_MouseDown" 
                                         MouseMove="taskGrid_MouseMove" MouseUp="taskGrid_MouseUp">
                            <dxg:GridControl.View>
                                <dxg:TableView AllowPerPixelScrolling="True" />
                            </dxg:GridControl.View>
                            <dxg:GridControl.Columns>
                                <dxg:GridColumn FieldName="Priority" Header="순위" />
                                <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
                                <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
                                <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
                                <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
                                <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
                                    <dxg:GridColumn.CellTemplate>
                                        <DataTemplate>
                                            <Border Background="{Binding CellColor}" />
                                        </DataTemplate>
                                    </dxg:GridColumn.CellTemplate>
                                </dxg:GridColumn>
                                <dxg:GridColumn FieldName="Assignee" Header="담당자" />
                                <dxg:GridColumn FieldName="IsCompleted" Header="완료 여부" />

                                <!-- 폴더 열기 버튼 컬럼 추가 -->
                                <dxg:GridColumn Header="폴더 열기">
                                    <dxg:GridColumn.CellTemplate>
                                        <DataTemplate>
                                            <Button Content="폴더 열기" Command="{Binding DataContext.OpenFolderCommand, RelativeSource={RelativeSource AncestorType=dxg:GridControl}}" CommandParameter="{Binding FolderPath}" />
                                        </DataTemplate>
                                    </dxg:GridColumn.CellTemplate>
                                </dxg:GridColumn>
                            </dxg:GridControl.Columns>
                        </dxg:GridControl>
                    </Grid>
                </TabItem>
            </TabControl>
        </Grid>
    </Grid>
</Window>
4. MainWindow.xaml.cs - 메인 창 코드비하인드 (전체 코드)
csharp
코드 복사
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Input;
using SwiftAIMaster.ViewModels;

namespace SwiftAIMaster.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => (MainViewModel)DataContext;

        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }

        // 작업 추가 버튼 클릭 이벤트
        private void AddTaskButton_Click(object sender, RoutedEventArgs e)
        {
            var addTaskWindow = new AddTaskWindow();
            if (addTaskWindow.ShowDialog() == true)
            {
                var newTask = addTaskWindow.Task;
                ViewModel.AddNewTask(newTask.FolderPath, newTask.CellColor, newTask.Assignee);
            }
        }

        // 폴더 열기 명령 설정
        public ICommand OpenFolderCommand => new RelayCommand<string>(OpenFolder);

        // 폴더 열기 함수
        private void OpenFolder(string folderPath)
        {
            if (Directory.Exists(folderPath))
            {
                Process.Start("explorer.exe", folderPath);
            }
            else
            {
                MessageBox.Show("폴더가 존재하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
이제 각 파일이 전체 코드로 수정되었으며, 필요한 기능들이 포함되