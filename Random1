{% extends "base.html" %}

{% block title %}{{ '게시글 수정' if post else '새 게시글 작성' }} - 나의 게시판{% endblock %}

{% block head_extra %}
    {# TinyMCE 로컬 경로 #}
    <script src="{{ url_for('static', filename='tinymce/tinymce.min.js') }}" referrerpolicy="origin"></script>
{% endblock %}

{% block content %}
<div class="container-fluid mt-4"> {# 또는 'container mt-4' 또는 사용자 정의 클래스 #}
    <h2>{{ '게시글 수정' if post else '새 게시글 작성' }}</h2>
    <form method="POST" action="{{ url_for('edit_post', slug=post.slug) if post else url_for('new_post') }}">
        <div class="form-group">
            <label for="title">제목</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ title or (post.title if post else '') }}" required>
        </div>

        <div class="form-group">
            <label for="category_id">카테고리</label>
            <select class="form-control" id="category_id" name="category_id">
                <option value="">-- 카테고리 선택 안 함 --</option>
                {% for category_item in categories %}
                    <option value="{{ category_item.id }}" {% if selected_category_id and category_item.id == selected_category_id|int %}selected{% endif %}>
                        {{ category_item.name }}
                    </option>
                {% endfor %}
            </select>
        </div>

        <div class="form-group">
            <label for="content">내용</label>
            <textarea class="form-control" id="content" name="content" rows="15">{{ content or (post.content if post else '') }}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">저장</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">취소</a>
    </form>
</div>
{% endblock %}

{% block scripts_extra %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    tinymce.init({
        selector: 'textarea#content',
        plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons accordion',
        menubar: 'file edit view insert format tools table help',
        toolbar: 'undo redo | accordion accordionremove | blocks fontfamily fontsize | bold italic underline strikethrough | align numlist bullist | link image media table | lineheight outdent indent| forecolor backcolor removeformat | charmap emoticons | code fullscreen preview | save print | pagebreak anchor codesample | ltr rtl',
        height: 600,
        language: 'ko_KR', // 한국어팩 (static/tinymce/langs/ko_KR.js) 필요
        
        // 이미지 업로드 관련 설정
        automatic_uploads: true, // 이미지 선택/붙여넣기 시 자동 업로드
        images_upload_url: "{{ url_for('upload_image') }}", // Flask 업로드 엔드포인트
        file_picker_types: 'image', // 파일 선택기를 이미지에만 사용
        paste_data_images: true, // 붙여넣기 시 이미지 자동 업로드

        images_upload_handler: function (blobInfo, progress) {
            return new Promise((resolve, reject) => {
                const image_size_mb = blobInfo.blob().size / 1024 / 1024; // 파일 크기를 MB 단위로 변환
                // 클라이언트 측에서 먼저 검사할 최대 파일 크기 (예: 10MB)
                // 이 값은 서버의 MAX_CONTENT_LENGTH 보다는 작거나 같은 것이 일반적입니다.
                // 지금은 5MB 초과 시 413 오류가 발생하는 상황이므로, 테스트를 위해 4MB 정도로 설정해 볼 수 있습니다.
                // 실제 운영 시에는 서버 제한과 맞추거나 약간 작게 설정합니다.
                const client_max_size_mb = 10; // 예시: 10MB (서버는 5GB로 설정되어 있지만, 클라이언트에서 먼저 거름)

                if (image_size_mb > client_max_size_mb) {
                    reject({ 
                        message: '이미지 용량이 너무 큽니다 (' + image_size_mb.toFixed(1) + 'MB). 클라이언트 최대 허용 용량은 ' + client_max_size_mb + 'MB 입니다.', 
                        remove: true // 편집기에서 이미지 미리보기 제거
                    });
                    return;
                }

                const xhr = new XMLHttpRequest();
                xhr.withCredentials = false;
                xhr.open('POST', "{{ url_for('upload_image') }}"); // images_upload_url과 동일

                xhr.upload.onprogress = (e) => {
                    if (e.lengthComputable) {
                        progress(e.loaded / e.total * 100);
                    }
                };
                
                xhr.onload = () => {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        // 서버에서 오류 응답 (예: 400, 413, 500 등)
                        let errorMessage = 'HTTP Error: ' + xhr.status;
                        let removeImage = true;
                        try {
                            // 서버가 JSON 형식의 오류 메시지를 보냈는지 확인
                            const jsonError = JSON.parse(xhr.responseText);
                            if (jsonError && jsonError.error && jsonError.error.message) {
                                errorMessage = jsonError.error.message;
                            }
                        } catch (e) {
                            // JSON 파싱 실패 (서버가 HTML 오류 페이지 등을 반환한 경우)
                            if (xhr.status === 413) { // 명시적으로 413 오류 처리
                                 errorMessage = '파일이 너무 큽니다. 서버에서 요청을 거부했습니다 (HTTP 413).';
                            } else if (xhr.responseText && xhr.responseText.length < 300) { // 짧은 텍스트 오류 메시지일 수 있음
                                errorMessage = `서버 오류: ${xhr.status} - ${xhr.responseText.substring(0,100)}`;
                            } else {
                                errorMessage = `서버에서 예상치 못한 응답을 받았습니다 (HTTP ${xhr.status}).`;
                            }
                        }
                        reject({ message: errorMessage, remove: removeImage });
                        return;
                    }

                    // 성공적인 응답 (HTTP 200-299)
                    try {
                        const json = JSON.parse(xhr.responseText);
                        if (!json || typeof json.location != 'string') {
                            reject({ message: '서버로부터 잘못된 JSON 응답을 받았습니다: ' + xhr.responseText, remove: true });
                            return;
                        }
                        resolve(json.location); // 성공 시 이미지 경로 반환
                    } catch (e) {
                        reject({ message: '서버 응답 처리 중 오류 발생 (JSON 파싱 실패): ' + e.message + ' 응답내용: ' + xhr.responseText.substring(0,100), remove: true });
                    }
                };
                
                xhr.onerror = () => {
                    // 네트워크 수준의 오류 (서버에 도달하지 못함 등)
                    reject({ message: '네트워크 오류로 이미지 업로드에 실패했습니다. 서버 연결을 확인해주세요.', remove: true });
                };
                
                const formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.filename());
                
                xhr.send(formData);
            });
        },

        // 기타 TinyMCE 설정들
        autosave_ask_before_unload: true,
        autosave_interval: '30s',
        autosave_prefix: '{path}{query}-{id}-',
        autosave_restore_when_empty: false,
        autosave_retention: '2m',
        image_advtab: true,
        image_caption: true,
        quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
        noneditable_class: 'mceNonEditable',
        toolbar_mode: 'sliding',
        contextmenu: 'link image table',
        content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px } img { max-width: 100%; height: auto; }'
    });
});
</script>
{% endblock %}