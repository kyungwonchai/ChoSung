사항 정리
cursor.fetchall()로 데이터 가져오기 (MSSQL2014)

ACT2_1 ~ ACT2_8 값을 MC1 ~ MC8으로 컬럼 이름을 변경해서 표시하기

각 행마다 최대값에 노란색 스타일 적용하기

간단하게 pandas DataFrame을 사용하여 처리하기

Streamlit에서 st.write()로 표시하기 (깔끔하게)

✅ 수정된 Streamlit 코드
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 및 스타일 적용 함수
def create_dataframe(rows):
    # 컬럼 이름 설정 (MC1 ~ MC8으로 변경)
    columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    # DataFrame 생성
    df = pd.DataFrame(rows, columns=columns)

    # MC1 ~ MC8 열 이름
    mc_columns = [f"MC{i}" for i in range(1, 9)]

    # 각 행의 최대값을 노란색으로 강조하는 스타일 함수
    def highlight_max(row):
        max_value = row[mc_columns].max()
        return ['background-color: yellow' if v == max_value else '' for v in row]

    # 스타일 적용
    styled_df = df.style.apply(highlight_max, subset=mc_columns, axis=1)
    return styled_df

# Streamlit 앱 구성
def main():
    st.set_page_config(layout="wide")
    st.title("MC1 ~ MC8 Data Table with Styling")

    # 데이터 가져오기
    rows = fetch_main_data()

    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        # DataFrame 생성 및 스타일 적용
        styled_df = create_dataframe(rows)
        
        # Streamlit 표시 (Styled DataFrame)
        st.write(styled_df)

if __name__ == "__main__":
    main()
✅ 코드 설명
데이터베이스 연결 및 데이터 가져오기

python
코드 복사
def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")
    rows = cursor.fetchall()
    conn.close()
    return rows
fetchall()로 데이터를 가져옴.

반환된 데이터는 rows로 저장됨.

컬럼 이름 변경 및 DataFrame 생성

python
코드 복사
columns = [
    "group1", "line1", "model1", "type1", "ecn1", "edition1",
    "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
]
df = pd.DataFrame(rows, columns=columns)
기존의 ACT2_1 ~ ACT2_8를 MC1 ~ MC8 으로 변경하여 사용.

pandas.DataFrame()으로 데이터를 저장함.

스타일 적용 함수 (highlight_max)

python
코드 복사
def highlight_max(row):
    max_value = row[mc_columns].max()
    return ['background-color: yellow' if v == max_value else '' for v in row]
MC1 ~ MC8 값 중 가장 큰 값을 노란색으로 표시.

style.apply()로 행별로 스타일을 적용함.

Streamlit 표시

python
코드 복사
st.write(styled_df)
st.write()로 스타일링된 DataFrame을 Streamlit 화면에 표시.

📌 설치 필요 라이브러리
bash
코드 복사
pip install streamlit pymssql pandas
📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
💡 결과
데이터가 표로 표시되며, MC1 ~ MC8 컬럼에서 각 행마다 가장 큰 값이 노란색으로 강조됨.

ACT2_1 ~ ACT2_8 데이터는 자동으로 MC1 ~ MC8 으로 변경됨.