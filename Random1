은 단계로 구현할 수 있습니다.

프로그램 실행 시 클립보드 내용 가져오기
클립보드 내용을 TextBox에 넣기
페이지 도킹 처리
중복 실행 시 기존 프로그램 활성화 및 새 탭 추가
이제 코드 예제를 통해 각 단계를 구현해보겠습니다. 여기서는 DevExpress 22.2와 WPF를 사용하여 이를 구현하는 방법을 설명합니다.

1. 프로그램 실행 시 클립보드 내용 가져오기
csharp
코드 복사
using System.Windows;
using DevExpress.Xpf.Core;

namespace ClipboardApp
{
    public partial class MainWindow : DXWindow
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadClipboardContent();
        }

        private void LoadClipboardContent()
        {
            if (Clipboard.ContainsText())
            {
                string clipboardText = Clipboard.GetText();
                myTextBox.Text = clipboardText;
            }
        }
    }
}
2. 클립보드 내용을 TextBox에 넣기
XAML 파일에서 TextBox를 정의합니다.

xml
코드 복사
<Window x:Class="ClipboardApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Clipboard App" Height="350" Width="525">
    <Grid>
        <dx:DockLayoutManager x:Name="dockLayoutManager">
            <dx:LayoutGroup>
                <dx:LayoutPanel x:Name="myPanel" Caption="My Panel">
                    <TextBox x:Name="myTextBox"/>
                </dx:LayoutPanel>
            </dx:LayoutGroup>
        </dx:DockLayoutManager>
    </Grid>
</Window>
3. 페이지 도킹 처리
도킹 처리를 위해 DevExpress의 DockLayoutManager를 사용합니다.

csharp
코드 복사
private void DockNewTab(string content)
{
    var newPanel = new LayoutPanel { Caption = "New Tab" };
    var newTextBox = new TextBox { Text = content };
    newPanel.Content = newTextBox;

    dockLayoutManager.DockController.Dock(newPanel, dockLayoutManager.LayoutRoot, DevExpress.Xpf.Layout.Core.DockType.Fill);
}
4. 중복 실행 시 기존 프로그램 활성화 및 새 탭 추가
중복 실행 방지를 위해 Mutex를 사용하고, 기존 인스턴스를 활성화하는 방법을 사용합니다.

csharp
코드 복사
using System;
using System.Threading;
using System.Windows;

namespace ClipboardApp
{
    public partial class App : Application
    {
        private static Mutex mutex = null;

        protected override void OnStartup(StartupEventArgs e)
        {
            const string appName = "ClipboardApp";
            bool createdNew;

            mutex = new Mutex(true, appName, out createdNew);

            if (!createdNew)
            {
                // 이미 실행 중인 경우 기존 인스턴스 활성화 및 새 탭 추가
                Application.Current.Shutdown();
                MessageBox.Show("Application is already running!");
                return;
            }

            base.OnStartup(e);
        }
    }
}
기존 인스턴스 활성화 및 새 탭 추가 코드
csharp
코드 복사
using System.Runtime.InteropServices;

namespace ClipboardApp
{
    public partial class MainWindow : DXWindow
    {
        // 외부 DLL 호출
        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        [DllImport("user32.dll")]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        public MainWindow()
        {
            InitializeComponent();
            LoadClipboardContent();
        }

        private void LoadClipboardContent()
        {
            if (Clipboard.ContainsText())
            {
                string clipboardText = Clipboard.GetText();
                myTextBox.Text = clipboardText;
            }
        }

        public static void ActivateExistingInstance()
        {
            IntPtr hWnd = FindWindow(null, "Clipboard App");
            if (hWnd != IntPtr.Zero)
            {
                SetForegroundWindow(hWnd);
                ((MainWindow)Application.Current.MainWindow).DockNewTab(Clipboard.GetText());
            }
        }
    }
}
위의 코드는 프로그램이 실행될 때 클립보드 내용을 텍스트 박스에 넣고, 기존 인스턴스가 있는 경우 이를 활성화하고 새 탭을 추가하는 작업을 수행합니다. DevExpress의 도킹 기능을 사용하여 새로운 탭을 추가할 수 있도록 했습니다. 이 코드를 기반으로 추가적인 요구 사항에 맞게 더 발전시킬 수 있습니다.






