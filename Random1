Windows 11의 가상환경 (venv)에서 CUDA 설정 및 GPU 인식 문제 해결
현재 C:\vkw\Scripts에서 가상환경 (vkw)을 활성화한 상태에서 PyTorch가 GPU를 인식하지 않는 문제를 해결하는 방법을 단계별로 설명하겠습니다.

1. 현재 상태 확인
먼저, 가상환경에서 GPU와 CUDA가 정상적으로 인식되는지 확인해야 합니다.

✅ (1) 가상환경이 활성화되어 있는지 확인
가상환경이 제대로 활성화되었는지 먼저 확인하세요.

bash
코드 복사
where python
출력 결과가 C:\vkw\Scripts\python.exe라면, 현재 가상환경이 활성화된 상태입니다.
만약 C:\Python39\python.exe 같은 시스템 기본 경로가 나오면 가상환경이 비활성화된 상태이므로 다시 활성화하세요.

bash
코드 복사
C:\vkw\Scripts\activate
✅ (2) PyTorch가 GPU를 인식하는지 확인
python
코드 복사
import torch
print("CUDA 사용 가능 여부:", torch.cuda.is_available())
print("CUDA 버전:", torch.version.cuda)
print("GPU 이름:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "GPU 없음")
✅ 출력에 True가 나오면 정상적으로 GPU가 인식된 상태.
❌ 출력에 False, None, GPU 없음이 나오면 아래 해결 방법을 따르세요.
2. PyTorch가 CPU 버전인지 확인 후, GPU 버전 설치
PyTorch가 CPU 버전으로 설치되었을 가능성이 큽니다.

✅ (1) 현재 설치된 PyTorch 확인
bash
코드 복사
pip show torch
출력에서 Requires: cudatoolkit 같은 정보가 없다면 CPU 전용 버전이므로, GPU 버전 PyTorch를 다시 설치해야 합니다.

✅ (2) PyTorch GPU 버전 재설치
bash
코드 복사
pip uninstall torch torchvision torchaudio -y
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
설치 후 다시 PyTorch GPU 인식 여부 확인:

python
코드 복사
import torch
print("CUDA 사용 가능 여부:", torch.cuda.is_available())
✅ True가 나오면 GPU 인식 성공!

3. 가상환경이 CUDA 라이브러리를 찾지 못하는 경우
PyTorch가 GPU를 인식하지 못하는 또 다른 이유는 가상환경에서 CUDA 라이브러리를 찾지 못해서입니다.

✅ (1) CUDA 설치 경로 확인
bash
코드 복사
where nvcc
출력 예시:

makefile
코드 복사
C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin\nvcc.exe
이 경로가 없으면 CUDA가 제대로 설치되지 않은 것입니다.
CUDA가 설치되어 있다면, 해당 경로를 가상환경에서 사용할 수 있도록 환경 변수를 추가해야 합니다.

✅ (2) 가상환경에 CUDA 경로 추가
가상환경을 활성화한 상태에서 환경 변수를 직접 추가해야 합니다.

가상환경의 activate.bat 파일을 편집:
bash
코드 복사
notepad C:\vkw\Scripts\activate.bat
아래 줄을 파일 맨 아래에 추가하고 저장:
bash
코드 복사
set PATH=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1\bin;%PATH%
set CUDA_HOME=C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v12.1
가상환경을 다시 활성화:
bash
코드 복사
C:\vkw\Scripts\activate
4. 가상환경에서 CUDA 인식 여부 확인
환경 변수를 추가한 후 다시 확인합니다.

bash
코드 복사
python -c "import torch; print(torch.cuda.is_available())"
✅ True가 나오면 해결 완료!
❌ False라면 다시 pip install torch 실행 후 확인.

5. 최종 확인
이제 GPU와 PyTorch가 정상적으로 작동하는지 확인하세요.

python
코드 복사
import torch
print("CUDA 사용 가능 여부:", torch.cuda.is_available())
print("CUDA 버전:", torch.version.cuda)
print("GPU 이름:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "GPU 없음")
출력 예시 (정상일 때):

yaml
코드 복사
CUDA 사용 가능 여부: True
CUDA 버전: 12.1
GPU 이름: NVIDIA GeForce RTX 3060
🚀 최종 정리
가상환경을 활성화: C:\vkw\Scripts\activate
PyTorch GPU 버전 설치:
bash
코드 복사
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
CUDA 경로를 환경 변수에 추가 (activate.bat 편집)
가상환경을 다시 활성화하고 확인:
python
코드 복사
import torch
print(torch.cuda.is_available())
True가 나오면 정상적으로 GPU가 인식된 것!