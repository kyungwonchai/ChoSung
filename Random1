#include <iostream>
#include <vector>
#include <tuple>
#include <map>
#include <unordered_map>
#include <unordered_set>
#include <set>
#include <string>
#include <algorithm>
#include <numeric>
#include <cmath>
#include <queue>
#include <functional>
#include <cctype>
#include <sstream>

using namespace std;

// mutable 객체 전달
// C++에서는 포인터나 레퍼런스를 통해 mutable 객체를 전달할 수 있습니다.

// 특정 원소 개수 세기
// vector, array, string: count
// map: if문을 사용하여 조건부로 갱신
vector<int> v = {1, 2, 3, 4, 1, 1, 1};
int count1 = count(v.begin(), v.end(), 1); // 특정 원소 개수 세기

map<int, int> m = {{1, 2}, {2, 3}, {3, 4}};
int count_if_m = count_if(m.begin(), m.end(), [](const pair<int, int>& p) { return p.second > 2; });

// 빠른 합
// sum: accumulate
vector<int> vec = {1, 2, 3, 4, 5};
int total = accumulate(vec.begin(), vec.end(), 0);

// set
// 중복 없음, 변경 가능, 순서 없음, 검색 빠름
set<int> s = {1, 2, 3, 4, 5};
s.insert(6); // 추가
s.erase(3); // 삭제

// 좌표 튜플 변환
pair<int, int> coords = {1, 2};
set<pair<int, int>> s_coords;
s_coords.insert(coords);

// 교집합
set<int> a = {1, 2, 3, 4};
set<int> b = {3, 4, 5, 6};
vector<int> result;
set_intersection(a.begin(), a.end(), b.begin(), b.end(), back_inserter(result));

// map 초기화
map<int, vector<int>> map_init;
map_init[1].push_back(2);

// lambda
auto multiply = [](int x) { return x * 2; };
int result_multiply = multiply(3);

// filter
vector<int> numbers = {1, 2, 3, 4, 5, 6};
vector<int> even_numbers;
copy_if(numbers.begin(), numbers.end(), back_inserter(even_numbers), [](int x) { return x % 2 == 0; });

// 문자열 관련 작업
string str = "Hello, world!";
size_t pos = str.find("world");
if (pos != string::npos) {
    cout << "Found at: " << pos << endl;
}

// lambda로 map 연산
vector<int> vec_numbers = {1, 2, 3, 4, 5};
vector<int> results;
transform(vec_numbers.begin(), vec_numbers.end(), back_inserter(results), [](int x) { return x * 2 - 1; });

// BFS / DFS
// 방문 확인 방식 (Visited Check Methods)
vector<vector<bool>> visited(10, vector<bool>(10, false));
if (!visited[1][1]) {
    visited[1][1] = true;
}

// 큐에 추가하는 자료구조
queue<tuple<int, int, int>> q;
q.push(make_tuple(1, 2, 3));

int main() {
    // mutable 객체 예시
    vector<int> v = {1, 2, 3, 4, 5};
    auto sum = [](vector<int>& vec) {
        return accumulate(vec.begin(), vec.end(), 0);
    };
    cout << "Sum: " << sum(v) << endl;

    // set 예시
    set<int> s = {1, 2, 3, 4, 5};
    s.insert(6);
    s.erase(3);
    for (int val : s) {
        cout << val << " ";
    }
    cout << endl;

    // 교집합 예시
    set<int> a = {1, 2, 3, 4};
    set<int> b = {3, 4, 5, 6};
    vector<int> result;
    set_intersection(a.begin(), a.end(), b.begin(), b.end(), back_inserter(result));
    for (int val : result) {
        cout << val << " ";
    }
    cout << endl;

    // lambda 예시
    auto multiply = [](int x) { return x * 2; };
    cout << "Multiply: " << multiply(3) << endl;

    // filter 예시
    vector<int> numbers = {1, 2, 3, 4, 5, 6};
    vector<int> even_numbers;
    copy_if(numbers.begin(), numbers.end(), back_inserter(even_numbers), [](int x) { return x % 2 == 0; });
    for (int val : even_numbers) {
        cout << val << " ";
    }
    cout << endl;

    // 문자열 예시
    string s = "Hello, world!";
    string::size_type pos = s.find("world");
    if (pos != string::npos) {
        cout << "Found at: " << pos << endl;
    }

    return 0;
}
