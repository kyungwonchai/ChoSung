겠습니다. XAML 파일에 정규식 입력란을 추가하고, 해당 정규식을 저장하고 적용하는 기능을 구현하겠습니다. 이후, FileCleaner 클래스에서 이 저장된 정규식을 참조하도록 하겠습니다.

1. MainWindow.xaml
정규식 입력란과 적용 버튼 추가
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD File Cleaner" Height="350" Width="525">
    <Grid>
        <TextBox x:Name="txtFolderPath" HorizontalAlignment="Left" Height="23" Margin="10,10,0,0" VerticalAlignment="Top" Width="400" IsReadOnly="True"/>
        <Button x:Name="btnSelectFolder" Content="Select Folder" HorizontalAlignment="Left" Margin="420,10,0,0" VerticalAlignment="Top" Width="75" Click="btnSelectFolder_Click"/>
        
        <TextBox x:Name="txtRegexPattern" HorizontalAlignment="Left" Height="23" Margin="10,50,0,0" VerticalAlignment="Top" Width="400"/>
        <Button x:Name="btnApplyRegex" Content="Apply Regex" HorizontalAlignment="Left" Margin="420,50,0,0" VerticalAlignment="Top" Width="75" Click="btnApplyRegex_Click"/>
        
        <Button x:Name="btnStart" Content="Start" HorizontalAlignment="Left" Margin="10,90,0,0" VerticalAlignment="Top" Width="75" Click="btnStart_Click"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
폴더 경로와 정규식을 저장하고 참조하는 로직 추가
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private FileCleaner _fileCleaner;
        private string _folderPath;
        private string _regexPattern;
        private const string ConfigFilePath = "config.txt";

        public MainWindow()
        {
            InitializeComponent();
            _fileCleaner = new FileCleaner();
            LoadConfig();
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog();
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _folderPath = dialog.SelectedPath;
                txtFolderPath.Text = _folderPath;
                SaveConfig();
            }
        }

        private void btnApplyRegex_Click(object sender, RoutedEventArgs e)
        {
            _regexPattern = txtRegexPattern.Text;
            SaveConfig();
            MessageBox.Show("정규식이 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrWhiteSpace(_regexPattern) || string.IsNullOrWhiteSpace(_folderPath))
            {
                MessageBox.Show("폴더와 정규식을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            StartFileDeletion();
        }

        private void StartFileDeletion()
        {
            try
            {
                var regex = new Regex(_regexPattern);
                _fileCleaner.DeleteFiles(_folderPath, regex);
                MessageBox.Show("파일 삭제 완료.", "완료", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("파일 삭제 중 오류 발생: " + ex.Message, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SaveConfig()
        {
            var lines = new List<string>
            {
                _folderPath,
                _regexPattern
            };
            File.WriteAllLines(ConfigFilePath, lines);
        }

        private void LoadConfig()
        {
            if (File.Exists(ConfigFilePath))
            {
                var lines = File.ReadAllLines(ConfigFilePath);
                if (lines.Length >= 2)
                {
                    _folderPath = lines[0];
                    _regexPattern = lines[1];
                    txtFolderPath.Text = _folderPath;
                    txtRegexPattern.Text = _regexPattern;
                }
            }
        }
    }
}
3. FileCleaner.cs
정규식과 일치하는 파일을 삭제하도록 수정
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Text.RegularExpressions;

namespace SMDFileCleaner
{
    public class FileCleaner
    {
        public void DeleteFiles(string folderPath, Regex regex)
        {
            var files = GetFiles(folderPath);

            foreach (var file in files)
            {
                if (regex.IsMatch(file.FullName))
                {
                    try
                    {
                        file.Delete();
                        LogDeletionActivity($"파일 삭제됨: {file.FullName}");
                    }
                    catch (Exception ex)
                    {
                        LogError("Failed to delete file: " + ex.Message);
                    }
                }
            }
        }

        private List<FileInfo> GetFiles(string folderPath)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles("*", SearchOption.AllDirectories));
            }
            catch (UnauthorizedAccessException ex)
            {
                LogError("폴더 접근 거부됨: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        private void LogDeletionActivity(string message)
        {
            // 삭제 로그를 남기는 로직
        }

        private void LogError(string message)
        {
            // 에러 로그를 남기는 로직
        }
    }
}
이제 프로그램은 다음과 같이 동작합니다:

사용자가 폴더와 정규식을 입력하고 적용 버튼을 눌러 설정을 저장합니다.
프로그램 시작 시 저장된 폴더와 정규식을 불러옵니다.
시작 버튼을 누르면 저장된 정규식을 사용하여 지정된 폴더 내의 파일을 삭제합니다.
위 코드에서 정규식을 저장하고 불러오는 기능을 추가하여, 파일 삭제 시 저장된 정규식을 참조하도록 수정하였습