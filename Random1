PF에서 특정 TextEdit 컨트롤이 포커스를 절대 잃지 않도록 만들려면 다음 방법을 적용할 수 있습니다.
어떤 다른 프로세스나 윈도우가 떠도 강제로 TextEdit에 포커스를 유지하게 만듭니다.

1. 포커스 강제 유지
포커스를 절대 다른 곳에 빼앗기지 않게 하려면 LostFocus 이벤트에서 다시 Focus()를 주면 됩니다.

csharp
코드 복사
private void MyTextEdit_LostFocus(object sender, RoutedEventArgs e)
{
    Dispatcher.BeginInvoke((Action)(() =>
    {
        MyTextEdit.Focus();
        Keyboard.Focus(MyTextEdit); // 키보드 입력도 유지
    }), System.Windows.Threading.DispatcherPriority.Render);
}
Dispatcher.BeginInvoke를 사용하면 비동기적으로 실행되면서 강제로 다시 포커스를 가져옵니다.

2. 다른 창이 떠도 자동으로 다시 가져오기
알림 창이나 팝업이 떠도 포커스를 빼앗기지 않으려면, Window.Activated 이벤트에서 Focus()를 재설정하면 됩니다.

csharp
코드 복사
private void Window_Activated(object sender, EventArgs e)
{
    Dispatcher.BeginInvoke((Action)(() =>
    {
        MyTextEdit.Focus();
        Keyboard.Focus(MyTextEdit);
    }), System.Windows.Threading.DispatcherPriority.Render);
}
이렇게 하면 다른 창이 떴다가 다시 돌아와도 항상 TextEdit가 활성화됩니다.

3. 전역적으로 포커스 방지
사용자가 일부러 클릭하지 않는 이상 다른 프로세스에서도 포커스를 뺏기지 않게 하려면, 윈도우 메시지를 가로채는 Low-Level Hook을 사용해야 합니다.

csharp
코드 복사
[DllImport("user32.dll")]
private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);
[DllImport("user32.dll")]
private static extern bool UnhookWindowsHookEx(IntPtr hhk);
[DllImport("user32.dll")]
private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);
[DllImport("kernel32.dll")]
private static extern IntPtr GetModuleHandle(string lpModuleName);

private const int WH_CBT = 5;
private const int HCBT_ACTIVATE = 5;
private static IntPtr _hookID = IntPtr.Zero;
private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
{
    if (nCode == HCBT_ACTIVATE)
    {
        // 다른 창이 활성화되는 것을 막음
        return (IntPtr)1;
    }
    return CallNextHookEx(_hookID, nCode, wParam, lParam);
}

private static void SetHook()
{
    _hookID = SetWindowsHookEx(WH_CBT, HookCallback, GetModuleHandle(null), 0);
}

private static void RemoveHook()
{
    UnhookWindowsHookEx(_hookID);
}
이 코드를 실행하면 어떤 프로그램도 내 윈도우의 포커스를 뺏지 못하게 차단할 수 있습니다.

✅ 적용 방법

SetHook(); 실행 → 포커스를 빼앗기지 않음.
RemoveHook(); 실행 → 정상적으로 다른 창을 사용할 수 있음.
4. 다른 프로그램으로 전환 자체를 막기
한 번 TextEdit에 포커스가 가면, Alt+Tab이나 다른 창 클릭으로 전환되지 않게 막으려면 아래 코드 추가:

csharp
코드 복사
protected override void OnActivated(EventArgs e)
{
    base.OnActivated(e);
    this.Topmost = true; // 항상 최상위로 유지
    MyTextEdit.Focus();
}
이렇게 하면 포커스를 뺏기지 않고 항상 유지됩니다.

📌 최종 정리
1️⃣ LostFocus에서 Focus()를 다시 호출 → ✅ 자동 포커스 유지
2️⃣ Window.Activated에서 TextEdit.Focus() 실행 → ✅ 창을 다시 선택해도 유지
3️⃣ 윈도우 메시지 Hook (SetHook()) → ✅ 다른 프로세스도 포커스를 못 뺏음
4️⃣ Topmost = true; 설정 → ✅ Alt+Tab 전환도 막음