import bpy

# 기존 객체 삭제
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.object.select_by_type(type='MESH')
bpy.ops.object.delete()

# 텍스트 데이터 생성 함수
def create_text(text, location, material):
    bpy.ops.object.text_add(location=location)
    text_obj = bpy.context.object
    text_obj.data.body = text
    text_obj.data.extrude = 0.1  # 두께 설정
    text_obj.data.align_x = 'CENTER'
    text_obj.data.align_y = 'CENTER'
    text_obj.data.size = 2  # 글자 크기 설정
    text_obj.data.font = bpy.data.fonts.load('C:/Windows/Fonts/arial.ttf')  # 폰트 경로 설정
    text_obj.active_material = material
    return text_obj

# 에메랄드 재질 생성
emerald_material = bpy.data.materials.new(name="Emerald")
emerald_material.use_nodes = True
nodes = emerald_material.node_tree.nodes
links = emerald_material.node_tree.links
nodes.clear()

output_node = nodes.new(type='ShaderNodeOutputMaterial')
glass_node = nodes.new(type='ShaderNodeBsdfGlass')
glass_node.inputs['Color'].default_value = (0.0, 0.8, 0.6, 1)  # 에메랄드 색상
glass_node.inputs['Roughness'].default_value = 0.1
glass_node.inputs['IOR'].default_value = 1.57  # 굴절률
links.new(glass_node.outputs['BSDF'], output_node.inputs['Surface'])

# 사파이어 재질 생성
sapphire_material = bpy.data.materials.new(name="Sapphire")
sapphire_material.use_nodes = True
nodes = sapphire_material.node_tree.nodes
links = sapphire_material.node_tree.links
nodes.clear()

output_node = nodes.new(type='ShaderNodeOutputMaterial')
glass_node = nodes.new(type='ShaderNodeBsdfGlass')
glass_node.inputs['Color'].default_value = (0.0, 0.1, 0.6, 1)  # 사파이어 색상
glass_node.inputs['Roughness'].default_value = 0.1
glass_node.inputs['IOR'].default_value = 1.77  # 굴절률
links.new(glass_node.outputs['BSDF'], output_node.inputs['Surface'])

# 첫 번째 텍스트 생성
text1 = create_text("Nothing is as true", (0, 0, 1), emerald_material)

# 두 번째 텍스트 생성
text2 = create_text("as what flows.", (0, 0, -1), sapphire_material)

# 유리 바닥 생성
bpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, -2))
glass_floor = bpy.context.object
glass_floor.name = "GlassFloor"

# 유리 바닥 재질 생성
glass_material = bpy.data.materials.new(name="GlassMaterial")
glass_material.use_nodes = True
nodes = glass_material.node_tree.nodes
links = glass_material.node_tree.links
nodes.clear()

output_node = nodes.new(type='ShaderNodeOutputMaterial')
glass_node = nodes.new(type='ShaderNodeBsdfGlass')
glass_node.inputs['Color'].default_value = (0.0, 0.5, 0.8, 1)  # 투명 푸른색
glass_node.inputs['Roughness'].default_value = 0.05
glass_node.inputs['IOR'].default_value = 1.5  # 굴절률
links.new(glass_node.outputs['BSDF'], output_node.inputs['Surface'])

glass_floor.data.materials.append(glass_material)

# 물 흐름 효과 추가
bpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, -2.01))
water_plane = bpy.context.object
water_plane.name = "WaterPlane"

# 물 재질 생성
water_material = bpy.data.materials.new(name="WaterMaterial")
water_material.use_nodes = True
nodes = water_material.node_tree.nodes
links = water_material.node_tree.links
nodes.clear()

output_node = nodes.new(type='ShaderNodeOutputMaterial')
glass_node = nodes.new(type='ShaderNodeBsdfGlass')
glass_node.inputs['Color'].default_value = (0.0, 0.3, 0.6, 1)  # 물 색상
glass_node.inputs['Roughness'].default_value = 0.01
glass_node.inputs['IOR'].default_value = 1.33  # 물의 굴절률
links.new(glass_node.outputs['BSDF'], output_node.inputs['Surface'])

water_plane.data.materials.append(water_material)

# 물 흐름 텍스처 추가
tex_coord = nodes.new(type='ShaderNodeTexCoord')
wave_texture = nodes.new(type='ShaderNodeTexWave')
wave_texture.inputs['Scale'].default_value = 2
wave_texture.inputs['Distortion'].default_value = 1
wave_texture.inputs['Detail'].default_value = 2
wave_texture.inputs['Detail Scale'].default_value = 1.5
wave_texture.inputs['Speed'].default_value = 0.5

bump_node = nodes.new(type='ShaderNodeBump')
bump_node.inputs['Strength'].default_value = 0.1
bump_node.inputs['Distance'].default_value = 0.1

links.new(tex_coord.outputs['Generated'], wave_texture.inputs['Vector'])
links.new(wave_texture.outputs['Color'], bump_node.inputs['Height'])
links.new(bump_node.outputs['Normal'], glass_node.inputs['Normal'])

# 카메라 설정
bpy.ops.object.camera_add(location=(0, -10, 0))
camera = bpy.context.object
camera.rotation_euler = (1.5708, 0, 0)  # 정면을 향하도록 설정

# 카메라를 장면의 활성 카메라로 설정
bpy.context.scene.camera = camera

# 렌더링 설정
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.cycles.device = 'GPU'
bpy.context.scene.render.resolution_x = 15360  # 16K 해상도
bpy.context.scene.render.resolution_y = 8640
bpy.context.scene.render.resolution_percentage = 100
bpy.context.scene.cycles.samples = 500  # 샘플 수 설정
bpy.context.scene.render.tile_x = 512  # 타
::contentReference[oaicite:0]{index=0}
 
