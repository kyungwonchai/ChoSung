이 요구사항을 Kotlin과 SignalR을 사용하여 구현하는 방법을 단계별로 설명하고 소스 코드를 제공하겠습니다. Android 27 이상에서 알림 기능을 활성화하고, MSSQL 서버에서 데이터를 불러오며, 화면이 꺼져 있어도 알람 팝업과 화면 켜짐을 구현하는 코드를 포함할 것입니다. 코틀린 DSL과 Android SDK를 사용하여 구현할 것이며, SignalR 메시지 수신을 처리합니다.

구현 개요
SignalR 연결: 특정 서버에 연결하고, SignalR 메시지를 수신 대기하는 기능을 구현합니다.
MSSQL 데이터 가져오기: table2에서 데이터를 가져와서 화면에 표시하는 기능을 추가합니다.
알림 시스템: 메시지가 수신되면 알림을 띄우고, 알림을 누르면 앱이 활성화되도록 합니다.
진동 및 소리 알림: 체크박스로 진동을 켜고 끄는 기능을 추가합니다.
화면 켜짐: 화면이 꺼져 있더라도 메시지 수신 시 화면을 켜는 기능을 구현합니다.
주요 구현 코드
1. 프로젝트 설정 (build.gradle.kts)
kotlin
코드 복사
plugins {
    id("com.android.application")
    kotlin("android")
}

android {
    compileSdk = 33

    defaultConfig {
        applicationId = "com.example.signalrapp"
        minSdk = 27
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    implementation("com.microsoft.signalr:signalr:5.0.12")
    implementation("androidx.core:core-ktx:1.9.0")
    implementation("androidx.appcompat:appcompat:1.5.1")
    implementation("com.google.android.material:material:1.7.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.5.1")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1")
    // SQL 관련 라이브러리 추가 필요
}
2. SignalR 연결 구현
MainActivity.kt 파일에 SignalR 클라이언트를 설정합니다.

kotlin
코드 복사
package com.example.signalrapp

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.util.Log
import android.widget.CheckBox
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.NotificationCompat
import androidx.lifecycle.lifecycleScope
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {
    private lateinit var hubConnection: HubConnection
    private lateinit var notificationManager: NotificationManager
    private lateinit var vibrationCheckBox: CheckBox

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 알림 채널 설정
        createNotificationChannel()

        // 진동 체크박스
        vibrationCheckBox = findViewById(R.id.vibrationCheckBox)

        // SignalR 서버 연결 설정
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        // 메시지 수신 대기
        hubConnection.on("ReceiveMessage", { message: String ->
            showNotification(message)
            wakeUpScreen()
        }, String::class.java)

        lifecycleScope.launch {
            hubConnection.start().blockingAwait()
            Log.d("SignalR", "Connected to SignalR server.")
        }
    }

    // 알림을 띄우는 함수
    private fun showNotification(message: String) {
        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent: PendingIntent =
            PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT)

        val builder = NotificationCompat.Builder(this, "SIGNALR_CHANNEL")
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("New SignalR Message")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)

        // 진동 설정
        if (vibrationCheckBox.isChecked) {
            builder.setVibrate(longArrayOf(0, 500, 1000))
        }

        notificationManager.notify(1, builder.build())
    }

    // 화면을 켜는 함수
    private fun wakeUpScreen() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        val isScreenOn = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
            powerManager.isInteractive
        } else {
            powerManager.isScreenOn
        }

        if (!isScreenOn) {
            val wakeLock = powerManager.newWakeLock(
                PowerManager.SCREEN_BRIGHT_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "MyApp::MyWakelockTag"
            )
            wakeLock.acquire(3000) // 3초 동안 화면 켜짐 유지
        }
    }

    // 알림 채널 생성
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SignalR Channel"
            val descriptionText = "Channel for SignalR notifications"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel("SIGNALR_CHANNEL", name, importance).apply {
                description = descriptionText
            }
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        }
    }
}
3. 데이터베이스에서 데이터 가져오기
데이터베이스에 연결하여 최근 20개의 레코드를 가져와 화면에 표시하는 부분은 RecyclerView와 함께 구현할 수 있습니다. 여기서는 데이터베이스 연결을 위해 추가적인 라이브러리 설정이 필요합니다.

kotlin
코드 복사
package com.example.signalrapp

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager

class DataActivity : AppCompatActivity() {
    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        lifecycleScope.launch {
            val data = fetchDataFromDatabase()
            adapter = DataAdapter(data)
            recyclerView.adapter = adapter
        }
    }

    // 데이터베이스에서 데이터를 가져오는 함수
    private suspend fun fetchDataFromDatabase(): List<TableData> {
        return withContext(Dispatchers.IO) {
            val url = "jdbc:jtds:sqlserver://your-database-server;databaseName=your-database"
            val connection: Connection = DriverManager.getConnection(url, "username", "password")
            val statement = connection.createStatement()
            val resultSet = statement.executeQuery("SELECT TOP 20 * FROM table2")

            val data = mutableListOf<TableData>()
            while (resultSet.next()) {
                val column1 = resultSet.getString("column1")
                val column2 = resultSet.getString("column2")
                // 다른 컬럼 데이터도 추가
                data.add(TableData(column1, column2))
            }

            resultSet.close()
            statement.close()
            connection.close()

            data
        }
    }
}
결론
위 코드는 SignalR로 메시지를 수신하고, MSSQL 데이터베이스에서 데이터를 가져와서 표시하는 안드로이드 앱입니다. 추가적으로 필요에 따라 레이아웃 파일(activity_main.xml, activity_data.xml)과 RecyclerView 어댑터 파일을 작성해야 합니다.