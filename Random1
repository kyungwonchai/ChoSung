WPF에서 소켓 서버를 사용하여 메시지를 수신하고, 메시지를 리스트박스에 출력하며, 메시지에 따라 색상을 변경하고 특정 메시지 값에 따라 함수를 실행하는 클래스를 구현하는 방법을 설명하겠습니다. 이 예제에서는 MainWindow에서 소켓 서버를 활성화하고, 메시지를 수신하여 처리하는 SocketServer 클래스를 사용합니다.

1. SocketServer 클래스 구현
SocketServer 클래스는 소켓 서버를 열고, 메시지를 수신하여 이벤트를 통해 MainWindow에 전달하는 역할을 합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

public class SocketServer
{
    private Socket _serverSocket;
    private Thread _listenThread;
    private bool _isRunning;

    public event Action<string> MessageReceived;

    public SocketServer()
    {
        _serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
    }

    public void StartServer(int port)
    {
        _isRunning = true;
        _serverSocket.Bind(new IPEndPoint(IPAddress.Any, port));
        _serverSocket.Listen(10);
        _listenThread = new Thread(ListenForClients);
        _listenThread.IsBackground = true;
        _listenThread.Start();
    }

    private void ListenForClients()
    {
        while (_isRunning)
        {
            try
            {
                Socket clientSocket = _serverSocket.Accept();
                Thread clientThread = new Thread(() => HandleClientComm(clientSocket));
                clientThread.IsBackground = true;
                clientThread.Start();
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error accepting client: " + ex.Message);
            }
        }
    }

    private void HandleClientComm(Socket clientSocket)
    {
        byte[] buffer = new byte[1024];
        int bytesRead;

        try
        {
            while ((bytesRead = clientSocket.Receive(buffer)) > 0)
            {
                string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                MessageReceived?.Invoke(message);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error handling client communication: " + ex.Message);
        }
        finally
        {
            clientSocket.Close();
        }
    }

    public void StopServer()
    {
        _isRunning = false;
        _serverSocket.Close();
    }
}
2. MainWindow.xaml 디자인
리스트박스를 사용하여 수신된 메시지를 표시합니다.

xml
코드 복사
<Window x:Class="SocketApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Server" Height="350" Width="525">
    <Grid>
        <ListBox x:Name="MessageListBox" Margin="10"/>
    </Grid>
</Window>
3. MainWindow.xaml.cs 코드
MainWindow에서 SocketServer를 초기화하고, 메시지를 수신하여 리스트박스에 출력하고, 특정 메시지에 따라 함수를 호출하는 로직을 작성합니다.

csharp
코드 복사
using System;
using System.Windows;
using System.Windows.Media;

namespace SocketApp
{
    public partial class MainWindow : Window
    {
        private SocketServer _socketServer;

        public MainWindow()
        {
            InitializeComponent();
            StartSocketServer();
        }

        private void StartSocketServer()
        {
            _socketServer = new SocketServer();
            _socketServer.MessageReceived += OnMessageReceived;
            _socketServer.StartServer(12345); // 원하는 포트 번호로 설정
        }

        private void OnMessageReceived(string message)
        {
            Dispatcher.Invoke(() =>
            {
                var listBoxItem = new System.Windows.Controls.ListBoxItem();
                listBoxItem.Content = message;

                // 메시지에 따라 색상을 변경합니다.
                if (message.Contains("Red"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Red);
                else if (message.Contains("Orange"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Orange);
                else if (message.Contains("Green"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Green);
                else if (message.Contains("Blue"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Blue);
                else if (message.Contains("Violet"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Violet);
                else if (message.Contains("Pink"))
                    listBoxItem.Background = new SolidColorBrush(Colors.Pink);

                MessageListBox.Items.Add(listBoxItem);

                // 특정 메시지에 따라 함수를 호출합니다.
                if (message.Contains("ExecuteFunction1"))
                    ExecuteFunction1();
                else if (message.Contains("ExecuteFunction2"))
                    ExecuteFunction2();
            });
        }

        private void ExecuteFunction1()
        {
            MessageBox.Show("Function 1 Executed!");
        }

        private void ExecuteFunction2()
        {
            MessageBox.Show("Function 2 Executed!");
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            _socketServer.StopServer();
        }
    }
}
상세 설명
SocketServer 클래스: 이 클래스는 TCP 소켓 서버를 설정하고, 클라이언트로부터 메시지를 수신하여 MessageReceived 이벤트를 통해 외부에 전달합니다.

MainWindow.xaml: WPF 윈도우의 XAML 디자인입니다. 여기서는 수신된 메시지를 보여줄 리스트박스를 추가했습니다.

MainWindow.xaml.cs:

SocketServer를 초기화하고 시작합니다.
OnMessageReceived 메서드는 소켓 서버로부터 메시지를 수신할 때마다 호출됩니다.
수신된 메시지를 리스트박스에 추가하고, 메시지의 내용에 따라 아이템의 배경색을 변경합니다.
특정 문자열을 포함하는 메시지를 수신했을 때, 관련된 함수를 호출합니다 (ExecuteFunction1, ExecuteFunction2).
Dispatcher.Invoke: WPF UI 스레드에서 UI 요소를 업데이트하기 위해 사용됩니다. 수신된 메시지에 따라 UI를 업데이트해야 하므로 이 메서드를 사용하여 안전하게 작업을 수행합니다.

이 코드를 사용하여 WPF 애플리케이션에서 소켓 서버를 구현하고, 메시지를 수신하여 UI에 반영할 수 있습니다. 필요에 따라 포트 번호와 메시지 처리 로직을 변경할 수 있습니다.