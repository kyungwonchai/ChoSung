erver 2014에서 데이터를 가져와서 실시간으로 갱신되는 차트를 DevExpress WPF로 구현하는 전체 코드를 아래와 같이 제공하겠습니다. 이 코드는 데이터베이스에서 데이터를 가져오고, 이를 차트에 반영하여 실시간으로 갱신하는 과정을 포함합니다.

1. 데이터 클래스
csharp
Copy code
public class ChartData
{
    public DateTime FileTime { get; set; }
    public double CTValue { get; set; }
    public string Model { get; set; }
    public string Division { get; set; }
    public string MaskNumber { get; set; }
    public string Rev { get; set; }
    public string Line { get; set; }
    public string Type { get; set; }
}
2. 데이터베이스에서 데이터 가져오기
csharp
Copy code
public ObservableCollection<ChartData> FetchDataFromDatabase()
{
    var data = new ObservableCollection<ChartData>();

    using (var connection = new SqlConnection("Your Connection String Here"))
    {
        connection.Open();
        var query = "SELECT FileTime, CT, Model, Division, MaskNumber, Rev, Line, Type FROM YourTable";
        using (var command = new SqlCommand(query, connection))
        {
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    var chartData = new ChartData
                    {
                        FileTime = reader.GetDateTime(0),
                        CTValue = reader.GetDouble(1),
                        Model = reader.GetString(2),
                        Division = reader.GetString(3),
                        MaskNumber = reader.GetString(4),
                        Rev = reader.GetString(5),
                        Line = reader.GetString(6),
                        Type = reader.GetString(7)
                    };
                    data.Add(chartData);
                }
            }
        }
    }

    return data;
}
3. 차트 생성 및 데이터 바인딩
csharp
Copy code
void CreateCharts(ObservableCollection<ChartData> data)
{
    var lines = data.Select(d => d.Line).Distinct();
    foreach (var line in lines)
    {
        var lineData = data.Where(d => d.Line == line);

        var chart = new ChartControl();
        chart.Diagram = new XYDiagram2D();
        MainStackPanel.Children.Add(chart);

        // T 시리즈
        var seriesT = CreateSeries(lineData, "T");
        chart.Diagram.Series.Add(seriesT);

        // B 시리즈
        var seriesB = CreateSeries(lineData, "B");
        chart.Diagram.Series.Add(seriesB);
    }
}

LineSeries2D CreateSeries(IEnumerable<ChartData> data, string type)
{
    var series = new LineSeries2D
    {
        DisplayName = type,
        ArgumentDataMember = "FileTime",
        ValueDataMember = "CTValue",
        DataSource = data.Where(d => d.Type == type)
    };

    series.ToolTipPointPattern = "Model: {Model}\nDivision: {Division}\nMask Number: {MaskNumber}\nRev: {Rev}\nCT: {CTValue}\nFile Time: {FileTime}";
    return series;
}
4. XAML 설정
xml
Copy code
<Window xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts">
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- 차트가 여기에 동적으로 생성됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
5. 초기화 및 실행
csharp
Copy code
void InitializeCharts()
{
    var data = FetchDataFromDatabase();
    CreateCharts(data);
}
이 코드를 실행하기 전에, Your Connection String Here와 YourTable 부분을 실제 데이터베이스 연결 문자열과 테이블 이름으로 바꿔야 합니다. InitializeCharts 메소드는 프로그램이 시작할 때 호출해야 합니다. 이 코드는 실시간으로 차트를 갱신하기 위한 기본적인 구조를 제공합니다. 데이터베이스에서 데이터를 가져오는 부분은 주기