To group your alldata collection by Linename and then order each group by Timestamp in descending order using LINQ in C#, you can follow these steps:

Group the data by Linename.
Order each group by Timestamp in descending order.
Project the results as needed.
Here's how you can implement this:

csharp
코드 복사
var lineGroups = alldata
    .GroupBy(d => d.Linename)
    .Select(group => new
    {
        Linename = group.Key,
        Items = group.OrderByDescending(d => d.Timestamp)
    });
Explanation:

GroupBy(d => d.Linename): This groups the elements in alldata by the Linename property.
.Select(group => new { ... }): This projects each group into a new anonymous object containing:
Linename = group.Key: The key of the group, which is the Linename.
Items = group.OrderByDescending(d => d.Timestamp): The items in the group, ordered by Timestamp in descending order.
Usage:

You can iterate over lineGroups to access each group and its ordered items:

csharp
코드 복사
foreach (var group in lineGroups)
{
    Console.WriteLine($"Linename: {group.Linename}");
    foreach (var item in group.Items)
    {
        Console.WriteLine($"  Timestamp: {item.Timestamp}, OtherProperty: {item.OtherProperty}");
    }
}
Note:

The GroupBy method in LINQ returns a collection of groups, where each group is an IGrouping<TKey, TElement>. By projecting each group into an anonymous object with the Linename and the ordered items, you can easily work with the grouped and ordered data.