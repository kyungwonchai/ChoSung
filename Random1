using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private RibbonPage favoritesPage;
        private Dictionary<string, BarButtonItem> buttonsDictionary = new Dictionary<string, BarButtonItem>();
        private HashSet<string> favoriteKeys = new HashSet<string>(); // 즐겨찾기 키값을 저장할 HashSet
        private string favoriteStorageFile = "favorites.txt"; // 즐겨찾기 상태 저장용 파일 경로
        private PopupMenu contextMenu;

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            LoadFavorites();
            InitializeContextMenu();
            InitializeButtons();
        }

        private void InitializeFavoritesPage()
        {
            // 즐겨찾기 페이지 초기화
            favoritesPage = new RibbonPage("Favorites");
            ribbonControl1.Pages.Insert(0, favoritesPage);
        }

        private void LoadFavorites()
        {
            // 파일에서 즐겨찾기 정보를 불러오기
            if (File.Exists(favoriteStorageFile))
            {
                var lines = File.ReadAllLines(favoriteStorageFile);
                favoriteKeys = new HashSet<string>(lines);
            }
        }

        private void SaveFavorites()
        {
            // 즐겨찾기 정보를 파일에 저장하기
            File.WriteAllLines(favoriteStorageFile, favoriteKeys);
        }

        private void InitializeButtons()
        {
            // 예시 버튼들을 초기화
            var buttons = new List<UBtn>
            {
                new UBtn("Button1", "Key1", "Tag1", "icon1.png", "Tooltip 1", "YourRibbonPageName", "Group1", ButtonClick1, RibbonItemStyles.Large),
                new UBtn("Button2", "Key2", "Tag2", "icon2.png", "Tooltip 2", "YourRibbonPageName", "Group2", ButtonClick2, RibbonItemStyles.Large),
            };

            foreach (var btn in buttons)
            {
                AddButton(btn);
            }
        }

        private void InitializeContextMenu()
        {
            // 컨텍스트 메뉴 초기화
            contextMenu = new PopupMenu();
            contextMenu.Manager = ribbonControl1.Manager;
        }

        private void AddButton(UBtn uBtn)
        {
            // 대상 리본 페이지 찾기
            RibbonPage targetPage = ribbonControl1.Pages.FirstOrDefault(p => p.Text == uBtn.RibbonPageName);
            if (targetPage == null)
            {
                Console.WriteLine("대상 리본 페이지를 찾을 수 없습니다: " + uBtn.RibbonPageName);
                return;
            }

            // 해당 그룹명을 가진 그룹이 이미 있는지 확인
            RibbonPageGroup targetGroup = targetPage.Groups.FirstOrDefault(g => g.Text == uBtn.RibbonPageGroupName);
            if (targetGroup == null)
            {
                // 그룹이 없으면 새로 생성
                targetGroup = new RibbonPageGroup(uBtn.RibbonPageGroupName);
                targetPage.Groups.Add(targetGroup);
            }

            // BarButtonItem 생성
            BarButtonItem button = new BarButtonItem();
            button.Caption = uBtn.Caption;
            button.Tag = uBtn.Tag;
            button.Hint = uBtn.Tooltip;
            button.RibbonStyle = uBtn.ButtonSize;
            button.ItemClick += (s, e) => HandleButtonClick(uBtn.Key, button);
            button.ShowItemShortcut = DefaultBoolean.True;

            if (!string.IsNullOrEmpty(uBtn.IconPath) && File.Exists(uBtn.IconPath))
            {
                try
                {
                    // PNG 또는 ICO 파일을 사용하여 이미지를 설정
                    if (uBtn.IconPath.EndsWith(".png") || uBtn.IconPath.EndsWith(".ico"))
                    {
                        button.ImageOptions.Image = Image.FromFile(uBtn.IconPath);
                    }
                    else
                    {
                        Console.WriteLine("지원되지 않는 이미지 형식입니다. PNG, ICO만 지원됩니다.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine("이미지 파일을 불러오는 도중 오류가 발생했습니다: " + ex.Message);
                }
            }

            // 즐겨찾기 상태에 따라 버튼의 배경색 설정
            if (favoriteKeys.Contains(uBtn.Key))
            {
                button.ItemAppearance.Normal.BackColor = Color.Yellow;
            }

            // 우클릭 컨텍스트 메뉴 이벤트 추가
            button.ItemClick += (s, e) =>
            {
                if (e.Button == MouseButtons.Right)
                {
                    ShowContextMenu(uBtn.Key, button);
                }
            };

            // 리본 페이지 그룹에 버튼 추가
            targetGroup.ItemLinks.Add(button);

            // 버튼 사전에 저장
            buttonsDictionary[uBtn.Key] = button;

            // 즐겨찾기 페이지에 추가되어야 하는지 확인 후 추가
            if (favoriteKeys.Contains(uBtn.Key))
            {
                AddToFavorites(button, targetGroup.Text);
            }
        }

        private void ShowContextMenu(string key, BarButtonItem button)
        {
            // 기존 컨텍스트 메뉴 항목 초기화
            contextMenu.ClearLinks();

            // 즐겨찾기 추가/제거 메뉴 항목 추가
            BarButtonItem favoriteMenuItem = new BarButtonItem();
            favoriteMenuItem.Caption = favoriteKeys.Contains(key) ? "즐겨찾기 제거" : "즐겨찾기 추가";
            favoriteMenuItem.ItemClick += (s, args) => ToggleFavorite(key, button);

            // 메뉴 항목을 컨텍스트 메뉴에 추가
            contextMenu.AddItem(favoriteMenuItem);

            // 마우스 위치에 컨텍스트 메뉴 표시
            contextMenu.ShowPopup(Control.MousePosition);
        }

        private void HandleButtonClick(string key, BarButtonItem button)
        {
            // 기본 버튼 동작 수행
            MessageBox.Show(button.Caption + " clicked");
        }

        private void ToggleFavorite(string key, BarButtonItem button)
        {
            // 즐겨찾기 추가/제거 로직
            if (favoriteKeys.Contains(key))
            {
                favoriteKeys.Remove(key);
                button.ItemAppearance.Normal.BackColor = Color.Empty; // 배경색 초기화
                RemoveFromFavorites(button);
            }
            else
            {
                favoriteKeys.Add(key);
                button.ItemAppearance.Normal.BackColor = Color.Yellow; // 즐겨찾기 추가 시 배경색을 노랑으로 변경
                AddToFavorites(button, button.RibbonPageGroup.Text);
            }

            SaveFavorites(); // 즐겨찾기 상태를 변경할 때마다 저장하기
        }

        private void AddToFavorites(BarButtonItem button, string groupName)
        {
            // 즐겨찾기 페이지에 그룹이 있는지 확인
            RibbonPageGroup favoriteGroup = favoritesPage.Groups.FirstOrDefault(g => g.Text == groupName);
            if (favoriteGroup == null)
            {
                // 그룹이 없으면 새로 생성
                favoriteGroup = new RibbonPageGroup(groupName);
                favoritesPage.Groups.Add(favoriteGroup);
            }

            // 즐겨찾기 그룹에 버튼 추가
            favoriteGroup.ItemLinks.Add(button);
        }

        private void RemoveFromFavorites(BarButtonItem button)
        {
            // 즐겨찾기 페이지에서 버튼 제거
            foreach (var group in favoritesPage.Groups)
            {
                var link = group.ItemLinks.FirstOrDefault(l => l.Item == button);
                if (link != null)
                {
                    group.ItemLinks.Remove(link);
                    break;
                }
            }
        }

        // 버튼 클릭 예시 함수들
        private void ButtonClick1()
        {
            MessageBox.Show("Button 1 clicked");
        }

        private void ButtonClick2()
        {
            MessageBox.Show("Button 2 clicked");
        }
    }

    // 버튼 정보를 담는 클래스 정의
    public class UBtn
    {
        public string Caption { get; set; }
        public string Key { get; set; } // 키값을 사용자 정의로 설정
        public string Tag { get; set; }
        public string IconPath { get; set; } // 아이콘 경로 추가
        public string Tooltip { get; set; }
        public string RibbonPageName { get; set; } // 리본 페이지 이름 추가
        public string RibbonPageGroupName { get; set; } // 리본 그룹 이름 추가
        public Action Action { get; set; }
        public RibbonItemStyles ButtonSize { get; set; }

        public UBtn(string caption, string key, string tag, string iconPath, string tooltip, string ribbonPageName, string ribbonPageGroupName, Action action, RibbonItemStyles buttonSize)
        {
            Caption = caption;
            Key = key; // 키값을 생성자에서 전달받아 설정
            Tag = tag;
            IconPath = iconPath; // 아이콘 경로 설정
            Tooltip = tooltip;
            RibbonPageName = ribbonPageName; // 리본 페이지 이름 설정
            RibbonPageGroupName = ribbonPageGroupName; // 리본 그룹 이름 설정
            Action = action;
            ButtonSize = buttonSize;
        }
    }