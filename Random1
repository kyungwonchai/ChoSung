thon에서 "the SSL module in Python is not available" 오류는 Python이 OpenSSL 라이브러리나 개발 헤더 파일을 찾지 못할 때 발생합니다. 이는 보통 Python을 소스에서 직접 설치할 때 발생하며, OpenSSL 관련 라이브러리가 누락된 경우입니다. 아래 단계를 따라 해결하세요.

1. OpenSSL 설치 확인
Ubuntu에서 OpenSSL과 관련된 개발 도구가 설치되어 있는지 확인합니다.

OpenSSL 설치
터미널에서 아래 명령어를 실행하여 OpenSSL과 관련 라이브러리를 설치합니다:

bash
코드 복사
sudo apt update
sudo apt install libssl-dev openssl
OpenSSL 버전 확인
아래 명령으로 설치된 OpenSSL 버전을 확인합니다:

bash
코드 복사
openssl version
출력 값이 1.1.1 이상이어야 합니다.
2. Python 빌드 재설치
Python을 소스에서 설치한 경우, OpenSSL 지원을 포함하여 다시 컴파일해야 합니다.

2.1 필요한 라이브러리 설치
Python 컴파일에 필요한 라이브러리를 설치합니다:

bash
코드 복사
sudo apt install build-essential zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libssl-dev libffi-dev
2.2 Python 소스 다운로드
Python 공식 웹사이트에서 소스 코드를 다운로드합니다:

다운로드:

bash
코드 복사
wget https://www.python.org/ftp/python/3.x.x/Python-3.x.x.tgz
예: Python 3.11.6을 설치하려면:
bash
코드 복사
wget https://www.python.org/ftp/python/3.11.6/Python-3.11.6.tgz
압축 해제:

bash
코드 복사
tar -xvf Python-3.x.x.tgz
cd Python-3.x.x
2.3 Python 컴파일 및 설치
OpenSSL 경로 확인
OpenSSL이 설치된 디렉토리를 확인합니다:

bash
코드 복사
which openssl
예: /usr/bin/openssl 경로가 출력됩니다.
컴파일
Python을 OpenSSL 지원을 포함하여 컴파일합니다:

bash
코드 복사
./configure --enable-optimizations --with-openssl=/usr
make
sudo make altinstall
--with-openssl=/usr: OpenSSL 라이브러리 경로 지정.
altinstall: 기존 Python 기본 버전을 대체하지 않음.
Python 버전 확인:

bash
코드 복사
python3.x --version
3. SSL 모듈 확인
Python에서 SSL 모듈이 정상적으로 작동하는지 확인하려면 아래 명령어를 실행합니다:

bash
코드 복사
python3.x -m ssl
정상적으로 작동하면 아무 메시지도 출력되지 않거나 SSL 모듈 테스트 결과가 출력됩니다.

4. 추가 확인
pip에서 HTTPS 동작 확인
OpenSSL 지원이 정상적으로 동작하는지 확인하기 위해 pip를 사용하여 HTTPS 요청을 테스트합니다:

bash
코드 복사
pip install requests
Python 코드에서 SSL 테스트 아래 코드를 실행하여 SSL 연결을 테스트합니다:

python
코드 복사
import ssl
print(ssl.OPENSSL_VERSION)
OpenSSL 버전이 출력되면 문제가 해결된 것입니다.
5. 자주 발생하는 문제
libssl.so 파일 누락
OpenSSL 설치 경로가 제대로 설정되지 않은 경우, libssl.so 파일을 찾을 수 없어 문제가 발생합니다. 이 경우 OpenSSL의 설치 경로를 LD_LIBRARY_PATH에 추가하세요:

bash
코드 복사
export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH
Python 재설치가 번거로운 경우
기존 Python을 제거하지 않고 새로 빌드된 Python을 병행하여 사용할 수 있습니다.