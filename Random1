 코드에서 토큰을 추가하지 않았네요. 죄송합니다. 토큰을 추가하여 코드를 수정하겠습니다.

csharp

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";

        public static async Task<string> SendMail(string systemId, string userId, string accessToken, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestData = new
            {
                body = new
                {
                    subject,
                    contents,
                    sender = new
                    {
                        emailAddress = senderEmailAddress,
                        recipientType = "TO"
                    },
                    recipients = new[]
                    {
                        new
                        {
                            emailAddress = recipientEmailAddress,
                            recipientType = "TO"
                        }
                    }
                }
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(requestUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");

                return mailId;
            }
            else
            {
                Console.WriteLine("메일 발송에 실패하였습니다.");
                return null;
            }
        }

        public static async Task<bool> CancelMail(string systemId, string userId, string accessToken, string mailId)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestUrl = $"{apiUrl}/mails/{mailId}/cancel?userId={userId}";

            var response = await client.PostAsync(requestUrl, null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("메일 발신 취소가 성공적으로 처리되었습니다.");
                return true;
            }
            else
            {
                Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                return false;
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string systemId = "System-ID";
            string userId = "K아이디";
            string accessToken = "여기에_접근_토큰_값_입력";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "sgsg@abc.com";
            string recipientEmailAddress = "knoxposgg@abc.com";

            mailId = await MailSender.SendMail(systemId, userId, accessToken, subject, contents, senderEmailAddress, recipientEmailAddress);
        }

        private async void btnCancelMail_Click(object sender, EventArgs e)
        {
           

User
이어서요
ChatGPT

물론이요! 이어서 코드를 작성해드리겠습니다.

csharp

private async void btnCancelMail_Click(object sender, EventArgs e)
{
    if (!string.IsNullOrEmpty(mailId))
    {
        string systemId = "System-ID";
        string userId = "K아이디";
        string accessToken = "여기에_접근_토큰_값_입력";

        bool cancellationResult = await MailSender.CancelMail(systemId, userId, accessToken, mailId);

        if (cancellationResult)
        {
            Console.WriteLine("메일 발신이 취소되었습니다.");
        }
        else
        {
            Console.WriteLine("메일 발신 취소에 실패하였습니다.");
        }
    }
}

위의 코드에서 btnCancelMail_Click 이벤트 핸들러가 호출될 때, systemId, userId, accessToken을 설정하여 MailSender.CancelMail 메서드를 호출합니다. 메일 발신 취소 결과에 따라 적절한 메시지가 출력됩니다.

이제 메일 발신과 발신 취소 기능을 모두 사용할 수 있습니다. 필요한 경우 코드를 수정하고, 실제 사용하시는 환경에 맞게