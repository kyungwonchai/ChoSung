ET 7.3의 문법을 사용하여 탭 컨트롤의 헤더를 깜박이게 하는 코드를 제공합니다. .NET 7.3에서는 최신 C# 언어 기능을 사용할 수 있으므로 이를 반영하여 코드를 업데이트하겠습니다.

수정된 MainWindow.xaml
먼저, MainWindow.xaml에서는 탭 컨트롤과 각 탭 항목에 이름을 지정하여 코드 비하인드에서 참조할 수 있게 합니다.

xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <TabControl Name="LogTabControl" Margin="10" SelectionChanged="LogTabControl_SelectionChanged">
            <!-- 일반 로그 탭 -->
            <TabItem Header="General Logs" Name="GeneralLogsTab">
                <ListBox Name="GeneralLogListBox" ItemsSource="{Binding GeneralLogs}" />
            </TabItem>
            
            <!-- 서비스 로그 탭 -->
            <TabItem Header="Service Logs" Name="ServiceLogsTab">
                <ListBox Name="ServiceLogListBox" ItemsSource="{Binding ServiceLogs}" />
            </TabItem>

            <!-- 시스템 로그 탭 -->
            <TabItem Header="System Logs" Name="SystemLogsTab">
                <ListBox Name="SystemLogListBox" ItemsSource="{Binding SystemLogs}" />
            </TabItem>

            <!-- 에러 로그 탭 -->
            <TabItem Header="Error Logs" Name="ErrorLogsTab">
                <ListBox Name="ErrorLogListBox" ItemsSource="{Binding ErrorLogs}" />
            </TabItem>

            <!-- 사용자 로그 탭 -->
            <TabItem Header="User Logs" Name="UserLogsTab">
                <ListBox Name="UserLogListBox" ItemsSource="{Binding UserLogs}" />
            </TabItem>
        </TabControl>
    </Grid>
</Window>
수정된 MainWindow.xaml.cs
.NET 7.3의 최신 문법을 사용하여 MainWindow.xaml.cs 파일을 수정합니다.

csharp
코드 복사
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR;

public partial class MainWindow : Window
{
    private readonly MainViewModel _viewModel;
    private readonly DispatcherTimer _blinkTimer;
    private TabItem? _blinkingTab;
    private bool _isBlinking;

    public MainWindow()
    {
        InitializeComponent();
        _viewModel = new MainViewModel();
        DataContext = _viewModel;

        _viewModel.OnLogAdded += OnLogAdded; // ViewModel의 로그 추가 이벤트 등록

        _blinkTimer = new DispatcherTimer
        {
            Interval = TimeSpan.FromMilliseconds(500) // 500ms 간격으로 깜박임
        };
        _blinkTimer.Tick += (s, e) => BlinkTabHeader();
    }

    // 탭 헤더 깜박이기
    private void BlinkTabHeader()
    {
        if (_blinkingTab is not null)
        {
            _blinkingTab.Foreground = _isBlinking ? Brushes.Orange : Brushes.Yellow;
            _isBlinking = !_isBlinking;
        }
    }

    // 탭 선택 변경 시 호출되는 이벤트 핸들러
    private void LogTabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
        if (_blinkingTab is not null)
        {
            _blinkingTab.Foreground = Brushes.Black; // 기본 색으로 되돌림
            _blinkTimer.Stop();
            _blinkingTab = null;
        }
    }

    // 로그가 추가될 때 호출되는 이벤트 핸들러
    private void OnLogAdded(string logType)
    {
        if (!IsCurrentTab(logType))
        {
            StartBlinkingTab(logType);
        }
    }

    // 현재 선택된 탭이 로그 유형과 일치하는지 확인
    private bool IsCurrentTab(string logType) =>
        logType switch
        {
            "General" => LogTabControl.SelectedItem == GeneralLogsTab,
            "Service" => LogTabControl.SelectedItem == ServiceLogsTab,
            "System" => LogTabControl.SelectedItem == SystemLogsTab,
            "Error" => LogTabControl.SelectedItem == ErrorLogsTab,
            "User" => LogTabControl.SelectedItem == UserLogsTab,
            _ => false,
        };

    // 해당 로그 유형의 탭 헤더 깜박이기 시작
    private void StartBlinkingTab(string logType)
    {
        _blinkingTab = logType switch
        {
            "General" => GeneralLogsTab,
            "Service" => ServiceLogsTab,
            "System" => SystemLogsTab,
            "Error" => ErrorLogsTab,
            "User" => UserLogsTab,
            _ => null,
        };

        if (_blinkingTab is not null)
        {
            _blinkTimer.Start();
        }
    }
}
수정된 MainViewModel.cs
.NET 7.3의 최신 문법을 사용하여 MainViewModel.cs 파일을 수정합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Threading;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels;

public class MainViewModel : INotifyPropertyChanged
{
    private readonly ServiceControllerHelper _serviceControllerHelper;

    // 로그 컬렉션 정의
    public ObservableCollection<string> GeneralLogs { get; } = new();
    public ObservableCollection<string> ServiceLogs { get; } = new();
    public ObservableCollection<string> SystemLogs { get; } = new();
    public ObservableCollection<string> ErrorLogs { get; } = new();
    public ObservableCollection<string> UserLogs { get; } = new();

    public event Action<string>? OnLogAdded; // 로그가 추가될 때 이벤트

    private const int MaxLogCount = 50; // 최대 로그 개수

    public MainViewModel()
    {
        _serviceControllerHelper = new ServiceControllerHelper();
        _serviceControllerHelper.OnGeneralLogMessage += message => LogGeneralMessage(message);
        _serviceControllerHelper.OnServiceLogMessage += message => LogServiceMessage(message);
        _serviceControllerHelper.OnSystemLogMessage += message => LogSystemMessage(message);
        _serviceControllerHelper.OnErrorLogMessage += message => LogErrorMessage(message);
        _serviceControllerHelper.OnUserLogMessage += message => LogUserMessage(message);
    }

    // 일반 로그 메시지를 추가하는 메서드
    private void LogGeneralMessage(string message)
    {
        AddLog(GeneralLogs, message, "General");
    }

    // 서비스 로그 메시지를 추가하는 메서드
    private void LogServiceMessage(string message)
    {
        AddLog(ServiceLogs, message, "Service");
    }

    // 시스템 로그 메시지를 추가하는 메서드
    private void LogSystemMessage(string message)
    {
        AddLog(SystemLogs, message, "System");
    }

    // 에러 로그 메시지를 추가하는 메서드
    private void LogErrorMessage(string message)
    {
        AddLog(ErrorLogs, message, "Error");
    }

    // 사용자 로그 메시지를 추가하는 메서드
    private void LogUserMessage(string message)
    {
        AddLog(UserLogs, message, "User");
    }

    // 로그를 추가하고 최대 개수를 초과하면 오래된 로그를 삭제하는 메서드
    private void AddLog(ObservableCollection<string> logCollection, string message, string logType)
    {
        App.Current.Dispatcher.Invoke(() =>
        {
            logCollection.Add(message);
            if (logCollection.Count > MaxLogCount)
            {
                logCollection.RemoveAt(0); // 가장 오래된 로그 삭제
            }

            OnLogAdded?.Invoke(logType); // 로그가 추가될 때 이벤트 호출
        });
    }

    public event PropertyChangedEventHandler? PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
코드 설명
MainWindow.xaml.cs:

MainWindow 클래스는 WPF 창의 코드 비하인드 파일로, 로그 추가 이벤트를 처리하고 탭 헤더 깜박임을 관리합니다.
_blinkTimer: 500ms 간격으로 실행되는 타이머로, 탭 헤더를 노란색과 주황색으로 번갈아가며 깜박이게 합니다.
LogTabControl_SelectionChanged: 탭이 변경될 때 호출되는 이벤트 핸들러로, 깜박임을 멈추고 탭 헤더 색상을 기본 색상으로 되돌립니다.
MainViewModel.cs:

MainViewModel 클래스는 애플리케이션의 뷰 모델로, UI와 데이터를 바인딩하고, 서비스로부터의 로그 메시지를 처리합니다.
OnLogAdded 이벤트: 로그가 추가될 때 호출되어 탭 헤더를 깜박이도록 MainWindow에 알립니다.
AddLog 메서드: 로그를 추가하고, 최대 개수를 초과하면 오래된 로그를 삭제합니다. 추가된 로그가 특정 탭에 해당하는 경우 OnLogAdded 이벤트를 트리거합니다.
요약
로그 추가 시 탭 헤더 깜박임: 새로운 로그가 추가될 때, 사용자가 해당 탭을 보고 있지 않다면 탭 헤더를 깜박여 사용자에게 새로운 로그가 추가되었음을 알립니다.
최신 C# 기능 사용: .NET 7.3의 최신 문법을 사용하여 코드를 더욱 간결하고 명확하게 작성했습니다.
**DispatcherTimer**를 사용하여 탭 헤더 깜박임을 제어하며, 사용자 경험을 개선합니다.