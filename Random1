우분투에서 리엑트 게발시 개발 빌드 이렇게 서비스나눠하는방법




생각하는 과정 표시
Ubuntu에서 React 애플리케이션의 개발 환경과 프로덕션 빌드를 나누어 서비스하는 방법을 안내해 드리겠습니다. 일반적으로 개발 서버는 실시간 코드 변경 감지를 위해 사용하고, 프로덕션 빌드는 최적화된 정적 파일을 Nginx와 같은 웹 서버를 통해 서비스합니다.

핵심 개념
개발 서버 (Development Server): npm start 또는 yarn start로 실행하며, 코드 변경 시 자동으로 새로고침되는 등 개발 편의 기능에 중점을 둡니다.

프로덕션 빌드 (Production Build): npm run build 또는 yarn build로 생성하며, 코드 압축 및 최적화가 적용된 정적 파일(HTML, CSS, JS) 묶음입니다. 실제 사용자에게 서비스될 버전입니다.

1. 개발 서버 실행 (Development)
개발 서버는 보통의 React 개발 방식과 동일하게 터미널에서 직접 실행합니다. 이는 실시간으로 코드를 수정하고 바로 확인해야 할 때 사용합니다.

Bash

# 프로젝트 디렉토리로 이동
cd /path/to/your/react-app

# 개발 서버 실행
npm start
특징:

보통 http://localhost:3000으로 접속합니다.

소스 코드가 변경되면 자동으로 브라우저가 새로고침됩니다.

실제 서비스용으로는 사용하지 않습니다.

2. 프로덕션 빌드 및 서비스 (Production)
완성된 React 앱을 사용자에게 제공하기 위해 프로덕션 빌드 후, Nginx 웹 서버를 통해 안정적으로 서비스하는 방법입니다. systemd를 사용하여 Nginx 서비스를 관리합니다.

1단계: React 프로덕션 빌드 생성
먼저 React 프로젝트를 빌드하여 정적 파일들을 생성합니다.

Bash

# 프로젝트 디렉토리로 이동
cd /path/to/your/react-app

# 프로덕션 빌드 실행
npm run build
빌드가 완료되면 프로젝트 내에 build 디렉토리가 생성됩니다. 이 안에 있는 파일들이 실제 서비스에 사용될 파일들입니다.

2단계: Nginx 설치
웹 서버 역할을 할 Nginx를 설치합니다.

Bash

# 패키지 목록 업데이트
sudo apt-get update

# Nginx 설치
sudo apt-get install nginx
3단계: Nginx 설정 파일 작성
Nginx가 React 빌드 파일을 서비스하도록 설정 파일을 만듭니다.

새로운 설정 파일 생성:

Bash

sudo nano /etc/nginx/sites-available/your-app-name
your-app-name 부분은 원하는 이름으로 변경하세요 (예: my-react-app).

설정 파일 내용 입력:
아래 내용을 복사하여 붙여넣고, server_name과 root 경로를 자신의 환경에 맞게 수정합니다.

Nginx

server {
    listen 80;  # 80번 포트로 서비스
    server_name your-domain.com www.your-domain.com; # 자신의 도메인 주소 입력 (없다면 서버의 IP 주소)

    # React 빌드 파일이 있는 경로
    root /path/to/your/react-app/build;
    index index.html index.htm;

    location / {
        try_files $uri /index.html;
    }

    # (선택 사항) API 서버 프록시 설정
    # /api로 시작하는 요청은 5000번 포트의 백엔드 서버로 전달
    # location /api {
    #    proxy_pass http://localhost:5000;
    #    proxy_http_version 1.1;
    #    proxy_set_header Upgrade $http_upgrade;
    #    proxy_set_header Connection 'upgrade';
    #    proxy_set_header Host $host;
    #    proxy_cache_bypass $http_upgrade;
    # }
}
root: npm run build로 생성된 build 디렉토리의 절대 경로를 지정합니다.

try_files $uri /index.html;: React Router와 같은 클라이언트 사이드 라우팅을 사용할 때, 새로고침 시 404 오류가 발생하는 것을 방지하고 항상 index.html을 먼저 로드하게 하는 중요한 설정입니다.

4단계: Nginx 설정 활성화 및 재시작
설정 파일 심볼릭 링크 생성:
sites-available에 만든 설정 파일을 sites-enabled에 연결하여 활성화합니다.

Bash

sudo ln -s /etc/nginx/sites-available/your-app-name /etc/nginx/sites-enabled/
Nginx 설정 테스트:
문법에 오류가 없는지 확인합니다.

Bash

sudo nginx -t
syntax is ok, test is successful 메시지가 나오면 정상입니다.

Nginx 재시작:
변경된 설정을 적용하기 위해 Nginx를 재시작합니다.

Bash

sudo systemctl restart nginx
이제 서버의 IP 주소나 연결된 도메인으로 접속하면 React 애플리케이션이 실행되는 것을 확인할 수 있습니다.

요약
구분	개발 (Development)	서비스 (Production)
목적	코드 개발 및 테스트	실제 사용자에게 서비스 제공
실행 명령어	npm start	npm run build 후 Nginx로 정적 파일 서빙
실행 주체	개발자 (터미널에서 직접 실행)	시스템 (Nginx 서비스)
주요 특징	핫 리로딩(Hot Reloading), 빠른 컴파일	코드 최적화, 안정적인 서비스, 웹 서버(Nginx)를 통한 관리
관리 방법	필요할 때마다 터미널에서 실행 및 종료	sudo systemctl start/stop/restart nginx 명령어로 서비스 관리
인트라넷 10.244에서도되는거맞니




생각하는 과정 표시
네, 당연히 인트라넷(10.244.x.x 대역)에서도 완벽하게 동작합니다.

이전 답변에서 설명드린 Nginx를 이용한 서비스 방법은 네트워크 환경에 상관없이 동일하게 적용됩니다. 서버의 IP 주소가 공인 IP이든, 10.244.x.x와 같은 내부 IP(인트라넷)이든 원리는 같습니다.

인트라넷 적용을 위한 핵심 설정
가장 중요한 부분은 Nginx 설정 파일에서 서버의 주소를 인트라넷 IP로 지정해주는 것입니다.

Nginx 설정 파일 열기:

Bash

sudo nano /etc/nginx/sites-available/your-app-name
server_name 수정하기:
server_name 부분에 서버의 인트라넷 IP 주소를 정확하게 입력해 주세요.

Nginx

server {
    listen 80;

    # 이 부분을 서버의 인트라넷 IP로 변경하세요.
    server_name 10.244.x.x; # 예: 10.244.10.50

    root /path/to/your/react-app/build;
    index index.html index.htm;

    location / {
        try_files $uri /index.html;
    }
}
Nginx 재시작:
설정을 저장한 후, Nginx를 재시작하여 변경사항을 적용합니다.

Bash

sudo systemctl restart nginx
이제 같은 10.244.x.x 대역의 다른 PC에서 웹 브라우저를 열고, 주소창에 http://<서버의-인트라넷-IP> (예: http://10.244.10.50)를 입력하면 빌드된 React 앱에 접속할 수 있습니다.

확인 사항 📝
방화벽: 서버의 방화벽(예: ufw)이 80번 포트(HTTP)로의 접속을 허용하고 있는지 확인해야 합니다. 만약 막혀있다면 다른 사용자들이 접속할 수 없습니다.

Bash

# 방화벽에서 80번 포트 허용
sudo ufw allow 80/tcp

# 방화벽 활성화 (이미 되어 있다면 생략)
sudo ufw enable
여러개야 리엑트서비스하는포트및 api포트




생각하는 과정 표시
네, 여러 개의 리액트(React) 서비스와 API(백엔드) 서비스를 각각 다른 포트로 실행하고 운영하는 것은 매우 일반적인 아키텍처입니다. Nginx를 **리버스 프록시(Reverse Proxy)**로 사용하여 이들을 효율적으로 관리하고 외부에는 단일 창구(도메인 또는 IP)로 제공할 수 있습니다.

전체적인 구조는 다음과 같습니다.

사용자는 서버의 대표 주소(예: your-domain.com)로 접속합니다.

서버의 맨 앞단에서는 Nginx가 모든 요청을 받습니다. (주로 80번 포트)

Nginx는 요청된 주소(URL 경로 또는 하위 도메인)에 따라 내부적으로 실행 중인 각 서비스(리액트 앱, API 서버 등)의 포트로 요청을 전달해줍니다.

## 1단계: 각 서비스 개별 포트로 실행하기
먼저, 각각의 리액트 앱과 API 서버를 고유한 포트에서 실행해야 합니다.

리액트 앱 A (예: 메인 홈페이지)

프로덕션 빌드: npm run build

서비스 실행 (serve 사용 예시): serve -s build -l 3000 (3000번 포트)

리액트 앱 B (예: 관리자 페이지)

프로덕션 빌드: npm run build

서비스 실행 (serve 사용 예시): serve -s build -l 3001 (3001번 포트)

API 서버 A (Node.js/Express 예시)

서버 코드에서 포트 지정: app.listen(8080) (8080번 포트)

API 서버 B

서버 코드에서 포트 지정: app.listen(8081) (8081번 포트)

이 서비스들을 서버가 재부팅되어도 자동으로 실행되도록 PM2와 같은 프로세스 매니저를 사용하는 것이 좋습니다.

PM2로 서비스 등록 및 자동 실행
PM2를 사용하면 각 앱을 손쉽게 백그라운드에서 실행하고 관리할 수 있습니다.

Bash

# PM2 설치 (전역)
sudo npm install pm2 -g

# 각 서비스 등록
# --name 으로 서비스별 이름 지정
pm2 start serve --name "react-main" -- -s build -l 3000
pm2 start serve --name "react-admin" -- -s build -l 3001
pm2 start app.js --name "api-main" -- --port 8080  # Node.js API 실행
pm2 start other_api.js --name "api-sub" -- --port 8081

# 현재 실행 중인 프로세스 목록 확인
pm2 list

# PM2 프로세스를 시스템 서비스로 등록 (부팅 시 자동 시작)
pm2 startup
pm2 save
## 2단계: Nginx로 요청 분기하기 (Reverse Proxy 설정)
이제 Nginx가 외부 요청을 받아 내부 포트로 연결해주도록 설정합니다. URL 경로를 기준으로 분기하는 방법이 가장 일반적입니다.

Nginx 설정 파일 열기

Bash

sudo nano /etc/nginx/sites-available/your-app-name
설정 파일 수정

/ 로 접속하면 메인 리액트 앱, /admin 으로 접속하면 관리자 앱, /api 로 접속하면 메인 API 서버로 요청을 전달하는 예시입니다.

Nginx

server {
    listen 80;
    server_name your-domain.com; # 서버 IP 또는 도메인

    # 1. 메인 React 앱 (루트 경로: /)
    location / {
        # 3000번 포트에서 실행 중인 서비스로 전달
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 2. 관리자용 React 앱 (경로: /admin)
    location /admin {
        # 3001번 포트에서 실행 중인 서비스로 전달
        proxy_pass http://localhost:3001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # 주의: React Router를 사용하는 경우 경로 문제가 발생할 수 있습니다.
        # React 앱의 package.json에 "homepage": "/admin" 설정이 필요할 수 있습니다.
    }

    # 3. 메인 API 서버 (경로: /api)
    location /api {
        # 8080번 포트에서 실행 중인 서비스로 전달
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 4. 또 다른 API 서버 (경로: /sub-api)
    location /sub-api {
        # 8081번 포트에서 실행 중인 서비스로 전달
        proxy_pass http://localhost:8081;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
Nginx 재시작
설정을 저장한 후 Nginx를 재시작하여 적용합니다.

Bash

sudo systemctl restart nginx
이제 사용자는 브라우저에서 아래와 같이 접속할 수 있습니다.

http://your-domain.com → 내부적으로 3000번 포트의 메인 리액트 앱으로 연결

http://your-domain.com/admin → 내부적으로 3001번 포트의 관리자 리액트 앱으로 연결

http://your-domain.com/api/users → 내부적으로 8080번 포트의 메인 API 서버로 연결

http://your-domain.com/sub-api/items → 내부적으로 8081번 포트의 서브 API 서버로 연결

flask strramlit도잇어여러개




생각하는 과정 표시
네, Flask와 Streamlit 애플리케이션도 문제없이 동일한 방식으로 추가할 수 있습니다. 리액트(React), API 서버, Flask, Streamlit 등 종류에 상관없이 모든 웹 서비스를 Nginx 리버스 프록시 뒤에서 함께 운영할 수 있습니다.

핵심은 Nginx를 관문(Gateway)처럼 사용하여 URL 주소에 따라 요청을 올바른 내부 서비스(Flask, Streamlit, React 등)로 연결해주는 것입니다.

## 1단계: Flask, Streamlit 앱을 PM2로 실행하기
먼저 각 Flask와 Streamlit 앱을 고유한 포트에서 실행하고, 이전과 마찬가지로 PM2에 등록하여 관리합니다.

Flask 앱 실행 (Gunicorn 사용 추천)

Flask는 운영 환경에서 Gunicorn과 같은 WSGI 서버로 실행하는 것이 안정적입니다.

Gunicorn 설치: pip install gunicorn

PM2로 등록 (예: 5000번 포트):

Bash

# myapp.py 파일의 app 객체를 실행
pm2 start gunicorn --name "flask-app" -- -w 4 -b 0.0.0.0:5000 myapp:app
Streamlit 앱 실행

Streamlit은 내장 서버를 사용합니다.

PM2로 등록 (예: 8501번 포트):

Bash

# app.py 라는 streamlit 파일을 실행
# 명령어 뒤의 인자는 -- 로 구분해줍니다.
pm2 start streamlit --name "streamlit-dashboard" -- run app.py -- --server.port 8501
이제 PM2 상태를 확인하면 모든 서비스가 각각의 포트에서 실행 중인 것을 볼 수 있습니다.

Bash

pm2 list
## 2단계: Nginx 설정에 Flask, Streamlit 경로 추가하기
다음으로, Nginx 설정 파일에 새로운 경로(location)를 추가하여 Flask와 Streamlit으로 요청을 전달합니다.

Nginx 설정 파일 열기:

Bash

sudo nano /etc/nginx/sites-available/your-app-name
전체 설정 파일 예시:
이전의 리액트, API 설정에 Flask, Streamlit 설정을 추가한 최종 버전입니다.

Nginx

server {
    listen 80;
    server_name 10.244.x.x; # 서버의 인트라넷 IP 또는 도메인

    # (기존) 메인 React 앱 (http://localhost:3000)
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # (기존) API 서버 (http://localhost:8080)
    location /api {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # (추가) Flask 앱 (http://localhost:5000)
    location /flask-api {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # (추가) Streamlit 대시보드 (http://localhost:8501)
    location /dashboard {
        proxy_pass http://127.0.0.1:8501;

        # Streamlit의 실시간 상호작용을 위한 WebSocket 설정 (필수!)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_read_timeout 86400;
    }
}
⭐ 중요: Streamlit은 **웹소켓(WebSocket)**을 사용하므로, proxy_set_header Upgrade와 proxy_set_header Connection "upgrade" 설정이 반드시 포함되어야 정상적으로 작동합니다.

Nginx 재시작:

Bash

sudo systemctl restart nginx
## 최종 결과 🚀
이제 사용자는 외부에서 아래 주소로 각각의 서비스에 접근할 수 있습니다.

http://10.244.x.x/ → React 앱

http://10.244.x.x/api/data → Node.js API 서버

http://10.244.x.x/flask-api/predict → Flask 앱

http://10.244.x.x/dashboard → Streamlit 대시보드

이렇게 Nginx를 활용하면 하나의 서버와 IP 주소로 다양한 종류의 웹 서비스를 깔끔하게 통합하여 운영할 수 있습니다.


아주상세절차 지금쓰고잇는거 빌드로서비스 .. 적어바




생각하는 과정 표시
네, 알겠습니다. 현재 개발 중인 여러 애플리케이션(React, API, Flask, Streamlit)을 실제 서비스로 전환하는 아주 상세한 절차를 처음부터 끝까지 정리해 드리겠습니다.

이 가이드는 Ubuntu 서버 환경을 기준으로 하며, PM2로 각 서비스를 백그라운드에서 실행하고 Nginx를 통해 외부 요청을 각 서비스에 연결하는 표준적인 방법을 따릅니다.

## 사전 준비: 환경 설정 ✅
본격적인 배포 전에 서버에 필요한 도구들이 설치되어 있는지 확인합니다.

Bash

# Nginx (웹 서버/리버스 프록시) 설치
sudo apt-get update
sudo apt-get install nginx -y

# Node.js, npm (React 및 API 서버 실행용) 설치
# LTS 버전 설치를 권장합니다.
curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt-get install -y nodejs

# Python, pip (Flask, Streamlit 실행용) 설치
sudo apt-get install python3 python3-pip -y

# PM2 (프로세스 매니저) 전역 설치
sudo npm install pm2 -g
## 1단계: 각 애플리케이션 빌드 및 준비 ⚙️
각 애플리케이션을 서버에 올리고, 운영 환경에 맞게 빌드하거나 준비합니다.

1. React 앱 (프론트엔드)
서버의 적절한 위치에 React 프로젝트 코드를 업로드합니다. (예: /var/www/my-react-app)

Bash

# 프로젝트 폴더로 이동
cd /var/www/my-react-app

# 의존성 패키지 설치
npm install

# 프로덕션용으로 빌드
npm run build
결과: 프로젝트 내에 build 라는 폴더가 생성됩니다. 이 폴더 안의 정적 파일들(index.html 등)이 실제 서비스될 파일입니다.

2. Node.js API 서버
서버의 적절한 위치에 API 서버 코드를 업로드합니다. (예: /var/www/my-api-server)

Bash

# 프로젝트 폴더로 이동
cd /var/www/my-api-server

# 의존성 패키지 설치
npm install
3. Flask 앱
서버의 적절한 위치에 Flask 앱 코드를 업로드합니다. (예: /var/www/my-flask-app)

Bash

# 프로젝트 폴더로 이동
cd /var/www/my-flask-app

# 가상환경 생성 및 활성화 (권장)
python3 -m venv venv
source venv/bin/activate

# 의존성 패키지 설치 (requirements.txt 파일 사용)
pip install -r requirements.txt
pip install gunicorn  # 운영용 WSGI 서버 설치
4. Streamlit 앱
서버의 적절한 위치에 Streamlit 앱 코드를 업로드합니다. (예: /var/www/my-streamlit-app)

Bash

# 프로젝트 폴더로 이동
cd /var/www/my-streamlit-app

# 가상환경 생성 및 활성화 (권장)
python3 -m venv venv
source venv/bin/activate

# 의존성 패키지 설치
pip install -r requirements.txt
## 2단계: PM2로 모든 서비스 백그라운드 실행 🚀
이제 각 애플리케이션을 PM2를 사용하여 백그라운드에서 영구적으로 실행시킵니다.

1. React 앱 서비스 실행 (serve 사용)
빌드된 정적 파일을 서비스하기 위해 serve 패키지를 사용합니다.

Bash

# serve 패키지 전역 설치
sudo npm install serve -g

# React 빌드 폴더를 3000번 포트로 서비스 (프로젝트 폴더 안에서 실행)
cd /var/www/my-react-app
pm2 start serve --name "react-app" -- -s build -l 3000
2. Node.js API 서버 실행
Bash

cd /var/www/my-api-server
# app.js를 8080번 포트로 실행 (실행 파일과 포트는 실제 프로젝트에 맞게 수정)
pm2 start app.js --name "api-server" -- --port 8080
3. Flask 앱 실행 (Gunicorn 사용)
Bash

cd /var/www/my-flask-app
# 가상환경의 gunicorn을 사용, myapp.py의 app 객체를 5000번 포트로 실행
pm2 start venv/bin/gunicorn --name "flask-app" -- -w 4 -b 0.0.0.0:5000 myapp:app
4. Streamlit 앱 실행
Bash

cd /var/www/my-streamlit-app
# 가상환경의 streamlit을 사용, app.py를 8501번 포트로 실행
pm2 start venv/bin/streamlit --name "streamlit-app" -- run app.py -- --server.port 8501
5. PM2 상태 확인 및 자동 시작 설정
모든 서비스가 정상적으로 실행되는지 확인하고, 서버 재부팅 시 자동으로 시작되도록 설정합니다.

Bash

# 현재 실행 중인 모든 서비스 목록 확인
pm2 list

# 현재 목록을 부팅 시 자동 시작 스크립트로 저장
pm2 startup

# (화면에 나타나는 명령어를 복사/붙여넣기하여 실행해야 합니다)

# 현재 PM2 프로세스 목록 저장
pm2 save
## 3단계: Nginx로 요청 분기 설정 (Reverse Proxy) 🌐
이제 마지막으로, 외부에서 들어오는 요청(80번 포트)을 Nginx가 받아서 각 서비스의 내부 포트로 연결해주는 설정을 진행합니다.

새로운 Nginx 설정 파일 생성:

Bash

sudo nano /etc/nginx/sites-available/my-multi-service
설정 파일 내용 전체 복사 및 붙여넣기:
server_name을 실제 서버 IP 주소나 도메인으로 변경하세요.

Nginx

server {
    listen 80;
    server_name 10.244.x.x; # <-- 여기에 서버 IP 또는 도메인 입력

    # 기본 접속 ( / ) -> React 앱 (3000번 포트)
    location / {
        proxy_pass http://127.0.0.1:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # /api 경로 -> Node.js API (8080번 포트)
    location /api {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # /flask 경로 -> Flask 앱 (5000번 포트)
    location /flask {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # /dashboard 경로 -> Streamlit 앱 (8501번 포트)
    location /dashboard {
        proxy_pass http://127.0.0.1:8501;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade"; # WebSocket을 위한 필수 설정
        proxy_set_header Host $host;
        proxy_read_timeout 86400;
    }
}
설정 활성화 및 Nginx 재시작:

Bash

# 생성한 설정을 활성화
sudo ln -s /etc/nginx/sites-available/my-multi-service /etc/nginx/sites-enabled/

# 기본 설정 파일과의 충돌을 막기 위해 기본 파일 링크 제거 (선택 사항)
sudo rm /etc/nginx/sites-enabled/default

# Nginx 설정 문법 오류 검사
sudo nginx -t

# Nginx 재시작하여 설정 적용
sudo systemctl restart nginx
## 4단계: 최종 확인 및 문제 해결 🔍
방화벽 확인: Ubuntu의 방화벽(UFW)이 80번 포트를 허용하는지 확인합니다.

Bash

sudo ufw allow 'Nginx Full' # 또는 sudo ufw allow 80
sudo ufw status
접속 테스트: 웹 브라우저에서 각 경로로 접속하여 서비스가 잘 보이는지 확인합니다.

http://<서버-IP>/ → React 앱

http://<서버-IP>/api/some-route → API 서버

http://<서버-IP>/flask/some-route → Flask 앱

http://<서버-IP>/dashboard → Streamlit 앱

문제 발생 시:

앱 로그 확인: pm2 logs <앱이름> (예: pm2 logs react-app) 명령어로 각 앱의 로그를 확인하여 오류가 없는지 봅니다.