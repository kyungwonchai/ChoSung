, 죄송합니다. 제가 잘못된 정보를 제공했습니다. PropertyChanged 이벤트는 INotifyPropertyChanged 인터페이스의 구현 부분에서만 정의되며, 이벤트 핸들러를 직접 호출하는 것은 표준적인 방법이 아닙니다. 대신, 모델 내에서 속성이 변경될 때 PropertyChanged 이벤트를 발생시키는 메서드를 호출하는 방식으로 처리해야 합니다.

다음은 INotifyPropertyChanged를 구현하는 모델 클래스의 예시입니다. 이 클래스 내에서 속성이 변경될 때마다 PropertyChanged 이벤트를 발생시키는 방식으로 구현됩니다.

csharp
Copy code
public class YourModelType : INotifyPropertyChanged
{
    private string _exampleProperty;

    public string ExampleProperty
    {
        get { return _exampleProperty; }
        set
        {
            if (_exampleProperty != value)
            {
                _exampleProperty = value;
                OnPropertyChanged(nameof(ExampleProperty));
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
이러한 구조를 가진 모델을 사용하면, 속성의 값이 변경될 때마다 PropertyChanged 이벤트가 자동으로 발생하여 바인딩된 UI 요소가 업데이트됩니다.

CellValueChanged 이벤트 핸들러에서는 리플렉션을 사용하여 속성 값을 변경하는 방식으로 처리할 수 있으며, 모델 자체에서 PropertyChanged 이벤트를 발생시켜야 합니다. 이벤트 핸들러에서 직접 PropertyChanged 이벤트를 발생시키는 것은 적절하지 