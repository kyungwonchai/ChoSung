겠습니다. 실행 시 발생하는 연결 관련 오류와 특정 콤보박스(관리담당자, 소파트)가 작동하지 않는 문제를 해결하기 위해 관련 파일 전체 코드를 점검하고 수정하여 다시 제공해 드리겠습니다.

오류 원인 분석 및 해결 방향:

연결 오류 ("열린 연결...", 등):

DbContext 관리: 여러 ViewModel에서 LockerDbContext 인스턴스를 별도로 생성하고 관리하면 연결 충돌이나 리소스 누수가 발생하기 쉽습니다. 가장 좋은 방법은 MainViewModel에서 하나의 DbContext 인스턴스를 생성하고, 이를 MasterDataViewModel과 LogViewModel의 생성자를 통해 전달하여 공유하는 것입니다. 이렇게 하면 MainViewModel이 Dispose될 때 공유된 DbContext도 함께 정리되어 연결이 깔끔하게 닫힙니다. (이전 코드에서 이미 생성자 전달 방식을 사용했으므로, 각 ViewModel이 내부에서 new LockerDbContext()를 호출하지 않는지 확인합니다.)
MARS (Multiple Active Result Sets): App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션이 반드시 포함되어 있는지 재확인합니다. 공유된 DbContext를 사용하더라도 동시에 여러 데이터를 읽어오는 작업(특히 비동기 로딩 중)에는 이 옵션이 필수적입니다.
비동기 작업 완료 대기: 모든 async 메서드 호출 시 await를 사용하여 작업이 완전히 끝날 때까지 기다리는지 확인합니다. (현재 코드는 대부분 잘 되어 있는 것으로 보입니다.)
애플리케이션 종료 시 Dispose 호출: MainWindow.xaml.cs의 Closing 이벤트 핸들러에서 MainViewModel의 Dispose 메서드를 반드시 호출하여 애플리케이션 종료 시 DbContext 리소스가 명시적으로 해제되도록 합니다.
콤보박스 문제 (관리담당자, 소파트):

데이터 로딩 실패: 위에서 언급한 연결 오류로 인해 MainViewModel의 LoadMasterDataAsync 메서드가 실패하면 AllAdministrators나 AllSubParts 컬렉션이 비어있게 되어 콤보박스에 목록이 나타나지 않습니다. 연결 오류를 해결하는 것이 이 문제 해결의 핵심입니다.
XAML 바인딩 확인: MainWindow.xaml에서 해당 GridColumn 내부 ComboBoxEditSettings의 ItemsSource가 AllAdministrators, AllSubParts에 올바르게 바인딩되어 있고 DisplayMember="Name"이 설정되어 있는지 다시 확인합니다.
수정된 전체 코드:

아래에 관련 파일들의 수정된 전체 코드를 작성합니다.

1. App.config (MARS 확인)

연결 문자열에 MultipleActiveResultSets=True;가 포함되어 있는지 확인합니다.

XML

<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>

  <appSettings>
    <add key="MasterKey" value="admin123" /> </appSettings>

  <connectionStrings>
    <add name="LockerDbConnection"
         connectionString="Server=YOUR_SERVER_NAME;Database=LockerManagementDB;Trusted_Connection=True;MultipleActiveResultSets=True;"
         providerName="System.Data.SqlClient"/>
  </connectionStrings>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
  </startup>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters> <parameter value="mssqllocaldb" /> </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>
 1 2. Models 폴더   
1.
learn.microsoft.com
learn.microsoft.com

(이전과 동일 - LockerAssignment.cs, AuditLog.cs, Floor.cs, Zone.cs, SubPart.cs, Administrator.cs, LockerType.cs 파일들이 올바르게 정의되어 있다고 가정)

3. Data/LockerDbContext.cs

(이전과 동일 - 변경 없음)

C#

using LockerManagementApp.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Web.Script.Serialization; // 또는 Newtonsoft.Json

namespace LockerManagementApp.Data
{
    public class LockerDbContext : DbContext
    {
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }

        public LockerDbContext() : base("name=LockerDbConnection") { }

        protected override void OnModelCreating(DbModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); }

        public override int SaveChanges() { var auditEntries = CreateAuditEntries(); var result = base.SaveChanges(); SaveAuditLogs(auditEntries); return result; }
        public override async Task<int> SaveChangesAsync() { var auditEntries = CreateAuditEntries(); var result = await base.SaveChangesAsync(); await SaveAuditLogsAsync(auditEntries); return result; }

        private List<AuditLog> CreateAuditEntries()
        {
            string currentUserName = System.Threading.Thread.CurrentPrincipal?.Identity?.Name ?? "UnknownUser"; // 실제 사용자 정보 가져오기
            var auditEntries = new List<AuditLog>();
            var changedEntries = ChangeTracker.Entries().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted).ToList();
            var serializer = new JavaScriptSerializer(); // Newtonsoft.Json 권장

            foreach (var entry in changedEntries)
            {
                if (entry.Entity is AuditLog) continue;
                var auditEntry = new AuditLog { Timestamp = DateTime.Now, UserName = currentUserName, TableName = entry.Entity.GetType().Name, Action = entry.State.ToString() };
                try { auditEntry.RecordId = entry.Property("Id").CurrentValue?.ToString(); } catch { auditEntry.RecordId = "N/A"; }
                var oldValues = new Dictionary<string, object>(); var newValues = new Dictionary<string, object>(); var affectedColumns = new List<string>();

                if (entry.State == EntityState.Added) { foreach (var pn in entry.CurrentValues.PropertyNames) newValues[pn] = entry.CurrentValues[pn]; auditEntry.NewValues = serializer.Serialize(newValues); }
                else if (entry.State == EntityState.Deleted) { foreach (var pn in entry.OriginalValues.PropertyNames) oldValues[pn] = entry.OriginalValues[pn]; auditEntry.OldValues = serializer.Serialize(oldValues); }
                else if (entry.State == EntityState.Modified)
                {
                    foreach (var pn in entry.OriginalValues.PropertyNames) { var ov = entry.OriginalValues[pn]; var cv = entry.CurrentValues[pn]; if (!Equals(ov, cv)) { affectedColumns.Add(pn); oldValues[pn] = ov; newValues[pn] = cv; } }
                    if (affectedColumns.Any()) { auditEntry.AffectedColumns = string.Join(",", affectedColumns); auditEntry.OldValues = serializer.Serialize(oldValues); auditEntry.NewValues = serializer.Serialize(newValues); } else continue;
                }
                auditEntries.Add(auditEntry);
            }
            UpdateLockerAssignmentTimestamps(changedEntries); return auditEntries;
        }
        private void SaveAuditLogs(List<AuditLog> auditEntries) { if (auditEntries.Any()) { this.AuditLogs.AddRange(auditEntries); base.SaveChanges(); } }
        private async Task SaveAuditLogsAsync(List<AuditLog> auditEntries) { if (auditEntries.Any()) { this.AuditLogs.AddRange(auditEntries); await base.SaveChangesAsync(); } }
        private void UpdateLockerAssignmentTimestamps(List<DbEntityEntry> changedEntries) { var lockerEntries = changedEntries.Where(e => e.Entity is LockerAssignment && (e.State == EntityState.Added || e.State == EntityState.Modified)); foreach (var entry in lockerEntries) ((LockerAssignment)entry.Entity).LastUpdated = DateTime.Now; }
    }
}
4. Infrastructure 폴더

(ViewModelBase.cs, RelayCommand.cs, PasswordHelper.cs - 이전과 동일)

5. ViewModels 폴더

MainViewModel.cs (수정)

(이전 최종 버전과 동일 - RollbackChanges 매개변수 List<> 타입, LoadMasterDataAsync에서 중복 호출 제거 등 확인)

C#

// 필요한 네임스페이스 추가
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic; // List<T> 사용
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 및 ConnectionStrings 사용 위해 추가
using System.Data.Entity;
using System.Data.Entity.Infrastructure; // DbEntityEntry, DbUpdateException 사용
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices; // Marshal 사용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 윈도우(MainWindow)와 연결되는 주 ViewModel 클래스입니다.
    /// (.NET Framework 4.8 버전 - 최종)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";

        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;

        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        // 자식 ViewModel 인스턴스 (DbContext 공유)
        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }

        #region Public Properties
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        #endregion

        public MainViewModel()
        {
            try
            {
                _context = new LockerDbContext(); // 여기서 DbContext 생성 (공유 목적)
                // 연결 테스트 (선택 사항)
                // _context.Database.Connection.Open();
                // _context.Database.Connection.Close();
                StatusBarText = "데이터베이스 연결 성공.";
            }
            catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            // 자식 ViewModel 생성 시 공유 DbContext 전달
            MasterDataVM = new MasterDataViewModel(_context);
            LogVM = new LogViewModel(_context);

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync()); // 마스터 데이터만 새로고침

            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        private async Task LoadInitialDataAsync() { await LoadMasterDataAsync(); await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return; StatusBarText = "사물함 목록 로딩 중..."; try { var assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(); LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; } catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); }
        }
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return; StatusBarText = "마스터 데이터 로딩 중..."; try { AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync()); AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync()); AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync()); AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync()); AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync()); StatusBarText = "마스터 데이터 로드 완료."; } catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader")) { HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx); MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); } catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); }
        }
        private void CheckMasterPassword(object parameter) { try { string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"]; if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }

        #region CRUD 및 기타 메서드
        private async Task SaveChangesAsync()
        {
             if (_context == null) return; StatusBarText = "변경 사항 저장 중..."; List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); }
        }
        private void RollbackChanges(List<DbEntityEntry> changedEntries) { if (_context == null || changedEntries == null) return; foreach (var entry in changedEntries) { switch (entry.State) { case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        #endregion

        #region Helper Methods
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현 (DbContext 해제)
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } } // DbContext 해제 확인
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
MasterDataViewModel.cs

(이전 최종 버전과 동일 - DbContext를 생성자에서 받음)

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    public class MasterDataViewModel : ViewModelBase
    {
        private readonly LockerDbContext _context; // 생성자에서 전달받은 DbContext 사용

        public ObservableCollection<LockerType> LockerTypes { get; set; }
        public ObservableCollection<Floor> Floors { get; set; }
        public ObservableCollection<Zone> Zones { get; set; }
        public ObservableCollection<SubPart> SubParts { get; set; }
        public ObservableCollection<Administrator> Administrators { get; set; }

        private object _selectedItem;
        public object SelectedItem { get => _selectedItem; set { if (SetProperty(ref _selectedItem, value)) ((RelayCommand)DeleteItemCommand).RaiseCanExecuteChanged(); } }

        private string _statusMessage;
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadAllMasterDataCommand { get; }
        public ICommand AddItemCommand { get; }
        public ICommand DeleteItemCommand { get; }
        public ICommand SaveChangesCommand { get; }

        public MasterDataViewModel(LockerDbContext context) // DbContext를 외부에서 받음
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            // 여기서 new LockerDbContext() 호출하지 않음!

            LockerTypes = new ObservableCollection<LockerType>();
            Floors = new ObservableCollection<Floor>();
            Zones = new ObservableCollection<Zone>();
            SubParts = new ObservableCollection<SubPart>();
            Administrators = new ObservableCollection<Administrator>();

            LoadAllMasterDataCommand = new RelayCommand(async _ => await LoadAllMasterDataAsync());
            AddItemCommand = new RelayCommand(AddItem, CanAddItem);
            DeleteItemCommand = new RelayCommand(DeleteItem, CanDeleteItem);
            SaveChangesCommand = new RelayCommand(async _ => await SaveMasterDataChangesAsync());

            _ = LoadAllMasterDataAsync();
        }

        public async Task LoadAllMasterDataAsync() { StatusMessage = "마스터 데이터 로딩 중..."; try { var lockerTypes = await _context.LockerTypes.OrderBy(x => x.Name).ToListAsync(); LockerTypes.Clear(); lockerTypes.ForEach(LockerTypes.Add); var floors = await _context.Floors.OrderBy(x => x.Name).ToListAsync(); Floors.Clear(); floors.ForEach(Floors.Add); var zones = await _context.Zones.OrderBy(x => x.Name).ToListAsync(); Zones.Clear(); zones.ForEach(Zones.Add); var subParts = await _context.SubParts.OrderBy(x => x.Name).ToListAsync(); SubParts.Clear(); subParts.ForEach(SubParts.Add); var administrators = await _context.Administrators.OrderBy(x => x.Name).ToListAsync(); Administrators.Clear(); administrators.ForEach(Administrators.Add); StatusMessage = "마스터 데이터 로드 완료."; } catch (Exception ex) { StatusMessage = $"마스터 데이터 로딩 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }
        private bool CanAddItem(object parameter) => parameter is string category && !string.IsNullOrEmpty(category);
        private void AddItem(object parameter) { if (parameter is string category) { try { object newItem = null; switch (category.ToLower()) { case "lockertype": newItem = _context.LockerTypes.Add(new LockerType { Name = "새 종류" }); LockerTypes.Add((LockerType)newItem); break; case "floor": newItem = _context.Floors.Add(new Floor { Name = "새 층" }); Floors.Add((Floor)newItem); break; case "zone": newItem = _context.Zones.Add(new Zone { Name = "새 구역" }); Zones.Add((Zone)newItem); break; case "subpart": newItem = _context.SubParts.Add(new SubPart { Name = "새 소파트" }); SubParts.Add((SubPart)newItem); break; case "administrator": newItem = _context.Administrators.Add(new Administrator { Name = "새 관리자" }); Administrators.Add((Administrator)newItem); break; default: MessageBox.Show("알 수 없는 카테고리.", "오류"); return; } SelectedItem = newItem; StatusMessage = "새 항목 추가됨. 저장 필요."; } catch (Exception ex) { StatusMessage = $"항목 추가 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } }
        private bool CanDeleteItem(object parameter) => SelectedItem != null;
        private void DeleteItem(object parameter) { if (SelectedItem == null) return; string itemName = GetItemName(SelectedItem); if (itemName == null) return; string confirmMessage = $"'{itemName}' 삭제?"; if (HasAssociatedAssignments(SelectedItem, itemName)) { confirmMessage += "\n\n경고: 사용 중인 사물함 정보가 있습니다!"; } if (MessageBox.Show(confirmMessage, "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { try { if (SelectedItem is LockerType lt) { _context.Entry(lt).State = EntityState.Deleted; LockerTypes.Remove(lt); } else if (SelectedItem is Floor f) { _context.Entry(f).State = EntityState.Deleted; Floors.Remove(f); } else if (SelectedItem is Zone z) { _context.Entry(z).State = EntityState.Deleted; Zones.Remove(z); } else if (SelectedItem is SubPart sp) { _context.Entry(sp).State = EntityState.Deleted; SubParts.Remove(sp); } else if (SelectedItem is Administrator ad) { _context.Entry(ad).State = EntityState.Deleted; Administrators.Remove(ad); } else { return; } SelectedItem = null; StatusMessage = "항목 삭제 대기 중. 저장 필요."; } catch (Exception ex) { StatusMessage = $"항목 삭제 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); _ = LoadAllMasterDataAsync(); } } }
        private string GetItemName(object item) { return item?.GetType().GetProperty("Name")?.GetValue(item)?.ToString(); }
        private bool HasAssociatedAssignments(object item, string itemName) { if (item == null || string.IsNullOrEmpty(itemName)) return false; try { if (item is LockerType) return _context.LockerAssignments.Any(a => a.LockerType == itemName); if (item is Floor) return _context.LockerAssignments.Any(a => a.Floor == itemName); if (item is Zone) return _context.LockerAssignments.Any(a => a.Zone == itemName); if (item is SubPart) return _context.LockerAssignments.Any(a => a.SubPart == itemName); if (item is Administrator) return _context.LockerAssignments.Any(a => a.Administrator == itemName); } catch (Exception ex) { System.Diagnostics.Debug.WriteLine($"연관 데이터 확인 오류: {ex.Message}"); return true; } return false; }
        private async Task SaveMasterDataChangesAsync() { StatusMessage = "마스터 데이터 저장 중..."; using (var transaction = _context.Database.BeginTransaction()) { try { var modifiedNameEntries = _context.ChangeTracker.Entries().Where(e => e.State == EntityState.Modified && (e.Entity is LockerType || e.Entity is Floor || e.Entity is Zone || e.Entity is SubPart || e.Entity is Administrator)).Select(e => new { Entry = e, OriginalName = e.OriginalValues["Name"]?.ToString(), CurrentName = e.CurrentValues["Name"]?.ToString() }).Where(x => x.OriginalName != null && x.CurrentName != null && x.OriginalName != x.CurrentName).ToList(); foreach (var modified in modifiedNameEntries) { StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' 연쇄 업데이트 중..."; int updatedCount = 0; string updateSql = ""; string targetColumn = ""; if (modified.Entry.Entity is LockerType) targetColumn = "LockerType"; else if (modified.Entry.Entity is Floor) targetColumn = "Floor"; else if (modified.Entry.Entity is Zone) targetColumn = "Zone"; else if (modified.Entry.Entity is SubPart) targetColumn = "SubPart"; else if (modified.Entry.Entity is Administrator) targetColumn = "Administrator"; if (!string.IsNullOrEmpty(targetColumn)) { updateSql = $"UPDATE LockerAssignments SET [{targetColumn}] = {{0}} WHERE [{targetColumn}] = {{1}}"; updatedCount = await _context.Database.ExecuteSqlCommandAsync(updateSql, modified.CurrentName, modified.OriginalName); StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' ({updatedCount}개 업데이트 완료)."; System.Diagnostics.Debug.WriteLine($"Executed: {updateSql} with params '{modified.CurrentName}', '{modified.OriginalName}'. Rows: {updatedCount}"); } } int masterDataChanges = await _context.SaveChangesAsync(); transaction.Commit(); StatusMessage = $"마스터 데이터 저장 완료 ({masterDataChanges}건)."; } catch (Exception ex) { transaction.Rollback(); StatusMessage = $"마스터 데이터 저장 오류: {ex.Message}"; MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error); var errorEntries = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged && e.State != EntityState.Detached); foreach (var entry in errorEntries.ToList()) { try { entry.Reload(); } catch { entry.State = EntityState.Detached; } } } } await LoadAllMasterDataAsync(); }
    }
}
LogViewModel.cs

(이전 최종 버전과 동일 - DbContext를 생성자에서 받음)

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    public class LogViewModel : ViewModelBase
    {
        private readonly LockerDbContext _context; // 생성자에서 전달받은 DbContext 사용
        public ObservableCollection<AuditLog> AuditLogs { get; set; }
        private string _statusMessage;
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }
        public ICommand LoadLogsCommand { get; }

        public LogViewModel(LockerDbContext context) // DbContext를 외부에서 받음
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            AuditLogs = new ObservableCollection<AuditLog>();
            LoadLogsCommand = new RelayCommand(async _ => await LoadLogsAsync());
            _ = LoadLogsAsync();
        }

        public async Task LoadLogsAsync() { StatusMessage = "로그 로딩 중..."; try { var logs = await _context.AuditLogs.OrderByDescending(log => log.Timestamp).Take(1000).ToListAsync(); AuditLogs.Clear(); logs.ForEach(AuditLogs.Add); StatusMessage = $"총 {AuditLogs.Count}개 로그 로드."; } catch (Exception ex) { StatusMessage = $"로그 로딩 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }
    }
}
6. Views 폴더

MainWindow.xaml

(이전 최종 버전과 동일 - ComboBox 바인딩 등 확인)

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >
    <dx:ThemedWindow.DataContext> <viewmodels:MainViewModel/> </dx:ThemedWindow.DataContext>
    <dx:ThemedWindow.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/> <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
    </dx:ThemedWindow.Resources>
    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>
        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal"> <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}"/> <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}"/> </StackPanel>
            </Border>
        </DockPanel>
        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="사물함 관리">
                <Grid>
                    <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                    <Border Grid.Row="0" Background="WhiteSmoke" Padding="3"> <StackPanel Orientation="Horizontal"> <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/> <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/> <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/> </StackPanel> </Border>
                    <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                        <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always"> <dxg:TableView.RowCellMenuCustomizations> <dxb:BarButtonItem Content="배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/> <dxb:BarItemSeparator/> <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/> </dxg:TableView.RowCellMenuCustomizations> </dxg:TableView> </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="변경 로그" DataContext="{Binding LogVM}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>
                     <Button Grid.Row="0" Content="🔄 로그 새로고침" Command="{Binding LoadLogsCommand}" HorizontalAlignment="Left" Margin="5"/>
                     <dxg:GridControl Grid.Row="1" ItemsSource="{Binding AuditLogs}">
                         <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" AllowEditing="False" ShowGroupPanel="False" ShowAutoFilterRow="True"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="Timestamp" Header="시간" Width="150" SortOrder="Descending" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="UserName" Header="사용자" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Action" Header="작업" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="TableName" Header="테이블" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="RecordId" Header="레코드 ID" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="AffectedColumns" Header="변경 컬럼" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="OldValues" Header="변경 전 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="NewValues" Header="변경 후 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                     <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem> </StatusBar>
                 </Grid>
            </TabItem>
            <TabItem Header="마스터 데이터 관리" DataContext="{Binding MasterDataVM}" Visibility="{Binding DataContext.IsMasterModeEnabled, RelativeSource={RelativeSource AncestorType={dx:ThemedWindow}}, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                     <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5"> <Button Content="💾 마스터 데이터 저장" Command="{Binding SaveChangesCommand}" Margin="3"/> <Button Content="🔄 마스터 데이터 새로고침" Command="{Binding LoadAllMasterDataCommand}" Margin="3"/> <TextBlock Text="{Binding StatusMessage}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="Gray"/> </StackPanel>
                     <dxlc:LayoutControl Grid.Row="1" Orientation="Vertical">
                         <dxlc:LayoutGroup Header="사물함 종류" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="종류 추가" Command="{Binding AddItemCommand}" CommandParameter="LockerType" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding LockerTypes}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="종류 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="층" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="층 추가" Command="{Binding AddItemCommand}" CommandParameter="Floor" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Floors}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="층 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="구역" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="구역 추가" Command="{Binding AddItemCommand}" CommandParameter="Zone" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Zones}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="구역 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="소파트" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="소파트 추가" Command="{Binding AddItemCommand}" CommandParameter="SubPart" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding SubParts}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="소파트 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="관리자" View="GroupBox" Orientation="Vertical"> <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="관리자 추가" Command="{Binding AddItemCommand}" CommandParameter="Administrator" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel> <dxg:GridControl ItemsSource="{Binding Administrators}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="관리자 이름"/> </dxg:GridControl.Columns> </dxg:GridControl> </dxlc:LayoutGroup>
                     </dxlc:LayoutControl>
                 </Grid>
            </TabItem>
        </TabControl>
        <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem> </StatusBar>
    </Grid>
</dx:ThemedWindow>
MainWindow.xaml.cs

(이전 최종 버전과 동일 - Closing 이벤트에서 Dispose 호출 확인)

C#

using DevExpress.Xpf.Core;
using LockerManagementApp.ViewModels;
using System;
using System.ComponentModel;
using System.Windows;

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
            // ApplicationThemeHelper.ApplicationThemeName = Theme.Office2019ColorfulName;
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        // 창이 닫힐 때 ViewModel의 Dispose를 호출하여 DbContext 리소스 정리
        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                disposableViewModel.Dispose();
            }
        }
    }
}
App.xaml 및 App.xaml.cs

(이전 .NET Framework 4.8 버전과 동일)

이제 모든 관련 파일에 대한 코드가 준비되었습니다. 다시 한번 강조하지만, App.config의 연결 문자열에 MultipleActiveResultSets=True; 옵션을 꼭 확인해 주시고, 모든 모델 파일(Floor.cs, Zone.cs 등)이 프로젝트에 올바르게 포함되어 있는지 확인 후 빌드 및 실행해 보시기 바랍니다.