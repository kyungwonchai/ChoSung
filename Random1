1. MainViewModel 코드 (이벤트에 따라 에러 메시지 추가 및 제거)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public event Action<string, bool> ErrorTriggered; // 에러 발생/해결 이벤트 (메시지, 추가 여부)

        private Timer _delayTimer; // 3초 지연 타이머
        private WarningWindow _warningWindow; // 경고창 인스턴스 저장
        private ObservableCollection<ErrorMessage> _errorMessages; // 에러 메시지 목록

        public MainViewModel()
        {
            _delayTimer = new Timer(3000);
            _delayTimer.Elapsed += DelayTimerElapsed;
            _delayTimer.AutoReset = false;

            _errorMessages = new ObservableCollection<ErrorMessage>();

            // 에러 발생/해결 이벤트 구독
            ErrorTriggered += HandleErrorEvent;
        }

        // 에러 이벤트 처리 (추가 또는 제거)
        private void HandleErrorEvent(string message, bool isAdd)
        {
            if (isAdd)
            {
                AddErrorMessage(message);
            }
            else
            {
                RemoveErrorMessage(message);
            }
        }

        private void AddErrorMessage(string message)
        {
            if (_errorMessages.Any(m => m.Content == message)) return;

            Color color = _errorMessages.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessages.Add(new ErrorMessage(message, new SolidColorBrush(color)));

            if (_errorMessages.Count == 1)
            {
                ShowWarningWindow(); // 첫 메시지 추가 시 창 표시
            }
            else
            {
                UpdateWarningWindow(); // 메시지 추가 시 창 업데이트
            }

            Debug.WriteLine($"[DEBUG] Error added: {message}");
        }

        private void RemoveErrorMessage(string message)
        {
            var errorMessage = _errorMessages.FirstOrDefault(m => m.Content == message);
            if (errorMessage != null)
            {
                _errorMessages.Remove(errorMessage);
                Debug.WriteLine($"[DEBUG] Error removed: {message}");

                if (_errorMessages.Count == 0)
                {
                    CloseWarningWindow(); // 메시지가 없으면 창 닫기
                }
                else
                {
                    UpdateWarningWindow(); // 메시지 제거 시 창 업데이트
                }
            }
        }

        private void ShowWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindow = new WarningWindow(_errorMessages);
                _warningWindow.Topmost = true;
                _warningWindow.Show();

                _warningWindow.Closed += (sender, e) =>
                {
                    _warningWindow = null;
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void UpdateWarningWindow()
        {
            if (_warningWindow != null)
            {
                _warningWindow.UpdateMessages(_errorMessages);
                Debug.WriteLine("[DEBUG] Warning window updated");
            }
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindow != null)
                {
                    _warningWindow.Close();
                    _warningWindow = null;
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        private void DelayTimerElapsed(object sender, ElapsedEventArgs e)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_errorMessages.Count > 0)
                {
                    ShowWarningWindow();
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessage
    {
        public string Content { get; }
        public SolidColorBrush Color { get; }

        public ErrorMessage(string content, SolidColorBrush color)
        {
            Content = content;
            Color = color;
        }
    }
}
ErrorTriggered 이벤트는 에러가 발생할 때 isAdd = true로 메시지를 추가하고, isAdd = false로 메시지를 제거합니다.
AddErrorMessage: 메시지를 추가하고, 처음 메시지가 들어올 경우 창을 열고, 이후 메시지는 UpdateWarningWindow를 통해 업데이트합니다.
RemoveErrorMessage: 해당 메시지를 제거하며, 마지막 메시지가 제거되면 창을 닫습니다.
ShowWarningWindow 및 CloseWarningWindow: 경고창을 열고 닫으며 로그를 남깁니다.
2. WarningWindow.xaml
여러 메시지를 표시하기 위해 ItemsControl을 사용하여 템플릿을 구성합니다.

xml
코드 복사
<Window x:Class="YourNamespace.WarningWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Warning" Height="500" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="#AAFF0000"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen" 
        MouseDown="Window_MouseDown">
    <Grid>
        <ItemsControl ItemsSource="{Binding ErrorMessages}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Content}"
                               FontSize="15"
                               Foreground="{Binding Color}"
                               TextAlignment="Center"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
WarningWindow.xaml.cs
경고창에서 전달된 메시지를 실시간으로 업데이트할 수 있도록 ObservableCollection을 사용합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows;

namespace YourNamespace
{
    public partial class WarningWindow : Window
    {
        public ObservableCollection<ErrorMessage> ErrorMessages { get; set; } = new ObservableCollection<ErrorMessage>();

        public WarningWindow(ObservableCollection<ErrorMessage> errorMessages)
        {
            InitializeComponent();
            ErrorMessages = errorMessages;
            DataContext = this;
        }

        public void UpdateMessages(ObservableCollection<ErrorMessage> errorMessages)
        {
            ErrorMessages.Clear();
            foreach (var message in errorMessages)
            {
                ErrorMessages.Add(message);
            }
        }

        private void Window_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            this.Close(); // 클릭하면 창 닫기
        }
    }
}
3. 외부 클래스에서 이벤트를 통한 에러 발생 및 해제
외부 클래스에서 MainViewModel의 이벤트를 통해 에러를 발생시키고, 해제합니다.

csharp
코드 복사
namespace YourNamespace
{
    public class SampleErrorTrigger
    {
        public event Action<string, bool> OnError; // 에러 메시지 이벤트 (메시지, 추가 여부)

        public void TriggerError(string message)
        {
            OnError?.Invoke(message, true); // 에러 발생
        }

        public void ResolveError(string message)
        {
            OnError?.Invoke(message, false); // 에러 해결
        }
    }
}
MainWindow에서 이벤트 연결
SampleErrorTrigger의 OnError 이벤트를 MainViewModel의 ErrorTriggered에 연결하여 에러 메시지가 추가되거나 제거될 때마다 창을 자동으로 제어합니다.

csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private SampleErrorTrigger _errorTrigger;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            _errorTrigger = new SampleErrorTrigger();
            _errorTrigger.OnError += _viewModel.ErrorTriggered; // 이벤트 연결
        }

        private void OnAddErrorMessageClicked(object sender, RoutedEventArgs e)
        {
            _errorTrigger.TriggerError("Critical Error!\nSystem temperature too high.\nImmediate cooling required.");
            _errorTrigger.TriggerError("Warning!\nNetwork connection lost.\nAttempting to reconnect...");
        }

        private void OnResolveErrorMessageClicked(object sender, RoutedEventArgs e)
        {
            _errorTrigger.ResolveError("Critical Error!\nSystem temperature too high.\nImmediate cooling required.");
        }
    }
}
이제 OnAddErrorMessageClicked 버튼을 눌러 에러를 발생시키고, OnResolveErrorMessageClicked 버튼을 눌러 특정 에러 메시지를 제거할 수