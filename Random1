yApps ZXing 라이브러리가 기본적으로 해당 메서드를 제공하지 않기 때문입니다. 대신, 카메라의 자동 초점을 지속적으로 유지하도록 설정할 수 있는 가장 좋은 방법은 CameraSettings에서 제공하는 설정을 사용하는 것입니다.

아래는 autoFocus()를 제거하고 카메라의 연속 초점 모드(CONTINUOUS 모드)를 설정하는 코드입니다.

수정된 MainActivity.kt
kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import com.google.zxing.BarcodeFormat
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.CameraSettings
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DefaultDecoderFactory

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView

    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                setupBarcodeView()
            } else {
                // 권한이 거부된 경우 처리
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED) {
            requestPermissionLauncher.launch(Manifest.permission.CAMERA)
        } else {
            setupBarcodeView()
        }
    }

    private fun setupBarcodeView() {
        barcodeView = findViewById(R.id.camera_preview)

        // 카메라 설정: 자동 초점 및 프리뷰 활성화
        val cameraSettings = CameraSettings().apply {
            isAutoFocusEnabled = true
            focusMode = CameraSettings.FocusMode.CONTINUOUS // 연속 초점 모드 사용
        }
        barcodeView.barcodeView.cameraSettings = cameraSettings

        // QR 코드와 바코드를 모두 인식할 수 있도록 설정
        val formats = listOf(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_39, BarcodeFormat.CODE_128)
        barcodeView.barcodeView.decoderFactory = DefaultDecoderFactory(formats)

        barcodeView.decodeContinuous(object : BarcodeCallback {
            override fun barcodeResult(result: BarcodeResult?) {
                result?.let {
                    findViewById<TextView>(R.id.text_view_result).text =
                        "Scanned: ${it.text} (${it.barcodeFormat})"
                }
            }

            override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
                // Optional: handle potential result points here
            }
        })
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
    }
}
주요 변경 사항:
autoFocus() 제거: 이 메서드가 라이브러리에서 지원되지 않으므로 제거했습니다.
카메라 설정 최적화: CameraSettings에서 isAutoFocusEnabled를 true로 설정하고, focusMode를 CONTINUOUS로 설정하여 카메라가 가능한 한 계속 초점을 유지하도록 합니다.
이 코드로 QR 코드와 바코드를 인식할 때 카메라가 자동 초점을 유지하도록 설정되었습니다. 이 설정은 실시간으로 초점을 조정하여 인식 정확도를 높이는 데 도움이 될 것입니다.