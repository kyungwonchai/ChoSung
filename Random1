 작업을 수행하기 위해, 먼저 checkModelInMySQL 함수에서 smd.management_mobile_checksheet 테이블에서 가장 최근의 check_time을 조회한 다음, 해당 시간이 10분이 지났는지 확인하고, 조건에 따라 새 레코드를 삽입하는 로직을 추가할 수 있습니다.

수정된 checkModelInMySQL 함수
kotlin
코드 복사
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Timestamp
import java.time.LocalDateTime
import java.time.temporal.ChronoUnit

private suspend fun checkModelInMySQL(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        var connection: Connection? = null
        var preparedStatement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null

        try {
            // MySQL JDBC 드라이버 로드
            Class.forName("com.mysql.cj.jdbc.Driver")

            // MySQL 서버에 연결
            val url = "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC"
            connection = DriverManager.getConnection(url, "abc", "1233445")

            // 첫 번째 쿼리: smd.management_mobile_mainseet에서 modelnumber 정보 조회
            val query1 = "SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = ?"
            preparedStatement = connection.prepareStatement(query1)
            preparedStatement.setString(1, qrCode)
            resultSet = preparedStatement.executeQuery()

            if (resultSet.next()) {
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val modelnumber = resultSet.getString("modelnumber")
                result = "District: $district, At: $at, Model: $modelnumber"

                // 두 번째 쿼리: smd.management_mobile_checksheet에서 가장 최근의 check_time 조회
                val query2 = "SELECT check_time FROM smd.management_mobile_checksheet WHERE modelnumber = ? ORDER BY check_time DESC LIMIT 1"
                preparedStatement = connection.prepareStatement(query2)
                preparedStatement.setString(1, modelnumber)
                val checkTimeResultSet = preparedStatement.executeQuery()

                var shouldInsert = true

                if (checkTimeResultSet.next()) {
                    val lastCheckTime = checkTimeResultSet.getTimestamp("check_time")
                    val now = Timestamp.valueOf(LocalDateTime.now())

                    // 10분이 지났는지 확인
                    val minutesElapsed = ChronoUnit.MINUTES.between(lastCheckTime.toLocalDateTime(), now.toLocalDateTime())
                    if (minutesElapsed < 10) {
                        shouldInsert = false
                    }
                }

                // 10분이 지났다면 새로운 레코드를 삽입
                if (shouldInsert) {
                    val insertQuery = """
                        INSERT INTO smd.management_mobile_checksheet 
                        (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                        VALUES ('00000000', '00000000', '00000000', ?, ?, '00000000', ?, '00000000', '00000000', 'mobile', ?)
                    """.trimIndent()

                    preparedStatement = connection.prepareStatement(insertQuery)
                    preparedStatement.setString(1, district)
                    preparedStatement.setString(2, at)
                    preparedStatement.setString(3, modelnumber)
                    preparedStatement.setTimestamp(4, Timestamp.valueOf(LocalDateTime.now()))
                    preparedStatement.executeUpdate()

                    result += " - New record inserted"
                } else {
                    result += " - No insertion, recent check_time is within 10 minutes"
                }
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            result = "SQL error: ${e.message}"
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            result = "JDBC Driver not found: ${e.message}"
        } catch (e: Exception) {
            e.printStackTrace()
            result = "Unexpected error: ${e.message}"
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                connection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
        }

        return@withContext result
    }
}
코드 설명:
Model Number 조회:

먼저 smd.management_mobile_mainseet 테이블에서 modelnumber를 조회합니다.
최근 check_time 조회:

smd.management_mobile_checksheet 테이블에서 modelnumber에 해당하는 가장 최근의 check_time을 조회합니다.
10분 확인:

ChronoUnit.MINUTES.between을 사용해 현재 시간과 check_time을 비교하여 10분이 지났는지 확인합니다.
조건에 따른 삽입:

10분이 지났다면 새 레코드를 삽입하고, 그렇지 않으면 삽입하지 않습니다.
결과 반환:

함수는 최종 결과를 문자열로 반환하며, 새 레코드가 삽입되었는지 여부를 포함합니다.
결론
이 코드는 10분 간격으로 smd.management_mobile_checksheet 테이블에 데이터를 삽입하는 작업을 자동으로 처리합니다. 필요한 경우 수정해서 사용할 수 