import bpy

# 거울 객체 생성
bpy.ops.mesh.primitive_plane_add(size=2, location=(0, 0, 1))
mirror = bpy.context.object

# 거울을 수직으로 회전
mirror.rotation_euler = (1.5708, 0, 0)  # 90도 회전 (라디안 단위)

# 거울 재질 생성
mirror_material = bpy.data.materials.new(name="MirrorMaterial")
mirror_material.use_nodes = True
nodes = mirror_material.node_tree.nodes
links = mirror_material.node_tree.links

# 기본 노드 제거
nodes.clear()

# 노드 추가
output_node = nodes.new(type='ShaderNodeOutputMaterial')
glossy_node = nodes.new(type='ShaderNodeBsdfGlossy')
mix_shader_node = nodes.new(type='ShaderNodeMixShader')
transparent_node = nodes.new(type='ShaderNodeBsdfTransparent')
light_path_node = nodes.new(type='ShaderNodeLightPath')

# 노드 속성 설정
glossy_node.inputs['Roughness'].default_value = 0.0  # 완전한 반사

# 노드 연결
links.new(glossy_node.outputs['BSDF'], mix_shader_node.inputs[2])
links.new(transparent_node.outputs['BSDF'], mix_shader_node.inputs[1])
links.new(light_path_node.outputs['Is Shadow Ray'], mix_shader_node.inputs['Fac'])
links.new(mix_shader_node.outputs['Shader'], output_node.inputs['Surface'])

# 거울 객체에 재질 적용
mirror.data.materials.append(mirror_material)
