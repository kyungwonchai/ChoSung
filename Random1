알겠습니다. 헷갈리게 설명하지 않겠습니다. 정석은 하나입니다.

결론부터 말하면, 포트로 서비스하는 건 개발 단계에서나 쓰는 방식입니다. 실제 서비스 환경에서는 무조건 하나의 주소 뒤에 경로(/)를 붙여서 구분하는 방식이 정석입니다.

나쁜 방법 (X): 10.222.111.111:9001, 10.222.111.111:9002 ...

정석 방법 (O): 10.222.111.111, 10.222.111.111/plantuml1, 10.222.111.111/zenithnote1

이유는 간단합니다. 사용자가 포트 번호를 외울 필요가 없고, 보안(HTTPS/SSL 적용) 및 관리가 훨씬 쉽기 때문입니다. 이 방식에서는 Nginx가 리버스 프록시(Reverse Proxy) 역할을 해서 외부에서는 80번 포트 하나만 열어두고 내부적으로 각 앱으로 요청을 분배합니다.

정석 방법 상세 가이드 (Docker Compose + Nginx)
지금부터 이 정석 방법을 처음부터 끝까지, 군더더기 없이 설명하겠습니다.

? Step 1: 리액트 앱 경로 설정 (가장 중요!)
이걸 안 하면 메뉴 앱들이 열려도 화면이 하얗게 나옵니다. 각 메뉴 앱에게 "너는 이제 루트가 아니라 하위 폴더에서 실행될 거야"라고 알려주는 과정입니다.

react_plantuml 폴더:

package.json 파일 열기: "homepage": "/plantuml1" 추가

JSON

{
  "name": "react-plantuml",
  "homepage": "/plantuml1",
  ...
}
src/App.js 또는 src/index.js 열기: <BrowserRouter>에 basename 추가

JavaScript

<BrowserRouter basename="/plantuml1">
  <App />
</BrowserRouter>
react_zenithnote 폴더:

package.json 파일 열기: "homepage": "/zenithnote1" 추가

JSON

{
  "name": "react-zenithnote",
  "homepage": "/zenithnote1",
  ...
}
src/App.js 또는 src/index.js 열기: <BrowserRouter>에 basename 추가

JavaScript

<BrowserRouter basename="/zenithnote1">
  <App />
</BrowserRouter>
homepage25 폴더(메인 앱)는 이 작업을 할 필요가 없습니다.

? Step 2: 공통 Dockerfile 생성 및 복사
아래 내용으로 Dockerfile 파일을 하나만 만드세요. 그리고 이 파일을 3개의 각 프로젝트 폴더(homepage25, react_plantuml, react_zenithnote) 안에 그대로 복사해 넣습니다.

Dockerfile 내용:

Dockerfile

# 1단계: 빌드 환경
FROM node:18-alpine as builder
WORKDIR /app
COPY package.json ./
COPY package-lock.json ./
RUN npm install
COPY . .
RUN npm run build

# 2단계: 서비스 환경
FROM nginx:1.25-alpine
# 빌드 결과물을 Nginx 웹 루트로 복사
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
이 Dockerfile은 최종적으로 가벼운 Nginx 이미지만 남겨서 효율적입니다.

? Step 3: docker-compose.yml 파일 작성
3개의 프로젝트 폴더와 같은 위치에 docker-compose.yml 파일을 만듭니다. 이 파일이 모든 컨테이너(리액트 앱 3개, Nginx 1개)를 한 번에 관리하는 설계도입니다.

docker-compose.yml 내용:

YAML

version: '3.8'

services:
  # 메인 앱
  homepage:
    build: ./homepage25

  # 메뉴 앱 1
  plantuml:
    build: ./react_plantuml

  # 메뉴 앱 2
  zenithnote:
    build: ./react_zenithnote

  # 교통정리 담당 Nginx
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80" # 외부 요청(80포트)을 Nginx가 받음
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # 아래에서 만들 설정 파일 연결
    depends_on:
      - homepage
      - plantuml
      - zenithnote
핵심: 리액트 앱들은 ports를 외부에 노출하지 않습니다. 오직 Nginx만 80번 포트를 외부에 열고, 내부적으로 앱들과 통신합니다.

? Step 4: nginx.conf 파일 작성
docker-compose.yml과 같은 위치에 nginx.conf 파일을 만듭니다. Nginx가 어떻게 요청을 분배할지 규칙을 정해주는 파일입니다.

nginx.conf 내용:

Nginx

server {
    listen 80;

    # 그냥 IP로만 접속하면 homepage 서비스로 전달
    location / {
        # 'homepage'는 docker-compose.yml에 적은 서비스 이름
        proxy_pass http://homepage;
    }

    # /plantuml1 경로로 접속하면 plantuml 서비스로 전달
    location /plantuml1/ {
        # 'plantuml'은 docker-compose.yml에 적은 서비스 이름
        proxy_pass http://plantuml/;
    }

    # /zenithnote1 경로로 접속하면 zenithnote 서비스로 전달
    location /zenithnote1/ {
        # 'zenithnote'은 docker-compose.yml에 적은 서비스 이름
        proxy_pass http://zenithnote/;
    }
}
proxy_pass http://서비스이름: 이 부분이 Docker Compose 내부 네트워크를 통해 각 앱 컨테이너로 요청을 넘겨주는 핵심입니다.

? Step 5: 실행
최종 폴더 구조는 이렇습니다.

.
├── homepage25/
│   └── Dockerfile
├── react_plantuml/
│   └── Dockerfile
├── react_zenithnote/
│   └── Dockerfile
├── docker-compose.yml
└── nginx.conf
docker-compose.yml 파일이 있는 곳에서 터미널을 열고 아래 명령어를 실행하면 끝입니다.

Bash

docker-compose up --build -d
--build: 소스 코드를 바꿨을 때 등 이미지를 새로 만들어야 할 때 사용

-d: 백그라운드로 실행

?? 이제 브라우저에서 http://10.222.111.111 로 접속하면 메인 앱이, /plantuml1, /zenithnote1 을 붙이면 각각의 메뉴 앱이 보일 겁니다. 이게 정석입니다.