import bpy

# 실행 전 기존 씬의 모든 오브젝트 삭제 (깔끔한 시작을 위해)
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# =================================================================
# 랙 생성을 위한 파라미터 (여기서 수치를 조절하세요)
# =================================================================
# --- 슬롯 관련 ---
SLOT_COUNT = 12
FLOOR_NAMES = ['A', 'B', 'C']  # 위에서부터 A, B, C 층

# --- 크기 관련 (미터 단위) ---
SLOT_WIDTH = 0.15      # 슬롯 1개의 너비
SLOT_HEIGHT = 0.5      # 슬롯 1개의 높이
SLOT_DEPTH = 0.3       # 랙의 깊이
DIVIDER_THICKNESS = 0.01 # 칸막이 두께

# --- 프레임 관련 ---
FRAME_THICKNESS = 0.05 # 외부 프레임 두께

# =================================================================
# 자동 계산 변수 (수정할 필요 없음)
# =================================================================
FLOOR_COUNT = len(FLOOR_NAMES)
RACK_TOTAL_WIDTH = (SLOT_WIDTH * SLOT_COUNT) + (DIVIDER_THICKNESS * (SLOT_COUNT - 1)) + (FRAME_THICKNESS * 2)
RACK_TOTAL_HEIGHT = (SLOT_HEIGHT * FLOOR_COUNT) + (DIVIDER_THICKNESS * (FLOOR_COUNT - 1)) + (FRAME_THICKNESS * 2)

# =================================================================
# 랙 모델링 시작
# =================================================================

# 1. 최상위 부모가 될 빈 오브젝트(Empty) 생성
bpy.ops.object.empty_add(type='PLAIN_AXES', location=(0, 0, 0))
rack_parent = bpy.context.active_object
rack_parent.name = "Rack_Template"

# 2. 외부 프레임 생성
def create_frame_part(name, size, position):
    bpy.ops.mesh.primitive_cube_add(location=position)
    part = bpy.context.active_object
    part.name = name
    part.scale.x = size[0] / 2
    part.scale.y = size[1] / 2
    part.scale.z = size[2] / 2
    part.parent = rack_parent

# --- 수직 프레임 (좌/우)
left_frame_x = -RACK_TOTAL_WIDTH / 2 + FRAME_THICKNESS / 2
right_frame_x = RACK_TOTAL_WIDTH / 2 - FRAME_THICKNESS / 2
frame_y = SLOT_DEPTH / 2 - FRAME_THICKNESS / 2
frame_z = RACK_TOTAL_HEIGHT / 2 - FRAME_THICKNESS / 2
create_frame_part("Frame_Left", (FRAME_THICKNESS, SLOT_DEPTH, RACK_TOTAL_HEIGHT), (left_frame_x, 0, 0))
create_frame_part("Frame_Right", (FRAME_THICKNESS, SLOT_DEPTH, RACK_TOTAL_HEIGHT), (right_frame_x, 0, 0))

# --- 수평 프레임 (상/하)
top_frame_z = RACK_TOTAL_HEIGHT / 2 - FRAME_THICKNESS / 2
bottom_frame_z = -RACK_TOTAL_HEIGHT / 2 + FRAME_THICKNESS / 2
create_frame_part("Frame_Top", (RACK_TOTAL_WIDTH, SLOT_DEPTH, FRAME_THICKNESS), (0, 0, top_frame_z))
create_frame_part("Frame_Bottom", (RACK_TOTAL_WIDTH, SLOT_DEPTH, FRAME_THICKNESS), (0, 0, bottom_frame_z))

# 3. 층간 구분선 및 슬롯 생성
start_x = -RACK_TOTAL_WIDTH / 2 + FRAME_THICKNESS
start_z = RACK_TOTAL_HEIGHT / 2 - FRAME_THICKNESS

for i, floor_name in enumerate(FLOOR_NAMES):
    # 층의 시작 높이 계산
    floor_z_pos = start_z - (SLOT_HEIGHT / 2) - i * (SLOT_HEIGHT + DIVIDER_THICKNESS)
    
    # --- 층간 구분선 생성 (맨 아래층 제외)
    if i < FLOOR_COUNT - 1:
        divider_z = start_z - SLOT_HEIGHT - (i * (SLOT_HEIGHT + DIVIDER_THICKNESS)) - (DIVIDER_THICKNESS / 2)
        bpy.ops.mesh.primitive_cube_add(location=(0, 0, divider_z))
        floor_divider = bpy.context.active_object
        floor_divider.name = f"Floor_Divider_{floor_name}"
        floor_divider.scale.x = (RACK_TOTAL_WIDTH - FRAME_THICKNESS * 2) / 2
        floor_divider.scale.y = SLOT_DEPTH / 2
        floor_divider.scale.z = DIVIDER_THICKNESS / 2
        floor_divider.parent = rack_parent

    # --- 각 층의 슬롯 생성 (핵심)
    for j in range(SLOT_COUNT):
        # 슬롯의 X축 위치 계산
        slot_x_pos = start_x + (SLOT_WIDTH / 2) + j * (SLOT_WIDTH + DIVIDER_THICKNESS)
        
        # 슬롯 오브젝트 생성
        bpy.ops.mesh.primitive_cube_add(location=(slot_x_pos, 0, floor_z_pos))
        slot_obj = bpy.context.active_object
        
        # ★★★ 슬롯 이름 지정 ★★★
        slot_obj.name = f"{floor_name}{j+1:02d}"
        
        # 슬롯 크기 조절 및 부모 설정
        slot_obj.scale.x = SLOT_WIDTH / 2
        slot_obj.scale.y = SLOT_DEPTH / 2
        slot_obj.scale.z = SLOT_HEIGHT / 2
        slot_obj.parent = rack_parent

print("랙 생성이 완료되었습니다: Rack_Template")