using System;
using System.Security; // SecureString 사용
using System.Windows;
using System.Windows.Controls; // PasswordBox 사용
using System.Windows.Data; // Binding 사용 (TwoWay)
using System.Windows.Interactivity; // Behavior 사용 시 필요 (Blend SDK 또는 NuGet: Microsoft.Xaml.Behaviors.Wpf)
                                    // 여기서는 Attached Property 방식으로 구현

namespace LockerManagementApp.Infrastructure
{
    /// <summary>
    /// PasswordBox의 Password 속성을 ViewModel의 SecureString에 양방향 바인딩할 수 있도록 돕는 헬퍼 클래스입니다.
    /// Attached Property를 사용합니다.
    /// </summary>
    public static class PasswordHelper
    {
        // Attach Attached Property 정의 (PasswordBox에 이 기능을 붙일지 여부)
        public static readonly DependencyProperty AttachProperty =
            DependencyProperty.RegisterAttached("Attach", typeof(bool), typeof(PasswordHelper), new PropertyMetadata(false, AttachChanged));

        public static bool GetAttach(DependencyObject dp) => (bool)dp.GetValue(AttachProperty);
        public static void SetAttach(DependencyObject dp, bool value) => dp.SetValue(AttachProperty, value);

        // Password Attached Property 정의 (ViewModel의 SecureString 속성과 바인딩될 속성)
        public static readonly DependencyProperty PasswordProperty =
            DependencyProperty.RegisterAttached("Password", typeof(SecureString), typeof(PasswordHelper),
                new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, PasswordPropertyChanged));

        public static SecureString GetPassword(DependencyObject dp) => (SecureString)dp.GetValue(PasswordProperty);
        public static void SetPassword(DependencyObject dp, SecureString value) => dp.SetValue(PasswordProperty, value);

        // 내부적으로 PasswordBox 변경을 감지하기 위한 플래그
        private static readonly DependencyProperty IsUpdatingProperty =
           DependencyProperty.RegisterAttached("IsUpdating", typeof(bool), typeof(PasswordHelper));

        private static bool GetIsUpdating(DependencyObject dp) => (bool)dp.GetValue(IsUpdatingProperty);
        private static void SetIsUpdating(DependencyObject dp, bool value) => dp.SetValue(IsUpdatingProperty, value);


        // Attach 속성이 true로 변경될 때 호출되는 콜백
        private static void AttachChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;

            if ((bool)e.NewValue) // Attach = true
            {
                // PasswordBox의 PasswordChanged 이벤트 핸들러 연결
                passwordBox.PasswordChanged += PasswordBox_PasswordChanged;
                // 초기 비밀번호 설정 (ViewModel -> PasswordBox)
                SetPasswordBoxPassword(passwordBox, GetPassword(passwordBox));
            }
            else // Attach = false
            {
                // 이벤트 핸들러 연결 해제
                passwordBox.PasswordChanged -= PasswordBox_PasswordChanged;
            }
        }

        // Password Attached Property 값이 변경될 때 호출되는 콜백 (ViewModel -> PasswordBox)
        private static void PasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;

            // 내부 플래그 확인: PasswordBox_PasswordChanged에서 업데이트 중인 경우는 제외
            if (!GetIsUpdating(passwordBox))
            {
                // ViewModel의 SecureString 값이 변경되면 PasswordBox의 Password를 업데이트
                SetPasswordBoxPassword(passwordBox, (SecureString)e.NewValue);
            }
        }

        // PasswordBox의 PasswordChanged 이벤트 핸들러 (PasswordBox -> ViewModel)
        private static void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;

            // 내부 플래그 설정 (무한 루프 방지)
            SetIsUpdating(passwordBox, true);
            // PasswordBox의 SecurePassword를 Password Attached Property에 업데이트 (ViewModel 업데이트 트리거)
            SetPassword(passwordBox, passwordBox.SecurePassword);
            // 내부 플래그 해제
            SetIsUpdating(passwordBox, false);
        }

        // PasswordBox의 Password 속성을 SecureString 값으로 설정하는 도우미 메서드
        private static void SetPasswordBoxPassword(PasswordBox passwordBox, SecureString securePassword)
        {
            // SecureString이 null이 아니고, 현재 PasswordBox의 SecurePassword와 다를 경우에만 업데이트
            // (초기 로드 시 또는 ViewModel에서 명시적으로 변경 시)
            // 주의: PasswordBox.Password 속성에 직접 SecureString을 할당할 수 없음
            //       PasswordBox의 내부 Password 속성을 직접 설정하는 것은 권장되지 않음
            //       가장 안전한 방법은 ViewModel에서 변경 시 PasswordBox를 직접 참조하여 SecurePassword를 설정하는 것이나,
            //       MVVM 패턴을 위해 이 Helper를 사용하며, 초기 로드 및 ViewModel 변경 반영에 중점.
            //       (PasswordBox -> ViewModel 업데이트는 PasswordChanged 이벤트로 처리됨)

            // 이 Helper에서는 ViewModel -> PasswordBox 업데이트 시 PasswordBox.Password를 직접 건드리지는 않음.
            // 초기 로드 시 AttachChanged에서 한번 설정하고, 이후 ViewModel 변경은 PasswordPropertyChanged에서 감지하지만
            // 실제 PasswordBox 업데이트는 PasswordBox 자체가 SecurePassword를 관리하도록 둠.
            // 만약 ViewModel에서 SecureString을 Clear하는 등의 시나리오가 필요하다면 추가 로직 필요.

            // 간단한 초기화 예시 (실제로는 PasswordBox.Password 사용은 보안상 좋지 않음)
            // if (securePassword != null)
            // {
            //    IntPtr ptr = System.Runtime.InteropServices.Marshal.SecureStringToBSTR(securePassword);
            //    try
            //    {
            //        passwordBox.Password = System.Runtime.InteropServices.Marshal.PtrToStringBSTR(ptr);
            //    }
            //    finally
            //    {
            //        System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(ptr);
            //    }
            // }
            // else
            // {
            //     passwordBox.Password = string.Empty;
            // }
        }
    }
}
```

---

**2. `MainWindow.xaml` (수정)**

* `PasswordHelper` 사용 부분을 포함하여 이전 코드를 다시 제공합니다.
* `BooleanToVisibilityConverter`와 `IsOfTypeConverter`는 여전히 필요하며, 이들에 대한 구현 코드는 없으므로 해당 부분에서 오류가 발생할 수 있습니다. (임시 해결책: 해당 바인딩을 잠시 제거하거나, 간단한 컨버터 구현 필요) -> **컨버터 관련 코드는 일단 주석 처리하거나 제거하여 XAML 로드 오류를 최소화합니다.**
* 모델 네임스페이스(`xmlns:models`)와 인프라 네임스페이스(`xmlns:infra`) 선언을 확인합니다.


```xml
<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models" xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure" Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <Style x:Key="AlignCenterCellStyle" TargetType="dxe:TextEditSettings">
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
        </Style>
        <Style x:Key="AlignCenterGridCellStyle" TargetType="dxg:CellContentPresenter">
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader">
            <Setter Property="Background" Value="LightBlue"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
        <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>

    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center"
                             infra:PasswordHelper.Attach="True"
                             infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal">
                    <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}" ToolTip="전체 데이터(사물함, 마스터)를 새로고침합니다."/>
                    <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}" ToolTip="현재 탭의 변경 내용을 데이터베이스에 저장합니다."/>
                </StackPanel>
            </Border>
        </DockPanel>

        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="사물함 관리">
                <Grid>
                    <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                    <Border Grid.Row="0" Background="WhiteSmoke" Padding="3">
                        <StackPanel Orientation="Horizontal">
                            <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/>
                            <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/>
                            <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/>
                        </StackPanel>
                    </Border>
                    <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                        <dxg:GridControl.View>
                            <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always">
                                <dxg:TableView.RowCellMenuCustomizations>
                                     <dxb:BarButtonItem Content="선택 항목 배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/>
                                     <dxb:BarItemSeparator/>
                                     <dxb:BarButtonItem Content="선택 행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/>
                                </dxg:TableView.RowCellMenuCustomizations>
                            </dxg:TableView>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                 <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings>
                             </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                 <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                 <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                  <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings>
                             </dxg:GridColumn>
                             <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                            <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}">
                                 <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True"/> </dxg:GridColumn.EditSettings>
                            </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>

            <TabItem Header="변경 로그" DataContext="{Binding LogVM}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>
                     <Button Grid.Row="0" Content="🔄 로그 새로고침" Command="{Binding LoadLogsCommand}" HorizontalAlignment="Left" Margin="5"/>
                     <dxg:GridControl Grid.Row="1" ItemsSource="{Binding AuditLogs}" IsReadOnly="True">
                         <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" AllowEditing="False" ShowGroupPanel="False" ShowAutoFilterRow="True"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="Timestamp" Header="시간" Width="150" SortOrder="Descending" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="UserName" Header="사용자" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="Action" Header="작업" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="TableName" Header="테이블" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="RecordId" Header="레코드 ID" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="AffectedColumns" Header="변경 컬럼" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="OldValues" Header="변경 전 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="NewValues" Header="변경 후 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                     <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem> </StatusBar>
                 </Grid>
            </TabItem>

            <TabItem Header="마스터 데이터 관리" DataContext="{Binding MasterDataVM}"
                     Visibility="{Binding DataContext.IsMasterModeEnabled, RelativeSource={RelativeSource AncestorType={dx:ThemedWindow}}, FallbackValue=Collapsed}">
                     <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                     <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5">
                         <Button Content="💾 마스터 데이터 저장" Command="{Binding SaveChangesCommand}" Margin="3"/>
                         <Button Content="🔄 마스터 데이터 새로고침" Command="{Binding LoadAllMasterDataCommand}" Margin="3"/>
                         <TextBlock Text="{Binding StatusMessage}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="Gray"/>
                     </StackPanel>
                     <dxlc:LayoutControl Grid.Row="1" Orientation="Vertical">
                         <dxlc:LayoutGroup Header="사물함 종류" View="GroupBox" Orientation="Vertical">
                             <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="종류 추가" Command="{Binding AddItemCommand}" CommandParameter="LockerType" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding LockerTypes}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="종류 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="층" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="층 추가" Command="{Binding AddItemCommand}" CommandParameter="Floor" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding Floors}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="층 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="구역" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="구역 추가" Command="{Binding AddItemCommand}" CommandParameter="Zone" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding Zones}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="구역 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="소파트" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="소파트 추가" Command="{Binding AddItemCommand}" CommandParameter="SubPart" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding SubParts}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="소파트 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="관리자" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="관리자 추가" Command="{Binding AddItemCommand}" CommandParameter="Administrator" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding Administrators}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="관리자 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                     </dxlc:LayoutControl>
                 </Grid>
            </TabItem>

        </TabControl>

        <StatusBar Grid.Row="2" Background="LightGray">
            <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem>
        </StatusBar>
    </Grid>

</dx:ThemedWindow>
```

---

**추가 조치 및 확인:**

1.  **모델 클래스 확인:** `Models` 폴더에 `LockerType.cs`, `Floor.cs`, `Zone.cs`, `SubPart.cs`, `Administrator.cs` 파일들이 올바른 네임스페이스(`LockerManagementApp.Models`)로 존재하고, 각 클래스에 `Id`와 `Name` 속성, 그리고 `INotifyPropertyChanged`가 구현되어 있는지 다시 확인해 주세요. 이전에 제공된 코드 블록에 포함되어 있었습니다.
2.  **컨버터 구현:** XAML에서 임시로 제거하거나 주석 처리한 `BooleanToVisibilityConverter` 와 `IsOfTypeConverter`는 실제로 사용하려면 `Infrastructure` 폴더 등에 해당 컨버터 클래스를 구현하고 XAML 리소스에 등록해야 합니다.
    * `BooleanToVisibilityConverter`: `bool` 값을 `Visibility.Visible` 또는 `Visibility.Collapsed`로 변환합니다. (마스터 탭 표시에 사용)
    * `IsOfTypeConverter`: 바인딩된 객체(`SelectedItem`)가 `ConverterParameter`로 지정된 타입과 일치하는지 여부를 `bool` 값으로 반환합니다. (마스터 데이터 삭제 버튼 활성화에 사용)
3.  **빌드 및 테스트:** `PasswordHelper.cs` 파일을 추가하고, 모델 클래스들이 올바르게 있는지 확인한 후, **솔루션 정리 및 다시 빌드**를 수행하여 실행해 보시기 바랍니다.