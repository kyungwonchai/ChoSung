C#에서 async와 Task를 사용하여 10분마다 실행되지만, 이전 실행이 끝나지 않았으면 기다리는 타이머를 구현하는 예제입니다.

✅ 핵심 로직
10분마다 (600000ms) Timer가 실행되지만,
이전 실행이 완료되지 않았으면 대기,
이전 실행이 끝난 후에 다시 실행.
✅ C# 비동기 타이머 예제
csharp
코드 복사
using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    private static Timer? _timer;
    private static bool _isRunning = false; // 함수 실행 여부 체크
    private static readonly object _lock = new object(); // 동시 실행 방지

    static async Task Main()
    {
        Console.WriteLine("Timer 시작...");
        StartTimer();

        // 프로그램 유지 (Ctrl + C로 종료)
        await Task.Delay(Timeout.Infinite);
    }

    private static void StartTimer()
    {
        // 10분(600000ms)마다 `RunTaskAsync` 실행
        _timer = new Timer(async _ => await CheckAndRunTask(), null, 0, 600000);
    }

    private static async Task CheckAndRunTask()
    {
        lock (_lock) // 다중 실행 방지
        {
            if (_isRunning)
            {
                Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 이전 실행이 끝나지 않음, 대기...");
                return;
            }
            _isRunning = true;
        }

        try
        {
            Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 작업 시작");
            await RunTaskAsync();
            Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 작업 완료");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"오류 발생: {ex.Message}");
        }
        finally
        {
            _isRunning = false; // 실행 완료 후 상태 변경
        }
    }

    private static async Task RunTaskAsync()
    {
        // 작업 수행 (여기서 오래 걸리는 작업을 가정)
        await Task.Delay(20000); // 20초 동안 실행되는 작업 (테스트용)
    }
}
✅ 설명
_timer 설정

10분(600,000ms)마다 CheckAndRunTask() 실행.
CheckAndRunTask() 함수

_isRunning이 true면 아직 실행 중이므로 대기.
아니면 _isRunning = true로 변경 후 작업 실행.
RunTaskAsync() 함수

실제 작업을 실행 (await Task.Delay(20000); → 20초 실행 예제).
✅ 실행 예제
makefile
코드 복사
10:00:00 - 작업 시작
10:00:20 - 작업 완료
10:10:00 - 작업 시작
10:10:20 - 작업 완료
10:20:00 - 이전 실행이 끝나지 않음, 대기...
👉 10분마다 실행되지만, 이전 실행이 끝나지 않으면 다음 실행을 건너뜀.

✅ 특징
✔ 이전 실행이 끝날 때까지 다음 실행을 건너뜀
✔ 비동기 작업을 지원 (async & await)
✔ lock 사용으로 동시 실행 방지