네, 그 문제는 초기화 과정에서 램프를 찾는 방식에 작은 오류가 있기 때문입니다. 마스크는 MaskIdentifier라는 전용 스크립트로 찾고 있는데, 램프는 Light 컴포넌트로만 찾고 있어서 다른 조명(예: Directional Light)이 섞여 들어갈 경우 순서가 꼬일 수 있습니다.

이 문제를 해결하기 위해, 램프도 LampIdentifier 라는 전용 스크립트를 기준으로 찾도록 RackSystemManager.cs를 수정했습니다.

## 최종 RackSystemManager.cs (램프 인식 오류 수정)
Scripts 폴더에 있는 RackSystemManager.cs 파일의 내용을 아래 코드로 완전히 덮어쓰고 저장하세요. InitializeAllRacks 함수만 수정되었습니다.

C#

using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Linq; // OrderBy를 사용하기 위해 추가합니다.

public class RackSystemManager : MonoBehaviour
{
    [Header("핵심 연결 대상")]
    public Transform rackContainer;

    [Header("애니메이션")]
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Light> lampLights = new Dictionary<string, Light>();
    
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Light lastActiveLight;
    private Vector3 lastMaskOriginalLocalPosition;
    private string currentActiveBarcode = "";

    void Start()
    {
        InitializeAllRacks();
    }

    // ★★★ 램프를 찾는 방식을 Mask와 동일하게 수정한 최종 로직 ★★★
    void InitializeAllRacks()
    {
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        foreach (Transform rackParent in rackContainer)
        {
            string rackName = rackParent.name;
            
            // 랙 하위의 모든 LampIdentifier 컴포넌트를 이름순으로 정렬하여 가져옵니다.
            var lamps = rackParent.GetComponentsInChildren<LampIdentifier>(true).OrderBy(l => l.name);
            foreach(var lampIdentifier in lamps)
            {
                string localName = lampIdentifier.gameObject.name;
                string globalKey = $"{rackName}_{localName}";
                
                // 해당 오브젝트에 붙어있는 Light 컴포넌트를 가져옵니다.
                Light lightComponent = lampIdentifier.GetComponent<Light>();

                if (lightComponent != null && !lampLights.ContainsKey(globalKey))
                {
                    lampLights.Add(globalKey, lightComponent);
                    lightComponent.enabled = false; // 모든 램프를 꺼진 상태로 초기화
                }
            }

            // 마스크는 기존과 동일하게 찾습니다.
            var masks = rackParent.GetComponentsInChildren<MaskIdentifier>(true).OrderBy(m => m.name);
            foreach(var maskIdentifier in masks)
            {
                 string localName = maskIdentifier.gameObject.name;
                 string globalKey = $"{rackName}_{localName}";
                 if (!maskObjects.ContainsKey(globalKey))
                    maskObjects.Add(globalKey, maskIdentifier.gameObject);
            }
        }
        Debug.Log($"초기화 완료: {lampLights.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    public void ProcessBarcode(string barcode)
    {
        if (barcode == currentActiveBarcode) return;
        ResetPreviousSlot();
        if (string.IsNullOrEmpty(barcode) || barcode.Length != 11 || !barcode.StartsWith("MMF10")) return;

        string rackID = barcode.Substring(5, 3);
        string floor = barcode.Substring(8, 1);
        string slotNum = barcode.Substring(9, 2);
        
        string lampKey = $"{rackID}_Lamp_{floor}{slotNum}";
        string maskKey = $"{rackID}_Mask_{floor}{slotNum}";
        
        if (lampLights.TryGetValue(lampKey, out Light targetLight))
        {
            targetLight.enabled = true;
            lastActiveLight = targetLight;
        }

        if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
        currentActiveBarcode = barcode;
    }
    
    #region Helper Functions 
    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastActiveLight != null)
        {
            lastActiveLight.enabled = false;
            lastActiveLight = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
        currentActiveBarcode = "";
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;
        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 
        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }
        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;
        if (rb != null) rb.isKinematic = false;
    }
    
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessBarcode(text.ToUpper());
        }
    }
    #endregion
}