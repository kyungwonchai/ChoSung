이전에 제공한 코드에서 QR 코드 리딩과 MySQL, MSSQL을 섞어가며 작업했던 내용을 기반으로, QR 모드와 전체 모드를 전환할 수 있도록 수정하겠습니다. QR 모드에서는 CodeScannerView를 사용해 QR 코드를 초고속으로 읽고, 전체 모드에서는 일반적인 카메라 미리보기를 제공하도록 설정하겠습니다.

1. XML 레이아웃 (activity_main.xml)
우선, 토글 버튼과 카메라 프리뷰를 위한 레이아웃을 구성합니다.

xml
코드 복사
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 모드 전환 토글 버튼 -->
    <ToggleButton
        android:id="@+id/modeToggle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOn="QR 모드"
        android:textOff="전체 모드"
        android:layout_margin="16dp"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"/>

    <!-- CodeScannerView: QR 모드에서 사용할 뷰 -->
    <com.budiyev.android.codescanner.CodeScannerView
        android:id="@+id/codeScannerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"
        android:visibility="gone"/> <!-- 초기에는 보이지 않도록 설정 -->

    <!-- 전체 모드에서 사용할 PreviewView -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"/>
</RelativeLayout>
2. Kotlin 코드 (MainActivity.kt)
이제, QR 코드 리딩과 데이터베이스 작업을 함께 처리하는 코드를 작성합니다.

kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.ToggleButton
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.budiyev.android.codescanner.CodeScanner
import com.budiyev.android.codescanner.CodeScannerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var codeScannerView: CodeScannerView
    private lateinit var codeScanner: CodeScanner
    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var modeToggle: ToggleButton

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 뷰 초기화
        modeToggle = findViewById(R.id.modeToggle)
        codeScannerView = findViewById(R.id.codeScannerView)
        previewView = findViewById(R.id.previewView)

        cameraExecutor = Executors.newSingleThreadExecutor()

        // 초기 모드 설정: QR 모드
        modeToggle.isChecked = true
        setupQrMode()

        // 토글 버튼 클릭 시 모드 전환
        modeToggle.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                setupQrMode()
            } else {
                setupFullMode()
            }
        }
    }

    private fun setupQrMode() {
        // QR 모드 설정
        previewView.visibility = View.GONE
        codeScannerView.visibility = View.VISIBLE

        codeScanner = CodeScanner(this, codeScannerView)

        // QR 코드에 대한 설정
        codeScanner.camera = CodeScanner.CAMERA_BACK
        codeScanner.formats = CodeScanner.ALL_FORMATS
        codeScanner.isAutoFocusEnabled = true
        codeScanner.isFlashEnabled = false

        // QR 코드 스캔 리스너 설정
        codeScanner.decodeCallback = {
            runOnUiThread {
                val qrData = it.text
                Log.d("QRCode", "QR 코드 인식됨: $qrData")
                handleQrCode(qrData)
            }
        }

        // 카메라 미리보기 시작
        codeScanner.startPreview()
    }

    private fun setupFullMode() {
        // 전체 모드 설정
        codeScannerView.visibility = View.GONE
        previewView.visibility = View.VISIBLE

        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            // 카메라 설정
            val preview = Preview.Builder().build()

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()

                preview.setSurfaceProvider(previewView.surfaceProvider)
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )

            } catch (exc: Exception) {
                Log.e("CameraXApp", "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun handleQrCode(qrData: String) {
        // QR 코드 처리 로직 (MySQL 및 MSSQL 연동)
        lifecycleScope.launch {
            val isQrCodeValid = checkQrCodeInMssql(qrData)
            if (isQrCodeValid) {
                // MSSQL에 QR 코드가 존재하는 경우, MySQL에 데이터를 인서트
                insertIntoMySQL(qrData)
            } else {
                Log.e("QRCode", "유효하지 않은 QR 코드")
            }
        }
    }

    private suspend fun checkQrCodeInMssql(qrData: String): Boolean {
        return withContext(Dispatchers.IO) {
            var connection: Connection? = null
            try {
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://<MSSQL_SERVER>;databaseName=<DATABASE_NAME>;user=<USER>;password=<PASSWORD>"
                )
                val query = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
                val preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrData)
                val resultSet: ResultSet = preparedStatement.executeQuery()
                resultSet.next() && resultSet.getInt(1) > 0
            } catch (e: SQLException) {
                Log.e("QRCode", "MSSQL 오류: ${e.message}")
                false
            } finally {
                connection?.close()
            }
        }
    }

    private suspend fun insertIntoMySQL(qrData: String) {
        withContext(Dispatchers.IO) {
            var connection: Connection? = null
            try {
                connection = DriverManager.getConnection(
                    "jdbc:mysql://<MYSQL_SERVER>:3306/<DATABASE_NAME>?useSSL=false",
                    "<USER>", "<PASSWORD>"
                )
                val query = "INSERT INTO ScannedData (QRCodeData, ScannedAt) VALUES (?, ?)"
                val preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrData)
                preparedStatement.setString(2, "<DEVICE_ID>")
                preparedStatement.executeUpdate()
            } catch (e: SQLException) {
                Log.e("QRCode", "MySQL 오류: ${e.message}")
            } finally {
                connection?.close()
            }
        }
    }

    override fun onResume() {
        super.onResume()
        if (modeToggle.isChecked) {
            codeScanner.startPreview()
        }
    }

    override fun onPause() {
        super.onPause()
        if (modeToggle.isChecked) {
            codeScanner.releaseResources()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    // 권한 체크 및 요청
    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                if (modeToggle.isChecked) {
                    setupQrMode()
                } else {
                    setupFullMode()
                }
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO
        )
    }
}
3. 코드 설명
QR 코드 리딩:

CodeScannerView를 사용하여 QR 코드를 빠르게 스캔합니다.
handleQrCode 메서드를 통해 스캔된 QR 데이터를 처리하고, 이를 MSSQL과 MySQL에서 확인 및 인서트하는 작업을 수행합니다.
데이터베이스 작업:

checkQrCodeInMssql: 스캔된 QR 코드가 MSSQL 데이터베이스에 있는지 확인합니다.
insertIntoMySQL: QR 코드가 MSSQL에서 유효한 것으로 확인되면, MySQL 데이터베이스에 해당 데이터를 인서트합니다.
모드 전환:

ToggleButton을 통해 QR 모드와 전체 모드를 전환할 수 있습니다.
QR 모드: QR 코드 전용 스캐너인 CodeScannerView를 활성화합니다.
전체 모드: 일반적인 카메라 미리보기를 활성화합니다.
결론
이 코드는 QR 코드 리딩과 데이터베이스 작업을 함께 처리할 수 있도록 QR 모드와 전체 모드를 구현합니다. QR 모드에서는 CodeScannerView를 사용해 QR 코드를 빠르게 읽고, 읽은 데이터를 MSSQL과 MySQL 데이터베이스와 연동하여 처리할 수 있습니다.

필요한 부분을 추가적으로 수정하시거나, 더 궁금한 점이 있다면 언제든지 말씀해 