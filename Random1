네, 좋은 질문입니다! 제공해 드린 코드에서 config.py에 데이터베이스 설정이 있고, models.py에서 데이터베이스 구조를 정의하고 있지만, 사용자분께서 직접 데이터베이스 서버를 설치하거나 복잡한 SQL 명령어를 다루실 필요는 거의 없습니다.

이유는 다음과 같습니다:

SQLite 사용:

저희가 사용한 SQLALCHEMY_DATABASE_URI = 'sqlite:///board.db' 설정은 SQLite라는 파일 기반 데이터베이스를 사용하겠다는 의미입니다.
SQLite는 별도의 서버 프로그램 설치 없이, 애플리케이션 폴더 내에 board.db라는 파일 하나로 데이터베이스가 생성되고 관리됩니다. 매우 가볍고 설정이 간편합니다.
따라서 MySQL이나 PostgreSQL처럼 별도의 데이터베이스 서버를 설치하고 관리하는 번거로움이 없습니다.
SQLAlchemy (ORM) 사용:

models.py에서 db = SQLAlchemy()와 class Post(db.Model): 같은 코드는 SQLAlchemy라는 ORM(Object-Relational Mapper)을 사용하는 부분입니다.
ORM은 데이터베이스 테이블을 파이썬 클래스(객체)처럼 다룰 수 있게 해줍니다. 예를 들어, 게시글을 저장할 때 SQL로 INSERT INTO post (title, content, slug) VALUES (...); 와 같이 직접 작성하는 대신, 파이썬 코드로 new_post = Post(title="제목", content="내용") 처럼 객체를 만들고 db.session.add(new_post)와 db.session.commit()을 호출하면 SQLAlchemy가 알아서 적절한 SQL을 실행해줍니다.
마찬가지로 데이터를 조회할 때도 Post.query.all()이나 Post.query.filter_by(slug=slug).first() 같은 파이썬 코드를 사용합니다.
사용자 입장에서 해야 할 일:

최초 데이터베이스 파일 생성:
app.py 파일에 if __name__ == '__main__': 블록 안에 데이터베이스 파일이 없으면 자동으로 테이블을 생성하는 코드를 넣어두었습니다 (db.create_all()).
또는 터미널에서 flask init-db 명령을 (제가 추가해드린 CLI 명령) 실행하면 board.db 파일이 생성되고 그 안에 Post 테이블 구조가 만들어집니다. 이 작업은 처음 한 번만 하면 됩니다.
데이터 관리:
글을 쓰고, 수정하고, 삭제하는 작업은 웹 인터페이스를 통해 이루어지며, 이 과정에서 데이터는 board.db 파일에 자동으로 저장되고 변경됩니다.
데이터를 백업하고 싶다면 board.db 파일을 복사해두면 됩니다.
데이터베이스 내용을 직접 보고 싶다면 'DB Browser for SQLite' 같은 무료 툴을 사용해서 board.db 파일을 열어볼 수 있지만, 일반적인 사용에는 필요 없습니다.
결론적으로:

데이터베이스 서버 설치/관리: 필요 없습니다 (SQLite가 파일 기반이라서).
SQL 명령어 직접 작성: 거의 필요 없습니다 (SQLAlchemy가 대신 해줘서).