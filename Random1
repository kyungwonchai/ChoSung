using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private readonly Dictionary<string, DateTime> _lastUploadedTimes = new Dictionary<string, DateTime>(); // IP별 마지막 업로드 시간
        private bool _isRunning = false; // 현재 작업 실행 상태 플래그

        public MainWindow()
        {
            InitializeComponent();

            // DB에서 IP 리스트와 마지막 업로드 시간 초기화
            _ipAddresses = GetIpAddressesFromDatabase();
            StatusListBox.Items.Add($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

            InitializeLastUploadedTimes();
            StatusListBox.Items.Add("IP별 마지막 업로드 시간 초기화 완료.");

            // 프로그램 시작 시 작업 반복 실행
            _ = StartProcessingLoopAsync();
        }

        /// <summary>
        /// 작업을 1분 간격으로 반복 실행
        /// </summary>
        private async Task StartProcessingLoopAsync()
        {
            while (true) // 무한 반복
            {
                if (!_isRunning)
                {
                    _isRunning = true;

                    try
                    {
                        await StartProcessingAsync(); // 작업 실행
                    }
                    catch (Exception ex)
                    {
                        StatusListBox.Items.Add($"에러 발생: {ex.Message}");
                    }
                    finally
                    {
                        _isRunning = false;
                    }
                }

                // 1분 대기
                await Task.Delay(60000);
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                StatusListBox.Items.Add($"IP {ip} 처리 중...");

                // 해당 IP에 대한 마지막 업로드 시간 가져오기
                var lastUploadedTime = _lastUploadedTimes[ip];

                // 파일 처리
                var processor = new FileProcessor(lastUploadedTime, ip);
                var newRows = processor.GetNewRows($@"\\{ip}\Result");

                if (newRows.Any())
                {
                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(newRows);

                    StatusListBox.Items.Add($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");

                    // 마지막 업로드 시간 갱신
                    _lastUploadedTimes[ip] = newRows.Max(row => (DateTime)row["InspectionTime"]);
                }
                else
                {
                    StatusListBox.Items.Add($"IP {ip}: 새로운 데이터 없음.");
                }
            }
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
            var ipList = new List<string>();

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                    }
                }
            }

            return ipList;
        }

        /// <summary>
        /// DB에서 IP별로 마지막 업로드된 InspectionTime 초기화
        /// </summary>
        private void InitializeLastUploadedTimes()
        {
            const string query = "SELECT IPAddress, MAX(InspectionTime) AS LastInspectionTime FROM YourTable GROUP BY IPAddress";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var ipAddress = reader.GetString(0);
                        var lastTime = reader.IsDBNull(1) ? DateTime.Now.AddYears(-1) : reader.GetDateTime(1);
                        _lastUploadedTimes[ipAddress] = lastTime;
                    }
                }
            }

            // 없는 IP는 기본값으로 1년 전 시간 추가
            foreach (var ip in _ipAddresses)
            {
                if (!_lastUploadedTimes.ContainsKey(ip))
                {
                    _lastUploadedTimes[ip] = DateTime.Now.AddYears(-1);
                }
            }
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastUploadedTime;
        private readonly string _ipAddress;

        public FileProcessor(DateTime lastUploadedTime, string ipAddress)
        {
            _lastUploadedTime = lastUploadedTime;
            _ipAddress = ipAddress;
        }

        /// <summary>
        /// 새로운 데이터 행 가져오기
        /// </summary>
        public List<Dictionary<string, object>> GetNewRows(string rootPath)
        {
            var newRows = new List<Dictionary<string, object>>();
            var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

            foreach (var file in csvFiles)
            {
                using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                {
                    reader.ReadLine(); // 첫 번째 행(헤더) 무시
                    while (!reader.EndOfStream)
                    {
                        var values = reader.ReadLine()?.Split(',');
                        if (values == null || values.Length < 4) continue;

                        // 4열이 숫자(정수 또는 실수)가 아니면 제외
                        if (!decimal.TryParse(values[3], out _)) continue;

                        var row = new Dictionary<string, object>
                        {
                            ["InspectionTime"] = DateTime.Parse(values[0]),
                            ["ModelName"] = values[1],
                            ["AlignResult"] = values[2],
                            ["MP1DATA"] = float.Parse(values[3]),
                            ["MP1RESULT"] = values[4],
                            ["MP2DATA"] = float.Parse(values[5]),
                            ["MP2RESULT"] = values[6],
                            ["MP3DATA"] = float.Parse(values[7]),
                            ["MP3RESULT"] = values[8],
                            ["MP4DATA"] = float.Parse(values[9]),
                            ["MP4RESULT"] = values[10],
                            ["ipname"] = _ipAddress // 현재 IP 추가
                        };

                        // InspectionTime 조건 검사
                        if ((DateTime)row["InspectionTime"] > _lastUploadedTime)
                        {
                            newRows.Add(row);
                        }
                    }
                }
            }

            return newRows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]);
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
                        command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);
                        command.Parameters.AddWithValue("@MP2DATA", row["MP2DATA"]);
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"]);
                        command.Parameters.AddWithValue("@MP3DATA", row["MP3DATA"]);
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"]);
                        command.Parameters.AddWithValue("@MP4DATA", row["MP4DATA"]);
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"]);
                        command.Parameters.AddWithValue("@ipname", row["ipname"]);

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }