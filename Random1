네, 알겠습니다. 패키지 이름이 com.sec.lightmeter인 것을 확인했습니다.

기존에 안드로이드 스튜디오가 자동으로 생성한 MainActivity.kt 파일의 내용을 모두 지우고, 아래 코드로 완전히 덮어쓰기 하시면 됩니다. 패키지 이름을 com.sec.lightmeter로 정확하게 수정해 두었습니다.

## 최종 MainActivity.kt 코드
파일 위치: app > src > main > java > com.sec.lightmeter > MainActivity.kt

Kotlin

package com.sec.lightmeter

import android.content.Context
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.sec.lightmeter.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity(), SensorEventListener {

    private lateinit var binding: ActivityMainBinding
    private lateinit var sensorManager: SensorManager
    private var lightSensor: Sensor? = null

    // --- 조도 스펙 정의 (이 값을 변경하여 스펙을 조절할 수 있습니다) ---
    private val SPEC_MIN_LUX = 100.0f
    private val SPEC_MAX_LUX = 500.0f
    // ---------------------------------------------------------

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // 뷰 바인딩 초기화
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 화면에 현재 스펙 정보 표시
        binding.tvSpecInfo.text = getString(R.string.spec_info_format, SPEC_MIN_LUX, SPEC_MAX_LUX)

        // 센서 매니저와 조도 센서 가져오기
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT)

        // 기기에 조도 센서가 없는 경우 처리
        if (lightSensor == null) {
            binding.tvLuxValue.text = "조도 센서 없음"
            binding.tvUnit.text = ""
        }
    }

    override fun onResume() {
        super.onResume()
        // 앱이 다시 보일 때 센서 리스너 등록
        lightSensor?.let {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        // 앱이 화면에서 사라질 때 배터리 절약을 위해 리스너 해제
        sensorManager.unregisterListener(this)
    }

    // 센서 값이 바뀔 때마다 호출되는 함수
    override fun onSensorChanged(event: SensorEvent?) {
        if (event?.sensor?.type == Sensor.TYPE_LIGHT) {
            val luxValue = event.values[0]
            binding.tvLuxValue.text = "%.1f".format(luxValue)

            // 스펙 범위에 따라 텍스트 색상 변경
            val colorResId = when {
                luxValue < SPEC_MIN_LUX -> R.color.spec_out_dark_blue // 어두울 때
                luxValue > SPEC_MAX_LUX -> R.color.spec_out_bright_red // 밝을 때
                else -> R.color.spec_in_black // 정상 범위
            }
            binding.tvLuxValue.setTextColor(ContextCompat.getColor(this, colorResId))
        }
    }

    // 센서 정확도가 바뀔 때 호출 (여기서는 사용 안 함)
    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
        // Do nothing
    }
}
