습니다. 주, 후, 야 교대별로 입력할 수 있는 칸과 공통 인계 사항 칸이 있는 UI를 만들고, 텍스트박스 입력 후 포커스를 잃을 때 자동으로 DB에 업데이트하며, 입력한 사람의 IP와 내용을 로그로 남겨 검색 탭에서 검색할 수 있도록 기능을 구현하겠습니다.

1. 데이터베이스 설계
먼저 MSSQL2014에 데이터베이스 테이블을 설계합니다.

sql
코드 복사
CREATE TABLE ShiftReport (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Date DATE NOT NULL,
    Number INT NOT NULL,
    ShiftType NVARCHAR(50) NOT NULL, -- '주', '후', '야', '공통'
    Report NVARCHAR(MAX) NULL,
    IPAddress NVARCHAR(50) NULL,
    CONSTRAINT UQ_ShiftReport UNIQUE(Date, Number, ShiftType)
);

CREATE TABLE ReportLog (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Date DATE NOT NULL,
    Number INT NOT NULL,
    ShiftType NVARCHAR(50) NOT NULL,
    Report NVARCHAR(MAX) NULL,
    IPAddress NVARCHAR(50) NOT NULL,
    Timestamp DATETIME DEFAULT GETDATE()
);
2. WPF UI 구성
MainWindow.xaml 파일에 TabControl, GridControl, TextBox 등을 설정합니다.

xml
코드 복사
<Window x:Class="ShiftReportApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="Shift Report Manager" Height="600" Width="800">
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="날짜" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="번호" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="주" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="3" Text="후" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" Text="야" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="5" Text="공통인계사항" Background="LightGray" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Date1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" x:Name="Date2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="0" x:Name="Date3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" x:Name="Date4" Background="LightGray" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="1" Text="4" Background="LightGray" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="2" x:Name="DayShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="2" x:Name="DayShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="2" x:Name="DayShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="2" x:Name="DayShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="3" x:Name="EveningShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="3" x:Name="EveningShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="3" x:Name="EveningShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="3" x:Name="EveningShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="4" x:Name="NightShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="4" x:Name="NightShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="4" x:Name="NightShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="4" x:Name="NightShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="5" x:Name="CommonReport1" Background="LightGreen" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="5" x:Name="CommonReport2" Background="LightGreen" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="5" x:Name="CommonReport3" Background="LightGreen" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="5" x:Name="CommonReport4" Background="LightGreen" Padding="10" LostFocus="TextBox_LostFocus"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <DatePicker Name="datePicker" SelectedDateChanged="OnDateSelected"/>
                    <dxg:GridControl Name="gridControlSearch">
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="로그">
                <Grid>
                    <DatePicker Name="logDatePicker" SelectedDateChanged="OnLogDateSelected"/>
                    <dxg:GridControl Name="gridControlLog">
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                            <dxg:GridColumn Header="IP주소" FieldName="IPAddress"/>
                            <dxg:GridColumn Header="시간" FieldName="Timestamp"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
3. C# 코드 비하인드
MainWindow.xaml.cs 파일에서 MSSQL 데이터베이스와의 연동을 설정하고, 텍스트 박스의 포커스가 변경될 때마다 데이터를 업데이트하며 로그를 기록하는 기능을 추가합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using System.Windows.Controls;

namespace ShiftReportApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string_here";

        public MainWindow()
        {
            InitializeComponent();
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today);
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday);
        }

        private void LoadReport(DateTime date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM ShiftReport WHERE Date = @Date";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count > 0)
            {
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    DataRow row = dataTable.Rows[i];
                    if (row["ShiftType"].ToString() == "주")
                    {
                        ((TextBox)FindName($"DayShiftReport{i+1}")).Text = row["Report"].ToString();
                    }
                    else if (row["ShiftType"].ToString() == "후")
                    {
                        ((TextBox)FindName($"EveningShiftReport{i+1}")).Text = row["Report"].ToString();
                    }
                    else if (row["ShiftType"].ToString() == "야")
                    {
                        ((TextBox)FindName($"NightShiftReport{i+1}")).Text = row["Report"].ToString();
                    }
                    else if (row["ShiftType"].ToString() == "공통")
                    {
                        ((TextBox)FindName($"CommonReport{i+1}")).Text = row["Report"].ToString();
                    }

                    ((TextBlock)FindName($"Date{i+1}")).Text = date.ToString("yyyy-MM-dd");
                }
            }
            else
            {
                ClearReports();
                for (int i = 1; i <= 4; i++)
                {
                    ((TextBlock)FindName($"Date{i}")).Text = date.ToString("yyyy-MM-dd");
                }
            }
        }

        private void ClearReports()
        {
            for (int i = 1; i <= 4; i++)
            {
                ((TextBox)FindName($"DayShiftReport{i}")).Text = "";
                ((TextBox)FindName($"EveningShiftReport{i}")).Text = "";
                ((TextBox)FindName($"NightShiftReport{i}")).Text = "";
                ((TextBox)FindName($"CommonReport{i}")).Text = "";
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            DateTime date = DateTime.Parse(((TextBlock)FindName($"Date{number}")).Text);
            string ipAddress = GetLocalIPAddress();

            SaveReport(date, number, shiftType, report, ipAddress);
        }

        private void SaveReport(DateTime date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();

                string query = "IF EXISTS (SELECT 1 FROM ShiftReport WHERE Date = @Date AND Number = @Number AND ShiftType = @ShiftType) " +
                               "UPDATE ShiftReport SET Report = @Report, IPAddress = @IPAddress WHERE Date = @Date AND Number = @Number AND ShiftType = @ShiftType " +
                               "ELSE " +
                               "INSERT INTO ShiftReport (Date, Number, ShiftType, Report, IPAddress) VALUES (@Date, @Number, @ShiftType, @Report, @IPAddress); " +
                               "INSERT INTO ReportLog (Date, Number, ShiftType, Report, IPAddress) VALUES (@Date, @Number, @ShiftType, @Report, @IPAddress);";

                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnDateSelected(object sender, SelectionChangedEventArgs e)
        {
            DateTime? selectedDate = datePicker.SelectedDate;
            if (selectedDate.HasValue)
            {
                LoadSearchReport(selectedDate.Value);
            }
        }

        private void LoadSearchReport(DateTime date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM ShiftReport WHERE Date >= @Date";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            gridControlSearch.ItemsSource = dataTable.DefaultView;
        }

        private void OnLogDateSelected(object sender, SelectionChangedEventArgs e)
        {
            DateTime? selectedDate = logDatePicker.SelectedDate;
            if (selectedDate.HasValue)
            {
                LoadLogReport(selectedDate.Value);
            }
        }

        private void LoadLogReport(DateTime date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM ReportLog WHERE Date = @Date";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            gridControlLog.ItemsSource = dataTable.DefaultView;
        }
    }
}
위의 코드에는 다음과 같은 기능이 포함되어 있습니다:

오늘과 어제의 인계장을 불러오는 기능
텍스트박스 입력 후 포커스를 잃을 때 자동으로 DB에 업데이트
입력한 내용과 IP 주소를 로그에 기록
날짜별로 검색 기능을 제공하는 검색 탭
로그를 날짜별로 검색할 수 있는 로그 탭
이제, WPF와 DevExpress를 사용하여 주/후/야 교대별로 데이터를 입력하고 조회할 수 있는 UI와 기능이 완성되었습니다. 데이터베이스와 연동하여 데이터를 저장하고 불러오며, 로그를 기록하고 검색할 수 있습니다. 추가적인 기능이나 요구 사항이 있다면 계속해서 개선할 