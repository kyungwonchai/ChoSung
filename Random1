죄송합니다, 모든 요구 사항을 충족하는 전체 코드를 여기에 정리해드리겠습니다. 이 코드는 안드로이드에서 블루투스를 통해 데이터를 수신하고, Accessibility Service를 이용하여 다른 앱의 입력 필드에 데이터를 자동으로 입력하는 데 필요한 모든 컴포넌트를 포함합니다.

1. AndroidManifest.xml
Android 애플리케이션 매니페스트에 필요한 권한과 서비스 선언을 추가합니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>
    <application
        ...>
        <service
            android:name=".BluetoothService"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name=".InputAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>

            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>
</manifest>
2. BluetoothService.kt
블루투스 서비스를 설정하여 블루투스 데이터를 수신하고 로컬 브로드캐스트를 통해 전송합니다.

kotlin
코드 복사
import android.app.Service
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.IBinder

class BluetoothService : Service() {
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()

    private val receiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            when (intent.action) {
                BluetoothDevice.ACTION_FOUND -> {
                    val device: BluetoothDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)!!
                    val name = device.name
                    val address = device.address
                    val dataIntent = Intent("com.example.bluetooth.DATA_RECEIVED")
                    dataIntent.putExtra("data", "Scanned data here") // 가정한 스캔 데이터
                    sendBroadcast(dataIntent)
                }
            }
        }
    }

    override fun onCreate() {
        super.onCreate()
        registerReceiver(receiver, IntentFilter(BluetoothDevice.ACTION_FOUND))
        bluetoothAdapter?.startDiscovery()
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(receiver)
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }
}
3. InputAccessibilityService.kt
Accessibility Service를 설정하여 다른 앱의 입력 필드에 데이터를 입력합니다.

kotlin
코드 복사
import android.accessibilityservice.AccessibilityService
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.Bundle
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class InputAccessibilityService : AccessibilityService() {
    private val dataReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            val scannedData = intent.getStringExtra("data")
            scannedData?.let { insertTextIntoInputField(it) }
        }
    }

    override fun onServiceConnected() {
        super.onServiceConnected()
        val intentFilter = IntentFilter("com.example.bluetooth.DATA_RECEIVED")
        registerReceiver(dataReceiver, intentFilter)
    }

    override fun onInterrupt() {
    }

    override fun onDestroy() {
        unregisterReceiver(dataReceiver)
        super.onDestroy()
    }

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
    }

    private fun insertTextIntoInputField(text: String) {
        val rootNode = rootInActiveWindow ?: return
        val inputFields = rootNode.findAccessibilityNodeInfosByViewId("com.example.targetapp:id/inputField")
        for (field in inputFields) {
            val arguments = Bundle()
            arguments.putCharSequence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE, text)
            field.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
        }
    }
}
4. accessibility_service_config.xml (res/xml 폴더 내부)
이 파일은 Accessibility Service의 설정을 정의합니다.

xml
코드 복사
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
                       android:accessibilityEventTypes="typeWindowStateChanged|typeWindowContentChanged"
                       android:canRetrieveWindowContent="true"
                       android:accessibilityFeedbackType="feedbackGeneric"
                       android:notificationTimeout="100"
                       android:packageNames="com.example.targetapp" />
위의 코드는 전체적인 구성을 포함하며, 실제 사용하기 전에 대상 애플리케이션의 패키지 이름, 입력 필드 ID 등을 확인하고 적절히 수정해야 합니다. 이러한 수정을 통해 다른 앱에 자동으로 데이터를 입력할 수 있습니