{% extends 'layout.html' %}

{% block content %}
<div class="container">
    <h1>{{ title }}</h1>

    <div class="mb-3">
        <button onclick="location.reload()" class="btn-custom btn-primary-custom">상태 새로고침: 전체보기</button>
        <button onclick="toggleFailedConnections()" class="btn-custom btn-danger-custom ml-2-custom">통신이상 보기</button>
    </div>

    <div class="table-responsive-custom">
        <table class="table-custom table-bordered-custom table-hover-custom">
            <thead class="thead-light-custom">
                <tr>
                    <th>PC 이름</th>
                    <th>IP 주소</th>
                    <th>TS/2000 포트 상태</th>
                </tr>
            </thead>
            <tbody>
                {% for pc in pcs %}
                <tr>
                    <td>{{ pc.name }}</td>
                    <td>{{ pc.address }}</td>
                    <td class="{% if results.get(pc.id) %}status-success{% else %}status-warning{% endif %} text-white-custom">
                        {% if results.get(pc.id) %}
                        연결 정상
                        {% else %}
                        연결 실패
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    let isShowingFailedOnly = false; // 현재 통신 이상인 행만 보고 있는지 여부

    function toggleFailedConnections() {
        const rows = document.querySelectorAll('tbody tr');
        isShowingFailedOnly = !isShowingFailedOnly; // 토글

        rows.forEach(row => {
            // 연결 상태를 나타내는 TD 요소를 찾습니다.
            // 이 TD는 status-success 또는 status-warning 클래스를 가집니다.
            const statusCell = row.querySelector('.status-success, .status-warning');

            if (statusCell) {
                const isFailedConnection = statusCell.classList.contains('status-warning'); // 연결 실패 여부 확인

                if (isShowingFailedOnly) {
                    // '통신이상 보기' 모드일 때 (즉, 통신 이상인 행만 보여주고 싶을 때)
                    if (isFailedConnection) {
                        // 통신 이상인 행은 보이게 유지
                        row.style.display = ''; // 또는 'table-row' (기본값으로 되돌림)
                    } else {
                        // 연결 정상인 행은 숨김
                        row.style.display = 'none';
                    }
                } else {
                    // '전체 보기' 모드일 때
                    // 모든 행을 보이게 합니다.
                    row.style.display = ''; // 또는 'table-row' (기본값으로 되돌림)
                }
            }
        });
    }
</script>

<style>
    /* 기본적인 컨테이너 및 버튼 스타일 (부트스트랩 없다는 가정 하에 직접 정의) */
    .container {
        margin: 20px;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }
    .mb-3 {
        margin-bottom: 1rem; /* 약 16px */
    }
    .ml-2-custom { /* 원래 ml-2 였던 부분에 ml-2-custom 추가하여 이름 충돌 방지 */
        margin-left: 0.5rem; /* 약 8px */
    }

    /* 커스텀 버튼 스타일 */
    .btn-custom {
        display: inline-block;
        font-weight: 400;
        color: #212529;
        text-align: center;
        vertical-align: middle;
        user-select: none;
        background-color: transparent;
        border: 1px solid transparent;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
        cursor: pointer;
    }
    .btn-custom:hover {
        opacity: 0.8;
    }
    .btn-primary-custom {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
    }
    .btn-danger-custom {
        color: #fff;
        background-color: #dc3545;
        border-color: #dc3545;
    }

    /* 테이블 스타일 (부트스트랩 없다는 가정 하에 직접 정의) */
    .table-responsive-custom {
        overflow-x: auto; /* 테이블이 너무 넓을 경우 스크롤 허용 */
    }
    .table-custom {
        width: 100%;
        margin-bottom: 1rem;
        color: #212529;
        border-collapse: collapse; /* 셀 경계선 겹치기 */
    }
    .table-custom th,
    .table-custom td {
        padding: 0.75rem;
        vertical-align: top;
        border-top: 1px solid #dee2e6;
    }
    .table-bordered-custom {
        border: 1px solid #dee2e6;
    }
    .table-bordered-custom th,
    .table-bordered-custom td {
        border: 1px solid #dee2e6;
    }
    .table-hover-custom tbody tr:hover {
        color: #212529;
        background-color: rgba(0, 0, 0, 0.075);
    }
    .thead-light-custom th {
        color: #495057;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }

    /* 상태 색상 (부트스트랩 없다는 가정 하에 직접 정의) */
    .status-success {
        background-color: #28a745; /* green */
        color: #fff; /* white text */
    }
    .status-warning {
        background-color: #ffc107; /* yellow */
        color: #212529; /* dark text for contrast */
    }
    .text-white-custom { /* 원래 text-white 였던 부분에 text-white-custom 추가하여 이름 충돌 방지 */
        color: #fff;
    }

    /* 행을 숨기는 CSS */
    /* .hidden-row {
        display: none;
    } */
    /* 위 주석 처리된 부분 대신 JavaScript에서 직접 style.display를 조작합니다. */

</style>
{% endblock %}