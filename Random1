// FILE_ID: ViewModels/PasswordChangeViewModel_20250410114000
using LockerManagementApp.Data;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Models;
using System;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    public class PasswordChangeViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private bool _disposed = false;

        private SecureString _currentPassword;
        private SecureString _newPassword;
        private SecureString _confirmPassword;
        private string _statusMessage;

        public SecureString CurrentPassword { get => _currentPassword; set { if(SetProperty(ref _currentPassword, value)) RaiseCanExecuteChanged(); } }
        public SecureString NewPassword { get => _newPassword; set { if(SetProperty(ref _newPassword, value)) RaiseCanExecuteChanged(); } }
        public SecureString ConfirmPassword { get => _confirmPassword; set { if(SetProperty(ref _confirmPassword, value)) RaiseCanExecuteChanged(); } }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand ChangeMasterKeyCommand { get; }
        public ICommand ChangeNormalKeyCommand { get; }

        // *** 신규: 창 닫기 요청 이벤트 ***
        public event EventHandler RequestClose;

        // *** 신규: 비밀번호 변경 성공 여부 플래그 ***
        public bool PasswordChangeSuccess { get; private set; } = false;


        public PasswordChangeViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[PasswordChange] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [PasswordChange] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; ChangeMasterKeyCommand = new RelayCommand(_ => { }, _ => false); ChangeNormalKeyCommand = new RelayCommand(_ => { }, _ => false); return; }

            ChangeMasterKeyCommand = new RelayCommand(async _ => await ChangePasswordAsync("MasterKey"), CanChangePasswordExecute);
            ChangeNormalKeyCommand = new RelayCommand(async _ => await ChangePasswordAsync("NormalKey"), CanChangePasswordExecute);
        }

        private bool CanChangePasswordExecute(object parameter)
        {
            return !_disposed &&
                   CurrentPassword != null && CurrentPassword.Length > 0 &&
                   NewPassword != null && NewPassword.Length > 0 &&
                   ConfirmPassword != null && ConfirmPassword.Length > 0;
        }

        private async Task ChangePasswordAsync(string keyToChange)
        {
            if (!CanChangePasswordExecute(null)) return;

            string currentPlainText = ConvertToUnsecureString(CurrentPassword);
            string newPlainText = ConvertToUnsecureString(NewPassword);
            string confirmPlainText = ConvertToUnsecureString(ConfirmPassword);

            if (string.IsNullOrEmpty(currentPlainText) || string.IsNullOrEmpty(newPlainText) || string.IsNullOrEmpty(confirmPlainText))
            {
                StatusMessage = "현재 비밀번호, 새 비밀번호, 확인 비밀번호를 모두 입력하세요.";
                MessageBox.Show(StatusMessage, "입력 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            if (newPlainText != confirmPlainText)
            {
                StatusMessage = "새 비밀번호와 확인 비밀번호가 일치하지 않습니다.";
                MessageBox.Show(StatusMessage, "입력 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            StatusMessage = $"{keyToChange} 변경 중...";
            PasswordChangeSuccess = false; // 초기화
            try
            {
                var setting = await _context.AppSettings.FindAsync(keyToChange);
                if (setting == null)
                {
                    StatusMessage = $"설정 오류: 데이터베이스에서 '{keyToChange}' 설정을 찾을 수 없습니다.";
                    MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }

                if (setting.SettingValue != currentPlainText)
                {
                    StatusMessage = "현재 비밀번호가 일치하지 않습니다.";
                    MessageBox.Show(StatusMessage, "인증 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                setting.SettingValue = newPlainText;
                _context.Entry(setting).State = EntityState.Modified;
                int result = await _context.SaveChangesAsync();

                if (result > 0)
                {
                    StatusMessage = $"{keyToChange} 비밀번호가 성공적으로 변경되었습니다.";
                    MessageBox.Show(StatusMessage, "변경 완료", MessageBoxButton.OK, MessageBoxImage.Information);
                    PasswordChangeSuccess = true; // 성공 플래그 설정
                    RequestClose?.Invoke(this, EventArgs.Empty); // 창 닫기 요청
                }
                else
                {
                    StatusMessage = $"{keyToChange} 비밀번호 변경 중 오류가 발생했습니다 (DB 반영 실패).";
                    MessageBox.Show(StatusMessage, "변경 실패", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                StatusMessage = $"{keyToChange} 비밀번호 변경 중 오류 발생: {ex.Message}";
                if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                else Debug.WriteLine($"종료 중 비밀번호 변경 오류 무시됨: {ex.ToString()}");
            }
            finally
            {
                RaiseCanExecuteChanged(); // 버튼 상태 갱신
            }
        }

        private void RaiseCanExecuteChanged()
        {
             (ChangeMasterKeyCommand as RelayCommand)?.RaiseCanExecuteChanged();
             (ChangeNormalKeyCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }


        private string ConvertToUnsecureString(SecureString securePassword)
        {
            if (securePassword == null) return string.Empty;
            IntPtr ptr = IntPtr.Zero;
            try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); }
            finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); }
        }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("PasswordChangeViewModel Dispose 시작..."); try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! PasswordChangeViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("PasswordChangeViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
```

**핵심 변경 사항:**

* **`PasswordChangeSuccess` 속성 추가:** 비밀번호 변경 작업의 성공 여부를 저장하는 `bool` 타입 속성을 추가했습니다. 이 값은 `MainViewModel`에서 확인합니다.
* **`RequestClose` 이벤트 추가:** 비밀번호 변경 성공 시 이벤트를 발생시켜 연결된 View(`PasswordChangeWindow`)가 스스로 닫히도록 요청합니다.
* **`ChangePasswordAsync` 메서드 수정:** 비밀번호 변경 성공 시(`result > 0`) `PasswordChangeSuccess`를 `true`로 설정하고 `RequestClose` 이벤트를 발생시킵니다. 또한, 성공 후 입력 필드를 초기화하는 로직을 추가했습니다(선택 사항).