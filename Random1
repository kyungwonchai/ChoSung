inearGradientBrush를 사용하여 그라데이션 색상을 C# 코드에서 직접 지정할 때, 색상을 #ff221212처럼 지정할 수 있습니다. 이를 위해 ColorConverter를 사용하여 문자열로 지정된 색상을 Color 객체로 변환한 후 GradientStop에 추가하면 됩니다.

아래는 ListBox 배경색을 #ff221212와 같은 형식으로 지정하는 방법을 설명한 수정된 코드입니다.

C# 코드 비하인드 파일 수정
UpdateListBoxBackground() 메소드에서 그라데이션 색상을 문자열로 지정된 형태로 설정하도록 수정합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeSpreadsheetEventHandlers();
            LoadSheetNamesIntoListBox();
        }

        // SpreadsheetControl의 이벤트 핸들러를 설정하는 메소드
        private void InitializeSpreadsheetEventHandlers()
        {
            spreadsheetControl1.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl1.Document.WorksheetRemoved += OnWorksheetChanged;

            spreadsheetControl2.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl2.Document.WorksheetRemoved += OnWorksheetChanged;
        }

        // 시트가 추가되거나 삭제될 때 호출되는 이벤트 핸들러
        private void OnWorksheetChanged(object sender, WorksheetCollectionChangedEventArgs e)
        {
            LoadSheetNamesIntoListBox();
            UpdateListBoxBackground(); // 시트 개수에 따라 ListBox 배경 업데이트
        }

        // ListBox의 배경을 업데이트하는 메소드
        private void UpdateListBoxBackground()
        {
            int sheetCount = spreadsheetControl2.Document.Worksheets.Count;
            if (sheetCount >= 2)
            {
                // 시트가 2개 이상일 때 #ff221212와 다른 색상으로 그라데이션 적용
                var gradientBrush = new LinearGradientBrush();

                // 색상을 문자열로 지정하여 Color 객체로 변환
                Color color1 = (Color)ColorConverter.ConvertFromString("#ff221212");
                Color color2 = (Color)ColorConverter.ConvertFromString("#ffddcc33");

                gradientBrush.GradientStops.Add(new GradientStop(color1, 0.0));
                gradientBrush.GradientStops.Add(new GradientStop(color2, 1.0));

                sheetListBox.Background = gradientBrush;
            }
            else
            {
                // 시트가 1개 이하일 때 기본 배경색으로 설정
                sheetListBox.Background = Brushes.White;
            }
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            sheetListBox.Items.Clear(); // 기존 항목을 모두 지웁니다.

            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1", 0);
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2", 1);
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier, int tabIndex)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 및 탭 인덱스 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet, TabIndex = tabIndex };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체, TabIndex를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 해당 탭을 활성화합니다.
                    tabControl.SelectedIndex = tag.TabIndex;

                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // 버튼 클릭 시 시트를 추가하는 메소드
        private void AddSheetButton_Click(object sender, RoutedEventArgs e)
        {
            IWorkbook workbook = spreadsheetControl2.Document;

            // 새로운 시트 추가
            Worksheet newSheet = workbook.Worksheets.Add();
            newSheet.Name = $"NewSheet{workbook.Worksheets.Count}"; // 시트 이름을 유니크하게 설정

            // 두 번째 탭 (SpreadsheetControl2가 있는 탭) 선택
            tabControl.SelectedIndex = 1;

            // 추가된 시트를 활성화
            workbook.Worksheets.ActiveWorksheet = newSheet;

            // ListBox 갱신 및 배경 업데이트
            LoadSheetNamesIntoListBox();
            UpdateListBoxBackground();
        }

        // SpreadsheetControl, Worksheet 및 TabIndex를 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
            public int TabIndex { get; set; }
        }
    }
}
주요 수정 사항
그라데이션 색상 설정:

UpdateListBoxBackground() 메소드에서 LinearGradientBrush의 그라데이션 색상을 #ff221212처럼 문자열로 지정했습니다.
ColorConverter.ConvertFromString() 메소드를 사용하여 문자열을 Color 객체로 변환했습니다.
두 가지 색상 (#ff221212와 #ffddcc33)을 그라데이션으로 사용했습니다. 필요에 따라 원하는 색상 문자열을 입력해주시면 됩니다.
LinearGradientBrush의 사용:

GradientStop을 통해 그라데이션의 시작점과 끝점을 설정했습니다.
첫 번째 색상은 0.0 위치, 두 번째 색상은 1.0 위치에 지정하여 자연스러운 그라데이션을 적용했습니다.
사용 예시
버튼 클릭 시 시트 추가:

버튼을 클릭하면 SpreadsheetControl2에 새로운 시트가 추가됩니다.
추가된 시트를 활성화하고, 탭 컨트롤의 두 번째 탭이 선택됩니다.
시트 개수에 따른 리스트박스 배경색 변경:

SpreadsheetControl2