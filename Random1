 하겠습니다.

아래는 수정된 MainWindow.xaml과 MainWindow.xaml.cs 파일입니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD 검사기 이미지 파일 삭제" Height="600" Width="800"
        Closing="Window_Closing">
    <Window.Resources>
        <!-- 스타일 리소스 정의 -->
        <Style x:Key="RoundedButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#FF800080"/> <!-- 보라색 배경 -->
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="#FF4B0082"/> <!-- 보라색 테두리 -->
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Border Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="15">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF9932CC"/> <!-- 밝은 보라색 배경 -->
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="60"/> <!-- 제목 -->
            <RowDefinition Height="50"/> <!-- 폴더 선택 및 확장자 선택 -->
            <RowDefinition Height="50"/> <!-- 시작 및 종료 버튼 -->
            <RowDefinition Height="*"/> <!-- 리스트박스 -->
        </Grid.RowDefinitions>

        <!-- 제목 -->
        <TextBlock Grid.Row="0" Text="SMD 검사기 이미지 파일 삭제" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,10"/>

        <!-- 폴더 선택 및 확장자 선택 -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5">
            <TextBlock Text="현재 폴더:" VerticalAlignment="Center" Margin="5"/>
            <TextBox x:Name="txtFolderPath" Width="300" Margin="5" IsReadOnly="True"/>
            <Button Style="{StaticResource RoundedButtonStyle}" Content="폴더 선택" Click="btnSelectFolder_Click"/>
            <TextBlock Text="확장자:" VerticalAlignment="Center" Margin="5"/>
            <ComboBox x:Name="cmbFileExtension" Width="100" Margin="5">
                <ComboBoxItem Content=".jpg"/>
                <ComboBoxItem Content=".png"/>
                <ComboBoxItem Content=".bmp"/>
            </ComboBox>
        </StackPanel>

        <!-- 시작 및 종료 버튼 -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Style="{StaticResource RoundedButtonStyle}" Content="시작" Click="btnStart_Click" Width="100" Height="50" HorizontalAlignment="Right" Margin="5"/>
            <Button Grid.Column="1" Style="{StaticResource RoundedButtonStyle}" Content="종료" Click="btnExit_Click" Width="100" Height="50" HorizontalAlignment="Left" Margin="5"/>
        </Grid>

        <!-- 탭 -->
        <TabControl Grid.Row="3">
            <TabItem Header="운영 로그">
                <Grid>
                    <ListBox x:Name="lstRecentLogs" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="운영 로그" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="삭제 로그">
                <Grid>
                    <ListBox x:Name="lstDeletionLogs" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="삭제 로그" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="우선순위 파일">
                <Grid>
                    <ListBox x:Name="lstPriorityFiles" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="우선순위 파일" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="학습 데이터">
                <Grid>
                    <DataGrid x:Name="dataGridTrainingData" Width="700" Height="400" Margin="5" AutoGenerateColumns="True"/>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private NotifyIcon notifyIcon;
        private SettingsManager _settingsManager;
        private Logger _logger;
        private MLModelBuilder _mlModelBuilder;
        private FileCleaner _fileCleaner;
        private const long MinimumSampleSize = 21; // 최소 샘플 수를 21개로 설정
        private const long MinimumFreeSpace = 25L * 1024 * 1024 * 1024; // 25 GB
        private const long MaxFolderSize = 8L * 1024 * 1024 * 1024; // 8 GB
        private List<FileRecord> _trainingData;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTrayIcon();
            _settingsManager = new SettingsManager("C:\\Agent\\SMDClean");
            _logger = new Logger("C:\\Agent\\SMDClean\\Logs", Dispatcher, LogRecentActivity, LogDeletionActivity);
            _mlModelBuilder = new MLModelBuilder();
            _fileCleaner = new FileCleaner("C:\\Agent\\SMDClean\\Logs", _mlModelBuilder, Dispatcher, _logger, UpdateFolderStatistics);
            LoadSettings();
        }

        private void InitializeTrayIcon()
        {
            notifyIcon = new NotifyIcon
            {
                Icon = System.Drawing.SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
            };

            notifyIcon.ContextMenuStrip.Items.Add("열기", null, Open_Click);
            notifyIcon.ContextMenuStrip.Items.Add("닫기", null, Close_Click);
            notifyIcon.DoubleClick += Open_Click;
        }

        private void Open_Click(object sender, EventArgs e)
        {
            Show();
            WindowState = WindowState.Normal;
        }

        private void Close_Click(object sender, EventArgs e)
        {
            if (System.Windows.MessageBox.Show("프로그램을 종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
            {
                notifyIcon.Dispose();
                Application.Current.Shutdown();
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
            notifyIcon.BalloonTipText = "프로그램이 트레이로 최소화되었습니다.";
            notifyIcon.ShowBalloonTip(3000);
        }

        private void btnExit_Click(object sender, RoutedEventArgs e)
        {
            Close_Click(sender, e);
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = txtFolderPath.Text;
                if (dialog.ShowDialog() == DialogResult.OK)
                {
                    txtFolderPath.Text = dialog.SelectedPath;
                    SaveSettings(); // 폴더 선택 시 설정 저장
                }
            }
        }

        private void SaveSettings()
        {
            try
            {
                _settingsManager.SaveSettings(new Settings
                {
                    FolderPath = txtFolderPath.Text,
                    FileExtension = cmbFileExtension.Text,
                    DriveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = _settingsManager.LoadSettings();
                if (settings != null)
                {
                    txtFolderPath.Text = settings.FolderPath ?? "D:\\";
                    cmbFileExtension.Text = settings.FileExtension ?? ".jpg";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private async void btnStart_Click(object sender, RoutedEventArgs e)
        {
            string folderPath = txtFolderPath.Text;
            string fileExtension = cmbFileExtension.Text;
            string driveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\";

            if (string.IsNullOrEmpty(folderPath) || string.IsNullOrEmpty(fileExtension))
            {
                System.Windows.MessageBox.Show("모든 입력값을 제공해주세요.");
                return;
            }

            try
            {
                LogRecentActivity("학습 중...");

                _trainingData = await Task.Run(() => CollectInitialFileData(folderPath, fileExtension));
                if (_trainingData.Count < MinimumSampleSize)
                {
                    System.Windows.MessageBox.Show($"학습 모델을 훈련시키기에 샘플이 충분하지 않습니다. 최소 샘플 수: {MinimumSampleSize}");
                    LogRecentActivity("학습 실패: 샘플 부족");
                    return;
                }

                _mlModelBuilder.TrainModel(_trainingData);

                LogRecentActivity("학습 완료");
                LogRecentActivity(string.Join(", ", _mlModelBuilder.GetRegexPatterns().Select(p => p.ToString())));

                Dispatcher.Invoke(() =>
                {
                    dataGridTrainingData.ItemsSource = _trainingData.Select(f => new
                    {
                        f.FilePath,
                        f.Extension,
                        f.Size,
                        f.FolderPath,
                        Pattern = _mlModelBuilder.GetPattern(f.FilePath)
                    }).ToList();

                    HighlightTrainingData();
                });

                await Task.Run(() => MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName));
            }
            catch (Exception ex)
            {
                _logger.LogError("모델 훈련 실패: " + ex.Message);
                LogRecentActivity("학습 실패: " + ex.Message);
            }
        }

        private List<FileRecord> CollectInitialFileData(string folderPath, string fileExtension)
        {
            var fileDataList = new List<FileRecord>();
            try
            {
                var files = GetFiles(folderPath, fileExtension);
                if (files != null && files.Count >= MinimumSampleSize)
                {
                    fileDataList = files.Select(f => new FileRecord
                    {
                        FilePath = f.FullName,
                        Extension = f.Extension,
                        Size = (float)f.Length,
                        FolderPath = f.DirectoryName
                    }).ToList();

                    LogRecentActivity($"학습 중인 파일 수: {files.Count}개");
                }
                else
                {
                    LogRecentActivity("학습할 파일이 없습니다.");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("파일 데이터 수집 실패: " + ex.Message);
                LogRecentActivity("파일 데이터 수집 오류.");
            }
            return fileDataList;
        }

        private List<FileInfo> GetFiles(string folderPath, string fileExtension)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles($"*{fileExtension}", SearchOption.TopDirectoryOnly)
                    .Where(f => f.Length > 1 * 1024 * 1024)); // 1MB 이상의 파일

                foreach (var subDir in directory.GetDirectories())
                {
                    if (!IsSystemVolumeInformation(subDir))
                    {
                        files.AddRange(GetFiles(subDir.FullName, fileExtension));
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                _logger.LogError("폴더 접근 거부됨: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        private bool IsSystemVolumeInformation(DirectoryInfo dirInfo)
        {
            return dirInfo.FullName.Contains("System Volume Information");
        }

        private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
        {
            while (true)
            {
                try
                {
                    long freeSpace = await Task.Run(() => _fileCleaner.GetDriveFreeSpace(driveName));
                    List<FileInfo> filesToDelete;

                    if (freeSpace <= MinimumFreeSpace)
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension, forceDelete: true));
                        _logger.LogRecentActivity($"용량이 {freeSpace / (1024 * 1024 * 1024)} GB 남아서 강제 삭제를 진행합니다.");
                    }
                    else
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension));
                        if (filesToDelete.Count > 0)
                        {
                            _logger.LogRecentActivity("삭제를 진행합니다.");
                        }
                    }

                    Dispatcher.Invoke(() => DisplayFilesToDelete(filesToDelete));
                    await _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath, forceDelete: freeSpace <= MinimumFreeSpace);

                    await Task.Run(() => _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension));
                    await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
                }
                catch (Exception ex)
                {
                    _logger.LogError("모니터링 중 오류 발생: " + ex.Message);
                }
            }
        }

        private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
        {
            Dispatcher.Invoke(() =>
            {
                lstPriorityFiles.Items.Clear();
                foreach (var file in filesToDelete)
                {
                    lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
                }

                if (filesToDelete.Count == 0)
                {
                    var allFiles = GetFiles(txtFolderPath.Text, cmbFileExtension.Text);
                    var prioritizedFiles = allFiles.OrderByDescending(f => f.CreationTime).ToList();
                    lstPriorityFiles.Items.Add("현재 삭제할 파일이 없지만, 우선순위에 따른 목록을 표시합니다:");
                    foreach (var file in prioritizedFiles)
                    {
                        lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
                    }
                }
            });
        }

        private void HighlightTrainingData()
        {
            var data = dataGridTrainingData.ItemsSource as List<dynamic>;
            if (data == null) return;

            foreach (var item in dataGridTrainingData.Items)
            {
                var row = (DataGridRow)dataGridTrainingData.ItemContainerGenerator.ContainerFromItem(item);
                if (row == null) continue;

                var cell = (DataGridCell)dataGridTrainingData.Columns[0].GetCellContent(row).Parent;
                cell.Background = System.Windows.Media.Brushes.LightYellow; // 학습 데이터 셀 강조 색상 설정
            }
        }

        private void LogRecentActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }

        private void LogDeletionActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstDeletionLogs.Items.Add(logMessage);
                if (lstDeletionLogs.Items.Count > 200)
                {
                    lstDeletionLogs.Items.RemoveAt(0);
                }
            });
        }

        private void UpdateFolderStatistics(long totalSize, string folderPath)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: 폴더: {folderPath}, 총 크기: {totalSize / (1024 * 1024)} MB";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }
    }
}
이제 학습이 완료되면 우선순위 데이터를 무조건 표시하고, 학습 데이터 그리드에도 학습 과정과 패턴이 표시되도록 했습니다. 만약 삭제