inViewModel에 정의되어 있고, 특정 행에서 Resume 버튼을 눌렀을 때 그 행부터 나머지 작업들을 다시 대기열에 등록하는 용도로 사용되어야 합니다. 이 메서드는 사용자가 직접 특정 행을 선택하고 그 행부터 작업을 재개하기 위해 만들어졌지만, 연결된 부분이 없습니다.

수정 방향:
ResumeTasksFrom을 활용하려면, Resume 버튼을 누르면 ResumeTasksFrom 메서드가 호출되도록 연결해야 합니다. DataGrid에서 특정 TaskModel을 선택한 후 ResumeTasksFrom을 호출해 그 행부터 다시 작업을 실행해야 합니다.

수정된 ResumeTasksFrom 사용 예시:
MainViewModel Class 수정
ResumeTasksFrom을 호출하도록 연결하겠습니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;

    // 전체를 관리하는 Resume 명령어 (특정 행 Resume 기능)
    public ICommand GlobalResumeCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();  // TaskQueue 인스턴스 생성

        // 작업 목록 초기화
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }, _taskQueue),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" }, _taskQueue)
        };

        // Resume 명령어 설정
        GlobalResumeCommand = new RelayCommand<TaskModel>(ResumeTasksFrom);
    }

    /// <summary>
    /// 특정 행부터 작업을 다시 시작 (DataGrid에서 Resume 버튼 누를 때 호출)
    /// </summary>
    public void ResumeTasksFrom(TaskModel selectedTask)
    {
        int startIndex = TaskList.IndexOf(selectedTask); // 시작할 행의 인덱스

        // 작업 큐를 비워서 이전 작업을 모두 삭제
        _taskQueue.ClearQueue();

        // 선택된 행부터 남은 작업들을 다시 대기열에 추가
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.ResumeTask();  // 해당 행부터 작업 재개
        }
    }
}
수정 설명:
GlobalResumeCommand를 정의하여, ResumeTasksFrom을 특정 행의 Resume 버튼에 연결합니다.
이 명령어는 특정 TaskModel 행을 매개변수로 받아서 그 행부터 작업을 다시 실행합니다.
XAML 수정 (GlobalResumeCommand 연결)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- Resume 버튼 -->
                <DataGridTemplateColumn Header="Resume">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Resume" 
                                    Command="{Binding DataContext.GlobalResumeCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
XAML 설명:
Resume 버튼을 클릭하면 GlobalResumeCommand가 호출되며, CommandParameter로 해당 TaskModel을 전달합니다.
즉, 사용자가 특정 행의 Resume 버튼을 클릭하면 해당 행부터 ResumeTasksFrom 메서드가 호출되어 그 행 이후의 작업이 다시 실행됩니다.
최종 요약:
**ResumeTasksFrom** 메서드는 이제 DataGrid의 Resume 버튼에 연결되었습니다.
Resume 버튼을 클릭하면 해당 행부터 이후 작업이 재실행되고, 이전 작업은 무시됩니다.
TaskQueue는 기존 작업 대기열을 비운 후, 다시 작업을 순차적으로 등록해서 실행합니다.
이제 이 구조를 통해 원하는 대로 특정 행 이후 작업만 실행되게 할 수 있습니