// 프로젝트 구조: WPF + DevExpress 22.2 + MSSQL
// 기능: 사용자 정보 및 관리 항목(사물함, 신발장, 락커) 관리
// 사용자 정보 표시, 수정, 추가, 삭제 기능 포함
// 레이아웃 관리 기능 제공 (색상 변경, 배치 이동 등)
// 실시간으로 UI 업데이트 및 데이터베이스 동기화

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using DevExpress.Xpf.Grid;
using System.Data.SqlClient;
using System.Data;
using DevExpress.Xpf.Diagram;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace WPF_DevExpress_Locker_Management
{
    public class UserModel : INotifyPropertyChanged
    {
        public int UserID { get; set; }
        public string Name { get; set; }
        public string KnoxID { get; set; }
        public string Department { get; set; }
        public string UniqueKey { get; set; }  // 완전 고유키

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class LockerModel : INotifyPropertyChanged
    {
        public int LockerID { get; set; }
        public int UserID { get; set; }
        public string Type { get; set; }  // 사물함, 신발장, 락커
        public string Floor { get; set; }
        public string Zone { get; set; }
        public string Position { get; set; }
        public string ManagerName { get; set; }
        public string Department { get; set; }
        public DateTime LastModified { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<UserModel> Users { get; set; }
        public ObservableCollection<LockerModel> Lockers { get; set; }
        public LockerService LockerService { get; set; }

        public MainViewModel()
        {
            LockerService = new LockerService();
            Users = new ObservableCollection<UserModel>(LockerService.GetAllUsers());
            Lockers = new ObservableCollection<LockerModel>(LockerService.GetAllLockers());
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

        public async Task RefreshDataAsync()
        {
            var users = await LockerService.GetAllUsersAsync();
            var lockers = await LockerService.GetAllLockersAsync();

            App.Current.Dispatcher.Invoke(() =>
            {
                Users.Clear();
                Lockers.Clear();
                foreach (var user in users) Users.Add(user);
                foreach (var locker in lockers) Lockers.Add(locker);
            });
        }
    }

    public class LockerService
    {
        private readonly string connectionString = "Server=localhost;Database=LockerDB;User Id=your_user;Password=your_password;";

        public ObservableCollection<UserModel> GetAllUsers()
        {
            var users = new ObservableCollection<UserModel>();
            using (var conn = new SqlConnection(connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT * FROM Users", conn);
                var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    users.Add(new UserModel
                    {
                        UserID = reader.GetInt32(0),
                        Name = reader.GetString(1),
                        KnoxID = reader.GetString(2),
                        Department = reader.GetString(3),
                        UniqueKey = reader.GetString(4)
                    });
                }
            }
            return users;
        }

        public ObservableCollection<LockerModel> GetAllLockers()
        {
            var lockers = new ObservableCollection<LockerModel>();
            using (var conn = new SqlConnection(connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT * FROM Lockers", conn);
                var reader = cmd.ExecuteReader();
                while (reader.Read())
                {
                    lockers.Add(new LockerModel
                    {
                        LockerID = reader.GetInt32(0),
                        UserID = reader.GetInt32(1),
                        Type = reader.GetString(2),
                        Floor = reader.GetString(3),
                        Zone = reader.GetString(4),
                        Position = reader.GetString(5),
                        ManagerName = reader.GetString(6),
                        Department = reader.GetString(7),
                        LastModified = reader.GetDateTime(8)
                    });
                }
            }
            return lockers;
        }
    }