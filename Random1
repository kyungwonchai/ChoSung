요구사항 정리
행마다 배경색을 교차로 적용 (짝수 행: 아쿠아, 홀수 행: 흰색).

각 행의 MC1 ~ MC8 값 중 최대값을 노란색으로 강조.

배경색 스타일은 기본으로 적용하고, 그 위에 최대값 스타일을 덮어쓰기.

✅ 수정된 코드
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data(proc_name):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(f"EXEC {proc_name}")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 함수 (전체 높이 사용)
def create_dataframe(rows):
    original_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "ACT2_1", "ACT2_2", "ACT2_3", "ACT2_4",
        "ACT2_5", "ACT2_6", "ACT2_7", "ACT2_8"
    ]

    new_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    df = pd.DataFrame(rows, columns=original_columns)
    df.columns = new_columns

    mc_columns = [f"MC{i}" for i in range(1, 9)]
    df[mc_columns] = df[mc_columns].astype(float).round(2)

    return df, mc_columns

# Streamlit 앱 구성
def main():
    st.set_page_config(page_title="MC1 ~ MC8 Data Table", layout="wide")
    st.title("MC1 ~ MC8 Data Table - 가독성 개선 및 강조 표시")

    rows = fetch_main_data("Get_min_bestdifferent_t1")
    
    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        df, mc_columns = create_dataframe(rows)

        # 테이블 스타일링: 홀수 행과 짝수 행에 서로 다른 배경색 설정 (아쿠아)
        def alternate_row_colors(row_index):
            if row_index % 2 == 0:
                return ['background-color: #E0FFFF'] * len(df.columns)  # 아쿠아 색상 (E0FFFF)
            else:
                return ['background-color: white'] * len(df.columns)

        # 최대값 강조 함수 (노란색)
        def highlight_max(row):
            max_value = row[mc_columns].max()
            return ['background-color: yellow' if v == max_value else '' for v in row]

        # 스타일 적용: 배경색 + 최대값 강조
        styled_df = df.style.apply(alternate_row_colors, axis=0)
        styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)

        # 스타일링된 테이블 표시
        st.write(styled_df)

if __name__ == "__main__":
    main()
✅ 코드 설명
행 배경색 스타일 설정 (alternate_row_colors)

python
코드 복사
def alternate_row_colors(row_index):
    if row_index % 2 == 0:
        return ['background-color: #E0FFFF'] * len(df.columns)  # 아쿠아 색상 (E0FFFF)
    else:
        return ['background-color: white'] * len(df.columns)
짝수 행: 아쿠아 색상 (#E0FFFF).

홀수 행: 흰색 (white).

최대값 강조 (highlight_max)

python
코드 복사
def highlight_max(row):
    max_value = row[mc_columns].max()
    return ['background-color: yellow' if v == max_value else '' for v in row]
MC1 ~ MC8 값 중 가장 큰 값을 노란색으로 강조.

스타일 적용 순서 (덮어쓰기)

python
코드 복사
styled_df = df.style.apply(alternate_row_colors, axis=0)
styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)
배경색 적용 후 최대값 강조를 덮어쓰기.

📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
🔥 결과
행 배경색은 짝수 행에 아쿠아 색 (#E0FFFF), 홀수 행에 흰색으로 설정됨.

각 행의 최대값은 노란색으로 강조됨.

배경색 위에 노란색 강조가 덮어쓰기 적용됨.