드로이드에서 블루투스 스캐너 데이터를 중계 애플리케이션을 통해 다른 앱으로 전달하는 코드를 제공하기 위해, 여기서는 블루투스 데이터 수신을 위한 서비스와 해당 데이터를 다른 앱의 입력 필드로 전송하는 Accessibility Service의 구현을 포함하는 예제를 제시합니다.

1. AndroidManifest.xml 설정
블루투스 및 Accessibility 서비스에 필요한 권한을 포함하도록 수정합니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>
    <application
        ...>
        <service
            android:name=".BluetoothService"
            android:enabled="true"
            android:exported="true" />
        <service
            android:name=".InputAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>

            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>
</manifest>
2. BluetoothService.kt
블루투스 서비스를 설정하여 블루투스 데이터를 수신하고 로컬 브로드캐스트를 통해 전송합니다.

kotlin
코드 복사
import android.app.Service
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.os.IBinder

class BluetoothService : Service() {
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()

    private val receiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context, intent: Intent) {
            when (intent.action) {
                BluetoothDevice.ACTION_FOUND -> {
                    val device: BluetoothDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE)!!
                    val name = device.name
                    val address = device.address
                    // 데이터를 받으면 브로드캐스트 메시지를 보냅니다.
                    val dataIntent = Intent("com.example.bluetooth.DATA_RECEIVED")
                    dataIntent.putExtra("data", "Scanned data here") // 가정한 스캔 데이터
                    sendBroadcast(dataIntent)
                }
            }
        }
    }

    override fun onCreate() {
        super.onCreate()
        registerReceiver(receiver, IntentFilter(BluetoothDevice.ACTION_FOUND))
        bluetoothAdapter?.startDiscovery()
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(receiver)
    }

    override fun onBind(intent: Intent): IBinder? {
        return null
    }
}
3. InputAccessibilityService.kt
Accessibility Service를 설정하여 다른 앱의 특정 입력 필드에 데이터를 입력합니다.

kotlin
코드 복사
import android.accessibilityservice.AccessibilityService
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class InputAccessibilityService : AccessibilityService() {
    override fun onAccessibilityEvent(event: AccessibilityEvent) {
        // 이벤트 처리 논리
    }

    override fun onInterrupt() {
    }

    override fun onServiceConnected() {
        super.onServiceConnected()
        // 서비스가 연결되면 실행할 코드
    }

    private fun inputData(data: String) {
        val rootInActiveWindow = rootInActiveWindow ?: return
        val inputFields = rootInActiveWindow.findAccessibilityNodeInfosByViewId("com.example.targetapp:id/inputField")
        if (inputFields.isNotEmpty()) {
            for (field in inputFields) {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE, data
                )
                field.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
            }
        }
    }
}
4. accessibility_service_config.xml
xml
코드 복사
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
                       android:accessibilityEventTypes="typeWindowStateChanged|typeWindowContentChanged"
                       android:canRetrieveWindowContent="true"
                       android:accessibilityFeedbackType="feedbackGeneric"
                       android:notificationTimeout="100"
                       android:packageNames="com.example.targetapp" />
이 코드들은 개념적인 예시로 실제 동작 환경에 맞게 조정이 필요합니다. 각 앱의 ID, 입력 필드, 및 특정 블루투스 데이터 포맷에 따라 구현이 달라질 수 있습