속 자동 초점 기능을 cameraControl.startFocusAndMetering을 사용하여 설정하려는 경우, 다음과 같이 수정할 수 있습니다.

수정된 코드
kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var handler: Handler

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
        handler = Handler(Looper.getMainLooper())
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                val camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

                // 연속적으로 초점을 조정하도록 설정
                handler.post(object : Runnable {
                    override fun run() {
                        val meteringPoint = viewFinder.meteringPointFactory.createPoint(
                            viewFinder.width / 2f,
                            viewFinder.height / 2f
                        )
                        val action = FocusMeteringAction.Builder(meteringPoint, FocusMeteringAction.FLAG_AF)
                            .setAutoCancelDuration(1, java.util.concurrent.TimeUnit.SECONDS)
                            .build()
                        
                        camera.cameraControl.startFocusAndMetering(action)
                        
                        handler.postDelayed(this, 10) // 10ms (0.01초)마다 실행
                    }
                })

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
        handler.removeCallbacksAndMessages(null) // 모든 핸들러 작업 중지
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 사항:
startFocusAndMetering 사용:

FocusMeteringAction을 통해 중앙에 있는 포인트에 대해 자동 초점(Auto Focus, AF)을 계속 시도하도록 설정했습니다.
handler.postDelayed를 사용해 10ms(0.01초)마다 startFocusAndMetering을 호출하여 초점 조정이 실시간으로 이루어지도록 했습니다.
AutoCancelDuration 설정:

초점이 자동으로 해제되지 않도록 AutoCancelDuration을 1초로 설정했습니다. 이를 통해 연속적인 초점 조정을 유지할 수 있습니다.
이 코드로 CameraX에서 초점을 실시간으로 빠르게 조정할 수 있습니다. 핸들러를 통해 초점 조정을 0.01초마다 강제하도록 설정했으므로, 카메라가 실시간으로 빠르게 초점을 조정할 수 있