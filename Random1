터 4까지 값을 전송하던 기능을 유지하면서, 텍스트박스에 입력한 값을 전송하는 기능과 DT2330 번지를 처리하는 기능을 추가하는 방식으로 수정해드리겠습니다. 또한, 유연한 방법으로 명령을 관리할 수 있도록 RelayCommand를 사용한 명령 패턴을 유지하겠습니다.

1. MainWindow.xaml 수정
MainWindow.xaml에 텍스트박스와 관련 버튼을 추가하고, 기존에 동적으로 생성되던 버튼들을 유지하기 위한 ItemsControl을 그대로 사용합니다.

xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:RouterMiddleACR.Controls"
        Title="RouterMiddleACR" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- PLC 상태 표시 -->
            <TextBlock Text="PLC 상태:" FontWeight="Bold" FontSize="16" />
            <TextBlock Text="{Binding R520Status}" Margin="5" />
            <TextBlock Text="{Binding R521Status}" Margin="5" />

            <!-- 사용자 입력 텍스트박스와 전송 버튼 -->
            <TextBox x:Name="ValueInputTextBox" Width="200" Margin="5"/>
            <Button Content="텍스트 값 전송" Command="{Binding SendTextBoxValueCommand}" CommandParameter="{Binding Text, ElementName=ValueInputTextBox}" Margin="5" />

            <!-- Zero부터 4까지 동적 버튼 생성 -->
            <ItemsControl ItemsSource="{Binding ButtonCommands}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Button Content="{Binding Key}" Command="{Binding Value}" Margin="2"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>

            <!-- DT2330 처리용 버튼 추가 -->
            <Button Content="DT2330 처리" Command="{Binding ProcessDT2330Command}" Margin="5" />
        </StackPanel>
    </Grid>
</Window>
2. MainViewModel.cs 수정
MainViewModel에 명령들을 정의하여 사용자가 텍스트박스에 입력한 값을 전송하고, DT2330 번지를 처리하는 기능을 추가합니다. 또한 기존의 동적 버튼 생성 기능을 유지합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Windows.Input;
using RouterMiddleACRService;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly ComPortManager _comPortManager;
        private string _r520Status;
        private string _r521Status;

        public string R520Status
        {
            get => _r520Status;
            set
            {
                _r520Status = value;
                OnPropertyChanged(nameof(R520Status));
            }
        }

        public string R521Status
        {
            get => _r521Status;
            set
            {
                _r521Status = value;
                OnPropertyChanged(nameof(R521Status));
            }
        }

        public ObservableCollection<KeyValuePair<string, ICommand>> ButtonCommands { get; set; }

        // 명령 생성
        public ICommand SendTextBoxValueCommand { get; }
        public ICommand ProcessDT2330Command { get; }

        public MainViewModel()
        {
            _comPortManager = new ComPortManager();
            _comPortManager.ConfigurePort("COM1");

            ButtonCommands = new ObservableCollection<KeyValuePair<string, ICommand>>();
            InitializeCommands();

            // 명령 초기화
            SendTextBoxValueCommand = new RelayCommand<string>(async (value) => await SendTextBoxValueToPLC(value));
            ProcessDT2330Command = new RelayCommand(async () => await ReadAndClearDT2330Data());

            // 주기적으로 PLC 상태를 확인하는 작업 시작
            Task.Run(UpdatePLCStatusAsync);
        }

        private void InitializeCommands()
        {
            for (int i = 0; i <= 4; i++)
            {
                int value = i;
                ButtonCommands.Add(new KeyValuePair<string, ICommand>(
                    $"Button {i}",
                    new RelayCommand(async () => await SendNumberToPLC(value))));
            }
        }

        public async Task SendNumberToPLC(int number)
        {
            string command = $"%01#WDD0230000230{number:D2}00**\r";
            await _comPortManager.SendDataToPLCAsync(command);
            LogMessage($"Sent {number} to PLC");
        }

        public async Task SendTextBoxValueToPLC(string value)
        {
            if (int.TryParse(value, out int intValue))
            {
                string command = $"%01#WDD0230000230{intValue:D2}00**\r";
                await _comPortManager.SendDataToPLCAsync(command);
                LogMessage($"Sent {value} from TextBox to PLC");
            }
            else
            {
                LogMessage("Invalid value.");
            }
        }

        public async Task ReadAndClearDT2330Data()
        {
            string value = await _comPortManager.ReadFromPLCAsync("023300");
            ProcessPLCValue(value);
            await _comPortManager.ClearPLCValueAsync("023300");
        }

        private void ProcessPLCValue(string value)
        {
            // DT2330 값에 따라 상태 설명을 업데이트
            LogMessage($"Processed value from DT2330: {value}");
        }

        private async Task UpdatePLCStatusAsync()
        {
            while (true)
            {
                string r520 = await _comPortManager.ReadFromPLCAsync("005200");
                string r521 = await _comPortManager.ReadFromPLCAsync("005201");

                R520Status = r520.Contains("1") ? "R520: 정상" : "R520: 오류";
                R521Status = r521.Contains("1") ? "R521: 정상" : "R521: 오류";

                await Task.Delay(1000);
            }
        }

        private void LogMessage(string message)
        {
            Console.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
3. 적용 방법
기능 유지 및 확장: 기존에 동적으로 생성된 버튼 기능을 유지하면서 새로운 명령을 추가하여 텍스트박스와 DT2330 번지 처리 기능을 확장하였습니다.

UI 업데이트: MainWindow.xaml에 추가된 버튼과 텍스트박스는 각각 SendTextBoxValueCommand와 ProcessDT2330Command에 바인딩되어 있습니다. 이 명령은 사용자가 텍스트박스에 입력한 값을 전송하고, DT2330 번지를 처리할 수 있게 합니다.

명령 패턴 사용: 모든 명령은 RelayCommand로 구현되어 있으며, 명령 패턴을 통해 WPF의 MVVM 구조를 유지합니다.

이렇게 수정된 코드를 적용하면 기존 기능과 함께 새로운 기능이 추가되어 더욱 확장된 기능을 제공할 수 있습니다. 각 기능이 명령 패턴을 통해 유연하게 관리되므로, 코드 유지보수와 확장이 용이합니다