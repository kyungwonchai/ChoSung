겠습니다, 명령어 형식에 대한 설명을 바탕으로 주소 형식을 올바르게 조정하여 명령어를 생성하도록 코드를 다시 수정하겠습니다. 명령어에서 D 뒤에 나오는 주소를 5자리로 설정하고, 이 주소를 두 번 반복한 다음 값을 추가해야 한다는 점을 반영하겠습니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class PlcMutocolCommunication
{
    private SerialPort _serialPort;
    private const int _timeout = 30000; // 30초 타임아웃

    public PlcMutocolCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.DataBits = 8;
        _serialPort.Parity = Parity.None;
        _serialPort.StopBits = StopBits.One;
        _serialPort.ReadTimeout = _timeout;
        _serialPort.WriteTimeout = _timeout;
    }

    public void OpenPort()
    {
        if (!_serialPort.IsOpen)
        {
            _serialPort.Open();
        }
    }

    public void ClosePort()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    public async Task<string> WriteAsync(string address, string value, bool waitForResponse)
    {
        string command = CreateWriteCommand(address, value);
        await WriteCommandAsync(command);

        if (waitForResponse)
        {
            string response = await ReadResponseAsync();
            return response.StartsWith("%01$WD") ? "쓰기 성공" : "쓰기 실패";
        }
        return "응답 없음 (대기 안 함)";
    }

    private async Task WriteCommandAsync(string command)
    {
        byte[] commandBytes = Encoding.ASCII.GetBytes(command);
        await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
    }

    private async Task<string> ReadResponseAsync()
    {
        byte[] buffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length);
        return Encoding.ASCII.GetString(buffer, 0, bytesRead);
    }

    private string CreateWriteCommand(string address, string value)
    {
        string plcAddress = FormatAddress(address);
        string formattedValue = FormatValue(value);
        
        // 예: D2300에 1을 쓰면 %01#WDD02300023000100**
        string command = $"%01#WD{plcAddress}{plcAddress}{formattedValue}**";
        return command;
    }

    private string FormatAddress(string address)
    {
        if (int.TryParse(address.Substring(1), out int numericAddress))
        {
            return numericAddress.ToString("D5"); // 주소를 5자리로 변환 (예: 2300 -> 02300)
        }
        return "00000"; // 잘못된 주소일 경우 기본값
    }

    private string FormatValue(string value)
    {
        if (int.TryParse(value, out int numericValue))
        {
            return numericValue.ToString("D4"); // 값이 숫자인 경우 4자리로 변환 (예: 1 -> 0100)
        }
        else
        {
            return "0000"; // 잘못된 값일 경우 기본값
        }
    }
}
이 수정된 코드에서 FormatAddress 함수는 주소를 5자리로 변환합니다. CreateWriteCommand에서는 주소를 두 번 반복한 후, 변환된 값을 추가하여