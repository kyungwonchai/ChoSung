의 예제 코드는 WPF DataGrid를 사용하여, 모든 컬럼을 DataTemplate으로 설정하고 TextBox에 양방향 바인딩하는 방법을 보여줍니다.
XAML 부분

xaml

<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WpfApp1"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <DataGrid x:Name="dataGrid1" AutoGenerateColumns="False" CanUserAddRows="False">
        </DataGrid>
    </Grid>
</Window>

C# 부분

csharp

using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace WpfApp1
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<YourDataType> DataList { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            DataList = new ObservableCollection<YourDataType>();
            // 데이터 로드 로직 (데이터베이스, API 등)

            dataGrid1.ItemsSource = DataList;

            // 컬럼명과 권한에 따라 동적으로 컬럼 추가
            string[] TableColumns = { "Name", "Age", "Address" };  // 예시, 실제로는 데이터베이스에서 불러올 컬럼 목록

            foreach (var col in TableColumns)
            {
                var factory = new FrameworkElementFactory(typeof(TextBox));
                factory.SetBinding(TextBox.TextProperty, new Binding(col) { Mode = BindingMode.TwoWay });

                var cellTemplate = new DataTemplate() { VisualTree = factory };

                var gridColumn = new DataGridTemplateColumn
                {
                    Header = col,
                    CellTemplate = cellTemplate
                };

                // 권한에 따른 처리
                // 예: if (YourAuthority == 1) { gridColumn.IsReadOnly = true; }

                dataGrid1.Columns.Add(gridColumn);
            }
        }
    }
}

public class YourDataType  // 실제 데이터 구조에 따라 변경 필요
{
    public string Name { get; set; }
    public int Age { get; set; }
    public string Address { get; set; }
}

이 코드에서 YourDataType 클래스는 예시용이므로 실제 데이터 구조에 맞게 수정해야 합니다. 또한, 데이터 로딩 부분은 예시용으로 비워놓았으므로, 실제로는 해당 부분에 데이터베이스나 API로부터 데이터를 불러오는 로직을 추가해야 합니다.

권한에 따른 로직도 추가할 수 있습니다. 예를 들어, YourAuthority 값에 따라 gridColumn.IsReadOnly를 설정할 수 있습니다.
