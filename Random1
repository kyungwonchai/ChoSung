, 알겠습니다. 징징대셨던 게 아니라 제가 제대로 된 걸 드리지 못해서 생긴 문제입니다. 정말 죄송합니다.

문제를 일으켰던 github 라이브러리 방식의 최종 수정 버전을 드리겠습니다. 이전의 모든 오류(Failed to resolve, 빨간 줄, NullPointerException)를 해결할 수 있도록 모든 설정과 코드를 포함했습니다.

아래 파일 내용을 순서대로, 통째로 복사해서 덮어쓰기만 하시면 됩니다.

## 1. settings.gradle.kts (가장 중요)
이 파일이 모든 빨간 줄 문제의 해결 열쇠입니다. github 라이브러리를 어디서 다운로드해야 할지 알려주는 주소(jitpack.io)가 포함되어 있습니다.

경로: [프로젝트 폴더]/settings.gradle.kts

Kotlin

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        // <<-- 이 부분이 없으면 github 라이브러리를 절대 찾을 수 없습니다.
        maven { url = uri("https://jitpack.io") }
    }
}
rootProject.name = "ReelListViewer"
include(":app")
## 2. app/build.gradle.kts
PDFView 라이브러리를 사용하겠다고 선언하는 부분입니다.

경로: [프로젝트 폴더]/app/build.gradle.kts

Kotlin

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.sec.reellistviewer"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.reellistviewer"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")

    // 확대/축소, 페이지 이동 기능이 모두 포함된 PDF 뷰어 라이브러리
    implementation("com.github.barteksc:android-pdf-viewer:3.2.0-beta.1")
}
## 3. activity_main.xml
상단 페이지 이동 버튼과 확대/축소가 가능한 PDFView로 구성된 화면 설계도입니다.

경로: [프로젝트 폴더]/app/src/main/res/layout/activity_main.xml

XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- 상단 페이지 바로가기 버튼 영역 -->
    <HorizontalScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#EAEAEA"
        android:scrollbars="none">

        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:padding="8dp"/>
    </HorizontalScrollView>

    <!-- 파일 선택 버튼 -->
    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="8dp"
        android:text="PDF 파일 열기" />

    <!-- 확대/축소가 가능한 PDF 뷰어 -->
    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

</LinearLayout>
## 4. MainActivity.kt
NullPointerException이 발생하지 않도록 초기화 순서를 바로잡고, 모든 기능이 포함된 최종 코드입니다.

경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.github.barteksc.pdfviewer.util.FitPolicy
import com.sec.reellistviewer.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val totalPageCount = 16 // 생성할 버튼 개수

    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.OpenDocument()
    ) { uri: Uri? ->
        uri?.let {
            loadPdf(it)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // NullPointerException 방지를 위한 정확한 초기화 순서
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        createPageNavigationButtons()

        binding.btnOpenFile.setOnClickListener {
            filePickerLauncher.launch(arrayOf("application/pdf"))
        }
    }

    private fun loadPdf(uri: Uri) {
        binding.pdfView.fromUri(uri)
            .enableSwipe(true)
            .swipeHorizontal(false)
            .enableDoubletap(true)
            .defaultPage(0)
            .pageFitPolicy(FitPolicy.WIDTH)
            .load()
    }

    private fun createPageNavigationButtons() {
        binding.pageButtonContainer.removeAllViews()
        
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    binding.pdfView.jumpTo(i - 1, true)
                    Toast.makeText(this@MainActivity, "$i 페이지로 이동", Toast.LENGTH_SHORT).show()
                }
            }
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}
## 마지막으로 할 일 (제발)
위에 있는 4개 파일 내용을 전부 덮어쓰세요.

안드로이드 스튜디오 메뉴에서 [File] -> [Invalidate Caches...] -> [Invalidate and Restart] 를 눌러서 프로젝트를 대청소하고 재시작하세요.

재시작된 후, 우측 상단 **코끼리 아이콘(Sync)**을 눌러 라이브러리를 설치하세요.

이렇게 하면 인터넷에서 라이브러리를 정상적으로 다운로드하고, 코드도 오류 없이 실행될 겁니다.






동영상
