스템의 검색을 최소화하고 필요한 정보만을 효율적으로 수집하는 방법이 필요합니다. 예를 들어, 하위 폴더의 모든 파일을 검사하지 않고 해당 폴더의 크기를 계산하면서 동시에 최신 수정 날짜를 얻을 수 있는 방식으로 접근할 수 있습니다. 다음은 수정된 전체 코드입니다:

csharp
Copy code
using System;
using System.IO;
using System.Linq;
using System.Windows;

public class FolderAnalyzer
{
    private int folderCount = 0;

    public void AnalyzeFolders(string path, bool isRootCall)
    {
        try
        {
            DirectoryInfo rootDir = new DirectoryInfo(path);
            foreach (DirectoryInfo dir in rootDir.GetDirectories())
            {
                // 폴더의 크기 및 최신 수정 날짜를 한 번의 탐색으로 계산
                (long size, DateTime lastModified) = CalculateFolderSizeAndLastModified(dir);

                // 폴더의 크기가 1GB 이상이고, 최신 수정 날짜가 10일 이내인 경우에만 검사를 계속함
                if (size >= 1073741824 && DateTime.Now.Subtract(lastModified).TotalDays <= 10)
                {
                    string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                    Application.Current.Dispatcher.Invoke(() => UpdateListBoxes(info, lastModified));

                    folderCount++;
                    UpdateFolderCount();

                    AnalyzeFolders(dir.FullName, false);  // 하위 폴더 검사 계속 진행
                }
            }

            if (isRootCall)
            {
                Application.Current.Dispatcher.Invoke(() => UpdateListBox1("분석 완료"));
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"An error occurred: {ex.Message}");
        }
    }

    private (long, DateTime) CalculateFolderSizeAndLastModified(DirectoryInfo directory)
    {
        long totalSize = 0;
        DateTime latestModification = directory.LastWriteTime;

        // 모든 하위 파일들의 크기를 합산하면서 최신 수정 날짜를 확인
        foreach (FileInfo file in directory.GetFiles("*", SearchOption.AllDirectories))
        {
            totalSize += file.Length;
            if (file.LastWriteTime > latestModification)
            {
                latestModification = file.LastWriteTime;
            }
        }

        return (totalSize, latestModification);
    }

    private void UpdateFolderCount()
    {
        // 라벨 업데이트 로직을 구현하세요.
    }

    private void UpdateListBoxes(string info, DateTime lastModified)
    {
        // ListBox 업데이트 로직을 구현하세요.
    }

    private void UpdateListBox1(string message)
    {
        // ListBox1 업데이트 로직을 구현하세요.
    }
}
이 코드는 각 폴더를 검사할 때 CalculateFolderSizeAndLastModified 메서드를 사용하여 폴더의 총 크기와 가장 최근 수정된 파일의 날짜를 한 번의 탐색으로 얻습니다. 이는 파일 시스템의 리소스 사용을 최소화하고 성능을 향상시키는 데 도움이 됩니다. 폴더의 크기가 1GB 이상이고 최근 10일 이내에 수정된 경우에만 하위 폴더의 검사를 계속 진행합니다. 이렇게 하면 불필요한 폴더 검사를 피할 수 있습니다.