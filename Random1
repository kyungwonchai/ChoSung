래는 요청하신 내용에 따라, **기존 차트(예측값 vs 실제값)**와 **추가적인 분석 차트(Residual Plot, Accuracy Plot 등)**를 하나의 실행 코드에서 여러 차트로 출력하는 전체 코드를 제공합니다.

완성된 전체 코드
python
코드 복사
# Load the trained model
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# Fetch the multi-row data from the database
data = fetch_data_from_db("PRealAandB")  # Fetch PRealAandB multi-row data

# Validate the data
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# Ensure the data is in the correct format (numpy array)
if not isinstance(data, np.ndarray):
    data = np.array(data)

# Extract columns
timestamps = data[:, 0]  # First column (timestamps)
features = data[:, 2:5]  # Columns 3~5 (features for prediction)
actual_values = data[:, 1]  # Column 2 (actual values)

# Make predictions for all rows
predicted_values = model.predict(features)

# Chart 1: Prediction vs Actual Values
plt.figure(figsize=(12, 6))
plt.plot(timestamps, actual_values, color="green", label="Actual Values", linestyle="-", marker="o")
plt.plot(timestamps, predicted_values, color="blue", label="Predicted Values", linestyle="--", marker="o")
plt.fill_between(
    timestamps,
    actual_values - 0.1,
    actual_values + 0.1,
    color="green",
    alpha=0.2,
    label="Actual ± 0.1 Range"
)
plt.title("Prediction vs Actual Values")
plt.xlabel("Time")
plt.ylabel("Value")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

# Chart 2: Residual Plot
residuals = actual_values - predicted_values
plt.figure(figsize=(12, 6))
plt.plot(timestamps, residuals, linestyle="--", marker="o", color="red", label="Residuals")
plt.axhline(0, color="black", linestyle="--", label="Perfect Prediction")  # 기준선
plt.title("Residual Plot (Actual - Predicted)")
plt.xlabel("Time")
plt.ylabel("Residuals")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

# Chart 3: Prediction Accuracy Over Time
accuracy = 100 - (np.abs(residuals) / np.maximum(actual_values, predicted_values)) * 100
plt.figure(figsize=(12, 6))
plt.plot(timestamps, accuracy, linestyle="-", marker="o", color="blue", label="Accuracy (%)")
plt.axhline(100, color="green", linestyle="--", label="Perfect Accuracy")  # 기준선
plt.title("Prediction Accuracy Over Time")
plt.xlabel("Time")
plt.ylabel("Accuracy (%)")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()

# Chart 4: Distribution of Residuals
plt.figure(figsize=(8, 5))
plt.hist(residuals, bins=20, color="purple", alpha=0.7, edgecolor="black")
plt.title("Distribution of Residuals")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.grid()
plt.show()

# Additional Statistics
mae_value = np.mean(np.abs(residuals))
mse_value = np.mean(residuals**2)
from sklearn.metrics import r2_score
r2 = r2_score(actual_values, predicted_values)

# Print metrics
print(f"Mean Absolute Error (MAE): {mae_value:.2f}")
print(f"Mean Squared Error (MSE): {mse_value:.2f}")
print(f"R² Score: {r2:.2f}")
설명
1. 기존 차트: Prediction vs Actual Values
내용:
예측값(파란색 선)과 실제값(초록색 선)을 비교.
실제값의 ±0.1 범위(녹색 음영 영역)를 표시.
목적: 예측값이 실제값을 얼마나 잘 따라가고 있는지 확인.
2. 추가 차트
Chart 2: Residual Plot
내용: 예측값과 실제값의 차이(Residual)를 시간 축에 따라 표시.
목적:
예측 오차가 특정 시간에 집중되는지 또는 패턴이 있는지 확인.
이상값(outliers) 탐지.
Chart 3: Prediction Accuracy Over Time
내용: 시간에 따른 예측 정확도를 100점 만점으로 표시.
목적:
시간이 지남에 따라 예측 정확도가 향상 또는 저하되는지 확인.
Chart 4: Distribution of Residuals
내용: Residual(오차)의 분포를 히스토그램으로 표시.
목적:
오차가 특정 범위에 집중되는지 확인.
이상값(outliers)을 쉽게 탐지.
3. 추가 통계 지표
MAE (Mean Absolute Error):
평균 절대 오차. 오차의 크기를 평균적으로 평가.
MSE (Mean Squared Error):
평균 제곱 오차. 큰 오차를 강조.
R² Score (결정 계수):
모델이 데이터를 얼마나 잘 설명하는지 평가 (1에 가까울수록 좋음).
출력 결과
차트 1: Prediction vs Actual Values (기존 차트)
차트 2: Residual Plot (오차를 시간 축에 따라 표시)
차트 3: Prediction Accuracy Over Time (정확도 변화)
차트 4: Distribution of Residuals (히스토그램)
통계 지표: