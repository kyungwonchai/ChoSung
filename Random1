네, 명확하게 이해했습니다. UI(제어 프로그램)와 Agent(제어 대상 PC에 설치되는 프로그램)는 완전히 분리되며, Agent는 단일 실행 파일로 다양한 네트워크 환경(10.x.x.x 또는 192.x.x.x 등)의 PC에 설치되어 AgentConfig.json 파일의 설정에 따라 Direct, Gateway, 또는 Proxied 역할로 동작해야 합니다. 제어 UI는 이 설정을 참조하여 서버를 통해 명령을 직접 또는 중계 방식으로 전달합니다.

이제 다시 DB 스키마와 Agent 프로그램의 전체 완성 코드를 중심으로 제공하겠습니다. Agent 프로그램은 트레이 아이콘을 가지며, 최소한의 로컬 상태 확인 및 종료 기능을 포함할 수 있습니다 (사용자 요청에 따라 이 부분은 제외하거나 최소화 가능합니다. 여기서는 트레이 아이콘 및 종료 기능은 포함하겠습니다).

1. 데이터베이스 스키마 (MS SQL Server)

이전에 제안드린 스키마에서 Agent의 역할과 제어 UI의 관점을 좀 더 반영하여 다듬었습니다.

SQL

-- 데이터베이스 사용 설정 (예: MonitorControlDB)
-- USE MonitorControlDB;
-- GO

-- 1. Settings 테이블 (제어 UI용 전역 설정 - 예: 관리자 암호 해시 등)
IF OBJECT_ID('dbo.Settings', 'U') IS NULL
BEGIN
    CREATE TABLE dbo.Settings (
        SettingKey NVARCHAR(100) PRIMARY KEY,
        SettingValue NVARCHAR(MAX) NOT NULL
    );
    -- 예시: 제어 UI 관리자 계정 암호 (실제로는 해시된 값 저장)
    -- INSERT INTO dbo.Settings (SettingKey, SettingValue) VALUES ('ControlUI_AdminPasswordHash', 'your_strong_password_hash_here');
END
GO

-- 2. Agents 테이블 (각 제어 대상 PC에 설치된 Agent 정보)
IF OBJECT_ID('dbo.Agents', 'U') IS NOT NULL
    DROP TABLE dbo.Agents;
GO
CREATE TABLE dbo.Agents (
    AgentId NVARCHAR(100) PRIMARY KEY,      -- Agent 설정 파일(AgentConfig.json)의 AgentId와 동일. 절대 불변.
    AgentName NVARCHAR(255) NOT NULL,       -- 제어 UI에 표시될 사용자가 정의하는 Agent 이름.
    Description NVARCHAR(500) NULL,         -- Agent에 대한 추가 설명.
    
    AgentRole NVARCHAR(20) NOT NULL CHECK (AgentRole IN ('Direct', 'Gateway', 'Proxied')), -- Agent의 역할.
    
    -- 네트워크 정보 (제어 UI에서 참조 및 서버에서 Agent 식별/검증용)
    MachineName NVARCHAR(100) NULL,         -- Agent가 설치된 PC의 호스트 이름 (Agent가 보고).
    ReportedIpAddress VARCHAR(45) NULL,     -- Agent가 보고한 주 IP 주소 (내부/외부망 IP일 수 있음).
    ConfiguredGatewayListenIp VARCHAR(45) NULL, -- Gateway 역할 시 설정된 리슨 IP (AgentConfig.json 값).
    ConfiguredGatewayListenPort INT NULL,       -- Gateway 역할 시 설정된 리슨 포트 (AgentConfig.json 값).
    ConfiguredTargetGatewayIp VARCHAR(45) NULL, -- Proxied 역할 시 설정된 대상 Gateway IP (AgentConfig.json 값).
    ConfiguredTargetGatewayPort INT NULL,       -- Proxied 역할 시 설정된 대상 Gateway 포트 (AgentConfig.json 값).
    
    -- Proxied Agent가 어떤 Gateway Agent를 통해야 하는지 명시 (제어 UI가 명령 라우팅 시 참고).
    DesignatedGatewayAgentId NVARCHAR(100) NULL, 
    CONSTRAINT FK_Agents_DesignatedGateway FOREIGN KEY (DesignatedGatewayAgentId) REFERENCES dbo.Agents(AgentId) ON DELETE SET NULL,

    -- Agent 상태 및 관리 정보
    IsEnabled BIT DEFAULT 1 NOT NULL,         -- 제어 UI에서 이 Agent를 활성화/비활성화 할지 여부.
    RegisteredDate DATETIME2(7) DEFAULT GETUTCDATE(), -- Agent 정보가 DB에 처음 등록된 시간.
    LastModifiedDate DATETIME2(7) DEFAULT GETUTCDATE(), -- 제어 UI에서 Agent 정보가 마지막으로 수정된 시간.
    
    -- 중앙 서버(SignalR) 통신 상태 (Direct/Gateway Agent가 중앙 서버와 통신하며 업데이트)
    CentralServerUrlConfigured NVARCHAR(500) NULL, -- Agent 설정 파일의 중앙 서버 URL (참고용).
    LastSignalRConnectionId NVARCHAR(100) NULL,   -- 현재 중앙 서버와의 SignalR 연결 ID (서버가 관리).
    LastHeartbeatToCentral DATETIME2(7) NULL,      -- Agent가 중앙 서버로 마지막 하트비트를 보낸 시간 (또는 서버가 Agent를 Ping한 시간).
    IsConnectedToCentral BIT DEFAULT 0 NOT NULL,  -- 중앙 서버 연결 상태 (서버 또는 Agent가 업데이트).

    -- 내부망(Gateway/Proxied) 통신 상태
    -- Gateway Agent: 자신이 리슨 중인 상태, 연결된 Proxied Agent 수 등 (Agent가 로컬로 관리, 필요시 서버 보고).
    -- Proxied Agent: 자신이 Gateway에 연결된 상태 (Agent가 로컬로 관리, 필요시 서버 보고).
    InternalCommunicationStatus NVARCHAR(255) NULL, -- 예: "Listening on 0.0.0.0:7890. Clients: 2" 또는 "Connected to 192.168.1.100:7890"

    CurrentMonitorStatus NVARCHAR(20) DEFAULT 'Unknown', -- 'Unknown', 'On', 'Off', 'Standby' (Agent가 주기적으로 또는 명령 수행 후 보고).
    OverallAgentStatus NVARCHAR(50) DEFAULT 'Offline' -- 'Initializing', 'Online', 'Offline', 'Error', 'DegradedConnection' (종합적인 상태).
);
GO

-- 인덱스
CREATE INDEX IX_Agents_AgentRole ON dbo.Agents(AgentRole);
CREATE INDEX IX_Agents_DesignatedGatewayAgentId ON dbo.Agents(DesignatedGatewayAgentId);
CREATE INDEX IX_Agents_IsEnabled_OverallStatus ON dbo.Agents(IsEnabled, OverallAgentStatus);
CREATE INDEX IX_Agents_AgentName ON dbo.Agents(AgentName);
GO

-- 3. ControlLogs 테이블 (제어 명령 및 실행 이력)
IF OBJECT_ID('dbo.ControlLogs', 'U') IS NOT NULL
    DROP TABLE dbo.ControlLogs;
GO
CREATE TABLE dbo.ControlLogs (
    LogId BIGINT PRIMARY KEY IDENTITY(1,1),
    CorrelationId UNIQUEIDENTIFIER DEFAULT NEWID(), -- UI에서 시작된 단일 명령 요청을 여러 단계(UI-서버-게이트웨이-Agent)에 걸쳐 추적하기 위한 ID.
    
    TargetAgentId NVARCHAR(100) NOT NULL, -- 명령의 최종 대상 Agent의 AgentId.
    CONSTRAINT FK_ControlLogs_TargetAgent FOREIGN KEY (TargetAgentId) REFERENCES dbo.Agents(AgentId),
    
    CommandType NVARCHAR(50) NOT NULL,    -- 예: 'TurnMonitorOn', 'TurnMonitorOff', 'PingAgent', 'RequestStatusUpdate'.
    CommandPayload NVARCHAR(MAX) NULL,     -- 명령에 필요한 추가 데이터 (JSON 형식 권장).
    
    RequesterType NVARCHAR(50) NOT NULL,  -- 'ControlUIUser', 'SystemScheduledTask', 'ApiCall'.
    RequesterIdentifier NVARCHAR(100) NULL, -- 제어 UI 사용자 ID, 스케줄된 작업 이름, API 클라이언트 ID 등.
    RequesterIpAddress VARCHAR(45) NULL,  -- 제어 UI 인스턴스 또는 API 호출 클라이언트의 IP 주소.
    
    TimestampUiRequest DATETIME2(7) DEFAULT GETUTCDATE(), -- 제어 UI에서 명령이 시작된 시간.
    TimestampServerReceived DATETIME2(7) NULL,            -- 중앙 서버가 명령을 수신한 시간.
    TimestampGatewayRelayAttempt DATETIME2(7) NULL,       -- Gateway Agent가 Proxied Agent로 명령 중계를 시도한 시간 (중계 시).
    TimestampAgentExecuted DATETIME2(7) NULL,             -- 최종 대상 Agent에서 명령이 실행 완료된 시간.
    TimestampAgentResponseReceived DATETIME2(7) NULL,     -- 최종 대상 Agent의 응답이 (Gateway 또는 서버를 거쳐) 수신된 시간.
    TimestampServerCompleted DATETIME2(7) NULL,           -- 중앙 서버가 해당 명령 처리를 완료한 시간.
    
    FinalResultStatus NVARCHAR(50) NOT NULL, -- 'Pending', 'SentToAgent', 'SentToGateway', 'ProcessingByAgent', 'Success', 'FailureAtAgent', 'FailureAtGateway', 'FailureAtServer', 'Timeout'.
    ResultMessage NVARCHAR(MAX) NULL,        -- 상세 결과 메시지 또는 오류 정보.
    
    ExecutionPath NVARCHAR(500) NULL       -- 명령이 전달된 경로 (예: "UI -> Server -> AgentX" 또는 "UI -> Server -> GatewayY -> AgentZ").
);
GO

-- 인덱스
CREATE INDEX IX_ControlLogs_TargetAgentId_TimestampUiRequest ON dbo.ControlLogs(TargetAgentId, TimestampUiRequest DESC);
CREATE INDEX IX_ControlLogs_CorrelationId ON dbo.ControlLogs(CorrelationId);
CREATE INDEX IX_ControlLogs_TimestampUiRequest ON dbo.ControlLogs(TimestampUiRequest DESC);
CREATE INDEX IX_ControlLogs_FinalResultStatus ON dbo.ControlLogs(FinalResultStatus);
GO

-- 최근 로그 조회용 뷰 (제어 UI 대시보드 등에서 활용)
IF OBJECT_ID('dbo.RecentControlLogsView', 'V') IS NOT NULL
    DROP VIEW dbo.RecentControlLogsView;
GO
CREATE VIEW dbo.RecentControlLogsView
AS
SELECT TOP 500 -- 최근 500개 로그 (필요에 따라 개수 조정)
    cl.LogId,
    cl.CorrelationId,
    cl.TargetAgentId,
    a.AgentName AS TargetAgentName, -- Agents 테이블과 조인하여 Agent 이름 표시
    cl.CommandType,
    cl.RequesterIdentifier,
    cl.TimestampUiRequest,
    cl.TimestampAgentExecuted,
    cl.FinalResultStatus,
    cl.ResultMessage,
    cl.ExecutionPath
FROM 
    dbo.ControlLogs cl
LEFT JOIN 
    dbo.Agents a ON cl.TargetAgentId = a.AgentId
ORDER BY 
    cl.TimestampUiRequest DESC;
GO
DB 스키마 설명:

Agents 테이블:
AgentId: 각 Agent의 고유 식별자. AgentConfig.json 파일에 명시되며, 변경되지 않아야 합니다.
AgentName: 사용자가 제어 UI에서 쉽게 식별할 수 있도록 지정하는 이름입니다.
AgentRole: "Direct", "Gateway", "Proxied" 중 하나. 제어 UI와 서버는 이 정보를 바탕으로 명령을 어떻게 라우팅할지 결정합니다.
Configured...Ip/Port: AgentConfig.json에 설정된 네트워크 값들을 DB에도 저장하여 제어 UI에서 참조하거나 문제를 진단하는 데 도움을 줄 수 있습니다. (Agent가 직접 이 값을 DB에 쓰는 것이 아니라, 제어 UI를 통해 Agent 정보를 등록/수정할 때 입력받거나 Agent가 보고한 정보를 저장)
DesignatedGatewayAgentId: Proxied Agent가 통신해야 할 Gateway Agent의 AgentId입니다.
상태 관련 필드 (IsConnectedToCentral, CurrentMonitorStatus, OverallAgentStatus 등)는 Agent와 중앙 서버 간의 통신을 통해 주기적으로 또는 이벤트 발생 시 업데이트됩니다.
ControlLogs 테이블:
CorrelationId: 제어 UI에서 시작된 하나의 명령이 여러 시스템(서버, 게이트웨이, 최종 에이전트)을 거쳐 처리될 때, 이 모든 과정을 하나의 ID로 묶어 추적합니다.
다양한 타임스탬프 필드: 명령 처리의 각 단계별 시간을 기록하여 성능 분석 및 문제 해결에 도움을 줍니다.
ExecutionPath: 명령이 어떤 경로를 통해 전달되었는지 기록합니다. (예: "UI → Server → AgentDirectly" 또는 "UI → Server → GatewayX → AgentY")
RecentControlLogsView: 제어 UI의 대시보드 등에서 최근 로그를 쉽게 조회할 수 있도록 제공하는 뷰입니다.
2. Agent 프로그램 코드 (C#, .NET Framework 4.5)

이제 Agent 프로그램의 전체 코드를 구성 요소별로 나누어 제공하겠습니다. Agent는 WPF 애플리케이션으로 만들지만, 주 목적은 백그라운드 실행이므로 트레이 아이콘을 사용하고 창은 최소화되거나 숨겨집니다.

필수 NuGet 패키지:

Newtonsoft.Json: 설정 파일(JSON) 처리 및 통신 메시지 직렬화/역직렬화.
Microsoft.AspNet.SignalR.Client: 중앙 서버(SignalR Hub)와 통신하기 위한 클라이언트 라이브러리. (.NET Framework 4.5 호환 버전 확인 필요)
2.1. 프로젝트 파일 구조 (예시)

MonitorAgent/
├── App.xaml
├── App.xaml.cs
│
├── AgentConfig.json                // Agent 설정 파일 (실행 파일과 동일 위치)
│
├── Config/
│   ├── AgentConfig.cs              // AgentConfig.json 매핑 클래스
│   └── AgentConfigLoader.cs        // 설정 파일 로드 유틸리티
│
├── Core/
│   ├── AgentCoreService.cs         // Agent 핵심 로직 (상태 관리, 역할별 동작 제어)
│   ├── IAgentRoleHandler.cs        // 역할별 처리기 인터페이스
│   ├── DirectRoleHandler.cs        // 'Direct' 역할 처리기
│   ├── GatewayRoleHandler.cs       // 'Gateway' 역할 처리기
│   └── ProxiedRoleHandler.cs       // 'Proxied' 역할 처리기
│
├── Models/
│   ├── AgentStatusInfo.cs          // Agent 상태 정보 모델 (서버 보고용)
│   └── InternalTcpCommand.cs       // Gateway-Proxied 간 TCP 통신 명령 모델
│
├── Network/
│   ├── CentralServerClient.cs      // 중앙 SignalR 서버 통신 클라이언트
│   ├── GatewayTcpServer.cs         // Gateway 역할 시 내부망 TCP 서버
│   └── ProxiedTcpClient.cs         // Proxied 역할 시 Gateway 연결 TCP 클라이언트
│
├── Services/ (또는 Utils/)
│   ├── MonitorControlService.cs    // 모니터 제어 로직 (SendMessage API 사용)
│   ├── LoggingService.cs           // 로깅 인터페이스 및 간단한 파일 로거 구현
│   └── StartupRegistryService.cs   // 시작 프로그램 등록 유틸리티
│
└── UI/
    ├── TrayIconManager.cs          // 트레이 아이콘 관리 (NotifyIcon 사용)
    ├── AgentStatusViewModel.cs     // (선택적) Agent 상태 표시창 ViewModel
    └── AgentStatusWindow.xaml      // (선택적) Agent 상태 표시창 View
2.1.1. AgentConfig.json (중요! 실행 파일과 같은 폴더에 위치)

JSON

{
  "AgentId": "PLEASE_CONFIGURE_UNIQUE_AGENT_ID",
  "AgentName": "Default Agent Name (Please Configure)",
  "AgentRole": "Direct", // "Direct", "Gateway", "Proxied"
  "CentralServerUrl": "http://your-central-server-hostname-or-ip:port/monitorControlHub",

  "GatewayListenIp": "0.0.0.0",
  "GatewayListenPort": 7890,

  "DesignatedGatewayAgentIdForConfig": "CONFIGURED_GATEWAY_AGENT_ID_IF_PROXIED", // For Proxied role, informational
  "TargetGatewayIp": "192.168.1.100", // For Proxied role
  "TargetGatewayPort": 7890,       // For Proxied role

  "LogLevel": "Info", // "Debug", "Info", "Warning", "Error"
  "AutoRegisterInStartup": true
}
사용자는 Agent 설치 후 이 AgentConfig.json 파일의 AgentId, AgentName, AgentRole 및 관련 네트워크 설정을 해당 PC 환경에 맞게 수정해야 합니다. AgentId는 DB의 Agents.AgentId와 일치해야 합니다.

2.1.2. Config/AgentConfig.cs

C#

// MonitorAgent/Config/AgentConfig.cs
// Newtonsoft.Json NuGet 패키지 필요
using Newtonsoft.Json;
using Newtonsoft.Json.Converters; // StringEnumConverter 사용

namespace MonitorAgent.Config
{
    public enum AgentRoleType { Direct, Gateway, Proxied }

    public class AgentConfig
    {
        [JsonProperty("AgentId", Required = Required.Always)]
        public string AgentId { get; set; }

        [JsonProperty("AgentName", Required = Required.Always)]
        public string AgentName { get; set; }

        [JsonProperty("AgentRole", Required = Required.Always)]
        [JsonConverter(typeof(StringEnumConverter))] // JSON에서 문자열로 역할 저장/로드
        public AgentRoleType AgentRole { get; set; }

        [JsonProperty("CentralServerUrl", Required = Required.Always)]
        public string CentralServerUrl { get; set; }

        // Gateway 역할 시 사용
        public string GatewayListenIp { get; set; } = "0.0.0.0";
        public int GatewayListenPort { get; set; } = 7890;

        // Proxied 역할 시 사용 (정보용 ID 및 실제 접속 IP/Port)
        public string DesignatedGatewayAgentIdForConfig { get; set; } // 서버에서 매핑 참조용
        public string TargetGatewayIp { get; set; }
        public int TargetGatewayPort { get; set; } = 7890;

        [JsonConverter(typeof(StringEnumConverter))]
        public LogLevelSetting LogLevel { get; set; } = LogLevelSetting.Info;
        public bool AutoRegisterInStartup { get; set; } = true;

        // 기본값 설정용 생성자 (Config 파일 없을 때 사용될 수 있음)
        public AgentConfig() { }

        // 설정 유효성 검사 메서드 (필요시 추가)
        public bool IsValid(out string errorMessage)
        {
            errorMessage = string.Empty;
            if (string.IsNullOrWhiteSpace(AgentId) || AgentId == "PLEASE_CONFIGURE_UNIQUE_AGENT_ID")
            {
                errorMessage = "AgentId is not configured or has default placeholder.";
                return false;
            }
            if (string.IsNullOrWhiteSpace(AgentName) || AgentName == "Default Agent Name (Please Configure)")
            {
                errorMessage = "AgentName is not configured or has default placeholder.";
                return false;
            }
            if (string.IsNullOrWhiteSpace(CentralServerUrl) || !Uri.IsWellFormedUriString(CentralServerUrl, UriKind.Absolute))
            {
                errorMessage = "CentralServerUrl is not configured or invalid.";
                return false;
            }

            if (AgentRole == AgentRoleType.Proxied)
            {
                if (string.IsNullOrWhiteSpace(TargetGatewayIp))
                {
                    errorMessage = "TargetGatewayIp must be configured for Proxied role.";
                    return false;
                }
            }
            return true;
        }
    }

    public enum LogLevelSetting { Debug, Info, Warning, Error }
}
2.1.3. Config/AgentConfigLoader.cs

C#

// MonitorAgent/Config/AgentConfigLoader.cs
using Newtonsoft.Json;
using System;
using System.IO;
using MonitorAgent.Services; // Logger 사용

namespace MonitorAgent.Config
{
    public static class AgentConfigLoader
    {
        private const string ConfigFileName = "AgentConfig.json";
        // 실행 파일과 동일한 경로에 있는 설정 파일을 찾음
        private static readonly string ConfigFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ConfigFileName);

        public static AgentConfig Load(ILoggingService logger)
        {
            logger.LogInfo($"Attempting to load configuration from: {ConfigFilePath}");
            if (!File.Exists(ConfigFilePath))
            {
                logger.LogError($"{ConfigFileName} not found at {ConfigFilePath}. Agent cannot start without configuration.");
                // 기본 설정을 생성하고 프로그램을 종료하거나, 사용자에게 알림
                CreateDefaultConfigFile(logger);
                // 이 경우 null을 반환하거나 예외를 발생시켜 AgentCoreService에서 처리하도록 함
                return null;
            }

            try
            {
                string jsonContent = File.ReadAllText(ConfigFilePath);
                var config = JsonConvert.DeserializeObject<AgentConfig>(jsonContent);

                if (config == null) {
                    logger.LogError($"Failed to deserialize {ConfigFileName}. Content might be corrupted.");
                    return null;
                }

                string validationError;
                if (!config.IsValid(out validationError))
                {
                    logger.LogError($"Configuration validation failed: {validationError}");
                    // 특정 필수 값이 없으면 Agent 실행 불가
                    if (validationError.Contains("AgentId") || validationError.Contains("CentralServerUrl")) {
                         logger.LogError("Critical configuration missing. Agent cannot proceed.");
                         return null;
                    }
                }
                
                logger.LogInfo($"Configuration loaded successfully for AgentId: {config.AgentId}, Role: {config.AgentRole}");
                return config;
            }
            catch (JsonException jsonEx)
            {
                logger.LogError($"Error deserializing {ConfigFileName}: {jsonEx.Message}", jsonEx);
                return null;
            }
            catch (Exception ex)
            {
                logger.LogError($"An unexpected error occurred while loading {ConfigFileName}: {ex.Message}", ex);
                return null;
            }
        }

        private static void CreateDefaultConfigFile(ILoggingService logger)
        {
            logger.LogInfo($"Creating a default {ConfigFileName} as a template. Please configure it and restart the agent.");
            var defaultConfig = new AgentConfig
            {
                AgentId = "PLEASE_CONFIGURE_UNIQUE_AGENT_ID",
                AgentName = "Default Agent Name (Please Configure)",
                AgentRole = AgentRoleType.Direct,
                CentralServerUrl = "http://your-central-server-hostname-or-ip:port/monitorControlHub",
                GatewayListenIp = "0.0.0.0",
                GatewayListenPort = 7890,
                DesignatedGatewayAgentIdForConfig = "CONFIGURED_GATEWAY_AGENT_ID_IF_PROXIED",
                TargetGatewayIp = "192.168.0.1", // 예시 IP
                TargetGatewayPort = 7890,
                LogLevel = LogLevelSetting.Info,
                AutoRegisterInStartup = true
            };

            try
            {
                string jsonContent = JsonConvert.SerializeObject(defaultConfig, Formatting.Indented);
                File.WriteAllText(ConfigFilePath, jsonContent);
                logger.LogInfo($"Default configuration file created at {ConfigFilePath}.");
            }
            catch (Exception ex)
            {
                logger.LogError($"Failed to create default configuration file: {ex.Message}", ex);
            }
        }
    }