1. TaskModel.cs - 작업 데이터 모델
작업 데이터를 정의하는 모델로, 기본 속성과 변경 사항을 UI에 반영하기 위한 INotifyPropertyChanged를 구현합니다.

csharp
코드 복사
using System;
using System.ComponentModel;

namespace SwiftAIMaster.Models
{
    public class TaskModel : INotifyPropertyChanged
    {
        public int Id { get; set; }                        // 작업 ID (Primary Key)
        public int Priority { get; set; }                  // 작업 우선순위
        public DateTime CreatedTime { get; set; }          // 작업 생성 시간
        public int UpdateCount { get; set; }               // 작업 수정 횟수
        public DateTime? LastUpdateTime { get; set; }      // 마지막 수정 시간
        public string FolderPath { get; set; }             // 폴더 경로
        private string _cellColor;
        
        public string CellColor
        {
            get => _cellColor;
            set
            {
                if (_cellColor != value)
                {
                    _cellColor = value;
                    OnPropertyChanged(nameof(CellColor));  // UI 업데이트 트리거
                }
            }
        }
        
        public string Assignee { get; set; }               // 담당자
        public bool IsCompleted { get; set; }              // 완료 여부
        
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
2. DatabaseService.cs - 데이터베이스 서비스 (T_Tasks 사용)
DatabaseService 클래스에서 데이터베이스 연동 작업을 처리합니다. 테이블명이 T_Tasks이며, 데이터가 비어 있어도 오류 없이 프로그램이 작동합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Services
{
    public class DatabaseService
    {
        private readonly string _connectionString = "YourConnectionString";

        // 전체 작업 목록을 가져오는 메서드
        public List<TaskModel> GetAllTasks()
        {
            var tasks = new List<TaskModel>();
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("SELECT * FROM T_Tasks ORDER BY Priority", connection);
                connection.Open();
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        tasks.Add(new TaskModel
                        {
                            Id = (int)reader["Id"],
                            Priority = (int)reader["Priority"],
                            CreatedTime = (DateTime)reader["CreatedTime"],
                            UpdateCount = (int)reader["UpdateCount"],
                            LastUpdateTime = reader["LastUpdateTime"] as DateTime?,
                            FolderPath = reader["FolderPath"] as string,
                            CellColor = reader["CellColor"] as string,
                            Assignee = reader["Assignee"] as string,
                            IsCompleted = (bool)reader["IsCompleted"]
                        });
                    }
                }
            }
            return tasks;
        }

        // 작업 추가 메서드
        public void AddTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("INSERT INTO T_Tasks (Priority, CreatedTime, FolderPath, CellColor, Assignee, IsCompleted) VALUES (@Priority, @CreatedTime, @FolderPath, @CellColor, @Assignee, @IsCompleted)", connection);
                command.Parameters.AddWithValue("@Priority", task.Priority);
                command.Parameters.AddWithValue("@CreatedTime", task.CreatedTime);
                command.Parameters.AddWithValue("@FolderPath", task.FolderPath);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Assignee", task.Assignee);
                command.Parameters.AddWithValue("@IsCompleted", task.IsCompleted);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 작업 수정 메서드
        public void UpdateTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET UpdateCount = @UpdateCount, LastUpdateTime = @LastUpdateTime, CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@UpdateCount", task.UpdateCount);
                command.Parameters.AddWithValue("@LastUpdateTime", task.LastUpdateTime);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Id", task.Id);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 작업 우선순위 업데이트 메서드
        public void UpdateTaskPriority(int taskId, int newPriority)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET Priority = @Priority WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@Priority", newPriority);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 셀 색상 업데이트 메서드
        public void UpdateTaskColor(int taskId, string newColor)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@CellColor", newColor);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }
    }
}
3. TaskManager.cs - 작업 관리 클래스
작업 목록을 관리하며, 순위 및 색상 변경 시 데이터베이스에 업데이트합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;

namespace SwiftAIMaster.ViewModels
{
    public class TaskManager
    {
        private readonly DatabaseService _databaseService;  // 데이터베이스 연동 서비스
        public ObservableCollection<TaskModel> Tasks { get; set; }

        public TaskManager(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            Tasks = new ObservableCollection<TaskModel>(_databaseService.GetAllTasks());
            Tasks.CollectionChanged += Tasks_CollectionChanged;
        }

        public void AddTask(TaskModel task)
        {
            task.Priority = Tasks.Count + 1;
            Tasks.Insert(0, task);                           // 새 작업을 목록의 맨 위에 추가
            _databaseService.AddTask(task);                  // DB에 새 작업 저장
        }

        public void UpdateTask(TaskModel task)
        {
            task.UpdateCount++;
            task.LastUpdateTime = DateTime.Now;
            _databaseService.UpdateTask(task);               // DB에 작업 수정 내용 저장
        }

        private void Tasks_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Move)
            {
                UpdateTaskPriorities();                      // 순위 업데이트
            }
        }

        private void UpdateTaskPriorities()
        {
            for (int i = 0; i < Tasks.Count; i++)
            {
                var task = Tasks[i];
                task.Priority = i + 1;
                _databaseService.UpdateTaskPriority(task.Id, task.Priority);
            }
        }
    }
}
4. MainWindow.xaml.cs - MainViewModel에 추가, 창 버튼 설정
기능이 너무 많으므로 개별 창 파일에서 추가 구현






나의 말:
뭐하냐 코드이어라
ChatGPT의 말:
ChatGPT
알겠습니다. 코드 이어서 설명드리겠습니다.

4. MainWindow.xaml - 메인 UI 레이아웃
작업 추가 및 수정 버튼을 사용해 메인 창에서 작업 추가 창과 작업 수정 창을 호출하도록 구성합니다.

xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:SwiftAIMaster.Views"
        Title="SwiftAIMaster" Height="450" Width="800">
    <Grid>
        <!-- 작업 추가 버튼 -->
        <Button Content="작업 추가" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="100" Click="AddTaskButton_Click"/>

        <!-- 작업 목록 GridControl -->
        <dxg:GridControl Name="taskGrid" ItemsSource="{Binding TaskManager.Tasks}" AutoGenerateColumns="False">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Priority" Header="순위" />
                <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
                <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
                <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
                <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
                <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Border Background="{Binding CellColor}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
                <dxg:GridColumn FieldName="Assignee" Header="담당자" />
                <dxg:GridColumn FieldName="IsCompleted" Header="완료 여부" />

                <!-- 수정 버튼 컬럼 -->
                <dxg:GridColumn Header="수정">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="수정" Command="{Binding DataContext.EditCommand, RelativeSource={RelativeSource AncestorType=dxg:GridControl}}" CommandParameter="{Binding}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
5. MainWindow.xaml.cs - 코드 비하인드 (작업 추가 및 수정 창 열기)
AddTaskButton_Click: AddTaskWindow를 열어 새로운 작업을 추가.
EditCommand: EditTaskWindow를 열어 선택한 작업을 수정.
csharp
코드 복사
using System.Windows;
using SwiftAIMaster.ViewModels;

namespace SwiftAIMaster.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => (MainViewModel)DataContext;

        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }

        private void AddTaskButton_Click(object sender, RoutedEventArgs e)
        {
            var addTaskWindow = new AddTaskWindow();
            if (addTaskWindow.ShowDialog() == true)
            {
                var newTask = addTaskWindow.Task;
                ViewModel.AddNewTask(newTask.FolderPath, newTask.CellColor, newTask.Assignee);
            }
        }
    }
}
6. AddTaskWindow.xaml - 작업 추가 창
새로운 작업 정보를 입력할 수 있는 창을 구성합니다.

xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.AddTaskWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="작업 추가" Height="300" Width="400">
    <Grid>
        <TextBox Name="FolderPathTextBox" PlaceholderText="폴더 경로" VerticalAlignment="Top" Margin="10"/>
        <TextBox Name="ColorTextBox" PlaceholderText="색상" VerticalAlignment="Top" Margin="10,50,10,0"/>
        <TextBox Name="AssigneeTextBox" PlaceholderText="담당자" VerticalAlignment="Top" Margin="10,100,10,0"/>
        
        <Button Content="저장" HorizontalAlignment="Left" Margin="10,150,0,0" VerticalAlignment="Top" Width="100" Click="SaveButton_Click"/>
        <Button Content="취소" HorizontalAlignment="Right" Margin="0,150,10,0" VerticalAlignment="Top" Width="100" Click="CancelButton_Click"/>
    </Grid>
</Window>
AddTaskWindow.xaml.cs
csharp
코드 복사
using System.Windows;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Views
{
    public partial class AddTaskWindow : Window
    {
        public TaskModel Task { get; private set; }

        public AddTaskWindow()
        {
            InitializeComponent();
            Task = new TaskModel();
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            Task.FolderPath = FolderPathTextBox.Text;
            Task.CellColor = ColorTextBox.Text;
            Task.Assignee = AssigneeTextBox.Text;
            DialogResult = true;
            Close();
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
7. EditTaskWindow.xaml - 작업 수정 창
선택한 작업 정보를 수정할 수 있는 창입니다.

xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.EditTaskWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="작업 수정" Height="300" Width="400">
    <Grid>
        <TextBox Name="FolderPathTextBox" PlaceholderText="폴더 경로" VerticalAlignment="Top" Margin="10"/>
        <TextBox Name="ColorTextBox" PlaceholderText="색상" VerticalAlignment="Top" Margin="10,50,10,0"/>
        <TextBox Name="AssigneeTextBox" PlaceholderText="담당자" VerticalAlignment="Top" Margin="10,100,10,0"/>
        
        <Button Content="저장" HorizontalAlignment="Left" Margin="10,150,0,0" VerticalAlignment="Top" Width="100" Click="SaveButton_Click"/>
        <Button Content="취소" HorizontalAlignment="Right" Margin="0,150,10,0" VerticalAlignment="Top" Width="100" Click="CancelButton_Click"/>
    </Grid>
</Window>
EditTaskWindow.xaml.cs
csharp
코드 복사
using System.Windows;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Views
{
    public partial class EditTaskWindow : Window
    {
        public TaskModel Task { get; private set; }

        public EditTaskWindow(TaskModel task)
        {
            InitializeComponent();
            Task = task;

            // 초기 값 설정
            FolderPathTextBox.Text = task.FolderPath;
            ColorTextBox.Text = task.CellColor;
            AssigneeTextBox.Text = task.Assignee;
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            Task.FolderPath = FolderPathTextBox.Text;
            Task.CellColor = ColorTextBox.Text;
            Task.Assignee = AssigneeTextBox.Text;
            DialogResult = true;
            Close();
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false;
            Close();
        }
    }
}
8. MainViewModel.cs - 신규 작업 추가 및 수정 기능
새로운 작업을 추가하거나, 수정 기능을 호출할 수 있도록 AddNewTask와 EditTask를 구현합니다.

csharp
코드 복사
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;
using System.Collections.ObjectModel;
using System.Windows.Input;

namespace SwiftAIMaster.ViewModels
{
    public class MainViewModel
    {
        public TaskManager TaskManager { get; set; }
        public FolderManager FolderManager { get; set; }

        public MainViewModel()
        {
            var databaseService = new DatabaseService();
            TaskManager = new TaskManager(databaseService);
            FolderManager = new FolderManager();
        }

        public void AddNewTask(string folderName, string color, string assignee)
        {
            var task = new TaskModel
            {
                FolderPath = folderName,
                CellColor = color,
                Assignee = assignee,
                CreatedTime = DateTime.Now,
                Priority = TaskManager.Tasks.Count + 1 // 새 작업의 우선순위 설정
            };
            
            TaskManager.AddTask(task);  // 작업 추가
        }
    }
}
이렇게 하면 DB가 비어 있는 상태에서도 초