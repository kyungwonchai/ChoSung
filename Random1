드로이드에서 알람 소리를 재생하는 기능을 구현할 수 있으며, 시스템 볼륨이 꺼져 있을 때 볼륨을 조정하는 것도 가능합니다. 이를 위해 AudioManager와 MediaPlayer를 사용할 수 있습니다.

1. 소리 재생을 위한 코드
다음은 바코드가 성공적으로 인식되었을 때 알람 소리를 재생하고, 다른 동작에서는 다른 소리를 재생하는 코드입니다.

kotlin
코드 복사
import android.content.Context
import android.media.AudioManager
import android.media.MediaPlayer
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.camera.core.Camera
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private var camera: Camera? = null
    private lateinit var barcodeScanner: BarcodeScanner
    private lateinit var successSound: MediaPlayer
    private lateinit var failureSound: MediaPlayer
    private lateinit var audioManager: AudioManager

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        previewView = findViewById(R.id.previewView)
        cameraExecutor = Executors.newSingleThreadExecutor()

        // AudioManager 초기화
        audioManager = getSystemService(Context.AUDIO_SERVICE) as AudioManager

        // 소리 파일 초기화 (res/raw/success_sound.mp3, res/raw/failure_sound.mp3를 사용)
        successSound = MediaPlayer.create(this, R.raw.success_sound)
        failureSound = MediaPlayer.create(this, R.raw.failure_sound)

        // BarcodeScanner 초기화
        barcodeScanner = BarcodeScanning.getClient()

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val previewBuilder = Preview.Builder()

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            // 이미지 분석을 위한 설정
            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(imageProxy)
                    })
                }

            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(imageProxy: ImageAnalysis.ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    if (barcodes.isNotEmpty()) {
                        playSuccessSound() // 성공 소리 재생
                        for (barcode in barcodes) {
                            val rawValue = barcode.rawValue
                            Log.d(TAG, "Barcode detected: $rawValue")
                            Toast.makeText(this, "Barcode detected: $rawValue", Toast.LENGTH_SHORT).show()
                        }
                    } else {
                        playFailureSound() // 실패 소리 재생
                    }
                }
                .addOnFailureListener {
                    playFailureSound() // 실패 소리 재생
                    Log.e(TAG, "Barcode scanning failed", it)
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        } else {
            imageProxy.close()
        }
    }

    private fun playSuccessSound() {
        adjustVolume()
        successSound.start()
    }

    private fun playFailureSound() {
        adjustVolume()
        failureSound.start()
    }

    private fun adjustVolume() {
        // 시스템 볼륨이 낮거나 꺼져 있으면 적당히 올림
        val currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)
        if (currentVolume == 0) {
            audioManager.setStreamVolume(
                AudioManager.STREAM_MUSIC,
                audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC) / 2,
                0
            )
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
        successSound.release()
        failureSound.release()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA
        )
    }
}
코드 설명:
AudioManager 및 MediaPlayer 초기화:

AudioManager는 시스템 오디오 설정을 조정하기 위해 사용됩니다.
MediaPlayer는 소리 파일을 재생하는 데 사용됩니다. 여기서 success_sound와 failure_sound는 res/raw 폴더에 있는 오디오 파일입니다.
소리 재생 시 볼륨 조정:

adjustVolume() 함수는 시스템 볼륨이 너무 낮거나 꺼져 있을 때 자동으로 볼륨을 조정합니다.
audioManager.getStreamVolume(AudioManager.STREAM_MUSIC)로 현재 음악 스트림의 볼륨을 가져와, 볼륨이 0일 경우 최대 볼륨의 절반으로 설정합니다.
성공 및 실패 시 다른 소리 재생:

playSuccessSound() 함수는 바코드가 성공적으로 인식되었을 때 호출되며, 성공 소리를 재생합니다.
playFailureSound() 함수는 바코드 인식에 실패했을 때 호출되며, 실패 소리를 재생합니다.
리소스 정리:

onDestroy()에서 MediaPlayer 객체를 해제하여 메모리 누수를 방지합니다.
소리 파일 추가 방법:
res/raw 폴더에 success_sound.mp3 및 failure_sound.mp3 파일을 추가해야 합니다. 이러한 파일은 응용 프로그램에서 사용할 수 있는 사운드 효과입니다.

결론:
이 코드를 사용하면 바코드 인식의 성공 또는 실패에 따라 다른 알람 소리를 재생할 수 있으며, 시스템 소리가 꺼져 있을 경우 자동으로 볼륨을 조정합니다. 추가적인 도움이 필요하시거나 질문이 있으시면 언제든지 알려주세