import paramiko
import time
import os
import logging
import platform
import subprocess
from datetime import datetime

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================
HOSTS = ['192.168.1.101', '192.168.1.102',] # 500대 IP 주소 목록
SSH_USER = 'pi'
SSH_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa')
PM2_APP_NAME = 'sensor' # 사용자께서 알려주신 프로세스 이름
LOG_FILE = 'deployment_log.txt'

# --- systemd 서비스 파일 내용 정의 ---
PYTHON_EXEC_PATH = '/usr/bin/python3'
APP_WORKING_DIR = '/home/pi/my_project'
APP_SCRIPT_PATH = '/home/pi/my_project/main.py'
APP_ARGS = '--mode production --port 8080'
SERVICE_FILE_NAME = 'myapp.service'
SERVICE_FILE_CONTENT = f"""[Unit]
Description=My Python Application with Watchdog
After=network.target
[Service]
ExecStart={PYTHON_EXEC_PATH} {APP_SCRIPT_PATH} {APP_ARGS}
WorkingDirectory={APP_WORKING_DIR}
StandardOutput=inherit
StandardError=inherit
Restart=always
User={SSH_USER}
WatchdogSec=60
[Install]
WantedBy=multi-user.target
"""
# ===================================================================

def setup_logging():
    logger = logging.getLogger('DeploymentLogger')
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(logging.Formatter('%(message)s'))
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
    return logger

def is_host_reachable(hostname, logger):
    logger.info(f"[{hostname}] Ping 테스트 시작...")
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-w', '2', hostname]
    try:
        response = subprocess.run(command, capture_output=True, check=False)
        if response.returncode == 0:
            logger.info(f"[{hostname}] Ping 성공.")
            return True
        else:
            logger.warning(f"[{hostname}] Ping 실패. 건너뜁니다.")
            return False
    except FileNotFoundError:
        logger.error("[오류] 'ping' 명령어를 찾을 수 없습니다.")
        return False

def run_command(client, command, logger):
    logger.info(f"  [실행] {command}")
    stdin, stdout, stderr = client.exec_command(command, get_pty=True)
    exit_status = stdout.channel.recv_exit_status()
    stdout_output = stdout.read().decode('utf-8').strip()
    stderr_output = stderr.read().decode('utf-8').strip()
    if stdout_output:
        logger.info(f"  [출력] {stdout_output}")
    if stderr_output:
        logger.warning(f"  [오류 출력] {stderr_output}")
    if exit_status != 0:
        raise Exception(f"명령어 실행 실패 (종료 코드: {exit_status})")
    return stdout_output

def deploy_to_host(hostname, logger):
    logger.info(f"[{hostname}] 워치독 배포 작업 시작...")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(
            hostname, username=SSH_USER, key_filename=SSH_KEY_FILE, timeout=10,
            disabled_algorithms=dict(pubkeys=['rsa-sha2-512', 'rsa-sha2-256'])
        )
        logger.info(f"[{hostname}] SSH 연결 성공.")
        
        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        # ==         PM2 서비스를 직접 중지시키는 핵심 변경 사항         ==
        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        logger.info(f"[{hostname}] 1단계: PM2 서비스 직접 중지 및 비활성화")

        # 1-1. 'pi' 계정의 PM2 프로세스 중지 (sudo 없음)
        try:
            run_command(client, f"pm2 stop {PM2_APP_NAME}", logger)
            run_command(client, f"pm2 save --force", logger)
        except Exception as e:
            logger.warning(f"[{hostname}] PM2 프로세스 중지 실패. 이미 중지되었을 수 있습니다. 오류: {e}")

        # 1-2. 부팅 시 자동 시작되는 PM2 서비스 비활성화 (sudo 있음)
        # PM2가 만드는 기본 서비스 이름은 보통 'pm2-[유저이름].service' 입니다.
        pm2_service_name = f"pm2-{SSH_USER}.service"
        try:
            run_command(client, f"sudo systemctl disable {pm2_service_name}", logger)
            run_command(client, f"sudo systemctl stop {pm2_service_name}", logger)
        except Exception as e:
            logger.warning(f"[{hostname}] PM2 시스템 서비스({pm2_service_name}) 비활성화 실패. 서비스가 없거나 다른 이름일 수 있습니다. 오류: {e}")
        
        # 2. SFTP로 새로운 서비스 파일 생성
        logger.info(f"[{hostname}] 2단계: SFTP로 새로운 서비스 파일 생성")
        sftp = client.open_sftp()
        remote_path = f"/tmp/{SERVICE_FILE_NAME}"
        with sftp.file(remote_path, 'w') as f:
            f.write(SERVICE_FILE_CONTENT)
        sftp.close()
        run_command(client, f"sudo mv {remote_path} /etc/systemd/system/{SERVICE_FILE_NAME}", logger)

        # 3. 새로운 서비스 활성화
        logger.info(f"[{hostname}] 3단계: 새로운 systemd 서비스 활성화 및 시작")
        run_command(client, "sudo systemctl daemon-reload", logger)
        run_command(client, f"sudo systemctl enable {SERVICE_FILE_NAME}", logger)
        run_command(client, f"sudo systemctl restart {SERVICE_FILE_NAME}", logger)
        
        time.sleep(3)
        run_command(client, f"sudo systemctl status {SERVICE_FILE_NAME}", logger)

        logger.info(f"--- [{hostname}] 작업 성공적으로 완료! ---")

    except Exception as e:
        logger.error(f"!!!!!! [{hostname}]에서 심각한 오류 발생: {e} !!!!!!")
    finally:
        if client:
            client.close()

if __name__ == '__main__':
    logger = setup_logging()
    logger.info("\n" + "="*20 + " 워치독 배포 작업 시작 (PM2 직접 제어 버전) " + "="*20)

    for host in HOSTS:
        if is_host_reachable(host, logger):
            deploy_to_host(host, logger)
            
    logger.info("="*20 + " 워치독 배포 작업 완료 " + "="*20 + "\n")
```

이제 이 스크립트는 더 이상 `which`나 `find` 같은 불필요한 명령 없이, `pm2 stop sensor`와 `sudo systemctl disable pm2-pi.service` 라는 가장 직접적이고 확실한 방법으로 기존 서비스를 중지시킬 것입니다.