장한 후 다시 복원하는 방법을 설명드리겠습니다. 이 방법은 파일의 종류와 상관없이 파일을 업로드, 삭제, 다운로드할 수 있도록 합니다.

1. MSSQL 테이블 설계
테이블A에 파일 정보를 저장할 수 있는 컬럼을 추가합니다.

sql
코드 복사
CREATE TABLE 테이블A (
    ID INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100),
    FileName NVARCHAR(255),
    FileData VARBINARY(MAX)
);
2. WPF 프로젝트 설정
DevExpress를 사용하여 WPF 프로젝트를 설정합니다. NuGet 패키지를 통해 DevExpress.Wpf.Grid 및 관련 패키지를 설치합니다.

3. XAML 파일 구성
GridControl을 설정하고, 파일 아이콘을 표시하는 컬럼을 추가합니다. DataTemplate을 사용하여 각 셀에 버튼을 추가합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew">
            <dxg:GridControl.View>
                <dxg:TableView Name="tableView" ShowGroupPanel="False" />
            </dxg:GridControl.View>
            <dxg:GridColumn FieldName="ID" ReadOnly="True" />
            <dxg:GridColumn FieldName="Name" />
            <dxg:GridColumn FieldName="FileName" Header="File">
                <dxg:GridColumn.CellTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <Button Content="Upload" Click="UploadFile_Click" Tag="{Binding}" />
                            <Button Content="Delete" Click="DeleteFile_Click" Tag="{Binding}" />
                            <Button Content="Download" Click="DownloadFile_Click" Tag="{Binding}" />
                        </StackPanel>
                    </DataTemplate>
                </dxg:GridColumn.CellTemplate>
            </dxg:GridColumn>
        </dxg:GridControl>
    </Grid>
</Window>
4. C# 코드 구성
MainWindow.xaml.cs 파일에서 필요한 기능을 구현합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using Microsoft.Win32;
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Windows;
using System.Windows.Controls;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string";

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT ID, Name, FileName FROM 테이블A";
                SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
                DataTable dt = new DataTable();
                adapter.Fill(dt);
                gridControl.ItemsSource = dt;
            }
        }

        private void UploadFile_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            DataRowView rowView = button.Tag as DataRowView;

            OpenFileDialog openFileDialog = new OpenFileDialog();
            if (openFileDialog.ShowDialog() == true)
            {
                using (Stream stream = openFileDialog.OpenFile())
                {
                    using (MemoryStream memoryStream = new MemoryStream())
                    {
                        stream.CopyTo(memoryStream);
                        byte[] fileData = memoryStream.ToArray();
                        string fileName = openFileDialog.SafeFileName;

                        using (SqlConnection conn = new SqlConnection(connectionString))
                        {
                            conn.Open();
                            string query = "UPDATE 테이블A SET FileName = @FileName, FileData = @FileData WHERE ID = @ID";
                            SqlCommand cmd = new SqlCommand(query, conn);
                            cmd.Parameters.AddWithValue("@FileName", fileName);
                            cmd.Parameters.AddWithValue("@FileData", fileData);
                            cmd.Parameters.AddWithValue("@ID", rowView["ID"]);
                            cmd.ExecuteNonQuery();
                        }
                    }
                }
                LoadData();
            }
        }

        private void DeleteFile_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            DataRowView rowView = button.Tag as DataRowView;

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "UPDATE 테이블A SET FileName = NULL, FileData = NULL WHERE ID = @ID";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@ID", rowView["ID"]);
                cmd.ExecuteNonQuery();
            }

            LoadData();
        }

        private void DownloadFile_Click(object sender, RoutedEventArgs e)
        {
            Button button = sender as Button;
            DataRowView rowView = button.Tag as DataRowView;

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                string query = "SELECT FileName, FileData FROM 테이블A WHERE ID = @ID";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@ID", rowView["ID"]);

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    if (reader.Read())
                    {
                        string fileName = reader["FileName"].ToString();
                        byte[] fileData = (byte[])reader["FileData"];

                        SaveFileDialog saveFileDialog = new SaveFileDialog();
                        saveFileDialog.FileName = fileName;
                        if (saveFileDialog.ShowDialog() == true)
                        {
                            using (FileStream fileStream = new FileStream(saveFileDialog.FileName, FileMode.Create, FileAccess.Write))
                            {
                                fileStream.Write(fileData, 0, fileData.Length);
                                MessageBox.Show("File downloaded successfully.");
                            }
                        }
                    }
                }
            }
        }
    }
}
설명
LoadData: 데이터베이스에서 데이터를 로드하여 GridControl에 바인딩합니다.
UploadFile_Click: 각 행에 파일을 업로드할 수 있도록 합니다. 선택한 파일을 스트림으로 읽어 데이터베이스에 저장하고 GridControl을 업데이트합니다.
DeleteFile_Click: 각 행의 파일을 삭제할 수 있도록 합니다. 파일 정보를 데이터베이스에서 제거하고 GridControl을 업데이트합니다.
DownloadFile_Click: 각 행의 파일을 다운로드하여 사용자가 지정한 경로에 저장할 수 있도록 합니다. 데이터베이스에서 파일을 읽어 스트림으로 복원합니다.
이 코드는 각 행마다 파일 업로드, 삭제, 다운로드 기능을 제공합니다. 파일을 스트림으로 처리하여 파일의 종류에 상관없이 작업할 수 있도록 하였습니다.