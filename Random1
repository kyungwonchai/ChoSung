 🔗 1. MySQL 연결 URL (SQLAlchemy 형식)
Python 기반의 SQLAlchemy를 사용하는 환경에서는 아래 형식의 연결 문자열(Connection String)을 사용합니다. 어떤 드라이버를 쓰는지에 따라 형식이 약간 다릅니다.

mysql-connector-python 드라이버 사용 시 (권장)

mysql+mysqlconnector://<사용자이름>:<비밀번호>@<호스트주소>:<포트>/<데이터베이스이름>
PyMySQL 드라이버 사용 시

mysql+pymysql://<사용자이름>:<비밀번호>@<호스트주소>:<포트>/<데이터베이스이름>
✅ 실제 사용 예시:

mysql+mysqlconnector://report_user:SecurePass123@192.168.0.100:3306/sales_db

## 👤 2. 특정 테이블 조회 전용 계정 생성 (MySQL 5.7 기준)
MySQL 5.7 버전에서는 GRANT 명령어를 사용하여 계정 생성과 권한 부여를 한 번에 처리할 수 있습니다.

아래 쿼리는 sales_db 데이터베이스의 sales_transactions 테이블에 대해서만 SELECT(조회) 권한을 가지는 report_user 계정을 생성하는 예시입니다.

SQL

-- 'report_user'라는 이름의 사용자를 만들고, 특정 테이블에 대한 SELECT 권한만 부여합니다.
-- '%'는 모든 IP에서의 원격 접속을 허용한다는 의미입니다.
GRANT SELECT 
   ON `sales_db`.`sales_transactions` 
   TO 'report_user'@'%' 
   IDENTIFIED BY 'SecurePass123';

-- 변경된 권한을 시스템에 즉시 적용합니다.
FLUSH PRIVILEGES;
쿼리 설명:

GRANT SELECT: 조회(SELECT) 권한을 부여합니다.

ON sales_db.sales_transactions``: 어떤 데이터베이스의 어떤 테이블에 권한을 적용할지 지정합니다.

TO 'report_user'@'%': 'report_user'라는 계정에게 권한을 줍니다. '@' 뒤의 호스트 부분은 접속을 허용할 IP를 의미합니다.

'%': 모든 IP에서 접속을 허용합니다. (가장 일반적이지만 보안에 유의)

'localhost': MySQL 서버 내부에서만 접속을 허용합니다.

'192.168.0.%': 특정 IP 대역에서만 접속을 허용합니다.

IDENTIFIED BY 'SecurePass123': 계정의 비밀번호를 설정합니다.

FLUSH PRIVILEGES;: 변경된 권한 설정을 MySQL 서버에 즉시 반영하라는 명령어입니다.

## 🗑️ 3. 생성한 계정 삭제
생성했던 계정을 삭제할 때는 DROP USER 명령어를 사용합니다.

SQL

-- 'report_user'@'%' 계정을 완전히 삭제합니다.
DROP USER 'report_user'@'%';

-- 변경된 권한을 시스템에 즉시 적용합니다.