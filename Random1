래는 요청하신 기능을 WPF MVVM 패턴으로 구현한 XAML과 C# 코드입니다.

XAML (View)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="200" Width="400">
    <Grid>
        <StackPanel Orientation="Vertical" Margin="10">
            <!-- CheckBox -->
            <CheckBox Content="Enable Feature"
                      IsChecked="{Binding IsFeatureEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                      Command="{Binding CheckBoxCommand}"
                      Margin="0,0,0,10"/>
            
            <!-- TextBox -->
            <TextBox x:Name="TextboxForceExit"
                     Text="{Binding ForceExitValue, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                     IsReadOnly="{Binding IsTextBoxReadOnly}"
                     Margin="0,0,0,10"/>
        </StackPanel>
    </Grid>
</Window>
ViewModel (C#)
csharp
코드 복사
using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private bool _isFeatureEnabled;
        private int _forceExitValue;
        private bool _isTextBoxReadOnly;

        public event PropertyChangedEventHandler PropertyChanged;

        // CheckBox 상태 바인딩
        public bool IsFeatureEnabled
        {
            get => _isFeatureEnabled;
            set
            {
                if (_isFeatureEnabled != value)
                {
                    _isFeatureEnabled = value;
                    OnPropertyChanged(nameof(IsFeatureEnabled));
                }
            }
        }

        // TextBox 숫자 바인딩
        public int ForceExitValue
        {
            get => _forceExitValue;
            set
            {
                if (_forceExitValue != value)
                {
                    _forceExitValue = value;
                    OnPropertyChanged(nameof(ForceExitValue));
                }
            }
        }

        // TextBox 읽기 전용 상태
        public bool IsTextBoxReadOnly
        {
            get => _isTextBoxReadOnly;
            set
            {
                if (_isTextBoxReadOnly != value)
                {
                    _isTextBoxReadOnly = value;
                    OnPropertyChanged(nameof(IsTextBoxReadOnly));
                }
            }
        }

        // CheckBox Command
        public ICommand CheckBoxCommand { get; }

        public MainViewModel()
        {
            CheckBoxCommand = new RelayCommand(ExecuteCheckBoxCommand);
            IsTextBoxReadOnly = false; // 초기 상태: TextBox는 입력 가능
        }

        private void ExecuteCheckBoxCommand(object parameter)
        {
            if (IsFeatureEnabled)
            {
                // 숫자 범위 체크
                if (ForceExitValue < 30 || ForceExitValue > 400)
                {
                    MessageBox.Show("숫자는 30 이상 400 이하이어야 합니다.", "범위 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    IsFeatureEnabled = false;
                    return;
                }

                // 메시지 박스 확인
                var result = MessageBox.Show("TextBox를 잠그시겠습니까?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (result == MessageBoxResult.Yes)
                {
                    IsTextBoxReadOnly = true; // TextBox 잠금
                }
                else
                {
                    IsFeatureEnabled = false; // 체크박스 상태 초기화
                }
            }
            else
            {
                // 메시지 박스 확인
                var result = MessageBox.Show("TextBox 잠금을 해제하시겠습니까?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Question);
                if (result == MessageBoxResult.Yes)
                {
                    IsTextBoxReadOnly = false; // TextBox 잠금 해제
                }
                else
                {
                    IsFeatureEnabled = true; // 체크박스 상태 유지
                }
            }
        }

        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand 구현
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<object, bool> _canExecute;

        public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged;

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute(parameter);

        public void Execute(object parameter) => _execute(parameter);

        public void RaiseCanExecuteChanged() => CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }
}
코드 설명
CheckBox Control

IsFeatureEnabled 속성에 바인딩되어 상태를 관리합니다.
CheckBoxCommand를 사용해 클릭 이벤트를 처리합니다.
TextBox Control

ForceExitValue 속성에 숫자를 바인딩하고 양방향으로 업데이트합니다.
IsTextBoxReadOnly 속성으로 읽기 전용 상태를 제어합니다.
범위 검사

CheckBox가 체크되면 ForceExitValue 값이 30 이상, 400 이하인지 확인합니다.
조건에 맞지 않으면 에러 메시지를 표시하고 CheckBox 상태를 초기화합니다.
TextBox 잠금 및 메시지

CheckBox를 체크하거나 해제할 때마다 메시지 박스를 띄워 사용자의 선택을 확인합니다.
IsTextBoxReadOnly 속성을 사용해 TextBox 잠금 상태를 제어합니다.
MVVM 구조

MainViewModel이 View와 데이터를 연결합니다.