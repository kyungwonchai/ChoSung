네, 알겠습니다. 방금 말씀하신 두 가지 문제 (특이사항 에러는 제외하고, 세부위치 숫자 제한 해제 및 마스터 창 닫기 후 DbContext 오류)를 해결하기 위해 2개의 파일을 수정해야 합니다.

Views/MainWindow.xaml: "세부위치" 컬럼의 숫자 입력 제한(Mask)을 제거합니다.
ViewModels/MainViewModel.cs: 마스터 데이터 창을 닫은 직후에 발생할 수 있는 DbContext 관련 오류를 피하기 위해, 창이 닫힌 후 메인 화면의 콤보박스 목록을 새로고침하는(LoadMasterDataAsync 호출) 시점을 약간 지연시킵니다 (Dispatcher 사용).
아래에 수정된 두 파일의 전체 코드를 바로 작성해 드립니다.

1. Views/MainWindow.xaml (수정)

"세부위치"(SpecificLocation) 컬럼의 TextEditSettings에서 MaskType과 Mask 속성을 제거합니다.

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/> <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal"> <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}"/> <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}"/>
                     <Button Content="⚙️ 마스터 데이터 관리" Margin="15,3,3,3" Command="{Binding OpenMasterDataWindowCommand}" ToolTip="마스터 데이터(층, 구역 등)를 관리하는 새 창을 엽니다." Visibility="{Binding IsMasterModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                 </StackPanel>
            </Border>
        </DockPanel>

        <Grid Grid.Row="1" Margin="5">
            <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
            <Border Grid.Row="0" Background="WhiteSmoke" Padding="3"> <StackPanel Orientation="Horizontal"> <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/> <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/> <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/> </StackPanel> </Border>
            <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                <dxg:GridControl.View> <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always"> <dxg:TableView.RowCellMenuCustomizations> <dxb:BarButtonItem Content="배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/> <dxb:BarItemSeparator/> <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/> </dxg:TableView.RowCellMenuCustomizations> </dxg:TableView> </dxg:GridControl.View>
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}">
                        <dxg:GridColumn.EditSettings>
                            <dxe:TextEditSettings HorizontalContentAlignment="Center"/>
                            </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                </dxg:GridControl.Columns>
            </dxg:GridControl>
        </Grid>

        <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem> </StatusBar>
    </Grid>

</dx:ThemedWindow>
2. ViewModels/MainViewModel.cs (수정)

OpenMasterDataWindow 메서드에서 masterDataWindow.ShowDialog() 호출 이후에 LoadMasterDataAsync()를 바로 호출하는 대신, Dispatcher.BeginInvoke를 사용하여 UI 스레드에서 약간의 지연 후 비동기적으로 호출하도록 변경합니다. 이렇게 하면 MasterDataWindow가 완전히 닫히고 관련 리소스가 정리될 시간을 확보하여 DbContext 관련 충돌 오류를 방지할 수 있습니다.
using System.Windows.Threading; 네임스페이스를 추가해야 합니다.
C#

// 필요한 네임스페이스 추가
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Views;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;
using System.IO;
using System.Text;
using System.Windows.Threading; // Dispatcher 사용 위해 추가

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel (DbContext Disposed 오류 수정)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        // ... (이전과 동일한 멤버 변수들) ...
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";
        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;
        public LogViewModel LogVM { get; private set; }


        #region Public Properties (이전과 동일)
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands (이전과 동일)
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        public ICommand OpenMasterDataWindowCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            LogVM = new LogViewModel(); // 로그 ViewModel 생성

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());
            OpenMasterDataWindowCommand = new RelayCommand(OpenMasterDataWindow);

            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        // --- 데이터 로딩 메서드 (LoadMasterDataAsync 수정됨) ---
        private async Task LoadInitialDataAsync() { await LoadMasterDataAsync(); await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync() { if (_context == null) return; StatusBarText = "사물함 목록 로딩 중..."; try { var assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(); LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; } catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); } }
        private async Task LoadMasterDataAsync() { if (_context == null) return; StatusBarText = "마스터 데이터(콤보박스용) 로딩 중..."; try { AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync()); AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync()); AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync()); AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync()); AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync()); StatusBarText = "마스터 데이터(콤보박스용) 로드 완료."; } catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader")) { HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx); MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); } catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); } }

        // --- 마스터 키 확인 메서드 (이전과 동일) ---
        private void CheckMasterPassword(object parameter) { try { string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"]; if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }

        /// <summary>
        /// 마스터 데이터 관리 창 열기 (+ 백업 기능, + Dispose 오류 수정)
        /// </summary>
        private void OpenMasterDataWindow(object parameter)
        {
            // 백업 실행
            if (!BackupDataToCsv())
            {
                if (MessageBox.Show("데이터 백업에 실패했습니다. 계속 진행하시겠습니까?", "백업 실패", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No) return;
            }

            // 새 창 열기 로직
            try
            {
                var masterDataVM = new MasterDataViewModel(); // 새 ViewModel (자체 DbContext 사용)
                var masterDataWindow = new MasterDataWindow { DataContext = masterDataVM, Owner = Application.Current.MainWindow };

                masterDataWindow.ShowDialog(); // 모달로 표시 (이 메서드가 반환되면 창이 닫힌 것)

                // *** 수정된 부분: Dispatcher를 사용하여 마스터 데이터 새로고침 지연 호출 ***
                // 창이 완전히 닫히고 리소스가 정리될 시간을 주기 위해 Dispatcher 사용
                Application.Current.Dispatcher.BeginInvoke(new Action(async () => {
                    StatusBarText = "콤보박스 목록 새로고침 중...";
                    await LoadMasterDataAsync(); // 메인 화면의 콤보박스 목록 갱신
                }), DispatcherPriority.ContextIdle); // UI가 유휴 상태일 때 실행

                // ViewModel 리소스 정리 (MasterDataWindow_Closing 이벤트에서 처리하므로 여기서 호출 안 함)
                // masterDataVM.Dispose();
            }
            catch (Exception ex) { MessageBox.Show($"마스터 데이터 관리 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        }


        #region CRUD 및 기타 메서드 (이전과 동일)
        private async Task SaveChangesAsync() { if (_context == null) return; StatusBarText = "변경 사항 저장 중..."; List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); } }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null || changedEntries == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        #endregion

        #region Backup Logic (CSV - 이전과 동일)
        private bool BackupDataToCsv() { string backupDir = @"C:\agent"; string fileName = $"LockerBackup_{DateTime.Now:yyyyMMdd_HHmmss}.csv"; string filePath = Path.Combine(backupDir, fileName); StatusBarText = "데이터 백업 시작..."; try { Directory.CreateDirectory(backupDir); using (var backupContext = new LockerDbContext()) using (var writer = new StreamWriter(filePath, false, Encoding.UTF8)) { WriteTableToCsv<LockerType>(backupContext, writer); WriteTableToCsv<Floor>(backupContext, writer); WriteTableToCsv<Zone>(backupContext, writer); WriteTableToCsv<SubPart>(backupContext, writer); WriteTableToCsv<Administrator>(backupContext, writer); WriteTableToCsv<LockerAssignment>(backupContext, writer); WriteTableToCsv<AuditLog>(backupContext, writer); } StatusBarText = $"데이터 백업 완료: {filePath}"; MessageBox.Show($"데이터가 다음 위치에 백업되었습니다:\n{filePath}", "백업 완료", MessageBoxButton.OK, MessageBoxImage.Information); return true; } catch (Exception ex) { StatusBarText = $"데이터 백업 실패: {ex.Message}"; MessageBox.Show($"데이터 백업 중 오류가 발생했습니다:\n{ex.ToString()}", "백업 오류", MessageBoxButton.OK, MessageBoxImage.Error); return false; } }
        private void WriteTableToCsv<T>(LockerDbContext context, StreamWriter writer) where T : class { var dbSet = context.Set<T>(); var entityType = typeof(T); var properties = entityType.GetProperties(); writer.WriteLine($"--- Table: {entityType.Name} ---"); writer.WriteLine(string.Join(",", properties.Select(p => EscapeCsvValue(p.Name)))); foreach (var entity in dbSet) { var values = properties.Select(p => EscapeCsvValue(p.GetValue(entity)?.ToString() ?? "")); writer.WriteLine(string.Join(",", values)); } writer.WriteLine(); writer.WriteLine(); }
        private string EscapeCsvValue(string value) { if (string.IsNullOrEmpty(value)) return ""; if (value.Contains(",") || value.Contains("\"") || value.Contains("\r") || value.Contains("\n")) { return $"\"{value.Replace("\"", "\"\"")}\""; } return value; }
        #endregion

        #region Helper Methods (이전과 동일)
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); LogVM?.Dispose(); /* MasterDataVM은 OpenMasterDataWindow에서 관리 */ } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
핵심 변경 사항:

MainWindow.xaml: "세부위치" 컬럼에서 숫자 입력 제한 마스크를 제거했습니다.
MainViewModel.cs:
OpenMasterDataWindow 메서드에서 MasterDataWindow가 닫힌 후 LoadMasterDataAsync()를 즉시 호출하는 대신 Application.Current.Dispatcher.BeginInvoke를 사용하여 호출을 약간 지연시켰습니다. 이는 닫힌 창의 DbContext 리소스가 완전히 해제될 시간을 확보하여 "DbContext has been disposed" 오류를 방지하기 위함입니다.