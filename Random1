서비스 상태를 업데이트할 때 숫자 대신 열거형을 사용하는 것은 코드의 가독성을 높이는 좋은 방법입니다. 이를 통해 어떤 서비스의 상태를 업데이트하는지 명확하게 알 수 있습니다.

아래는 서비스 이름을 열거형으로 정의하고, 이를 통해 특정 서비스를 가독성 있게 제어하는 방법을 설명합니다.

1. 서비스 이름을 열거형으로 정의하기
먼저 서비스 이름을 열거형으로 정의합니다. 이렇게 하면 서비스 이름을 숫자가 아닌 명확한 이름으로 참조할 수 있습니다.

ServiceNameType.cs
csharp
코드 복사
namespace RouterMiddleACR.Models
{
    // 서비스 이름을 나타내는 열거형 정의
    public enum ServiceNameType
    {
        Service1, // 첫 번째 서비스
        Service2, // 두 번째 서비스
        Service3, // 세 번째 서비스
        // 필요한 다른 서비스 이름을 추가할 수 있습니다.
    }
}
2. ServiceStatus 클래스 수정
ServiceStatus 클래스를 수정하여 서비스 이름을 열거형으로 저장하고 이를 활용할 수 있게 합니다.

수정된 ServiceStatus.cs
csharp
코드 복사
using System.ComponentModel;

namespace RouterMiddleACR.Models
{
    public class ServiceStatus : INotifyPropertyChanged
    {
        private ServiceStatusType _status;
        private ServiceNameType _serviceName; // 서비스 이름을 저장하는 열거형 추가
        private string _description;

        public ServiceStatusType Status
        {
            get => _status;
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged(nameof(Status));
                    UpdateDescription(); // 상태 변경 시 설명도 업데이트
                }
            }
        }

        public ServiceNameType ServiceName
        {
            get => _serviceName;
            set
            {
                if (_serviceName != value)
                {
                    _serviceName = value;
                    OnPropertyChanged(nameof(ServiceName));
                }
            }
        }

        public string Description
        {
            get => _description;
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged(nameof(Description));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void UpdateDescription()
        {
            switch (Status)
            {
                case ServiceStatusType.Running:
                    Description = "Running";
                    break;
                case ServiceStatusType.Stopped:
                    Description = "Stopped";
                    break;
                case ServiceStatusType.Paused:
                    Description = "Paused";
                    break;
                case ServiceStatusType.Error:
                    Description = "Error";
                    break;
                case ServiceStatusType.Restarting:
                    Description = "Restarting";
                    break;
                default:
                    Description = "Unknown";
                    break;
            }
        }
    }
}
3. MainViewModel에서 서비스 상태 업데이트
MainViewModel에서 열거형을 사용하여 특정 서비스를 가독성 있게 제어할 수 있도록 합니다.

수정된 MainViewModel.cs
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using RouterMiddleACR.Models;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        // 서비스 상태를 관리하는 ObservableCollection
        public ObservableCollection<ServiceStatus> ServiceStatuses { get; }

        public MainViewModel()
        {
            ServiceStatuses = new ObservableCollection<ServiceStatus>
            {
                new ServiceStatus { ServiceName = ServiceNameType.Service1, Status = ServiceStatusType.Unknown },
                new ServiceStatus { ServiceName = ServiceNameType.Service2, Status = ServiceStatusType.Unknown },
                new ServiceStatus { ServiceName = ServiceNameType.Service3, Status = ServiceStatusType.Unknown },
                // 필요한 만큼 더 추가 가능
            };
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        // 특정 서비스 상태를 업데이트하는 메서드
        public void UpdateServiceStatus(ServiceNameType serviceName, ServiceStatusType newStatus)
        {
            var service = ServiceStatuses.FirstOrDefault(s => s.ServiceName == serviceName);
            if (service != null)
            {
                service.Status = newStatus; // 특정 서비스의 상태를 변경
            }
        }
    }
}
4. 서비스 상태 변경 호출 예제
MainWindow.xaml.cs에서 열거형을 사용하여 특정 서비스의 상태를 업데이트합니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;
using RouterMiddleACR.ViewModels;
using RouterMiddleACR.Models;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
        }

        private void ChangeLampStatusButton_Click(object sender, RoutedEventArgs e)
        {
            // 예시: Service2의 상태를 Running으로 변경
            _viewModel.UpdateServiceStatus(ServiceNameType.Service2, ServiceStatusType.Running);
        }
    }
}
5. 설명
열거형 사용: ServiceNameType 열거형을 사용하여 서비스 이름을 명확하게 정의하고, 서비스 상태 업데이트 시 해당 열거형을 사용하여 가독성을 높였습니다.

UpdateServiceStatus 메서드: MainViewModel에서 UpdateServiceStatus 메서드는 열거형을 사용하여 특정 서비스의 상태를 업데이트합니다. 이를 통해 숫자 인덱스 대신 명확한 이름으로 서비스를 제어할 수 있습니다.

UI 업데이트: ServiceStatuses 컬렉션에서 특정 서비스를 찾아 상태를 업데이트하고, INotifyPropertyChanged를 통해 UI가 자동으로 갱신됩니다.

이렇게 하면 열거형을 사용하여 서비스 이름과 상태를 보다 명확하게 표현할 수 있으며, 가독성과 유지보수성이 향상됩니