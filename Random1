죄송합니다! 말씀하신 대로 foreach에서 POStatus 속성만 이벤트를 연결하도록 수정한 예제를 다시 제공하겠습니다.

수정된 ViewModel
이제 Items 컬렉션 내의 각 Item의 POStatus 속성에만 이벤트를 연결하고, 변경 시 필터링이 적용되도록 코드 수정하겠습니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

public class MainViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private bool _showHiddenRows;
    public bool ShowHiddenRows
    {
        get => _showHiddenRows;
        set
        {
            _showHiddenRows = value;
            OnPropertyChanged(nameof(ShowHiddenRows));
            FilterItems(); // 체크박스 상태 변경 시 필터링
        }
    }

    public ObservableCollection<Item> Items { get; set; }
    public ObservableCollection<Item> FilteredItems { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<Item>
        {
            new Item { POStatus = "처리중" },
            new Item { POStatus = "이미 처리됨" },
            new Item { POStatus = "대기중" },
            new Item { POStatus = "이미 처리됨" }
        };

        // 각 항목의 POStatus 변경 감지
        foreach (var item in Items)
        {
            item.PropertyChanged += (s, e) => 
            {
                if (e.PropertyName == nameof(Item.POStatus))
                {
                    FilterItems(); // POStatus가 변경되면 필터 다시 적용
                }
            };
        }

        // 초기 필터링 적용
        FilteredItems = new ObservableCollection<Item>(Items);
    }

    // 필터링 로직
    private void FilterItems()
    {
        // 필터 적용 전에 Clear해서 기존 데이터를 비움
        FilteredItems.Clear();

        var filtered = ShowHiddenRows 
            ? Items // 체크박스가 선택된 경우 모든 항목을 표시
            : Items.Where(i => !i.POStatus.Contains("이미")); // "이미" 포함 항목 필터링

        // 필터링된 항목을 FilteredItems에 추가
        foreach (var item in filtered)
        {
            FilteredItems.Add(item);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
Item 클래스
Item 클래스는 POStatus 속성의 변경 감지만 구현한 상태로 유지됩니다.

csharp
코드 복사
using System.ComponentModel;

public class Item : INotifyPropertyChanged
{
    private string _poStatus;
    public string POStatus
    {
        get => _poStatus;
        set
        {
            if (_poStatus != value)
            {
                _poStatus = value;
                OnPropertyChanged(nameof(POStatus)); // POStatus 값 변경 시 알림
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
XAML (동일)
XAML 파일은 변경 없이 이전과 동일하게 사용합니다.

핵심 변경 사항
foreach 내에서 POStatus 속성만 이벤트에 연결: 각 Item의 POStatus 속성 변경에만 반응하도록 변경하여, 불필요한 전체 속성 변경 감지는 제거했습니다.
간결한 필터링 로직: POStatus 속성이 변경될 때마다 필터링이 적용됩니다.
이제 POStatus 속성 변경 시에만 필터링이 적용되며, 추가적인 리소스 낭비 없이 효율적으로 동작할 것입니다