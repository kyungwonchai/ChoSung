스에 대해 일괄 업데이트를 수행하기 위해서는 pymssql 라이브러리를 사용할 수 있습니다. 아래의 예시 코드는 딕셔너리 D1의 내용을 사용하여 T_메인확정 테이블의 레코드를 업데이트하는 방법을 보여줍니다.

먼저, pymssql 패키지가 설치되어 있어야 하며, 데이터베이스 연결에 필요한 서버 주소, 사용자 이름, 비밀번호, 데이터베이스 이름을 알아야 합니다.

아래 코드는 D1 딕셔너리의 키와 값을 이용하여 SQL 업데이트 쿼리를 실행합니다.

python

import pymssql

# 딕셔너리 D1 정의 (키: NRkey 값, 값: 설계변경단계 값)
D1 = {
    'NRkey1': 'DesignChangeValue1',
    'NRkey2': 'DesignChangeValue2',
    # ... 나머지 키와 값 ...
}

# 데이터베이스 연결 설정
server = '서버주소'
user = '유저명'
password = '비밀번호'
database = '데이터베이스명'

# 데이터베이스에 연결
conn = pymssql.connect(server, user, password, database)
cursor = conn.cursor()

# 딕셔너리의 각 항목에 대한 업데이트 쿼리 실행
for key, value in D1.items():
    # SQL 업데이트 쿼리 문자열을 만듭니다.
    update_query = f"UPDATE T_메인확정 SET 설계변경단계='{value}' WHERE NRkey='{key}'"
    
    # 쿼리 실행
    cursor.execute(update_query)

# 변경사항을 데이터베이스에 커밋
conn.commit()

# 연결 종료
cursor.close()
conn.close()

주의사항:

    실제 환경에서는 데이터베이스 연결 정보(서버 주소, 사용자 이름, 비밀번호, 데이터베이스 이름)를 보안상의 이유로 코드에 직접 작성하지 않는 것이 좋습니다. 환경 변수나 별도의 보안 모듈을 사용하는 것을 고려하세요.
    데이터베이스 작업을 할 때는 항상 예외 처리를 고려해야 합니다. 이 예제에서는 간결함을 위해 생략되었습니다.
    MSSQL 서버에 트랜잭션이 지원되면, 각각의 업데이트가 아닌, 모든 업데이트를 한 트랜잭션으로 묶어서 실행하는 것이 안전합니다. 여기서는 각각의 업데이트를 커밋하는 방식으로 코드를 작성했습니다.
    입력 값에 대한 검증 및 적절한 예외 처리를 추가하는 것이 중요합니다. SQL 인젝션과 같은 보안 위협을 방지하기 위해서, 가능한 SQL 파라미터를 사용하는 방법을 고려해야 합니