중에서 선택하여 폴더 분석을 시작할 수 있도록 코드를 구성할 수 있습니다. 사용 가능한 드라이브들을 동적으로 식별하고, 사용자가 입력한 드라이브를 기반으로 폴더 분석을 시작하는 로직을 추가하겠습니다. 다음은 사용 가능한 드라이브를 식별하고, 분석을 시작하는 간단한 방법을 보여줍니다.

MainWindow.xaml 변경
xml
Copy code
<ComboBox x:Name="driveSelector" Grid.Row="1" Margin="10" SelectionChanged="DriveSelector_SelectionChanged"/>
<Button Grid.Row="2" Content="Start Analysis" Click="Button_Click"/>
<ListBox x:Name="listBox1" Grid.Row="3" Margin="10" />
<ListBox x:Name="listBox2" Grid.Row="4" Margin="10" />
MainWindow.xaml.cs 변경
이제 코드에서 사용 가능한 드라이브를 검색하고 ComboBox에 표시하며, 선택된 드라이브를 사용하여 분석을 시작하는 로직을 추가합니다.

csharp
Copy code
using System;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        LoadAvailableDrives();
    }

    private void LoadAvailableDrives()
    {
        // 사용 가능한 모든 드라이브를 불러옵니다.
        foreach (var drive in DriveInfo.GetDrives())
        {
            if (drive.IsReady)
            {
                driveSelector.Items.Add(drive.Name);
            }
        }
    }

    private void DriveSelector_SelectionChanged(object sender, SelectionChangedEventArgs e)
    {
        // 드라이브 선택이 변경되면 리스트 박스를 초기화합니다.
        listBox1.Items.Clear();
        listBox2.Items.Clear();
    }

    private void Button_Click(object sender, RoutedEventArgs e)
    {
        string selectedDrive = driveSelector.SelectedItem as string;
        if (!string.IsNullOrEmpty(selectedDrive))
        {
            AnalyzeFolders(selectedDrive, true);
        }
        else
        {
            MessageBox.Show("Please select a drive to start the analysis.");
        }
    }

    // AnalyzeFolders와 다른 메서드들은 이전에 제공한 코드를 사용합니다.
}
이 코드는 프로그램 시작 시 사용 가능한 드라이브들을 로드하고, 사용자가 드라이브를 선택하면 해당 드라이브의 폴더 구조를 분석합니다. 만약 선택된 드라이브가 없으면 경고 메시지를 표시하고, 선택된 드라이브의 폴더를 분석합니다. 이렇게 하