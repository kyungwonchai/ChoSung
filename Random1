DevExpress의 스킨 시스템을 수정하거나 CustomDraw 이벤트를 활용해야 합니다. SkinableForm은 DevExpress 스킨의 영향을 받기 때문에 기본 스킨을 커스터마이징하거나 코드로 타이틀바 색상을 설정할 수 있습니다.

1. SkinableForm의 타이틀바 색상 변경 (Custom Draw 사용)
SkinableForm은 기본적으로 타이틀바를 커스터마이즈할 수 있는 이벤트를 제공합니다. 이를 활용해 색상을 설정할 수 있습니다.

코드 예제:
csharp
코드 복사
using DevExpress.Skins;
using DevExpress.XtraEditors;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    public MySkinableForm()
    {
        InitializeComponent();

        // 폼의 Paint 이벤트를 사용해 타이틀바 색상 변경
        this.Paint += MySkinableForm_Paint;
    }

    private void MySkinableForm_Paint(object sender, PaintEventArgs e)
    {
        // 타이틀바 영역 계산
        var titleBarHeight = 30; // 기본 타이틀바 높이
        var titleRect = new Rectangle(0, 0, this.Width, titleBarHeight);

        // 타이틀바 배경색 변경
        using (var brush = new SolidBrush(Color.SkyBlue)) // 원하는 색상
        {
            e.Graphics.FillRectangle(brush, titleRect);
        }

        // 타이틀 텍스트 추가
        string titleText = this.Text; // 폼의 제목
        var font = new Font("Arial", 12, FontStyle.Bold);
        var textColor = Brushes.White;

        var textSize = e.Graphics.MeasureString(titleText, font);
        var textPoint = new PointF((titleRect.Width - textSize.Width) / 2, (titleRect.Height - textSize.Height) / 2);

        e.Graphics.DrawString(titleText, font, textColor, textPoint);
    }
}
2. DevExpress Skin을 통한 타이틀바 색상 변경
SkinableForm은 DevExpress의 스킨 설정을 따르므로 스킨의 타이틀바 색상을 변경할 수도 있습니다.

스킨 커스터마이징:
DevExpress Skin Editor 실행:

DevExpress 설치 폴더에서 Skin Editor를 실행합니다.
스킨 요소 중 FormTitle 또는 Header 관련 색상을 수정합니다.
스킨 적용 코드:

csharp
코드 복사
DevExpress.LookAndFeel.UserLookAndFeel.Default.SetSkinStyle("Office 2019 Colorful"); // 원하는 스킨 스타일 적용
스킨 내보내기 후 프로젝트에 추가:

Skin Editor로 수정한 스킨을 .dll로 내보낸 뒤 프로젝트에 추가합니다.
3. SkinManager를 활용한 타이틀바 색상 수정
DevExpress의 SkinManager를 사용해 런타임에서 스킨 요소를 변경할 수 있습니다.

코드 예제:
csharp
코드 복사
using DevExpress.Skins;
using System.Drawing;

public partial class MySkinableForm : DevExpress.XtraEditors.XtraForm
{
    public MySkinableForm()
    {
        InitializeComponent();

        // 스킨 색상 수정
        var skin = SkinManager.Default[SkinProductId.Form];
        if (skin != null)
        {
            var titleElement = skin["FormTitle"]; // 타이틀바 요소
            if (titleElement != null)
            {
                titleElement.BackColor = Color.SkyBlue; // 타이틀바 배경색
                titleElement.ForeColor = Color.White;   // 텍스트 색상
            }
        }
    }
}
4. 폼의 LookAndFeel 설정
SkinableForm은 LookAndFeel을 활용하여 색상과 스킨을 조절할 수 있습니다.

코드 예제:
csharp
코드 복사
using DevExpress.LookAndFeel;

public partial class MySkinableForm : DevExpress.XtraEditors.XtraForm
{
    public MySkinableForm()
    {
        InitializeComponent();

        // LookAndFeel 설정
        this.LookAndFeel.Style = LookAndFeelStyle.Flat;
        this.LookAndFeel.UseDefaultLookAndFeel = false;
        this.LookAndFeel.SkinName = "Office 2019 Colorful"; // 원하는 스킨
    }
}
5. 완벽한 사용자 정의 타이틀바
DevExpress 기본 타이틀바를 사용하지 않고, 타이틀바를 완전히 커스터마이즈하려면 폼의 기본 속성을 비활성화하고, 직접 그리는 방식을 선택해야 합니다.

코드 예제 (완전 커스터마이징):
csharp
코드 복사
using System.Drawing;
using System.Windows.Forms;

public partial class MyCustomTitleBarForm : Form
{
    public MyCustomTitleBarForm()
    {
        InitializeComponent();

        // 기본 타이틀바 제거
        this.FormBorderStyle = FormBorderStyle.None;

        // 사용자 정의 크기 조정
        this.Padding = new Padding(0, 30, 0, 0); // 타이틀바 높이
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 영역
        var titleRect = new Rectangle(0, 0, this.Width, 30);

        // 타이틀바 색상
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, titleRect);
        }

        // 타이틀 텍스트
        string titleText = this.Text;
        var font = new Font("Arial", 12, FontStyle.Bold);
        var textColor = Brushes.White;

        var textSize = e.Graphics.MeasureString(titleText, font);
        var textPoint = new PointF((titleRect.Width - textSize.Width) / 2, (titleRect.Height - textSize.Height) / 2);

        e.Graphics.DrawString(titleText, font, textColor, textPoint);
    }
}
요약
간단한 변경: SkinManager 또는 LookAndFeel을 사용해 타이틀바 색상 수정.
완전한 커스터마이징: Custom Draw 또는 타이틀바를 직접 그리도록 구현.
고급 사용자: DevExpress Skin Editor를 사용해 타이틀바 색상 수정.
원하는 수준의 커스터마이징에 따라 위 방법을 선택하세요!






나의 말:
우상단 최소최대닫기 버튼기능되게해주고 더블클릭하면 최대화등 원래기능다윶ㄱ
ChatGPT의 말:
ChatGPT
DevExpress의 SkinableForm에서 기본적인 최소화, 최대화, 닫기 버튼 및 더블 클릭으로 최대화/복원 기능을 유지하면서 커스터마이징된 타이틀바를 구현하려면, 기본 폼 동작을 유지하고, 사용자 정의 그리기를 추가해야 합니다. 이를 위해 기본적인 폼 이벤트와 WindowState 처리를 활용하면 됩니다.

아래는 타이틀바를 커스터마이징하면서도 모든 기본 동작을 유지하는 코드 예제입니다.

1. 사용자 정의 타이틀바 및 버튼 기능 유지
구현 코드:
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private Rectangle closeButtonRect;
    private Rectangle minimizeButtonRect;
    private Rectangle maximizeButtonRect;

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 사용자 정의 타이틀바 높이
        this.DoubleBuffered = true; // 깜빡임 방지
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        var titleBarRect = new Rectangle(0, 0, this.Width, 30);
        using (var titleBarBrush = new SolidBrush(Color.SkyBlue)) // 타이틀바 색상
        {
            e.Graphics.FillRectangle(titleBarBrush, titleBarRect);
        }

        // 타이틀 텍스트
        string title = this.Text;
        using (var font = new Font("Arial", 10, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(title, font, textBrush, new PointF(10, 7));
        }

        // 버튼 영역
        int buttonSize = 20;
        closeButtonRect = new Rectangle(this.Width - buttonSize - 10, 5, buttonSize, buttonSize);
        maximizeButtonRect = new Rectangle(this.Width - (buttonSize * 2) - 15, 5, buttonSize, buttonSize);
        minimizeButtonRect = new Rectangle(this.Width - (buttonSize * 3) - 20, 5, buttonSize, buttonSize);

        // 최소화 버튼
        e.Graphics.DrawString("-", this.Font, Brushes.White, minimizeButtonRect, new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });

        // 최대화/복원 버튼
        e.Graphics.DrawString(this.WindowState == FormWindowState.Maximized ? "🗗" : "🗖", this.Font, Brushes.White, maximizeButtonRect, new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });

        // 닫기 버튼
        e.Graphics.DrawString("X", this.Font, Brushes.White, closeButtonRect, new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });
    }

    protected override void OnMouseClick(MouseEventArgs e)
    {
        base.OnMouseClick(e);

        // 닫기 버튼 클릭 처리
        if (closeButtonRect.Contains(e.Location))
        {
            this.Close();
        }
        // 최대화/복원 버튼 클릭 처리
        else if (maximizeButtonRect.Contains(e.Location))
        {
            this.WindowState = this.WindowState == FormWindowState.Maximized ? FormWindowState.Normal : FormWindowState.Maximized;
        }
        // 최소화 버튼 클릭 처리
        else if (minimizeButtonRect.Contains(e.Location))
        {
            this.WindowState = FormWindowState.Minimized;
        }
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
        base.OnMouseDown(e);

        // 타이틀바 드래그로 폼 이동
        if (e.Button == MouseButtons.Left && e.Y <= 30)
        {
            this.Capture = false;
            var message = Message.Create(this.Handle, 0xA1, new IntPtr(2), IntPtr.Zero); // WM_NCLBUTTONDOWN, HTCAPTION
            this.WndProc(ref message);
        }
    }

    protected override void OnDoubleClick(EventArgs e)
    {
        base.OnDoubleClick(e);

        // 타이틀바 더블 클릭으로 최대화/복원
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
        }
    }
}
2. 기능 설명
최소화, 최대화, 닫기 버튼:
OnMouseClick에서 버튼 영역(Rectangle)을 클릭했는지 확인하고, 각 버튼의 동작을 처리합니다.
드래그로 폼 이동:
OnMouseDown에서 타이틀바 영역을 클릭한 경우 WM_NCLBUTTONDOWN 메시지를 사용해 폼을 이동시킵니다.
더블 클릭으로 최대화/복원:
OnDoubleClick 이벤트를 재정의해 타이틀바를 더블 클릭했을 때 최대화 또는 복원 동작을 수행합니다.
타이틀바 배경 및 텍스트:
OnPaint 이벤트에서 타이틀바를 사용자 정의로 그립니다.
닫기, 최소화, 최대화 버튼은 직접 그립니다.
3. 추가 고려사항
다른 테마와 조합:
DevExpress 테마(UserLookAndFeel.Default.SetSkinStyle)와 함께 사용할 경우, 기본 테마 스타일은 비활성화됩니다.
완전 사용자 정의로 관리할 수 있습니다.
고해상도 DPI 지원:
폰트 크기 및 버튼 크기를 DpiAwareness에 따라 조정해야 할 수 있습니다.
4. 결과
이 코드를 사용하면:

타이틀바를 원하는 색상으로 커스터마이즈할 수 있습니다.
최소화, 최대화, 닫기 버튼의 기본 기능이 유지됩니다.
타이틀바 더블 클릭, 드래그 이동 등 기본 폼 동작도 지원됩니다.











ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.