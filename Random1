using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class RackSystemManager : MonoBehaviour
{
    public Transform rackContainer;
    public Material defaultLampMaterial;
    public Material litLampMaterial;
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        // ★★★ 이제부터 바코드가 아닌, 시스템의 '실제 주소(키)'를 출력합니다 ★★★
        StringBuilder validKeys = new StringBuilder("--- 복사해서 사용 가능한 전체 유효 주소 목록 ---\n");
        int rackCounterA = 1;
        int rackCounterB = 1;

        foreach (Transform rackParent in rackContainer)
        {
            string standardizedRackID;
            if (rackParent.name.StartsWith("A"))
            {
                standardizedRackID = $"A_{rackCounterA:02d}";
                rackCounterA++;
            }
            else if (rackParent.name.StartsWith("B"))
            {
                standardizedRackID = $"B_{rackCounterB:02d}";
                rackCounterB++;
            }
            else
            {
                continue;
            }

            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name;
                string globalKey = $"{standardizedRackID}_{localName}";
                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                    {
                        lampRenderers.Add(globalKey, rend);
                        if (defaultLampMaterial != null) rend.material = defaultLampMaterial;
                    }
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                    {
                        maskObjects.Add(globalKey, rend.gameObject);
                        validKeys.AppendLine(globalKey); // 마스크의 실제 주소를 목록에 추가
                    }
                }
            }
        }
        
        Debug.Log(validKeys.ToString()); // 전체 주소 목록을 콘솔에 출력
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    // ★★★ 이제 바코드 변환 없이, 입력된 값을 '실제 주소'로 직접 사용합니다 ★★★
    public void ProcessInput(string directKey)
    {
        ResetPreviousSlot();
        
        if (string.IsNullOrEmpty(directKey)) return;

        // 입력된 키가 마스크 주소라고 가정하고, 램프 키를 유추합니다.
        // 예: "A_01_Mask_C05" -> "A_01_Lamp_C05"
        string maskKey = directKey;
        string lampKey = maskKey.Replace("_Mask_", "_Lamp_");
        
        Debug.Log($"찾는 램프 주소: {lampKey}");
        Debug.Log($"찾는 마스크 주소: {maskKey}");

        if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
        {
            if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
        }
        else { Debug.LogWarning($"경고: {lampKey} 주소의 램프를 찾지 못했습니다."); }

        if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
        else { Debug.LogWarning($"경고: {maskKey} 주소의 마스크를 찾지 못했습니다."); }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;
        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 
        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }
        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;
        if (rb != null) rb.isKinematic = false;
    }
    
    // UI 이벤트와 연결될 함수
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessInput(text.Trim().ToUpper()); // 입력값의 앞뒤 공백을 제거하고 전달
        }
    }
}