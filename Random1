ForceEjectTimming처럼 단순 get; set;으로 작성된 속성이 변경될 때 WPF의 UI가 즉시 갱신되도록 하려면, 해당 클래스에 INotifyPropertyChanged 인터페이스를 구현해야 합니다. 이 과정을 통해 변경 사항을 UI에 통보할 수 있습니다.

해결 방법
1. INotifyPropertyChanged 구현
클래스에 INotifyPropertyChanged 인터페이스를 추가합니다.

변경 전 코드
csharp
코드 복사
public class YourModel
{
    public int ForceEjectTimming { get; set; }
}
변경 후 코드
csharp
코드 복사
using System.ComponentModel;

public class YourModel : INotifyPropertyChanged
{
    private int _forceEjectTimming;

    public int ForceEjectTimming
    {
        get => _forceEjectTimming;
        set
        {
            if (_forceEjectTimming != value)
            {
                _forceEjectTimming = value;
                OnPropertyChanged(nameof(ForceEjectTimming)); // UI 갱신 통보
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
2. ObservableCollection에 바인딩
클래스가 컬렉션으로 사용된다면, **ObservableCollection<T>**을 활용해야 UI에서 컬렉션의 변경 사항(추가/삭제)이 즉시 반영됩니다.

예제 ViewModel
csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel
{
    public ObservableCollection<YourModel> Items { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<YourModel>
        {
            new YourModel { ForceEjectTimming = 10 },
            new YourModel { ForceEjectTimming = 20 }
        };
    }
}
3. XAML 바인딩
DataGrid에 Items를 바인딩합니다.

xml
코드 복사
<DataGrid ItemsSource="{Binding Items}" AutoGenerateColumns="False">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Force Eject Timming" Binding="{Binding ForceEjectTimming}" />
    </DataGrid.Columns>
</DataGrid>
4. DataContext 설정
MainViewModel을 DataContext로 설정합니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();
    }
}
핵심 포인트
INotifyPropertyChanged 구현:

단순 get; set; 속성에 변화를 알리는 기능을 추가하려면 PropertyChanged 이벤트를 호출해야 합니다.
ObservableCollection:

컬렉션의 변경(추가/삭제)이 즉시 반영되도록 ObservableCollection 사용.
UI 바인딩 확인:

XAML에서 Binding이 올바르게 설정되었는지 확인.
최종 실행 결과