using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Input;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public ViewModel ViewModel { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            ViewModel = new ViewModel();
            DataContext = ViewModel;
        }
    }

    public class ViewModel
    {
        public ObservableCollection<ButtonModel> Buttons { get; set; }

        public ViewModel()
        {
            Buttons = GetButtonsFromDatabase();
        }

        private ObservableCollection<ButtonModel> GetButtonsFromDatabase()
        {
            ObservableCollection<ButtonModel> buttons = new ObservableCollection<ButtonModel>();

            string connectionString = "your_connection_string_here";
            string query = @"
                SELECT TOP 5 N_date, COUNT(*) AS RecordCount
                FROM YourTableName
                GROUP BY N_date
                ORDER BY COUNT(*) DESC;
            ";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                connection.Open();

                SqlDataReader reader = command.ExecuteReader();
                while (reader.Read())
                {
                    string buttonText = reader["N_date"].ToString();  // Adjust this line to match the desired button text.
                    buttons.Add(new ButtonModel { Content = buttonText, Command = new RelayCommand(OnButtonClicked) });
                }
            }

            return buttons;
        }

        private void OnButtonClicked(object obj)
        {
            var buttonContent = obj as string;
            if (buttonContent != null)
            {
                // 여기에 버튼 클릭에 대한 로직을 추가합니다.
                Console.WriteLine($"{buttonContent} 클릭됨");
            }
        }
    }

    public class ButtonModel
    {
        public string Content { get; set; }
        public ICommand Command { get; set; }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action<object> execute;
        private readonly Func<object, bool> canExecute;

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
        {
            this.execute = execute;
            this.canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return this.canExecute == null || this.canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            this.execute(parameter);
        }
    }
}
