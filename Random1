겠습니다. Nginx를 사용하지 않으시고 app.py를 직접 서비스로 실행 중이시군요. 그리고 MAX_CONTENT_LENGTH 설정에 오타가 없다고 하시니, 상황이 조금 더 복잡할 수 있겠습니다. ㅠㅠ

만약 Flask의 내장 개발 서버(Werkzeug) 또는 Gunicorn/uWSGI 같은 WSGI 서버를 직접 사용하고 계시다면, Flask의 MAX_CONTENT_LENGTH 설정이 주로 이 제한을 담당해야 합니다. 500KB 파일이 50MB 제한에 걸린다는 것은 일반적이지 않습니다.

몇 가지 가능성을 더 좁혀보기 위해 다음 사항들을 확인해 볼 필요가 있습니다:

설정 코드 재확인 (정말 중요합니다):

정말 죄송하지만, 문제를 정확히 파악하기 위해 app.py에서 app.config['MAX_CONTENT_LENGTH']를 설정하는 부분의 코드, 그리고 만약 별도의 Config 클래스나 파일을 사용하신다면 그 부분의 코드를 복사해서 보여주시겠어요? 아주 작은 부분에서 예상치 못한 문제가 있을 수 있습니다. (예를 들어, 설정이 적용되는 시점이나 다른 설정에 의해 덮어쓰이는 경우 등)
서비스 실행 방식 상세 확인:

"app.py를 서비스로 실행한다"는 것이 어떤 방식인지 조금 더 자세히 알 수 있을까요?
예를 들어, Linux 환경에서 systemd 서비스 파일을 통해 python app.py를 실행하시나요?
아니면 Gunicorn, uWSGI 같은 WSGI 서버를 사용하여 app.py 내의 Flask 객체를 실행하는 명령어가 서비스 스크립트에 포함되어 있나요? (예: gunicorn -w 4 -b 0.0.0.0:5000 app:app)
만약 Gunicorn이나 uWSGI를 사용하신다면, 해당 서버 자체의 설정에도 요청 크기 제한과 관련된 옵션이 있을 수 있습니다. (uWSGI의 경우 limit-post 등)
Flask가 실제로 인식하는 설정 값 확인 (테스트 코드 추가):

app.py에 다음과 같은 간단한 테스트용 라우트를 추가해서, 실행 시점에 Flask가 MAX_CONTENT_LENGTH를 얼마로 인식하고 있는지 확인해 볼 수 있습니다.
Python

# app.py 파일의 다른 라우트들 근처에 추가
@app.route('/debug_config_check')
def debug_config_check():
    max_size = app.config.get('MAX_CONTENT_LENGTH')
    if max_size is None:
        return "MAX_CONTENT_LENGTH is not set in app.config."

    is_50mb = (max_size == 50 * 1024 * 1024)
    return f"MAX_CONTENT_LENGTH in app.config: {max_size} bytes. Is this 50MB? {is_50mb}"
위 코드를 추가하고 서비스를 재시작한 후, 웹 브라우저에서 http://서버주소/debug_config_check 로 접속했을 때 어떤 메시지가 나오는지 알려주세요. "52428800 bytes. Is this 50MB? True" 와 같이 나와야 합니다.
외부 요인 가능성:
