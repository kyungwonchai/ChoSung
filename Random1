이전 대화에서 제공한 내용을 기반으로 코드를 수정해보겠습니다. 이전에 제공한 코드에서 앱의 버전이 낮을 때만 업데이트를 진행하도록 변경해 드리겠습니다.

수정된 Kotlin 코드
1. 서버에서 최신 버전 정보를 가져오는 함수
이 함수는 서버에서 최신 버전 정보를 받아옵니다. 이 부분은 이전 코드와 동일합니다.

kotlin
코드 복사
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject

suspend fun getLatestVersionFromServer(): String? {
    val client = OkHttpClient()
    val request = Request.Builder()
        .url("http://yourserver.com/api/version")  // 서버 URL을 적절히 수정하세요.
        .build()

    return try {
        val response = client.newCall(request).execute()
        if (response.isSuccessful) {
            val jsonResponse = response.body?.string()
            val jsonObject = JSONObject(jsonResponse)
            jsonObject.getString("version")  // 서버에서 "version" 키로 버전 정보가 온다고 가정
        } else {
            null
        }
    } catch (e: Exception) {
        e.printStackTrace()
        null
    }
}
2. 앱의 버전이 낮을 때만 업데이트 수행
이제 앱의 현재 버전과 서버에서 가져온 최신 버전을 비교하여, 현재 버전이 낮은 경우에만 업데이트를 수행하도록 코드를 수정하겠습니다.

kotlin
코드 복사
import android.content.pm.PackageInfo
import android.content.pm.PackageManager
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 업데이트 체크를 비동기로 수행
        CoroutineScope(Dispatchers.IO).launch {
            checkForUpdates()
        }
    }

    private suspend fun checkForUpdates() {
        try {
            // 현재 앱의 버전 정보를 가져옵니다.
            val packageManager: PackageManager = this.packageManager
            val packageInfo: PackageInfo = packageManager.getPackageInfo(this.packageName, 0)
            val currentVersion = packageInfo.versionName

            // 서버에서 최신 버전 정보를 가져옵니다.
            val latestVersion = getLatestVersionFromServer()

            // 버전 정보가 올바르게 받아졌는지 확인합니다.
            if (latestVersion != null) {
                Log.d("AppVersion", "Current Version: $currentVersion, Latest Version: $latestVersion")

                // 최신 버전과 현재 버전을 비교하여 업데이트가 필요한지 확인합니다.
                if (isUpdateRequired(currentVersion, latestVersion)) {
                    // 업데이트 로직을 추가합니다.
                    Log.d("AppVersion", "Update is required. Prompting user to update.")
                    // 여기에 업데이트를 실행하는 코드를 추가하십시오.
                } else {
                    Log.d("AppVersion", "App is up to date.")
                }
            } else {
                Log.e("AppVersion", "Failed to fetch the latest version from the server.")
            }
        } catch (e: PackageManager.NameNotFoundException) {
            e.printStackTrace()
            Log.e("AppVersion", "Failed to get app version info")
        }
    }

    private fun isUpdateRequired(currentVersion: String, latestVersion: String): Boolean {
        // 버전을 숫자로 변환하여 비교하는 방법
        val currentVersionParts = currentVersion.split(".")
        val latestVersionParts = latestVersion.split(".")

        val length = maxOf(currentVersionParts.size, latestVersionParts.size)
        for (i in 0 until length) {
            val currentPart = currentVersionParts.getOrNull(i)?.toIntOrNull() ?: 0
            val latestPart = latestVersionParts.getOrNull(i)?.toIntOrNull() ?: 0

            if (currentPart < latestPart) {
                return true
            } else if (currentPart > latestPart) {
                return false
            }
        }
        return false
    }
}
주요 변경 사항
isUpdateRequired() 함수:

버전 문자열을 분리하여 각 부분을 정수로 변환하고, 이를 비교하여 업데이트가 필요한지 확인합니다.
예를 들어, 버전 "1.2.0"과 "1.2.1"을 비교하면, "1.2.1"이 더 최신임을 감지할 수 있습니다.
업데이트 수행 조건:

앱의 현재 버전이 서버에서 제공하는 최신 버전보다 낮을 때만 업데이트를 수행하도록 합니다.
이 코드를 적용하면, 앱이 실행될 때마다 현재 버전과 서버의 최신 버전을 비교하여, 필요한 경우에만 업데이트를 수행하게 됩니다. 추가적인 도움이 필요하시거나 다른 질문이 있으시면 말씀해 주