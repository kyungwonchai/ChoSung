일을 관리하는 예제 코드를 간단하게 작성해보겠습니다.

XAML:

xaml

<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid">
    <Window.Resources>
        <Style x:Key="CellStyleSelector" TargetType="dxg:CellContentPresenter">
            <Style.Triggers>
                <DataTrigger Binding="{Binding RowData.Row.IsLocked}" Value="True">
                    <Setter Property="Background" Value="Gray"/>
                    <Setter Property="Foreground" Value="White"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>
    <Grid>
        <dxg:GridControl x:Name="grid">
            <dxg:GridControl.View>
                <dxg:TableView CellStyle="{StaticResource CellStyleSelector}"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>

C# 코드:

    CellInfo 클래스와 ObservableCollection

csharp

public class CellInfo : INotifyPropertyChanged
{
    public int Row { get; set; }
    public int Column { get; set; }

    private bool isLocked;
    public bool IsLocked
    {
        get { return isLocked; }
        set
        {
            if (isLocked != value)
            {
                isLocked = value;
                OnPropertyChanged("IsLocked");
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public ObservableCollection<CellInfo> cellInfos = new ObservableCollection<CellInfo>();

    셀의 잠금 상태를 변경하는 메서드

csharp

private void LockAndColorCell(int row, int column)
{
    var cellInfo = cellInfos.FirstOrDefault(c => c.Row == row && c.Column == column);
    if (cellInfo != null)
    {
        cellInfo.IsLocked = true;
    }
    else
    {
        cellInfos.Add(new CellInfo { Row = row, Column = column, IsLocked = true });
    }
}

private void UnlockAndResetCell(int row, int column)
{
    var cellInfo = cellInfos.FirstOrDefault(c => c.Row == row && c.Column == column);
    if (cellInfo != null)
    {
        cellInfo.IsLocked = false;
    }
}

ObservableCollection과 INotifyPropertyChanged를 사용하면 IsLocked 상태가 변경될 때 자동으로 UI가 갱신됩니다. 따라서 별도의 UI 갱신 