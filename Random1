구사항 정리
탭 안에 최상단에 버튼 2개 추가 (t1, t2).

버튼은 스크롤을 내려도 고정되어 표시되도록 설정.

버튼 클릭에 따라 실행되는 프로시저 이름이 변경 (t1, t2).

t1 클릭 시 Get_min_bestdifferent_t1 실행.

t2 클릭 시 Get_min_bestdifferent_t2 실행.

데이터 조회 후 테이블로 표시.

✅ Streamlit 코드 (버튼 고정 및 프로시저 변경)
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data(proc_name):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(f"EXEC {proc_name}")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 함수 (전체 높이 사용)
def create_dataframe(rows):
    original_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "ACT2_1", "ACT2_2", "ACT2_3", "ACT2_4",
        "ACT2_5", "ACT2_6", "ACT2_7", "ACT2_8"
    ]

    new_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    df = pd.DataFrame(rows, columns=original_columns)
    df.columns = new_columns

    mc_columns = [f"MC{i}" for i in range(1, 9)]
    df[mc_columns] = df[mc_columns].astype(float).round(2)

    return df

# Streamlit 앱 구성
def main():
    st.set_page_config(page_title="MC1 ~ MC8 Data Table", layout="wide")
    st.title("MC1 ~ MC8 Data Table - Fullscreen Mode")

    # 초기 프로시저 이름 설정
    proc_name = st.session_state.get("proc_name", "Get_min_bestdifferent_t1")

    # CSS 스타일 추가 (버튼을 고정하기 위한 스타일 설정)
    st.markdown("""
        <style>
            .css-1oe6wy4 {
                max-width: 100%;
            }
            .css-18e3th9 {
                padding-top: 0rem;
                padding-bottom: 0rem;
            }
            .block-container {
                padding: 0;
                margin: 0;
                height: 100vh;
                width: 100%;
            }
            .fixed-buttons {
                position: sticky;
                top: 0;
                background-color: white;
                z-index: 100;
                padding: 10px;
                display: flex;
                gap: 10px;
            }
        </style>
    """, unsafe_allow_html=True)

    # 버튼 고정 레이아웃
    st.markdown('<div class="fixed-buttons">', unsafe_allow_html=True)
    col1, col2 = st.columns(2)

    with col1:
        if st.button("t1", key="t1"):
            st.session_state.proc_name = "Get_min_bestdifferent_t1"

    with col2:
        if st.button("t2", key="t2"):
            st.session_state.proc_name = "Get_min_bestdifferent_t2"

    st.markdown('</div>', unsafe_allow_html=True)

    # 선택된 프로시저 이름 가져오기
    proc_name = st.session_state.get("proc_name", "Get_min_bestdifferent_t1")
    rows = fetch_main_data(proc_name)
    
    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        df = create_dataframe(rows)

        tabs = st.tabs(["메인 테이블", "탭2", "탭3"])

        with tabs[0]:
            st.subheader(f"메인 테이블 - 조회 프로시저: {proc_name}")
            st.dataframe(df, use_container_width=True, height=3000)

        with tabs[1]:
            st.subheader("탭 2 내용")
            st.write("여기는 탭 2 입니다.")

        with tabs[2]:
            st.subheader("탭 3 내용")
            st.write("여기는 탭 3 입니다.")

if __name__ == "__main__":
    main()
✅ 코드 설명
고정 버튼 구현 (스크롤해도 항상 상단에 위치)

css
코드 복사
.fixed-buttons {
    position: sticky;
    top: 0;
    background-color: white;
    z-index: 100;
    padding: 10px;
    display: flex;
    gap: 10px;
}
position: sticky; 를 사용하여 스크롤해도 버튼이 상단에 고정됩니다.

z-index: 100; 를 사용하여 테이블보다 버튼이 항상 위에 표시됩니다.

버튼에 따른 프로시저 변경 (st.session_state 활용)

python
코드 복사
if st.button("t1", key="t1"):
    st.session_state.proc_name = "Get_min_bestdifferent_t1"
if st.button("t2", key="t2"):
    st.session_state.proc_name = "Get_min_bestdifferent_t2"
버튼을 클릭하면 st.session_state 에 저장된 프로시저 이름이 변경됩니다.

이후 데이터 조회 시 사용되는 프로시저가 변경됩니다.

조회된 데이터를 표시 (st.dataframe())

python
코드 복사
st.dataframe(df, use_container_width=True, height=3000)
데이터가 화면 전체로 표시되도록 설정.

height 값을 크게 설정하여 스크롤 없이 표시합니다.

📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
🔥 결과
버튼 t1 과 t2 가 화면의 최상단에 고정되어 표시됩니다.

버튼 클릭 시 다른 프로시저를 호출하여 데이터를 새로 조회합니다.

테이블은 최대 크기로 표시되며 스크롤 없이 표시됩니다.