수정해야 할 사항 및 이유:
1. 작업이 10개를 넘지 않도록 작업 추가 방지
현재 MaximumQueueSize가 10이지만, 30개까지 작업이 처리되는 문제를 해결해야 합니다.
큐에 작업이 10개를 넘으면 더 이상 작업을 추가하지 않도록 수정할 필요가 있습니다.
2. 작업이 순차적으로 실행되도록 보장
EnqueueTask 함수가 모든 작업을 순차적으로 실행하도록 수정해야 합니다. 지금 코드에서는 여러 작업이 동시에 실행되는 문제가 있을 수 있습니다.
3. 응답 시간이 5초를 초과하면 모든 작업 중지
응답 시간이 5초를 초과한 경우, 그 이후로 큐에 남아있는 모든 작업을 중지하고 더 이상 새로운 작업을 추가하지 못하게 해야 합니다.
4. 재시도 시 다른 작업 대기
재시도 중에는 다른 작업이 실행되지 않도록 하고, 3초 후 재시도에 실패할 경우 3번 규칙과 동일하게 모든 작업을 중지해야 합니다.
5. 재시도 횟수 표시 및 실패 시 에러 처리
재시도 횟수가 UI에 정확하게 표시되도록 수정해야 하며, 재시도 횟수가 3회를 초과하면 큐를 멈추고 에러를 Queue has been stopped over retry count로 표시하도록 해야 합니다.
6. 에러 목록이 20개를 초과하면 추가하지 않음
에러 목록이 20개를 초과하면 더 이상 에러를 추가하지 않도록 하며, 에러가 발생한 시간과 원인을 정확히 표시해야 합니다.
수정된 함수 설명:
1. AddAsyncTaskCommand 함수 수정:
작업이 큐에 추가될 때, 큐의 크기가 MaximumQueueSize를 초과하지 않도록 체크합니다.
csharp
코드 복사
public void AddAsyncTaskCommand(Func<Task<string>> asyncTask, string commandText, string sentCommand, Func<string, bool> responseValidator)
{
    if (_isQueueStopped || commandQueue.Count >= MaximumQueueSize)
    {
        ShowAlarm("Queue limit reached or stopped. No further commands can be added.");
        return;
    }
    EnqueueTask(asyncTask, commandText, sentCommand, responseValidator);
}
설명: commandQueue.Count >= MaximumQueueSize로 큐 크기를 초과한 경우 작업을 추가하지 않도록 막습니다.

2. EnqueueTask 함수 수정:
작업이 순차적으로 실행되도록 수정하고, 응답 시간 초과 시 큐에 있는 모든 작업을 중지합니다. 재시도할 때도 다른 작업이 실행되지 않도록 보장합니다.
csharp
코드 복사
private async void EnqueueTask(Func<Task<string>> taskFunc, string commandText, string sentCommand, Func<string, bool> responseValidator)
{
    var newCommand = new CommandItem 
    { 
        CommandText = commandText, 
        Status = "Pending", 
        MaxRetryLimit = RetryLimit, 
        RetryCount = 0 
    };

    App.Current.Dispatcher.Invoke(() =>
    {
        RemainingCommands.Add(newCommand); 
    });

    commandQueue.Enqueue(async () =>
    {
        newCommand.Status = "Processing";
        int retryCount = 0;
        Stopwatch stopwatch = new Stopwatch();

        _isProcessing = true;

        while (retryCount < RetryLimit)
        {
            try
            {
                stopwatch.Restart();
                string result = await taskFunc();
                stopwatch.Stop();

                int responseTime = (int)stopwatch.ElapsedMilliseconds;
                newCommand.ResponseTime = responseTime;
                newCommand.RetryCount = retryCount + 1; // 재시도 횟수 증가
                OnPropertyChanged(nameof(RemainingCommands));

                if (responseTime > ResponseTimeout)
                {
                    newCommand.Status = "Timeout"; 
                    ShowAlarm("Timeout occurred. All tasks stopped.");
                    StopQueueProcessing(newCommand);
                    return new CommandResult { Success = false, Message = "Response Timeout" };
                }

                if (responseValidator(result))
                {
                    newCommand.Status = "Completed";
                    newCommand.Result = 1;
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, newCommand.Output);
                    UpdateProgress();
                    _isProcessing = false;
                    return new CommandResult { Success = true, Message = result };
                }
                else
                {
                    retryCount++;
                    newCommand.Status = $"Retrying {retryCount}/{RetryLimit}";
                    ShowAlarm($"Retrying {retryCount}/{RetryLimit} due to incorrect response.");
                    
                    if (retryCount >= RetryLimit)
                    {
                        newCommand.Status = "Failed"; 
                        newCommand.Result = 0;
                        StopQueueProcessing(newCommand);
                        return new CommandResult { Success = false, Message = result };
                    }
                    await Task.Delay(RetryInterval);
                }
            }
            catch (Exception ex)
            {
                newCommand.Status = "Failed";
                newCommand.Result = 0;
                stopwatch.Stop();
                int responseTime = (int)stopwatch.ElapsedMilliseconds;

                newCommand.ResponseTime = responseTime;
                await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);
                StopQueueProcessing(newCommand);
                return new CommandResult { Success = false, Message = ex.Message };
            }
        }

        UpdateProgress();
        _isProcessing = false;
        return new CommandResult { Success = false };
    });

    if (!_isProcessing)
    {
        _isProcessing = true;
        await ProcessCommandQueue();
    }
    UpdateProgress();
}
수정 사항 설명:

RetryCount가 UI에 바로 표시되도록 설정했습니다.
응답 시간이 5초를 초과하면 큐에 있는 모든 작업을 중지하고, 큐에 더 이상 작업이 추가되지 않도록 StopQueueProcessing 함수를 호출합니다.
RetryCount를 +1씩 증가시켜 재시도 횟수가 정확하게 표시되도록 했습니다.
3. StopQueueProcessing 함수 수정:
에러가 20개를 초과하지 않도록 체크하며, 에러 발생 시간을 기록합니다.
csharp
코드 복사
private void StopQueueProcessing(CommandItem errorCommand)
{
    _isQueueStopped = true;

    App.Current.Dispatcher.Invoke(() =>
    {
        if (ErrorCommands.Count >= 20)
        {
            ShowAlarm("Error limit reached. No more errors will be logged.");
            return;
        }

        errorCommand.CommandTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
        ErrorCommands.Add(errorCommand);
    });

    ShowAlarm("Queue has been stopped due to a Timeout or failure.");
}
수정 사항 설명:

에러가 20개를 넘으면 더 이상 추가되지 않도록 설정하고, 발생한 에러의 시간을 기록하여 표시합니다.
4. ProcessCommandQueue 함수:
모든 작업을 순차적으로 실행하도록 보장합니다.
csharp
코드 복사
private async Task ProcessCommandQueue()
{
    while (commandQueue.Count > 0)
    {
        var command = commandQueue.Dequeue();
        await command();
        UpdateProgress();
    }

    _isProcessing = false;
}
수정 사항 설명:

commandQueue의 작업을 순차적으로 하나씩 처리하도록 보장합니다.
UI 변경사항 (프로그레스바)
xml
코드 복사
<StackPanel Grid.Column="1" VerticalAlignment="Stretch" Margin="10">
    <ProgressBar VerticalAlignment="Top" Height="300" Width="30" Orientation="Vertical" 
                 Value="{Binding CommandQueue.Progress}" Maximum="{Binding CommandQueue.MaximumQueueSize}"/>
    <!-- ProgressBar 옆에 남은 작업 수를 표시 -->
    <TextBlock Text="{Binding CommandQueue.Progress}" HorizontalAlignment="Center" Margin="5"/>
</StackPanel>
수정 사항 설명:

ProgressBar 옆에 남은 작업 수를 텍스트로 표시해줍니다.
결론:
이렇게 수정하면, 큐 크기를 초과한 작업을 추가하지 않으며, 재시도 횟수도 UI에 정확하게 표시되고 응답 시간이 초과되거나 재시도 실패 시 모