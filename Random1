가 있는 영역을 잘라내기: 워터마크를 적용한 후, 워터마크가 있는 좌상단 부분을 Bitmap.Clone 메서드를 사용하여 잘라냅니다.

잘라낸 이미지를 BitmapImage로 변환: 잘라낸 Bitmap을 BitmapImage로 변환합니다.

변환된 이미지를 Image 컨트롤에 할당: 변환된 BitmapImage를 Image 컨트롤의 Source로 설정합니다.

다음은 이러한 작업을 수행하는 코드 예시입니다:

C# 뒷단 코드:
csharp
Copy code
private void UpdateImageWithWatermarkAndCrop()
{
    string imagePath = "path/to/your/image.jpg"; // 원본 이미지 경로
    Bitmap bitmap = new Bitmap(imagePath);

    // 워터마크 추가 (코드 생략)

    // 워터마크가 있는 좌상단 부분을 잘라냄
    Rectangle cropRect = new Rectangle(0, 0, 100, 100); // 크기와 위치 조정 필요
    Bitmap croppedBitmap = bitmap.Clone(cropRect, bitmap.PixelFormat);

    // 잘라낸 이미지를 BitmapImage로 변환
    BitmapImage croppedImage = ConvertBitmapToBitmapImage(croppedBitmap);

    // 이미지 컨트롤에 할당
    img2.Source = croppedImage;
}

private BitmapImage ConvertBitmapToBitmapImage(Bitmap bitmap)
{
    using (MemoryStream memory = new MemoryStream())
    {
        bitmap.Save(memory, ImageFormat.Bmp);
        memory.Position = 0;
        BitmapImage bitmapImage = new BitmapImage();
        bitmapImage.BeginInit();
        bitmapImage.StreamSource = memory;
        bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
        bitmapImage.EndInit();
        bitmapImage.Freeze(); // WPF에서 사용하기 위해 필요
        return bitmapImage;
    }
}
위 코드에서 `Rectangle cropRect = new Rectangle(0, 0,

100, 100);부분은 잘라낼 영역의 위치와 크기를 정의합니다. 여기서(0, 0)은 이미지의 좌상단 모서리를 시작점으로 하며, 100, 100`은 잘라낼 영역의 너비와 높이를 의미합니다. 이 값들은 원하는 크기와 위