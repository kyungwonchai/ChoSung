, 알겠습니다! "GetString에서 스트링에서 인트로 변환할 수 없다"는 오류 메시지는 매우 중요한 단서입니다.

이것은 데이터베이스 테이블의 컬럼 타입과 C# 코드에서 데이터를 읽으려고 시도하는 메서드 간의 타입 불일치 때문에 발생하는 전형적인 오류입니다.

원인:

API 코드 (RepairInfoController.cs)의 다음 부분에서 reader.GetString() 메서드를 사용하여 데이터베이스 값을 읽으려고 하고 있습니다.

C#

repairInfo = new RepairInfo
{
    Model = reader.IsDBNull(reader.GetOrdinal("model")) ? null : reader.GetString(reader.GetOrdinal("model")),
    Point = reader.IsDBNull(reader.GetOrdinal("point")) ? null : reader.GetString(reader.GetOrdinal("point")), // 문제 발생 가능 지점 1
    Detail = reader.IsDBNull(reader.GetOrdinal("detail")) ? null : reader.GetString(reader.GetOrdinal("detail")) // 문제 발생 가능 지점 2
};
reader.GetString(index) 메서드는 데이터베이스의 해당 컬럼이 문자열 타입(예: VARCHAR, TEXT, CHAR 등)일 때 사용해야 합니다.

오류 메시지는 model, point, detail 세 컬럼 중 적어도 하나 이상이 MySQL 데이터베이스(smd.repair_instock 테이블)에서 숫자 타입(예: INT, BIGINT, DECIMAL, DOUBLE 등)으로 정의되어 있음을 시사합니다. GetString()은 숫자 타입 컬럼의 값을 직접 문자열로 가져올 수 없기 때문에 오류가 발생합니다.

해결 방법:

1. 데이터베이스 컬럼 타입 확인 (가장 먼저):

MySQL Workbench나 다른 DB 도구를 사용하거나, MySQL 콘솔에서 다음 명령어를 실행하여 smd.repair_instock 테이블의 model, point, detail 컬럼의 실제 데이터 타입을 확인하세요.

SQL

DESCRIBE smd.repair_instock;
어떤 컬럼이 숫자 타입(INT, DECIMAL 등)으로 되어 있는지 확인합니다. (아마도 point 컬럼일 가능성이 높습니다.)

2. 코드 수정 (타입에 맞게 읽고 변환):

확인된 실제 데이터베이스 타입에 맞게 C# 코드를 수정해야 합니다. 가장 간단한 방법은 값을 해당 타입 또는 일반적인 object 타입으로 읽은 다음, C#의 .ToString() 메서드를 사용하여 문자열로 변환하는 것입니다.

수정 예시 (RepairInfo 모델의 속성이 모두 string? 타입이라고 가정):

RepairInfoController.cs 파일의 데이터 읽는 부분을 아래와 같이 수정합니다.

C#

// ... 이전 코드 ...

using (var reader = await command.ExecuteReaderAsync())
{
    if (await reader.ReadAsync())
    {
        repairInfo = new RepairInfo
        {
            // GetValue(index).ToString() 사용: DB 타입을 object로 읽고 C#에서 문자열로 변환
            Model = reader.IsDBNull(reader.GetOrdinal("model"))
                        ? null
                        : reader.GetValue(reader.GetOrdinal("model")).ToString(), // .ToString() 추가

            Point = reader.IsDBNull(reader.GetOrdinal("point"))
                        ? null
                        : reader.GetValue(reader.GetOrdinal("point")).ToString(), // .ToString() 추가 (여기가 문제였을 가능성 높음)

            Detail = reader.IsDBNull(reader.GetOrdinal("detail"))
                        ? null
                        : reader.GetValue(reader.GetOrdinal("detail")).ToString() // .ToString() 추가
        };
    }
}

// ... 이후 코드 ...
수정 설명:

reader.GetString(index) 대신 reader.GetValue(index)를 사용했습니다. GetValue()는 해당 컬럼의 데이터를 C#의 기본 object 타입으로 가져옵니다.
가져온 object 값에 .ToString() 메서드를 호출하여 명시적으로 문자열로 변환합니다. 대부분의 C# 데이터 타입은 .ToString() 메서드를 가지고 있어 문자열 표현으로 변환할 수 있습니다.
IsDBNull() 체크는 여전히 필요합니다. DB 값이 NULL일 때 GetValue().ToString()을 호출하면 NullReferenceException이 발생할 수 있으므로, NULL 체크를 먼저 수행해야 합니다.
대안 (C# 모델 타입 변경):

만약 point 컬럼이 DB에서 INT 타입이고, WPF나 API에서 이 값을 숫자로 다루는 것이 더 자연스럽다면, RepairInfo 모델 클래스의 Point 속성 타입을 string? 대신 int?로 변경하고, 읽는 코드도 reader.GetInt32() 등으로 수정할 수 있습니다.

C#

// Models/RepairInfo.cs (예시)
public class RepairInfo
{
    public string? Model { get; set; }
    public int? Point { get; set; } // 타입을 int? 로 변경
    public string? Detail { get; set; }
}

// Controllers/RepairInfoController.cs (예시)
// ...
Point = reader.IsDBNull(reader.GetOrdinal("point"))
            ? (int?)null // null 가능한 int로 캐스팅
            : reader.GetInt32(reader.GetOrdinal("point")), // GetInt32 사용
// ...
요약:

DB 테이블(smd.repair_instock)의 model, point, detail 컬럼 타입을 확인하세요.