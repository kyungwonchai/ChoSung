구 사항에 맞춰서 MSSQL과 Oracle 데이터베이스 간의 데이터 동기화 및 중복 전송 방지 기능을 구현하겠습니다. 다음은 설명과 주석이 포함된 전체 코드입니다.

새로운 데이터 동기화 클래스:
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;

public class EsdCheckSync
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string targetConnectionString = "Data Source=TargetServer;Initial Catalog=TargetDB;User ID=YourUsername;Password=YourPassword";
    private string oracleConnectionString = "Data Source=OracleServer;User ID=YourUsername;Password=YourPassword";

    // 데이터 동기화를 시작하고 로그 액션을 인수로 받음
    public async Task StartDataSyncAsync(Action<string> logAction)
    {
        await SyncOracleDataAsync(logAction); // 초기 Oracle 데이터 동기화
        logAction("Initial Oracle Data Sync Completed.");

        _ = SyncDataFromOracleToMSSQLAsync(logAction); // 데이터 동기화 작업을 시작
    }

    // Oracle 데이터를 MSSQL로 동기화하는 함수
    private async Task SyncOracleDataAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting Oracle Data Sync...");

            DataTable oracleData = await GetOracleDataAsync(); // 오라클 데이터 가져오기
            DataTable targetData = await GetTargetDataAsync(); // 타겟 데이터 가져오기

            foreach (DataRow oracleRow in oracleData.Rows)
            {
                DataRow[] targetRows = targetData.Select($"USER_CARD_ID = '{oracleRow["USER_CARD_ID"]}'");

                if (targetRows.Length == 0)
                {
                    await InsertTargetRowAsync(oracleRow); // 타겟 테이블에 새로운 행 삽입
                    logAction($"Inserted new row for USER_CARD_ID: {oracleRow["USER_CARD_ID"]}");
                }
            }

            await Task.Delay(TimeSpan.FromMinutes(1)); // 1분 대기
        }
    }

    // 오라클 데이터 가져오는 함수
    private async Task<DataTable> GetOracleDataAsync()
    {
        using (OracleConnection conn = new OracleConnection(oracleConnectionString))
        {
            await conn.OpenAsync();
            string query = @"SELECT u.USER_CARD_ID, u.USER_NAME, u.work_group, e.USER_CARD_ID, e.esd_check_tf, e.update_time 
                             FROM ut_esc_user u 
                             JOIN ut_esd_check_status_list e ON u.user_card_id = e.user_card_id 
                             WHERE u.work_group = 'REPAIR' AND e.update_TIME >= SYSDATE - INTERVAL '1000' HOUR";
            OracleDataAdapter adapter = new OracleDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 타겟 데이터 가져오는 함수
    private async Task<DataTable> GetTargetDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT USER_CARD_ID FROM YourTargetTable"; // 타겟 테이블 이름으로 변경
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 타겟 테이블에 새로운 행 삽입하는 함수
    private async Task InsertTargetRowAsync(DataRow oracleRow)
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = @"INSERT INTO YourTargetTable (USER_CARD_ID, USER_NAME, work_group, esd_check_tf, update_time) 
                             VALUES (@USER_CARD_ID, @USER_NAME, @work_group, @esd_check_tf, @update_time)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", oracleRow["USER_CARD_ID"]);
            cmd.Parameters.AddWithValue("@USER_NAME", oracleRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@work_group", oracleRow["work_group"]);
            cmd.Parameters.AddWithValue("@esd_check_tf", oracleRow["esd_check_tf"]);
            cmd.Parameters.AddWithValue("@update_time", oracleRow["update_time"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    // MSSQL로 데이터를 동기화하는 함수
    private async Task SyncDataFromOracleToMSSQLAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting Data Sync from Oracle to MSSQL...");

            DataTable targetData = await GetTargetDataAsync(); // 타겟 데이터 가져오기

            foreach (DataRow targetRow in targetData.Rows)
            {
                string userCardId = targetRow["USER_CARD_ID"].ToString();
                DataTable sourceData = await GetSourceDataAsync(userCardId);

                if (sourceData.Rows.Count > 0)
                {
                    await InsertSourceDataAsync(sourceData.Rows[0]); // 소스 테이블에 새로운 행 삽입
                    logAction($"Inserted new row for USER_CARD_ID: {userCardId} in ESC_CHECK_HISTORY");
                }
            }

            await Task.Delay(TimeSpan.FromMinutes(1)); // 1분 대기
        }
    }

    // 소스 데이터 가져오는 함수
    private async Task<DataTable> GetSourceDataAsync(string userCardId)
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = @"SELECT USER_CARD_ID, USER_NAME, work_group, esd_check_tf, update_time 
                             FROM YourSourceTable 
                             WHERE USER_CARD_ID = @USER_CARD_ID"; // 소스 테이블 이름으로 변경
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", userCardId);
            SqlDataAdapter adapter = new SqlDataAdapter(cmd);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 소스 테이블에 새로운 행 삽입하는 함수
    private async Task InsertSourceDataAsync(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = @"INSERT INTO ESC_CHECK_HISTORY (USER_CARD_ID, USER_NAME, work_group, esd_check_tf, update_time) 
                             VALUES (@USER_CARD_ID, @USER_NAME, @work_group, @esd_check_tf, @update_time)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@USER_CARD_ID", sourceRow["USER_CARD_ID"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@work_group", sourceRow["work_group"]);
            cmd.Parameters.AddWithValue("@esd_check_tf", sourceRow["esd_check_tf"]);
            cmd.Parameters.AddWithValue("@update_time", sourceRow["update_time"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }
}
WPF XAML UI:
xaml
코드 복사
<Window x:Class="DataSyncApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Data Sync Application" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="2*" />
        </Grid.ColumnDefinitions>
        
        <ListBox x:Name="logListBox" Grid.Column="0" Margin="10" />
        
        <Grid Grid.Column="1" Margin="10">
            <DataGrid x:Name="dataGrid" AutoGenerateColumns="False" Margin="0,30,0,0" CellEditEnding="DataGrid_CellEditEnding">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="USER_NAME" Binding="{Binding USER_NAME}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="USER_CARD_ID" Binding="{Binding USER_CARD_ID}"/>
                    <DataGridTextColumn Header="E_NUM" Binding="{Binding E_NUM}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="PROCESS" Binding="{Binding PROCESS}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="GROUP_NAME" Binding="{Binding GROUP_NAME}" IsReadOnly="True"/>
                </DataGrid.Columns>
            </DataGrid>
            <Button Content="Load Data" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10" Click="LoadDataButton_Click"/>
        </Grid>
    </Grid>
</Window>
MainWindow.xaml.cs:
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace DataSyncApp
{
    public partial class MainWindow : Window
    {
        private EsdCheckSync esdCheckSync;

        public MainWindow()
        {
            InitializeComponent();
            esdCheckSync = new EsdCheckSync();
            Task.Run(() => esdCheckSync.StartDataSyncAsync(LogAction));
        }

        private async void LoadDataButton_Click(object sender, RoutedEventArgs e)
        {
            await LoadGridControlAsync();
        }

        private async Task LoadGridControlAsync()
        {
            DataTable targetData = await esdCheckSync.GetTargetDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                where string.IsNullOrEmpty(target.Field<string>("USER_CARD_ID"))
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = "Not Matched",
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            dataGrid.ItemsSource = unmatchedRows.ToList();

            foreach (var item in dataGrid.Items)
            {
                DataGridRow row = (DataGridRow)dataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null && ((dynamic)row.Item).USER_CARD_ID == "Not Matched")
                {
                    row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.Column.Header.ToString() == "USER_CARD_ID")
            {
                string userName = ((TextBox)e.EditingElement).Text;
                string userCardId = ((TextBox)e.EditingElement).Text;

                // Handle manual input for USER_CARD_ID
                // For example, you might update a local list or another table in the database.
            }
        }

        private void LogAction(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox.Items.Count >= 500)
                {
                    logListBox.Items.Clear();
                }
                logListBox.Items.Add(message);
            });
        }
    }
}
이제 EsdCheckSync 클래스는 오라클 데이터베이스에서 데이터를 가져와 타겟 테이블에 삽입하고, 이를 MSSQL 데이터베이스의 ESC_CHECK_HISTORY 테이블에 중복 없이 전송합니다. 작업은 1분마다 수행되며, 필요한 로그는 ListBox에 표시됩니다.






