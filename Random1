현재 체크박스 액션에 따라 DataGrid의 행이 표시되거나 숨겨지지만, DataGrid의 행 값이 추가되거나 삭제되어도 자동으로 필터링이 적용되도록 해야 한다면, ObservableCollection에 항목이 추가되거나 삭제될 때 자동으로 필터를 재적용하도록 설정해야 합니다.

이를 위해 ObservableCollection의 변경 알림을 감지하여 필터링을 다시 적용하도록 코드를 수정하겠습니다. 또한, CollectionChanged 이벤트를 통해 컬렉션의 변화에 따라 필터링이 자동으로 이루어지도록 해야 합니다.

수정된 ViewModel
Items 컬렉션 변경 감지: ObservableCollection의 CollectionChanged 이벤트를 통해 항목 추가, 삭제를 감지하여 필터를 재적용합니다.
항목 추가 및 삭제 시 필터링 재적용: 필터가 항상 최신 상태를 유지하도록 구현합니다.
1. ViewModel 수정
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

public class MainViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private bool _showHiddenRows;
    public bool ShowHiddenRows
    {
        get => _showHiddenRows;
        set
        {
            _showHiddenRows = value;
            OnPropertyChanged(nameof(ShowHiddenRows));
            FilterItems(); // 체크박스 상태 변경 시 필터링
        }
    }

    public ObservableCollection<Item> Items { get; set; }
    public ObservableCollection<Item> FilteredItems { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<Item>
        {
            new Item { POStatus = "처리중" },
            new Item { POStatus = "이미 처리됨" },
            new Item { POStatus = "대기중" },
            new Item { POStatus = "이미 처리됨" }
        };

        // 원본 컬렉션 변경 감지
        Items.CollectionChanged += OnItemsCollectionChanged;

        // 초기 필터링 적용
        FilteredItems = new ObservableCollection<Item>(Items);
    }

    // Items 컬렉션에 항목이 추가/삭제될 때 필터를 다시 적용
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        FilterItems();
    }

    // 필터링 로직
    private void FilterItems()
    {
        // 필터 적용 전에 Clear해서 기존 데이터를 비움
        FilteredItems.Clear();

        var filtered = ShowHiddenRows 
            ? Items // 체크박스가 선택된 경우 모든 항목을 표시
            : Items.Where(i => !i.POStatus.Contains("이미")); // "이미" 포함 항목 필터링

        // 필터링된 항목을 FilteredItems에 추가
        foreach (var item in filtered)
        {
            FilteredItems.Add(item);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

public class Item
{
    public string POStatus { get; set; }
}
2. XAML (동일)
XAML 파일은 수정할 필요가 없으며, 이전과 동일하게 사용할 수 있습니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    
    <Grid>
        <StackPanel>
            <!-- 체크박스: 숨겨진 행을 보여주기 -->
            <CheckBox Content="숨겨진 행 보기" 
                      IsChecked="{Binding ShowHiddenRows, Mode=TwoWay}"
                      Margin="10"/>
            
            <!-- DataGrid: POStatus 컬럼 표시 -->
            <DataGrid ItemsSource="{Binding FilteredItems}" AutoGenerateColumns="False" Height="200" Margin="10">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="POStatus" Binding="{Binding POStatus}" />
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Grid>
</Window>
3. 핵심 변경 사항
Items.CollectionChanged += OnItemsCollectionChanged; 코드를 통해 ObservableCollection의 변경을 감지합니다.
OnItemsCollectionChanged 메서드는 Items 컬렉션에 항목이 추가되거나 삭제될 때 필터링을 다시 적용하여 FilteredItems를 업데이트합니다.
FilterItems 메서드는 체크박스의 상태에 따라 필터링을 수행합니다. 항목이 추가되거나 삭제될 때에도 이 필터링 로직이 자동으로 호출되어 FilteredItems가 최신 상태를 유지합니다.
4. 동작 방식
체크박스 체크: 체크박스를 선택하면 "이미"라는 단어가 포함된 항목도 DataGrid에 표시됩니다.
체크박스 해제: 체크박스를 해제하면 "이미"라는 단어가 포함된 항목이 숨겨집니다.
항목 추가 및 삭제: Items 컬렉션에 항목을 추가하거나 삭제할 때마다 자동으로 필터링이 적용되어, 체크박스 상태에 맞게 필터링된 결과가 즉시 반영됩니다.
추가로 생각할 수 있는 개선점
데이터가 매우 많아질 경우 필터링의 성능이 문제가 될 수 있으므로, 데이터 양이 많을 때는 가상화 또는 비동기 처리를 고려할 수 있습니다.
UI에 데이터를 추가하는 시점에서 Items에 직접 데이터를 추가하면 필터가 자동으로 적용되므로 편리하게 사용할 수 있습니다.
이렇게 하면 항목이 추가되거나 삭제되더라도 DataGrid가 항상 최신 상태로 필터링된 데이터를 표시할 수 있습니다