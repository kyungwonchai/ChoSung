는 싱글톤 패턴은 기본적으로 하나의 인스턴스만 유지하기 때문에, 여러 COM 포트를 다루는 상황에서는 모든 포트에 대한 정보를 하나의 인스턴스가 공유하게 되어 의도한 대로 동작하지 않을 수 있습니다. 즉, 내부에서 COM5와 COM9을 구분할 수 없고, 마지막으로 설정된 포트만 사용할 가능성이 큽니다.

따라서, 여러 포트를 다루기 위해서는 싱글톤 패턴보다는 각각의 포트에 대해 독립적인 인스턴스를 관리해야 합니다. 이를 위해 인스턴스 생성 방식을 바꾸고, 여러 COM 포트를 다룰 수 있도록 별도의 인스턴스 생성 및 관리 메커니즘을 사용하는 것이 좋습니다.

여러 포트를 다루는 방식
각각의 포트에 대해 별도의 인스턴스 생성: 포트별로 고유의 인스턴스를 생성하고, 해당 인스턴스를 관리하는 방식이 일반적입니다.
포트별 인스턴스를 쉽게 관리하는 방법: 포트 이름을 키로 사용하여 인스턴스를 관리하는 방법을 사용할 수 있습니다. 예를 들어, Dictionary를 사용하여 포트 이름에 따라 ComPortManager 인스턴스를 저장하고 필요할 때 해당 인스턴스를 가져와 사용하는 방식입니다.
예시: 포트별 인스턴스 관리
아래는 Dictionary를 사용하여 여러 COM 포트 인스턴스를 관리하는 예시입니다.

csharp
코드 복사
using System.Collections.Generic;
using System.IO.Ports;

public class ComPortManager
{
    private SerialPort _serialPort;
    
    // 포트 이름을 키로 관리하는 Dictionary
    private static Dictionary<string, ComPortManager> _instances = new Dictionary<string, ComPortManager>();

    // 생성자를 private으로 설정
    private ComPortManager(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.Open();
    }

    // 특정 포트를 위한 인스턴스를 가져오는 메서드
    public static ComPortManager GetInstance(string portName, int baudRate)
    {
        // 해당 포트 이름에 대한 인스턴스가 없으면 새로 생성
        if (!_instances.ContainsKey(portName))
        {
            _instances[portName] = new ComPortManager(portName, baudRate);
        }
        
        return _instances[portName];
    }

    // 데이터를 전송하는 메서드
    public void SendData(string data)
    {
        if (_serialPort != null && _serialPort.IsOpen)
        {
            _serialPort.WriteLine(data);
        }
    }

    // 포트를 닫는 메서드
    public void ClosePort()
    {
        if (_serialPort != null && _serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    // 모든 포트를 닫는 메서드
    public static void CloseAllPorts()
    {
        foreach (var instance in _instances.Values)
        {
            instance.ClosePort();
        }
    }
}
사용 예시
이제 MainWindow나 다른 클래스에서 COM5와 COM9을 독립적으로 다룰 수 있습니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    private ComPortManager _comPort5;
    private ComPortManager _comPort9;

    public MainWindow()
    {
        InitializeComponent();

        // COM5와 COM9 각각에 대해 별도의 인스턴스를 생성 및 관리
        _comPort5 = ComPortManager.GetInstance("COM5", 9600);
        _comPort9 = ComPortManager.GetInstance("COM9", 9600);

        // 각 포트로 데이터를 전송
        _comPort5.SendData("Hello from COM5");
        _comPort9.SendData("Hello from COM9");
    }

    protected override void OnClosed(EventArgs e)
    {
        // 모든 포트를 닫음
        ComPortManager.CloseAllPorts();
        base.OnClosed(e);
    }
}
설명:
Dictionary<string, ComPortManager>: 이 컬렉션을 사용하여 각 포트 이름(예: "COM5", "COM9")에 대해 ComPortManager 인스턴스를 저장합니다.

GetInstance 메서드를 호출할 때, 해당 포트에 대한 인스턴스가 존재하지 않으면 새로 생성하고, 이미 존재하면 기존 인스턴스를 반환합니다.
포트별 독립적인 인스턴스 관리: 각 포트는 고유한 인스턴스를 가지며, COM5와 COM9 각각에 대해 독립적으로 데이터를 전송하거나 포트를 닫을 수 있습니다.

CloseAllPorts 메서드: 이 메서드는 모든 포트를 한 번에 닫을 수 있도록 설계되었습니다. 애플리케이션 종료 시 모든 포트를 정리할 때 유용합니다.

결론:
COM 포트를 여러 개 다룰 때는 싱글톤 패턴이 아닌, 각 포트를 독립적으로 관리하는 인스턴스 구조가 필요합니다. 포트 이름을 키로 사용하는 Dictionary 같은 방법을 사용하면 여러 COM 포트에 대해 쉽게 인스턴스를 관리하고, 각각의 포트를 독립적으로 제어할 수 있습니다