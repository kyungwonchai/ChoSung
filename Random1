네, 바로 이전 답변에서 이어서 MainWindow.xaml.cs (메인 창 코드 비하인드)와 App.xaml.cs (애플리케이션 시작 로직)의 최종 코드를 드리겠습니다.

먼저 질문하신 초기 로그인 ID와 비밀번호에 대해 답변드리겠습니다.

이전에 LoginViewModel.cs의 EnsureDefaultUserExists() 메서드 예시 코드에 다음과 같은 기본 계정을 넣어두었습니다. 이 메서드는 주로 개발 및 테스트 편의를 위한 것으로, 실제 운영 환경에서는 반드시 제거하거나 보안이 강화된 방식으로 사용자 계정을 관리해야 합니다.

관리자 예시:
아이디: admin
비밀번호: adminP@sswOrd
권한: Agent 목록 관리(비밀번호 A 해당) 및 전원 제어(비밀번호 B 해당) 모두 가능
일반 사용자 예시:
아이디: user
비밀번호: userP@sswOrd
권한: 전원 제어(비밀번호 B 해당)만 가능
이제 코드입니다.

1. Views/MainWindow.xaml.cs (메인 창 코드 비하인드 - 완성)

이전 답변에서 MainViewModel.cs를 완성했으므로, 이제 MainWindow.xaml.cs는 해당 ViewModel을 사용하고 창의 생명주기 이벤트를 처리합니다.

C#

// MGSPMonitorControl/Views/MainWindow.xaml.cs
using System.ComponentModel; // CancelEventArgs
using System.Windows;
using MGSPMonitorControl.ViewModels; // MainViewModel

namespace MGSPMonitorControl.Views // 네임스페이스가 Views 폴더로 옮겨졌다면 이렇게 변경
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        // MainViewModel을 생성자에서 주입받습니다.
        public MainWindow(MainViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel; // ViewModel을 DataContext로 설정
        }

        // 창이 닫힐 때 ViewModel의 정리(Cleanup) 메서드 호출
        private void Window_Closing(object sender, CancelEventArgs e)
        {
            // ViewModel이 null이 아니고, IDisposable 등을 구현하여 Cleanup 메서드가 있다면 호출
            // 여기서는 MainViewModel에 Cleanup() 메서드가 있다고 가정
            _viewModel?.Cleanup(); 
        }
    }
}
참고: 만약 MainWindow.xaml 파일을 루트 폴더에서 Views 폴더로 옮기셨다면, 위 코드의 namespace MGSPMonitorControl.Views 부분이 올바른지, 그리고 MainWindow.xaml 파일 상단의 x:Class="MGSPMonitorControl.Views.MainWindow" 선언도 올바른지 확인해야 합니다.

2. App.xaml.cs (애플리케이션 시작 로직 - 완성)

App.config에서 설정을 읽고, 서비스들을 초기화하며, 로그인 창을 먼저 띄우고 성공 시 메인 창을 띄웁니다.

C#

// MGSPMonitorControl/App.xaml.cs
using System;
using System.Configuration; // App.config 사용 위해 System.Configuration.dll 참조 필요
using System.Windows;
using MGSPMonitorControl.DataAccess;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;
using MGSPMonitorControl.ViewModels;
using MGSPMonitorControl.Views; // Views 네임스페이스 사용

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        private IDatabaseService _databaseService;
        private IPasswordService _passwordService;
        private IBrokerClientService _brokerClientService;
        // private ILoggingService _uiLogger; // 필요시 UI 자체 로깅

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // 전역 예외 처리기 설정 (선택적이지만 권장)
            SetupGlobalExceptionHandling();

            // 1. 서비스 인스턴스 생성
            try
            {
                // DatabaseService는 생성자에서 App.config의 연결 문자열을 읽음
                _databaseService = new DatabaseService(); 
                _passwordService = new PasswordService();
                
                // BrokerClientService도 생성자에서 App.config의 BrokerAddress를 읽음
                _brokerClientService = new BrokerClientService(/* _uiLogger */); 
            }
            catch (ConfigurationErrorsException cex)
            {
                ShowErrorAndShutdown($"Application configuration error: {cex.Message}\nPlease check App.config (especially 'MonitorControlDBConnection' connection string and 'BrokerAddress' appSetting).\nThe application will now exit.");
                return;
            }
            catch (Exception ex) 
            {
                 ShowErrorAndShutdown($"Failed to initialize core services: {ex.Message}\nThe application will now exit.");
                return;
            }

            // 2. 로그인 창 ViewModel 및 View 생성
            var loginViewModel = new LoginViewModel(_databaseService, _passwordService);
            
            // 개발/테스트용: 기본 사용자 생성 (EnsureDefaultUserExists를 public으로 만들었거나, 여기서 직접 호출)
            // 실제 배포 시에는 이 부분을 제거하거나 적절히 관리해야 합니다.
            #if DEBUG
            try
            {
                // loginViewModel.EnsureDefaultUserExists().ConfigureAwait(false).GetAwaiter().GetResult(); // 동기적으로 기다림 (UI 스레드 주의)
                // 또는 비동기 호출 후 무시: Task.Run(async () => await loginViewModel.EnsureDefaultUserExists());
                // 여기서는 LoginViewModel 생성자 내부에서 호출될 수 있도록 하거나, 명시적으로 호출
                Console.WriteLine("Attempting to ensure default users exist (DEBUG mode)...");
                var ensureUserTask = loginViewModel.EnsureDefaultUserExists(); // 비동기 호출
                // 이 작업이 UI 스레드를 막지 않도록 주의. 여기서는 간단히 호출.
            }
            catch (Exception ex) { Console.WriteLine($"Error during EnsureDefaultUserExists on startup: {ex.Message}");}
            #endif


            var loginWindow = new LoginWindow(loginViewModel); // ViewModel 주입

            // 3. 로그인 창 표시 및 결과 처리
            bool? loginResult = loginWindow.ShowDialog();

            if (loginResult == true && loginWindow.AuthenticatedUserSession != null)
            {
                // 로그인 성공
                UserSession authenticatedUser = loginWindow.AuthenticatedUserSession;
                Console.WriteLine($"Login successful for user: {authenticatedUser.Username}");

                // 메인 창 ViewModel 및 메인 창 생성 및 표시
                var mainViewModel = new MainViewModel(authenticatedUser, _databaseService, _brokerClientService /*, _uiLogger */);
                
                // MainWindow를 Views 네임스페이스에서 찾아야 함
                var mainWindow = new Views.MainWindow(mainViewModel); // ViewModel 주입
                
                this.MainWindow = mainWindow; // 애플리케이션의 주 창으로 설정
                mainWindow.Show();
            }
            else
            {
                // 로그인 실패 또는 창 닫힘
                Console.WriteLine("Login failed or cancelled. Shutting down application.");
                Shutdown();
            }
        }

        private void SetupGlobalExceptionHandling()
        {
            // UI 스레드에서 처리되지 않은 예외
            this.DispatcherUnhandledException += (s, e) =>
            {
                string errorMessage = $"An unhandled UI exception occurred: {e.Exception.Message}\n\nApplication may become unstable.";
                MessageBox.Show(errorMessage, "Unhandled UI Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                // 로깅 서비스가 있다면 여기에 심각한 오류로 로깅
                Console.WriteLine($"[FATAL UI ERROR] {e.Exception.ToString()}");
                e.Handled = true; // true로 설정하면 애플리케이션이 즉시 종료되지 않을 수 있음 (주의)
                // Shutdown(); // 필요시 강제 종료
            };

            // 백그라운드 스레드에서 처리되지 않은 예외
            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                string errorMessage = $"An unobserved task exception occurred: {e.Exception.GetBaseException().Message}";
                // 이 예외는 UI 스레드가 아니므로 MessageBox 직접 사용 시 문제 발생 가능. 로깅에 집중.
                Console.WriteLine($"[FATAL BACKGROUND ERROR] {e.Exception.ToString()}");
                // 실제로는 파일 로그 등에 기록
                e.SetObserved(); // 예외를 관찰한 것으로 처리하여 프로세스 종료 방지
            };
        }
        
        private void ShowErrorAndShutdown(string message)
        {
            MessageBox.Show(message, "Application Startup Error", MessageBoxButton.OK, MessageBoxImage.Error);
            // 로깅 서비스가 초기화되었다면 로깅 시도
            // (_loggingService as FileLoggingService)?.LogFatal(message.Split('\n')[0]); // FileLoggingService가 있다면
            Console.WriteLine($"[FATAL STARTUP ERROR] {message}");
            if (Application.Current != null) // 이미 Shutdown() 호출 중이면 null일 수 있음
            {
                 Application.Current.Shutdown(-1); // 오류 코드로 종료
            }
        }


        protected override void OnExit(ExitEventArgs e)
        {
            // 애플리케이션 종료 시 BrokerClientService 등 리소스 정리
            // MainViewModel의 Cleanup에서 이미 호출될 수 있지만, 여기서도 명시적으로.
            (this.MainWindow?.DataContext as MainViewModel)?.Cleanup(); // 메인 ViewModel의 Cleanup 호출
            (_brokerClientService as IDisposable)?.Dispose();
            
            Console.WriteLine("MGSPMonitorControl application exited.");
            base.OnExit(e);
        }
    }
}
3. App.config 파일 예시 (프로젝트에 추가 또는 수정)

App.config 파일이 프로젝트에 없다면 새로 추가하고, 다음 내용을 기본으로 하여 DB 연결 문자열과 Broker 주소를 설정합니다. 이 파일은 DatabaseService와 BrokerClientService가 설정을 읽는 데 사용됩니다.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <connectionStrings>
        <add name="MonitorControlDBConnection" 
             connectionString="Server=YOUR_DB_SERVER_ADDRESS;Database=MonitorControlDB;User ID=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;Pooling=true;Max Pool Size=100;Connect Timeout=15;" 
             providerName="System.Data.SqlClient" />
    </connectionStrings>
    <appSettings>
        <add key="BrokerAddress" value="127.0.0.1:9001"/> 
    </appSettings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>
App.config 사용을 위해서는 프로젝트에 System.Configuration.dll 어셈블리 참조가 필요합니다. (보통 자동으로 추가되지만, 없다면 "참조 추가" > "어셈블리" > "프레임워크"에서 System.Configuration 선택)

MainWindow.xaml 리소스 오류 관련 추가 설명:

사용자님께서 MainWindow.xaml을 Views 폴더로 옮기셨다면, App.xaml.cs에서 MainWindow를 생성할 때 네임스페이스를 정확히 지정해야 합니다. 위 App.xaml.cs 코드에서는 using MGSPMonitorControl.Views;를 사용하고 new MainWindow(mainViewModel);로 호출하도록 되어 있습니다. 이것이 올바른 방식입니다.

만약 MainWindow.xaml 파일 자체의 x:Class 어트리뷰트나, MainWindow.xaml.cs 파일의 namespace 선언이 MGSPMonitorControl.Views로 수정되지 않았다면 오류가 발생할 수 있습니다.

MainWindow.xaml 상단 확인:
XML

<Window x:Class="MGSPMonitorControl.Views.MainWindow" 
        ...
        xmlns:local="clr-namespace:MGSPMonitorControl.Views" 
        ...>
MainWindow.xaml.cs 상단 확인:
C#

namespace MGSPMonitorControl.Views // 네임스페이스가 Views로 되어 있는지 확인
{
    public partial class MainWindow : Window
    {
        // ...
    }
}