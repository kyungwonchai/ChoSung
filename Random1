droid:accessibilityEventTypes와 android:accessibilityFeedbackType 속성들은 API 레벨 16 이상에서 사용 가능하므로, 해당 속성들이 사용된 부분에서 API 레벨 문제로 인해 빨간 줄이 나타날 수 있습니다. API 16 이상에서만 접근성 서비스가 동작하도록 설정할 필요가 있습니다. 이를 위해 minSdkVersion을 16 이상으로 설정하면 문제를 해결할 수 있습니다.

프로젝트 설정 및 접근성 서비스 설정 수정
먼저, 프로젝트의 minSdkVersion을 16으로 설정합니다.

모듈 수준 build.gradle (Module: app)
gradle
코드 복사
android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.btscannerapp"
        minSdk 16
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.3.2'
    }

    buildFeatures {
        compose true
    }
}
다음으로, accessibility_service_config.xml 파일을 설정합니다.

res/xml/accessibility_service_config.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name"
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
이제 접근성 서비스가 정상적으로 설정될 것입니다. minSdkVersion을 16으로 설정하여 문제가 해결됩니다. 여기서 com.target.package.name은 타겟 앱의 패키지 이름으로 바꿔주세요.

전체 코드 재정리
프로젝트의 전체 코드를 다시 정리하여 제공합니다.

프로젝트 수준 build.gradle (Project: YourProjectName)
gradle
코드 복사
buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
모듈 수준 build.gradle (Module: app)
gradle
코드 복사
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.btscannerapp"
        minSdk 16
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.3.2'
    }

    buildFeatures {
        compose true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.compose.ui:ui:1.3.2'
    implementation 'androidx.compose.material:material:1.3.2'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.3.2'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0'
    implementation 'androidx.navigation:navigation-compose:2.4.0-alpha10'
    implementation 'androidx.compose.runtime:runtime-livedata:1.3.2'

    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-tooling:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
AndroidManifest.xml
xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.btscannerapp">

    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BTScannerApp">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".MyAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>

</manifest>
res/xml/accessibility_service_config.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name"
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
MainActivity.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : AppCompatActivity() {

    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOExce