네, 시뮬레이션을 통해서도 PLC의 동작을 모방할 수 있습니다. 시뮬레이터가 PLC 장비의 메모리 구조와 통신 방식을 모방하여 작동하므로, D2330과 같은 메모리 주소에 값을 쓴 후 이 값을 확인하고 처리하는 동작을 시뮬레이션할 수 있습니다.

아래 코드는 기존 시뮬레이터를 사용하여 D2330에 값을 쓰고, 이를 시뮬레이터 내부에서 처리하는 방법을 구현한 것입니다. 이 코드는 실제 PLC 없이도 WPF 애플리케이션을 통해 시뮬레이터가 Mewtocol 명령을 처리하는 방식을 설명합니다.

수정된 PLCSimulator.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace PLCPanaSimul.Services
{
    public class PLCSimulator
    {
        private Dictionary<string, int> _memory; // PLC의 메모리 시뮬레이션
        private Action<string> _logCallback; // 로그 출력 콜백

        public PLCSimulator(Action<string> logCallback)
        {
            _memory = new Dictionary<string, int>
            {
                { "D2300", 0 },
                { "D2330", 0 },
                { "R520", 0 },
                { "R521", 0 }
            };
            _logCallback = logCallback;
        }

        // 시리얼 포트로 수신된 데이터를 처리하는 메서드
        public void ProcessReceivedData(string data)
        {
            // 수신된 데이터를 로그로 기록
            _logCallback?.Invoke($"Received: {data}");

            // Mewtocol 프로토콜 명령 처리 로직 (간단한 예시)
            if (data.Contains("WDD"))
            {
                // 예시: D2330에 쓰기 명령이 포함된 경우 처리
                if (data.Contains("D2330"))
                {
                    // 명령에서 값을 추출하여 D2330에 저장
                    var value = ExtractValueFromCommand(data);
                    WriteDataToPLC("D2330", value);
                }
            }
        }

        // PLC 메모리에 데이터를 쓰는 메서드
        public void WriteDataToPLC(string address, int value)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = value;
                _logCallback?.Invoke($"Data written to {address}: {value}");
            }
        }

        // PLC로 데이터를 전송하는 메서드 (시뮬레이션)
        public void SendDataToPLC(string address, string value)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = int.Parse(value);
                _logCallback?.Invoke($"Data sent to {address}: {value}");

                // 동작 완료를 시뮬레이션하기 위해 3초 후에 D2330에 동작 완료 값을 씀
                Task.Delay(3000).ContinueWith(_ => CompleteOperation("D2330"));
            }
        }

        // 동작 완료를 시뮬레이션하는 메서드
        public void CompleteOperation(string address)
        {
            if (_memory.ContainsKey(address))
            {
                _memory[address] = 1; // 동작 완료 상태를 표시하기 위해 1을 씀
                _logCallback?.Invoke($"Operation completed at {address}");
            }
        }

        // 센서 상태를 설정하는 메서드
        public void SetSensorStatus(string sensor, bool status)
        {
            if (_memory.ContainsKey(sensor))
            {
                _memory[sensor] = status ? 1 : 0;
                _logCallback?.Invoke($"Sensor {sensor} status: {(status ? "Active" : "Inactive")}");
            }
        }

        // 명령에서 값을 추출하는 메서드 (예시로, 문자열에서 값 부분을 추출)
        private int ExtractValueFromCommand(string command)
        {
            // 명령의 형식에 따라 값을 추출하는 로직 구현 필요
            // 예시로, "WDD02330001" 형식에서 마지막 4자리의 숫자를 추출한다고 가정
            string valueString = command.Substring(command.Length - 4);
            return int.TryParse(valueString, out int value) ? value : 0;
        }
    }
}
코드 설명
ProcessReceivedData:

시리얼 포트에서 수신된 데이터를 처리하는 메서드입니다. 명령에서 "WDD"와 "D2330"을 포함하는지 확인하고, 포함되어 있다면 명령에서 값을 추출하여 WriteDataToPLC 메서드를 호출합니다.
WriteDataToPLC:

PLC 메모리(여기서는 _memory 딕셔너리)에 데이터를 쓰는 메서드입니다. D2330 주소에 값을 저장하고 로그에 기록합니다.
SendDataToPLC:

기존의 데이터를 전송하는 메서드로, 3초 후에 동작 완료 신호를 D2330에 쓰도록 합니다. 이 메서드는 D2300에 값을 쓸 때 호출되는 예시입니다.
CompleteOperation:

D2330에 동작 완료 값을 쓰는 메서드로, 완료를 표시하기 위해 값을 1로 설정합니다.
ExtractValueFromCommand:

수신된 명령에서 값을 추출하는 메서드입니다. 이 예시에서는 간단하게 명령의 마지막 4자리 숫자를 값으로 추출하도록 구현했습니다. 실제 사용 환경에 맞게 수정이 필요할 수 있습니다.
사용 방법
이 코드는 MainWindow.xaml.cs에서 PLCSimulator 인스턴스를 생성하고, ComPortManager가 데이터를 수신하면 ProcessReceivedData 메서드가 호출되어 데이터를 처리합니다. 데이터가 D2330에 쓰이면, 그에 맞는 동작을 시뮬레이트할 수 있으며, 로그로 모든 과정이 출력됩니다.

이 시뮬레이터는 실제 PLC 없이도 Mewtocol 프로토콜을 통해 PLC와의 통신을 테스트할 수 있는 간단한 예제입니다. 추가적인 동작이나 기능은 필요에 따라 추가할 수 있습니다.