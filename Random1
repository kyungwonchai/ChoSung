측과 실측의 차이를 나타내고, 예측 정확도나 오차 패턴을 이해하기 위해 적합한 시각화 방법과 지표를 아래와 같이 제안합니다.

1. 적합한 차트 및 지표
A. 차트
1. 오차(Residual) 플롯
개념: 예측값과 실제값의 차이(Residual = Actual - Predicted)를 시간 순서대로 플롯하여 오차 패턴을 시각화합니다.
목적:
예측값이 실제값과 얼마나 잘 일치하는지 확인.
오차가 특정 패턴(시간에 따라 커짐/작아짐)을 따르는지 확인.
python
코드 복사
# Residuals
residuals = actual_values - predicted_values

# Residual plot
plt.figure(figsize=(12, 6))
plt.plot(timestamps, residuals, linestyle="--", marker="o", color="red", label="Residuals")
plt.axhline(0, color="black", linestyle="--", label="Perfect Prediction")  # 기준선
plt.title("Residual Plot (Actual - Predicted)")
plt.xlabel("Time")
plt.ylabel("Residuals")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()
2. MAE(Moving Average of Errors) 플롯
개념: 시간에 따른 오차의 평균 절대값(Mean Absolute Error)을 이동 평균으로 시각화합니다.
목적: 오차의 크기 변화를 확인하여 예측 성능이 일정한지 파악.
python
코드 복사
# Moving Average of Errors (MAE)
window_size = 5  # 이동 평균 창 크기
mae = np.convolve(np.abs(residuals), np.ones(window_size)/window_size, mode='valid')

# MAE plot
plt.figure(figsize=(12, 6))
plt.plot(timestamps[window_size-1:], mae, linestyle="-", marker="o", color="orange", label="Moving Average of Errors")
plt.title("Moving Average of Errors (MAE)")
plt.xlabel("Time")
plt.ylabel("MAE")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()
3. 예측 정확도(Accuracy) 플롯
개념: 예측값과 실제값의 상대적 정확도를 시간에 따라 0~100 점수로 표현합니다.
목적: 시간이 지남에 따라 모델의 예측 정확도를 시각적으로 확인.
python
코드 복사
# Accuracy calculation
accuracy = 100 - (np.abs(residuals) / np.maximum(actual_values, predicted_values)) * 100

# Accuracy plot
plt.figure(figsize=(12, 6))
plt.plot(timestamps, accuracy, linestyle="-", marker="o", color="blue", label="Accuracy (%)")
plt.axhline(100, color="green", linestyle="--", label="Perfect Accuracy")  # 기준선
plt.title("Prediction Accuracy Over Time")
plt.xlabel("Time")
plt.ylabel("Accuracy (%)")
plt.xticks(rotation=45)
plt.legend()
plt.grid()
plt.show()
B. 지표
1. Mean Absolute Error (MAE)
공식:
MAE
=
1
𝑛
∑
𝑖
=
1
𝑛
∣
𝑦
𝑖
−
𝑦
^
𝑖
∣
MAE= 
n
1
​
  
i=1
∑
n
​
 ∣y 
i
​
 − 
y
^
​
  
i
​
 ∣
목적: 오차의 절대값 평균으로 모델의 전반적인 예측 성능을 평가.
python
코드 복사
mae_value = np.mean(np.abs(residuals))
print(f"Mean Absolute Error (MAE): {mae_value:.2f}")
2. Mean Squared Error (MSE)
공식:
MSE
=
1
𝑛
∑
𝑖
=
1
𝑛
(
𝑦
𝑖
−
𝑦
^
𝑖
)
2
MSE= 
n
1
​
  
i=1
∑
n
​
 (y 
i
​
 − 
y
^
​
  
i
​
 ) 
2
 
목적: 제곱 오차 평균으로 큰 오차를 강조하여 모델 성능을 평가.
python
코드 복사
mse_value = np.mean(residuals**2)
print(f"Mean Squared Error (MSE): {mse_value:.2f}")
3. R² Score (결정 계수)
공식:
𝑅
2
=
1
−
∑
(
𝑦
𝑖
−
𝑦
^
𝑖
)
2
∑
(
𝑦
𝑖
−
𝑦
ˉ
)
2
R 
2
 =1− 
∑(y 
i
​
 − 
y
ˉ
​
 ) 
2
 
∑(y 
i
​
 − 
y
^
​
  
i
​
 ) 
2
 
​
 
목적: 모델이 데이터를 얼마나 잘 설명하는지 평가 (1에 가까울수록 좋음).
python
코드 복사
from sklearn.metrics import r2_score

r2 = r2_score(actual_values, predicted_values)
print(f"R² Score: {r2:.2f}")
4. 추가 제안
A. 오차의 분포 확인 (히스토그램)
목적: 오차가 특정 범위에 집중되어 있는지 또는 이상값(outlier)이 있는지 확인.
python
코드 복사
plt.figure(figsize=(8, 5))
plt.hist(residuals, bins=20, color="purple", alpha=0.7, edgecolor="black")
plt.title("Distribution of Residuals")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.grid()
plt.show()
B. 이상값 탐지 (Threshold 기반)
목적: 오차가 특정 임계값을 넘는 경우를 강조.
python
코드 복사
threshold = 0.5  # 임계값
outliers = np.abs(residuals) > threshold
print(f"Outliers (Residual > {threshold}): {timestamps[outliers]}")
결론
시각화 추천:
Residual Plot: 오차의 패턴 확인.
Accuracy Plot: 시간에 따른 정확도 확인.
MAE Moving Average: 오차의 변화 추이 확인.
지표 추천:
MAE, MSE: 전체 오차 크기 평가.
R² Score: 예측 성능의 전반적인 평가.
이 중 가장 유용한 시각화는 Residual Plot과 Accuracy Plot입니다. 이를 통해 모델이 예측을 얼마나 잘 수행하고 있는지 쉽게 확인할 수 있습니다.