📦 AutoHandleSolution
 ┣ 📂 AAutoHandle
 ┃ ┣ 📂 Commands
 ┃ ┃ ┣ 📜 IMacroCommand.cs
 ┃ ┃ ┣ 📜 KeyboardCommand.cs
 ┃ ┃ ┣ 📜 MouseClickCommand.cs
 ┃ ┃ ┣ 📜 DelayCommand.cs
 ┃ ┃ ┣ 📜 ScreenCaptureCommand.cs
 ┃ ┃ ┗ 📜 CVCommand.cs
 ┃ ┣ 📂 Core
 ┃ ┃ ┣ 📜 MacroExecutor.cs
 ┃ ┃ ┣ 📜 MacroManager.cs
 ┃ ┃ ┗ 📜 MacroLogger.cs
 ┃ ┣ 📂 Database
 ┃ ┃ ┣ 📜 MySqlHelper.cs
 ┃ ┃ ┣ 📜 MsSqlHelper.cs
 ┃ ┃ ┗ 📜 DatabaseReader.cs  ★ MySQL/MSSQL 조회 및 순회
 ┃ ┣ 📂 Forms
 ┃ ┃ ┗ 📜 MainForm.cs
 ┃ ┣ 📜 Program.cs
 ┃ ┗ 📜 AAutoHandle.csproj
 ┗ 📜 AutoHandleSolution.sln
📜 1️⃣ MySQL & MSSQL 데이터 조회 및 순회 (Database 폴더)
🔹 MySqlHelper.cs (MySQL 프로시저 호출)
csharp
코드 복사
namespace AAutoHandle.Database
{
    using System;
    using System.Data;
    using MySql.Data.MySqlClient;

    public class MySqlHelper
    {
        private readonly string _connectionString;

        public MySqlHelper(string connectionString)
        {
            _connectionString = connectionString;
        }

        public DataTable ExecuteStoredProcedure(string procedureName, params MySqlParameter[] parameters)
        {
            using (var connection = new MySqlConnection(_connectionString))
            {
                using (var command = new MySqlCommand(procedureName, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    if (parameters != null)
                        command.Parameters.AddRange(parameters);

                    using (var adapter = new MySqlDataAdapter(command))
                    {
                        var resultTable = new DataTable();
                        adapter.Fill(resultTable);
                        return resultTable;
                    }
                }
            }
        }
    }
}
🔹 MsSqlHelper.cs (MSSQL 프로시저 호출)
csharp
코드 복사
namespace AAutoHandle.Database
{
    using System;
    using System.Data;
    using System.Data.SqlClient;

    public class MsSqlHelper
    {
        private readonly string _connectionString;

        public MsSqlHelper(string connectionString)
        {
            _connectionString = connectionString;
        }

        public DataTable ExecuteStoredProcedure(string procedureName, params SqlParameter[] parameters)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                using (var command = new SqlCommand(procedureName, connection))
                {
                    command.CommandType = CommandType.StoredProcedure;

                    if (parameters != null)
                        command.Parameters.AddRange(parameters);

                    using (var adapter = new SqlDataAdapter(command))
                    {
                        var resultTable = new DataTable();
                        adapter.Fill(resultTable);
                        return resultTable;
                    }
                }
            }
        }
    }
}
🔹 DatabaseReader.cs (MySQL & MSSQL 결과 순회)
csharp
코드 복사
namespace AAutoHandle.Database
{
    using System;
    using System.Data;
    using System.Collections.Generic;

    public class DatabaseReader
    {
        private readonly MySqlHelper _mySqlHelper;
        private readonly MsSqlHelper _msSqlHelper;

        public DatabaseReader(string mysqlConnString, string mssqlConnString)
        {
            _mySqlHelper = new MySqlHelper(mysqlConnString);
            _msSqlHelper = new MsSqlHelper(mssqlConnString);
        }

        public void ReadMySqlData(string procedureName, Action<DataRow> processRow, params MySql.Data.MySqlClient.MySqlParameter[] parameters)
        {
            var table = _mySqlHelper.ExecuteStoredProcedure(procedureName, parameters);
            foreach (DataRow row in table.Rows)
            {
                processRow(row);
            }
        }

        public void ReadMsSqlData(string procedureName, Action<DataRow> processRow, params System.Data.SqlClient.SqlParameter[] parameters)
        {
            var table = _msSqlHelper.ExecuteStoredProcedure(procedureName, parameters);
            foreach (DataRow row in table.Rows)
            {
                processRow(row);
            }
        }
    }
}
📜 2️⃣ UI에서 실행 (MainForm.cs)
csharp
코드 복사
using System;
using System.Data;
using System.Windows.Forms;
using AAutoHandle.Core;
using AAutoHandle.Commands;
using AAutoHandle.Database;
using MySql.Data.MySqlClient;
using System.Data.SqlClient;

namespace AAutoHandle
{
    public partial class MainForm : Form
    {
        private DatabaseReader _dbReader;

        public MainForm()
        {
            InitializeComponent();

            // MySQL & MSSQL 연결 정보 설정
            string mysqlConn = "Server=localhost;Database=mydb;User=root;Password=1234;";
            string mssqlConn = "Server=myserver;Database=mydb;User Id=myuser;Password=mypassword;";

            _dbReader = new DatabaseReader(mysqlConn, mssqlConn);
        }

        private async void btnStartMacro_Click(object sender, EventArgs e)
        {
            var macroManager = MacroManager.Instance;

            macroManager.AddCommand(new KeyboardCommand(Keys.A));
            macroManager.AddCommand(new MouseClickCommand(500, 300));
            macroManager.AddCommand(new DelayCommand(1000));
            macroManager.AddCommand(new ScreenCaptureCommand("screenshot.png"));
            macroManager.AddCommand(new CVCommand("test.png"));

            await macroManager.StartExecutionAsync();
        }

        private void btnLoadMySqlData_Click(object sender, EventArgs e)
        {
            listBoxLogs.Items.Clear();
            _dbReader.ReadMySqlData("sp_GetData",
                row => listBoxLogs.Items.Add($"{row["id"]}: {row["name"]}"));
        }

        private void btnLoadMsSqlData_Click(object sender, EventArgs e)
        {
            listBoxLogs.Items.Clear();
            _dbReader.ReadMsSqlData("sp_GetData",
                row => listBoxLogs.Items.Add($"{row["id"]}: {row["name"]}"));
        }
    }
}
📜 3️⃣ SQL 프로시저 예시
🔹 MySQL (sp_GetData 프로시저)
sql
코드 복사
DELIMITER //
CREATE PROCEDURE sp_GetData()
BEGIN
    SELECT id, name FROM my_table;
END //
DELIMITER ;
🔹 MSSQL (sp_GetData 프로시저)
sql
코드 복사
CREATE PROCEDURE sp_GetData
AS
BEGIN
    SELECT id, name FROM my_table;
END;
📜 4️⃣ 실행 결과
✅ btnLoadMySqlData_Click() 실행 → ListBox에 MySQL 데이터 출력
✅ btnLoadMsSqlData_Click() 실행 → ListBox에 MSSQL 데이터 출력

📌 결론
MySQL & MSSQL 데이터 조회: DatabaseReader.cs에서 프로시저 호출
행을 순회하며 데이터 읽기: Action<DataRow> 사용해 동적 처리
UI와 연결: 버튼 클릭 시 ListBox에 데이터 표시
닷넷 4.8 지원 코드: ??= 제거 후 명확한 null 체크 로직 적용