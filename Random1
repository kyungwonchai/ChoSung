제 정확히 이해했습니다. 최근 두 개의 PO_NO에 대한 전체 생산 과정을 시간 순서대로 표시하고, 그 이후 실시간으로 새로 생성된 파일을 추가하는 방식으로 처리해야 합니다. 즉, 최근 두 개의 PO_NO에 관련된 모든 파일을 불러와야 하며, 파일의 분량은 한 PO_NO에 대한 여러 MAG_NO 파일로 이루어집니다.

수정된 코드로 다시 설명하겠습니다.

요구사항 요약:
최근 두 개의 PO_NO에 대한 모든 파일을 불러와 DataGrid에 표시.
그 이후 실시간으로 새로운 파일이 생성되면 추가하여 표시.
한 PO_NO는 여러 개의 MAG_NO로 분할되어 있으며, 해당 PO_NO에 대한 모든 파일을 모아 관리.
FileProcessor 클래스 (수정된 파일)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class FileProcessor
{
    private readonly string _logFolder;  // 로그 파일이 저장된 폴더 경로
    private Dictionary<string, List<LogEntry>> _poLogEntries = new Dictionary<string, List<LogEntry>>();  // PO_NO에 따른 로그 저장
    private List<string> _processedFiles = new List<string>();  // 이미 처리한 파일명 저장

    public FileProcessor(string logFolder)
    {
        _logFolder = logFolder;
    }

    /// <summary>
    /// 초기 실행 시, 최근 두 개의 PO_NO에 대한 모든 파일을 로드합니다.
    /// </summary>
    public List<LogEntry> LoadInitialPOLogs()
    {
        List<LogEntry> allEntries = new List<LogEntry>();

        // 폴더 내의 모든 파일을 시간순으로 정렬
        var files = Directory.GetFiles(_logFolder, "*.txt").OrderBy(f => f).ToList();

        foreach (var file in files)
        {
            // 파일을 읽어서 파싱 후 데이터 추가
            var logEntry = ParseFile(file);

            if (!_poLogEntries.ContainsKey(logEntry.PO_NO))
            {
                _poLogEntries[logEntry.PO_NO] = new List<LogEntry>();
            }

            _poLogEntries[logEntry.PO_NO].Add(logEntry);
            _processedFiles.Add(Path.GetFileName(file));  // 처리한 파일을 목록에 추가
        }

        // 최근 두 개의 PO_NO에 대한 모든 생산 과정을 반환
        return GetRecentPOEntries();
    }

    /// <summary>
    /// 5초마다 폴더를 확인하고 새롭게 생성된 파일이 있으면 처리합니다.
    /// </summary>
    public List<LogEntry> CheckForNewFiles()
    {
        List<LogEntry> newEntries = new List<LogEntry>();

        // 폴더 내의 모든 파일을 시간순으로 정렬
        var files = Directory.GetFiles(_logFolder, "*.txt").OrderBy(f => f).ToList();

        foreach (var file in files)
        {
            // 이미 처리한 파일은 건너뜀
            if (_processedFiles.Contains(Path.GetFileName(file)))
                continue;

            // 파일을 읽어서 파싱 후 데이터 추가
            var logEntry = ParseFile(file);

            if (!_poLogEntries.ContainsKey(logEntry.PO_NO))
            {
                _poLogEntries[logEntry.PO_NO] = new List<LogEntry>();
            }

            _poLogEntries[logEntry.PO_NO].Add(logEntry);
            _processedFiles.Add(Path.GetFileName(file));  // 처리한 파일을 목록에 추가
            newEntries.Add(logEntry);  // 새로 추가된 파일만 리스트에 추가
        }

        return newEntries;
    }

    /// <summary>
    /// 파일을 읽어서 LogEntry 객체로 변환합니다.
    /// </summary>
    /// <param name="filePath">읽을 파일의 경로</param>
    /// <returns>파싱된 LogEntry 객체</returns>
    private LogEntry ParseFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);

        var logEntry = new LogEntry
        {
            FileName = Path.GetFileName(filePath),
            MAG_NO = GetValueFromLine(lines, "MAG_NO"),
            MAG_QTY = int.Parse(GetValueFromLine(lines, "MAG_QTY")),
            PO_NO = GetValueFromLine(lines, "PO_NO"),
            PO_PLAN_QTY = int.Parse(GetValueFromLine(lines, "PO_PLAN_QTY")),
            PO_PROD_QTY = int.Parse(GetValueFromLine(lines, "PO_PROD_QTY"))
        };

        return logEntry;
    }

    /// <summary>
    /// 파일에서 특정 키에 해당하는 값을 추출합니다.
    /// </summary>
    /// <param name="lines">파일 내용</param>
    /// <param name="key">찾고자 하는 키 (예: "MAG_NO")</param>
    /// <returns>해당 키에 해당하는 값</returns>
    private string GetValueFromLine(string[] lines, string key)
    {
        var line = lines.FirstOrDefault(l => l.Contains(key));
        return line?.Split('=')[1].Trim('\'');
    }

    /// <summary>
    /// 최근 두 개의 PO_NO에 대한 모든 로그 파일을 반환합니다.
    /// </summary>
    private List<LogEntry> GetRecentPOEntries()
    {
        var result = new List<LogEntry>();

        // PO_NO에 따라 처리한 로그 중에서 가장 최근 두 개의 PO_NO만 가져옴
        var recentPOs = _poLogEntries.OrderByDescending(p => p.Value.Last().FileName).Take(2).ToList();

        foreach (var poLog in recentPOs)
        {
            result.AddRange(poLog.Value);
        }

        return result;
    }
}
MainViewModel (수정된 코드)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows.Input;

public class MainViewModel
{
    private readonly FileProcessor _fileProcessor;  // 파일 처리 클래스
    private Timer _timer;  // 5초마다 체크할 타이머

    public ObservableCollection<LogEntry> LogEntries { get; set; }  // DataGrid에 바인딩할 로그 목록
    public ICommand LoadLogsCommand { get; }  // 수동으로 로그를 로드하는 명령

    public MainViewModel()
    {
        LogEntries = new ObservableCollection<LogEntry>();
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG");

        // 처음 실행 시 최근 두 개의 PO_NO에 대한 전체 파일을 로드
        LoadInitialLogs();

        // 5초마다 폴더를 감시하는 타이머 설정
        _timer = new Timer(CheckForNewLogs, null, 5000, 5000);

        // 수동으로 로그 로드를 위한 커맨드 설정
        LoadLogsCommand = new RelayCommand(LoadInitialLogs);
    }

    /// <summary>
    /// 처음 실행 시 최근 두 개의 PO_NO에 대한 로그 파일을 로드합니다.
    /// </summary>
    private void LoadInitialLogs()
    {
        var initialEntries = _fileProcessor.LoadInitialPOLogs();

        // 기존 로그를 모두 클리어하고 새로운 엔트리로 채움
        LogEntries.Clear();
        foreach (var entry in initialEntries)
        {
            LogEntries.Add(entry);
        }
    }

    /// <summary>
    /// 타이머가 5초마다 호출하여 새로운 로그 파일을 확인합니다.
    /// </summary>
    private void CheckForNewLogs(object state)
    {
        var newEntries = _fileProcessor.CheckForNewFiles();

        // 새로운 엔트리들을 DataGrid에 추가
        foreach (var entry in newEntries)
        {
            App.Current.Dispatcher.Invoke(() => LogEntries.Add(entry));
        }
    }
}
MainWindow.xaml
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log File Viewer" Height="450" Width="800">
    <Grid>
        <!-- DataGrid for displaying log entries -->
        <DataGrid ItemsSource="{Binding LogEntries}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" />
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" />
                <DataGridTextColumn Header="MAG_QTY" Binding="{Binding MAG_QTY}" />
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" />
                <DataGridTextColumn Header="PO_PLAN_QTY" Binding="{Binding PO_PLAN_QTY}" />
                <DataGridTextColumn Header="PO_PROD_QTY" Binding="{Binding PO_PROD_QTY}" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- Button to manually reload logs -->
        <Button Content="Reload Logs" Command="{Binding LoadLogsCommand}" Width="150" Height="30" 
                HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // MainViewModel을 DataContext로 설정하여 바인딩
            DataContext = new MainViewModel();
        }
    }
}
설명:
FileProcessor 클래스:

LoadInitialPOLogs(): 폴더에서 파일을 읽어 최근 두 개의 PO_NO와 관련된 모든 파일을 찾아서 반환합니다.
CheckForNewFiles(): 5초마다 폴더를 확인하여 새롭게 생성된 파일만을 반환합니다.
MainViewModel 클래스:

처음 실행 시: LoadInitialLogs() 메서드를 통해 최근 두 개의 PO_NO와 관련된 모든 파일을 DataGrid에 표시합니다.
실시간 갱신: 5초마다 새로운 파일이 생성되었는지 확인하고, 새로운 파일이 있으면 DataGrid에 추가합니다.
MainWindow.xaml: UI를 정의한 부분으로, DataGrid에 LogEntries를 바인딩하여 로그 파일 정보를 표시하며, Reload Logs 버튼을 통해 수동으로 로그를 다시 로드할 수 있습니다.

이제 이 코드는 최근 두 개의 PO_NO에 대한 모든 파일을 로드하고, 이후 실시간으로 새 파일이 생성되면 추가로 표시하는 방식으로 동작합니다