, 기억합니다. 자동화 작업을 위해 SSH로 안전하게 접속할 수 있는 전용 계정(pi2)을 만드는 파이썬 스크립트에 대해 이야기했었죠.

당시의 핵심 목표는 기존 관리자 계정(pi)을 이용해 원격으로 접속한 뒤, 새로운 관리자 계정(pi2)을 생성하고, 이 계정이 비밀번호 없이 sudo 명령을 실행할 수 있도록 설정하는 것이었습니다.

아래는 이 모든 과정을 자동화하는 상세한 파이썬 스크립트입니다.

## 'pi2' 계정 생성 및 sudo 권한 부여 자동화 스크립트
이 스크립트는 원격 라즈베리파이에 접속하여 다음 작업을 순차적으로 수행합니다.

사용자 생성: pi2라는 새로운 사용자를 생성합니다.

비밀번호 설정: 생성된 pi2 계정의 비밀번호를 설정합니다.

관리자 그룹 추가: pi2 계정을 sudo 그룹에 추가하여 관리자 권한을 부여합니다.

sudoers 설정: pi2 계정이 sudo 명령을 사용할 때 비밀번호를 묻지 않도록 /etc/sudoers 파일을 수정합니다.

Python

import paramiko
import time

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# [접속 정보] 기존에 접속 가능한 라즈베리파이 관리자 계정 정보
REMOTE_HOST = '192.168.0.10'
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password' # 기존 pi 계정의 비밀번호

# [신규 계정 정보] 새로 만들 계정의 정보
NEW_USERNAME = 'pi2'
NEW_PASSWORD = 'new_password_for_pi2' # pi2 계정에 설정할 새 비밀번호
# ===============================================================

def run_sudo_command(ssh_client, command, password):
    """SSH 클라이언트에서 단일 sudo 명령어를 실행하는 헬퍼 함수"""
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        # sudo 프롬프트에 비밀번호 입력
        stdin.write(password + '\n')
        stdin.flush()
        
        # 명령어 실행이 끝날 때까지 대기
        exit_status = stdout.channel.recv_exit_status()
        
        stderr_output = stderr.read().decode('utf-8').strip()

        if exit_status != 0:
            # 에러 메시지에 'already exists'가 포함되어 있으면 성공으로 간주
            if 'already exists' in stderr_output:
                print(f"[알림] 이미 존재하는 항목입니다: {stderr_output}")
                return True, "Already exists, skipping."
            raise Exception(f"Command failed with exit status {exit_status}. Error: {stderr_output}")
            
        return True, f"Command '{command}' executed successfully."
    except Exception as e:
        return False, str(e)


def create_admin_user(hostname, admin_user, admin_pass, new_user, new_pass):
    """원격 호스트에 접속하여 새로운 관리자 계정을 생성하고 sudo 권한을 설정하는 메인 함수"""
    ssh_client = None
    print(f"\n{'='*20} Starting setup for {hostname} {'='*20}")
    try:
        # 1. 기존 관리자 계정으로 SSH 연결
        print(f"[{hostname}] Connecting as '{admin_user}'...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname=hostname, port=22, username=admin_user, password=admin_pass, timeout=10)
        print(f"[{hostname}] Connection successful.")

        # 2. 새로운 사용자 계정 생성
        # -m : 홈 디렉토리 생성
        # -s /bin/bash : 기본 쉘을 bash로 설정
        print(f"[{hostname}] Step 1: Creating new user '{new_user}'...")
        create_user_cmd = f"sudo useradd -m -s /bin/bash {new_user}"
        success, msg = run_sudo_command(ssh_client, create_user_cmd, admin_pass)
        if not success: raise Exception(f"User creation failed: {msg}")
        print(f"[{hostname}] User '{new_user}' created successfully.")

        # 3. 새로운 사용자의 비밀번호 설정
        # echo '비밀번호' | passwd --stdin 사용자명' 형태로 비밀번호를 파이프로 전달
        print(f"[{hostname}] Step 2: Setting password for '{new_user}'...")
        set_pass_cmd = f"echo '{new_user}:{new_pass}' | sudo chpasswd"
        success, msg = run_sudo_command(ssh_client, set_pass_cmd, admin_pass)
        if not success: raise Exception(f"Password setting failed: {msg}")
        print(f"[{hostname}] Password set successfully.")

        # 4. 새로운 사용자를 'sudo' 그룹에 추가
        print(f"[{hostname}] Step 3: Adding '{new_user}' to 'sudo' group...")
        add_to_sudo_cmd = f"sudo usermod -aG sudo {new_user}"
        success, msg = run_sudo_command(ssh_client, add_to_sudo_cmd, admin_pass)
        if not success: raise Exception(f"Adding to sudo group failed: {msg}")
        print(f"[{hostname}] User added to 'sudo' group.")

        # 5. 새로운 사용자가 비밀번호 없이 sudo를 사용하도록 설정
        # /etc/sudoers.d/에 별도 설정 파일을 만들어 관리하는 것이 안전
        print(f"[{hostname}] Step 4: Configuring passwordless sudo for '{new_user}'...")
        sudoers_file_path = f"/etc/sudoers.d/010_{new_user}-nopasswd"
        sudoers_content = f"{new_user} ALL=(ALL) NOPASSWD: ALL"
        # echo '설정내용' | sudo tee 파일경로' 형태로 파일 쓰기
        write_sudoers_cmd = f"echo '{sudoers_content}' | sudo tee {sudoers_file_path}"
        success, msg = run_sudo_command(ssh_client, write_sudoers_cmd, admin_pass)
        if not success: raise Exception(f"Sudoers configuration failed: {msg}")
        print(f"[{hostname}] Passwordless sudo configured successfully.")

        return (True, f"Admin user '{new_user}' created and configured successfully on {hostname}!")

    except Exception as e:
        return (False, f"An error occurred on {hostname}: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print(f"[{hostname}] Connection closed.")


if __name__ == "__main__":
    success, message = create_admin_user(
        hostname=REMOTE_HOST,
        admin_user=REMOTE_USER,
        admin_pass=REMOTE_PASSWORD,
        new_user=NEW_USERNAME,
        new_pass=NEW_PASSWORD
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")
    else: