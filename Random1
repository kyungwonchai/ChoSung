bservableCollection을 사용하여 숫자형 데이터를 저장하고, 다른 클래스의 생성자에 주입하여 값을 업데이트하는 방법을 아래 단계별로 설명하겠습니다.

기본 구조 설명
**ObservableCollection<int>**를 사용하여 숫자 데이터를 저장.
값을 초기에 Add로 추가.
다른 클래스의 생성자에 ObservableCollection을 주입하여 값 변경.
값 변경 시 UI 업데이트가 자동으로 반영.
코드 예제
Step 1: MainViewModel에서 ObservableCollection 정의 및 초기화
csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel
{
    // 숫자형 데이터를 저장하는 ObservableCollection
    public ObservableCollection<int> Numbers { get; set; }

    public MainViewModel()
    {
        Numbers = new ObservableCollection<int> { 10, 20, 30 }; // 초기 값 추가
    }

    // 값을 변경하는 메서드 (테스트용)
    public void UpdateValue(int index, int newValue)
    {
        if (index >= 0 && index < Numbers.Count)
        {
            Numbers[index] = newValue; // ObservableCollection의 값 변경
        }
    }
}
Step 2: 다른 클래스에서 ObservableCollection 주입 및 값 변경
csharp
코드 복사
public class NumberUpdater
{
    private ObservableCollection<int> _numbers;

    // 생성자에서 ObservableCollection 주입
    public NumberUpdater(ObservableCollection<int> numbers)
    {
        _numbers = numbers;
    }

    // 특정 인덱스의 값을 변경하는 메서드
    public void UpdateNumber(int index, int newValue)
    {
        if (index >= 0 && index < _numbers.Count)
        {
            _numbers[index] = newValue; // ObservableCollection 값 변경
        }
    }
}
Step 3: ViewModel과 클래스 연결 및 값 업데이트
csharp
코드 복사
class Program
{
    static void Main(string[] args)
    {
        // MainViewModel 초기화
        var mainViewModel = new MainViewModel();

        // NumberUpdater 클래스에 ObservableCollection 주입
        var updater = new NumberUpdater(mainViewModel.Numbers);

        // 값 업데이트
        updater.UpdateNumber(1, 50); // Numbers[1]의 값을 50으로 변경

        // 변경된 값 확인
        foreach (var number in mainViewModel.Numbers)
        {
            Console.WriteLine(number); // 출력: 10, 50, 30
        }
    }
}
UI 바인딩 (선택 사항)
WPF에서 ObservableCollection은 UI와 자동으로 동기화됩니다. XAML에서 컬렉션을 ItemsControl이나 DataGrid 등에 바인딩하면 값이 변경될 때 UI도 업데이트됩니다.

XAML 예제
xml
코드 복사
<Window x:Class="ObservableExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="200" Width="300">
    <Grid>
        <ListBox ItemsSource="{Binding Numbers}" />
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel(); // ViewModel 바인딩
    }
}
주요 포인트
ObservableCollection은 참조로 전달되기 때문에 값을 변경하면 즉시 반영됩니다.
UI와의 데이터 바인딩이 필요하다면 INotifyPropertyChanged와 함께 사용하거나, ObservableCollection 자체를 바인딩하면 됩니다.