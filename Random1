는 요청에 따라 버튼의 캡션, 그 버튼을 감싸는 그룹의 Text, 그 그룹을 감싸는 페이지의 Text를 포함하여 모든 데이터를 CSV에 정리하는 최종 코드입니다.

이 코드는 버튼의 변수명을 수집한 뒤, 각 버튼을 추적하여 관련 그룹과 페이지 정보를 연결하고, 이를 CSV로 저장합니다.

Python 코드
python
코드 복사
import csv

def extract_bar_button_details(input_file, output_file):
    """
    XtraBars.BarButtonItem 버튼의 변수 이름, 캡션, 그룹, 페이지 정보를 추출하여 CSV로 저장하는 함수.
    """
    # 페이지, 그룹, 버튼 데이터 저장
    page_data = {}
    group_data = {}
    button_names = []
    button_data = []

    try:
        # 입력 파일 읽기
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        current_page = None
        current_group = None

        # 1. 페이지와 그룹 추출
        for line in lines:
            stripped_line = line.strip()

            # RibbonPage 탐지
            if "RibbonPage" in stripped_line and "Text =" in stripped_line:
                current_page = stripped_line.split('Text =')[1].strip().strip('"')
                page_data[current_page] = []  # 페이지에 속한 그룹을 저장하기 위해 초기화

            # RibbonPageGroup 탐지
            elif "RibbonPageGroup" in stripped_line and "Text =" in stripped_line:
                current_group = stripped_line.split('Text =')[1].strip().strip('"')
                group_data[current_group] = current_page  # 그룹과 페이지 매핑

            # XtraBars.BarButtonItem 탐지
            elif "XtraBars.BarButtonItem" in stripped_line and "=" in stripped_line:
                button_name = stripped_line.split('=')[0].strip()  # 버튼 변수명
                button_names.append((button_name, current_group))  # 버튼 변수명과 그룹 연결

        # 2. 버튼 상세 정보 추적
        for button_name, group_name in button_names:
            button_details = {
                "button_name": button_name,
                "caption": None,
                "id": None,
                "image": None,
                "large_image": None,
                "font": None,
                "use_font": None,
                "name": None,
                "item_click": None,
                "group_name": group_name,
                "page_name": group_data.get(group_name, None)
            }

            for line in lines:
                stripped_line = line.strip()

                # 버튼 관련 속성 추적
                if f"{button_name}.Caption" in stripped_line and "=" in stripped_line:
                    button_details["caption"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.Id" in stripped_line and "=" in stripped_line:
                    button_details["id"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ImageOptions.Image" in stripped_line and "=" in stripped_line:
                    button_details["image"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ImageOptions.LargeImage" in stripped_line and "=" in stripped_line:
                    button_details["large_image"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemAppearance.Normal.Font" in stripped_line and "=" in stripped_line:
                    button_details["font"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemAppearance.Normal.Options.UseFont" in stripped_line and "=" in stripped_line:
                    button_details["use_font"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.Name" in stripped_line and "=" in stripped_line:
                    button_details["name"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemClick" in stripped_line and "=" in stripped_line:
                    button_details["item_click"] = stripped_line.split('=')[1].strip().strip('"')

            # 버튼 데이터를 리스트에 추가
            button_data.append(button_details)

        # 3. CSV 파일로 저장 (UTF-8 with BOM)
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
            csvwriter = csv.writer(csvfile)
            # CSV 헤더 작성
            csvwriter.writerow([
                'Page Name', 'Group Name', 'Button Variable Name', 'Caption',
                'Id', 'Image', 'Large Image', 'Font', 'Use Font', 'Name', 'Item Click'
            ])
            # 데이터 작성
            for button in button_data:
                csvwriter.writerow([
                    button.get("page_name", ""),
                    button.get("group_name", ""),
                    button.get("button_name", ""),
                    button.get("caption", ""),
                    button.get("id", ""),
                    button.get("image", ""),
                    button.get("large_image", ""),
                    button.get("font", ""),
                    button.get("use_font", ""),
                    button.get("name", ""),
                    button.get("item_click", "")
                ])

        print(f"버튼 데이터를 {output_file} 파일에 성공적으로 저장했습니다.")

    except Exception as e:
        # 오류 발생 시 출력
        print(f"오류 발생: {e}")

# 실행
input_path = r"C:\agent\txt1.txt"  # 디자이너 파일 경로
output_path = r"C:\agent\bar_button_data.csv"  # 출력 CSV 경로
extract_bar_button_details(input_path, output_path)
주요 기능 설명
페이지 및 그룹 정보 추출:

RibbonPage와 RibbonPageGroup의 Text 값을 추출하여 매핑.
각 그룹이 속한 페이지를 group_data 딕셔너리에 저장.
버튼 정보 추출:

XtraBars.BarButtonItem로 선언된 버튼 변수명을 찾아 button_names 리스트에 저장.
변수명과 해당 그룹을 연결하여 저장.
완전 탐색으로 버튼 세부 정보 추적:

버튼 이름(button_name)을 기준으로 파일 전체를 탐색하여 속성을 추출:
Caption, Id, ImageOptions.Image, ImageOptions.LargeImage, Font, UseFont, Name, ItemClick.
각 버튼의 그룹(group_name)과 페이지(page_name) 정보를 포함.
CSV 파일 저장:

CSV 파일에 페이지 이름, 그룹 이름, 버튼 변수 이름, 각 속성을 저장.
출력 예시 (bar_button_data.csv)
csv
코드 복사
Page Name,Group Name,Button Variable Name,Caption,Id,Image,Large Image,Font,Use Font,Name,Item Click
File,File Operations,btnOpenFile,Open File,101,C:\icons\open.png,C:\icons\large_open.png,Arial,True,btnOpenFile,btnOpenFile_Click
File,File Operations,btnSaveFile,Save File,102,C:\icons\save.png,C:\icons\large_save.png,Arial,True,btnSaveFile,btnSaveFile_Click
Edit,Clipboard,btnCopy,Copy,103,,C:\icons\large_copy.png,Segoe UI,True,btnCopy,btnCopy_Click
기대 결과
각 버튼이 속한 페이지, 그룹, **버튼의 속성(Caption, Id 등)**이 정확히 매핑되어 출력됩니다.
CSV 파일은 UTF-8 with BOM 형식으로 저장되어, 한글 깨짐 없이 Excel에서도 정상적으로 표시됩니다.
사용 방법
디자이너 파일을 C:\agent\txt1.txt 경로에 저장.