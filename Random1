습니다.

상세 로깅: 연결 시도, 성공, 메시지 전송, 수신, 연결 종료, 오류 발생 등 모든 과정을 시간과 함께 터미널에 상세히 출력하여 문제 파악이 쉽도록 했습니다.

전체 실행 코드 (websocket_test.py)
Python

import asyncio
import websockets
import json
import logging
from datetime import datetime

# --- 설정 부분 ---

# 1. 여기에 실제 서버 주소를 입력하세요. (지금은 테스트용 주소입니다)
# TARGET_WEBSOCKET_URL = "ws://10.55.111.111:8888/ABCC"
TARGET_WEBSOCKET_URL = "ws://echo.websocket.events/" # 공개 테스트 서버

# 2. 대괄호 안에 보낼 메시지 사양을 JSON 형식으로 입력하세요.
MESSAGE_SPEC = {
    "command": "REGISTER",
    "transactionId": "CLIENT-001",
    "payload": {
        "deviceName": "MyTestDevice",
        "deviceType": "SENSOR"
    }
}
# --- 설정 끝 ---


# 로깅 설정
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)

async def run_websocket_test():
    """웹소켓 서버에 연결하고 메시지를 보내고 응답을 받는 테스트를 실행합니다."""
    
    # 서버에서 요구한 최종 메시지 형식: [{ ... }]
    message_to_send = [MESSAGE_SPEC]
    
    logging.info(f"지정한 서버에 연결을 시도합니다: {TARGET_WEBSOCKET_URL}")

    try:
        # 'async with' 구문은 연결이 끝나면 자동으로 닫아줍니다.
        async with websockets.connect(TARGET_WEBSOCKET_URL) as websocket:
            logging.info("✅ 서버에 성공적으로 연결되었습니다.")
            
            # 메시지를 JSON 문자열 형태로 변환하여 전송
            json_message = json.dumps(message_to_send, indent=2) # indent는 보기 좋게 하기 위함
            logging.info(f"📤 서버로 다음 메시지를 전송합니다:\n{json_message}")
            await websocket.send(json_message)
            
            # 서버로부터 응답을 기다림
            logging.info("👂 서버로부터 응답을 기다리는 중...")
            response = await websocket.recv()
            
            # 받은 응답을 보기 좋게 출력
            try:
                # 응답이 JSON 형식일 경우 예쁘게 출력
                parsed_response = json.loads(response)
                logging.info(f"📥 서버로부터 응답을 수신했습니다:\n{json.dumps(parsed_response, indent=2)}")
            except json.JSONDecodeError:
                # JSON 형식이 아닐 경우 그대로 출력
                logging.info(f"📥 서버로부터 텍스트 응답을 수신했습니다: {response}")

    except websockets.exceptions.ConnectionClosedError as e:
        logging.error(f"❌ 연결이 비정상적으로 닫혔습니다: {e}")
    except websockets.exceptions.InvalidURIError:
        logging.error(f"❌ 웹소켓 주소가 잘못되었습니다. 주소를 확인하세요: {TARGET_WEBSOCKET_URL}")
    except ConnectionRefusedError:
        logging.error(f"❌ 서버가 연결을 거부했습니다. 서버가 실행 중인지, 주소와 포트가 맞는지 확인하세요.")
    except Exception as e:
        logging.error(f"💥 예상치 못한 오류가 발생했습니다: {e}")
    finally:
        logging.info("👋 테스트 스크립트를 종료합니다.")


if __name__ == "__main__":
    # 필요한 라이브러리가 없는 경우 설치 안내
    try:
        import websockets
    except ImportError:
        print("="*60)
        print("🛑 'websockets' 라이브러리가 설치되지 않았습니다.")
        print("터미널에 아래 명령어를 입력하여 설치해주세요:")
        print("pip install websockets")
        print("="*60)
        exit()

    # 비동기 함수 실행
    asyncio.run(run_websocket_test())

실행 방법
라이브러리 설치: 코드를 처음 실행하기 전에 터미널에서 websockets 라이브러리를 설치해야 합니다.

Bash

pip install websockets
코드 수정:

MESSAGE_SPEC = { ... } 부분에 상대방이 준 실제 메시지 사양을 채워 넣으세요.

테스트가 끝나면 TARGET_WEBSOCKET_URL 변수를 주석 처리된 실제 서버 주소로 변경하세요.

스크립트 실행:

Bash

python websocket_test.py
예상 실행 결과 (로그)
2025-09-15 16:43:38,123 - INFO - 지정한 서버에 연결을 시도합니다: ws://echo.websocket.events/
2025-09-15 16:43:39,456 - INFO - ✅ 서버에 성공적으로 연결되었습니다.
2025-09-15 16:43:39,456 - INFO - 📤 서버로 다음 메시지를 전송합니다:
[
  {
    "command": "REGISTER",
    "transactionId": "CLIENT-001",
    "payload": {
      "deviceName": "MyTestDevice",
      "deviceType": "SENSOR"
    }
  }
]
2025-09-15 16:43:39,456 - INFO - 👂 서버로부터 응답을 기다리는 중...
2025-09-15 16:43:40,789 - INFO - 📥 서버로부터 응답을 수신했습니다:
[
  {
    "command": "REGISTER",
    "transactionId": "CLIENT-001",
    "payload": {
      "deviceName": "MyTestDevice",
      "deviceType": "SENSOR"
    }
  }