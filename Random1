습니다. 서비스가 설치되지 않은 경우, 서비스를 설치하고 실행할 수 있도록 ServiceControllerHelper 클래스를 수정해야 합니다. 그리고 서비스가 이미 설치되어 있는 경우, 필요에 따라 업데이트하거나 실행하도록 수정할 수 있습니다.

수정된 ServiceControllerHelper.cs
수정된 ServiceControllerHelper 클래스는 다음과 같은 기능을 제공합니다:

서비스 설치: 서비스가 설치되어 있지 않은 경우 설치합니다.
서비스 업데이트: 서비스 실행 파일을 교체하여 서비스를 업데이트합니다.
서비스 시작 및 중지: 서비스를 시작하거나 중지합니다.
서비스 상태 확인: 서비스가 실행 중인지 확인합니다.
아래는 수정된 ServiceControllerHelper 클래스의 전체 코드입니다:

csharp
코드 복사
using System;
using System.ServiceProcess;
using System.IO;

namespace RouterMiddleACR.Services
{
    public class ServiceControllerHelper
    {
        private string _serviceName = "RouterMiddleACRService"; // 서비스 이름
        private string _serviceExePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Service", "RouterMiddleACRService.exe"); // 서비스 실행 파일 경로

        // 서비스를 설치하는 메서드
        public void InstallService()
        {
            try
            {
                if (!File.Exists(_serviceExePath))
                {
                    throw new FileNotFoundException("서비스 실행 파일을 찾을 수 없습니다.", _serviceExePath);
                }

                string installUtilPath = Path.Combine(Environment.GetEnvironmentVariable("WINDIR"), "Microsoft.NET", "Framework64", "v4.0.30319", "InstallUtil.exe");

                if (!File.Exists(installUtilPath))
                {
                    throw new FileNotFoundException("InstallUtil.exe 파일을 찾을 수 없습니다.", installUtilPath);
                }

                // 서비스 설치
                System.Diagnostics.Process process = new System.Diagnostics.Process();
                process.StartInfo.FileName = installUtilPath;
                process.StartInfo.Arguments = $"\"{_serviceExePath}\"";
                process.StartInfo.UseShellExecute = false;
                process.StartInfo.RedirectStandardOutput = true;
                process.StartInfo.CreateNoWindow = true;
                process.Start();
                process.WaitForExit();

                if (process.ExitCode != 0)
                {
                    throw new Exception("서비스 설치 중 오류가 발생했습니다.");
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"서비스 설치 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        // 서비스를 시작하는 메서드
        public void StartService()
        {
            try
            {
                using (var sc = new ServiceController(_serviceName))
                {
                    if (sc.Status == ServiceControllerStatus.Stopped)
                    {
                        sc.Start();
                        sc.WaitForStatus(ServiceControllerStatus.Running);
                    }
                }
            }
            catch (InvalidOperationException)
            {
                // 서비스가 설치되어 있지 않으면 설치하고 다시 시도
                InstallService();
                StartService();
            }
        }

        // 서비스를 중지하는 메서드
        public void StopService()
        {
            try
            {
                using (var sc = new ServiceController(_serviceName))
                {
                    if (sc.Status == ServiceControllerStatus.Running)
                    {
                        sc.Stop();
                        sc.WaitForStatus(ServiceControllerStatus.Stopped);
                    }
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"서비스 중지 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        // 서비스 상태를 가져오는 메서드
        public string GetServiceStatus()
        {
            try
            {
                using (var sc = new ServiceController(_serviceName))
                {
                    return sc.Status.ToString();
                }
            }
            catch (InvalidOperationException)
            {
                return "서비스가 설치되어 있지 않습니다.";
            }
        }

        // 서비스를 업데이트하는 메서드
        public void UpdateService()
        {
            try
            {
                StopService(); // 서비스를 중지

                // 서비스 파일 교체
                if (File.Exists(_serviceExePath))
                {
                    string backupExePath = _serviceExePath.Replace(".exe", "_backup.exe");
                    File.Copy(_serviceExePath, backupExePath, true); // 기존 파일을 백업

                    // 새 파일을 복사하여 업데이트
                    string newExePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Service", "RouterMiddleACRService_Update.exe");
                    if (File.Exists(newExePath))
                    {
                        File.Copy(newExePath, _serviceExePath, true);
                        File.Delete(newExePath); // 업데이트 파일 삭제
                    }
                }

                StartService(); // 서비스를 다시 시작
            }
            catch (Exception ex)
            {
                throw new Exception($"서비스 업데이트 중 오류가 발생했습니다: {ex.Message}");
            }
        }
    }
}
코드 설명
서비스 설치:

InstallService() 메서드는 InstallUtil.exe를 사용하여 서비스를 설치합니다. InstallUtil.exe는 .NET Framework의 기본 유틸리티로, 서비스 설치 및 제거에 사용됩니다.
경로는 기본적으로 C:\Windows\Microsoft.NET\Framework64\v4.0.30319\InstallUtil.exe이지만, 사용자의 시스템에 따라 달라질 수 있습니다.
서비스 시작:

StartService() 메서드는 서비스가 정지된 상태일 때 시작합니다. 만약 서비스가 설치되어 있지 않으면 InstallService()를 호출하여 설치 후 다시 시작합니다.
서비스 중지:

StopService() 메서드는 서비스를 중지합니다. 서비스가 실행 중인 경우에만 중지하며, 예외 발생 시 이를 처리합니다.
서비스 상태 확인:

GetServiceStatus() 메서드는 현재 서비스의 상태를 반환합니다. 서비스가 설치되어 있지 않은 경우에도 예외를 처리하여 사용자에게 상태를 알려줍니다.
서비스 업데이트:

UpdateService() 메서드는 기존 서비스를 중지하고 실행 파일을 업데이트한 후 다시 시작합니다. 새로운 실행 파일이 RouterMiddleACRService_Update.exe로 준비되어 있어야 합니다.
업데이트 파일을 복사한 후 기존 파일은 백업하고, 새 파일로 교체합니다.
메인 UI에서 서비스 제어
위 ServiceControllerHelper 클래스를 이용하여 WPF 메인 UI에서 서비스를 제어할 수 있습니다. MainWindow.xaml.cs에 적절한 이벤트 핸들러를 추가하여 사용자 액션에 따라 서비스를 설치, 시작, 중지, 또는 업데이트할 수 있습니다.

MainWindow.xaml.cs 코드 예시
csharp
코드 복사
using System.Windows;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
            _viewModel.StartServiceOnLoad(); // UI 로드 시 서비스 설치 및 시작
        }

        private void StartService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StartService();
        }

        private void StopService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StopService();
        }

        private void RefreshStatus_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshServiceStatus();
        }

        private void UpdateService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.UpdateService();
        }
    }
}
MainViewModel.cs에 서비스 제어 추가
MainViewModel에 추가된 서비스 제어 메서드:

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ServiceControllerHelper _serviceControllerHelper;
        private string _serviceStatus;

        public ObservableCollection<string> LogMessages { get; } = new ObservableCollection<string>();

        public string ServiceStatus
        {
            get => _serviceStatus;
            set
            {
                _serviceStatus = value;
                OnPropertyChanged(nameof(ServiceStatus));
            }
        }

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper();
            RefreshServiceStatus();
        }

        public void StartServiceOnLoad()
        {
            if (_serviceControllerHelper.GetServiceStatus() == "서비스가 설치되어 있지 않습니다.")
            {
                _serviceControllerHelper.InstallService();
            }
            _serviceControllerHelper.StartService();
        }

        public void StartService()
        {
            _serviceControllerHelper.StartService();
            RefreshServiceStatus();
        }

        public void StopService()
        {
            _serviceControllerHelper.StopService();
            RefreshServiceStatus();
        }

        public void RefreshServiceStatus()
        {
            ServiceStatus = _serviceControllerHelper.GetServiceStatus();
        }

        public void UpdateService()
        {
            _serviceControllerHelper.UpdateService();
            RefreshServiceStatus();
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
결론
이렇게 수정된 코드를 사용하면, WPF 애플리케이션 시작 시 서비스가 설치되어 있지 않으면 설치하고, 설치된 경우에는 업데이트하거나 시작할 수 있습니다. 서비스가 설치되어 있지 않을 때 발생하는 오류도 적절히 처리하여, 사용자에게 문제를 알리고 해결할 수 있도록 합니