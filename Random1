겠습니다. 요청하신 대로 fetch_data_from_db 함수 안에서 진입 흔적을 확인할 수 있도록 **print**문을 추가하고, 함수 내에서의 흐름을 보다 명확히 추적할 수 있게 수정하겠습니다.

이제 함수 진입, 쿼리 실행 전후, 쿼리 결과 등을 print 문으로 출력하여 실행 흐름을 확인할 수 있도록 할 것입니다. 또한, 오류가 발생할 경우에는 오류를 출력하여 더 쉽게 디버깅할 수 있도록 하겠습니다.

최종 수정된 코드:
python
Copy code
from flask import Flask, render_template, request
import pandas as pd
import pymssql

app = Flask(__name__)

# 단순한 쿼리 (파라미터를 직접 쿼리 문자열에 포함)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = '{0}'"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = '{0}'"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = '{0}'"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    print("Entering fetch_data_from_db function...")  # 함수 진입 확인
    try:
        # pymssql을 사용하여 데이터베이스 연결
        print(f"Connecting to database with connection string: {connection_string}")  # DB 연결 시도
        conn = pymssql.connect(connection_string)
        cursor = conn.cursor()

        # 파라미터를 쿼리 문자열에 직접 삽입
        formatted_query = query.format(qr_value)  # 파라미터를 쿼리 문자열에 포맷팅하여 삽입
        print(f"Executing query: {formatted_query}")  # 실행되는 쿼리 출력
        cursor.execute(formatted_query)  # 쿼리 실행

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]
        print(f"Columns: {columns}")  # 컬럼 이름 출력

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()
        print(f"Rows fetched: {len(rows)}")  # 조회된 데이터의 개수 출력

        # 결과가 있으면 데이터를 pandas DataFrame으로 변환하여 반환
        if len(rows) > 0:
            df = pd.DataFrame(rows, columns=columns)
            print("Data fetched successfully.")
            return df
        else:
            print("No data found for the query.")
            return None
    except Exception as e:
        print(f"Error executing query: {e}")  # 에러 발생 시 출력
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    print("Entering functionA...")
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    print("Exiting functionA...")
    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
def get_data():
    """
    사용자가 입력한 QR 값을 받아 functionA를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값

    print(f"Received QR value: {qr_value}")
    print(f"Received connection string: {connection_string}")

    # 함수 A 실행: 여러 개의 쿼리를 동기적으로 실행
    data = functionA(connection_string, qr_value)
    
    # DataFrame을 HTML 테이블로 변환
    html_tables = []
    for df in data:
        if isinstance(df, pd.DataFrame):  # df가 DataFrame일 경우에만 to_html()을 호출
            html_tables.append(df.to_html(classes='data', header=True, index=False))
        else:
            html_tables.append("<p>No data found.</p>")

    # 결과를 HTML 테이블 형식으로 렌더링
    return render_template('table.html', tables=html_tables)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
수정된 주요 사항:
print 문 추가:

함수 진입: fetch_data_from_db와 functionA 함수에 print 문을 추가하여 함수에 진입한 흔적을 확인할 수 있게 했습니다.
쿼리 및 파라미터 출력: 실행되는 실제 쿼리와 파라미터를 print로 출력합니다.
결과 출력: 쿼리 결과가 몇 개의 데이터가 조회되었는지 확인할 수 있도록 print 문을 추가했습니다.
쿼리 실행 전후 로그:

DB 연결 시도, 쿼리 실행 전후로 로그를 출력하여 각 단계에서의 동작을 추적할 수 있습니다.
오류 처리:

try-except 블록에서 에러가 발생했을 경우 오류 메시지를 출력합니다.
실행 방법:
필요한 라이브러리 설치:

bash
Copy code
pip install pymssql pandas Flask
앱 실행:

bash
Copy code
python app.py
브라우저에서 테스트:

브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.
로그 확인:
서버 콘솔에서 **print**로 출력된 로그를 통해 쿼리 실행과 파라미터 전달 과정, 데이터베이스 연결 과정, 조회된 결과를 실시간으로 추적할 수 있습니다.
Received QR value:, Executing query:, Rows fetched: 등의 로그를 통해 실행 흐름을 쉽게 파악할 수 있습니다.
결론: