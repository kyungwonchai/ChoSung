// MainForm 클래스 멤버 변수로 버튼을 저장할 리스트 선언
private List<SimpleButton> customButtons;

// MainForm 생성자에서 버튼 리스트 초기화
public MainForm()
{
    InitializeComponent();
    customButtons = new List<SimpleButton>();
}

// 데이터 로드 메서드 수정
private void LoadData()
{
    string selectQuery = "SELECT * FROM T1_ProjectList";
    using (SqlCommand command = new SqlCommand(selectQuery, connection))
    {
        SqlDataAdapter adapter = new SqlDataAdapter(command);
        DataTable dataTable = new DataTable();
        adapter.Fill(dataTable);
        gridControl1.DataSource = dataTable;
    }

    // 기존 버튼 삭제
    foreach (SimpleButton button in customButtons)
    {
        button.Click -= CustomButton_Click;
        button.Click -= DeleteButton_Click; // 삭제 버튼 클릭 이벤트 핸들러 제거
        button.Dispose();
    }
    customButtons.Clear();

    // 새로운 버튼 생성
    for (int i = 0; i < gridView1.RowCount; i++)
    {
        SimpleButton selectButton = new SimpleButton();
        selectButton.Text = "선택";
        selectButton.Tag = i; // 행 인덱스를 버튼의 Tag로 저장
        selectButton.Click += CustomButton_Click;

        SimpleButton deleteButton = new SimpleButton();
        deleteButton.Text = "삭제";
        deleteButton.Tag = i; // 행 인덱스를 버튼의 Tag로 저장
        deleteButton.Click += DeleteButton_Click; // 삭제 버튼 클릭 이벤트 핸들러 추가

        gridView1.GridControl.Controls.Add(selectButton);
        gridView1.GridControl.Controls.Add(deleteButton);

        customButtons.Add(selectButton);
        customButtons.Add(deleteButton);
    }

    // 버튼 위치 및 스타일 설정
    LayoutButtons();
}

// 버튼 위치 및 스타일을 조정하는 메서드
private void LayoutButtons()
{
    for (int i = 0; i < gridView1.RowCount; i++)
    {
        GridRow row = gridView1.GetRow(i) as GridRow;
        if (row != null)
        {
            Rectangle selectRect = gridView1.GetRowCellDisplayRectangle(i, gridView1.Columns["선택"], false);
            SimpleButton selectButton = customButtons[i * 2];
            selectButton.Size = new Size(selectRect.Height, selectRect.Height);
            selectButton.Location = new Point(selectRect.Right - selectButton.Width, selectRect.Top);
            selectButton.BringToFront();

            Rectangle deleteRect = gridView1.GetRowCellDisplayRectangle(i, gridView1.Columns["삭제"], false);
            SimpleButton deleteButton = customButtons[i * 2 + 1];
            deleteButton.Size = new Size(deleteRect.Height, deleteRect.Height);
            deleteButton.Location = new Point(deleteRect.Right - deleteButton.Width, deleteRect.Top);
            deleteButton.BringToFront();
        }
    }
}

// CustomButton_Click 이벤트 핸들러
private void CustomButton_Click(object sender, EventArgs e)
{
    SimpleButton button = (SimpleButton)sender;
    int rowIndex = (int)button.Tag;
    if (rowIndex >= 0 && rowIndex < gridView1.RowCount)
    {
        gridView1.FocusedRowHandle = rowIndex;
        string pname = (string)gridView1.GetRowCellValue(rowIndex, "Pname");
        MessageBox.Show(pname, "선택된 Pname", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
}

// DeleteButton_Click 이벤트 핸들러
private void DeleteButton_Click(object sender, EventArgs e)
{
    SimpleButton button = (SimpleButton)sender;
    int rowIndex = (int)button.Tag;
    if (rowIndex >= 0 && rowIndex < gridView1.RowCount)
    {
        gridView1.FocusedRowHandle = rowIndex;
        string pname = (string)gridView1.GetRowCellValue(rowIndex, "Pname");
        DialogResult result = MessageBox.Show("선택한 행을 삭제하시겠습니까?", "삭제 확인", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
        if (result == DialogResult.Yes)
        {
            // 데이터베이스에서 해당 행 삭제
            string deleteQuery = "DELETE FROM T1_ProjectList WHERE Pname = @Pname";
            using (SqlCommand command = new SqlCommand(deleteQuery, connection))
            {
                command.Parameters.AddWithValue("@Pname", pname);
                command.ExecuteNonQuery();
            }

            // gridControl1 업데이트
            LoadData();
        }
    }
}
