using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModelPop1 : INotifyPropertyChanged
    {
        public event Action<string, bool> ErrorTriggeredPop1;

        private WarningWindowPop1 _warningWindowPop1;
        private ObservableCollection<ErrorMessagePop1> _errorMessagesPop1;
        private bool _isWarningWindowOpen;

        public MainViewModelPop1()
        {
            _errorMessagesPop1 = new ObservableCollection<ErrorMessagePop1>();
            ErrorTriggeredPop1 += HandleErrorEventPop1;
        }

        private void HandleErrorEventPop1(string message, bool isAdd)
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (isAdd)
                {
                    AddErrorMessagePop1(message);
                }
                else
                {
                    RemoveErrorMessagePop1(message);
                }
            });
        }

        private void AddErrorMessagePop1(string message)
        {
            Debug.WriteLine($"[DEBUG] Attempting to add message: {message}");

            // 중복 확인 없이 메시지 추가
            Color color = _errorMessagesPop1.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessagesPop1.Add(new ErrorMessagePop1(message, new SolidColorBrush(color)));

            // 창이 닫혀 있다면 창을 열기
            if (!_isWarningWindowOpen)
            {
                ShowWarningWindowPop1();
            }
        }

        private void RemoveErrorMessagePop1(string message)
        {
            var errorMessage = _errorMessagesPop1.FirstOrDefault(m => m.ContentPop1 == message);
            if (errorMessage != null)
            {
                _errorMessagesPop1.Remove(errorMessage);
                Debug.WriteLine($"[DEBUG] Error removed: {message}");

                if (_errorMessagesPop1.Count == 0)
                {
                    CloseWarningWindowPop1();
                }
            }
        }

        private void ShowWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindowPop1 = new WarningWindowPop1(_errorMessagesPop1);
                _warningWindowPop1.Topmost = true;
                _warningWindowPop1.Show();

                _warningWindowPop1.Closed += (sender, e) =>
                {
                    _isWarningWindowOpen = false;
                    _warningWindowPop1 = null;
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                _isWarningWindowOpen = true;
                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void CloseWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindowPop1 != null)
                {
                    _warningWindowPop1.Close();
                    _warningWindowPop1 = null;
                    _isWarningWindowOpen = false;
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessagePop1
    {
        public string ContentPop1 { get; }
        public SolidColorBrush ColorPop1 { get; }

        public ErrorMessagePop1(string content, SolidColorBrush color)
        {
            ContentPop1 = content;
            ColorPop1 = color;
        }
    }
}
