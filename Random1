PF의 CheckBox는 기본적으로 bool 값과 바인딩되도록 설계되어 있습니다. 따라서 0 또는 1과 같은 숫자를 CheckBox에 바인딩하려면 IValueConverter를 사용해야 합니다. 숫자를 bool 값으로 변환하고, 반대로 bool 값을 숫자로 변환해야 합니다.

컨버터 사용 예제
Step 1: 컨버터 구현
csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;

public class IntToBoolConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        // 숫자를 bool로 변환 (0 = false, 그 외 = true)
        if (value is int intValue)
        {
            return intValue != 0;
        }
        return false;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        // bool을 숫자로 변환 (false = 0, true = 1)
        if (value is bool boolValue)
        {
            return boolValue ? 1 : 0;
        }
        return 0;
    }
}
Step 2: XAML에 컨버터 추가
컨버터를 리소스에 등록하고 CheckBox의 IsChecked 속성에 바인딩합니다.

xml
코드 복사
<Window x:Class="CheckBoxExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="200" Width="300">
    <Window.Resources>
        <!-- 컨버터 등록 -->
        <local:IntToBoolConverter x:Key="IntToBoolConverter" />
    </Window.Resources>
    <Grid>
        <CheckBox IsChecked="{Binding MyNumber, Converter={StaticResource IntToBoolConverter}}" Content="Check me!" />
    </Grid>
</Window>
Step 3: ViewModel에서 숫자 속성 정의
숫자 속성을 정의하고 INotifyPropertyChanged를 구현하여 UI와 데이터의 동기화를 유지합니다.

csharp
코드 복사
using System.ComponentModel;

public class MainViewModel : INotifyPropertyChanged
{
    private int _myNumber;

    public int MyNumber
    {
        get => _myNumber;
        set
        {
            if (_myNumber != value)
            {
                _myNumber = value;
                OnPropertyChanged(nameof(MyNumber));
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
Step 4: ViewModel 바인딩
MainWindow의 DataContext에 ViewModel을 설정합니다.

csharp
코드 복사
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel
        {
            MyNumber = 1 // 초기 값 설정 (1 = CheckBox checked)
        };
    }
}
동작 설명
CheckBox 동작:

MyNumber 값이 0이면 CheckBox는 Unchecked 상태.
MyNumber 값이 1이면 CheckBox는 Checked 상태.
CheckBox를 클릭하면 MyNumber 값이 0 또는 1로 자동 변환되어 ViewModel에 반영.
컨버터 역할:

Convert: 숫자를 bool 값으로 변환하여 CheckBox에 적용.
ConvertBack: CheckBox 상태를 숫자로 변환하여 ViewModel 속성에 저장.
요약