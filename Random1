1. AppSettings.cs (SharedModels 프로젝트)

이 파일이 MemoAppMGSP.SharedModels 프로젝트에 있는지, 네임스페이스가 맞는지 확인하고 없다면 생성/수정하세요.
C#

// MemoAppMGSP.SharedModels/AppSettings.cs
namespace MemoAppMGSP.SharedModels
{
    /// <summary>
    /// 애플리케이션 설정을 담는 모델 클래스입니다. (로그인 불필요 버전)
    /// </summary>
    public class AppSettings
    {
        /// <summary>
        /// 서버 API 기본 주소입니다.
        /// </summary>
        public string ApiBaseUrl { get; set; }

        /// <summary>
        /// 메모 수신 시 기본 팝업 옵션입니다.
        /// </summary>
        public bool DefaultPopupOption { get; set; }

        /// <summary>
        /// 메모 전송 시 사용할 발신자 이름입니다. (로컬 설정)
        /// </summary>
        public string SenderName { get; set; }

        /// <summary>
        /// 클라이언트 식별자 (예: PC 이름)
        /// </summary>
        public string LocalIdentifier { get; set; }

        /// <summary>
        /// 메모 수신 대기 포트
        /// </summary>
        public int ListeningPort { get; set; }

        // 필요 시 다른 설정 추가

        public AppSettings()
        {
            // 기본값 설정 (App.config 또는 다른 설정 소스에서 읽어오는 것이 좋음)
            ApiBaseUrl = "http://localhost:5123/api"; // 기본 API 주소
            DefaultPopupOption = true;
            try { SenderName = Environment.MachineName; } catch { SenderName = "UnknownSender"; }
            try { LocalIdentifier = Environment.MachineName; } catch { LocalIdentifier = "UnknownPC"; }
            ListeningPort = 12345; // 기본 포트
        }
    }
}
2. ISettingsService.cs (클라이언트 프로젝트: Services/Interfaces)

이 인터페이스 파일이 있는지 확인하고 없다면 생성/수정하세요.
C#

// MemoAppMGSP/Services/Interfaces/ISettingsService.cs
using MemoAppMGSP.SharedModels; // AppSettings 모델 사용
using System.Threading.Tasks;

namespace MemoAppMGSP.Services.Interfaces
{
    /// <summary>
    /// 애플리케이션 설정 로드 및 저장을 위한 서비스 인터페이스입니다.
    /// </summary>
    public interface ISettingsService // 인터페이스 정의
    {
        Task SaveSettingsAsync(AppSettings settings);
        Task<AppSettings> LoadSettingsAsync();
    }
}
3. IPMemoService.cs (클라이언트 프로젝트: Services/Implementations)

누락된 using System.Linq; 와 using System.Threading; 를 추가합니다.
다른 코드는 이전 답변(#77)과 동일하게 유지합니다 (AuthService 없음, HttpClient/ApiUrl 생성자 주입).
C#

// MemoAppMGSP/Services/Implementations/IPMemoService.cs
using MemoAppMGSP.SharedModels;
using MemoAppMGSP.Services.Interfaces;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq; // ---!!! using 추가 (Any() 사용 위해) !!!---
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Sockets;
using System.Text;
using System.Threading; // ---!!! using 추가 (CancellationToken 사용 위해) !!!---
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace MemoAppMGSP.Services.Implementations
{
    public class IPMemoService : IMemoService
    {
        private readonly HttpClient _httpClient;
        private readonly string _apiBaseUrl;
        private const int TARGET_PORT = 12345;

        public IPMemoService(HttpClient httpClient, string apiBaseUrl)
        {
            _httpClient = httpClient ?? throw new ArgumentNullException(nameof(httpClient));
            _apiBaseUrl = apiBaseUrl ?? throw new ArgumentNullException(nameof(apiBaseUrl));
            _httpClient.DefaultRequestHeaders.Accept.Clear();
            _httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            Console.WriteLine($"IPMemoService Initialized with API Base URL: {_apiBaseUrl}");
        }

        public async Task<bool> CreateMemoAsync(Memo memo, List<string> recipientEndpoints)
        {
            // ---!!! Any() 사용 부분 확인 (using System.Linq; 추가 후 에러 해소되어야 함) !!!---
            if (memo == null || recipientEndpoints == null || !recipientEndpoints.Any())
                return false;

            // 1. 서버 API 호출하여 DB 저장
            bool apiSaved = false; Memo savedMemo = null;
            string requestUri = $"{_apiBaseUrl}/memos";
            try { /* ... API 호출 로직 (이전과 동일) ... */ } catch { /* ... */ }
            if (!apiSaved || savedMemo == null) return false;

            // 2. TCP 직접 전송 시도
            int successfulSends = 0;
            string memoJsonToSend = JsonConvert.SerializeObject(savedMemo);
            byte[] dataToSend = Encoding.UTF8.GetBytes(memoJsonToSend);
            foreach (var endpoint in recipientEndpoints)
            {
                bool sent = await SendTcpDataAsync(endpoint, TARGET_PORT, dataToSend); // SendTcpDataAsync 내부에서도 CancellationToken 사용 가능
                if (sent) successfulSends++;
            }
            Debug.WriteLine($"IPMemoService: Sent to {successfulSends}/{recipientEndpoints.Count} recipients via TCP.");
            return true;
        }

        // SendTcpDataAsync 메서드 (CancellationToken 파라미터 추가 고려)
        private async Task<bool> SendTcpDataAsync(string ipAddress, int port, byte[] data)
        {
            TcpClient client = null;
            // ---!!! CancellationToken 사용 부분 확인 (using System.Threading; 추가 후 에러 해소되어야 함) !!!---
            var cts = new CancellationTokenSource(5000); // 5초 타임아웃 예시
            try
            {
                client = new TcpClient();
                await client.ConnectAsync(ipAddress, port).ContinueWith(task => { if (task.IsFaulted) throw task.Exception; }, cts.Token); // ConnectAsync는 직접 CancellationToken 미지원, ContinueWith 활용
                if(!client.Connected) return false;
                using (var stream = client.GetStream())
                {
                    byte[] len = BitConverter.GetBytes(data.Length);
                    await stream.WriteAsync(len, 0, 4, cts.Token);
                    await stream.WriteAsync(data, 0, data.Length, cts.Token);
                    await stream.FlushAsync(cts.Token);
                    return true;
                }
            }
            catch(OperationCanceledException) { Debug.WriteLine($"TCP Send Timeout to {ipAddress}:{port}"); return false; }
            catch (Exception ex) { Debug.WriteLine($"TCP Send Error to {ipAddress}:{port}: {ex.Message}"); return false; }
            finally { client?.Close(); cts.Dispose(); }
        }

        // --- 다른 IMemoService 메서드 구현 (API 호출 - TODO) ---
        public Task<IEnumerable<UserMemoInfo>> GetUserMemosWithStatusAsync(Guid userIdentifier) { /* ... */ throw new NotImplementedException(); }
        public Task<Memo> GetMemoByIdAsync(Guid memoId) { /* ... */ throw new NotImplementedException(); }
        // ... (나머지 메서드들) ...
    }
}
4. SettingsViewModel.cs (클라이언트 프로젝트: ViewModels)

using MemoAppMGSP.SharedModels; 를 추가합니다. (AppSettings 사용 위해)
ISettingsService 인터페이스가 존재하고 참조 가능해야 합니다.
C#

// MemoAppMGSP/ViewModels/SettingsViewModel.cs
using MemoAppMGSP.Infrastructure.Commands;
using MemoAppMGSP.Services.Interfaces; // ISettingsService 사용
using MemoAppMGSP.SharedModels;    // ---!!! using 추가 (AppSettings 사용 위해) !!!---
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Input;

namespace MemoAppMGSP.ViewModels
{
    public class SettingsViewModel : ViewModelBase
    {
        // --- 의존성 ---
        private readonly ISettingsService _settingsService; // ---!!! ISettingsService 존재 및 참조 확인 필요 !!!---
        private readonly Action _closeViewAction;

        // --- Backing Fields & Properties --- (AppSettings 모델의 속성과 일치 필요)
        private string _apiBaseUrl = string.Empty; // 예시: AppSettings 모델 속성 사용
        public string ApiBaseUrl { get => _apiBaseUrl; set => SetProperty(ref _apiBaseUrl, value); }

        private bool _defaultPopupOption = false;
        public bool DefaultPopupOption { get => _defaultPopupOption; set => SetProperty(ref _defaultPopupOption, value); }

        private string _senderName = string.Empty;
        public string SenderName { get => _senderName; set => SetProperty(ref _senderName, value); }
        // ... (기타 필요한 설정 속성들) ...

        private bool _isBusy = false;
        public bool IsBusy { get => _isBusy; private set => SetProperty(ref _isBusy, value); }
        private string _busyMessage = string.Empty;
        public string BusyMessage { get => _busyMessage; private set => SetProperty(ref _busyMessage, value); }

        public ICommand SaveSettingsCommand { get; }
        public ICommand CancelCommand { get; }

        // --- 생성자 (ISettingsService 주입) ---
        public SettingsViewModel(Action closeViewAction /*, ISettingsService settingsService */)
        {
            _closeViewAction = closeViewAction;
            // _settingsService = settingsService ?? throw new ArgumentNullException(nameof(settingsService));

            SaveSettingsCommand = new RelayCommand(async (_) => await ExecuteSaveSettingsAsync(), CanExecuteSaveSettings);
            CancelCommand = new RelayCommand(ExecuteCancel);

            // 생성 시 설정 로드 (서비스 주입 후 호출)
            // _ = LoadSettingsAsync();
            LoadSettings(); // 임시 동기 호출 또는 비동기 로드
        }

        // --- Private Methods ---
        // LoadSettingsAsync 대신 임시 동기 메서드 (실제로는 비동기 권장)
        private void LoadSettings()
        {
            if (_settingsService == null) { BusyMessage = "설정 서비스를 사용할 수 없습니다."; return; } // null 체크

            IsBusy = true; BusyMessage = "설정 로딩 중...";
            try
            {
                // ---!!! AppSettings 타입 사용 확인 !!!---
                AppSettings settings = Task.Run(() => _settingsService.LoadSettingsAsync()).Result; // 실제로는 await 사용 권장
                if (settings != null)
                {
                    ApiBaseUrl = settings.ApiBaseUrl; // AppSettings 속성 사용
                    DefaultPopupOption = settings.DefaultPopupOption;
                    SenderName = settings.SenderName;
                    // ... 다른 설정 로드 ...
                }
            }
            catch (Exception ex) { BusyMessage = $"설정 로드 오류: {ex.Message}"; }
            finally { IsBusy = false; }
        }


        private async Task ExecuteSaveSettingsAsync()
        {
            if (IsBusy || _settingsService == null) return;
            IsBusy = true; BusyMessage = "설정 저장 중...";
            try
            {
                // ---!!! AppSettings 타입 사용 확인 !!!---
                AppSettings settings = new AppSettings {
                    ApiBaseUrl = this.ApiBaseUrl, // ViewModel 속성 -> AppSettings 속성
                    DefaultPopupOption = this.DefaultPopupOption,
                    SenderName = this.SenderName
                    // ... 다른 설정 저장 ...
                };
                await _settingsService.SaveSettingsAsync(settings);
                if (_closeViewAction != null) _closeViewAction.Invoke();
            }
            catch (Exception ex) { /* ... 오류 처리 ... */ BusyMessage = $"설정 저장 오류: {ex.Message}"; }
            finally { IsBusy = false; }
        }

        private bool CanExecuteSaveSettings(object parameter) => !IsBusy;
        private void ExecuteCancel(object parameter) { if (_closeViewAction != null) _closeViewAction.Invoke(); }
    }
}
다음 단계:

위에 제공된 코드로 해당 파일들 (AppSettings.cs, ISettingsService.cs, IPMemoService.cs, SettingsViewModel.cs)의 내용을 교체하거나 생성합니다.
**클라이언트 프로젝트(MemoAppMGSP)**가 MemoAppMGSP.SharedModels 프로젝트를 참조하고 있는지 다시 한번 확인합니다.
**클라이언트 프로젝트(MemoAppMGSP)**에 Newtonsoft.Json NuGet 패키지가 설치되어 있는지 확인하고 없다면 설치합니다.
솔루션 정리 및 다시 빌드를 수행하여 에러가 해결되었는지 확인합니다.
이제 스크린샷에 보이던 에러들은 App.xaml 관련 부분을 제외하고 해결되어야 합니다. App.xaml 관련 에러(XDGxxxx)는 위 파일들이 올바르게 수정되고 참조가 설정된 후, App.xaml의 xmlns 선언과 리소스 정의 부분을 확인하면 해결될 것입니