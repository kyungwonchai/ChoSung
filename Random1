using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private List<Tuple<DateTime, string>> allFolderInfo = new List<Tuple<DateTime, string>>();  // 날짜와 정보를 튜플로 저장

    public Form1()
    {
        InitializeComponent();
        StartFolderAnalysis(@"C:\Path\To\Start");
    }

    private void StartFolderAnalysis(string path)
    {
        Thread thread = new Thread(() => AnalyzeFolders(path, true));
        thread.IsBackground = true;
        thread.Start();
    }

    private void AnalyzeFolders(string path, bool isRootCall)
    {
        try
        {
            DirectoryInfo rootDir = new DirectoryInfo(path);
            foreach (DirectoryInfo dir in rootDir.GetDirectories())
            {
                try
                {
                    long size = CalculateFolderSize(dir);
                    if (size >= 1073741824) // 1GB 이상
                    {
                        DateTime lastModified = GetMostRecentFileDate(dir);
                        string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                        allFolderInfo.Add(new Tuple<DateTime, string>(lastModified, info));
                        UpdateListBoxes();  // 실시간으로 리스트 박스 업데이트
                    }
                    AnalyzeFolders(dir.FullName, false);
                }
                catch (UnauthorizedAccessException)
                {
                    continue;
                }
            }

            if (isRootCall)
            {
                UpdateListBox1("분석 완료");
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"An error occurred: {ex.Message}");
        }
    }

    private DateTime GetMostRecentFileDate(DirectoryInfo directory)
    {
        FileInfo[] files = directory.GetFiles();
        if (files.Length == 0) return DateTime.MinValue;
        return files.Max(file => file.LastWriteTime);
    }

    private long CalculateFolderSize(DirectoryInfo directory)
    {
        long size = 0;
        try
        {
            FileInfo[] files = directory.GetFiles();
            foreach (FileInfo file in files)
            {
                size += file.Length;
            }
        }
        catch (UnauthorizedAccessException)
        {
            // 파일 접근 권한 없음
        }
        return size;
    }

    private void UpdateListBoxes()
    {
        if (listBox1.InvokeRequired || listBox2.InvokeRequired)
        {
            listBox1.Invoke(new Action(UpdateListBoxes));
            listBox2.Invoke(new Action(UpdateListBoxes));
        }
        else
        {
            var sortedList = allFolderInfo.OrderByDescending(t => t.Item1).ToList();
            listBox1.Items.Clear();
            listBox2.Items.Clear();

            for (int i = 0; i < sortedList.Count; i++)
            {
                if (i < 5)  // 최근 5개 아이템을 ListBox1에 추가
                {
                    listBox1.Items.Add(sortedList[i].Item2);
                }
                else  // 나머지 아이템을 ListBox2에 추가
                {
                    listBox2.Items.Add(sortedList[i].Item2);
                }
            }
        }
    }

    private void UpdateListBox1(string info)
    {
        if (listBox1.InvokeRequired)
        {
            listBox1.Invoke(new Action<string>(UpdateListBox1), info);
        }
        else
        {
            listBox1.Items.Add(info);
        }
    }
}
