I MATRIX AUD플랫폼의 lisgrid 사용 시 겪고 계신 문제 두 가지에 대한 해결 방법을 명확히 알려드리겠습니다.

문제 요약
계산 컬럼 문제: 새로 추가한 컬럼에 다른 컬럼의 값을 문자열 치환하여 보여주려 했으나, 데이터는 안 나오고 컬럼 제목만 표시됨.

필터링 문제: 버튼을 클릭했을 때, 특정 컬럼의 값들 중 지정된 값만 보이도록 필터링 기능을 구현하고 싶음.

## 1. 수식 컬럼에 데이터가 표시되지 않는 문제
결론부터 말씀드리면, 컬럼의 껍데기(Layout)만 정의하고 실제 각 행(Row)에 데이터를 채워 넣는 방법을 지정하지 않았기 때문입니다. lisgrid는 단순히 컬럼을 추가한다고 해서 다른 컬럼의 값을 자동으로 계산해주지 않습니다.

이를 해결하기 위해서는 컬럼의 labelFunction 또는 itemRenderer 속성을 사용하여 각 셀에 표시될 내용을 동적으로 생성해야 합니다.

해결 방법: labelFunction 사용
labelFunction은 각 행의 데이터를 파라미터로 받아, 해당 셀에 표시할 텍스트(HTML 포함 가능)를 반환하는 함수입니다.

예시 코드:

'status'라는 컬럼의 값이 '01'이면 '정상', '02'이면 '오류'로 치환하여 'statusText'라는 새 컬럼에 보여주는 경우입니다.

JavaScript

// 1. lisgrid의 레이아웃을 정의합니다.
var columnLayout = [
    // ... 다른 컬럼들 ...
    {
        dataField: "status", // 원본 데이터 필드
        headerText: "상태코드",
        width: 80,
        visible: false // 원본 컬럼은 숨길 수 있습니다.
    },
    {
        dataField: "statusText", // 새로 추가할 계산 컬럼
        headerText: "상태명",
        width: 120,
        // ✨ 이 부분이 핵심입니다.
        labelFunction: function(item, statusValue) {
            // item: 해당 행의 전체 데이터 객체 (e.g., { id: '...', status: '01', ... })
            // statusValue: 현재 셀의 값 (dataField가 "statusText"이므로 처음엔 undefined)
            
            // 원본 컬럼('status')의 값을 가져옵니다.
            var originalStatus = item.status;
            var displayText = "";

            if (originalStatus === '01') {
                displayText = '<span style="color: blue;">정상</span>';
            } else if (originalStatus === '02') {
                displayText = '<span style="color: red;">오류</span>';
            } else {
                displayText = "알 수 없음";
            }
            
            return displayText; // 계산된 문자열을 반환합니다.
        }
    }
    // ... 다른 컬럼들 ...
];

// 2. lisgrid에 레이아웃을 설정합니다.
// lisGrid 변수는 AUD플랫폼에서 생성한 lisgrid 인스턴스라고 가정합니다.
lisGrid.setColumnLayout(columnLayout);

// 3. 데이터를 설정하면 labelFunction이 각 행마다 실행됩니다.
lisGrid.setData(dataProvider);
핵심 포인트:

새로운 컬럼(statusText)을 레이아웃에 추가합니다. 이 컬럼은 실제 dataProvider에 존재하지 않아도 됩니다.

labelFunction 내부에서 item 파라미터를 통해 해당 행의 다른 컬럼 값(item.status)에 접근하여 원하는 문자열로 가공 후 반환합니다.

## 2. 버튼 클릭 시 특정 값으로 필터링하는 기능
lisgrid는 필터링을 위한 API를 제공합니다. 버튼의 클릭 이벤트 핸들러 내에서 이 API를 호출하여 원하는 조건으로 데이터를 필터링할 수 있습니다. setFilter 또는 유사한 이름의 함수를 사용합니다.

해결 방법: setFilter API 사용
예시 코드:

'정상' 상태인 데이터만 필터링하는 버튼과 '오류' 상태인 데이터만 필터링하는 버튼을 구현하는 경우입니다. 필터링 대상 컬럼은 dataField가 'status'인 컬럼입니다.

HTML

<button id="filterNormalBtn">정상만 보기</button>
<button id="filterErrorBtn">오류만 보기</button>
<button id="clearFilterBtn">필터 해제</button>
JavaScript

// lisGrid 변수는 AUD플랫폼에서 생성한 lisgrid 인스턴스라고 가정합니다.

// '정상만 보기' 버튼 이벤트 리스너
document.getElementById('filterNormalBtn').addEventListener('click', function() {
    // 'status' 컬럼의 값이 '01'인 항목만 필터링합니다.
    // ✨ setFilter(dataField, filterValues)
    lisGrid.setFilter("status", ["01"]); 
});

// '오류만 보기' 버튼 이벤트 리스너
document.getElementById('filterErrorBtn').addEventListener('click', function() {
    // 'status' 컬럼의 값이 '02'인 항목만 필터링합니다.
    lisGrid.setFilter("status", ["02"]);
});

// '필터 해제' 버튼 이벤트 리스너
document.getElementById('clearFilterBtn').addEventListener('click', function() {
    // 필터를 해제할 때는 빈 배열([])을 전달하거나
    // removeFilter 함수를 사용합니다. (API 문서를 확인하세요)
    lisGrid.setFilter("status", []);
    // 또는 lisGrid.removeFilter("status");
});
핵심 포인트:

setFilter(dataField, filterValues) 함수를 사용합니다.

dataField: 필터링을 적용할 컬럼의 dataField명을 문자열로 전달합니다.

filterValues: 해당 컬럼에서 보여주고 싶은 값들의 배열을 전달합니다. 특정 값 하나만 필터링하더라도 배열 ['01'] 형태로 전달해야 합니다.

필터를 해제하려면 빈 배열 []을 전달하면 됩니다.

💡 추가 팁:

정확한 함수명(setFilter, removeFilter 등)과 파라미터는 사용하고 계신 BI MATRIX AUD플랫폼의 정확한 버전과 개발자 가이드를 반드시 확인해주세요. 위 예시는 일반적인 데이터그리드 API 패턴을 기반으로 작성되었습니다.

변수명(lisGrid, columnLayout 등)은 실제 프로젝트의 인프라 및 명명 규칙에 맞게 일관성 있게 사용하시는 것이 중요합니다.

