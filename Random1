 설정하려면, 현재 시간을 기준으로 07시 이전과 07시 이후를 구분해야 합니다. 이를 위해 현재 시간을 기준으로 날짜를 계산하는 로직을 수정할 필요가 있습니다.

아래는 C# 코드에서 날짜 계산 로직을 수정하여 하루의 시작을 07시로 설정하는 예제입니다.

C# 코드 수정 (ShiftReportPage.xaml.cs)
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;

namespace ShiftReportApp
{
    public partial class ShiftReportPage : Page
    {
        private string connectionString;

        public ShiftReportPage(string connectionString)
        {
            InitializeComponent();
            this.connectionString = connectionString;
            Loaded += ShiftReportPage_Loaded;
        }

        private void ShiftReportPage_Loaded(object sender, RoutedEventArgs e)
        {
            LoadTodayReport(null, null);
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = GetShiftStartDateTime(DateTime.Now);
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = GetShiftStartDateTime(DateTime.Now).AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private DateTime GetShiftStartDateTime(DateTime currentDateTime)
        {
            DateTime shiftStartDateTime;

            if (currentDateTime.Hour < 7)
            {
                // If the current time is before 7 AM, use the previous day's 7 AM as the shift start
                shiftStartDateTime = currentDateTime.Date.AddDays(-1).AddHours(7);
            }
            else
            {
                // If the current time is 7 AM or after, use today's 7 AM as the shift start
                shiftStartDateTime = currentDateTime.Date.AddHours(7);
            }

            return shiftStartDateTime;
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            gridControlReports.ItemsSource = dataTable.DefaultView;
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            string date = ((Label)FindName($"Date{number}")).Content.ToString();
            string ipAddress = GetLocalIPAddress();
            SaveReport(date, number, shiftType, report, ipAddress);
        }

        private void SaveReport(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();

                SaveLog(date, number, shiftType, report, ipAddress);
            }
        }

        private void SaveLog(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveLog", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);
                cmd.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnSearchReports(object sender, RoutedEventArgs e)
        {
            DateTime? startDate = startDatePicker.DateTime;
            DateTime? endDate = endDatePicker.DateTime;

            if (startDate.HasValue && endDate.HasValue)
            {
                LoadSearchReports(startDate.Value.ToString("yyyy-MM-dd"), endDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReports(string startDate, string endDate)
        {
            DataTable searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDateRange", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@StartDate", startDate);
                cmd.Parameters.AddWithValue("@EndDate", endDate);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            string searchText = logSearchTextBox.Text.Trim();
            if (!string.IsNullOrEmpty(searchText))
            {
                LoadLogReport(searchText);
            }
        }

        private void OnLogSearchKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                OnLogSearch(sender, e);
            }
        }

        private void LoadLogReport(string searchText)
        {
            DataTable logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("SearchLogs", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SearchText", searchText);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            gridControlLog.ItemsSource = logTable.DefaultView;
        }
    }
}
이 코드는 현재 시간을 기준으로 하루의 시작과 끝을 07시부터 그다음날 06:59까지로 설정합니다. GetShiftStartDateTime 메서드를 사용하여 현재 시간이 07시 이전인지 이후인지를 판단하고, 해당 날짜의 07시를 기준으로 시작 시간을 계산합니다. 이 