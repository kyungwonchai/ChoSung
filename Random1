 폼(UI)의 응답성을 유지하면서 백그라운드에서 긴 작업을 처리하려면 멀티스레딩을 활용해야 합니다. C#에서는 Task와 Thread 외에도 UI 스레드와의 안전한 상호 작용을 위해 Invoke 또는 BeginInvoke 메서드를 사용하여 Delegate를 활용할 수 있습니다. 여기서는 Thread를 사용하여 백그라운드에서 디스크 검사를 실행하고, UI 업데이트는 Invoke를 통해 안전하게 수행하는 예제를 제공하겠습니다.

아래의 코드는 WPF를 사용하여 ListBox에 검사 결과를 안전하게 업데이트하는 방법을 보여줍니다.

XAML 코드
xml
Copy code
<Window x:Class="DiskSpaceAnalyzer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Disk Space Analyzer" Height="450" Width="800">
    <Grid>
        <ListBox Name="listBoxFolders" Margin="10" />
    </Grid>
</Window>
C# 코드
csharp
Copy code
using System;
using System.IO;
using System.Threading;
using System.Windows;

namespace DiskSpaceAnalyzer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            StartFolderAnalysis(@"C:\Path\To\Start");
        }

        private void StartFolderAnalysis(string path)
        {
            Thread thread = new Thread(() => AnalyzeFolders(path));
            thread.Start();
        }

        private void AnalyzeFolders(string path)
        {
            DirectoryInfo rootDir = new DirectoryInfo(path);
            foreach (DirectoryInfo dir in rootDir.GetDirectories())
            {
                long size = CalculateFolderSize(dir);
                if (size >= 1073741824) // 1GB 이상
                {
                    string info = $"{dir.FullName} ({size} bytes)";
                    Dispatcher.Invoke(() => listBoxFolders.Items.Add(info));  // UI 스레드에서 안전하게 업데이트
                }
                AnalyzeFolders(dir.FullName);  // 재귀적으로 하위 폴더 분석
            }
        }

        private long CalculateFolderSize(DirectoryInfo directory)
        {
            long size = 0;
            FileInfo[] files = directory.GetFiles();
            foreach (FileInfo file in files)
            {
                size += file.Length;
            }
            return size;
        }
    }
}
설명
MainWindow 생성자: 애플리케이션의 메인 윈도우가 생성될 때 시작 폴더 경로를 설정하고 폴더 분석을 시작하는 스레드를 생성합니다.
AnalyzeFolders 메서드: 디렉토리를 재귀적으로 검사하고, 각 폴더의 크기를 계산하여 1GB 이상인 경우 UI 스레드에서 ListBox에 결과를 추가합니다.
CalculateFolderSize 메서드: 주어진 폴더 내 파일의 총 크기를 계산합니다.
이 구조는 백그라운드에서 폴더를 분석하면서도 메인 UI의 응답성을 유지하도록 설계되었습니다. 디렉토리의 크기를 계산하는 작업은 백그라운드 스레드에서 수행되고, UI 업데이트는 Dispatcher.Invoke를 사용하여 안전하게 수행됩니다. 이렇게 하면 사용자가 UI와 상호 작용하면서 동시