import React, { useEffect, useState } from "react";
import { Line } from "react-chartjs-2";

const LineChart = () => {
  const [data, setData] = useState({
    labels: [],
    datasets: [
      {
        label: "Random Numbers",
        data: [],
        fill: true,
        borderColor: "black", // 선 색상을 검정으로 설정
        borderWidth: 2,
      },
    ],
  });

  useEffect(() => {
    const updateData = () => {
      // 최대 50개의 데이터만 유지하기 위한 배열 선언
      const maxDataLength = 50;
      const newData = { ...data };
      if (newData.labels.length >= maxDataLength) {
        newData.labels.shift();
        newData.datasets[0].data.shift();
      }

      // 랜덤 숫자 생성 및 데이터 업데이트
      const randomNum = Math.floor(Math.random() * 100) + 1;
      newData.labels.push(new Date().toLocaleTimeString());
      newData.datasets[0].data.push(randomNum);
      setData(newData);
    };

    const interval = setInterval(updateData, 100); // 100ms 마다 업데이트 (속도를 빠르게 하려면 간격을 더 줄일 수 있음)

    // 컴포넌트가 unmount 될 때 interval을 정리하여 메모리 누수를 방지
    return () => clearInterval(interval);
  }, [data]);

  const options = {
    animation: {
      duration: 0, // 애니메이션 효과 비활성화
    },
    scales: {
      x: {
        grid: {
          color: "rgba(0, 0, 0, 0)", // x축 그리드 라인 색상 투명하게
        },
      },
      y: {
        grid: {
          color: "rgba(0, 0, 0, 0)", // y축 그리드 라인 색상 투명하게
        },
      },
    },
    plugins: {
      legend: {
        display: true,
        position: "top",
      },
      filler: {
        propagate: false, // 그라데이션으로 채우는 것 비활성화
      },
      beforeDraw: (chart) => {
        const ctx = chart.canvas.getContext("2d");
        ctx.save();
        ctx.globalCompositeOperation = "destination-over";
        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, chart.width, chart.height);
        ctx.restore();
      },
    },
    elements: {
      point: {
        radius: 0, // 데이터 포인트의 점 숨김
      },
    },
  };

  return <Line data={data} options={options} />;
};

export default LineChart;
