using UnityEngine;
using UnityEditor;

public class SceneSetupWizard
{
    [MenuItem("Tools/SMD Rack/!!! 모든 씬 자동 설정 !!!")]
    private static void SetupEverything()
    {
        // --- 1. 랙 레이아웃 생성 ---
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        string installationsName = "Rack_Installations";
        GameObject installationsObject = GameObject.Find(installationsName);
        if (installationsObject != null)
        {
             if(!EditorUtility.DisplayDialog("경고", "기존 Rack_Installations 오브젝트가 있습니다. 삭제하고 새로 생성하시겠습니까?", "네", "아니오"))
             {
                return;
             }
             GameObject.DestroyImmediate(installationsObject);
        }
        installationsObject = new GameObject(installationsName);

        Bounds bounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if (renderers.Length > 0)
        {
            bounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers) { bounds.Encapsulate(renderer.bounds); }
        }
        float rackWidth = bounds.size.x;
        Quaternion standingRotation = Quaternion.Euler(-90, 0, 0);

        for (int i = 0; i < 12; i++)
        {
            GameObject rackA = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, installationsObject.transform);
            rackA.name = $"A_{i + 1:02d}";
            rackA.transform.position = new Vector3(i * (rackWidth + 0.01f), 0, 0);
            rackA.transform.rotation = standingRotation;

            GameObject rackB = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, installationsObject.transform);
            rackB.name = $"B_{i + 1:02d}";
            rackB.transform.position = new Vector3(i * (rackWidth + 0.01f), 0, 4.0f);
            rackB.transform.rotation = standingRotation * Quaternion.Euler(0, 180, 0);
        }

        // --- 2. RackSystemManager 오브젝트 생성 및 설정 ---
        string managerName = "RackSystemManager";
        GameObject managerObject = GameObject.Find(managerName);
        if (managerObject == null)
        {
            managerObject = new GameObject(managerName);
        }

        RackSystemManager managerScript = managerObject.GetComponent<RackSystemManager>();
        if (managerScript == null)
        {
            managerScript = managerObject.AddComponent<RackSystemManager>();
        }

        // --- 3. 필요한 에셋(머티리얼) 찾기 및 자동 연결 ---
        managerScript.rackContainer = installationsObject.transform;
        managerScript.defaultLampMaterial = AssetDatabase.LoadAssetAtPath<Material>("Assets/Materials/DefaultLampMaterial.mat");
        managerScript.litLampMaterial = AssetDatabase.LoadAssetAtPath<Material>("Assets/Materials/LitLampMaterial.mat");
        
        if(managerScript.defaultLampMaterial == null || managerScript.litLampMaterial == null)
        {
             EditorUtility.DisplayDialog("경고", "'Assets/Materials' 폴더에 'DefaultLampMaterial'과 'LitLampMaterial'이 있는지 확인해주세요.", "확인");
        }

        // --- 4. 물리 효과 자동 추가 (프리팹에) ---
        string prefabPath = AssetDatabase.GetAssetPath(rackPrefab);
        GameObject prefabContents = PrefabUtility.LoadPrefabContents(prefabPath);
        foreach(Transform child in prefabContents.GetComponentsInChildren<Transform>(true))
        {
            if(child.name.Contains("_Mask_") && child.GetComponent<Rigidbody>() == null)
            {
                child.gameObject.AddComponent<Rigidbody>();
            }
            if((child.name.Contains("Floor_Divider_") || child.name.Contains("Frame_Bottom")) && child.GetComponent<BoxCollider>() == null)
            {
                child.gameObject.AddComponent<BoxCollider>();
            }
        }
        PrefabUtility.SaveAsPrefabAsset(prefabContents, prefabPath);
        PrefabUtility.UnloadPrefabContents(prefabContents);


        EditorUtility.DisplayDialog("완료", "모든 씬 구성 및 연결이 자동으로 완료되었습니다. UI만 설정해주세요.", "확인");
    }
}