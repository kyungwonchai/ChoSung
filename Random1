 XAML에서 바로 처리하는 것은 때때로 성능상 이슈를 야기할 수 있습니다. 선택된 행의 수에 따라 스타일을 바꾸는 처리는 코드비하인드에서 직접 처리하는 것이 효율적일 수 있습니다. 이렇게 하면 XAML은 기본적인 스타일만 정의하고, 실제 로직은 C# 코드에서 처리하여 더 빠르고 반응적으로 만들 수 있습니다.

다음은 C#에서 선택된 행의 수에 따라 배경색을 조정하는 방법입니다:

C# 코드비하인드에서 처리
선택 변경 이벤트 연결하기: TableView의 SelectionChanged 이벤트를 이용하여 선택된 행의 수에 따라 행의 배경색을 변경합니다.
행의 배경색 변경: 선택된 행의 Background 속성을 직접 변경합니다.
아래 코드는 SelectionChanged 이벤트를 처리하고 선택된 행의 수에 따라 배경색을 변경하는 예제입니다:

csharp
Copy code
private void TableView_SelectionChanged(object sender, DevExpress.Xpf.Grid.GridSelectionChangedEventArgs e)
{
    // 모든 행의 배경색을 초기화
    foreach (var rowHandle in tableView.Grid.GetRowHandles())
    {
        var row = tableView.Grid.GetRowElementByRowHandle(rowHandle) as GridRowContent;
        if (row != null)
            row.Background = Brushes.White;  // 기본 배경색
    }

    // 선택된 행이 두 개일 때
    if (tableView.SelectedRows.Count == 2)
    {
        foreach (var selectedRowHandle in tableView.SelectedRowHandles)
        {
            var selectedRow = tableView.Grid.GetRowElementByRowHandle(selectedRowHandle) as GridRowContent;
            if (selectedRow != null)
                selectedRow.Background = Brushes.Red;  // 빨간색으로 변경

            // Console 출력 (컬럼 "abc" 값을 가정)
            var rowData = tableView.Grid.GetRow(selectedRowHandle) as YourRowType;
            Console.WriteLine($"ColumnABC value: {rowData.ColumnABC}");
        }
    }
    else if (tableView.SelectedRows.Count == 1)
    {
        foreach (var selectedRowHandle in tableView.SelectedRowHandles)
        {
            var selectedRow = tableView.Grid.GetRowElementByRowHandle(selectedRowHandle) as GridRowContent;
            if (selectedRow != null)
                selectedRow.Background = Brushes.LightPink;  // 연한 핑크색으로 변경
        }
    }
}
위 코드에서 YourRowType은 데이터 그리드에 바인딩된 데이터의 형식입니다. ColumnABC는 예시로 사용된 컬럼 이름이며, 실제 사용하는 컬럼 이름으로 바꿔주셔야 합니다. 이 방식은 선택된 행의 배경색을 즉각적으로 변경할 수 있으며, XAML에서 복잡한 트