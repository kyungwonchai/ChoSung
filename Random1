래는 ModelName이 동적으로 추가될 수 있는 상황을 감안하여 최종적으로 수정된 전체 솔루션 코드입니다. IP-Result 내의 동적인 ModelName 관리를 중심으로 구현했습니다.

MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private readonly Dictionary<string, Dictionary<string, DateTime>> _lastUploadedTimes = new Dictionary<string, Dictionary<string, DateTime>>(); // IP별 ModelName별 마지막 업로드 시간
        private bool _isRunning = false; // 현재 작업 실행 상태 플래그

        public MainWindow()
        {
            InitializeComponent();

            // DB에서 IP 리스트와 마지막 업로드 시간 초기화
            _ipAddresses = GetIpAddressesFromDatabase();
            AddLog($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

            InitializeLastUploadedTimes();
            AddLog("IP 및 ModelName별 마지막 업로드 시간 초기화 완료.");

            // 프로그램 시작 시 작업 반복 실행
            _ = StartProcessingLoopAsync();
        }

        /// <summary>
        /// 작업을 1분 간격으로 반복 실행
        /// </summary>
        private async Task StartProcessingLoopAsync()
        {
            while (true) // 무한 반복
            {
                if (!_isRunning)
                {
                    _isRunning = true;

                    try
                    {
                        await StartProcessingAsync(); // 작업 실행
                    }
                    catch (Exception ex)
                    {
                        AddLog($"작업 중 에러 발생: {ex.Message}");
                    }
                    finally
                    {
                        _isRunning = false;
                    }
                }

                // 1분 대기
                await Task.Delay(60000);
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                AddLog($"IP {ip} 처리 중...");

                try
                {
                    // 해당 IP의 Result 폴더에서 ModelName 목록 가져오기
                    var modelNames = GetModelNames($@"\\{ip}\Result");

                    foreach (var modelName in modelNames)
                    {
                        // 새로운 ModelName 발견 시 기본값 추가
                        if (!_lastUploadedTimes[ip].ContainsKey(modelName))
                        {
                            _lastUploadedTimes[ip][modelName] = DateTime.Now.AddYears(-1); // 1년 전 기본값
                            AddLog($"IP {ip}에 새로운 ModelName 발견: {modelName}, 기본값 설정 완료.");
                        }

                        // ModelName별 마지막 업로드 시간 가져오기
                        var lastUploadedTime = _lastUploadedTimes[ip][modelName];

                        // 파일 처리
                        var processor = new FileProcessor(lastUploadedTime, ip, modelName);
                        var newRows = processor.GetNewRows($@"\\{ip}\Result\{modelName}");

                        if (newRows.Any())
                        {
                            var uploader = new DatabaseUploader();
                            await uploader.UploadToDatabaseAsync(newRows);

                            AddLog($"IP {ip}, ModelName {modelName}에서 {newRows.Count}개의 데이터 업로드 완료.");

                            // 마지막 업로드 시간 갱신
                            _lastUploadedTimes[ip][modelName] = newRows.Max(row => (DateTime)row["InspectionTime"]);
                        }
                        else
                        {
                            AddLog($"IP {ip}, ModelName {modelName}: 새로운 데이터 없음.");
                        }
                    }
                }
                catch (Exception ex)
                {
                    AddLog($"IP {ip} 처리 중 에러 발생: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// Result 폴더 내의 ModelName 목록 가져오기
        /// </summary>
        private List<string> GetModelNames(string resultPath)
        {
            try
            {
                if (!Directory.Exists(resultPath)) return new List<string>();

                return Directory.GetDirectories(resultPath)
                    .Select(Path.GetFileName)
                    .ToList();
            }
            catch (Exception ex)
            {
                AddLog($"Result 폴더에서 ModelName 목록을 가져오는 중 에러 발생: {ex.Message}");
                return new List<string>();
            }
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
            var ipList = new List<string>();

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                    }
                }
            }

            return ipList;
        }

        /// <summary>
        /// DB에서 IP 및 ModelName별로 마지막 업로드된 InspectionTime 초기화
        /// </summary>
        private void InitializeLastUploadedTimes()
        {
            const string query = "SELECT IPAddress, ModelName, MAX(InspectionTime) AS LastInspectionTime FROM YourTable GROUP BY IPAddress, ModelName";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var ipAddress = reader.GetString(0);
                        var modelName = reader.GetString(1);
                        var lastTime = reader.IsDBNull(2) ? DateTime.Now.AddYears(-1) : reader.GetDateTime(2);

                        if (!_lastUploadedTimes.ContainsKey(ipAddress))
                        {
                            _lastUploadedTimes[ipAddress] = new Dictionary<string, DateTime>();
                        }

                        _lastUploadedTimes[ipAddress][modelName] = lastTime;
                    }
                }
            }

            // 없는 IP 및 ModelName에 기본값 설정
            foreach (var ip in _ipAddresses)
            {
                if (!_lastUploadedTimes.ContainsKey(ip))
                {
                    _lastUploadedTimes[ip] = new Dictionary<string, DateTime>();
                }

                var modelNames = GetModelNames($@"\\{ip}\Result");
                foreach (var modelName in modelNames)
                {
                    if (!_lastUploadedTimes[ip].ContainsKey(modelName))
                    {
                        _lastUploadedTimes[ip][modelName] = DateTime.Now.AddYears(-1);
                    }
                }
            }
        }

        /// <summary>
        /// 리스트박스에 로그를 추가하고, 50개까지만 유지합니다.
        /// </summary>
        private void AddLog(string message)
        {
            string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            Application.Current.Dispatcher.Invoke(() =>
            {
                // 리스트박스에 로그 추가
                StatusListBox.Items.Add(log);

                // 리스트박스 항목이 50개를 초과하면 오래된 항목 삭제
                while (StatusListBox.Items.Count > 50)
                {
                    StatusListBox.Items.RemoveAt(0); // 가장 오래된 항목 삭제
                }
            });

            // 디버그 출력
            Debug.WriteLine(log);
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastUploadedTime;
        private readonly string _ipAddress;
        private readonly string _modelName;

        public FileProcessor(DateTime lastUploadedTime, string ipAddress, string modelName)
        {
            _lastUploadedTime = lastUploadedTime;
            _ipAddress = ipAddress;
            _modelName = modelName;
        }

        /// <summary>
        /// 새로운 데이터 행 가져오기
        /// </summary>
        public List<Dictionary<string, object>> GetNewRows(string rootPath)
        {
            var newRows = new List<Dictionary<string, object>>();
            var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

            foreach (var file in csvFiles)
            {
                using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
                {
                    reader.ReadLine(); // 첫 번째 행(헤더) 무시
                    while (!reader.EndOfStream)
                    {
                        var values = reader.ReadLine()?.Split(',');
                        if (values == null || values.Length < 4) continue;

                        // 4열이 숫자(정수 또는 실수)가 아니면 제외
                        if (!decimal.TryParse(values[3], out _)) continue;

                        var row = new Dictionary<string, object>
                        {
                            ["InspectionTime"] = DateTime.Parse(values[0]),
                            ["ModelName"] = _modelName,
                            ["AlignResult"] = values[2],
                            ["MP1DATA"] = float.Parse(values[3]),
                            ["MP1RESULT"] = values[4],
                            ["ipname"] = _ipAddress // 현재 IP 추가
                        };

                        // InspectionTime 조건 검사
                        if ((DateTime)row["InspectionTime"] > _lastUploadedTime)
                        {
                            newRows.Add(row);
                        }
                    }
                }
            }

            return newRows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]);
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
                        command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);
                        command.Parameters.AddWithValue("@ipname", row["ipname"]);

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
변경된 주요 내용
ModelName 관리 강화:

IP-ModelName 구조를 관리하며, 동적으로 추가된 ModelName을 처리.
초기화 시 기본값 설정:

새로운 ModelName을 발견하면 기본값(1년 전)으로 추가.
모든 작업에서 ModelName 기반 처리:

각 ModelName의 마지막 업로드 시간을 관리하고 갱신.
로그와 에러 처리:
