습니다. COM 포트의 설정(패리티 비트, 데이터 비트, 스톱 비트, 보레이트)을 사용자가 UI에서 설정하고, 이를 저장할 수 있도록 수정하겠습니다.

다음은 WPF 애플리케이션의 업데이트된 코드입니다. 사용자가 보레이트, 패리티 비트, 데이터 비트, 스톱 비트를 설정할 수 있는 ComboBox를 추가하고, 설정 값을 INI 파일에 저장 및 로드하는 기능을 추가합니다.

1. WPF XAML 디자인 수정 (MainWindow.xaml)
UI에 보레이트, 패리티, 데이터 비트, 스톱 비트를 설정할 수 있는 ComboBox를 추가합니다.

xml
코드 복사
<Window x:Class="SerialPortCommunication.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Serial Port Communication" Height="500" Width="800">
    <Grid>
        <!-- COM 포트 선택 ComboBox -->
        <ComboBox x:Name="comboBoxPorts" Width="100" Height="30" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top"/>
        
        <!-- 보레이트 설정 ComboBox -->
        <ComboBox x:Name="comboBoxBaudRate" Width="100" Height="30" HorizontalAlignment="Left" Margin="120,10,0,0" VerticalAlignment="Top">
            <ComboBoxItem Content="9600"/>
            <ComboBoxItem Content="19200"/>
            <ComboBoxItem Content="38400"/>
            <ComboBoxItem Content="57600"/>
            <ComboBoxItem Content="115200"/>
        </ComboBox>
        
        <!-- 패리티 설정 ComboBox -->
        <ComboBox x:Name="comboBoxParity" Width="100" Height="30" HorizontalAlignment="Left" Margin="230,10,0,0" VerticalAlignment="Top">
            <ComboBoxItem Content="None"/>
            <ComboBoxItem Content="Odd"/>
            <ComboBoxItem Content="Even"/>
            <ComboBoxItem Content="Mark"/>
            <ComboBoxItem Content="Space"/>
        </ComboBox>

        <!-- 데이터 비트 설정 ComboBox -->
        <ComboBox x:Name="comboBoxDataBits" Width="100" Height="30" HorizontalAlignment="Left" Margin="340,10,0,0" VerticalAlignment="Top">
            <ComboBoxItem Content="5"/>
            <ComboBoxItem Content="6"/>
            <ComboBoxItem Content="7"/>
            <ComboBoxItem Content="8"/>
        </ComboBox>

        <!-- 스톱 비트 설정 ComboBox -->
        <ComboBox x:Name="comboBoxStopBits" Width="100" Height="30" HorizontalAlignment="Left" Margin="450,10,0,0" VerticalAlignment="Top">
            <ComboBoxItem Content="1"/>
            <ComboBoxItem Content="1.5"/>
            <ComboBoxItem Content="2"/>
        </ComboBox>
        
        <Button Content="포트 열기" Width="100" Height="30" HorizontalAlignment="Left" Margin="560,10,0,0" VerticalAlignment="Top" Click="OpenPort_Click"/>

        <!-- 송신 데이터 입력 TextBox -->
        <TextBox x:Name="textBoxSendData" Width="300" Height="30" HorizontalAlignment="Left" Margin="10,50,0,0" VerticalAlignment="Top"/>
        <Button Content="전송" Width="100" Height="30" HorizontalAlignment="Left" Margin="320,50,0,0" VerticalAlignment="Top" Click="SendData_Click"/>

        <!-- 수신/응답 규칙 설정 DataGrid -->
        <DataGrid x:Name="dataGridRules" AutoGenerateColumns="False" Width="400" Height="200" HorizontalAlignment="Left" Margin="10,100,0,0" VerticalAlignment="Top">
            <DataGrid.Columns>
                <DataGridTextColumn Header="수신 값" Binding="{Binding ReceivedValue}" Width="*"/>
                <DataGridTextColumn Header="응답 값" Binding="{Binding ResponseValue}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
        <Button Content="규칙 저장" Width="100" Height="30" HorizontalAlignment="Left" Margin="420,100,0,0" VerticalAlignment="Top" Click="SaveRules_Click"/>
        
        <!-- 로그 표시 ListBox -->
        <ListBox x:Name="listBoxLogs" Width="750" Height="150" HorizontalAlignment="Left" Margin="10,310,0,0" VerticalAlignment="Top"/>
    </Grid>
</Window>
2. C# 코드 비하인드 수정 (MainWindow.xaml.cs)
사용자가 선택한 보레이트, 패리티, 데이터 비트, 스톱 비트를 시리얼 포트 설정에 적용하고, INI 파일에 저장 및 로드하는 기능을 추가합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.IO.Ports;
using System.IO;
using System.Windows;
using System.Windows.Threading;

namespace SerialPortCommunication
{
    public partial class MainWindow : Window
    {
        private SerialPort _serialPort;
        private ObservableCollection<Rule> _rules;
        private DispatcherTimer _timer;

        public MainWindow()
        {
            InitializeComponent();
            InitializeSerialPort();
            LoadPortSettings();
            LoadRules();
            _rules = new ObservableCollection<Rule>();
            dataGridRules.ItemsSource = _rules;
            _timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };
            _timer.Tick += Timer_Tick;
            _timer.Start();
        }

        private void InitializeSerialPort()
        {
            comboBoxPorts.ItemsSource = SerialPort.GetPortNames();
            comboBoxBaudRate.SelectedIndex = 0;
            comboBoxParity.SelectedIndex = 0;
            comboBoxDataBits.SelectedIndex = 3; // Default to 8 data bits
            comboBoxStopBits.SelectedIndex = 0; // Default to 1 stop bit
        }

        private void LoadPortSettings()
        {
            // INI 파일에서 COM 포트 설정 읽기
            var iniPath = "config.ini";
            if (File.Exists(iniPath))
            {
                var settings = File.ReadAllLines(iniPath);
                if (settings.Length >= 5)
                {
                    comboBoxPorts.SelectedItem = settings[0];
                    comboBoxBaudRate.SelectedItem = settings[1];
                    comboBoxParity.SelectedItem = settings[2];
                    comboBoxDataBits.SelectedItem = settings[3];
                    comboBoxStopBits.SelectedItem = settings[4];
                }
            }
        }

        private void LoadRules()
        {
            // INI 파일에서 규칙 읽기
            var iniPath = "rules.ini";
            if (File.Exists(iniPath))
            {
                var lines = File.ReadAllLines(iniPath);
                foreach (var line in lines)
                {
                    var parts = line.Split('/');
                    if (parts.Length == 2)
                    {
                        _rules.Add(new Rule { ReceivedValue = parts[0], ResponseValue = parts[1] });
                    }
                }
            }
        }

        private void SavePortSettings()
        {
            // INI 파일에 COM 포트 설정 저장
            var iniPath = "config.ini";
            using (var writer = new StreamWriter(iniPath))
            {
                writer.WriteLine(comboBoxPorts.SelectedItem);
                writer.WriteLine(comboBoxBaudRate.Text);
                writer.WriteLine(comboBoxParity.Text);
                writer.WriteLine(comboBoxDataBits.Text);
                writer.WriteLine(comboBoxStopBits.Text);
            }
        }

        private void SaveRules_Click(object sender, RoutedEventArgs e)
        {
            // INI 파일에 규칙 저장
            var iniPath = "rules.ini";
            using (var writer = new StreamWriter(iniPath))
            {
                foreach (var rule in _rules)
                {
                    writer.WriteLine($"{rule.ReceivedValue}/{rule.ResponseValue}");
                }
            }
            Log("규칙이 저장되었습니다.");
        }

        private void OpenPort_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                _serialPort.Close();
                Log("포트가 닫혔습니다.");
            }

            if (comboBoxPorts.SelectedItem == null)
            {
                MessageBox.Show("COM 포트를 선택하세요.");
                return;
            }

            try
            {
                _serialPort = new SerialPort(comboBoxPorts.SelectedItem.ToString(),
                                             int.Parse(comboBoxBaudRate.Text),
                                             (Parity)Enum.Parse(typeof(Parity), comboBoxParity.Text),
                                             int.Parse(comboBoxDataBits.Text),
                                             (StopBits)Enum.Parse(typeof(StopBits), comboBoxStopBits.Text));
                _serialPort.DataReceived += SerialPort_DataReceived;
                _serialPort.Open();
                SavePortSettings();
                Log("포트가 열렸습니다.");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"포트를 열 수 없습니다: {ex.Message}");
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                _serialPort.WriteLine(textBoxSendData.Text);
                Log($"송신: {textBoxSendData.Text}");
            }
            else
            {
                MessageBox.Show("포트가 열려 있지 않습니다.");
            }
        }

        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            var data = _serialPort.ReadLine();
            Dispatcher.Invoke(() => ProcessReceivedData(data));
        }

        private void ProcessReceivedData(string data)
        {
            Log($"수신: {data}");

            // 규칙에 따라 응답하기
            foreach (var rule in _rules)
            {
                if (rule.ReceivedValue == data.Trim())
                {
                    _serialPort.WriteLine(rule.ResponseValue);
                    Log($"응답: {rule.ResponseValue}");
                }
            }
        }

        private void Log(string message)
        {
            if (listBoxLogs.Items.Count >= 1000)
            {
                listBoxLogs.Items.RemoveAt(0);
            }
            listBoxLogs.Items.Add($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // 포트 갱신
            InitializeSerialPort();
        }
    }

    public class Rule
    {
        public string ReceivedValue { get; set; }
        public string ResponseValue { get; set; }
    }
}
3. 수정된 기능 설명
UI 업데이트: 사용자가 COM 포트, 보레이트, 패리티, 데이터 비트, 스톱 비트를 설정할 수 있도록 ComboBox를 추가했습니다.
INI 파일에 저장: 사용자가 설정한 COM 포트 및 시리얼 통신 설정을 config.ini 파일에 저장하여, 프로그램 재실행 시 설정을 자동으로 불러옵니다.
시리얼 포트 설정: 사용자가 선택한 설정을 기반으로 시리얼 포트를 구성하고 엽니다.
이렇게 수정된 코드는 사용자가 시리얼 포트 설정을 UI를 통해 직관적으로 할 수 있도록 하며, 설정을 저장하고 다시 불러오는 기능을 포함합니다. 이 코드를 이용하여 COM 포트를 활용한 데이터 송수신 기능을 완벽하게 구현할 수 있습니다.






