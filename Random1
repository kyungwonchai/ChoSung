roject 창의 Scripts 폴더에 RackSystemManager.cs 파일이 있는지 확인만 하시면 됩니다. (코드는 이전 답변과 동일합니다.)

## 2단계: '기능 연결'만 수행하는 최종 스크립트
Editor 폴더에 있는 기존 스크립트(SceneSetupWizard.cs 등)를 삭제하고, 아래 코드로 FinalizeSceneSetup.cs 라는 이름의 새 C# 스크립트를 만드세요.

C#

using UnityEngine;
using UnityEngine.UI;
using UnityEditor;
using UnityEditor.Events;

public class FinalizeSceneSetup
{
    [MenuItem("Tools/SMD Rack/!!! 기능 및 UI 자동 연결 !!!")]
    private static void FinalizeSetup()
    {
        // --- 1. 씬에 이미 있는 Rack_Installations 오브젝트를 찾음 ---
        string installationsName = "Rack_Installations";
        GameObject installationsObject = GameObject.Find(installationsName);
        if (installationsObject == null)
        {
            EditorUtility.DisplayDialog("오류", "Hierarchy 창에 'Rack_Installations' 오브젝트가 없습니다.\n먼저 랙 배치를 완료해주세요.", "확인");
            return;
        }
        
        // --- 2. RackSystemManager 자동 생성 및 연결 ---
        string managerName = "RackSystemManager";
        GameObject managerObject = GameObject.Find(managerName);
        if (managerObject == null)
        {
            managerObject = new GameObject(managerName);
        }

        RackSystemManager managerScript = managerObject.GetComponent<RackSystemManager>();
        if (managerScript == null)
        {
            managerScript = managerObject.AddComponent<RackSystemManager>();
        }

        // --- 3. 필요한 머티리얼 자동 생성 또는 찾기 ---
        Material defaultMat = CreateOrFindMaterial("Assets/Materials/DefaultLampMaterial.mat", Color.gray);
        Material litMat = CreateOrFindMaterial("Assets/Materials/LitLampMaterial.mat", Color.yellow, true);
        
        // --- 4. 스크립트에 모든 정보 자동 연결 ---
        managerScript.rackContainer = installationsObject.transform;
        managerScript.defaultLampMaterial = defaultMat;
        managerScript.litLampMaterial = litMat;
        
        // --- 5. UI 자동 생성 및 버튼 기능 연결 ---
        CreateAndWireUI(managerScript);

        EditorUtility.DisplayDialog("완료", "기존 랙에 모든 기능과 UI가 자동으로 연결되었습니다.", "확인");
    }

    private static Material CreateOrFindMaterial(string path, Color color, bool isEmissive = false)
    {
        Material mat = AssetDatabase.LoadAssetAtPath<Material>(path);
        if (mat == null)
        {
            if (!AssetDatabase.IsValidFolder("Assets/Materials"))
            {
                AssetDatabase.CreateFolder("Assets", "Materials");
            }
            mat = new Material(Shader.Find("Standard"));
            mat.SetColor("_Color", color);
            if(isEmissive)
            {
                mat.EnableKeyword("_EMISSION");
                mat.SetColor("_EmissionColor", color * 2f);
            }
            AssetDatabase.CreateAsset(mat, path);
        }
        return mat;
    }
    
    private static void CreateAndWireUI(RackSystemManager manager)
    {
        if (GameObject.FindObjectOfType<UnityEngine.EventSystems.EventSystem>() == null)
        {
            new GameObject("EventSystem", typeof(UnityEngine.EventSystems.EventSystem), typeof(UnityEngine.EventSystems.StandaloneInputModule));
        }

        GameObject canvasObj = GameObject.Find("Canvas");
        if(canvasObj == null)
        {
            canvasObj = new GameObject("Canvas");
            Canvas canvas = canvasObj.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasObj.AddComponent<CanvasScaler>();
            canvasObj.AddComponent<GraphicRaycaster>();
        }
        
        InputField inputField = canvasObj.GetComponentInChildren<InputField>();
        if(inputField == null)
        {
            GameObject inputFieldObj = new GameObject("InputField");
            inputFieldObj.transform.SetParent(canvasObj.transform, false);
            inputFieldObj.AddComponent<Image>().color = new Color(1, 1, 1, 0.5f);
            inputField = inputFieldObj.AddComponent<InputField>();
            RectTransform inputRect = inputFieldObj.GetComponent<RectTransform>();
            inputRect.anchorMin = new Vector2(0, 1);
            inputRect.anchorMax = new Vector2(0, 1);
            inputRect.pivot = new Vector2(0, 1);
            inputRect.anchoredPosition = new Vector2(20, -20);
            inputRect.sizeDelta = new Vector2(200, 30);

            GameObject textObj = new GameObject("Text");
            textObj.transform.SetParent(inputFieldObj.transform, false);
            Text text = textObj.AddComponent<Text>();
            text.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            text.color = Color.black;
            text.alignment = TextAnchor.MiddleLeft;
            inputField.textComponent = text;
        }

        Button button = canvasObj.GetComponentInChildren<Button>();
        if(button == null)
        {
            GameObject buttonObj = new GameObject("Button");
            buttonObj.transform.SetParent(canvasObj.transform, false);
            buttonObj.AddComponent<Image>();
            button = buttonObj.AddComponent<Button>();
            RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();
            buttonRect.anchorMin = new Vector2(0, 1);
            buttonRect.anchorMax = new Vector2(0, 1);
            buttonRect.pivot = new Vector2(0, 1);
            buttonRect.anchoredPosition = new Vector2(230, -20);
            buttonRect.sizeDelta = new Vector2(80, 30);

            GameObject buttonTextObj = new GameObject("ButtonText");
            buttonTextObj.transform.SetParent(buttonObj.transform, false);
            Text buttonText = buttonTextObj.AddComponent<Text>();
            buttonText.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            buttonText.text = "실행";
            buttonText.color = Color.black;
            buttonText.alignment = TextAnchor.MiddleCenter;
        }
        
        button.onClick.RemoveAllListeners(); // 기존 연결 제거
        var methodInfo = typeof(RackSystemManager).GetMethod("ActivateFromInputField");
        UnityAction<InputField> action = (InputField arg0) => methodInfo.Invoke(manager, new object[] { arg0 });
        UnityEventTools.AddObjectPersistentListener(button.onClick, action, inputField);
    }
}
## 최종 사용법
이제 Hierarchy 창에 Rack_Installations가 있는 상태에서, 유니티 상단 메뉴의 **Tools -> SMD Rack -> !!! 기능 및 UI 자동 연결 !!!**을 클릭하기만 하면 모든 작업이 끝납니다.