고 서버에 연결할 수 있도록 수정해 보겠습니다. 클라이언트는 입력된 포트와 IP 주소를 사용하여 서버에 연결하며, "접속" 버튼을 누를 때마다 기존 연결을 닫고 새로 연결을 시도하도록 하겠습니다.

클라이언트 측 프로그램 수정
MainWindow.xaml (클라이언트)
클라이언트 UI에 IP 주소와 포트를 입력할 수 있는 TextBox와 접속 버튼을 추가합니다.

xml
코드 복사
<Window x:Class="SocketClientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Client" Height="400" Width="525">
    <Grid>
        <TextBox x:Name="ipTextBox" HorizontalAlignment="Left" Height="23" Margin="10,10,0,0" VerticalAlignment="Top" Width="240" Text="서버 IP를 입력하세요"/>
        <TextBox x:Name="portTextBox" HorizontalAlignment="Left" Height="23" Margin="260,10,0,0" VerticalAlignment="Top" Width="247" Text="포트를 입력하세요"/>
        <Button Content="접속" HorizontalAlignment="Left" Margin="10,38,0,0" VerticalAlignment="Top" Width="497" Height="25" Click="ConnectButton_Click"/>
        <TextBox x:Name="textBox" HorizontalAlignment="Left" Height="23" Margin="10,70,0,0" VerticalAlignment="Top" Width="497"/>
        <Button Content="Send" HorizontalAlignment="Left" Margin="10,98,0,0" VerticalAlignment="Top" Width="497" Height="25" Click="SendButton_Click"/>
        <ListBox x:Name="listBox" HorizontalAlignment="Left" Height="237" Margin="10,130,0,0" VerticalAlignment="Top" Width="497"/>
    </Grid>
</Window>
MainWindow.xaml.cs (클라이언트)
사용자가 입력한 IP 주소와 포트를 사용하여 서버에 연결하고, 접속 버튼을 누를 때마다 기존 연결을 종료하고 새로 연결하도록 합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Threading; // Dispatcher를 사용하기 위해 추가

namespace SocketClientApp
{
    public partial class MainWindow : Window
    {
        private Socket clientSocket;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void ConnectButton_Click(object sender, RoutedEventArgs e)
        {
            // 기존 소켓 연결이 있으면 닫기
            if (clientSocket != null && clientSocket.Connected)
            {
                clientSocket.Shutdown(SocketShutdown.Both);
                clientSocket.Close();
            }

            string ipAddress = ipTextBox.Text;
            int port;

            if (!int.TryParse(portTextBox.Text, out port))
            {
                UpdateStatus("유효한 포트 번호를 입력하세요.");
                return;
            }

            if (string.IsNullOrWhiteSpace(ipAddress))
            {
                UpdateStatus("유효한 IP 주소를 입력하세요.");
                return;
            }

            ConnectToServer(ipAddress, port);
        }

        private void ConnectToServer(string ipAddress, int port)
        {
            try
            {
                clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                clientSocket.Connect(IPAddress.Parse(ipAddress), port);
                UpdateStatus($"서버 {ipAddress}:{port}에 연결되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 연결 오류: {ex.Message}");
            }
        }

        private void SendMessage(string message)
        {
            if (clientSocket != null && clientSocket.Connected)
            {
                byte[] data = Encoding.UTF8.GetBytes(message);
                clientSocket.Send(data);
                UpdateStatus($"전송한 메시지: {message}");
            }
            else
            {
                UpdateStatus("서버에 연결되어 있지 않습니다.");
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                listBox.Items.Add(message);
            }));
        }

        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string message = textBox.Text;
            SendMessage(message);
        }
    }
}
수정된 코드 설명
IP 주소 및 포트 입력: 클라이언트의 XAML에 ipTextBox와 portTextBox를 추가하여 사용자로부터 서버의 IP 주소와 포트를 입력받습니다.

기존 연결 종료 및 새로운 연결 시도: ConnectButton_Click 메서드는 접속 버튼이 클릭될 때 실행되며, 기존의 소켓 연결을 닫고 새로운 IP와 포트로 연결을 시도합니다.

연결 상태에 따른 메시지 처리: SendMessage 메서드는 연결된 상태에서만 메시지를 전송하며, 연결되어 있지 않으면 사용자에게 메시지를 표시합니다.

사용자 인터페이스 업데이트: UpdateStatus 메서드는 UI 스레드에서 안전하게 ListBox에 상태 메시지를 추가합니다.

사용 방법
클라이언트 애플리케이션을 실행합니다.
"서버 IP를 입력하세요"와 "포트를 입력하세요" 텍스트 박스에 연결할 서버의 IP 주소와 포트 번호를 입력합니다.
"접속" 버튼을 클릭하여 서버에 연결합니다. 이때 기존 연결이 있으면 닫고, 새로 연결을 시도합니다.
연결이 성공하면 "Send" 버튼을 사용하여 메시지를 전송할 수 있습니다.
이렇게 수정된 코드는 사용자가 서버 IP 주소와 포트를 입력하여 서버에 연결하고, 접속 버튼을 누를 때마다 새 연결을 시도할 수 있도록 합니다