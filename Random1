eakReference 사용 예시

WeakReference를 사용하여 대용량 이미지를 관리할 때, 이미지는 강한 참조가 아닌 약한 참조로 저장됩니다. 이렇게 하면, 가비지 컬렉터(GC)가 메모리 부족 상황에서 해당 객체를 더 쉽게 회수할 수 있습니다. 아래는 WeakReference를 사용하는 예시입니다:

csharp

using System;
using System.Windows.Media.Imaging;

public class ImageCache
{
    private WeakReference<BitmapImage> _imageReference;

    public void LoadImage(string imagePath)
    {
        BitmapImage image = new BitmapImage(new Uri(imagePath));
        _imageReference = new WeakReference<BitmapImage>(image);
    }

    public BitmapImage GetImage()
    {
        BitmapImage image;
        if (_imageReference.TryGetTarget(out image))
        {
            return image;
        }
        else
        {
            // 이미지가 이미 회수되었다면, 여기서 다시 로드하거나 적절한 처리를 수행합니다.
            return null;
        }
    }
}

이 예시에서 WeakReference<BitmapImage>를 사용하여 BitmapImage 객체를 저장합니다. GetImage 메서드를 통해 해당 이미지를 필요할 때 다시 가져올 수 있으며, 이미 가비지 컬렉터에 의해 회수된 경우 재로드하거나 다른 처리를 수행할 수 있습니다.
IDisposable 패턴 사용 예시

IDisposable 인터페이스를 구현하여 사용한 리소스를 명시적으로 해제할 수 있습니다. 이는 파일 스트림, 데이터베이스 연결, 그래픽 리소스 등에 널리 사용됩니다. 아래는 IDisposable 패턴을 사용하는 예시입니다:

csharp

using System;
using System.IO;
using System.Windows.Media.Imaging;

public class DisposableImage : IDisposable
{
    private BitmapImage _image;
    private bool _disposed = false;

    public DisposableImage(string imagePath)
    {
        _image = new BitmapImage(new Uri(imagePath));
    }

    public BitmapImage Image
    {
        get
        {
            if (_disposed)
                throw new ObjectDisposedException("DisposableImage");
            return _image;
        }
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // 여기서 관리되는 리소스를 해제합니다.
                if (_image != null)
                {
                    _image = null;
                }
            }
            _disposed = true;
        }
    }

    ~DisposableImage()
    {
        Dispose(false);
    }
}

이 예시에서 DisposableImage 클래스는 IDisposable 인터페이스를 구현합니다. Dispose 메서드는 관리되는 리소스를 해제하도록 설계되어 있으며, 클래스 사용이 끝난 후에는 반드시 이 메서드를 호출해야 합니다.

두 예시 모두 메모리 관리에 도움을 주며, 특히 대용량 이미지 처리에 적합합니다