습니다! UI의 상태를 바인딩으로 처리하는 것이 더 나은 방법입니다. Dispatcher를 사용하지 않고, MVVM 패턴에 맞게 바인딩을 통해 연결 상태를 UI에 반영하도록 변경하겠습니다.

수정된 구조는 다음과 같습니다:

**ConnectionStatus**라는 속성을 MainViewModel에 추가하여 연결 상태를 저장하고 UI와 바인딩합니다.
Ellipse의 색상과 TextBlock의 텍스트는 Binding을 사용해 동적으로 변경됩니다.
수정된 MainViewModel.cs
MainViewModel 클래스는 연결 상태와 메시지 로그를 관리하며, SocketClientMergeOI에서의 이벤트를 통해 연결 상태가 변경될 때마다 속성이 갱신되도록 합니다.

csharp
코드 복사
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Media;

public class MainViewModel : INotifyPropertyChanged
{
    private SocketClientMergeOI _socketClient;
    private string _connectionStatusText;
    private Brush _connectionStatusColor;

    // 연결 상태 텍스트와 색상을 바인딩할 속성들
    public string ConnectionStatusText
    {
        get => _connectionStatusText;
        set
        {
            _connectionStatusText = value;
            OnPropertyChanged();
        }
    }

    public Brush ConnectionStatusColor
    {
        get => _connectionStatusColor;
        set
        {
            _connectionStatusColor = value;
            OnPropertyChanged();
        }
    }

    // 메시지 로그 바인딩
    public ObservableCollection<MessageLog> MessageLogs => _socketClient.MessageLogs;

    // 생성자: SocketClientMergeOI 설정 및 연결 상태 이벤트 핸들러 설정
    public MainViewModel()
    {
        _socketClient = new SocketClientMergeOI("127.0.0.1", 2400);
        _socketClient.ConnectionStatusChanged += OnConnectionStatusChanged;

        // 초기 상태 설정
        ConnectionStatusText = "연결 필요";
        ConnectionStatusColor = Brushes.Red;
    }

    // 연결 상태가 변경될 때 호출되는 함수
    private void OnConnectionStatusChanged(bool isConnected)
    {
        if (isConnected)
        {
            ConnectionStatusText = "연결됨";
            ConnectionStatusColor = Brushes.Green;
        }
        else
        {
            ConnectionStatusText = "연결 필요";
            ConnectionStatusColor = Brushes.Red;
        }
    }

    // INotifyPropertyChanged 인터페이스 구현
    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
수정된 MainWindow.xaml (UI)
Ellipse의 색상과 TextBlock의 텍스트는 바인딩을 통해 연결 상태에 맞게 동적으로 변경됩니다.

xml
코드 복사
<Window x:Class="SocketClientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Client" Height="450" Width="600">
    <Grid>
        <!-- 연결 상태를 표시할 도형 및 텍스트 -->
        <Grid HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,20,0,0" Width="100" Height="100">
            <!-- 원형 도형 (색상 바인딩) -->
            <Ellipse Fill="{Binding ConnectionStatusColor}" Width="100" Height="100"/>
            <!-- 상태 텍스트 (연결 상태 텍스트 바인딩) -->
            <TextBlock Text="{Binding ConnectionStatusText}" Foreground="White" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>

        <!-- 서버에 메시지 전송 버튼 -->
        <Button Content="Send Command" HorizontalAlignment="Center" VerticalAlignment="Center" Width="150" Height="30" Click="SendCommand_Click"/>

        <!-- 메시지 로그를 보여줄 DataGrid -->
        <DataGrid ItemsSource="{Binding MessageLogs}" AutoGenerateColumns="False" IsReadOnly="True" Width="580" Height="200" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,10">
            <DataGrid.Columns>
                <!-- 수신된 메시지 -->
                <DataGridTextColumn Header="Timestamp" Binding="{Binding Timestamp}" Width="150"/>
                <DataGridTextColumn Header="Sender" Binding="{Binding Sender}" Width="100"/>
                <DataGridTextColumn Header="Receiver" Binding="{Binding Receiver}" Width="100"/>
                <DataGridTextColumn Header="Sent Message" Binding="{Binding SentMessage}" Width="150"/>
                <DataGridTextColumn Header="Response Message" Binding="{Binding ResponseMessage}" Width="150"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
MainWindow.xaml.cs (클라이언트 명령어 전송 처리)
MainWindow.xaml.cs에서 MainViewModel을 DataContext로 설정합니다.

csharp
코드 복사
using System.Windows;

namespace SocketClientApp
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel; // MainViewModel을 DataContext로 설정하여 바인딩 활성화
        }

        // 서버로 명령어를 전송하는 버튼 클릭 이벤트
        private async void SendCommand_Click(object sender, RoutedEventArgs e)
        {
            string command = "TestCommand"; // 예시 명령어
            string result = await _viewModel.SendCommandAsync(command); // 명령어 전송 및 응답 수신
            MessageBox.Show(result); // 결과 메시지를 보여줌
        }
    }
}
설명:
MVVM 패턴을 강화:

MainViewModel에서 **연결 상태 (텍스트, 색상)**를 관리하고, XAML에서 이를 바인딩으로 UI에 반영합니다.
SocketClientMergeOI 클래스는 연결 상태가 변경될 때마다 이벤트를 통해 MainViewModel에 알립니다.
XAML의 바인딩:

Ellipse의 색상과 TextBlock의 텍스트는 각각 ConnectionStatusColor, ConnectionStatusText 속성에 바인딩되어 연결 상태에 따라 동적으로 변경됩니다.
INotifyPropertyChanged:
