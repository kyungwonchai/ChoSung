이해했습니다. PO_NO는 고유한 주문 번호로서 하나의 PO_NO에 여러 개의 MAG_NO 파일이 생성되어 누적 관리가 이루어지고, 400개가 완성되면 그 주문이 마무리되는 방식입니다. 그리고 여러분의 요구사항은 최근 두 개의 PO_NO에 대한 모든 생산 과정을 묶어서 처리하고 그 파일들을 MAG_NO에 따라 누적 관리하여 보여주는 것입니다. 여기서는 마지막 두 개의 PO_NO의 전체 파일을 처리하는 로직을 구현하겠습니다.

주요 요구사항:
PO_NO에 따라 관련된 모든 파일을 묶어서 처리해야 한다.
MAG_NO는 PO_NO 내에서 생산된 수량이며, 각 PO_NO는 총 400개 생산이 완료되면 마무리된다.
최근 두 개의 PO_NO와 관련된 모든 파일을 가져와서 DataGrid에 표시한다.
전체 구조:
FileProcessor 클래스: 모든 파일을 처리하여 각 PO_NO별로 묶고, 최근 두 개의 PO_NO에 대한 생산 과정을 반환하는 로직을 구현한다.
MainViewModel: 이 클래스를 사용하여 파일을 주기적으로 확인하고, 최근 두 개의 PO_NO에 대한 정보를 UI에 업데이트한다.
수정된 FileProcessor 클래스
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class FileProcessor
{
    private readonly string _logFolder;  // 로그 파일이 저장된 폴더 경로
    private Dictionary<string, List<LogEntry>> _poLogEntries = new Dictionary<string, List<LogEntry>>();  // PO_NO에 따른 로그 저장
    private List<string> _processedFiles = new List<string>();  // 이미 처리한 파일명 저장

    public FileProcessor(string logFolder)
    {
        _logFolder = logFolder;
    }

    /// <summary>
    /// 폴더를 확인하고 새로운 파일이 있으면 처리합니다.
    /// 최근 두 개의 PO_NO에 대한 전체 생산 과정을 반환합니다.
    /// </summary>
    public List<LogEntry> CheckForNewFiles()
    {
        List<LogEntry> newEntries = new List<LogEntry>();

        // 폴더 내의 모든 파일을 시간순으로 정렬
        var files = Directory.GetFiles(_logFolder, "*.txt").OrderBy(f => f).ToList();

        foreach (var file in files)
        {
            // 이미 처리한 파일은 건너뜀
            if (_processedFiles.Contains(Path.GetFileName(file)))
                continue;

            // 파일을 읽어서 파싱 후 데이터 추가
            var logEntry = ParseFile(file);

            // 새로운 파일에 대해서만 처리
            if (!_poLogEntries.ContainsKey(logEntry.PO_NO))
            {
                _poLogEntries[logEntry.PO_NO] = new List<LogEntry>();
            }
            _poLogEntries[logEntry.PO_NO].Add(logEntry);
            _processedFiles.Add(Path.GetFileName(file));  // 처리한 파일을 목록에 추가
        }

        // 최근 두 개의 PO_NO에 대한 모든 생산 과정을 반환
        return ProcessRecentPOEntries();
    }

    /// <summary>
    /// 파일을 읽어서 LogEntry 객체로 변환합니다.
    /// </summary>
    /// <param name="filePath">읽을 파일의 경로</param>
    /// <returns>파싱된 LogEntry 객체</returns>
    private LogEntry ParseFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);

        var logEntry = new LogEntry
        {
            FileName = Path.GetFileName(filePath),
            MAG_NO = GetValueFromLine(lines, "MAG_NO"),
            MAG_QTY = int.Parse(GetValueFromLine(lines, "MAG_QTY")),
            PO_NO = GetValueFromLine(lines, "PO_NO"),
            PO_PLAN_QTY = int.Parse(GetValueFromLine(lines, "PO_PLAN_QTY")),
            PO_PROD_QTY = int.Parse(GetValueFromLine(lines, "PO_PROD_QTY"))
        };

        return logEntry;
    }

    /// <summary>
    /// 파일에서 특정 키에 해당하는 값을 추출합니다.
    /// </summary>
    /// <param name="lines">파일 내용</param>
    /// <param name="key">찾고자 하는 키 (예: "MAG_NO")</param>
    /// <returns>해당 키에 해당하는 값</returns>
    private string GetValueFromLine(string[] lines, string key)
    {
        var line = lines.FirstOrDefault(l => l.Contains(key));
        return line?.Split('=')[1].Trim('\'');
    }

    /// <summary>
    /// 최근 두 개의 PO_NO에 대한 모든 로그 파일을 반환합니다.
    /// </summary>
    private List<LogEntry> ProcessRecentPOEntries()
    {
        var result = new List<LogEntry>();

        // PO_NO에 따라 처리한 로그 중에서 가장 최근 두 개의 PO_NO만 가져옴
        var recentPOs = _poLogEntries.OrderByDescending(p => p.Value.Last().FileName).Take(2).ToList();

        foreach (var poLog in recentPOs)
        {
            result.AddRange(poLog.Value);
        }

        return result;
    }
}
MainViewModel (파일 처리 클래스 호출)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows.Input;

public class MainViewModel
{
    private readonly FileProcessor _fileProcessor;  // 파일 처리 클래스
    private Timer _timer;  // 5초마다 체크할 타이머

    public ObservableCollection<LogEntry> LogEntries { get; set; }  // DataGrid에 바인딩할 로그 목록
    public ICommand LoadLogsCommand { get; }  // 수동으로 로그를 로드하는 명령

    public MainViewModel()
    {
        LogEntries = new ObservableCollection<LogEntry>();
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG");

        // 5초마다 폴더를 감시하는 타이머 설정
        _timer = new Timer(CheckForNewLogs, null, 0, 5000);

        // 수동으로 로그 로드를 위한 커맨드 설정
        LoadLogsCommand = new RelayCommand(LoadRecentLogs);
    }

    /// <summary>
    /// 타이머가 5초마다 호출하여 새로운 로그 파일을 확인합니다.
    /// </summary>
    private void CheckForNewLogs(object state)
    {
        var newEntries = _fileProcessor.CheckForNewFiles();

        // 새로운 엔트리들을 DataGrid에 추가
        foreach (var entry in newEntries)
        {
            App.Current.Dispatcher.Invoke(() => LogEntries.Add(entry));
        }
    }

    /// <summary>
    /// 수동으로 로그를 로드하는 명령 실행 시 호출됩니다.
    /// </summary>
    private void LoadRecentLogs()
    {
        var newEntries = _fileProcessor.CheckForNewFiles();

        foreach (var entry in newEntries)
        {
            LogEntries.Add(entry);
        }
    }
}
LogEntry 클래스
csharp
코드 복사
public class LogEntry
{
    public string FileName { get; set; }  // 파일 이름
    public string MAG_NO { get; set; }  // MAG_NO
    public int MAG_QTY { get; set; }  // MAG_QTY
    public string PO_NO { get; set; }  // PO_NO
    public int PO_PLAN_QTY { get; set; }  // PO_PLAN_QTY
    public int PO_PROD_QTY { get; set; }  // PO_PROD_QTY
}
RelayCommand 클래스
csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;

    public RelayCommand(Action execute)
    {
        _execute = execute;
    }

    public bool CanExecute(object parameter) => true;

    public void Execute(object parameter)
    {
        _execute();
    }

    public event EventHandler CanExecuteChanged;
}
설명:
FileProcessor 클래스: 이 클래스는 모든 파일을 처리하고, 최근 두 개의 PO_NO와 관련된 모든 MAG_NO 파일을 그룹화합니다. 각 PO_NO가 생산을 완료할 때까지 파일을 계속 모아두며, 생산이 완료되면 해당 파일을 반환합니다.
MainViewModel: 타이머로 5초마다 파일을 확인하고, 새로운 파일을 찾으면 그 파일을 DataGrid에 추가합니다. 또한 수동으로 파일을 로드할 수 있는 버튼을 제공합니다.
LogEntries: 이 ObservableCollection은 DataGrid와 바인딩되어 있어, 새로운 로그가 추가되면 자동으로 UI에 반영됩니다.
이제 이 구조는 파일을 5초마다 확인하며, 각 PO_NO에 대한 생산 과정 전체를 처리합