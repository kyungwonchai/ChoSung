PF 사용을 위해 WindowsFormsIntegration, PresentationCore, PresentationFramework, 그리고 System.Xaml 어셈블리를 참조로 추가합니다.
2. WPF 사용자 컨트롤 생성
WPF 사용자 컨트롤 (UserControl1.xaml 등)을 생성합니다.
3. WinForms에서 WPF 사용자 컨트롤 호스팅
새로운 Form에 WPF 컨트롤을 호스팅하는 코드를 작성합니다. 예를 들어, WPF 사용자 컨트롤을 ElementHost를 사용하여 새 Form에 표시하는 예제 코드는 다음과 같습니다.

csharp
Copy code
using System;
using System.Windows.Forms;
using System.Windows.Forms.Integration;  // ElementHost를 사용하기 위해 필요
using WpfControlLibrary1;                // WPF 컨트롤이 포함된 네임스페이스

public partial class WpfHostForm : Form
{
    public WpfHostForm()
    {
        InitializeComponent();

        // ElementHost 컨트롤 생성
        ElementHost host = new ElementHost();
        host.Dock = DockStyle.Fill;

        // WPF 사용자 컨트롤 인스턴스 생성
        UserControl1 wpfControl = new UserControl1();

        // ElementHost에 WPF 컨트롤 할당
        host.Child = wpfControl;

        // 현재 폼에 ElementHost 추가
        this.Controls.Add(host);
    }
}

public class Program
{
    [STAThread]
    public static void Main()
    {
        Application.EnableVisualStyles();
        Application.SetCompatibleTextRenderingDefault(false);
        Application.Run(new WpfHostForm());
    }
}
주의사항 및 추가 설정
네임스페이스 주의: WpfControlLibrary1은 WPF 사용자 컨트롤이 포함된 프로젝트의 네임스페이스입니다. 실제 프로젝트의 네임스페이스에 맞게 조정해야 합니다.
호환성: WPF 컨트롤과 WinForms 사이에는 몇 가지 호환성 이슈가 있을 수 있습니다. 예를 들어, 테마나 스타일링이 WinForms와 WPF 사이에서 다르게 보일 수 있습니다.
이렇게 하면 WinForm