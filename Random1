GridControl x:Name="gridControl">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="ImageColumn">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <dxe:ImageEdit x:Name="imageEdit" Width="100" Height="100" Loaded="ImageEdit_Loaded"/>
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
        <!-- 다른 컬럼들... -->
    </dxg:GridControl.Columns>
</dxg:GridControl>

위의 코드에서는 ImageColumn에 대한 CellTemplate을 정의하고, 내부적으로 ImageEdit 컨트롤을 생성합니다. ImageEdit 컨트롤에 대한 Loaded 이벤트를 처리할 수 있도록 Loaded="ImageEdit_Loaded"로 설정합니다.

그런 다음, Loaded 이벤트 핸들러에서 해당 ImageEdit 컨트롤에 Command를 바인딩하고 원하는 로직을 구현할 수 있습니다.

csharp

private void ImageEdit_Loaded(object sender, RoutedEventArgs e)
{
    var imageEdit = (ImageEdit)sender;
    imageEdit.CommandBindings.Add(new CommandBinding(ApplicationCommands.Paste, ImageEdit_PasteExecuted, ImageEdit_PasteCanExecute));
}

private void ImageEdit_PasteCanExecute(object sender, CanExecuteRoutedEventArgs e)
{
    // 원하는 Paste 명령 실행 가능 여부를 결정하는 로직을 구현
    // 예: Ctrl+V 키 조합을 무시하기 위해 false를 반환
    e.CanExecute = false;
    e.Handled = true;
}

private void ImageEdit_PasteExecuted(object sender, ExecutedRoutedEventArgs e)
{
    // Paste 명령을 실행하는 로직을 구현
    // 예: Ctrl+V 키 조합을 무시하기 위해 아무 작업도 하지 않음
    e.Handled = true;
}

위의 코드에서는 ImageEdit의 Loaded 이벤트 핸들러에서 CommandBinding을 생성하고, CommandBindings 컬렉션에 추가합니다. 여기서는 ApplicationCommands.Paste를 사용하여 Paste 명령을 처리합니다.

ImageEdit_PasteCanExecute 메서드에서는 Paste 명령 실행 가능 여부를 결정하고, ImageEdit_PasteExecuted 메서