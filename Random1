DB 없이 폴더와 파일만을 사용하여 Flask 웹 애플리케이션을 구현할 수 있습니다. 이 방식에서는 각 과제를 파일(.ckw)로 저장하고, 과제별 폴더와 파일을 직접 관리하여 데이터를 유지합니다. 아래는 이 방법을 적용한 전체 코드입니다.

1. 프로젝트 구조
프로젝트 구조는 다음과 같습니다.

csharp
코드 복사
my_task_manager/
│
├── app.py             # Flask 애플리케이션의 메인 파일
├── templates/
│   └── index.html     # 메인 페이지
├── static/
│   ├── styles.css     # CSS 파일 (블루-보라-다크 테마 적용)
│   └── scripts.js     # JavaScript 파일
└── kwpro/             # 과제별 폴더가 위치할 곳 (폴더별로 .ckw 파일이 있음)
2. app.py 파일 작성
Flask 애플리케이션 코드입니다. 이 코드는 폴더와 파일을 통해 과제를 저장, 수정, 검색하며, 경과 일수를 계산합니다.

python
코드 복사
from flask import Flask, render_template, request, jsonify
import os
from datetime import datetime

app = Flask(__name__)

# 과제 폴더 경로 설정
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
TASK_DIR = os.path.join(BASE_DIR, 'kwpro')

# kwpro 폴더가 없으면 생성
if not os.path.exists(TASK_DIR):
    os.makedirs(TASK_DIR)

# 과제 파일 경로 가져오기
def get_task_file_path(folder_name):
    return os.path.join(TASK_DIR, folder_name, f"{folder_name}.ckw")

# 경과일 계산
def calculate_elapsed_days(task_date):
    task_date = datetime.strptime(task_date, "%Y-%m-%d")
    return (datetime.utcnow().date() - task_date.date()).days

# 폴더 내 과제 파일 읽기
def read_tasks():
    tasks = []
    for folder_name in os.listdir(TASK_DIR):
        task_file_path = get_task_file_path(folder_name)
        if os.path.isfile(task_file_path):
            with open(task_file_path, 'r', encoding='utf-8') as file:
                lines = file.readlines()
                task_data = {
                    "folder_name": folder_name,
                    "date": lines[0].strip(),
                    "task_type": lines[1].strip(),
                    "requester": lines[2].strip(),
                    "category": lines[3].strip(),
                    "content": lines[4].strip(),
                    "expected_work_time": lines[5].strip(),
                    "elapsed_days": calculate_elapsed_days(lines[0].strip())
                }
                tasks.append(task_data)
    return tasks

# 메인 페이지
@app.route('/')
def index():
    tasks = read_tasks()
    return render_template('index.html', tasks=tasks)

# 과제 등록 및 수정
@app.route('/task', methods=['POST', 'PUT'])
def manage_task():
    data = request.json
    folder_name = data['folder_name']
    folder_path = os.path.join(TASK_DIR, folder_name)

    if not os.path.exists(folder_path):
        os.makedirs(folder_path)
    
    task_file_path = get_task_file_path(folder_name)
    
    with open(task_file_path, 'w', encoding='utf-8') as file:
        file.write(f"{data['date']}\n")
        file.write(f"{data['task_type']}\n")
        file.write(f"{data['requester']}\n")
        file.write(f"{data['category']}\n")
        file.write(f"{data['content']}\n")
        file.write(f"{data.get('expected_work_time', '')}\n")
    
    return jsonify({"message": "Success"}), 200

# 검색 및 필터링
@app.route('/search', methods=['GET'])
def search_tasks():
    keyword = request.args.get('keyword', '').lower()
    filtered_tasks = [task for task in read_tasks() if keyword in task['content'].lower()]
    return jsonify(filtered_tasks)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
3. 템플릿 파일 (templates/index.html)
이 파일은 과제 목록을 테이블로 보여주고 검색 기능을 제공합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Task Manager</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Task Manager</h1>
    <input type="text" id="search" placeholder="Search..." oninput="filterTasks()">
    <table>
        <thead>
            <tr>
                <th>Folder Name</th>
                <th>Date</th>
                <th>Type</th>
                <th>Requester</th>
                <th>Category</th>
                <th>Content</th>
                <th>Elapsed Days</th>
            </tr>
        </thead>
        <tbody id="task-table">
            {% for task in tasks %}
            <tr class="{{ 'pink' if task['elapsed_days'] > 15 else 'yellow' if task['elapsed_days'] > 5 else '' }}">
                <td>{{ task['folder_name'] }}</td>
                <td>{{ task['date'] }}</td>
                <td>{{ task['task_type'] }}</td>
                <td>{{ task['requester'] }}</td>
                <td>{{ task['category'] }}</td>
                <td>{{ task['content'] }}</td>
                <td>{{ task['elapsed_days'] }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <script src="{{ url_for('static', filename='scripts.js') }}"></script>
</body>
</html>
4. CSS (블루-보라-다크 테마)
static/styles.css 파일에 스타일을 추가하여 테마를 적용합니다.

css
코드 복사
body {
    background-color: #1e1e2e;
    color: #c0caf5;
    font-family: Arial, sans-serif;
}
a, button {
    background-color: #7aa2f7;
    color: white;
    border: none;
    padding: 10px;
    cursor: pointer;
}
table {
    width: 100%;
    border-collapse: collapse;
}
td, th {
    padding: 10px;
    border: 1px solid #444;
}
.yellow {
    color: yellow;
}
.pink {
    color: pink;
}
5. JavaScript (static/scripts.js)
검색 기능을 구현하여 테이블을 필터링합니다.

javascript
코드 복사
function filterTasks() {
    let input = document.getElementById("search").value.toLowerCase();
    let rows = document.querySelectorAll("#task-table tr");

    rows.forEach(row => {
        row.style.display = row.textContent.toLowerCase().includes(input) ? "" : "none";
    });
}
6. 설명
폴더 및 파일 구조: 각 과제는 kwpro 폴더 안에 폴더별로 관리되며, .ckw 파일은 해당 폴더 내에 저장됩니다. 과제 정보를 저장할 때 각 줄에 필요한 정보를 순서대로 기록합니다.
경과일 표시: 과제 등록일을 기준으로 경과일을 계산하여 표시합니다. 5일이 지난 경우 노란색, 15일이 지난 경우 핑크색으로 표시됩니다.
검색 기능: 입력 필터링을 통해 실시간으로 과제 목록을 검색할 수 있습니다.
이렇게 하면 DB 없이 파일 기반으로 과제 관리