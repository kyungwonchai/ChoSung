수정 사항
포트와 프로토콜 설정 불러오기: 프로그램 시작 시 저장된 포트와 프로토콜 설정을 불러옵니다.
포트 초기화 문제 해결: 프로그램 실행 시 포트 접근 거부 메시지와 성공 메시지가 순서대로 나오는 문제를 해결합니다.
동적 주소 할당: DT2310에서 DT2319까지 가변적으로 전송할 수 있도록 수정합니다.
MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD 라우터 프로세스 에이전트" Height="600" Width="800" Closing="Window_Closing">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Title TextBlock with Shadow Effect -->
        <TextBlock Grid.Row="0" Text="SMD 라우터 프로세스 에이전트" FontSize="20" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" ToolTip="이 애플리케이션은 PLC와 통신합니다.">
            <TextBlock.Effect>
                <DropShadowEffect Color="Gray" BlurRadius="4"/>
            </TextBlock.Effect>
        </TextBlock>

        <!-- Current Time TextBlock -->
        <TextBlock Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" Name="CurrentTimeTextBlock" FontSize="14"/>

        <!-- Control Buttons and Input -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="10">
            <ComboBox Name="ComboBoxPorts" Width="200" Height="35" SelectionChanged="ComboBoxPorts_SelectionChanged" ToolTip="PLC에 연결할 COM 포트를 선택하세요." HorizontalContentAlignment="Center"/>
            <ComboBox Name="ComboBoxValues" Width="300" Height="35" Margin="10,0,0,0" ToolTip="D2300에 보낼 값을 선택하세요." HorizontalContentAlignment="Center">
                <ComboBoxItem Content="0 - 신호 송신대기"/>
                <ComboBoxItem Content="1 - 신규 LOT 배출(적재시작)"/>
                <ComboBoxItem Content="2 - 동일 LOT 배출(적층)"/>
                <ComboBoxItem Content="3 - 동일 LOT 마지막 PO 배출(마지막 적층 후 라벨 및 스캔 작업 후 후단으로 배출)"/>
                <ComboBoxItem Content="4 - PO 정보 없는 제품 배출 (적층 없이 배출)"/>
            </ComboBox>
            <Button Name="BtnSendValue" Content="값 전송" Width="100" Height="35" Margin="10,0,0,0" Click="BtnSendValue_Click" ToolTip="선택된 값을 D2300에 전송합니다."/>
            <Button Name="BtnSendData" Content="데이터 전송" Width="200" Height="35" Margin="10,0,0,0" Click="BtnSendData_Click" ToolTip="PO 정보를 PLC에 전송합니다."/>
            <TextBox Name="TxtPOInfo" Width="200" Height="35" Margin="10,0,0,0" ToolTip="PLC에 전송할 PO 정보를 입력하세요."/>
            <ComboBox Name="ComboBoxProtocol" Width="200" Height="35" Margin="10,0,0,0" SelectionChanged="ComboBoxProtocol_SelectionChanged" ToolTip="프로토콜을 선택하세요." HorizontalContentAlignment="Center">
                <ComboBoxItem Content="기본 프로토콜"/>
                <ComboBoxItem Content="사용자 지정 프로토콜"/>
            </ComboBox>
            <TextBlock Name="TxtSelectedProtocol" Width="200" Height="35" Margin="10,0,0,0" VerticalAlignment="Center"/>
        </StackPanel>

        <!-- Log ListBox -->
        <ListBox Grid.Row="3" Name="LogListBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10" ToolTip="PLC 통신 로그 메시지를 표시합니다."/>
        
        <!-- Error ListBox -->
        <ListBox Grid.Row="4" Name="ErrorListBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10" ToolTip="PLC 통신 에러 메시지를 표시합니다."/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;
        private const int MaxRetries = 3; // 에러 발생 시 최대 재시도 횟수
        private DispatcherTimer timer;
        private string iniFilePath = "setup.ini";
        private DispatcherTimer clockTimer;
        private string currentPortName = string.Empty;
        private bool isCustomProtocol = false;

        public MainWindow()
        {
            InitializeComponent();
            LoadAvailablePorts();
            LoadSelectedPortAndProtocol();
            InitializeTimer();
            InitializeClock();
        }

        // 사용 가능한 COM 포트를 ComboBox에 로드
        private void LoadAvailablePorts()
        {
            var ports = SerialPort.GetPortNames();
            ComboBoxPorts.ItemsSource = ports;
        }

        // 이전에 선택된 포트와 프로토콜을 setup.ini에서 로드
        private void LoadSelectedPortAndProtocol()
        {
            if (File.Exists(iniFilePath))
            {
                var lines = File.ReadAllLines(iniFilePath);
                if (lines.Length > 0)
                {
                    var portName = lines[0].Trim();
                    if (!string.IsNullOrEmpty(portName) && ComboBoxPorts.Items.Contains(portName))
                    {
                        ComboBoxPorts.SelectedItem = portName;
                        InitializeSerialPort(portName);
                    }
                }
                if (lines.Length > 1)
                {
                    var protocol = lines[1].Trim();
                    if (protocol == "기본 프로토콜")
                    {
                        ComboBoxProtocol.SelectedIndex = 0;
                        isCustomProtocol = false;
                    }
                    else if (protocol == "사용자 지정 프로토콜")
                    {
                        ComboBoxProtocol.SelectedIndex = 1;
                        isCustomProtocol = true;
                    }
                    TxtSelectedProtocol.Text = $"선택된 프로토콜: {protocol}";
                }
            }
        }

        // 시리얼 포트를 초기화하고 열기
        private void InitializeSerialPort(string portName)
        {
            serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One)
            {
                ReadTimeout = 1000, // 1초 타임아웃 설정
                WriteTimeout = 1000 // 1초 타임아웃 설정
            };

            serialPort.DataReceived += SerialPort_DataReceived;
            try
            {
                serialPort.Open();
                currentPortName = portName;
                LogMessage($"시리얼 포트 {portName} 열기 성공.");
            }
            catch (UnauthorizedAccessException)
            {
                LogError($"시리얼 포트 {portName} 열기 오류: 접근이 거부되었습니다.");
            }
            catch (Exception ex)
            {
                LogError($"시리얼 포트 {portName} 열기 오류: {ex.Message}");
            }
        }

        // 타이머 초기화
        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        // 시계 타이머 초기화
        private void InitializeClock()
        {
            clockTimer = new DispatcherTimer();
            clockTimer.Interval = TimeSpan.FromSeconds(1);
            clockTimer.Tick += (s, e) =>
            {
                CurrentTimeTextBlock.Text = DateTime.Now.ToString("HH:mm:ss");
            };
            clockTimer.Start();
        }

        // 주기적으로 실행되는 타이머 이벤트 핸들러
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 주기적으로 상태 체크 로직을 여기에 추가할 수 있습니다.
        }

        // ComboBox에서 포트를 선택하면 실행되는 이벤트 핸들러
        private void ComboBoxPorts_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxPorts.SelectedItem != null)
            {
                var selectedPort = ComboBoxPorts.SelectedItem.ToString();
                try
                {
                    if (serialPort != null && serialPort.IsOpen)
                    {
                        serialPort.Close();
                        LogMessage($"이전 시리얼 포트 {currentPortName} 닫기 성공.");
                    }
                    InitializeSerialPort(selectedPort);
                    SaveSettings(selectedPort, isCustomProtocol ? "사용자 지정 프로토콜" : "기본 프로토콜");
                }
                catch (Exception ex)
                {
                    LogError($"포트 변경 중 오류: {ex.Message}");
                }
            }
        }

        // ComboBox에서 프로토콜을 선택하면 실행되는 이벤트 핸들러
        private void ComboBoxProtocol_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxProtocol.SelectedItem != null)
            {
                var selectedProtocol = (ComboBoxProtocol.SelectedItem as ComboBoxItem).Content.ToString();
                isCustomProtocol = selectedProtocol == "사용자 지정 프로토콜";
                TxtSelectedProtocol.Text = $"선택된 프로토콜: {selectedProtocol}";
                SaveSettings(currentPortName, selectedProtocol);
            }
        }

        // "값 전송" 버튼 클릭 이벤트 핸들러
        private async void BtnSendValue_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ComboBoxValues.SelectedItem != null)
                {
                    string selectedContent = (ComboBoxValues.SelectedItem as ComboBoxItem).Content.ToString();
                    int selectedValue = int.Parse(selectedContent.Split('-')[0].Trim());
                    await Task.Run(() =>
                    {
                        SendMessageWithRetry(() => SendDataToPLC(2300, selectedValue), MaxRetries);
                        Dispatcher.Invoke(() => LogMessage($"값 {selectedValue} 전송 성공 (포트: {currentPortName})."));
                    });
                }
                else
                {
                    LogError("D2300에 전송할 값을 선택하세요.");
                }
            }
            catch (Exception ex)
            {
                LogError($"값 전송 중 오류: {ex.Message}");
            }
        }

        // "데이터 전송" 버튼 클릭 이벤트 핸들러
        private async void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string poInfo = string.Empty;

                // UI 스레드에서 TxtPOInfo.Text 값을 읽음
                Dispatcher.Invoke(() =>
                {
                    poInfo = TxtPOInfo.Text;
                });

                await Task.Run(() =>
                {
                    SendPOInfoToPLC(poInfo);
                });

                Dispatcher.Invoke(() => LogMessage($"데이터 전송 성공 (포트: {currentPortName})!"));
            }
            catch (Exception ex)
            {
                LogError($"데이터 전송 중 오류: {ex.Message}");
            }
        }

        // PLC로 데이터를 전송하는 메소드
        private void SendDataToPLC(int address, int value)
        {
            if (!serialPort.IsOpen)
            {
                Dispatcher.Invoke(() => LogError("시리얼 포트가 열려 있지 않습니다."));
                return;
            }

            try
            {
                string message;
                if (isCustomProtocol)
                {
                    if (address == 2300)
                    {
                        message = $"%01#WDD0230002300{value:D2}00\r";
                    }
                    else
                    {
                        message = $"%01#WDD0231{address + 10:D4}{value:D4}\r";
                    }
                }
                else
                {
                    message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
                }
                byte[] messageBytes = Encoding.ASCII.GetBytes(message);
                serialPort.Write(messageBytes, 0, messageBytes.Length);
                Dispatcher.Invoke(() => LogMessage($"PLC로 데이터 전송: {message.Trim()} (포트: {currentPortName})."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"PLC로 데이터 전송 중 오류: {ex.Message}"));
            }
        }

        // PO 정보를 PLC로 전송하는 메소드
        private void SendPOInfoToPLC(string poInfo)
        {
            if (!serialPort.IsOpen)
            {
                Dispatcher.Invoke(() => LogError("시리얼 포트가 열려 있지 않습니다."));
                return;
            }

            try
            {
                string message;
                if (isCustomProtocol)
                {
                    message = "%01#WDD023100";
                    for (int i = 0; i < poInfo.Length; i++)
                    {
                        message += $"{((int)poInfo[i]):X2}";
                    }
                    message += "\r";
                }
                else
                {
                    for (int i = 0; i < poInfo.Length; i += 2)
                    {
                        string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                        int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                        SendDataToPLC(2310 + (i / 2), value);
                    }
                    return;
                }

                byte[] messageBytes = Encoding.ASCII.GetBytes(message);
                serialPort.Write(messageBytes, 0, messageBytes.Length);
                Dispatcher.Invoke(() => LogMessage($"PO 정보 전송: {message.Trim()} (포트: {currentPortName})."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"PO 정보 전송 중 오류: {ex.Message}"));
            }
        }

        // 설정 저장
        private void SaveSettings(string portName, string protocol)
        {
            File.WriteAllLines(iniFilePath, new string[] { portName, protocol });
        }

        // 메시지를 재시도 로직과 함께 전송하는 메소드
        private void SendMessageWithRetry(Action sendMessage, int maxRetries)
        {
            int attempts = 0;
            bool success = false;
            while (attempts < maxRetries && !success)
            {
                try
                {
                    sendMessage();
                    success = true;
                }
                catch (Exception ex)
                {
                    attempts++;
                    Dispatcher.Invoke(() => LogError($"메시지 전송 오류 (시도 {attempts}) (포트: {currentPortName}): {ex.Message}"));
                    if (attempts >= maxRetries)
                    {
                        Dispatcher.Invoke(() => LogError("최대 재시도 횟수 도달. 포기합니다."));
                    }
                    else
                    {
                        System.Threading.Thread.Sleep(1000); // 잠시 대기 후 재시도
                    }
                }
            }
        }

        // 시리얼 포트 데이터 수신 이벤트 핸들러
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string receivedData = serialPort.ReadExisting();
                Dispatcher.Invoke(() => LogMessage($"PLC로부터 데이터 수신: {receivedData} (포트: {currentPortName})."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"PLC로부터 데이터 수신 중 오류: {ex.Message}"));
            }
        }

        // 로그 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logMessage = $"{timestamp}: {message}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = logMessage;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);
            });

            // 로그를 파일로 저장
            using (StreamWriter file = new StreamWriter("log.txt", true))
            {
                file.WriteLine(logMessage);
            }
        }

        // 에러 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogError(string error)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string errorMessage = $"{timestamp}: {error}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = errorMessage;
                item.Foreground = Brushes.Red;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);

                ListBoxItem errorItem = new ListBoxItem();
                errorItem.Content = errorMessage;
                errorItem.Foreground = Brushes.Red;
                ErrorListBox.Items.Add(errorItem);
                ErrorListBox.ScrollIntoView(errorItem);
            });

            // 로그를 파일로 저장
            using (StreamWriter file = new StreamWriter("error_log.txt", true))
            {
                file.WriteLine(errorMessage);
            }
        }

        // 윈도우가 닫힐 때 타이머를 중지하고 시리얼 포트를 닫는 메소드
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            timer.Stop();
            clockTimer.Stop();
            if (serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }
    }
}
주요 수정 사항:
포트와 프로토콜 설정 불러오기: 프로그램 시작 시 저장된 포트와 프로토콜 설정을 불러오도록 수정했습니다.
포트 초기화 문제 해결: 프로그램 실행 시 포트 접근 거부 메시지와 성공 메시지가 순서대로 나오는 문제를 해결했습니다.
동적 주소 할당: DT2310에서 DT2319까지 가변적으로 전송할 수 있도록 수정했습니다.
설정 저장: 선택된 포트와 프로토콜을 setup.ini 파일에 저장하도록 수정했습니다.
이제 프로그램이 실행될 때 저장된 설정을 불러오고, 올바른 순서로 메시지를 출력하며, 입력된 문자열을 가변적으로 전송합니다.