MVVM 패턴에서 로그 파일을 DataGrid에 표시하도록 구현하기 위해 아래와 같은 구조를 사용할 수 있습니다.

1. 요구사항 분석
특정 경로의 로그 파일을 읽어와 DataGrid에 표시
로그를 다음 3개의 컬럼으로 분리:
시간: [2024-11-21 11:11:12.999]
메시지: NG NG:204121451:MSG_E_gtwtwt
세부 내용: gsgsgsg
2일치를 시간 내림차순으로 표시
프로그램 첫 실행 및 파일 수정 시 데이터 갱신
2. 구현 계획
2.1 MainViewModel
ViewModel에서 파일을 읽어 데이터 처리 및 DataGrid 바인딩을 담당합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;

public class MainViewModel : BaseViewModel
{
    private string logFilePath = @"C:\Your\Log\Path\log.txt"; // 로그 파일 경로

    public ObservableCollection<LogEntry> LogEntries { get; set; } = new ObservableCollection<LogEntry>();

    public MainViewModel()
    {
        LoadLogs();
        WatchLogFile();
    }

    // 로그 파일 로드
    private void LoadLogs()
    {
        if (File.Exists(logFilePath))
        {
            var lines = File.ReadAllLines(logFilePath);
            var parsedEntries = lines
                .Where(line => !string.IsNullOrWhiteSpace(line))
                .Select(ParseLogLine)
                .Where(entry => entry != null)
                .OrderByDescending(entry => entry.Time) // 시간 내림차순
                .Take(48) // 2일치 데이터
                .ToList();

            LogEntries.Clear();
            foreach (var entry in parsedEntries)
            {
                LogEntries.Add(entry);
            }
        }
    }

    // 로그 파일 수정 감지
    private void WatchLogFile()
    {
        var fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(logFilePath))
        {
            Filter = Path.GetFileName(logFilePath),
            NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName
        };

        fileWatcher.Changed += (s, e) => LoadLogs();
        fileWatcher.EnableRaisingEvents = true;
    }

    // 로그 라인 파싱
    private LogEntry ParseLogLine(string line)
    {
        try
        {
            var timeEndIndex = line.IndexOf("]");
            var timePart = line.Substring(1, timeEndIndex - 1); // [2024-11-21 11:11:12.999]
            var messageStartIndex = timeEndIndex + 2;
            var messageEndIndex = line.LastIndexOf(":");
            var messagePart = line.Substring(messageStartIndex, messageEndIndex - messageStartIndex);
            var detailsPart = line.Substring(messageEndIndex + 1);

            return new LogEntry
            {
                Time = DateTime.Parse(timePart),
                Message = messagePart,
                Details = detailsPart
            };
        }
        catch
        {
            // 로그 파싱 실패 시 null 반환
            return null;
        }
    }
}

// 로그 항목 클래스
public class LogEntry
{
    public DateTime Time { get; set; }
    public string Message { get; set; }
    public string Details { get; set; }
}
2.2 XAML
DataGrid는 LogEntries를 ItemsSource로 바인딩하며, 컬럼은 MVVM 스타일로 정의합니다.

xml
코드 복사
<Window x:Class="LogViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Viewer" Height="450" Width="800">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>
    <Grid>
        <DataGrid ItemsSource="{Binding LogEntries}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- 시간 컬럼 -->
                <DataGridTextColumn Header="시간" Binding="{Binding Time, StringFormat=yyyy-MM-dd HH:mm:ss.fff}" Width="*"/>
                <!-- 메시지 컬럼 -->
                <DataGridTextColumn Header="메시지" Binding="{Binding Message}" Width="2*"/>
                <!-- 세부 내용 컬럼 -->
                <DataGridTextColumn Header="세부 내용" Binding="{Binding Details}" Width="2*"/>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
3. 설명
파일 로드 및 파싱: MainViewModel의 LoadLogs 함수에서 파일 내용을 읽고, 로그 라인을 파싱하여 LogEntry 리스트로 변환합니다.
시간 내림차순 정렬: OrderByDescending를 사용해 로그를 시간순으로 정렬합니다.
FileSystemWatcher: 로그 파일 수정 시 Changed 이벤트를 통해 UI를 자동으로 갱신합니다.
DataGrid: XAML에서 LogEntries를 ItemsSource로 설정하여 MVVM 패턴을 유지합니다.
4. 추가 기능
파일 경로 설정: logFilePath를 설정 창에서 변경 가능하도록 수정.
로그 필터링: 특정 메시지만 표시하도록 검색 기능 추가.