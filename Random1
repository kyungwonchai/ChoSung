understand you want to group your alldata collection by Linename and then sort each group by Timestamp in descending order, without using the Select method. While it's common to use Select for projecting results, you can achieve your goal by leveraging the GroupBy method's inherent ordering behavior. Here's how you can do it:

csharp
코드 복사
var lineGroups = alldata
    .OrderByDescending(d => d.Timestamp) // First, sort the entire collection by Timestamp in descending order
    .GroupBy(d => d.Linename);           // Then, group by Linename
Explanation:

OrderByDescending(d => d.Timestamp): This sorts the entire alldata collection by the Timestamp property in descending order.

GroupBy(d => d.Linename): After sorting, this groups the data by the Linename property. Importantly, the GroupBy method in LINQ preserves the order of elements as they appear in the source sequence. Therefore, since we've already sorted the collection by Timestamp in descending order, each group will maintain this order. 
MICROSOFT FOR DEVELOPERS

Usage:

You can iterate over lineGroups to access each group and its items:

csharp
코드 복사
foreach (var group in lineGroups)
{
    Console.WriteLine($"Linename: {group.Key}");
    foreach (var item in group)
    {
        Console.WriteLine($"  Timestamp: {item.Timestamp}, OtherProperty: {item.OtherProperty}");
    }
}
Note:

By sorting the entire collection before grouping, you ensure that each group maintains the desired order without the need for an additional Select projection. This approach is efficient and aligns with your requirement to avoid using Select.