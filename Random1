알겠습니다. 형님. 죄송합니다. 제가 폴더명을 마음대로 써서 더 헷갈리게 만들었습니다.

지금 상황을 정확하게 정리하고, 형님이 가지고 계신 폴더 이름(docker1, react1)을 그대로 사용해서 한 단계씩 진행하겠습니다.

현재 상황:

모든 작업을 할 최상위 폴더는 /home/kw/docker1 입니다.

그 안에 기존 React 프로젝트를 복사해 온 react1 폴더가 있습니다.

최종 목표: react1 프로젝트를 도커로 실행시키는 것

## 1단계: react1 폴더로 이동하기
가장 먼저, 작업할 폴더인 react1 안으로 들어가야 합니다. 앞으로 모든 명령어는 이 폴더 안에서 입력할 겁니다.

터미널에 아래 명령어를 입력하세요.

Bash

cd /home/kw/docker1/react1
## 2단계: Node.js 버전 확인하기
형님 말씀대로, 원래 쓰던 Node.js 버전을 확인해서 똑같이 맞춰주는 게 가장 안전합니다.

터미널에 아래 명령어를 입력해서 현재 프로젝트가 쓰던 버전을 확인하세요.

Bash

node -v
결과로 v16.14.2 와 같이 버전이 나오면, 맨 앞 숫자 **16**만 기억해두세요.

## 3단계: Dockerfile 파일 만들고 내용 채우기
이제 react1 폴더 안에 도커 설계도인 Dockerfile을 만들 차례입니다.

1. nano로 Dockerfile을 만드세요.

터미널에 아래 명령어를 입력하면, 편집 화면이 열립니다.

Bash

nano Dockerfile
2. 아래 내용을 복사해서, 열린 편집 화면에 붙여넣으세요.

중요: 맨 첫 줄의 node:18 부분은, 방금 2단계에서 확인한 형님의 버전 숫자로 꼭 바꿔주세요. (예: node:16)

Dockerfile

# --- 이 내용을 복사해서 붙여넣으세요 ---
# 아래 첫 줄의 숫자 '18'을 형님의 node 버전 숫자로 바꾸세요!
FROM node:18 as build

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .
RUN npm run build

FROM nginx:stable-alpine

COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
3. 저장하고 나오세요.

Ctrl + X → Y → Enter

## 4단계: 도커 명령어 입력하기
이제 설계도가 완성됐으니, 터미널에서 딱 두 개의 명령어를 입력해서 실행만 시키면 됩니다.

1. 도커 이미지 만들기 (포장하기)

react1 프로젝트를 my-react-app이라는 이름으로 포장합니다.

Bash

docker build -t my-react-app .
(맨 뒤에 점 .을 꼭 찍어야 합니다. "현재 폴더(react1)에 있는 Dockerfile을 사용하라"는 뜻입니다.)

2. 도커 컨테이너 실행하기 (포장 풀기)

방금 만든 my-react-app 포장을 실행시킵니다.

Bash

docker run -p 8080:80 my-react-app
## 끝: 확인하기
이제 웹 브라우저를 열고 주소창에 아래 주소를 입력하시면, 형님의 react1 프로젝트가 화면에 나타날 겁니다.

http://localhost:8080

