래는 C#에서 static 클래스에 Dictionary를 사용하여 키를 받아 값을 반환하는 전역 접근용 코드 예시입니다. 이 코드는 static 클래스를 이용해 애플리케이션의 여러 곳에서 이 Dictionary에 접근하고 값을 쉽게 조회할 수 있게 합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;

public static class GlobalDictionary
{
    // static 딕셔너리 선언 - 키: string, 값: string 형식
    private static Dictionary<string, string> _data = new Dictionary<string, string>();

    // 데이터를 초기화하는 정적 생성자
    static GlobalDictionary()
    {
        // 필요한 초기 데이터를 여기에 추가합니다.
        _data.Add("Key1", "Value1");
        _data.Add("Key2", "Value2");
        _data.Add("Key3", "Value3");
    }

    // 특정 키에 해당하는 값을 반환하는 정적 메서드
    public static string GetValue(string key)
    {
        if (_data.TryGetValue(key, out string value))
        {
            return value;
        }
        else
        {
            // 키가 존재하지 않는 경우 처리
            return "키가 존재하지 않습니다.";
        }
    }

    // 딕셔너리에 값을 추가하는 정적 메서드 (필요에 따라)
    public static void AddValue(string key, string value)
    {
        if (!_data.ContainsKey(key))
        {
            _data.Add(key, value);
        }
        else
        {
            // 이미 키가 존재할 경우 덮어쓰거나 무시할 수 있음
            _data[key] = value;
        }
    }
}

// 사용 예시
public class Program
{
    public static void Main()
    {
        // 전역 Dictionary에서 값 가져오기
        Console.WriteLine(GlobalDictionary.GetValue("Key1")); // 출력: Value1
        Console.WriteLine(GlobalDictionary.GetValue("KeyX")); // 출력: 키가 존재하지 않습니다.

        // 새로운 값을 추가하기
        GlobalDictionary.AddValue("Key4", "Value4");
        Console.WriteLine(GlobalDictionary.GetValue("Key4")); // 출력: Value4
    }
}
코드 설명:
GlobalDictionary 클래스

이 클래스는 static으로 선언되어 애플리케이션의 어디서든 접근할 수 있도록 설계되었습니다.
딕셔너리 필드 (_data)

Dictionary<string, string> 형식의 _data 필드를 가지고 있으며, 정적 필드로 설정되어 모든 인스턴스에서 공유됩니다.
정적 생성자

클래스가 처음 사용될 때 호출되는 정적 생성자(static constructor)에서 초기 데이터를 딕셔너리에 추가하고 있습니다.
GetValue 메서드

key 값을 받아 Dictionary에서 해당 값을 찾고, 존재하면 값을 반환하고 없으면 기본 메시지를 반환합니다.
AddValue 메서드
