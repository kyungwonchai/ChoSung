재 제공한 코드는 Flask 서버에서 실행되고 있는 PC를 기준으로 목록에 있는 IP와 포트에 접근 가능 여부를 테스트하는 코드입니다. 사용자가 요청한 것은 Flask 웹에 접속한 유저의 PC에서 지정된 IP와 포트 접근 가능 여부를 테스트하는 것입니다. 따라서 아래는 수정된 코드를 제공합니다.

수정된 코드 설명
유저의 브라우저에서 JavaScript를 사용하여 직접 타겟 IP와 포트에 접근 가능 여부를 테스트하도록 수정했습니다. 이 코드는 Flask 서버가 단순히 HTML을 제공하고, 실제 테스트는 유저의 브라우저가 JavaScript를 통해 수행합니다.

Flask 코드 (app.py)
Flask는 단순히 HTML 페이지를 반환합니다.

python
코드 복사
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/ipchk')
def ip_check_page():
    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
HTML 템플릿 (templates/client_check.html)
JavaScript를 사용하여 유저의 브라우저가 직접 IP와 포트 접근 가능 여부를 테스트합니다. WebSocket을 통해 접근 가능 여부를 확인하며, 결과는 테이블에 표시됩니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Port Accessibility Checker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Client Port Accessibility Checker</h1>
    <button onclick="checkPorts()">Check Ports</button>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="results"></tbody>
    </table>

    <script>
        const ipPorts = [
            { ip: "10.10.100.11", ports: [80, 443, 8080] },
            { ip: "192.168.1.1", ports: [22, 3306, 3389] },
            { ip: "10.10.100.12", ports: [80, 443] }
        ];

        function checkPort(ip, port) {
            return new Promise(resolve => {
                const ws = new WebSocket(`ws://${ip}:${port}`);
                ws.onopen = () => {
                    ws.close();
                    resolve({ ip, port, status: "Open" });
                };
                ws.onerror = () => {
                    resolve({ ip, port, status: "Closed" });
                };
            });
        }

        async function checkPorts() {
            const resultsTable = document.getElementById("results");
            resultsTable.innerHTML = ""; // 기존 결과 초기화

            for (const entry of ipPorts) {
                for (const port of entry.ports) {
                    const result = await checkPort(entry.ip, port);
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${result.ip}</td>
                        <td>${result.port}</td>
                        <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                            ${result.status}
                        </td>
                    `;
                    resultsTable.appendChild(row);
                }
            }
        }
    </script>
</body>
</html>
수정된 동작 방식
Flask 서버:

유저가 /ipchk 경로로 접속하면 client_check.html 파일을 반환합니다.
Flask 서버는 테스트를 수행하지 않습니다.
JavaScript를 사용한 테스트:
