 없이 윈도우 API를 사용하여 사용자 입력 감지하는 방법으로 다시 설계하겠습니다.
후킹이 필요 없는 방식으로 훨씬 가볍고, 기업 환경에서도 사용 가능한 안전한 솔루션을 제공합니다.

✅ 해결 방법
윈도우 API GetLastInputInfo 활용

키보드/마우스 입력이 언제 있었는지 확인
시스템 전체의 마지막 입력 시간을 가져옴 (전역 후킹 불필요)
타이머로 주기적으로 확인하여 입력이 없으면 모니터를 끔
모니터 ON/OFF 제어 (SendMessage)

SC_MONITORPOWER 메시지를 SendMessage로 직접 전달
PostMessage가 아닌 SendMessage(GetDesktopWindow()) 사용하여 안정적 실행
트레이 아이콘 유지

UI가 없어도 트레이에서 실행되도록 설정
🚀 완전한 소스 코드 (후킹 없이 구현)
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace MonitorAutoControl
{
    static class Program
    {
        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new AppContext());
        }
    }

    public class AppContext : ApplicationContext
    {
        private static readonly int WM_SYSCOMMAND = 0x0112;
        private static readonly int SC_MONITORPOWER = 0xF170;
        private static readonly int MONITOR_ON = -1;
        private static readonly int MONITOR_OFF = 2;
        private static readonly int IDLE_TIME_LIMIT = 60 * 1000; // 1분 (1000ms * 60)

        private System.Threading.Timer _idleTimer;
        private NotifyIcon _trayIcon;

        public AppContext()
        {
            // 1초마다 입력 감지
            _idleTimer = new System.Threading.Timer(CheckIdleState, null, 1000, 1000);

            // 트레이 아이콘 설정
            _trayIcon = new NotifyIcon
            {
                Icon = SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
                {
                    Items = { new ToolStripMenuItem("종료", null, (s, e) => ExitApplication()) }
                }
            };

            Application.ApplicationExit += (s, e) => CleanUp();
        }

        private void CheckIdleState(object state)
        {
            int idleTime = GetIdleTime();
            if (idleTime > IDLE_TIME_LIMIT)
            {
                TurnMonitorOff();
            }
            else
            {
                TurnMonitorOn();
            }
        }

        private int GetIdleTime()
        {
            LASTINPUTINFO lastInputInfo = new LASTINPUTINFO();
            lastInputInfo.cbSize = Marshal.SizeOf(typeof(LASTINPUTINFO));

            if (GetLastInputInfo(ref lastInputInfo))
            {
                return Environment.TickCount - lastInputInfo.dwTime;
            }
            return 0; // 오류 발생 시 기본값 반환
        }

        private void TurnMonitorOn()
        {
            SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_ON);
        }

        private void TurnMonitorOff()
        {
            SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_OFF);
        }

        private void ExitApplication()
        {
            CleanUp();
            Application.Exit();
        }

        private void CleanUp()
        {
            _trayIcon.Dispose();
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct LASTINPUTINFO
        {
            public int cbSize;
            public int dwTime;
        }

        [DllImport("user32.dll")]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr GetDesktopWindow();

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);
    }
}
🔍 코드 설명
마우스/키보드 입력 감지 (GetLastInputInfo)

GetLastInputInfo()를 사용하여 마지막 사용자 입력 시간을 가져옴.
현재 시간(Environment.TickCount)과 비교하여 입력 간격을 계산.
전역 후킹이 불필요하며, 시스템 전체에서 작동.
모니터 ON/OFF (SendMessage)

WM_SYSCOMMAND 메시지를 GetDesktopWindow()에 직접 보냄.
MONITOR_OFF(2), MONITOR_ON(-1) 사용하여 빠르게 스위칭.
백그라운드 실행

ApplicationContext 사용 → UI 없이 트레이에서 실행됨.
트레이 아이콘 유지, 우클릭으로 종료 가능.
✅ 최종 테스트 체크리스트
 키보드/마우스 입력 감지 정상 작동
 1분 후 자동으로 모니터 OFF 확인
 입력 발생 시 모니터 ON 확인
 트레이 아이콘 정상 작동 확인