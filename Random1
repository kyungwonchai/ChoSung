he error message "get_data was never awaited" indicates that you have an asynchronous function (get_data) which was called without using await to properly wait for it to finish executing. In Python's asynchronous programming model, when you call an async function, you need to await it to ensure that it runs asynchronously and that the program doesn't continue until the function completes its execution.

Explanation:
In Python's asyncio model, when you define an asynchronous function with async def, you are telling Python that the function will perform an asynchronous task (like I/O or network operations).
To actually call this asynchronous function and wait for it to finish, you need to await the function call.
In the case of Flask, if you're using asynchronous routes, Flask requires that you explicitly await any asynchronous function inside a route. This error occurs when you define an asynchronous function but forget to await it in the place where it's called.

Solution:
You need to use await to call the asynchronous get_data function properly in your Flask route.

Here’s how you can fix it:

Full Example with Proper Awaiting:
1. Flask Application (Python)
python
Copy code
from flask import Flask, render_template, request, jsonify
import mymssql
import asyncio

app = Flask(__name__)

# 고정된 쿼리들 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = ?"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = ?"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = ?"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # mymssql을 사용하여 데이터베이스 연결
        conn = mymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달
        cursor.execute(query, (qr_value,))  # QR 값을 쿼리 파라미터로 전달

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        # 결과가 있으면 데이터를 테이블 형식으로 변환하여 반환
        if len(rows) > 0:
            data = [dict(zip(columns, row)) for row in rows]
            return data
        else:
            return None
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    # 고정된 쿼리들 실행
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

# 함수 B: QR 값을 받아 여러 개의 functionA를 실행
async def functionB(connection_string, qr_value):
    """
    함수 B는 여러 개의 쿼리를 받아 비동기적으로 함수 A를 여러 번 실행하는 함수.
    각 쿼리의 결과를 리스트로 반환
    """
    # 함수 A를 비동기로 실행
    results = await asyncio.to_thread(functionA, connection_string, qr_value)
    return results

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
async def get_data():
    """
    사용자가 입력한 QR 값을 받아 함수 B를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값
    
    # 함수 B 실행: 여러 개의 쿼리를 비동기로 실행
    data = await functionB(connection_string, qr_value)  # 여기서 await를 추가해야 함
    
    # 결과 처리: 데이터가 없으면 "없음" 메시지 출력
    if any(d is None for d in data):
        return jsonify({'status': 'No data', 'message': 'No data found for one or more queries.'})
    else:
        # 결과를 테이블 형식으로 렌더링
        return render_template('table.html', data=data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
주요 변경 사항:
await functionB(connection_string, qr_value):

get_data 함수 안에서 functionB를 호출할 때 await를 추가하여 비동기적으로 처리할 수 있게 했습니다.
await을 사용해야 functionB가 비동기적으로 실행되고, 그 결과를 기다릴 수 있습니다.
async def get_data():

get_data 함수가 async def로 정의되어 있으며, 비동기적으로 동작하기 위해 await를 사용합니다.
실행 방법:
필요한 라이브러리 설치:

bash
Copy code
pip install "flask[async]" mymssql
앱 실행:

bash
Copy code
python app.py
브라우저에서 테스트: 브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.
