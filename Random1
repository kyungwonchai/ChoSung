입력 데이터 X_vectorized의 크기가 (1, 10),
모델의 첫 번째 Linear 레이어가 (11, 128)으로 설정됨
즉, 입력 크기가 10인데 모델은 11을 기대하고 있어서 에러 발생
✅ 해결 방법:

훈련 데이터에서 라인(Line) 정보 포함 → input_size = max_length + 1
예측할 때는 QR만 사용 → input_size = max_length
모델을 input_size에 맞춰 동적으로 변경
✅ 수정된 최종 코드 (훈련: QR + Line, 예측: QR만)
python
Copy code
import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data_utils
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

# 📌 데이터 로드 및 전처리 (라인 포함)
def load_data_from_txt(file_path, sample_ratio=0.1):
    with open(file_path, "r", encoding="utf-8") as f:
        lines = f.readlines()

    data = [line.strip().split()[:4] for line in lines if len(line.strip().split()) >= 4]
    df = pd.DataFrame(data, columns=["Line", "Time", "Model", "QR"])
    df["Time"] = pd.to_numeric(df["Time"], errors="coerce")
    df = df.sort_values(by=["Line", "Time"]).reset_index(drop=True)
    df_sampled = df.groupby("Line").apply(lambda x: x.sample(frac=sample_ratio, random_state=42)).reset_index(drop=True)
    return df_sampled

# 📌 QR 벡터화 (훈련: QR + Line 포함, 예측: QR만)
def vectorize_qr_with_line(qr_values, line_values, line_encoder, max_length=10):
    vectorized = np.zeros((len(qr_values), max_length + 1), dtype=np.int32)  # QR + Line 정보 포함
    for i, (qr, line) in enumerate(zip(qr_values, line_values)):
        for j, char in enumerate(qr[:max_length]):
            vectorized[i, j] = ord(char)
        vectorized[i, -1] = line_encoder.transform([line])[0]  # 라인 정보를 마지막 컬럼에 추가
    return vectorized

def vectorize_qr(qr_values, max_length=10):
    vectorized = np.zeros((len(qr_values), max_length), dtype=np.int32)  # QR 정보만 포함
    for i, qr in enumerate(qr_values):
        for j, char in enumerate(qr[:max_length]):
            vectorized[i, j] = ord(char)
    return vectorized

# 📌 MLP 모델 정의 (동적으로 입력 크기 설정)
class QRMLPModel(nn.Module):
    def __init__(self, input_size, num_classes):
        super(QRMLPModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, 32)
        self.fc4 = nn.Linear(32, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.relu(self.fc3(x))
        x = self.fc4(x)
        return x

# 📌 학습 함수 (QR + Line 포함)
def train_and_validate_model(df_data, epochs=20, batch_size=64, learning_rate=0.001, max_length=10):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # 데이터 전처리
    qr_values = df_data["QR"].values
    line_values = df_data["Line"].values
    model_names = df_data["Model"].values

    # Label Encoding
    model_encoder = LabelEncoder()
    line_encoder = LabelEncoder()

    y_encoded = model_encoder.fit_transform(model_names)
    line_encoded = line_encoder.fit_transform(line_values)

    # QR + Line을 포함하여 벡터화
    X_vectorized = vectorize_qr_with_line(qr_values, line_values, line_encoder, max_length=max_length)
    input_size = X_vectorized.shape[1]  # 🔹 모델 입력 크기 설정

    # 데이터셋 분할
    X_train, X_val, y_train, y_val = train_test_split(X_vectorized, y_encoded, test_size=0.3, random_state=42)

    # PyTorch 데이터 로더 생성
    train_dataset = data_utils.TensorDataset(torch.tensor(X_train, dtype=torch.float32), torch.tensor(y_train, dtype=torch.long))
    val_dataset = data_utils.TensorDataset(torch.tensor(X_val, dtype=torch.float32), torch.tensor(y_val, dtype=torch.long))
    train_loader = data_utils.DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
    val_loader = data_utils.DataLoader(val_dataset, batch_size=batch_size, shuffle=False)

    # 모델 초기화
    model = QRMLPModel(input_size=input_size, num_classes=len(model_encoder.classes_)).to(device)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)

    # 🔹 훈련 과정
    model.train()
    for epoch in range(epochs):
        total_loss = 0
        for inputs, targets in train_loader:
            inputs, targets = inputs.to(device), targets.to(device)
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, targets)
            loss.backward()
            optimizer.step()
            total_loss += loss.item()

        print(f"Epoch [{epoch+1}/{epochs}] - Loss: {total_loss / len(train_loader):.4f}")

    print("🎉 훈련 완료!")
    return model, model_encoder, max_length

# 📌 예측 함수 (QR 값만 입력)
def predict_qr(model, model_encoder, qr_value, max_length):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    X_vectorized = vectorize_qr([qr_value], max_length=max_length)

    # 🔹 예측 수행
    model.eval()
    with torch.no_grad():
        inputs = torch.tensor(X_vectorized, dtype=torch.float32).to(device)
        outputs = model(inputs)
        predicted = torch.argmax(outputs, dim=1).cpu().numpy()[0]

    predicted_model = model_encoder.inverse_transform([predicted])[0]
    print(f"✅ 예측된 모델: {predicted_model}")

# 📌 실행 예제
if __name__ == "__main__":
    txt_file_path = "runwait.txt"
    df_data = load_data_from_txt(txt_file_path, sample_ratio=0.1)

    # 🔥 모델 학습 (QR + Line 포함)
    trained_model, trained_model_encoder, max_length = train_and_validate_model(df_data, epochs=20)

    # 🔥 예측 예제 (QR만 사용)
    test_qr = "123ABC456"
    predict_qr(trained_model, trained_model_encoder, test_qr, max_length)
📌 수정된 사항 (에러 해결)
훈련할 때 QR + Line을 사용 → input_size = max_length + 1
예측할 때 QR만 사용 → input_size = max_length
모델이 입력 크기를 자동으로 설정하도록 수정