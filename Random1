PF DevExpress 22.2에서 스프레드시트의 모든 시트 이름을 리스트박스(ListBox)에 넣고, 리스트박스의 아이템을 더블클릭하면 해당 시트가 선택되도록 하는 코드를 아래에 설명과 함께 제공합니다.

우선, 이 솔루션에서는 DevExpress의 SpreadsheetControl을 사용하여 여러 시트를 관리하고 ListBox에 표시합니다. 이 작업은 다음과 같은 주요 단계를 포함합니다.

스프레드시트 컨트롤에서 모든 시트의 이름을 추출합니다.
이 시트 이름들을 ListBox에 추가합니다.
ListBox의 아이템을 더블클릭할 때 해당 시트를 활성화하도록 이벤트를 연결합니다.
다음은 이 기능을 구현한 코드입니다:

1. XAML 디자인 파일
먼저 WPF XAML 파일에서 SpreadsheetControl과 ListBox를 추가합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="Spreadsheet Sheet List Example" Height="450" Width="800">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="1*" />
        </Grid.ColumnDefinitions>
        
        <!-- SpreadsheetControl for displaying the Excel workbook -->
        <dx:SpreadsheetControl x:Name="spreadsheetControl" Grid.Column="0"/>

        <!-- ListBox to show the names of all sheets in the spreadsheet -->
        <ListBox x:Name="sheetListBox" Grid.Column="1"
                 MouseDoubleClick="SheetListBox_MouseDoubleClick"
                 Margin="10" />
    </Grid>
</Window>
SpreadsheetControl (spreadsheetControl): Excel 파일을 표시하고 조작할 수 있습니다.
ListBox (sheetListBox): 스프레드시트의 모든 시트 이름을 표시하며, 더블클릭 시 해당 시트를 선택하게 만듭니다.
2. C# 코드 비하인드 파일
이제 C# 코드 비하인드에서 스프레드시트와 리스트박스를 연결하고, 더블클릭 이벤트를 처리하는 로직을 추가합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            // 스프레드시트 컨트롤의 문서 접근
            IWorkbook workbook = spreadsheetControl.Document;

            // ListBox를 초기화
            sheetListBox.Items.Clear();

            // 모든 시트에 접근하여 이름을 ListBox에 추가
            foreach (Worksheet sheet in workbook.Worksheets)
            {
                sheetListBox.Items.Add(sheet.Name);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 선택된 아이템이 있는지 확인
            if (sheetListBox.SelectedItem != null)
            {
                // 선택된 시트 이름을 가져옴
                string selectedSheetName = sheetListBox.SelectedItem.ToString();

                // 스프레드시트 컨트롤의 문서에서 해당 시트를 활성화
                IWorkbook workbook = spreadsheetControl.Document;
                Worksheet selectedSheet = workbook.Worksheets[selectedSheetName];
                workbook.Worksheets.ActiveWorksheet = selectedSheet;
            }
        }
    }
}
코드 설명
LoadSheetNamesIntoListBox() 메소드:

이 메소드는 스프레드시트의 모든 시트 이름을 리스트박스에 추가하는 역할을 합니다.
spreadsheetControl.Document를 통해 스프레드시트의 문서 (IWorkbook)에 접근합니다.
모든 워크시트를 순회하면서 시트 이름을 리스트박스에 추가합니다.
SheetListBox_MouseDoubleClick 이벤트 핸들러:

ListBox에서 항목이 더블클릭될 때 호출됩니다.
선택된 항목 (sheetListBox.SelectedItem)을 가져와서 해당 시트의 이름으로 spreadsheetControl의 활성 워크시트를 변경합니다.
workbook.Worksheets[selectedSheetName]를 통해 시트 이름으로 워크시트에 접근하고, workbook.Worksheets.ActiveWorksheet를 설정하여 선택된 시트를 활성화합니다.
주의사항
시트 이름 중복: 시트 이름이 중복될 경우 문제가 발생할 수 있습니다. 이 경우 시트 인덱스를 이용해 접근하는 방법으로 수정할 수 있습니다.
더블클릭 이벤트: 더블클릭 외에도 다른 이벤트 (예: 단일 클릭)로 시트를 활성화하도록 변경할 수 있습니다.
사용 예시
프로그램을 실행하면 SpreadsheetControl에 Excel 파일을 로드합니다.
모든 시트 이름이 오른쪽 ListBox에 표시됩니다.
특정 시트를 선택하고 더블클릭하면 해당 시트가 SpreadsheetControl에서 활성화됩니다.
이렇게 하면 DevExpress의 SpreadsheetControl과 ListBox를 사용해 사용자가 원하는 시트를 손쉽게 탐색하고 선택할 수 있도록 할 수 있습니다.






나의 말:
스프레드컨트롤이 여러개이고 리스트에는 스프레드시트의  순서별로 지정된 색상의 글자로 추가가 되야하며 더블클릭히 해당시트를 찾아갈수이쎅해야되
ChatGPT의 말:
ChatGPT
여러 개의 SpreadsheetControl이 있을 때, 각 컨트롤에 대한 시트 이름을 리스트박스에 추가하고, 각 시트 이름이 지정된 색상으로 표시되며 더블클릭하면 해당 스프레드시트를 찾을 수 있도록 하는 방법을 설명드리겠습니다.

아래 예제에서는 여러 개의 스프레드시트 컨트롤을 관리하고, 각 시트의 이름을 색상으로 구분해서 리스트박스에 표시한 다음, 더블클릭으로 특정 스프레드시트로 이동할 수 있도록 구현합니다.

1. XAML 디자인 파일
먼저 WPF XAML 파일에서 여러 개의 SpreadsheetControl과 ListBox를 추가합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="Multi Spreadsheet Sheet List Example" Height="600" Width="1000">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="1*" />
        </Grid.ColumnDefinitions>
        
        <!-- First SpreadsheetControl -->
        <dx:SpreadsheetControl x:Name="spreadsheetControl1" Grid.Column="0" />

        <!-- Second SpreadsheetControl -->
        <dx:SpreadsheetControl x:Name="spreadsheetControl2" Grid.Column="1" />

        <!-- ListBox to show the names of all sheets in the spreadsheets -->
        <ListBox x:Name="sheetListBox" Grid.Column="2"
                 MouseDoubleClick="SheetListBox_MouseDoubleClick"
                 Margin="10" />
    </Grid>
</Window>
여기서는 두 개의 스프레드시트 (spreadsheetControl1과 spreadsheetControl2)를 추가하고, 시트 리스트를 표시할 ListBox를 세 번째 열에 추가했습니다.

2. C# 코드 비하인드 파일
여기서는 각 스프레드시트 컨트롤의 시트 이름을 색상별로 리스트박스에 표시하고, 더블클릭 시 해당 시트를 활성화하는 로직을 구현합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1");
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2");
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, SheetName = sheet.Name };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 시트 이름을 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    Worksheet selectedSheet = workbook.Worksheets[tag.SheetName];
                    workbook.Worksheets.ActiveWorksheet = selectedSheet;

                    // 선택된 스프레드시트를 활성화합니다.
                    MessageBox.Show($"'{tag.SheetName}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // SpreadsheetControl과 SheetName을 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public string SheetName { get; set; }
        }
    }
}
코드 설명
LoadSheetNamesIntoListBox() 메소드:

이 메소드는 여러 SpreadsheetControl에서 시트 이름을 리스트박스에 추가합니다.
각각의 SpreadsheetControl에 대해 다른 색상(예: 빨강, 파랑)을 지정해 시트 이름을 리스트박스에 표시합니다.
AddSheetNamesFromSpreadsheet() 메소드:

이 메소드는 특정 SpreadsheetControl의 모든 시트 이름을 리스트박스에 추가합니다.
TextBlock을 사용하여 시트 이름을 리스트박스에 추가하며, Foreground 속성을 통해 텍스트의 색상을 지정합니다.
각 TextBlock의 Tag 속성에 SpreadsheetControl과 시트 이름을 저장하는 SpreadsheetTag 객체를 추가해 나중에 더블클릭 이벤트에서 이를 사용할 수 있도록 합니다.
SheetListBox_MouseDoubleClick() 이벤트 핸들러:

ListBox의 항목이 더블클릭될 때 호출됩니다.
선택된 TextBlock의 Tag에서 SpreadsheetControl과 시트 이름을 가져와서 해당 시트를 활성화합니다.
선택된 시트를 찾고 이를 ActiveWorksheet로 설정하여 사용자가 해당 시트를 볼 수 있도록 합니다.
SpreadsheetTag 클래스:

각 리스트 항목에 스프레드시트 컨트롤과 시트 이름을 저장하기 위해 사용됩니다.
더블클릭 시 어떤 SpreadsheetControl의 어떤 시트로 이동해야 하는지를 식별하는 데 사용됩니다.
사용 예시
프로그램 실행: 프로그램을 실행하면 두 개의 스프레드시트 (spreadsheetControl1과 spreadsheetControl2)의 모든 시트 이름이 ListBox에 표시됩니다.
리스트 아이템 색상 구분: 각 스프레드시트의 시트 이름은 지정된 색상(예: 빨간색은 첫 번째 스프레드시트, 파란색은 두 번째 스프레드시트)으로 구분됩니다.