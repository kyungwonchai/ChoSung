using System;
using System.Net.Sockets;
using System.Threading;
using System.IO;
using System.Windows.Forms; // Required for MessageBox

public class PortMonitor
{
    // --- Configuration (Variable Naming Consistency) ---
    private const string TargetHost = " 2"; // Target server IP address or hostname (from your image)
    private const int TargetPort = s;              // Target port to check (e.g., MSSQL default 1433, or RDP 3389)
    private const int CheckIntervalSeconds = 10;      // How often to check the port (in seconds)
    private const string LogFilePath = "port_check_log.txt"; // Path for logging port status

    [STAThread] // Required for Windows Forms controls like MessageBox
    public static void Main(string[] args)
    {
        LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Starting port monitor for {TargetHost}:{TargetPort} every {CheckIntervalSeconds} seconds...");

        bool isPortPreviouslyOpen = false; // To track state changes for notifications

        while (true)
        {
            bool isPortCurrentlyOpen = IsPortOpen(TargetHost, TargetPort);

            if (isPortCurrentlyOpen)
            {
                LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Port {TargetPort} on {TargetHost} is OPEN.");
                
                // Only show message box if the status changed from closed to open
                if (!isPortPreviouslyOpen) 
                {
                    // Show a message box indicating the port is open
                    // MessageBox.Show is a blocking call, it will "wait" until the user clicks OK
                    MessageBox.Show($"The port {TargetPort} on {TargetHost} is now OPEN!", 
                                    "Port Status Notification", 
                                    MessageBoxButtons.OK, 
                                    MessageBoxIcon.Information);
                    
                    LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] User acknowledged port open status. Exiting application.");
                    return; // Exit the Main method, which terminates the console application
                }
            }
            else
            {
                LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Port {TargetPort} on {TargetHost} is CLOSED or unreachable.");
                
                // Optional: Show a message box if port becomes closed (uncomment if needed)
                // if (isPortPreviouslyOpen) 
                // {
                //     MessageBox.Show($"The port {TargetPort} on {TargetHost} is now CLOSED or unreachable!", 
                //                     "Port Status Warning", 
                //                     MessageBoxButtons.OK, 
                //                     MessageBoxIcon.Warning);
                // }
            }

            isPortPreviouslyOpen = isPortCurrentlyOpen; // Update previous status

            Thread.Sleep(CheckIntervalSeconds * 1000); // Wait for the specified interval (in milliseconds)
        }
    }

    /// <summary>
    /// Checks if a specific port on a given host is open.
    /// </summary>
    /// <param name="host">The hostname or IP address to check.</param>
    /// <param name="port">The port number to check.</param>
    /// <returns>True if the port is open, false otherwise.</returns>
    private static bool IsPortOpen(string host, int port)
    {
        using (TcpClient tcpClient = new TcpClient())
        {
            try
            {
                // Attempt to connect with a 1-second timeout
                IAsyncResult asyncResult = tcpClient.BeginConnect(host, port, null, null);
                bool success = asyncResult.AsyncWaitHandle.WaitOne(TimeSpan.FromSeconds(1));
                
                if (success)
                {
                    tcpClient.EndConnect(asyncResult);
                }
                
                return success;
            }
            catch (SocketException ex)
            {
                // Common error codes for connection refusal or timeout
                // 10061: Connection refused
                // 10060: Connection timed out
                if (ex.SocketErrorCode == SocketError.ConnectionRefused || 
                    ex.SocketErrorCode == SocketError.TimedOut)
                {
                    // Log the specific error for debugging
                    LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Socket Error for {host}:{port}: {ex.SocketErrorCode} - {ex.Message}");
                    return false;
                }
                else
                {
                    // Other unexpected socket errors
                    LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Unexpected Socket Error for {host}:{port}: {ex.Message}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                // Catch any other unexpected exceptions
                LogMessage($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] An unexpected error occurred while checking port {port} on {host}: {ex.Message}");
                return false;
            }
        }
    }

    /// <summary>
    /// Logs a message to the console and a file.
    /// </summary>
    /// <param name="message">The message to log.</param>
    private static void LogMessage(string message)
    {
        Console.WriteLine(message);
        try
        {
            File.AppendAllText(LogFilePath, message + Environment.NewLine);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[{DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")}] Error writing to log file: {ex.Message}");
        }
    }
}