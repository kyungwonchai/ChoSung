네, 지적해주신 대로 현재 프로그램은 '탐색 방법' (창 제목으로 찾을지, 프로세스 이름으로 찾을지) 자체를 저장하고 있지 않아서, 재시작 시 항상 기본값('창 제목'으로 찾기)으로 돌아가는 문제가 있었습니다. 중요한 부분을 짚어주셨습니다.

이 문제를 해결하기 위해, 사용자가 선택한 '탐색 방법'을 프로그램 설정에 저장하고, 재시작 시 그 설정을 불러오도록 수정하겠습니다. 별도의 '저장' 버튼 없이, 프로그램 종료 시 자동으로 저장됩니다.

아래 수정된 파일들을 적용하시면 됩니다.

## 1. 프로젝트 설정 파일(Settings.settings) 수정
'탐색 방법'을 저장할 새로운 설정을 추가해야 합니다.

Visual Studio의 솔루션 탐색기에서 Properties 폴더 아래의 Settings.settings 파일을 더블 클릭하여 디자이너를 엽니다.
새로운 행에 아래와 같이 설정을 추가합니다.
이름 (Name): SearchByProcessName
형식 (Type): System.Boolean (또는 드롭다운에서 bool 선택)
범위 (Scope): User
값 (Value): False (기본값은 '창 제목'으로 찾기)
Ctrl+S를 눌러 Settings.settings 파일을 저장합니다. Visual Studio가 자동으로 Settings.Designer.cs 파일을 업데이트하여 이 설정을 코드에서 사용할 수 있게 해줍니다.
## 2. MainWindow.xaml.cs 수정
이제 MainWindow.xaml.cs 코드에서 새로 추가된 설정을 로드하고 저장하는 로직을 추가합니다.

아래는 수정된 MainWindow.xaml.cs 파일의 전체 코드입니다. 기존 내용을 모두 지우고 아래 코드로 교체하세요.

주요 변경점:

Window_Loaded: 프로그램 시작 시 SearchByProcessName 설정을 읽어와 라디오 버튼 상태를 복원하고, SearchMethod_Changed를 호출하여 UI(레이블 텍스트)를 업데이트합니다.
OnClosing (또는 이전 버전의 Window_Closing): 프로그램 종료 시 현재 선택된 라디오 버튼의 상태를 SearchByProcessName 설정에 저장합니다.
<!-- end list -->

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        // P/Invoke 및 전역 변수들 (이전과 동일)
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private readonly string logFolderPath;
        private readonly string traceLogPath;
        private string previewImagePath;
        private bool isExiting = false;

        private TesseractEngine OcrEngine { get { if (_ocrEngine == null) { string exePath = AppDomain.CurrentDomain.BaseDirectory; string tessDataPath = Path.Combine(exePath, "tessdata"); _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default); _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-"); } return _ocrEngine; } }

        public MainWindow()
        {
            logFolderPath = Path.Combine(agentBasePath, "logs");
            traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
            InitializeComponent();
            InitializeApp();
        }

        private void LogTrace(string message) { /* 이전과 동일 */ }
        protected override void OnContentRendered(EventArgs e) { base.OnContentRendered(e); this.Hide(); }
        private void InitializeApp() { /* 이전과 동일 */ }
        private void SearchTimer_Tick(object sender, EventArgs e) { /* 이전과 동일 */ }
        private void CheckRequiredFiles() { /* 이전과 동일 */ }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LogTrace("Window_Loaded: 설정 로드 시작.");
            txtTarget.Text = Settings.Default.WindowTitle; // 대상 텍스트 (창 제목 또는 프로세스 이름)
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            // ## 수정된 부분: 탐색 방법 설정 로드 ##
            if (Settings.Default.SearchByProcessName)
            {
                rbFindByProcess.IsChecked = true;
            }
            else
            {
                rbFindByTitle.IsChecked = true;
            }
            // 라디오 버튼 상태 변경에 따른 UI 업데이트 (레이블 텍스트 등)
            SearchMethod_Changed(null, null);
            // ## 수정 완료 ##

            if (File.Exists(previewImagePath))
            {
                try
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 시도 - {previewImagePath}");
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                    LogTrace("Window_Loaded: 미리보기 이미지 로드 성공.");
                }
                catch (Exception ex) { LogTrace($"Window_Loaded: 미리보기 이미지 로드 실패 - {ex.Message}"); }
            }
            else { LogTrace("Window_Loaded: 미리보기 이미지 파일 없음."); }
            UpdateLockState(true);
            LogTrace("Window_Loaded: 설정 로드 완료, 자동 시작 시도.");
            AttemptAutoStart();
        }

        private void AttemptAutoStart() { /* 이전과 동일 */ }
        private void btnToggleEdit_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
        private void UpdateLockState(bool lockState) { /* 이전과 동일 */ }
        private void btnStart_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return; // UI 초기화 전 호출 방지
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
            LogTrace($"SearchMethod_Changed: 탐색 방법 변경됨 - { (rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름") }");
        }
        
        private IntPtr GetTargetWindowHandle() { /* 이전과 동일 */ }
        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { isExiting = true; LogTrace("Application exiting via menu."); this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
            }
            else
            {
                LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
                Settings.Default.WindowTitle = txtTarget.Text; // 대상 텍스트 저장
                Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
                Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
                Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
                Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
                Settings.Default.PcName = txtPcName.Text;

                // ## 수정된 부분: 탐색 방법 설정 저장 ##
                Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
                // ## 수정 완료 ##

                Settings.Default.Save();
                LogTrace("Window OnClosing: 설정 저장 완료.");
                MyNotifyIcon.Dispose();
                LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
                _ocrEngine?.Dispose();
                LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }
        private void PerformLogging() { /* 이전과 동일 */ }
        private void ProcessOcrResult(string rawText) { /* 이전과 동일 */ }
        private void UploadToDatabase(decimal temp, decimal humid) { /* 이전과 동일 */ }
        private void btnSelectArea_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
        private void UpdatePreviewImage() { /* 이전과 동일 */ }
        private Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap) { /* 이전과 동일 */ }
    }
}
[참고] 코드가 너무 길어 생략된 부분(/* 이전과 동일 */)은 바로 이전 답변의 코드를 그대로 사용하시면 됩니다. 이해를 돕기 위해 변경된 부분과 그 주변의 핵심 로직 위주로 보여드렸습니다. 만약을 위해 모든 코드가 포함된 전체 버전을 아래에 다시 첨부합니다.

&lt;details>
&lt;summary>&lt;b>[클릭] 생략된 부분 포함된 MainWindow.xaml.cs 최종 전체 코드&lt;/b>&lt;/summary>

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private readonly string logFolderPath;
        private readonly string traceLogPath;
        private string previewImagePath;
        private bool isExiting = false;

        private TesseractEngine OcrEngine
        {
            get
            {
                if (_ocrEngine == null)
                {
                    string exePath = AppDomain.CurrentDomain.BaseDirectory;
                    string tessDataPath = Path.Combine(exePath, "tessdata");
                    _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
                    _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-");
                }
                return _ocrEngine;
            }
        }
        
        public MainWindow()
        {
            logFolderPath = Path.Combine(agentBasePath, "logs");
            traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
            InitializeComponent();
            InitializeApp();
        }

        private void LogTrace(string message)
        {
            try
            {
                Directory.CreateDirectory(logFolderPath);
                string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} - {message}\r\n";
                File.AppendAllText(traceLogPath, logMessage);
            }
            catch { }
        }

        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            LogTrace("Application Initializing...");
            CheckRequiredFiles();
            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;
            searchTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(1) };
            searchTimer.Tick += SearchTimer_Tick;
            Directory.CreateDirectory(agentBasePath);
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
            LogTrace("Application Initialized.");
        }
        
        private void SearchTimer_Tick(object sender, EventArgs e)
        {
            LogTrace("SearchTimer Tick: 재탐색 시작...");
            lblStatus.Text = "대상 창/프로세스를 찾는 중... (1분마다 재시도)";
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd != IntPtr.Zero)
            {
                LogTrace("SearchTimer Tick: 대상 발견!");
                searchTimer.Stop();
                lblStatus.Text = "대상 발견! 자동 로깅을 시작합니다.";
                if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
            }
            else
            {
                LogTrace("SearchTimer Tick: 대상 찾기 실패.");
            }
        }

        private void CheckRequiredFiles()
        {
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string[] requiredFiles = { "tesseract53.dll", "leptonica-1.83.1.dll" }; 
            foreach (var file in requiredFiles)
            {
                if (!File.Exists(Path.Combine(exePath, file)))
                {
                    LogTrace($"CheckRequiredFiles: 필수 파일 없음 - {file}");
                    MessageBox.Show($"실행에 필수적인 파일이 없습니다: {file}\n\nClickOnce 게시 설정에서 모든 관련 파일이 '포함(Include)'되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return;
                }
            }
            if (!Directory.Exists(Path.Combine(exePath, "tessdata")))
            {
                LogTrace("CheckRequiredFiles: tessdata 폴더 없음.");
                MessageBox.Show("tessdata 폴더를 찾을 수 없습니다.\n\nClickOnce 게시 설정에서 tessdata 폴더와 그 안의 파일들이 포함되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return;
            }
            LogTrace("CheckRequiredFiles: 모든 필수 파일 확인 완료.");
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LogTrace("Window_Loaded: 설정 로드 시작.");
            txtTarget.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (Settings.Default.SearchByProcessName)
            {
                rbFindByProcess.IsChecked = true;
            }
            else
            {
                rbFindByTitle.IsChecked = true;
            }
            SearchMethod_Changed(null, null); // 라디오 버튼 상태에 따라 UI 업데이트

            if (File.Exists(previewImagePath))
            {
                try
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 시도 - {previewImagePath}");
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                    LogTrace("Window_Loaded: 미리보기 이미지 로드 성공.");
                }
                catch (Exception ex)
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 실패 - {ex.Message}");
                }
            }
            else { LogTrace("Window_Loaded: 미리보기 이미지 파일 없음."); }
            UpdateLockState(true);
            LogTrace("Window_Loaded: 설정 로드 완료, 자동 시작 시도.");
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && !string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 충족. 대상 검색 시도.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd != IntPtr.Zero)
                {
                    LogTrace("AttemptAutoStart: 대상 즉시 발견. 로깅 시작.");
                    if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
                }
                else
                {
                    LogTrace("AttemptAutoStart: 대상 찾기 실패. 재탐색 타이머 시작.");
                    lblStatus.Text = "대상을 찾을 수 없어, 1분마다 재검색을 시작합니다.";
                    searchTimer.Start();
                }
            }
            else
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 미충족 (PC 이름 또는 대상 정보 부족).");
            }
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled)
            {
                MessageBox.Show("로깅 또는 대상 탐색이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);
            LogTrace($"btnToggleEdit_Click: 잠금 상태 변경 -> {isLocked}");
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtTarget.IsReadOnly = isLocked;
            rbFindByTitle.IsEnabled = !isLocked;
            rbFindByProcess.IsEnabled = !isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            if (isLocked)
            {
                btnToggleEdit.Content = "수정";
                txtPcName.Background = Wpf.Media.Brushes.LightGray;
                txtTarget.Background = Wpf.Media.Brushes.LightGray;
            }
            else
            {
                btnToggleEdit.Content = "잠금";
                txtPcName.Background = Wpf.Media.Brushes.White;
                txtTarget.Background = Wpf.Media.Brushes.White;
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled)
            {
                LogTrace("btnStart_Click: 로깅/탐색 중지 요청.");
                timer.Stop();
                searchTimer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 모든 작업이 중지되었습니다.";
            }
            else
            {
                LogTrace("btnStart_Click: 로깅 시작 요청.");
                searchTimer.Stop(); 
                if (!isLocked) { LogTrace("btnStart_Click: 시작 실패 - 잠금 상태 아님."); MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information); return; }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtTarget.Text)) { LogTrace("btnStart_Click: 시작 실패 - PC이름 또는 대상 정보 부족."); MessageBox.Show("PC이름과 대상(창 제목/프로세스 이름)을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error); return; }
                if (GetTargetWindowHandle() == IntPtr.Zero) { LogTrace("btnStart_Click: 시작 실패 - 대상 찾을 수 없음."); lblStatus.Text = "상태: 오류! 대상을 찾을 수 없어 시작할 수 없습니다."; return; }
                
                LogTrace("btnStart_Click: 로깅 시작됨.");
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return;
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
            LogTrace($"SearchMethod_Changed: 탐색 방법 변경됨 - { (rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름") }");
        }
        
        private IntPtr GetTargetWindowHandle()
        {
            string target = txtTarget.Text;
            if (string.IsNullOrWhiteSpace(target)) return IntPtr.Zero;
            if (rbFindByTitle.IsChecked == true) { return FindWindow(null, target); }
            else
            {
                string processName = target.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(target) : target;
                Process[] processes = Process.GetProcessesByName(processName);
                if (processes.Length == 0) return IntPtr.Zero;
                var targetProcess = processes.FirstOrDefault(p => p.MainWindowHandle != IntPtr.Zero);
                return targetProcess?.MainWindowHandle ?? IntPtr.Zero;
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { LogTrace("MyNotifyIcon_TrayMouseDoubleClick: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { LogTrace("MenuOpen_Click: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { LogTrace("MenuExit_Click: 프로그램 종료 시작."); isExiting = true; this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
            }
            else
            {
                LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
                Settings.Default.WindowTitle = txtTarget.Text;
                Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
                Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
                Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
                Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
                Settings.Default.PcName = txtPcName.Text;
                Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true; // 탐색 방법 저장
                Settings.Default.Save();
                LogTrace("Window OnClosing: 설정 저장 완료.");
                MyNotifyIcon.Dispose();
                LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
                _ocrEngine?.Dispose();
                LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }

        private void PerformLogging()
        {
            Gdi.Rectangle cropArea = Gdi.Rectangle.Empty;
            Gdi.Size bmpSize = Gdi.Size.Empty;
            try
            {
                LogTrace("===== PerformLogging 시작 =====");
                LogTrace("1. 대상 핸들 가져오기 시작...");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero)
                {
                    LogTrace("1-1. 대상 핸들 없음. 재탐색 시도...");
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    if (!searchTimer.IsEnabled) { timer.Stop(); searchTimer.Start(); lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다."; }
                    return;
                }
                LogTrace($"1-1. 대상 핸들 찾음: {hWnd}");
                LogTrace("2. 최소화 상태 확인 시작...");
                if (IsIconic(hWnd)) { LogTrace("2-1. 최소화됨. 작업 건너뜀."); lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }
                LogTrace("2-1. 최소화되지 않음.");
                LogTrace("3. 창 크기 가져오기 시작...");
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"3-1. 유효하지 않은 창 크기({width}x{height}). 작업 건너뜀."); lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다."; return; }
                LogTrace($"3-1. 창 크기 확인: {width}x{height}");
                bmpSize = new Gdi.Size(width, height);
                LogTrace("4. 비트맵 객체 생성 시작...");
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    LogTrace("4-1. 비트맵 객체 생성 완료.");
                    LogTrace("5. 그래픽 컨텍스트 생성 및 PrintWindow 호출 시작...");
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        LogTrace($"5-0. HDC 얻음: {hdc}. PrintWindow 호출.");
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                        LogTrace($"5-0. HDC 해제.");
                    }
                    LogTrace("5-1. PrintWindow 완료.");
                    cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        LogTrace($"6. 오류! 캡처 영역이 창 크기를 벗어남. bmp=({bmp.Width}x{bmp.Height}), crop=({cropArea.X},{cropArea.Y} {cropArea.Width}x{cropArea.Height}). 로깅 중지.");
                        timer.Stop(); btnStart.Content = "로깅 시작"; lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }
                    LogTrace($"6. 이미지 자르기(Clone) 시작... [원본크기: {bmp.Width}x{bmp.Height}, 영역: {cropArea}]");
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        LogTrace("6-1. 이미지 자르기 완료.");
                        LogTrace("7. OCR 처리 시작...");
                        using (var page = OcrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            LogTrace($"7-1. OCR 처리 완료. 인식된 텍스트: '{rawText}'");
                            if (!string.IsNullOrWhiteSpace(rawText)) { ProcessOcrResult(rawText); } else { lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다."; }
                        }
                    }
                }
                LogTrace("===== PerformLogging 성공적으로 완료 =====");
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! PerformLogging에서 예외 발생 !!!!!\n{ex}");
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                btnStart.Content = "로깅 시작";
                var sb = new StringBuilder();
                sb.AppendLine("캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.");
                sb.AppendLine("==============================================");
                sb.AppendLine($"[진단 정보]");
                sb.AppendLine($"전체 창 크기: {bmpSize.Width} x {bmpSize.Height}");
                sb.AppendLine($"잘라낼 영역 (X,Y,W,H): {cropArea.X}, {cropArea.Y}, {cropArea.Width}, {cropArea.Height}");
                sb.AppendLine("==============================================");
                Exception currentEx = ex;
                int indentLevel = 0;
                while (currentEx != null)
                {
                    sb.AppendLine($"\n[오류 레벨 {indentLevel}] {(indentLevel == 1 ? "(진짜 원인일 가능성이 높음)" : "")}");
                    sb.AppendLine($"  - 오류 유형: {currentEx.GetType().Name}");
                    sb.AppendLine($"  - 메시지: {currentEx.Message}");
                    sb.AppendLine($"  - 스택 트레이스:\n{currentEx.StackTrace}");
                    currentEx = currentEx.InnerException;
                    indentLevel++;
                }
                MessageBox.Show(sb.ToString(), "캡처 상세 오류 보고", MessageBoxButton.OK, MessageBoxImage.Error);
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        private void ProcessOcrResult(string rawText) 
        {
            LogTrace($"ProcessOcrResult: 원본 텍스트='{rawText}'");
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 2) { LogTrace($"ProcessOcrResult: 값 분리 오류, {parts.Length}개 분리됨."); lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)"; return; }
            if (decimal.TryParse(parts[0], out decimal val1) && decimal.TryParse(parts[1], out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                LogTrace($"ProcessOcrResult: 숫자 변환 성공. temp={temp}, humid={humid}. DB 업로드 시작.");
                UploadToDatabase(temp, humid);
            }
            else { LogTrace($"ProcessOcrResult: 숫자 변환 실패. parts[0]='{parts[0]}', parts[1]='{parts[1]}'"); lblStatus.Text = $"상태: 숫자 변환 오류 ({parts[0]},{parts[1]})"; }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName)) { LogTrace("UploadToDatabase: PC 이름 없음. 건너뜀."); lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다."; return; }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;";
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                LogTrace($"UploadToDatabase: DB 연결 시도. PC={pcName}, T={temp}, H={humid}");
                conn = new MySqlConnection(connectionString);
                conn.Open();
                LogTrace("UploadToDatabase: DB 연결 성공. 트랜잭션 시작.");
                trans = conn.BeginTransaction();
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 실행.");
                    rowsAffected = cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 완료. 영향받은 행: {rowsAffected}");
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 실행.");
                    cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 완료.");
                }
                trans.Commit();
                LogTrace("UploadToDatabase: 트랜잭션 커밋 성공.");
                if (rowsAffected > 0) { lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!"; }
                else { lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)"; }
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! UploadToDatabase에서 예외 발생 !!!!!\n{ex}");
                try { trans?.Rollback(); LogTrace("UploadToDatabase: 예외 발생으로 트랜잭션 롤백 시도."); } catch (Exception exRollback) { LogTrace($"UploadToDatabase: 트랜잭션 롤백 중 예외 발생: {exRollback.Message}"); }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                conn?.Close();
                LogTrace("UploadToDatabase: DB 연결 종료.");
            }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd == IntPtr.Zero) { MessageBox.Show("먼저 유효한 '대상 창 제목'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                LogTrace($"btnSelectArea_Click: 새 영역 설정 - X={txtX.Text}, Y={txtY.Text}, W={txtWidth.Text}, H={txtHeight.Text}");
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                LogTrace("UpdatePreviewImage: 미리보기 업데이트 시작.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) { LogTrace("UpdatePreviewImage: 대상 핸들 없음."); return; }
                if (IsIconic(hWnd)) { LogTrace("UpdatePreviewImage: 대상 최소화됨."); MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); imgPreview.Source = null; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"UpdatePreviewImage: 유효하지 않은 창 크기({width}x{height})."); return; }
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    var cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Width <= 0 || cropArea.Height <= 0) { LogTrace($"UpdatePreviewImage: 유효하지 않은 자르기 영역({cropArea.Width}x{cropArea.Height})."); return; }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) 
                    { 
                        imgPreview.Source = BitmapToImageSource(croppedBmp); 
                        croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png); 
                        LogTrace($"UpdatePreviewImage: 미리보기 이미지 저장 완료 - {previewImagePath}");
                    }
                }
            }
            catch (Exception ex) { LogTrace($"!!!!! UpdatePreviewImage에서 예외 발생 !!!!!\n{ex}");}
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }
}

&lt;/details>