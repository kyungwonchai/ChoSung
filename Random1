R 코드나 바코드를 인식하는 기능을 구현하려면, 카메라에서 캡처한 이미지를 처리할 때 이미지를 확대하여 인식할 수 있도록 해야 합니다. ML Kit에서는 기본적으로 이미지의 크기를 조정하거나 확대하는 기능을 직접 제공하지 않지만, Bitmap을 활용하여 이미지를 처리한 후, 확대된 이미지를 인식에 사용할 수 있습니다.

아래는 이러한 기능을 구현한 예시입니다.

1. activity_main.xml 수정
XML 레이아웃 파일은 기존과 동일하게 유지합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.camera.view.PreviewView
        android:id="@+id/viewFinder"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_centerInParent="true" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. MainActivity.kt 코드
아래 코드는 이미지를 확대하여 인식하는 기능을 추가한 예시입니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.Matrix
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.nio.ByteBuffer
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )
            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        @androidx.camera.core.ExperimentalGetImage
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val rotationDegrees = imageProxy.imageInfo.rotationDegrees
            val bitmap = toBitmap(mediaImage)
            val scaledBitmap = scaleBitmap(bitmap, 3.0f) // 3배 확대
            val image = InputImage.fromBitmap(scaledBitmap, rotationDegrees)

            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun toBitmap(image: ImageProxy.Image): Bitmap {
        val buffer: ByteBuffer = image.planes[0].buffer
        val bytes = ByteArray(buffer.capacity())
        buffer.get(bytes)
        return BitmapFactory.decodeByteArray(bytes, 0, bytes.size, null)
    }

    private fun scaleBitmap(bitmap: Bitmap, scaleFactor: Float): Bitmap {
        val width = (bitmap.width * scaleFactor).toInt()
        val height = (bitmap.height * scaleFactor).toInt()
        return Bitmap.createScaledBitmap(bitmap, width, height, true)
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 기능 설명:
이미지 확대 (scaleBitmap): scaleBitmap 메서드는 Bitmap 이미지를 3배 확대합니다. 이렇게 확대된 이미지를 사용하여 QR 코드 및 바코드를 인식합니다.

processImageProxy 메서드: 이 메서드에서는 ImageProxy에서 이미지를 가져와서 Bitmap으로 변환한 다음, 이를 3배 확대하여 InputImage로 변환합니다.

이미지 분석 및 QR 코드 인식: 확대된 이미지를 ML Kit의 BarcodeScanner를 사용하여 분석하고, QR 코드 및 바코드를 인식합니다.

주의 사항:
이미지의 크기를 확대하면 인식 속도에 영향을 미칠 수 있습니다. 너무 큰 이미지는 처리 시간이 더 오래 걸릴 수 있습니다.
확대된 이미지를 처리할 때 메모리 사용량이 증가할 수 있으므로, 성능이 중요하다면 이 부분을 최적화하는 것이 필요합니다.
이 코드를 사용하면 카메라로 캡처한 이미지를 3배 확대하여 QR 코드와 바코드를 인식할 수 있습니다. 성능이 중요하다면 적절한 스케일링 값과 최적화가 필요할 수 있습니다.