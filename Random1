는 요청하신 내용을 포함한 WinForms 코드입니다. 이 코드는 지정한 영역을 찾아 PictureBox에 표시하고, 콘솔에 평균 색상, 검정 영역 여부, 그리고 파란 버튼 여부를 출력하는 기능을 추가했습니다.

csharp
코드 복사
using System;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using System.Runtime.InteropServices;

namespace ColorDetectionApp
{
    public partial class MainForm : Form
    {
        private PictureBox pictureBox1;

        public MainForm()
        {
            InitializeComponent();
            
            // 버튼 생성
            Button detectButton = new Button
            {
                Text = "검정 및 파랑 영역 분석",
                Location = new Point(10, 10)
            };
            detectButton.Click += DetectAndDisplay;
            Controls.Add(detectButton);

            // PictureBox 생성
            pictureBox1 = new PictureBox
            {
                Location = new Point(10, 50),
                Size = new Size(488, 154), // 지정된 검정 영역 크기와 맞춤
                BorderStyle = BorderStyle.FixedSingle
            };
            Controls.Add(pictureBox1);
        }

        private void DetectAndDisplay(object sender, EventArgs e)
        {
            // 스크린샷 캡처
            Bitmap screenshot = CaptureScreen();

            // 검정색 영역 확인 및 PictureBox에 표시
            Rectangle blackRegion = FindBlackRegion(screenshot);
            if (blackRegion != Rectangle.Empty)
            {
                Bitmap blackRegionImage = screenshot.Clone(blackRegion, screenshot.PixelFormat);
                pictureBox1.Image?.Dispose();
                pictureBox1.Image = blackRegionImage;

                // 검정 영역의 평균 색상 계산 및 출력
                Color avgColor = GetAverageColor(blackRegionImage);
                Console.WriteLine($"검정 영역 평균 색상 - R:{avgColor.R}, G:{avgColor.G}, B:{avgColor.B}");

                // 검정 영역 안에 파란색 버튼을 찾기
                Rectangle blueButton = FindBlueButton(screenshot, blackRegion);
                if (blueButton != Rectangle.Empty)
                {
                    Console.WriteLine("파란 버튼이 검출되었습니다.");
                    // 파란 버튼의 평균 색상 계산 및 출력
                    Color blueAvgColor = GetAverageColor(screenshot.Clone(blueButton, screenshot.PixelFormat));
                    Console.WriteLine($"파란 버튼 평균 색상 - R:{blueAvgColor.R}, G:{blueAvgColor.G}, B:{blueAvgColor.B}");
                }
                else
                {
                    Console.WriteLine("파란 버튼이 검출되지 않았습니다.");
                }
            }
            else
            {
                Console.WriteLine("검정 영역이 조건에 맞지 않습니다.");
            }

            screenshot.Dispose();
        }

        private Bitmap CaptureScreen()
        {
            Bitmap screenshot = new Bitmap(1920, 1080);
            using (Graphics g = Graphics.FromImage(screenshot))
            {
                g.CopyFromScreen(0, 0, 0, 0, screenshot.Size);
            }
            return screenshot;
        }

        private Rectangle FindBlackRegion(Bitmap screenshot)
        {
            Rectangle searchArea = new Rectangle(712, 93, 488, 154); // 712,93 ~ 1200,247

            int blackPixelCount = 0;
            int totalPixelCount = searchArea.Width * searchArea.Height;

            for (int y = searchArea.Top; y < searchArea.Bottom; y++)
            {
                for (int x = searchArea.Left; x < searchArea.Right; x++)
                {
                    Color pixel = screenshot.GetPixel(x, y);
                    if (pixel.R <= 60 && pixel.G <= 60 && pixel.B <= 60)
                    {
                        blackPixelCount++;
                    }
                }
            }

            double blackPercentage = (double)blackPixelCount / totalPixelCount * 100;

            // 검정색 비율이 70% 이상일 때 검정색 영역 반환
            return blackPercentage >= 70 ? searchArea : Rectangle.Empty;
        }

        private Rectangle FindBlueButton(Bitmap screenshot, Rectangle blackRegion)
        {
            for (int y = blackRegion.Top; y < blackRegion.Bottom - 30; y++) // y 범위 내에서 찾기
            {
                for (int x = blackRegion.Left; x < blackRegion.Right - 100; x++) // x 범위 내에서 찾기
                {
                    Color pixel = screenshot.GetPixel(x, y);
                    if (pixel.R <= 100 && pixel.G >= 200) // 파란색 영역 검출 조건
                    {
                        return new Rectangle(x, y, 100, 30); // 파란색 버튼 영역 반환
                    }
                }
            }

            return Rectangle.Empty;
        }

        private Color GetAverageColor(Bitmap bitmap)
        {
            long sumR = 0, sumG = 0, sumB = 0;
            int pixelCount = bitmap.Width * bitmap.Height;

            for (int y = 0; y < bitmap.Height; y++)
            {
                for (int x = 0; x < bitmap.Width; x++)
                {
                    Color pixel = bitmap.GetPixel(x, y);
                    sumR += pixel.R;
                    sumG += pixel.G;
                    sumB += pixel.B;
                }
            }

            return Color.FromArgb((int)(sumR / pixelCount), (int)(sumG / pixelCount), (int)(sumB / pixelCount));
        }
    }
}
코드 설명
PictureBox: 검정색 영역을 pictureBox1에 표시하기 위해 PictureBox를 추가하였습니다.
검정 영역 찾기 및 평균 색상 출력: FindBlackRegion 함수는 지정된 영역에서 검정색 픽셀 비율을 계산하여, 조건에 맞을 때 해당 영역을 반환합니다. 그 영역의 평균 색상을 계산해 콘솔에 출력합니다.
파란 버튼 검출 및 평균 색상 출력: 검정 영역 내부에서 파란색 버튼을 찾고, 평균 색상을 계산하여 콘솔에 출력합니다.