SerialPortManager 클래스에 싱글톤 패턴을 구현하지 않아서 발생한 문제입니다. 이 문제를 해결하기 위해 SerialPortManager 클래스에 싱글톤 패턴을 적용하고, 인스턴스를 전역적으로 접근할 수 있도록 수정하겠습니다.

수정된 SerialPortManager.cs 파일
아래 코드는 싱글톤 패턴을 적용한 SerialPortManager 클래스의 전체 코드입니다:

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Collections.Generic;

namespace ScanValueTrans
{
    public class SerialPortManager
    {
        // 싱글톤 인스턴스
        private static SerialPortManager _instance;
        public static SerialPortManager Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new SerialPortManager();
                }
                return _instance;
            }
        }

        // 스캐너 포트와 타겟 포트 리스트
        public SerialPort ScannerPort { get; private set; }
        public List<SerialPort> TargetPorts { get; private set; }

        // 생성자는 private으로 외부에서 인스턴스를 생성할 수 없도록 설정
        private SerialPortManager()
        {
            TargetPorts = new List<SerialPort>();
        }

        public void OpenScannerPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            try
            {
                ScannerPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
                ScannerPort.Open();
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        public void CloseScannerPort()
        {
            try
            {
                if (ScannerPort != null && ScannerPort.IsOpen)
                {
                    ScannerPort.Close();
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"스캐너 포트 닫는 중 오류 발생: {ex.Message}");
            }
        }

        public void AddTargetPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            try
            {
                SerialPort targetPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
                targetPort.Open();
                TargetPorts.Add(targetPort);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"타겟 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        public void CloseTargetPorts()
        {
            foreach (var port in TargetPorts)
            {
                try
                {
                    if (port != null && port.IsOpen)
                    {
                        port.Close();
                    }
                }
                catch (Exception ex)
                {
                    throw new InvalidOperationException($"타겟 포트 닫는 중 오류 발생: {ex.Message}");
                }
            }
        }

        public bool IsPortOpen(string portName)
        {
            try
            {
                foreach (var port in TargetPorts)
                {
                    if (port.PortName == portName && port.IsOpen)
                    {
                        return true;
                    }
                }
            }
            catch (Exception)
            {
                return false;
            }

            return false;
        }

        public void SendData(string data)
        {
            foreach (var port in TargetPorts)
            {
                if (port != null && port.IsOpen)
                {
                    try
                    {
                        port.WriteLine(data);
                    }
                    catch (Exception ex)
                    {
                        throw new InvalidOperationException($"타겟 포트로 데이터 전송 중 오류 발생: {ex.Message}");
                    }
                }
            }
        }
    }
}
주요 변경 사항
싱글톤 패턴 구현:

SerialPortManager 클래스의 인스턴스를 private static SerialPortManager _instance로 선언하고, 이를 외부에서 접근할 수 있도록 Instance 속성을 제공했습니다.
생성자를 private으로 설정하여 외부에서 직접 인스턴스를 생성할 수 없도록 했습니다.
기능 구현:

스캐너 포트를 열고 닫는 기능 (OpenScannerPort, CloseScannerPort)과 타겟 포트를 관리하는 기능 (AddTargetPort, CloseTargetPorts)을 포함하고 있습니다.
포트가 열려 있는지 확인하는 IsPortOpen 메서드를 제공하여 포트 상태에 따라 UI를 업데이트할 수 있습니다.
수신된 데이터를 타겟 포트로 전송하는 SendData 메서드를 통해 데이터를 전송합니다.
이제 SerialPortManager.Instance를 통해 전역적으로 인스턴스에 접근할 수 있으며, 코드 내에서 사용할 수 있습니다. 추가적인 문제가 발생하거나 도움이 필요하시면 언제든지 말씀해 주세요.






