CameraX와 Camera2Interop의 올바른 사용
CameraX에서 Camera2Interop을 사용하여 카메라 설정을 미세 조정할 때, 일부 함수나 메서드가 올바르지 않게 참조될 수 있습니다. 아래는 올바른 방법으로 Camera2Interop을 적용한 수정된 코드입니다.

1. build.gradle 종속성 확인
먼저, Camera2Interop이 사용될 수 있도록 필요한 라이브러리가 포함되어 있는지 확인합니다.

gradle
코드 복사
dependencies {
    implementation "androidx.camera:camera-camera2:1.1.0"
    implementation "androidx.camera:camera-lifecycle:1.1.0"
    implementation "androidx.camera:camera-view:1.0.0-alpha32"
    implementation "androidx.camera:camera2:1.1.0"
    implementation 'com.google.mlkit:barcode-scanning:17.0.2'
}
2. 코드 수정
다음은 CameraX에서 Camera2Interop을 올바르게 사용하는 방법입니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.camera2.interop.ExperimentalCamera2Interop
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    @OptIn(ExperimentalCamera2Interop::class, androidx.camera.core.ExperimentalGetImage::class)
    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()

                // Camera Interop 설정
                val previewBuilder = Preview.Builder()
                val camera2Interop = Camera2Interop.Extender(previewBuilder)
                camera2Interop.setCaptureRequestOption(
                    CaptureRequest.CONTROL_AF_MODE,
                    CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
                )

                val camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, previewBuilder.build(), imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    @androidx.camera.core.ExperimentalGetImage
    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 변경 사항:
Camera2Interop 올바른 사용:

Camera2Interop.Extender는 Preview.Builder()에서 설정되어야 하며, 이는 Preview의 빌더에 직접 연결됩니다. cameraControl을 직접 참조하지 않고, Preview 빌더에 직접 설정합니다.
OptIn 애노테이션:

@OptIn(ExperimentalCamera2Interop::class)를 사용하여 Camera2Interop의 실험적 기능을 명시적으로 선언합니다.
@ExperimentalGetImage 애노테이션도 processImageProxy에 추가하여, 이미지 접근에 대한 실험적 기능을 선언합니다.
이제 이 코드로 실험적인 Camera2 API와 CameraX를 통합하여 초점 모드를 제어하고, CameraX를 통한 QR 코드 및 바코드 스캐닝을 안정적으로 수행할 수 있습니다.