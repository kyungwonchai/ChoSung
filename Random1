겠습니다. 이번에는 Flask와 함께 Bootstrap을 사용하여 좀 더 예쁘고 반응형 디자인을 적용한 파일 다운로드 웹페이지를 만들어 보겠습니다. 모든 코드를 상세히 설명드릴게요.

1. 프로젝트 구조
bash
코드 복사
file_download_app/
│
├── app.py
├── templates/
│   └── index.html
├── static/
│   └── css/
│       └── style.css
└── files/
    └── (다운로드 가능한 파일들)
2. app.py 작성
Flask 애플리케이션을 작성합니다. 이 코드는 이전과 동일하지만, CSS 파일을 추가로 로드하여 스타일링을 적용합니다.

python
코드 복사
from flask import Flask, render_template, send_from_directory
import os

app = Flask(__name__)

# 파일이 저장된 디렉토리 경로를 설정합니다.
FILE_DIRECTORY = os.path.join(os.getcwd(), 'files')

@app.route('/')
def index():
    # 디렉토리 내 파일 목록을 가져옵니다.
    files = os.listdir(FILE_DIRECTORY)
    return render_template('index.html', files=files)

@app.route('/download/<filename>')
def download_file(filename):
    # 파일을 클라이언트에게 전송하여 다운로드를 제공합니다.
    return send_from_directory(FILE_DIRECTORY, filename, as_attachment=True)

if __name__ == '__main__':
    app.run(host='10.222.222.222', port=8090)
3. index.html 작성
Bootstrap을 이용해 좀 더 예쁜 디자인을 적용한 HTML 파일입니다. templates 폴더 내에 index.html 파일을 생성합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Download</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="text-center">
            <h1 class="display-4">Download Files</h1>
            <p class="lead">Click on a file to download it.</p>
        </div>
        <div class="row justify-content-center mt-4">
            <div class="col-md-8">
                <div class="list-group">
                    {% for file in files %}
                    <a href="{{ url_for('download_file', filename=file) }}" class="list-group-item list-group-item-action">
                        <i class="bi bi-file-earmark-arrow-down"></i> {{ file }}
                    </a>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
4. style.css 작성
Bootstrap을 기반으로 하는 스타일에 추가적인 커스터마이징을 적용합니다. static/css/style.css 파일을 생성합니다.

css
코드 복사
body {
    font-family: 'Arial', sans-serif;
}

h1 {
    color: #007bff;
    font-weight: bold;
}

.list-group-item {
    border: 1px solid #007bff;
    color: #007bff;
    background-color: #e9f5ff;
    transition: background-color 0.3s ease;
}

.list-group-item:hover {
    background-color: #cce5ff;
    color: #0056b3;
}
5. 파일 디렉토리 구성
이제 files 폴더에 다운로드할 파일들을 넣습니다. 예를 들어, example.txt, sample.pdf 등의 파일을 넣을 수 있습니다.

6. 애플리케이션 실행
Flask 애플리케이션을 실행하려면, 터미널에서 다음 명령어를 입력합니다.

bash
코드 복사
python3 app.py
이제 브라우저에서 http://10.222.222.222:8090으로 접속하면, 예쁜 디자인의 파일 다운로드 웹페이지를 확인할 수 있습니다.

요약
Flask 설치: Flask를 사용하여 간단한 웹 애플리케이션을 개발했습니다.
Bootstrap 사용: Bootstrap을 사용해 반응형 웹 디자인을 적용하여 예쁜 파일 다운로드 페이지를 만들었습니다.
Custom CSS: 추가적인 스타일링을 위해 사용자 정의 CSS를 작성했습니다.
파일 다운로드 기능: 사용자 클릭 시 파일을 다운로드할 수 있도록 구현했습니다.
이제 Flask 서버를 실행하고, 예쁜 파일 다운로드 페이지를 경험해 보세요! 추가로 디자인을 더 개선하고 싶으면 CSS와 HTML을 수정해 보세