def solution(picks, minerals):
    # 피로도 계산 함수
    def calculate_fatigue(tool, segment):
        fatigue = 0
        for mineral in segment:
            if tool == 1:  # Diamond pickaxe
                fatigue += 1
            elif tool == 2:  # Iron pickaxe
                if mineral == "diamond":
                    fatigue += 5
                else:
                    fatigue += 1
            elif tool == 3:  # Stone pickaxe
                if mineral == "diamond":
                    fatigue += 25
                elif mineral == "iron":
                    fatigue += 5
                else:
                    fatigue += 1
        return fatigue

    # BFS Queue 초기화
    queue = [[picks, 0, 0]]  # [남은 picks, 현재 피로도, minerals에서의 현재 인덱스]
    min_fatigue = float('inf')  # 최소 피로도를 무한대로 초기화
    
    # BFS 탐색 시작
    while queue:
        current_picks, current_fatigue, index = queue.pop(0)
        
        # 현재 상태 출력
        print(f"현재 상태: 남은 picks = {current_picks}, 현재 피로도 = {current_fatigue}, 인덱스 = {index}")
        
        # 광물을 모두 캔 경우, 최소 피로도 갱신
        if index >= len(minerals):
            min_fatigue = min(min_fatigue, current_fatigue)
            print(f"모든 광물을 캤습니다. 현재 최소 피로도 = {min_fatigue}")
            continue
        
        # 곡괭이가 모두 소진된 경우, 최소 피로도 갱신
        if sum(current_picks) == 0:
            min_fatigue = min(min_fatigue, current_fatigue)
            print(f"모든 곡괭이를 사용했습니다. 현재 최소 피로도 = {min_fatigue}")
            continue
        
        # 각 곡괭이를 사용하여 다음 상태 탐색
        for i in range(3):
            if current_picks[i] > 0:
                new_picks = current_picks[:]
                new_picks[i] -= 1  # 현재 곡괭이를 사용
                next_index = index + 5  # 다음 인덱스로 이동
                segment = minerals[index:next_index]  # 현재 5개의 광물
                new_fatigue = current_fatigue + calculate_fatigue(i + 1, segment)  # 새로운 피로도 계산
                print(f"곡괭이 {i + 1} 사용: 새로운 피로도 = {new_fatigue}, 남은 picks = {new_picks}, 다음 인덱스 = {next_index}")
                
                # 새로운 피로도가 최소 피로도보다 작은 경우에만 큐에 추가
                if new_fatigue < min_fatigue:
                    queue.append([new_picks, new_fatigue, next_index])
                    print(f"큐에 추가: {queue[-1]}")
    
    return min_fatigue

# 테스트 케이스
print("최종 결과:", solution([1, 3, 2], ["diamond", "diamond", "diamond", "iron", "iron", "diamond", "iron", "stone"]))
print("최종 결과:", solution([0, 1, 1], ["diamond", "diamond", "diamond", "diamond", "diamond", "iron", "iron", "iron", "iron", "iron", "diamond"]))
