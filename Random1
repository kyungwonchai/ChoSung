이해했습니다! 스킵 없이 무조건 Resume한 그 행부터 이후 모든 작업을 다시 실행하게 하고, 완료된 작업이라도 다시 실행하도록 해야 합니다.

수정 사항 요약:
스킵 없이 무조건 Resume 버튼을 누른 그 행부터 모든 작업을 다시 실행.
이전 작업이 완료된 상태라도, Resume을 누르면 해당 행부터 다시 모든 작업을 실행.
수정된 코드
1. TaskModel Class 수정 (스킵 없이 무조건 재실행)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

public class TaskModel : ViewModelBase
{
    // 로그 엔트리 정보
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 비동기 함수 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 각 함수 상태를 도형으로 표현 (도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 현재 작업이 대기, 실행, 완료 상태인지 나타냄
    public string Status { get; set; }

    // Resume 명령어 (행마다 존재)
    public ICommand ResumeCommand { get; }

    // 작업 큐와 연결
    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;

        _taskQueue = taskQueue;  // TaskQueue를 받아옴

        // 비동기 함수 리스트 초기화 및 함수 추가
        FunctionTasks = new List<Func<Task>>
        {
            ExecuteTaskA,
            ExecuteTaskB,
            ExecuteTaskC
        };

        // FunctionStatusColors 리스트 초기화 (각 함수의 상태를 색상으로 표현)
        FunctionStatusColors = new ObservableCollection<Brush>
        {
            Brushes.Gray,  // Task A 초기 상태
            Brushes.Gray,  // Task B 초기 상태
            Brushes.Gray   // Task C 초기 상태
        };

        // 상태 초기화
        Status = "Pending";

        // Resume 버튼 명령어 설정
        ResumeCommand = new RelayCommand(ResumeTask);
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    private async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행 (스킵 없이 모든 작업 재실행)
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            // 도형 색상을 다시 회색으로 변경 (재실행이므로 초기화)
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Gray;
            });

            await FunctionTasks[i]();  // 비동기 작업 실행

            // 함수 실행 후 색상 변경
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green;
            });
        }
        Status = "Completed";  // 완료 상태로 변경
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
설명:
ResumeTask는 무조건 Resume 버튼을 누른 그 행부터 모든 작업을 재실행합니다.
이전에 완료된 작업도 무조건 다시 실행합니다.
FunctionStatusColors는 도형의 색상을 다시 초기화(회색)하고, 작업이 완료될 때마다 다시 녹색으로 변경됩니다.
2. MainViewModel Class 수정 (Resume 처리)
csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();  // TaskQueue 인스턴스 생성

        // 작업 목록 초기화
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }, _taskQueue),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" }, _taskQueue)
        };
    }

    /// <summary>
    /// 특정 행부터 작업을 다시 시작
    /// </summary>
    public void ResumeTasksFrom(TaskModel selectedTask)
    {
        int startIndex = TaskList.IndexOf(selectedTask); // 시작할 행의 인덱스

        // 선택된 행부터 남은 작업들을 대기열에 추가
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.ResumeTask();  // 작업 재개
        }
    }
}
설명:
ResumeTasksFrom는 특정 행부터 작업을 다시 시작합니다.
Resume 버튼을 누른 그 행부터 모든 작업을 다시 대기열에 등록하고 순차적으로 실행합니다.
3. TaskQueue Class (기존과 동일)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하는 역할을 담당합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();

    /// <summary>
    /// 작업을 큐에 추가하고 순차적으로 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);

        // 작업 실행 중이 아니면, 다음 작업을 실행
        if (_tasks.Count == 1)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 큐의 다음 작업을 실행하는 메서드
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0) return;

        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행

        if (_tasks.Count > 0)
        {
            RunNextTask(); // 다음 작업 실행
        }
    }
}
설명:
TaskQueue는 변동 없이, 작업이 큐에 등록된 대로 순차적으로 실행됩니다.
4. XAML (Resume 버튼 추가)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- Resume 버튼 -->
                <DataGridTemplateColumn Header="Resume">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Resume" Command="{Binding ResumeCommand}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
설명:
각 행에 Resume 버튼이 추가되었으며, 버튼을 누르면 해당 행부터 모든 작업을 다시 재실행합니다.
이전에 완료된 작업도 다시 실행되며, 순차적으로 진행됩니다.
최종 요약:
Resume 버튼을 누르면 그 행부터 모든 작업을 다시 실행하며, 이전에 완료된 작업도 무조건 다시 실행됩니다.
TaskQueue는 여전히 작업을 순차적으로 실행하며, 작업 대기열에 등록된 작업을 차례로 실행합니다.
각 행에 추가된 Resume 버튼을 통해 특정 행 이후의 작업을 모두 다시 실행할 수 있습