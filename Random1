 WPF DevExpress GridControl에서 Timediff 값이 60 이하인 경우 Hex 색상 값을 사용하는 방식과 그라데이션 배경을 적용하는 방법입니다.

1. C# 코드에서 그라데이션 적용을 위한 IValueConverter 구현
1.1 배경색 변경용 TimediffToBackgroundConverter
Timediff 값이 60 이하인 경우, 그라데이션 배경을 반환하도록 IValueConverter를 구현합니다.

csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

public class TimediffToBackgroundConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int timediff)
        {
            if (timediff <= 60)
            {
                // 그라데이션 브러시 반환
                return new LinearGradientBrush(
                    Color.FromRgb(255, 255, 0),    // 밝은 노랑
                    Color.FromRgb(255, 200, 0),    // 어두운 노랑
                    new Point(0, 0),               // 시작점
                    new Point(1, 1)                // 끝점
                );
            }
            else
            {
                // 기본 흰색 반환
                return new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF"));
            }
        }
        return new SolidColorBrush((Color)ColorConverter.ConvertFromString("#FFFFFF")); // 기본값
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
1.2 텍스트 색상 변경용 TimediffToForegroundConverter
Timediff 값이 60 이하인 경우 텍스트 색상을 검정으로 설정합니다.

csharp
코드 복사
public class TimediffToForegroundConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int timediff)
        {
            return timediff <= 60 
                ? new SolidColorBrush((Color)ColorConverter.ConvertFromString("#000000")) // 검정색
                : new SolidColorBrush((Color)ColorConverter.ConvertFromString("#808080")); // 회색
        }
        return new SolidColorBrush((Color)ColorConverter.ConvertFromString("#808080")); // 기본값
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
2. XAML에서 RowStyle에 Converter 적용
GridControl의 TableView에서 RowStyle에 Converter를 바인딩합니다.

xaml
코드 복사
<dxg:GridControl Name="gridControl1" AutoGenerateColumns="False">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Id" Header="Id" />
        <dxg:GridColumn FieldName="IP" Header="IP" />
        <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
        <dxg:GridColumn FieldName="Time1" Header="Time1" DisplayFormat="G" />
        <dxg:GridColumn FieldName="LogType" Header="LogType" />
        <dxg:GridColumn FieldName="Timediff" Header="Time Difference (Minutes)" />
    </dxg:GridControl.Columns>
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True" ShowGroupPanel="False">
            <dxg:TableView.RowStyle>
                <Style TargetType="dxg:GridRowContent">
                    <Setter Property="Background" 
                            Value="{Binding Timediff, Converter={StaticResource TimediffToBackgroundConverter}}" />
                    <Setter Property="Foreground" 
                            Value="{Binding Timediff, Converter={StaticResource TimediffToForegroundConverter}}" />
                </Style>
            </dxg:TableView.RowStyle>
        </dxg:TableView>
    </dxg:GridControl.View>
</dxg:GridControl>
3. App.xaml에 리소스 등록
TimediffToBackgroundConverter와 TimediffToForegroundConverter를 애플리케이션 리소스로 등록합니다.

xaml
코드 복사
<Application x:Class="YourNamespace.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:YourNamespace"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <local:TimediffToBackgroundConverter x:Key="TimediffToBackgroundConverter" />
        <local:TimediffToForegroundConverter x:Key="TimediffToForegroundConverter" />
    </Application.Resources>
</Application>
4. 데이터 가져오기
SQL 쿼리로 데이터를 가져오고, Timediff 값을 포함한 데이터 모델로 반환합니다.

csharp
코드 복사
private List<LogMessage> GetDataFromDatabase()
{
    List<LogMessage> logMessages = new List<LogMessage>();

    string connectionString = "Server=your_server;Database=SMD_ACR_ROUTER;User Id=your_username;Password=your_password;";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        string query = @"
            SELECT 
                Id,
                IP,
                ReceivedMessage,
                Time1,
                LogType,
                DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
            FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
            WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0
            ORDER BY Id DESC;";
        
        SqlCommand command = new SqlCommand(query, connection);
        connection.Open();
        SqlDataReader reader = command.ExecuteReader();

        while (reader.Read())
        {
            logMessages.Add(new LogMessage
            {
                Id = reader.GetInt32(0),
                IP = reader.GetString(1),
                ReceivedMessage = reader.GetString(2),
                Time1 = reader.GetDateTime(3),
                LogType = reader.GetString(4),
                Timediff = reader.GetInt32(5)
            });
        }
    }

    return logMessages;
}
5. 자동 새로고침
10초마다 데이터를 새로고침하여 GridControl에 최신 데이터를 반영합니다.

csharp
코드 복사
DispatcherTimer refreshTimer = new DispatcherTimer();

public MainWindow()
{
    InitializeComponent();

    // 타이머 설정
    refreshTimer.Interval = TimeSpan.FromSeconds(10);
    refreshTimer.Tick += (s, e) => RefreshData();
    refreshTimer.Start();

    // 초기 데이터 로드
    RefreshData();
}

private void RefreshData()
{
    gridControl1.ItemsSource = GetDataFromDatabase();
}
최종 결과
그라데이션 배경:

Timediff 값이 60 이하인 경우 노란색에서 오렌지색으로 이어지는 그라데이션 배경이 설정됩니다.
그 외의 경우 기본 흰색 배경이 사용됩니다.
텍스트 색상:

Timediff 값이 60 이하인 경우 텍스트 색상은 검정색(#000000)으로 설정됩니다.
그 외의 경우 텍스트 색상은 회색(#808080)으로 설정됩니다.
자동 새로고침:
