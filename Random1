겠습니다! SensorViewModel을 MainViewModel.cs 파일에 포함시키고, 그 인스턴스를 사용하는 방법에 대해 자세히 설명하겠습니다. 여기서는 MainViewModel 내에서 SensorViewModel을 생성하고 사용하는 방법을 다룰 것입니다. 이 설정은 MainViewModel이 애플리케이션의 중심적인 데이터 관리 역할을 하면서, SensorViewModel을 통해 센서 데이터를 관리하게 됩니다.

1. MainViewModel에 SensorViewModel 포함
먼저, MainViewModel 클래스 내에 SensorViewModel을 멤버 변수로 포함시키고 초기화하는 과정을 구현합니다.

MainViewModel.cs 예시
csharp
코드 복사
public class MainViewModel
{
    // SensorViewModel 인스턴스를 프로퍼티로 선언
    public SensorViewModel SensorVM { get; private set; }

    public MainViewModel()
    {
        // SensorViewModel 인스턴스 생성
        SensorVM = new SensorViewModel();
        // 필요한 초기화 로직
        Initialize();
    }

    private void Initialize()
    {
        // 여기에 추가적인 초기화 코드를 넣을 수 있습니다.
    }

    // MainViewModel에서 SensorViewModel을 사용하는 예
    public void CheckSensorStatus()
    {
        // 예를 들어 센서 상태를 확인하고 로그를 출력하는 기능
        foreach (var sensor in SensorVM.Sensors)
        {
            Console.WriteLine($"{sensor.SensorName} is {(sensor.IsDetected ? "active" : "inactive")}");
        }
    }
}
2. MainViewModel 인스턴스 사용
MainViewModel을 생성하고 사용하는 예는 애플리케이션의 시작점 또는 UI 로직에서 이루어집니다. 예를 들어 WPF의 App.xaml.cs나 MainWindow.xaml.cs에서 MainViewModel 인스턴스를 생성하고 UI 컨트롤과 바인딩할 수 있습니다.

App.xaml.cs에서 MainViewModel 사용 예시
csharp
코드 복사
public partial class App : Application
{
    protected override void OnStartup(StartupEventArgs e)
    {
        base.OnStartup(e);

        // MainViewModel 인스턴스 생성
        var mainViewModel = new MainViewModel();

        // 메인 윈도우 생성 및 ViewModel 설정
        var mainWindow = new MainWindow
        {
            DataContext = mainViewModel  // MainViewModel을 DataContext로 설정
        };

        // 메인 윈도우 표시
        mainWindow.Show();
    }
}
3. UI에서 MainViewModel 데이터 사용
XAML 파일에서 MainViewModel의 SensorVM 프로퍼티를 통해 센서 데이터에 바인딩하는 방법입니다.

MainWindow.xaml 예시
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <!-- SensorViewModel의 Sensors 컬렉션을 ListBox에 바인딩 -->
        <ListBox ItemsSource="{Binding SensorVM.Sensors}"
                 DisplayMemberPath="SensorName"
                 SelectedValuePath="IsDetected"/>
    </Grid>
</Window>
결론
이 방식으로 MainViewModel 내에서 SensorViewModel을 관리하며, UI 또는 다른 클래스에서 MainViewModel을 통해 센서 데이터를 접근하고 사용할 수 있습니다. MainViewModel은 애플리케이션의 중심적인 뷰모델 역할을 하면서, 여러 하위 뷰모델들을 포함하고 관리하는 구조로 운영됩니다. 이 구조는 유지보수성과 확장성을 향상시키는 동시에, 애플리케이션의 다양한 데이터 관리 요구사항을 효과적으로 수행할 수 있도록 합니다.