팅하는 전체 과정을 단계별로 자세히 설명해 드리겠습니다. 각 부분이 어떤 역할을 하는지 순서대로 살펴보면 쉽게 이해하실 수 있을 겁니다.

전체 동작 순서 해설
이 과정은 크게 ① 데몬의 주기적인 작업, ② 스크립트의 서비스 확인, ③ 와치독 타이머의 반응, ④ 하드웨어의 재부팅으로 나눌 수 있습니다.

1. watchdogd 데몬의 주기적인 작업
watchdogd 데몬: 와치독 기능을 총괄하는 소프트웨어입니다. 이 데몬은 systemd에 의해 실행되어 백그라운드에서 계속 동작합니다.

주기적 실행: /etc/watchdog.conf 파일에 설정된 interval 값(예: 5초)에 따라, 데몬은 5초마다 다음 두 가지 행동을 반복합니다.

/dev/watchdog 장치 파일에 데이터를 써서 하드웨어 와치독 타이머를 리셋합니다. 이 행위를 **"펫팅(petting)"**이라고 부릅니다.

test-binary에 지정된 스크립트(예: /etc/watchdog.d/myservice-check.sh)를 실행합니다.

2. 스크립트의 서비스 상태 확인
스크립트의 역할: myservice-check.sh 스크립트는 watchdogd 데몬에 의해 5초마다 호출됩니다. 이 스크립트의 유일한 임무는 systemctl is-active --quiet myservice 명령어를 실행하여 myservice가 정상적으로 실행 중인지 확인하는 것입니다.

종료 코드(Exit Code):

서비스가 정상일 때: systemctl 명령어가 성공(0)을 반환하므로, 스크립트도 **exit 0**으로 종료됩니다.

서비스가 멈췄을 때: systemctl 명령어가 실패(1)를 반환하므로, 스크립트도 **exit 1**로 종료됩니다.

3. watchdogd 데몬의 반응
watchdogd 데몬은 스크립트의 종료 코드를 보고 다음 행동을 결정합니다.

성공(Exit Code 0): 스크립트가 성공적으로 종료되면, watchdogd는 시스템이 정상이라고 판단하고 다음 5초 후에 다시 타이머를 펫팅할 준비를 합니다.

실패(Exit Code 1): 스크립트가 실패하면, watchdogd는 시스템에 문제가 발생했다고 판단합니다. 이 시점부터 watchdogd는 더 이상 하드웨어 타이머를 리셋하지 않습니다.

4. 하드웨어 와치독의 강제 재부팅
타이머 카운트다운: watchdogd 데몬이 타이머를 펫팅하는 것을 멈추면, 하드웨어 와치독 타이머는 watchdog-timeout에 설정된 시간(예: 60초)까지 카운트다운을 시작합니다.

재부팅 신호: 60초 동안 타이머가 리셋되지 않으면, 하드웨어 와치독은 시스템이 완전히 먹통이 되었다고 판단합니다. 이때 물리적인 리셋 버튼을 누른 것처럼 라즈베리파이 메인보드로 강제 재부팅 신호를 보내게 됩니다.
