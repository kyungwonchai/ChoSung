1. MainWindow.xaml - GridControl 설정
드래그 앤 드롭을 위해 MouseDown, MouseMove, MouseUp 이벤트를 설정하고, 순서를 변경할 수 있도록 버튼도 제공합니다.

xml
코드 복사
<Window x:Class="SwiftAIMaster.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="SwiftAIMaster" Height="450" Width="800">
    <Grid>
        <!-- 작업 추가 버튼 -->
        <Button Content="작업 추가" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="100" Click="AddTaskButton_Click"/>

        <!-- 작업 목록 GridControl -->
        <dxg:GridControl Name="taskGrid" ItemsSource="{Binding TaskManager.Tasks}" 
                         MouseDown="taskGrid_MouseDown" MouseMove="taskGrid_MouseMove" MouseUp="taskGrid_MouseUp" AutoGenerateColumns="False">
            <dxg:GridControl.View>
                <dxg:TableView AllowPerPixelScrolling="True" />
            </dxg:GridControl.View>
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Priority" Header="순위" />
                <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
                <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
                <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
                <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
                <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Border Background="{Binding CellColor}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
                <dxg:GridColumn FieldName="Assignee" Header="담당자" />
                <dxg:GridColumn FieldName="IsCompleted" Header="완료 여부" />
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
2. MainWindow.xaml.cs - 코드 비하인드 (드래그 앤 드롭 구현)
드래그 앤 드롭을 구현하기 위해 MouseDown, MouseMove, MouseUp 이벤트 핸들러를 사용해 작업 목록의 순서를 변경하고, 순서가 변경되면 ViewModel을 통해 데이터베이스에 업데이트합니다.

csharp
코드 복사
using System.Windows;
using System.Windows.Input;
using DevExpress.Xpf.Grid;
using SwiftAIMaster.ViewModels;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => (MainViewModel)DataContext;

        private bool isDragging = false;      // 드래그 상태 플래그
        private int sourceIndex = -1;         // 드래그 시작 인덱스 저장용

        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }

        // MouseDown 이벤트 - 드래그 시작
        private void taskGrid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            var rowHandle = taskGrid.View.GetRowHandleByMouseEventArgs(e);
            if (rowHandle >= 0 && rowHandle < ViewModel.TaskManager.Tasks.Count) // 유효한 인덱스인지 확인
            {
                isDragging = true;           // 드래그 시작 플래그 설정
                sourceIndex = rowHandle;     // 드래그 시작 위치 설정
            }
        }

        // MouseMove 이벤트 - 드래그 상태 유지
        private void taskGrid_MouseMove(object sender, MouseEventArgs e)
        {
            // 드래그 상태에서만 처리
            if (isDragging && e.LeftButton == MouseButtonState.Pressed)
            {
                // 드래그 상태 유지 (여기에서는 추가 로직이 필요 없음)
            }
        }

        // MouseUp 이벤트 - 드래그 완료
        private void taskGrid_MouseUp(object sender, MouseButtonEventArgs e)
        {
            if (isDragging)
            {
                // 드래그한 항목을 놓을 위치를 가져옴
                var targetIndex = taskGrid.View.GetRowHandleByMouseEventArgs(e);
                if (targetIndex >= 0 && targetIndex < ViewModel.TaskManager.Tasks.Count && targetIndex != sourceIndex)
                {
                    // 드래그한 항목을 새로운 위치로 이동
                    var task = ViewModel.TaskManager.Tasks[sourceIndex];
                    ViewModel.TaskManager.Tasks.RemoveAt(sourceIndex);
                    ViewModel.TaskManager.Tasks.Insert(targetIndex, task);

                    // 순서 변경을 DB에 반영
                    ViewModel.TaskManager.UpdateTaskPriorities();
                }

                // 드래그 상태 초기화
                isDragging = false;
                sourceIndex = -1;
            }
        }
    }
}
3. TaskManager.cs - 순서 변경을 데이터베이스에 반영
TaskManager 클래스의 UpdateTaskPriorities 메서드를 통해 드래그 앤 드롭으로 인해 변경된 작업 순서를 데이터베이스에 저장합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;

namespace SwiftAIMaster.ViewModels
{
    public class TaskManager
    {
        private readonly DatabaseService _databaseService;  // 데이터베이스 연동 서비스
        public ObservableCollection<TaskModel> Tasks { get; set; }

        public TaskManager(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            Tasks = new ObservableCollection<TaskModel>(_databaseService.GetAllTasks());
            Tasks.CollectionChanged += Tasks_CollectionChanged;
        }

        public void AddTask(TaskModel task)
        {
            task.Priority = Tasks.Count + 1;
            Tasks.Insert(0, task);                           // 새 작업을 목록의 맨 위에 추가
            _databaseService.AddTask(task);                  // DB에 새 작업 저장
        }

        public void UpdateTask(TaskModel task)
        {
            task.UpdateCount++;
            task.LastUpdateTime = DateTime.Now;
            _databaseService.UpdateTask(task);               // DB에 작업 수정 내용 저장
        }

        // 순서가 변경되면 모든 작업의 순서를 업데이트
        public void UpdateTaskPriorities()
        {
            for (int i = 0; i < Tasks.Count; i++)
            {
                var task = Tasks[i];
                task.Priority = i + 1;  // 새 순서로 Priority 설정
                _databaseService.UpdateTaskPriority(task.Id, task.Priority); // DB에 반영
            }
        }
    }
}
설명 요약
MouseDown: 드래그를 시작할 때 sourceIndex를 설정합니다.
MouseMove: 드래그 상태를 유지하며 추가 로직을 넣을 수 있습니다.
MouseUp