 전체 엔트리 목록 표시 기능을 포함하도록 **표(DataGrid)**에 로그 파일의 모든 엔트리 정보를 표시하도록 수정한 코드를 제공하겠습니다. 또한, 앞서 말한 실시간 도형 색상 변경과 작업 상태 표시 기능이 포함된 상태로 업데이트된 전체 코드를 제공하겠습니다.

요구 사항:
표에 모든 엔트리 정보 (MAG_NO, MAG_QTY, BASIC_MODEL, MODEL_CODE, PO_NO, PO_PLAN_QTY, PO_PROD_QTY)를 표시.
FunctionStatus 컬럼에 실시간 색상 반영 기능 유지.
진행 상태 컬럼에서 실시간 작업 상태 텍스트 반영.
작업 일시정지 및 재개 기능 포함.
1. TaskModel.cs (수정된 코드)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;

/// <summary>
/// TaskModel은 개별 작업의 상태를 관리하고, 작업의 시작 및 상태를 업데이트합니다.
/// PLC 시퀀스 플래그에 따라 다른 작업을 묶어 실행합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }

    // 도형의 상태를 표현하는 색상 (실시간으로 반응)
    private Brush _functionStatusColor;
    public Brush FunctionStatusColor
    {
        get => _functionStatusColor;
        set
        {
            _functionStatusColor = value;
            OnPropertyChanged(nameof(FunctionStatusColor));
        }
    }

    // 진행 상태를 표시하는 텍스트 (실시간으로 반영)
    private string _progressText;
    public string ProgressText
    {
        get => _progressText;
        set
        {
            _progressText = value;
            OnPropertyChanged(nameof(ProgressText));
        }
    }

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    // 명령어: 일시정지 및 재개
    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSingleTaskCommand { get; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag;

        _taskQueue = taskQueue;
        Status = "Pending";
        FunctionStatusColor = Brushes.Gray; // 기본 상태 색상 (회색)
        ProgressText = "Pending"; // 기본 상태 (대기 중)

        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        ExecuteSingleTaskCommand = new RelayCommand(ExecuteSingleTask);
    }

    /// <summary>
    /// 작업을 시작하고 작업이 완료될 때까지 상태를 업데이트합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";
        ProgressText = "Running..."; // 실시간 진행 상태 업데이트
        FunctionStatusColor = Brushes.SkyBlue; // 진행 중 색상 (스카이블루)

        // 시퀀스 플래그에 따라 PLC 작업을 묶어 실행
        switch (SequenceFlag)
        {
            case 1:
                _taskQueue.EnqueueTask(ExecuteTaskA);
                _taskQueue.EnqueueTask(ExecuteTaskB);
                _taskQueue.EnqueueTask(ExecuteTaskC);
                break;
            case 2:
                _taskQueue.EnqueueTask(ExecuteTaskC);
                _taskQueue.EnqueueTask(ExecuteTaskB);
                _taskQueue.EnqueueTask(ExecuteTaskD);
                break;
            case 3:
                _taskQueue.EnqueueTask(ExecuteTaskA);
                _taskQueue.EnqueueTask(ExecuteTaskB);
                _taskQueue.EnqueueTask(ExecuteTaskE);
                break;
        }
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _taskQueue.Pause();
        ProgressText = "Paused"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Yellow; // 일시정지 상태 (노란색)
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    private void ResumeTask()
    {
        _taskQueue.Resume();
        ProgressText = "Resumed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.SkyBlue; // 다시 진행 중 (스카이블루)
    }

    /// <summary>
    /// 특정 작업을 단독 실행합니다.
    /// </summary>
    private async void ExecuteSingleTask()
    {
        ProgressText = "Running Single Task..."; // 단일 작업 실행 상태
        await _taskQueue.ExecuteSingleTask(ExecuteTaskB); // 예시로 TaskB 단독 실행
        ProgressText = "Completed"; // 단일 작업 완료
        FunctionStatusColor = Brushes.Green; // 완료 상태 (녹색)
    }

    /// <summary>
    /// Task A 실행
    /// </summary>
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task A Completed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Green; // 작업 완료 (녹색)
    }

    /// <summary>
    /// Task B 실행
    /// </summary>
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task B Completed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Green; // 작업 완료 (녹색)
    }

    /// <summary>
    /// Task C 실행
    /// </summary>
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task C Completed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Green; // 작업 완료 (녹색)
    }

    /// <summary>
    /// Task D 실행
    /// </summary>
    private async Task ExecuteTaskD()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task D Completed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Green; // 작업 완료 (녹색)
    }

    /// <summary>
    /// Task E 실행
    /// </summary>
    private async Task ExecuteTaskE()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task E Completed"; // 진행 상태 업데이트
        FunctionStatusColor = Brushes.Green; // 작업 완료 (녹색)
    }
}
설명:
**모든 엔트리 정보(MAG_NO, MAG_QTY, BASIC_MODEL, MODEL_CODE, PO_NO, PO_PLAN_QTY, PO_PROD_QTY)**를 표시하는 속성을 추가했습니다.
각 작업의 상태는 실시간으로 업데이트되며, 작업 상태에 따라 FunctionStatus 도형의 색상이 변경됩니다.
2. MainWindow.xaml (UI 업데이트)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Logistics Task Manager" Height="400" Width="1000">
    <Grid>
        <!-- DataGrid: 작업 목록과 상태를 표시 -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO를 표시하는 열 -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*"/>
                
                <!-- MAG_QTY를 표시하는 열 -->
                <DataGridTextColumn Header="MAG_QTY" Binding="{Binding MAG_QTY}" Width="*"/>

                <!-- BASIC_MODEL을 표시하는 열 -->
                <DataGridTextColumn Header="BASIC_MODEL" Binding="{Binding BASIC_MODEL}" Width="*"/>

                <!-- MODEL_CODE를 표시하는 열 -->
                <DataGridTextColumn Header="MODEL_CODE" Binding="{Binding MODEL_CODE}" Width="*"/>

                <!-- PO_NO를 표시하는 열 -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*"/>

                <!-- PO_PLAN_QTY를 표시하는 열 -->
                <DataGridTextColumn Header="PO_PLAN_QTY" Binding="{Binding PO_PLAN_QTY}" Width="*"/>

                <!-- PO_PROD_QTY를 표시하는 열 -->
                <DataGridTextColumn Header="PO_PROD_QTY" Binding="{Binding PO_PROD_QTY}" Width="*"/>
                
                <!-- 작업 진행 상태를 표시하는 열 -->
                <DataGridTextColumn Header="Progress Status" Binding="{Binding ProgressText}" Width="2*"/>

                <!-- Function Status (도형 상태 표시) -->
                <DataGridTemplateColumn Header="Function Status" Width="*">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Ellipse Width="20" Height="20" Fill="{Binding FunctionStatusColor}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>

                <!-- 시작 및 취소 버튼을 포함하는 템플릿 열 -->
                <DataGridTemplateColumn Header="Controls">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!-- 작업 일시정지 버튼 -->
                                <Button Content="Pause" Command="{Binding PauseCommand}" Margin="5"/>
                                <!-- 작업 재개 버튼 -->
                                <Button Content="Resume" Command="{Binding ResumeCommand}" Margin="5"/>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
설명:
DataGrid에 모든 엔트리 정보가 표시됩니다: MAG_NO, MAG_QTY, BASIC_MODEL, MODEL_CODE, PO_NO, PO_PLAN_QTY, PO_PROD_QTY.
FunctionStatus 도형이 작업 상태에 따라 실시간으로 색상이 변경되며, 작업이 진행될 때 Progress Status 컬럼에 실시간으로 상태가 반영됩니다.
3. MainViewModel.cs (수정된 코드)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

/// <summary>
/// MainViewModel은 UI와 로직을 연결하는 ViewModel입니다.
/// 로그 파일을 감지하고 작업을 처리하는 역할을 합니다.
/// </summary>
public class MainViewModel : ViewModelBase
{
    // 작업 목록을 저장하는 ObservableCollection
    public ObservableCollection<TaskModel> TaskList { get; set; }

    // 파일 처리기(FileProcessor) 인스턴스 (새 파일을 감지하여 작업 큐에 추가)
    private FileProcessor _fileProcessor;

    // 작업을 순차적으로 실행하는 TaskQueue
    private TaskQueue _taskQueue;

    // 명령어: 모든 작업 일시정지
    public ICommand PauseAllCommand { get; }

    // 명령어: 모든 작업 재개
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>();

        // 작업 큐 초기화
        _taskQueue = new TaskQueue();

        // 파일 프로세서를 초기화하고 파일 감지 처리
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG", OnLogEntryDetected);
        _fileProcessor.StartProcessing(); // 파일 감지 시작

        // 명령어 설정
        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);
    }

    /// <summary>
    /// 새로운 로그 파일이 감지되었을 때 호출됩니다.
    /// LogEntry 데이터를 기반으로 TaskModel을 생성하고 작업 큐에 추가합니다.
    /// </summary>
    private void OnLogEntryDetected(LogEntry logEntry)
    {
        var task = new TaskModel(logEntry, _taskQueue);
        TaskList.Add(task); // 작업 목록에 추가

        // 바로 작업 시작
        task.StartTask(); // 작업 바로 시작
    }

    /// <summary>
    /// 모든 작업을 일시정지합니다.
    /// </summary>
    private void PauseAllTasks()
    {
        _taskQueue.Pause();
    }

    /// <summary>
    /// 모든 작업을 재개합니다.
    /// </summary>
    private void ResumeAllTasks()
    {
        _taskQueue.Resume();
    }
}
설명:
MainViewModel은 새로운 로그 파일을 감지하여 TaskModel을 생성하고 작업을 실행하며, 작업 상태와 도형의 색상이 실시간으로 반영됩니다.
결론:
이 코드는 **모든 엔트리 정보(MAG_NO, MAG_QTY, BASIC_MODEL, MODEL_CODE, PO_NO, PO_PLAN_QTY, PO_PROD_QTY)**를 표에 표시하고, FunctionStatus 도형이 작업 상태에 따라 실시간으로 색상을 변경하며, 진행 상태가 실시간으로 표시되도록 구현되었습니다.

추가적으로 수정이나 보완이 필요하다면 언제든지 말씀해 주세요!