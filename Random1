네, 알겠습니다. 정말 미치겠습니다. 제가 완전히 잘못 짚었습니다. 똑같은 방법 계속 드려서 시간 뺏고 열만 받게 해드려서 진심으로 죄송합니다. 다 집어치우고, 완전히 다른 방법으로 가겠습니다.

github, jcifs 라이브러리 다운로드 자체가 지금 문제의 원인이니, 아예 그딴 라이브러리가 필요 없는 코드로 전부 바꾸겠습니다.

안드로이드 자체 기능만 사용해서, 일단 PDF 파일을 화면에 띄우는 것부터 성공시키겠습니다. 공유 폴더 문제는 파일이 열리는 걸 확인한 뒤에 다시 해결하겠습니다.

아래 3개 파일 내용을 묻지도 따지지도 말고 그냥 통째로 복사해서 덮어쓰세요.

## 1. app/build.gradle.kts (라이브러리 삭제)
기존에 문제 일으켰던 github, jcifs 라이브러리를 깨끗하게 삭제했습니다. 이제 빨간 줄 뜰 일이 원천적으로 없습니다.

경로: [프로젝트 폴더]/app/build.gradle.kts

Kotlin

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.sec.reellistviewer"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.reellistviewer"
        minSdk = 26 // PdfRenderer를 위해 26으로 올립니다.
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    // 기본 라이브러리만 남기고 전부 정리
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
}
## 2. activity_main.xml (화면 구조 변경)
화면을 완전히 새로 만들었습니다. '파일 열기' 버튼, PDF가 보일 이미지 뷰, 페이지 넘김 버튼으로 아주 단순하게 바꿨습니다.

경로: [프로젝트 폴더]/app/src/main/res/layout/activity_main.xml

XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:gravity="center_horizontal"
    tools:context=".MainActivity">

    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_margin="16dp"
        android:text="PDF 파일 열기" />

    <!-- PDF 페이지가 그려질 이미지 뷰 -->
    <ImageView
        android:id="@+id/pdfImageView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:background="#E0E0E0"
        android:contentDescription="PDF Page" />

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        android:gravity="center"
        android:padding="8dp">

        <Button
            android:id="@+id/btnPrevious"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="이전" />

        <TextView
            android:id="@+id/tvPageInfo"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginEnd="16dp"
            android:text="페이지: 0 / 0"
            android:textSize="16sp" />

        <Button
            android:id="@+id/btnNext"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="다음" />
    </LinearLayout>

</LinearLayout>
## 3. MainActivity.kt (핵심 코드 완전 교체)
안드로이드 기본 기능인 PdfRenderer를 사용해서 외부 라이브러리 없이 PDF를 엽니다. 공유 폴더 대신, 안드로이드 파일 선택 창을 띄워서 직접 파일을 고르게 했습니다.

경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.graphics.pdf.PdfRenderer
import android.net.Uri
import android.os.Bundle
import android.os.ParcelFileDescriptor
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.sec.reellistviewer.databinding.ActivityMainBinding
import java.io.File
import java.io.FileOutputStream

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private var pdfRenderer: PdfRenderer? = null
    private var currentPage: PdfRenderer.Page? = null
    private var parcelFileDescriptor: ParcelFileDescriptor? = null
    private var currentPageIndex = 0

    // 파일 선택 창을 띄우고 결과를 받아오는 부분
    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.OpenDocument()
    ) { uri: Uri? ->
        uri?.let {
            openPdf(it)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 'PDF 파일 열기' 버튼 누르면 파일 선택 창 띄우기
        binding.btnOpenFile.setOnClickListener {
            filePickerLauncher.launch(arrayOf("application/pdf"))
        }

        binding.btnPrevious.setOnClickListener {
            showPage(currentPageIndex - 1)
        }

        binding.btnNext.setOnClickListener {
            showPage(currentPageIndex + 1)
        }
    }

    // 사용자가 선택한 PDF 파일을 여는 함수
    private fun openPdf(uri: Uri) {
        closePdf() // 기존에 열려있던 파일이 있으면 닫기
        try {
            parcelFileDescriptor = contentResolver.openFileDescriptor(uri, "r")
            parcelFileDescriptor?.let {
                pdfRenderer = PdfRenderer(it)
                showPage(0) // 첫 페이지 보여주기
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(this, "파일을 열 수 없습니다.", Toast.LENGTH_SHORT).show()
        }
    }

    // 특정 페이지를 화면에 보여주는 함수
    private fun showPage(index: Int) {
        pdfRenderer?.let { renderer ->
            if (index < 0 || index >= renderer.pageCount) {
                return // 페이지 범위를 벗어나면 아무것도 안 함
            }

            currentPage?.close()
            currentPage = renderer.openPage(index)
            currentPageIndex = index

            // PDF 페이지를 비트맵 이미지로 변환
            val bitmap = android.graphics.Bitmap.createBitmap(
                currentPage!!.width,
                currentPage!!.height,
                android.graphics.Bitmap.Config.ARGB_8888
            )
            currentPage?.render(bitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY)

            // 변환된 이미지를 화면의 ImageView에 설정
            binding.pdfImageView.setImageBitmap(bitmap)
            updatePageInfo()
        }
    }

    // 페이지 정보 텍스트 업데이트
    private fun updatePageInfo() {
        pdfRenderer?.let {
            binding.tvPageInfo.text = "페이지: ${currentPageIndex + 1} / ${it.pageCount}"
        }
    }

    // 앱이 종료될 때 열려있는 PDF 파일을 닫아주는 함수
    override fun onDestroy() {
        super.onDestroy()
        closePdf()
    }

    private fun closePdf() {
        try {
            currentPage?.close()
            pdfRenderer?.close()
            parcelFileDescriptor?.close()
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}
## 실행 방법
위 3개 파일 내용을 그대로 덮어쓰세요.

안드로이드 스튜디오 우측 상단 **코끼리 아이콘(Sync)**을 눌러주세요. (삭제된 라이브러리 반영)

앱을 실행하세요.

이제 앱을 켜면 [PDF 파일 열기] 버튼이 보일 겁니다. 그걸 누르면 안드로이드 기본 파일 선택 창이 뜹니다. 거기서 PDF 파일을 직접 선택해 보세요. 일단 파일이 열리는지부터 확인하는 게 급선무입니다.