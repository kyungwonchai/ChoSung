로와 파일 이름 모두에서 "BSM" 또는 "SM" 패턴을 찾도록 코드를 수정하겠습니다. 경로의 일부로 "BSM" 또는 "SM"이 포함될 수 있으므로 이를 고려하여 정규식을 작성하고, 전체 경로에 대해 패턴을 확인하겠습니다.

다음은 각 파일의 전체 경로와 매칭 결과를 출력하면서 정규식을 적용한 코드입니다:

csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Timers;
using System.Windows;

namespace FolderCheckApp
{
    public partial class MainWindow : Window
    {
        private Timer timer;
        private readonly string[] folderPaths = {
            @"C:\Folder1",
            @"C:\Folder2",
            @"D:\Folder3",
            @"E:\Folder4",
            @"F:\Folder5"
        };
        private readonly Regex filePathPattern = new Regex(@".*B?SM-.+_.+_.+_.+.*\.jpg$", RegexOptions.IgnoreCase);

        public MainWindow()
        {
            InitializeComponent();
            InitializeTimer();
        }

        private void InitializeTimer()
        {
            timer = new Timer(3600000); // 1 hour interval in milliseconds
            timer.Elapsed += OnTimerElapsed;
            timer.AutoReset = true;
            timer.Start();
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            foreach (var folderPath in folderPaths)
            {
                if (Directory.Exists(folderPath))
                {
                    // 폴더 내 모든 JPG 파일 검색
                    var allFiles = Directory.GetFiles(folderPath, "*.jpg", SearchOption.AllDirectories);

                    // 전체 경로에서 패턴을 확인하는 로직
                    var matchingFiles = allFiles.Where(file =>
                    {
                        bool isMatch = filePathPattern.IsMatch(file);
                        // 각 파일의 전체 경로와 매칭 결과 출력
                        Console.WriteLine($"Checking file: {file}, Match: {isMatch}");
                        return isMatch;
                    }).ToList();

                    // 매칭된 파일의 수가 20개 이상인지 확인
                    if (matchingFiles.Count >= 20)
                    {
                        // 최근 1시간 이내에 생성된 파일 필터링
                        var recentFiles = matchingFiles.Where(file => File.GetCreationTime(file) > DateTime.Now.AddHours(-1)).ToList();

                        // 최근 파일이 존재하면 작업 수행
                        if (recentFiles.Any())
                        {
                            Dispatcher.Invoke(() => PerformNextAction(folderPath));
                            return;
                        }
                    }
                }
            }
        }

        private void PerformNextAction(string selectedFolderPath)
        {
            // 선택된 폴더에 대한 후속 작업 구현
            MessageBox.Show($"Selected Folder: {selectedFolderPath}");
        }
    }
}
추가된 디버깅 코드 설명:
filePathPattern 정규식을 사용하여 파일의 전체 경로가 패턴과 일치하는지 확인합니다.
Console.WriteLine($"Checking file: {file}, Match: {isMatch}");을 사용하여 각 파일의 전체 경로와 매칭 결과를 콘솔에 출력합니다.
이 코드에서는 filePathPattern 정규식을 사용하여 전체 경로가 패턴과 일치하는지 확인합니다. 경로가 "BSM" 또는 "SM" 패턴을 포함할 수 있으므로, 이를 반영하여 정규식을 작성했습니다.

이 코드를 실행하면 콘솔에 각 파일 경로와 매칭 결과가 출력됩니다. 이를 통해 어디서 문제가 발생하는지 정확히 확인할 수 있습니다.

이제 각 파일의 전체 경로가 주어진 패턴을 포함하는지 확인할 수 있습니다.