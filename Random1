 알겠습니다. IP 주소 접근 제한 기능과 이전의 화면 레이아웃 수정 사항이 모두 포함된 전체 Flask 애플리케이션 코드를 드리겠습니다.

프로젝트 구조:

먼저, 다음과 같은 폴더 및 파일 구조를 준비해주세요.

/my_agent_chat_app
  ├── app.py
  └── templates/
      └── index.html
1. app.py 파일 내용:

이 파일은 Flask 애플리케이션의 기본 로직과 IP 주소 접근 제한 기능을 포함합니다.

Python

from flask import Flask, render_template, request, abort

app = Flask(__name__)

# --- IP 화이트리스트 설정 ---
# 애플리케이션 접근을 허용할 IP 주소 목록을 정의합니다.
# 중요: 아래 목록에 실제 허용할 IP 주소를 추가하세요!
# '127.0.0.1'은 Flask 서버가 실행되는 컴퓨터 자체에서의 접근을 허용합니다.
ALLOWED_IPS = [
    '127.0.0.1',
    # 여기에 허용할 다른 IP 주소들을 추가하세요.
    # 예: '192.168.0.15', # 내부 네트워크의 특정 IP (사용자 환경에 맞게 수정)
    # 예: 'YOUR_PUBLIC_IP_ADDRESS' # 외부에서 접속할 경우의 공인 IP (실제 IP로 수정)
]

@app.before_request
def limit_remote_addr():
    # 클라이언트의 IP 주소를 가져옵니다.
    client_ip = request.remote_addr
    
    if client_ip not in ALLOWED_IPS:
        # 허용되지 않은 IP의 접근 시도 시 로그를 남기고 403 Forbidden 에러를 반환합니다.
        app.logger.warning(f"Forbidden access attempt from IP: {client_ip}")
        abort(403)  # 403 Forbidden 에러 발생

@app.route('/')
def index():
    """
    메인 페이지를 렌더링합니다.
    templates 폴더의 index.html 파일을 사용합니다.
    """
    return render_template('index.html')

if __name__ == '__main__':
    # !!!! 중요 !!!!
    # 위 ALLOWED_IPS 리스트에 실제 접근을 허용할 IP 주소를 정확히 입력해야 합니다.
    # 공인 IP 주소는 인터넷 브라우저에서 "what is my IP" 등으로 검색하여 확인할 수 있습니다.
    # (공인 IP는 유동적일 수 있으므로, 고정 IP가 아니라면 주기적인 확인이 필요할 수 있습니다.)
    
    app.run(host='0.0.0.0', port=5000, debug=True)
app.py 주요 설정:

ALLOWED_IPS: 이 리스트에 접근을 허용할 IP 주소들을 문자열 형태로 추가해야 합니다. 127.0.0.1은 로컬호스트(서버 실행 컴퓨터)에서의 접근을 허용합니다.
2. templates/index.html 파일 내용:

이 파일은 웹페이지의 구조(HTML), 스타일(CSS), 동적 크기 조절(JavaScript) 및 <agent-chat> 컴포넌트 삽입 코드를 포함합니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="utf-8"/>
    <title>Custom Persona Agent (IP 제한 및 레이아웃 수정)</title>
    <script src="https://agent.sec.samsung.net/chat.bundle.min.js" defer></script>
    <style>
        /* 1. box-sizing 초기화 */
        html {
            box-sizing: border-box;
        }
        *, *:before, *:after {
            box-sizing: inherit;
        }

        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden; /* body 자체의 스크롤바 방지 및 wrapper의 기준점 역할 */
        }

        body {
            /* 진한 푸른색에서 검은색으로 이어지는 그라데이션 배경 */
            background: linear-gradient(135deg, #002266, #001133, #000000);
            background-attachment: fixed; /* 스크롤 시 배경 고정 */
        }

        .chat-wrapper {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            bottom: 20px;
            
            /* 디버깅을 위한 임시 테두리 (원치 않으시면 이 줄을 삭제하거나 주석 처리하세요) */
            /* border: 1px solid red;  */
            
            /* 내부 요소가 넘칠 경우 잘라내어 여백을 확보 */
            overflow: hidden; 
        }

        agent-chat {
            /* width/height 속성이 올바르게 적용되도록 display: block 설정 */
            display: block; 
            /* width와 height 속성은 JavaScript에 의해 동적으로 설정됩니다. */
        }
    </style>
</head>
<body>
    <div class="chat-wrapper">
        <agent-chat
            window_title="Custom Persona Agent"
            flow_id="9dba307d-2ba3-44f0-a0ed-79d47b2f4de8" host_url="https://agent.sec.samsung.net"
            component_inputs="{}"
            start_open="true"
            api_key="YOUR_API_KEY_HERE" width="10" height="10" ></agent-chat>
    </div>

    <script>
        function resizeAgentChat() {
            const wrapper = document.querySelector('.chat-wrapper');
            const agentChatElement = document.querySelector('agent-chat');

            if (wrapper && agentChatElement) {
                // .chat-wrapper의 실제 렌더링된 너비와 높이(픽셀 단위)를 가져옵니다.
                const wrapperWidth = wrapper.offsetWidth;
                const wrapperHeight = wrapper.offsetHeight;

                // agent-chat 엘리먼트의 width와 height *속성*을 픽셀 값으로 설정합니다.
                agentChatElement.setAttribute('width', String(wrapperWidth)); // 숫자를 문자열로 변환
                agentChatElement.setAttribute('height', String(wrapperHeight)); // 숫자를 문자열로 변환
            }
        }

        // DOM이 완전히 로드된 후 초기 크기 조절 실행
        window.addEventListener('DOMContentLoaded', resizeAgentChat);

        // 창 크기가 변경될 때마다 크기 조절 함수 실행
        window.addEventListener('resize', resizeAgentChat);
    </script>
</body>
</html>
templates/index.html 주요 설정:

flow_id: <agent-chat> 태그의 flow_id는 이전에 제공해주신 이미지(image_8898ed.png)에 있던 값입니다. 사용자님의 실제 환경에 맞는 ID인지 확인하고 필요시 수정해주세요.
api_key: <agent-chat> 태그의 api_key="YOUR_API_KEY_HERE" 부분을 반드시 실제 API 키로 교체해야 합니다.
.chat-wrapper의 border: 1px solid red;: 이 부분은 레이아웃 디버깅을 위한 임시 테두리입니다. 정상적으로 여백이 보이면 이 줄을 삭제하거나 주석 처리(/* border: 1px solid red; */) 하셔도 됩니다.
JavaScript의 setAttribute 부분에서 String()으로 감싸서 명시적으로 문자열로 변환하도록 수정했습니다 (일부 브라우저/컴포넌트 호환성을 위해).
실행 방법 (Ubuntu 기준):

파일 생성: 위의 내용대로 /my_agent_chat_app/app.py 와 /my_agent_chat_app/templates/index.html 파일을 생성하고 내용을 채웁니다.
Flask 설치 (이미 설치했다면 생략):
Bash

pip3 install Flask
Flask 서버 실행: my_agent_chat_app 디렉토리로 이동한 후, 터미널에서 다음 명령을 실행합니다.
Bash

python3 app.py