수정된 FileWatcher.cs (Null 체크 추가)
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Collections.ObjectModel;
using System.Windows.Threading;

namespace GumiWatcher
{
    public class FileWatcher
    {
        private FileSystemWatcher _fileWatcher;
        private string _logDirectory = @"C:\G-MES2.0\GUMI_WEB\log";
        private string _filePattern = @"^\d{1,3}(\.\d{1,3}){3}_M4OI[A-Za-z0-9]+_gumi[A-Za-z0-9]+_(\d{2})\.log$";
        private DispatcherTimer _timer;
        private string _lastMonitoredFile;
        private ProductOrderModel _currentProductOrder;
        private ObservableCollection<ProductOrderModel> _productOrders;
        private DateTime _lastPlanSelectedDate;

        public FileWatcher(ObservableCollection<ProductOrderModel> productOrders)
        {
            _productOrders = productOrders;

            _fileWatcher = new FileSystemWatcher
            {
                Path = _logDirectory,
                Filter = "*.log",
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName | NotifyFilters.Size
            };
            _fileWatcher.Changed += OnChanged;
            _fileWatcher.Created += OnChanged;
            _fileWatcher.EnableRaisingEvents = true;

            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _timer.Tick += CheckLatestFile;
            _timer.Start();

            _lastPlanSelectedDate = DateTime.Now;
        }

        private void OnChanged(object sender, FileSystemEventArgs e)
        {
            if (!Regex.IsMatch(e.Name, _filePattern)) return;

            string latestFile = GetLatestLogFile();
            if (latestFile != _lastMonitoredFile)
            {
                _lastMonitoredFile = latestFile;
                ReadLogFile(latestFile);
            }
        }

        private string GetLatestLogFile()
        {
            var logFiles = new DirectoryInfo(_logDirectory).GetFiles("*.log")
                .Where(f => Regex.IsMatch(f.Name, _filePattern))
                .OrderByDescending(f => f.LastWriteTime)
                .ToList();

            return logFiles.FirstOrDefault()?.FullName;
        }

        private void ReadLogFile(string filePath)
        {
            var lines = File.ReadAllLines(filePath);
            foreach (var line in lines)
            {
                ProcessLogLine(line, filePath);
            }
        }

        private void ProcessLogLine(string line, string filePath)
        {
            string fileName = Path.GetFileNameWithoutExtension(filePath);
            string dayString = fileName.Substring(fileName.Length - 2); 
            string currentYearMonth = DateTime.Now.ToString("yyyyMM");
            string fullDate = currentYearMonth + dayString; 

            if (line.Contains("PLAN Selected"))
            {
                var splitLine = line.Split(' ');
                string productOrder = splitLine[1];

                if (_currentProductOrder == null || _currentProductOrder.ProductOrder != productOrder)
                {
                    if (DateTime.Now.Subtract(_lastPlanSelectedDate).TotalDays > 2)
                    {
                        _currentProductOrder = new ProductOrderModel
                        {
                            ProductOrder = productOrder,
                            PDate = fullDate,
                            POStatus = "wait"
                        };
                        _productOrders.Add(_currentProductOrder);
                    }

                    _lastPlanSelectedDate = DateTime.Now;
                }
            }
            else if (line.Contains("BasicModel") && _currentProductOrder != null)
            {
                var modelData = line.Split(':')[1].Trim();
                _currentProductOrder.BasicModel = modelData;
            }
            else if (line.Contains("MB^") && _currentProductOrder != null)
            {
                var mbData = line.Split('^');
                _currentProductOrder.PORemain = int.Parse(mbData[1]);
                _currentProductOrder.MGCount = int.Parse(mbData[2]);
            }
            else if (line.Contains("JB^") && _currentProductOrder != null)
            {
                _currentProductOrder.PCount++;
            }
            else if (line.Contains("FNL^") && _currentProductOrder != null)
            {
                _currentProductOrder.POStatus = "stack";
            }
            else if (line.Contains("JD^") && _currentProductOrder != null)
            {
                _currentProductOrder.POStatus = "out";
                ExecuteOutFunction();
            }
        }

        private void ExecuteOutFunction()
        {
            // 배출 처리 로직 구현
        }

        private void CheckLatestFile(object sender, EventArgs e)
        {
            string latestFile = GetLatestLogFile();
            if (latestFile != _lastMonitoredFile)
            {
                _lastMonitoredFile = latestFile;
                ReadLogFile(latestFile);
            }
        }
    }

    public class ProductOrderModel
    {
        public string ProductOrder { get; set; }
        public string BasicModel { get; set; }
        public int PORemain { get; set; }
        public int MGCount { get; set; }
        public int PCount { get; set; }
        public string POStatus { get; set; }
        public string PDate { get; set; }
    }
}
주요 변경 사항:
Null 체크 추가: _currentProductOrder가 null일 수 있기 때문에, BasicModel, MB^, JB^, FNL^, JD^ 등의 라인에서 _currentProductOrder에 접근하기 전에 null인지 확인하는 조건을 추가했습니다.
예: if (line.Contains("BasicModel") && _currentProductOrder != null)와 같이 조건문을 추가했습니다.
안전한 접근: _currentProductOrder가 null일 때 에러가 발생하지 않도록 처리하여 더 안전한 코드를 작성했습니다.
이제 _currentProductOrder가 null일 때 발생하는 NullReferenceException을