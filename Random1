하게 작업을 진행하기 위해, WPF UI에서 사용자가 주소와 값을 입력하고, 해당 주소로 값을 쓰는 기능을 구현하겠습니다. 입력된 주소와 값은 각각 단일/멀티로 구분되고, 입력 값의 유효성을 검증하여 정확한 형식으로 값을 전송할 수 있도록 하겠습니다.

목표:
주소와 값을 입력받아 단일/다중 명령어 전송을 자동으로 처리.
주소가 4자리일 때는 단일 명령, 8자리일 때는 멀티 명령으로 인식.
4자리 주소는 숫자만 허용하며, 단일 주소에서만 1~4 범위의 값만 입력 가능.
ASCII 값으로 모든 값을 처리.
UI에서 주소와 값을 입력받아 처리.
MainWindow.xaml (UI)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Data Writer" Height="350" Width="400">
    <Grid>
        <StackPanel Margin="20">
            <TextBlock Text="주소 입력 (단일: 4자리, 멀티: 8자리)" />
            <TextBox x:Name="AddressInput" Width="200" Height="30" MaxLength="8" />
            
            <TextBlock Text="값 입력 (숫자만 허용)" Margin="0,10,0,0" />
            <TextBox x:Name="ValueInput" Width="200" Height="30" />

            <Button Content="값 기록" Width="200" Height="40" Margin="0,20,0,0" Click="OnWriteButtonClick" />

            <TextBlock x:Name="ResultText" Text="" Margin="0,20,0,0" Foreground="Green" />
        </StackPanel>
    </Grid>
</Window>
MainWindow.xaml.cs (UI 이벤트 처리)
csharp
코드 복사
using System;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private ComportManager comportManager;

        public MainWindow()
        {
            InitializeComponent();
            comportManager = ComportManager.GetInstance();
        }

        // 버튼 클릭 시 호출되는 메서드
        private void OnWriteButtonClick(object sender, RoutedEventArgs e)
        {
            string addressInput = AddressInput.Text.Trim();
            string valueInput = ValueInput.Text.Trim();

            // 입력 유효성 검사
            if (!IsValidAddress(addressInput) || !IsValidValue(valueInput))
            {
                ResultText.Text = "잘못된 입력값입니다. 주소는 4 또는 8자리, 값은 숫자만 입력하세요.";
                return;
            }

            try
            {
                if (addressInput.Length == 4) // 단일 주소 처리
                {
                    int value = int.Parse(valueInput);
                    string response = comportManager.WriteSingleData(addressInput, value);
                    ResultText.Text = $"단일 주소 {addressInput}에 값 {valueInput} 기록 성공!";
                }
                else if (addressInput.Length == 8) // 멀티 주소 처리
                {
                    string startAddress = addressInput.Substring(0, 4);
                    string endAddress = addressInput.Substring(4, 4);

                    // 값 입력을 5자리로 맞춤
                    int[] values = valueInput.Split(',').Select(int.Parse).ToArray();

                    string response = comportManager.WriteMultipleData(startAddress, endAddress, values);
                    ResultText.Text = $"멀티 주소 {startAddress}~{endAddress}에 값 {valueInput} 기록 성공!";
                }
            }
            catch (Exception ex)
            {
                ResultText.Text = $"오류 발생: {ex.Message}";
            }
        }

        // 주소 유효성 검사 (4자리 또는 8자리 숫자)
        private bool IsValidAddress(string address)
        {
            return address.Length == 4 || address.Length == 8 && address.All(char.IsDigit);
        }

        // 값 유효성 검사 (숫자만 허용)
        private bool IsValidValue(string value)
        {
            return value.All(char.IsDigit);
        }
    }
}
ComportManager.cs (PLC와 통신 처리)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;

public class ComportManager
{
    private static ComportManager _instance;
    private SerialPort _serialPort;

    private ComportManager() 
    {
        // 시리얼 포트 초기화 (예시)
        _serialPort = new SerialPort("COM1", 9600, Parity.None, 8, StopBits.One);
        _serialPort.Open();
    }

    public static ComportManager GetInstance()
    {
        if (_instance == null)
            _instance = new ComportManager();
        return _instance;
    }

    // 단일 주소에 값을 쓰는 함수 (값을 5자리로 맞추어 전송)
    public string WriteSingleData(string startAddress, int value)
    {
        // 값이 5자리로 맞춰지도록 변환 (예: 1 -> 0100)
        string valueString = value.ToString("D4");

        // 명령어 생성: %01#WDD02300023000100**
        string command = $"%01#WDD{startAddress}{startAddress}{valueString}";

        // BCC 계산 (Block Check Code)
        string bcc = CalculateBCC(command);
        command += bcc + "\n";  // BCC와 종료 기호 추가

        // 명령어를 시리얼 포트로 전송
        byte[] buffer = Encoding.ASCII.GetBytes(command);
        _serialPort.Write(buffer, 0, buffer.Length);

        // 응답 처리
        return GetResponse();
    }

    // 여러 주소에 값을 쓰는 함수 (각 값도 5자리로 맞춰서 전송)
    public string WriteMultipleData(string startAddress, string endAddress, int[] values)
    {
        // 값을 5자리로 맞추어 전송 (예: 1 -> 0100)
        string valueData = string.Join("", Array.ConvertAll(values, v => v.ToString("D4")));  
        string command = $"%01#WDD{startAddress}{endAddress}{valueData}";

        // BCC 계산 (Block Check Code)
        string bcc = CalculateBCC(command);
        command += bcc + "\n";  // BCC와 종료 기호 추가

        // 명령어를 시리얼 포트로 전송
        byte[] buffer = Encoding.ASCII.GetBytes(command);
        _serialPort.Write(buffer, 0, buffer.Length);

        // 응답 처리
        return GetResponse();
    }

    // BCC 계산 (Block Check Code)
    private string CalculateBCC(string command)
    {
        int bcc = 0;
        foreach (char c in command)
        {
            bcc ^= c;  // XOR 연산
        }
        return bcc.ToString("X2");  // BCC를 16진수 문자열로 반환
    }

    // 응답 처리 함수
    private string GetResponse()
    {
        byte[] readBuffer = new byte[256];
        int bytesRead = _serialPort.Read(readBuffer, 0, readBuffer.Length);
        return Encoding.ASCII.GetString(readBuffer, 0, bytesRead);
    }
}
코드 설명:
UI 구성:

주소를 입력받는 텍스트 박스(AddressInput), 값을 입력받는 텍스트 박스(ValueInput), 그리고 버튼을 클릭하면 값을 기록하는 메서드가 호출됩니다.
사용자는 4자리 또는 8자리 주소를 입력할 수 있습니다.
값은 숫자만 허용하며, 여러 값을 입력할 때는 쉼표로 구분해야 합니다.
입력 검증:

주소: 4자리 또는 8자리만 허용하며, 숫자로만 입력되어야 합니다.
값: 숫자만 입력되도록 제한하고, 멀티 값을 입력할 때 쉼표로 구분해서 여러 값을 입력할 수 있습니다.
ComportManager:

단일 주소에 값을 쓸 때는 WriteSingleData, 다중 주소에 값을 쓸 때는 WriteMultipleData를 호출합니다.
값은 항상 5자리로 맞춰서 전송됩니다.
ASCII 형식으로 데이터를 전송하고, BCC 검증 후 명령을 마무리합니다.
응답 처리:

PLC로부터 응답을 수신하고 결과를 UI에 출력합니다.
실행 예시:
단일 주소 입력: 02300 입력, 값 1 입력

결과: D2300에 0100 값이 기록됨
결과 메시지: "단일 주소 02300에 값 1 기록 성공!"
멀티 주소 입력: 023002304 입력, 값 1,2,3,4,5 입력

결과: D2300부터 D2304까지 각각 0100, 0200, 0300, 0400, 0500 값이 기록됨
결과 메시지: "멀티 주소 02300~02304에 값 1,2,3,4,5 기록 성공!"
이 코드를 통해 사용자는 WPF UI에서 주소와 값을 입력하여 PLC에 값을 기록할 수 있습