using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourForm : Form
    {
        // 버튼과 이벤트 핸들러를 매핑하는 딕셔너리
        private Dictionary<Button, List<EventHandler>> buttonHandlerMap = new Dictionary<Button, List<EventHandler>>();

        public YourForm()
        {
            InitializeComponent();
            // 모든 버튼을 딕셔너리에 추가
            buttonHandlerMap.Add(Button1, new List<EventHandler>());
            buttonHandlerMap.Add(Button2, new List<EventHandler>());
            // ... (다른 버튼들도 추가)
        }

        private void AddHandler(Button button, EventHandler handler)
        {
            var handlers = buttonHandlerMap[button];
            if (!handlers.Contains(handler))
            {
                button.Click += handler;
                handlers.Add(handler);
            }
        }

        private void RemoveHandler(Button button, EventHandler handler)
        {
            if (buttonHandlerMap[button].Contains(handler))
            {
                button.Click -= handler;
                buttonHandlerMap[button].Remove(handler);
            }
        }

        private void FunctionA(object sender, EventArgs e)
        {
            MessageBox.Show("FunctionA Called");
        }

        private void FunctionB(object sender, EventArgs e)
        {
            MessageBox.Show("FunctionB Called");
        }

        private void OtherMethod()
        {
            // 이벤트 핸들러를 추가하거나 제거
            AddHandler(Button1, FunctionA);
            AddHandler(Button2, FunctionB);
            AddHandler(Button1, FunctionA);  // FunctionA는 이미 Button1에 추가되었으므로 무시됩니다.
            RemoveHandler(Button2, FunctionB);
        }
    }
}
