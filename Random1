DevExpress RibbonControl을 사용해 동적 즐겨찾기 기능을 구현하는 코드입니다.

기능 설명:

우클릭 메뉴:
모든 버튼에 대해 우클릭 메뉴 추가.
기본 메뉴 아래 "즐겨찾기 추가" 메뉴 표시.
즐겨찾기 페이지에 있을 경우 "즐겨찾기 삭제" 메뉴 표시.
즐겨찾기 페이지:
가장 좌측에 고정된 "즐겨찾기" 리본 페이지 생성.
즐겨찾기 추가/삭제 시 동적으로 업데이트.
데이터 기억:
C:\agent\mgspfavoriate.ini 파일에 즐겨찾기 데이터 저장.
프로그램 시작 시 데이터를 불러와 즐겨찾기 복원.
전체 코드
csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private const string FavoritesFilePath = @"C:\agent\mgspfavoriate.ini"; // 즐겨찾기 파일 경로
        private RibbonPage favoritesPage; // 즐겨찾기 페이지
        private readonly List<string> favoriteKeys = new List<string>(); // 즐겨찾기된 버튼 키 목록

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            InitializeContextMenu();
            LoadFavoritesFromFile();
        }

        // 1. 즐겨찾기 페이지 초기화
        private void InitializeFavoritesPage()
        {
            favoritesPage = new RibbonPage("즐겨찾기") { Name = "FavoritesPage" };
            ribbonControl1.Pages.Insert(0, favoritesPage); // 가장 좌측에 추가
        }

        // 2. 우클릭 메뉴 초기화
        private void InitializeContextMenu()
        {
            ribbonControl1.MouseDown += (sender, e) =>
            {
                if (e.Button != System.Windows.Forms.MouseButtons.Right) return;

                var hitInfo = ribbonControl1.CalcHitInfo(e.Location);
                if (hitInfo.InItemLink)
                {
                    var item = hitInfo.ItemLink.Item as BarButtonItem;
                    if (item != null)
                    {
                        ShowContextMenu(item, e.Location);
                    }
                }
            };
        }

        // 3. 우클릭 메뉴 표시
        private void ShowContextMenu(BarButtonItem item, Point location)
        {
            var popupMenu = new PopupMenu { Ribbon = ribbonControl1 };

            if (IsFavorite(item.Name))
            {
                // 즐겨찾기에 있는 경우 "즐겨찾기 삭제" 메뉴 추가
                popupMenu.AddItem(new BarButtonItem
                {
                    Caption = "즐겨찾기 삭제",
                    Name = "RemoveFavorite"
                }).ItemClick += (s, e) => RemoveFromFavorites(item.Name);
            }
            else
            {
                // 즐겨찾기에 없는 경우 "즐겨찾기 추가" 메뉴 추가
                popupMenu.AddItem(new BarButtonItem
                {
                    Caption = "즐겨찾기 추가",
                    Name = "AddFavorite"
                }).ItemClick += (s, e) => AddToFavorites(item.Name);
            }

            popupMenu.ShowPopup(ribbonControl1.PointToScreen(location));
        }

        // 4. 즐겨찾기 추가
        private void AddToFavorites(string buttonKey)
        {
            var button = ribbonControl1.Items[buttonKey] as BarButtonItem;
            if (button == null) return;

            var originalGroup = FindGroupContainingButton(buttonKey);
            if (originalGroup == null) return;

            var groupName = originalGroup.Text;
            var favoriteGroup = GetOrCreateFavoritesGroup(groupName);

            // 버튼 복사하여 추가
            var newButton = new BarButtonItem
            {
                Name = buttonKey,
                Caption = button.Caption,
                Glyph = button.Glyph,
                RibbonStyle = button.RibbonStyle
            };
            favoriteGroup.ItemLinks.Add(newButton);

            if (!favoriteKeys.Contains(buttonKey))
                favoriteKeys.Add(buttonKey);

            SaveFavoritesToFile();
        }

        // 5. 즐겨찾기 삭제
        private void RemoveFromFavorites(string buttonKey)
        {
            foreach (var group in favoritesPage.Groups)
            {
                var itemLink = group.ItemLinks.FirstOrDefault(link => link.Item.Name == buttonKey);
                if (itemLink != null)
                {
                    group.ItemLinks.Remove(itemLink);
                    break;
                }
            }

            favoriteKeys.Remove(buttonKey);
            SaveFavoritesToFile();
        }

        // 6. 즐겨찾기 그룹 찾거나 생성
        private RibbonPageGroup GetOrCreateFavoritesGroup(string groupName)
        {
            var group = favoritesPage.Groups.FirstOrDefault(g => g.Text == groupName);
            if (group == null)
            {
                group = new RibbonPageGroup(groupName);
                favoritesPage.Groups.Add(group);
            }
            return group;
        }

        // 7. 버튼이 포함된 그룹 찾기
        private RibbonPageGroup FindGroupContainingButton(string buttonKey)
        {
            foreach (var page in ribbonControl1.Pages)
            {
                foreach (var group in page.Groups)
                {
                    if (group.ItemLinks.Any(link => link.Item.Name == buttonKey))
                        return group;
                }
            }
            return null;
        }

        // 8. 즐겨찾기 파일로부터 데이터 로드
        private void LoadFavoritesFromFile()
        {
            if (!File.Exists(FavoritesFilePath)) return;

            var lines = File.ReadAllLines(FavoritesFilePath);
            foreach (var line in lines)
            {
                if (string.IsNullOrWhiteSpace(line)) continue;
                favoriteKeys.Add(line);
            }

            foreach (var buttonKey in favoriteKeys)
            {
                AddToFavorites(buttonKey);
            }
        }

        // 9. 즐겨찾기 데이터 저장
        private void SaveFavoritesToFile()
        {
            Directory.CreateDirectory(Path.GetDirectoryName(FavoritesFilePath)); // 디렉터리 생성
            File.WriteAllLines(FavoritesFilePath, favoriteKeys);
        }

        // 10. 즐겨찾기 확인
        private bool IsFavorite(string buttonKey)
        {
            return favoriteKeys.Contains(buttonKey);
        }
    }
}
주요 설명
즐겨찾기 페이지 관리:

favoritesPage를 생성하고 항상 가장 좌측에 위치하도록 설정합니다.
즐겨찾기를 추가하면 원래 그룹의 이름으로 새로운 그룹이 생성됩니다.
우클릭 메뉴:

MouseDown 이벤트로 우클릭 위치를 감지하고 PopupMenu를 표시합니다.
메뉴에서 "즐겨찾기 추가" 또는 "즐겨찾기 삭제" 옵션을 제공합니다.
즐겨찾기 데이터 관리:

favoriteKeys 리스트로 즐겨찾기된 버튼의 키를 관리합니다.
C:\agent\mgspfavoriate.ini 파일에 즐겨찾기를 저장하고 불러옵니다.
즐겨찾기 추가/삭제:

기존 버튼을 복사하여 "즐겨찾기" 페이지의 그룹에 동적으로 추가합니다.
삭제 시 해당 버튼을 그룹에서 제거하고, 리스트를 업데이트합니다.
실행 결과
즐겨찾기 추가:

리본 버튼을 우클릭하고 "즐겨찾기 추가"를 선택하면 버튼이 "즐겨찾기" 페이지로 복사됩니다.
즐겨찾기 삭제:

"즐겨찾기" 페이지에서 버튼을 우클릭하고 "즐겨찾기 삭제"를 선택하면 버튼이 제거됩니다.
즐겨찾기 저장/로드:

프로그램 종료 후에도 즐겨찾기 상태가 유지됩니다.











ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.