버가 안정적으로 동작하기 위해서는 여러 가지 고려사항이 필요합니다. 여기서는 비동기 소켓 서버를 사용하여 클라이언트 요청을 처리하는 방법을 예로 들어보겠습니다. 비동기 소켓을 사용하면 서버가 여러 클라이언트 요청을 동시에 처리할 수 있으며, 안정성을 높일 수 있습니다.

비동기 소켓 서버
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

class AsyncServer
{
    static async Task Main(string[] args)
    {
        TcpListener listener = new TcpListener(IPAddress.Any, 5000);
        listener.Start();
        Console.WriteLine("서버 시작...");

        while (true)
        {
            TcpClient client = await listener.AcceptTcpClientAsync();
            _ = Task.Run(() => HandleClientAsync(client)); // 비동기로 클라이언트 처리
        }
    }

    static async Task HandleClientAsync(TcpClient client)
    {
        NetworkStream stream = client.GetStream();
        byte[] buffer = new byte[1024];
        
        try
        {
            while (true)
            {
                int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                if (bytesRead == 0) break; // 클라이언트 연결 종료

                string receivedData = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                // 클라이언트로부터 받은 데이터 처리
                string response = ProcessData(receivedData);
                byte[] responseData = Encoding.UTF8.GetBytes(response);
                await stream.WriteAsync(responseData, 0, responseData.Length);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"클라이언트 처리 중 오류 발생: {ex.Message}");
        }
        finally
        {
            stream.Close();
            client.Close();
        }
    }

    static string ProcessData(string data)
    {
        // 받은 데이터를 바탕으로 함수 실행
        if (data == "HelloFunction")
        {
            return HelloFunction();
        }
        return "Unknown Command";
    }

    static string HelloFunction()
    {
        return "Hello from Server!";
    }
}
비동기 소켓 클라이언트
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Animation;

namespace WpfClient
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private async void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string response = await SendRequestAsync("127.0.0.1", 5000, "HelloFunction");
            responseTextBlock.Text = "서버 응답: " + response;

            // 버튼 애니메이션
            AnimateButton(sendButton);
        }

        private async Task<string> SendRequestAsync(string server, int port, string message)
        {
            try
            {
                using (TcpClient client = new TcpClient())
                {
                    await client.ConnectAsync(server, port);
                    using (NetworkStream stream = client.GetStream())
                    {
                        byte[] dataToSend = Encoding.UTF8.GetBytes(message);
                        await stream.WriteAsync(dataToSend, 0, dataToSend.Length);

                        byte[] buffer = new byte[1024];
                        int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                        return Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    }
                }
            }
            catch (Exception ex)
            {
                return $"Error: {ex.Message}";
            }
        }

        private void AnimateButton(UIElement element)
        {
            DoubleAnimation animation = new DoubleAnimation
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(TimeSpan.FromSeconds(0.5)),
                AutoReverse = true
            };
            element.BeginAnimation(UIElement.OpacityProperty, animation);
        }
    }
}
요약
위 예제에서는 비동기 소켓 서버를 사용하여 여러 클라이언트의 요청을 동시에 안정적으로 처리하는 방법을 설명했습니다. 서버는 비동기 방식으로 클라이언트 요청을 받아들이고 처리하여 성능과 안정성을 향상시킵니다. 클라이언트는 서버와의 비동기 통신을 통해 요청을 보내고 응답을 받아 UI에 표시합니다. 이를 통해 전체 시스템의 응답성을 높이고, 서버의 부하를 효과적으로 관리할 수 있습니다.