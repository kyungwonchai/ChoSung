#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import subprocess
import re
import os
import sys

# ==============================================================================
# 설정 변수 (사용자 환경에 맞게 수정하세요)
# ==============================================================================

# 규칙을 재설정할 포트 목록입니다. 
# 예: ['80', '443']
TARGET_PORTS = ['8080', '3306']

# 접근을 허용할 유일한 소스 IP 주소입니다.
# 예: '192.168.1.100'
ALLOWED_IP = '203.0.113.55'

# ==============================================================================

def execute_command(command: list[str]) -> tuple[str, str, int]:
    """
    주어진 명령어를 시스템에서 실행하고 표준 출력, 표준 에러, 종료 코드를 반환합니다.
    """
    try:
        process = subprocess.run(
            command,
            check=True,
            capture_output=True,
            text=True,
            encoding='utf-8'
        )
        return process.stdout.strip(), process.stderr.strip(), process.returncode
    except FileNotFoundError:
        print(f"오류: '{command[0]}' 명령어를 찾을 수 없습니다. UFW가 설치되어 있고 PATH에 있는지 확인하세요.", file=sys.stderr)
        sys.exit(1)
    except subprocess.CalledProcessError as e:
        # check=True일 때, 0이 아닌 종료 코드가 반환되면 이 예외가 발생합니다.
        return e.stdout.strip(), e.stderr.strip(), e.returncode

def configure_firewall_rules(target_ports: list[str], allowed_ip: str):
    """
    지정된 포트들에 대한 모든 UFW 규칙을 삭제하고, 특정 IP에 대해서만 허용하는 새 규칙을 추가합니다.
    """
    print(">>> 1. 기존 UFW 규칙을 확인합니다...")
    
    # 'ufw status numbered' 명령 실행
    stdout, stderr, _ = execute_command(['sudo', 'ufw', 'status', 'numbered'])
    if stderr and "Firewall not active" in stderr:
        print("UFW가 비활성화 상태입니다. 규칙을 설정할 수 없습니다.", file=sys.stderr)
        return
    
    rules_to_delete = []
    # 예: [ 1] 80/tcp                     ALLOW IN    Anywhere
    #     [ 2] 3306                       ALLOW IN    1.2.3.4
    rule_pattern = re.compile(r"\[\s*(\d+)\s*\].*?(?:\s|/)(%s)(?:/|\s|$)" % "|".join(target_ports))

    print(f"\n>>> 2. 포트 {', '.join(target_ports)}와 관련된 기존 규칙을 검색합니다...")
    for line in stdout.splitlines():
        match = rule_pattern.search(line)
        if match:
            rule_number = int(match.group(1))
            port_in_rule = match.group(2)
            print(f"  - [{rule_number}] 포트 {port_in_rule} 관련 규칙 발견: {line.strip()}")
            rules_to_delete.append(rule_number)

    if rules_to_delete:
        print(f"\n>>> 3. 총 {len(rules_to_delete)}개의 기존 규칙을 삭제합니다...")
        # 규칙 번호가 변경되는 것을 방지하기 위해 역순으로 정렬하여 삭제
        for rule_num in sorted(rules_to_delete, reverse=True):
            print(f"  - [{rule_num}] 규칙 삭제 중...")
            # 'ufw delete'는 확인 프롬프트를 표시하므로 'y'를 입력해줍니다.
            delete_process = subprocess.Popen(['sudo', 'ufw', 'delete', str(rule_num)], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            stdout, stderr = delete_process.communicate(input='y\n')
            
            if delete_process.returncode == 0:
                print(f"  - [{rule_num}] 규칙 삭제 완료.")
            else:
                print(f"  - [{rule_num}] 규칙 삭제 실패: {stderr.strip()}", file=sys.stderr)
    else:
        print("\n>>> 3. 삭제할 관련 규칙이 없습니다.")

    print(f"\n>>> 4. IP {allowed_ip}에 대한 신규 규칙을 추가합니다...")
    for port in target_ports:
        # TCP와 UDP 모두에 대해 규칙을 추가하려면 아래 proto를 'any'로 변경하거나, 
        # UDP 규칙 추가 라인을 별도로 만드세요.
        for protocol in ['tcp', 'udp']:
            print(f"  - 포트 {port}/{protocol} 허용 규칙 추가 중...")
            command = ['sudo', 'ufw', 'allow', 'from', allowed_ip, 'to', 'any', 'port', port, 'proto', protocol]
            stdout, stderr, retcode = execute_command(command)
            
            if retcode == 0 and "Rule added" in stdout:
                print(f"  - 성공: {stdout}")
            else:
                print(f"  - 실패: {stderr if stderr else stdout}", file=sys.stderr)

    print("\n>>> 5. 방화벽 규칙 설정이 완료되었습니다. 최종 상태를 확인합니다.")
    final_status, _, _ = execute_command(['sudo', 'ufw', 'status'])
    print("-" * 40)
    print(final_status)
    print("-" * 40)

def main():
    """
    스크립트의 메인 실행 함수입니다.
    """
    # 루트 권한으로 실행되었는지 확인
    if os.geteuid() != 0:
        print("이 스크립트는 루트 권한으로 실행해야 합니다. 'sudo python3 ufw_config.py' 형식으로 실행해주세요.", file=sys.stderr)
        sys.exit(1)
        
    # 설정된 변수 값 확인
    if not TARGET_PORTS or not ALLOWED_IP:
        print("TARGET_PORTS와 ALLOWED_IP 변수를 스크립트 상단에서 설정해주세요.", file=sys.stderr)
        sys.exit(1)
        
    configure_firewall_rules(TARGET_PORTS, ALLOWED_IP)


if __name__ == "__main__":
    main()