래는 WPF 프로젝트에서 사용 가능한 C# 소켓 통신 코드 샘플입니다. 이 코드는 물류 라벨 정보를 보내고 응답을 받아, 양방향 통신을 처리합니다. 또한 특별 신호값을 통해 인터럽트 처리 및 다음 동작으로 이어지는 설계가 포함되어 있습니다. 모든 설명은 한글로 주석을 달아 매우 상세하게 설명하겠습니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfSocketCommunication.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Communication" Height="350" Width="525">
    <Grid>
        <TextBox Name="LogTextBox" VerticalScrollBarVisibility="Auto" 
                 HorizontalScrollBarVisibility="Auto" IsReadOnly="True"
                 Margin="10,10,10,60"/>
        <Button Content="Send Label" HorizontalAlignment="Left" 
                VerticalAlignment="Bottom" Width="100" Height="30"
                Margin="10,0,0,10" Click="SendLabelButton_Click"/>
        <Button Content="Send Interrupt" HorizontalAlignment="Right" 
                VerticalAlignment="Bottom" Width="120" Height="30"
                Margin="0,0,10,10" Click="SendInterruptButton_Click"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows;

namespace WpfSocketCommunication
{
    public partial class MainWindow : Window
    {
        private Socket _clientSocket; // 소켓 객체 선언
        private const string _ip = "127.0.0.1"; // 서버 IP 주소 (로컬 테스트용)
        private const int _port = 12345; // 서버 포트 번호
        private bool _connected = false; // 연결 상태 확인용 변수
        private CancellationTokenSource _cancellationTokenSource;

        public MainWindow()
        {
            InitializeComponent();
            ConnectToServer(); // 윈도우가 열리면 서버에 연결
        }

        // 서버에 연결하는 함수
        private void ConnectToServer()
        {
            try
            {
                // 소켓 생성 (TCP 사용)
                _clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                _clientSocket.Connect(_ip, _port); // 서버에 연결 시도

                _connected = true; // 연결 성공 시 상태 변경
                LogMessage("서버에 연결되었습니다.");

                _cancellationTokenSource = new CancellationTokenSource();
                StartListening(); // 서버로부터 데이터를 받기 시작

            }
            catch (SocketException ex)
            {
                LogMessage($"서버 연결 실패: {ex.Message}");
            }
        }

        // 서버로부터 데이터를 수신하는 비동기 함수
        private async void StartListening()
        {
            await System.Threading.Tasks.Task.Run(() =>
            {
                byte[] buffer = new byte[1024]; // 데이터를 받을 버퍼
                while (_connected && !_cancellationTokenSource.Token.IsCancellationRequested)
                {
                    try
                    {
                        // 데이터 수신 (대기)
                        int receivedBytes = _clientSocket.Receive(buffer);
                        if (receivedBytes > 0)
                        {
                            // 수신한 데이터를 문자열로 변환
                            string message = Encoding.ASCII.GetString(buffer, 0, receivedBytes);
                            ProcessReceivedData(message); // 데이터 처리
                        }
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"데이터 수신 중 오류: {ex.Message}");
                        _connected = false; // 연결 끊김
                        break;
                    }
                }
            });
        }

        // 수신한 데이터를 처리하는 함수
        private void ProcessReceivedData(string message)
        {
            // 특정 인터럽트 신호가 수신되었는지 확인
            if (message.Contains("INTERRUPT"))
            {
                LogMessage("인터럽트 신호 수신됨. 특별 동작 수행.");
                // 인터럽트 처리 (특정 동작을 수행)
                ExecuteInterruptAction();
            }
            else
            {
                LogMessage($"서버로부터 수신된 메시지: {message}");
            }
        }

        // 인터럽트 발생 시 동작을 정의하는 함수
        private void ExecuteInterruptAction()
        {
            // 이곳에 특별한 동작을 정의합니다. (예: 특정 명령 실행)
            LogMessage("특별 동작이 실행되었습니다.");
        }

        // 라벨 정보를 서버에 전송하는 함수
        private void SendLabelButton_Click(object sender, RoutedEventArgs e)
        {
            if (_connected)
            {
                string labelData = "LABEL_DATA:12345"; // 임의의 라벨 데이터
                SendData(labelData); // 서버로 데이터 전송
            }
            else
            {
                LogMessage("서버와 연결되지 않았습니다.");
            }
        }

        // 인터럽트 신호를 서버로 전송하는 함수
        private void SendInterruptButton_Click(object sender, RoutedEventArgs e)
        {
            if (_connected)
            {
                string interruptSignal = "INTERRUPT_SIGNAL"; // 인터럽트 신호
                SendData(interruptSignal); // 서버로 신호 전송
            }
            else
            {
                LogMessage("서버와 연결되지 않았습니다.");
            }
        }

        // 데이터를 서버로 전송하는 함수
        private void SendData(string data)
        {
            try
            {
                byte[] buffer = Encoding.ASCII.GetBytes(data); // 데이터를 바이트 배열로 변환
                _clientSocket.Send(buffer); // 서버로 데이터 전송
                LogMessage($"데이터 전송: {data}");
            }
            catch (Exception ex)
            {
                LogMessage($"데이터 전송 실패: {ex.Message}");
            }
        }

        // 로그 메시지를 UI에 출력하는 함수
        private void LogMessage(string message)
        {
            // UI 스레드에서 로그 업데이트
            Dispatcher.Invoke(() => LogTextBox.AppendText($"{message}\n"));
        }

        // 윈도우가 닫힐 때 연결을 종료하는 함수
        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            Disconnect(); // 서버 연결 종료
        }

        // 서버와의 연결을 종료하는 함수
        private void Disconnect()
        {
            if (_connected)
            {
                _connected = false; // 연결 상태 플래그 변경
                _cancellationTokenSource.Cancel(); // 수신 대기 취소
                _clientSocket.Shutdown(SocketShutdown.Both); // 소켓 종료
                _clientSocket.Close(); // 소켓 리소스 해제
                LogMessage("서버 연결이 종료되었습니다.");
            }
        }
    }
}
설명 (한글 주석)
소켓 연결 및 서버 통신:

ConnectToServer() 함수는 서버에 연결을 시도하며, 성공 시 _connected 변수를 true로 변경하여 연결 상태를 나타냅니다.
연결 후 StartListening() 비동기 함수가 호출되어 서버로부터 데이터를 수신합니다.
데이터 수신 및 처리:

StartListening() 함수는 수신 대기 상태를 유지하면서 서버로부터 데이터를 받습니다. 데이터를 받으면 ProcessReceivedData() 함수가 호출되어 메시지를 처리합니다.
만약 메시지에 INTERRUPT 신호가 포함되어 있으면 인터럽트 처리를 위한 ExecuteInterruptAction() 함수가 실행됩니다.
데이터 전송:

SendData() 함수는 문자열 데이터를 바이트 배열로 변환한 후 서버에 전송합니다. UI 버튼을 통해 라벨 데이터 또는 인터럽트 신호를 전송할 수 있습니다.
로그 처리:

LogMessage() 함수는 UI에 메시지를 출력하는 함수입니다. 로그 메시지는 TextBox 컨트롤에 추가됩니다.
종료 처리:

윈도우가 닫힐 때 Disconnect() 함수가 호출되어 서버와의 연결을 종료합니다.
결론
이 코드는 WPF 애플리케이션에서 소켓을 통해 물류 라벨 정보를 전송하고, 양방향으로 데이터를 주고받을 수 있도록 설계되었습니다. 인터럽트 신호를 처리하는 로직도 포함되어 있으며, 모든 동작에 대해 상세한 한글 주석을 추가했습니다