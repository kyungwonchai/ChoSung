using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace BlinkingTaskbarButton
{
    public partial class Form1 : Form
    {
        private const int WM_SYSCOMMAND = 0x0112;
        private const int SC_MINIMIZE = 0xF020;
        private const int SC_RESTORE = 0xF120;

        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        private static extern bool FlashWindowEx(ref FLASHWINFO pwfi);

        [StructLayout(LayoutKind.Sequential)]
        private struct FLASHWINFO
        {
            public uint cbSize;
            public IntPtr hwnd;
            public uint dwFlags;
            public uint uCount;
            public uint dwTimeout;
        }

        private bool isBlinking;
        private IntPtr handle;
        private Color[] colors = { Color.Blue, Color.SkyBlue };
        private int colorIndex = 0;

        public Form1()
        {
            InitializeComponent();
        }

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);

            // 폼 로드 시 작업 표시줄 버튼 깜박임 시작
            StartBlinking();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            base.OnFormClosing(e);

            // 폼 닫힐 때 작업 표시줄 버튼 깜박임 중지
            StopBlinking();
        }

        private void StartBlinking()
        {
            isBlinking = true;
            handle = GetForegroundWindow();

            // 백그라운드 스레드를 사용하여 깜박이는 작업 수행
            Thread blinkThread = new Thread(BlinkingThread);
            blinkThread.IsBackground = true;
            blinkThread.Start();
        }

        private void StopBlinking()
        {
            isBlinking = false;
        }

        private void BlinkingThread()
        {
            while (isBlinking)
            {
                // 작업 표시줄 버튼을 깜박이게 설정
                FLASHWINFO flashInfo = new FLASHWINFO();
                flashInfo.cbSize = Convert.ToUInt32(Marshal.SizeOf(flashInfo));
                flashInfo.hwnd = handle;
                flashInfo.dwFlags = 0x00000003; // 작업 표시줄 버튼과 윈도우를 깜박이게 함
                flashInfo.uCount = 1; // 한 번 깜박임
                flashInfo.dwTimeout = 0;

                FlashWindowEx(ref flashInfo);

                ToggleColor(); // 색상 토글

                Thread.Sleep(700); // 0.7초 대기
            }
        }

        private void ToggleColor()
        {
            colorIndex = (colorIndex + 1) % colors.Length;
            Color color = colors[colorIndex];

            SetTaskbarButtonColor(handle, color);
        }

        private void SetTaskbarButtonColor(IntPtr handle, Color color)
        {
            // 작업 표시줄 버튼의 색상 변경 작업을 수행
            // 해당 작업은 Windows API를 사용하여 구현합니다.
            var taskbarButton = TaskbarManager.Instance.GetTaskbarButton(handle);
            taskbarButton.SetOverlayIcon(null, "Description");

            var taskbarList = (ITaskbarList)new CTaskbarList();
            taskbarList.HrInit();
            taskbarList.SetOverlayIcon(handle, IntPtr.Zero, null);

            var taskbarList3 = (ITaskbarList3)taskbarList;
            taskbarList3.SetOverlayIcon(handle, IntPtr.Zero, null);
            taskbarList3.SetOverlayIcon(handle, IconFromImage(color), null);
        }

        private Icon IconFromImage(Color color)
        {
            Bitmap bmp = new Bitmap(16, 16);

            using (Graphics g = Graphics.FromImage(bmp))
            {
                using (SolidBrush brush = new SolidBrush(color))
                {
                    g.FillRectangle(brush, 0, 0, 16, 16);
                }
            }

            return Icon.FromHandle(bmp.GetHicon());
        }
    }

    public interface ITaskbarList
    {
        void HrInit();
        void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    }

    public interface ITaskbarList3 : ITaskbarList
    {
        void SetOverlayIcon(IntPtr hwnd, IntPtr hIcon, string pszDescription);
    }

    [ComImport]
    [Guid("56FDF342-FD6D-11D0-958A-006097C9A090")]
    [ClassInterface(ClassInterfaceType.None)]
    public class CTaskbarList { }
}
