작성하겠습니다.

먼저 모델 학습 파일을 만들어 보겠습니다.
python
Copy code
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel
import pickle

# MSSQL로 부터 데이터 가져오기
# 데이터 로딩 코드는 당신의 데이터베이스 설정에 따라 다르겠지만,
# 일단 pandas dataframe 형태로 data라는 변수에 로딩되었다고 가정합니다.

data = pd.read_csv('your_data.csv') # your_data.csv는 실제 데이터셋 파일명으로 대체해야합니다.

# tf-idf 벡터화
tfidf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0)
tfidf_matrix = tfidf.fit_transform(data['part_code'])

# 학습된 모델과 벡터화된 데이터 저장
pickle.dump(tfidf, open("tfidf.pkl", "wb"))
pickle.dump(tfidf_matrix, open("tfidf_matrix.pkl", "wb"))
이제 사용자의 입력에 가장 유사한 부품코드를 찾아주는 코드를 작성하겠습니다.
python
Copy code
import pandas as pd
from sklearn.metrics.pairwise import linear_kernel
import pickle

# 학습된 모델과 벡터화된 데이터 불러오기
tfidf = pickle.load(open("tfidf.pkl", "rb"))
tfidf_matrix = pickle.load(open("tfidf_matrix.pkl", "rb"))

def find_similar_parts(input_str, top_n=10):
    # 입력 문자열을 tf-idf 벡터로 변환
    input_vec = tfidf.transform([input_str])

    # 입력 벡터와 데이터셋의 벡터 간 코사인 유사도 계산
    cosine_similarities = linear_kernel(input_vec, tfidf_matrix).flatten()

    # 유사도가 가장 높은 부품코드의 인덱스를 가져옴
    related_docs_indices = cosine_similarities.argsort()[:-top_n:-1]

    # 유사한 부품코드 목록 반환
    return data['part_code'].iloc[related_docs_indices].tolist()

# 사용 예시
print(find_similar_parts('user_input')) # 'user_input'은 실제 사용자 입력 문자열로 대체해야합니다.
이 두 코드는 모델을 학습하고 저장하는 첫 번째 코드와, 저장된 모델을 불러와 사용자의 입력에 대해 가장 유사한 부품코