지 오류를 확인했습니다.

MainViewModel.cs 오류: LoadMasterDataAsync 메서드 내에서 MasterDataVM.LoadAllMasterData()를 호출하는데, MasterDataViewModel에는 LoadAllMasterDataAsync()라는 비동기 메서드가 있습니다. 따라서 await를 사용하여 비동기 메서드를 호출하도록 수정해야 합니다.
MainWindow.xaml 오류: DevExpress의 GridControl 자체에는 IsReadOnly 속성이 직접적으로 없습니다. 읽기 전용 동작은 보통 GridControl.View (여기서는 TableView)의 AllowEditing 속성을 False로 설정하거나, 개별 GridColumn의 ReadOnly 또는 AllowEditing 속성을 설정하여 제어합니다. 로그 탭의 그리드는 전체가 읽기 전용이어야 하므로, 해당 TableView의 AllowEditing 속성을 False로 설정하는 것이 올바른 방법입니다. (이전 코드에 이미 AllowEditing="False"가 있었는지 확인하고, GridControl 태그에 불필요하게 추가된 IsReadOnly가 있다면 제거합니다.)
오류가 발생한 두 파일(MainViewModel.cs, MainWindow.xaml)의 수정된 전체 코드를 여기에 바로 작성해 드리겠습니다.

1. ViewModels/MainViewModel.cs (수정)

LoadMasterDataAsync 메서드 내부의 MasterDataVM?.LoadAllMasterData(); 호출을 await MasterDataVM?.LoadAllMasterDataAsync();로 수정합니다.

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 사용
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security; // SecureString 사용
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices; // SecureString 변환용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel 클래스 (.NET Framework 4.8 버전 - 기능 추가)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";

        // --- 마스터 키 관련 ---
        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;

        // --- 마스터 데이터 목록 (ComboBox용) ---
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        // --- 자식 ViewModel 인스턴스 ---
        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }


        #region Public Properties

        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }

        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }

        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }

        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }

        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                 MessageBox.Show($"데이터베이스 컨텍스트 생성 중 오류 발생:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "데이터베이스 연결 오류!";
                 return;
            }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            // 자식 ViewModel 생성 시 DbContext 전달
            MasterDataVM = new MasterDataViewModel(_context);
            LogVM = new LogViewModel(_context);

            // Command 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());

            // 생성 시 데이터 로드
            _ = LoadInitialDataAsync();
        }

        /// <summary>
        /// 초기 데이터 (사물함 배정 목록 및 마스터 데이터 목록) 로드
        /// </summary>
        private async Task LoadInitialDataAsync()
        {
            await LoadAssignmentsAsync();
            await LoadMasterDataAsync(); // 마스터 데이터 로드 호출
        }

        /// <summary>
        /// 사물함 배정 목록 로드
        /// </summary>
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleDataAccessException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 (콤보박스용) 로드 및 MasterDataViewModel 갱신
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "마스터 데이터 로딩 중...";
            try
            {
                // 각 마스터 데이터 로드 및 ObservableCollection 업데이트
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync());
                StatusBarText = "마스터 데이터 로드 완료.";

                // *** 수정된 부분: MasterDataViewModel의 비동기 로드 메서드 호출 ***
                if (MasterDataVM != null)
                {
                    await MasterDataVM.LoadAllMasterDataAsync(); // 비동기 메서드 호출
                }
            }
            catch (Exception ex) { HandleDataAccessException("마스터 데이터 로딩", ex); }
        }


        /// <summary>
        /// 마스터 키 비밀번호 확인
        /// </summary>
        private void CheckMasterPassword(object parameter)
        {
            try
            {
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey))
                {
                    MessageBox.Show("설정 파일(App.config)에 마스터 키가 정의되지 않았습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);

                if (plainPassword == storedMasterKey)
                {
                    IsMasterModeEnabled = true;
                    StatusBarText = "마스터 관리자 모드가 활성화되었습니다.";
                    MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    IsMasterModeEnabled = false;
                    MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"마스터 키 확인 중 오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // --- 기존 SaveChangesAsync, AddNewLocker, DeleteSelectedAsync, ClearSelectedAssignment 등 ---
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            try
            {
                 var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);
                 if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); return; }
                foreach(var entry in changedEntries) { entry.Entity.Administrator = _currentAdmin; }
                int changedCount = await _context.SaveChangesAsync(); // 로그 기록은 DbContext에서 처리
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
            catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
        }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries)
        {
            if (_context == null) return;
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break;
                    case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break;
                    case EntityState.Deleted: entry.State = EntityState.Unchanged; break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }
        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 저장 필요.";
        }
        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;
            if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 사물함 정보를 정말 삭제하시겠습니까?", "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                StatusBarText = "삭제 중...";
                try
                {
                    var assignmentToDelete = SelectedAssignment;
                    var entry = _context.Entry(assignmentToDelete);
                    if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); }
                     _context.LockerAssignments.Remove(assignmentToDelete);
                    int changedCount = await _context.SaveChangesAsync();
                    LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null;
                    StatusBarText = $"성공적으로 {changedCount}개의 레코드를 삭제했습니다.";
                }
                catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); await LoadAssignmentsAsync(); }
                catch (Exception ex) { HandleGenericException("삭제", ex); await LoadAssignmentsAsync(); }
            }
        }
        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;
            SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null;
            _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin;
            StatusBarText = "배정 해제됨. 저장 필요.";
        }
        // --- 기존 메서드 끝 ---

        /// <summary>
        /// 데이터 접근 중 발생하는 일반 예외 처리
        /// </summary>
        private void HandleGenericException(string operation, Exception ex)
        {
            StatusBarText = $"{operation} 중 오류 발생: {ex.Message}";
            MessageBox.Show($"{operation} 중 예기치 않은 오류가 발생했습니다:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }
         /// <summary>
        /// 데이터베이스 업데이트 예외 처리
        /// </summary>
        private void HandleDbUpdateException(DbUpdateException dbEx)
        {
            var innerExceptionMessage = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message;
            StatusBarText = $"데이터 저장/삭제 오류: {innerExceptionMessage}";
            MessageBox.Show($"데이터베이스 작업 중 오류가 발생했습니다:\n{innerExceptionMessage}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error);
             // 오류 발생 엔티티 상태 복원 시도
            try {
                foreach(var entry in dbEx.Entries) { entry.Reload(); } // DB 값으로 되돌리기
            } catch { /* Reload 실패 시 무시 */ }
        }

        /// <summary>
        /// SecureString을 일반 string으로 변환 (메모리 보안 주의)
        /// </summary>
        private string ConvertToUnsecureString(SecureString securePassword)
        {
            if (securePassword == null) return string.Empty;
            IntPtr unmanagedString = IntPtr.Zero;
            try
            {
                unmanagedString = Marshal.SecureStringToGlobalAllocUnicode(securePassword);
                return Marshal.PtrToStringUni(unmanagedString);
            }
            finally { Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString); }
        }


        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
 1 2. Views/MainWindow.xaml (수정)   
1.
github.com
github.com

로그 탭의 GridControl에서 IsReadOnly="True" 속성을 제거합니다. 해당 TableView에는 이미 AllowEditing="False"가 설정되어 있으므로 읽기 전용으로 동작합니다.

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <Style x:Key="AlignCenterCellStyle" TargetType="dxe:TextEditSettings"> <Setter Property="HorizontalContentAlignment" Value="Center"/> </Style>
        <Style x:Key="AlignCenterGridCellStyle" TargetType="dxg:CellContentPresenter"> <Setter Property="HorizontalAlignment" Value="Center"/> </Style>
        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
        <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal">
                    <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}" ToolTip="전체 데이터(사물함, 마스터)를 새로고침합니다."/>
                    <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}" ToolTip="현재 탭의 변경 내용을 데이터베이스에 저장합니다."/>
                </StackPanel>
            </Border>
        </DockPanel>

        <TabControl Grid.Row="1" Margin="5">
            <TabItem Header="사물함 관리">
                <Grid>
                    <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                    <Border Grid.Row="0" Background="WhiteSmoke" Padding="3">
                        <StackPanel Orientation="Horizontal">
                            <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}"/>
                            <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}"/>
                            <Button Content="🧹 배정 해제" Margin="3" Command="{Binding ClearAssignmentCommand}"/>
                        </StackPanel>
                    </Border>
                    <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}">
                        <dxg:GridControl.View>
                            <dxg:TableView AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True" NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None" ShowIndicator="True" ShowSearchPanelMode="Always">
                                <dxg:TableView.RowCellMenuCustomizations>
                                     <dxb:BarButtonItem Content="선택 항목 배정 해제" Command="{Binding View.DataContext.ClearAssignmentCommand}" Glyph="{dx:DXImage Svg/Actions/DeleteList.svg}"/>
                                     <dxb:BarItemSeparator/>
                                     <dxb:BarButtonItem Content="선택 행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/>
                                </dxg:TableView.RowCellMenuCustomizations>
                            </dxg:TableView>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                            <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                            <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                            <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>

            <TabItem Header="변경 로그" DataContext="{Binding LogVM}">
                 <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>
                     <Button Grid.Row="0" Content="🔄 로그 새로고침" Command="{Binding LoadLogsCommand}" HorizontalAlignment="Left" Margin="5"/>
                     <dxg:GridControl Grid.Row="1" ItemsSource="{Binding AuditLogs}" AutoGenerateColumns="None" SelectionMode="Row">
                         <dxg:GridControl.View>
                             <dxg:TableView AllowPerPixelScrolling="True" AllowEditing="False" ShowGroupPanel="False" ShowAutoFilterRow="True"/>
                         </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="Timestamp" Header="시간" Width="150" SortOrder="Descending" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                             <dxg:GridColumn FieldName="UserName" Header="사용자" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="Action" Header="작업" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="TableName" Header="테이블" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="RecordId" Header="레코드 ID" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource AlignCenterGridCellStyle}"/>
                             <dxg:GridColumn FieldName="AffectedColumns" Header="변경 컬럼" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="OldValues" Header="변경 전 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                             <dxg:GridColumn FieldName="NewValues" Header="변경 후 값" Width="200" HeaderStyle="{StaticResource LightBlueHeaderStyle}"/>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                     <StatusBar Grid.Row="2" Background="LightGray"> <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem> </StatusBar>
                 </Grid>
            </TabItem>

            <TabItem Header="마스터 데이터 관리" DataContext="{Binding MasterDataVM}"
                     Visibility="{Binding DataContext.IsMasterModeEnabled, RelativeSource={RelativeSource AncestorType={dx:ThemedWindow}}, FallbackValue=Collapsed}">
                     <Grid>
                     <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
                     <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="5">
                         <Button Content="💾 마스터 데이터 저장" Command="{Binding SaveChangesCommand}" Margin="3"/>
                         <Button Content="🔄 마스터 데이터 새로고침" Command="{Binding LoadAllMasterDataCommand}" Margin="3"/>
                         <TextBlock Text="{Binding StatusMessage}" Margin="10,0,0,0" VerticalAlignment="Center" Foreground="Gray"/>
                     </StackPanel>
                     <dxlc:LayoutControl Grid.Row="1" Orientation="Vertical">
                         <dxlc:LayoutGroup Header="사물함 종류" View="GroupBox" Orientation="Vertical">
                             <StackPanel Orientation="Horizontal" Margin="0,0,0,5">
                                 <Button Content="종류 추가" Command="{Binding AddItemCommand}" CommandParameter="LockerType" Margin="0,0,5,0"/>
                                 <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" />
                                 </StackPanel>
                             <dxg:GridControl ItemsSource="{Binding LockerTypes}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200">
                                 <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View>
                                 <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="종류 이름"/> </dxg:GridControl.Columns>
                             </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="층" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="층 추가" Command="{Binding AddItemCommand}" CommandParameter="Floor" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel>
                              <dxg:GridControl ItemsSource="{Binding Floors}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="층 이름"/> </dxg:GridControl.Columns> </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="구역" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="구역 추가" Command="{Binding AddItemCommand}" CommandParameter="Zone" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel>
                              <dxg:GridControl ItemsSource="{Binding Zones}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="구역 이름"/> </dxg:GridControl.Columns> </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="소파트" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="소파트 추가" Command="{Binding AddItemCommand}" CommandParameter="SubPart" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel>
                              <dxg:GridControl ItemsSource="{Binding SubParts}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="소파트 이름"/> </dxg:GridControl.Columns> </dxg:GridControl>
                         </dxlc:LayoutGroup>
                         <dxlc:LayoutGroup Header="관리자" View="GroupBox" Orientation="Vertical">
                              <StackPanel Orientation="Horizontal" Margin="0,0,0,5"> <Button Content="관리자 추가" Command="{Binding AddItemCommand}" CommandParameter="Administrator" Margin="0,0,5,0"/> <Button Content="선택 삭제" Command="{Binding DeleteItemCommand}" /> </StackPanel>
                              <dxg:GridControl ItemsSource="{Binding Administrators}" SelectedItem="{Binding SelectedItem, Mode=TwoWay}" Height="150" MaxHeight="200"> <dxg:GridControl.View><dxg:TableView AllowEditing="True" NewItemRowPosition="None"/></dxg:GridControl.View> <dxg:GridControl.Columns> <dxg:GridColumn FieldName="Name" Header="관리자 이름"/> </dxg:GridControl.Columns> </dxg:GridControl>
                         </dxlc:LayoutGroup>
                     </dxlc:LayoutControl>
                 </Grid>
            </TabItem>

        </TabControl>

        <StatusBar Grid.Row="2" Background="LightGray">
            <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem>
        </StatusBar>
    </Grid>
