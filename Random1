// MemoAppMGSP/Services/Implementations/ServerNotificationService.cs
using MemoAppMGSP.SharedModels;         // 공유 모델 사용 (Memo, MemoEventArgs)
using MemoAppMGSP.Services.Interfaces; // INotificationService, IAuthService 인터페이스
using Microsoft.AspNetCore.SignalR.Client; // Microsoft.AspNetCore.SignalR.Client NuGet 패키지 필요
using System;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows;                     // Application.Current.Dispatcher 사용

namespace MemoAppMGSP.Services.Implementations // 클라이언트 프로젝트 네임스페이스
{
    /// <summary>
    /// SignalR을 사용하여 서버로부터 실시간 알림을 수신하는 서비스 구현체입니다.
    /// INotificationService 인터페이스를 구현합니다. (.NET Framework 4.8 호환)
    /// </summary>
    public class ServerNotificationService : INotificationService, IDisposable // 클래스 이름 변경
    {
        private HubConnection _hubConnection;
        private readonly string _hubUrl; // SignalR Hub URL (설정 또는 생성자 주입 필요)
        private bool _isStarted = false;
        private readonly IAuthService _authService; // 현재 사용자 정보?取 위해 주입

        /// <summary>
        /// 새 메모 수신 시 발생하는 이벤트입니다.
        /// </summary>
        public event EventHandler<MemoEventArgs> MemoReceived;

        /// <summary>
        /// ServerNotificationService의 새 인스턴스를 초기화합니다.
        /// </summary>
        /// <param name="hubUrl">연결할 SignalR Hub의 URL</param>
        /// <param name="authService">현재 사용자 정보 제공 서비스</param>
        public ServerNotificationService(string hubUrl, IAuthService authService) // 생성자 이름 변경
        {
            _hubUrl = hubUrl ?? throw new ArgumentNullException(nameof(hubUrl));
            _authService = authService ?? throw new ArgumentNullException(nameof(authService));

            // HubConnection 빌드 및 설정
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl, options =>
                {
                    // TODO: 인증 토큰 필요 시 설정 (예: 로그인 후 토큰 관리 필요)
                    // options.AccessTokenProvider = () => Task.FromResult(_authService.GetAuthToken());
                })
                .WithAutomaticReconnect()
                .Build();

            // 서버 -> 클라이언트 호출 메서드("ReceiveMemo") 핸들러 등록
            _hubConnection.On<Memo>("ReceiveMemo", (receivedMemo) =>
            {
                if (receivedMemo == null) return;
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Memo received - Title: {receivedMemo.Title}");
                OnMemoReceived(new MemoEventArgs(receivedMemo)); // 이벤트 발생
            });

            // 연결 상태 변경 이벤트 핸들러 등록
            _hubConnection.Closed += HubConnection_Closed;
            _hubConnection.Reconnecting += HubConnection_Reconnecting;
            _hubConnection.Reconnected += HubConnection_Reconnected;
        }

        /// <summary>
        /// SignalR Hub 연결을 시작하고 연결 성공 시 서버에 사용자를 등록합니다.
        /// </summary>
        public async Task StartAsync()
        {
            if (_isStarted && _hubConnection.State != HubConnectionState.Disconnected)
            {
                Debug.WriteLine("SignalR Client (ServerNotificationService): Already started or starting.");
                return;
            }

            try
            {
                Debug.WriteLine("SignalR Client (ServerNotificationService): Starting connection...");
                await _hubConnection.StartAsync();
                _isStarted = true;
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection successful. State: {_hubConnection.State}");

                // 연결 성공 후 사용자 등록 시도
                await RegisterUserWithServer();
            }
            catch (Exception ex)
            {
                _isStarted = false;
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection failed - {ex.Message}");
                // TODO: 연결 실패 UI 피드백
            }
        }

        /// <summary>
        /// SignalR Hub 연결을 중지합니다.
        /// </summary>
        public async Task StopAsync()
        {
            if (!_isStarted || _hubConnection == null || _hubConnection.State == HubConnectionState.Disconnected)
            {
                Debug.WriteLine("SignalR Client (ServerNotificationService): Already stopped or not started.");
                return;
            }
            try
            {
                Debug.WriteLine("SignalR Client (ServerNotificationService): Stopping connection...");
                await _hubConnection.StopAsync();
                _isStarted = false;
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection stopped. State: {_hubConnection.State}");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Error stopping connection - {ex.Message}");
            }
        }

        /// <summary>
        /// 서버 Hub에 현재 사용자를 등록합니다.
        /// </summary>
        private async Task RegisterUserWithServer()
        {
            var currentUser = _authService.GetCurrentUser();
            if (currentUser != null && _hubConnection.State == HubConnectionState.Connected)
            {
                try
                {
                    // 서버 Hub의 "RegisterUser" 메서드를 호출하고 현재 사용자 ID 전달
                    await _hubConnection.InvokeAsync("RegisterUser", currentUser.Id);
                    Debug.WriteLine($"SignalR Client (ServerNotificationService): User {currentUser.Id} registration invoked.");
                }
                catch (Exception regEx)
                {
                    Debug.WriteLine($"SignalR Client (ServerNotificationService): Failed to invoke RegisterUser - {regEx.Message}");
                    // TODO: 사용자 등록 실패 처리 (재시도 로직 또는 UI 피드백)
                }
            }
            else if (currentUser == null)
            {
                Debug.WriteLine($"SignalR Client (ServerNotificationService): Cannot register user, current user is null.");
                // TODO: 로그인되지 않은 상태 처리
            }
        }


        /// <summary>
        /// MemoReceived 이벤트를 발생시킵니다. (UI 스레드 고려)
        /// </summary>
        protected virtual void OnMemoReceived(MemoEventArgs e)
        {
            EventHandler<MemoEventArgs> handler = MemoReceived;
            if (handler != null)
            {
                // UI 스레드가 아닌 경우 UI 스레드에서 실행하도록 처리
                if (Application.Current != null && !Application.Current.Dispatcher.CheckAccess())
                {
                    Application.Current.Dispatcher.Invoke(() => handler.Invoke(this, e));
                }
                else
                {
                    handler.Invoke(this, e);
                }
            }
        }

        // --- Connection Lifecycle Event Handlers ---
        private Task HubConnection_Reconnected(string connectionId)
        {
            Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection reconnected. ConnectionId: {connectionId}");
            // 재연결 시 사용자 재등록
            _ = RegisterUserWithServer(); // 백그라운드에서 실행되도록 Task 반환 무시 (또는 Task.Run 사용)
            return Task.CompletedTask;
        }

        private Task HubConnection_Reconnecting(Exception error)
        {
            Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection reconnecting due to error: {error?.Message}");
            return Task.CompletedTask;
        }

        private Task HubConnection_Closed(Exception error)
        {
            _isStarted = false;
            Debug.WriteLine($"SignalR Client (ServerNotificationService): Connection closed. Error (if any): {error?.Message}");
            // TODO: 연결 종료 시 UI 피드백 등
            return Task.CompletedTask;
        }


        // --- IDisposable Implementation ---
        public void Dispose()
        {
            _ = StopAsync();
            if (_hubConnection != null)
            {
                _hubConnection.Closed -= HubConnection_Closed;
                _hubConnection.Reconnecting -= HubConnection_Reconnecting;
                _hubConnection.Reconnected -= HubConnection_Reconnected;
                // HubConnection Dispose 처리 (비동기 방식 권장)
                Task.Run(async () => await _hubConnection.DisposeAsync()).ConfigureAwait(false);
            }
            GC.SuppressFinalize(this);
        }
    }
}