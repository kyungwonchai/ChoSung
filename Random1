습니다. GridControl의 선택 변경 이벤트를 처리하기 위해 TableView의 SelectionChanged 이벤트를 사용하도록 수정하겠습니다.

MainWindow.xaml
이 부분은 그대로 두어도 됩니다.

xml
코드 복사
<dx:ThemedWindow x:Class="QRMAKER.MainWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                 xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                 mc:Ignorable="d"
                 Title="MainWindow" Height="600" Width="800"
                 ThemeName="Office2019Color"
                 Closing="Window_Closing"
                 SizeChanged="Window_SizeChanged">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="제목" FontSize="24" HorizontalAlignment="Center" Margin="10" Grid.Row="0"/>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- GridControl -->
            <dxg:GridControl Name="gridControl" AutoGenerateColumns="None">
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="No" Header="No" ReadOnly="True"/>
                    <dxg:GridColumn FieldName="Magazine" Header="Magazine" ReadOnly="True"/>
                </dxg:GridControl.Columns>
                <dxg:GridControl.View>
                    <dxg:TableView Name="tableView" AutoWidth="True" SelectionChanged="TableView_SelectionChanged"/>
                </dxg:GridControl.View>
            </dxg:GridControl>

            <!-- QR 코드 영역 -->
            <ScrollViewer Grid.Column="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                <WrapPanel Name="qrCodePanel" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </ScrollViewer>
        </Grid>

        <!-- 슬라이더 설정 -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10" Grid.Row="2">
            <Button Content="클립보드에서 데이터 가져오기" Click="LoadFromClipboard"/>
            <TextBlock Text="QR 코드 크기: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="sizeSlider" Minimum="50" Maximum="200" Width="100" ValueChanged="SizeSlider_ValueChanged"/>
            <TextBox Name="sizeTextBox" Width="50" TextChanged="SizeTextBox_TextChanged" VerticalAlignment="Center"/>
            <TextBlock Text="QR 코드 간격: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="spacingSlider" Minimum="10" Maximum="50" Width="100" ValueChanged="SpacingSlider_ValueChanged"/>
            <TextBox Name="spacingTextBox" Width="50" TextChanged="SpacingTextBox_TextChanged" VerticalAlignment="Center"/>
        </StackPanel>
    </Grid>
</dx:ThemedWindow>
MainWindow.xaml.cs
TableView의 SelectionChanged 이벤트를 사용하여 QR 코드의 배경색을 변경하는 기능을 추가합니다.

csharp
코드 복사
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ZXing;
using IniParser;
using IniParser.Model;
using OfficeOpenXml; // 엑셀 내보내기 위해 추가

namespace QRMAKER
{
    public partial class MainWindow : ThemedWindow
    {
        private List<Item> _items;
        private Dictionary<string, StackPanel> _qrCodePanels;
        private string _settingsFile = "settings.ini";

        public MainWindow()
        {
            InitializeComponent();
            _items = new List<Item>();
            _qrCodePanels = new Dictionary<string, StackPanel>();
            LoadSettings(); // 설정 값을 로드하는 메서드 호출
        }

        private void LoadSettings()
        {
            if (File.Exists(_settingsFile))
            {
                var parser = new FileIniDataParser();
                IniData data = parser.ReadFile(_settingsFile);
                if (data["Settings"].ContainsKey("QRCodeSize"))
                {
                    sizeSlider.Value = double.Parse(data["Settings"]["QRCodeSize"]);
                    sizeTextBox.Text = data["Settings"]["QRCodeSize"];
                }
                if (data["Settings"].ContainsKey("QRCodeSpacing"))
                {
                    spacingSlider.Value = double.Parse(data["Settings"]["QRCodeSpacing"]);
                    spacingTextBox.Text = data["Settings"]["QRCodeSpacing"];
                }
            }
        }

        private void SizeSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                sizeTextBox.Text = sizeSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Size slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SpacingSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                spacingTextBox.Text = spacingSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Spacing slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SizeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(sizeTextBox.Text, out double value))
            {
                sizeSlider.Value = value;
            }
        }

        private void SpacingTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(spacingTextBox.Text, out double value))
            {
                spacingSlider.Value = value;
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (_items != null && _items.Count > 0)
            {
                GenerateQRCodes();
            }
        }

        private void GenerateQRCodes()
        {
            try
            {
                qrCodePanel.Children.Clear();
                double qrCodeWidth = sizeSlider.Value;
                double qrCodeHeight = sizeSlider.Value;
                double spacing = spacingSlider.Value;

                foreach (var item in _items)
                {
                    try
                    {
                        var qrCode = GenerateQRCode(item.Magazine);
                        var image = new System.Windows.Controls.Image
                        {
                            Source = BitmapToImageSource(qrCode),
                            Width = qrCodeWidth,
                            Height = qrCodeHeight,
                            Margin = new Thickness(spacing)
                        };
                        var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };
                        var textBlock = new TextBlock
                        {
                            Text = item.Magazine,
                            Foreground = System.Windows.Media.Brushes.Blue,
                            HorizontalAlignment = HorizontalAlignment.Center
                        };
                        stackPanel.Children.Add(image);
                        stackPanel.Children.Add(textBlock);

                        image.MouseLeftButtonDown += (s, e) =>
                        {
                            DeselectAllRows();
                            int index = _items.IndexOf(item);
                            tableView.FocusedRowHandle = index;
                            gridControl.View.FocusedRowHandle = index;
                            HighlightQRCode(item.Magazine);
                        };

                        qrCodePanel.Children.Add(stackPanel);
                        _qrCodePanels[item.Magazine] = stackPanel;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"QR Code generation error for item '{item.Magazine}': {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"QR Code generation error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Bitmap GenerateQRCode(string text)
        {
            try
            {
                BarcodeWriter writer = new BarcodeWriter
                {
                    Format = BarcodeFormat.QR_CODE,
                    Options = new ZXing.Common.EncodingOptions
                    {
                        Height = 200,
                        Width = 200
                    }
                };
                return writer.Write(text);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error generating QR Code: {ex.Message}");
            }
        }

        private BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            try
            {
                using (var memory = new System.IO.MemoryStream())
                {
                    bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
                    memory.Position = 0;
                    var bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.StreamSource = memory;
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    bitmapImage.EndInit();
                    return bitmapImage;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error converting Bitmap to ImageSource: {ex.Message}");
            }
        }

        private bool Is