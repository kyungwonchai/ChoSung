합니다. 누락된 부분이 없도록 ForwardDataToTargetPorts 함수와 관련된 모든 기능을 제대로 포함한 코드를 제공하겠습니다. 특히, 타겟 포트에 데이터를 보내는 부분에서 필요한 함수를 포함하여 수정된 코드를 제공하겠습니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;
        private SocketServer socketServer;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            settingsManager = SettingsManager.Instance;
            serialPortManager = SerialPortManager.Instance;
            socketServer = SocketServer.Instance;

            // IP 주소 표시 및 QR 코드 생성
            string ipAddress = GetLocalIPAddress();
            IpAddressTextBlock.Text = ipAddress;

            // 기본 선택 값 설정
            InitializeComboBoxes();

            // 이전에 설정된 포트 값 불러오기
            LoadSavedSettings();

            // 포트 목록 새로고침
            RefreshPorts();

            // 소켓 서버 시작 (이전에 저장된 포트 값으로)
            string savedPort = settingsManager.GetSetting("Port");
            if (!string.IsNullOrEmpty(savedPort))
            {
                StartSocketServer(int.Parse(savedPort));
            }
        }

        private void InitializeComboBoxes()
        {
            // 기본 BaudRate 값 설정
            ScannerBaudRateComboBox.ItemsSource = new string[] { "9600", "19200", "38400", "57600", "115200" };
            ScannerBaudRateComboBox.SelectedIndex = 0;  // 기본값 설정

            // 기본 Parity 값 설정
            ScannerParityComboBox.ItemsSource = Enum.GetNames(typeof(Parity));
            ScannerParityComboBox.SelectedIndex = 0;  // 기본값 설정

            // 기본 DataBits 값 설정
            ScannerDataBitsComboBox.ItemsSource = new string[] { "5", "6", "7", "8" };
            ScannerDataBitsComboBox.SelectedIndex = 3;  // 기본값 설정 (8)

            // 기본 StopBits 값 설정
            ScannerStopBitsComboBox.ItemsSource = Enum.GetNames(typeof(StopBits));
            ScannerStopBitsComboBox.SelectedIndex = 1;  // 기본값 설정 (One)
        }

        private void LoadSavedSettings()
        {
            // 스캐너 포트 설정 로드
            ScannerPortComboBox.ItemsSource = SerialPort.GetPortNames();
            ScannerPortComboBox.SelectedItem = settingsManager.GetSetting("ScannerPort");
            ScannerBaudRateComboBox.SelectedItem = settingsManager.GetSetting("ScannerBaudRate") ?? "9600";
            ScannerParityComboBox.SelectedItem = settingsManager.GetSetting("ScannerParity") ?? "None";
            ScannerDataBitsComboBox.SelectedItem = settingsManager.GetSetting("ScannerDataBits") ?? "8";
            ScannerStopBitsComboBox.SelectedItem = settingsManager.GetSetting("ScannerStopBits") ?? "One";

            // 타겟 포트 설정 로드
            for (int i = 0; i < 5; i++)
            {
                var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                portControl?.LoadPortSettings(i + 1);
            }
        }

        private void SaveSettings()
        {
            // 스캐너 포트 설정 저장
            settingsManager.SaveSetting("ScannerPort", ScannerPortComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerBaudRate", ScannerBaudRateComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerParity", ScannerParityComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerDataBits", ScannerDataBitsComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerStopBits", ScannerStopBitsComboBox.SelectedItem?.ToString());

            // 타겟 포트 설정 저장 (PortConfigControl에서 이미 개별적으로 저장됨)
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                // 사용 가능한 포트 이름 가져오기
                string[] portNames = SerialPort.GetPortNames();

                // 스캐너 포트 콤보박스 갱신
                ScannerPortComboBox.ItemsSource = portNames;

                // 타겟 포트 콤보박스 갱신
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    portControl?.RefreshPortList(portNames);
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1"; // 기본 IP 설정

            try
            {
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
            }

            return localIP;
        }

        private void StartSocketServer(int port)
        {
            try
            {
                socketServer.Start(port);
                settingsManager.SaveSetting("Port", port.ToString());
                GenerateQRCode(IpAddressTextBlock.Text, port.ToString());
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 서버 시작 중 오류 발생: {ex.Message}");
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                string qrContent = $"{ipAddress}:{port}";
                var qrCodeImage = new QRCodeGenerator().GenerateQRCode(qrContent);
                QrCodeImage.Source = qrCodeImage;
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem == null) return;

                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                serialPortManager.OpenScannerPort(selectedPort, int.Parse(baudRate), 
                    (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), 
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                // 포트가 정상적으로 열리면 파란색, 열리지 않으면 빨간색으로 표시
                if (serialPortManager.ScannerPort.IsOpen)
                {
                    ScannerPortComboBox.Foreground = Brushes.Blue;
                    LogMessage($"스캐너 포트 {selectedPort}가 설정되었습니다.");
                    ForwardDataToTargetPorts();
                }
                else
                {
                    ScannerPortComboBox.Foreground = Brushes.Red;
                    LogMessage($"스캐너 포트 {selectedPort}를 열 수 없습니다.");
                }

                SaveSettings();
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {ScannerPortComboBox.SelectedItem} 접근 권한이 없습니다: {ex.Message}");
                ScannerPortComboBox.Foreground = Brushes.Red;
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {ScannerPortComboBox.SelectedItem}에서 I/O 오류 발생: {ex.Message}");
                ScannerPortComboBox.Foreground = Brushes.Red;
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
                ScannerPortComboBox.Foreground = Brushes.Red;
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
                ScannerPortComboBox.Foreground = Brushes.Red;
            }
        }

        private void ForwardDataToTargetPorts()
        {
            try
            {
                // 스캐너 포트에서 데이터를 읽어옴
                var data = serialPortManager.ReadScannerPortData();
                if (string.IsNullOrEmpty(data)) return;

                // 설정된 모든 타겟 포트로 데이터 전달
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl?.IsPortConfigured() == true)
                    {
                        string targetPortName = portControl.GetConfiguredPortName();
                        serialPortManager.SendDataToPort(targetPortName, data);
                        LogMessage($"데이터가 타겟 포트 {targetPortName}으로 전송되었습니다.");
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"데이터 전달 중 오류 발생: {ex.Message}");
            }
        }
    }
}
추가된/수정된 부분 설명:
ForwardDataToTargetPorts 함수:

이 함수는 스캐너 포트에서 데이터를 읽어와 설정된 모든 타겟 포트로 데이터를 전달합니다.
serialPortManager.ReadScannerPortData() 함수를 사용하여 스캐너 포트에서 데이터를 읽어옵니다.
serialPortManager.SendDataToPort(targetPortName, data) 함수를 사용하여 설정된 타겟 포트로 데이터를 전송합니다.
IsPortConfigured 및 GetConfiguredPortName:

PortConfigControl 클래스에서 해당 포트가 설정되어 있는지(IsPortConfigured)와, 설정된 포트의 이름을 반환하는(GetConfiguredPortName) 메서드가 필요합니다.
아래는 PortConfigControl의 필수 메서드들이 포함된 예시입니다:

PortConfigControl.cs (필요한 메서드 예시)
csharp
코드 복사
public class PortConfigControl : UserControl
{
    public string GetConfiguredPortName()
    {
        // 사용자가 선택한 포트 이름 반환
        return TargetPortComboBox.SelectedItem?.ToString();
    }

    public bool IsPortConfigured()
    {
        // 포트가 설정되어 있는지 여부 반환
        return !string.IsNullOrEmpty(GetConfiguredPortName());
    }

    public void LoadPortSettings(int index)
    {
        // 설정값을 로드하는 메서드
        // 이 메서드는 기존 코드에서 PortConfigControl을 사용하는 부분에 맞게 구현하세요.
    }

    public void RefreshPortList(string[] portNames)
    {
        // 포트 리스트 갱신
        TargetPortComboBox.ItemsSource = portNames;
    }
}
이제, 데이터가 설정된 모든 타겟 포트로 전달될 것입니다. 추가적인 수정이 필요하거나 질문이 있다면 언제든지 말씀해 주