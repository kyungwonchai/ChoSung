려면 다음 단계를 거칩니다.

    FileSystemWatcher를 사용하여 파일 변경 감지
    새로운 로그를 읽고 필터링
    필터링된 로그를 MS SQL에 INSERT
    DevExpress WinForms GridControl에 데이터 뿌리기

먼저, MS SQL 테이블 생성 스크립트입니다.

sql

CREATE TABLE LogTable (
    Id INT PRIMARY KEY IDENTITY(1,1),
    LogDate DATE,
    LogTime TIME,
    LogText NVARCHAR(255)
);

C# 코드 부분입니다:

csharp

using DevExpress.XtraGrid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text.RegularExpressions;

namespace YourNamespace
{
    class Program
    {
        private static long lastFilePosition = 0;
        static void Main()
        {
            // FileSystemWatcher 설정
            FileSystemWatcher watcher = new FileSystemWatcher(@"C:\a");
            watcher.Filter = "TimeOverCheck_*.log";
            watcher.Changed += OnChanged;

            // DevExpress GridControl 설정
            GridControl gridControl1 = new GridControl();
            gridControl1.DataSource = GetLogDataFromDatabase();

            watcher.EnableRaisingEvents = true;
            Console.ReadLine();
        }

        static void OnChanged(object source, FileSystemEventArgs e)
        {
            string filePath = e.FullPath;
            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                fs.Seek(lastFilePosition, SeekOrigin.Begin);
                using (StreamReader sr = new StreamReader(fs))
                {
                    string line;
                    while ((line = sr.ReadLine()) != null)
                    {
                        if (line.StartsWith("checkPhotoSensor"))
                        {
                            Regex regex = new Regex(@"(\d{4}-\d{2}-\d{2}) (\d{2}:\d{2}:\d{2}:\d{3}) (.*)");
                            Match match = regex.Match(line);
                            if (match.Success)
                            {
                                string logDate = match.Groups[1].Value;
                                string logTime = match.Groups[2].Value;
                                string logText = match.Groups[3].Value;
                                InsertIntoDatabase(logDate, logTime, logText);
                            }
                        }
                    }
                    lastFilePosition = fs.Position;
                }
            }
        }

        static void InsertIntoDatabase(string logDate, string logTime, string logText)
        {
            string connectionString = "Your Connection String Here";
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                using (SqlCommand cmd = new SqlCommand("INSERT INTO LogTable (LogDate, LogTime, LogText) VALUES (@logDate, @logTime, @logText)", conn))
                {
                    cmd.Parameters.AddWithValue("@logDate", logDate);
                    cmd.Parameters.AddWithValue("@logTime", logTime);
                    cmd.Parameters.AddWithValue("@logText", logText);
                    cmd.ExecuteNonQuery();
                }
            }
        }

        static DataTable GetLogDataFromDatabase()
        {
            DataTable dt = new DataTable();
            string connectionString = "Your Connection String Here";
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                using (SqlCommand cmd = new SqlCommand("SELECT * FROM LogTable", conn))
                {
                    SqlDataAdapter da = new SqlDataAdapter(cmd);
                    da.Fill(dt);
                }
            }
            return dt;
        }
    }
}

GridControl의 데이터 소스를 갱신하려면 적절한 이벤트나 타이머를 사용하여 gridControl1.DataSource = GetLogDataFromDa