정 화면이 나타나는 문제는 여러 가지 이유로 발생할 수 있습니다. 특히 카메라와 관련된 설정이 잘못되었거나, 권한이 제대로 설정되지 않은 경우 발생할 수 있습니다. 아래에 이러한 문제를 해결하기 위해 필요한 사항들을 확인하고 코드와 설정을 점검한 후 수정된 코드를 제시하겠습니다.

1. 권한 설정 확인
카메라를 사용하기 위해서는 AndroidManifest.xml에 카메라 권한을 선언해야 합니다. 이 선언이 올바르게 되어 있는지 확인하십시오.

xml
코드 복사
<uses-permission android:name="android.permission.CAMERA" />
또한, Android 6.0 (API 레벨 23) 이상에서는 런타임 권한 요청이 필요합니다. 아래의 코드를 사용하여 권한을 요청할 수 있습니다.

2. 런타임 권한 요청
kotlin
코드 복사
import android.Manifest
import android.content.pm.PackageManager
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView
    private val CAMERA_PERMISSION_REQUEST_CODE = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) 
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                this, 
                arrayOf(Manifest.permission.CAMERA), 
                CAMERA_PERMISSION_REQUEST_CODE
            )
        } else {
            setupBarcodeView()
        }
    }

    private fun setupBarcodeView() {
        barcodeView = findViewById(R.id.camera_preview)
        barcodeView.decodeContinuous(callback)
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, 
        permissions: Array<out String>, 
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == CAMERA_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                setupBarcodeView()
            } else {
                // 권한 거부 시 처리
            }
        }
    }

    // 나머지 코드...
}
3. 카메라 관련 설정
DecoratedBarcodeView를 사용할 때 초점 모드를 설정하여 실시간으로 바코드를 인식할 수 있도록 설정해야 합니다. 아래 코드를 참고하여 초점 모드를 자동으로 설정합니다.

kotlin
코드 복사
import com.journeyapps.barcodescanner.CameraSettings

private fun setupBarcodeView() {
    barcodeView = findViewById(R.id.camera_preview)
    
    val settings = barcodeView.barcodeView.cameraSettings
    settings.isAutoFocusEnabled = true  // 자동 초점 활성화
    barcodeView.barcodeView.cameraSettings = settings

    barcodeView.decodeContinuous(callback)
}
4. activity_main.xml 확인
XML 레이아웃 파일이 제대로 설정되어 있는지 확인합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.journeyapps.barcodescanner.DecoratedBarcodeView
        android:id="@+id/camera_preview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
5. 최종 코드
전체적인 코드를 다시 한 번 점검한 최종 코드는 다음과 같습니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import com.journeyapps.barcodescanner.CameraSettings
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView
    private val CAMERA_PERMISSION_REQUEST_CODE = 101

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.CAMERA),
                CAMERA_PERMISSION_REQUEST_CODE
            )
        } else {
            setupBarcodeView()
        }
    }

    private fun setupBarcodeView() {
        barcodeView = findViewById(R.id.camera_preview)
        
        // 카메라 설정: 자동 초점 활성화
        val settings = barcodeView.barcodeView.cameraSettings
        settings.isAutoFocusEnabled = true
        barcodeView.barcodeView.cameraSettings = settings

        barcodeView.decodeContinuous(callback)
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == CAMERA_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                setupBarcodeView()
            } else {
                // 권한 거부 시 처리
            }
        }
    }

    private val callback = object : BarcodeCallback {
        override fun barcodeResult(result: BarcodeResult) {
            if (result.text != null) {
                val scannedValue = result.text
                val codeType = result.barcodeFormat.toString()

                // 스캔된 데이터를 화면에 표시
                findViewById<TextView>(R.id.text_view_result).text = "Scanned: $scannedValue ($codeType)"

                // 데이터베이스에 저장
                saveToDatabase(codeType, scannedValue)
            }
        }

        override fun possibleResultPoints(resultPoints: List<ResultPoint>) {}
    }

    private fun saveToDatabase(codeType: String, codeValue: String) {
        val dbUrl = "jdbc:jtds:sqlserver://<Your_Server_IP>:1433/BarcodeQRData"
        val dbUser = "<Your_DB_Username>"
        val dbPassword = "<Your_DB_Password>"

        try {
            val connection: Connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)
            val statement: PreparedStatement = connection.prepareStatement(
                "INSERT INTO ScannedData (CodeType, CodeValue) VALUES (?, ?)"
            )
            statement.setString(1, codeType)
            statement.setString(2, codeValue)
            statement.executeUpdate()
            statement.close()
            connection.close()
        } catch (e: Exception) {
            Log.e("DatabaseError", "Failed to save data", e)
        }
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
    }
}
이제 이 코드를 사용하여 권한을 적절히 요청하고, 카메라가 자동 초점으로 실시간으로 작동하며 바코드와 QR 코드를 읽을 수 있도록 구현되었습니다. 카메라 권한을 수동으로 설정하거나 권한 요청이 성공했는지 확인해야 합