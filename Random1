# WPF 애플리케이션에서 모든 COM 포트와 사용 중인 포트를 확인하는 기능을 클래스로 구현하고, 이 클래스를 메인 페이지에서 도킹해서 사용하는 예제를 작성해드리겠습니다.

1. COMPortChecker 클래스
모든 기능을 하나의 클래스로 작성하고, 메인 윈도우에서 이 클래스를 사용합니다.

COMPortChecker.xaml
xml
코드 복사
<UserControl x:Class="COMPortCheckerApp.COMPortChecker"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="400">
    <Grid>
        <DataGrid Name="dataGrid" AutoGenerateColumns="True" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
        <Button Content="Refresh" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" Click="Refresh_Click"/>
    </Grid>
</UserControl>
COMPortChecker.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Management;
using System.Windows;
using System.Windows.Controls;

namespace COMPortCheckerApp
{
    public partial class COMPortChecker : UserControl
    {
        public COMPortChecker()
        {
            InitializeComponent();
            RefreshCOMPorts();
        }

        private void Refresh_Click(object sender, RoutedEventArgs e)
        {
            RefreshCOMPorts();
        }

        private void RefreshCOMPorts()
        {
            List<COMPortInfo> comPorts = GetAllCOMPorts();
            dataGrid.ItemsSource = comPorts;
        }

        public List<COMPortInfo> GetAllCOMPorts()
        {
            List<COMPortInfo> comPorts = new List<COMPortInfo>();

            using (var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_SerialPort"))
            {
                foreach (var port in searcher.Get())
                {
                    COMPortInfo comPortInfo = new COMPortInfo
                    {
                        Name = port["DeviceID"].ToString(),
                        Description = port["Caption"].ToString(),
                        Status = port["Status"].ToString(),
                        IsInUse = IsPortInUse(port["DeviceID"].ToString())
                    };
                    comPorts.Add(comPortInfo);
                }
            }

            return comPorts;
        }

        private string IsPortInUse(string portName)
        {
            var searcher = new ManagementObjectSearcher("SELECT * FROM Win32_Process");
            foreach (ManagementObject process in searcher.Get())
            {
                var processId = process["ProcessId"];
                var commandLine = process["CommandLine"];
                if (commandLine != null && commandLine.ToString().Contains(portName))
                {
                    return process["Name"].ToString();
                }
            }

            return "Available";
        }
    }

    public class COMPortInfo
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Status { get; set; }
        public string IsInUse { get; set; }
    }
}
2. MainWindow 클래스
메인 윈도우에서 COMPortChecker 클래스를 도킹해서 사용합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="COMPortCheckerApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:COMPortCheckerApp"
        Title="COM Port Checker" Height="350" Width="600">
    <DockPanel>
        <local:COMPortChecker Name="comPortChecker" />
    </DockPanel>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace COMPortCheckerApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }
    }
}
전체 프로젝트 구조
COMPortCheckerApp 프로젝트

MainWindow.xaml
MainWindow.xaml.cs
COMPortChecker.xaml
COMPortChecker.xaml.cs
패키지 참조

System.Management
결론
이렇게 하면 COM 포트를 확인하고, 사용 중인 포트를 체크하는 기능을 독립적인 클래스로 구현한 후, 메인 윈도우에서 도킹하여 사용할 수 있습니다. UserControl을 사용하여 COMPortChecker 클래스를 작성하고, MainWindow에서 이를 도킹하여 UI를 구성했습니다. 이 구조를 사용하면 다른 UserControl이나 기능을 쉽게 추가하고 유지보수할 수 있습