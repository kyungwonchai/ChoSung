// MGSPMonitorControl/ViewModels/MainViewModel.cs
// ... (다른 using 문 및 클래스 정의 시작) ...
namespace MGSPMonitorControl.ViewModels
{
    // ... (ApplicationMode Enum 정의) ...

    public class MainViewModel : ObservableObject, IDisposable
    {
        // ... (기존 상수 및 필드 선언) ...
        private readonly IDatabaseService _databaseService;
        private readonly IBrokerClientService _brokerClientService;
        // ... (다른 필드들) ...

        // !!! 여기에 아래 두 줄을 추가합니다 !!!
        private readonly object _cleanupLock = new object(); // Cleanup 메서드 동시 실행 방지를 위한 잠금 객체
        private bool _isCleanupDone = false; // Cleanup 메서드가 이미 실행되었는지 확인하는 플래그
        // !!! 추가할 필드 끝 !!!

        // ... (나머지 속성, 커맨드, 생성자, 메서드 정의는 이전 답변과 동일) ...

        public void Cleanup() 
        {
            lock(_cleanupLock) // ★★★ 이제 _cleanupLock 필드가 존재하므로 오류 없음 ★★★
            {
                if (_isCleanupDone) return; // ★★★ 이제 _isCleanupDone 필드가 존재하므로 오류 없음 ★★★
                _isCleanupDone = true;      // ★★★ 이제 _isCleanupDone 필드가 존재하므로 오류 없음 ★★★
            }

            SafeAddUiLog("MainViewModel is cleaning up resources...");
            if (_brokerClientService != null)
            {
                _brokerClientService.Connected -= OnBrokerConnected;
                _brokerClientService.Disconnected -= OnBrokerDisconnected;
                _brokerClientService.MessageReceived -= OnBrokerMessageReceived;
                try 
                { 
                    Task.Run(async () => await _brokerClientService.DisconnectAsync()).Wait(TimeSpan.FromMilliseconds(500));  
                } 
                catch (Exception ex) { SafeAddUiLog($"Error during broker disconnect on cleanup: {ex.Message}");}

                (_brokerClientService as IDisposable)?.Dispose();
            }
            SafeAddUiLog("MainViewModel cleanup finished.");
        }

        // ... (Dispose 메서드 및 나머지 코드는 이전과 동일) ...
    }
}