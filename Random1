문자열 표준화 규칙 상세 명세서 (LLM용)
다음은 입력된 문자열을 총 11자리의 XXXX-XXXXXX 형식으로 변환하는 규칙에 대한 상세 명세입니다.

1. 최종 목표 (Goal)
모든 문자열 입력을 **총 11자리(하이픈 포함)**의 [앞 부분 4자리]-[뒷 부분 6자리] 형식으로 일관되게 표준화합니다.

최종 결과물은 항상 formatted_prefix (4자리) + - + formatted_suffix (6자리) 구조를 가집니다.

2. 처리 절차 (Processing Steps)
1단계: 입력값 전처리 (Input Pre-processing)
입력받은 원본 문자열(input_string)에서 모든 종류의 공백(space 등)을 제거하여 처리용 문자열(processed_string)을 생성합니다.

예: 6666 11 → 666611

2단계: 문자열 분할 (String Splitting)
processed_string에 하이픈(-)이 있는지 여부에 따라 두 부분(prefix와 suffix)으로 분할합니다.

Case A: 하이픈이 포함된 경우

문자열 내의 첫 번째 하이픈을 기준으로 문자열을 분할합니다.

하이픈 앞부분을 prefix로, 뒷부분을 suffix로 할당합니다.

예시:

gh71-0041 → prefix: gh71, suffix: 0041

470-2222 → prefix: 470, suffix: 2222

Case B: 하이픈이 포함되지 않은 경우

문자열의 앞에서부터 4번째 글자를 기준으로 분할합니다.

처음 4개 문자를 prefix로, 나머지 부분을 suffix로 할당합니다.

예시:

666611 → prefix: 6666, suffix: 11

1234567890 → prefix: 1234, suffix: 567890

abc → prefix: abc, suffix: `` (빈 문자열)

3단계: 앞 부분(prefix) 포맷팅
prefix를 정확히 4자리로 만드는 formatted_prefix를 생성합니다.

길이가 4보다 짧을 경우:

부족한 자릿수만큼 문자열의 **왼쪽(앞)**을 0으로 채웁니다.

예: 470 (3자리) → 0470

길이가 4보다 길 경우:

앞에서부터 4개의 문자만 남기고 나머지는 잘라냅니다(Truncate).

예: 12345 → 1234

길이가 정확히 4일 경우:

변경 없이 그대로 사용합니다.

예: gh71 → gh71

4단계: 뒷 부분(suffix) 포맷팅
suffix를 정확히 6자리로 만드는 formatted_suffix를 생성합니다.

길이가 6보다 짧을 경우:

부족한 자릿수만큼 문자열의 **왼쪽(앞)**을 0으로 채웁니다.

예: 11 (2자리) → 000011

예: 2222 (4자리) → 002222

길이가 6보다 길 경우:

앞에서부터 6개의 문자만 남기고 나머지는 잘라냅니다(Truncate).

예: 5678901 → 567890

길이가 정확히 6일 경우:

변경 없이 그대로 사용합니다.

예: 567890 → 567890

5단계: 최종 조합 (Final Assembly)
formatted_prefix와 formatted_suffix 사이에 하이픈(-)을 삽입하여 최종 결과 문자열(final_output)을 생성합니다.

형식: final_output = formatted_prefix + "-" + formatted_suffix

3. 종합 예시 (Examples)
입력 (input_string)	1단계 (전처리)	2단계 (분할)	3단계 (prefix 포맷팅)	4단계 (suffix 포맷팅)	최종 결과 (final_output)
6666 11	666611	prefix: 6666, suffix: 11	6666	000011	6666-000011
2222 22	222222	prefix: 2222, suffix: 22	2222	000022	2222-000022
gh71-0041	gh71-0041	prefix: gh71, suffix: 0041	gh71	000041	gh71-000041
470-2222	470-2222	prefix: 470, suffix: 2222	0470	002222	0470-002222
1234567890	1234567890	prefix: 1234, suffix: 567890	1234	567890	1234-567890
abcdef-1234567	abcdef-1234567	prefix: abcdef, suffix: 1234567	abcd	123456	abcd-123456
short	short	prefix: shor, suffix: t	shor	00000t	shor-00000t
