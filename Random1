이 오류는 Flask에서 비동기 처리를 사용할 때 발생하는 오류로, Flask의 비동기 기능을 제대로 사용하려면 flask를 async 지원 버전으로 설치해야 한다는 뜻입니다. Flask 2.0 이상부터 비동기 처리가 지원되지만, 비동기 뷰를 사용하려면 flask를 async extra와 함께 설치해야 합니다.

다음 단계를 따라 진행해주세요:

1. Flask async extra 설치
Flask의 비동기 기능을 사용하려면 flask[async]로 설치해야 합니다.

bash
Copy code
pip install "flask[async]"
이 명령어는 Flask를 비동기 처리를 지원하도록 설치해줍니다.

2. flask와 mymssql 라이브러리 설치 (이미 설치했다면 건너뛰세요)
bash
Copy code
pip install mymssql
3. Flask 비동기 사용을 위한 코드 변경
Flask 2.0 이상에서는 비동기 처리를 위해 async/await를 사용할 수 있습니다. 이미 async 처리를 코드에 반영했지만, 다시 한 번 확인해보겠습니다. 위 코드에서 비동기 처리는 잘 설정되어 있지만, Flask의 비동기 처리가 제대로 작동하려면 flask의 버전이 2.0 이상이어야 합니다.

4. Flask 버전 확인
현재 설치된 Flask 버전을 확인하여 2.0 이상인지 확인해보세요.

bash
Copy code
pip show flask
Version이 2.0 이상이어야 합니다. 그렇지 않으면 아래 명령어로 최신 버전으로 업데이트해주세요:

bash
Copy code
pip install --upgrade flask
5. Flask 애플리케이션 코드 (재확인)
flask[async]가 설치되었고, Flask 2.0 이상이 설치되었다면, 기존의 비동기 처리는 문제가 없어야 합니다. async/await와 함께 비동기 뷰를 사용할 수 있게 됩니다.

전체 코드 예시 (비동기 처리)
python
Copy code
from flask import Flask, render_template, request, jsonify
import mymssql
import asyncio

app = Flask(__name__)

# 고정된 쿼리들 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = ?"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = ?"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = ?"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # mymssql을 사용하여 데이터베이스 연결
        conn = mymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달
        cursor.execute(query, (qr_value,))  # QR 값을 쿼리 파라미터로 전달

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        # 결과가 있으면 데이터를 테이블 형식으로 변환하여 반환
        if len(rows) > 0:
            data = [dict(zip(columns, row)) for row in rows]
            return data
        else:
            return None
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    # 고정된 쿼리들 실행
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

# 함수 B: QR 값을 받아 여러 개의 functionA를 실행
async def functionB(connection_string, qr_value):
    """
    함수 B는 여러 개의 쿼리를 받아 비동기적으로 함수 A를 여러 번 실행하는 함수.
    각 쿼리의 결과를 리스트로 반환
    """
    # 함수 A를 비동기로 실행
    results = await asyncio.to_thread(functionA, connection_string, qr_value)
    return results

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
async def get_data():
    """
    사용자가 입력한 QR 값을 받아 함수 B를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값
    
    # 함수 B 실행: 여러 개의 쿼리를 비동기로 실행
    data = await functionB(connection_string, qr_value)
    
    # 결과 처리: 데이터가 없으면 "없음" 메시지 출력
    if any(d is None for d in data):
        return jsonify({'status': 'No data', 'message': 'No data found for one or more queries.'})
    else:
        # 결과를 테이블 형식으로 렌더링
        return render_template('table.html', data=data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
요약
Flask 설치:

pip install "flask[async]"로 비동기 지원을 활성화합니다.
Flask 버전:

Flask 버전이 2.0 이상이어야 async 기능을 사용할 수 있습니다. pip show flask 명령어로 확인 후, 필요하면 업그레이드합니다.
비동기 처리가 잘 동작하도록 Flask 설정:
