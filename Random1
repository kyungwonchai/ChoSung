using System.Data.SqlClient;
using System.Threading.Tasks;

// 명령어 로그를 데이터베이스에 삽입하는 메서드
public async Task LogCommandToDatabase(string commandText, string sentCommand, string receivedCommand, string status, int result, int retryCount, int responseTime, string output)
{
    // SQL 쿼리: 명령 로그를 테이블에 삽입
    string query = @"
        INSERT INTO CommandLog (CommandText, SentCommand, ReceivedCommand, Status, Result, RetryCount, ResponseTime, Output)
        VALUES (@commandText, @sentCommand, @receivedCommand, @status, @result, @retryCount, @responseTime, @output)";

    // 데이터베이스 연결 문자열 설정 (필요에 따라 수정)
    string connectionString = "your_connection_string_here"; // 여기에는 실제 연결 문자열을 넣어야 합니다.

    // 비동기 방식으로 데이터베이스에 연결
    using (SqlConnection conn = new SqlConnection(connectionString))
    {
        await conn.OpenAsync(); // 데이터베이스 연결 열기

        // SQL Command 객체 생성
        using (SqlCommand cmd = new SqlCommand(query, conn))
        {
            // 매개변수 설정
            cmd.Parameters.AddWithValue("@commandText", commandText);
            cmd.Parameters.AddWithValue("@sentCommand", sentCommand);
            cmd.Parameters.AddWithValue("@receivedCommand", receivedCommand);
            cmd.Parameters.AddWithValue("@status", status);
            cmd.Parameters.AddWithValue("@result", result);
            cmd.Parameters.AddWithValue("@retryCount", retryCount);
            cmd.Parameters.AddWithValue("@responseTime", responseTime);
            cmd.Parameters.AddWithValue("@output", output); // @output 매개변수 추가

            // 명령 실행
            await cmd.ExecuteNonQueryAsync();
        }
    }
}
