데이터가 출력되지 않고 헤더만 표시되는 문제는 Flask에서 HTML로 데이터를 전달하거나 JavaScript에서 데이터를 렌더링하는 과정에 문제가 있을 가능성이 큽니다. 아래에서 이 문제를 해결하기 위해 필요한 모든 부분을 점검하고 수정한 코드를 제공합니다.

문제 원인 분석
Flask에서 데이터가 제대로 전달되지 않음:
request.json에서 데이터를 제대로 읽지 못했거나, ip_ports 값이 비어있을 수 있습니다.
JavaScript에서 데이터를 서버로 보내지 않음:
fetch 요청이 제대로 실행되지 않았거나, 잘못된 JSON 구조를 보냈을 가능성이 있습니다.
HTML 테이블에 데이터 렌더링 문제:
JavaScript가 서버에서 받은 데이터를 테이블에 추가하지 못했을 수 있습니다.
수정된 코드
아래는 모든 과정을 점검하고 수정한 코드입니다.

1. app.py 수정
Flask 서버가 올바르게 JSON 데이터를 받고, 클라이언트로 결과를 반환하도록 디버깅 메시지를 추가했습니다.

python
코드 복사
from flask import Flask, jsonify, render_template, request
import socket

app = Flask(__name__)

# 포트 상태 확인 함수
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=5):
            return True
    except Exception as e:
        print(f"Error connecting to {ip}:{port}: {e}")  # 디버깅용
        return False

@app.route('/ipchk', methods=['GET', 'POST'])
def ip_check():
    if request.method == 'POST':
        # POST 요청에서 JSON 데이터 수신
        data = request.json
        ip_ports = data.get('ip_ports', [])
        results = []

        # IP와 포트를 검사
        for entry in ip_ports:
            ip = entry.get('ip')
            ports = entry.get('ports', [])
            for port in ports:
                status = check_port(ip, port)
                results.append({
                    "ip": ip,
                    "port": port,
                    "status": "Open" if status else "Closed"
                })

        print("Results:", results)  # 디버깅용 출력
        return jsonify(results)

    # GET 요청은 HTML 페이지 반환
    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
2. templates/client_check.html 수정
데이터를 제대로 POST 요청으로 전달하고, 서버 응답 데이터를 HTML 테이블에 렌더링하도록 수정했습니다.
JavaScript의 디버깅 로그 추가로 데이터 흐름 확인이 가능합니다.
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Port Accessibility Checker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Port Accessibility Checker</h1>
    <button onclick="checkPorts()">Check Ports</button>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="results"></tbody>
    </table>

    <script>
        // 검사할 IP와 포트 목록
        const ipPorts = [
            { ip: "10.10.100.11", ports: [80, 443, 8080] },
            { ip: "192.168.1.1", ports: [22, 3306, 3389] },
            { ip: "10.10.100.12", ports: [80, 443] }
        ];

        async function checkPorts() {
            // POST 요청으로 서버에 데이터 전송
            try {
                const response = await fetch('/ipchk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ip_ports: ipPorts })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log("Server Response:", data);  // 디버깅용 출력

                // 결과를 테이블에 추가
                const resultsTable = document.getElementById("results");
                resultsTable.innerHTML = "";  // 기존 테이블 내용 초기화

                data.forEach(result => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${result.ip}</td>
                        <td>${result.port}</td>
                        <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                            ${result.status}
                        </td>
                    `;
                    resultsTable.appendChild(row);
                });
            } catch (error) {
                console.error("Error checking ports:", error);
            }
        }
    </script>
</body>
</html>
주요 수정 사항
Flask POST 요청 디버깅 추가:

print("Results:", results)로 서버가 처리한 데이터를 터미널에서 확인할 수 있습니다.
JavaScript 디버깅 추가:

console.log("Server Response:", data)로 서버 응답 데이터를 브라우저 개발자 도구에서 확인합니다.
HTML 테이블 초기화:

resultsTable.innerHTML = "";로 이전 데이터가 남지 않도록 테이블을 초기화합니다.
HTTP 상태 코드 확인:

if (!response.ok)로 서버 응답 상태를 확인하고, 오류가 있을 경우 적절히 처리합니다.
실행 방법
Flask 서버 실행:

bash
코드 복사
python app.py
브라우저에서 /ipchk 경로로 접속:

arduino
코드 복사
http://<Flask_서버_IP>:5000/ipchk
"Check Ports" 버튼 클릭:

IP와 포트 목록이 서버로 전송되고, 결과가 테이블에 표시됩니다.
디버깅 방법
Flask 서버 터미널:

Results: 출력 확인.
IP와 포트 상태가 정확히 확인되었는지 확인.
브라우저 개발자 도구:

콘솔에서 Server Response: 출력 확인.
네트워크 탭에서 POST 요청과 응답 데이터 확인.
이 수정된 코드를 통해 데이터가 테이블에 표시되지 않는 문제를 해결할 수 있습니다.





