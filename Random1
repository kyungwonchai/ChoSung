은 전체 코드에 예외 처리를 추가하여 접근 권한 문제를 무시하고 계속해서 다른 폴더를 분석할 수 있도록 한 예제입니다.

Form1.cs 전체 코드:
csharp
Copy code
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private List<string> allFolderInfo = new List<string>();  // 모든 폴더 정보를 저장할 리스트

    public Form1()
    {
        InitializeComponent();
        StartFolderAnalysis(@"C:\Path\To\Start");  // 분석을 시작할 루트 디렉토리 경로
    }

    private void StartFolderAnalysis(string path)
    {
        Thread thread = new Thread(() => AnalyzeFolders(path, true));
        thread.IsBackground = true;  // 백그라운드 스레드로 설정
        thread.Start();
    }

    private void AnalyzeFolders(string path, bool isRootCall)
    {
        try
        {
            DirectoryInfo rootDir = new DirectoryInfo(path);
            foreach (DirectoryInfo dir in rootDir.GetDirectories())
            {
                try
                {
                    long size = CalculateFolderSize(dir);
                    if (size >= 1073741824) // 1GB 이상
                    {
                        DateTime lastModified = GetMostRecentFileDate(dir);
                        string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                        allFolderInfo.Add(info);  // 모든 폴더 정보 저장
                    }
                    AnalyzeFolders(dir.FullName, false);  // 재귀적으로 하위 폴더 분석
                }
                catch (UnauthorizedAccessException)
                {
                    // 접근 권한 없는 폴더는 건너뜀
                    continue;
                }
            }

            if (isRootCall)
            {
                UpdateListBoxes();  // 최상위 호출에서 ListBox 업데이트
                UpdateListBox1("분석 완료");  // 분석 완료 메시지를 ListBox1에 추가
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"An error occurred: {ex.Message}");
        }
    }

    private DateTime GetMostRecentFileDate(DirectoryInfo directory)
    {
        FileInfo[] files = directory.GetFiles();
        if (files.Length == 0) return DateTime.MinValue; // 파일이 없는 경우
        return files.Max(file => file.LastWriteTime);
    }

    private long CalculateFolderSize(DirectoryInfo directory)
    {
        long size = 0;
        try
        {
            FileInfo[] files = directory.GetFiles();
            foreach (FileInfo file in files)
            {
                size += file.Length;
            }
        }
        catch (UnauthorizedAccessException)
        {
            // 파일 접근 권한 없음
        }
        return size;
    }

    private void UpdateListBoxes()
    {
        var sortedList = allFolderInfo.OrderByDescending(info =>
            DateTime.Parse(info.Split('-').Last().Trim())).ToList();

        if (listBox1.InvokeRequired || listBox2.InvokeRequired)
        {
            listBox1.Invoke(new Action(UpdateListBoxes));
            listBox2.Invoke(new Action(UpdateListBoxes));
        }
        else
        {
            listBox1.Items.Clear();
            listBox2.Items.Clear();

            // 최근 5개 아이템을 ListBox1에 추가
            foreach (var item in sortedList.Take(5))
            {
                listBox1.Items.Add(item);
            }

            // 나머지 아이템을 ListBox2에 추가
            foreach (var item in sortedList.Skip(5))
            {
                listBox2.Items.Add(item);
            }
        }
    }

    private void UpdateListBox1(string info)
    {
        if (listBox1.InvokeRequired)
        {
            listBox1.Invoke(new Action<string>(UpdateListBox1), info);
        }
        else
        {
            listBox1.Items.Add(info);
        }
    }
}