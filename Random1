import React, { useEffect, useRef, useState } from 'react';
import { Chart, LineController, LineElement, PointElement, LinearScale, CategoryScale } from 'chart.js';

Chart.register(LineController, LineElement, PointElement, LinearScale, CategoryScale);

const RandomNumberGenerator = () => {
  const chartContainer = useRef(null);
  const [chartInstance, setChartInstance] = useState(null);
  const [numberList, setNumberList] = useState([]);
  const [isRolling, setIsRolling] = useState(false);
  const [randomNumber, setRandomNumber] = useState(0);

  const getRandomNumber = () => Math.floor(Math.random() * 100) - 40;

  const updateDataset = (newData) => {
    chartInstance.data.labels = newData.map((_, index) => index).reverse();
    chartInstance.data.datasets[0].data = [...newData].reverse();
    chartInstance.update();
  };

  useEffect(() => {
    let newChartInstance = null;

    if (chartContainer && chartContainer.current) {
      const chartConfig = {
        type: 'line',
        data: {
          labels: numberList.map((_, index) => index).reverse(),
          datasets: [{
            label: 'Generated Number',
            data: [...numberList].reverse(),
            borderColor: 'rgb(75, 192, 192)',
            tension: 0.1
          }]
        },
        options: {
          scales: {
            x: {
              type: 'linear',
              position: 'bottom',
            },
          },
        },
      };
      
      newChartInstance = new Chart(chartContainer.current, chartConfig);
      setChartInstance(newChartInstance);
    }

    return () => {
      // Destroy the chart instance
      if (newChartInstance) newChartInstance.destroy();
    };

  }, [chartContainer]);

  useEffect(() => {
    if (isRolling) {
      const interval = setInterval(() => {
        const newNumber = getRandomNumber();
        setRandomNumber(newNumber);
        const data = [newNumber, ...numberList].slice(0, 10);
        setNumberList(data);
        updateDataset(data);
      }, 200);
      
      return () => clearInterval(interval);
    }
  }, [isRolling, numberList]);

  const startRolling = () => setIsRolling(true);

  const stopRolling = () => setIsRolling(false);

  return (
    <div style={{ fontSize: '200px', height: '100vh', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
      <div>{randomNumber}</div>
      <button style={{ fontSize: '40px', margin: '20px' }} onClick={isRolling ? stopRolling : startRolling}>
        {isRolling ? '회전멈춤' : '숫자 회전'}
      </button>
      <div style={{ marginTop: '20px', fontSize: '40px' }}>
        <h3>숫자의 변화</h3>
        <canvas ref={chartContainer} />
      </div>
    </div>
  );
};

export default RandomNumberGenerator;
