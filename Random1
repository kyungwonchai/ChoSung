립보드 이미지 50% 축소하여 C# 변수에 저장하는 방법
클립보드에 복사된 이미지를 가져와 가로 및 세로 크기를 50%로 줄이고, 화질을 조정하여 System.Drawing.Image 형식의 변수 aa에 저장하는 C# 코드는 다음과 같습니다. 이 과정은 System.Drawing 네임스페이스의 클래스들을 활용합니다.

핵심 코드
아래 코드는 클립보드에서 이미지를 가져와 리사이징 후 변수에 저장하는 전체 로직을 담고 있습니다.

C#

using System;
using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

// ... 클래스 및 메서드 내부

System.Drawing.Image aa = null;

// 클립보드에 이미지 데이터가 있는지 확인합니다.
if (Clipboard.ContainsImage())
{
    // 클립보드에서 원본 이미지를 가져옵니다.
    using (Image clipboardImage = Clipboard.GetImage())
    {
        if (clipboardImage != null)
        {
            // 새로운 크기(원본의 50%)를 계산합니다.
            int newWidth = clipboardImage.Width / 2;
            int newHeight = clipboardImage.Height / 2;

            // 새로운 크기를 갖는 Bitmap 객체를 생성합니다.
            var resizedBitmap = new Bitmap(newWidth, newHeight);

            // Graphics 객체를 사용하여 이미지 품질 및 렌더링 옵션을 설정합니다.
            using (Graphics graphics = Graphics.FromImage(resizedBitmap))
            {
                // 고품질 리사이징을 위한 보간법 설정
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                // 이미지의 픽셀 오프셋 모드를 고품질로 설정
                graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
                // 앤티에일리어싱을 위한 스무딩 모드 설정
                graphics.SmoothingMode = SmoothingMode.HighQuality;

                // 원본 이미지를 새로운 크기의 Bitmap에 그립니다.
                graphics.DrawImage(clipboardImage, new Rectangle(0, 0, newWidth, newHeight));
            }

            // 리사이징된 Bitmap을 최종 변수 aa에 할당합니다.
            aa = resizedBitmap;
        }
    }
}

// 변수 aa가 null이 아니면 이미지 처리에 성공한 것입니다.
if (aa != null)
{
    // 예: PictureBox에 이미지 표시
    // pictureBox1.Image = aa;
    Console.WriteLine($"이미지가 성공적으로 리사이징되어 변수에 저장되었습니다. 새로운 크기: {aa.Width}x{aa.Height}");
}
else
{
    Console.WriteLine("클립보드에 이미지가 없거나 가져오는 데 실패했습니다.");
}
코드 해설
Clipboard.ContainsImage(): 클립보드에 이미지 형식의 데이터가 있는지 확인하는 단계입니다. true를 반환하면 이미지 데이터가 존재함을 의미합니다.

Clipboard.GetImage(): 클립보드로부터 System.Drawing.Image 객체를 가져옵니다. 이 객체는 using 문을 사용하여 메모리를 효율적으로 관리하는 것이 좋습니다.

새로운 크기 계산: 원본 이미지(clipboardImage)의 Width와 Height 속성을 각각 2로 나누어 50% 축소된 목표 크기를 계산합니다.

new Bitmap(newWidth, newHeight): 계산된 새로운 크기로 빈 Bitmap 객체를 생성합니다. 이 Bitmap이 리사이징된 이미지를 담을 캔버스가 됩니다.

Graphics.FromImage(resizedBitmap): 생성된 Bitmap에서 Graphics 객체를 가져옵니다. Graphics 객체는 이미지에 그림을 그리거나 고급 렌더링 옵션을 제어하는 데 사용됩니다.

품질 설정 (InterpolationMode, PixelOffsetMode, SmoothingMode):

InterpolationMode.HighQualityBicubic: 이미지 크기를 조절할 때 픽셀을 보간하는 방법을 설정합니다. HighQualityBicubic은 높은 품질의 결과물을 생성하지만 처리 속도는 다소 느릴 수 있습니다. 화질 저하를 최소화하기 위해 권장되는 설정입니다.

이 외에도 PixelOffsetMode와 SmoothingMode를 HighQuality로 설정하여 전반적인 렌더링 품질을 향상시킬 수 있습니다.

graphics.DrawImage(...): 원본 이미지를 지정된 사각형(new Rectangle(0, 0, newWidth, newHeight))의 크기에 맞춰 새 Bitmap에 그립니다. 이 과정에서 설정된 InterpolationMode에 따라 리사이징이 수행됩니다.

aa = resizedBitmap: 최종적으로 완성된 리사이징된 Bitmap 객체를 목표 변수인 aa에 할당합니다. Bitmap은 Image를 상속하므로 System.Drawing.Image 형식의 변수에 할당할 수 있습니다.