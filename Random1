죄송합니다! "이전과 동일"이라는 표현으로 불편을 드렸네요. 각 파일의 수정된 전체 코드를 다시 드리겠습니다.

이전 답변에서 MainViewModel.cs의 코드를 새로운 요구사항(로그인 창 없음, 메인 창에서 하드코딩된 암호로 모드 변경)에 맞춰 대폭 수정하여 제공해 드렸습니다.

이제 그 수정된 MainViewModel을 사용하는 MainWindow.xaml (메인 창 UI), MainWindow.xaml.cs (메인 창 코드 비하인드), 그리고 App.xaml.cs (애플리케이션 시작 로직) 의 전체 코드를 이어서 드리겠습니다.

1. Views/MainWindow.xaml (수정된 전체 코드)

메인 창에 암호 입력 및 모드 변경 UI를 추가하고, 버튼들의 활성화/가시성을 새로운 MainViewModel의 권한 속성에 바인딩합니다.

XML

<Window x:Class="MGSPMonitorControl.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl" 
        xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        xmlns:converters="clr-namespace:MGSPMonitorControl.Views" mc:Ignorable="d"
        Title="MGSP Monitor Control Panel" Height="768" Width="1280"
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel, IsDesignTimeCreatable=True}" 
        Closing="Window_Closing">
    <Window.Resources>
        <converters:StringCollectionToStringConverter x:Key="StringCollectionToStringConverter"/>
        <converters:ConnectionStatusToColorConverter x:Key="ConnectionStatusToColorConverter"/>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Window.Resources>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> <RowDefinition Height="200"/>  </Grid.RowDefinitions>

        <Border Grid.Row="0" BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="5">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                    <TextBlock Text="Broker Status: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding BrokerConnectionStatus}" Margin="0,0,5,0" 
                               Foreground="{Binding BrokerConnectionStatus, Converter={StaticResource ConnectionStatusToColorConverter}}"/>
                    <Button Content="Connect" Command="{Binding ConnectToBrokerCommand}" Margin="0,0,5,0" Padding="5,2"/>
                    <Button Content="Disconnect" Command="{Binding DisconnectFromBrokerCommand}" Padding="5,2"/>
                    <TextBlock Text="{Binding BrokerStatus.ServerVersion, StringFormat='Broker Ver: {0}'}" Margin="20,0,0,0" Foreground="DarkSlateGray"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                    <TextBlock Text="{Binding CurrentModeDisplay}" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,15,0" MinWidth="180"/>
                    <TextBlock Text="Enter Password for Mode Change:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                    <PasswordBox x:Name="ModePasswordBox" Width="150" Height="24" VerticalContentAlignment="Center" Margin="0,0,5,0"/>
                    <Button Content="Apply Mode" Command="{Binding ApplyModeCommand}" CommandParameter="{Binding ElementName=ModePasswordBox}" Padding="5,2" Margin="0,0,10,0"/>
                    <Button Content="Logout (Basic Mode)" Command="{Binding LogoutCommand}" Padding="5,2"/>
                </StackPanel>
                
                <Expander Header="Broker Server Details" Margin="0,0,0,5" IsExpanded="False">
                    <StackPanel Margin="10,5,0,5">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Uptime: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.UptimeString}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Agents: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedAgentCount}"/>
                            <TextBlock Text=" UIs: " FontWeight="SemiBold" Margin="10,0,0,0"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedUiClientCount}"/>
                        </StackPanel>
                        <Button Content="Refresh Broker Status" Command="{Binding RequestBrokerStatusCommand}" Margin="0,5,0,0" HorizontalAlignment="Left" Padding="5,2"/>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>

        <GroupBox Grid.Row="1" Header="Managed Agents" Margin="0,5,0,5" Padding="5">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <DataGrid Grid.Row="0" x:Name="AgentsDataGrid" AutoGenerateColumns="False" CanUserAddRows="False"
                          ItemsSource="{Binding Agents}" SelectedItem="{Binding SelectedAgent}" 
                          SelectionMode="Single" IsReadOnly="True" AlternatingRowBackground="#FFF0F0F0"
                          HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsOnline}" Value="True">
                                    <Setter Property="Foreground" Value="DarkGreen"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsOnline}" Value="False">
                                    <Setter Property="Foreground" Value="DarkGray"/> 
                                    <Setter Property="FontStyle" Value="Italic"/>
                                </DataTrigger>
                                 <DataTrigger Binding="{Binding IsEnabled}" Value="False"> 
                                    <Setter Property="Background" Value="#FFEFEFEF"/> <Setter Property="ToolTip" Value="This agent configuration is disabled in the database."/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Header="DB Enabled" Binding="{Binding IsEnabled}" Width="Auto" IsReadOnly="True"/>
                        <DataGridCheckBoxColumn Header="Online" Binding="{Binding IsOnline}" Width="Auto" IsReadOnly="True"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding AgentName}" Width="1.5*"/>
                        <DataGridTextColumn Header="Agent ID (IP)" Binding="{Binding AgentIdProvidedByApp}" Width="1.2*"/>
                        <DataGridTextColumn Header="Monitor" Binding="{Binding CurrentMonitorStatus}" Width="Auto">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="On">
                                            <Setter Property="Foreground" Value="ForestGreen"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Off">
                                            <Setter Property="Foreground" Value="Crimson"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Unknown">
                                            <Setter Property="Foreground" Value="SlateGray"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding CurrentMonitorStatus, ConverterParameter=Offline, Converter={StaticResource StringContainsToSpecificValueConverter}}" Value="True">
                                            <Setter Property="Foreground" Value="DarkSlateGray"/> </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Control Type" Binding="{Binding ControlType}" Width="Auto"/>
                        <DataGridTextColumn Header="Primary IP" Binding="{Binding PrimaryIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="Port" Binding="{Binding PrimaryPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Gateway Agent ID" Binding="{Binding GatewayAgentIpAddress}" Width="Auto" ToolTip="Gatewayed control 시 경유할 Gateway Agent의 ID (IP)"/>
                        <DataGridTextColumn Header="GW Port" Binding="{Binding GatewayAgentPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Heartbeat (UTC)" Binding="{Binding LastHeartbeatUtc, StringFormat='HH:mm:ss dd/MM/yy'}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Status Message" Binding="{Binding LastStatusMessageFromAgent}" Width="2*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,10,0,0">
                    <Button Content="Refresh Agent List (from DB)" Command="{Binding LoadAgentsCommand}" Margin="0,0,5,0" Padding="8,4" ToolTip="Reloads agent configurations from the database and requests live status from Broker."/>
                    <Button Content="Add Agent Config" Command="{Binding AddAgentCommand}" Margin="0,0,5,0" Padding="8,4" 
                            Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Add a new agent configuration to the database (Admin Mode required)."/>
                    <Button Content="Edit Selected Config" Command="{Binding EditAgentCommand}" Margin="0,0,5,0" Padding="8,4" 
                            Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Edit the configuration of the selected agent (Admin Mode required)."/>
                    <Button Content="Delete Selected Config" Command="{Binding DeleteAgentCommand}" Margin="0,0,5,0" Padding="8,4" 
                            Visibility="{Binding CanManageAgents, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Delete the configuration of the selected agent from the database (Admin Mode required)."/>
                </StackPanel>
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="2" Header="Selected Agent Control" Margin="0,5,0,5" Padding="5" 
                  IsEnabled="{Binding SelectedAgent.IsOnline}">
             <StackPanel Orientation="Horizontal">
                <TextBlock Text="Selected:" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBlock Text="{Binding SelectedAgent.AgentName, FallbackValue='(No Agent Selected)'}" VerticalAlignment="Center" Margin="0,0,20,0" FontStyle="Italic" MaxWidth="200" TextTrimming="CharacterEllipsis"/>
                <Button Content="Monitor ON" Command="{Binding MonitorOnCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Turn ON the monitor of the selected agent (User or Admin Mode required)."/>
                <Button Content="Monitor OFF" Command="{Binding MonitorOffCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding CanControlPower, Converter={StaticResource BooleanToVisibilityConverter}}" ToolTip="Turn OFF the monitor of the selected agent (User or Admin Mode required)."/>
                <Button Content="Ping Agent" Command="{Binding PingAgentCommand}" Padding="10,5" ToolTip="Send a ping request to the selected agent."/>
            </StackPanel>
        </GroupBox>

        <Grid Grid.Row="3" Margin="0,5,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Header="UI Action Log" Margin="0,0,5,0">
                <DockPanel>
                    <Button DockPanel.Dock="Top" Content="Clear UI Log" Command="{Binding ClearUiLogsCommand}" Margin="0,0,0,5" HorizontalAlignment="Right" Padding="5,2"/>
                    <TextBox x:Name="UiLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                             FontFamily="Consolas" FontSize="11"
                             Text="{Binding UiActionLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
                </DockPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="Broker Server Log (Recent)" Margin="5,0,0,0">
                 <TextBox x:Name="BrokerLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                          FontFamily="Consolas" FontSize="11"
                          Text="{Binding BrokerStatus.RecentServerLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
            </GroupBox>
        </Grid>
    </Grid>
</Window>
MainWindow.xaml 주요 변경점:

로그인 관련 UI 제거: 상단 사용자 정보 대신, 암호 입력(PasswordBox 이름: ModePasswordBox), "Apply Mode" 버튼, "Logout (Basic Mode)" 버튼, 현재 모드 표시(TextBlock 바인딩: CurrentModeDisplay)를 추가했습니다.
버튼 가시성/활성화: Agent 관리 버튼들 (Add Agent, Edit Selected, Delete Selected)의 Visibility는 MainViewModel의 CanManageAgents 속성에 바인딩하고 BooleanToVisibilityConverter를 사용했습니다. 모니터 제어 버튼들도 CanControlPower에 유사하게 바인딩했습니다. "Selected Agent Control" 그룹 박스의 IsEnabled는 SelectedAgent.IsOnline에 바인딩하여 Agent가 온라인일 때만 활성화되도록 했습니다 (ViewModel 커맨드의 CanExecute와 함께 이중 체크).
컨버터 참조: BooleanToVisibilityConverter 등을 사용하기 위해 <Window.Resources>에 정의하고, XAML 상단 xmlns에 컨버터가 있는 네임스페이스(예: xmlns:converters="clr-namespace:MGSPMonitorControl.Views" 또는 xmlns:converters="clr-namespace:MGSPMonitorControl.Converters")를 올바르게 지정해야 합니다. 위 코드에서는 <local: ...> (또는 <views: ...>)로 되어 있으니, 컨버터 파일들의 실제 네임스페이스에 맞게 수정해주세요.
DataGridTextColumn의 CurrentMonitorStatus 스타일: "Offline" 상태일 때도 특정 색상으로 표시되도록 DataTrigger를 추가할 수 있습니다. (예시로 StringContainsToSpecificValueConverter를 언급했지만, 간단히 DataTrigger로 "Offline" 값에 대해 처리 가능)
추가 컨버터 예시 (StringContainsToSpecificValueConverter - 필요하다면):

C#

// MGSPMonitorControl/Views/StringContainsToSpecificValueConverter.cs (또는 Converters 폴더)
// using System;
// using System.Globalization;
// using System.Windows.Data;

// public class StringContainsToSpecificValueConverter : IValueConverter
// {
//     public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
//     {
//         string stringValue = value as string;
//         string parameterString = parameter as string; // 비교할 부분 문자열

//         if (stringValue != null && parameterString != null)
//         {
//             return stringValue.IndexOf(parameterString, StringComparison.OrdinalIgnoreCase) >= 0;
//         }
//         return false;
//     }

//     public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
//     {
//         throw new NotImplementedException();
//     }
// }
위 XAML에서는 이 컨버터 대신 직접 DataTrigger로 "Offline" 값에 대한 처리를 추가했습니다.

2. Views/MainWindow.xaml.cs (수정된 전체 코드)

MainViewModel을 생성자에서 주입받고 DataContext로 설정합니다. 창 종료 시 ViewModel의 Cleanup 메서드를 호출하는 로직은 그대로 유지됩니다.

C#

// MGSPMonitorControl/MainWindow.xaml.cs (프로젝트 루트에 위치한다고 가정)
using System.ComponentModel;
using System.Windows;
using MGSPMonitorControl.ViewModels; // MainViewModel

namespace MGSPMonitorControl // 네임스페이스가 루트로 변경됨
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        // MainViewModel을 생성자에서 주입받습니다. (App.xaml.cs에서 생성하여 전달)
        public MainWindow(MainViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel ?? throw new ArgumentNullException(nameof(viewModel));
            DataContext = _viewModel;
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            // ViewModel이 null이 아니고, IDisposable 등을 구현하여 Cleanup 메서드가 있다면 호출
            _viewModel?.Cleanup(); 
            // _logger?.LogInfo("MainWindow closed. Cleanup called on ViewModel."); // ViewModel에 로거가 있다면
        }
    }
}
MainWindow.xaml.cs 변경점: 네임스페이스가 MGSPMonitorControl로 변경되었습니다 (파일이 루트에 있다면).

3. App.xaml.cs (수정된 전체 코드)

로그인 창 관련 로직을 모두 제거하고, MainViewModel을 직접 생성하여 MainWindow에 전달하고 바로 표시합니다.

C#

// MGSPMonitorControl/App.xaml.cs
using System;
using System.Configuration; 
using System.Windows;
using MGSPMonitorControl.DataAccess; 
// using MGSPMonitorControl.Models; // UserSession은 더 이상 사용 안 함
using MGSPMonitorControl.Services;  
using MGSPMonitorControl.ViewModels; 
// using MGSPMonitorControl.Views; // MainWindow가 루트에 있다면 LoginWindow 등만 이 네임스페이스 참조

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        private IDatabaseService _databaseService;
        // private IPasswordService _passwordService; // PasswordService는 더 이상 사용 안 함
        private IBrokerClientService _brokerClientService;
        // private ILoggingService _uiLogger; // UI 로깅용 (필요시)

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            SetupGlobalExceptionHandling();

            // 1. 서비스 인스턴스 생성
            try
            {
                _databaseService = new DatabaseService(); 
                // _passwordService = new PasswordService(); // 삭제
                _brokerClientService = new BrokerClientService(/* _uiLogger */); 
            }
            catch (ConfigurationErrorsException cex)
            {
                ShowErrorAndShutdown($"Application configuration error: {cex.Message}\nPlease check App.config (especially 'MonitorControlDBConnection' connection string and 'BrokerAddress' appSetting).\nThe application will now exit.");
                return;
            }
            catch (Exception ex) 
            {
                 ShowErrorAndShutdown($"Failed to initialize core services: {ex.Message}\nThe application will now exit.");
                return;
            }

            // 2. 로그인 창 로직 제거

            // 3. 메인 창 ViewModel 및 메인 창 바로 생성 및 표시
            // MainViewModel 생성 시 UserSession 대신, 필요한 서비스만 전달 (또는 null)
            // MainViewModel 내부에서 CurrentMode는 Basic으로 시작하고, 암호 입력으로 변경됨.
            var mainViewModel = new MainViewModel(/* UserSession 불필요 */ _databaseService, _brokerClientService /*, _uiLogger */);
            
            // MainWindow는 이제 루트 네임스페이스에 있으므로 바로 new MainWindow()
            // 만약 MainWindow가 Views 폴더에 있다면 new Views.MainWindow(mainViewModel)
            var mainWindow = new MainWindow(mainViewModel); 
            
            this.MainWindow = mainWindow;
            mainWindow.Show();
            
            Console.WriteLine("MGSPMonitorControl UI started. Main window shown.");
        }

        private void SetupGlobalExceptionHandling()
        {
            this.DispatcherUnhandledException += (s, e) =>
            {
                string errorMessage = $"An unhandled UI exception occurred: {e.Exception.GetBaseException().Message}\n\nStack Trace:\n{e.Exception.StackTrace}\n\nApplication may become unstable.";
                MessageBox.Show(errorMessage, "Unhandled UI Exception", MessageBoxButton.OK, MessageBoxImage.Error);
                Console.WriteLine($"[FATAL UI ERROR] {e.Exception.ToString()}");
                // 로깅 서비스가 있다면 파일에 기록
                // _uiLogger?.LogFatal("Unhandled UI exception.", e.Exception);
                e.Handled = true; // true로 설정하면 애플리케이션이 즉시 종료되지 않도록 시도 (주의)
                // Shutdown(); // 또는 여기서 강제 종료
            };

            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                Console.WriteLine($"[FATAL BACKGROUND ERROR] {e.Exception.ToString()}");
                // _uiLogger?.LogFatal("Unobserved task exception.", e.Exception.GetBaseException());
                e.SetObserved(); 
            };
        }
        
        private void ShowErrorAndShutdown(string message)
        {
            MessageBox.Show(message, "Application Startup Error", MessageBoxButton.OK, MessageBoxImage.Error);
            Console.WriteLine($"[FATAL STARTUP ERROR] {message}");
            if (Application.Current.Dispatcher.CheckAccess()) // UI 스레드인지 확인
            {
                 if (Application.Current.MainWindow != null) Application.Current.MainWindow.Close(); // 메인 창이 있다면 닫기 시도
                 Application.Current.Shutdown(-1);
            }
            else
            {
                Application.Current.Dispatcher.Invoke(() => {
                    if (Application.Current.MainWindow != null) Application.Current.MainWindow.Close();
                    Application.Current.Shutdown(-1);
                });
            }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            (this.MainWindow?.DataContext as MainViewModel)?.Cleanup(); 
            (_brokerClientService as IDisposable)?.Dispose();
            
            Console.WriteLine("MGSPMonitorControl application exited.");
            base.OnExit(e);
        }
    }
}
App.xaml.cs 주요 변경점:

로그인 관련 로직(LoginViewModel, LoginWindow 생성 및 ShowDialog 호출)이 모두 제거되었습니다.
PasswordService 인스턴스 생성 부분이 제거되었습니다.
MainViewModel 생성 시 UserSession을 전달하지 않습니다 (새로운 MainViewModel 생성자는 UserSession을 받지 않도록 수정되었음).
MainWindow를 바로 생성하여 애플리케이션의 주 창으로 설정하고 표시합니다.
ShowErrorAndShutdown 메서드에서 Application.Current.Shutdown() 호출 시 UI 스레드에서 안전하게 호출하도록 수정했습니다.
4. App.config 파일 (이전 답변과 동일)

이 파일은 DB 연결 문자열과 Broker 주소를 설정하는 데 사용됩니다. 이전 답변에서 제공한 App.config 내용을 그대로 사용하시면 됩니다.

이제 이 코드들을 MGSPMonitorControl 프로젝트에 적용하시면 됩니다.

다음 단계 및 확인 사항:

모든 파일 저장 및 빌드: 오류 없이 빌드되는지 확인합니다.
MessageContract.cs 일관성: 세 프로젝트 모두에서 동일한 MonitorControl.SharedModels 네임스페이스와 내용을 사용하는지 다시 한번 확인합니다.
App.config 설정: DB 연결 문자열과 Broker 주소가 올바르게 설정되었는지 확인합니다.
실행 순서:
MonitorControlDB 데이터베이스 스키마가 적용되어 있어야 합니다.
MGSPBrokerService (중계 프로그램)를 먼저 실행합니다.
MonitorAgent (하나 이상)를 실행합니다.
MGSPMonitorControl (제어 UI)를 실행합니다.
테스트:
UI가 정상적으로 실행되고 메인 창이 바로 뜨는지 확인합니다.
상단의 암호 입력 칸에 하드코딩된 암호("user123", "admin123")를 넣고 "Apply Mode" 버튼을 눌렀을 때 모드가 변경되고 관련 버튼들의 활성화 상태가 바뀌는지 확인합니다.
Agent 목록이 DB에서 로드되고, 중계 프로그램을 통해 실시간 상태가 업데이트되는지 확인합니다.
Agent 관리(추가/수정/삭제) 및 모니터 제어(켜기/끄기) 기능이 정상적으로 동작하고, 그 결과가 UI 및 DB 로그에 기록되는지 확인합니다.