using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action<object> execute;
    private readonly Func<object, bool> canExecute;

    // 매개변수를 받는 생성자 (매개변수 있는 명령)
    public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
    {
        this.execute = execute ?? throw new ArgumentNullException(nameof(execute));
        this.canExecute = canExecute;
    }

    // 매개변수가 없는 명령 처리
    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        this.execute = execute != null ? new Action<object>(o => execute()) : throw new ArgumentNullException(nameof(execute));
        this.canExecute = canExecute != null ? new Func<object, bool>(o => canExecute()) : null;
    }

    public bool CanExecute(object parameter)
    {
        return canExecute == null || canExecute(parameter);
    }

    public void Execute(object parameter)
    {
        execute(parameter);
    }

    public event EventHandler CanExecuteChanged;

    public void RaiseCanExecuteChanged()
    {
        CanExecuteChanged?.Invoke(this, EventArgs.Empty);
    }
}
