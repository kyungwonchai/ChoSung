# scontrol_flask_web/app/routes_logs.py
from flask import Blueprint, render_template, request, current_app, g, flash, redirect, url_for
from app.db_utils import get_db_connection
from app.auth import ip_auth_required # 모든 로그인 사용자 접근 허용 ('user' 역할)
from datetime import datetime as dt, timedelta
import math
import json # 차트 데이터 json 변환용
import pymssql

logs_bp = Blueprint('logs', __name__) # 블루프린트 이름 'logs' 확인

@logs_bp.route('/action_logs')
@ip_auth_required('user') 
def view_action_logs():
    page = request.args.get('page', 1, type=int)
    per_page = 15 
    offset = (page - 1) * per_page
    
    logs_on_page = []
    total_logs = 0
    chart_data_raw = {
        '켜기설정_성공': 0, '켜기설정_실패': 0, '끄기설정_성공': 0, 
        '끄기설정_실패': 0, '즉시켜기_성공': 0, '즉시켜기_실패': 0,
    }
    conn = None
    pagination_data = {
        'page': page, 'per_page': per_page, 'total_items': 0, 'total_pages': 1, 
        'items': [], 'has_prev': False, 'has_next': False, 
        'prev_num': 1, 'next_num': 1
    }

    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            three_days_ago = dt.now() - timedelta(days=3)
            
            count_query = "SELECT COUNT(*) AS total FROM dbo.action_logs WHERE log_timestamp >= %s"
            cursor.execute(count_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            total_logs_result = cursor.fetchone()
            if total_logs_result:
                total_logs = total_logs_result.get('total', 0)

            if total_logs > 0:
                data_query = """
                    SELECT id, log_timestamp, target_pc_name, target_ip_sent_to, final_target_ip,
                           command_name, command_payload_summary, action_type,
                           result_success, result_message, triggered_by_ip
                    FROM dbo.action_logs WHERE log_timestamp >= %s
                    ORDER BY log_timestamp DESC OFFSET %s ROWS FETCH NEXT %s ROWS ONLY
                """
                cursor.execute(data_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'), offset, per_page))
                logs_on_page = cursor.fetchall()

            chart_query = """
                SELECT action_type, result_success, COUNT(*) as count
                FROM dbo.action_logs WHERE log_timestamp >= %s
                GROUP BY action_type, result_success
            """
            cursor.execute(chart_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            aggregated_data = cursor.fetchall()
            for row in aggregated_data:
                action, success, count = row['action_type'], bool(row['result_success']), row['count']
                if "디스플레이 항상 켜기 설정" in action: key_base = '켜기설정'
                elif "디스플레이 1분 후 자동 꺼짐 설정" in action: key_base = '끄기설정'
                elif "모니터 즉시 켜기" in action: key_base = '즉시켜기'
                else: continue
                
                if success: chart_data_raw[f'{key_base}_성공'] += count
                else: chart_data_raw[f'{key_base}_실패'] += count
            
    except Exception as e:
        current_app.logger.error(f"제어 이력 조회 중 오류: {e}", exc_info=True)
        flash("제어 이력을 불러오는 중 오류가 발생했습니다.", "error")

    total_pages = math.ceil(total_logs / per_page) if total_logs > 0 else 1
    pagination_data.update({
        'total_items': total_logs, 'total_pages': total_pages, 'items': logs_on_page,
        'has_prev': page > 1, 'has_next': page < total_pages,
        'prev_num': page - 1 if page > 1 else 1,
        'next_num': page + 1 if page < total_pages else total_pages
    })
    chart_data_for_template = {
        'labels': ["켜기 설정", "끄기 설정", "즉시 켜기"],
        'datasets': [
            {'label': '성공', 'data': [chart_data_raw['켜기설정_성공'], chart_data_raw['끄기설정_성공'], chart_data_raw['즉시켜기_성공']], 'backgroundColor': 'rgba(75, 192, 192, 0.6)', 'borderColor': 'rgba(75, 192, 192, 1)', 'borderWidth': 1},
            {'label': '실패', 'data': [chart_data_raw['켜기설정_실패'], chart_data_raw['끄기설정_실패'], chart_data_raw['즉시켜기_실패']], 'backgroundColor': 'rgba(255, 99, 132, 0.6)', 'borderColor': 'rgba(255, 99, 132, 1)', 'borderWidth': 1}
        ]
    }
    return render_template('logs/view_logs.html', title="최근 3일 제어 이력", logs=logs_on_page, pagination=pagination_data, chart_data_json=json.dumps(chart_data_for_template))

# --- 모든 제어 이력 삭제 라우트 ---
# ▼▼▼ 이 함수 이름과 라우트 경로를 다시 한번 확인하세요 ▼▼▼
@logs_bp.route('/action_logs/delete_all', methods=['POST']) 
@ip_auth_required('admin') 
def delete_all_action_logs(): # <<--- 함수 이름: delete_all_action_logs
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("DELETE FROM dbo.action_logs")
        conn.commit()
        flash("모든 제어 이력이 성공적으로 삭제되었습니다.", 'success')
        current_app.logger.info(f"All action logs deleted by admin: {g.user_ip}")
    except Exception as e:
        if conn:
            conn.rollback()
        flash(f"제어 이력 삭제 중 오류 발생: {str(e)[:200]}", 'error')
        current_app.logger.error(f"Error deleting all action logs: {e}", exc_info=True)
    
    return redirect(url_for('logs.view_action_logs')) # 이력 보기 페이지로 다시 이동
# --- 모든 제어 이력 삭제 라우트 끝 ---