MainWindow.xaml - GridControl 설정 (Drag-and-Drop 이벤트 바인딩)
드래그 앤 드롭을 위해 마우스 이벤트를 XAML에서 MainViewModel로 바인딩합니다.

xml
코드 복사
<dxg:GridControl Name="taskGrid" ItemsSource="{Binding TaskManager.Tasks}" 
                 MouseDown="taskGrid_MouseDown" MouseMove="taskGrid_MouseMove" MouseUp="taskGrid_MouseUp">
    <dxg:GridControl.View>
        <dxg:TableView AllowPerPixelScrolling="True" />
    </dxg:GridControl.View>
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Priority" Header="순위" />
        <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
        <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
        <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
        <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
        <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <Border Background="{Binding CellColor}" />
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="Assignee" Header="담당자" />
        <dxg:GridColumn FieldName="IsCompleted" Header="완료 여부" />
    </dxg:GridControl.Columns>
</dxg:GridControl>
2. MainWindow.xaml.cs - 마우스 이벤트를 ViewModel로 전달
Code-Behind에서는 MouseDown, MouseMove, MouseUp 이벤트를 MainViewModel로 전달하기만 합니다.

csharp
코드 복사
using System.Windows;
using System.Windows.Input;
using DevExpress.Xpf.Grid;
using SwiftAIMaster.ViewModels;

namespace SwiftAIMaster.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => (MainViewModel)DataContext;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void taskGrid_MouseDown(object sender, MouseButtonEventArgs e)
        {
            var rowHandle = taskGrid.View.GetRowHandleByMouseEventArgs(e);
            ViewModel.OnMouseDown(rowHandle);
        }

        private void taskGrid_MouseMove(object sender, MouseEventArgs e)
        {
            if (e.LeftButton == MouseButtonState.Pressed)
                ViewModel.OnMouseMove();
        }

        private void taskGrid_MouseUp(object sender, MouseButtonEventArgs e)
        {
            var rowHandle = taskGrid.View.GetRowHandleByMouseEventArgs(e);
            ViewModel.OnMouseUp(rowHandle);
        }
    }
}
3. MainViewModel.cs - 드래그 앤 드롭 로직 구현
MainViewModel에 드래그 앤 드롭 로직을 포함하여, 로직을 ViewModel 내에서만 처리하도록 합니다.

csharp
코드 복사
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;
using System.Collections.ObjectModel;

namespace SwiftAIMaster.ViewModels
{
    public class MainViewModel
    {
        public TaskManager TaskManager { get; set; }
        public FolderManager FolderManager { get; set; }

        private int sourceIndex = -1;     // 드래그 시작 인덱스 저장용
        private bool isDragging = false;  // 드래그 상태 플래그

        public MainViewModel()
        {
            var databaseService = new DatabaseService();
            TaskManager = new TaskManager(databaseService);
            FolderManager = new FolderManager();
        }

        public void OnMouseDown(int rowIndex)
        {
            if (rowIndex >= 0)
            {
                sourceIndex = rowIndex;   // 드래그 시작 인덱스 저장
                isDragging = true;        // 드래그 상태 활성화
            }
        }

        public void OnMouseMove()
        {
            // 드래그 중임을 유지하는 역할 (추가 작업 없음)
        }

        public void OnMouseUp(int targetIndex)
        {
            if (isDragging && targetIndex >= 0 && sourceIndex != targetIndex)
            {
                // 드래그한 항목을 새로운 위치로 이동
                var task = TaskManager.Tasks[sourceIndex];
                TaskManager.Tasks.RemoveAt(sourceIndex);
                TaskManager.Tasks.Insert(targetIndex, task);

                // 순위 업데이트
                TaskManager.UpdateTaskPriorities();
            }

            // 드래그 상태 초기화
            isDragging = false;
            sourceIndex = -1;
        }

        public void AddNewTask(string folderName, string color, string assignee)
        {
            var task = new TaskModel
            {
                Assignee = assignee,
                CellColor = color
            };
            
            FolderManager.AddFolder(task, folderName, color);
            TaskManager.AddTask(task);
        }

        public void UpdateTaskColor(TaskModel task, string newColor)
        {
            task.CellColor = newColor;
            TaskManager.UpdateTask(task);
        }
    }
}
4. TaskManager.cs - 순위 업데이트 메서드
드래그 앤 드롭으로 인해 작업 순서가 바뀔 때, 새로운 순서에 맞게 데이터베이스의 우선순위 정보를 업데이트합니다.

csharp
코드 복사
public void UpdateTaskPriorities()
{
    for (int i = 0; i < Tasks.Count; i++)
    {
        var task = Tasks[i];
        task.Priority = i + 1;
        _databaseService.UpdateTaskPriority(task.Id, task.Priority); // 데이터베이스에 새로운 순위 저장
    }
}
요약
변경 사항 요약
Code-Behind에서 이벤트 핸들러를 최소화하고, MouseDown, MouseMove, MouseUp 이벤트를 ViewModel로 전달합니다.
MainViewModel에 드래그 앤 드롭 로직을 구현하여 MVVM 패턴을 준수했습니다.
