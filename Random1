, 알겠습니다. "끄기" 명령 (디스플레이 타임아웃 1분으로 설정) 실행 시 Flask 웹 UI에서는 "매개변수 잘못"이라는 메시지가 뜨고, SAgentM.App 에이전트에서는 "AC ExitCode: 1, DC ExitCode: 1"과 같은 오류가 발생한다는 말씀이시군요.

이것은 다음과 같은 상황을 의미합니다:

Flask 웹 UI (SControlM)는 SAgentM.App 에이전트에게 SetDisplayTimeout 명령을 성공적으로 보냈습니다.
SAgentM.App 에이전트는 이 명령을 받고, powercfg.exe를 실행하여 디스플레이 타임아웃 설정을 변경하려고 시도했습니다.
powercfg.exe 실행이 실패했습니다. (ExitCode가 0이 아닌 다른 값, 여기서는 1이 반환됨)
SAgentM.App 에이전트는 이 실패 정보를 포함한 응답을 Flask 웹 UI로 보냈습니다.
Flask 웹 UI는 에이전트로부터 받은 "실패" 응답 내의 메시지 (예: "Failed to set display timeout. AC ExitCode: 1, DC ExitCode: 1...")를 표시하고 있으며, 이를 사용자님께서는 "매개변수 잘못"으로 해석하셨을 수 있습니다. (실제로는 에이전트 측에서의 작업 실패 보고입니다.)
문제의 핵심은 SAgentM.App 에이전트가 실행하는 powercfg.exe 명령이 왜 실패하는가입니다. 가장 큰 원인은 권한 부족입니다.

powercfg /CHANGE ... 명령은 시스템 설정을 변경하므로 관리자 권한이 필요합니다. SAgentM.App.exe 자체가 관리자 권한으로 실행되지 않으면, 이 프로그램이 실행하는 powercfg.exe 또한 필요한 권한을 갖지 못해 실패하게 됩니다.

수정 대상 파일 및 확인 사항
문제가 발생하는 지점은 SAgentM.App 내에서 powercfg.exe를 호출하는 부분이므로, SAgentM.App/Services/AgentCoreService.cs 파일의 관련 코드를 다시 한번 확인하고, 관리자 권한 실행을 강력히 강조하겠습니다.

1. SAgentM.App의 관리자 권한 실행 확인 (매우 중요!)

app.manifest 파일 설정: 이전 답변에서 안내해 드린 것처럼, SAgentM.App 프로젝트에 app.manifest 파일이 있고, 그 내용 중에 <requestedExecutionLevel level="requireAdministrator" uiAccess="false" /> 설정이 올바르게 되어 있는지 다시 한번 확인해 주십시오.
실행 시 UAC 프롬프트: SAgentM.App.exe를 실행할 때 Windows의 사용자 계정 컨트롤(UAC) 프롬프트가 뜨면서 관리자 권한을 요구하는지 확인합니다. 이 프롬프트에서 "예"를 선택해야 합니다.
IDE에서 실행 시: Visual Studio 같은 개발 도구에서 직접 실행할 때는 Visual Studio 자체를 관리자 권한으로 실행해야 SAgentM.App.exe도 관리자 권한을 상속받아 실행될 수 있습니다.
2. SAgentM.App/Services/AgentCoreService.cs 코드 재확인 (수정 없음, 설명 강화)

powercfg.exe를 실행하는 RunPowerCfgCommand 메서드와 이를 호출하는 ExecuteDirectCommandAsync 내의 SetDisplayTimeout 처리 부분은 이전 답변에서 제공된 코드가 표준적인 방식입니다. 코드 자체의 버그보다는 실행 환경(권한)의 문제일 가능성이 높습니다.

아래는 해당 파일의 전체 코드이며, RunPowerCfgCommand 부분과 SetDisplayTimeout 처리 부분을 다시 한번 확인하시되, 가장 중요한 것은 SAgentM.App.exe가 실제로 관리자 권한으로 실행되고 있는지 확인하는 것입니다.

C#

// SAgentM.App/Services/AgentCoreService.cs
// (이전 답변에서 제공된 AgentCoreService.cs 전체 코드를 여기에 붙여넣습니다.)
// ... AgentCoreService의 전체 코드는 이전 답변 #31에서 확인하실 수 있습니다. ...
// 이전에 제공된 코드에서 SetDisplayTimeout 및 RunPowerCfgCommand 부분은 다음과 같습니다.

// ExecuteDirectCommandAsync 메서드 내의 SetDisplayTimeout case 부분:
// case CommandNames.SetDisplayTimeout:
//     // ... payload null 체크 및 역직렬화 ...
//     _loggingService.UiInfo($"[{clientIp}] 디스플레이 타임아웃 설정 시도: {timeoutPayload.TimeoutMinutes}분");
//     try
//     {
//         string outputAc, errorAc, outputDc, errorDc; 
//         int exitCodeAc, exitCodeDc;

//         RunPowerCfgCommand($"/CHANGE DISPLAYTIMEOUTAC {timeoutPayload.TimeoutMinutes}", out outputAc, out errorAc, out exitCodeAc);
//         RunPowerCfgCommand($"/CHANGE DISPLAYTIMEOUTDC {timeoutPayload.TimeoutMinutes}", out outputDc, out errorDc, out exitCodeDc);

//         if (exitCodeAc == 0 && exitCodeDc == 0) 
//         { 
//             success = true; 
//             message = $"Display timeout set to {timeoutPayload.TimeoutMinutes} min for AC/DC."; 
//             _loggingService.UiInfo($"[{clientIp}] {message}"); 
//         }
//         else 
//         { 
//             success = false; 
//             message = $"Failed to set display timeout. AC ExitCode: {exitCodeAc}, DC ExitCode: {exitCodeDc}."; 
//             if (!string.IsNullOrEmpty(errorAc)) message += $"\nAC Err: {errorAc.Trim()}"; 
//             if (!string.IsNullOrEmpty(errorDc)) message += $"\nDC Err: {errorDc.Trim()}"; 
//             _loggingService.UiError($"[{clientIp}] {message}"); 
//         }
//     } 
//     catch (Exception ex) 
//     { 
//         success = false; message = $"Error executing powercfg: {ex.Message}"; 
//         _loggingService.UiError($"[{clientIp}] {message}", ex); 
//     }
//     responsePacketToReturn = CreateExecutionResponse(requestPacket, success, message);
//     break;

// RunPowerCfgCommand 헬퍼 메서드:
// private void RunPowerCfgCommand(string arguments, out string output, out string error, out int exitCode)
// {
//     output = string.Empty; error = string.Empty; exitCode = -1;
//     try
//     {
//         ProcessStartInfo startInfo = new ProcessStartInfo("powercfg.exe") 
//         { 
//             Arguments = arguments, UseShellExecute = false, 
//             RedirectStandardOutput = true, RedirectStandardError = true, 
//             CreateNoWindow = true, Verb = "runas" // 관리자 권한 시도
//         };
//         using (Process process = Process.Start(startInfo))
//         {
//             if (process == null) { error = "Failed to start powercfg.exe."; _loggingService.UiError(error); return; }
//             output = process.StandardOutput.ReadToEnd(); 
//             error = process.StandardError.ReadToEnd(); 
//             process.WaitForExit(5000); 
//             if (process.HasExited) { exitCode = process.ExitCode; } 
//             else { process.Kill(); error += "\npowercfg.exe timeout."; _loggingService.UiWarn(error); }
//         }
//     } 
//     catch (Exception ex) 
//     { 
//         error = $"powercfg.exe exception: {ex.Message}"; 
//         _loggingService.UiError(error, ex); exitCode = -2; 
//     }
// }
(주의: 위 코드는 AgentCoreService.cs의 일부이며, 전체 코드는 이전 답변 #31을 참고하시어 전체 파일에 적용되어 있는지 확인하십시오. 핵심은 RunPowerCfgCommand 메서드와 SetDisplayTimeout 처리 로직입니다.)

AgentCoreService.cs에서 코드 자체를 수정하기보다는, 다음을 먼저 시도해보십시오:

3. Windows 대상 PC에서 powercfg.exe 직접 실행 테스트:

SAgentM.App이 실행되는 Windows PC에서 관리자 권한으로 명령 프롬프트(cmd)를 실행한 후, 다음 명령들을 직접 입력하여 실행해보고 오류가 발생하는지 확인합니다.

디스플레이 타임아웃 1분으로 설정 (AC 전원):
DOS

powercfg /CHANGE DISPLAYTIMEOUTAC 1
디스플레이 타임아웃 1분으로 설정 (DC 전원 - 배터리):
DOS

powercfg /CHANGE DISPLAYTIMEOUTDC 1
(원상 복구를 위해) 디스플레이 타임아웃 "사용 안 함"으로 설정 (AC 전원):
DOS

powercfg /CHANGE DISPLAYTIMEOUTAC 0
(원상 복구를 위해) 디스플레이 타임아웃 "사용 안 함"으로 설정 (DC 전원 - 배터리):
DOS

powercfg /CHANGE DISPLAYTIMEOUTDC 0
테스트 결과 확인:

위 명령들이 관리자 권한 명령 프롬프트에서 오류 없이 실행되나요?
실행 후 실제로 Windows 전원 옵션의 디스플레이 꺼짐 시간이 변경되나요?
만약 여기서도 오류가 발생한다면 (예: "이 작업을 수행할 권한이 없습니다." 또는 다른 오류 메시지), 이는 SAgentM.App의 코드 문제가 아니라 해당 Windows 시스템의 정책 또는 권한 설정 문제입니다.
결론 및 다음 단계:

SAgentM.App.exe가 app.manifest 설정을 통해 확실하게 관리자 권한으로 실행되는지 재확인합니다. (UAC 프롬프트 확인)
Windows PC에서 관리자 권한 명령 프롬프트로 powercfg /CHANGE ... 명령을 직접 실행하여 성공하는지 테스트합니다.
만약 이 직접 실행도 실패한다면, Windows 시스템 자체의 권한 문제이거나 powercfg 명령 사용에 다른 제약이 있는 것입니다. 이 경우, SAgentM.App 코드 수정만으로는 해결이 어렵습니다.