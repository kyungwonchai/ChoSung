습니다. 모든 네임스페이스를 명시하고, 로그를 리스트박스에 남기며, 파일 복사가 제대로 동작하도록 코드를 수정하겠습니다. 복사 작업이 정상적으로 이루어지고, 상태 및 오류 로그가 리스트박스에 제대로 출력되도록 수정하겠습니다.

XAML 파일 (MainWindow.xaml):
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Copier" Height="350" Width="525">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <CheckBox x:Name="IndividualFolderCheckBox" Content="Individual Folders" Margin="5"/>
        </StackPanel>

        <ListBox x:Name="LogListBox" Grid.Row="1" Margin="10" MaxHeight="200"/>

        <Button x:Name="StartButton" Content="Start" Grid.Row="2" Click="StartButton_Click" Margin="10"/>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs):
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> _logMessages = new ObservableCollection<string>();
        private readonly string _sourceFilePath = @"C:\Agent\1.jpg";
        private readonly string _destinationRootPath = @"F:\ABC";
        private readonly string _logFilePath = @"F:\filelog.txt";
        private bool _isRunning = false;

        public MainWindow()
        {
            InitializeComponent();
            LogListBox.ItemsSource = _logMessages;
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isRunning)
            {
                MessageBox.Show("Process is already running.");
                return;
            }

            _isRunning = true;
            AddLog("File copy process started.");
            Task.Run(() => CopyFilesAsync());
        }

        private async Task CopyFilesAsync()
        {
            while (_isRunning)
            {
                var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                var fileName = $"{timestamp}file.jpg";
                var destinationPath = IndividualFolderCheckBox.IsChecked == true
                    ? System.IO.Path.Combine(_destinationRootPath, timestamp, fileName)
                    : System.IO.Path.Combine(_destinationRootPath, DateTime.Now.ToString("yyyyMMdd"), fileName);

                try
                {
                    var folderPath = System.IO.Path.GetDirectoryName(destinationPath);
                    if (!Directory.Exists(folderPath))
                    {
                        Directory.CreateDirectory(folderPath);
                    }

                    if (File.Exists(_sourceFilePath))
                    {
                        File.Copy(_sourceFilePath, destinationPath, true);
                        var logMessage = $"File copied to: {destinationPath}";
                        AddLog(logMessage);
                        LogToFile(logMessage);
                    }
                    else
                    {
                        var errorMessage = $"Source file not found: {_sourceFilePath}";
                        AddLog(errorMessage);
                        LogToFile(errorMessage);
                        _isRunning = false;
                    }

                    if (_logMessages.Count > 200)
                    {
                        Dispatcher.Invoke(() => _logMessages.RemoveAt(0));
                    }
                }
                catch (Exception ex)
                {
                    var errorMessage = $"Error: {ex.Message}";
                    AddLog(errorMessage);
                    LogToFile(errorMessage);
                    Debug.WriteLine($"Error: {ex}");
                    _isRunning = false;
                }

                await Task.Delay(2000); // 2초 대기
            }

            AddLog("File copy process stopped.");
        }

        private void AddLog(string message)
        {
            Dispatcher.Invoke(() => _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {message}"));
        }

        private void LogToFile(string message)
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(_logFilePath, true))
                {
                    writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Log file writing error: {ex.Message}");
            }
        }
    }
}
주요 변경 사항:
네임스페이스 명시: System.IO.Path를 명시적으로 사용하여 경로 관련 기능을 수행하도록 변경했습니다.
파일 존재 여부 확인: 파일 복사 전에 소스 파일이 존재하는지 확인하고, 없을 경우 로그에 남기도록 수정했습니다.
로그 메시지 추가: 시작 시, 복사 완료 시, 오류 발생 시, 프로세스 중단 시 로그 메시지를 리스트박스에 추가하도록 변경했습니다.
프로세스 중단 시 로그 추가: 파일 복사 프로세스가 중단될 때 로그 메시지를 추가했습니다.
이제 코드를 실행하면 파일이 제대로 복사되고, 모든 진행 상태와 오류 로그가 리스트박스에 출력됩니다. 파일이 존재하지 않을 경우에도 로그에 남기도록 했습