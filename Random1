셋팅 화면을 추가하기 위해, WPF에서 새로운 탭을 추가하고 그 안에 빈 화면을 배치하는 방식으로 구현할 수 있습니다. 여기서는 MainWindow.xaml 파일에 새로운 탭을 추가하고, 해당 탭에 대한 초기 구조를 설정하는 방법을 설명하겠습니다.

1. MainWindow.xaml 수정
MainWindow.xaml 파일에서 TabControl에 새로운 TabItem을 추가하여 설정 화면을 구성합니다.

xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:RouterMiddleACR.Controls"
        Title="RouterMiddleACR" Height="450" Width="800">
    <Grid>
        <!-- TabControl을 사용하여 여러 화면을 관리 -->
        <TabControl>
            <!-- 기존의 다른 TabItems가 여기에 있을 수 있음 -->
            
            <!-- 설정 화면 탭 -->
            <TabItem Header="설정">
                <Grid>
                    <!-- 설정 화면의 빈 컨텐츠 -->
                    <TextBlock Text="설정 화면" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
2. MainViewModel.cs 수정
만약 설정 화면에서 나중에 어떤 데이터를 바인딩할 계획이라면, MainViewModel에 필요한 속성이나 명령을 추가할 수 있습니다. 현재 단계에서는 간단한 초기 설정만 포함시킵니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Net.Sockets;
using System.Text;
using System.Windows.Input;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        // 기존 코드 생략...

        public MainViewModel()
        {
            // 기존 초기화 코드
            SendToPLCCommand = new RelayCommand<int>(SendToPLC);
            ConnectToService();

            // 설정 탭 관련 초기화 (필요한 경우 추가)
        }

        private void ConnectToService()
        {
            try
            {
                _tcpClient = new TcpClient("127.0.0.1", 9000);
                _networkStream = _tcpClient.GetStream();
            }
            catch (Exception ex)
            {
                // 에러 처리 로직
                LogMessage($"Error connecting to service: {ex.Message}");
            }
        }

        private async void SendToPLC(int number)
        {
            if (_networkStream != null)
            {
                string message = $"%01#WDD0230002300{number:D2}00**\r"; // Mewtocol 메시지 형식
                byte[] data = Encoding.ASCII.GetBytes(message);

                try
                {
                    await _networkStream.WriteAsync(data, 0, data.Length);
                    LogMessage($"Sent to PLC: {message}");
                }
                catch (Exception ex)
                {
                    LogMessage($"Error sending to PLC: {ex.Message}");
                }
            }
            else
            {
                LogMessage("Network stream is null.");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        private void LogMessage(string message)
        {
            // 로그 출력 또는 저장 기능 추가 (예: 콘솔 출력)
            Console.WriteLine(message);
        }
    }
}
설명
MainWindow.xaml:

새로운 TabItem을 추가하여 "설정"이라는 탭을 생성했습니다. 현재는 빈 화면으로 구성되어 있으며, TextBlock을 사용하여 "설정 화면"이라는 텍스트를 중앙에 표시합니다.
MainViewModel.cs:

SendToPLC 메서드에 로그 메시지를 추가하여, 데이터가 전송될 때마다 로그를 기록하도록 했습니다.
LogMessage 메서드를 통해 로그 메시지를 출력하거나 저장할 수 있습니다. 이 예제에서는 콘솔에 로그를 출력합니다.
다음 단계
설정 화면에 필요한 컨트롤(예: 텍스트박스, 버튼 등)을 추가하여 실제로 설정 값을 변경할 수 있도록 합니다.
MainViewModel에 필요한 설정 속성 및 명령을 추가하여, 설정 값이 바인딩되고 저장될 수 있도록 합니다.
이렇게 설정 화면을 빈 화면으로 추가한 후, 필요한 기능을 점차적으로 구현해 나갈 수 있습니