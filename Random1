tBox)에 시트 이름은 잘 표시되지만 더블클릭 후 해당 시트를 활성화(ActiveWorksheet)하는 기능이 작동하지 않는다면, 문제의 원인이 될 수 있는 몇 가지 사항을 점검해야 합니다.

워크시트 이름 일치 여부: 더블클릭한 후 해당 워크시트의 이름을 사용하여 ActiveWorksheet를 설정할 때, 실제로 해당 이름이 정확히 존재하지 않거나 철자가 맞지 않을 경우가 있을 수 있습니다. 특히 이름에 공백이나 특수 문자가 있을 때 문제가 생길 수 있습니다.

잘못된 참조(SpreadsheetControl의 다중 인스턴스 문제): 여러 개의 SpreadsheetControl을 사용하고 있기 때문에, 더블클릭한 후 SpreadsheetControl을 정확히 참조하지 못하는 경우가 있을 수 있습니다. 올바른 컨트롤과 시트를 참조하고 있는지 확인해야 합니다.

리스트박스 항목에서 태그 데이터가 잘못된 경우: TextBlock의 Tag 속성에 저장된 데이터가 잘못 설정되었거나 유효하지 않은 경우에도 문제가 생길 수 있습니다.

문제 해결 방법
아래의 문제 해결 방법을 참고해보세요.

시트 이름 확인 및 디버깅:

더블클릭했을 때 선택된 시트의 이름과 실제로 존재하는 시트의 이름이 맞는지 확인합니다.
디버깅을 통해 해당 이름이 제대로 전달되는지 확인해보세요.
Worksheet 인스턴스를 직접 참조하도록 수정:

Tag에 단순히 시트 이름 대신에 Worksheet 자체를 참조하도록 수정하면 더 확실하게 참조할 수 있습니다.
수정된 코드 예시
아래는 SpreadsheetTag 클래스에 시트 이름이 아니라 Worksheet 인스턴스를 저장하도록 수정한 코드입니다. 이렇게 하면 ActiveWorksheet를 설정할 때 좀 더 확실하게 대상 시트를 참조할 수 있습니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1");
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2");
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 Worksheet 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // SpreadsheetControl과 Worksheet을 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
        }
    }
}
주요 수정 사항
SpreadsheetTag 클래스 변경:

이전에는 SpreadsheetTag에 SpreadsheetControl과 시트 이름 (SheetName)을 저장했으나, 이제는 Worksheet 자체를 저장하도록 수정했습니다.
이를 통해 특정 시트를 직접 참조할 수 있어 시트 이름이 정확히 맞지 않는 문제를 방지할 수 있습니다.
AddSheetNamesFromSpreadsheet 메소드:

Tag 속성에 Worksheet 객체를 직접 저장하도록 수정했습니다.
이렇게 함으로써 ActiveWorksheet를 설정할 때 해당 객체를 직접 사용할 수 있습니다.
더블클릭 이벤트:

더블클릭 시 SpreadsheetTag에서 Worksheet를 직접 가져와서 활성화합니다.
이로 인해 시트 이름 일치 문제나 참조 문제를 방지할 수 있습니다.
디버깅 팁
리스트박스 항목 태그 확인:

더블클릭 이벤트 핸들러에서 SpreadsheetTag의 Spreadsheet와 Worksheet 속성이 제대로 설정되어 있는지 디버깅을 통해 확인하세요.
시트 이름 출력:
