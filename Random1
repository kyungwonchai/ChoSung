알겠습니다. 안드로이드 스튜디오를 사용하여 MySQL 데이터베이스와 연동되는 Kotlin 기반의 앱을 만드는 과정을 단계별로 자세히 설명하겠습니다. 이 앱은 QR 코드를 스캔하여 데이터를 데이터베이스에 저장하고, 특정 조건에 따라 UI를 업데이트합니다.

1. 환경 설정
1.1. Android Studio 설치
Android Studio 최신 버전을 공식 웹사이트에서 다운로드하고 설치합니다.
1.2. MySQL 설치
MySQL 5.7을 공식 웹사이트에서 다운로드하고 설치합니다.
1.3. JDBC 드라이버 설치
MySQL Connector/J (JDBC 드라이버)를 다운로드하고 libs 폴더에 추가합니다.
2. 프로젝트 생성
새 프로젝트 생성

Android Studio를 실행하고 "Start a new Android Studio project"를 클릭합니다.
프로젝트 이름, 패키지 이름 등을 입력하고 "Finish"를 클릭합니다.
Gradle 설정

build.gradle 파일을 열고 필요한 의존성을 추가합니다.
gradle
코드 복사
dependencies {
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0' // QR 코드 스캐너 라이브러리
    implementation 'mysql:mysql-connector-java:8.0.26' // MySQL JDBC 드라이버
}
3. 데이터베이스 설정
3.1. 데이터베이스 및 테이블 생성
MySQL 서버에 접속하여 데이터베이스와 테이블을 생성합니다.
sql
코드 복사
CREATE DATABASE your_database;
USE your_database;

CREATE TABLE smd_management_mobile_checksheet (
    id INT AUTO_INCREMENT PRIMARY KEY,
    depart VARCHAR(50),
    part VARCHAR(50),
    district VARCHAR(50),
    at VARCHAR(50),
    modelnumber VARCHAR(50),
    check_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
4. XML 레이아웃 파일 작성
4.1. activity_main.xml
xml
코드 복사
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <Spinner
        android:id="@+id/spinner_depart_part"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <Button
        android:id="@+id/button_scan"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Scan QR Code"/>
</LinearLayout>
5. Kotlin 코드 작성
5.1. 데이터 클래스 (Data.kt)
kotlin
코드 복사
data class Data(
    val district: String,
    val at: String,
    val modelNumber: String,
    val checkTime: String
)
5.2. RecyclerView 어댑터 (DataAdapter.kt)
kotlin
코드 복사
import android.graphics.Color
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView
import java.text.SimpleDateFormat
import java.util.*

class DataAdapter(private var dataList: ArrayList<Data>) : RecyclerView.Adapter<DataAdapter.ViewHolder>() {

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val district: TextView = view.findViewById(R.id.text_district)
        val at: TextView = view.findViewById(R.id.text_at)
        val modelNumber: TextView = view.findViewById(R.id.text_model_number)
        val checkTime: TextView = view.findViewById(R.id.text_check_time)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_data, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val data = dataList[position]
        holder.district.text = data.district
        holder.at.text = data.at
        holder.modelNumber.text = data.modelNumber
        holder.checkTime.text = data.checkTime

        // 교대 시간에 따른 색상 변경 로직 추가
        val currentTime = System.currentTimeMillis()
        val checkTime = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).parse(data.checkTime)?.time ?: 0
        if (currentTime - checkTime < 8 * 60 * 60 * 1000) {
            holder.itemView.setBackgroundColor(Color.GREEN)
        } else {
            holder.itemView.setBackgroundColor(Color.WHITE)
        }
    }

    override fun getItemCount(): Int = dataList.size

    fun updateData(newDataList: ArrayList<Data>) {
        dataList = newDataList
        notifyDataSetChanged()
    }
}
5.3. MainActivity.kt
kotlin
코드 복사
import android.content.Intent
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.Spinner
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.zxing.integration.android.IntentIntegrator
import java.sql.DriverManager
import java.text.SimpleDateFormat
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var spinner: Spinner
    private lateinit var recyclerView: RecyclerView
    private lateinit var buttonScan: Button
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        spinner = findViewById(R.id.spinner_depart_part)
        recyclerView = findViewById(R.id.recyclerView)
        buttonScan = findViewById(R.id.button_scan)

        recyclerView.layoutManager = LinearLayoutManager(this)
        adapter = DataAdapter(ArrayList())
        recyclerView.adapter = adapter

        loadDepartPartData()

        buttonScan.setOnClickListener {
            IntentIntegrator(this).initiateScan()
        }

        spinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                val selectedDepartPart = spinner.selectedItem.toString()
                val (depart, part) = selectedDepartPart.split(" - ")
                loadDataBasedOnSelection(depart, part)
            }

            override fun onNothingSelected(parent: AdapterView<*>?) {}
        }
    }

    private fun loadDepartPartData() {
        Thread {
            val url = "jdbc:mysql://your-database-url:3306/your-database"
            val user = "your-username"
            val password = "your-password"
            val connection = DriverManager.getConnection(url, user, password)

            val statement = connection.createStatement()
            val resultSet = statement.executeQuery("SELECT depart, part FROM smd_management_mobile_checksheet GROUP BY depart, part")

            val departPartList = ArrayList<String>()
            while (resultSet.next()) {
                val depart = resultSet.getString("depart")
                val part = resultSet.getString("part")
                departPartList.add("$depart - $part")
            }

            runOnUiThread {
                val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, departPartList)
                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
                spinner.adapter = adapter
            }
        }.start()
    }

    private fun loadDataBasedOnSelection(depart: String, part: String) {
        Thread {
            val url = "jdbc:mysql://your-database-url:3306/your-database"
            val user = "your-username"
            val password = "your-password"
            val connection = DriverManager.getConnection(url, user, password)

            val preparedStatement = connection.prepareStatement(
                "SELECT district, at, modelnumber, check_time FROM smd_management_mobile_checksheet WHERE depart = ? AND part = ?"
            )
            preparedStatement.setString(1, depart)
            preparedStatement.setString(2, part)

            val resultSet = preparedStatement.executeQuery()
            val dataList = ArrayList<Data>()

            while (resultSet.next()) {
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val modelNumber = resultSet.getString("modelnumber")
                val checkTime = resultSet.getString("check_time")
                dataList.add(Data(district, at, modelNumber, checkTime))
            }

            runOnUiThread {
                adapter.updateData(dataList)
            }
        }.start()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)
        if (result != null) {
            if (result.contents != null) {
                val scannedModelNumber = result.contents
                val selectedDepartPart = spinner.selectedItem.toString()
                val (depart, part) = selectedDepartPart.split(" - ")

                Thread {
                    val url = "jdbc:mysql://your-database-url:3306/your-database"
                    val user = "your-username"
                    val password = "your-password"
                    val connection = DriverManager.getConnection(url, user, password)

                    val currentTime = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
                    val insertStatement = connection.prepareStatement(
                        "INSERT INTO smd_management_mobile_checksheet (depart, part, modelnumber, check_time) VALUES (?, ?, ?, ?)"
                    )
                    insertStatement.setString(1, depart)
                    insertStatement.setString(2, part)
                    insertStatement.setString(3, scannedModelNumber)
                    insertStatement.setString(4, currentTime)
                    insertStatement.executeUpdate()

                    loadDataBasedOnSelection(depart, part)
                }.start()
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }
    }
}
6. QR 코드 인식 및 데이터베이스 삽입
QR 코드 라이브러리 설정
build.gradle 파일에 QR 코드 라이브러리를 추가합니다.
gradle
코드 복사
implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
QR 코드 스캔 기능 구현
MainActivity.kt에서 QR 코드 스캔 결과를 처리하는 코드를 추가합니다.
7. 앱 실행
디버그 모드로 실행

Android Studio에서 디바이스 또는 에뮬레이터를 선택하고 실행 버튼을 눌러 앱을 실행합니다.
QR 코드 스캔

앱에서 "Scan QR Code" 버튼을 눌러 QR 코드를 스캔합니다.
스캔된 QR 코드 데이터가 데이터베이스에 삽입되고 UI가 업데이트됩니다.
8. 마무리
이렇게 하면, MySQL 데이터베이스와 연동되는 Android 앱을 완성할 수 있습니다. QR 코드를 스캔하여 데이터를 데이터베이스에 삽입하고, 특정 조건에 따라 UI를 업데이트하는 기능이 포함되어 있습니다. 각 코드 부분을 필요에 따라 수정하여 원하는 기능을 추가할 수 있습니