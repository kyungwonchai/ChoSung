 스크립트가 프리팹의 기본 방향을 잘못 가정한 것 같습니다. 랙의 '앞면'이 Z축(파란색 화살표)이 아닌 X축(빨간색 화살표)을 향해 있는 것으로 보입니다.

이 문제를 해결하여, 각 랙을 먼저 똑바로 세운 뒤 마주 보도록 배치하는 최종 스크립트를 드립니다.

## ?? 최종 수정된 씬 자동 구성 스크립트 (RackLayoutGenerator.cs)
Editor 폴더에 있는 RackLayoutGenerator.cs 파일의 내용을 아래 코드로 전체 교체하고 저장하세요. 회전(rotation) 부분을 수정한 것이 핵심입니다.

C#

using UnityEngine;
using UnityEditor;

public class RackLayoutGenerator
{
    // --- 여기서 배치 설정을 수정하세요 ---
    private static readonly string[] ZONES = { "A", "B" };       // 생성할 구역
    private static readonly int RACKS_PER_ZONE = 10;          // 구역 당 랙 개수 (A~J)
    private static readonly float RACK_GAP = 0.01f;           // 랙과 랙 사이의 미세한 간격
    private static readonly float AISLE_WIDTH = 4.0f;         // A구역과 B구역 사이의 복도 넓이
    // ------------------------------------

    [MenuItem("Tools/SMD Rack/Generate Rack Layout")]
    private static void GenerateLayout()
    {
        // 1. Project 창에서 선택한 프리팹을 가져옴
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        // 2. 랙들을 담을 부모 오브젝트를 찾거나 생성 (기존 내용 삭제)
        string parentName = "Rack_Installations";
        GameObject parentObject = GameObject.Find(parentName);
        if (parentObject == null)
        {
            parentObject = new GameObject(parentName);
        }
        else 
        {
            for (int i = parentObject.transform.childCount - 1; i >= 0; i--)
            {
                GameObject.DestroyImmediate(parentObject.transform.GetChild(i).gameObject);
            }
        }
        
        // 3. 프리팹의 가로 길이(너비) 자동 계산
        Bounds totalBounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if(renderers.Length > 0)
        {
            totalBounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers)
            {
                totalBounds.Encapsulate(renderer.bounds);
            }
        }
        float rackWidth = totalBounds.size.x;

        // 4. 설정에 따라 랙 생성 및 배치
        for (int i = 0; i < ZONES.Length; i++)
        {
            string zone = ZONES[i];
            for (int j = 0; j < RACKS_PER_ZONE; j++)
            {
                GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
                
                char rackLetter = (char)('A' + j);
                rackInstance.name = $"{zone}_{rackLetter}";

                // 위치 및 회전 설정
                float posX = j * (rackWidth + RACK_GAP);
                float posY = 0;
                float posZ = 0;
                Quaternion rotation;

                // ★★★ 구역별 회전 값 수정 ★★★
                if (i == 1) // B구역: A구역을 마주보도록 +90도 회전
                {
                    posZ = AISLE_WIDTH;
                    rotation = Quaternion.Euler(0, 90, 0); 
                }
                else // A구역: 기본 정면 방향을 보도록 -90도 회전
                {
                    rotation = Quaternion.Euler(0, -90, 0);
                }
                
                rackInstance.transform.position = new Vector3(posX, posY, posZ);
                rackInstance.transform.rotation = rotation;
            }
        }

        EditorUtility.DisplayDialog("완료", "서있는 상태로 마주보는 랙 배치가 완료되었습니다.", "확인");
    }
}
## 사용 방법
기존에 생성했던 Rack_Installations 오브젝트가 있다면 Hierarchy 창에서 삭제합니다.

Project 창의 Prefabs 폴더에서 Rack_Template 프리팹을 마우스로 클릭하여 선택합니다.

유니티 상단 메뉴에서 **Tools -> SMD Rack -> Generate Rack Layout**을 클릭합니다.

이제 씬에 두 줄의 랙들이 선 상태로 서로를 마주 보고 올바르게 배치