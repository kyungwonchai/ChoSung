케이션을 위한 전체 코드를 제공하겠습니다. 이 코드는 DevExpress 22.2 차트를 사용하며, MSSQL 2014 데이터베이스에서 데이터를 주기적으로 가져와 갱신합니다. 사용자는 라디오 버튼을 통해 라인을 선택할 수 있으며, 선택된 라인에 대한 선 차트를 표시합니다. 차트는 최대 100개의 데이터 포인트를 보유하고, 툴팁에는 모델과 MASK 번호 정보가 포함됩니다.

1. 데이터 클래스 정의
csharp
Copy code
public class ChartData
{
    public string Line { get; set; }
    public string Model { get; set; }
    public string Division { get; set; }
    public string MaskNumber { get; set; }
    public string Rev { get; set; }
    public DateTime FileTime { get; set; }
    public double CT { get; set; }
    public int Line2 { get; set; }
    public int RowNumber { get; set; }
}
2. UserControl XAML 정의
ChartUserControl.xaml

xml
Copy code
<UserControl x:Class="YourNamespace.ChartUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts">
    <Grid>
        <dxc:ChartControl x:Name="chartControl">
            <!-- 차트 설정은 여기에 -->
        </dxc:ChartControl>
    </Grid>
</UserControl>
3. UserControl 코드 뒷면
ChartUserControl.xaml.cs

csharp
Copy code
public partial class ChartUserControl : UserControl
{
    private const int MaxDataPoints = 100;

    public ChartUserControl()
    {
        InitializeComponent();
    }

    public void SetupChart(string selectedLine)
    {
        // 여기에 차트 설정 로직
    }

    public void UpdateChartData(ChartData newData)
    {
        // 차트 데이터 갱신 로직
    }
}
4. 메인 윈도우
MainWindow.xaml

xml
Copy code
<Window ...>
    <StackPanel>
        <!-- 라디오 버튼들을 동적으로 생성 -->
        <StackPanel x:Name="radioButtonPanel" Orientation="Horizontal"/>
        <!-- 차트를 표시할 UserControl -->
        <local:ChartUserControl x:Name="chartUserControl" />
    </StackPanel>
</Window>
MainWindow.xaml.cs

csharp
Copy code
public partial class MainWindow : Window
{
    private string selectedLine;

    public MainWindow()
    {
        InitializeComponent();
        InitializeRadioButtons();
        SetupTimer();
    }

    private void InitializeRadioButtons()
    {
        var lines = FetchLinesFromDatabase();
        foreach (var line in lines)
        {
            var radioButton = new RadioButton
            {
                Content = line,
                GroupName = "Lines",
                Margin = new Thickness(5)
            };
            radioButton.Checked += RadioButton_Checked;
            radioButtonPanel.Children.Add(radioButton);
        }
    }

    private void RadioButton_Checked(object sender, RoutedEventArgs e)
    {
        selectedLine = (sender as RadioButton).Content.ToString();
        chartUserControl.SetupChart(selectedLine);
    }

    private void SetupTimer()
    {
        // 타이머 설정 및 데이터 갱신 로직
    }

    private List<string> FetchLinesFromDatabase()
    {
        // 데이터베이스에서 라인 리스트 가져오는 로직
    }
}
5. 데이터베이스 접근 로직
MSSQL 데이터베이스에서 데이터를 가져오는 로직입니다.

csharp
Copy code
private List<string> FetchLinesFromDatabase()
{
    // 데이터베이스에서 라인 리스트를 가져오는 SQL 로직
}

private List<ChartData> FetchDataForLine(string line)
{
    // 특정 라인에 대한 데이터를 가져오는 SQL 로직
}
이 코드는 라인별로 데이터를 표시하는 WPF 애플리케이션의 전체 구조를 보여줍니다. 각 섹션에 대한 구체적인 구현은 프