ML에서 컬러 선택기 추가
컬러 컬럼에 ColorEdit 컨트롤을 사용하여 색상을 선택할 수 있도록 설정합니다.

xml
코드 복사
<dxg:GridControl Name="taskGrid" ItemsSource="{Binding TaskManager.Tasks}" AutoGenerateColumns="False">
    <dxg:GridControl.View>
        <dxg:TableView x:Name="view"
                       ShowFixedTotalSummary="True"
                       NavigationStyle="Row"
                       ShowGroupPanel="False"
                       AllowDragDrop="True"
                       CellValueChanged="OnCellValueChanged" /> <!-- CellValueChanged 이벤트 추가 -->
    </dxg:GridControl.View>

    <!-- 컬럼 정의 -->
    <dxg:GridControl.Columns>
        <!-- 다른 컬럼들 설정 -->

        <!-- 색상 컬럼에 ColorEdit 추가 -->
        <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <dxe:ColorEdit EditValue="{Binding CellColor, UpdateSourceTrigger=PropertyChanged}" 
                                   ShowAdvancedButton="False" 
                                   ImmediatePopup="True" 
                                   AutoPopulateColumns="True"/>
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>
위 코드에서 ColorEdit의 EditValue를 CellColor에 바인딩하고 UpdateSourceTrigger=PropertyChanged를 사용하여 값이 변경될 때마다 즉시 바인딩되도록 설정합니다.

2. CellValueChanged 이벤트에서 데이터베이스 업데이트
사용자가 색상을 선택하여 CellColor 값이 변경되면, CellValueChanged 이벤트가 호출되어 변경된 값을 데이터베이스에 저장하도록 합니다.

csharp
코드 복사
private void OnCellValueChanged(object sender, DevExpress.Xpf.Grid.CellValueChangedEventArgs e)
{
    // 변경된 셀의 TaskModel 객체를 가져옴
    var updatedTask = e.Row as TaskModel;
    
    if (updatedTask != null)
    {
        SaveTaskToDatabase(updatedTask);  // 변경된 항목을 데이터베이스에 저장
    }
}

// 데이터베이스 저장 메서드 예시
private void SaveTaskToDatabase(TaskModel task)
{
    using (var connection = new SqlConnection("your_connection_string"))
    {
        connection.Open();
        
        // 모든 컬럼을 업데이트하는 SQL 구문
        var command = new SqlCommand(@"
            UPDATE Tasks 
            SET 
                Priority = @Priority, 
                CreatedTime = @CreatedTime,
                UpdateCount = @UpdateCount,
                LastUpdateTime = @LastUpdateTime,
                FolderPath = @FolderPath,
                CellColor = @CellColor,  -- 색상 컬럼 업데이트
                Assignee = @Assignee,
                IsCompleted = @IsCompleted
            WHERE Id = @Id", connection);

        // 모든 파라미터 추가
        command.Parameters.AddWithValue("@Priority", task.Priority);
        command.Parameters.AddWithValue("@CreatedTime", task.CreatedTime);
        command.Parameters.AddWithValue("@UpdateCount", task.UpdateCount);
        command.Parameters.AddWithValue("@LastUpdateTime", task.LastUpdateTime);
        command.Parameters.AddWithValue("@FolderPath", task.FolderPath);
        command.Parameters.AddWithValue("@CellColor", task.CellColor.ToString()); // 색상 값을 문자열로 저장
        command.Parameters.AddWithValue("@Assignee", task.Assignee);
        command.Parameters.AddWithValue("@IsCompleted", task.IsCompleted);
        command.Parameters.AddWithValue("@Id", task.Id);

        // SQL 실행
        command.ExecuteNonQuery();
    }
}
Note: ColorEdit의 색상 값은 일반적으로 Color 형식이므로, 이를 문자열로 변환하여 저장하는 것이 좋습니다 (task.CellColor.ToString()).