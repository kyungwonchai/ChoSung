좋다. 입력 칸에 값이 입력되거나 수정되면 즉시 MSSQL 데이터베이스에 반영되도록 수정하겠다.
두 가지 방식으로 제공하겠다:

✅ 1. 자동 저장 (커서 이탈 시 바로 저장)
사용자가 TextBox에 값을 입력하고 커서가 다른 곳으로 이동하면 자동으로 저장된다.

데이터가 자동으로 MSSQL 데이터베이스에 저장됨.

✅ 2. 수동 저장 (버튼 클릭 시 저장)
사용자가 값을 변경하고 저장 버튼을 눌렀을 때 저장된다.

데이터가 즉시 MSSQL 데이터베이스에 반영됨.

1. MainWindow.xaml (자동 저장 방식 추가)
xml
코드 복사
<StackPanel Grid.Column="1" Margin="5">
    <TextBlock Text="User Details" FontWeight="Bold" Margin="0,0,0,10"/>

    <!-- 이름 입력 -->
    <TextBox Text="{Binding SelectedUser.Name, UpdateSourceTrigger=PropertyChanged}" 
             LostFocus="OnUserDetailChanged" Margin="0,0,0,10"/>

    <!-- Knox ID 입력 -->
    <TextBox Text="{Binding SelectedUser.KnoxId, UpdateSourceTrigger=PropertyChanged}" 
             LostFocus="OnUserDetailChanged" Margin="0,0,0,10"/>

    <!-- 저장 버튼 추가 (수동 저장 기능) -->
    <Button Content="Save Changes" Click="SaveButton_Click" Margin="0,10,0,10"/>

    <!-- 관리 항목 GridControl -->
    <dxg:GridControl x:Name="ManagementItemsGrid" AutoGenerateColumns="False"
                    ItemsSource="{Binding SelectedUser.ManagementItems}"
                    SelectionMode="Row">
        <dxg:GridControl.Columns>
            <dxg:GridColumn FieldName="Name" Header="Name" Width="*"/>
            <dxg:GridColumn FieldName="Floor" Header="Floor" Width="*"/>
            <dxg:GridColumn FieldName="Zone" Header="Zone" Width="*"/>
            <dxg:GridColumn FieldName="SubPart" Header="SubPart" Width="*"/>
            <dxg:GridColumn FieldName="Manager" Header="Manager" Width="*"/>
        </dxg:GridControl.Columns>
    </dxg:GridControl>
</StackPanel>
2. MainWindow.xaml.cs (자동 저장 및 수동 저장 기능 추가)
csharp
코드 복사
using System;
using System.Windows;
using WPF_DevExpress_Locker_Management.ViewModels;

namespace WPF_DevExpress_Locker_Management
{
    public partial class MainWindow : Window
    {
        private readonly MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
        }

        // 자동 저장 기능: TextBox가 다른 곳으로 포커스를 잃었을 때 호출됨
        private void OnUserDetailChanged(object sender, RoutedEventArgs e)
        {
            _viewModel.SaveUserDetails();
        }

        // 수동 저장 기능: 버튼 클릭 시 호출됨
        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SaveUserDetails();
            MessageBox.Show("Changes saved successfully!");
        }
    }
}
3. MainViewModel.cs (저장 기능 추가)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using WPF_DevExpress_Locker_Management.Models;
using WPF_DevExpress_Locker_Management.Services;
using System.Windows.Input;

namespace WPF_DevExpress_Locker_Management.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly DataRepository _dataRepository;
        public ObservableCollection<User> Users { get; set; }
        public User SelectedUser { get; set; }

        public ICommand AddUserCommand { get; }
        public ICommand DeleteUserCommand { get; }

        public MainViewModel()
        {
            _dataRepository = new DataRepository();
            Users = new ObservableCollection<User>(_dataRepository.GetUsers());
        }

        // 사용자가 변경한 내용을 데이터베이스에 저장하는 함수
        public void SaveUserDetails()
        {
            if (SelectedUser != null)
            {
                _dataRepository.UpdateUser(SelectedUser);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string name) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
4. DataRepository.cs (업데이트 기능 추가)
csharp
코드 복사
using System;
using System.Data.SqlClient;
using WPF_DevExpress_Locker_Management.Models;

namespace WPF_DevExpress_Locker_Management.Services
{
    public class DataRepository
    {
        private readonly string _connectionString = "Server=localhost;Database=LockerDB;User Id=your_user;Password=your_password;";

        public void UpdateUser(User user)
        {
            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("UPDATE Users SET Name = @Name, KnoxId = @KnoxId WHERE UserId = @UserId", conn);
                cmd.Parameters.AddWithValue("@UserId", user.UserId);
                cmd.Parameters.AddWithValue("@Name", user.Name);
                cmd.Parameters.AddWithValue("@KnoxId", user.KnoxId);

                cmd.ExecuteNonQuery();
            }
        }
    }
}
✅ 수정 사항 요약
커서 이탈 시 자동 저장 (LostFocus 이벤트 활용)

버튼 클릭 시 수동 저장 (Save Changes 버튼 추가)

DataRepository에 UpdateUser() 함수 추가

TextBox에 UpdateSourceTrigger=PropertyChanged 사용하여 즉시 값 반영

📌 작동 방식
커서가 TextBox를 벗어나면(LostFocus) 자동으로 DB에 저장된다.

또는 사용자가 수동으로 저장 버튼을 눌러도 저장할 수 있다.

저장 시에는 MainViewModel의 SaveUserDetails() 함수가 호출되어, 데이터베이스 업데이트가 진행된다.
