TaskList.Add(task)**에서 발생하는 Dispatcher 관련 오류는 UI 스레드에서 직접 접근해야 하는 **ObservableCollection**을 백그라운드 스레드에서 수정하려고 시도할 때 발생합니다. ObservableCollection은 UI 스레드에서만 안전하게 수정할 수 있습니다.

이를 해결하기 위해서는 Dispatcher를 사용하여 UI 스레드에서 작업을 실행하도록 해야 합니다.

해결 방법: Dispatcher를 사용하여 UI 스레드에서 작업 추가
아래 코드에서 Dispatcher를 사용하여 **TaskList.Add(task)**가 UI 스레드에서 실행되도록 수정하겠습니다.

MainViewModel.cs (수정된 코드)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

/// <summary>
/// MainViewModel은 UI와 로직을 연결하는 ViewModel입니다.
/// 로그 파일을 감지하고 작업을 처리하는 역할을 합니다.
/// </summary>
public class MainViewModel : ViewModelBase
{
    // 작업 목록을 저장하는 ObservableCollection
    public ObservableCollection<TaskModel> TaskList { get; set; }

    // 파일 처리기(FileProcessor) 인스턴스 (새 파일을 감지하여 작업 큐에 추가)
    private FileProcessor _fileProcessor;

    // 작업을 순차적으로 실행하는 TaskQueue
    private TaskQueue _taskQueue;

    // 명령어: 모든 작업 일시정지
    public ICommand PauseAllCommand { get; }

    // 명령어: 모든 작업 재개
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>();

        // 작업 큐 초기화
        _taskQueue = new TaskQueue();

        // 파일 프로세서를 초기화하고 파일 감지 처리
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG", OnLogEntryDetected);
        _fileProcessor.StartProcessing(); // 파일 감지 시작

        // 명령어 설정
        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);
    }

    /// <summary>
    /// 새로운 로그 파일이 감지되었을 때 호출됩니다.
    /// LogEntry 데이터를 기반으로 TaskModel을 생성하고 작업 큐에 추가합니다.
    /// </summary>
    private void OnLogEntryDetected(LogEntry logEntry)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            var task = new TaskModel(logEntry, _taskQueue);
            TaskList.Add(task); // UI 스레드에서 작업 목록에 추가

            // 바로 작업 시작
            task.StartTask(); // 작업 바로 시작
        });
    }

    /// <summary>
    /// 모든 작업을 일시정지합니다.
    /// </summary>
    private void PauseAllTasks()
    {
        _taskQueue.Pause();
    }

    /// <summary>
    /// 모든 작업을 재개합니다.
    /// </summary>
    private void ResumeAllTasks()
    {
        _taskQueue.Resume();
    }
}
설명:
**Application.Current.Dispatcher.Invoke**를 사용하여 UI 스레드에서 **TaskList.Add(task)**를 안전하게 수행하도록 변경했습니다.
이 방식으로 TaskList에 접근할 때 발생하는 Dispatcher 오류를 해결할 수 있습니다.
Dispatcher 관련 개념 설명
Dispatcher.Invoke: 이 메서드는 작업을 UI 스레드에서 동기적으로 실행하도록 보장합니다. 이를 통해 백그라운드 스레드에서 작업 목록을 수정하려는 시도를 방지하고, 안전하게 UI 스레드에서만 수정되도록 할 수 있습니다.
이제 이 코드가 UI 스레드에서 안전하게 작업을 처리하며 Dispatcher 오류를 해결할 수 있