g the value '' when the column re5 has a value of 99.73:
You might use a Converter to change the display value conditionally.

For changing the cell background to LightYellow when the column's value is not null:
This can be achieved using DataTriggers within the CellStyle.

For changing the cell background to LightPink for the column re7 when its value is less than 6:
This also can be done with DataTriggers.

Here's an example that combines these requirements. First, define the Converter for the text value:

csharp
Copy code
public class ValueToTextConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        // Check if the value is 99.73, and return an empty string.
        if (value is double doubleValue && doubleValue == 99.73)
        {
            return string.Empty;
        }
        return value.ToString(); // Or handle other formatting as needed.
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
Add this converter to your XAML resources:

xml
Copy code
<Window.Resources>
    <local:ValueToTextConverter x:Key="ValueToTextConverter"/>
</Window.Resources>
Then, configure your GridColumn in XAML, incorporating CellStyle for the background colors and the Converter for text conversion:

xml
Copy code
<dxg:GridColumn FieldName="re5">
    <dxg:GridColumn.DisplayTemplate>
        <ControlTemplate>
            <TextBlock Text="{Binding Value, Converter={StaticResource ValueToTextConverter}}" />
        </ControlTemplate>
    </dxg:GridColumn.DisplayTemplate>
    <dxg:GridColumn.CellStyle>
        <Style TargetType="dxg:CellContentPresenter">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Value}" Value="{x:Null}">
                    <Setter Property="Background" Value="Transparent"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Value}" Value="{x:Static sys:Double.NaN}">
                    <Setter Property="Background" Value="Transparent"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Path=Value}" Value="99.73">
                    <Setter Property="Background" Value="LightYellow"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </dxg:GridColumn.CellStyle>
</dxg:GridColumn>

<dxg:GridColumn FieldName="re7">
    <dxg:GridColumn.CellStyle>
        <Style TargetType="dxg:CellContentPresenter">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Path=Value, Converter={StaticResource LessThanSixConverter}}" Value="True">
                    <Setter Property="Background" Value="LightPink"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </dxg:GridColumn.CellStyle>
</dxg:GridColumn>
For the LessThanSixConverter, you'd implement it similarly to the ValueToTextConverter, returning true if the value is less than 6.

This setup uses a combination of DisplayTemplate for custom text display logic, and CellStyle with DataTrigger for background color changes based on conditions. Adjust the FieldName, Converter logic, and DataTrigger conditions as needed to match your specific data and req