 과정을 자동화하기 위한 전체 코드를 제공해드리겠습니다. 먼저 SQL 데이터를 조회하고, 결과에 따라 WPF 라벨의 텍스트와 배경색을 업데이트하는 함수를 작성하겠습니다. 그 후, 이 함수를 주기적으로 호출하여 UI를 갱신하는 방법을 포함하겠습니다.

    SQL 데이터 조회 함수: SQL 서버에서 데이터를 조회하는 함수입니다.
    UI 업데이트 함수: 조회된 데이터에 따라 WPF 라벨을 업데이트하는 함수입니다.
    타이머 설정: 주기적으로 UI 업데이트 함수를 호출합니다.

csharp

using System;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Media;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer timer;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTimer();
        }

        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(10); // 10초마다 갱신
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            UpdateUIWithSqlData();
        }

        private void UpdateUIWithSqlData()
        {
            try
            {
                using (SqlConnection conn = new SqlConnection("YourConnectionString"))
                {
                    conn.Open();
                    using (SqlCommand cmd = new SqlCommand("SELECT num1, num2, num3 FROM YourTable", conn))
                    {
                        using (SqlDataReader reader = cmd.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                UpdateLabel(Label1, reader.GetInt32(0));
                                UpdateLabel(Label2, reader.GetInt32(1));
                                UpdateLabel(Label3, reader.GetInt32(2));
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error: " + ex.Message);
            }
        }

        private void UpdateLabel(Label label, int number)
        {
            label.Content = number.ToString();
            label.Background = number > 0 ? Brushes.Orange : Brushes.Transparent;
        }
    }
}

중요 사항:

    YourConnectionString과 YourTable을 실제 데이터베이스 연결 문자열과 테이블 이름으로 바꾸세요.
    이 코드는 WPF 프로젝트에 맞게 구성되었으며, Label1, Label2, Label3은 XAML에서 정의된 라벨 컨트롤의 이름입니다.
    에러 핸들링을 위해 try-catch 블록을 사용했습니다.
    타이머는 10초마다 UI를 갱신하도록 설정되어 있습니다. 필요에 따라 간격을 조정할 수 있습니다.

위 코드는 MSSQL 데이터베이스에서 데이터를 조회하고, 결과에 따라 WPF 라벨의 텍스트와 배경색을 업데이트하는 기본적인 로직을 제공합니다. 데이터베이스 구조, 연결 설정, UI 디자인에 따라 코드를 적