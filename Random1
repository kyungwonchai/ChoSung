알겠습니다. RouterACRAlarm 애플리케이션을 API 24를 대상으로 Kotlin DSL을 사용하여 완성도 높은 전문가 수준의 코드로 작성하겠습니다. 아래는 프로젝트의 전체적인 구조, 필요한 파일들, 각 파일의 내용 및 자세한 주석을 포함한 코드입니다.

프로젝트 구조
css
코드 복사
RouterACRAlarm/
├── app/
│   ├── src/
│   │   ├── main/
│   │   │   ├── java/com/dxmxsmd/routeracralarm/
│   │   │   │   ├── MainActivity.kt
│   │   │   │   ├── DataActivity.kt
│   │   │   │   ├── TableData.kt
│   │   │   │   ├── DataAdapter.kt
│   │   │   ├── res/
│   │   │   │   ├── layout/
│   │   │   │   │   ├── activity_main.xml
│   │   │   │   │   ├── activity_data.xml
│   │   │   │   │   ├── list_item.xml
│   │   │   │   ├── drawable/
│   │   │   │   │   ├── ic_notification.xml
│   │   │   ├── AndroidManifest.xml
├── build.gradle.kts
1. 프로젝트 설정 (build.gradle.kts)
build.gradle.kts 파일은 이미 이전 단계에서 제공되었으므로, 여기서는 추가적으로 MSSQL 연결을 위한 JDBC 라이브러리를 추가합니다. MSSQL에 직접 연결하려면 jTDS 드라이버를 사용할 수 있습니다.

kotlin
코드 복사
plugins {
    id("com.android.application")
    kotlin("android")
}

android {
    compileSdk = 33 // 최신 SDK 사용 가능

    defaultConfig {
        applicationId = "com.dxmxsmd.routeracralarm"
        minSdk = 24 // API 24 기준
        targetSdk = 33
        versionCode = 1
        versionName = "1.0"

        // 네트워크 연결을 위해 멀티스레딩을 허용
        multiDexEnabled = true
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11"
    }
}

dependencies {
    implementation("com.microsoft.signalr:signalr:5.0.12") // SignalR
    implementation("androidx.core:core-ktx:1.9.0")
    implementation("androidx.appcompat:appcompat:1.5.1")
    implementation("com.google.android.material:material:1.7.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.5.1")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1")
    implementation("net.sourceforge.jtds:jtds:1.3.1") // jTDS JDBC 드라이버
    implementation("androidx.recyclerview:recyclerview:1.2.1")
}
2. AndroidManifest.xml 설정
필요한 권한과 액티비티를 AndroidManifest.xml에 추가합니다.

xml
코드 복사
<!-- app/src/main/AndroidManifest.xml -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.dxmxsmd.routeracralarm">

    <!-- 인터넷 권한 -->
    <uses-permission android:name="android.permission.INTERNET" />

    <!-- 화면 깨우기 권한 -->
    <uses-permission android:name="android.permission.WAKE_LOCK" />

    <application
        android:allowBackup="true"
        android:icon="@drawable/ic_notification"
        android:label="RouterACRAlarm"
        android:roundIcon="@drawable/ic_notification"
        android:supportsRtl="true"
        android:theme="@style/Theme.RouterACRAlarm">
        <activity android:name=".DataActivity" />
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
3. 레이아웃 파일 생성
a. activity_main.xml
SignalR 메시지를 수신하고 알림을 표시하는 메인 화면의 레이아웃입니다. 여기에는 진동 옵션을 위한 체크박스가 포함됩니다.

xml
코드 복사
<!-- app/src/main/res/layout/activity_main.xml -->
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:id="@+id/mainLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp"
    tools:context=".MainActivity">

    <!-- 진동 옵션 체크박스 -->
    <CheckBox
        android:id="@+id/vibrationCheckBox"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="진동 사용" />

    <!-- 최근 메시지 보기 버튼 -->
    <Button
        android:id="@+id/viewMessagesButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="최근 메시지 보기"
        android:layout_marginTop="16dp" />

</LinearLayout>
b. activity_data.xml
MSSQL 데이터베이스에서 가져온 데이터를 표시하는 화면의 레이아웃입니다. RecyclerView를 사용하여 데이터를 표시합니다.

xml
코드 복사
<!-- app/src/main/res/layout/activity_data.xml -->
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/dataLayout"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="16dp">

    <!-- RecyclerView로 데이터 표시 -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

</LinearLayout>
c. list_item.xml
RecyclerView에서 각 항목을 표시할 레이아웃입니다. 모든 컬럼을 표시하기 위해 간단한 텍스트 뷰를 사용합니다.

xml
코드 복사
<!-- app/src/main/res/layout/list_item.xml -->
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:id="@+id/listItemLayout"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:padding="8dp">

    <!-- 컬럼1 -->
    <TextView
        android:id="@+id/column1TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Column1"
        android:textStyle="bold" />

    <!-- 컬럼2 -->
    <TextView
        android:id="@+id/column2TextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Column2" />

    <!-- 추가 컬럼이 있다면 여기에 추가 -->

</LinearLayout>
4. Drawable 리소스 추가
알림 아이콘을 추가합니다. ic_notification.xml 파일을 res/drawable/ 디렉토리에 생성합니다.

xml
코드 복사
<!-- app/src/main/res/drawable/ic_notification.xml -->
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M12,2A10,10 0,1 1,2 12A10,10 0,0 1,12 2m1,17h-2v-2h2v2m0,-4h-2V7h2v8z" />
</vector>
5. 데이터 모델 클래스 생성
a. TableData.kt
데이터베이스에서 가져온 데이터를 저장할 데이터 클래스입니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/TableData.kt
package com.dxmxsmd.routeracralarm

/**
 * 데이터베이스의 테이블2에서 가져온 데이터를 저장하는 데이터 클래스
 *
 * @param column1 첫 번째 컬럼 데이터
 * @param column2 두 번째 컬럼 데이터
 * // 추가 컬럼이 있다면 여기에 추가
 */
data class TableData(
    val column1: String,
    val column2: String
    // 추가 컬럼을 위한 프로퍼티
)
6. RecyclerView 어댑터 생성
DataAdapter.kt
RecyclerView에 데이터를 바인딩하기 위한 어댑터 클래스입니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataAdapter.kt
package com.dxmxsmd.routeracralarm

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

/**
 * RecyclerView 어댑터 클래스
 *
 * @param dataList 데이터 목록
 */
class DataAdapter(private val dataList: List<TableData>) :
    RecyclerView.Adapter<DataAdapter.DataViewHolder>() {

    /**
     * ViewHolder 클래스
     *
     * @param itemView 각 항목의 뷰
     */
    class DataViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val column1TextView: TextView = itemView.findViewById(R.id.column1TextView)
        val column2TextView: TextView = itemView.findViewById(R.id.column2TextView)
        // 추가 컬럼이 있다면 여기에 추가
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DataViewHolder {
        // 각 항목의 레이아웃을 inflate
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.list_item, parent, false)
        return DataViewHolder(view)
    }

    override fun onBindViewHolder(holder: DataViewHolder, position: Int) {
        // 데이터 바인딩
        val data = dataList[position]
        holder.column1TextView.text = data.column1
        holder.column2TextView.text = data.column2
        // 추가 컬럼이 있다면 여기에 추가
    }

    override fun getItemCount(): Int = dataList.size
}
7. 데이터 활동 클래스 구현
DataActivity.kt
MSSQL 데이터베이스에서 데이터를 가져와 RecyclerView에 표시하는 액티비티입니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataActivity.kt
package com.dxmxsmd.routeracralarm

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager

/**
 * 데이터 활동 클래스
 * MSSQL 데이터베이스에서 최근 20개의 데이터를 가져와 RecyclerView에 표시
 */
class DataActivity : ComponentActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // RecyclerView 초기화
        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        // 데이터 가져오기
        lifecycleScope.launch {
            val data = fetchDataFromDatabase()
            adapter = DataAdapter(data)
            recyclerView.adapter = adapter
        }
    }

    /**
     * 데이터베이스에서 데이터를 가져오는 함수
     *
     * @return TableData 리스트
     */
    private suspend fun fetchDataFromDatabase(): List<TableData> {
        return withContext(Dispatchers.IO) {
            val dataList = mutableListOf<TableData>()
            try {
                // JDBC URL 구성 (jTDS 드라이버 사용)
                val url = "jdbc:jtds:sqlserver://your-database-server:1433/your-database;useSSL=false"
                val username = "your-username"
                val password = "your-password"

                // 데이터베이스 연결
                Class.forName("net.sourceforge.jtds.jdbc.Driver")
                val connection: Connection = DriverManager.getConnection(url, username, password)
                val statement = connection.createStatement()

                // 쿼리 실행
                val resultSet = statement.executeQuery("SELECT TOP 20 * FROM table2")

                // 결과 처리
                while (resultSet.next()) {
                    val column1 = resultSet.getString("column1")
                    val column2 = resultSet.getString("column2")
                    // 추가 컬럼 데이터 가져오기
                    dataList.add(TableData(column1, column2))
                }

                // 리소스 해제
                resultSet.close()
                statement.close()
                connection.close()
            } catch (e: Exception) {
                Log.e("DataActivity", "데이터베이스 연결 또는 쿼리 실패", e)
            }
            dataList
        }
    }
}
주의사항:

your-database-server, your-database, your-username, your-password를 실제 데이터베이스 정보로 교체해야 합니다.
Android 앱에서 직접 MSSQL에 연결하는 것은 보안 및 성능상의 이유로 권장되지 않습니다. 보안상의 이유로 백엔드 API를 통해 데이터를 가져오는 방식을 고려하는 것이 좋습니다.
8. 메인 액티비티 구현
MainActivity.kt
SignalR을 통해 메시지를 수신하고 알림을 표시하며, 알림을 클릭하면 DataActivity로 이동하는 기능을 구현합니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/MainActivity.kt
package com.dxmxsmd.routeracralarm

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.util.Log
import android.widget.Button
import android.widget.CheckBox
import androidx.activity.ComponentActivity
import androidx.core.app.NotificationCompat
import androidx.lifecycle.lifecycleScope
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.launch

/**
 * 메인 활동 클래스
 * SignalR을 통해 메시지를 수신하고 알림을 표시
 */
class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var notificationManager: NotificationManager
    private lateinit var vibrationCheckBox: CheckBox
    private lateinit var viewMessagesButton: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main) // 레이아웃 설정

        // 진동 체크박스 초기화
        vibrationCheckBox = findViewById(R.id.vibrationCheckBox)

        // 최근 메시지 보기 버튼 초기화 및 클릭 리스너 설정
        viewMessagesButton = findViewById(R.id.viewMessagesButton)
        viewMessagesButton.setOnClickListener {
            // DataActivity로 이동
            val intent = Intent(this, DataActivity::class.java)
            startActivity(intent)
        }

        // 알림 채널 생성
        createNotificationChannel()

        // SignalR 서버 연결 설정
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address/hub") // SignalR 서버 주소로 변경
            .build()

        // SignalR 메시지 수신 대기
        hubConnection.on("ReceiveMessage", { message: String ->
            showNotification(message) // 메시지 수신 시 알림 표시
            wakeUpScreen() // 화면 깨우기
        }, String::class.java)

        // 연결 시작
        lifecycleScope.launch {
            try {
                hubConnection.start().blockingAwait()
                Log.d("SignalR", "SignalR 서버에 연결되었습니다.")
            } catch (e: Exception) {
                Log.e("SignalR", "SignalR 서버 연결 실패", e)
            }
        }
    }

    /**
     * 알림을 표시하는 함수
     *
     * @param message 수신한 메시지 내용
     */
    private fun showNotification(message: String) {
        // 알림 클릭 시 DataActivity로 이동
        val intent = Intent(this, DataActivity::class.java)
        val pendingIntent: PendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // 알림 빌더 설정
        val builder = NotificationCompat.Builder(this, "SIGNALR_CHANNEL")
            .setSmallIcon(R.drawable.ic_notification) // 알림 아이콘
            .setContentTitle("새 메시지 수신")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)

        // 진동 설정
        if (vibrationCheckBox.isChecked) {
            builder.setVibrate(longArrayOf(0, 500, 1000))
        }

        // 알림 표시
        notificationManager.notify(1, builder.build())
    }

    /**
     * 화면을 깨우는 함수
     * 화면이 꺼져 있을 경우 3초 동안 화면을 켬
     */
    private fun wakeUpScreen() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        val isScreenOn = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
            powerManager.isInteractive
        } else {
            @Suppress("DEPRECATION")
            powerManager.isScreenOn
        }

        if (!isScreenOn) {
            val wakeLock = powerManager.newWakeLock(
                PowerManager.SCREEN_BRIGHT_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "RouterACRAlarm::WakeLockTag"
            )
            wakeLock.acquire(3000) // 3초 동안 화면 켜짐 유지
        }
    }

    /**
     * 알림 채널 생성 함수 (Android O 이상에서 필요)
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SignalR 알림 채널"
            val descriptionText = "SignalR 메시지 알림 채널"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel("SIGNALR_CHANNEL", name, importance).apply {
                description = descriptionText
            }
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        } else {
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        }
    }
}
주의사항:

https://your-signalr-server-address/hub을 실제 SignalR 서버 주소로 변경해야 합니다.
SignalR 서버는 ReceiveMessage라는 메서드로 메시지를 전송해야 합니다.
9. 아이콘 리소스 추가
알림 아이콘을 추가합니다. ic_notification.xml을 res/drawable/ 디렉토리에 생성합니다.

xml
코드 복사
<!-- app/src/main/res/drawable/ic_notification.xml -->
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="24dp"
    android:height="24dp"
    android:viewportWidth="24.0"
    android:viewportHeight="24.0">
    <path
        android:fillColor="#FF000000"
        android:pathData="M12,2A10,10 0,1 1,2 12A10,10 0,0 1,12 2m1,17h-2v-2h2v2m0,-4h-2V7h2v8z" />
</vector>
10. 앱의 실행 흐름 요약
앱 시작:

MainActivity가 시작되고, 레이아웃이 설정됩니다.
SignalR 서버에 연결을 시도합니다.
ReceiveMessage 이벤트를 수신 대기합니다.
메시지 수신:

SignalR 서버로부터 메시지가 수신되면 showNotification 함수가 호출됩니다.
알림이 표시되고, 화면이 꺼져 있으면 wakeUpScreen 함수가 호출되어 화면을 깨웁니다.
알림 클릭:

알림을 클릭하면 DataActivity가 열리고, 최근 20개의 데이터를 RecyclerView에 표시합니다.
데이터 표시:

DataActivity에서 MSSQL 데이터베이스에 연결하여 최근 20개의 데이터를 가져옵니다.
RecyclerView를 통해 데이터를 표시합니다.
11. 추가 고려 사항
보안: 안드로이드 앱에서 직접 데이터베이스에 연결하는 것은 보안상 매우 위험합니다. 이를 대신하여 백엔드 API를 통해 데이터를 가져오는 방식을 권장합니다.
에러 처리: 데이터베이스 연결 실패나 SignalR 연결 실패 등의 에러를 사용자에게 적절히 알리고, 재시도 로직을 구현하는 것이 좋습니다.
성능 최적화: 데이터베이스 연결 및 쿼리는 백그라운드 스레드에서 실행되므로, UI 스레드가 차단되지 않도록 해야 합니다.
12. 전체 소스 코드 정리
a. MainActivity.kt
kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/MainActivity.kt
package com.dxmxsmd.routeracralarm

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.util.Log
import android.widget.Button
import android.widget.CheckBox
import androidx.activity.ComponentActivity
import androidx.core.app.NotificationCompat
import androidx.lifecycle.lifecycleScope
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.launch

/**
 * 메인 활동 클래스
 * SignalR을 통해 메시지를 수신하고 알림을 표시
 */
class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var notificationManager: NotificationManager
    private lateinit var vibrationCheckBox: CheckBox
    private lateinit var viewMessagesButton: Button

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main) // 레이아웃 설정

        // 진동 체크박스 초기화
        vibrationCheckBox = findViewById(R.id.vibrationCheckBox)

        // 최근 메시지 보기 버튼 초기화 및 클릭 리스너 설정
        viewMessagesButton = findViewById(R.id.viewMessagesButton)
        viewMessagesButton.setOnClickListener {
            // DataActivity로 이동
            val intent = Intent(this, DataActivity::class.java)
            startActivity(intent)
        }

        // 알림 채널 생성
        createNotificationChannel()

        // SignalR 서버 연결 설정
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address/hub") // SignalR 서버 주소로 변경
            .build()

        // SignalR 메시지 수신 대기
        hubConnection.on("ReceiveMessage", { message: String ->
            showNotification(message) // 메시지 수신 시 알림 표시
            wakeUpScreen() // 화면 깨우기
        }, String::class.java)

        // 연결 시작
        lifecycleScope.launch {
            try {
                hubConnection.start().blockingAwait()
                Log.d("SignalR", "SignalR 서버에 연결되었습니다.")
            } catch (e: Exception) {
                Log.e("SignalR", "SignalR 서버 연결 실패", e)
            }
        }
    }

    /**
     * 알림을 표시하는 함수
     *
     * @param message 수신한 메시지 내용
     */
    private fun showNotification(message: String) {
        // 알림 클릭 시 DataActivity로 이동
        val intent = Intent(this, DataActivity::class.java)
        val pendingIntent: PendingIntent = PendingIntent.getActivity(
            this,
            0,
            intent,
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )

        // 알림 빌더 설정
        val builder = NotificationCompat.Builder(this, "SIGNALR_CHANNEL")
            .setSmallIcon(R.drawable.ic_notification) // 알림 아이콘
            .setContentTitle("새 메시지 수신")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)

        // 진동 설정
        if (vibrationCheckBox.isChecked) {
            builder.setVibrate(longArrayOf(0, 500, 1000))
        }

        // 알림 표시
        notificationManager.notify(1, builder.build())
    }

    /**
     * 화면을 깨우는 함수
     * 화면이 꺼져 있을 경우 3초 동안 화면을 켬
     */
    private fun wakeUpScreen() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        val isScreenOn = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
            powerManager.isInteractive
        } else {
            @Suppress("DEPRECATION")
            powerManager.isScreenOn
        }

        if (!isScreenOn) {
            val wakeLock = powerManager.newWakeLock(
                PowerManager.SCREEN_BRIGHT_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "RouterACRAlarm::WakeLockTag"
            )
            wakeLock.acquire(3000) // 3초 동안 화면 켜짐 유지
        }
    }

    /**
     * 알림 채널 생성 함수 (Android O 이상에서 필요)
     */
    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SignalR 알림 채널"
            val descriptionText = "SignalR 메시지 알림 채널"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel("SIGNALR_CHANNEL", name, importance).apply {
                description = descriptionText
            }
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        } else {
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        }
    }
}
b. DataActivity.kt
kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataActivity.kt
package com.dxmxsmd.routeracralarm

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager

/**
 * 데이터 활동 클래스
 * MSSQL 데이터베이스에서 최근 20개의 데이터를 가져와 RecyclerView에 표시
 */
class DataActivity : ComponentActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // RecyclerView 초기화
        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        // 데이터 가져오기
        lifecycleScope.launch {
            val data = fetchDataFromDatabase()
            adapter = DataAdapter(data)
            recyclerView.adapter = adapter
        }
    }

    /**
     * 데이터베이스에서 데이터를 가져오는 함수
     *
     * @return TableData 리스트
     */
    private suspend fun fetchDataFromDatabase(): List<TableData> {
        return withContext(Dispatchers.IO) {
            val dataList = mutableListOf<TableData>()
            try {
                // JDBC URL 구성 (jTDS 드라이버 사용)
                val url = "jdbc:jtds:sqlserver://your-database-server:1433/your-database;useSSL=false"
                val username = "your-username"
                val password = "your-password"

                // 데이터베이스 연결
                Class.forName("net.sourceforge.jtds.jdbc.Driver")
                val connection: Connection = DriverManager.getConnection(url, username, password)
                val statement = connection.createStatement()

                // 쿼리 실행
                val resultSet = statement.executeQuery("SELECT TOP 20 * FROM table2")

                // 결과 처리
                while (resultSet.next()) {
                    val column1 = resultSet.getString("column1")
                    val column2 = resultSet.getString("column2")
                    // 추가 컬럼 데이터 가져오기
                    dataList.add(TableData(column1, column2))
                }

                // 리소스 해제
                resultSet.close()
                statement.close()
                connection.close()
            } catch (e: Exception) {
                Log.e("DataActivity", "데이터베이스 연결 또는 쿼리 실패", e)
            }
            dataList
        }
    }
}
c. TableData.kt
kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/TableData.kt
package com.dxmxsmd.routeracralarm

/**
 * 데이터베이스의 테이블2에서 가져온 데이터를 저장하는 데이터 클래스
 *
 * @param column1 첫 번째 컬럼 데이터
 * @param column2 두 번째 컬럼 데이터
 * // 추가 컬럼이 있다면 여기에 추가
 */
data class TableData(
    val column1: String,
    val column2: String
    // 추가 컬럼을 위한 프로퍼티
)
d. DataAdapter.kt
kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataAdapter.kt
package com.dxmxsmd.routeracralarm

import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

/**
 * RecyclerView 어댑터 클래스
 *
 * @param dataList 데이터 목록
 */
class DataAdapter(private val dataList: List<TableData>) :
    RecyclerView.Adapter<DataAdapter.DataViewHolder>() {

    /**
     * ViewHolder 클래스
     *
     * @param itemView 각 항목의 뷰
     */
    class DataViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        val column1TextView: TextView = itemView.findViewById(R.id.column1TextView)
        val column2TextView: TextView = itemView.findViewById(R.id.column2TextView)
        // 추가 컬럼이 있다면 여기에 추가
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): DataViewHolder {
        // 각 항목의 레이아웃을 inflate
        val view = LayoutInflater.from(parent.context)
            .inflate(R.layout.list_item, parent, false)
        return DataViewHolder(view)
    }

    override fun onBindViewHolder(holder: DataViewHolder, position: Int) {
        // 데이터 바인딩
        val data = dataList[position]
        holder.column1TextView.text = data.column1
        holder.column2TextView.text = data.column2
        // 추가 컬럼이 있다면 여기에 추가
    }

    override fun getItemCount(): Int = dataList.size
}
13. 추가 사항 및 개선
앱 아이콘 변경:

기본 아이콘을 원하는 아이콘으로 변경하려면 ic_notification.xml 파일을 수정하거나 res/mipmap/ 디렉토리에 원하는 아이콘을 추가하세요.
보안 강화:

데이터베이스 연결 정보를 코드에 직접 포함시키지 않고, 보안이 강화된 방법으로 저장하거나, 백엔드 API를 통해 데이터를 가져오는 방식을 고려하세요.
에러 핸들링:

SignalR 연결 실패 시 재시도 로직을 추가하고, 사용자에게 알림을 제공하는 기능을 구현하세요.
데이터베이스 연결 실패 시 사용자에게 적절한 메시지를 표시하고, 재시도 기능을 추가하세요.
UI 개선:

RecyclerView 항목 레이아웃을 개선하여 더 많은 정보를 보기 쉽게 표시하세요.
알림을 사용자 친화적으로 디자인하세요.
14. 테스트 및 디버깅
SignalR 서버 설정:

SignalR 서버가 올바르게 설정되고, ReceiveMessage 메서드를 통해 메시지를 전송할 수 있는지 확인하세요.
데이터베이스 연결 테스트:

MSSQL 데이터베이스에 올바르게 연결되고, 쿼리가 성공적으로 실행되는지 테스트하세요.
알림 기능 테스트:

메시지가 수신될 때 알림이 제대로 표시되고, 클릭 시 DataActivity로 이동하는지 확인하세요.
진동 옵션이 체크박스 상태에 따라 작동하는지 확인하세요.
화면 깨우기 테스트:

화면이 꺼져 있을 때 메시지를 수신하면 화면이 깨워지는지 테스트하세요.
결론
위의 단계들을 따라 프로젝트를 설정하고, 필요한 모든 파일과 코드를 작성하면 RouterACRAlarm 애플리케이션이 완성됩니다. 이 애플리케이션은 SignalR을 통해 서버 메시지를 수신하고, 알림을 표시하며, MSSQL 데이터베이스에서 데이터를 가져와 표시하는 기능을 갖추고 있습니다. 추가적으로 보안 강화 및 에러 핸들링을 통해 안정성을 높일 수 있습니다.