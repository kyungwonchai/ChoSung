오류 원인: highlight_max() 함수의 반환값 문제
에러 메시지: NOT ALL ARGUMENTS CONVERTED DURING STRING FORMATTING
이 에러는 함수에서 반환된 스타일 리스트가 잘못 처리될 때 발생합니다.

✅ 오류 원인 분석
문제는 highlight_max() 함수의 반환 값이 잘못 처리되는 것입니다.
특히, .apply() 함수는 각 행을 전달할 때 데이터 시리즈로 전달하므로,
열을 지정할 때 직접 인덱싱(row[column_name]) 방식으로 접근해야 합니다.

✅ 해결 방법: highlight_max() 함수 수정하기
수정 사항: mc_columns 범위로 스타일 적용 시 열 이름을 기준으로 강조 표시.

✅ 수정된 코드 (오류 수정)
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data(proc_name):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(f"EXEC {proc_name}")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 함수 (전체 높이 사용)
def create_dataframe(rows):
    original_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "ACT2_1", "ACT2_2", "ACT2_3", "ACT2_4",
        "ACT2_5", "ACT2_6", "ACT2_7", "ACT2_8"
    ]

    new_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    df = pd.DataFrame(rows, columns=original_columns)
    df.columns = new_columns

    mc_columns = [f"MC{i}" for i in range(1, 9)]
    df[mc_columns] = df[mc_columns].astype(float).round(2)

    return df, mc_columns

# Streamlit 앱 구성
def main():
    st.set_page_config(page_title="MC1 ~ MC8 Data Table", layout="wide")
    st.title("MC1 ~ MC8 Data Table - 가독성 개선 및 강조 표시")

    rows = fetch_main_data("Get_min_bestdifferent_t1")
    
    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        df, mc_columns = create_dataframe(rows)

        # 행별 배경색을 번갈아 적용하기
        def apply_row_styles(row):
            if row.name % 2 == 0:
                return ['background-color: #E0FFFF'] * len(row)  # 아쿠아
            else:
                return ['background-color: white'] * len(row)  # 흰색

        # 최대값 강조 함수 (노란색)
        def highlight_max(row):
            max_value = row[mc_columns].max()
            return ['background-color: yellow' if value == max_value else '' for value in row[mc_columns]]

        # 스타일 적용 (배경색 + 최대값 강조)
        styled_df = df.style.apply(apply_row_styles, axis=1)
        styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)

        # 스타일링된 DataFrame 표시
        st.write(styled_df)

if __name__ == "__main__":
    main()
✅ 코드 설명
highlight_max() 함수 수정 (에러 해결)

python
코드 복사
def highlight_max(row):
    max_value = row[mc_columns].max()
    return ['background-color: yellow' if value == max_value else '' for value in row[mc_columns]]
row[mc_columns]로 지정된 열의 값들 중 가장 큰 값을 찾아 강조.

값을 비교할 때 정확히 값으로 비교하도록 수정 (value == max_value).

스타일링 적용 순서 유지

python
코드 복사
styled_df = df.style.apply(apply_row_styles, axis=1)
styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)
배경색을 먼저 적용하고, 그 위에 최대값 스타일을 덮어쓰기.

📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
🔥 결과
테이블의 짝수 행은 아쿠아 (#E0FFFF), 홀수 행은 흰색으로 교차 배경 적용.

MC1 ~ MC8 값 중 가장 큰 값은 노란색으로 강조 표시됨.

기존 방식대로 st.write(styled_df) 사용.