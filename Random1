램을 개발하기 위한 예시 코드와 MSSQL 스크립트를 제시합니다. 프로그램은 과제 이름을 입력하고 추가 버튼을 클릭하면 기존에 추가된 과제인지 체크하여 없을 경우 추가하고, GridControl을 갱신하여 표시합니다. 또한, 과제 이름을 클릭하면 제목, 본문 내용 및 수신인 목록을 관리할 수 있는 입력 칸들이 나타납니다.
MSSQL 스크립트

sql

-- 데이터베이스 생성
CREATE DATABASE TaskManagerDB;

-- 데이터베이스 사용
USE TaskManagerDB;

-- 과제 테이블 생성
CREATE TABLE Tasks (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    Name NVARCHAR(100) NOT NULL
);

-- 과제 상세 테이블 생성
CREATE TABLE TaskDetails (
    ID INT PRIMARY KEY,
    Title NVARCHAR(100) NOT NULL,
    Content NVARCHAR(MAX) NOT NULL
);

-- 수신인 목록 테이블 생성
CREATE TABLE Recipients (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    TaskID INT NOT NULL,
    Address NVARCHAR(100) NOT NULL,
    Method NVARCHAR(100) NOT NULL
);

-- 외래 키 설정
ALTER TABLE TaskDetails
    ADD CONSTRAINT FK_TaskDetails_Tasks FOREIGN KEY (ID) REFERENCES Tasks(ID) ON DELETE CASCADE;

ALTER TABLE Recipients
    ADD CONSTRAINT FK_Recipients_Tasks FOREIGN KEY (TaskID) REFERENCES Tasks(ID) ON DELETE CASCADE;

C# WinForms 예시 코드

csharp

using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;
using DevExpress.XtraGrid.Views.Grid;

namespace TaskManager
{
    public partial class MainForm : DevExpress.XtraEditors.XtraForm
    {
        private SqlConnection sqlConnection;
        private SqlDataAdapter tasksDataAdapter;
        private SqlDataAdapter taskDetailsDataAdapter;
        private SqlDataAdapter recipientsDataAdapter;
        private DataSet dataSet;

        public MainForm()
        {
            InitializeComponent();

            // SQL 연결 문자열 설정
            string connectionString = "Data Source=(local);Initial Catalog=TaskManagerDB;Integrated Security=True";

            // SQL 연결 및 데이터 어댑터 초기화
            sqlConnection = new SqlConnection(connectionString);
            tasksDataAdapter = new SqlDataAdapter("SELECT * FROM Tasks", sqlConnection);
            taskDetailsDataAdapter = new SqlDataAdapter("SELECT * FROM TaskDetails", sqlConnection);
            recipientsDataAdapter = new SqlDataAdapter("SELECT * FROM Recipients", sqlConnection);

            // DataSet 초기화
            dataSet = new DataSet();

            // 데이터 어댑터를 통해 데이터를 DataSet에 로드
            tasksDataAdapter.Fill(dataSet, "Tasks");
            taskDetailsDataAdapter.Fill(dataSet, "TaskDetails");
            recipientsDataAdapter.Fill(dataSet, "Recipients");

            // GridControl에 DataSet을 바인딩
            gridControl1.DataSource = dataSet.Tables["Tasks"];
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // 변경된 데이터를 데이터베이스에 반영
            SqlCommandBuilder tasksCommandBuilder = new SqlCommandBuilder(tasksDataAdapter);
            tasksDataAdapter.Update(dataSet, "Tasks");

            SqlCommandBuilder taskDetailsCommandBuilder = new SqlCommandBuilder(taskDetailsDataAdapter);
            taskDetailsDataAdapter.Update(dataSet, "TaskDetails");

User
이어서
ChatGPT

Sure, here's the continuation of the code:

csharp

            SqlCommandBuilder recipientsCommandBuilder = new SqlCommandBuilder(recipientsDataAdapter);
            recipientsDataAdapter.Update(dataSet, "Recipients");
        }

        private void btnAddTask_Click(object sender, EventArgs e)
        {
            string taskName = txtTaskName.Text;

            // 과제 이름이 이미 추가되었는지 확인
            DataRow[] existingRows = dataSet.Tables["Tasks"].Select($"Name = '{taskName}'");
            if (existingRows.Length > 0)
            {
                MessageBox.Show("이미 추가된 과제입니다.");
                return;
            }

            // 새로운 과제 추가
            DataRow taskRow = dataSet.Tables["Tasks"].NewRow();
            taskRow["Name"] = taskName;
            dataSet.Tables["Tasks"].Rows.Add(taskRow);

            // 데이터베이스에 변경사항 반영
            tasksDataAdapter.Update(dataSet, "Tasks");

            // GridControl 갱신
            gridView1.RefreshData();

            // 입력 필드 초기화
            txtTaskName.Text = "";
        }

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            // 선택된 과제의 ID 가져오기
            GridView view = (GridView)sender;
            DataRow selectedTaskRow = view.GetFocusedDataRow();
            if (selectedTaskRow != null)
            {
                int taskID = Convert.ToInt32(selectedTaskRow["ID"]);

                // TaskDetails 및 Recipients 데이터 필터링
                dataSet.Tables["TaskDetails"].DefaultView.RowFilter = $"ID = {taskID}";
                dataSet.Tables["Recipients"].DefaultView.RowFilter = $"TaskID = {taskID}";
            }
        }

        private void btnAddRecipient_Click(object sender, EventArgs e)
        {
            DataRow selectedTaskRow = gridView1.GetFocusedDataRow();
            if (selectedTaskRow != null)
            {
                int taskID = Convert.ToInt32(selectedTaskRow["ID"]);

                // 새로운 수신인 추가
                DataRow recipientRow = dataSet.Tables["Recipients"].NewRow();
                recipientRow["TaskID"] = taskID;
                recipientRow["Address"] = txtRecipientAddress.Text;
                recipientRow["Method"] = txtRecipientMethod.Text;
                dataSet.Tables["Recipients"].Rows.Add(recipientRow);

                // 데이터베이스에 변경사항 반영
                recipientsDataAdapter.Update(dataSet, "Recipients");

                // 입력 필드 초기화
                txtRecipientAddress.Text = "";
                txtRecipientMethod.Text = "";
            }
        }

        private void btnDeleteRecipient_Click(object sender, EventArgs e)
        {
            DataRowView selectedRecipientRow = (DataRowView)gridView2.GetFocusedRow();
            if (selectedRecipientRow != null)
            {
                selectedRecipientRow.Row.Delete();

                // 데이터베이스에 변경사항 반영
                recipientsDataAdapter.Update(dataSet, "Recipients");
            }
        }
    }
}

위의 코드는 DevExpress WinForms를 사용하여 과제 관리 프로그램을 구현하는 데 필요한 기능들을 담고 있습니다. MainForm 클래스는 폼의 이벤트 핸들러 및 데이터베이스 연결을 관리합니다.

폼 디자인에서 "추가" 버튼 (btnAddTask) 및 "추가" 버튼 (btnAddRecipient)과 연결된 클릭 이벤트 핸들러를 작성해야 합니다. 