// FILE_ID: Views/MainWindow_CS_20250410154000
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using DevExpress.Xpf.Printing; // PrintableControlLink 사용
using DevExpress.XtraPrinting; // PrintingSystem, XlsxExportOptionsEx, IPrintable 사용
using DevExpress.Utils; // DefaultBoolean 사용
using System.Collections.Generic;
using System.Linq;

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try { disposableViewModel.Dispose(); }
                catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel Dispose 오류: {ex.Message}"); }
            }
        }

        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            string newFieldName = e.NewColumn?.FieldName;
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            var newItem = e.NewItem as LockerAssignment;
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        private void ExportExcelButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Workbook (*.xlsx)|*.xlsx",
                FileName = $"사물함현황_{DateTime.Now:yyyyMMdd}.xlsx",
                Title = "엑셀 파일 저장"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                GridSortInfo[] originalSortInfo = null;
                int originalGroupCount = 0;
                GridControl grid = mainTableView.Grid;

                // PrintingSystem 인스턴스 생성
                PrintingSystemBase printingSystem = new PrintingSystemBase();
                // PrintableControlLink 인스턴스 생성용 Link
                PrintableControlLink link1 = null;
                PrintableControlLink link2 = null;

                try
                {
                    ViewModel.StatusBarText = "엑셀 파일 생성 중...";

                    // 1. 현재 그리드 상태(정렬, 필터 등)를 사용하여 "전체시트" 링크 생성
                    link1 = new PrintableControlLink((TableView)mainTableView.View) { SheetName = "전체시트" };

                    // 2. "소파트별시트"를 위해 그리드 그룹핑 임시 적용 및 링크 생성
                    originalSortInfo = grid.SortInfo.ToArray();
                    originalGroupCount = grid.GroupCount;
                    grid.ClearGrouping();
                    grid.GroupBy("SubPart");
                    grid.ExpandAllGroups();

                    link2 = new PrintableControlLink((TableView)mainTableView.View) { SheetName = "소파트별시트" };

                    // 3. 두 링크를 합쳐서 엑셀 파일로 내보내기
                    var links = new List<IPrintable> { link1, link2 };
                    var compositeLink = new CompositeLink(links);

                    // PrintableControlLink를 PrintingSystem에 연결
                    compositeLink.PrintingSystemBase = printingSystem;

                    var options = new XlsxExportOptionsEx
                    {
                        ExportType = DevExpress.Export.ExportType.DataAware,
                        ShowGridLines = true,
                        ShowColumnHeaders = DefaultBoolean.True,
                        ShowGroupSummaries = DefaultBoolean.True
                        // GroupRows 속성 제거됨
                    };

                    // CompositeLink를 사용하여 내보내기
                    compositeLink.ExportToXlsx(filePath, options);

                    ViewModel.StatusBarText = "엑셀 파일 저장 완료.";
                    MessageBox.Show($"엑셀 파일 저장 완료:\n{filePath}", "저장 성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                     ViewModel.StatusBarText = "엑셀 파일 저장 오류.";
                     MessageBox.Show($"엑셀 파일 저장 중 오류 발생:\n{ex.ToString()}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
                finally
                {
                    // 4. PrintingSystem 및 Link 리소스 해제
                    link1?.Dispose();
                    link2?.Dispose();
                    printingSystem?.Dispose();

                    // 5. 그리드 그룹핑 및 정렬 상태 원복
                    try
                    {
                        grid.ClearGrouping();
                        if (originalSortInfo != null)
                        {
                             grid.SortInfo.Clear();
                             foreach(var sortInfo in originalSortInfo)
                             {
                                 grid.SortInfo.Add(sortInfo);
                             }
                        }
                        Debug.WriteLine("Grid layout restored after export.");
                    }
                    catch(Exception layoutEx)
                    {
                        Debug.WriteLine($"!!! 그리드 레이아웃 복구 중 오류: {layoutEx.Message}");
                    }
                }
            }
        }
    }
}
```

**핵심 변경 사항:**

* **`using` 지시문 확인:** 필요한 네임스페이스(`DevExpress.Xpf.Grid`, `DevExpress.Xpf.Printing`, `DevExpress.XtraPrinting`, `DevExpress.Utils`)가 포함되어 있는지 확인합니다.
* **`IPrintable`:** `List<IPrintable>`을 사용하여 링크 목록을 생성합니다. 이 타입은 `DevExpress.XtraPrinting` 네임스페이스에 있습니다.
* **`SheetName`:** `PrintableControlLink`의 `SheetName` 속성은 그대로 사용합니다. 오류가 발생했다면 참조 문제일 가능성이 높습니다.
* **`GroupRows` 제거:** `XlsxExportOptionsEx`에서 지원되지 않는 `GroupRows` 속성 설정을 제거했습니다. `ExportType = DataAware` 설정 시 일반적으로 그룹 정보가 포함되어 내보내집니다.
* **`PrintingSystemBase` 사용:** `CompositeLink`를 사용하여 여러 링크(시트)를 내보낼 때는 `PrintingSystemBase` 객체를 생성하고 연결하는 것이 더 안정적일 수 있습니다. 관련 코드를 추가하고 `finally` 블록에서 `Dispose`를 호출하여 리소스를 해제합니다.

**다시 한번 확인:**

* 프로젝트 참조에 **`DevExpress.Printing.vXX.Y.Core.dll`** 와 **`DevExpress.Xpf.Printing.vXX.Y.dll`** 이 포함되어 있는지 꼭 확인해 주세요.