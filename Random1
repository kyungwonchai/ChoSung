짜 선택과 관련된 부분을 수정하여 이벤트 또는 바인딩으로 DatePicker의 값을 처리하는 방식을 다시 제공합니다.

수정된 XAML 코드
날짜 선택 시 이벤트를 트리거하거나, 날짜 값이 변경되었을 때 동적으로 처리될 수 있도록 XAML과 C#을 연결합니다.

xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 컨트롤 -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <ListBox x:Name="LineListBox" SelectionMode="Extended" />

            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <DatePicker x:Name="StartDatePicker" SelectedDateChanged="OnStartDateChanged" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <DatePicker x:Name="EndDatePicker" SelectedDateChanged="OnEndDateChanged" />
            </StackPanel>

            <CheckBox x:Name="AutoRefreshCheckBox" Content="자동 갱신" Margin="0,20,0,10" />
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <dxc:ChartControl x:Name="LineChart" Grid.Column="1" Margin="10">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.WholeRange>
                                <dxc:Range MinValue="-1" MaxValue="1" />
                            </dxc:AxisY2D.WholeRange>
                            <dxc:AxisY2D.ConstantLines>
                                <dxc:ConstantLine Value="0.6" Brush="Green">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Upper Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                                <dxc:ConstantLine Value="-0.6" Brush="Red">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Lower Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                            </dxc:AxisY2D.ConstantLines>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
            </dxc:ChartControl>
        </Grid>
    </Window>
수정된 C# 코드 (MainWindow.xaml.cs)
날짜 변경 이벤트 핸들러 추가
DatePicker의 날짜가 변경되었을 때 값을 저장하거나 다른 동작을 트리거하는 이벤트를 추가했습니다.

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Timers;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private DateTime startDate;
        private DateTime endDate;

        public MainWindow()
        {
            InitializeComponent();
            InitializeDates();
        }

        private void InitializeDates()
        {
            // 기본 날짜 설정 (현재 날짜)
            startDate = DateTime.Now.Date.AddDays(-7); // 7일 전
            endDate = DateTime.Now.Date;
            StartDatePicker.SelectedDate = startDate;
            EndDatePicker.SelectedDate = endDate;
        }

        private void OnStartDateChanged(object sender, RoutedEventArgs e)
        {
            if (StartDatePicker.SelectedDate != null)
            {
                startDate = StartDatePicker.SelectedDate.Value;
                Console.WriteLine($"시작 날짜 변경: {startDate}");
            }
        }

        private void OnEndDateChanged(object sender, RoutedEventArgs e)
        {
            if (EndDatePicker.SelectedDate != null)
            {
                endDate = EndDatePicker.SelectedDate.Value;
                Console.WriteLine($"종료 날짜 변경: {endDate}");
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = LineListBox.SelectedItems.Cast<string>().ToList();
            if (!selectedLines.Any())
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            LoadChartData(selectedLines, startDate, endDate);
        }

        private void LoadChartData(List<string> selectedLines, DateTime startDate, DateTime endDate)
        {
            // DB에서 데이터 조회 및 차트 업데이트
            Console.WriteLine($"조회 - 라인: {string.Join(",", selectedLines)}, 날짜: {startDate} ~ {endDate}");
            // 여기에 DB 연결 및 데이터 조회 코드 작성
        }
    }
}
주요 변경 사항
SelectedDateChanged 이벤트:

StartDatePicker와 EndDatePicker에서 날짜가 변경되면 각각 OnStartDateChanged와 OnEndDateChanged 이벤트를 호출.
변경된 날짜 값을 startDate와 endDate 변수에 저장.
기본 날짜 설정:

InitializeDates 메서드를 통해 기본 날짜 범위를 현재 날짜와 7일 전으로 설정.
조회 버튼 (SearchButton):

선택된 라인과 날짜를 기준으로 데이터 조회를 트리거.
startDate와 endDate 값을 사용하여 쿼리를 실행하거나 데이터를 처리.
실행 결과
날짜를 선택하면 자동으로 해당 날짜를 startDate와 endDate 변수에 저장.