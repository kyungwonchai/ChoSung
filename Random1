고, 체크 상태에 따라 동작하는 코드를 구현하는 방법을 설명하겠습니다. 이를 위해 CheckBox의 IsChecked 속성과 커맨드를 바인딩하여 체크 여부에 따라 동작을 결정합니다.

1. XAML 파일 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WpfApp"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <!-- MainViewModel을 DataContext로 설정 -->
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <!-- CheckBox에 Command 및 IsChecked 바인딩 -->
        <CheckBox Content="Enable Feature" 
                  IsChecked="{Binding IsFeatureEnabled, Mode=TwoWay}"
                  Command="{Binding CheckBoxCommand}"
                  CommandParameter="{Binding IsFeatureEnabled}"
                  HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>
설명:
IsChecked 바인딩: CheckBox의 IsChecked 속성은 MainViewModel의 IsFeatureEnabled 속성에 바인딩됩니다. 이 속성의 변경은 양방향(Mode=TwoWay)으로 동작하여 View와 ViewModel 간의 동기화를 유지합니다.
Command 및 CommandParameter: CheckBox의 Command는 CheckBoxCommand에 바인딩되며, CommandParameter로 IsChecked 상태 (IsFeatureEnabled 속성)를 전달합니다.
2. MainViewModel.cs (뷰모델)
csharp
코드 복사
using System;
using System.ComponentModel;
using System.Windows.Input;

namespace WpfApp
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private bool _isFeatureEnabled;

        // 속성 변경 이벤트
        public event PropertyChangedEventHandler PropertyChanged;

        // CheckBox의 IsChecked 상태를 관리하는 속성
        public bool IsFeatureEnabled
        {
            get { return _isFeatureEnabled; }
            set
            {
                _isFeatureEnabled = value;
                OnPropertyChanged("IsFeatureEnabled");
            }
        }

        // CheckBox 상태 변경을 처리하는 Command
        public ICommand CheckBoxCommand { get; }

        // 생성자
        public MainViewModel()
        {
            // Command 초기화
            CheckBoxCommand = new RelayCommand(OnCheckBoxChanged);
        }

        // CheckBox 상태 변경 처리
        private void OnCheckBoxChanged(object parameter)
        {
            bool isChecked = (bool)parameter;
            if (isChecked)
            {
                // 체크되었을 때 동작
                EnableFeature();
            }
            else
            {
                // 체크 해제되었을 때 동작
                DisableFeature();
            }
        }

        // 특정 기능 활성화 메서드
        private void EnableFeature()
        {
            Console.WriteLine("Feature Enabled");
            // 여기서 기능 활성화 동작 구현
        }

        // 특정 기능 비활성화 메서드
        private void DisableFeature()
        {
            Console.WriteLine("Feature Disabled");
            // 여기서 기능 비활성화 동작 구현
        }

        // 속성 변경 알림
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    // RelayCommand 클래스 (명령을 처리)
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Func<object, bool> _canExecute;

        public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
        {
            _execute = execute;
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }

        public event EventHandler CanExecuteChanged;
    }
}
설명:
IsFeatureEnabled 속성: CheckBox의 IsChecked 상태를 관리하는 속성입니다. 이 속성은 UI에서 양방향 바인딩을 통해 체크 상태를 반영하고, 체크 변경 시 ViewModel에서 처리됩니다.
CheckBoxCommand: RelayCommand를 사용하여 CheckBox 상태 변경 시 동작을 처리합니다. CommandParameter를 통해 IsChecked 값이 전달됩니다.
EnableFeature / DisableFeature: CheckBox가 체크되었을 때와 체크 해제되었을 때 실행될 동작을 정의합니다.
3. RelayCommand 클래스
RelayCommand는 간단한 명령 패턴을 구현하기 위한 유틸리티 클래스입니다. 이 클래스를 사용하여 Command를 처리할 수 있습니다.

4. 결과
CheckBox가 체크되면 EnableFeature 메서드가 호출되어 기능이 활성화됩니다.
CheckBox가 체크 해제되면 DisableFeature 메서드가 호출되어 기능이 비활성화됩니다.
IsChecked 속성은 양방향 바인딩으로 ViewModel의 상태와 동기화됩니다.
이 구조는 MVVM 패턴에서 CheckBox 상태와 커맨드를 함께 사용하는 예시로, 체크 여부에 따라 동작을 쉽게 처리할 수 있습