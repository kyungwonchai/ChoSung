니다. 각 행에 "수정" 버튼을 추가하고, 해당 버튼을 클릭하면 수정 페이지로 이동하여 파일과 설명을 수정할 수 있도록 하겠습니다. 또한, 수정이나 업로드가 성공적으로 완료되었을 때, 성공 메시지를 팝업으로 표시하도록 설정하겠습니다.

1. app.py 수정
app.py를 수정하여 수정 페이지를 처리하는 라우트를 추가합니다.

python
코드 복사
from flask import Flask, render_template, send_from_directory, request, redirect, url_for, flash
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # 보안을 위한 시크릿 키 설정

# 파일들이 저장된 메인 디렉토리
FILE_DIRECTORY = os.path.join(os.getcwd(), 'files')

# 업로드를 위한 허용된 파일 확장자 설정
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'zip', 'exe', 'csv'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    programs = []
    
    for folder in os.listdir(FILE_DIRECTORY):
        folder_path = os.path.join(FILE_DIRECTORY, folder)
        if os.path.isdir(folder_path):
            files = os.listdir(folder_path)
            txt_files = [f for f in files if f.endswith('.txt')]
            non_txt_files = [f for f in files if not f.endswith('.txt')]
            
            # 폴더에 파일이 두 개 이상이면 무시
            if len(txt_files) == 1 and len(non_txt_files) == 1:
                with open(os.path.join(folder_path, txt_files[0]), 'r') as f:
                    description = f.read()
                programs.append({
                    'folder': folder,
                    'filename': non_txt_files[0],
                    'description': description
                })
    
    return render_template('index.html', programs=programs)

@app.route('/download/<program>/<filename>')
def download_file(program, filename):
    folder_path = os.path.join(FILE_DIRECTORY, program)
    return send_from_directory(folder_path, filename, as_attachment=True)

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        password = request.form.get('password')
        if password != 'yourpassword':  # 업로드를 위한 비밀번호 확인
            flash('Incorrect password', 'danger')
            return redirect(request.url)

        folder_name = request.form.get('folder')
        file = request.files.get('file')
        description = request.form.get('description')

        if file and allowed_file(file.filename):
            # 폴더 경로 생성
            folder_path = os.path.join(FILE_DIRECTORY, folder_name)
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)

            # 기존 파일 삭제
            for existing_file in os.listdir(folder_path):
                if not existing_file.endswith('.txt'):
                    os.remove(os.path.join(folder_path, existing_file))

            # 새 파일과 설명 저장
            file.save(os.path.join(folder_path, file.filename))
            with open(os.path.join(folder_path, 'description.txt'), 'w') as f:
                f.write(description)

            flash('File successfully uploaded', 'success')
            return redirect(url_for('index'))

    return render_template('upload.html')

@app.route('/edit/<program>', methods=['GET', 'POST'])
def edit_file(program):
    folder_path = os.path.join(FILE_DIRECTORY, program)
    txt_file = None
    non_txt_file = None

    if request.method == 'POST':
        password = request.form.get('password')
        if password != 'yourpassword':  # 파일 수정을 위한 비밀번호 확인
            flash('Incorrect password', 'danger')
            return redirect(request.url)

        file = request.files.get('file')
        description = request.form.get('description')

        if file and allowed_file(file.filename):
            # 기존 파일 삭제
            for existing_file in os.listdir(folder_path):
                if not existing_file.endswith('.txt'):
                    os.remove(os.path.join(folder_path, existing_file))

            # 새 파일과 설명 저장
            file.save(os.path.join(folder_path, file.filename))
            with open(os.path.join(folder_path, 'description.txt'), 'w') as f:
                f.write(description)

            flash('File successfully updated', 'success')
            return redirect(url_for('index'))

    # 파일 정보 로드
    for filename in os.listdir(folder_path):
        if filename.endswith('.txt'):
            txt_file = filename
        else:
            non_txt_file = filename

    description = ''
    if txt_file:
        with open(os.path.join(folder_path, txt_file), 'r') as f:
            description = f.read()

    return render_template('edit.html', program=program, non_txt_file=non_txt_file, description=description)

if __name__ == '__main__':
    app.run(host='10.222.222.222', port=8090)
2. index.html 수정
각 행에 "수정" 버튼을 추가하고, 파일이 수정되었을 때 성공 메시지를 팝업으로 표시합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Download</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-dark">
    <div class="container mt-5">
        <div class="text-center">
            <h1 class="display-4 text-light">Program Files</h1>
            <p class="lead text-light">Select a file to download and view its description.</p>
            <input type="text" id="searchInput" class="form-control mt-3" placeholder="Search...">
        </div>
        <div class="row justify-content-center mt-4">
            <div class="col-md-10">
                <table class="table table-striped table-dark">
                    <thead>
                        <tr>
                            <th style="width: 200px;">Folder Name</th>
                            <th style="width: 200px;">File Name</th>
                            <th style="width: 200px;">Description</th>
                            <th style="width: 200px;">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="programTable">
                        {% for program in programs %}
                            <tr class="program-row">
                                <td>{{ program.folder }}</td>
                                <td>
                                    <a href="{{ url_for('download_file', program=program.folder, filename=program.filename) }}" style="color: yellow; text-decoration: underline;">
                                        {{ program.filename }}
                                    </a>
                                </td>
                                <td>{{ program.description }}</td>
                                <td>
                                    <a href="{{ url_for('edit_file', program=program.folder) }}" class="btn btn-sm btn-warning">Edit</a>
                                </td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
                <a href="{{ url_for('upload_file') }}" class="btn btn-primary">Upload New File</a>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // 검색 기능 구현
        document.getElementById('searchInput').addEventListener('input', function() {
            let filter = this.value.toLowerCase();
            let rows = document.querySelectorAll('.program-row');

            rows.forEach(function(row) {
                let folderName = row.children[0].textContent.toLowerCase();
                let fileName = row.children[1].textContent.toLowerCase();
                let description = row.children[2].textContent.toLowerCase();

                if (folderName.includes(filter) || fileName.includes(filter) || description.includes(filter)) {
                    row.style.display = '';
                    row.style.backgroundColor = '#6a0dad'; // 검색된 행의 배경색 변경
                } else {
                    row.style.display = 'none';
                }
            });
        });

        // 성공 메시지 표시
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    alert("{{ message }}");
                {% endfor %}
            {% endif %}
        {% endwith %}
    </script>
</body>
</html>
3. edit.html 추가
파일 및 설명을 수정할 수 있는 edit.html 페이지를 추가합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit File</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-dark">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h1 class="text-center text-light">Edit File in {{ program }}</h1>
                <form action="{{ url_for('edit_file', program=program) }}" method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="password" class="form-label text-light">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label for="file" class="form-label text-light">Select File</label>
                        <input type="file" class="form-control" id="file" name="file" required>
                        <small class="form-text text-light">Current file: {{ non_txt_file }}</small>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label text-light">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="3" required>{{ description }}</textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
4. style.css 수정
기존의 스타일 설정을 유지하며 필요에 따라 새로운 스타일을 추가합니다.

css
코드 복사
body {
    font-family: 'Arial', sans-serif;
    background-color: #2c003e; /* 짙은 보라색 배경 */
}

h1 {
    color: #e6b3ff; /* 밝은 보라색 텍스트 */
    font-weight: bold;
}

.table {
    background-color: #3c005f; /* 테이블 배경 보라색 */
}

.table td, .table th {
    vertical-align: middle;
    color: #e6b3ff; /* 밝은 보라색 텍스트 */
}

.table a {
    color: #e6b3ff; /* 링크 색상 보라색 */
    text-decoration: none;
}

.table a:hover {
    text-decoration: underline;
}

.table-striped > tbody > tr:nth-of-type(odd) {
    background-color: #4b0082; /* 어두운 보라색 행 배경 */
}

.form-control-sm {
    margin-right: 5px;
}

.btn-primary {
    background-color: #8a2be2; /* 버튼 보라색 */
    border-color: #8a2be2;
}

.btn-primary:hover {
    background-color: #7a1be2; /* 버튼 hover 색상 */
    border-color: #7a1be2;
}

.btn-warning {
    background-color: #ffcc00; /* 노란색 버튼 */
    border-color: #ffcc00;
}

.btn-warning:hover {
    background-color: #ffb700; /* 버튼 hover 색상 */
    border-color: #ffb700;
}
5. 애플리케이션 실행
모든 파일이 수정되었으니 Flask 애플리케이션을 실행하여 웹 서버를 시작합니다.

bash
코드 복사
python3 app.py
6. 웹사이트 테스트
브라우저에서 http://10.222.222.222:8090으로 접속하여 프로그램별 파일 목록을 확인합니다.
각 행에 있는 "수정" 버튼을 클릭하여 수정 페이지로 이동할 수 있습니다.
파일을 수정하거나 설명을 변경한 후, 저장 버튼을 클릭하면 변경 사항이 적용되며, 성공 메시지가 팝업으로 표시됩니다.
이제 각 파일을 개별적으로 수정할 수 있는 기능이 추가된 Flask 애