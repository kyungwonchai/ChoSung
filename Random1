용하여 QR 코드와 바코드를 인식하는 기본적인 예제를 제공하겠습니다. 또한, 카메라가 검은 화면으로 나타나는 문제는 여러 가지 원인으로 발생할 수 있습니다. 이 문제를 해결하기 위한 몇 가지 일반적인 해결 방법도 제공하겠습니다.

1. CameraX와 ML Kit을 사용한 기본 코드
아래 코드는 CameraX와 ML Kit을 사용하여 QR 코드와 바코드를 실시간으로 인식하는 예제입니다.

MainActivity.kt
kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.ImageAnalysis
import androidx.camera.core.ImageProxy
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )
            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)

            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
activity_main.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <androidx.camera.view.PreviewView
        android:id="@+id/viewFinder"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerInParent="true" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. 검은 화면 문제 해결 방법
검은 화면 문제가 발생하는 원인과 이를 해결하기 위한 몇 가지 방법을 제시하겠습니다.

(1) 권한 문제 확인
카메라 권한이 제대로 설정되어 있는지 확인합니다. 만약 권한이 없다면 카메라가 정상적으로 작동하지 않습니다.
kotlin
코드 복사
private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
    ContextCompat.checkSelfPermission(
        baseContext, it
    ) == PackageManager.PERMISSION_GRANTED
}
(2) CameraX 버전 확인
사용 중인 CameraX 라이브러리의 버전이 최신인지 확인하세요. 구형 버전에서는 일부 디바이스에서 호환성 문제가 발생할 수 있습니다.
(3) 디바이스 호환성
특정 디바이스에서 CameraX가 제대로 작동하지 않는 경우가 있습니다. 이 문제를 해결하려면 CameraX 대신 다른 카메라 라이브러리를 사용하는 것도 고려해볼 수 있습니다.
(4) SurfaceProvider 설정 확인
Preview 객체에서 setSurfaceProvider()가 제대로 설정되어 있는지 확인합니다. PreviewView에 서피스 제공자를 올바르게 설정하지 않으면, 카메라가 미리보기를 렌더링하지 않을 수 있습니다.
kotlin
코드 복사
preview.setSurfaceProvider(viewFinder.surfaceProvider)
(5) 디버깅
로그를 추가하여 어떤 단계에서 문제가 발생하는지 파악합니다. Log.e(TAG, "message")와 같은 방법으로 어떤 부분에서 오류가 발생하는지 확인합니다.
요약
위 코드로 QR 코드 및 바코드를 인식하는 기본 설정이 가능합니다. 만약 여전히 검은 화면 문제가 발생한다면, 위의 해결 방법을 단계별로 시도해 보시기 바랍니다. 특히, 권한 문제와 CameraX 버전, 디바이스 호환성 문제를 중점적으로 