네, 알겠습니다. PM2 현재 상태를 확인하는 방법과, 워치독을 적용하기 위한 새로운 systemd 서비스를 만드는 전체 과정을 아주 상세하고 명확하게 알려드리겠습니다.

1단계: 현재 PM2 상태 확인 및 자동 시작 해제
새로운 systemd 서비스와 충돌하지 않도록, 먼저 PM2가 부팅 시 자동으로 시작되지 않도록 설정해야 합니다.

1. 현재 실행 중인 PM2 프로세스 목록 확인
아래 명령어를 입력하여 현재 PM2가 관리하고 있는 프로그램의 이름, id, 상태(online/stopped)를 확인합니다. 여기서 프로그램의 이름이나 id를 기억해두세요.

Bash

pm2 list
또는 간단하게

Bash

pm2 ls
2. PM2 자동 시작 스크립트 비활성화
가장 중요한 단계입니다. 재부팅 시 PM2가 자동으로 시작되지 않도록 아래 명령어를 실행합니다. 이렇게 해야 systemd 서비스와 충돌이 발생하지 않습니다.

Bash

pm2 unstartup
이 명령어를 실행하면, 시스템에 맞는 비활성화 명령어를 알려줄 수 있습니다. 화면에 나오는 지시를 따라 한 번 더 실행해야 할 수도 있습니다.

3. (선택) 현재 실행 중인 PM2 프로세스 정지
systemd 서비스를 시작하기 전에, PM2로 실행 중인 프로세스를 정지하는 것이 좋습니다.

Bash

# 이름으로 정지
pm2 stop [프로그램이름]

# 또는 id로 정지
pm2 stop [id]
2단계: systemd 서비스 생성 및 워치독 적용
이제 PM2를 대신하여 main.py를 직접 관리하고 워치독을 적용할 systemd 서비스 파일을 만들 차례입니다.

1. 새로운 서비스 파일 생성
nano 편집기를 사용하여 /etc/systemd/system/ 경로에 새로운 서비스 파일을 생성합니다. 파일 이름은 원하시는 대로 정하셔도 되지만, 여기서는 myapp.service로 하겠습니다.

Bash

sudo nano /etc/systemd/system/myapp.service
2. 서비스 파일 내용 작성
위 명령어를 실행하면 빈 편집기 화면이 열립니다. 아래 내용을 그대로 복사하여 붙여넣기 하세요.

※ 중요: ExecStart, WorkingDirectory, User 부분은 반드시 사용자 환경에 맞게 수정해야 합니다.

Ini, TOML

[Unit]
# 이 서비스에 대한 설명입니다. 자유롭게 수정 가능합니다.
Description=My Python Application with Watchdog

# 네트워크가 준비된 후에 서비스를 시작합니다.
After=network.target

[Service]
# ★★★★★ [수정필요] 파이썬 프로그램의 전체 실행 경로입니다. ★★★★★
# 'which python3' 명령어로 파이썬 실행 파일 경로를, 'pwd' 명령어로 스크립트 경로를 확인하세요.
ExecStart=/usr/bin/python3 /home/pi/main.py

# ★★★ [수정필요] 스크립트가 있는 디렉토리 경로입니다.
WorkingDirectory=/home/pi

# 표준 출력/에러를 저널 로그에 기록합니다.
StandardOutput=inherit
StandardError=inherit

# 어떤 이유로든 서비스가 종료되면 항상 다시 시작합니다.
Restart=always

# ★★★ [수정필요] 이 스크립트를 실행할 사용자 계정입니다. (보통 'pi')
User=pi

# ★★★★★ 워치독 설정: 이 서비스는 60초 안에 생존 신호를 보내야 합니다. ★★★★★
# 신호가 없으면 systemd는 워치독 하드웨어를 리셋하지 않아 강제 재부팅됩니다.
WatchdogSec=60

[Install]
# 시스템 부팅 시 다중 사용자 모드에서 이 서비스를 활성화합니다.
WantedBy=multi-user.target
3. 파일 저장 및 편집기 종료
내용을 모두 붙여넣고 수정했다면, 아래 순서대로 키를 눌러 저장하고 종료합니다.

Ctrl + X

Y

Enter

3단계: 새로운 서비스 활성화 및 시작
1. systemd에 새로운 서비스 알리기
새로 만든 myapp.service 파일을 systemd가 인식하도록 아래 명령어를 실행합니다.

Bash

sudo systemctl daemon-reload
2. 부팅 시 서비스 자동 시작 설정
이제부터 재부팅할 때마다 myapp.service가 자동으로 시작되도록 활성화합니다.

Bash

sudo systemctl enable myapp.service
3. 서비스 즉시 시작
서비스를 지금 바로 시작합니다.

Bash

sudo systemctl start myapp.service
4. 서비스 상태 확인
마지막으로, 서비스가 정상적으로 실행되고 있는지 상태를 확인합니다.

Bash

sudo systemctl status myapp.service
초록색으로 active (running) 이라는 문구가 보이면 성공적으로 실행된 것입니다. 문제가 있다면 빨간색으로 오류 내용이 표시됩니다. q 키를 눌러 상태 보기에서 빠져나올 수 있습니다.