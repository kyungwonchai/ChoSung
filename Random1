작업이 완료될 때 taskList에서 작업을 제거하고, 완료되지 않은 작업만 목록에 유지하도록 처리됩니다. 또한, 적재 및 배출 작업이 모두 센서 체크 후에 이루어지며, 작업 큐에 쌓인 순서대로 처리됩니다.

최종 ProcessLogLineAsync 함수:
csharp
코드 복사
// 로그 파일의 각 줄을 처리하는 메소드 (비동기 방식으로 처리)
private async Task ProcessLogLineAsync(string line, string filePath)
{
    string fileName = Path.GetFileNameWithoutExtension(filePath);
    string dayString = fileName.Substring(fileName.Length - 2); // 파일명에서 날짜 추출
    string currentYearMonth = DateTime.Now.ToString("yyyyMM"); // 현재 연도 및 월
    string fullDate = currentYearMonth + dayString; // yyyyMMdd 형식으로 날짜 조합

    // 로그 행에서 시간값(시분초.밀리초)을 추출
    string timestamp = ExtractTimestamp(line);

    // 새로운 주문이 선택된 경우 (PLAN Selected)
    if (line.Contains("PLAN Selected"))
    {
        var splitLine = line.Split(' ');
        string productOrder = splitLine[1];

        if (timestamp != null)
        {
            string fullDateTime = fullDate + " " + timestamp;

            // 새로운 주문이거나 다른 주문일 경우 처리
            if (_currentProductOrder == null || _currentProductOrder.ProductOrder != productOrder)
            {
                // 이전 주문이 있는 경우 배출 처리
                if (_previousProductOrder != null)
                {
                    // 배출 작업은 센서 체크 이후에 수행
                    if (await MonitorSensorsAsync()) // 센서 체크 먼저 수행
                    {
                        _previousProductOrder.POStatus = "out";
                        await ExecuteOutFunction(_previousProductOrder); // 배출 작업 처리
                    }
                    else
                    {
                        _taskList.Add("센서 체크 실패로 배출 중단");
                    }
                }

                // 새로운 주문 생성 및 상태 추가
                _currentProductOrder = new ProductOrderModel
                {
                    ProductOrder = productOrder,
                    PDate = fullDateTime,
                    POStatus = "wait"
                };

                _previousProductOrder = _currentProductOrder; // 현재 주문을 이전 주문으로 설정
                _productOrders.Add(_currentProductOrder); // 주문 목록에 추가
            }
        }
    }
    // FNL^ 감지 시 적재 작업 처리
    else if (line.Contains("FNL^") && _currentProductOrder != null)
    {
        _currentProductOrder.POStatus = "stack";

        // 적재 작업은 센서 체크 이후에 수행
        if (await MonitorSensorsAsync()) // 센서 체크 먼저 수행
        {
            await ExecuteStackFunction(_currentProductOrder); // 적재 작업 처리
        }
        else
        {
            _taskList.Add("센서 체크 실패로 적재 중단");
        }
    }
    // BasicModel 감지 시 주문의 모델 정보를 업데이트
    else if (line.Contains("BasicModel") && _currentProductOrder != null)
    {
        var modelData = line.Split(':')[1].Trim();
        _currentProductOrder.BasicModel = modelData;
    }
    // MB^ 감지 시 잔여 수량 및 매거진 수량 업데이트
    else if (line.Contains("MB^") && _currentProductOrder != null)
    {
        var mbData = line.Split('^');
        _currentProductOrder.PORemain = int.Parse(mbData[1]);
        _currentProductOrder.MGCount = int.Parse(mbData[2]);
    }
    // JB^ 감지 시 생산된 제품 개수 증가
    else if (line.Contains("JB^") && _currentProductOrder != null)
    {
        _currentProductOrder.PCount++;
    }
}
주요 사항:
센서 체크 후 작업 수행: 모든 적재 및 배출 작업은 MonitorSensorsAsync() 함수를 통해 센서 감지 여부를 먼저 확인한 후에 작업이 이루어집니다.
작업 큐 처리: 작업은 큐에 쌓이고, 각 작업이 완료되면 taskList에서 제거되어 UI에 실시간으로 동기화됩니다.
실시간 로그 업데이트: 주문의 상태나 모델 정보, 잔여 수량 등의 정보가 실시간으로 UI에 바인딩되며, 로그가 변경될 때마다 적절하게 업데이트됩니다.
이 최종 코드는 요청하신 센서 체크와 작업 큐, 작업 완료 시 tas