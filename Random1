를 **읽기 (RDD)**와 쓰기 (WDD) 동작을 구현한 C# 코드 예시입니다. 코드에서는 PLC와의 통신을 위해 직렬 통신 (COM 포트) 방식을 사용한다고 가정하고 있습니다.

C# 코드 예시
csharp
코드 복사
using System;
using System.IO.Ports;

public class MuTolPLC
{
    private SerialPort _serialPort;

    // COM 포트 초기화
    public MuTolPLC(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.Open();
    }

    // 16진수 문자열로 데이터를 보내는 함수
    private void SendHex(string hexString)
    {
        byte[] data = ConvertHexStringToByteArray(hexString);
        _serialPort.Write(data, 0, data.Length);
    }

    // 데이터를 읽는 함수 (PLC로부터)
    public string ReadData(string startAddress, int length)
    {
        // RDD 명령어로 데이터 읽기 요청
        // 예시: "RDD" + 시작 주소 + 데이터 길이
        string command = $"RDD{startAddress}{length:X2}";
        
        // 명령어 전송
        SendHex(command);
        
        // 응답 읽기
        byte[] buffer = new byte[length * 2]; // 16진수 데이터를 2배 길이로 읽음
        _serialPort.Read(buffer, 0, buffer.Length);

        // 바이트 배열을 다시 16진수로 변환
        return BitConverter.ToString(buffer).Replace("-", "");
    }

    // 데이터를 쓰는 함수 (PLC로)
    public void WriteData(string startAddress, int value)
    {
        // 값은 16진수로 변환 후, 바이트 순서를 바꿔야 함 (상하 바꿈)
        string hexValue = value.ToString("X4");
        string swappedValue = SwapBytes(hexValue);

        // WDD 명령어로 데이터 쓰기
        string command = $"WDD{startAddress}{swappedValue}";

        // 명령어 전송
        SendHex(command);
    }

    // 바이트 순서를 바꾸는 함수 (상하 바꿈)
    private string SwapBytes(string hexString)
    {
        if (hexString.Length != 4)
            throw new ArgumentException("16진수 값은 4자리여야 합니다.");

        // 상하 바꾸기 (예: 0100 -> 0001)
        return hexString.Substring(2, 2) + hexString.Substring(0, 2);
    }

    // 16진수 문자열을 바이트 배열로 변환하는 함수
    private byte[] ConvertHexStringToByteArray(string hex)
    {
        byte[] bytes = new byte[hex.Length / 2];
        for (int i = 0; i < hex.Length; i += 2)
        {
            bytes[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);
        }
        return bytes;
    }

    // COM 포트 닫기
    public void Close()
    {
        _serialPort.Close();
    }
}
코드 설명
SerialPort 초기화:

클래스는 SerialPort를 사용하여 PLC와 통신을 합니다. portName과 baudRate로 포트를 설정하고 열어줍니다.
SendHex:

16진수 문자열을 바이트 배열로 변환하여 SerialPort로 데이터를 전송합니다.
ReadData:

PLC에서 데이터를 읽기 위한 함수입니다. 명령어는 "RDD"로 시작하며, 시작 주소와 읽을 데이터 길이를 함께 전송합니다.
데이터를 읽은 후, 바이트 배열을 16진수 문자열로 변환하여 반환합니다.
WriteData:

PLC에 데이터를 쓰는 함수입니다. 값은 16진수로 변환한 후, 바이트 순서를 상하 바꿔서 전송합니다.
예시로, 1을 쓰면 0100으로 바꾼 후 WDD 명령어와 함께 전송합니다.
SwapBytes:

상하 바꾸기 함수로, 4자리 16진수 문자열의 바이트 순서를 바꿉니다.
ConvertHexStringToByteArray:

16진수 문자열을 바이트 배열로 변환하는 함수입니다.
예시 사용 방법
csharp
코드 복사
MuTolPLC plc = new MuTolPLC("COM3", 9600);

// 읽기 예시: 시작 주소가 "0100"이고 4바이트 읽기
string readData = plc.ReadData("0100", 4);
Console.WriteLine($"읽은 데이터: {readData}");

// 쓰기 예시: 시작 주소가 "0100"이고 값 1 쓰기
plc.WriteData("0100", 1);

// COM 포트 닫기
plc.Close();
설명:
읽기: RDD 명령어를 사용하여 지정된 주소에서 데이터를 읽습니다.
쓰기: WDD 명령어를 사용하여 16진수로 변환한 값을 상하 바꿔서 PLC에 씁니다.
이 코드는 기본적인 예시이며, 실제 PLC 모델에 따라 명령어 세부 사항이 달라질