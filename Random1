이미 리본 폼에 수십 개의 버튼이 있는 상황에서, 기존 버튼 위에서 즐겨찾기 추가/제거 기능을 구현하려면 버튼마다 팝업 메뉴를 추가하고 해당 메뉴에서 즐겨찾기 추가/제거 작업을 수행하도록 하면 됩니다. 아래는 이를 구현하기 위한 단계별 솔루션입니다.

구현 목표
기존 버튼 그대로 유지: 이미 UI에 배치된 버튼을 수정하지 않고, 기능만 추가.
즐겨찾기 추가/제거 기능: 각 버튼 위에서 우클릭 메뉴를 통해 즐겨찾기에 추가하거나 제거.
즐겨찾기 탭/그룹 생성: 즐겨찾기 버튼은 별도의 리본 탭 또는 그룹에 동적으로 표시.
JSON 파일로 상태 저장: 사용자가 추가/제거한 즐겨찾기 정보를 JSON으로 저장.
코드 구현
1. FavoriteManager 클래스
JSON 파일을 통해 즐겨찾기 상태를 관리하는 클래스입니다.

csharp
코드 복사
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public class FavoriteManager
{
    private const string FilePath = @"C:\Users\<사용자>\AppData\Local\MyRibbonApp\favorites.json";

    public List<string> Favorites { get; private set; }

    public FavoriteManager()
    {
        Favorites = LoadFavorites();
    }

    public void AddToFavorites(string buttonId)
    {
        if (!Favorites.Contains(buttonId))
        {
            Favorites.Add(buttonId);
            SaveFavorites();
        }
    }

    public void RemoveFromFavorites(string buttonId)
    {
        if (Favorites.Contains(buttonId))
        {
            Favorites.Remove(buttonId);
            SaveFavorites();
        }
    }

    private List<string> LoadFavorites()
    {
        if (File.Exists(FilePath))
        {
            string json = File.ReadAllText(FilePath);
            return JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }
        return new List<string>();
    }

    private void SaveFavorites()
    {
        Directory.CreateDirectory(Path.GetDirectoryName(FilePath));
        string json = JsonSerializer.Serialize(Favorites);
        File.WriteAllText(FilePath, json);
    }
}
2. MainForm.cs
FavoriteManager를 활용해 리본 버튼의 즐겨찾기 추가/제거 기능과 UI 반영을 구현합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    private FavoriteManager _favoriteManager;
    private RibbonPageGroup _favoritesGroup;

    public MainForm()
    {
        InitializeComponent();

        // 즐겨찾기 매니저 초기화
        _favoriteManager = new FavoriteManager();

        // 즐겨찾기 그룹 생성
        CreateFavoritesGroup();

        // 기존 버튼에 우클릭 메뉴 추가
        AddContextMenusToExistingButtons();

        // 즐겨찾기 버튼 로드
        RefreshFavorites();
    }

    private void CreateFavoritesGroup()
    {
        // 즐겨찾기 그룹을 Main 탭에 추가
        _favoritesGroup = new RibbonPageGroup("Favorites");
        ribbonPage1.Groups.Add(_favoritesGroup);
    }

    private void AddContextMenusToExistingButtons()
    {
        foreach (BarItemLink itemLink in ribbonPageGroup1.ItemLinks)
        {
            if (itemLink.Item is BarButtonItem button)
            {
                // 팝업 메뉴 추가
                button.PopupMenuShowing += (s, e) => ShowContextMenu(e, button);
            }
        }
    }

    private void ShowContextMenu(PopupMenuShowingEventArgs e, BarButtonItem button)
    {
        var popupMenu = new PopupMenu();

        var addMenuItem = new BarButtonItem
        {
            Caption = "Add to Favorites"
        };
        addMenuItem.ItemClick += (s, args) =>
        {
            _favoriteManager.AddToFavorites(button.Tag.ToString());
            RefreshFavorites();
        };

        var removeMenuItem = new BarButtonItem
        {
            Caption = "Remove from Favorites"
        };
        removeMenuItem.ItemClick += (s, args) =>
        {
            _favoriteManager.RemoveFromFavorites(button.Tag.ToString());
            RefreshFavorites();
        };

        // 메뉴 추가
        popupMenu.AddItem(addMenuItem);
        popupMenu.AddItem(removeMenuItem);

        // 팝업 표시
        popupMenu.ShowPopup(Cursor.Position);
    }

    private void RefreshFavorites()
    {
        // 즐겨찾기 그룹 초기화
        _favoritesGroup.ItemLinks.Clear();

        foreach (var buttonId in _favoriteManager.Favorites)
        {
            // 기존 버튼 검색
            var button = ribbonPageGroup1.ItemLinks
                .Select(link => link.Item as BarButtonItem)
                .FirstOrDefault(b => b?.Tag.ToString() == buttonId);

            if (button != null)
            {
                // 즐겨찾기 그룹에 추가
                _favoritesGroup.ItemLinks.Add(button);
            }
        }
    }
}
3. 폼 초기화
MainForm.Designer.cs에서 기존 리본 구성과 버튼 ID(Tag)를 추가해야 합니다.

csharp
코드 복사
private void InitializeComponent()
{
    this.ribbonControl1 = new DevExpress.XtraBars.Ribbon.RibbonControl();
    this.ribbonPage1 = new DevExpress.XtraBars.Ribbon.RibbonPage();
    this.ribbonPageGroup1 = new DevExpress.XtraBars.Ribbon.RibbonPageGroup();

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).BeginInit();
    this.SuspendLayout();

    // ribbonControl1
    this.ribbonControl1.Pages.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPage[] {
        this.ribbonPage1});
    this.ribbonControl1.Location = new System.Drawing.Point(0, 0);
    this.ribbonControl1.Size = new System.Drawing.Size(800, 150);
    this.ribbonControl1.Name = "ribbonControl1";

    // ribbonPage1
    this.ribbonPage1.Groups.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPageGroup[] {
        this.ribbonPageGroup1});
    this.ribbonPage1.Text = "Main";

    // ribbonPageGroup1
    this.ribbonPageGroup1.Text = "Commands";

    // 예제 버튼 추가
    var button1 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Button 1",
        Tag = "btn1"
    };
    var button2 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Button 2",
        Tag = "btn2"
    };
    this.ribbonPageGroup1.ItemLinks.Add(button1);
    this.ribbonPageGroup1.ItemLinks.Add(button2);

    // MainForm
    this.ClientSize = new System.Drawing.Size(800, 450);
    this.Controls.Add(this.ribbonControl1);
    this.Name = "MainForm";
    this.Text = "Ribbon Form with Favorites";

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).EndInit();
    this.ResumeLayout(false);
    this.PerformLayout();
}
작동 방식
버튼 우클릭: 각 버튼을 우클릭하면 팝업 메뉴가 나타나며, "Add to Favorites" 또는 "Remove from Favorites"를 선택.
즐겨찾기 그룹 추가/제거: 선택된 버튼이 Favorites 그룹에 추가되거나 제거.
설정 저장: JSON 파일로 즐겨찾기 정보가 저장.
프로그램 재시작: JSON 파일을 읽어 즐겨찾기를 다시 로드.
결과
기존 버튼의 디자인이나 기능은 변경하지 않고, 즐겨찾기 기능만 추가.
사용자별로 즐겨찾기 상태를 저장 및 로드 가능.