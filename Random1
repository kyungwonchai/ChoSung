데이터베이스 조회 & 매크로 실행을 하나의 동작 시퀀스로 통합
✅ MacroAction 내부에서 데이터 조회 & 순차 처리 (버튼 클릭 X)
✅ 데이터를 조회하고, 그 값을 기반으로 매크로 동작 실행
✅ 모든 동작은 MacroManager에 등록되어 비동기 실행
✅ 예약어 충돌 해결 (MacroActions 폴더 유지)

📂 1. 새로운 프로젝트 구조
pgsql
코드 복사
📦 AutoHandleSolution
 ┣ 📂 AAutoHandle
 ┃ ┣ 📂 Commands
 ┃ ┃ ┣ 📜 IMacroCommand.cs
 ┃ ┃ ┣ 📜 KeyboardCommand.cs
 ┃ ┃ ┣ 📜 MouseClickCommand.cs
 ┃ ┃ ┣ 📜 DelayCommand.cs
 ┃ ┃ ┣ 📜 ScreenCaptureCommand.cs
 ┃ ┃ ┗ 📜 CVCommand.cs
 ┃ ┣ 📂 Core
 ┃ ┃ ┣ 📜 MacroExecutor.cs
 ┃ ┃ ┣ 📜 MacroManager.cs
 ┃ ┃ ┗ 📜 MacroLogger.cs
 ┃ ┣ 📂 Database
 ┃ ┃ ┣ 📜 MySqlHelper.cs
 ┃ ┃ ┣ 📜 MsSqlHelper.cs
 ┃ ┃ ┗ 📜 DatabaseReader.cs
 ┃ ┣ 📂 MacroActions  ★ 매크로 동작 정의
 ┃ ┃ ┣ 📜 MacroActionA.cs
 ┃ ┃ ┣ 📜 MacroActionB.cs
 ┃ ┃ ┗ 📜 MacroActionC.cs
 ┃ ┣ 📂 Forms
 ┃ ┃ ┗ 📜 MainForm.cs
 ┃ ┣ 📜 Program.cs
 ┃ ┗ 📜 AAutoHandle.csproj
 ┗ 📜 AutoHandleSolution.sln
📜 2. 데이터 조회 후 매크로 실행 (MacroActionA.cs)
csharp
코드 복사
namespace AAutoHandle.MacroActions
{
    using System;
    using System.Data;
    using System.Threading.Tasks;
    using AAutoHandle.Core;
    using AAutoHandle.Commands;
    using AAutoHandle.Database;
    using MySql.Data.MySqlClient;
    using System.Data.SqlClient;

    public class MacroActionA
    {
        private readonly DatabaseReader _dbReader;

        public MacroActionA(string mysqlConn, string mssqlConn)
        {
            _dbReader = new DatabaseReader(mysqlConn, mssqlConn);
        }

        public async Task ExecuteAsync()
        {
            var macroManager = MacroManager.Instance;

            // **1️⃣ MySQL에서 데이터 가져와 매크로 실행**
            await _dbReader.ReadMySqlDataAsync("sp_GetData",
                async row =>
                {
                    int x = Convert.ToInt32(row["x"]);
                    int y = Convert.ToInt32(row["y"]);
                    string capturePath = row["capturePath"].ToString();

                    macroManager.AddCommand(new MouseClickCommand(x, y));
                    macroManager.AddCommand(new DelayCommand(500));
                    macroManager.AddCommand(new ScreenCaptureCommand(capturePath));

                    await macroManager.StartExecutionAsync();
                });

            // **2️⃣ MSSQL에서 데이터 가져와 매크로 실행**
            await _dbReader.ReadMsSqlDataAsync("sp_GetData",
                async row =>
                {
                    string key = row["keypress"].ToString();
                    macroManager.AddCommand(new KeyboardCommand((System.Windows.Forms.Keys)Enum.Parse(typeof(System.Windows.Forms.Keys), key)));
                    await macroManager.StartExecutionAsync();
                });
        }
    }
}
✅ MySQL → MouseClickCommand, ScreenCaptureCommand 실행
✅ MSSQL → KeyboardCommand 실행
✅ 데이터베이스에서 가져온 값을 기반으로 매크로 실행

📜 3. DatabaseReader.cs (비동기 데이터 조회 및 순차 실행)
csharp
코드 복사
namespace AAutoHandle.Database
{
    using System;
    using System.Data;
    using System.Threading.Tasks;
    using MySql.Data.MySqlClient;
    using System.Data.SqlClient;

    public class DatabaseReader
    {
        private readonly MySqlHelper _mySqlHelper;
        private readonly MsSqlHelper _msSqlHelper;

        public DatabaseReader(string mysqlConnString, string mssqlConnString)
        {
            _mySqlHelper = new MySqlHelper(mysqlConnString);
            _msSqlHelper = new MsSqlHelper(mssqlConnString);
        }

        public async Task ReadMySqlDataAsync(string procedureName, Func<DataRow, Task> processRow, params MySqlParameter[] parameters)
        {
            var table = _mySqlHelper.ExecuteStoredProcedure(procedureName, parameters);
            foreach (DataRow row in table.Rows)
            {
                await processRow(row);
            }
        }

        public async Task ReadMsSqlDataAsync(string procedureName, Func<DataRow, Task> processRow, params SqlParameter[] parameters)
        {
            var table = _msSqlHelper.ExecuteStoredProcedure(procedureName, parameters);
            foreach (DataRow row in table.Rows)
            {
                await processRow(row);
            }
        }
    }
}
✅ 데이터를 Func<DataRow, Task>로 즉시 처리 가능
✅ 반복 실행 순서 보장 (await 사용)

📜 4. MainForm.cs (테스트 실행)
csharp
코드 복사
using System;
using System.Windows.Forms;
using AAutoHandle.MacroActions;

namespace AAutoHandle
{
    public partial class MainForm : Form
    {
        private MacroActionA _macroActionA;

        public MainForm()
        {
            InitializeComponent();

            string mysqlConn = "Server=localhost;Database=mydb;User=root;Password=1234;";
            string mssqlConn = "Server=myserver;Database=mydb;User Id=myuser;Password=mypassword;";

            _macroActionA = new MacroActionA(mysqlConn, mssqlConn);
        }

        private async void btnStartMacro_Click(object sender, EventArgs e)
        {
            await _macroActionA.ExecuteAsync();
        }
    }
}
✅ 버튼을 누르면 MacroActionA.ExecuteAsync() 실행됨
✅ 데이터베이스에서 가져온 값을 기반으로 매크로 자동 실행

📜 5. 실행 흐름
1️⃣ MacroActionA.ExecuteAsync() 실행
2️⃣ MySQL에서 데이터 가져와 → 매크로 실행 (MouseClickCommand, ScreenCaptureCommand)
3️⃣ MSSQL에서 데이터 가져와 → 키보드 입력 실행 (KeyboardCommand)
4️⃣ 모든 작업이 비동기로 순차 실행됨 (await 보장)

📜 6. 확장 가능성
✅ 매크로 실행 시 데이터 조회가 자연스럽게 포함됨
✅ MacroAction을 추가하여 다양한 동작 추가 가능 (MacroActionB, MacroActionC 등)
✅ 데이터 구조만 변경하면 새로운 매크로 실행 가능
✅ 버튼 없이 내부에서 실행 가능 → 자동화 최적화

📌 결론
🔹 데이터 조회도 매크로 실행의 일부 → MacroActionA 내부에서 실행
🔹 버튼 없이 실행 가능 → 자동화 최적화
🔹 비동기 데이터 조회 & 실행 순서 보장 (await 처리)
🔹 필요한 동작 세트(MacroActionA, MacroActionB 등)만 골라 실행 가능