해했습니다. 기존 ObservableCollection에 동일한 메시지가 있으면 추가하지 않도록 조건을 설정하겠습니다.

다음은 ObservableCollection에 중복 메시지를 추가하지 않도록 조건을 추가한 코드입니다.

수정된 MainViewModelPop1 코드 (중복 메시지 추가 방지)
AddErrorMessagePop1 메서드에서 동일한 메시지가 이미 컬렉션에 존재하는지 확인하고, 중복이 있는 경우 추가하지 않습니다.
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModelPop1 : INotifyPropertyChanged
    {
        public event Action<string, bool> ErrorTriggeredPop1;

        private WarningWindowPop1 _warningWindowPop1;
        private ObservableCollection<ErrorMessagePop1> _errorMessagesPop1;
        private bool _isWarningWindowOpen;

        public MainViewModelPop1()
        {
            _errorMessagesPop1 = new ObservableCollection<ErrorMessagePop1>();
            ErrorTriggeredPop1 += HandleErrorEventPop1;
        }

        private void HandleErrorEventPop1(string message, bool isAdd)
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (isAdd)
                {
                    AddErrorMessagePop1(message);
                }
                else
                {
                    RemoveErrorMessagePop1(message);
                }
            });
        }

        private void AddErrorMessagePop1(string message)
        {
            Debug.WriteLine($"[DEBUG] Attempting to add message: {message}");

            // 중복 메시지 확인: 동일한 메시지가 있는 경우 추가하지 않음
            if (_errorMessagesPop1.Any(m => m.ContentPop1 == message))
            {
                Debug.WriteLine($"[DEBUG] Duplicate message found. Skipping addition: {message}");
                return;
            }

            Color color = _errorMessagesPop1.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessagesPop1.Add(new ErrorMessagePop1(message, new SolidColorBrush(color)));

            if (!_isWarningWindowOpen)
            {
                ShowWarningWindowPop1();
            }
        }

        private void RemoveErrorMessagePop1(string message)
        {
            var errorMessage = _errorMessagesPop1.FirstOrDefault(m => m.ContentPop1 == message);
            if (errorMessage != null)
            {
                _errorMessagesPop1.Remove(errorMessage);
                Debug.WriteLine($"[DEBUG] Error removed: {message}");

                if (_errorMessagesPop1.Count == 0)
                {
                    CloseWarningWindowPop1();
                }
            }
        }

        private void ShowWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindowPop1 = new WarningWindowPop1(_errorMessagesPop1);
                _warningWindowPop1.Topmost = true;
                _warningWindowPop1.Show();

                _warningWindowPop1.Closed += (sender, e) =>
                {
                    _isWarningWindowOpen = false;
                    _warningWindowPop1 = null;
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                _isWarningWindowOpen = true;
                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void CloseWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindowPop1 != null)
                {
                    _warningWindowPop1.Close();
                    _warningWindowPop1 = null;
                    _isWarningWindowOpen = false;
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessagePop1
    {
        public string ContentPop1 { get; }
        public SolidColorBrush ColorPop1 { get; }

        public ErrorMessagePop1(string content, SolidColorBrush color)
        {
            ContentPop1 = content;
            ColorPop1 = color;
        }
    }
}
설명
중복 메시지 확인 및 추가 방지: AddErrorMessagePop1 메서드에서 _errorMessagesPop1 컬렉션에 동일한 ContentPop1 값을 가진 메시지가 있는지 확인하고, 이미 존재하면 추가하지 않습니다.
디버그 로그 추가: 중복 메시지가 발견되어 추가가 스킵된 경우 로그에 기록하여 확인할 수 있습니다.
이제 동일한 메시지가 중복으로 추가되지