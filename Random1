지정하려면, GridControl의 AutoGenerateColumns 속성을 false로 설정하고, 수동으로 열을 정의할 수 있습니다. 각 열에 대해 Width 속성을 설정하여 원하는 폭을 지정할 수 있습니다.

1. XAML 설정
각 열을 수동으로 정의하고 폭을 지정합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <TextBox Name="g_searchTextBox1" Width="200" Margin="10" VerticalAlignment="Top" HorizontalAlignment="Left"/>
        <Button Name="g_loadButton1" Content="Load Data" Width="100" Height="30" Margin="220,10,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Click="LoadButton_Click"/>
        <dxg:GridControl Name="g_gridControl1" AutoGenerateColumns="False" ItemsSource="{Binding}">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Column1" Header="Column 1" Width="100"/>
                <dxg:GridColumn FieldName="Column2" Header="Column 2" Width="150"/>
                <dxg:GridColumn FieldName="Column3" Header="Column 3" Width="200"/>
                <!-- 필요한 만큼 열 추가 -->
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="False" CellValueChanged="TableView_CellValueChanged"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
2. C# 코드 설정
C# 코드는 그대로 유지하며, 데이터를 불러오고 업데이트하는 로직을 처리합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Controls;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DataTable g_dataTable1;
        private SqlDataAdapter g_dataAdapter1;
        private SqlCommandBuilder g_commandBuilder1;
        private string g_connectionString1 = "your_connection_string_here";
        private string g_selectQuery1 = "SELECT * FROM Table_UFS_DRAM";

        public MainWindow()
        {
            InitializeComponent();
            g_searchTextBox1.TextChanged += SearchTextBox_TextChanged;
            (g_gridControl1.View as TableView).RowUpdated += TableView_RowUpdated;
        }

        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void LoadData()
        {
            using (SqlConnection g_connection1 = new SqlConnection(g_connectionString1))
            {
                g_dataAdapter1 = new SqlDataAdapter(g_selectQuery1, g_connection1);
                g_commandBuilder1 = new SqlCommandBuilder(g_dataAdapter1);

                g_dataTable1 = new DataTable();
                g_dataAdapter1.Fill(g_dataTable1);

                // 명령을 명시적으로 설정
                g_dataAdapter1.UpdateCommand = g_commandBuilder1.GetUpdateCommand();
                g_dataAdapter1.InsertCommand = g_commandBuilder1.GetInsertCommand();
                g_dataAdapter1.DeleteCommand = g_commandBuilder1.GetDeleteCommand();

                g_gridControl1.ItemsSource = g_dataTable1.DefaultView;
            }
        }

        private void TableView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            UpdateDatabase();
        }

        private void UpdateDatabase()
        {
            try
            {
                using (SqlConnection g_connection1 = new SqlConnection(g_connectionString1))
                {
                    g_dataAdapter1.UpdateCommand.Connection = g_connection1;
                    g_dataAdapter1.InsertCommand.Connection = g_connection1;
                    g_dataAdapter1.DeleteCommand.Connection = g_connection1;

                    g_connection1.Open();
                    g_dataAdapter1.Update(g_dataTable1);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error updating database: " + ex.Message);
            }
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (g_dataTable1 != null)
            {
                string g_filter1 = g_searchTextBox1.Text;
                (g_gridControl1.ItemsSource as DataView).RowFilter = $"ColumnName LIKE '%{g_filter1}%'";
            }
        }

        private void TableView_RowUpdated(object sender, RowEventArgs e)
        {
            UpdateDatabase();
        }
    }
}
설명
XAML 설정: GridControl의 AutoGenerateColumns 속성을 False로 설정하고, 각 열을 수동으로 정의하여 FieldName과 Width를 지정합니다.
C# 코드: 기본적인 로직은 변경하지 않습니다. 데이터를 불러오고 업데이트하는 로직을 유지합니다.
이렇게 하면 각 열의 폭을 처음부터 끝까지 임의로 지정할 수 있으며, 원하는 폭으로 열을 설정할 수 있습니다. FieldName 속성은 데이터베이스의 실제 열 이름과 일치해야 합니다. 필요한 열만 정의하여 사용하면 됩니다