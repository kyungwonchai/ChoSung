! 너는 WPF에서 소켓 서버도 하고, 클라이언트로 메시지도 보내고,
버튼 누르면 문자열 전송도 하고 싶다는 거지?

그럼 전체 구조를 이렇게 줄게:

목표
WPF 앱이 서버로 동작 (클라이언트 연결 받음)

연결된 클라이언트를 기억하고

버튼 누르면 그 클라이언트에게 "gsgsdgdsgf" 전송

1. MainWindow.xaml
xml
코드 복사
<Window x:Class="SocketApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SocketServer" Height="200" Width="300">
    <StackPanel Margin="20">
        <Button Content="Send to Client" Click="SendButton_Click" />
        <TextBlock Name="StatusText" Margin="10" />
    </StackPanel>
</Window>
2. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Windows;

namespace SocketApp
{
    public partial class MainWindow : Window
    {
        private TcpListener server;
        private TcpClient connectedClient;
        private NetworkStream clientStream;

        public MainWindow()
        {
            InitializeComponent();
            StartServer();
        }

        private void StartServer()
        {
            server = new TcpListener(IPAddress.Any, 2400);
            server.Start();
            StatusText.Text = "서버 시작됨, 클라이언트 대기 중...";

            Thread acceptThread = new Thread(() =>
            {
                while (true)
                {
                    try
                    {
                        var client = server.AcceptTcpClient();
                        connectedClient = client;
                        clientStream = connectedClient.GetStream();

                        Dispatcher.Invoke(() =>
                        {
                            StatusText.Text = "클라이언트 연결됨!";
                        });

                        // 수신 쓰레드 (필요할 경우)
                        Thread receiveThread = new Thread(ReceiveLoop);
                        receiveThread.Start();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show("서버 오류: " + ex.Message);
                    }
                }
            });

            acceptThread.IsBackground = true;
            acceptThread.Start();
        }

        private void ReceiveLoop()
        {
            byte[] buffer = new byte[1024];

            while (true)
            {
                try
                {
                    int count = clientStream.Read(buffer, 0, buffer.Length);
                    if (count == 0) break;

                    string received = Encoding.UTF8.GetString(buffer, 0, count);
                    Dispatcher.Invoke(() =>
                    {
                        StatusText.Text = $"수신: {received}";
                    });
                }
                catch
                {
                    Dispatcher.Invoke(() =>
                    {
                        StatusText.Text = "클라이언트 연결 끊김";
                    });
                    break;
                }
            }
        }

        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            if (connectedClient != null && connectedClient.Connected)
            {
                string message = "gsgsdgdsgf";
                byte[] data = Encoding.UTF8.GetBytes(message);
                clientStream.Write(data, 0, data.Length);
                StatusText.Text = "전송됨: " + message;
            }
            else
            {
                StatusText.Text = "클라이언트 없음";
            }
        }
    }
}
정리 요점
WPF 앱이 서버로 동작하면서 클라이언트를 기다림

클라이언트가 연결되면 connectedClient로 저장

버튼 클릭 시 connectedClient에게 문자열 전송

수신도 가능 (원하면 파일 저장도 추가 가능)

필요하면:

클라이언트 코드도 줄게

여러 클라이언트 관리하거나 메시지 브로드캐스트도 가능하게 확장 가능
