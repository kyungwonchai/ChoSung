public static async Task<bool> SendClipboardTextToGitHub()
{
    string clipboardText = Clipboard.ContainsText(TextDataFormat.Text) 
                           ? Clipboard.GetText(TextDataFormat.Text) 
                           : string.Empty;

    if (!string.IsNullOrEmpty(clipboardText))
    {
        string apiEndpoint = $"/repos/{YourGitHubUsername}/{YourRepositoryName}/contents/{FilePath}";
        string apiUrl = $"{GitHubApiBaseUrl}{apiEndpoint}";

        // First, get the file to find out the current sha
        httpClient.DefaultRequestHeaders.UserAgent.Add(new System.Net.Http.Headers.ProductInfoHeaderValue("AppName", "1.0"));
        httpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/vnd.github.v3+json"));
        httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", YourGitHubToken);

        var getResponse = await httpClient.GetAsync(apiUrl);

        if (!getResponse.IsSuccessStatusCode)
        {
            string getResponseContent = await getResponse.Content.ReadAsStringAsync();
            Console.WriteLine("Get Error: " + getResponseContent);
            return false;
        }

        var getFileResponse = JsonConvert.DeserializeObject<GetFileResponse>(await getResponse.Content.ReadAsStringAsync());
        
        var content = new
        {
            message = "updating file",
            content = Convert.ToBase64String(Encoding.UTF8.GetBytes(clipboardText)),
            sha = getFileResponse.sha // provide the current sha
        };

        var jsonContent = Newtonsoft.Json.JsonConvert.SerializeObject(content);
        var httpContent = new StringContent(jsonContent, Encoding.UTF8, "application/json");

        var putResponse = await httpClient.PutAsync(apiUrl, httpContent);

        // If the request was not successful, print the response content
        if (!putResponse.IsSuccessStatusCode)
        {
            string putResponseContent = await putResponse.Content.ReadAsStringAsync();
            Console.WriteLine("Put Error: " + putResponseContent);
        }

        return putResponse.IsSuccessStatusCode;
    }
    else
    {
        return false;
    }
}

public class GetFileResponse
{
    public string sha { get; set; }
    // add other properties as needed
}
