YourRowType을 사용하지 않고, DevExpress WPF GridControl의 행 데이터를 복사하고 붙여넣기하여 MS SQL Server 2014에 데이터를 추가하는 과정을 단순화하겠습니다. 이 예제에서는 DataRow 객체를 사용하여 GridControl의 행 데이터를 직접 다룹니다.

1. 복사 버튼 이벤트 핸들러
먼저, 각 행의 "복사" 버튼에 대한 Click 이벤트를 추가합니다. 이 이벤트 핸들러에서는 DataRow 객체를 사용하여 해당 행의 데이터를 저장합니다.

csharp
Copy code
private DataRow _copiedRowData; // 임시 저장소로 사용할 필드

private void CopyRowData(object sender, RoutedEventArgs e)
{
    var button = sender as Button;
    if (button == null) return;

    var rowHandle = gridControl.View.GetRowHandleByTreeElement(button);
    _copiedRowData = gridControl.GetRow(rowHandle) as DataRow;

    // 필요한 경우 Clipboard에 데이터 저장
    // 예: Clipboard.SetText(_copiedRowData["Column1"].ToString());
}
2. 붙여넣기 버튼 이벤트 핸들러
"붙여넣기" 버튼의 이벤트 핸들러에서는 _copiedRowData에 저장된 DataRow 객체를 사용하여 MS SQL Server 2014 데이터베이스에 새 행을 추가합니다.

csharp
Copy code
private void PasteRowData(object sender, RoutedEventArgs e)
{
    if (_copiedRowData == null) return;

    using (SqlConnection conn = new SqlConnection("YourConnectionString"))
    {
        conn.Open();
        using (SqlCommand cmd = conn.CreateCommand())
        {
            cmd.CommandText = "INSERT INTO YourTable (Column1, Column2, ...) VALUES (@Value1, @Value2, ...)";
            cmd.Parameters.AddWithValue("@Value1", _copiedRowData["Column1"]);
            cmd.Parameters.AddWithValue("@Value2", _copiedRowData["Column2"]);
            // 나머지 컬럼에 대한 매개변수 추가

            cmd.ExecuteNonQuery();
        }
    }

    // 필요한 경우 UI 업데이트
}
이 코드는 _copiedRowData에 저장된 DataRow 객체의 각 필드를 사용하여 데이터베이스에 새 행을 추가합니다. YourConnectionString과 YourTable은 각각 데이터베이스 연결 문자열과 테이블 이름입니다.

추가 고려 사항
보안: 사용자 입력을 직접 SQL 문에 삽입하지 말고, 항상 매개변수화된 쿼리를 사용하세요.
예외 처리: 데이터베이스 작업 중 발생할 수 있는 예외를 처리하세요.
