이 코드는 C# WPF 응용 프로그램을 통해 특정 폴더 내의 .pro 파일을 MSSQL2014 데이터베이스와 연동하여 특정 조건에 따라 Lane1과 Lane2 폴더로 분배하는 작업을 수행합니다. 주석과 함께 코드를 제공하겠습니다.

csharp
코드 복사
using System;
using System.Data.SqlClient;
using System.IO;
using System.Linq;

namespace ProFileProcessor
{
    public class FileDistributor
    {
        private const string DataDirectory = @"C:\proviewer\data";
        private const string Lane1Directory = @"C:\proviewer\data\Lane1";
        private const string Lane2Directory = @"C:\proviewer\data\Lane2";

        public void DistributeFiles()
        {
            // 데이터 폴더 내 "Machine"으로 시작하는 모든 하위 폴더를 가져옵니다.
            var machineFolders = Directory.GetDirectories(DataDirectory, "Machine*");

            foreach (var folder in machineFolders)
            {
                // 각 폴더에서 ".pro" 확장자를 가진 모든 파일을 찾습니다.
                var proFiles = Directory.GetFiles(folder, "*.pro");

                foreach (var filePath in proFiles)
                {
                    // 파일에서 "Code="로 시작하는 줄을 추출하여 값을 가져옵니다.
                    var codeValue = ExtractCodeValue(filePath);
                    if (codeValue != null)
                    {
                        // 데이터베이스에서 조건에 맞는 모델을 조회하여 대상 폴더를 결정하고 파일을 이동합니다.
                        var targetLane = GetTargetLaneFromDatabase(codeValue);
                        MoveFileToLane(filePath, targetLane);
                    }
                }
            }
        }

        private string ExtractCodeValue(string filePath)
        {
            // 파일을 열어서 Code=로 시작하는 줄을 찾고 값을 가져옵니다.
            foreach (var line in File.ReadLines(filePath))
            {
                if (line.StartsWith("Code="))
                {
                    return line.Substring(5).Trim(); // "Code=" 이후 값을 추출하여 Trim() 처리합니다.
                }
            }
            return null; // Code= 줄이 없을 경우 null 반환 (사실상 항상 존재하지만 안전을 위해 처리)
        }

        private string GetTargetLaneFromDatabase(string code)
        {
            // 데이터베이스 연결 문자열을 설정합니다.
            string connectionString = "Server=your_server_name;Database=your_database_name;User Id=your_user_id;Password=your_password;";
            string targetLane = null;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                // 데이터베이스 연결을 엽니다.
                connection.Open();

                // 조건에 맞는 행을 조회하는 SQL 쿼리를 작성합니다.
                string query = "SELECT TOP 1 szmodelname FROM View_SPI_barcode WHERE szbarcode LIKE @code + '%'";

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    // SQL 쿼리에 필요한 파라미터를 추가합니다.
                    command.Parameters.AddWithValue("@code", code);

                    // SQL 실행 및 결과 조회
                    var result = command.ExecuteScalar() as string;

                    if (!string.IsNullOrEmpty(result))
                    {
                        // 결과값이 "_TM_"을 포함하면 Lane2로, "_BM_"을 포함하면 Lane1로 설정
                        if (result.Contains("_TM_"))
                        {
                            targetLane = Lane2Directory;
                        }
                        else if (result.Contains("_BM_"))
                        {
                            targetLane = Lane1Directory;
                        }
                    }
                }
            }

            return targetLane; // 조건에 맞지 않으면 null을 반환
        }

        private void MoveFileToLane(string filePath, string targetLane)
        {
            if (string.IsNullOrEmpty(targetLane))
            {
                // 이동할 대상 Lane이 없을 경우 작업을 중지합니다.
                Console.WriteLine($"No target lane found for file: {filePath}");
                return;
            }

            try
            {
                // 대상 폴더가 없으면 생성
                if (!Directory.Exists(targetLane))
                {
                    Directory.CreateDirectory(targetLane);
                }

                // 파일 이동
                string fileName = Path.GetFileName(filePath);
                string targetPath = Path.Combine(targetLane, fileName);

                File.Move(filePath, targetPath);
                Console.WriteLine($"File moved to {targetLane}: {fileName}");
            }
            catch (Exception ex)
            {
                // 예외 발생 시 로깅 및 예외 처리
                Console.WriteLine($"Error moving file {filePath}: {ex.Message}");
            }
        }
    }
}
설명:
DistributeFiles(): C:\proviewer\data 디렉터리에서 Machine*으로 시작하는 모든 폴더를 탐색하여 .pro 파일을 찾습니다.
ExtractCodeValue(): .pro 파일 내 Code=로 시작하는 줄에서 Code 값을 추출합니다.
GetTargetLaneFromDatabase(): 추출한 코드 값을 이용해 데이터베이스에서 szbarcode 값이 코드 값으로 시작하는 첫 번째 행을 조회하고, szmodelname 값에 _TM_ 또는 _BM_이 포함되어 있는지 확인하여 Lane2 또는 Lane1으로 분배합니다.