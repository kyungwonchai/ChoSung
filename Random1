Forms에서 WPF 요소를 포함한 인쇄 작업을 수행한 후 부모 폼을 닫으려면 ElementHost 컨트롤을 사용하여 WinForms에 WPF 요소를 임베드하고 인쇄를 처리하는 코드를 작성해야 합니다. 또한 PrintDialog와 PrintVisual을 사용하여 WPF 요소를 인쇄합니다.

다음은 예제 코드입니다:

WinForms 버튼 클릭 이벤트에서 WPF 이미지 요소 인쇄 후 창 닫기:
MainForm.cs (WinForms)

csharp
Copy code
using System;
using System.Windows.Forms;
using System.Windows.Forms.Integration; // Required for ElementHost
using System.Windows.Media.Imaging; // Required for BitmapImage
using System.Windows.Controls;

namespace WinFormsWithWPF
{
    public partial class MainForm : Form
    {
        private ElementHost elementHost;
        private Image wpfImage;

        public MainForm()
        {
            InitializeComponent();

            // Set up ElementHost with a WPF Image control
            elementHost = new ElementHost
            {
                Dock = DockStyle.Fill
            };
            wpfImage = new Image();
            elementHost.Child = wpfImage;

            Controls.Add(elementHost);

            // WinForms Button to trigger print
            Button printButton = new Button
            {
                Text = "Print and Close",
                Dock = DockStyle.Bottom
            };
            printButton.Click += PrintButton_Click;
            Controls.Add(printButton);
        }

        private void PrintButton_Click(object sender, EventArgs e)
        {
            // Load an image into the WPF Image control
            Uri imageUri = new Uri("pack://application:,,,/Resources/sample-image.png"); // Adjust the image path accordingly
            BitmapImage bitmapImage = new BitmapImage(imageUri);
            wpfImage.Source = bitmapImage;

            // Print the WPF Image using PrintDialog
            PrintImageAndCloseForm();
        }

        private void PrintImageAndCloseForm()
        {
            System.Windows.Controls.PrintDialog printDialog = new System.Windows.Controls.PrintDialog();
            if (printDialog.ShowDialog() == true)
            {
                // Ensure the image is fully loaded before printing
                wpfImage.Measure(new System.Windows.Size(double.PositiveInfinity, double.PositiveInfinity));
                wpfImage.Arrange(new System.Windows.Rect(0, 0, wpfImage.DesiredSize.Width, wpfImage.DesiredSize.Height));
                
                printDialog.PrintVisual(wpfImage, "WPF Image Printing");

                // Close the parent WinForm after printing
                this.Close();
            }
        }
    }
}
WPF XAML 리소스 파일 (예: Resources/sample-image.png):
WPF 애플리케이션에서 사용하려는 이미지를 프로젝트에 포함해야 합니다.
프로젝트에 이미지 포함 방법:

프로젝트의 Resources 폴더에 이미지를 넣고 속성을 Build Action: Resource로 설정합니다.
프로젝트 구조:

markdown
Copy code
- WinFormsWithWPF
  - MainForm.cs
  - Resources
    - sample-image.png
MainForm.Designer.cs (WinForms)
WinForms 디자이너 파일에서 필요한 InitializeComponent 메서드 설정:
csharp
Copy code
namespace WinFormsWithWPF
{
    partial class MainForm
    {
        private void InitializeComponent()
        {
            this.SuspendLayout();
            // 
            // MainForm
            // 
            this.ClientSize = new System.Drawing.Size(800, 600);
            this.Name = "MainForm";
            this.Text = "WinForms with WPF";
            this.ResumeLayout(false);
        }
    }
}
이 코드는 MainForm에서 WinForms의 PrintDialog로 WPF 이미지를 인쇄하고, 인쇄 후 폼을 닫는 과정을 보여줍니다.

주의 사항
이미지를 프로젝트에 추가할 때 경로와 이미지의 빌드 동작이 정확하게 설정되어야 합니다.
ElementHost 컨트롤이 올바르게 표시되고 인쇄 작업을 처리하기 위해 WPF 이미지를 인쇄하기 전에 완전히 렌더링하는 것