using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private bool _isRunning = false; // 작업이 실행 중인지 확인하는 플래그
        private List<string> _lineIPs;   // 라인 IP 목록
        private DateTime _lastInspectionTime; // 마지막 InspectionTime

        public MainWindow()
        {
            InitializeComponent();
            InitializeSystem(); // 시스템 초기화 (IP 및 DB 정보 가져오기)
            _ = ExecuteTaskLoopAsync(); // 프로그램 시작 시 작업 반복 실행
        }

        /// <summary>
        /// 시스템 초기화: IP 및 DB 정보 가져오기
        /// </summary>
        private void InitializeSystem()
        {
            try
            {
                // 라인 IP 목록 가져오기
                _lineIPs = GetLineIPsFromDB();
                AddLog($"라인 IP: {string.Join(", ", _lineIPs)}");

                // 마지막 InspectionTime 가져오기
                _lastInspectionTime = GetLastInspectionTimeFromDB();
                AddLog($"마지막 InspectionTime: {_lastInspectionTime:yyyy-MM-dd HH:mm:ss}");
            }
            catch (Exception ex)
            {
                AddLog($"시스템 초기화 실패: {ex.Message}");
            }
        }

        /// <summary>
        /// 작업을 반복 실행합니다.
        /// </summary>
        private async Task ExecuteTaskLoopAsync()
        {
            while (true) // 무한 반복
            {
                if (!_isRunning)
                {
                    _isRunning = true;

                    try
                    {
                        await ExecuteTaskAsync(); // 작업 실행
                    }
                    catch (Exception ex)
                    {
                        AddLog($"작업 중 에러: {ex.Message}");
                    }
                    finally
                    {
                        _isRunning = false;
                    }
                }

                // 1분 대기
                await Task.Delay(60000);
            }
        }

        /// <summary>
        /// 작업 실행 (StartButton_Click에서 하던 작업)
        /// </summary>
        private async Task ExecuteTaskAsync()
        {
            AddLog("작업 시작");

            // StartButton_Click의 기존 작업 코드 추가
            await Task.Run(() =>
            {
                foreach (var lineIP in _lineIPs)
                {
                    // 라인 IP별 작업 처리 (예제)
                    Thread.Sleep(1000); // 예제 작업 대기
                    Debug.WriteLine($"라인 IP: {lineIP}, 작업 처리 중...");
                }
            });

            AddLog("작업 완료");
        }

        /// <summary>
        /// 리스트박스에 로그를 추가하고, 20개까지만 유지합니다.
        /// </summary>
        private void AddLog(string message)
        {
            string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            Application.Current.Dispatcher.Invoke(() =>
            {
                ListBoxLogs.Items.Add(log);

                while (ListBoxLogs.Items.Count > 20)
                {
                    ListBoxLogs.Items.RemoveAt(0);
                }
            });

            Debug.WriteLine(log);
        }

        /// <summary>
        /// DB에서 라인 IP 목록을 가져옵니다.
        /// </summary>
        /// <returns>라인 IP 목록</returns>
        private List<string> GetLineIPsFromDB()
        {
            var lineIPs = new List<string>();
            string connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var command = new SqlCommand("SELECT DISTINCT LineIP FROM LineTable", connection);
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        lineIPs.Add(reader.GetString(0));
                    }
                }
            }

            if (lineIPs.Count == 0)
                throw new Exception("라인 IP를 가져올 수 없습니다.");

            return lineIPs;
        }

        /// <summary>
        /// DB에서 마지막 InspectionTime을 가져옵니다.
        /// </summary>
        /// <returns>마지막 InspectionTime</returns>
        private DateTime GetLastInspectionTimeFromDB()
        {
            DateTime lastTime = DateTime.MinValue;
            string connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var command = new SqlCommand("SELECT MAX(InspectionTime) FROM YourTable", connection);
                var result = command.ExecuteScalar();
                if (result != DBNull.Value)
                {
                    lastTime = Convert.ToDateTime(result);
                }
            }

            return lastTime;
        }
    }