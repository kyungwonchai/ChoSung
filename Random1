했습니다! 기존 mainsheet에서 데이터를 가져와서 checksheet에 삽입하도록 코드를 수정하겠습니다. 아래 코드는 mainsheet에서 depart, part, floor, district, at, model, modelnumber 등을 가져와 checksheet에 삽입하는 로직을 포함합니다.

수정된 checkModelInMySQL 함수
kotlin
코드 복사
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Timestamp
import java.time.LocalDateTime

private var isExecuting = false

private suspend fun checkModelInMySQL(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        if (isExecuting) {
            Log.d("MySQLConnection", "Already executing, skipping this call.")
            return@withContext null
        }

        isExecuting = true
        var connection: Connection? = null
        var preparedStatement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null

        try {
            // MySQL JDBC 드라이버 로드
            Class.forName("com.mysql.cj.jdbc.Driver")

            // MySQL 서버에 연결
            val url = "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC"
            connection = DriverManager.getConnection(url, "abc", "1233445")

            // 첫 번째 쿼리: smd.management_mobile_mainseet에서 modelnumber 정보 및 관련 데이터 조회
            val query1 = """
                SELECT depart, part, floor, district, at, model, modelnumber 
                FROM smd.management_mobile_mainseet 
                WHERE modelnumber = ?
            """.trimIndent()
            preparedStatement = connection.prepareStatement(query1)
            preparedStatement.setString(1, qrCode)
            resultSet = preparedStatement.executeQuery()

            if (resultSet.next()) {
                val depart = resultSet.getString("depart")
                val part = resultSet.getString("part")
                val floor = resultSet.getString("floor")
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val model = resultSet.getString("model")
                val modelnumber = resultSet.getString("modelnumber")
                result = "Depart: $depart, Part: $part, Floor: $floor, District: $district, At: $at, Model: $model, ModelNumber: $modelnumber"

                // 두 번째 쿼리: 최근 10분 이내에 해당 modelnumber로 체크된 기록이 있는지 확인
                val query2 = """
                    SELECT COUNT(*) as count FROM smd.management_mobile_checksheet 
                    WHERE modelnumber = ? AND check_time > ?
                """.trimIndent()
                preparedStatement = connection.prepareStatement(query2)
                preparedStatement.setString(1, modelnumber)
                preparedStatement.setTimestamp(2, Timestamp.valueOf(LocalDateTime.now().minusMinutes(10)))

                val countResultSet = preparedStatement.executeQuery()

                var shouldInsert = true

                if (countResultSet.next()) {
                    val count = countResultSet.getInt("count")
                    if (count > 0) {
                        shouldInsert = false
                    }
                }

                // 10분 이내에 기록이 없다면 새로운 레코드를 삽입
                if (shouldInsert) {
                    val insertQuery = """
                        INSERT INTO smd.management_mobile_checksheet 
                        (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                        VALUES (?, ?, ?, ?, ?, ?, ?, '00000000', 'mobile', '00000000', ?)
                    """.trimIndent()

                    preparedStatement = connection.prepareStatement(insertQuery)
                    preparedStatement.setString(1, depart)
                    preparedStatement.setString(2, part)
                    preparedStatement.setString(3, floor)
                    preparedStatement.setString(4, district)
                    preparedStatement.setString(5, at)
                    preparedStatement.setString(6, model)
                    preparedStatement.setString(7, modelnumber)
                    preparedStatement.setTimestamp(8, Timestamp.valueOf(LocalDateTime.now()))
                    preparedStatement.executeUpdate()

                    result += " - New record inserted"
                } else {
                    result += " - No insertion, recent check_time is within 10 minutes"
                }
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            result = "SQL error: ${e.message}"
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            result = "JDBC Driver not found: ${e.message}"
        } catch (e: Exception) {
            e.printStackTrace()
            result = "Unexpected error: ${e.message}"
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                connection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
            isExecuting = false // 작업 완료 후 플래그를 다시 false로 설정
        }

        return@withContext result
    }
}
주요 수정 사항:
모든 값 가져오기:

depart, part, floor, district, at, model, modelnumber 값을 mainsheet 테이블에서 가져옵니다.
삽입 시 해당 값 사용:

새로 삽입할 때 이 값을 그대로 checksheet에 사용합니다.
isExecuting 플래그 적용:

중복 실행을 방지하기 위해 isExecuting 플래그를 적용하여 동시 실행을 피합니다.
결론
이 코드는 mainsheet에서 데이터를 가져와 checksheet에 삽입하는 과정에서 모든 필요한 데이터를 올바르게 처리하도록 구성되었습니다. 필요에 따라 값을 더 추가하거나 수정할 수 있습니다. 더 도움이 필요하시면 언제든지 말씀