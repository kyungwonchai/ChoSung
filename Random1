// 프로젝트 구조: WPF + DevExpress + MSSQL
// 기능: 사물함, 신발장, 락커 관리
// 동시 수정 처리 포함

// 프로젝트 구성
// 1. MainViewModel.cs: 메인 ViewModel (전체 데이터 및 UI 처리)
// 2. LockerView.xaml / LockerView.xaml.cs: 메인 UI 화면
// 3. LockerModel.cs: 데이터 모델 정의
// 4. LockerService.cs: 데이터베이스 연동 서비스
// 5. LockerDiagramControl.xaml / LockerDiagramControl.xaml.cs: 도형 매핑 처리

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using DevExpress.Xpf.Grid;
using System.Data.SqlClient;
using System.Data;
using DevExpress.Xpf.Diagram;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace WPF_DevExpress_Locker_Management
{
    public class LockerModel : INotifyPropertyChanged
    {
        public int ID { get; set; }
        public string LockerType { get; set; } // 사물함, 신발장, 락커
        public string Floor { get; set; } // 층 (지하 포함)
        public string Zone { get; set; } // 구역 (수십 개)
        public string Position { get; set; } // 세부 위치 값
        public string UserName { get; set; }
        public string Email { get; set; }
        public string Department { get; set; }
        public string ManagerName { get; set; }
        public string RegistrarName { get; set; }
        public DateTime LastModified { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<LockerModel> Lockers { get; set; }
        public LockerService LockerService { get; set; }

        public MainViewModel()
        {
            LockerService = new LockerService();
            Lockers = new ObservableCollection<LockerModel>(LockerService.GetAllLockers());
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));

        public async Task RefreshDataAsync()
        {
            var lockers = await LockerService.GetAllLockersAsync();
            App.Current.Dispatcher.Invoke(() =>
            {
                Lockers.Clear();
                foreach (var locker in lockers)
                    Lockers.Add(locker);
            });
        }
    }

    public class LockerService
    {
        private readonly string connectionString = "Server=localhost;Database=LockerDB;User Id=your_user;Password=your_password;";

        public async Task<ObservableCollection<LockerModel>> GetAllLockersAsync()
        {
            return await Task.Run(() =>
            {
                ObservableCollection<LockerModel> lockers = new ObservableCollection<LockerModel>();
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    conn.Open();
                    SqlCommand cmd = new SqlCommand("SELECT * FROM Lockers", conn);
                    SqlDataReader reader = cmd.ExecuteReader();
                    while (reader.Read())
                    {
                        lockers.Add(new LockerModel
                        {
                            ID = reader.GetInt32(0),
                            LockerType = reader.GetString(1),
                            Floor = reader.GetString(2),
                            Zone = reader.GetString(3),
                            Position = reader.GetString(4),
                            UserName = reader.GetString(5),
                            Email = reader.GetString(6),
                            Department = reader.GetString(7),
                            ManagerName = reader.GetString(8),
                            RegistrarName = reader.GetString(9),
                            LastModified = reader.GetDateTime(10)
                        });
                    }
                }
                return lockers;
            });
        }
    }

    public class LockerDiagramControl
    {
        public void GenerateDiagram(DiagramControl diagramControl, ObservableCollection<LockerModel> lockers)
        {
            diagramControl.Items.Clear();

            int xOffset = 0;
            int yOffset = 0;

            foreach (var locker in lockers)
            {
                var shape = new DiagramShape
                {
                    Content = $"{locker.LockerType} - {locker.UserName}",
                    Position = new System.Windows.Point(100 + xOffset, 100 + yOffset),
                    Shape = BasicShapes.Rectangle,
                    Background = Brushes.LightGray,
                    Width = 120,
                    Height = 80
                };

                diagramControl.Items.Add(shape);

                xOffset += 150;
                if (xOffset > 1000)
                {
                    xOffset = 0;
                    yOffset += 100;
                }
            }
        }
    }