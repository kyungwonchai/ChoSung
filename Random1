1. MSSQL 테이블 생성 쿼리 (테이블명: T_Tasks)
sql
코드 복사
CREATE TABLE T_Tasks (
    Id INT PRIMARY KEY IDENTITY,
    Priority INT NOT NULL,
    CreatedTime DATETIME NOT NULL DEFAULT GETDATE(),
    UpdateCount INT DEFAULT 0,
    LastUpdateTime DATETIME,
    FolderPath NVARCHAR(255),
    CellColor NVARCHAR(50),
    Assignee NVARCHAR(50),
    IsCompleted BIT DEFAULT 0
);
2. DatabaseService.cs - 데이터베이스 서비스 (T_Tasks 사용)
데이터베이스 쿼리에서 T_Tasks 테이블을 사용하여 데이터를 조회, 추가, 수정하는 코드를 업데이트했습니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using SwiftAIMaster.Models;

namespace SwiftAIMaster.Services
{
    public class DatabaseService
    {
        private readonly string _connectionString = "YourConnectionString";

        // 전체 작업 목록을 가져오는 메서드
        public List<TaskModel> GetAllTasks()
        {
            var tasks = new List<TaskModel>();
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("SELECT * FROM T_Tasks ORDER BY Priority", connection);
                connection.Open();
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        tasks.Add(new TaskModel
                        {
                            Id = (int)reader["Id"],
                            Priority = (int)reader["Priority"],
                            CreatedTime = (DateTime)reader["CreatedTime"],
                            UpdateCount = (int)reader["UpdateCount"],
                            LastUpdateTime = reader["LastUpdateTime"] as DateTime?,
                            FolderPath = reader["FolderPath"] as string,
                            CellColor = reader["CellColor"] as string,
                            Assignee = reader["Assignee"] as string,
                            IsCompleted = (bool)reader["IsCompleted"]
                        });
                    }
                }
            }
            return tasks;
        }

        // 작업 추가 메서드
        public void AddTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("INSERT INTO T_Tasks (Priority, CreatedTime, FolderPath, CellColor, Assignee, IsCompleted) VALUES (@Priority, @CreatedTime, @FolderPath, @CellColor, @Assignee, @IsCompleted)", connection);
                command.Parameters.AddWithValue("@Priority", task.Priority);
                command.Parameters.AddWithValue("@CreatedTime", task.CreatedTime);
                command.Parameters.AddWithValue("@FolderPath", task.FolderPath);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Assignee", task.Assignee);
                command.Parameters.AddWithValue("@IsCompleted", task.IsCompleted);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 작업 수정 메서드
        public void UpdateTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET UpdateCount = @UpdateCount, LastUpdateTime = @LastUpdateTime, CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@UpdateCount", task.UpdateCount);
                command.Parameters.AddWithValue("@LastUpdateTime", task.LastUpdateTime);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Id", task.Id);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 작업 우선순위 업데이트 메서드
        public void UpdateTaskPriority(int taskId, int newPriority)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET Priority = @Priority WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@Priority", newPriority);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        // 셀 색상 업데이트 메서드
        public void UpdateTaskColor(int taskId, string newColor)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE T_Tasks SET CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@CellColor", newColor);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }
    }
}
변경된 내용 요약
모든 SQL 쿼리에서 테이블 이름을 Tasks에서 T_Tasks로 변경했습니다.
GetAllTasks, AddTask, UpdateTask, UpdateTaskPriority, UpdateTaskColor 메서드의 쿼리를 수정하여 T_Tasks를 참조하도록 설정했습니다.
이제 T_Tasks