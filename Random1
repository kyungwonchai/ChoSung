겠습니다. 줄 번호와 로그 내용을 해시로 묶어 로그를 출력하는 방식으로 수정하겠습니다. 로그를 출력할 때 줄 번호와 로그 내용 사이에 탭 네 개(4칸)를 추가하여 출력하도록 할 것입니다. 이 접근 방식은 로그 파일의 각 줄을 고유하게 식별하고, 중복되지 않도록 보장합니다.

수정된 XAML 파일 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="LogMonitor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Monitor" Height="500" Width="800" Background="Purple">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- 로그 파일 선택 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,10">
            <Button Content="Select Log File" Click="SelectLogFile_Click" Margin="5"/>
            <TextBlock Name="LogFilePathTextBlock" VerticalAlignment="Center" Margin="5" Width="500"/>
        </StackPanel>

        <!-- 백업 폴더 선택 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="0,0,0,10">
            <Button Content="Select Backup Folder" Click="SelectBackupFolder_Click" Margin="5"/>
            <TextBlock Name="BackupFolderPathTextBlock" VerticalAlignment="Center" Margin="5" Width="500"/>
        </StackPanel>

        <!-- 설정 및 제어 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="2" Margin="0,0,0,10">
            <TextBlock Text="Max Log Lines:" VerticalAlignment="Center" Margin="5"/>
            <TextBox Name="MaxLinesTextBox" Width="50" TextChanged="MaxLinesTextBox_TextChanged" VerticalAlignment="Center" Margin="5"/>
            <Button Content="Clear Logs" Click="ClearLogs_Click" Margin="5"/>
            <Button Content="Start" Click="StartMonitoring_Click" Margin="5"/>
        </StackPanel>

        <!-- 로그 표시 섹션 -->
        <ListBox Name="LogListBox" Grid.Row="3" Margin="0,10,0,0"/>
    </Grid>
</Window>
수정된 C# 코드 파일 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace LogMonitor
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher _fileWatcher;
        private string _logFilePath;
        private string _backupFolderPath;
        private int _maxLogLines = 1000;
        private readonly Dictionary<long, string> _logLinesDictionary = new Dictionary<long, string>(); // 줄 번호와 로그를 매핑하는 딕셔너리
        private long _lastFileLength = 0; // 마지막 파일 길이

        private const string ConfigFileName = "config.ini"; // 설정 파일 이름

        public MainWindow()
        {
            InitializeComponent();
            LoadSettings(); // 설정 파일 로드
        }

        // 설정 파일에서 값 로드
        private void LoadSettings()
        {
            if (File.Exists(ConfigFileName))
            {
                var lines = File.ReadAllLines(ConfigFileName);
                foreach (var line in lines)
                {
                    var parts = line.Split('=');
                    if (parts.Length == 2)
                    {
                        var key = parts[0].Trim();
                        var value = parts[1].Trim();
                        if (key == "LogFilePath")
                        {
                            _logFilePath = value;
                            LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                        }
                        else if (key == "BackupFolderPath")
                        {
                            _backupFolderPath = value;
                            BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                        }
                        else if (key == "MaxLogLines")
                        {
                            if (int.TryParse(value, out int maxLines))
                            {
                                _maxLogLines = maxLines;
                            }
                        }
                    }
                }
            }

            MaxLinesTextBox.Text = _maxLogLines.ToString();
        }

        // 설정 파일에 값 저장
        private void SaveSettings()
        {
            var lines = new List<string>
            {
                $"LogFilePath={_logFilePath}",
                $"BackupFolderPath={_backupFolderPath}",
                $"MaxLogLines={_maxLogLines}"
            };

            File.WriteAllLines(ConfigFileName, lines);
        }

        // 로그 파일 변경 감시 시작
        private void StartFileWatcher()
        {
            if (_fileWatcher != null)
            {
                _fileWatcher.Dispose();
            }

            _fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(_logFilePath))
            {
                Filter = Path.GetFileName(_logFilePath),
                NotifyFilter = NotifyFilters.LastWrite
            };

            _fileWatcher.Changed += OnLogFileChanged;
            _fileWatcher.EnableRaisingEvents = true;
        }

        // 로그 파일이 변경되었을 때 호출되는 이벤트 핸들러
        private async void OnLogFileChanged(object sender, FileSystemEventArgs e)
        {
            await ReadNewLinesAsync();
        }

        // 새로운 로그 라인 읽기 (비동기)
        private async Task ReadNewLinesAsync()
        {
            await Dispatcher.InvokeAsync(() =>
            {
                // 파일이 존재하지 않으면 리턴
                if (!File.Exists(_logFilePath))
                    return;

                using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    // 이전에 읽었던 파일의 길이부터 읽기 시작
                    fs.Seek(_lastFileLength, SeekOrigin.Begin);

                    using (var sr = new StreamReader(fs, Encoding.Default))
                    {
                        long lineNumber = _logLinesDictionary.Count; // 기존 줄 수를 기반으로 새로운 줄 번호 계산

                        while (!sr.EndOfStream)
                        {
                            var line = sr.ReadLine();
                            if (!string.IsNullOrWhiteSpace(line))
                            {
                                // 현재 줄 번호와 로그 라인을 조합하여 해시로 관리
                                lineNumber++;
                                string formattedLine = $"{lineNumber}\t\t\t\t{line}";

                                if (!_logLinesDictionary.ContainsKey(lineNumber))
                                {
                                    _logLinesDictionary[lineNumber] = line; // 줄 번호와 로그 라인을 저장
                                    LogListBox.Items.Add(formattedLine); // 포맷된 로그 라인 추가
                                    BackupLogLine(formattedLine); // 백업
                                }
                            }

                            // 최대 로그 라인 수 유지
                            if (LogListBox.Items.Count > _maxLogLines)
                            {
                                LogListBox.Items.RemoveAt(0);
                                _logLinesDictionary.Remove(lineNumber - _maxLogLines);
                            }
                        }

                        // 마지막 파일 길이 저장
                        _lastFileLength = fs.Length;
                    }
                }
            });
        }

        // 로그 파일 선택 버튼 클릭 이벤트 핸들러
        private void SelectLogFile_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog();
            if (openFileDialog.ShowDialog() == true)
            {
                _logFilePath = openFileDialog.FileName;
                LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                SaveSettings(); // 설정 저장
                _lastFileLength = new FileInfo(_logFilePath).Length; // 초기 파일 길이 설정
                DisplayLastThreeLines(); // 마지막 3줄 표시
            }
        }

        // 백업 폴더 선택 버튼 클릭 이벤트 핸들러
        private void SelectBackupFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderDialog = new System.Windows.Forms.FolderBrowserDialog();
            if (folderDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _backupFolderPath = folderDialog.SelectedPath;
                BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                SaveSettings(); // 설정 저장
            }
        }

        // 마지막 3줄 표시
        private void DisplayLastThreeLines()
        {
            if (!File.Exists(_logFilePath))
                return;

            var lines = new List<string>();

            using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                fs.Seek(0, SeekOrigin.Begin);

                using (var sr = new StreamReader(fs, Encoding.Default))
                {
                    while (!sr.EndOfStream)
                    {
                        var line = sr.ReadLine();
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            lines.Add(line);
                            if (lines.Count > 3)
                            {
                                lines.RemoveAt(0);
                            }
                        }
                    }
                }
            }

            LogListBox.Items.Clear();
            LogListBox.Items.Add("최종 3줄:");
            long lineNumber = 0;

            foreach (var line in lines)
            {
                lineNumber++;
                string formattedLine = $"{lineNumber}\t\t\t\t{line}";
                LogListBox.Items.Add(formattedLine);
            }

            _lastFileLength = new FileInfo(_logFilePath).Length; // 파일의 길이를 마지막 위치로 설정
        }

        // 로그 감시 시작 버튼 클릭 이벤트 핸들러
        private void StartMonitoring_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_logFilePath))
            {
                StartFileWatcher();
            }
        }

        // 로그 지우기 버튼 클릭 이벤트 핸들러
        private void ClearLogs_Click(object sender, RoutedEventArgs e)
        {
            LogListBox.Items.Clear();
            _logLinesDictionary.Clear();
        }

        // 최대 로그 라인 수 텍스트 박스 변경 이벤트 핸들러
        private void MaxLinesTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (int.TryParse(MaxLinesTextBox.Text, out int maxLines))
            {
                _maxLogLines = maxLines;
                SaveSettings(); // 설정 저장
            }
        }

        // 백업 폴더에 로그 라인 저장
        private void BackupLogLine(string line)
        {
            if (string.IsNullOrEmpty(_backupFolderPath))
            {
                return;
            }

            // 날짜별 폴더 생성
            var dateFolder = Path.Combine(_backupFolderPath, DateTime.Now.ToString("yyyyMMdd"));
            if (!Directory.Exists(dateFolder))
            {
                Directory.CreateDirectory(dateFolder);
            }

            var backupFilePath = Path.Combine(dateFolder, $"backup_{DateTime.Now:yyyyMMdd}.log");

            using (var sw = new StreamWriter(backupFilePath, true, Encoding.Default))
            {
                sw.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {line}");
            }
        }
    }
}
주요 변경 사항:
줄 번호와 로그 해시 관리: Dictionary<long, string>를 사용하여 각 로그 라인에 줄 번호를 할당하고, 줄 번호와 로그 내용을 매핑하여 관리합니다. 이를 통해 중복 없이 정확하게 줄 번호와 로그를 관리할 수 있습니다.

줄 번호와 탭 추가: 로그 라인을 LogListBox에 추가할 때 줄 번호와 4칸의 탭(\t\t\t\t)을 추가하여 출력 형식을 지정합니다.

중복 방지: Dictionary를 사용하여 각 줄을 고유하게 관리하므로 중복된 로그 라인이 추가되지 않습니다.

최종 3줄 표시 및 백업: 로그 파일을 처음 선택할 때 마지막 3줄을 읽어서 줄 번호와 함께 출력하며, 로그 파일이 변경될 때마다 새로운 줄만 읽어와 백업합니다.

이제 수정된 코드로 로그 파일을 모니터링하고, 각 줄에 줄 번호를 붙여 중복 없이 출력할 수 있습니다