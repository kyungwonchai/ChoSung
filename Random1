on 3.12에서도 딥러닝 작업을 원활히 수행할 수 있습니다. 다만, Python 3.12는 최신 버전으로 일부 라이브러리가 아직 공식 지원하지 않을 수 있습니다. TensorFlow와 PyTorch는 Python 3.12 지원 여부를 확인한 후 설치를 진행해야 합니다.

1. Python 3.12 가상환경 설정 및 활성화
1-1. Python 3.12 설치 확인
Python 3.12을 설치하고, 설치 경로를 확인합니다.
명령 프롬프트에서 설치 확인:
cmd
코드 복사
py -3.12 --version
결과: Python 3.12.x
1-2. 가상환경 생성
cmd
코드 복사
py -3.12 -m venv venv
1-3. 가상환경 활성화
cmd
코드 복사
venv\Scripts\activate
2. 딥러닝 라이브러리 설치
Python 3.12에서 동작하는 최신 버전을 설치합니다.

2-1. 필수 라이브러리 설치
cmd
코드 복사
pip install numpy pandas scikit-learn matplotlib seaborn jupyter notebook
2-2. TensorFlow 또는 PyTorch 설치
TensorFlow 설치 (Python 3.12 지원 확인 필요):
cmd
코드 복사
pip install tensorflow
PyTorch 설치: PyTorch는 Python 3.12를 지원합니다. 설치 명령은 PyTorch 공식 설치 페이지에서 제공된 명령어를 사용하세요. 일반적인 설치 명령은 아래와 같습니다:
cmd
코드 복사
pip install torch torchvision torchaudio
3. Jupyter Notebook 실행
Jupyter Notebook 설치:
cmd
코드 복사
pip install notebook
jupyter notebook
브라우저에서 Notebook이 열리며, 여기서 코드를 실행할 수 있습니다.
4. 딥러닝 학습 코드
다음은 TensorFlow와 PyTorch로 딥러닝 학습을 실행하는 코드 예제입니다.

4-1. TensorFlow 코드 예제
python
코드 복사
import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
import numpy as np

# Iris 데이터셋 로드
iris = load_iris()
X = iris.data
y = iris.target

# 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 원-핫 인코딩
y_train = tf.keras.utils.to_categorical(y_train, 3)
y_test = tf.keras.utils.to_categorical(y_test, 3)

# 모델 정의
model = Sequential([
    Dense(10, input_shape=(4,), activation='relu'),
    Dense(8, activation='relu'),
    Dense(3, activation='softmax')  # 3개 클래스
])

# 모델 컴파일
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 학습
model.fit(X_train, y_train, epochs=50, batch_size=8, verbose=1)

# 평가
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy}")
4-2. PyTorch 코드 예제
python
코드 복사
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
import numpy as np

# Iris 데이터셋 로드
iris = load_iris()
X = iris.data
y = iris.target

# 데이터 분리
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 텐서 변환
X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)

# 모델 정의
class NeuralNet(nn.Module):
    def __init__(self):
        super(NeuralNet, self).__init__()
        self.fc1 = nn.Linear(4, 10)
        self.fc2 = nn.Linear(10, 8)
        self.fc3 = nn.Linear(8, 3)
        self.relu = nn.ReLU()
        self.softmax = nn.Softmax(dim=1)

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.softmax(self.fc3(x))
        return x

model = NeuralNet()

# 손실 함수와 옵티마이저
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# 학습
for epoch in range(50):
    optimizer.zero_grad()
    outputs = model(X_train)
    loss = criterion(outputs, y_train)
    loss.backward()
    optimizer.step()
    if (epoch + 1) % 10 == 0:
        print(f"Epoch [{epoch+1}/50], Loss: {loss.item():.4f}")

# 평가
with torch.no_grad():
    y_pred = model(X_test)
    predicted = torch.argmax(y_pred, dim=1)
    accuracy = (predicted == y_test).float().mean()
    print(f"Test Accuracy: {accuracy.item():.4f}")
5. 문제 해결
라이브러리 호환 문제: 설치 도중 에러가 발생하면, 라이브러리의 공식 문서에서 Python 3.12 지원 여부를 확인합니다.