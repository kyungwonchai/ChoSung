죄송합니다! 제가 .NET Framework 4.5를 기준으로 한다고 말씀드렸음에도 불구하고, 해당 라인 var (hash, salt) = passwordService.HashPassword(password); 는 C# 7.0부터 지원되는 튜플 해체(Tuple Deconstruction) 문법을 사용했습니다. .NET Framework 4.5는 기본적으로 C# 5.0 버전을 사용하므로 이 문법을 바로 인식하지 못해 "형식을 유추할 수 없다"는 오류가 발생한 것입니다.

이 문제를 해결하기 위해 DatabaseService.cs 파일의 CreateUserAsync 메서드 부분을 다음과 같이 수정해야 합니다.

기존 코드 (오류 발생 부분):

C#

// MGSPMonitorControl/Services/DatabaseService.cs
// ... (다른 코드는 동일) ...
        public async Task<bool> CreateUserAsync(string username, string password, bool canManageAgents, bool canControlPower, IPasswordService passwordService)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var (hash, salt) = passwordService.HashPassword(password); // <--- 이 줄에서 오류 발생
            string query = @"INSERT INTO Users (Username, PasswordHash, Salt, CanManageAgents, CanControlPower, IsActive, CreatedDate) 
                             VALUES (@Username, @PasswordHash, @Salt, @CanManageAgents, @CanControlPower, 1, GETUTCDATE());";
            
            // ... (이하 동일) ...
        }
// ...
수정된 코드 (.NET Framework 4.5 호환):

passwordService.HashPassword(password) 메서드는 Tuple<string, string>을 반환하므로, 다음과 같이 받아서 사용해야 합니다.

C#

// MGSPMonitorControl/Services/DatabaseService.cs
// ... (다른 using 문 및 클래스 정의는 동일) ...

        public async Task<bool> CreateUserAsync(string username, string password, bool canManageAgents, bool canControlPower, IPasswordService passwordService)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");

            // Tuple<string, string> 형태로 결과를 받고, 각 아이템에 접근합니다.
            Tuple<string, string> hashResult = passwordService.HashPassword(password);
            string hash = hashResult.Item1; // 첫 번째 아이템 (해시된 비밀번호)
            string salt = hashResult.Item2; // 두 번째 아이템 (솔트)

            string query = @"INSERT INTO Users (Username, PasswordHash, Salt, CanManageAgents, CanControlPower, IsActive, CreatedDate) 
                             VALUES (@Username, @PasswordHash, @Salt, @CanManageAgents, @CanControlPower, 1, GETUTCDATE());";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Username", username);
                command.Parameters.AddWithValue("@PasswordHash", hash); // 수정된 변수 사용
                command.Parameters.AddWithValue("@Salt", salt);         // 수정된 변수 사용
                command.Parameters.AddWithValue("@CanManageAgents", canManageAgents);
                command.Parameters.AddWithValue("@CanControlPower", canControlPower);
                
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

// ... (나머지 DatabaseService.cs 코드는 이전과 동일) ...
수정된 DatabaseService.cs 파일의 전체 코드: