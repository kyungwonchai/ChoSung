import fitz  # PyMuPDF
import os
from collections import defaultdict

def convert_color(color_int):
    """
    PyMuPDF의 정수형 색상 값을 RGB 튜플로 변환합니다.
    """
    if color_int is None:
        return (0, 0, 0)  # 기본값 검은색
    r = (color_int >> 16) & 0xFF
    g = (color_int >> 8) & 0xFF
    b = color_int & 0xFF
    return (r, g, b)

def analyze_pdf_table_structure(pdf_path, output_txt_path, y_threshold=100.0):
    """
    PDF의 모든 페이지를 분석하여 그려진 사각형을 '메인 그룹'으로 자동 탐지하고,
    내부 텍스트를 '소그룹'으로 분류하여 파일로 저장합니다.

    :param pdf_path: 분석할 PDF 파일 경로
    :param output_txt_path: 결과를 저장할 TXT 파일 경로
    :param y_threshold: 이 y좌표 값보다 큰 영역만 분석합니다.
    """
    try:
        doc = fitz.open(pdf_path)
    except Exception as e:
        print(f"오류: PDF 파일을 열 수 없습니다. '{pdf_path}'. 에러 메시지: {e}")
        return

    with open(output_txt_path, 'w', encoding='utf-8') as f:
        f.write("페이지, 메인그룹ID, 소그룹, 너비, 높이, 텍스트, 색상(RGB), 글자크기\n")

        # 문서의 모든 페이지를 순회
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            
            # 1. 페이지에 그려진 사각형(그룹 패턴) 탐지
            drawings = page.get_drawings()
            group_rects = []
            min_group_area = 1000  # 너무 작은 사각형은 무시
            for d in drawings:
                # 's'는 일반 사각형, 'f'는 채워진 사각형
                if d['type'] in ['s', 'f']:
                    rect = d['rect']
                    # y 임계값과 최소 크기 조건을 만족하는 사각형만 그룹으로 간주
                    if rect.width * rect.height > min_group_area and rect.y0 > y_threshold:
                        group_rects.append(rect)

            # 탐지된 그룹들을 위에서 아래로, 왼쪽에서 오른쪽으로 정렬
            group_rects.sort(key=lambda r: (r.y0, r.x0))

            if not group_rects:
                print(f"{page_num + 1}페이지에는 y > {y_threshold} 위치에 분석할 사각형 그룹 패턴이 없어 건너뜁니다.")
                continue

            print(f"{page_num + 1}페이지 분석 중... {len(group_rects)}개의 메인 그룹을 발견했습니다.")

            # 2. 페이지의 모든 텍스트 블록 추출
            blocks = page.get_text("dict", flags=fitz.TEXTFLAGS_SEARCH)["blocks"]
            text_blocks = []
            for block in blocks:
                if block['bbox'][1] > y_threshold and 'lines' in block and block['lines']:
                    block_info = {
                        'bbox': fitz.Rect(block['bbox']), # fitz.Rect 객체로 변환하여 사용
                        'text': "", 'color': (0, 0, 0), 'size': 0
                    }
                    if block['lines']:
                        line_texts = []
                        for line in block['lines']:
                            span_texts = []
                            for span in line['spans']:
                                span_texts.append(span['text'])
                                if not block_info['size']:
                                    block_info['color'] = convert_color(span['color'])
                                    block_info['size'] = span['size']
                            line_texts.append(" ".join(span_texts))
                        block_info['text'] = " ".join(line_texts).replace('\n', ' ').strip()
                    
                    if block_info['text']:
                        text_blocks.append(block_info)
            
            # 3. 텍스트 블록을 그룹에 할당
            grouped_texts = defaultdict(list)
            for text_block in text_blocks:
                for i, group_rect in enumerate(group_rects):
                    # 텍스트 블록이 그룹 사각형 안에 완전히 포함되는지 확인
                    if text_block['bbox'] in group_rect:
                        grouped_texts[i].append(text_block)
                        break  # 하나의 그룹에 할당되면 다음 텍스트 블록으로 넘어감

            # 4. 각 그룹을 처리하고 소그룹을 명명하여 파일에 쓰기
            for group_id, blocks_in_group in grouped_texts.items():
                if not blocks_in_group:
                    continue
                
                # 그룹 내 블록들을 y좌표(위->아래) 기준으로 정렬
                blocks_in_group.sort(key=lambda b: b['bbox'].y0)
                
                for i, block_info in enumerate(blocks_in_group):
                    # 위치에 따라 소그룹 이름 부여
                    if i == 0:
                        sub_group_name = "타이틀"
                    else:
                        sub_group_name = f"내용_{i}"
                    
                    rect = block_info['bbox']
                    width, height = rect.width, rect.height
                    text, color, size = block_info['text'], block_info['color'], block_info['size']
                    
                    # 사용자가 보기 편하도록 그룹ID는 1부터 시작
                    main_group_id_str = f"그룹_{group_id + 1:03d}"

                    output_line = (
                        f"{page_num + 1}, "
                        f"{main_group_id_str}, "
                        f"{sub_group_name}, "
                        f"너비:{width:.2f}, 높이:{height:.2f}, "
                        f"텍스트:\"{text}\", "
                        f"색상:{color}, "
                        f"크기:{size:.2f}\n"
                    )
                    f.write(output_line)

    doc.close()
    print(f"\n분석 완료! 결과가 '{output_txt_path}' 파일에 저장되었습니다.")


if __name__ == '__main__':
    # --- 설정 ---
    pdf_file_path = "example.pdf"
    output_file_path = "analysis_result.txt"
    y_coordinate_threshold = 100
    
    # --- 실행 ---
    if not os.path.exists(pdf_file_path):
        print(f"'{pdf_file_path}'를 찾을 수 없어 테스트용 2페이지 PDF를 생성합니다.")
        doc = fitz.open()
        
        # --- 1페이지 샘플 데이터 생성 ---
        page1 = doc.new_page()
        page1.insert_text((50, 80), "이 텍스트는 y좌표 100 미만이라 분석되지 않습니다.", fontsize=10)
        
        y_pos = 120
        # Group 1
        rect1 = fitz.Rect(40, y_pos - 10, 550, y_pos + 60)
        page1.draw_rect(rect1, color=(0.8, 0.8, 0.8)) # 그룹을 감싸는 회색 사각형
        page1.insert_text((50, y_pos), f"P1 메인 그룹 1 타이틀", fontsize=11, color=(0,0,0))
        page1.insert_text((50, y_pos + 20), f"P1 L-Item 1/A", fontsize=10, color=(0,0,1))
        page1.insert_text((350, y_pos + 20), f"P1 R-Item 1/X", fontsize=10, color=(1,0,0))
        page1.insert_text((50, y_pos + 40), f"P1 L-Item 2/B", fontsize=10, color=(0,0,1))
        y_pos += 90

        # Group 2
        rect2 = fitz.Rect(40, y_pos - 10, 550, y_pos + 40)
        page1.draw_rect(rect2, color=(0.8, 0.8, 0.8))
        page1.insert_text((50, y_pos), f"P1 메인 그룹 2 타이틀", fontsize=11, color=(0,0,0))
        page1.insert_text((50, y_pos + 20), f"이 그룹은 내용이 하나입니다.", fontsize=10, color=(0,0,1))
        
        # --- 2페이지 샘플 데이터 생성 ---
        page2 = doc.new_page()
        y_pos = 150

        # Group 3 (on page 2, left)
        rect3 = fitz.Rect(40, y_pos - 10, 300, y_pos + 80)
        page2.draw_rect(rect3, color=(0.9, 0.9, 0.8))
        page2.insert_text((50, y_pos), f"P2 좌측 그룹", fontsize=11, color=(0,0.5,0))
        page2.insert_text((50, y_pos + 20), f"P2 L-Item 1/A", fontsize=9, color=(0,0.5,0))
        page2.insert_text((50, y_pos + 40), f"P2 L-Item 2/B", fontsize=9, color=(0,0.5,0))
        
        # Group 4 (on page 2, right)
        rect4 = fitz.Rect(320, y_pos - 10, 580, y_pos + 80)
        page2.draw_rect(rect4, color=(0.9, 0.8, 0.9))
        page2.insert_text((330, y_pos), f"P2 우측 그룹", fontsize=11, color=(0.5,0,0.5))
        page2.insert_text((330, y_pos + 20), f"P2 R-Item 1/Y", fontsize=9, color=(0.5,0,0.5))
        page2.insert_text((330, y_pos + 40), f"P2 R-Item 2/Z", fontsize=9, color=(0.5,0,0.5))
        
        doc.save(pdf_file_path)
        doc.close()
        print("테스트용 PDF 생성이 완료되었습니다.")
        
    analyze_pdf_table_structure(pdf_file_path, output_file_path, y_coordinate_threshold)

