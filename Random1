알겠습니다. 파일 목록 순서에 따라 이어서 13, 14, 15번째 파일(LockerAssignment.cs, LockerType.cs, SubPart.cs)의 전체 코드를 여기에 바로 작성해 드리겠습니다. 이 파일들은 모두 Models 폴더에 위치합니다.

13. Models/LockerAssignment.cs

사물함 배정 정보를 나타내는 모델 클래스입니다. 신규 컬럼 4개가 포함되어 있습니다. UI 그리드에서 직접 편집될 수 있으므로 INotifyPropertyChanged를 구현합니다 (ViewModelBase 상속).

C#

using LockerManagementApp.Infrastructure; // ViewModelBase 사용 위해 추가
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 사물함 배정 정보 모델 (신규 컬럼 추가됨)
    /// </summary>
    [Table("LockerAssignments")] // 데이터베이스 테이블 이름 명시
    public class LockerAssignment : ViewModelBase // ViewModelBase 상속하여 INotifyPropertyChanged 구현
    {
        // --- Private backing fields ---
        private int _id;
        private string _lockerType = string.Empty;
        private string _floor = string.Empty;
        private string _zone = string.Empty;
        private string _specificLocation = string.Empty;
        private string _userName; // .NET Framework에서는 string? 대신 string 사용
        private string _knoxId;
        private string _subPart;
        private string _administrator;
        private DateTime _lastUpdated = DateTime.Now;
        private string _transferStatus;
        private string _details;
        private string _remarks;
        private string _notes;

        // --- Public Properties ---
        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id { get => _id; set => SetProperty(ref _id, value); }

        [Required(ErrorMessage = "사물함 종류는 필수 항목입니다.")]
        [StringLength(50)]
        public string LockerType { get => _lockerType; set => SetProperty(ref _lockerType, value); }

        [Required(ErrorMessage = "층 정보는 필수 항목입니다.")]
        [StringLength(10)]
        public string Floor { get => _floor; set => SetProperty(ref _floor, value); }

        [Required(ErrorMessage = "구역 정보는 필수 항목입니다.")]
        [StringLength(50)]
        public string Zone { get => _zone; set => SetProperty(ref _zone, value); }

        [Required(ErrorMessage = "세부 위치는 필수 항목입니다.")]
        [StringLength(100)]
        public string SpecificLocation { get => _specificLocation; set => SetProperty(ref _specificLocation, value); }

        [StringLength(100)]
        public string UserName
        {
            get => _userName;
            // UserName 변경 시 IsAssigned 상태도 변경됨을 UI에 알림
            set { if (SetProperty(ref _userName, value)) OnPropertyChanged(nameof(IsAssigned)); }
        }

        [StringLength(100)]
        public string KnoxId { get => _knoxId; set => SetProperty(ref _knoxId, value); }

        [StringLength(50)]
        public string SubPart { get => _subPart; set => SetProperty(ref _subPart, value); }

        [StringLength(100)]
        public string Administrator { get => _administrator; set => SetProperty(ref _administrator, value); }

        // --- 신규 컬럼 속성 ---
        [StringLength(50)]
        public string TransferStatus { get => _transferStatus; set => SetProperty(ref _transferStatus, value); }

        [StringLength(500)]
        public string Details { get => _details; set => SetProperty(ref _details, value); }

        [StringLength(500)]
        public string Remarks { get => _remarks; set => SetProperty(ref _remarks, value); }

        [StringLength(500)]
        public string Notes { get => _notes; set => SetProperty(ref _notes, value); }
        // --- 신규 컬럼 속성 끝 ---

        // 마지막 수정일시는 일반적으로 UI에서 직접 수정하지 않으므로 알림 불필요
        public DateTime LastUpdated { get => _lastUpdated; set => SetProperty(ref _lastUpdated, value); }

        /// <summary>
        /// 현재 사물함이 사용자에게 배정되었는지 여부 (DB에는 저장되지 않음)
        /// </summary>
        [NotMapped] // 데이터베이스 컬럼 아님
        public bool IsAssigned => !string.IsNullOrWhiteSpace(UserName);

        /// <summary>
        /// 객체를 문자열로 표현 (디버깅 등)
        /// </summary>
        public override string ToString() => $"{Floor}-{Zone}-{SpecificLocation}: {(IsAssigned ? UserName : "(비어 있음)")}";

        // INotifyPropertyChanged 구현은 ViewModelBase에서 상속받음
    }
}
14. Models/LockerType.cs

사물함 종류 마스터 데이터를 나타내는 모델 클래스입니다.

C#

using LockerManagementApp.Infrastructure; // ViewModelBase 사용 위해 추가
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 사물함 종류 마스터 데이터 모델
    /// </summary>
    [Table("LockerTypes")] // 데이터베이스 테이블 이름 명시
    public class LockerType : ViewModelBase // ViewModelBase 상속하여 INotifyPropertyChanged 구현
    {
        private int _id;
        private string _name;

        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id
        {
            get => _id;
            set => SetProperty(ref _id, value);
        }

        [Required(ErrorMessage = "사물함 종류 이름은 필수입니다.")] // 필수 값
        [StringLength(50)] // 문자열 길이 제한
        // 참고: UNIQUE 제약 조건은 SQL 스크립트에서 설정했습니다.
        public string Name
        {
            get => _name;
            set => SetProperty(ref _name, value); // 값 변경 시 UI 알림
        }

        // ToString() 재정의
        public override string ToString()
        {
            return Name ?? base.ToString();
        }

        // ViewModelBase에서 INotifyPropertyChanged 관련 구현 상속받음
    }
}
15. Models/SubPart.cs

소파트 마스터 데이터를 나타내는 모델 클래스입니다.

C#

using LockerManagementApp.Infrastructure; // ViewModelBase 사용 위해 추가
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 소파트 마스터 데이터 모델
    /// </summary>
    [Table("SubParts")] // 데이터베이스 테이블 이름 명시
    public class SubPart : ViewModelBase // ViewModelBase 상속하여 INotifyPropertyChanged 구현
    {
        private int _id;
        private string _name;

        [Key] // 기본 키
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // 자동 증가
        public int Id
        {
            get => _id;
            set => SetProperty(ref _id, value);
        }

        [Required(ErrorMessage = "소파트 이름은 필수입니다.")] // 필수 값
        [StringLength(50)] // 문자열 길이 제한
        // 참고: UNIQUE 제약 조건은 SQL 스크립트에서 설정했습니다.
        public string Name
        {
            get => _name;
            set => SetProperty(ref _name, value); // 값 변경 시 UI 알림
        }

        // ToString() 재정의
        public override string ToString()
        {
            return Name ?? base.ToString();
        }

        // ViewModelBase에서 INotifyPropertyChanged 관련 구현 상속받음
    }