래는 BarButtonItem을 중심으로 정보를 추출하는 Python 코드입니다. 코드에서는 BarButtonItem을 기준으로 해당 버튼의 모든 속성을 개별로 추적하여 요구 사항에 맞게 정보를 정리합니다.

코드 설명
모든 BarButtonItem을 추적:

BarButtonItem이 등장하면 해당 버튼의 모든 속성을 추적합니다.
버튼의 속성(Tag, ImageOptions.Image, Hint, Style, ItemClick)을 찾아내어 정리합니다.
BarButtonItem 이름을 기준으로 데이터 수집을 구분합니다.
페이지 및 그룹 상속:

버튼이 속한 페이지와 그룹 정보를 별도로 추적하여 상속합니다.
CSV로 저장:

추출한 데이터를 CSV 파일로 저장합니다.
Python 코드
python
코드 복사
import csv

def extract_ribbon_details(input_file, output_file):
    # 결과를 저장할 리스트
    ribbon_data = []

    try:
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        current_page = None
        current_group = None
        current_button = None
        button_details = {}

        for i, line in enumerate(lines):
            stripped_line = line.strip()

            # 리본 페이지 탐지
            if 'RibbonPage' in stripped_line and 'Text =' in stripped_line:
                current_page = stripped_line.split('Text =')[1].strip().strip('"')

            # 리본 그룹 탐지
            elif 'RibbonPageGroup' in stripped_line and 'Text =' in stripped_line:
                current_group = stripped_line.split('Text =')[1].strip().strip('"')

            # BarButtonItem 탐지
            elif 'BarButtonItem' in stripped_line:
                if current_button:
                    # 이전 버튼 정보 저장
                    ribbon_data.append([
                        current_page, current_group,
                        button_details.get("button_name", "Unknown"),
                        button_details.get("tag_name", ""),
                        button_details.get("icon_path", ""),
                        button_details.get("tooltip", ""),
                        button_details.get("action_function", ""),
                        button_details.get("style", "")
                    ])

                # 새로운 버튼 초기화
                current_button = stripped_line.split('Name =')[1].strip().strip('"') if 'Name =' in stripped_line else "Unknown"
                button_details = {
                    "button_name": current_button,
                    "tag_name": None,
                    "icon_path": None,
                    "tooltip": None,
                    "action_function": None,
                    "style": None
                }

            # 버튼 속성 추적
            if current_button:
                if 'Tag =' in stripped_line:
                    button_details["tag_name"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'ImageOptions.Image =' in stripped_line:
                    button_details["icon_path"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'Hint =' in stripped_line:
                    button_details["tooltip"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'ItemClick += ' in stripped_line:
                    button_details["action_function"] = stripped_line.split('+=')[1].strip().strip(';').strip()
                elif 'Style =' in stripped_line:
                    button_details["style"] = stripped_line.split('=')[1].strip().strip(';').strip()

        # 마지막 버튼 정보 저장
        if current_button:
            ribbon_data.append([
                current_page, current_group,
                button_details.get("button_name", "Unknown"),
                button_details.get("tag_name", ""),
                button_details.get("icon_path", ""),
                button_details.get("tooltip", ""),
                button_details.get("action_function", ""),
                button_details.get("style", "")
            ])

        # CSV 파일로 저장
        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
            csvwriter = csv.writer(csvfile)
            # 헤더 작성
            csvwriter.writerow([
                'Page Name', 'Group Name', 'Button Name',
                'Tag Name', 'Icon Path', 'Tooltip',
                'Action Function', 'Ribbon Item Style'
            ])
            # 데이터 작성
            csvwriter.writerows(ribbon_data)

        print(f"리본 데이터를 {output_file} 파일에 성공적으로 저장했습니다.")

    except Exception as e:
        print(f"오류 발생: {e}")

# 실행
input_path = r"C:\agent\txt1.txt"  # 디자이너 파일 경로
output_path = r"C:\agent\ribbon_data.csv"  # 출력 CSV 경로
extract_ribbon_details(input_path, output_path)
코드 실행 흐름
리본 페이지 탐지:

RibbonPage와 RibbonPageGroup의 이름을 추적하여 현재 버튼이 어느 페이지와 그룹에 속해 있는지 확인합니다.
BarButtonItem 속성 추적:

BarButtonItem의 속성을 반복적으로 확인하며 필요한 정보(Tag, ImageOptions.Image, Hint, Style, ItemClick)를 모두 추출합니다.
버튼 정보 저장:

버튼이 끝날 때마다 해당 정보를 저장하고 새 버튼 탐지를 시작합니다.
CSV 저장:

추출한 데이터를 CSV 파일로 저장합니다.
CSV 출력 예시 (ribbon_data.csv)
csv
코드 복사
Page Name,Group Name,Button Name,Tag Name,Icon Path,Tooltip,Action Function,Ribbon Item Style
"File","Manage","OpenFile","file_open","C:\icons\open.png","Open a file","OpenFile_Click","Large"
"File","Manage","SaveFile","file_save","C:\icons\save.png","Save current file","SaveFile_Click","Small"
"Edit","Clipboard","Copy","edit_copy","C:\icons\copy.png","Copy selected","Copy_Click","Small"
기대 결과
모든 BarButtonItem 속성 포함:

각 버튼의 이름, 태그, 아이콘 경로, 툴팁, 액션 함수, 스타일을 정확히 추출합니다.
다양한 버튼 추적 가능:

버튼이 중첩되거나 속성의 순서가 달라도 문제없이 추적할 수 있습니다.
다양한 파일 형식 지원: