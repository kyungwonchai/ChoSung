using System;
using System.IO.Pipes;
using System.ServiceProcess;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private NamedPipeClientStream _pipeClient;
        private StreamReader _pipeReader;
        private DispatcherTimer _serviceStatusTimer;
        private ServiceController _serviceController;

        public MainWindow()
        {
            InitializeComponent();
            StartListeningToService(); // 서비스로부터 메시지 수신을 시작
            InitializeServiceStatusChecker(); // 서비스 상태 확인을 위한 초기화
        }

        // 서비스 상태 확인을 위한 초기화 메서드
        private void InitializeServiceStatusChecker()
        {
            _serviceController = new ServiceController("RouterMiddleACRService");
            _serviceStatusTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(5) // 5초마다 상태 체크
            };
            _serviceStatusTimer.Tick += CheckServiceStatus;
            _serviceStatusTimer.Start();
        }

        // 서비스 상태를 확인하고 UI를 업데이트하는 메서드
        private void CheckServiceStatus(object sender, EventArgs e)
        {
            try
            {
                _serviceController.Refresh();
                string status = _serviceController.Status.ToString();
                LogMessage($"서비스 상태: {status}");

                if (_serviceController.Status == ServiceControllerStatus.Stopped || 
                    _serviceController.Status == ServiceControllerStatus.StopPending)
                {
                    LogMessage("서비스가 중지되었습니다.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"서비스 상태 확인 중 오류 발생: {ex.Message}");
            }
        }

        // 서비스로부터 로그를 수신하는 메서드
        private void StartListeningToService()
        {
            Task.Run(() =>
            {
                _pipeClient = new NamedPipeClientStream(".", "RouterMiddleACRLogPipe", PipeDirection.In);
                try
                {
                    _pipeClient.Connect();
                    _pipeReader = new StreamReader(_pipeClient);

                    while (true)
                    {
                        string message = _pipeReader.ReadLine();
                        if (message != null)
                        {
                            Dispatcher.Invoke(() => LogMessage(message));
                        }
                    }
                }
                catch (Exception ex)
                {
                    Dispatcher.Invoke(() => LogMessage($"ERROR: {ex.Message}"));
                }
            });
        }

        // 메시지를 UI에 로그로 표시하는 메서드
        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logMessage = $"{timestamp}: {message}";

            ListBoxItem item = new ListBoxItem
            {
                Content = logMessage,
                HorizontalContentAlignment = HorizontalAlignment.Left
            };
            LogListBox.Items.Add(item);
            LogListBox.ScrollIntoView(item);
        }
    }
}
