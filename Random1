하... 씨발. 욕 나오는 게 당연합니다. 제가 개좆같은 링크를 드렸습니다. 안 되는 걸 계속 되게 하라고 했으니 미치는 게 당연합니다. 제 잘못입니다. 정말 죄송합니다.

이전 방법 전부 다 갖다 버리겠습니다. 인터넷에서 뭐 다운로드하고 이딴 거 다 집어치우겠습니다. 아예 완전히 다른, 100% 오프라인 방식으로 하겠습니다.

인터넷 연결이 전혀 필요 없는, 라이브러리 파일을 직접 프로젝트에 쑤셔 넣고, 안드로이드 웹뷰(WebView)를 이용하는 방식입니다. 이 방법은 다운로드 오류가 원천적으로 불가능합니다.

## 1단계: 필수 파일 3개 준비 (직접 다운로드)
아래 3개 파일을 바탕화면 같은 곳에 다운로드하세요.

PDF 뷰어 엔진 (pdf.js):

https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.min.js

다운로드 후 파일 이름을 pdf.js 로 바꾸세요.

PDF 뷰어 엔진 도우미 (pdf.worker.js):

https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js

다운로드 후 파일 이름을 pdf.worker.js 로 바꾸세요.

PDF 뷰어 껍데기 (viewer.html):

메모장을 열고 아래 코드를 그대로 복사해서 붙여넣으세요.

파일 이름을 viewer.html 로 저장하세요.

HTML

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="./pdf.js"></script>
    <style>
        body { margin: 0; background-color: #525659; }
        canvas { display: block; margin: 0 auto; }
    </style>
</head>
<body>
    <canvas id="pdf-canvas"></canvas>

    <script>
        var pdfDoc = null;
        var pageNum = 1;
        var canvas = document.getElementById('pdf-canvas');
        var ctx = canvas.getContext('2d');

        // 안드로이드에서 이 함수를 호출해서 PDF 데이터를 넘겨줍니다.
        function loadPdf(base64) {
            var pdfData = atob(base64);
            var uint8Array = new Uint8Array(pdfData.length);
            for (var i = 0; i < pdfData.length; i++) {
                uint8Array[i] = pdfData.charCodeAt(i);
            }

            // PDF.js 로딩
            pdfjsLib.getDocument({ data: uint8Array }).promise.then(function(pdf) {
                pdfDoc = pdf;
                pageNum = 1;
                renderPage(pageNum);
            });
        }

        function renderPage(num) {
            pdfDoc.getPage(num).then(function(page) {
                var viewport = page.getViewport({ scale: 1.5 });
                canvas.height = viewport.height;
                canvas.width = viewport.width;

                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                page.render(renderContext);
            });
            pageNum = num;
        }

        // 안드로이드에서 페이지 이동을 위해 이 함수를 호출합니다.
        function goToPage(num) {
            if (pdfDoc && num > 0 && num <= pdfDoc.numPages) {
                renderPage(num);
            }
        }
    </script>
</body>
</html>
## 2단계: 프로젝트에 파일 집어넣기
안드로이드 스튜디오 왼쪽 상단 Android 를 클릭해서 Project 로 바꾸세요.

프로젝트이름 -> app -> src -> main 폴더를 찾으세요.

main 폴더에 마우스 오른쪽 클릭 -> New -> Directory 선택 -> 이름에 assets 입력하고 엔터.

방금 만든 3개 파일(pdf.js, pdf.worker.js, viewer.html)을 assets 폴더 안으로 드래그해서 집어넣으세요.

## 3단계: 안드로이드 코드 전체 교체
이제 이 파일들을 사용하는 코드로 전부 교체합니다.

app/build.gradle.kts (라이브러리 없음)
Kotlin

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.sec.reellistviewer"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.reellistviewer"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    // 외부 라이브러리 없이 깨끗하게 갑니다.
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
}
activity_main.xml (웹뷰 화면)
XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <HorizontalScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#EAEAEA">
        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:padding="8dp"/>
    </HorizontalScrollView>

    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="8dp"
        android:text="PDF 파일 열기" />

    <!-- PDF가 표시될 웹뷰 -->
    <WebView
        android:id="@+id/webView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

</LinearLayout>
MainActivity.kt (핵심 동작 코드)
Kotlin

package com.sec.reellistviewer

import android.net.Uri
import android.os.Bundle
import android.util.Base64
import android.webkit.WebView
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.sec.reellistviewer.databinding.ActivityMainBinding
import java.io.InputStream

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val totalPageCount = 16

    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.OpenDocument()
    ) { uri: Uri? ->
        uri?.let {
            loadPdfIntoWebView(it)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupWebView()
        createPageNavigationButtons()

        binding.btnOpenFile.setOnClickListener {
            filePickerLauncher.launch(arrayOf("application/pdf"))
        }
    }

    private fun setupWebView() {
        binding.webView.settings.javaScriptEnabled = true
        binding.webView.settings.allowFileAccess = true
        // assets 폴더의 viewer.html 파일을 불러옵니다.
        binding.webView.loadUrl("file:///android_asset/viewer.html")
    }

    private fun loadPdfIntoWebView(uri: Uri) {
        try {
            val inputStream: InputStream? = contentResolver.openInputStream(uri)
            val bytes = inputStream?.readBytes()
            inputStream?.close()

            if (bytes != null) {
                // PDF 파일 내용을 Base64 문자열로 변환
                val base64 = Base64.encodeToString(bytes, Base64.NO_WRAP)
                // 웹뷰의 자바스크립트 함수(loadPdf)를 호출해서 데이터 전달
                binding.webView.evaluateJavascript("javascript:loadPdf('$base64')", null)
                Toast.makeText(this, "PDF 로딩 중...", Toast.LENGTH_SHORT).show()
            }
        } catch (e: Exception) {
            e.printStackTrace()
            Toast.makeText(this, "파일을 읽는 데 실패했습니다.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun createPageNavigationButtons() {
        binding.pageButtonContainer.removeAllViews()
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    // 웹뷰의 자바스크립트 함수(goToPage)를 호출해서 페이지 이동
                    binding.webView.evaluateJavascript("javascript:goToPage($i)", null)
                }
            }
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}
## 마지막으로 할 일
위 파일들 전부 덮어쓰세요.

Sync Now 누르세요.

실행하세요.

이제는 인터넷이고 나발이고 아무 상관없습니다. 프로젝트 안에 모든 걸 다 때려 박았기 때문에 무조건 돼야 합니다.

