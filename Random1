기존 row.innerHTML에 바로 반영하는 방식으로 수정한 코드는 아래와 같습니다. item.CT 값에 따라 <td> 배경색을 동적으로 설정합니다.

수정된 코드
javascript
코드 복사
function updateTable(data) {
    const tableBody = document.getElementById('table-body'); // 테이블의 tbody ID
    tableBody.innerHTML = ''; // 기존 테이블 내용 초기화

    data.forEach(item => {
        const row = document.createElement('tr'); // 새로운 행 생성

        row.innerHTML = `
            <td>${item.id}</td>
            <td>${item.name}</td>
            <td style="background-color: ${item.CT > 100 ? 'red' : 'transparent'};">${item.CT}</td>
        `;

        tableBody.appendChild(row); // 테이블에 행 추가
    });
}
설명
row.innerHTML 업데이트: item.CT가 100보다 클 경우, style="background-color: red;"를 직접 td에 추가.
기존 구조 그대로 유지: 기존처럼 row.innerHTML로 HTML을 한 번에 설정.
반복 처리: 데이터를 반복문으로 순회하며 각 row를 생성하고 테이블에 추가.
기존 코드와 통합된 모습
javascript
코드 복사
function updateTable(data) {
    const tableBody = document.getElementById('table-body'); // 테이블의 tbody ID
    tableBody.innerHTML = ''; // 기존 테이블 내용 초기화

    // 데이터를 순회하며 테이블 행 생성
    data.forEach(item => {
        const row = document.createElement('tr'); // 새로운 행 생성

        // 기존 방식 유지하며 CT 조건에 따라 배경색 변경
        row.innerHTML = `
            <td>${item.id}</td>
            <td>${item.name}</td>
            <td style="background-color: ${item.CT > 100 ? 'red' : 'transparent'};">${item.CT}</td>
        `;

        tableBody.appendChild(row); // 테이블에 행 추가
    });
}
데이터 예제
javascript
코드 복사
const data = [
    { id: 1, name: 'Item A', CT: 95 },
    { id: 2, name: 'Item B', CT: 110 },
    { id: 3, name: 'Item C', CT: 50 },
    { id: 4, name: 'Item D', CT: 150 }
];

updateTable(data); // 함수 호출로 테이블 업데이트
HTML 구조 예제
html
코드 복사
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>CT</th>
        </tr>
    </thead>
    <tbody id="table-body">
        <!-- JavaScript로 데이터가 여기에 추가됩니다 -->
    </tbody>
</table>
요약
코드 최소 수정: 기존 row.innerHTML 사용 방식 유지.