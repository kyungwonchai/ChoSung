해했습니다. Sensor1에 들어 있는 문자열(1010101111 등)이 각 자리의 값에 따라 동그라미를 그리고 색칠해야 한다는 거죠. 이를 위해 각 Sensor1 값의 길이만큼 동그라미를 생성하고, 해당 값에 따라 빨간색과 녹색으로 색칠하는 코드를 구현하겠습니다.

아래는 수정된 app.py와 logsensors.html입니다.

1. Flask 애플리케이션 (app.py)
python
코드 복사
from flask import Flask, render_template
import pyodbc

app = Flask(__name__)

# MSSQL 연결 설정
conn_str = (
    r"Driver={SQL Server};"
    r"Server=YOUR_SERVER_NAME;"
    r"Database=YOUR_DATABASE_NAME;"
    r"UID=YOUR_USERNAME;"
    r"PWD=YOUR_PASSWORD;"
)

def get_log_sensors():
    data = []
    try:
        with pyodbc.connect(conn_str) as conn:
            cursor = conn.cursor()
            query = "SELECT IP, Sensor1, Time1 FROM LogSensors ORDER BY IP"
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                ip = row.IP
                sensor1 = row.Sensor1
                time1 = row.Time1
                data.append({'ip': ip, 'sensor1': sensor1, 'time1': time1})
    except Exception as e:
        print(f"Database connection failed: {e}")
    return data

@app.route('/')
def index():
    return "Welcome to the Flask App!"

@app.route('/logsensors')
def log_sensors():
    data = get_log_sensors()
    return render_template('logsensors.html', data=data)

if __name__ == '__main__':
    app.run(debug=True)
2. HTML 템플릿 (templates/logsensors.html)
수정된 템플릿은 Sensor1 문자열의 각 값(0 또는 1)에 따라 동그라미를 표시합니다. 문자열의 길이만큼 동그라미를 반복적으로 그려내는 방식으로 구현합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            justify-content: center;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
    </style>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <table>
        <thead>
            <tr>
                <th>IP</th>
                <th>Sensors</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            {% for item in data %}
            <tr>
                <td>{{ item.ip }}</td>
                <td>
                    <div class="circle-container">
                        {% for char in item.sensor1 %}
                        <span class="circle {% if char == '1' %}red{% else %}green{% endif %}"></span>
                        {% endfor %}
                    </div>
                </td>
                <td>{{ item.time1 }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
설명
circle-container 클래스:
동그라미(circle)들을 담는 컨테이너로, 플렉스 박스를 사용하여 동그라미들을 가로로 배치하고, 공간이 부족할 경우 자동으로 줄 바꿈이 되도록 설정했습니다.
circle 클래스:
각 동그라미는 span 요소로 구현되었으며, 빨강(red)과 녹색(green)으로 구분됩니다. Sensor1의 각 자리 값에 따라 스타일이 적용됩니다.
Jinja 반복문:
Sensor1의 각 문자(char)를 반복하여 동그라미를 생성하며, char 값이 '1'이면 빨간색, '0'이면 녹색으로 설정합니다.
3. 실행 방법
MSSQL 연결 정보를 올바르게 설정합니다 (YOUR_SERVER_NAME, YOUR_DATABASE_NAME, YOUR_USERNAME, YOUR_PASSWORD).
Flask 애플리케이션을 실행합니다:
bash
코드 복사
python app.py