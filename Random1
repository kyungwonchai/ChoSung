kay, I'll translate all the Korean text in the Flask Python code and the HTML template into English.

Project Structure (remains the same):

flask_auto_row_height/
├── app.py
└── templates/
    └── index.html
1. app.py (Flask Application - English Version)

Python

from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    # Sample data to display in the table
    data = [
        {
            "id": 1,
            "name": "John Doe",
            "description": "This is a short description."
        },
        {
            "id": 2,
            "name": "Jane Smith",
            "description": "This is a medium-length description. It might span multiple lines if the content is long enough to wrap."
        },
        {
            "id": 3,
            "name": "Peter Jones",
            "description": "This item requires a very long description. If the text is extensive, it should automatically wrap to fit within the cell, and explicitly entered\nnew lines\nlike this one\nshould also be respected.\nThe content will be displayed across multiple lines.\nThis is the last line."
        },
        {
            "id": 4,
            "name": "Alice Brown",
            "description": "First line.\nSecond line.\nThird line.\n\nFifth line (includes an empty line)."
        },
        {
            "id": 5,
            "name": "Robert Wilson",
            "description": "All cells in the same row will adjust to the height of the cell with the most content."
        }
    ]
    return render_template('index.html', table_data=data)

if __name__ == '__main__':
    app.run(debug=True)
2. templates/index.html (HTML Template & JavaScript - English Version)

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Row Height Table</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse; /* Merge borders into a single line */
            table-layout: fixed; /* Fix table layout (improves performance and predictability) */
        }
        th, td {
            border: 1px solid #ccc;
            padding: 10px;
            text-align: left;
            vertical-align: top; /* Align cell content to the top */
            word-wrap: break-word; /* Wrap long words (legacy browser compatibility) */
            overflow-wrap: break-word; /* Wrap long words (standard) */
        }
        th {
            background-color: #f2f2f2;
        }
        /* Apply white-space to description column to respect newline characters */
        td.description-cell {
            white-space: pre-wrap; /* Preserve whitespace/newlines, wrap lines as needed */
        }
    </style>
</head>
<body>

    <h1>Flask Table (Auto Row Height)</h1>

    <table id="myTable">
        <thead>
            <tr>
                <th style="width: 5%;">ID</th>
                <th style="width: 20%;">Name</th>
                <th style="width: 75%;">Description</th>
            </tr>
        </thead>
        <tbody>
            {% for row in table_data %}
            <tr>
                <td>{{ row.id }}</td>
                <td>{{ row.name }}</td>
                <td class="description-cell">{{ row.description }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <script>
        function adjustRowHeights() {
            const table = document.getElementById('myTable');
            if (!table) return;

            const tbody = table.getElementsByTagName('tbody')[0];
            if (!tbody) return;

            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                // First, set row height to 'auto' to let the browser calculate height based on content
                row.style.height = 'auto';

                let maxHeight = 0;
                const cells = row.getElementsByTagName('td');

                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    // Also set cell height to 'auto' for accurate scrollHeight calculation
                    cell.style.height = 'auto';
                    // scrollHeight is the actual content height including padding
                    if (cell.scrollHeight > maxHeight) {
                        maxHeight = cell.scrollHeight;
                    }
                }
                
                // Set the height of the current row to the largest scrollHeight found
                // (In practice, the browser often handles this automatically due to CSS 'white-space: pre-wrap' and 'overflow-wrap',
                //  but this JS approach is used for explicit control.
                //  It's particularly useful for forcing all cells in a row to have the same height.)
                if (maxHeight > 0) {
                    // row.style.height = maxHeight + 'px'; // Sets the entire row height
                    // Alternatively, you can set the height of each cell individually.
                    // This ensures all cells have the same height, making backgrounds look consistent.
                    for (let j = 0; j < cells.length; j++) {
                         cells[j].style.height = maxHeight + 'px';
                    }
                }
            }
        }

        // Execute the function when the page is fully loaded
        window.addEventListener('load', adjustRowHeights);

        // Optional: Re-adjust heights on window resize
        // It's good practice to use debouncing to prevent it from firing too often.
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(adjustRowHeights, 150); // Execute after 150ms
        });
    </script>

</body>