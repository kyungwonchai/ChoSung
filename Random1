아... 제가 큰 오해를 하고 있었습니다. 정말 죄송합니다.

지금까지 "중계 서버", "릴레이", "Hub" 등의 용어와 Agent-UI 간의 통신이라는 맥락 때문에 당연히 SignalR과 같은 실시간 웹 기술이나 별도의 서버 애플리케이션을 생각하고 솔루션을 제안 드렸습니다.

"중계 서버가 아니라 PC이고, 모든 건 소켓 통신이다. SignalR 같은 게 아니다" 라고 명확히 말씀해주셔서 이제야 제대로 이해했습니다. 사용자님의 시간을 많이 빼앗은 것 같아 다시 한번 사과드립니다.

그렇다면 지금까지 제가 드린 SignalR 기반의 MGSPRelayServer 및 MGSPMonitorControl 코드는 사용자님의 실제 요구사항과 완전히 다른 것이 맞습니다. 이 코드들은 더 이상 고려하지 않으셔도 됩니다.

새로운 이해를 바탕으로 다시 시작하겠습니다.

결국, 여러 PC에서 실행되는 프로그램들(Agent)과, 이들을 제어하고 모니터링하는 또 다른 PC에서 실행되는 UI 프로그램(MGSPMonitorControl) 간의 통신을 순수 소켓(Socket)을 이용해 구현하시는 것으로 이해했습니다.

이 경우, 다음과 같은 점들을 새로 정의하고 구현해야 합니다:

통신 주체 및 역할:

MGSPMonitorControl PC: 보통 서버(리스너) 역할을 하여 여러 Agent PC들의 연결을 기다립니다.
Agent PC들: 클라이언트 역할을 하여 MGSPMonitorControl PC로 접속하여 데이터를 보내거나 명령을 받습니다.
(물론 반대 구성이나 P2P 방식도 가능하지만, 제어 UI가 중앙에서 관리하는 형태라면 위 구성이 일반적입니다.)
데이터 프로토콜 정의:

PC 간에 어떤 형식으로 메시지를 주고받을지 약속해야 합니다. (예: 메시지 시작/끝 표시, 데이터 길이 정보, 메시지 타입 구분자, 실제 데이터 형식 - JSON, XML, 단순 텍스트 등)
소켓 프로그래밍:

TCP/IP 소켓을 사용할지, UDP 소켓을 사용할지 결정 (일반적으로 신뢰성 있는 연결을 위해 TCP/IP 사용)
서버 측: 소켓 생성, IP/Port 바인딩, 연결 리스닝, 클라이언트 연결 수락, 각 클라이언트와의 비동기 데이터 송수신 처리
클라이언트 측: 소켓 생성, 서버로 연결 시도, 비동기 데이터 송수신 처리
연결 관리: 연결 끊김 감지 및 처리, 재연결 로직 (필요시)
죄송하지만, 다시 한번 요구사항을 명확히 해주시면 감사하겠습니다. 이전의 오해로 인해 잘못된 방향으로 너무 많이 진행된 것 같습니다. 정확한 그림을 그려야 제대로 된 코드를 드릴 수 있습니다.

MGSPMonitorControl PC와 Agent PC들 간의 관계는 어떻게 되나요?

하나의 MGSPMonitorControl PC가 여러 Agent PC들을 제어하고 모니터링하는 1:N 관계인가요?
어떤 PC가 서버 역할을 하고(연결을 기다리는 쪽), 어떤 PC가 클라이언트 역할(연결을 시도하는 쪽)을 해야 할까요? (일반적으로 MGSPMonitorControl이 서버, Agent들이 클라이언트입니다.)
"중계"라는 표현이 정확히 어떤 의미였을까요?

MGSPMonitorControl PC가 여러 Agent PC들의 정보를 통합해서 보여주고 제어한다는 의미였을까요?
아니면 특정 PC가 다른 PC들 사이의 메시지를 말 그대로 전달(라우팅)하는 역할도 필요한 상황인가요?
주고받는 데이터는 대략 어떤 것들이 있나요?

예: Agent의 상태 (켜짐/꺼짐, 특정 프로그램 실행 여부 등), 로그 메시지, MGSPMonitorControl에서 Agent로 보내는 제어 명령 (예: "프로그램 시작", "파일 전송" 등)
PC 환경은 모두 Windows인가요? (윈폼, WPF 언급으로 보아 Windows 환경으로 예상됩니다.)

이 정보들을 바탕으로 순수 소켓 통신(예: C#의 System.Net.Sockets.Socket 클래스 사용)을 기반으로 하는 MGSPMonitorControl (서버 역할 가정)과 Agent (클라이언트 역할 가정) 프로그램을 다시 설계하고 코드를 제공해 드릴 수 있습니다.