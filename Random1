ayoutView를 사용하시는 것 같군요. LayoutView에서 카드 배경색을 조건에 따라 변경하기 위해 CustomDrawCardBackground 이벤트를 구독(+=) 하고 구독 취소(-=) 하는 부분과 해당 이벤트 핸들러 코드를 다시 드리겠습니다. 에러가 발생한다고 하셨으니, 일반적인 구조와 주의사항을 포함해서 작성해 드릴게요.

필수 using 구문:

C#

using DevExpress.XtraGrid.Views.Layout; // LayoutView 관련 클래스 포함
using System.Drawing;
using System;
1. 이벤트 구독 (+=) - Form 생성자 또는 Load 이벤트에서

Form이 로드될 때 이벤트 핸들러를 연결(구독)합니다. 보통 Form의 생성자(YourForm()) 내부, InitializeComponent(); 호출 뒤에 넣거나, Form의 Load 이벤트 핸들러 안에 넣습니다.

C#

public partial class YourForm : DevExpress.XtraEditors.XtraForm
{
    public YourForm()
    {
        InitializeComponent(); // 디자이너 코드 실행 후

        // layoutView1 이 실제 LayoutView 컴포넌트의 이름(Name 속성)이라고 가정합니다.
        // 실제 이름으로 바꿔주세요.
        if (this.layoutView1 != null) // layoutView1이 null이 아닌지 확인 (안전장치)
        {
            this.layoutView1.CustomDrawCardBackground += LayoutView1_CustomDrawCardBackground;
        }
    }

    // ... (Form의 다른 코드들) ...
}
2. 이벤트 핸들러 (이벤트 발생 시 실행될 코드)

이벤트가 발생했을 때 실제로 배경색을 변경하는 로직입니다.

C#

private void LayoutView1_CustomDrawCardBackground(object sender, LayoutViewCustomDrawCardBackgroundEventArgs e)
{
    // LayoutView 인스턴스 가져오기
    LayoutView view = sender as LayoutView;
    if (view == null) return; // view가 null이면 중단

    // 데이터 행(카드)에 대해서만 처리 (RowHandle >= 0)
    if (e.RowHandle >= 0)
    {
        try
        {
            // *** 중요: 실제 컬럼의 FieldName으로 변경해야 합니다. ***
            string stockFieldName = "재고";
            string thresholdFieldName = "부족기준";

            // 현재 카드(행)의 값을 가져옵니다.
            object stockValueObj = view.GetRowCellValue(e.RowHandle, stockFieldName);
            object thresholdValueObj = view.GetRowCellValue(e.RowHandle, thresholdFieldName);

            // 값이 유효한지 확인하고 int로 변환
            if (stockValueObj != null && stockValueObj != DBNull.Value &&
                thresholdValueObj != null && thresholdValueObj != DBNull.Value)
            {
                int stock = Convert.ToInt32(stockValueObj);
                int threshold = Convert.ToInt32(thresholdValueObj);

                // 조건 확인: 재고 <= 부족기준
                if (stock <= threshold)
                {
                    // 조건 만족 시 카드 배경색을 노란색으로 설정
                    e.Appearance.BackColor = Color.Yellow;
                    e.Appearance.Options.UseBackColor = true; // 배경색 사용 명시
                }
                // 필요하다면 else 구문으로 기본 배경색을 지정할 수도 있습니다.
                // else
                // {
                //      e.Appearance.BackColor = SystemColors.Window; // 기본색으로
                //      e.Appearance.Options.UseBackColor = true;
                // }
            }
        }
        catch (Exception ex)
        {
            // 오류 발생 시 콘솔에 출력 (디버깅용)
            Console.WriteLine($"Error in CustomDrawCardBackground event: {ex.Message}");
            // 실제 애플리케이션에서는 로깅 등 적절한 오류 처리를 해주세요.
        }
    }
}
3. 이벤트 구독 취소 (-=) - Form의 Dispose 메서드 또는 Closing 이벤트에서

Form이 닫히거나 해제될 때, 이벤트 핸들러 연결을 끊어(구독 취소) 메모리 누수를 방지하는 것이 중요합니다. Form의 Dispose 메서드에 추가하는 것이 일반적입니다.

Form 디자이너 파일 (YourForm.Designer.cs) 을 엽니다.
Dispose 메서드를 찾습니다. (만약 없다면 직접 추가할 수도 있지만, 보통 자동으로 생성되어 있습니다.)
disposing 조건문 안, components?.Dispose(); 앞에 구독 취소 코드를 추가합니다.
C#

// YourForm.Designer.cs 파일 내
protected override void Dispose(bool disposing)
{
    if (disposing)
    {
        // 이벤트 구독 취소
        if (this.layoutView1 != null)
        {
            this.layoutView1.CustomDrawCardBackground -= LayoutView1_CustomDrawCardBackground;
        }

        // 기존 디자이너 코드 (건드리지 마세요)
        if (components != null)
        {
            components.Dispose();
        }
    }
    base.Dispose(disposing);
}
에러가 발생하는 이유 추정 및 확인 사항:

이름 불일치: 코드상의 layoutView1 이 실제 디자이너에 있는 LayoutView 컴포넌트의 Name 속성과 다른 경우 에러가 발생합니다. 이름을 정확히 맞춰주세요.
Null 참조: layoutView1 이 초기화되기 전에 += 를 시도하거나, 이미 해제된 후에 -= 를 시도하면 NullReferenceException이 발생할 수 있습니다. 위 코드처럼 if (this.layoutView1 != null) 체크를 추가하면 도움이 될 수 있습니다.
잘못된 위치: += 코드가 InitializeComponent(); 보다 먼저 실행되면 안 됩니다.
EventArgs 타입 오류: 이벤트 핸들러의 두 번째 매개변수 타입이 LayoutViewCustomDrawCardBackgroundEventArgs 가 맞는지 확인하세요.