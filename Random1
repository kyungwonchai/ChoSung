네, 아주 좋은 생각입니다. 여러 IP를 리스트로 관리하고 동일한 작업을 반복 수행하는 것은 자동화의 기본이자 핵심입니다.

기존 스크립트를 **반복문(for loop)**으로 감싸고, IP 목록을 리스트로 관리하도록 수정하면 간단하게 해결할 수 있습니다.

## 1. 무엇이 바뀌어야 하나요?
기존 코드는 단일 호스트에 대해서만 작동했습니다. 이제 여러 호스트에 대해 작동하도록 구조를 변경해야 합니다.

IP 목록 리스트 생성: 설정 부분에 작업할 라즈베리파이의 IP와 비밀번호 목록을 리스트 형태로 만듭니다. 각 파이마다 비밀번호가 다를 수 있으므로 딕셔너리 형태로 묶어주는 것이 좋습니다.

메인 로직을 함수로 유지: setup_pi_environment 함수는 그대로 둡니다. 이 함수는 이제 '단일 파이에 대한 작업 레시피' 역할을 합니다.

반복문 추가: if __name__ == "__main__" 블록에서 IP 목록 리스트를 하나씩 순회하는 for 반복문을 만듭니다. 반복문 안에서 각 IP에 대해 setup_pi_environment 함수를 호출합니다.

## 2. 최종 자동화 Python 스크립트 (다중 IP 반복 실행)
아래는 여러 IP에 대해 동일한 작업을 반복하도록 수정한 최종 코드입니다.

Python

import paramiko
import io
import time
import os

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# [중요] 작업할 라즈베리파이 목록을 여기에 추가하거나 수정하세요.
# 각 파이의 IP, 사용자 이름, 비밀번호를 묶어서 관리합니다.
REMOTE_HOSTS = [
    {'host': '192.168.0.10', 'user': 'pi', 'pass': 'password_for_pi10'},
    {'host': '192.168.0.11', 'user': 'pi', 'pass': 'password_for_pi11'},
    {'host': '192.168.0.12', 'user': 'pi', 'pass': 'another_password'},
    # 필요한 만큼 여기에 계속 추가...
]

# 설치할 .deb 파일의 '우분투 머신' 내 로컬 경로
LOCAL_DEB_FILE_PATH = '/home/your_user/packages/your-package.deb'

# --- Watchdog 시간 설정 ---
WATCHDOG_INTERVAL = 30             # 소프트웨어가 체크하는 간격 (초)

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder"
MAX_DELAY_SECONDS = 300            # 테스트 스크립트가 폴더의 지연을 판정하는 기준
BOOT_GRACE_PERIOD_SECONDS = 1320   # 부팅 후 무한 재부팅 방지를 위한 유예 기간
# ===============================================================

def run_sudo_command(ssh_client, command, password, allow_any_exit=False):
    """SSH 클라이언트에서 단일 sudo 명령어를 실행하고 결과를 반환합니다."""
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        stdin.write(password + '\n')
        stdin.flush()
        exit_status = stdout.channel.recv_exit_status()
        stderr_output = stderr.read().decode('utf-8').strip()
        if not allow_any_exit and exit_status != 0:
            if "sudo" in stderr_output.lower():
                 raise Exception(f"Sudo command failed. Check password or sudoers config. Error: {stderr_output}")
            raise Exception(f"Command '{command}' failed with exit status {exit_status}. Error: {stderr_output}")
        if "systemctl status" in command:
            status_output = stdout.read().decode('utf-8').strip()
            print("--- Service Status ---\n" + status_output + "\n----------------------")
        return True, f"Command '{command}' executed."
    except Exception as e:
        return False, str(e)


def setup_pi_environment(host_info, local_deb_path, wd_config):
    """단일 라즈베리파이에 접속하여 패키지 설치 및 Watchdog 설정을 수행하는 함수"""
    if not os.path.exists(local_deb_path):
        return (False, f"Local file not found at: {local_deb_path}")

    ssh_client = None
    # 현재 작업 중인 호스트 IP를 명확히 표시
    current_host = host_info['host']
    print(f"\n{'='*20} Starting setup for {current_host} {'='*20}")

    try:
        print(f"[{current_host}] Connecting...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(
            hostname=current_host,
            port=22,
            username=host_info['user'],
            password=host_info['pass'],
            timeout=10
        )
        sftp = ssh_client.open_sftp()
        print(f"[{current_host}] Connection successful.")

        # --- 패키지 설치 ---
        print(f"[{current_host}] Starting Package Installation...")
        deb_filename = os.path.basename(local_deb_path)
        remote_temp_path = f"/tmp/{deb_filename}"
        sftp.put(local_deb_path, remote_temp_path)
        install_cmd = f"sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-confold {remote_temp_path}"
        run_sudo_command(ssh_client, install_cmd, host_info['pass'], allow_any_exit=True)
        print(f"[{current_host}] Waiting for 30 seconds...")
        time.sleep(30)
        run_sudo_command(ssh_client, f"sudo rm {remote_temp_path}", host_info['pass'])
        print(f"[{current_host}] Package Installation Task Finished.")
        
        # --- Watchdog 설정 ---
        print(f"[{current_host}] Starting Watchdog Setup...")
        check_script_path = "/etc/watchdog.d/quick_folder_check.sh"
        check_script_content = f"""#!/bin/bash
TARGET_FOLDER="{wd_config['target_folder']}"
MAX_DELAY={wd_config['max_delay']}
GRACE_PERIOD={wd_config['grace_period']}
UPTIME=$(cut -d' ' -f1 /proc/uptime | cut -d'.' -f1)
if [ "$UPTIME" -lt "$GRACE_PERIOD" ]; then exit 0; fi
if [ ! -d "$TARGET_FOLDER" ]; then exit 1; fi
LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))
if [ $TIME_DIFF -gt $MAX_DELAY ]; then exit 1; else exit 0; fi
"""
        sftp.putfo(io.BytesIO(check_script_content.encode('utf-8')), "/tmp/check.sh")
        run_sudo_command(ssh_client, "sudo mkdir -p /etc/watchdog.d", host_info['pass'])
        run_sudo_command(ssh_client, f"sudo mv /tmp/check.sh {check_script_path}", host_info['pass'])
        sed_command = f"sudo sed -i 's/\\r$//' {check_script_path}"
        run_sudo_command(ssh_client, sed_command, host_info['pass'])
        run_sudo_command(ssh_client, f"sudo chmod +x {check_script_path}", host_info['pass'])

        config_content = f"interval = {wd_config['interval']}\ntest-binary = {check_script_path}\ntest-timeout = 5"
        sftp.putfo(io.BytesIO(config_content.strip().encode('utf-8')), "/tmp/wd.conf")
        run_sudo_command(ssh_client, "sudo mv /tmp/wd.conf /etc/watchdog.conf", host_info['pass'])
        run_sudo_command(ssh_client, "sudo chown root:root /etc/watchdog.conf", host_info['pass'])
        
        run_sudo_command(ssh_client, "sudo systemctl restart watchdog", host_info['pass'])
        time.sleep(2)
        run_sudo_command(ssh_client, "sudo systemctl status watchdog --no-pager -l", host_info['pass'], allow_any_exit=True)
        print(f"[{current_host}] Watchdog Setup Complete.")

        sftp.close()
        return (True, f"Setup for {current_host} completed successfully!")

    except Exception as e:
        return (False, f"An error occurred on {current_host}: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print(f"[{current_host}] Connection closed.")


if __name__ == "__main__":
    # Watchdog 설정값은 모든 호스트에 동일하게 적용
    watchdog_settings = {
        'interval': WATCHDOG_INTERVAL,
        'target_folder': TARGET_FOLDER_TO_WATCH,
        'max_delay': MAX_DELAY_SECONDS,
        'grace_period': BOOT_GRACE_PERIOD_SECONDS
    }
    
    # 작업 결과를 저장할 리스트
    results = []

    # ▼▼▼ [수정된 부분] IP 목록을 순회하며 작업을 반복합니다. ▼▼▼
    for host in REMOTE_HOSTS:
        success, message = setup_pi_environment(
            host_info=host,
            local_deb_path=LOCAL_DEB_FILE_PATH,
            wd_config=watchdog_settings
        )
        results.append({'host': host['host'], 'success': success, 'message': message})
    
    # --- 최종 결과 출력 ---
    print(f"\n\n{'='*25} Final Summary {'='*25}")
    for res in results:
        status_icon = "✅" if res['success'] else "❌"
        print(f"{status_icon} Host: {res['host']} -> {res['message']}")
    print("=" * 67)

## 사용 방법
IP 목록 수정: 스크립트 상단의 REMOTE_HOSTS 리스트에 작업할 라즈베리파이들의 IP와 비밀번호를 정확하게 입력합니다.

나머지 설정 확인: LOCAL_DEB_FILE_PATH 등 다른 설정들도 확인합니다.

스크립트 실행: python3 your_script_name.py 로 실행합니다.