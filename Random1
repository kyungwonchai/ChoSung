네, 알겠습니다. 중계 서버(MGSPRelayServer)의 상태와 주요 이벤트 로그를 제어 UI(MGSPMonitorControl)에서 확인할 수 있도록 기능을 추가하고, 안정적으로 동작하는 전체 코드를 다시 제공해 드리겠습니다.

변경 방향:

MGSPRelayServer (중계 서버):

서버 내부에 최근 로그 (최대 100개)를 저장하는 기능을 추가합니다.
Agent 연결/해제, 명령 수신/전달 등 주요 이벤트 발생 시 내부 로그 및 콘솔에 기록합니다.
제어 UI가 요청할 경우, 현재 서버의 상태 정보(가동 시간, 연결된 Agent/UI 수 등)와 저장된 로그를 제공하는 Hub 메서드를 추가합니다.
MGSPMonitorControl (제어 UI):

UI에 중계 서버의 상태와 로그를 표시할 수 있는 영역을 추가합니다.
주기적으로 또는 버튼 클릭을 통해 중계 서버로부터 상태 정보와 로그를 가져와 UI에 업데이트합니다.
"전문 코드" 관련:
안정성, 명확성, 기본적인 오류 처리에 중점을 두겠습니다. 스레드 안전성을 고려하고, UI 반응성을 위해 비동기 처리를 활용하겠습니다. 다만, 설정 외부화, 고급 로깅 프레임워크 도입, 완전한 MVVM 패턴 적용 등은 이번 단계에서는 최소화하여 코드의 복잡도를 관리하겠습니다.

1단계: MGSPRelayServer (중계 서버) 수정된 전체 코드

이전의 ObjectDisposedException 문제는 해결된 것으로 가정하고, 여기에 로그 관리 및 상태 제공 기능을 추가합니다.

프로젝트 구조 (변경 없음):

MGSPRelayServer
├── Properties
│   └── AssemblyInfo.cs
├── App.config
├── Program.cs
├── Startup.cs
├── Hubs
│   └── RelayHub.cs
└── Models
    ├── AgentClient.cs
    └── ServerStatusInfo.cs (신규 추가)
1.1. Models/ServerStatusInfo.cs (신규 추가 - 서버 상태 및 로그 DTO)
서버 상태와 로그를 UI로 전달하기 위한 데이터 전송 객체입니다.

C#

// MGSPRelayServer/Models/ServerStatusInfo.cs
using System;
using System.Collections.Generic;

namespace MGSPRelayServer.Models
{
    public class ServerStatusInfo
    {
        public DateTime ServerStartTime { get; set; }
        public TimeSpan Uptime => DateTime.UtcNow - ServerStartTime;
        public string UptimeString => $"{(int)Uptime.TotalDays}d {Uptime.Hours}h {Uptime.Minutes}m {Uptime.Seconds}s";
        public int ConnectedAgentCount { get; set; }
        public int ConnectedUiClientCount { get; set; }
        public List<string> RecentLogs { get; set; }
        public string ServerVersion { get; set; } // 간단한 버전 정보
    }
}
1.2. Models/AgentClient.cs (변경 없음)
이전과 동일합니다. 필요시 이전 코드를 참조하십시오.

1.3. Hubs/RelayHub.cs (수정)
로그 기록 기능 강화 및 UI 클라이언트에 상태/로그 제공 메서드 추가.

C#

// MGSPRelayServer/Hubs/RelayHub.cs
using Microsoft.AspNet.SignalR;
using Microsoft.AspNet.SignalR.Hubs;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using MGSPRelayServer.Models;
using Newtonsoft.Json;

namespace MGSPRelayServer.Hubs
{
    [HubName("RelayHub")]
    public class RelayHub : Hub
    {
        // Agent 관리
        private static readonly ConcurrentDictionary<string, AgentClient> ConnectedAgents = new ConcurrentDictionary<string, AgentClient>();
        // UI 클라이언트 관리 (ConnectionId, 간단한 정보)
        private static readonly ConcurrentDictionary<string, string> ConnectedUiClients = new ConcurrentDictionary<string, string>();

        // 내부 로그 관리 (최근 100개)
        private const int MaxLogEntries = 100;
        private static readonly ConcurrentQueue<string> RecentServerLogs = new ConcurrentQueue<string>();
        private static readonly object LogLock = new object(); // ConcurrentQueue는 대부분 스레드 안전하지만, Dequeue/Enqueue 조합 시 필요할 수 있음

        // 서버 시작 시간 (Program.cs에서 설정)
        public static DateTime ServerStartTime { get; set; } = DateTime.UtcNow;
        public static string ServerVersion { get; set; } = "1.0.0-alpha"; // 예시 버전

        // 내부 로깅 메서드
        private void LogToServer(string message, bool isError = false)
        {
            string logEntry = $"[{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff}] {(isError ? "[ERROR] " : "[INFO] ")}{message}";
            
            Console.ForegroundColor = isError ? ConsoleColor.Red : ConsoleColor.Gray;
            Console.WriteLine(logEntry);
            Console.ResetColor();

            // 내부 로그 큐에 추가
            RecentServerLogs.Enqueue(logEntry);
            // 큐 크기 관리 (오래된 로그 제거)
            while (RecentServerLogs.Count > MaxLogEntries && RecentServerLogs.TryDequeue(out _)) { }

            // (선택적) 실시간으로 특정 로그를 UI에 푸시할 수 있음
            // Clients.Clients(ConnectedUiClients.Keys.ToList()).NewServerLogEntry(logEntry);
        }

        #region Agent -> Hub 메서드

        public void RegisterAgent(AgentClient.AgentRegistrationInfo regInfo)
        {
            string agentId = regInfo.AgentId;
            string connectionId = Context.ConnectionId;

            var agent = ConnectedAgents.GetOrAdd(agentId, id => new AgentClient { AgentId = id });
            // 이전 정보 업데이트
            agent.ConnectionId = connectionId;
            agent.AgentRole = regInfo.AgentRole;
            agent.IpAddresses = regInfo.IpAddresses;
            agent.StatusMessage = $"Registered. Machine: {regInfo.MachineName}, User: {regInfo.UserName}, Ver: {regInfo.AgentVersion}, OS: {regInfo.OsVersion}";
            agent.MonitorStatus = regInfo.InitialMonitorStatus ?? "Unknown";
            agent.LastHeartbeat = DateTime.UtcNow;
            agent.IsConnected = true;

            LogToServer($"Agent registered/updated: ID='{agentId}', Role='{agent.AgentRole}', IP(s)='{string.Join(",", agent.IpAddresses ?? new List<string>())}', ConnId='{connectionId}'");
            
            // 모든 연결된 UI 클라이언트에게 Agent 연결/업데이트 정보 브로드캐스트
            Clients.Clients(ConnectedUiClients.Keys.ToList()).AgentRegisteredOrUpdated(agent);
        }

        public void AgentHeartbeat(string agentId, string agentRole, string statusMessage, string monitorStatus, List<string> ipAddresses)
        {
            if (ConnectedAgents.TryGetValue(agentId, out AgentClient agent))
            {
                agent.ConnectionId = Context.ConnectionId;
                agent.AgentRole = agentRole;
                agent.StatusMessage = statusMessage;
                agent.MonitorStatus = monitorStatus;
                agent.IpAddresses = ipAddresses; // 하트비트 시 IP 주소도 업데이트
                agent.LastHeartbeat = DateTime.UtcNow;
                agent.IsConnected = true; // 하트비트 수신은 연결된 것으로 간주

                // LogToServer($"Heartbeat: AgentID='{agentId}', MonitorStatus='{monitorStatus}'"); // 너무 잦은 로그일 수 있음
                Clients.Clients(ConnectedUiClients.Keys.ToList()).AgentStatusUpdated(agent);
            }
            else
            {
                LogToServer($"Heartbeat from unknown agent: ID='{agentId}'. Requesting re-registration.", true);
                Clients.Client(Context.ConnectionId).RequestReRegistration();
            }
        }

        public void ReportCommandResultToHub(string commandId, string sourceAgentId, bool success, string message, string currentMonitorStatus, string issuedByUiConnectionId)
        {
            LogToServer($"CmdResult from AgentID='{sourceAgentId}' (CmdID='{commandId}'): Success={success}, Msg='{message}', Monitor='{currentMonitorStatus}'");
            
            if (ConnectedAgents.TryGetValue(sourceAgentId, out AgentClient agent))
            {
                agent.MonitorStatus = currentMonitorStatus;
                agent.StatusMessage = $"Cmd '{commandId}' result: {message}"; // Agent 상태 메시지 업데이트
                Clients.Clients(ConnectedUiClients.Keys.ToList()).AgentStatusUpdated(agent);
            }

            if (!string.IsNullOrEmpty(issuedByUiConnectionId) && ConnectedUiClients.ContainsKey(issuedByUiConnectionId))
            {
                Clients.Client(issuedByUiConnectionId).CommandResultForUi(commandId, sourceAgentId, success, message, currentMonitorStatus);
            }
            else
            {
                 Clients.Clients(ConnectedUiClients.Keys.ToList()).CommandResultBroadcast(commandId, sourceAgentId, success, message, currentMonitorStatus);
            }
        }
        
        public void PongFromAgentToHub(string agentId)
        {
            if (ConnectedAgents.TryGetValue(agentId, out AgentClient agent))
            {
                agent.LastHeartbeat = DateTime.UtcNow;
                // LogToServer($"Pong received from AgentID='{agentId}'");
                Clients.Clients(ConnectedUiClients.Keys.ToList()).AgentStatusUpdated(agent);
            }
        }

        #endregion

        #region UI Client -> Hub 메서드

        public void RegisterUiClient()
        {
            string uiConnectionId = Context.ConnectionId;
            ConnectedUiClients.TryAdd(uiConnectionId, $"UI Client - {DateTime.Now}"); // 값은 더 의미있는 정보로 확장 가능
            LogToServer($"UI Client connected: ConnId='{uiConnectionId}'. Total UIs: {ConnectedUiClients.Count}");
            
            // 새로 연결된 UI에게 현재 Agent 전체 목록 전송
            Clients.Client(uiConnectionId).InitialAgentList(ConnectedAgents.Values.Where(a => a.IsConnected).ToList());
            // 새로 연결된 UI에게 현재 서버 상태 및 로그 전송
            Clients.Client(uiConnectionId).InitialServerStatus(GetCurrentServerStatusInfo());
        }

        public Task RequestCommandToAgent(AgentClient.ServerCommand command)
        {
            LogToServer($"UI (ConnId='{Context.ConnectionId}') requests command '{command.CommandType}' for AgentID='{command.TargetAgentId}'");
            command.IssuedByUiConnectionId = Context.ConnectionId;

            if (ConnectedAgents.TryGetValue(command.TargetAgentId, out AgentClient agent))
            {
                if (agent.IsConnected && !string.IsNullOrEmpty(agent.ConnectionId))
                {
                    LogToServer($"Relaying command '{command.CommandType}' to AgentID='{agent.AgentId}' (AgentConnId='{agent.ConnectionId}')");
                    return Clients.Client(agent.ConnectionId).ExecuteCommand(command);
                }
                else
                {
                    LogToServer($"Cannot relay command to AgentID='{command.TargetAgentId}': Agent not actively connected or ConnectionId missing.", true);
                    Clients.Client(Context.ConnectionId).CommandDispatchFailed(command.CommandId, "Agent not connected or ConnectionId missing.");
                    return Task.FromResult(false);
                }
            }
            LogToServer($"Cannot relay command: AgentID='{command.TargetAgentId}' not found in connected list.", true);
            Clients.Client(Context.ConnectionId).CommandDispatchFailed(command.CommandId, $"Agent '{command.TargetAgentId}' not found.");
            return Task.FromResult(false);
        }
        
        public Task RequestPingAgent(string targetAgentId)
        {
            string uiConnectionId = Context.ConnectionId;
            LogToServer($"UI (ConnId='{uiConnectionId}') requests ping for AgentID='{targetAgentId}'");
            if (ConnectedAgents.TryGetValue(targetAgentId, out AgentClient agent))
            {
                if (agent.IsConnected && !string.IsNullOrEmpty(agent.ConnectionId))
                {
                    LogToServer($"Relaying Ping to AgentID='{agent.AgentId}' (AgentConnId='{agent.ConnectionId}')");
                    return Clients.Client(agent.ConnectionId).PingAgent();
                }
            }
            LogToServer($"Cannot relay Ping: AgentID='{targetAgentId}' not found or not connected.", true);
            Clients.Client(uiConnectionId).CommandDispatchFailed(null, $"Ping failed: Agent '{targetAgentId}' not found or not connected.");
            return Task.FromResult(false);
        }

        // UI 클라이언트가 서버 상태 및 로그를 요청하는 메서드
        public ServerStatusInfo GetServerStatusAndLogs()
        {
            LogToServer($"UI (ConnId='{Context.ConnectionId}') requested server status and logs.");
            return GetCurrentServerStatusInfo();
        }

        private ServerStatusInfo GetCurrentServerStatusInfo()
        {
            return new ServerStatusInfo
            {
                ServerStartTime = RelayHub.ServerStartTime,
                ConnectedAgentCount = ConnectedAgents.Count(a => a.Value.IsConnected),
                ConnectedUiClientCount = ConnectedUiClients.Count,
                RecentLogs = RecentServerLogs.ToList(), // 현재 로그 복사본 전달
                ServerVersion = RelayHub.ServerVersion
            };
        }

        #endregion

        #region Connection Lifecycle Overrides

        public override Task OnConnected()
        {
            // 이 시점에서는 Agent인지 UI인지 알 수 없음. 각 클라이언트가 Register 메서드를 호출해야 함.
            LogToServer($"Client attempting to connect: ConnId='{Context.ConnectionId}' from IP='{GetClientIpAddress()}'");
            return base.OnConnected();
        }

        public override Task OnDisconnected(bool stopCalled)
        {
            string connectionId = Context.ConnectionId;
            bool clientWasAgent = false;
            bool clientWasUi = false;
            string disconnectedAgentId = null;

            // 연결 해제된 클라이언트가 Agent인지 확인
            var agentPair = ConnectedAgents.FirstOrDefault(pair => pair.Value.ConnectionId == connectionId);
            if (!string.IsNullOrEmpty(agentPair.Key) && ConnectedAgents.TryGetValue(agentPair.Key, out var agent))
            {
                clientWasAgent = true;
                disconnectedAgentId = agent.AgentId;
                agent.IsConnected = false; // 연결 끊김 상태로 표시
                // ConnectedAgents.TryRemove(agent.AgentId, out _); // 바로 제거하지 않고 상태만 변경
                LogToServer($"Agent disconnected: ID='{agent.AgentId}', ConnId='{connectionId}'. StopCalled={stopCalled}");
                Clients.Clients(ConnectedUiClients.Keys.ToList()).AgentDisconnected(agent.AgentId); // 모든 UI에 알림
            }
            
            // 연결 해제된 클라이언트가 UI인지 확인
            if (ConnectedUiClients.TryRemove(connectionId, out _))
            {
                clientWasUi = true;
                LogToServer($"UI Client disconnected: ConnId='{connectionId}'. StopCalled={stopCalled}. Total UIs now: {ConnectedUiClients.Count}");
            }
            
            if(!clientWasAgent && !clientWasUi)
            {
                 LogToServer($"Unknown client or client that did not register disconnected: ConnId='{connectionId}'. StopCalled={stopCalled}");
            }

            return base.OnDisconnected(stopCalled);
        }

        // 클라이언트 IP 주소 가져오기 (환경에 따라 다를 수 있음)
        private string GetClientIpAddress()
        {
            try
            {
                object ipAddress;
                Context.Request.Environment.TryGetValue("server.RemoteIpAddress", out ipAddress);
                return ipAddress as string ?? Context.Request.GetOwinEnvironment()["server.RemoteIpAddress"] as string ?? "N/A";
            }
            catch { return "N/A"; }
        }
        #endregion
    }
}
1.4. Program.cs (수정)
서버 시작 시 RelayHub.ServerStartTime 설정. 이전의 안정화 코드를 유지.

C#

// MGSPRelayServer/Program.cs
using Microsoft.Owin.Hosting;
using System;
using System.Reflection; // Assembly.GetExecutingAssembly().GetName().Version
using System.Threading;
using MGSPRelayServer.Hubs; // RelayHub 접근을 위해 추가

namespace MGSPRelayServer
{
    class Program
    {
        private static IDisposable _webApp = null;
        private static ManualResetEvent _shutdownEvent = new ManualResetEvent(false);

        static void Main(string[] args)
        {
            // 버전 정보 설정
            try
            {
                var version = Assembly.GetExecutingAssembly().GetName().Version;
                RelayHub.ServerVersion = $"{version.Major}.{version.Minor}.{version.Build}.{version.Revision}";
            }
            catch
            {
                RelayHub.ServerVersion = "N/A";
            }

            RelayHub.ServerStartTime = DateTime.UtcNow; // Hub에 서버 시작 시간 기록

            string serverUrl = "http://localhost:9000"; 
            // string serverUrl = "http://*:9000"; // 모든 IP에서 수신 시 (관리자 권한 및 URL ACL 설정 필요)

            Console.Title = $"MGSP Relay Server - Version {RelayHub.ServerVersion}";

            Console.CancelKeyPress += (sender, e) =>
            {
                e.Cancel = true;
                Console.WriteLine("Ctrl+C detected. Initiating server shutdown...");
                ShutdownServer();
            };

            AppDomain.CurrentDomain.ProcessExit += (sender, e) =>
            {
                Console.WriteLine("Process exiting. Ensuring server shutdown...");
                ShutdownServer();
            };

            try
            {
                Console.WriteLine($"Attempting to start MGSP Relay Server v{RelayHub.ServerVersion} at {serverUrl}...");
                _webApp = WebApp.Start<Startup>(url: serverUrl);
                
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"Server started successfully at {serverUrl}");
                Console.ResetColor();
                Console.WriteLine("Server is running. Press Ctrl+C to stop the server.");

                _shutdownEvent.WaitOne();
            }
            catch (Exception ex)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"[FATAL_ERROR] Failed to start or run MGSP Relay Server: {ex.ToString()}");
                Console.ResetColor();
                Console.WriteLine("Press any key to exit.");
                Console.ReadKey();
            }
            finally
            {
                if (_webApp != null)
                {
                    Console.WriteLine("Main finally: Ensuring server is disposed.");
                    _webApp.Dispose();
                    _webApp = null;
                }
            }

            Console.WriteLine("MGSP Relay Server has shut down. Press any key to exit program.");
            Console.ReadKey();
        }

        private static void ShutdownServer()
        {
            Console.WriteLine("ShutdownServer method called.");
            lock (_shutdownEvent) 
            {
                if (_webApp != null)
                {
                    Console.WriteLine("Disposing WebApp...");
                    _webApp.Dispose(); 
                    _webApp = null;
                    Console.WriteLine("WebApp disposed.");
                }

                // _shutdownEvent.Set() 호출 전에 핸들이 닫혔는지, 이미 Set 되었는지 확인
                if (_shutdownEvent != null && !_shutdownEvent.SafeWaitHandle.IsClosed && !_shutdownEvent.WaitOne(0)) 
                {
                    _shutdownEvent.Set(); 
                    Console.WriteLine("Shutdown event set.");
                }
            }
        }
    }
}
1.5. Startup.cs (변경 없음)
이전과 동일합니다. [assembly: OwinStartup(typeof(MGSPRelayServer.Startup))] 가 AssemblyInfo.cs 또는 여기에 명시되어 있어야 합니다.