using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;

namespace SwiftAIMaster.ViewModels
{
    public class TaskManager
    {
        private readonly DatabaseService _databaseService;  // 데이터베이스 연동 서비스
        public ObservableCollection<TaskModel> Tasks { get; set; }

        public TaskManager(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            Tasks = new ObservableCollection<TaskModel>(_databaseService.GetAllTasks());

            // Tasks 컬렉션이 변경될 때마다 이벤트 핸들러를 호출하도록 설정
            Tasks.CollectionChanged += Tasks_CollectionChanged;
        }

        public void AddTask(TaskModel task)
        {
            task.Priority = Tasks.Count + 1;
            Tasks.Insert(0, task);                           // 새 작업을 목록의 맨 위에 추가
            _databaseService.AddTask(task);                  // DB에 새 작업 저장
        }

        public void UpdateTask(TaskModel task)
        {
            task.UpdateCount++;
            task.LastUpdateTime = DateTime.Now;
            _databaseService.UpdateTask(task);               // DB에 작업 수정 내용 저장
        }

        // 컬렉션이 변경될 때 호출되는 핸들러
        private void Tasks_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Move)
            {
                UpdateTaskPriorities();                      // 순서 업데이트
            }
        }

        // 순서가 변경되면 모든 작업의 순서를 업데이트
        public void UpdateTaskPriorities()
        {
            for (int i = 0; i < Tasks.Count; i++)
            {
                var task = Tasks[i];
                task.Priority = i + 1;  // 새 순서로 Priority 설정
                _databaseService.UpdateTaskPriority(task.Id, task.Priority); // DB에 반영
            }
        }
    }
}
