PF에서 GridControl의 ComboBoxEdit 값을 변경하자마자 다른 컬럼의 색상 및 조건이 즉시 적용되도록 하기 위해, ComboBoxEdit의 EditValueChanged 이벤트를 사용하여 값을 변경할 때마다 즉시 다른 컬럼의 상태를 업데이트하는 방법을 사용할 수 있습니다.

1. XAML 설정
아래 XAML 코드에서는 EditValueChanged 이벤트를 바인딩하여 ComboBoxEdit 값이 변경되었을 때 즉시 다른 컬럼의 상태를 업데이트하도록 설정합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:local="clr-namespace:YourNamespace"
        Title="MainWindow" Height="350" Width="525">
    <Window.Resources>
        <!-- 컨버터 리소스 등록 -->
        <local:DepartmentToReadOnlyConverter x:Key="DepartmentToReadOnlyConverter"/>
        <local:DepartmentToBackgroundConverter x:Key="DepartmentToBackgroundConverter"/>
    </Window.Resources>
    <Grid>
        <dxg:GridControl x:Name="gridControl">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="귀책부서" Header="귀책부서">
                    <dxg:GridColumn.EditSettings>
                        <dxe:ComboBoxEditSettings ItemsSource="{Binding DepartmentList}" EditValueChanged="ComboBoxEdit_EditValueChanged"/>
                    </dxg:GridColumn.EditSettings>
                </dxg:GridColumn>
                <dxg:GridColumn FieldName="발생사유" Header="발생사유">
                    <dxg:GridColumn.EditSettings>
                        <dxe:TextEditSettings Name="발생사유TextEdit"/>
                    </dxg:GridColumn.EditSettings>
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <dxe:TextEdit Text="{Binding 발생사유}"
                                          IsReadOnly="{Binding Path=귀책부서, Converter={StaticResource DepartmentToReadOnlyConverter}}"
                                          Background="{Binding Path=귀책부서, Converter={StaticResource DepartmentToBackgroundConverter}}"/>
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
                <dxg:GridColumn FieldName="조치내역" Header="조치내역">
                    <dxg:GridColumn.EditSettings>
                        <dxe:TextEditSettings Name="조치내역TextEdit"/>
                    </dxg:GridColumn.EditSettings>
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <dxe:TextEdit Text="{Binding 조치내역}"
                                          IsReadOnly="{Binding Path=귀책부서, Converter={StaticResource DepartmentToReadOnlyConverter}}"
                                          Background="{Binding Path=귀책부서, Converter={StaticResource DepartmentToBackgroundConverter}}"/>
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
2. C# 코드 설정
이제 EditValueChanged 이벤트를 처리하는 코드를 작성하여, 콤보박스 값이 변경될 때마다 해당 행의 다른 컬럼들이 즉시 업데이트되도록 합니다.

csharp
코드 복사
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            
            // 샘플 데이터 추가
            gridControl.ItemsSource = new[]
            {
                new { 귀책부서 = "부서A", 발생사유 = "사유1", 조치내역 = "내역1" },
                new { 귀책부서 = "부서공통", 발생사유 = "사유2", 조치내역 = "내역2" },
            };
        }

        private void ComboBoxEdit_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            // 콤보박스 값이 변경될 때마다 해당 행을 새로고침하여 상태 업데이트
            var edit = sender as ComboBoxEdit;
            if (edit != null)
            {
                var row = gridControl.View.GetRowHandleByListIndex(gridControl.View.FocusedRowHandle);
                gridControl.View.RefreshRow(row);
            }
        }
    }
}
3. 코드 설명
ComboBoxEdit_EditValueChanged 이벤트:

ComboBoxEdit의 EditValueChanged 이벤트가 발생할 때마다 호출됩니다.
이벤트 핸들러에서는 현재 포커스된 행의 값을 새로고침하여, 귀책부서 컬럼의 변경 사항이 다른 컬럼(발생사유, 조치내역)에 즉시 반영되도록 합니다.
RefreshRow 메서드:

RefreshRow 메서드를 사용하여 해당 행의 데이터를 다시 렌더링하여, 변경된 조건에 따라 셀의 상태가 즉시 반영되도록 합니다.
이렇게 설정하면 사용자가 귀책부서 콤보박스의 값을 변경할 때마다 발생사유 및 조치내역 컬럼의 상태(읽기 전용 여부 및 배경