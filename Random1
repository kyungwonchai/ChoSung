에 제공한 코드에서 MouseDown 이벤트를 활용하여 범례 항목을 클릭 시 해당 시리즈의 가시성을 토글하는 방법을 구현하였습니다. 그러나 e.HitInfo와 LegendHitInfo를 사용하는 방식이 예상대로 동작하지 않는 문제가 있었습니다. 이를 해결하기 위해 DevExpress WPF ChartControl에서 제공하는 CheckedInLegend 속성을 활용하여 범례 항목의 체크 상태를 통해 시리즈의 가시성을 제어하는 방법을 적용하겠습니다.

CheckedInLegend 속성은 시리즈의 가시성을 제어하는 데 사용되며, 범례에서 해당 시리즈의 체크박스를 통해 직접적으로 제어할 수 있습니다. 이를 통해 추가적인 이벤트 핸들러 없이도 사용자가 범례에서 시리즈의 표시 여부를 손쉽게 조작할 수 있습니다.

수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadDataFromDatabase();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, dataL, "Timestamp", "Values");

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, dataR, "Timestamp", "Values");
        }

        private List<DataPoint> LoadDataFromDatabase()
        {
            var result = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }

            return result;
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new BoxPlotSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "ModelName",
                    ValueDataMember = "MP1" // BoxPlot 기준 데이터
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)LineChart.Diagram, "Line Name", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle)
        {
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName, // Tag를 사용하여 시리즈 식별
                    CheckedInLegend = true // 초기 상태에서 시리즈를 표시
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = Visibility.Visible };
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 변경 사항
CheckedInLegend 속성 활용:

각 시리즈 생성 시 CheckedInLegend = true로 설정하여 초기 상태에서 시리즈가 표시되도록 설정하였습니다.
사용자가 범례의 체크박스를 통해 시리즈의 가시성을 직접 제어할 수 있습니다.
불필요한 이벤트 핸들러 제거:

이전에 사용되었던 MouseDown 이벤트 핸들러와 관련된 코드를 제거하여 코드의 복잡성을 줄였습니다.
이러한 변경을 통해 범례의 체크박스를 사용하여 시리즈의 가시성을 직관적으로 제어할 수 있으며, 추가적인 이벤트 핸들러 없이도 원하는 기능을 구현할 수 있습니다. 
DEVEXPRESS