, 알겠습니다. 설치가 계속 막히니 정말 답답하셨을 것 같습니다. 회사 네트워크 방화벽 문제일 가능성도 충분히 있습니다.

시스템에 남아있는 도커 관련 파일들을 '완전히' 그리고 '깨끗하게' 삭제하는 방법을 알려드리겠습니다. 아래 단계를 순서대로 실행하시면 됩니다.

## 도커(Docker) 완전 삭제 가이드
주의: 아래 명령어는 시스템의 모든 도커 컨테이너, 이미지, 볼륨, 네트워크 설정 등 관련 데이터를 영구적으로 삭제합니다. 중요한 데이터가 있다면 반드시 백업하세요.

1단계: 실행 중인 모든 도커 관련 요소 중지 및 삭제
만약 실행 중인 컨테이너가 있다면 먼저 모두 중지하고, 도커 시스템 전체를 초기화합니다.

Bash

# 실행 중인 모든 컨테이너 중지 (오류가 나도 괜찮습니다)
sudo docker stop $(sudo docker ps -a -q)

# 모든 컨테이너, 이미지, 볼륨, 네트워크를 한 번에 삭제
sudo docker system prune -a --volumes --force
💡 이 단계에서 docker: command not found 같은 오류가 발생해도 괜찮습니다. 이미 일부가 지워졌거나 설치가 불완전해서 그럴 수 있으니 무시하고 다음 단계로 넘어가세요.

2단계: 도커 관련 패키지 완전 삭제 (Purge)
시스템에 설치된 모든 버전의 도커 패키지를 설정 파일까지 남김없이 삭제합니다.

Bash

sudo apt-get purge -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo apt-get purge -y docker-engine docker docker.io docker-ce docker-ce-cli
purge는 remove와 달리 설정 파일까지 모두 지우는 강력한 옵션입니다.

3단계: 남아있는 도커 디렉토리 및 파일 수동 삭제
패키지를 삭제한 후에도 시스템에 남아있을 수 있는 데이터 및 설정 폴더를 직접 삭제합니다.

Bash

sudo rm -rf /var/lib/docker
sudo rm -rf /var/lib/containerd
sudo rm -rf /var/lib/docker-engine
sudo rm -rf /etc/docker
sudo rm -rf ~/.docker
4단계: 최종 정리
마지막으로, 도커를 지우면서 더 이상 필요 없게 된 다른 의존성 패키지들을 정리합니다.

Bash

sudo apt-get autoremove -y