지금 상황에서 JavaScript를 사용하여 updateTable(data) 함수로 row.innerHTML을 업데이트할 때, item.CT 값이 100보다 크면 <td>의 배경색을 빨갛게 설정하는 코드는 아래와 같이 작성할 수 있습니다.

수정된 JavaScript 코드
javascript
코드 복사
function updateTable(data) {
    const tableBody = document.getElementById('table-body'); // 테이블 tbody의 ID
    tableBody.innerHTML = ''; // 기존 테이블 내용 초기화

    data.forEach(item => {
        const row = document.createElement('tr'); // 새로운 행 생성

        // ID 열
        const idCell = `<td>${item.id}</td>`;
        
        // Name 열
        const nameCell = `<td>${item.name}</td>`;
        
        // CT 열 (100 이상일 경우 배경색 빨강)
        const ctCell = `<td style="background-color: ${item.CT > 100 ? 'red' : 'transparent'};">${item.CT}</td>`;

        // 행의 HTML 구성
        row.innerHTML = idCell + nameCell + ctCell;

        // 테이블에 행 추가
        tableBody.appendChild(row);
    });
}
HTML 구조
JavaScript에서 updateTable(data)를 호출하기 위해 테이블 구조는 아래와 같이 설정합니다:

html
코드 복사
<table>
    <thead>
        <tr>
            <th>ID</th>
            <th>Name</th>
            <th>CT</th>
        </tr>
    </thead>
    <tbody id="table-body">
        <!-- JavaScript로 데이터가 여기에 추가됩니다 -->
    </tbody>
</table>
데이터 예제
updateTable(data)를 호출할 때, data는 다음과 같은 배열로 전달됩니다:

javascript
코드 복사
const data = [
    { id: 1, name: 'Item A', CT: 95 },
    { id: 2, name: 'Item B', CT: 110 },
    { id: 3, name: 'Item C', CT: 50 },
    { id: 4, name: 'Item D', CT: 150 }
];

updateTable(data); // 테이블 업데이트 호출
코드 설명
row.innerHTML 업데이트:
각 데이터 항목(item)에 대해 <td>를 동적으로 생성합니다.
item.CT > 100인 경우 style="background-color: red;"를 적용합니다.
tableBody.innerHTML 초기화:
기존의 테이블 내용을 초기화하고 새 데이터를 추가합니다.
appendChild 사용:
새로 생성한 행을 tbody에 추가합니다.
실행 결과
item.CT 값이 100보다 크면 해당 셀의 배경이 빨갛게 표시됩니다.