다음은 Flask를 사용하여 특정 IP와 포트(80, 443)에 대한 방화벽 상태를 확인하는 웹 애플리케이션을 설정하는 방법입니다. Flask 웹 서버는 사용자가 접속했을 때, 해당 IP의 포트 상태를 검사하고 결과를 반환합니다.

1. Python 환경 준비
bash
코드 복사
pip install flask
pip install requests
2. Flask 코드 작성
아래는 Flask 애플리케이션 코드입니다. 사용자가 접속하면 10.10.100.11의 80, 443 포트를 확인하고 결과를 반환합니다.

python
코드 복사
from flask import Flask, jsonify, render_template
import socket

app = Flask(__name__)

# 포트 상태를 확인하는 함수
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2):
            return True
    except Exception:
        return False

@app.route('/')
def check_firewall():
    ip = "10.10.100.11"
    ports = [80, 443]
    results = {}

    # 포트 상태 검사
    for port in ports:
        results[port] = check_port(ip, port)

    # HTML 페이지 렌더링
    return render_template('status.html', results=results, ip=ip)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
3. 템플릿 HTML (templates/status.html)
templates 폴더를 생성하고 status.html 파일을 다음과 같이 작성합니다:

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firewall Status</title>
</head>
<body>
    <h1>Firewall Status for {{ ip }}</h1>
    <table border="1">
        <tr>
            <th>Port</th>
            <th>Status</th>
        </tr>
        {% for port, status in results.items() %}
        <tr>
            <td>{{ port }}</td>
            <td>{{ "Open" if status else "Closed" }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
4. Flask 서버 실행
bash
코드 복사
python app.py
5. 결과 확인
브라우저에서 http://<Flask_서버_IP>:5000에 접속합니다.
접속 시 10.10.100.11의 80번과 443번 포트가 열려 있는지 확인할 수 있습니다.
테이블 형식으로 결과가 표시됩니다:
Open: 방화벽이 해제됨.
Closed: 방화벽이 차단됨.
6. 필요 시 추가 설정
인트라넷 환경: Flask 서버를 인트라넷 환경에서만 실행하거나 host를 0.0.0.0으로 설정하여 내부 네트워크에서 접근 가능하게 설정합니다.
디버그 모드 비활성화: 실제 배포 시 debug=False로 실행합니다.