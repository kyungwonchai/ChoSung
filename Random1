최종 목표: 가운데 흰색 배경의 공지창을 찾아 닫기 버튼 클릭
📌 공지창의 특징
가운데 홀로 떠 있음
배경이 흰색이며, 일부 글자가 포함됨
창의 배경 외부는 상대적으로 어두움 (RGB ≤ 100 이하)
단 하나의 가장 큰 창을 찾아야 함 (가장 밝은 영역 중 가장 큰 사각형)
닫기 버튼은 감지된 창의 (우측상단 -10, -10) 좌표에서 클릭
창이 없으면 클릭하지 않음
🛠 해결 방법
✅ 1) 화면 캡처 후 OpenCV로 변환
✅ 2) 밝기 기반으로 공지창이 있는지 확인 (Threshold 적용)
✅ 3) 창의 배경이 가장 밝고, 주변이 어두운 창을 찾아 필터링
✅ 4) 가장 큰 창을 감지하고 닫기 버튼을 클릭
✅ 5) PictureBox에 감지된 결과를 표시하여 디버깅 가능하게 함

🎯 최적의 코드 (Form1.cs)
csharp
코드 복사
using System;
using System.Drawing;
using System.Windows.Forms;
using OpenCvSharp;
using OpenCvSharp.Extensions;
using System.Runtime.InteropServices;

namespace WinFormsOpenCv
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage; // 이진화 결과 확인
            pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage; // 컨투어 결과 확인
        }

        // 버튼 클릭 시 실행
        private void btnProcess_Click(object sender, EventArgs e)
        {
            // 1️⃣ 화면 캡처
            Bitmap screenshot = CaptureScreen();
            Mat matImage = BitmapConverter.ToMat(screenshot);

            // 2️⃣ 공지창 후보를 찾기 위해 흑백 변환 & Threshold 적용
            Mat processedImage = PreprocessImage(matImage);
            pictureBox1.Image = ConvertMatToBitmap(processedImage); // 변환된 이미지 확인

            // 3️⃣ 창을 검출하고 닫기 버튼 클릭
            Mat contourImage = matImage.Clone(); // 원본 복사
            Rect detectedWindow = DetectWindow(processedImage, contourImage);

            // 4️⃣ PictureBox에 컨투어 이미지 띄움
            pictureBox2.Image = ConvertMatToBitmap(contourImage);

            // 5️⃣ 닫기 버튼 클릭 (감지된 경우)
            if (detectedWindow != Rect.Empty)
            {
                int clickX = detectedWindow.Right - 10;
                int clickY = detectedWindow.Top - 10;
                Cursor.Position = new System.Drawing.Point(clickX, clickY);
                mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, clickX, clickY, 0, IntPtr.Zero);

                Console.WriteLine($"📌 닫기 버튼 클릭 위치: ({clickX}, {clickY})");
            }
            else
            {
                Console.WriteLine("❌ 공지창을 찾을 수 없음.");
            }
        }

        // 1️⃣ 화면 캡처 함수
        private Bitmap CaptureScreen()
        {
            Rectangle bounds = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);
            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);
            }
            return bitmap;
        }

        // 2️⃣ Mat → Bitmap 변환 함수
        private Bitmap ConvertMatToBitmap(Mat mat)
        {
            return BitmapConverter.ToBitmap(mat);
        }

        // 3️⃣ 공지창 후보 찾기 (흑백 변환 & Threshold 적용)
        private Mat PreprocessImage(Mat image)
        {
            Mat gray = new Mat();
            Cv2.CvtColor(image, gray, ColorConversionCodes.BGR2GRAY);

            // 🔥 밝은 영역 강조 (공지창은 밝고, 배경은 어두움)
            Mat binary = new Mat();
            Cv2.Threshold(gray, binary, 180, 255, ThresholdTypes.Binary);

            return binary;
        }

        // 4️⃣ 창 감지 및 닫기 버튼 클릭
        private Rect DetectWindow(Mat binary, Mat originalImage)
        {
            // 🔍 컨투어 찾기
            Cv2.FindContours(binary, out OpenCvSharp.Point[][] contours, out _, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

            Rect detectedWindow = Rect.Empty;
            double maxArea = 0;

            foreach (var contour in contours)
            {
                Rect rect = Cv2.BoundingRect(contour);
                double area = rect.Width * rect.Height;

                // 🔥 가장 밝은 영역 중 가장 큰 창만 선택
                if (rect.Width > 200 && rect.Height > 150 && rect.Width < 1200 && rect.Height < 1200 &&
                    rect.Y > 100 && area > maxArea)
                {
                    maxArea = area;
                    detectedWindow = rect;
                }

                // 🔴 모든 감지된 컨투어를 빨간색으로 표시
                Cv2.Rectangle(originalImage, rect, new Scalar(0, 0, 255), 2);
            }

            // ✅ 가장 큰 창을 초록색으로 강조
            if (detectedWindow != Rect.Empty)
            {
                Cv2.Rectangle(originalImage, detectedWindow, new Scalar(0, 255, 0), 3);
                Console.WriteLine($"📌 감지된 창: 위치 ({detectedWindow.X}, {detectedWindow.Y}), 크기 ({detectedWindow.Width}x{detectedWindow.Height})");
            }

            return detectedWindow;
        }

        // 5️⃣ 마우스 클릭을 위한 WinAPI
        [DllImport("user32.dll", SetLastError = true)]
        static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, IntPtr dwExtraInfo);

        const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        const uint MOUSEEVENTF_LEFTUP = 0x04;
    }
}
🔥 주요 변경점
✅ 1) 밝은 영역만 필터링 (Threshold 적용)
csharp
코드 복사
Cv2.Threshold(gray, binary, 180, 255, ThresholdTypes.Binary);
공지창은 밝고, 배경은 어두우므로 180 이상의 밝은 영역만 남김.
배경이 100 이하의 어두운 부분은 자동으로 제외됨.
✅ 2) 가장 큰 창을 선택 (필터링)
csharp
코드 복사
if (rect.Width > 200 && rect.Height > 150 && rect.Width < 1200 && rect.Height < 1200 &&
    rect.Y > 100 && area > maxArea)
너무 작은 창은 제외 (200x150 이상)
너무 큰 창도 제외 (1200x1200 이하)
가장 큰 창만 선택
✅ 3) 감지된 모든 컨투어를 PictureBox에서 확인 가능
모든 컨투어는 빨간색
감지된 공지창은 초록색
csharp
코드 복사
Cv2.Rectangle(originalImage, rect, new Scalar(0, 0, 255), 2); // 모든 컨투어
Cv2.Rectangle(originalImage, detectedWindow, new Scalar(0, 255, 0), 3); // 감지된 창
이제 pictureBox2에서 감지된 창을 직접 확인 가능!
🎯 실행 결과
WinForms 실행 후 "이진화 적용" 버튼 클릭
PictureBox1에서 밝은 영역 확인 (흑백 Threshold 적용 결과)
PictureBox2에서 빨간색 & 초록색 테두리 확인
초록색으로 감지된 창이 있으면 닫기 버튼 클릭