좋습니다. 제안하신 시스템을 구현하기 위해서 다음과 같은 구조로 설정할 수 있습니다:

안드로이드 앱: 사용자의 고유번호를 MSSQL 2014 데이터베이스와 비교하여 스캐너로 진입할지, 등록 화면으로 진입할지 결정.
서버: MSSQL 2014와 MySQL 5.7 데이터베이스를 모두 연결하여 필요한 작업을 처리.
데이터베이스: MSSQL 2014와 MySQL 5.7 데이터베이스 설정.
1. 안드로이드 앱
AndroidManifest.xml
xml
코드 복사
<uses-permission android:name="android.permission.INTERNET" />
build.gradle
gradle
코드 복사
dependencies {
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
}
MainActivity.kt
kotlin
코드 복사
package com.example.qrscanner

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.widget.Toast
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class MainActivity : AppCompatActivity() {

    private lateinit var apiService: ApiService
    private val uniqueId = android.os.Build.SERIAL // 예제에서는 SERIAL 사용, 실제로는 다른 고유 ID를 사용하세요

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Initialize Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("https://your-server.com")
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        apiService = retrofit.create(ApiService::class.java)

        checkScannerStatus()
    }

    private fun checkScannerStatus() {
        val call = apiService.checkScannerStatus(uniqueId)
        call.enqueue(object : Callback<CheckStatusResponse> {
            override fun onResponse(call: Call<CheckStatusResponse>, response: Response<CheckStatusResponse>) {
                if (response.isSuccessful && response.body()?.isRegistered == true) {
                    startScannerActivity()
                } else {
                    startRegisterActivity()
                }
            }

            override fun onFailure(call: Call<CheckStatusResponse>, t: Throwable) {
                Toast.makeText(this@MainActivity, "Error: ${t.message}", Toast.LENGTH_LONG).show()
            }
        })
    }

    private fun startScannerActivity() {
        val intent = Intent(this, ScannerActivity::class.java)
        startActivity(intent)
        finish()
    }

    private fun startRegisterActivity() {
        val intent = Intent(this, RegisterActivity::class.java)
        startActivity(intent)
        finish()
    }
}
RegisterActivity.kt
kotlin
코드 복사
package com.example.qrscanner

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.widget.Toast
import com.google.zxing.integration.android.IntentIntegrator
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class RegisterActivity : AppCompatActivity() {

    private lateinit var apiService: ApiService
    private val uniqueId = android.os.Build.SERIAL // 예제에서는 SERIAL 사용, 실제로는 다른 고유 ID를 사용하세요

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_register)

        // Initialize Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("https://your-server.com")
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        apiService = retrofit.create(ApiService::class.java)

        startQRScanner()
    }

    private fun startQRScanner() {
        val integrator = IntentIntegrator(this)
        integrator.setPrompt("스캐너 등록을 위한 QR을 리딩하세요")
        integrator.initiateScan()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)
        if (result != null) {
            if (result.contents == null) {
                Toast.makeText(this, "Cancelled", Toast.LENGTH_LONG).show()
            } else {
                registerScanner(result.contents)
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }
    }

    private fun registerScanner(scannedData: String) {
        val call = apiService.registerScanner(uniqueId, scannedData)
        call.enqueue(object : Callback<RegisterResponse> {
            override fun onResponse(call: Call<RegisterResponse>, response: Response<RegisterResponse>) {
                if (response.isSuccessful && response.body()?.status == "success") {
                    Toast.makeText(this@RegisterActivity, "등록 성공", Toast.LENGTH_LONG).show()
                    finish()
                } else {
                    Toast.makeText(this@RegisterActivity, "등록 실패", Toast.LENGTH_LONG).show()
                }
            }

            override fun onFailure(call: Call<RegisterResponse>, t: Throwable) {
                Toast.makeText(this@RegisterActivity, "Error: ${t.message}", Toast.LENGTH_LONG).show()
            }
        })
    }
}
ScannerActivity.kt
kotlin
코드 복사
package com.example.qrscanner

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import android.widget.Toast
import com.google.zxing.integration.android.IntentIntegrator
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class ScannerActivity : AppCompatActivity() {

    private lateinit var apiService: ApiService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_scanner)

        // Initialize Retrofit
        val retrofit = Retrofit.Builder()
            .baseUrl("https://your-server.com")
            .addConverterFactory(GsonConverterFactory.create())
            .build()

        apiService = retrofit.create(ApiService::class.java)

        startQRScanner()
    }

    private fun startQRScanner() {
        val integrator = IntentIntegrator(this)
        integrator.setPrompt("시료를 스캔하세요")
        integrator.initiateScan()
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)
        if (result != null) {
            if (result.contents == null) {
                Toast.makeText(this, "Cancelled", Toast.LENGTH_LONG).show()
            } else {
                updateSampleData(result.contents)
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }
    }

    private fun updateSampleData(scannedData: String) {
        val call = apiService.updateSampleData(scannedData)
        call.enqueue(object : Callback<UpdateResponse> {
            override fun onResponse(call: Call<UpdateResponse>, response: Response<UpdateResponse>) {
                if (response.isSuccessful && response.body()?.status == "success") {
                    Toast.makeText(this@ScannerActivity, "업데이트 성공", Toast.LENGTH_LONG).show()
                } else {
                    Toast.makeText(this@ScannerActivity, "업데이트 실패", Toast.LENGTH_LONG).show()
                }
            }

            override fun onFailure(call: Call<UpdateResponse>, t: Throwable) {
                Toast.makeText(this@ScannerActivity, "Error: ${t.message}", Toast.LENGTH_LONG).show()
            }
        })
    }
}
ApiService.kt
kotlin
코드 복사
package com.example.qrscanner

import retrofit2.Call
import retrofit2.http.Body
import retrofit2.http.POST
import retrofit2.http.Path

interface ApiService {
    @POST("/api/check-scanner-status")
    fun checkScannerStatus(@Body uniqueId: String): Call<CheckStatusResponse>

    @POST("/api/register-scanner")
    fun registerScanner(@Body uniqueId: String, @Body scannedData: String): Call<RegisterResponse>

    @POST("/api/update-sample-data")
    fun updateSampleData(@Body scannedData: String): Call<UpdateResponse>
}
Response Models (CheckStatusResponse.kt, RegisterResponse.kt, UpdateResponse.kt)
kotlin
코드 복사
package com.example.qrscanner

data class CheckStatusResponse(val isRegistered: Boolean)
data class RegisterResponse(val status: String)
data class UpdateResponse(val status: String)
2. 서버 (ASP.NET Core Web API)
Data Models
DataLog.cs

csharp
코드 복사
public class DataLog
{
    public int Id { get; set; }
    public string Data { get; set; }
    public string IP { get; set; }
    public DateTime Timestamp { get; set; }
}
Scanner.cs

csharp
코드 복사
public class Scanner
{
    public int Id { get; set; }
    public string UniqueId { get; set; }
}
SampleData.cs

csharp
코드 복사
public class SampleData
{
    public int Id { get; set; }
    public string ScannedData { get; set; }
    public DateTime UpdatedAt { get; set; }
}
Database Context (DataContext.cs)
csharp
코드 복사
using Microsoft.EntityFrameworkCore;

public class DataContext : DbContext
{
    public DataContext(DbContextOptions<DataContext> options) : base(options) { }

    public DbSet<DataLog> DataLogs { get; set; }
    public DbSet<Scanner> Scanners { get; set; }
    public DbSet<SampleData> SampleData { get; set; }
}
API Controller (DataController.cs)
csharp
코드 복사
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.Linq;
using System.Threading.Tasks;

[Route("api/[controller]")]
[ApiController]
public class DataController : ControllerBase
{
    private readonly DataContext _context;

    public DataController(DataContext context)
    {
        _context = context;
    }

    [HttpPost("check-scanner-status")]
    public async Task<IActionResult> CheckScannerStatus([FromBody] string uniqueId)
    {
        var scanner = await _context.Scanners.FirstOrDefaultAsync(s => s.UniqueId == uniqueId);
        return Ok(new { isRegistered = scanner != null });
    }

    [HttpPost("register-scanner")]
    public async Task<IActionResult> RegisterScanner([FromBody] string uniqueId, [FromBody] string scannedData)
    {
        // 특정 TBL2와 비교 (예: Scanner 데이터베이스의 다른 테이블)
        var validScanner = await _context.SomeOtherTable.FirstOrDefaultAsync(t => t.Data == scannedData);
        if (validScanner == null)
        {
            return BadRequest(new { status = "failure" });
        }

        var scanner = new Scanner { UniqueId = uniqueId };
        _context.Scanners.Add(scanner);
        await _context.SaveChangesAsync();

        return Ok(new { status = "success" });
    }

    [HttpPost("update-sample-data")]
    public async Task<IActionResult> UpdateSampleData([FromBody] string scannedData)
    {
        var sampleData = await _context.SampleData.FirstOrDefaultAsync();
        if (sampleData == null)
        {
            sampleData = new SampleData { ScannedData = scannedData, UpdatedAt = DateTime.Now };
            _context.SampleData.Add(sampleData);
        }
        else
        {
            sampleData.ScannedData = scannedData;
            sampleData.UpdatedAt = DateTime.Now;
        }

        await _context.SaveChangesAsync();
        return Ok(new { status = "success" });
    }
}
Startup.cs
csharp
코드 복사
public class Startup
{
    public void ConfigureServices(IServiceCollection services)
    {
        services.AddDbContext<DataContext>(options =>
            options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));

        services.AddControllers();
        services.AddSignalR();
    }

    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        if (env.IsDevelopment())
        {
            app.UseDeveloperExceptionPage();
        }

        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}
3. 데이터베이스 설정
MSSQL 2014
sql
코드 복사
CREATE TABLE Scanners (
    Id INT PRIMARY KEY IDENTITY,
    UniqueId NVARCHAR(50) NOT NULL
);

CREATE TABLE SomeOtherTable (
    Id INT PRIMARY KEY IDENTITY,
    Data NVARCHAR(50) NOT NULL
);

CREATE TABLE SampleData (
    Id INT PRIMARY KEY IDENTITY,
    ScannedData NVARCHAR(50),
    UpdatedAt DATETIME
);
MySQL 5.7
sql
코드 복사
-- 이미 존재하는 MySQL 5.7 테이블을 가정하고, 필요한 테이블을 추가하거나 업데이트
ALTER TABLE TableC ADD COLUMN ScannedData VARCHAR(50);
ALTER TABLE TableC ADD COLUMN UpdatedAt DATETIME;
이와 같은 구조로 MSSQL 2014 데이터베이스와 MySQL 5.7 데이터베이스를 사용하는 시스템을 구축할 수 있습니다. PC 프로그램은 MSSQL 데이터베이스에 데이터를 기록하고, 안드로이드 앱은 MSSQL 데이터베이스를 통해 스캐너 상태를 확인하고 데이터를 등록하며, MySQL 데이터베이스에 데이터를 업데이트합니