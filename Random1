 요구 사항에 맞춰 SpreadsheetControl2에 시트를 추가하고, 해당 시트가 있는 TabControl의 탭을 선택하며, ListBox의 배경색을 상황에 따라 그라데이션으로 변경하는 코드를 작성해 보았습니다.

기능 요구 사항
버튼 클릭 시 시트 추가:

버튼을 누르면 SpreadsheetControl2에 새로운 시트를 추가합니다.
탭 컨트롤의 두 번째 (TabItem 1번 인덱스) 탭이 선택되고, 추가된 시트를 활성화합니다.
시트 개수가 2개 이상일 때 리스트박스 배경색 변경:

SpreadsheetControl2의 시트 개수가 2개 이상일 때 ListBox의 배경색을 노랑과 빨강이 번갈아 그라데이션으로 변경합니다.
XAML 파일 업데이트
버튼을 추가하여 시트를 추가할 수 있도록 하겠습니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="Multi Spreadsheet Sheet List Example with TabControl" Height="600" Width="1000">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="1*" />
        </Grid.ColumnDefinitions>

        <!-- TabControl to hold multiple SpreadsheetControls -->
        <TabControl x:Name="tabControl" Grid.Column="0">
            <TabItem Header="Spreadsheet 1">
                <dx:SpreadsheetControl x:Name="spreadsheetControl1"/>
            </TabItem>
            <TabItem Header="Spreadsheet 2">
                <dx:SpreadsheetControl x:Name="spreadsheetControl2"/>
            </TabItem>
        </TabControl>

        <!-- StackPanel to hold controls on the right -->
        <StackPanel Grid.Column="1" Margin="10">
            <!-- Button to add a new sheet to SpreadsheetControl2 -->
            <Button Content="Add Sheet to SpreadsheetControl 2" Click="AddSheetButton_Click" Margin="0,0,0,10"/>
            
            <!-- ListBox to show the names of all sheets in the spreadsheets -->
            <ListBox x:Name="sheetListBox" MouseDoubleClick="SheetListBox_MouseDoubleClick"/>
        </StackPanel>
    </Grid>
</Window>
C# 코드 비하인드 파일
이제 버튼 클릭 시 시트를 추가하고 조건에 따라 탭과 리스트박스 배경을 갱신하는 코드를 작성합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeSpreadsheetEventHandlers();
            LoadSheetNamesIntoListBox();
        }

        // SpreadsheetControl의 이벤트 핸들러를 설정하는 메소드
        private void InitializeSpreadsheetEventHandlers()
        {
            spreadsheetControl1.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl1.Document.WorksheetRemoved += OnWorksheetChanged;

            spreadsheetControl2.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl2.Document.WorksheetRemoved += OnWorksheetChanged;
        }

        // 시트가 추가되거나 삭제될 때 호출되는 이벤트 핸들러
        private void OnWorksheetChanged(object sender, WorksheetCollectionChangedEventArgs e)
        {
            LoadSheetNamesIntoListBox();
            UpdateListBoxBackground(); // 시트 개수에 따라 ListBox 배경 업데이트
        }

        // ListBox의 배경을 업데이트하는 메소드
        private void UpdateListBoxBackground()
        {
            int sheetCount = spreadsheetControl2.Document.Worksheets.Count;
            if (sheetCount >= 2)
            {
                // 시트가 2개 이상일 때 노랑과 빨강 그라데이션 적용
                var gradientBrush = new LinearGradientBrush();
                gradientBrush.GradientStops.Add(new GradientStop(Colors.Yellow, 0.0));
                gradientBrush.GradientStops.Add(new GradientStop(Colors.Red, 1.0));
                sheetListBox.Background = gradientBrush;
            }
            else
            {
                // 시트가 1개 이하일 때 기본 배경색으로 설정
                sheetListBox.Background = Brushes.White;
            }
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            sheetListBox.Items.Clear(); // 기존 항목을 모두 지웁니다.

            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1", 0);
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2", 1);
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier, int tabIndex)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 및 탭 인덱스 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet, TabIndex = tabIndex };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체, TabIndex를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 해당 탭을 활성화합니다.
                    tabControl.SelectedIndex = tag.TabIndex;

                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // 버튼 클릭 시 시트를 추가하는 메소드
        private void AddSheetButton_Click(object sender, RoutedEventArgs e)
        {
            IWorkbook workbook = spreadsheetControl2.Document;

            // 새로운 시트 추가
            Worksheet newSheet = workbook.Worksheets.Add();
            newSheet.Name = $"NewSheet{workbook.Worksheets.Count}"; // 시트 이름을 유니크하게 설정

            // 두 번째 탭 (SpreadsheetControl2가 있는 탭) 선택
            tabControl.SelectedIndex = 1;

            // 추가된 시트를 활성화
            workbook.Worksheets.ActiveWorksheet = newSheet;

            // ListBox 갱신 및 배경 업데이트
            LoadSheetNamesIntoListBox();
            UpdateListBoxBackground();
        }

        // SpreadsheetControl, Worksheet 및 TabIndex를 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
            public int TabIndex { get; set; }
        }
    }
}
주요 추가 및 수정 사항
AddSheetButton_Click 메소드:

버튼 클릭 시 spreadsheetControl2에 새로운 시트를 추가합니다.
추가된 시트는 자동으로 활성화되며, TabControl의 두 번째 탭(TabItem 1번 인덱스)을 선택합니다.
UpdateListBoxBackground() 메소드:

spreadsheetControl2의 시트 개수가 2개 이상일 경우, 리스트박스의 배경색을 노랑과 빨강이 번갈아 가며 그라데이션으로 변경합니다.
이를 위해 LinearGradientBrush를 사용하여 그라데이션 효과를 적용했습니다.
LoadSheetNamesIntoListBox() 메소드:

시트를 추가하거나 삭제한 후 리스트박스를 갱신합니다.
이벤트 핸들러 연결 (InitializeSpreadsheetEventHandlers):

WorksheetInserted와 WorksheetRemoved 이벤트를 통해 시트 변경이 발생할 때마다 리스트박스를 갱신하고, 배경색을 업데이트합니다.
사용 예시
버튼 클릭 시 시트 추가:

버튼을 클릭하면 SpreadsheetControl2에 새로운 시트가 추가되고, 두 번째 탭이 선택됩니다.
추가된 시트가 자동으로 활성화됩니다.
시트 개수에 따른 리스트박스 배경색 변경:

SpreadsheetControl2의 시트 개수가 2개 이상이면 리스트박스의 배경색이 노랑과 빨강의 그라데이션으로 변경됩니다.
이 솔루션은 사용자가 손쉽게 시트를 추가하고, 시트 개수에 따른 시각적 효과를 리스트박스에 적용할 수 있도록 도와줍니다.