아래는 MP1~MP5 데이터를 MSSQL에서 가져와서 하나의 차트에 표시하는 방식으로 작성한 WPF DevExpress ChartControl 코드입니다. 각 MP 데이터는 서로 다른 축에 매핑되어 상하단으로 이격된 방식으로 표시됩니다.

1. 데이터베이스 테이블 설계 (예시)
테이블 구조는 다음과 같이 가정합니다:

Time	MP1	MP2	MP3	MP4	MP5
2025-01-13 00:00	10	15	20	25	30
2025-01-13 01:00	12	18	22	28	35
2. 전체 코드 (XAML + C#)
XAML (ChartControl 정의)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:devexpress="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <devexpress:ChartControl Name="chartControl" />
    </Grid>
</Window>
Code-Behind (C#)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Windows;
using DevExpress.Xpf.Charts;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            ConfigureChart();
        }

        private void ConfigureChart()
        {
            // 차트 다이어그램 생성
            var diagram = new XYDiagram2D();

            // 기본 Y축 (MP1) 생성
            var primaryAxisY = new AxisY2D
            {
                Title = new AxisTitle { Content = "MP1", Visibility = Visibility.Visible },
                Alignment = AxisAlignment.Near,
                Label = { Visibility = Visibility.Visible }
            };
            diagram.AxisY = primaryAxisY;

            // 보조 Y축 (MP2~MP5) 생성 및 추가
            var axesY = new List<SecondaryAxisY2D>();
            for (int i = 2; i <= 5; i++)
            {
                axesY.Add(new SecondaryAxisY2D
                {
                    Title = new AxisTitle { Content = $"MP{i}", Visibility = Visibility.Visible },
                    Alignment = AxisAlignment.Far,
                    LabelOffset = 30 * (i - 1), // 축 이격
                });
                diagram.SecondaryAxesY.Add(axesY[^1]);
            }

            // 데이터 시리즈 생성
            var series = CreateSeriesFromDatabase(axesY);

            // 차트에 시리즈 추가
            foreach (var serie in series)
            {
                diagram.Series.Add(serie);
            }

            chartControl.Diagram = diagram;
        }

        private List<Series> CreateSeriesFromDatabase(List<SecondaryAxisY2D> axesY)
        {
            var seriesList = new List<Series>();

            // MSSQL 데이터베이스 연결
            string connectionString = "Your_Connection_String";
            string query = "SELECT Time, MP1, MP2, MP3, MP4, MP5 FROM YourTable";

            try
            {
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var command = new SqlCommand(query, connection);
                    using (var reader = command.ExecuteReader())
                    {
                        var data = new List<DataPoint>();

                        // 데이터 읽기
                        while (reader.Read())
                        {
                            data.Add(new DataPoint
                            {
                                Time = reader.GetDateTime(0).ToString("HH:mm"),
                                MP1 = reader.GetDouble(1),
                                MP2 = reader.GetDouble(2),
                                MP3 = reader.GetDouble(3),
                                MP4 = reader.GetDouble(4),
                                MP5 = reader.GetDouble(5)
                            });
                        }

                        // MP1~MP5 데이터를 각각의 시리즈에 추가
                        var fields = new[] { "MP1", "MP2", "MP3", "MP4", "MP5" };
                        for (int i = 0; i < fields.Length; i++)
                        {
                            var series = new Series
                            {
                                DisplayName = fields[i],
                                ArgumentDataMember = "Time",
                                ValueDataMember = fields[i],
                                View = i == 0
                                    ? new LineSeriesView { AxisY = chartControl.Diagram.AxisY } // MP1
                                    : new LineSeriesView { AxisY = axesY[i - 1] } // MP2~MP5
                            };

                            // 시리즈 데이터 바인딩
                            series.DataSource = data;
                            seriesList.Add(series);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }

            return seriesList;
        }
    }

    // 데이터 모델
    public class DataPoint
    {
        public string Time { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 코드 설명
ConfigureChart():

차트를 설정하고, 기본 축과 보조 축을 추가합니다.
각 보조 축은 LabelOffset 속성을 사용해 상하단으로 이격 배치.
CreateSeriesFromDatabase():

MSSQL 데이터베이스에서 MP1~MP5 데이터를 가져와 시리즈로 변환.
MP1은 기본 Y축에 매핑되고, MP2~MP5는 각 보조 축에 매핑.
데이터 구조:

DataPoint 클래스는 각 시간(Time)별 MP1~MP5 데이터를 보관.
데이터베이스의 값을 읽어서 해당 클래스 인스턴스로 변환.
보조 축 동작:

MP1은 기본 Y축에, MP2~MP5는 각각 보조 Y축에 매핑하여 동일한 0점을 기준으로 표시.
결과
MP1~MP5 데이터: 하나의 차트에 표시되며, 각 데이터는 상하단으로 이격된 Y축에 따라 그려집니다.