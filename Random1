WPF + DevExpress 22.2 조합으로 구현.

수백 명의 사용자 데이터 관리 (성명, KnoxID 사용).

사용자가 가지는 관리 항목 3가지: 사물함, 신발장, 락커.

사용자는 고유키로 식별되며, 성명과 KnoxID는 수정 가능.

✅ 2. 기능 요구 사항
좌측 목록 (목록 표시)

DB에서 전체 사용자 목록 조회 (성명, KnoxID).

사용자를 선택하면 오른쪽 화면에 해당 정보 표시.

KnoxID와 성명을 기준으로 필터링 가능하도록 검색 기능 추가.

우측 화면 (정보 표시 및 수정)

상단 절반: 선택된 사용자의 관리 항목 3가지 정보 표시 (사물함, 신발장, 락커).

수정/삭제/추가 기능 제공 (즉시 DB 반영).

사용자 정보 수정 (성명, KnoxID) 시에도 기존 연결 유지.

새로운 사용자를 등록할 수 있는 버튼 제공.

관리 항목별 레이아웃 표시 (우측 하단)

사물함, 신발장, 락커는 사용자에 따라 다르게 배치됨.

레이아웃은 사용자가 마음대로 정할 수 있음 (배치 이동 및 색상 변경 가능).

소속 파트 인원들이 사용하는 곳은 별도 색상 표시.

빈칸은 별도 색상 표시.

현재 선택된 사람이 사용하는 곳은 또 다른 색상 표시.

값 변경 시 즉시 UI에 반영.

상태 유지 및 수정 기능

관리 항목의 표시이름, 층, 구역, 소속파트, 관리자는 수정되더라도 기존 연결은 유지.

사용자 추가/삭제/수정 기능 제공.

✅ 3. 데이터베이스 설계 (MSSQL)
1. User Table

sql
코드 복사
CREATE TABLE Users (
    UserID INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100) NOT NULL,
    KnoxID NVARCHAR(100) NOT NULL,
    Department NVARCHAR(100),
    UniqueKey NVARCHAR(200) UNIQUE NOT NULL,  -- 사용자 식별을 위한 완전고유키
    LastModified DATETIME DEFAULT GETDATE()
);
2. Locker Table (관리 항목 3가지: 사물함, 신발장, 락커)

sql
코드 복사
CREATE TABLE Lockers (
    LockerID INT PRIMARY KEY IDENTITY(1,1),
    UserID INT FOREIGN KEY REFERENCES Users(UserID),
    Type NVARCHAR(50),  -- 사물함, 신발장, 락커
    Floor NVARCHAR(100),
    Zone NVARCHAR(100),
    Position NVARCHAR(100),
    ManagerName NVARCHAR(100),
    Department NVARCHAR(100),
    LastModified DATETIME DEFAULT GETDATE()
);
✅ 4. 프로젝트 구성 (WPF)
lua
코드 복사
|-- MainViewModel.cs (전체 ViewModel)
|-- LockerView.xaml (메인 UI)
|-- LockerView.xaml.cs (UI 로직 처리)
|-- LockerService.cs (DB 연동 및 데이터 처리)
|-- LockerDiagramControl.cs (레이아웃 그리기)
|-- Models/LockerModel.cs (데이터 모델)
|-- Models/UserModel.cs (사용자 데이터 모델)
|-- Views/UserListView.xaml (좌측 목록 UI)
|-- Views/LockerLayoutView.xaml (우측 하단 레이아웃 UI)
✅ 5. 설계 및 구현 계획
사용자 목록 표시 (좌측)

DevExpress GridControl 사용.

사용자가 목록을 클릭하면 해당 사용자의 정보를 우측 상단에 표시.

사용자 정보 수정/추가/삭제 (우측 상단)

사용자가 선택한 항목(사물함, 신발장, 락커)을 수정 가능.

변경 사항은 즉시 DB에 반영.

사용자 추가 시 3가지 항목도 함께 추가해야 함.

레이아웃 표시 및 수정 (우측 하단)

DiagramControl 사용.

클릭 시 항목이 선택되고 색상이 변경되도록 처리.

배치 이동 가능하도록 설정 (Drag-and-Drop).

실시간으로 업데이트되며 사용자별 색상 차별화.

빈칸은 별도의 색상으로 표시.

DB 연결 및 처리 (LockerService.cs)

비동기 방식으로 데이터 처리 (async/await).

MSSQL과의 연결은 SqlConnection을 사용.

✅ 6. 전체 소스 코드 작성 및 상세 주석 제공
전체 소스를 작성하려면 상당한 분량이 필요합니다.
잠시 기다려 주세요. 바로 구현을 시작하겠습니다.

Wpf Dev Express Locker Management

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
// 프로젝트 구조: WPF + DevExpress 22.2 + MSSQL
// 기능: 사용자 정보 및 관리 항목(사물함, 신발장, 락커) 관리
// 사용자 정보 표시, 수정, 추가, 삭제 기능 포함
// 레이아웃 관리 기능 제공 (색상 변경, 배치 이동 등)
// 실시간으로 UI 업데이트 및 데이터베이스 동기화

using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows;
using DevExpress.Xpf.Grid;
using System.Data.SqlClient;
using System.Data;
using DevExpress.Xpf.Diagram;
using System.Threading.Tasks;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace WPF_DevExpress_Locker_Management
{
    public class UserModel : INotifyPropertyChanged
    {
        public int UserID { get; set; }
        public string Name { get; set; }
        public string KnoxID { get; set; }
        public string Department { get; set; }
        public string UniqueKey { get; set; }  // 완전 고유키

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    public class LockerModel : INotifyPropertyChanged
    {
        public int LockerID { get; set; }
1번 편집함

대신 채팅에서 답합니다
기본적인 데이터 모델과 DB 연동을 위한 서비스 클래스를 구성했습니다.

구성 요소
UserModel.cs

사용자 정보를 관리하는 모델 (성명, KnoxID, 부서, 완전 고유키 포함).

LockerModel.cs

관리 항목 정보 (사물함, 신발장, 락커)에 대한 데이터 모델.

MainViewModel.cs

사용자 목록과 관리 항목 목록을 관리하는 메인 ViewModel.

데이터를 DB에서 불러오고, 변경 사항을 실시간으로 UI에 반영.

LockerService.cs

DB 연동 서비스.

사용자 목록 및 관리 항목 목록을 MSSQL에서 불러옴.