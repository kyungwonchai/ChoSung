ChatGPT
DevExpress 22.2 버전의 WPF ChartControl을 사용하여 좌측에 라인 목록, 날짜 검색 구간, 선택 조회 버튼, 자동 갱신 옵션을 포함한 차트를 구현하는 방법을 안내해 드리겠습니다.

1. XAML 코드
아래는 필요한 UI 요소를 정의한 XAML 코드입니다.

xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 컨트롤 -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <ListBox x:Name="LineListBox" SelectionMode="Extended" />

            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <DatePicker x:Name="StartDatePicker" SelectedDate="{x:Static sys:DateTime.Now}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <DatePicker x:Name="EndDatePicker" SelectedDate="{x:Static sys:DateTime.Now}" />
            </StackPanel>

            <CheckBox x:Name="AutoRefreshCheckBox" Content="자동 갱신" Margin="0,20,0,10" />
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <dxc:ChartControl x:Name="LineChart" Grid.Column="1" Margin="10">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.WholeRange>
                                <dxc:Range MinValue="-1" MaxValue="1" />
                            </dxc:AxisY2D.WholeRange>
                            <dxc:AxisY2D.ConstantLines>
                                <dxc:ConstantLine Value="0.6" Brush="Green">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Upper Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                                <dxc:ConstantLine Value="-0.6" Brush="Red">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Lower Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                            </dxc:AxisY2D.ConstantLines>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
            </dxc:ChartControl>
    </Grid>
</Window>
2. C# 코드 (MainWindow.xaml.cs)
아래는 데이터 로드, 차트 업데이트, 자동 갱신 기능을 구현한 C# 코드입니다.

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Timers;
using System.Windows;
using System.Windows.Threading;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private Timer autoRefreshTimer;
        private List<LineInfo> lineList;
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadLineList();
            SetupAutoRefresh();
        }

        private void LoadLineList()
        {
            lineList = new List<LineInfo>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = "SELECT LineID, LineName FROM LineTable"; // 라인 목록 조회

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        lineList.Add(new LineInfo
                        {
                            LineID = reader.GetInt32(0),
                            LineName = reader.GetString(1)
                        });
                    }
                }
            }

            LineListBox.ItemsSource = lineList;
            LineListBox.SelectAll(); // 기본적으로 전체 선택
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = LineListBox.SelectedItems.Cast<LineInfo>().ToList();
            var startDate = StartDatePicker.SelectedDate ?? DateTime.Now;
            var endDate = EndDatePicker.SelectedDate ?? DateTime.Now;

            if (selectedLines.Any())
            {
                LoadChartData(selectedLines, startDate, endDate);
            }
            else
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void LoadChartData(List<LineInfo> selectedLines, DateTime startDate, DateTime endDate)
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT LineID, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    WHERE LineID IN (@LineIDs) AND Timestamp BETWEEN @StartDate AND @EndDate";

                var lineIds = string.Join(",", selectedLines.Select(l => l.LineID));

                using (var command = new SqlCommand(query, connection))