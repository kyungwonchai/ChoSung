ent\RouterACRmiddleware\anoun.txt에 텍스트를 저장하고 불러오는 방식으로 변경할 수 있습니다. 이 방식에서는 파일 입출력을 통해 텍스트 내용을 저장 및 로드합니다. 이를 위해 System.IO 네임스페이스를 사용하여 파일에 접근하도록 하겠습니다.

1. ViewModel 작성
먼저, ViewModel에서 파일 입출력을 통해 텍스트를 저장하고 불러오는 코드를 작성합니다.

csharp
코드 복사
using System.ComponentModel;
using System.IO;
using System.Runtime.CompilerServices;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _textBoxContent;
        private readonly string _filePath = @"C:\agent\RouterACRmiddleware\anoun.txt";

        public string TextBoxContent
        {
            get => _textBoxContent;
            set
            {
                if (_textBoxContent != value)
                {
                    _textBoxContent = value;
                    OnPropertyChanged();
                    SaveContentToFile(value);  // 값이 변경될 때마다 파일에 저장
                }
            }
        }

        public MainViewModel()
        {
            _textBoxContent = LoadContentFromFile();  // 프로그램 시작 시 파일에서 내용 불러오기
        }

        private void SaveContentToFile(string content)
        {
            try
            {
                // 폴더가 존재하지 않으면 생성
                var directory = Path.GetDirectoryName(_filePath);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // 파일에 내용 저장
                File.WriteAllText(_filePath, content);
            }
            catch (IOException ex)
            {
                // 예외 처리 로직 (로그 추가, 사용자 알림 등)
            }
        }

        private string LoadContentFromFile()
        {
            try
            {
                // 파일이 존재하면 내용을 불러오고, 없으면 빈 문자열 반환
                if (File.Exists(_filePath))
                {
                    return File.ReadAllText(_filePath);
                }
            }
            catch (IOException ex)
            {
                // 예외 처리 로직 (로그 추가, 사용자 알림 등)
            }

            return string.Empty;
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
SaveContentToFile: TextBox 내용이 변경될 때마다 C:\agent\RouterACRmiddleware\anoun.txt 파일에 내용을 저장합니다. 폴더가 존재하지 않으면 Directory.CreateDirectory를 통해 생성합니다.
LoadContentFromFile: 프로그램 시작 시 anoun.txt 파일의 내용을 불러와 TextBoxContent에 할당합니다. 파일이 없으면 빈 문자열을 반환하여 초기 상태를 설정합니다.
2. MainWindow.xaml 바인딩 설정
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <TextBox Text="{Binding TextBoxContent, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}" 
                 AcceptsReturn="True" VerticalScrollBarVisibility="Auto"/>
    </Grid>
</Window>
TextBox의 Text 속성을 TextBoxContent에 바인딩하여, 사용자가 입력할 때마다 TextBoxContent에 변경 사항이 반영되도록 설정합니다.
UpdateSourceTrigger=PropertyChanged로 설정하여 사용자가 입력하는 즉시 ViewModel의 TextBoxContent 값이 업데이트됩니다.
요약
이 구현 방식으로, 프로그램이 종료된 후 다시 실행할 때마다 C:\agent\RouterACRmiddleware\anoun.txt에 저장된 내용이 TextBox에 로드됩니다. 또한 TextBox 내용이 변경될 때마다 파일에 자동으로 저장됩니다.