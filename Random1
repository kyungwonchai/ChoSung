 Python 3.7이 설치된 상태에서 Python 3.9를 추가 설치했다면, 원하는 버전의 Python을 명시적으로 사용할 수 있도록 설정해야 합니다. 아래는 Python 3.9를 가상환경으로 설정하고 사용하는 과정입니다.

1. Python 3.9 설치 확인
Python 3.9 설치 경로를 확인:

기본적으로 Windows에서는 다음 경로에 설치됩니다:
makefile
코드 복사
C:\Users\<YourUsername>\AppData\Local\Programs\Python\Python39
python3.9.exe 파일이 존재하는지 확인합니다.
명령 프롬프트에서 Python 3.9 실행 확인:

cmd
코드 복사
py -3.9 --version
출력 결과:

코드 복사
Python 3.9.13
2. Python 3.9 가상환경 생성 및 활성화
2-1. 작업 폴더로 이동
작업할 프로젝트 폴더를 생성하거나 이동합니다:

cmd
코드 복사
mkdir ML_Project
cd ML_Project
2-2. Python 3.9로 가상환경 생성
Python 3.9 명령어를 명시하여 가상환경을 생성합니다:

cmd
코드 복사
py -3.9 -m venv venv
2-3. 가상환경 활성화
Windows 환경에서 가상환경 활성화:
cmd
코드 복사
venv\Scripts\activate
활성화되면 프롬프트 앞에 (venv)가 표시됩니다:
mathematica
코드 복사
(venv) C:\ML_Project>
2-4. 가상환경 비활성화
작업이 끝난 후 가상환경을 비활성화하려면:

cmd
코드 복사
deactivate
3. Python 3.9 환경에서 라이브러리 설치
가상환경이 활성화된 상태에서 필요한 라이브러리를 설치합니다.

3-1. pip 업데이트
최신 버전의 pip으로 업데이트:

cmd
코드 복사
python -m pip install --upgrade pip
3-2. 머신러닝 관련 라이브러리 설치
한 번에 필요한 라이브러리를 설치:

cmd
코드 복사
pip install numpy pandas scikit-learn matplotlib seaborn tensorflow keras jupyter notebook pymssql
3-3. 설치된 라이브러리 확인
설치된 라이브러리를 확인하려면:

cmd
코드 복사
pip list
4. Python 버전 선택 문제 해결
Python 3.7과 3.9가 모두 설치된 상태에서, Python 버전을 명확히 지정하여 사용해야 합니다.

4-1. Python 3.9를 기본으로 설정 (선택 사항)
Windows에서 기본 Python 버전을 3.9로 설정하려면:

환경 변수 설정:

시작 > 환경 변수 편집 선택.
사용자 변수에서 PATH 편집.
Python 3.9 설치 경로 (예: C:\Users\<YourUsername>\AppData\Local\Programs\Python\Python39)를 최상단에 추가.
확인:

cmd
코드 복사
python --version
결과: Python 3.9.13

4-2. 명시적으로 Python 3.9 사용
기본 Python 버전을 바꾸고 싶지 않다면, 명령어에 Python 3.9를 명시적으로 호출:

cmd
코드 복사
py -3.9 script.py
또는 가상환경 내에서 Python 3.9만 사용하도록 설정합니다.

5. Jupyter Notebook 설정
가상환경 내에서 Jupyter Notebook 설치 후 실행:

cmd
코드 복사
pip install notebook
jupyter notebook
브라우저에서 Jupyter Notebook이 열리며, Python 3.9 가상환경에서 실행됩니다.

6. 문제 발생 시 점검
Python 명령어 충돌: 항상 py -3.9로 명확히 버전을 지정.
환경 변수 점검: 잘못된 Python 버전 경로가 PATH에 포함되지 않도록 정리.