using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ZXing;
using IniParser;
using IniParser.Model;
using OfficeOpenXml; // 엑셀 내보내기 위해 추가

namespace QRMAKER
{
    public partial class MainWindow : ThemedWindow
    {
        private List<Item> _items;
        private Dictionary<string, StackPanel> _qrCodePanels;
        private string _settingsFile = "settings.ini";

        public MainWindow()
        {
            InitializeComponent();
            _items = new List<Item>();
            _qrCodePanels = new Dictionary<string, StackPanel>();
            LoadSettings(); // 설정 값을 로드하는 메서드 호출
        }

        private void LoadSettings()
        {
            if (File.Exists(_settingsFile))
            {
                var parser = new FileIniDataParser();
                IniData data = parser.ReadFile(_settingsFile);
                if (data["Settings"].ContainsKey("QRCodeSize"))
                {
                    sizeSlider.Value = double.Parse(data["Settings"]["QRCodeSize"]);
                    sizeTextBox.Text = data["Settings"]["QRCodeSize"];
                }
                if (data["Settings"].ContainsKey("QRCodeSpacing"))
                {
                    spacingSlider.Value = double.Parse(data["Settings"]["QRCodeSpacing"]);
                    spacingTextBox.Text = data["Settings"]["QRCodeSpacing"];
                }
            }
        }

        private void SizeSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                sizeTextBox.Text = sizeSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Size slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SpacingSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                spacingTextBox.Text = spacingSlider.Value.ToString();
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Spacing slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void SizeTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(sizeTextBox.Text, out double value))
            {
                sizeSlider.Value = value;
            }
        }

        private void SpacingTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (double.TryParse(spacingTextBox.Text, out double value))
            {
                spacingSlider.Value = value;
            }
        }

        private void SaveSettings()
        {
            var parser = new FileIniDataParser();
            var data = new IniData();
            data["Settings"]["QRCodeSize"] = sizeSlider.Value.ToString();
            data["Settings"]["QRCodeSpacing"] = spacingSlider.Value.ToString();
            parser.WriteFile(_settingsFile, data);
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            SaveSettings();
            ExportGridToExcel();
        }

        private void ExportGridToExcel()
        {
            string folderPath = @"C:\agent\qrcode";
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }

            string filePath = System.IO.Path.Combine(folderPath, "GridData.xlsx");

            using (ExcelPackage pck = new ExcelPackage())
            {
                ExcelWorksheet ws = pck.Workbook.Worksheets.Add("GridData");

                ws.Cells["A1"].LoadFromCollection(_items, true);

                FileStream objFileStrm = File.Create(filePath);
                objFileStrm.Close();
                File.WriteAllBytes(filePath, pck.GetAsByteArray());
            }
        }
    }

    public class Item
    {
        public int No { get; set; }
        public string Magazine { get; set; }
    }
}
