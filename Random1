래는 a123 함수를 통해 현재 **선택된 라인(Line)**을 디버그 출력으로 나열하는 예제 코드입니다.

XAML 코드
XAML에는 특별히 변경이 없습니다. 기존의 TreeView와 동일하게 사용합니다.

C# 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;

namespace TreeViewCheckboxExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Group> Groups { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // 예제 데이터 로드
            Groups = new ObservableCollection<Group>
            {
                new Group
                {
                    Name = "Group A",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 1.1", IsChecked = false },
                        new Line { Name = "Line 1.2", IsChecked = true }
                    }
                },
                new Group
                {
                    Name = "Group B",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 2.1", IsChecked = true },
                        new Line { Name = "Line 2.2", IsChecked = false }
                    }
                }
            };
        }

        /// <summary>
        /// 현재 선택된 라인을 나열하는 함수
        /// </summary>
        public void a123()
        {
            var selectedLines = Groups
                .SelectMany(group => group.Lines)
                .Where(line => line.IsChecked) // 선택된 라인만 가져오기
                .Select(line => line.Name)    // 라인 이름만 추출
                .ToList();

            Debug.WriteLine("선택된 라인들:");
            foreach (var line in selectedLines)
            {
                Debug.WriteLine(line); // 디버그 출력
            }
        }
    }

    public class Group : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }
        public ObservableCollection<Line> Lines { get; set; } = new ObservableCollection<Line>();

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class Line : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
설명
a123 함수:

Groups 컬렉션에서 선택된 라인 (IsChecked == true)을 필터링합니다.
선택된 라인의 이름(Name)을 추출하여 디버그 출력합니다.
디버그 출력:

선택된 라인 이름이 Visual Studio Output 창에 표시됩니다.
예를 들어, 선택된 라인이 Line 1.2와 Line 2.1인 경우, 아래와 같은 출력이 나타납니다:
mathematica
코드 복사
선택된 라인들:
Line 1.2
Line 2.1
IsChecked 필드 동기화:

그룹 체크박스 상태와 동기화되어, 그룹을 선택하면 하위 라인이 모두 체크됩니다.
반대로, 하위 라인의 선택 상태에 따라 그룹의 체크 상태도 업데이트됩니다.
사용법
a123 호출:

버튼 클릭 또는 특정 이벤트에서 a123 함수를 호출하여 현재 선택된 라인을 출력합니다.
예:
csharp
코드 복사
private void Button_Click(object sender, RoutedEventArgs e)
{
    a123();
}
디버그 확인:
