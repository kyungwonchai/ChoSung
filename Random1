니다. 지우개 기능이 제대로 작동하도록 다시 한 번 구현해 보겠습니다. 이번에는 Canvas를 사용하여 지우개 모드에서 특정 부분만 지우도록 하겠습니다.

다음은 수정된 코드입니다:

수정된 ImageDisplayScreen.kt
kotlin
코드 복사
package com.example.mssqlimageapp

import android.graphics.Bitmap
import android.graphics.Canvas
import android.os.Build
import android.view.MotionEvent
import android.view.View
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Canvas
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.Path
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.graphics.drawscope.Stroke
import androidx.compose.ui.input.pointer.pointerInteropFilter
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalView
import androidx.compose.ui.unit.dp
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.ByteArrayOutputStream
import java.io.InputStream
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.util.*
import kotlin.math.sqrt

data class DrawingPath(
    val points: List<Offset>,
    val color: Color,
    val strokeWidth: Float,
)

@Composable
fun ImageDisplayScreen(
    bitmap: Bitmap?,
    imageTitle: String,
    datetime: String,
    onBack: () -> Unit,
    onFit: () -> Unit,
    isRefreshing: Boolean,
    onToggleRefresh: (Boolean) -> Unit
) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    var currentBitmap by remember { mutableStateOf(bitmap) }
    val scope = rememberCoroutineScope()
    var currentPathPoints by remember { mutableStateOf(listOf<Offset>()) }
    var drawingPaths by remember { mutableStateOf(listOf<DrawingPath>()) }
    var color by remember { mutableStateOf(Color.Blue) }
    var eraseMode by remember { mutableStateOf(false) }
    var strokeWidth by remember { mutableStateOf(5f) }

    LaunchedEffect(bitmap) {
        currentBitmap = bitmap
    }

    LaunchedEffect(isRefreshing) {
        var timer: Timer? = null
        if (isRefreshing) {
            timer = fixedRateTimer("imageRefresher", true, 0L, 60000) {
                scope.launch {
                    val newBitmap = fetchImageFromDatabase(imageTitle, datetime)
                    if (newBitmap != null) {
                        withContext(Dispatchers.Main) {
                            currentBitmap = newBitmap
                        }
                    }
                }
            }
        } else {
            timer?.cancel()
        }
        onDispose {
            timer?.cancel()
        }
    }

    val context = LocalContext.current
    val view = LocalView.current
    val window = (context as? ComponentActivity)?.window
    val bitmapLauncher = rememberLauncherForActivityResult(ActivityResultContracts.GetContent()) { uri: Uri? ->
        uri?.let {
            val inputStream: InputStream? = context.contentResolver.openInputStream(it)
            val selectedBitmap = BitmapFactory.decodeStream(inputStream)
            scope.launch {
                uploadBitmap(selectedBitmap)
            }
        }
    }

    Box(modifier = Modifier
        .fillMaxSize()
        .pointerInteropFilter { event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN, MotionEvent.ACTION_MOVE -> {
                    eraseMode = event.buttonState == MotionEvent.BUTTON_SECONDARY
                    if (event.action == MotionEvent.ACTION_MOVE) {
                        strokeWidth = event.pressure * 10
                    }
                }
                MotionEvent.ACTION_UP -> {
                    eraseMode = false
                }
            }
            false
        }
    ) {
        currentBitmap?.let { bmp ->
            Image(
                bitmap = bmp.asImageBitmap(),
                contentDescription = null,
                modifier = Modifier
                    .fillMaxSize()
                    .pointerInput(Unit) {
                        detectTransformGestures { _, pan, zoom, _ ->
                            if (!eraseMode) {
                                scale *= zoom
                                offset = Offset(offset.x + pan.x, offset.y + pan.y)
                            }
                        }
                    }
                    .graphicsLayer(
                        scaleX = scale,
                        scaleY = scale,
                        translationX = offset.x,
                        translationY = offset.y
                    )
            )
        }
        Canvas(modifier = Modifier
            .fillMaxSize()
            .pointerInput(Unit) {
                detectDragGestures(
                    onDragStart = { offset ->
                        currentPathPoints = listOf(offset)
                    },
                    onDragEnd = {
                        if (currentPathPoints.isNotEmpty()) {
                            drawingPaths = drawingPaths + DrawingPath(currentPathPoints, color, strokeWidth, eraseMode)
                        }
                        currentPathPoints = listOf()
                    },
                    onDrag = { change, _ ->
                        currentPathPoints = currentPathPoints + change.position
                        change.consume()
                    }
                )
            }
        ) {
            // Draw all paths
            val validPaths = drawingPaths.toMutableList()
            if (eraseMode) {
                currentPathPoints.forEach { erasePoint ->
                    validPaths.forEach { path ->
                        if (path.isErasing) return@forEach
                        val newPoints = path.points.filterNot { it.isCloseTo(erasePoint, strokeWidth) }
                        if (newPoints.size != path.points.size) {
                            validPaths.remove(path)
                            if (newPoints.isNotEmpty()) {
                                validPaths.add(DrawingPath(newPoints, path.color, path.strokeWidth))
                            }
                        }
                    }
                }
            }
            validPaths.forEach { path ->
                val drawPath = Path().apply {
                    moveTo(path.points.first().x, path.points.first().y)
                    for (point in path.points) {
                        lineTo(point.x, point.y)
                    }
                }
                drawPath(
                    path = drawPath,
                    color = path.color,
                    style = Stroke(width = path.strokeWidth)
                )
            }

            // Draw current path
            if (currentPathPoints.isNotEmpty()) {
                val currentPath = Path().apply {
                    moveTo(currentPathPoints.first().x, currentPathPoints.first().y)
                    for (point in currentPathPoints) {
                        lineTo(point.x, point.y)
                    }
                }
                drawPath(
                    path = currentPath,
                    color = if (eraseMode) Color.Transparent else color,
                    style = Stroke(width = strokeWidth)
                )
            }
            drawingPaths = validPaths
        }
        Column(
            modifier = Modifier.align(Alignment.BottomCenter).fillMaxWidth()
                .background(MaterialTheme.colors.surface).padding(horizontal = 20.dp, vertical = 0.dp)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth().padding(8.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Button(onClick = onBack) {
                    Text("Back")
                }
                Button(onClick = {
                    scale = 1f
                    offset = Offset.Zero
                    onFit()
                }) {
                    Text("Fit")
                }
                ColorPicker(
                    selectedColor = color,
                    onColorSelected = { selectedColor -> color = selectedColor }
                )
                Button(onClick = {
                    window?.let { captureAndUploadBitmap(it, view, scope) }
                }) {
                    Text("Upload")
                }
                Button(onClick = {
                    bitmapLauncher.launch("image/*")
                }) {
                    Text("Upload Image")
                }
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Checkbox(
                        checked = isRefreshing,
                        onCheckedChange = onToggleRefresh
                    )
                    Text("Auto Refresh")
                }
            }
        }
    }
}

fun Offset.isCloseTo(other: Offset, threshold: Float = 10f): Boolean {
    return (this - other).getDistance() < threshold
}

fun Offset.getDistance(): Float {
    return sqrt(this.x * this.x + this.y * this.y)
}

@Composable
fun ColorPicker(selectedColor: Color, onColorSelected: (Color) -> Unit) {
    val colors = listOf(Color.Red, Color.Green, Color.Blue, Color.Black)
    Row {
        colors.forEach { color ->
            Button(
                onClick = { onColorSelected(color) },
                modifier = Modifier
                    .size(40.dp)
                    .background(color)
                    .padding(4.dp),
                colors = ButtonDefaults.buttonColors(backgroundColor = color)
            ) {
                if (color == selectedColor) {
                    Text("✓", color = Color.White)
                }
            }
        }
    }
}

fun captureAndUploadBitmap(window: android.view.Window, view: View, scope: CoroutineScope) {
    val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)
    val location = IntArray(2)
    view.getLocationInWindow(location)
    try {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            PixelCopy.request(
                window, android.graphics.Rect(
                    location[0], location[1],
                    location[0] + view.width, location[1] + view.height
                ), bitmap, { copyResult ->
                    if (copyResult == PixelCopy.SUCCESS) {
                        scope.launch {
                            uploadBitmap(bitmap)
                        }
                    }
                }, view.handler
            )
        } else {
            view.draw(Canvas(bitmap))
            scope.launch {
                uploadBitmap(bitmap)
            }
        }
    } catch (e: Exception) {
        e.printStackTrace()
    }
}

suspend fun uploadBitmap(bitmap: Bitmap) {
    withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.222.222.222:1633;databaseName=ddbb123",
            "yourUsername",
            "yourPassword"
        )
        val preparedStatement: PreparedStatement = connection.prepareStatement(
            "INSERT INTO YourImageTable (ImageData) VALUES (?)"
        )

        val stream = ByteArrayOutputStream()
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
        val byteArray = stream.toByteArray()

        preparedStatement.setBytes(1, byteArray)
        preparedStatement.executeUpdate()
        preparedStatement.close()
        connection.close()
    }
}
주요 변경 사항:
eraseMode가 활성화된 경우, validPaths에서 지워야 할 경로를 필터링하여 지우는 방식을 적용했습니다.
지우개 모드에서는 경로의 점들이 가까운지 확인하여 해당 경로를 삭제합니다.
이제 펜의 중앙 버튼을 누르고 있을 때 해당 부분이 지워질 것입니다. 이 방식을 통해 정확한 지우개 동작을 구현할 수 있습니다.






