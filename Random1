<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI 채팅 (API 연동)</title>
    <style>
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            margin: 0; 
            background-color: #eef2f5; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            padding: 20px; 
            box-sizing: border-box; 
        }
        .chat-container { 
            width: 100%; 
            max-width: 700px; 
            background-color: #fff; 
            border-radius: 12px; 
            box-shadow: 0 8px 24px rgba(0,30,80,0.12); 
            display: flex; 
            flex-direction: column; 
            height: calc(100vh - 40px); 
            max-height: 800px; 
        }
        .chat-header { 
            background-color: #007bff; 
            color: white; 
            padding: 15px 20px; 
            border-radius: 12px 12px 0 0; 
            font-size: 1.2em; 
            text-align: center; 
        }
        #chatbox { 
            flex-grow: 1; 
            padding: 20px; 
            overflow-y: auto; 
            display: flex; 
            flex-direction: column; 
            gap: 12px; 
        }
        .message-wrapper { 
            display: flex; 
            max-width: 75%; 
        }
        .message { 
            padding: 10px 15px; 
            border-radius: 18px; 
            line-height: 1.5; 
            position: relative; 
            word-wrap: break-word; 
            white-space: pre-wrap; 
            box-shadow: 0 1px 3px rgba(0,0,0,0.08);
        }
        .message-meta { 
            font-size: 0.75em; 
            color: #777; 
            margin-top: 4px; 
        }
        .user-message-wrapper { 
            align-self: flex-end; 
            margin-left: auto;
        }
        .user-message .message { 
            background-color: #007bff; 
            color: white; 
            border-radius: 18px 18px 5px 18px; 
        }
        .api-response-wrapper { 
            align-self: flex-start; 
            margin-right: auto;
        }
        .api-response .message { 
            background-color: #f1f3f5; 
            color: #212529; 
            border-radius: 18px 18px 18px 5px; 
        }
        .copy-btn {
            background: transparent; 
            border: none; 
            cursor: pointer; 
            padding: 3px; 
            font-size: 0.8em; 
            color: #555;
            opacity: 0.4; 
            transition: opacity 0.2s, color 0.2s;
            position: absolute;
            bottom: 8px;
            right: 8px;
            display: flex; /* 아이콘과 텍스트 정렬 */
            align-items: center; /* 아이콘과 텍스트 정렬 */
        }
        .message:hover .copy-btn { 
            opacity: 1; 
            color: #000;
        }
        .copy-btn-icon { 
            width: 14px; 
            height: 14px; 
            margin-right: 3px; /* 아이콘과 텍스트 간격 */
        }
        .loading-indicator {
            align-self: flex-start;
            margin-right: auto;
            padding: 10px 15px;
            background-color: #f1f3f5;
            color: #555;
            border-radius: 18px;
            font-style: italic;
        }
        #inputArea { 
            display: flex; 
            padding: 15px; 
            border-top: 1px solid #e0e0e0; 
            background-color: #f8f9fa; 
        }
        #messageInput { 
            flex-grow: 1; 
            padding: 12px 15px; 
            border: 1px solid #d1d1d1; 
            border-radius: 20px; 
            margin-right: 10px; 
            font-size: 1em; 
            outline: none;
        }
        #messageInput:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);
        }
        #sendButton { 
            padding: 12px 20px; 
            border: none; 
            background-color: #007bff; 
            color: white; 
            cursor: pointer; 
            border-radius: 20px; 
            font-size: 1em; 
            transition: background-color 0.2s; 
        }
        #sendButton:hover { 
            background-color: #0056b3; 
        }
        #sendButton:disabled {
            background-color: #a0cfff;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">AI 상담원과 대화</div>
        <div id="chatbox">
            </div>
        <div id="inputArea">
            <input type="text" id="messageInput" placeholder="메시지를 입력하세요..." autocomplete="off">
            <button id="sendButton">전송</button>
        </div>
    </div>

    <script>
        const chatbox = document.getElementById('chatbox');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        
        // SVG 복사 아이콘
        const copyIconSvg = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard copy-btn-icon" viewBox="0 0 16 16">
              <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
              <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
            </svg>`;

        // ================================================================================
        // ============================ API 설정 부분 =====================================
        // ================================================================================
        // TODO: 아래 YOUR_API_KEY 부분을 실제 발급받으신 API 키로 교체해주세요.
        const API_KEY = "YOUR_API_KEY"; 
        const API_URL = "https://agent.sec.samsung.net/api/v1/run/9dba307d-2ba3-44f0-a0ed-79d47b2f4de8?stream=false";
        // ================================================================================
        // ================================================================================


        function addMessageToChat(text, senderType, isLoading = false) {
            const messageWrapper = document.createElement('div');
            messageWrapper.classList.add('message-wrapper', senderType + '-message-wrapper');

            if (isLoading) {
                const loadingDiv = document.createElement('div');
                loadingDiv.classList.add('loading-indicator');
                loadingDiv.textContent = text; // "응답을 기다리는 중..."
                messageWrapper.appendChild(loadingDiv);
                messageWrapper.id = 'loading-message'; // ID를 부여하여 나중에 제거할 수 있도록 함
            } else {
                const messageBubble = document.createElement('div');
                messageBubble.classList.add(senderType + '-message'); // 'user-message' or 'api-response'
                
                const messageContent = document.createElement('div');
                messageContent.classList.add('message');
                messageContent.textContent = text;

                // 사용자 메시지가 아닌 경우에만 복사 버튼 추가
                if (senderType === 'api') {
                    const copyButton = document.createElement('button');
                    copyButton.classList.add('copy-btn');
                    copyButton.innerHTML = copyIconSvg + ' 복사';
                    copyButton.title = '메시지 복사';
                    copyButton.addEventListener('click', (e) => {
                        e.stopPropagation(); // 이벤트 버블링 방지
                        navigator.clipboard.writeText(text).then(() => {
                            const originalText = copyButton.innerHTML;
                            copyButton.innerHTML = copyIconSvg + ' 복사됨!';
                            setTimeout(() => {
                                copyButton.innerHTML = originalText;
                            }, 1500);
                        }).catch(err => {
                            console.error('복사 실패:', err);
                            alert('메시지 복사에 실패했습니다.');
                        });
                    });
                    messageContent.appendChild(copyButton);
                }
                
                messageBubble.appendChild(messageContent);
                messageWrapper.appendChild(messageBubble);
            }
            
            chatbox.appendChild(messageWrapper);
            chatbox.scrollTop = chatbox.scrollHeight;
            return messageWrapper; // 생성된 메시지 요소 반환
        }

        // API 호출 함수
        async function callChatApi(userMessage) {
            if (API_KEY === "YOUR_API_KEY") {
                addMessageToChat("API 키가 설정되지 않았습니다. 스크립트에서 API_KEY를 설정해주세요.", 'api');
                return;
            }

            sendButton.disabled = true; // 요청 중 버튼 비활성화
            const loadingMessageElement = addMessageToChat("AI가 응답을 준비 중입니다...", 'api', true);

            const headers = {
                "Content-Type": "application/json",
                "x-api-key": API_KEY
            };
            const body = JSON.stringify({
                "input_value": userMessage,
                "input_type": "chat",    // 이전 이미지에서 확인된 값
                "output_type": "text",   // 텍스트 응답을 받기 위함
                "component_inputs": {}
            });

            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: headers,
                    body: body
                });

                // 로딩 메시지 제거
                if (loadingMessageElement) {
                    loadingMessageElement.remove();
                }

                const responseText = await response.text(); // 응답을 텍스트로 받음

                if (!response.ok) {
                    // HTTP 오류 상태 코드 (4xx, 5xx) 처리
                    let detailedError = `HTTP 오류! 상태 코드: ${response.status}`;
                    if (responseText) {
                        detailedError += `\n응답 내용: ${responseText}`;
                    }
                    throw new Error(detailedError);
                }
                
                // API 응답 텍스트에 혹시 모를 \\n (이스케이프된 백슬래시+n)이 있다면, 실제 \n (줄바꿈 문자)으로 변경
                // 대부분의 경우 API가 output_type: "text"로 \n을 올바르게 주지만, 만약을 대비한 처리
                const cleanedResponseText = responseText.replace(/\\n/g, '\n');
                addMessageToChat(cleanedResponseText, 'api');

            } catch (error) {
                console.error("API 호출 오류:", error);
                if (loadingMessageElement) { // 로딩 메시지가 아직 있다면 제거
                    loadingMessageElement.remove();
                }
                addMessageToChat(`오류가 발생했습니다: ${error.message}`, 'api');
            } finally {
                sendButton.disabled = false; // 요청 완료 후 버튼 다시 활성화
                messageInput.focus(); // 입력창에 다시 포커스
            }
        }
        
        // 전송 버튼 클릭 이벤트 핸들러
        function handleSendMessage() {
            const messageText = messageInput.value.trim();
            if (messageText) {
                addMessageToChat(messageText, 'user');
                callChatApi(messageText); 
                messageInput.value = ''; 
            }
        }

        sendButton.addEventListener('click', handleSendMessage);

        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault(); // 기본 Enter 동작(예: 폼 제출) 방지
                handleSendMessage();
            }
        });

        // 초기 안내 메시지
        addMessageToChat("안녕하세요! 무엇을 도와드릴까요? 아래 입력창에 메시지를 입력해주세요.", 'api');

    </script>
</body>
</html>