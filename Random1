using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows.Forms;

public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();
        StartFolderAnalysis(@"C:\Path\To\Start");  // 분석을 시작할 루트 디렉토리 경로
    }

    private void StartFolderAnalysis(string path)
    {
        Thread thread = new Thread(() => AnalyzeFolders(path, true));
        thread.IsBackground = true;  // 백그라운드 스레드로 설정
        thread.Start();
    }

    private void AnalyzeFolders(string path, bool isRootCall)
    {
        DirectoryInfo rootDir = new DirectoryInfo(path);
        foreach (DirectoryInfo dir in rootDir.GetDirectories())
        {
            long size = CalculateFolderSize(dir);
            if (size >= 1073741824) // 1GB 이상
            {
                DateTime lastModified = GetMostRecentFileDate(dir);
                string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                UpdateListBox(info);  // UI 스레드에서 ListBox 업데이트
            }
            AnalyzeFolders(dir.FullName, false);  // 재귀적으로 하위 폴더 분석
        }

        if (isRootCall)
        {
            UpdateListBox("분석 완료");  // 최상위 호출에서만 분석 완료 메시지를 추가
        }
    }

    private DateTime GetMostRecentFileDate(DirectoryInfo directory)
    {
        return directory.GetFiles().Max(file => file.LastWriteTime);
    }

    private long CalculateFolderSize(DirectoryInfo directory)
    {
        long size = 0;
        FileInfo[] files = directory.GetFiles();
        foreach (FileInfo file in files)
        {
            size += file.Length;
        }
        return size;
    }

    private void UpdateListBox(string info)
    {
        if (listBox.InvokeRequired)
        {
            listBox.Invoke(new Action<string>(UpdateListBox), info);
        }
        else
        {
            listBox.Items.Add(info);
            SortListBox();  // 아이템 추가 후 리스트박스를 정렬
        }
    }

    private void SortListBox()
    {
        var items = listBox.Items.Cast<string>().Select(item =>
        {
            var parts = item.Split('-');
            return new { Item = item, Date = DateTime.Parse(parts.Last().Trim()) };
        }).OrderByDescending(x => x.Date).ToList();

        listBox.Items.Clear();  // 기존 아이템을 모두 제거
        foreach (var item in items)
        {
            listBox.Items.Add(item.Item);  // 정렬된 아이템을 다시 추가
        }
    }
}
