WriteAllTextAsync는 C# .NET Core 3.0 이상 및 .NET 5/6 이상에서 사용할 수 있는 메서드입니다. 만약 당신의 프로젝트가 .NET Framework를 사용 중이라면 비동기 파일 작업은 직접 구현해야 합니다.

아래는 WriteAllTextAsync를 사용할 수 없는 환경에서 대체할 수 있는 코드를 제공합니다:

대체 코드
WriteCurrentTimeAsync 메서드 수정
csharp
코드 복사
private Task WriteCurrentTimeAsync()
{
    return Task.Run(() =>
    {
        try
        {
            // 폴더 생성
            string directoryPath = Path.GetDirectoryName(_filePath);
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }

            // 현재 시간 포맷
            string currentTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

            // 파일에 최신 값만 작성
            File.WriteAllText(_filePath, currentTime);

            // 로그 출력 (필요 시 UI에 출력 가능)
            Console.WriteLine($"파일 업데이트됨: {currentTime}");
        }
        catch (Exception ex)
        {
            MessageBox.Show($"오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    });
}
설명
비동기 작업을 Task.Run으로 처리

.NET Framework에는 File.WriteAllTextAsync가 없으므로, Task.Run을 사용하여 비동기 작업으로 파일 쓰기 로직을 실행합니다.
동기식 파일 쓰기 사용

File.WriteAllText는 동기식 메서드입니다. 비동기 환경에서는 Task.Run으로 별도의 스레드에서 실행하여 UI를 블로킹하지 않도록 처리합니다.
.NET Framework와 호환

위 코드는 .NET Framework 4.5 이상과 완벽히 호환됩니다.
변경 후 전체 코드
수정된 전체 코드는 다음과 같습니다.

MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;

namespace MouseActivityChecker
{
    public partial class MainWindow : Window
    {
        private DateTime _lastMouseActivity; // 마지막 마우스 활동 시간
        private readonly string _filePath = @"F:\Time\Time.txt"; // 파일 경로
        private DispatcherTimer _activityCheckTimer; // 타이머

        public MainWindow()
        {
            InitializeComponent();
            InitializeActivityChecker();
        }

        private void InitializeActivityChecker()
        {
            // 마지막 마우스 활동 시간 초기화
            _lastMouseActivity = DateTime.Now;

            // 마우스 이벤트 감지
            this.MouseMove += OnMouseMove;

            // 타이머 설정 (1초마다 활동 확인)
            _activityCheckTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _activityCheckTimer.Tick += ActivityCheckTimer_Tick;
            _activityCheckTimer.Start();
        }

        private void OnMouseMove(object sender, MouseEventArgs e)
        {
            // 마우스 움직임 감지 시, 마지막 활동 시간 업데이트
            _lastMouseActivity = DateTime.Now;
        }

        private async void ActivityCheckTimer_Tick(object sender, EventArgs e)
        {
            // 마지막 마우스 활동 후 1시간이 경과했는지 확인
            if ((DateTime.Now - _lastMouseActivity).TotalHours >= 1)
            {
                await WriteCurrentTimeAsync(); // 파일 업데이트
                _lastMouseActivity = DateTime.Now; // 활동 시간 리셋
            }
        }

        private Task WriteCurrentTimeAsync()
        {
            return Task.Run(() =>
            {
                try
                {
                    // 폴더 생성
                    string directoryPath = Path.GetDirectoryName(_filePath);
                    if (!Directory.Exists(directoryPath))
                    {
                        Directory.CreateDirectory(directoryPath);
                    }

                    // 현재 시간 포맷
                    string currentTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");

                    // 파일에 최신 값만 작성
                    File.WriteAllText(_filePath, currentTime);

                    // 로그 출력 (필요 시 UI에 출력 가능)
                    Console.WriteLine($"파일 업데이트됨: {currentTime}");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            });
        }
    }
}