틀린으로 QR 코드와 바코드를 동시에 읽고, 읽은 데이터를 MSSQL 2014 데이터베이스로 전송하는 기능을 구현하기 위해 필요한 코드와 DB 스크립트를 아래에 제공합니다.

1. MSSQL 2014 데이터베이스 스크립트
먼저, 데이터를 저장할 테이블을 MSSQL에 생성합니다.

sql
코드 복사
CREATE DATABASE BarcodeQRData;

USE BarcodeQRData;

CREATE TABLE ScannedData (
    Id INT PRIMARY KEY IDENTITY(1,1),
    CodeType VARCHAR(50),
    CodeValue VARCHAR(255),
    ScannedAt DATETIME DEFAULT GETDATE()
);
이 스크립트는 BarcodeQRData라는 데이터베이스를 생성하고, ScannedData라는 테이블을 만듭니다. 이 테이블은 코드 유형(바코드 또는 QR 코드), 코드 값, 스캔 시간 등의 정보를 저장할 수 있습니다.

2. 코틀린 코드
이제 코틀린으로 QR 코드와 바코드를 동시에 읽을 수 있는 카메라 화면을 실행하고, 읽은 값을 MSSQL 데이터베이스로 전송하는 기능을 구현합니다.

2.1. build.gradle (앱 수준)
Gradle 설정에서 필요한 라이브러리를 추가합니다.

gradle
코드 복사
dependencies {
    implementation 'com.google.zxing:core:3.4.1'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'net.sourceforge.jtds:jtds:1.3.1'
}
이 라이브러리들은 QR 코드와 바코드 스캐닝 및 MSSQL에 접속하기 위해 사용됩니다.

2.2. AndroidManifest.xml
카메라 권한을 추가합니다.

xml
코드 복사
<uses-permission android:name="android.permission.CAMERA" />

<application>
    ...
    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>
2.3. activity_main.xml
UI 레이아웃을 정의합니다. 카메라 프리뷰를 위한 SurfaceView를 추가합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <SurfaceView
        android:id="@+id/camera_preview"
        android:layout_width="match_parent"
        android:layout_height="match_parent" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2.4. MainActivity.kt
카메라를 사용하여 QR 코드와 바코드를 동시에 스캔하고 결과를 데이터베이스에 저장합니다.

kotlin
코드 복사
package com.example.barcodescanner

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement

class MainActivity : AppCompatActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        barcodeView = findViewById(R.id.camera_preview)
        barcodeView.decodeContinuous(callback)
    }

    private val callback = object : BarcodeCallback {
        override fun barcodeResult(result: BarcodeResult) {
            if (result.text != null) {
                val scannedValue = result.text
                val codeType = result.barcodeFormat.toString()

                // 스캔된 데이터를 화면에 표시
                findViewById<TextView>(R.id.text_view_result).text = "Scanned: $scannedValue ($codeType)"

                // 데이터베이스에 저장
                saveToDatabase(codeType, scannedValue)
            }
        }

        override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
        }
    }

    private fun saveToDatabase(codeType: String, codeValue: String) {
        val dbUrl = "jdbc:jtds:sqlserver://<Your_Server_IP>:1433/BarcodeQRData"
        val dbUser = "<Your_DB_Username>"
        val dbPassword = "<Your_DB_Password>"

        try {
            val connection: Connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)
            val statement: PreparedStatement = connection.prepareStatement(
                "INSERT INTO ScannedData (CodeType, CodeValue) VALUES (?, ?)"
            )
            statement.setString(1, codeType)
            statement.setString(2, codeValue)
            statement.executeUpdate()
            statement.close()
            connection.close()
        } catch (e: Exception) {
            Log.e("DatabaseError", "Failed to save data", e)
        }
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
    }
}
3. 설명
카메라 사용: DecoratedBarcodeView는 카메라 프리뷰를 사용하여 QR 코드와 바코드를 동시에 스캔합니다.
스캔된 데이터 처리: 스캔된 결과를 barcodeResult 콜백 메서드에서 처리하고, 데이터베이스에 저장하는 saveToDatabase 메서드로 전달합니다.
데이터베이스 연결: JDBC를 사용하여 MSSQL 데이터베이스에 연결하고, 스캔된 데이터를 삽입합니다.
주의사항
<Your_Server_IP>, <Your_DB_Username>, <Your_DB_Password> 부분을 실제 데이터베이스 정보로 변경해야 합니다.
네트워크 연결 상태와 MSSQL 서버 설정이 적절한지 확인해야 합니다.
jTDS 라이브러리를 사용하여 MSSQL에 접속하며, 적절한 JDBC 드라이버 설정이 필요합니다.
이 코드를 통해 코틀린 앱에서 QR 코드와 바코드를 동시에 읽고 MSSQL 데이터베이스로 데이터를 전송할 수 있습니다. 추가적인 기능 확장이나 UI 개선은 필요에 따라 진행할 수 있습니