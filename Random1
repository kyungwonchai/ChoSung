네, 알겠습니다. Users 테이블 및 관련 로그인 로직이 제거됨에 따라 MGSPMonitorControl UI 프로그램의 여러 파일들이 수정됩니다.

가장 먼저 Services/DatabaseService.cs 파일의 수정된 전체 코드를 드리겠습니다. 이 파일에서는 Users 테이블 관련 메서드들이 모두 삭제되고, ManagedAgents 및 ControlActionLogs 테이블의 메서드들에서 userId 관련 파라미터가 제거되거나 단순화됩니다.

1. Services/DatabaseService.cs (수정된 전체 코드)

C#

// MGSPMonitorControl/Services/DatabaseService.cs
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using MGSPMonitorControl.Models; // ManagedAgentDisplay, ControlActionLogEntry
using System.Configuration;     // App.config 사용

namespace MGSPMonitorControl.Services
{
    public interface IDatabaseService
    {
        // User 관련 메서드 모두 제거됨

        Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync();
        Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid);
        Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp);
        // Add/Update 시 modifierInfo (예: "AdminMode", "UserMode") 전달 받도록 변경
        Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo);
        Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo);
        Task<bool> DeleteManagedAgentAsync(Guid agentGuid);

        Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry);
        Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100);
        Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100);
    }

    public class DatabaseService : IDatabaseService
    {
        private readonly string _connectionString;

        public DatabaseService()
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["MonitorControlDBConnection"]?.ConnectionString;
                if (string.IsNullOrEmpty(_connectionString))
                {
                    Console.WriteLine("[ERROR] DB Connection string 'MonitorControlDBConnection' not found in App.config or is empty. Using fallback or will fail.");
                    // 개발용 폴백 연결 문자열 (실제로는 App.config를 통해 설정하는 것이 최선)
                    // _connectionString = "Server=(localdb)\\MSSQLLocalDB;Database=MonitorControlDB;Integrated Security=True;";
                     if (string.IsNullOrEmpty(_connectionString))
                        throw new ConfigurationErrorsException("Database connection string 'MonitorControlDBConnection' is not configured in App.config and no fallback is available.");
                }
            }
            catch (ConfigurationErrorsException configEx)
            {
                 Console.WriteLine($"[ERROR] Configuration error reading DB connection string: {configEx.Message}");
                 throw; 
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[ERROR] Unexpected error initializing DatabaseService: {ex.Message}");
                throw;
            }
        }
        
        // 테스트 또는 외부 주입용 생성자
        public DatabaseService(string connectionString)
        {
            _connectionString = connectionString ?? throw new ArgumentNullException(nameof(connectionString));
        }

        // User Management 관련 메서드들 (AuthenticateUserAsync, UpdateLastLoginAsync, CreateUserAsync) 모두 삭제됨

        #region ManagedAgents CRUD

        public async Task<List<ManagedAgentDisplay>> GetManagedAgentsAsync()
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var agents = new List<ManagedAgentDisplay>();
            // LastModifiedByInfo 컬럼 추가된 것 반영 (DB 스크립트에서 추가했다면)
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo
                             FROM ManagedAgents ORDER BY AgentName;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        agents.Add(new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled")),
                            // LastModifiedByInfo = reader.IsDBNull(reader.GetOrdinal("LastModifiedByInfo")) ? null : reader.GetString(reader.GetOrdinal("LastModifiedByInfo")), // 필요시 추가
                            IsOnline = false, 
                            CurrentMonitorStatus = "Unknown" 
                        });
                    }
                }
            }
            return agents;
        }

        public async Task<ManagedAgentDisplay> GetManagedAgentByGuidAsync(Guid agentGuid)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            ManagedAgentDisplay agent = null;
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo
                             FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        agent = new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled"))
                            // LastModifiedByInfo = reader.IsDBNull(reader.GetOrdinal("LastModifiedByInfo")) ? null : reader.GetString(reader.GetOrdinal("LastModifiedByInfo")), // 필요시 추가
                        };
                    }
                }
            }
            return agent;
        }

        public async Task<ManagedAgentDisplay> GetManagedAgentByProvidedIdAsync(string agentIdProvidedByApp)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            ManagedAgentDisplay agent = null;
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedByInfo 
                             FROM ManagedAgents WHERE AgentIdProvidedByApp = @AgentIdProvidedByApp;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agentIdProvidedByApp);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                         agent = new ManagedAgentDisplay
                        {
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            AgentIdProvidedByApp = reader.GetString(reader.GetOrdinal("AgentIdProvidedByApp")),
                            AgentName = reader.GetString(reader.GetOrdinal("AgentName")),
                            Description = reader.IsDBNull(reader.GetOrdinal("Description")) ? null : reader.GetString(reader.GetOrdinal("Description")),
                            ControlType = reader.GetString(reader.GetOrdinal("ControlType")),
                            PrimaryIpAddress = reader.GetString(reader.GetOrdinal("PrimaryIpAddress")),
                            PrimaryPort = reader.GetInt32(reader.GetOrdinal("PrimaryPort")),
                            GatewayAgentIpAddress = reader.IsDBNull(reader.GetOrdinal("GatewayAgentIpAddress")) ? null : reader.GetString(reader.GetOrdinal("GatewayAgentIpAddress")),
                            GatewayAgentPort = reader.IsDBNull(reader.GetOrdinal("GatewayAgentPort")) ? (int?)null : reader.GetInt32(reader.GetOrdinal("GatewayAgentPort")),
                            IsEnabled = reader.GetBoolean(reader.GetOrdinal("IsEnabled"))
                            // LastModifiedByInfo = reader.IsDBNull(reader.GetOrdinal("LastModifiedByInfo")) ? null : reader.GetString(reader.GetOrdinal("LastModifiedByInfo")), // 필요시 추가
                        };
                    }
                }
            }
            return agent;
        }

        // modifierInfo 파라미터 추가 (예: "AdminMode", "UserMode", 또는 현재 활성화된 모드)
        public async Task<bool> AddManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            if(agent.AgentGuid == Guid.Empty) agent.AgentGuid = Guid.NewGuid();

            string query = @"INSERT INTO ManagedAgents 
                                (AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, PrimaryIpAddress, PrimaryPort, 
                                 GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, CreatedDate, LastModifiedDate, LastModifiedByInfo)
                             VALUES 
                                (@AgentGuid, @AgentIdProvidedByApp, @AgentName, @Description, @ControlType, @PrimaryIpAddress, @PrimaryPort,
                                 @GatewayAgentIpAddress, @GatewayAgentPort, @IsEnabled, GETUTCDATE(), GETUTCDATE(), @ModifierInfo);";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@ModifierInfo", (object)modifierInfo ?? DBNull.Value); // 수정자 정보

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> UpdateManagedAgentAsync(ManagedAgentDisplay agent, string modifierInfo)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            string query = @"UPDATE ManagedAgents SET 
                                AgentIdProvidedByApp = @AgentIdProvidedByApp, AgentName = @AgentName, Description = @Description, 
                                ControlType = @ControlType, PrimaryIpAddress = @PrimaryIpAddress, PrimaryPort = @PrimaryPort,
                                GatewayAgentIpAddress = @GatewayAgentIpAddress, GatewayAgentPort = @GatewayAgentPort, 
                                IsEnabled = @IsEnabled, LastModifiedDate = GETUTCDATE(), LastModifiedByInfo = @ModifierInfo
                             WHERE AgentGuid = @AgentGuid;";

            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@ModifierInfo", (object)modifierInfo ?? DBNull.Value); // 수정자 정보
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> DeleteManagedAgentAsync(Guid agentGuid)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            string query = "DELETE FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        #endregion

        #region ControlActionLogs

        // requesterInfo 파라미터 추가 (예: "AdminMode", "UserMode", 또는 현재 활성화된 모드)
        public async Task<bool> LogControlActionAsync(ControlActionLogEntry logEntry)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            // DB 스키마에서 RequestedByUserId가 RequesterInfo (NVARCHAR)로 변경되었다고 가정
            string query = @"INSERT INTO ControlActionLogs 
                                (AgentGuid, ActionType, ActionParameters, RequesterInfo, RequestTimestamp, 
                                 RelayReceivedTimestamp, AgentReceivedTimestamp, ExecutionCompletedTimestamp, 
                                 FinalStatus, ResultMessage, ExecutedViaGatewayAgentId)
                             VALUES 
                                (@AgentGuid, @ActionType, @ActionParameters, @RequesterInfo, @RequestTimestamp,
                                 @RelayReceivedTimestamp, @AgentReceivedTimestamp, @ExecutionCompletedTimestamp,
                                 @FinalStatus, @ResultMessage, @ExecutedViaGatewayAgentId); SELECT SCOPE_IDENTITY();";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", logEntry.AgentGuid);
                command.Parameters.AddWithValue("@ActionType", logEntry.ActionType);
                command.Parameters.AddWithValue("@ActionParameters", (object)logEntry.ActionParameters ?? DBNull.Value);
                command.Parameters.AddWithValue("@RequesterInfo", (object)logEntry.RequestedByUsername ?? (object)logEntry.RequestedByUserId.ToString() ?? DBNull.Value); // RequestedByUsername 사용 (또는 mode)
                command.Parameters.AddWithValue("@RequestTimestamp", logEntry.RequestTimestamp);
                command.Parameters.AddWithValue("@RelayReceivedTimestamp", (object)logEntry.RelayReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@AgentReceivedTimestamp", (object)logEntry.AgentReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutionCompletedTimestamp", (object)logEntry.ExecutionCompletedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@FinalStatus", logEntry.FinalStatus);
                command.Parameters.AddWithValue("@ResultMessage", (object)logEntry.ResultMessage ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutedViaGatewayAgentId", (object)logEntry.ExecutedViaGatewayAgentId ?? DBNull.Value);

                await connection.OpenAsync();
                var result = await command.ExecuteScalarAsync();
                return result != null && Convert.ToInt64(result) > 0;
            }
        }
        
        public async Task<List<ControlActionLogEntry>> GetRecentControlLogsAsync(int count = 100)
        {
            if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var logs = new List<ControlActionLogEntry>();
            // DB 스키마에서 RequestedByUserId가 RequesterInfo로 변경되었다고 가정하고 쿼리 수정
            string query = $@"
                SELECT TOP (@Count) 
                    cl.LogId, cl.AgentGuid, 
                    ma.AgentName AS AgentNameForLog, 
                    cl.ActionType, cl.ActionParameters, 
                    cl.RequesterInfo, -- Users 테이블 조인 대신 RequesterInfo 직접 사용
                    cl.RequestTimestamp, 
                    cl.RelayReceivedTimestamp, cl.AgentReceivedTimestamp, cl.ExecutionCompletedTimestamp, 
                    cl.FinalStatus, cl.ResultMessage, cl.ExecutedViaGatewayAgentId 
                FROM ControlActionLogs cl
                LEFT JOIN dbo.ManagedAgents ma ON cl.AgentGuid = ma.AgentGuid
                ORDER BY cl.RequestTimestamp DESC;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Count", count);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        logs.Add(new ControlActionLogEntry {
                            LogId = reader.GetInt64(reader.GetOrdinal("LogId")),
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            ActionType = reader.GetString(reader.GetOrdinal("ActionType")),
                            ActionParameters = reader.IsDBNull(reader.GetOrdinal("ActionParameters")) ? null : reader.GetString(reader.GetOrdinal("ActionParameters")),
                            RequestedByUsername = reader.IsDBNull(reader.GetOrdinal("RequesterInfo")) ? "N/A" : reader.GetString(reader.GetOrdinal("RequesterInfo")),
                            RequestTimestamp = reader.GetDateTime(reader.GetOrdinal("RequestTimestamp")),
                            RelayReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("RelayReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("RelayReceivedTimestamp")),
                            AgentReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("AgentReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("AgentReceivedTimestamp")),
                            ExecutionCompletedTimestamp = reader.IsDBNull(reader.GetOrdinal("ExecutionCompletedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("ExecutionCompletedTimestamp")),
                            FinalStatus = reader.GetString(reader.GetOrdinal("FinalStatus")),
                            ResultMessage = reader.IsDBNull(reader.GetOrdinal("ResultMessage")) ? null : reader.GetString(reader.GetOrdinal("ResultMessage")),
                            ExecutedViaGatewayAgentId = reader.IsDBNull(reader.GetOrdinal("ExecutedViaGatewayAgentId")) ? null : reader.GetString(reader.GetOrdinal("ExecutedViaGatewayAgentId"))
                        });
                    }
                }
            }
            return logs;
        }

        public async Task<List<ControlActionLogEntry>> GetControlLogsForAgentAsync(Guid agentGuid, int count = 100)
        {
             if (string.IsNullOrEmpty(_connectionString)) throw new InvalidOperationException("Database connection string is not configured.");
            var logs = new List<ControlActionLogEntry>();
            string query = $@"
                SELECT TOP (@Count) 
                    cl.LogId, cl.AgentGuid, 
                    ma.AgentName AS AgentNameForLog,
                    cl.ActionType, cl.ActionParameters, 
                    cl.RequesterInfo, 
                    cl.RequestTimestamp, 
                    cl.RelayReceivedTimestamp, cl.AgentReceivedTimestamp, cl.ExecutionCompletedTimestamp, 
                    cl.FinalStatus, cl.ResultMessage, cl.ExecutedViaGatewayAgentId 
                FROM ControlActionLogs cl
                LEFT JOIN dbo.ManagedAgents ma ON cl.AgentGuid = ma.AgentGuid
                WHERE cl.AgentGuid = @AgentGuid
                ORDER BY cl.RequestTimestamp DESC;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Count", count);
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                     while (await reader.ReadAsync())
                    {
                        logs.Add(new ControlActionLogEntry {
                            LogId = reader.GetInt64(reader.GetOrdinal("LogId")),
                            AgentGuid = reader.GetGuid(reader.GetOrdinal("AgentGuid")),
                            ActionType = reader.GetString(reader.GetOrdinal("ActionType")),
                            ActionParameters = reader.IsDBNull(reader.GetOrdinal("ActionParameters")) ? null : reader.GetString(reader.GetOrdinal("ActionParameters")),
                            RequestedByUsername = reader.IsDBNull(reader.GetOrdinal("RequesterInfo")) ? "N/A" : reader.GetString(reader.GetOrdinal("RequesterInfo")),
                            RequestTimestamp = reader.GetDateTime(reader.GetOrdinal("RequestTimestamp")),
                            RelayReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("RelayReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("RelayReceivedTimestamp")),
                            AgentReceivedTimestamp = reader.IsDBNull(reader.GetOrdinal("AgentReceivedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("AgentReceivedTimestamp")),
                            ExecutionCompletedTimestamp = reader.IsDBNull(reader.GetOrdinal("ExecutionCompletedTimestamp")) ? (DateTime?)null : reader.GetDateTime(reader.GetOrdinal("ExecutionCompletedTimestamp")),
                            FinalStatus = reader.GetString(reader.GetOrdinal("FinalStatus")),
                            ResultMessage = reader.IsDBNull(reader.GetOrdinal("ResultMessage")) ? null : reader.GetString(reader.GetOrdinal("ResultMessage")),
                            ExecutedViaGatewayAgentId = reader.IsDBNull(reader.GetOrdinal("ExecutedViaGatewayAgentId")) ? null : reader.GetString(reader.GetOrdinal("ExecutedViaGatewayAgentId"))
                        });
                    }
                }
            }
            return logs;
        }
        #endregion
    }
}
DatabaseService.cs 주요 변경점:

사용자 관련 메서드 전체 삭제: AuthenticateUserAsync, UpdateLastLoginAsync, CreateUserAsync 등 Users 테이블을 사용하던 모든 메서드를 삭제했습니다.
AddManagedAgentAsync, UpdateManagedAgentAsync 수정: modifierUserId 파라미터 대신 modifierInfo (string 타입) 파라미터를 받도록 변경하고, DB 쿼리에서 LastModifiedByInfo 컬럼에 이 값을 저장하도록 수정했습니다. (DB 스크립트에서 해당 컬럼이 추가되었다고 가정)
LogControlActionAsync 수정: RequestedByUserId 파라미터 대신 logEntry.RequestedByUsername (또는 다른 모드 정보)을 RequesterInfo 컬럼에 저장하도록 수정했습니다. (DB 스크립트에서 해당 컬럼이 RequesterInfo로 변경되었다고 가정)
GetRecentControlLogsAsync, GetControlLogsForAgentAsync 수정: Users 테이블과의 JOIN을 제거하고, RequesterInfo 컬럼을 직접 읽어 RequestedByUsername (또는 유사한 속성)에 채우도록 수정했습니다.
다음 파일: