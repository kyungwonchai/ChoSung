 함수의 실행 소요 시간을 산출하고, 그 시간을 툴팁에 넣으며, 총 소요 시간을 초 단위로 계산하여 별도의 sec 컬럼에 넣는 방법을 설명드리겠습니다.

이 작업을 수행하려면 각 함수의 시작 시간과 종료 시간을 계산해야 합니다. 이를 위해 C#에서 제공하는 Stopwatch 클래스를 활용할 수 있습니다. 각 함수의 실행이 끝날 때마다 경과 시간을 기록하고, 각 함수의 툴팁에 실행 시간을 업데이트합니다. 또한, 모든 함수의 소요 시간을 합산하여 총 소요 시간을 계산하고 이를 sec 컬럼에 표시합니다.

단계별 설명 및 코드 예시
1. 각 함수의 실행 시간 측정
각 함수의 실행 시간을 측정하기 위해 **Stopwatch**를 사용합니다. **Stopwatch**는 함수가 시작될 때 시작하고, 끝날 때 시간을 멈추어 경과 시간을 계산할 수 있습니다.

2. 각 함수의 소요 시간을 툴팁에 업데이트
각 함수가 끝난 후 해당 도형의 툴팁에 소요 시간을 업데이트합니다.

3. 총 소요 시간을 계산하여 sec 컬럼에 표시
각 함수의 실행 시간을 합산하여 총 실행 시간을 계산하고, sec 컬럼에 표시합니다.

1. TaskModel.cs 수정
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;

public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    public ObservableCollection<FunctionStatus> FunctionStatusList { get; set; }
    public string Status { get; set; }

    // 총 소요 시간을 표시할 컬럼
    private int _totalSeconds;
    public int TotalSeconds
    {
        get => _totalSeconds;
        set
        {
            _totalSeconds = value;
            OnPropertyChanged(nameof(TotalSeconds));
        }
    }

    private Stopwatch _stopwatch;  // 총 실행 시간 측정용

    public TaskModel()
    {
        FunctionStatusList = new ObservableCollection<FunctionStatus>();
        Status = "Pending";
        _stopwatch = new Stopwatch();  // Stopwatch 초기화

        // 각 함수와 상태 추가
        AddFunction("Task A", ExecuteTaskA, Brushes.Gray);
        AddFunction("Task B", ExecuteTaskB, Brushes.Gray);
        AddFunction("Task C", ExecuteTaskC, Brushes.Gray);
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행합니다.
    /// </summary>
    public async void StartTask()
    {
        _stopwatch.Restart();  // 전체 작업 시작 시간 기록
        Status = "Running";
        await ExecuteTaskSequence();  // 작업 순차 실행
        Status = "Completed";
        TotalSeconds = (int)_stopwatch.Elapsed.TotalSeconds;  // 총 소요 시간을 초 단위로 기록
        _stopwatch.Stop();  // 전체 작업 종료 시간 기록
    }

    /// <summary>
    /// 시퀀스 작업을 비동기적으로 실행합니다.
    /// 각 함수의 소요 시간을 계산하여 툴팁에 반영합니다.
    /// </summary>
    private async Task ExecuteTaskSequence()
    {
        foreach (var functionStatus in FunctionStatusList)
        {
            Stopwatch functionStopwatch = new Stopwatch();  // 각 함수별 시간 측정
            functionStopwatch.Start();  // 함수 시작 시간 기록

            await ExecuteTaskWithColor(FunctionStatusList.IndexOf(functionStatus), functionStatus.Task);

            functionStopwatch.Stop();  // 함수 종료 시간 기록
            functionStatus.ExecutionTime = $"{functionStopwatch.Elapsed.TotalSeconds:F2} seconds";  // 실행 시간 툴팁에 반영
        }
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 완료되면 해당 인덱스의 도형 색상을 변경합니다.
    /// </summary>
    private async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusList[index].UpdateStatus(Brushes.SkyBlue);  // 진행 중 색상
        });

        await task();  // 비동기 작업 실행

        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusList[index].UpdateStatus(Brushes.Green);  // 완료 색상
        });
    }

    private async Task ExecuteTaskA() { await Task.Delay(1000); }
    private async Task ExecuteTaskB() { await Task.Delay(1500); }
    private async Task ExecuteTaskC() { await Task.Delay(2000); }

    /// <summary>
    /// 함수 이름, 작업, 도형 색상 및 실행 시간(툴팁)을 관리합니다.
    /// </summary>
    public void AddFunction(string functionName, Func<Task> task, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, task, initialColor);
        FunctionStatusList.Add(functionStatus);
    }
}
2. FunctionStatus.cs (함수 상태 관리 클래스)
csharp
코드 복사
public class FunctionStatus : ViewModelBase
{
    public string FunctionName { get; set; }
    public Func<Task> Task { get; set; }

    // 함수의 도형 상태 색상
    private Brush _statusColor;
    public Brush StatusColor
    {
        get => _statusColor;
        set
        {
            _statusColor = value;
            OnPropertyChanged(nameof(StatusColor));
        }
    }

    // 실행 시간을 툴팁에 표시할 속성
    private string _executionTime;
    public string ExecutionTime
    {
        get => _executionTime;
        set
        {
            _executionTime = value;
            OnPropertyChanged(nameof(ExecutionTime));
        }
    }

    public FunctionStatus(string functionName, Func<Task> task, Brush initialColor)
    {
        FunctionName = functionName;
        Task = task;
        StatusColor = initialColor;
        ExecutionTime = "Pending";
    }

    public void UpdateStatus(Brush newColor)
    {
        StatusColor = newColor;
    }
}
3. XAML 수정 (ToolTip과 Sec 컬럼 추가)
xml
코드 복사
<DataGridTemplateColumn Header="Function Status">
    <DataGridTemplateColumn.CellTemplate>
        <DataTemplate>
            <!-- 도형과 상태를 표시하는 ItemsControl -->
            <ItemsControl ItemsSource="{Binding FunctionStatusList}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Grid>
                            <!-- 도형 -->
                            <Ellipse Width="30" Height="30" Fill="{Binding StatusColor}">
                                <Ellipse.ToolTip>
                                    <!-- 함수 실행 시간 표시 -->
                                    <TextBlock Text="{Binding ExecutionTime}" />
                                </Ellipse.ToolTip>
                            </Ellipse>

                            <!-- 도형 위에 겹쳐서 표시할 텍스트 (함수 이름) -->
                            <ViewBox HorizontalAlignment="Center" VerticalAlignment="Center">
                                <TextBlock Text="{Binding FunctionName}" Foreground="White"
                                           FontWeight="Bold" HorizontalAlignment="Center" 
                                           VerticalAlignment="Center"/>
                            </ViewBox>
                        </Grid>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </DataTemplate>
    </DataGridTemplateColumn.CellTemplate>
</DataGridTemplateColumn>

<!-- 총 소요 시간을 표시할 sec 컬럼 -->
<DataGridTextColumn Header="Total Time (sec)" Binding="{Binding TotalSeconds}" />
설명:
Stopwatch: 각 함수가 시작될 때 **Stopwatch**로 시간을 측정하고, 끝난 후 소요 시간을 계산하여 툴팁에 넣습니다.
ExecutionTime: 각 함수의 실행 시간을 표시하는 속성입니다. 함수가 끝날 때마다 초 단위로 소요 시간을 계산하고, 툴팁에 표시됩니다.
TotalSeconds: 총 소요 시간을 계산한 후 별도의 sec 컬럼에 기록합니다.
DataGrid의 sec 컬럼: 함수 실행이 끝난 후 모든 함수의 총 실행 시간을 계산하고, 이를 초 단위로 표시합니다.
요약:
각 함수의 실행 시간을 툴팁에 표시하고, 총 실행 시간을 계산하여 sec 컬럼에 추가합니다.
각 함수는 비동기적으로 실행되며, **Stopwatch**로 실행 시간을 측정한 후 결과를 기록합니