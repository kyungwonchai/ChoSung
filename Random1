옮겨졌는지 확인한 후에만 다음 작업을 진행할 수 있도록 하기 위해서는, 파일 이동 작업을 비동기적으로 처리하고, 모든 파일이 정상적으로 이동될 때까지 대기하는 코드를 작성할 수 있습니다. 이 과정에서 Task와 Task.WhenAll을 사용하면 효율적으로 비동기 작업을 관리할 수 있습니다.

아래는 C#으로 구현한 MoveFilesToBackup 함수입니다.

csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Collections.Generic;

public class FileBackupHelper
{
    private readonly string backupDirectory;

    // 생성자에서 백업 디렉터리를 설정합니다.
    public FileBackupHelper(string backupDir)
    {
        backupDirectory = backupDir;
    }

    // 파일들을 백업 디렉터리로 옮기고 모든 파일이 옮겨질 때까지 기다리는 함수
    public async Task MoveFilesToBackupAsync(List<string> filesToMove)
    {
        // 파일 이동 작업들을 저장할 리스트
        List<Task> moveTasks = new List<Task>();

        // 백업 디렉터리가 존재하지 않으면 생성합니다.
        if (!Directory.Exists(backupDirectory))
        {
            Directory.CreateDirectory(backupDirectory);
        }

        // 모든 파일들을 백업 디렉터리로 옮기는 작업을 비동기적으로 처리
        foreach (string filePath in filesToMove)
        {
            moveTasks.Add(Task.Run(() => MoveFile(filePath)));
        }

        // 모든 파일 이동 작업이 완료될 때까지 기다립니다.
        await Task.WhenAll(moveTasks);
    }

    // 개별 파일을 백업 디렉터리로 이동하는 함수
    private void MoveFile(string filePath)
    {
        try
        {
            string fileName = Path.GetFileName(filePath);
            string destPath = Path.Combine(backupDirectory, fileName);

            // 이미 동일한 파일이 백업 디렉터리에 있을 경우 덮어씁니다.
            File.Move(filePath, destPath, true);

            Console.WriteLine($"File {filePath} successfully moved to {destPath}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error moving file {filePath}: {ex.Message}");
        }
    }
}
코드 설명
FileBackupHelper 클래스: 백업 작업을 관리하는 클래스입니다. 백업 디렉터리를 생성자로 전달받고, 이를 이용해 파일을 옮깁니다.
MoveFilesToBackupAsync 함수: 파일을 비동기적으로 백업 디렉터리로 옮기고, 모든 파일이 옮겨질 때까지 Task.WhenAll을 사용해 대기합니다.
MoveFile 함수: 개별 파일을 백업 디렉터리로 이동시키는 함수입니다. 예외 처리도 포함되어 있어 이동 도중 오류가 발생할 경우 적절히 로그를 남깁니다.
사용 방법
csharp
코드 복사
List<string> files = new List<string>
{
    @"C:\SourceDir\File1.txt",
    @"C:\SourceDir\File2.txt",
    @"C:\SourceDir\File3.txt"
};

FileBackupHelper backupHelper = new FileBackupHelper(@"C:\BackupDir");
await backupHelper.MoveFilesToBackupAsync(files);
