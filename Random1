안녕하세요. 방금 생성된 clip_to_github.py 스크립트에 대해 한국어로 자세히 설명해 드리겠습니다.

이 스크립트는 우분투 데스크톱에서 클립보드에 복사되는 텍스트를 감지하여, 지정된 깃허브(GitHub) 저장소의 특정 파일에 자동으로 추가해주는 프로그램입니다.

스크립트의 주요 기능 및 목적

사용자가 데스크톱에서 텍스트를 복사할 때마다(예: Ctrl+C), 이 스크립트가 '이벤트'를 감지합니다. 그리고 복사된 텍스트 내용을 깃허브 저장소에 있는 파일의 맨 끝에 자동으로 커밋(commit)하여 추가합니다. 메모나 로그를 깃허브 문서에 실시간으로 백업하는 용도로 사용할 수 있습니다.

사전 준비 사항 (코드 상단 주석)

스크립트를 실행하기 전에 몇 가지 준비가 필요합니다.

    시스템 라이브러리 설치: 우분투의 클립보드를 모니터링하기 위해 GTK 관련 라이브러리가 필요합니다.
    Bash

sudo apt-get update
sudo apt-get install -y python3-gi gir1.2-gtk-3.0 python3-pip

파이썬 라이브러리 설치: 깃허브 API를 사용하기 위해 PyGithub 라이브러리가 필요합니다.
Bash

    pip3 install PyGithub

    GitHub 개인용 액세스 토큰 (PAT): 스크립트가 사용자를 대신하여 깃허브에 접근할 수 있도록 인증 토큰이 필요합니다.

        깃허브 설정 > 개발자 설정 > Personal access tokens (classic)에서 새 토큰을 생성합니다.

        토큰을 생성할 때 **repo 스코프(scope)**에 반드시 체크해야 합니다. (저장소에 대한 모든 권한)

스크립트의 주요 구성 요소

스크립트는 크게 3부분으로 나뉩니다.

1. GitHubUpdater 클래스

    이 클래스는 깃허브 API와 관련된 모든 작업을 처리합니다.

    __init__ (초기화): 사용자의 토큰으로 깃허브에 인증하고, 지정된 저장소(repo)에 연결합니다. 그리고 대상 파일이 이미 존재하는지 확인하고, 파일의 현재 버전 식별자(SHA)를 가져옵니다.

    get_latest_file_sha: 파일의 최신 SHA 값을 가져옵니다. 파일이 없으면 None을 반환합니다.

    append_to_file: 가장 핵심적인 함수입니다.

        깃허브에서 현재 파일 내용을 읽어옵니다.

        기존 내용 뒤에 새로 복사된 클립보드 내용을 줄바꿈과 함께 추가합니다.

        새로운 내용으로 깃허브에 커밋(commit)을 합니다. 파일이 없으면 새로 생성하고, 있으면 업데이트합니다.

        커밋이 성공하면, 다음 업데이트를 위해 파일의 새로운 SHA 값을 저장합니다. (충돌 방지를 위해 필수)

2. ClipboardWatcher 클래스

    이 클래스는 우분투 데스크톱의 클립보드를 실시간으로 감시합니다.

    __init__ (초기화): GTK의 클립보드 객체를 가져오고, owner-change 이벤트가 발생할 때마다 on_clipboard_change 함수가 호출되도록 연결합니다. owner-change 이벤트가 바로 사용자가 요청한 "클립보드 값 변경 이벤트"입니다.

    on_clipboard_change: 클립보드에 변화가 감지되면(즉, 무언가 복사되면) 이 함수가 실행됩니다. 클립보드에 텍스트가 완전히 들어올 때까지 50ms 정도 짧게 기다린 후 check_content 함수를 호출합니다.

    check_content:

        클립보드에서 텍스트를 읽어옵니다.

        방금 읽어온 텍스트가 이전에 복사했던 내용과 다른지 확인합니다. (동일한 내용을 여러 번 복사해도 한 번만 전송됨)

        새로운 텍스트라면, GitHubUpdater의 append_to_file 함수를 호출하여 깃허브로 전송합니다.

3. get_configuration 및 main 함수

    get_configuration:

        스크립트 실행 시 ~/.clip_to_github_config.json 설정 파일이 있는지 확인합니다.

        파일이 있으면, 저장된 토큰, 저장소 이름 등의 설정을 읽어옵니다.

        파일이 없으면 (처음 실행 시), 사용자에게 터미널을 통해 직접 (1) 깃허브 토큰, (2) 저장소 이름, (3) 파일 경로, (4) 커밋 메시지 접두어 를 입력받아 설정 파일로 저장합니다. (토큰이 포함되므로 파일 권한을 600으로 설정하여 안전하게 보관)

    main:

        전체 프로그램을 시작하는 진입점입니다.

        설정을 불러온 후, GitHubUpdater와 ClipboardWatcher 객체를 생성합니다.

        GObject.MainLoop().run()을 실행하여 스크립트가 종료되지 않고 백그라운드에서 계속 실행되며 클립보드 이벤트를 기다리게 합니다.

        터미널에서 Ctrl+C를 누르면 "Stopping..." 메시지와 함께 안전하게 종료됩니다.

요약

이 스크립트를 터미널에서 python3 clip_to_github.py로 실행하면, 처음에 한 번 깃허브 설정을 물어봅니다. 설정이 완료되면 스크립트는 터미널에서 계속 실행되며, 사용자가 웹사이트나 문서 등에서 텍스트를 복사할 때마다 해당 내용이 사용자의 깃허브 파일에 차곡차곡 쌓이게 됩니다.