네, 알겠습니다! SAgentM.App의 MainViewModel.cs와 UI를 담당하는 MainWindow.xaml, MainWindow.xaml.cs 그리고 애플리케이션 진입점인 App.xaml, App.xaml.cs 코드를 이어서 제공해 드리겠습니다.

먼저 ICommand 인터페이스를 구현하는 간단한 헬퍼 클래스인 RelayCommand.cs를 Utils 폴더에 추가하겠습니다.

Utils/RelayCommand.cs

C#

// SAgentM.App/Utils/RelayCommand.cs
using System;
using System.Windows.Input;

namespace SAgentM.App.Utils
{
    public class RelayCommand : ICommand
    {
        private readonly Action<object> _execute;
        private readonly Predicate<object> _canExecute;

        public RelayCommand(Action<object> execute, Predicate<object> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute(parameter);
        }

        public void Execute(object parameter)
        {
            _execute(parameter);
        }
    }
}
ViewModels/MainViewModel.cs

C#

// SAgentM.App/ViewModels/MainViewModel.cs
using SAgentM.App.Models;
using SAgentM.App.Services;
using SAgentM.App.Utils; // ObservableObject, RelayCommand
using System.Collections.ObjectModel;
using System.Windows.Input;

namespace SAgentM.App.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        private readonly ILoggingService _loggingService;
        private readonly IAgentCoreService _agentCoreService;

        private string _agentStatus = "Stopped";
        public string AgentStatus
        {
            get => _agentStatus;
            set => SetProperty(ref _agentStatus, value);
        }

        private bool _isAgentRunning;
        public bool IsAgentRunning
        {
            get => _isAgentRunning;
            set
            {
                if (SetProperty(ref _isAgentRunning, value))
                {
                    // IsAgentRunning이 변경되면 Command들의 CanExecute 상태 갱신 요청
                    ((RelayCommand)StartAgentCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)StopAgentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public ObservableCollection<LogEntry> LogEntries => _loggingService.LogEntries;

        public ICommand StartAgentCommand { get; }
        public ICommand StopAgentCommand { get; }

        public MainViewModel(ILoggingService loggingService, IAgentCoreService agentCoreService)
        {
            _loggingService = loggingService;
            _agentCoreService = agentCoreService;

            StartAgentCommand = new RelayCommand(ExecuteStartAgent, CanExecuteStartAgent);
            StopAgentCommand = new RelayCommand(ExecuteStopAgent, CanExecuteStopAgent);

            UpdateAgentStatus(); // 초기 상태 설정
            _loggingService.Info("SAgentM UI 초기화 완료.");
        }

        private bool CanExecuteStartAgent(object parameter) => !_agentCoreService.IsRunning;
        private void ExecuteStartAgent(object parameter)
        {
            _loggingService.Info("에이전트 시작 명령 수신.");
            try
            {
                _agentCoreService.Start();
            }
            catch (System.Exception ex)
            {
                _loggingService.Error("에이전트 시작 중 오류 발생.", ex);
            }
            finally
            {
                UpdateAgentStatus();
            }
        }

        private bool CanExecuteStopAgent(object parameter) => _agentCoreService.IsRunning;
        private void ExecuteStopAgent(object parameter)
        {
            _loggingService.Info("에이전트 중지 명령 수신.");
            try
            {
                _agentCoreService.Stop();
            }
            catch (System.Exception ex)
            {
                _loggingService.Error("에이전트 중지 중 오류 발생.", ex);
            }
            finally
            {
                UpdateAgentStatus();
            }
        }

        private void UpdateAgentStatus()
        {
            IsAgentRunning = _agentCoreService.IsRunning;
            AgentStatus = _agentCoreService.IsRunning ? "Running" : "Stopped";
            // 추가적인 상태 (Error 등)는 AgentCoreService에서 이벤트를 통해 전달받아 처리 가능
        }

        // 애플리케이션 종료 시 호출될 메서드 (AgentCoreService의 리소스 정리)
        public void Cleanup()
        {
            _loggingService.Info("애플리케이션 종료 절차 시작. 에이전트 중지 시도.");
            ExecuteStopAgent(null); // 에이전트 중지
        }
    }

    // RelayCommand 클래스에 CanExecuteChanged 이벤트를 수동으로 발생시키는 메서드 추가
    // (ObservableObject와 같은 파일에 있거나, RelayCommand 파일에 직접 추가)
    public static class RelayCommandExtensions
    {
        public static void RaiseCanExecuteChanged(this RelayCommand command)
        {
            CommandManager.InvalidateRequerySuggested();
        }
    }
}
MainViewModel.cs 수정 사항:

RelayCommandExtensions 클래스를 추가하여 RelayCommand의 CanExecuteChanged를 명시적으로 호출할 수 있는 RaiseCanExecuteChanged 확장 메서드를 만들었습니다. 이는 IsAgentRunning 속성이 변경될 때 버튼의 활성화 상태를 즉시 갱신하기 위함입니다.
IsAgentRunning 속성의 setter에서 RaiseCanExecuteChanged()를 호출합니다.
MainWindow.xaml

XML

<Window x:Class="SAgentM.App.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SAgentM.App"
        xmlns:viewModels="clr-namespace:SAgentM.App.ViewModels"
        mc:Ignorable="d"
        Title="SAgentM - Agent Monitoring" Height="450" Width="800"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,10">
            <Button Content="에이전트 시작" Command="{Binding StartAgentCommand}" Width="120" Margin="0,0,5,0"/>
            <Button Content="에이전트 중지" Command="{Binding StopAgentCommand}" Width="120"/>
        </StackPanel>

        <ListView Grid.Row="1" ItemsSource="{Binding LogEntries}" Margin="0,0,0,5" HorizontalContentAlignment="Stretch">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <TextBlock Grid.Column="0" Text="{Binding Timestamp, StringFormat='[{0:HH:mm:ss}]'}" FontWeight="SemiBold" Margin="0,0,5,0"/>
                        <TextBlock Grid.Column="1" Text="{Binding Level, StringFormat='[{0}]'}" Margin="0,0,5,0">
                            <TextBlock.Style>
                                <Style TargetType="TextBlock">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Level}" Value="Error">
                                            <Setter Property="Foreground" Value="Red"/>
                                            <Setter Property="FontWeight" Value="Bold"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding Level}" Value="Warning">
                                            <Setter Property="Foreground" Value="OrangeRed"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding Level}" Value="Info">
                                            <Setter Property="Foreground" Value="DarkGreen"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <TextBlock Grid.Column="2" Text="{Binding Message}" TextWrapping="Wrap"/>
                    </Grid>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <StatusBar Grid.Row="2">
            <StatusBarItem>
                <TextBlock Text="{Binding AgentStatus, StringFormat='Agent Status: {0}'}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
MainWindow.xaml.cs

C#

// SAgentM.App/MainWindow.xaml.cs
using SAgentM.App.Services;
using SAgentM.App.ViewModels;
using System.ComponentModel;
using System.Windows;

namespace SAgentM.App
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // 서비스 및 ViewModel 인스턴스 생성 및 주입
            // 실제 애플리케이션에서는 DI 컨테이너를 사용하는 것이 좋음
            ILoggingService loggingService = new LoggingService();
            IAgentCoreService agentCoreService = new AgentCoreService(loggingService);
            _viewModel = new MainViewModel(loggingService, agentCoreService);
            
            DataContext = _viewModel;

            // 애플리케이션 시작 시 자동으로 에이전트 시작 (선택 사항)
            // if (_viewModel.StartAgentCommand.CanExecute(null))
            // {
            //    _viewModel.StartAgentCommand.Execute(null);
            // }
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            // ViewModel을 통해 리소스 정리 (AgentCoreService 중지 등)
            _viewModel?.Cleanup();
        }
    }
}
App.xaml (대부분 기본 생성된 내용 유지)

XML

<Application x:Class="SAgentM.App.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SAgentM.App"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>
App.xaml.cs (대부분 기본 생성된 내용 유지)

C#

// SAgentM.App/App.xaml.cs
using System.Windows;

namespace SAgentM.App
{
    /// <summary>
    /// App.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class App : Application
    {
    }
}
여기까지가 SAgentM.App의 UI 및 ViewModel 관련 코드입니다.
MainWindow.xaml.cs의 Window_Loaded에서는 서비스와 ViewModel을 직접 생성하여 주입하고 있으며, Window_Closing 이벤트에서는 ViewModel의 Cleanup 메서드를 호출하여 AgentCoreService가 안전하게 중지되도록 처리합니다.
