using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class RackSystemManager : MonoBehaviour
{
    [Header("핵심 연결 대상")]
    public Transform rackContainer;

    [Header("머티리얼")]
    public Material defaultLampMaterial;
    public Material litLampMaterial;

    [Header("애니메이션")]
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;

    void Start()
    {
        InitializeAllRacks();
    }

    // ★★★ 랙 이름 대신 순서로 인식하도록 초기화 로직 전면 수정 ★★★
    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        StringBuilder validBarcodes = new StringBuilder("--- 복사해서 사용 가능한 전체 유효 바코드 목록 ---\n");

        int rackCounterA = 1; // A열 랙의 순번 카운터
        int rackCounterB = 1; // B열 랙의 순번 카운터

        // rackContainer의 모든 자식 랙을 순회
        foreach (Transform rackParent in rackContainer)
        {
            string standardizedRackID; // "A_01", "B_12" 와 같이 표준화될 ID

            // 실제 오브젝트 이름이 'A'로 시작하면 A열로 간주
            if (rackParent.name.StartsWith("A"))
            {
                standardizedRackID = $"A_{rackCounterA:02d}";
                rackCounterA++;
            }
            // 실제 오브젝트 이름이 'B'로 시작하면 B열로 간주
            else if (rackParent.name.StartsWith("B"))
            {
                standardizedRackID = $"B_{rackCounterB:02d}";
                rackCounterB++;
            }
            else
            {
                continue; // A나 B로 시작하지 않으면 건너뜀
            }

            // 해당 랙 하위의 모든 렌더러(부품)를 찾음
            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name; // 부품의 로컬 이름 (예: "Lamp_C05")
                string globalKey = $"{standardizedRackID}_{localName}"; // 최종 키 생성 (예: "A_01_Lamp_C05")

                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                    {
                        lampRenderers.Add(globalKey, rend);
                        if (defaultLampMaterial != null) rend.material = defaultLampMaterial;
                    }
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                    {
                        maskObjects.Add(globalKey, rend.gameObject);
                        
                        string floor = localName.Substring(5, 1);
                        string slotNum = localName.Substring(6, 2);
                        // 바코드 형식으로 조합하여 디버그 목록에 추가
                        validBarcodes.AppendLine($"MMF10{standardizedRackID.Replace("_", "")}{floor}{slotNum}");
                    }
                }
            }
        }
        
        Debug.Log(validBarcodes.ToString());
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    // 바코드 처리 로직은 이제 표준화된 키를 사용하므로 수정할 필요가 없습니다.
    public void ProcessBarcode(string barcode)
    {
        Debug.Log($"입력된 바코드 처리 시작: {barcode}");
        ResetPreviousSlot();

        if (string.IsNullOrEmpty(barcode) || barcode.Length != 11 || !barcode.StartsWith("MMF10"))
        {
            Debug.LogError($"잘못된 바코드 형식입니다: {barcode}. (11자리, 예: MMF10A12C05)");
            return;
        }

        string row = barcode.Substring(5, 1);
        string rackNum = barcode.Substring(6, 2);
        string floor = barcode.Substring(8, 1);
        string slotNum = barcode.Substring(9, 2);

        string rackID = $"{row}_{rackNum}";
        
        string lampKey = $"{rackID}_Lamp_{floor}{slotNum}";
        string maskKey = $"{rackID}_Mask_{floor}{slotNum}";
        
        if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
        {
            if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
        }
        else
        {
            Debug.LogWarning($"경고: {lampKey} 이름의 램프를 찾지 못했습니다.");
        }

        if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
        else
        {
            Debug.LogWarning($"경고: {maskKey} 이름의 마스크를 찾지 못했습니다.");
        }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;

        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 

        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }

        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;

        if (rb != null) rb.isKinematic = false;
    }
    
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessBarcode(text.ToUpper());
        }
    }
}