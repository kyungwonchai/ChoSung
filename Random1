래는 요청하신 기능을 포함한 코드입니다. 모든 비동기 작업에 try-catch 블록을 추가하고, 에러 메시지를 두 번째 ListBox에 빨간색 글씨로 추가하며, 첫 번째 ListBox에서도 에러 메시지를 빨간색 글씨로 표시합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Communication" Height="600" Width="800" Closing="Window_Closing">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <!-- Title TextBlock with Shadow Effect -->
        <TextBlock Grid.Row="0" Text="ProcessAgent" FontSize="20" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" ToolTip="This application communicates with the PLC.">
            <TextBlock.Effect>
                <DropShadowEffect Color="Gray" BlurRadius="4"/>
            </TextBlock.Effect>
        </TextBlock>

        <!-- Current Time TextBlock -->
        <TextBlock Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="10" Name="CurrentTimeTextBlock" FontSize="14"/>

        <!-- Control Buttons and Input -->
        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="10">
            <ComboBox Name="ComboBoxPorts" Width="200" Height="30" SelectionChanged="ComboBoxPorts_SelectionChanged" ToolTip="Select the COM port to connect to the PLC." HorizontalContentAlignment="Center"/>
            <ComboBox Name="ComboBoxValues" Width="100" Height="30" Margin="10,0,0,0" ToolTip="Select the value to send to D2300." HorizontalContentAlignment="Center">
                <ComboBoxItem Content="0"/>
                <ComboBoxItem Content="1"/>
                <ComboBoxItem Content="2"/>
                <ComboBoxItem Content="3"/>
                <ComboBoxItem Content="4"/>
            </ComboBox>
            <Button Name="BtnSendValue" Content="Send Value" Width="100" Height="30" Margin="10,0,0,0" Click="BtnSendValue_Click" ToolTip="Click to send the selected value to D2300."/>
            <Button Name="BtnSendData" Content="Send Data" Width="200" Height="50" Margin="10,0,0,0" Click="BtnSendData_Click" ToolTip="Click to send PO information to the PLC."/>
            <TextBox Name="TxtPOInfo" Width="200" Height="30" Margin="10,0,0,0" ToolTip="Enter the PO information to send to the PLC."/>
        </StackPanel>

        <!-- PO Information Label -->
        <Label Grid.Row="2" Content="Enter PO Information" Margin="10,10,0,0" HorizontalAlignment="Left"/>

        <!-- Log ListBox -->
        <ListBox Grid.Row="3" Name="LogListBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10" ToolTip="Displays log messages for PLC communication."/>
        
        <!-- Error ListBox -->
        <ListBox Grid.Row="4" Name="ErrorListBox" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="10" ToolTip="Displays error messages for PLC communication."/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;
        private const int MaxRetries = 3; // 에러 발생 시 최대 재시도 횟수
        private DispatcherTimer timer;
        private string iniFilePath = "setup.ini";
        private DispatcherTimer clockTimer;

        public MainWindow()
        {
            InitializeComponent();
            LoadAvailablePorts();
            LoadSelectedPort();
            InitializeTimer();
            InitializeClock();
        }

        // 사용 가능한 COM 포트를 ComboBox에 로드
        private void LoadAvailablePorts()
        {
            var ports = SerialPort.GetPortNames();
            ComboBoxPorts.ItemsSource = ports;
        }

        // 이전에 선택된 포트를 setup.ini에서 로드
        private void LoadSelectedPort()
        {
            if (File.Exists(iniFilePath))
            {
                var portName = File.ReadAllText(iniFilePath).Trim();
                if (!string.IsNullOrEmpty(portName) && ComboBoxPorts.Items.Contains(portName))
                {
                    ComboBoxPorts.SelectedItem = portName;
                    InitializeSerialPort(portName);
                }
            }
        }

        // 시리얼 포트를 초기화하고 열기
        private void InitializeSerialPort(string portName)
        {
            serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
            serialPort.DataReceived += SerialPort_DataReceived;
            try
            {
                serialPort.Open();
                LogMessage("Serial port opened successfully.");
            }
            catch (Exception ex)
            {
                LogError($"Error opening serial port: {ex.Message}");
            }
        }

        // 타이머 초기화
        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        // 시계 타이머 초기화
        private void InitializeClock()
        {
            clockTimer = new DispatcherTimer();
            clockTimer.Interval = TimeSpan.FromSeconds(1);
            clockTimer.Tick += (s, e) =>
            {
                CurrentTimeTextBlock.Text = DateTime.Now.ToString("HH:mm:ss");
            };
            clockTimer.Start();
        }

        // 주기적으로 실행되는 타이머 이벤트 핸들러
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 주기적으로 상태 체크 로직을 여기에 추가할 수 있습니다.
        }

        // ComboBox에서 포트를 선택하면 실행되는 이벤트 핸들러
        private void ComboBoxPorts_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxPorts.SelectedItem != null)
            {
                var selectedPort = ComboBoxPorts.SelectedItem.ToString();
                InitializeSerialPort(selectedPort);
                File.WriteAllText(iniFilePath, selectedPort);
            }
        }

        // "Send Value" 버튼 클릭 이벤트 핸들러
        private async void BtnSendValue_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ComboBoxValues.SelectedItem != null)
                {
                    int selectedValue = int.Parse((ComboBoxValues.SelectedItem as ComboBoxItem).Content.ToString());
                    await Task.Run(() =>
                    {
                        SendMessageWithRetry(() => SendDataToPLC(2300, selectedValue), MaxRetries);
                        Dispatcher.Invoke(() => LogMessage($"Value {selectedValue} sent to D2300."));
                    });
                }
                else
                {
                    LogError("No value selected to send to D2300.");
                }
            }
            catch (Exception ex)
            {
                LogError($"Error in BtnSendValue_Click: {ex.Message}");
            }
        }

        // "Send Data" 버튼 클릭 이벤트 핸들러
        private async void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string poInfo = string.Empty;

                // UI 스레드에서 TxtPOInfo.Text 값을 읽음
                Dispatcher.Invoke(() =>
                {
                    poInfo = TxtPOInfo.Text;
                });

                await Task.Run(() =>
                {
                    SendMessageWithRetry(() => SendDataToPLC(2300, 1), MaxRetries); // 예: 신규 LOT 배출
                    SendMessageWithRetry(() => SendPOInfoToPLC(poInfo), MaxRetries);
                });

                Dispatcher.Invoke(() => LogMessage("Data sent successfully!"));
            }
            catch (Exception ex)
            {
                LogError($"Error in BtnSendData_Click: {ex.Message}");
            }
        }

        // PLC로 데이터를 전송하는 메소드
        private void SendDataToPLC(int address, int value)
        {
            try
            {
                string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
                byte[] messageBytes = Encoding.ASCII.GetBytes(message);
                serialPort.Write(messageBytes, 0, messageBytes.Length);
                Dispatcher.Invoke(() => LogMessage($"Sent data to PLC: {message.Trim()}"));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error sending data to PLC: {ex.Message}"));
            }
        }

        // PO 정보를 PLC로 전송하는 메소드
        private void SendPOInfoToPLC(string poInfo)
        {
            try
            {
                for (int i = 0; i < poInfo.Length; i += 2)
                {
                    string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                    int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                    SendDataToPLC(2310 + (i / 2), value);
                }
                Dispatcher.Invoke(() => LogMessage($"Sent PO info to PLC: {poInfo}"));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error sending PO info to PLC: {ex.Message}"));
            }
        }

        // 메시지를 재시도 로직과 함께 전송하는 메소드
        private void SendMessageWithRetry(Action sendMessage, int maxRetries)
        {
            int attempts = 0;
            bool success = false;
            while (attempts < maxRetries && !success)
            {
                try
                {
                    sendMessage();
                    success = true;
                }
                catch (Exception ex)
                {
                    attempts++;
                    Dispatcher.Invoke(() => LogError($"Error sending message (Attempt {attempts}): {ex.Message}"));
                    if (attempts >= maxRetries)
                    {
                        Dispatcher.Invoke(() => LogError("Max retry attempts reached. Giving up."));
                    }
                    else
                    {
                        Thread.Sleep(1000); // 잠시 대기 후 재시도
                    }
                }
            }
        }

        // 시리얼 포트 데이터 수신 이벤트 핸들러
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string receivedData = serialPort.ReadExisting();
                Dispatcher.Invoke(() => LogMessage($"Received data from PLC: {receivedData}"));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error receiving data from PLC: {ex.Message}"));
            }
        }

        // 로그 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logMessage = $"{timestamp}: {message}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = logMessage;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);
            });

            // 로그를 파일로 저장
            using (StreamWriter file = new StreamWriter("log.txt", true))
            {
                file.WriteLine(logMessage);
            }
        }

        // 에러 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogError(string error)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string errorMessage = $"{timestamp}: {error}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = errorMessage;
                item.Foreground = Brushes.Red;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);

                ListBoxItem errorItem = new ListBoxItem();
                errorItem.Content = errorMessage;
                errorItem.Foreground = Brushes.Red;
                ErrorListBox.Items.Add(errorItem);
                ErrorListBox.ScrollIntoView(errorItem);
            });

            // 로그를 파일로 저장
            using (StreamWriter file = new StreamWriter("error_log.txt", true))
            {
                file.WriteLine(errorMessage);
            }
        }

        // 윈도우가 닫힐 때 타이머를 중지하고 시리얼 포트를 닫는 메소드
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            timer.Stop();
            clockTimer.Stop();
            if (serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }
    }
}
주요 수정 사항:
비동기 작업의 예외 처리: 모든 비동기 작업 내에 try-catch 블록을 추가하여 예외가 발생하더라도 프로그램이 종료되지 않도록 했습니다.
에러 메시지 로깅: 에러 메시지를 두 번째 ListBox에 빨간색 글씨로 추가하고, 첫 번째 ListBox에서도 빨간색 글씨로 표시하도록 했습니다.
로그와 에러를 별도로 파일에 저장: 정상 로그는 log.txt에, 에러 로그는 error_log.txt에 저장하도록 했습니다.
이제 프로그램이 실행되면, 에러가 발생하더라도 프로그램이 종료되지 않고, 에러 메시지는 두 번째 ListBox에 빨간색 글씨로 