BSM 또는 SM으로 시작하는 폴더의 내부에 JPG 파일을 포함해서 1MB 이하의 파일이 있을 때, 그 폴더와 하위 폴더를 통째로 삭제하는 코드를 추가하겠습니다. 이 작업은 3개월이 지난 폴더에 대해서만 수행되며, 로그를 남깁니다.

구현 방법
FileCleaner 클래스: 특정 조건을 만족하는 폴더를 찾아 삭제하는 메서드를 추가합니다.
MainWindow 클래스: 해당 메서드를 호출하여 작업을 수행합니다.
1. FileCleaner.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public class FileCleaner
    {
        private readonly Dispatcher dispatcher;
        private readonly Action<long, string> updateFolderStatistics;
        private readonly Action updateProgressBar;
        private readonly Logger logger;

        public FileCleaner(Dispatcher dispatcher, Action<long, string> updateFolderStatistics, Action updateProgressBar, Logger logger)
        {
            this.dispatcher = dispatcher;
            this.updateFolderStatistics = updateFolderStatistics;
            this.updateProgressBar = updateProgressBar;
            this.logger = logger;
        }

        public void DeleteOldFolders(string rootPath)
        {
            var directories = Directory.GetDirectories(rootPath, "*", SearchOption.AllDirectories)
                .Where(d => (Path.GetFileName(d).StartsWith("BSM") || Path.GetFileName(d).StartsWith("SM")) && Directory.GetCreationTime(d) < DateTime.Now.AddMonths(-3));

            foreach (var dir in directories)
            {
                var files = Directory.GetFiles(dir, "*.*", SearchOption.AllDirectories);
                var smallFiles = files.Where(f => new FileInfo(f).Length <= 1 * 1024 * 1024); // 1MB 이하의 파일

                if (smallFiles.Any(f => Path.GetExtension(f).Equals(".jpg", StringComparison.OrdinalIgnoreCase)))
                {
                    try
                    {
                        Directory.Delete(dir, true);
                        logger.LogDeletionActivity($"폴더 및 하위 폴더 삭제됨: {dir}");
                    }
                    catch (Exception ex)
                    {
                        logger.LogError($"폴더 삭제 중 오류 발생: {dir} - {ex.Message}");
                    }
                }
            }
        }
    }

    public class Logger
    {
        private readonly string logDirectory;

        public Logger(string logDirectory)
        {
            this.logDirectory = logDirectory;
        }

        public void LogDeletionActivity(string message)
        {
            Log("DeletionLog.txt", message);
        }

        public void LogError(string message)
        {
            Log("ErrorLog.txt", message);
        }

        private void Log(string fileName, string message)
        {
            var logPath = Path.Combine(logDirectory, fileName);
            var logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";
            File.AppendAllText(logPath, logMessage + Environment.NewLine);
        }
    }
}
2. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private List<string> _folderPaths;
        private List<Regex> _regexPatterns;
        private DispatcherTimer _timer;
        private DispatcherTimer _countdownTimer;
        private DateTime _nextDeletionTime;
        private bool _isRunning;
        private List<FileCleaner> _fileCleaners;
        private Logger _logger;

        public MainWindow()
        {
            InitializeComponent();
            _folderPaths = new List<string>();
            _regexPatterns = new List<Regex>();
            _fileCleaners = new List<FileCleaner>();
            _logger = new Logger("C:\\logs"); // 로그 디렉터리 설정

            SetupTimers();
        }

        private void SetupTimers()
        {
            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromMinutes(5)
            };
            _timer.Tick += Timer_Tick;

            _countdownTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _countdownTimer.Tick += CountdownTimer_Tick;
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            foreach (var cleaner in _fileCleaners)
            {
                cleaner.UpdateFreeSpace();
                cleaner.UpdateProgressBar();
                cleaner.DeleteOldFolders("D:\\"); // 예시로 D 드라이브 사용
            }
            _nextDeletionTime = DateTime.Now.AddMinutes(5);
        }

        private void CountdownTimer_Tick(object sender, EventArgs e)
        {
            TimeSpan timeRemaining = _nextDeletionTime - DateTime.Now;
            if (timeRemaining < TimeSpan.Zero)
            {
                timeRemaining = TimeSpan.Zero;
            }
            txtTimeRemaining.Text = $"다음 삭제까지 남은 시간: {timeRemaining.Hours}시간 {timeRemaining.Minutes}분 {timeRemaining.Seconds}초";
        }

        private void btnApplyFolders_Click(object sender, RoutedEventArgs e)
        {
            _folderPaths = cbFolderPaths.Text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries).Take(5).ToList();
            CheckFolderPaths();
            CreateFileCleaners();
        }

        private void CreateFileCleaners()
        {
            _fileCleaners.Clear();
            foreach (var path in _folderPaths)
            {
                var cleaner = new FileCleaner(Dispatcher, UpdateFolderStatistics, UpdateProgressBar, _logger);
                _fileCleaners.Add(cleaner);
            }
        }

        private void btnToggleStartStop_Click(object sender, RoutedEventArgs e)
        {
            if (_isRunning)
            {
                StopTimers();
            }
            else
            {
                if (_folderPaths.Count == 0 || _regexPatterns.Count == 0)
                {
                    MessageBox.Show("폴더와 정규식을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                StartTimers();
            }
            _isRunning = !_isRunning;
            btnToggleStartStop.Content = _isRunning ? "Stop" : "Start";
        }

        private void StartTimers()
        {
            _timer.Start();
            _countdownTimer.Start();
            _nextDeletionTime = DateTime.Now.AddMinutes(5);
        }

        private void StopTimers()
        {
            _timer.Stop();
            _countdownTimer.Stop();
            txtTimeRemaining.Text = string.Empty;
        }

        private void CheckFolderPaths()
        {
            var validPaths = _folderPaths.Where(Directory.Exists).ToList();
            _folderPaths = validPaths;
            cbFolderPaths.ItemsSource = validPaths;
        }

        // 폴더 통계를 업데이트하는 메서드 (예시)
        private void UpdateFolderStatistics(long size, string path)
        {
            // 통계 업데이트 로직 구현
        }

        // 프로그래스바를 업데이트하는 메서드 (예시)
        private void UpdateProgressBar()
        {
            // 프로그래스바 업데이트 로직 구현
        }
    }
}
설명
FileCleaner 클래스에 DeleteOldFolders 메서드를 추가하여 BSM 또는 SM으로 시작하고 3개월이 지난 폴더를 삭제합니다.
MainWindow 클래스에서 Timer_Tick 메서드 내에 DeleteOldFolders 메서드를 호출하여 주기적으로 폴더를 검사하고 삭제합니다.
Logger 클래스를 사용하여 삭제 작업과 오류를 로그로 남깁니다.
이제 프로그램은 주기적으로 BSM 또는 SM으로 시작하는 폴더를 검사하고, 조건에 맞는 폴더를 삭제합니다. 로그는 지정된 경로에