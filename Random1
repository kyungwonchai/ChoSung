서, 입력이 3분 동안 없으면 자동으로 포커스를 해제하고, 남은 시간을 실시간으로 표시하는 기능을 구현할 수 있습니다. 이를 위해 타이머를 사용하여 입력이 없는 시간을 추적하고, 3분이 지나면 포커스를 해제하는 로직을 추가할 수 있습니다.

1. XAML 수정
텍스트 박스 옆에 남은 시간을 표시할 TextBlock을 추가합니다.

xml
코드 복사
<dxg:GridControl Name="gridControlReports" AutoGenerateColumns="None" Grid.Row="1">
    <dxg:GridControl.View>
        <dxg:TableView ShowGroupPanel="False" AutoWidth="False"/>
    </dxg:GridControl.View>
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Area" Header="구역" Width="100" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" IsReadOnly="True"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="Line" Header="라인" Width="100" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" IsReadOnly="True"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="DayShift" Header="주" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" LostFocus="TextBox_LostFocus" GotFocus="TextBox_GotFocus"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="EveningShift" Header="후" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" LostFocus="TextBox_LostFocus" GotFocus="TextBox_GotFocus"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="NightShift" Header="야" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" LostFocus="TextBox_LostFocus" GotFocus="TextBox_GotFocus"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="CommonReport" Header="공통인계사항" HorizontalHeaderContentAlignment="Center">
            <dxg:GridColumn.EditSettings>
                <dxe:TextEditSettings HorizontalContentAlignment="Center" LostFocus="TextBox_LostFocus" GotFocus="TextBox_GotFocus"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>
<TextBlock Name="RemainingTimeTextBlock" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" FontSize="16"/>
2. C# 코드 수정
C# 코드에서 타이머를 사용하여 남은 시간을 계산하고, 타이머가 종료되면 포커스를 해제하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Threading;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;

namespace ShiftReportApp
{
    public partial class ShiftReportPage : Page
    {
        private string connectionString;
        private DispatcherTimer inputTimer;
        private TimeSpan remainingTime;
        private const int MaxInactivityMinutes = 3;

        public ShiftReportPage(string connectionString)
        {
            InitializeComponent();
            this.connectionString = connectionString;
            Loaded += ShiftReportPage_Loaded;

            inputTimer = new DispatcherTimer();
            inputTimer.Interval = TimeSpan.FromSeconds(1);
            inputTimer.Tick += OnInputTimerTick;
        }

        private void ShiftReportPage_Loaded(object sender, RoutedEventArgs e)
        {
            LoadTodayReport(null, null);
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = GetShiftStartDateTime(DateTime.Now);
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = GetShiftStartDateTime(DateTime.Now).AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private DateTime GetShiftStartDateTime(DateTime currentDateTime)
        {
            DateTime shiftStartDateTime;

            if (currentDateTime.Hour < 7)
            {
                // If the current time is before 7 AM, use the previous day's 7 AM as the shift start
                shiftStartDateTime = currentDateTime.Date.AddDays(-1).AddHours(7);
            }
            else
            {
                // If the current time is 7 AM or after, use today's 7 AM as the shift start
                shiftStartDateTime = currentDateTime.Date.AddHours(7);
            }

            return shiftStartDateTime;
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                AddEmptyReportsForDate(date);
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Date", date);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dataTable);
                }
            }

            gridControlReports.ItemsSource = dataTable.DefaultView;
        }

        private void AddEmptyReportsForDate(string date)
        {
            DataTable linesTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLines", conn);
                cmd.CommandType = CommandType.StoredProcedure;

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(linesTable);
            }

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                foreach (DataRow row in linesTable.Rows)
                {
                    string area = row["Area"].ToString();
                    string line = row["Line"].ToString();

                    SqlCommand cmd = new SqlCommand("SaveReport", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Date", date);
                    cmd.Parameters.AddWithValue("@Area", area);
                    cmd.Parameters.AddWithValue("@Line", line);
                    cmd.Parameters.AddWithValue("@DayShift", "");
                    cmd.Parameters.AddWithValue("@EveningShift", "");
                    cmd.Parameters.AddWithValue("@NightShift", "");
                    cmd.Parameters.AddWithValue("@CommonReport", "");
                    cmd.Parameters.AddWithValue("@IPAddress", GetLocalIPAddress());
                    cmd.ExecuteNonQuery();
                }
            }
        }

        private void TextBox_GotFocus(object sender, RoutedEventArgs e)
        {
            ResetInputTimer();
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            DataRowView row = (DataRowView)gridControlReports.GetRow(gridControlReports.View.FocusedRowHandle);
            string area = row["Area"].ToString();
            string line = row["Line"].ToString();
            string date = row["Date"].ToString();
            string shiftType = "";

            if (textBox.Name.Contains("DayShift"))
            {
                shiftType = "주";
            }
            else if (textBox.Name.Contains("EveningShift"))
            {
                shiftType = "후";
            }
            else if (textBox.Name.Contains("NightShift"))
            {
                shiftType = "야";
            }
            else if (textBox.Name.Contains("CommonReport"))
            {
                shiftType = "공통";
            }

            string ipAddress = GetLocalIPAddress();
            SaveReport(date, area, line, shiftType, report, ipAddress);
            StopInputTimer();
        }

        private void ResetInputTimer()
        {
            remainingTime = TimeSpan.FromMinutes(MaxInactivityMinutes);
            inputTimer.Start();
        }

        private void StopInputTimer()
        {
            inputTimer.Stop();
            RemainingTimeTextBlock.Text = string.Empty;
        }

        private void OnInputTimerTick(object sender, EventArgs e)
        {
            remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
            RemainingTimeTextBlock.Text = $"남은 시간: {remainingTime.Minutes}:{remainingTime.Seconds}";

            if (remainingTime <= TimeSpan.Zero)
            {
                inputTimer.Stop();
                Keyboard.ClearFocus();
                RemainingTimeTextBlock.Text = "포커스가 해제되었습니다.";
            }
        }

        private void SaveReport(string date, string area, string line, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Area", area);
                cmd.Parameters.AddWithValue("@Line", line);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();

                SaveLog(date, area, line, shiftType, report, ipAddress);
            }
        }

        private void SaveLog(string date, string area, string line, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveLog", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Area", area);
                cmd.Parameters.AddWithValue("@Line", line);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);
                cmd.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnSearchReports(object sender, RoutedEventArgs e)
        {
            DateTime? startDate = startDatePicker.DateTime;
            DateTime? endDate = endDatePicker.DateTime;

            if (startDate.HasValue && endDate.HasValue)
            {
                LoadSearchReports(startDate.Value.ToString("yyyy-MM-dd"), endDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReports(string startDate, string endDate)
        {
            DataTable searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDateRange", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@StartDate", startDate);
                cmd.Parameters.AddWithValue("@EndDate", endDate);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            string searchText = logSearchTextBox.Text.Trim();
            if (!string.IsNullOrEmpty(searchText))
            {
                LoadLogReport(searchText);
            }
        }

        private void OnLogSearchKeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                OnLogSearch(sender, e);
            }
        }

        private void LoadLogReport(string searchText)
        {
            DataTable logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("SearchLogs", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@SearchText", searchText);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            gridControlLog.ItemsSource = logTable.DefaultView;
        }
    }
}
주요 변경 사항 요약:
타이머 기능 추가: DispatcherTimer를 사용해 입력이 없는 시간을 추적합니다. 3분 동안 입력이 없으면 포커스가 자동으로 해제됩니다.
실시간 남은 시간 표시: TextBlock을 사용해 남은 시간을 실시간으로 표시합니다.
포커스 이벤트 처리: TextBox_GotFocus 이벤트와 TextBox_LostFocus 이벤트를 통해 입력 중 타이머를 초기화하고, 입력이 없으면 타이머를 종료합니다.
이 코드는 입력 중이 아닐 때 3분 후 자동으로 포커스를 해제하고, 남은 시간을 실시간으로 표시하는 기능을 포함합니다. 추가적인 문제가 발생하면 알려주세요