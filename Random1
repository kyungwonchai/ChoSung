 버튼에 선택된 표시를 추가하는 방법을 설명드리겠습니다. 여기서는 클릭된 버튼의 테두리를 노란색으로 변경하는 예시를 보여드리겠습니다.

XAML 코드 수정
버튼에 스타일을 추가하여 클릭 시 테두리 색상을 변경하도록 설정합니다.

xml
코드 복사
<Page x:Class="ShiftReportApp.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
      xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
      xmlns:local="clr-namespace:ShiftReportApp"
      Title="Shift Report Manager">
    <Page.Resources>
        <Style x:Key="DefaultButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="LightGray"/>
            <Setter Property="BorderBrush" Value="Gray"/>
            <Setter Property="BorderThickness" Value="1"/>
        </Style>
        <Style x:Key="SelectedButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="Yellow"/>
            <Setter Property="BorderBrush" Value="Orange"/>
            <Setter Property="BorderThickness" Value="2"/>
        </Style>
    </Page.Resources>
    <Grid>
        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="구역 A" Name="ButtonAreaA" Click="LoadAreaA" Style="{StaticResource DefaultButtonStyle}"/>
            <Button Content="구역 B" Name="ButtonAreaB" Click="LoadAreaB" Style="{StaticResource DefaultButtonStyle}"/>
        </StackPanel>
        <Frame Name="ContentFrame" NavigationUIVisibility="Hidden" Grid.Row="1"/>
    </Grid>
</Page>
C# 코드 수정 (MainPage.xaml.cs)
버튼 클릭 시 스타일을 변경하는 이벤트 핸들러를 추가합니다.

csharp
코드 복사
using System.Windows;
using System.Windows.Controls;

namespace ShiftReportApp
{
    public partial class MainPage : Page
    {
        public MainPage()
        {
            InitializeComponent();
        }

        private void LoadAreaA(object sender, RoutedEventArgs e)
        {
            SetButtonStyle(ButtonAreaA);
            LoadAreaPage("your_connection_string_for_A");
        }

        private void LoadAreaB(object sender, RoutedEventArgs e)
        {
            SetButtonStyle(ButtonAreaB);
            LoadAreaPage("your_connection_string_for_B");
        }

        private void SetButtonStyle(Button selectedButton)
        {
            ButtonAreaA.Style = (Style)FindResource("DefaultButtonStyle");
            ButtonAreaB.Style = (Style)FindResource("DefaultButtonStyle");

            selectedButton.Style = (Style)FindResource("SelectedButtonStyle");
        }

        private void LoadAreaPage(string connectionString)
        {
            var shiftReportPage = new ShiftReportPage(connectionString);
            ContentFrame.Navigate(shiftReportPage);
        }
    }
}
위의 코드는 버튼 클릭 시 해당 버튼의 스타일을 변경하여 사용자가 선택한 구역을 시각적으로 표시합니다. SetButtonStyle 메서드는 클릭된 버튼의 스타일을 변경하고, 다른 버튼들은 기본 스타일로 돌아가도록 설정합니다.

이렇게 하면 구역 A와 구역 B 버튼을 클릭할 때 각각의 버튼에 시각적인 피드백을 제공할 수 있습니다. 추가적인 문