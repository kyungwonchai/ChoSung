알겠습니다. 아래는 이전 WPF 과제(스캐너 포트 설정 및 중계 기능)과 현재 요구사항(소켓 서버 및 QR 코드 생성 기능)을 통합한 ScanValueTrans 프로그램의 전체 코드입니다. 각 클래스는 주어진 요구사항을 충족하도록 설계되었으며, 주석을 상세히 추가하여 코드의 작동 방식을 설명하였습니다.

1. MainWindow.xaml
WPF 애플리케이션의 메인 창 UI 정의입니다.

xml
코드 복사
<Window x:Class="ScanValueTrans.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="ScanValueTrans" Height="600" Width="1000">
    <Grid>
        <!-- IP 주소와 포트 설정 -->
        <TextBlock Text="IP Address:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,10,0,0"/>
        <TextBlock Name="IpAddressTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="100,10,0,0" FontWeight="Bold"/>

        <TextBlock Text="Port:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="250,10,0,0"/>
        <ComboBox Name="PortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="300,10,0,0" SelectionChanged="PortComboBox_SelectionChanged"/>
        
        <!-- QR 코드 표시 -->
        <Image Name="QrCodeImage" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="200" Margin="420,10,0,0"/>

        <!-- 스캐너 포트 설정 -->
        <TextBlock Text="스캐너 포트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,230,0,0"/>
        <ComboBox Name="ScannerPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="100,230,0,0" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="260,230,0,0" Click="ClearScannerPortSelection_Click" Tag="{Binding ElementName=ScannerPortComboBox}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="300,230,0,0"/>
        <ComboBox Name="ScannerBaudRateComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="400,230,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="510,230,0,0"/>
        <ComboBox Name="ScannerParityComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,230,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,230,0,0"/>
        <ComboBox Name="ScannerDataBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,230,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,230,0,0"/>
        <ComboBox Name="ScannerStopBitsComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,230,0,0"/>
        
        <!-- 보낼 포트 설정 -->
        <TextBlock Text="보낼 포트 1:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,270,0,0"/>
        <ComboBox Name="TargetPortComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="150" Margin="100,270,0,0" SelectionChanged="TargetPortComboBox_SelectionChanged"/>
        <Button Content="X" HorizontalAlignment="Left" VerticalAlignment="Top" Width="25" Margin="260,270,0,0" Click="ClearTargetPortSelection_Click" Tag="{Binding ElementName=TargetPortComboBox1}"/>

        <TextBlock Text="보드레이트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="300,270,0,0"/>
        <ComboBox Name="TargetBaudRateComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="400,270,0,0"/>
        
        <TextBlock Text="패리티:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="510,270,0,0"/>
        <ComboBox Name="TargetParityComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="600,270,0,0"/>
        
        <TextBlock Text="데이터 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="710,270,0,0"/>
        <ComboBox Name="TargetDataBitsComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="800,270,0,0"/>
        
        <TextBlock Text="스톱 비트:" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="910,270,0,0"/>
        <ComboBox Name="TargetStopBitsComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="980,270,0,0"/>

        <!-- 추가 포트 설정은 동일하게 반복됩니다. -->
        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="960" Height="150" Margin="10,310,0,0"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
이 파일은 프로그램의 핵심 로직을 담고 있습니다. UI 이벤트와 주요 동작들을 처리합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ZXing; // QR 코드 생성 라이브러리
using System.IO;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            // 설정 관리 클래스 초기화
            settingsManager = SettingsManager.Instance;

            // IP 주소 가져오기 및 표시
            string ipAddress = GetLocalIPAddress();
            IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

            // 포트 선택 콤보박스 초기화
            for (int i = 20000; i <= 65000; i++)
            {
                PortComboBox.Items.Add(i.ToString());
            }

            // 포트 및 설정 불러오기
            PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
            PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

            // 스캐너 및 타겟 포트 설정 초기화
            InitializePortSettings();
            LoadLastUsedPorts();

            // 소켓 서버 초기화
            serialPortManager = new SerialPortManager();
            socketServer = SocketServer.Instance;
            socketServer.DataReceived += OnSocketDataReceived;

            // QR 코드 생성
            GenerateQRCode(ipAddress, PortComboBox.SelectedItem.ToString());
        }

        private string GetLocalIPAddress()
        {
            string localIP = "";
            foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
            {
                if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    localIP = ip.ToString();
                }
            }
            return localIP;
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (PortComboBox.SelectedItem != null)
            {
                string selectedPort = PortComboBox.SelectedItem.ToString();
                settingsManager.SaveSetting("Port", selectedPort);
                socketServer.Start(int.Parse(selectedPort));

                // QR 코드 업데이트
                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            string qrContent = $"{ipAddress}:{port}";
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

            // QR 코드를 이미지로 표시
            QrCodeImage.Source = qrCodeImage;
        }

        private void InitializePortSettings()
        {
            // 보드레이트 설정
            string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
            InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");
            InitializeComboBox(TargetBaudRateComboBox1, baudRates, "9600");

            // 패리티 설정
            string[] parityValues = Enum.GetNames(typeof(Parity));
            InitializeComboBox(ScannerParityComboBox, parityValues, "None");
            InitializeComboBox(TargetParityComboBox1, parityValues, "None");

            // 데이터 비트 설정
            string[] dataBits = { "5", "6", "7", "8" };
            InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");
            InitializeComboBox(TargetDataBitsComboBox1, dataBits, "8");

            // 스톱 비트 설정
            string[] stopBits = Enum.GetNames(typeof(StopBits));
            InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            InitializeComboBox(TargetStopBitsComboBox1, stopBits, "One");
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            comboBox.ItemsSource = items;
            comboBox.SelectedItem = defaultValue; // 기본값 설정
        }

        private void LoadLastUsedPorts()
        {
            // 스캐너 포트 설정 로드
            string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
            string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
            string scannerParity = settingsManager.GetSetting("ScannerParity");
            string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
            string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

            if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
            {
                ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                ScannerParityComboBox.SelectedItem = scannerParity;
                ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
            }
            else
            {
                LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }

            // 각 보낼 포트에 대해 설정 로드 및 연결
            string lastUsedTargetPort = settingsManager.GetSetting("LastUsedTargetPort1");
            string targetBaudRate = settingsManager.GetSetting("TargetBaudRate1");
            string targetParity = settingsManager.GetSetting("TargetParity1");
            string targetDataBits = settingsManager.GetSetting("TargetDataBits1");
            string targetStopBits = settingsManager.GetSetting("TargetStopBits1");

            if (!string.IsNullOrEmpty(lastUsedTargetPort) && SerialPort.GetPortNames().Contains(lastUsedTargetPort))
            {
                TargetPortComboBox1.SelectedItem = lastUsedTargetPort;
                TargetBaudRateComboBox1.SelectedItem = targetBaudRate;
                TargetParityComboBox1.SelectedItem = targetParity;
                TargetDataBitsComboBox1.SelectedItem = targetDataBits;
                TargetStopBitsComboBox1.SelectedItem = targetStopBits;

                OpenPort(ref serialPortManager.TargetPorts[0], lastUsedTargetPort, targetBaudRate, targetParity, targetDataBits, targetStopBits);
            }
            else
            {
                LogMessage("마지막으로 사용한 타겟 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void OpenPort(ref SerialPort serialPort, string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenTargetPort(ref serialPort, portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"타겟 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            comboBox.SelectedItem = null;
            serialPortManager.CloseScannerPort();
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            comboBox.SelectedItem = null;
            serialPortManager.CloseTargetPort(0); // 첫 번째 타겟 포트
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            serialPortManager.SendData(e.Data);
            LogMessage($"Received and forwarded: {e.Data}");
        }

        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            if (LogListBox.Items.Count > 100)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. SettingsManager.cs
이 클래스는 애플리케이션 설정을 관리합니다.

csharp
코드 복사
using System.Configuration;

namespace ScanValueTrans
{
    public class SettingsManager
    {
        private static SettingsManager instance;
        private Configuration config;

        private SettingsManager()
        {
            config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
        }

        public static SettingsManager Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new SettingsManager();
                }
                return instance;
            }
        }

        public string GetSetting(string key)
        {
            if (config.AppSettings.Settings[key] != null)
            {
                return config.AppSettings.Settings[key].Value;
            }
            return null;
        }

        public void SaveSetting(string key, string value)
        {
            if (config.AppSettings.Settings[key] == null)
            {
                config.AppSettings.Settings.Add(key, value);
            }
            else
            {
                config.AppSettings.Settings[key].Value = value;
            }
            config.Save(ConfigurationSaveMode.Modified);
        }
    }
}
4. SocketServer.cs
이 클래스는 소켓 서버를 관리하고, 데이터를 수신할 때마다 이벤트를 발생시킵니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace ScanValueTrans
{
    public class SocketDataReceivedEventArgs : EventArgs
    {
        public string Data { get; set; }
    }

    public class SocketServer
    {
        private static SocketServer instance;
        private TcpListener tcpListener;

        public event EventHandler<SocketDataReceivedEventArgs> DataReceived;

        private SocketServer() { }

        public static SocketServer Instance
        {
            get
            {
                if (instance == null)
                {
                    instance = new SocketServer();
                }
                return instance;
            }
        }

        public void Start(int port)
        {
            tcpListener = new TcpListener(IPAddress.Any, port);
            tcpListener.Start();
            tcpListener.BeginAcceptTcpClient(AcceptClientCallback, null);
        }

        private void AcceptClientCallback(IAsyncResult ar)
        {
            TcpClient client = tcpListener.EndAcceptTcpClient(ar);
            NetworkStream stream = client.GetStream();

            byte[] buffer = new byte[1024];
            int bytesRead = stream.Read(buffer, 0, buffer.Length);
            string data = Encoding.ASCII.GetString(buffer, 0, bytesRead);

            OnDataReceived(data);

            client.Close();
            tcpListener.BeginAcceptTcpClient(AcceptClientCallback, null);
        }

        protected virtual void OnDataReceived(string data)
        {
            DataReceived?.Invoke(this, new SocketDataReceivedEventArgs { Data = data });
        }
    }
}
5. SerialPortManager.cs
이 클래스는 스캐너 포트 및 여러 타겟 포트를 관리하고, 데이터를 수신하여 전송합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Collections.Generic;

namespace ScanValueTrans
{
    public class SerialPortManager
    {
        public SerialPort ScannerPort { get; private set; }
        public SerialPort[] TargetPorts { get; private set; }

        public SerialPortManager()
        {
            TargetPorts = new SerialPort[5];
        }

        public void OpenScannerPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            if (ScannerPort != null && ScannerPort.IsOpen)
            {
                ScannerPort.Close();
            }

            ScannerPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
            ScannerPort.DataReceived += OnScannerDataReceived;
            ScannerPort.Open();
        }

        public void OpenTargetPort(ref SerialPort targetPort, string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits)
        {
            if (targetPort != null && targetPort.IsOpen)
            {
                targetPort.Close();
            }

            targetPort = new SerialPort(portName, baudRate, parity, dataBits, stopBits);
            targetPort.Open();
        }

        public void CloseScannerPort()
        {
            if (ScannerPort != null && ScannerPort.IsOpen)
            {
                ScannerPort.Close();
            }
        }

        public void CloseTargetPort(int index)
        {
            if (TargetPorts[index] != null && TargetPorts[index].IsOpen)
            {
                TargetPorts[index].Close();
            }
        }

        private void OnScannerDataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string data = ScannerPort.ReadExisting();
            SendData(data);
        }

        public void SendData(string data)
        {
            string[] splitData = data.Split('^');
            if (splitData.Length > 1)
            {
                string keyword = splitData[0];
                string message = splitData[1];

                foreach (var port in TargetPorts)
                {
                    if (port != null && port.IsOpen)
                    {
                        port.WriteLine(message);
                    }
                }
            }
        }
    }
}
6. QRCodeGenerator.cs
이 클래스는 주어진 데이터를 기반으로 QR 코드를 생성합니다.

csharp
코드 복사
using System;
using System.Windows.Media.Imaging;
using ZXing;

namespace ScanValueTrans
{
    public class QRCodeGenerator
    {
        public BitmapImage GenerateQRCode(string content)
        {
            BarcodeWriter writer = new BarcodeWriter
            {
                Format = BarcodeFormat.QR_CODE,
                Options = new ZXing.Common.EncodingOptions
                {
                    Width = 200,
                    Height = 200
                }
            };

            var bitmap = writer.Write(content);
            return BitmapToImageSource(bitmap);
        }

        private BitmapImage BitmapToImageSource(System.Drawing.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Bmp);
                memory.Position = 0;
                BitmapImage bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = memory;
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapImage.EndInit();
                return bitmapImage;
            }
        }
    }
}
7. 코드 요약 및 기능 설명
이 프로젝트는 ScanValueTrans라는 이름의 중계 프로그램으로, 다음과 같은 기능을 제공합니다:

PC IP와 포트 설정:

프로그램 실행 시 PC의 IP 주소를 자동으로 감지하여 표시합니다.
사용자가 20000에서 65000 사이의 포트를 선택하면 소켓 서버가 해당 포트에서 대기합니다.
선택된 포트와 IP 정보는 QR 코드로 생성되어 표시됩니다.
스캐너 포트 및 타겟 포트 설정:

사용자는 스캐너 포트와 최대 5개의 타겟 포트를 설정할 수 있습니다.
각 포트에 대해 보드레이트, 패리티, 데이터 비트, 스톱 비트 설정이 가능합니다.
설정된 값은 저장되며, 프로그램 재실행 시 불러와 적용됩니다.
데이터 수신 및 중계:

스캐너 포트에서 데이터를 수신하면 자동으로 설정된 타겟 포트로 데이터를 전송합니다.
소켓 서버를 통해 클라이언트가 데이터를 보낼 수 있으며, 특정 문자를 포함한 메시지를 수신할 경우 해당 문자를 기반으로 타겟 포트로 데이터를 전달합니다.
프로그램 안정성:

프로그램은 백그라운드에서 계속 실행되며, 사용자가 명시적으로 종료하지 않는 한 종료되지 않도록 설계되었습니다.
이 프로그램을 통해 설정한 포트, IP 정보, 데이터 중계 기능 등을 손쉽게 관리할 수 있으며, 고급 디자인 패턴을 사용하여 확장 가능하고 유지 관리가 용이한 구조를 제공합니다. 추가적인 질문이 있거나 기능 개선이 필요하면 언제든지 문의해 