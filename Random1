송합니다. 스캐너 포트에서 데이터를 수신하고, 자동으로 그 데이터를 다른 포트로 전송하는 로직을 제대로 구현해야 하는 상황을 이제 명확히 이해했습니다. 스캐너 포트로부터 데이터를 수신하면, 즉시 SendData 함수로 데이터를 전달하고, 다른 설정된 포트로 데이터를 전송해야 합니다.

1. XAML (MainWindow.xaml)
XAML은 이전과 동일하게 유지합니다.

2. C# (MainWindow.xaml.cs)
스캐너 포트에서 데이터를 수신하고 이를 자동으로 다른 포트로 전송하는 로직을 추가합니다.

주요 변경 사항:
데이터 수신 이벤트: SerialPort.DataReceived 이벤트를 사용하여 스캐너에서 데이터를 수신하고, 즉시 다른 포트로 전송합니다.
데이터 전송 및 로그 기록: 데이터를 전송한 후 로그에 기록합니다.
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _scannerPort; // 스캐너가 연결된 시리얼 포트 객체
        private SerialPort[] _targetPorts = new SerialPort[5]; // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100; // 로그 표시의 최대 개수
        private const string SettingsFilePath = @"C:\agent\scanvaluetran\settings.config"; // 설정 파일 경로
        private Configuration config;

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                EnsureSettingsFileExists(); // 설정 파일이 존재하지 않으면 생성
                LoadConfiguration(); // 설정 파일을 불러옴
                LoadLastUsedPorts(); // 마지막으로 사용된 포트 설정 불러오기
                RefreshPorts(); // 포트 목록 갱신
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
                MessageBox.Show($"프로그램 초기화 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EnsureSettingsFileExists()
        {
            try
            {
                // 설정 파일이 있는 디렉토리가 없으면 생성
                string directory = System.IO.Path.GetDirectoryName(SettingsFilePath);
                if (!System.IO.Directory.Exists(directory))
                {
                    System.IO.Directory.CreateDirectory(directory);
                }

                // 설정 파일이 없으면 생성
                if (!System.IO.File.Exists(SettingsFilePath))
                {
                    var configFileMap = new System.Configuration.ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                    Configuration config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFileMap, System.Configuration.ConfigurationUserLevel.None);

                    config.Save(System.Configuration.ConfigurationSaveMode.Full);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 생성 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 생성 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadConfiguration()
        {
            try
            {
                var configFileMap = new System.Configuration.ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                config = System.Configuration.ConfigurationManager.OpenMappedExeConfiguration(configFileMap, System.Configuration.ConfigurationUserLevel.None);
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 불러오기 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 불러오기 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadLastUsedPorts()
        {
            // 스캐너 포트 불러오기
            string lastUsedScannerPort = GetSetting("LastUsedScannerPort");
            if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
            {
                ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                OpenScannerPort(lastUsedScannerPort);
            }
            else
            {
                LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }

            // 보낼 포트 불러오기 (최대 5개)
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                string key = $"LastUsedTargetPort{i + 1}";
                string lastUsedTargetPort = GetSetting(key);
                ComboBox targetComboBox = GetTargetPortComboBox(i);

                if (!string.IsNullOrEmpty(lastUsedTargetPort) && SerialPort.GetPortNames().Contains(lastUsedTargetPort))
                {
                    targetComboBox.SelectedItem = lastUsedTargetPort;
                    OpenPort(ref _targetPorts[i], lastUsedTargetPort, targetComboBox);
                }
                else
                {
                    LogMessage($"마지막으로 사용한 보낼 포트 {i + 1}를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }
            }
        }

        private string GetSetting(string key)
        {
            if (config.AppSettings.Settings[key] == null)
            {
                config.AppSettings.Settings.Add(key, string.Empty);
                config.Save(System.Configuration.ConfigurationSaveMode.Modified);
            }
            return config.AppSettings.Settings[key].Value;
        }

        private void SaveSetting(string key, string value)
        {
            if (config.AppSettings.Settings[key] != null)
            {
                config.AppSettings.Settings[key].Value = value;
            }
            else
            {
                config.AppSettings.Settings.Add(key, value);
            }
            config.Save(System.Configuration.ConfigurationSaveMode.Modified);
        }

        private void RefreshPorts()
        {
            try
            {
                // 현재 사용 가능한 COM 포트 목록을 모든 ComboBox에 업데이트
                var portNames = SerialPort.GetPortNames();
                ScannerPortComboBox.ItemsSource = portNames;
                TargetPortComboBox1.ItemsSource = portNames;
                TargetPortComboBox2.ItemsSource = portNames;
                TargetPortComboBox3.ItemsSource = portNames;
                TargetPortComboBox4.ItemsSource = portNames;
                TargetPortComboBox5.ItemsSource = portNames;

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
                MessageBox.Show($"포트 목록 갱신 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenScannerPort(string portName)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (_scannerPort != null && _scannerPort.IsOpen)
                {
                    _scannerPort.Close();
                }

                // 스캐너 포트 설정 및 이벤트 핸들러 추가
                _scannerPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                _scannerPort.DataReceived += ScannerPort_DataReceived;
                _scannerPort.Open();
                ScannerPortComboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");

                // 포트 설정 저장
                SaveSetting("LastUsedScannerPort", portName);
            }
            catch (Exception ex)
            {
                ScannerPortComboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void OpenPort(ref SerialPort serialPort, string portName, ComboBox comboBox)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                }

                // 선택된 포트로 시리얼 포트를 설정하고 엽니다.
                serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                serialPort.Open();
                comboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"포트 {portName}가 열렸습니다.");

                // 포트 설정 저장
                int index = GetTargetPortComboBoxIndex(comboBox);
                SaveSetting($"LastUsedTargetPort{index + 1}", portName);
            }
            catch (Exception ex)
            {
                comboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClosePort(ref SerialPort serialPort, ComboBox comboBox)
        {
            try
            {
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                    comboBox.Foreground = Brushes.Black; // 포트가 닫혔을 때 텍스트 색상 초기화
                    LogMessage($"포트 {serialPort.PortName}가 닫혔습니다.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ScannerPortComboBox.SelectedItem != null)
            {
                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                OpenScannerPort(selectedPort);
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (comboBox.SelectedItem != null)
            {
                string selectedPort = comboBox.SelectedItem.ToString();
                OpenPort(ref _targetPorts[index], selectedPort, comboBox);
            }
        }

        private int GetTargetPortComboBoxIndex(ComboBox comboBox)
        {
            // 각 ComboBox에 대해 인덱스를 반환
            if (comboBox == TargetPortComboBox1) return 0;
            if (comboBox == TargetPortComboBox2) return 1;
            if (comboBox == TargetPortComboBox3) return 2;
            if (comboBox == TargetPortComboBox4) return 3;
            if (comboBox == TargetPortComboBox5) return 4;
            return -1;
        }

        private ComboBox GetTargetPortComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetPortComboBox1;
                case 1: return TargetPortComboBox2;
                case 2: return TargetPortComboBox3;
                case 3: return TargetPortComboBox4;
                case 4: return TargetPortComboBox5;
                default: return null;
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            // 스캐너 포트 선택 취소
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            comboBox.SelectedItem = null;
            ClosePort(ref _scannerPort, comboBox);
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            // 보낼 포트 선택 취소
            ComboBox comboBox = (ComboBox)((Button)sender).Tag;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (index >= 0)
            {
                comboBox.SelectedItem = null;
                ClosePort(ref _targetPorts[index], comboBox);
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            // 스캐너 포트에서 데이터를 수신하면 자동으로 호출되는 이벤트 핸들러
            try
            {
                string data = _scannerPort.ReadLine(); // 스캐너로부터 데이터 수신
                Dispatcher.Invoke(() => // UI 스레드에서 로그와 전송 처리
                {
                    LogMessage($"스캐너 포트로부터 데이터 수신: {data}");
                    SendData(data); // 데이터를 즉시 다른 포트로 전송
                });
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void SendData(string data)
        {
            // 수신된 데이터를 각 타겟 포트로 전송
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                if (_targetPorts[i] != null && _targetPorts[i].IsOpen && ShouldForwardData(data))
                {
                    try
                    {
                        _targetPorts[i].WriteLine(data);
                        LogMessage($"데이터가 {_targetPorts[i].PortName}로 전달되었습니다: {data}");
                    }
                    catch (Exception ex)
                    {
                        LogMessage($"데이터 전송 실패: {ex.Message}");
                    }
                }
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시 조건: 데이터에 "FORWARD"가 포함된 경우에만 다른 포트로 전송
            // 이 조건을 필요에 따라 수정 가능
            return true; // 모든 데이터 전송을 위해 true로 설정 (필요 시 수정)
        }

        private void LogMessage(string message)
        {
            // 현재 시간을 로그에 추가
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그의 개수가 최대치를 넘으면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. 주요 변경 사항 요약
데이터 수신 이벤트 (DataReceived): 스캐너 포트에서 데이터를 수신하면 ScannerPort_DataReceived 이벤트 핸들러가 호출됩니다.
데이터를 수신하고, 즉시 SendData 메서드로 해당 데이터를 전달하여 다른 포트로 전송합니다.
포트 열기: OpenScannerPort 메서드를 통해 스캐너 포트를 열고, 데이터 수신 이벤트 핸들러를 등록합니다.
전송 조건 (ShouldForwardData): 기본적으로 모든 수신된 데이터를 전송하도록 설정되어 있습니다. 필요에 따라 조건을 수정할 수 있습니다.
사용 방법
포트 선택: 스캐너 포트를 선택하면 해당 포트가 열리고, 데이터를 수신하면 자동으로 처리됩니다.
자동 전송: 스캐너에서 데이터를 수신하면, 설정된 다른 포트로 즉시 데이터가 전송됩니다. 전송된 데이터와 로그는 ListBox에 기록됩니다.
포트 취소: 각 콤보박스 옆의 "X" 버튼을 사용하여 포트 선택을 취소하고 연결을 해제할 수 있습니다.
이 코드로 스캐너에서 데이터를 수신하고, 그 데이터를 즉시 다른 포트로 전송할 수 있습니다. 추가적인 질문이나 도움이 필요하면 언제든지 말씀해 