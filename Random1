using System;
using System.Runtime.InteropServices;
using System.Text;

public class Program
{
    [DllImport("user32.dll")]
    public static extern bool EnumWindows(EnumWindowsProc enumProc, IntPtr lParam);

    [DllImport("user32.dll")]
    public static extern int GetClassName(IntPtr hWnd, StringBuilder lpClassName, int nMaxCount);

    [DllImport("user32.dll")]
    public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

    public delegate bool EnumWindowsProc(IntPtr hWnd, IntPtr lParam);

    public static IntPtr FindWindowByClassAndCaption(string targetClassName, string targetWindowText)
    {
        IntPtr foundHandle = IntPtr.Zero;

        EnumWindows((hWnd, lParam) =>
        {
            StringBuilder className = new StringBuilder(256);
            StringBuilder windowText = new StringBuilder(256);

            GetClassName(hWnd, className, className.Capacity);
            GetWindowText(hWnd, windowText, windowText.Capacity);

            if (className.ToString() == targetClassName && windowText.ToString() == targetWindowText)
            {
                foundHandle = hWnd;
                return false; // Stop enumeration
            }

            return true; // Continue enumeration
        }, IntPtr.Zero);

        return foundHandle;
    }

    public static void Main()
    {
        IntPtr hWnd = FindWindowByClassAndCaption("YourClassNameHere", "YourWindowTextHere");

        if (hWnd != IntPtr.Zero)
        {
            Console.WriteLine("Window handle found: " + hWnd.ToString("X"));
        }
        else
        {
            Console.WriteLine("Window not found.");
        }
    }
}
