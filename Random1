습니다.

1. g++로 컴파일 후 실행
sh
코드 복사
g++ test1.cpp -o test2 && ./test2
g++ test1.cpp -o test2 → test1.cpp를 test2 실행 파일로 컴파일
&& ./test2 → 컴파일이 성공하면 실행
2. C++17 이상으로 컴파일
sh
코드 복사
g++ -std=c++17 test1.cpp -o test2 && ./test2
최신 C++ 표준을 사용하고 싶다면 -std=c++17 또는 -std=c++20 옵션 추가
3. 디버깅 정보 포함해서 컴파일
sh
코드 복사
g++ -g test1.cpp -o test2
-g 옵션을 추가하면 GDB 디버깅이 가능
디버깅 실행:
sh
코드 복사
gdb ./test2
4. 최적화 옵션 추가해서 컴파일
sh
코드 복사
g++ -O2 test1.cpp -o test2
-O2 또는 -O3 옵션을 사용하면 실행 속도가 최적화됨
5. 여러 개의 C++ 파일을 컴파일
sh
코드 복사
g++ main.cpp util.cpp helper.cpp -o program
여러 .cpp 파일이 있는 경우 한 번에 컴파일 가능
6. Makefile 사용 (자동화)
Makefile 생성:

make
코드 복사
all:
    g++ -std=c++17 test1.cpp -o test2
    ./test2
실행:

sh
코드 복사
make
7. Bash 스크립트 사용
자주 실행할 경우 .sh 스크립트로 만들 수 있음.

compile_and_run.sh 파일을 생성하고 아래 내용을 입력:
sh
코드 복사
#!/bin/bash
g++ -std=c++17 test1.cpp -o test2 && ./test2
실행 권한 부여:
sh
코드 복사
chmod +x compile_and_run.sh
실행:
sh
코드 복사
./compile_and_run.sh
8. Alias 설정 (단축 실행)
자주 실행하는 경우 alias를 추가하면 편리함.

sh
코드 복사
alias run_cpp='g++ test1.cpp -o test2 && ./test2'
그리고 실행:

sh
코드 복사
run_cpp
(alias는 현재 터미널에서만 유효, 영구적으로 저장하려면 ~/.bashrc 또는 ~/.zshrc에 추가)

9. CMake 사용 (대형 프로젝트)
대형 프로젝트라면 CMakeLists.txt를 사용해 관리 가능.

CMakeLists.txt 파일 생성:

scss
코드 복사
cmake_minimum_required(VERSION 3.10)
project(MyProject)
set(CMAKE_CXX_STANDARD 17)
add_executable(test2 test1.cpp)
빌드 및 실행:

sh
코드 복사
mkdir build && cd build
cmake ..
make