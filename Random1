using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows;
using System.Text;

namespace BackupApp.MVVM
{
    public class BackupCommand : ICommand
    {
        public event EventHandler CanExecuteChanged;

        public bool CanExecute(object parameter)
        {
            return parameter is string;
        }

        public async void Execute(object parameter)
        {
            if (parameter is string sourcePath)
            {
                await ExecuteBackupAsync(sourcePath);
            }
        }

        private async Task ExecuteBackupAsync(string sourcePath)
        {
            try
            {
                // 경로에 잘못된 문자가 있는지 검사
                if (HasInvalidPathChars(sourcePath))
                {
                    throw new ArgumentException("경로에 잘못된 문자가 포함되어 있습니다: " + sourcePath);
                }

                string parentDirectory = "C:\abcd"; // 백업할 기본 폴더 경로
                string folderName = Path.GetFileName(sourcePath);

                // 현재 날짜와 시간을 yyyyMMdd_HHmmss 형식으로 가져옴
                string timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");

                // 백업 폴더명 생성: 원래 폴더명 + 언더바 + 타임스탬프
                string backupFolderName = folderName + "_" + timestamp;
                string destinationPath = Path.Combine(parentDirectory, backupFolderName);

                // 폴더 복사 수행
                await CopyDirectoryAsync(sourcePath, destinationPath);

                MessageBox.Show("폴더가 성공적으로 백업되었습니다!", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                // 에러 발생 시 에러 메시지 창 띄우기 및 로깅 추가
                string errorMessage = "에러가 발생했습니다: " + ex.Message + "\n" + "스택 추적: " + ex.StackTrace;
                LogError(errorMessage);
                MessageBox.Show(errorMessage, "에러", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task CopyDirectoryAsync(string sourceDir, string destinationDir)
        {
            await Task.Run(() =>
            {
                try
                {
                    // 원본 디렉토리 정보 가져오기
                    DirectoryInfo dir = new DirectoryInfo(sourceDir);

                    if (!dir.Exists)
                    {
                        throw new DirectoryNotFoundException("소스 디렉토리를 찾을 수 없습니다: " + sourceDir);
                    }

                    // 대상 디렉토리가 없으면 생성
                    Directory.CreateDirectory(destinationDir);

                    // 파일 복사
                    FileInfo[] files = dir.GetFiles();
                    foreach (FileInfo file in files)
                    {
                        string tempPath = Path.Combine(destinationDir, file.Name);
                        file.CopyTo(tempPath, true); // 덮어쓰기 허용
                    }

                    // 하위 디렉토리 복사
                    DirectoryInfo[] dirs = dir.GetDirectories();
                    foreach (DirectoryInfo subdir in dirs)
                    {
                        string tempPath = Path.Combine(destinationDir, subdir.Name);
                        CopyDirectoryAsync(subdir.FullName, tempPath).Wait(); // 하위 디렉토리도 재귀적으로 복사
                    }
                }
                catch (Exception ex)
                {
                    string errorMessage = "폴더 복사 중 에러가 발생했습니다: " + ex.Message + "\n" + "스택 추적: " + ex.StackTrace;
                    LogError(errorMessage);
                    throw; // 에러를 다시 던져서 상위에서 처리
                }
            });
        }

        private void LogError(string message)
        {
            try
            {
                string logFilePath = "C:\abcd\backup_errors.log";
                using (StreamWriter writer = new StreamWriter(logFilePath, true, Encoding.UTF8))
                {
                    writer.WriteLine("[" + DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss") + "] " + message);
                }
            }
            catch (Exception logEx)
            {
                MessageBox.Show("로깅 중 에러가 발생했습니다: " + logEx.Message, "로깅 에러", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private bool HasInvalidPathChars(string path)
        {
            try
            {
                char[] invalidChars = Path.GetInvalidPathChars();
                foreach (char c in path)
                {
                    if (Array.Exists(invalidChars, element => element == c))
                    {
                        LogError($"잘못된 경로 문자 발견: '{c}' in 경로: {path}");
                        return true;
                    }
                }
                return false;
            }
            catch (Exception ex)
            {
                LogError("경로 검사 중 에러가 발생했습니다: " + ex.Message);
                throw;
            }
        }
    }
}

// ViewModel에서 BackupCommand를 사용하는 예시
namespace BackupApp.MVVM
{
    public class MainViewModel
    {
        public ICommand BackupCommand { get; }

        public MainViewModel()
        {
            BackupCommand = new BackupCommand();
        }

        // XAML에서 사용될 프로퍼티 - 예: 백업할 소스 경로
        public string SourcePath { get; set; }
    }
}

// XAML 파일 예시
// <Window x:Class="BackupApp.MainWindow"
//         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
//         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
//         xmlns:vm="clr-namespace:BackupApp.MVVM"
//         Title="Backup App" Height="350" Width="525">
//     <Window.DataContext>
//         <vm:MainViewModel />
//     </Window.DataContext>
//     <Grid>
//         <TextBox Text="{Binding SourcePath, UpdateSourceTrigger=PropertyChanged}" Width="300" Height="30" Margin="10" />
//         <Button Content="Backup" Command="{Binding BackupCommand}" CommandParameter="{Binding SourcePath}" Width="100" Height="30" Margin="10,50,0,0" HorizontalAlignment="Left" />
//     </Grid>
// </Window>
