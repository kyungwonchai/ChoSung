import tkinter as tk
from tkinter import messagebox

def sync_from_single_line():
    """한 줄 입력에서 동기화"""
    try:
        # 한 줄 입력에서 값 읽기
        values = single_line.get().split(',')
        values = [value.strip() for value in values]  # 공백 제거

        # 값이 6개로 부족하면 추가
        while len(values) < 6:
            values.append("0")

        # 값이 6개를 넘으면 잘라냄
        values = values[:6]

        # 값 동기화
        entry_ax.delete(0, tk.END)
        entry_ax.insert(0, values[0])
        entry_ay.delete(0, tk.END)
        entry_ay.insert(0, values[1])
        entry_az.delete(0, tk.END)
        entry_az.insert(0, values[2])
        entry_mx.delete(0, tk.END)
        entry_mx.insert(0, values[3])
        entry_my.delete(0, tk.END)
        entry_my.insert(0, values[4])
        entry_mz.delete(0, tk.END)
        entry_mz.insert(0, values[5])

        # 3개씩 나누기
        group1.set(", ".join(values[:3]))
        group2.set(", ".join(values[3:]))
    except Exception as e:
        messagebox.showerror("입력 오류", f"오류: {e}")

def sync_from_groups():
    """3개씩 분리된 입력에서 동기화"""
    try:
        # 첫 번째 그룹 값
        values1 = group1.get().split(',')
        values1 = [value.strip() for value in values1]

        # 두 번째 그룹 값
        values2 = group2.get().split(',')
        values2 = [value.strip() for value in values2]

        # 병합
        values = values1 + values2

        # 값이 6개로 부족하면 추가
        while len(values) < 6:
            values.append("0")

        # 값이 6개를 넘으면 잘라냄
        values = values[:6]

        # 값 동기화
        entry_ax.delete(0, tk.END)
        entry_ax.insert(0, values[0])
        entry_ay.delete(0, tk.END)
        entry_ay.insert(0, values[1])
        entry_az.delete(0, tk.END)
        entry_az.insert(0, values[2])
        entry_mx.delete(0, tk.END)
        entry_mx.insert(0, values[3])
        entry_my.delete(0, tk.END)
        entry_my.insert(0, values[4])
        entry_mz.delete(0, tk.END)
        entry_mz.insert(0, values[5])

        # 한 줄로 병합
        single_line.set(", ".join(values))
    except Exception as e:
        messagebox.showerror("입력 오류", f"오류: {e}")

def sync_from_individual():
    """낱개 입력에서 동기화"""
    try:
        # 낱개 입력값 읽기
        values = [
            entry_ax.get().strip(), entry_ay.get().strip(), entry_az.get().strip(),
            entry_mx.get().strip(), entry_my.get().strip(), entry_mz.get().strip()
        ]

        # 한 줄로 병합
        single_line.set(", ".join(values))

        # 3개씩 나누기
        group1.set(", ".join(values[:3]))
        group2.set(", ".join(values[3:]))
    except Exception as e:
        messagebox.showerror("입력 오류", f"오류: {e}")

def calculate_result():
    """결과 계산"""
    try:
        # 값 읽기
        values = single_line.get().split(',')
        values = [float(value.strip()) for value in values]

        # 값이 정확히 6개인지 확인
        if len(values) != 6:
            raise ValueError("입력값은 정확히 6개의 숫자여야 합니다.")

        # 결과 계산
        result = sum(values)

        # 결과 출력
        result_label.config(text=f"결과: {result:.2f}")

    except ValueError as e:
        messagebox.showerror("입력 오류", f"오류: {e}")

# GUI 초기화
root = tk.Tk()
root.title("가속도 및 지자기 계산기")
root.geometry("600x400")

# 낱개 입력
tk.Label(root, text="낱개 입력").grid(row=0, column=0, columnspan=6, pady=5)
entry_ax = tk.Entry(root, width=10)
entry_ax.grid(row=1, column=0)
entry_ax.bind("<KeyRelease>", lambda _: sync_from_individual())
entry_ay = tk.Entry(root, width=10)
entry_ay.grid(row=1, column=1)
entry_ay.bind("<KeyRelease>", lambda _: sync_from_individual())
entry_az = tk.Entry(root, width=10)
entry_az.grid(row=1, column=2)
entry_az.bind("<KeyRelease>", lambda _: sync_from_individual())
entry_mx = tk.Entry(root, width=10)
entry_mx.grid(row=1, column=3)
entry_mx.bind("<KeyRelease>", lambda _: sync_from_individual())
entry_my = tk.Entry(root, width=10)
entry_my.grid(row=1, column=4)
entry_my.bind("<KeyRelease>", lambda _: sync_from_individual())
entry_mz = tk.Entry(root, width=10)
entry_mz.grid(row=1, column=5)
entry_mz.bind("<KeyRelease>", lambda _: sync_from_individual())

# 3개씩 분리된 입력
tk.Label(root, text="3개씩 분리 입력").grid(row=2, column=0, columnspan=6)
group1 = tk.StringVar()
group2 = tk.StringVar()
entry_group1 = tk.Entry(root, textvariable=group1, width=50)
entry_group1.grid(row=3, column=0, columnspan=6)
entry_group1.bind("<KeyRelease>", lambda _: sync_from_groups())
entry_group2 = tk.Entry(root, textvariable=group2, width=50)
entry_group2.grid(row=4, column=0, columnspan=6)
entry_group2.bind("<KeyRelease>", lambda _: sync_from_groups())

# 한 줄 입력
tk.Label(root, text="한 줄 입력").grid(row=5, column=0, columnspan=6)
single_line = tk.StringVar()
entry_single = tk.Entry(root, textvariable=single_line, width=50)
entry_single.grid(row=6, column=0, columnspan=6)
entry_single.bind("<KeyRelease>", lambda _: sync_from_single_line())

# 계산 버튼
calculate_button = tk.Button(root, text="계산", command=calculate_result)
calculate_button.grid(row=7, column=0, columnspan=6)

# 결과 출력
result_label = tk.Label(root, text="결과: 없음", font=("Arial", 14))
result_label.grid(row=8, column=0, columnspan=6)
