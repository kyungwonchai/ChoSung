 사용자가 요청한 기능을 모두 포함한 WPF 응용 프로그램의 전체 코드입니다. UI 요소에 마우스를 올리면 해당 요소의 역할을 설명하는 툴팁이 표시됩니다. 또한, 사용자가 시리얼 포트를 선택할 수 있는 ComboBox를 추가하고, 선택된 포트를 setup.ini 파일에 저장 및 로드하는 기능을 구현했습니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Communication" Height="500" Width="800" Closing="Window_Closing">
    <Grid>
        <ComboBox Name="ComboBoxPorts" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="30" Margin="10" SelectionChanged="ComboBoxPorts_SelectionChanged" ToolTip="Select the COM port to connect to the PLC.">
            <ComboBox.ToolTip>
                <ToolTip>Choose the COM port that matches your PLC connection.</ToolTip>
            </ComboBox.ToolTip>
        </ComboBox>
        <Button Name="BtnCheckConnection" Content="Check Connection" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,50,0,0" Click="BtnCheckConnection_Click" ToolTip="Click to send check connection signals to the PLC.">
            <Button.ToolTip>
                <ToolTip>Sends signals 1, 2, 3, and 4 to the PLC to verify the connection.</ToolTip>
            </Button.ToolTip>
        </Button>
        <Button Name="BtnSendData" Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,110,0,0" Click="BtnSendData_Click" ToolTip="Click to send PO information to the PLC.">
            <Button.ToolTip>
                <ToolTip>Sends the data entered in the PO Information textbox to the PLC.</ToolTip>
            </Button.ToolTip>
        </Button>
        <TextBox Name="TxtPOInfo" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="30" Margin="10,170,0,0" ToolTip="Enter the PO information to send to the PLC.">
            <TextBox.ToolTip>
                <ToolTip>Input the PO information that will be sent to the PLC in ASCII format.</ToolTip>
            </TextBox.ToolTip>
        </TextBox>
        <Label Content="Enter PO Information" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,210,0,0"/>
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="550" Height="250" Margin="220,10,0,0" ToolTip="Displays log messages for PLC communication.">
            <ListBox.ToolTip>
                <ToolTip>Shows log messages including data sent to and received from the PLC.</ToolTip>
            </ListBox.ToolTip>
        </ListBox>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.IO.Ports;
using System.Linq;
using System.Text;
using System.Threading;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;
        private const int MaxRetries = 3; // 에러 발생 시 최대 재시도 횟수
        private DispatcherTimer timer;
        private string iniFilePath = "setup.ini";

        public MainWindow()
        {
            InitializeComponent();
            LoadAvailablePorts();
            LoadSelectedPort();
            InitializeTimer();
        }

        // 사용 가능한 COM 포트를 ComboBox에 로드
        private void LoadAvailablePorts()
        {
            var ports = SerialPort.GetPortNames();
            ComboBoxPorts.ItemsSource = ports;
        }

        // 이전에 선택된 포트를 setup.ini에서 로드
        private void LoadSelectedPort()
        {
            if (File.Exists(iniFilePath))
            {
                var portName = File.ReadAllText(iniFilePath).Trim();
                if (!string.IsNullOrEmpty(portName) && ComboBoxPorts.Items.Contains(portName))
                {
                    ComboBoxPorts.SelectedItem = portName;
                    InitializeSerialPort(portName);
                }
            }
        }

        // 시리얼 포트를 초기화하고 열기
        private void InitializeSerialPort(string portName)
        {
            serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
            serialPort.DataReceived += SerialPort_DataReceived;
            try
            {
                serialPort.Open();
                LogMessage("Serial port opened successfully.");
            }
            catch (Exception ex)
            {
                LogMessage($"Error opening serial port: {ex.Message}");
            }
        }

        // 타이머 초기화
        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        // 주기적으로 실행되는 타이머 이벤트 핸들러
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 주기적으로 상태 체크 로직을 여기에 추가할 수 있습니다.
        }

        // ComboBox에서 포트를 선택하면 실행되는 이벤트 핸들러
        private void ComboBoxPorts_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (ComboBoxPorts.SelectedItem != null)
            {
                var selectedPort = ComboBoxPorts.SelectedItem.ToString();
                InitializeSerialPort(selectedPort);
                File.WriteAllText(iniFilePath, selectedPort);
            }
        }

        // "Check Connection" 버튼 클릭 이벤트 핸들러
        private void BtnCheckConnection_Click(object sender, RoutedEventArgs e)
        {
            for (int i = 1; i <= 4; i++)
            {
                SendMessageWithRetry(() => SendDataToPLC(2300, i), MaxRetries);
                Thread.Sleep(500);
            }
            LogMessage("Connection check signals sent successfully.");
        }

        // "Send Data" 버튼 클릭 이벤트 핸들러
        private void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            SendMessageWithRetry(() => SendDataToPLC(2300, 1), MaxRetries); // 예: 신규 LOT 배출
            string poInfo = TxtPOInfo.Text;
            SendMessageWithRetry(() => SendPOInfoToPLC(poInfo), MaxRetries);
            LogMessage("Data sent successfully!");
        }

        // PLC로 데이터를 전송하는 메소드
        private void SendDataToPLC(int address, int value)
        {
            string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
            byte[] messageBytes = Encoding.ASCII.GetBytes(message);
            serialPort.Write(messageBytes, 0, messageBytes.Length);
            LogMessage($"Sent data to PLC: {message.Trim()}");
        }

        // PO 정보를 PLC로 전송하는 메소드
        private void SendPOInfoToPLC(string poInfo)
        {
            for (int i = 0; i < poInfo.Length; i += 2)
            {
                string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                SendDataToPLC(2310 + (i / 2), value);
            }
            LogMessage($"Sent PO info to PLC: {poInfo}");
        }

        // 메시지를 재시도 로직과 함께 전송하는 메소드
        private void SendMessageWithRetry(Action sendMessage, int maxRetries)
        {
            int attempts = 0;
            bool success = false;
            while (attempts < maxRetries && !success)
            {
                try
                {
                    sendMessage();
                    success = true;
                }
                catch (Exception ex)
                {
                    attempts++;
                    LogMessage($"Error sending message (Attempt {attempts}): {ex.Message}");
                    if (attempts >= maxRetries)
                    {
                        LogMessage("Max retry attempts reached. Giving up.");
                    }
                    else
                    {
                        Thread.Sleep(1000); // 잠시 대기 후 재시도
                    }
                }
            }
        }

        // 시리얼 포트 데이터 수신 이벤트 핸들러
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string receivedData = serialPort.ReadExisting();
            Dispatcher.Invoke(() => LogMessage($"Received data from PLC: {receivedData}"));
        }

        // 로그 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                LogListBox.Items.Add($"{DateTime.Now}: {message}");
                LogListBox.ScrollIntoView(LogListBox.Items[LogListBox.Items.Count - 1]);
            });
            // 로그를 파일로 저장
            using (System.IO.StreamWriter file = new System.IO.StreamWriter("log.txt", true))
            {
                file.WriteLine($"{DateTime.Now}: {message}");
            }
        }

        // 윈도우가 닫힐 