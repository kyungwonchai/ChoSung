r를 사용하여 onefile 옵션으로 실행 가능한 파일을 생성할 때 openpyxl과 같은 외부 라이브러리의 하위 폴더를 모두 포함시키려면, --hidden-import 플래그를 사용하거나 .spec 파일을 수정해야 합니다. 이 경우 openpyxl 라이브러리의 모든 하위 폴더를 포함시키기 위해서는 .spec 파일에서 datas 필드를 적절히 설정해야 합니다.

여기에 openpyxl을 포함시키기 위한 기본적인 PyInstaller 명령어 예시를 드리겠습니다:

shell

pyinstaller --onefile --hidden-import=openpyxl your_script.py

그리고 .spec 파일을 수정하여 openpyxl 라이브러리의 하위 폴더를 포함시키는 예시입니다:

python

# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(['your_script.py'],
             pathex=['/your/path/to/the/script'],
             binaries=[],
             datas=[('path_to_virtualenv/Lib/site-packages/openpyxl', 'openpyxl')],
             hiddenimports=['openpyxl'],
             hookspath=[],
             runtime_hooks=[],
             excludes=[],
             win_no_prefer_redirects=False,
             win_private_assemblies=False,
             cipher=block_cipher,
             noarchive=False)
pyz = PYZ(a.pure, a.zipped_data,
             cipher=block_cipher)
exe = EXE(pyz,
          a.scripts,
          [],
          exclude_binaries=True,
          name='your_script',
          debug=False,
          bootloader_ignore_signals=False,
          strip=False,
          upx=True,
          runtime_tmpdir=None,
          console=True )
coll = COLLECT(exe,
               a.binaries,
               a.zipfiles,
               a.datas,
               strip=False,
               upx=True,
               upx_exclude=[],
               name='your_script')

이 예시에서 datas 옵션에 주목하세요. 여기서 path_to_virtualenv/Lib/site-packages/openpyxl는 실제 openpyxl 라이브러리가 설치된 경로를 나타냅니다. 이 경로는 개발 환경에 따라 달라질 수 있으므로 실제 설치 경로로 변경해야 합니다.

만약 openpyxl의 모든 하위 폴더와 파일을 자동으로 찾아서 포함시키는 방법을 원한다면, 스크립트를 작성하여 .spec 파일을 생성할 때 필요한 경로를 자동으로 찾아서 추가하는 방법을 사용해야 합니다.

.spec 파일을 수정하고 pyinstaller your_script.spec 명령어를 사용하여 실행 파일을 생성하면, openpyxl 라이브러리와 그 하위 폴더를 모두 포함한 실행 파일을 얻을 수 있습니다.
