using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string connectionStringA = "Data Source=SERVER_A;Initial Catalog=db1;Integrated Security=True";
            string connectionStringB = "Data Source=SERVER_B;Initial Catalog=db2;Integrated Security=True";

            DataTable tableA = new DataTable();
            DataTable tableB = new DataTable();
            DataTable resultTable = new DataTable();
            resultTable.Columns.Add("Column1", typeof(string));
            resultTable.Columns.Add("Column2", typeof(string));
            // 필요한 컬럼을 추가로 생성

            using (SqlConnection connectionA = new SqlConnection(connectionStringA))
            using (SqlConnection connectionB = new SqlConnection(connectionStringB))
            {
                // 서버 A에서 데이터 가져오기
                string queryA = "SELECT Column1, Column2, ddd FROM aa";
                SqlCommand commandA = new SqlCommand(queryA, connectionA);
                SqlDataAdapter adapterA = new SqlDataAdapter(commandA);
                adapterA.Fill(tableA);

                // 서버 B에서 데이터 가져오기
                string queryB = "SELECT ddd FROM bb";
                SqlCommand commandB = new SqlCommand(queryB, connectionB);
                SqlDataAdapter adapterB = new SqlDataAdapter(commandB);
                adapterB.Fill(tableB);
            }

            // DataTable 간 조인 수행
            var joinedTable = from rowA in tableA.AsEnumerable()
                              join rowB in tableB.AsEnumerable() on rowA.Field<string>("ddd") equals rowB.Field<string>("ddd") into joinResult
                              from joinRow in joinResult.DefaultIfEmpty()
                              select new
                              {
                                  Column1 = rowA.Field<string>("Column1"),
                                  Column2 = rowA.Field<string>("Column2"),
                                  // 필요한 컬럼 추가
                              };

            foreach (var row in joinedTable)
            {
                DataRow newRow = resultTable.NewRow();
                newRow["Column1"] = row.Column1;
                newRow["Column2"] = row.Column2;
                // 필요한 컬럼 값 할당
                resultTable.Rows.Add(newRow);
            }

            // 결과 DataTable 이용하여 작업 수행
            foreach (DataRow row in resultTable.Rows)
            {
                string column1Value = row.Field<string>("Column1");
                string column2Value = row.Field<string>("Column2");
                // 필요한 컬럼 값 가져와서 처리

                // TODO: 데이터 처리 로직 구현
            }
        }
    }
}
