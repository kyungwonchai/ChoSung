 버튼을 추가하여 엑셀 업로드 작업을 시작하도록 설정합니다.
MainWindow.xaml

xaml

<Button Content="Upload Excel" Click="UploadExcelButton_Click"/>

이 버튼이 클릭되면 BackgroundWorker가 실행되어 엑셀 업로드 작업을 수행하고, 동시에 스플래시 화면의 프로그레스바를 업데이트합니다.
MainWindow.xaml.cs

csharp

using System.ComponentModel;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private BackgroundWorker bgWorker;

        public MainWindow()
        {
            InitializeComponent();
            bgWorker = new BackgroundWorker
            {
                WorkerReportsProgress = true
            };
            bgWorker.DoWork += BgWorker_DoWork;
            bgWorker.ProgressChanged += BgWorker_ProgressChanged;
        }

        private void BgWorker_ProgressChanged(object sender, ProgressChangedEventArgs e)
        {
            // SplashScreen에 표시할 프로그레스 업데이트
            mySplashScreen.UpdateProgress(e.ProgressPercentage);
        }

        private MySplashScreen mySplashScreen;

        private void BgWorker_DoWork(object sender, DoWorkEventArgs e)
        {
            for (int i = 0; i < 100; i++)
            {
                // 여기서 엑셀 파일에서 한 줄을 읽고 처리합니다.
                // 예를 들어, i번째 줄을 처리한다고 가정합니다.

                // 진행 상태를 보고합니다.
                bgWorker.ReportProgress(i);
            }
        }

        private void UploadExcelButton_Click(object sender, RoutedEventArgs e)
        {
            mySplashScreen = new MySplashScreen();
            mySplashScreen.Show();

            bgWorker.RunWorkerAsync();
        }
    }
}

위 코드 예시에서 BackgroundWorker의 DoWork 이벤트에서는 실제 엑셀 업로드 작업을 수행하면서, ReportProgress 메서드를 사용해 프로그레스바의 상태를 업데이트합니다. 그리고 ProgressChanged 이벤트에서는 MySplashScreen의 프로그레스바 값을 업데이트합니다.

이렇게 하면 엑셀 업로드 작업이 진행되는 동안 사용자에게 그 상태를 보여줄 수 있습니다.
