아래는 요청하신 대로 QR 모드와 전체 모드를 토글 버튼을 통해 전환할 수 있는 구현입니다. QR 모드에서는 com.budiyev.android.codescanner.CodeScannerView를 사용하여 초고속으로 QR 코드를 읽을 수 있도록 설정합니다. 이 모드 전환을 위해 XML 레이아웃 파일과 Kotlin 코드를 수정했습니다.

1. XML 레이아웃 파일 (activity_main.xml)
우선, activity_main.xml에서 토글 버튼과 카메라 프리뷰를 위한 레이아웃을 구성합니다.

xml
코드 복사
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 모드 전환 토글 버튼 -->
    <ToggleButton
        android:id="@+id/modeToggle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOn="QR 모드"
        android:textOff="전체 모드"
        android:layout_margin="16dp"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"/>

    <!-- CodeScannerView: QR 모드에서 사용할 뷰 -->
    <com.budiyev.android.codescanner.CodeScannerView
        android:id="@+id/codeScannerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"
        android:visibility="gone"/> <!-- 초기에는 보이지 않도록 설정 -->

    <!-- 전체 모드에서 사용할 PreviewView -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"/>
</RelativeLayout>
2. Kotlin 코드 (MainActivity.kt)
토글 버튼을 사용해 QR 모드와 전체 모드를 전환할 수 있도록 설정한 Kotlin 코드를 작성합니다.

kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.ToggleButton
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.budiyev.android.codescanner.CodeScanner
import com.budiyev.android.codescanner.CodeScannerView
import com.example.myapp.R
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var codeScannerView: CodeScannerView
    private lateinit var codeScanner: CodeScanner
    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var modeToggle: ToggleButton

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 뷰 초기화
        modeToggle = findViewById(R.id.modeToggle)
        codeScannerView = findViewById(R.id.codeScannerView)
        previewView = findViewById(R.id.previewView)

        cameraExecutor = Executors.newSingleThreadExecutor()

        // 초기 모드 설정: QR 모드
        modeToggle.isChecked = true
        setupQrMode()

        // 토글 버튼 클릭 시 모드 전환
        modeToggle.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                setupQrMode()
            } else {
                setupFullMode()
            }
        }
    }

    private fun setupQrMode() {
        // QR 모드 설정
        previewView.visibility = View.GONE
        codeScannerView.visibility = View.VISIBLE

        codeScanner = CodeScanner(this, codeScannerView)

        // QR 코드에 대한 설정
        codeScanner.camera = CodeScanner.CAMERA_BACK
        codeScanner.formats = CodeScanner.ALL_FORMATS
        codeScanner.isAutoFocusEnabled = true
        codeScanner.isFlashEnabled = false

        // QR 코드 스캔 리스너 설정
        codeScanner.decodeCallback = {
            runOnUiThread {
                Log.d("QRCode", "QR 코드 인식됨: ${it.text}")
            }
        }

        // 카메라 미리보기 시작
        codeScanner.startPreview()
    }

    private fun setupFullMode() {
        // 전체 모드 설정
        codeScannerView.visibility = View.GONE
        previewView.visibility = View.VISIBLE

        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            // 카메라 설정
            val preview = Preview.Builder().build()

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()

                preview.setSurfaceProvider(previewView.surfaceProvider)
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )

            } catch (exc: Exception) {
                Log.e("CameraXApp", "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    override fun onResume() {
        super.onResume()
        if (modeToggle.isChecked) {
            codeScanner.startPreview()
        }
    }

    override fun onPause() {
        super.onPause()
        if (modeToggle.isChecked) {
            codeScanner.releaseResources()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    // 권한 체크 및 요청
    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                if (modeToggle.isChecked) {
                    setupQrMode()
                } else {
                    setupFullMode()
                }
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO
        )
    }
}
3. 기능 설명
모드 전환:

ToggleButton을 통해 QR 모드와 전체 모드를 전환합니다.
QR 모드: CodeScannerView를 사용해 QR 코드를 초고속으로 읽습니다.
전체 모드: CameraX와 PreviewView를 사용해 전체 화면을 보여줍니다.
QR 코드 리더:

QR 모드에서는 CodeScannerView와 CodeScanner를 사용해 QR 코드를 읽습니다.
isAutoFocusEnabled를 사용해 자동 초점을 활성화하고, 카메라 미리보기를 시작합니다.
카메라 라이프사이클 관리:

onResume과 onPause에서 카메라 미리보기 시작 및 리소스 해제를 관리합니다.
권한 처리:

onRequestPermissionsResult에서 카메라와 오디오 권한이 승인되었는지 확인하고, 모드에 맞는 카메라 설정을 초기화합니다.
결론
이 코드 구현을 통해 사용자는 QR 코드 인식을 위한 QR 모드와 전체 화면 모드를 자유롭게 전환할 수 있습니다. QR 모드에서는 CodeScannerView를 사용해 빠르게 QR 코드를 읽을 수 있으며, 전체 모드에서는 일반적인 카메라 미리보기를 제공할 수 있습니다. 추가적인 질문이