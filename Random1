네, 알겠습니다. PC 이름 입력/저장 기능과 MySQL 5.7 데이터베이스 연동(UPDATE 및 INSERT) 기능을 모두 포함하여 프로그램을 대대적으로 업그레이드해 드리겠습니다.

핵심 로직은 OCR로 인식한 텍스트를 정해진 규칙에 따라 가공한 뒤, 정확히 2개의 숫자 값이 나왔을 때만 MySQL에 접속하여 UPDATE와 INSERT를 동시에 수행하는 것입니다.

## 1. 사전 준비: MySQL Connector 설치 💾
C#에서 MySQL 데이터베이스에 접속하려면 전용 라이브러리(Connector)를 설치해야 합니다.

Visual Studio의 솔루션 탐색기에서 프로젝트 이름(funcenvget)을 마우스 오른쪽 버튼으로 클릭 후 **'NuGet 패키지 관리...'**를 선택합니다.
찾아보기 탭에서 MySql.Data를 검색합니다.
MySql.Data 패키지를 찾아 설치합니다.
## 2. 프로젝트 설정(Settings) 추가
PC 이름과 데이터베이스 접속 정보를 저장하기 위해 설정(Settings)에 항목을 추가합니다.

프로젝트 속성 > 설정(Settings) 탭으로 이동합니다.
아래 항목들을 'User' 범위로 추가합니다. (DB 비밀번호는 보안을 위해 UI에서 직접 입력하며 저장하지 않습니다.)
이름 (Name)	형식 (Type)
PcName	string
DbServer	string
DbPort	string
DbUser	string
DbName	string
## 3. UI 변경 (MainWindow.xaml)
PC 이름과 MySQL 접속 정보를 입력할 수 있도록 UI를 확장합니다. 아래 코드를 MainWindow.xaml의 전체 내용과 교체하세요.

XML

<Window x:Class="funcenvget.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="실시간 데이터 로거 v2.0 (MySQL)" Height="680" Width="520" ResizeMode="CanMinimize"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <GroupBox Header="캡처 설정" Grid.Row="0" FontWeight="Bold">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Label Content="PC 이름:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                <TextBox x:Name="txtPcName" Grid.Row="0" Grid.Column="1" Margin="5" MaxLength="10"/>

                <Label Content="대상 창 제목:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                <TextBox x:Name="txtWindowTitle" Grid.Row="1" Grid.Column="1" Margin="5"/>

                <Label Content="캡처 영역 (X, Y):" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal">
                    <TextBox x:Name="txtX" Width="80" Margin="5" IsReadOnly="True"/>
                    <TextBox x:Name="txtY" Width="80" Margin="5" IsReadOnly="True"/>
                </StackPanel>

                <Label Content="캡처 크기 (W, H):" Grid.Row="3" Grid.Column="0" VerticalAlignment="Center"/>
                <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
                    <TextBox x:Name="txtWidth" Width="80" Margin="5" IsReadOnly="True"/>
                    <TextBox x:Name="txtHeight" Width="80" Margin="5" IsReadOnly="True"/>
                </StackPanel>

                <Button x:Name="btnSelectArea" Content="영역 설정" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="5" Padding="5" Click="btnSelectArea_Click"/>
            </Grid>
        </GroupBox>

        <GroupBox Header="MySQL 접속 설정" Grid.Row="1" FontWeight="Bold">
            <Grid Margin="5">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>

                <Label Content="서버:" Grid.Row="0" Grid.Column="0"/>
                <TextBox x:Name="txtDbServer" Grid.Row="0" Grid.Column="1" Margin="5"/>
                <Label Content="포트:" Grid.Row="0" Grid.Column="2"/>
                <TextBox x:Name="txtDbPort" Grid.Row="0" Grid.Column="3" Margin="5" Text="3306"/>
                <Label Content="사용자:" Grid.Row="1" Grid.Column="0"/>
                <TextBox x:Name="txtDbUser" Grid.Row="1" Grid.Column="1" Margin="5"/>
                <Label Content="비밀번호:" Grid.Row="1" Grid.Column="2"/>
                <PasswordBox x:Name="txtDbPassword" Grid.Row="1" Grid.Column="3" Margin="5"/>
                <Label Content="DB 이름:" Grid.Row="2" Grid.Column="0"/>
                <TextBox x:Name="txtDbName" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="3" Margin="5" Text="smd"/>
            </Grid>
        </GroupBox>

        <Button x:Name="btnStart" Content="로깅 시작" Grid.Row="2" Margin="5,15,5,5" Padding="5" FontWeight="Bold" Background="#FF4E76D8" Foreground="White" Click="btnStart_Click"/>

        <Border Grid.Row="3" BorderBrush="Gray" BorderThickness="1" Margin="5">
            <Image x:Name="imgPreview" Stretch="Uniform"/>
        </Border>

        <StatusBar Grid.Row="4">
            <StatusBarItem>
                <TextBlock x:Name="lblStatus" Text="상태: 대기 중" TextWrapping="Wrap"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
## 4. 최종 C# 코드 (MainWindow.xaml.cs)
가장 중요한 부분입니다. 기존 MainWindow.xaml.cs 코드를 모두 지우고 아래의 최종 코드로 교체하세요. 데이터 처리 및 DB 연동 로직이 모두 포함되어 있습니다.

C#

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Media.Imaging;
using System.Windows.Threading;
using Tesseract;
using funcenvget.Properties;
using System.Drawing; // System.Drawing.Common NuGet 패키지
using System.Drawing.Imaging;
using MySql.Data.MySqlClient; // MySQL Connector 사용

namespace funcenvget
{
    public partial class MainWindow : Window
    {
        // P/Invoke 선언 (이전과 동일)
        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private DispatcherTimer timer;
        private TesseractEngine ocrEngine;

        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }
        
        // ... (InitializeApp, btnSelectArea_Click, UpdatePreviewImage, BitmapToImageSource 등 이전 함수들은 그대로 유지)
        // ... 여기에 이전 답변의 해당 함수들을 붙여넣으세요. 코드가 너무 길어져 생략합니다.

        // OCR 인식 후 데이터 처리 및 DB 업로드를 호출하는 핵심 메소드
        private void ProcessOcrResult(string rawText)
        {
            // 1. '-' 기호 제거
            string processedText = rawText.Replace("-", "");

            // 2. 공백으로 분리
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);

            // 3. 분리된 값이 정확히 2개인지 확인
            if (parts.Length != 2)
            {
                lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)";
                return;
            }

            // 4. 숫자 변환 및 소수점 1자리로 자르기
            if (decimal.TryParse(parts[0], out decimal val1) && decimal.TryParse(parts[1], out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;

                // 5. DB에 업로드
                UploadToDatabase(temp, humid);
            }
            else
            {
                lblStatus.Text = $"상태: 숫자 변환 오류 ({parts[0]},{parts[1]})";
            }
        }

        // MySQL DB에 데이터를 업로드하는 함수
        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName))
            {
                lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다.";
                return;
            }

            string connectionString = $"Server={txtDbServer.Text};Port={txtDbPort.Text};Database={txtDbName.Text};Uid={txtDbUser.Text};Pwd={txtDbPassword.Password};";
            MySqlConnection conn = null;
            MySqlTransaction trans = null;

            try
            {
                conn = new MySqlConnection(connectionString);
                conn.Open();
                trans = conn.BeginTransaction();

                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;

                    // 쿼리 1: smd.repair_func_now 테이블에 UPDATE (없으면 INSERT)
                    // ON DUPLICATE KEY UPDATE 구문으로 한번에 처리
                    cmd.CommandText = "INSERT INTO smd.repair_func_now (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW()) " +
                                      "ON DUPLICATE KEY UPDATE temp1 = @temp1, humid1 = @humid1, stdtime = NOW();";
                    
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    cmd.ExecuteNonQuery();

                    // 쿼리 2: smd.repair_func_new_log 테이블에 INSERT
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    // 파라미터는 이미 추가되어 있으므로 재사용
                    cmd.ExecuteNonQuery();
                }

                trans.Commit();
                lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!";
            }
            catch (Exception ex)
            {
                trans?.Rollback(); // 오류 발생 시 트랜잭션 롤백
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                conn?.Close();
            }
        }

        // PerformLogging 수정: LogData 대신 ProcessOcrResult 호출
        private void PerformLogging()
        {
            try
            {
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero) { /* ... */ return; }
                if (IsIconic(hWnd)) { /* ... */ return; }

                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, System.Drawing.Imaging.PixelFormat.Format32bppArgb))
                {
                    // ... (캡처 로직은 동일)
                    using (var g = Graphics.FromImage(bmp)) { PrintWindow(hWnd, g.GetHdc(), 2); g.ReleaseHdc(); }

                    var cropArea = new System.Drawing.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        using (var page = ocrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            if (!string.IsNullOrWhiteSpace(rawText))
                            {
                                // [수정] 파일 로깅 대신 DB 업로드 프로세스 호출
                                ProcessOcrResult(rawText);
                            }
                            else
                            {
                                lblStatus.Text = "상태: 텍스트 인식 실패";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = $"상태: 캡처 오류! {ex.Message}";
            }
        }

        // 설정 로드/저장 로직 수정
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // 기존 로직에 추가
            txtPcName.Text = Settings.Default.PcName;
            txtDbServer.Text = Settings.Default.DbServer;
            txtDbPort.Text = Settings.Default.DbPort;
            txtDbUser.Text = Settings.Default.DbUser;
            txtDbName.Text = Settings.Default.DbName;
            // ... (기존 좌표, 창제목 등 로드)
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // 기존 로직에 추가
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.DbServer = txtDbServer.Text;
            Settings.Default.DbPort = txtDbPort.Text;
            Settings.Default.DbUser = txtDbUser.Text;
            Settings.Default.DbName = txtDbName.Text;
            // ... (기존 좌표, 창제목 등 저장)
            Settings.Default.Save();
        }
    }
}
※ 위 코드에서 생략된 부분(InitializeApp, btnSelectArea_Click 등)은 이전 답변의 코드를 그대로 사용하시면 됩니다. PerformLogging 함수는 핵심 수정사항을 반영하여 다시 넣어드렸습니다.

## 5. MySQL 테이블 준비 📜
프로그램이 정상적으로 동작하려면, MySQL 데이터베이스(smd)에 아래 두 테이블이 미리 생성되어 있어야 합니다.

repair_func_now 테이블의 line 컬럼은 PRIMARY KEY 또는 UNIQUE KEY로 지정되어야 ON DUPLICATE KEY UPDATE 구문이 정상 동작합니다.
아래 SQL 스크립트를 사용하여 테이블을 생성하세요.

SQL

-- 현재 상태를 업데이트하기 위한 테이블 (line을 PK로 설정)
CREATE TABLE smd.repair_func_now (
    `line` VARCHAR(10) NOT NULL,
    `temp1` DECIMAL(5,1) NULL,
    `humid1` DECIMAL(5,1) NULL,
    `stdtime` DATETIME NULL,
    PRIMARY KEY (`line`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- 모든 데이터를 기록하기 위한 로그 테이블
CREATE TABLE smd.repair_func_new_log (
    `id` INT NOT NULL AUTO_INCREMENT,
    `line` VARCHAR(10) NULL,
    `temp1` DECIMAL(5,1) NULL,
    `humid1` DECIMAL(5,1) NULL,
    `stdtime` DATETIME NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

## 6. 사용 방법
프로그램을 실행합니다.
PC 이름을 10자 이내로 입력합니다.
대상 창 제목을 입력하고 [영역 설정] 버튼으로 캡처할 영역을 지정합니다.
MySQL 접속 설정에 서버 IP, 포트, 사용자 ID, 비밀번호, DB 이름을 정확히 입력합니다.