움직임을 자연스럽게 처리하는 것은 사용자 경험을 향상시키는 중요한 요소입니다. C#에서 UI 애니메이션을 자연스럽게 처리하기 위해 WPF를 사용하는 것이 좋습니다. WPF는 강력한 애니메이션 시스템을 제공하므로, 이를 활용하여 깔끔한 코드로 소켓 통신과 애니메이션을 결합할 수 있습니다.

여기서는 WPF를 사용하여 클라이언트와 서버 간의 소켓 통신과 UI 애니메이션을 처리하는 예제를 보여드리겠습니다.

1. 서버 (함수를 호출할 프로세스)
서버 코드의 구조는 이전과 동일하지만, UI 애니메이션 처리를 위한 부분을 제외한 간단한 소켓 통신 코드만 포함합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

class Server
{
    static void Main()
    {
        TcpListener server = new TcpListener(IPAddress.Any, 5000);
        server.Start();
        Console.WriteLine("서버 시작...");

        while (true)
        {
            TcpClient client = server.AcceptTcpClient();
            NetworkStream stream = client.GetStream();

            byte[] buffer = new byte[1024];
            int bytesRead = stream.Read(buffer, 0, buffer.Length);
            string receivedData = Encoding.UTF8.GetString(buffer, 0, bytesRead);

            if (receivedData == "HelloFunction")
            {
                string response = HelloFunction();
                byte[] responseData = Encoding.UTF8.GetBytes(response);
                stream.Write(responseData, 0, responseData.Length);
            }

            stream.Close();
            client.Close();
        }
    }

    static string HelloFunction()
    {
        return "Hello from Server!";
    }
}
2. 클라이언트 (WPF 애플리케이션)
WPF 애플리케이션을 사용하여 UI와 애니메이션을 처리합니다. MainWindow.xaml과 MainWindow.xaml.cs 파일을 작성합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Client" Height="350" Width="525">
    <Grid>
        <Button x:Name="sendButton" Content="Send Request" Click="SendButton_Click" Width="100" Height="50" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        <TextBlock x:Name="responseTextBlock" FontSize="20" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="10"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Animation;

namespace WpfClient
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private async void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string response = await SendRequestAsync("127.0.0.1", 5000, "HelloFunction");
            responseTextBlock.Text = "서버 응답: " + response;

            // 버튼 애니메이션
            AnimateButton(sendButton);
        }

        private async Task<string> SendRequestAsync(string server, int port, string message)
        {
            try
            {
                using (TcpClient client = new TcpClient(server, port))
                using (NetworkStream stream = client.GetStream())
                {
                    byte[] dataToSend = Encoding.UTF8.GetBytes(message);
                    await stream.WriteAsync(dataToSend, 0, dataToSend.Length);

                    byte[] buffer = new byte[1024];
                    int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length);
                    return Encoding.UTF8.GetString(buffer, 0, bytesRead);
                }
            }
            catch (Exception ex)
            {
                return $"Error: {ex.Message}";
            }
        }

        private void AnimateButton(UIElement element)
        {
            DoubleAnimation animation = new DoubleAnimation
            {
                From = 1.0,
                To = 0.0,
                Duration = new Duration(TimeSpan.FromSeconds(0.5)),
                AutoReverse = true
            };
            element.BeginAnimation(UIElement.OpacityProperty, animation);
        }
    }
}
요약
이 예제에서는 WPF를 사용하여 소켓 통신과 UI 애니메이션을 결합하는 방법을 보여주었습니다. 클라이언트는 서버에 요청을 보내고 응답을 받아 UI에 표시하며, 버튼 클릭 시 애니메이션을 적용하여 사용자 경험을 향상시