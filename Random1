에 동적으로 버튼을 추가하고, 그 버튼을 Grid에 넣는 작업은 여러 단계로 이루어집니다. 다음은 C#을 사용하여 이 작업을 수행하는 과정입니다:

MSSQL에서 데이터를 읽어오는 코드를 작성합니다.
읽어온 데이터를 이용해 동적으로 버튼을 생성합니다.
생성된 버튼을 WrapPanel에 추가하고, 이 WrapPanel을 Grid에 넣습니다.
버튼 클릭 이벤트를 추가하여 클릭 시 해당 버튼의 내용을 Debug 로그로 출력합니다.
이제 C# 및 WPF를 사용하여 이 작업을 수행하는 코드 예제를 보여드리겠습니다. 코드는 Visual Studio에서 최신 C# 언어 기능을 사용하여 작성되었습니다. 다음 단계에 따라 진행하겠습니다:

데이터베이스에서 데이터 읽기:
csharp
Copy code
using System.Data.SqlClient;

// ...

public List<string> GetSort1Values()
{
    var sort1Values = new List<string>();
    string connectionString = "Your Connection String Here"; // 연결 문자열을 여기에 입력하세요.
    string query = "SELECT sort1 FROM table1";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        SqlCommand command = new SqlCommand(query, connection);
        connection.Open();
        SqlDataReader reader = command.ExecuteReader();

        while (reader.Read())
        {
            sort1Values.Add(reader["sort1"].ToString());
        }
        reader.Close();
    }
    return sort1Values;
}
WPF에 버튼 동적으로 추가:
WPF XAML 파일에서 Grid와 WrapPanel을 정의합니다:
xml
Copy code
<Grid x:Name="grid1">
    <WrapPanel x:Name="wrapPanel1" />
</Grid>
코드-비하인드에서 버튼을 생성하고 WrapPanel에 추가하는 메서드를 정의합니다:

csharp
Copy code
public void AddButtonsToWrapPanel(List<string> buttonContents)
{
    foreach (var content in buttonContents)
    {
        Button button = new Button
        {
            Content = content,
            Margin = new Thickness(5)
        };
        button.Click += Button_Click;
        wrapPanel1.Children.Add(button);
    }
}

private void Button_Click(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    Debug.WriteLine(button.Content.ToString());
}
Grid에 WrapPanel 넣기:
이미 위의 XAML 정의에서 WrapPanel이 Grid 내에 있기 때문에 추가적인 작업이 필요하지 않습니다.

앱 시작 시 데이터 로드 및 버튼 생성:

csharp
Copy code
public MainWindow()
{
    InitializeComponent();

    List<string> sort1Values = GetSort1Values();
    AddButtonsToWrapPanel(sort1Values);
}
