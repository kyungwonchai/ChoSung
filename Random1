-- FILE_ID: SQL/AppSettings_AddSupportNames_20250411093000

USE LockerManagementDB; -- 데이터베이스 이름 확인
GO

-- 기능문의 담당자 초기값 설정
IF NOT EXISTS (SELECT 1 FROM dbo.AppSettings WHERE SettingKey = 'FeatureSupportName')
    INSERT INTO dbo.AppSettings (SettingKey, SettingValue) VALUES ('FeatureSupportName', '홍길동');
ELSE
    UPDATE dbo.AppSettings SET SettingValue = '홍길동' WHERE SettingKey = 'FeatureSupportName' AND SettingValue IS NULL; -- 기존 값이 없을 경우에만 업데이트 (선택 사항)

PRINT 'FeatureSupportName 설정 확인/추가 완료.';

-- 시스템문의 담당자 초기값 설정
IF NOT EXISTS (SELECT 1 FROM dbo.AppSettings WHERE SettingKey = 'SystemSupportName')
    INSERT INTO dbo.AppSettings (SettingKey, SettingValue) VALUES ('SystemSupportName', '김철수');
ELSE
    UPDATE dbo.AppSettings SET SettingValue = '김철수' WHERE SettingKey = 'SystemSupportName' AND SettingValue IS NULL; -- 기존 값이 없을 경우에만 업데이트 (선택 사항)

PRINT 'SystemSupportName 설정 확인/추가 완료.';
GO
```

---

**2. `Models/AppSetting.cs` (최종 확인용)**


```csharp
// FILE_ID: Models/AppSetting_20250410104500
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using LockerManagementApp.Infrastructure;

namespace LockerManagementApp.Models
{
    [Table("AppSettings")]
    public class AppSetting : ViewModelBase
    {
        private string _settingKey;
        private string _settingValue;

        [Key]
        [StringLength(100)]
        public string SettingKey
        {
            get => _settingKey;
            set => SetProperty(ref _settingKey, value);
        }

        [Column(TypeName = "NVARCHAR(MAX)")]
        public string SettingValue
        {
            get => _settingValue;
            set => SetProperty(ref _settingValue, value);
        }
    }
}
```

---

**3. `Data/LockerDbContext.cs` (최종 확인용)**

(IP 로깅, 비번 로그 제외, SaveChanges 재정의 방식, `DbSet<AppSetting>` 포함 버전)


```csharp
// FILE_ID: Data/LockerDbContext_20250411092500
using LockerManagementApp.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Data.Entity.Core;
using System.Threading;
using System.ComponentModel.DataAnnotations.Schema;
using System.Net;

namespace LockerManagementApp.Data
{
    public class LockerDbContext : DbContext
    {
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }
        public DbSet<AppSetting> AppSettings { get; set; }

        private const string ConnectionStringName = "LockerDbConnection";

        public LockerDbContext() : base(GetConnectionString())
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LockerDbContext instance created.");
        }

        private static string GetConnectionString()
        {
            try { var cs = ConfigurationManager.ConnectionStrings[ConnectionStringName]; if (cs == null || string.IsNullOrWhiteSpace(cs.ConnectionString)) throw new ConfigurationErrorsException($"App.config에서 '{ConnectionStringName}' 연결 문자열 없음/비어있음."); Debug.WriteLine($"ConnectionString '{ConnectionStringName}' 로드 성공."); return cs.ConnectionString; }
            catch (ConfigurationErrorsException confEx) { Debug.WriteLine($"!!! 설정 파일 오류: {confEx.ToString()}"); throw new Exception("App.config 설정 오류.", confEx); }
            catch (Exception ex) { Debug.WriteLine($"!!! 연결 문자열 로드 중 예외: {ex.ToString()}"); throw new Exception($"App.config 연결 문자열 읽기 오류.", ex); }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LockerAssignment>().Property(p => p.UserName).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.KnoxId).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.SubPart).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Administrator).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.TransferStatus).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Details).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Remarks).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Notes).IsOptional();
            modelBuilder.Entity<AppSetting>().HasKey(s => s.SettingKey);
            base.OnModelCreating(modelBuilder);
        }

        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)
        {
            var result = base.ValidateEntity(entityEntry, items);
            if (entityEntry.Entity is LockerAssignment assignment && (entityEntry.State == EntityState.Added || entityEntry.State == EntityState.Modified)) { var userNameErrors = result.ValidationErrors.Where(err => err.PropertyName == nameof(LockerAssignment.UserName) && string.IsNullOrWhiteSpace(assignment.UserName)).ToList(); if (userNameErrors.Any()) { Debug.WriteLine($"경고: LockerAssignment(ID:{assignment.Id})의 UserName 필수 오류 무시."); foreach (var error in userNameErrors) { result.ValidationErrors.Remove(error); } } }
            return result;
        }

        #region SaveChanges Overrides for Audit Logging

        public override int SaveChanges()
        {
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기) Override 시작...");
            List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 완료."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
            else { Debug.WriteLine("  -> 추가할 로그 없음."); }

            try { Debug.WriteLine($"  -> base.SaveChanges() 호출 시도..."); var result = base.SaveChanges(); Debug.WriteLine($"  -> base.SaveChanges() 완료. 결과 = {result}"); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChanges 중 일반 오류 (동기): {ex.ToString()}"); throw; }
            finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기) Override 종료."); }
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken)
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChangesAsync(CancellationToken) Override 시작...");
             List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 완료."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
             else { Debug.WriteLine("  -> 추가할 로그 없음."); }

            try { Debug.WriteLine($"  -> base.SaveChangesAsync(cancellationToken) 호출 시도..."); var result = await base.SaveChangesAsync(cancellationToken); Debug.WriteLine($"  -> base.SaveChangesAsync(cancellationToken) 완료. 결과 = {result}"); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (OperationCanceledException) { Debug.WriteLine("SaveChangesAsync(CancellationToken) 작업 취소됨."); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChangesAsync(CancellationToken) 중 일반 오류 (비동기): {ex.ToString()}"); throw; }
            finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChangesAsync(CancellationToken) Override 종료."); }
        }

        private List<AuditLog> CreateAuditEntries()
        {
            Debug.WriteLine("  CreateAuditEntries 시작...");
            string userIdentifier = GetLocalIPAddress();
            var auditEntries = new List<AuditLog>();
            var changedEntries = ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged && e.State != EntityState.Detached).ToList();

            if (!changedEntries.Any()) { Debug.WriteLine("  CreateAuditEntries: 감지된 변경 엔티티 없음."); return auditEntries; }

            Debug.WriteLine($"  CreateAuditEntries: 감지된 변경 엔티티 수 = {changedEntries.Count}");
            var jsonSettings = new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore, PreserveReferencesHandling = PreserveReferencesHandling.None, Formatting = Formatting.None };

            foreach (var entry in changedEntries)
            {
                if (entry.Entity is AuditLog) { Debug.WriteLine("    - AuditLog 엔티티 변경 감지됨 (로깅 건너뜀)."); continue; }
                if (entry.Entity is AppSetting appSetting && (appSetting.SettingKey == "MasterKey" || appSetting.SettingKey == "NormalKey")) { Debug.WriteLine($"    - AppSetting (Key={appSetting.SettingKey}) 변경 감지됨 (로깅 건너뜀)."); continue; }

                var auditEntry = new AuditLog { Timestamp = DateTime.Now, UserName = userIdentifier, TableName = entry.Entity.GetType().Name, Action = entry.State.ToString() };
                try { auditEntry.RecordId = entry.State == EntityState.Deleted ? entry.OriginalValues["Id"]?.ToString() : entry.CurrentValues["Id"]?.ToString() ?? "N/A"; } catch (Exception ex) { Debug.WriteLine($"    - 감사 로그: 'Id' PK 조회 실패 ({auditEntry.TableName}) - {ex.Message}"); auditEntry.RecordId = "PK Error"; }
                var oldValues = new Dictionary<string, object>(); var newValues = new Dictionary<string, object>(); var affectedColumns = new List<string>();
                if (entry.State == EntityState.Added) { foreach (var pn in entry.CurrentValues.PropertyNames) newValues[pn] = entry.CurrentValues[pn]; try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Added 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; } }
                else if (entry.State == EntityState.Deleted) { foreach (var pn in entry.OriginalValues.PropertyNames) oldValues[pn] = entry.OriginalValues[pn]; try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Deleted 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; } }
                else if (entry.State == EntityState.Modified) { bool propertyChanged = false; foreach (var pn in entry.OriginalValues.PropertyNames) { var ov = entry.OriginalValues[pn]; var cv = entry.CurrentValues[pn]; if (!Equals(ov, cv)) { propertyChanged = true; affectedColumns.Add(pn); oldValues[pn] = ov; newValues[pn] = cv; } } if (propertyChanged) { auditEntry.AffectedColumns = string.Join(",", affectedColumns); try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Modified Old 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; } try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Modified New 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; } } else { Debug.WriteLine($"    - 엔티티 {auditEntry.TableName} (ID: {auditEntry.RecordId})는 Modified 상태지만 실제 값 변경 없음. 로그 건너뜀."); continue; } }
                auditEntries.Add(auditEntry);
                Debug.WriteLine($"    - 로그 생성됨: {auditEntry.TableName}, Action: {auditEntry.Action}, RecordId: {auditEntry.RecordId}, User: {auditEntry.UserName}");
            }
            UpdateLockerAssignmentTimestamps(changedEntries);
            Debug.WriteLine("  CreateAuditEntries 종료.");
            return auditEntries;
        }
        private void UpdateLockerAssignmentTimestamps(List<DbEntityEntry> changedEntries) { var lockerEntries = changedEntries.Where(e => e.Entity is LockerAssignment && (e.State == EntityState.Added || e.State == EntityState.Modified)); int count = 0; foreach (var entry in lockerEntries) { ((LockerAssignment)entry.Entity).LastUpdated = DateTime.Now; count++; } if (count > 0) Debug.WriteLine($"UpdateLockerAssignmentTimestamps: {count}개 LockerAssignment 타임스탬프 업데이트됨."); }
        private string GetLocalIPAddress() { try { var host = Dns.GetHostEntry(Dns.GetHostName()); foreach (var ip in host.AddressList) { if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork) { return ip.ToString(); } } } catch (Exception ex) { Debug.WriteLine($"!!! 로컬 IP 주소 조회 실패: {ex.Message}"); } return "Unknown IP"; }

        #endregion

        #region Error Logging Helpers
        private void LogDbUpdateException(DbUpdateException dbEx) { Debug.WriteLine($"!!! DbUpdateException 발생: {dbEx.ToString()}"); if (dbEx.InnerException != null) Debug.WriteLine($"  InnerException: {dbEx.InnerException.ToString()}"); foreach (var entry in dbEx.Entries) { Debug.WriteLine($"  - 오류 엔티티: {entry.Entity.GetType().Name}, 상태: {entry.State}"); } }
        private void LogValidationErrors(DbEntityValidationException vex) { Debug.WriteLine($"!!! DbEntityValidationException 발생: {vex.Message}"); foreach (var validationErrors in vex.EntityValidationErrors) { Debug.WriteLine($"  - 엔티티 타입: {validationErrors.Entry.Entity.GetType().Name}, 상태: {validationErrors.Entry.State}"); foreach (var validationError in validationErrors.ValidationErrors) { Debug.WriteLine($"    - 속성: {validationError.PropertyName}, 오류: {validationError.ErrorMessage}"); } } }
        #endregion
    }
}
```

---

**4. `ViewModels/HelpViewModel.cs` (신규 파일)**

`ViewModels` 폴더에 새로 추가하세요.

```csharp
// FILE_ID: ViewModels/HelpViewModel_20250411093000
using LockerManagementApp.Data;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Models;
using System;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    public class HelpViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;

        private string _authorityManagerNameDisplay;
        private string _systemManagerNameDisplay;
        private string _authorityManagerNameEdit;
        private string _systemManagerNameEdit;
        private SecureString _masterPasswordInput;
        private bool _isMasterVerified = false;
        private string _statusMessage;

        public string AuthorityManagerNameDisplay { get => _authorityManagerNameDisplay; private set => SetProperty(ref _authorityManagerNameDisplay, value); }
        public string SystemManagerNameDisplay { get => _systemManagerNameDisplay; private set => SetProperty(ref _systemManagerNameDisplay, value); }
        public string AuthorityManagerNameEdit { get => _authorityManagerNameEdit; set => SetProperty(ref _authorityManagerNameEdit, value); }
        public string SystemManagerNameEdit { get => _systemManagerNameEdit; set => SetProperty(ref _systemManagerNameEdit, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterVerified { get => _isMasterVerified; private set => SetProperty(ref _isMasterVerified, value); }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadCommand { get; }
        public ICommand CheckMasterKeyCommand { get; }
        public ICommand SaveSettingsCommand { get; }

        public HelpViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[Help] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [Help] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; LoadCommand = new RelayCommand(async _ => await LoadDataAsync(), _ => !_disposed); CheckMasterKeyCommand = new RelayCommand(async _ => await CheckMasterKeyAsync(), _ => !_disposed); SaveSettingsCommand = new RelayCommand(async _ => await SaveSettingsAsync(), _ => !_disposed && IsMasterVerified); return; }

            LoadCommand = new RelayCommand(async _ => await LoadDataAsync(), _ => !_disposed);
            CheckMasterKeyCommand = new RelayCommand(async _ => await CheckMasterKeyAsync(), _ => !_disposed);
            SaveChangesCommand = new RelayCommand(async _ => await SaveSettingsAsync(), _ => !_disposed && IsMasterVerified);

            _ = LoadDataAsync();
        }

        private async Task LoadDataAsync()
        {
            if (_context == null || _disposed || _cts.IsCancellationRequested) return;
            StatusMessage = "담당자 정보 로딩 중...";
            try
            {
                var settings = await _context.AppSettings
                                             .Where(s => s.SettingKey == "AuthorityManagerName" || s.SettingKey == "SystemManagerName")
                                             .AsNoTracking()
                                             .ToListAsync(_cts.Token);

                if (_cts.IsCancellationRequested || _disposed) return;

                AuthorityManagerNameDisplay = settings.FirstOrDefault(s => s.SettingKey == "AuthorityManagerName")?.SettingValue ?? "미지정";
                SystemManagerNameDisplay = settings.FirstOrDefault(s => s.SettingKey == "SystemManagerName")?.SettingValue ?? "미지정";
                AuthorityManagerNameEdit = AuthorityManagerNameDisplay; // 편집 필드 초기화
                SystemManagerNameEdit = SystemManagerNameDisplay; // 편집 필드 초기화
                StatusMessage = "담당자 정보 로드 완료.";
            }
            catch (OperationCanceledException) { Debug.WriteLine("LoadDataAsync (HelpVM) 작업 취소됨."); if (!_disposed) StatusMessage = "로딩 취소됨."; }
            catch (Exception ex) { StatusMessage = $"담당자 정보 로딩 오류: {ex.Message}"; if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        }

        private async Task CheckMasterKeyAsync()
        {
            if (_context == null || _disposed || _cts.IsCancellationRequested) return;
            StatusMessage = "마스터 키 확인 중...";
            try
            {
                var masterKeySetting = await _context.AppSettings.AsNoTracking().FirstOrDefaultAsync(s => s.SettingKey == "MasterKey", _cts.Token);
                if (_cts.IsCancellationRequested || _disposed) return;
                if (masterKeySetting == null || string.IsNullOrEmpty(masterKeySetting.SettingValue)) { MessageBox.Show("데이터베이스에 마스터 키(MasterKey) 설정 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); StatusMessage = "마스터 키 설정 없음."; return; }

                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);
                if (plainPassword == masterKeySetting.SettingValue)
                {
                    IsMasterVerified = true;
                    StatusMessage = "마스터 키 확인 완료. 편집 가능.";
                    MessageBox.Show("마스터 키가 확인되었습니다.", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    IsMasterVerified = false;
                    StatusMessage = "마스터 키가 일치하지 않습니다.";
                    MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                }
            }
            catch (OperationCanceledException) { Debug.WriteLine("CheckMasterKeyAsync 작업 취소됨."); StatusMessage = "확인 작업 취소됨."; }
            catch (Exception ex) { StatusMessage = $"마스터 키 확인 오류: {ex.Message}"; if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); IsMasterVerified = false; }
            finally { (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); }
        }

        private async Task SaveSettingsAsync()
        {
            if (!IsMasterVerified || _context == null || _disposed || _cts.IsCancellationRequested) return;
            StatusMessage = "담당자 정보 저장 중...";
            RaiseCanExecuteChanged();
            try
            {
                bool changed = false;
                var authSetting = await _context.AppSettings.FindAsync(_cts.Token, "AuthorityManagerName");
                if (authSetting == null) { authSetting = _context.AppSettings.Add(new AppSetting { SettingKey = "AuthorityManagerName" }); }
                if (authSetting.SettingValue != (AuthorityManagerNameEdit ?? "")) { authSetting.SettingValue = AuthorityManagerNameEdit ?? ""; changed = true; }

                var sysSetting = await _context.AppSettings.FindAsync(_cts.Token, "SystemManagerName");
                if (sysSetting == null) { sysSetting = _context.AppSettings.Add(new AppSetting { SettingKey = "SystemManagerName" }); }
                if (sysSetting.SettingValue != (SystemManagerNameEdit ?? "")) { sysSetting.SettingValue = SystemManagerNameEdit ?? ""; changed = true; }

                if (changed)
                {
                    int result = await _context.SaveChangesAsync(_cts.Token);
                    StatusMessage = $"담당자 정보 저장 완료 ({result}건).";
                    MessageBox.Show("담당자 정보가 저장되었습니다.", "저장 완료", MessageBoxButton.OK, MessageBoxImage.Information);
                    await LoadDataAsync(); // 저장 후 다시 로드하여 Display 업데이트
                }
                else
                {
                    StatusMessage = "변경된 내용이 없어 저장하지 않았습니다.";
                }
            }
            catch (OperationCanceledException) { Debug.WriteLine("SaveSettingsAsync 작업 취소됨."); StatusMessage = "저장 작업 취소됨."; }
            catch (Exception ex) { StatusMessage = $"담당자 정보 저장 오류: {ex.Message}"; if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"{StatusMessage}\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            finally { RaiseCanExecuteChanged(); }
        }

        private void RaiseCanExecuteChanged()
        {
            (LoadCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (CheckMasterKeyCommand as RelayCommand)?.RaiseCanExecuteChanged();
            (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }

        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("HelpViewModel Dispose 시작..."); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! HelpViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("HelpViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
```

---

**5. `Views/HelpWindow.xaml` (신규 파일)**

`Views` 폴더에 새로 추가하세요.

```xml
<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.HelpWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    mc:Ignorable="d"
    Title="Help / 담당자 정보" Height="350" Width="450" SizeToContent="Height"
    WindowStartupLocation="CenterOwner" ShowInTaskbar="False" ResizeMode="NoResize"
    Closing="HelpWindow_Closing">

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </dx:ThemedWindow.Resources>

    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="담당자 정보" FontSize="16" FontWeight="Bold" Margin="0,0,0,15"/>

        <Grid Grid.Row="1" Margin="0,0,0,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="기능 문의:" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <TextBlock Grid.Column="1" Text="{Binding AuthorityManagerNameDisplay}" VerticalAlignment="Center"/>
        </Grid>

        <Grid Grid.Row="2" Margin="0,0,0,20">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="시스템 문의:" FontWeight="SemiBold" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <TextBlock Grid.Column="1" Text="{Binding SystemManagerNameDisplay}" VerticalAlignment="Center"/>
        </Grid>

        <Separator Grid.Row="3"/>

        <StackPanel Grid.Row="4" Margin="0,15,0,0" Visibility="{Binding IsMasterVerified, Converter={StaticResource BooleanToVisibilityConverter}}">
            <TextBlock Text="담당자 이름 변경 (마스터 전용)" FontWeight="Bold" Margin="0,0,0,5"/>
            <Grid>
                 <Grid.ColumnDefinitions> <ColumnDefinition Width="Auto"/><ColumnDefinition Width="*"/> </Grid.ColumnDefinitions>
                 <Grid.RowDefinitions> <RowDefinition Height="Auto"/><RowDefinition Height="Auto"/> </Grid.RowDefinitions>
                 <TextBlock Grid.Row="0" Grid.Column="0" Text="기능 문의:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                 <TextBox Grid.Row="0" Grid.Column="1" Text="{Binding AuthorityManagerNameEdit, UpdateSourceTrigger=PropertyChanged}" Margin="0,3"/>
                 <TextBlock Grid.Row="1" Grid.Column="0" Text="시스템 문의:" VerticalAlignment="Center" Margin="0,0,10,0"/>
                 <TextBox Grid.Row="1" Grid.Column="1" Text="{Binding SystemManagerNameEdit, UpdateSourceTrigger=PropertyChanged}" Margin="0,3"/>
            </Grid>
            <Button Content="담당자 정보 저장" Command="{Binding SaveSettingsCommand}" HorizontalAlignment="Right" Margin="0,10,0,0"/>
        </StackPanel>

        <StackPanel Grid.Row="5" Orientation="Horizontal" Margin="0,15,0,0" HorizontalAlignment="Right" Visibility="{Binding IsMasterVerified, ConverterParameter=Inverse, Converter={StaticResource BooleanToVisibilityConverter}}">
             <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
             <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
             <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterKeyCommand}"/>
        </StackPanel>

        <Grid Grid.Row="6" Margin="0,15,0,0">
             <TextBlock Text="{Binding StatusMessage}" Foreground="Red" HorizontalAlignment="Left" VerticalAlignment="Center"/>
             <Button Content="닫기" Width="80" HorizontalAlignment="Right" Click="CloseButton_Click" IsCancel="True"/>
        </Grid>

    </Grid>
</dx:ThemedWindow>
```

---

**6. `Views/HelpWindow.xaml.cs` (신규 파일)**

`Views` 폴더에 새로 추가하세요.

```csharp
// FILE_ID: Views/HelpWindow_CS_20250411093000
using DevExpress.Xpf.Core;
using LockerManagementApp.ViewModels; // HelpViewModel 참조
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;

namespace LockerManagementApp.Views
{
    public partial class HelpWindow : ThemedWindow
    {
        public HelpWindow()
        {
            InitializeComponent();
        }

        private HelpViewModel ViewModel => DataContext as HelpViewModel;

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void HelpWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try
                {
                    disposableViewModel.Dispose();
                    Debug.WriteLine("HelpViewModel 리소스가 HelpWindow Closing에서 정리되었습니다.");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"!!! HelpViewModel Dispose 중 오류 발생 (HelpWindow Closing): {ex.Message}");
                }
            }
        }
    }
}
```

---

**7. `Views/MainWindow.xaml` (수정)**

StatusBar 안에 Help 버튼을 추가합니다.

```xml
<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxgt="http://schemas.devexpress.com/winfx/2008/xaml/grid/themekeys"
    xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
    xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    xmlns:models="clr-namespace:LockerManagementApp.Models"
    xmlns:infra="clr-namespace:LockerManagementApp.Infrastructure"
    Title="사물함 관리 프로그램 (DevExpress MVVM - .NET Framework 4.8)" Height="750" Width="1300"
    Loaded="MainWindow_Loaded" Closing="MainWindow_Closing"
    FontSize="14"
    >

    <dx:ThemedWindow.DataContext>
        <viewmodels:MainViewModel/>
    </dx:ThemedWindow.DataContext>

    <dx:ThemedWindow.Resources>
        <infra:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <infra:HighlightCellConverter x:Key="HighlightCellConverter"/>

        <Style x:Key="LightBlueHeaderStyle" TargetType="dxg:BaseGridHeader"> <Setter Property="Background" Value="LightBlue"/> <Setter Property="HorizontalContentAlignment" Value="Center"/> <Setter Property="FontWeight" Value="Bold"/> <Setter Property="Foreground" Value="Black"/> </Style>
        <Style TargetType="dxg:GridColumnHeader" BasedOn="{StaticResource LightBlueHeaderStyle}"/>
        <Style TargetType="dxg:BandHeaderControl" BasedOn="{StaticResource LightBlueHeaderStyle}"/>

        <Style x:Key="HighlightCellStyle" TargetType="dxg:CellContentPresenter">
            <Setter Property="Background">
                <Setter.Value>
                    <MultiBinding Converter="{StaticResource HighlightCellConverter}">
                        <Binding Path="Value"/>
                        <Binding Path="Column.FieldName"/>
                        <Binding Path="View.DataContext.SelectedCellValue"/>
                        <Binding Path="View.DataContext.SelectedCellColumnFieldName"/>
                    </MultiBinding>
                </Setter.Value>
            </Setter>
        </Style>

    </dx:ThemedWindow.Resources>

    <Grid>
        <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <DockPanel Grid.Row="0" LastChildFill="True">
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" Margin="5">
                 <TextBlock Text="일반 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                 <PasswordBox x:Name="NormalPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding NormalPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                 <Button Content="확인" Margin="5,0,15,0" Command="{Binding CheckNormalPasswordCommand}"/>

                <TextBlock Text="마스터 키:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <PasswordBox x:Name="MasterPasswordBox" Width="100" VerticalAlignment="Center" infra:PasswordHelper.Attach="True" infra:PasswordHelper.Password="{Binding MasterPasswordInput, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Content="확인" Margin="5,0,0,0" Command="{Binding CheckMasterPasswordCommand}"/>
            </StackPanel>
            <Border Background="LightGray" Padding="5">
                 <StackPanel Orientation="Horizontal">
                    <Button Content="🔄 새로고침" Margin="3" Command="{Binding LoadDataCommand}"/>
                    <Button Content="💾 변경 사항 저장" Margin="3" Command="{Binding SaveChangesCommand}" Visibility="{Binding IsEditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <Button Content="⚙️ 마스터 데이터 관리" Margin="15,3,3,3" Command="{Binding OpenMasterDataWindowCommand}" ToolTip="마스터 데이터(층, 구역 등)를 관리하는 새 창을 엽니다." Visibility="{Binding IsMasterModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <Button Content="🔑 비밀번호 변경" Margin="5,3,3,3" Command="{Binding OpenPasswordChangeWindowCommand}" ToolTip="마스터 키 비밀번호를 변경합니다." Visibility="{Binding IsMasterModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <Button Content="📜 로그 보기" Margin="5,3,3,3" Command="{Binding OpenLogWindowCommand}" ToolTip="데이터 변경 이력 로그를 확인합니다."/>
                    <Button Content="📊 현황 보기" Margin="15,3,3,3" Command="{Binding OpenStatusWindowCommand}" ToolTip="사물함 사용 현황을 확인합니다."/>
                    <Button Content="📄 엑셀 저장" Margin="5,3,3,3" Click="ExportExcelButton_Click" ToolTip="현재 표 내용을 엑셀 파일로 저장합니다."/>
                 </StackPanel>
            </Border>
        </DockPanel>

        <Grid Grid.Row="1" Margin="5">
            <Grid.RowDefinitions> <RowDefinition Height="Auto"/> <RowDefinition Height="*"/> </Grid.RowDefinitions>
            <Border Grid.Row="0" Background="WhiteSmoke" Padding="3">
                <StackPanel Orientation="Horizontal">
                    <Button Content="➕ 새 사물함 추가" Margin="3" Command="{Binding AddNewCommand}" Visibility="{Binding IsEditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                    <Button Content="❌ 선택 항목 삭제" Margin="3" Command="{Binding DeleteCommand}" Visibility="{Binding IsEditModeEnabled, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"/>
                </StackPanel>
            </Border>
            <dxg:GridControl Grid.Row="1" x:Name="mainGridControl" ItemsSource="{Binding LockerAssignments}" SelectedItem="{Binding SelectedAssignment, Mode=TwoWay}"
                             CurrentItemChanged="GridControl_CurrentItemChanged"
                             CustomColumnSort="GridControl_CustomColumnSort">
                <dxg:GridControl.View>
                    <dxg:TableView x:Name="mainTableView" AllowPerPixelScrolling="True" ShowGroupPanel="True" AllowEditing="True"
                                   NavigationStyle="Cell" ShowAutoFilterRow="True" NewItemRowPosition="None"
                                   ShowIndicator="True" ShowSearchPanelMode="Always"
                                   FocusedColumnChanged="TableView_FocusedColumnChanged"
                                   UseLightweightTemplates="None">
                        <dxg:TableView.RowCellMenuCustomizations>
                            <dxb:BarItemSeparator/>
                            <dxb:BarButtonItem Content="행 삭제" Command="{Binding View.DataContext.DeleteCommand}" Glyph="{dx:DXImage Svg/Actions/Delete.svg}"/>
                        </dxg:TableView.RowCellMenuCustomizations>
                    </dxg:TableView>
                </dxg:GridControl.View>
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="LockerType" Header="종류" Width="100" Fixed="Left" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource HighlightCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllLockerTypes}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Floor" Header="층" Width="60" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource HighlightCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllFloors}" DisplayMember="Name" ValueMember="Name" IsTextEditable="False" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Zone" Header="구역" Width="80" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource HighlightCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllZones}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SpecificLocation" Header="세부 위치" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" SortMode="Custom"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="UserName" Header="성명" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="KnoxId" Header="Knox ID" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="SubPart" Header="소파트" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource HighlightCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllSubParts}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Administrator" Header="관리 담당자" Width="120" HeaderStyle="{StaticResource LightBlueHeaderStyle}" CellStyle="{StaticResource HighlightCellStyle}"> <dxg:GridColumn.EditSettings> <dxe:ComboBoxEditSettings ItemsSource="{Binding AllAdministrators}" DisplayMember="Name" ValueMember="Name" IsTextEditable="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="TransferStatus" Header="전배복직" Width="100" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Details" Header="내용" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Remarks" Header="특이사항" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Notes" Header="비고" Width="150" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings HorizontalContentAlignment="Left"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LastUpdated" Header="최종 수정일시" Width="150" AllowEditing="False" ReadOnly="True" HeaderStyle="{StaticResource LightBlueHeaderStyle}"> <dxg:GridColumn.EditSettings> <dxe:DateEditSettings MaskType="DateTime" Mask="yyyy-MM-dd HH:mm:ss" MaskUseAsDisplayFormat="True" HorizontalContentAlignment="Center"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                    <dxg:GridColumn FieldName="Id" Header="ID" Visible="False" ReadOnly="True"/>
                </dxg:GridControl.Columns>
            </dxg:GridControl>
        </Grid>

        <StatusBar Grid.Row="2" Background="LightGray">
            <StatusBarItem><TextBlock Text="{Binding StatusBarText}" Margin="5,0"/></StatusBarItem>
            <StatusBarItem HorizontalAlignment="Right">
                 <StackPanel Orientation="Horizontal">
                     <TextBlock Text="기능문의:" Margin="0,0,5,0" FontWeight="SemiBold"/>
                     <TextBlock Text="{Binding AuthorityManagerName}" Margin="0,0,15,0"/>
                     <TextBlock Text="시스템문의:" Margin="0,0,5,0" FontWeight="SemiBold"/>
                     <TextBlock Text="{Binding SystemManagerName}" Margin="0,0,15,0"/>
                     <Button Content="Help" Padding="5,0" Click="HelpButton_Click"/>
                 </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>

</dx:ThemedWindow>
```

---

**8. `Views/MainWindow.xaml.cs` (수정)**

`HelpButton_Click` 이벤트 핸들러를 추가합니다.

```csharp
// FILE_ID: Views/MainWindow_CS_20250411093000
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using DevExpress.Xpf.Printing;
using DevExpress.XtraPrinting;
using DevExpress.Utils;
using System.Collections.Generic;
using System.Linq;

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try { disposableViewModel.Dispose(); }
                catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel Dispose 오류: {ex.Message}"); }
            }
        }

        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            string newFieldName = e.NewColumn?.FieldName;
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            var newItem = e.NewItem as LockerAssignment;
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        private void ExportExcelButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog { Filter = "Excel Workbook (*.xlsx)|*.xlsx", FileName = $"사물함현황_{DateTime.Now:yyyyMMdd}.xlsx", Title = "엑셀 파일 저장" };
            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                GridSortInfo[] originalSortInfo = null; int originalGroupCount = 0; GridControl grid = mainGridControl; // 이름 변경됨
                PrintingSystemBase printingSystem = new PrintingSystemBase(); PrintableControlLink link1 = null; PrintableControlLink link2 = null;
                try { if(ViewModel != null) ViewModel.StatusBarText = "엑셀 파일 생성 중..."; link1 = new PrintableControlLink((TableView)mainTableView) { SheetName = "전체시트" }; originalSortInfo = grid.SortInfo.ToArray(); originalGroupCount = grid.GroupCount; grid.ClearGrouping(); grid.GroupBy("SubPart"); grid.ExpandAllGroups(); link2 = new PrintableControlLink((TableView)mainTableView) { SheetName = "소파트별시트" }; var links = new List<IPrintable> { link1, link2 }; var compositeLink = new CompositeLink(links); compositeLink.PrintingSystemBase = printingSystem; var options = new XlsxExportOptionsEx { ExportType = DevExpress.Export.ExportType.DataAware, ShowGridLines = true, ShowColumnHeaders = DefaultBoolean.True, ShowGroupSummaries = DefaultBoolean.True }; compositeLink.ExportToXlsx(filePath, options); if(ViewModel != null) ViewModel.StatusBarText = "엑셀 파일 저장 완료."; MessageBox.Show($"엑셀 파일 저장 완료:\n{filePath}", "저장 성공", MessageBoxButton.OK, MessageBoxImage.Information); }
                catch (Exception ex) { if(ViewModel != null) ViewModel.StatusBarText = "엑셀 파일 저장 오류."; MessageBox.Show($"엑셀 파일 저장 중 오류 발생:\n{ex.ToString()}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error); }
                finally { link1?.Dispose(); link2?.Dispose(); printingSystem?.Dispose(); try { grid.ClearGrouping(); if (originalSortInfo != null) { grid.SortInfo.Clear(); foreach(var sortInfo in originalSortInfo) { grid.SortInfo.Add(sortInfo); } } Debug.WriteLine("Grid layout restored after export."); } catch(Exception layoutEx) { Debug.WriteLine($"!!! 그리드 레이아웃 복구 중 오류: {layoutEx.Message}"); } }
            }
        }

        private void GridControl_CustomColumnSort(object sender, CustomColumnSortEventArgs e)
        {
            if (e.Column.FieldName == "SpecificLocation")
            {
                e.Handled = true;
                string value1 = e.Value1 as string;
                string value2 = e.Value2 as string;

                if (string.IsNullOrEmpty(value1) && string.IsNullOrEmpty(value2)) { e.Result = 0; return; }
                if (string.IsNullOrEmpty(value1)) { e.Result = -1; return; }
                if (string.IsNullOrEmpty(value2)) { e.Result = 1; return; }

                string prefix1 = new string(value1.TakeWhile(c => !char.IsDigit(c)).ToArray());
                string prefix2 = new string(value2.TakeWhile(c => !char.IsDigit(c)).ToArray());
                string numberPart1 = new string(value1.SkipWhile(c => !char.IsDigit(c)).ToArray());
                string numberPart2 = new string(value2.SkipWhile(c => !char.IsDigit(c)).ToArray());

                int prefixCompare = string.Compare(prefix1, prefix2, StringComparison.OrdinalIgnoreCase);
                if (prefixCompare != 0) { e.Result = prefixCompare; return; }

                int.TryParse(numberPart1, out int number1);
                int.TryParse(numberPart2, out int number2);
                e.Result = number1.CompareTo(number2);
            }
        }

        /// <summary>
        /// 신규: Help 버튼 클릭 이벤트 핸들러
        /// </summary>
        private void HelpButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                using (var helpVM = new HelpViewModel()) // HelpViewModel은 IDisposable 구현 가정
                {
                    var helpWindow = new HelpWindow
                    {
                        DataContext = helpVM,
                        Owner = this // MainWindow
                    };
                    helpWindow.ShowDialog();
                    // Help 창에서 변경된 내용(담당자 이름)을 메인 창에 즉시 반영하려면
                    // MainViewModel의 관련 속성을 다시 로드해야 함
                    ViewModel?.LoadAppSettingsAsync(); // MainViewModel에 해당 메서드 필요
                }
            }
            catch (Exception ex)
            {
                if (!App.IsShuttingDown && ViewModel != null && !ViewModel._disposed) // ViewModel null 체크 추가
                    MessageBox.Show($"Help 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                else
                    Debug.WriteLine($"종료 중 Help 창 열기 오류 무시됨: {ex.Message}");
            }
        }
    }
}
```

**핵심 변경 사항:**

* **`Views/MainWindow.xaml`:** 하단 `StatusBar` 오른쪽에 `StackPanel`을 추가하고, 그 안에 "기능문의:", "시스템문의:" 라벨과 담당자 이름을 보여줄 `TextBlock`(각각 `AuthorityManagerName`, `SystemManagerName`에 바인딩), 그리고 "Help" 버튼(`Click="HelpButton_Click"`)을 배치했습니다.
* **`Views/MainWindow.xaml.cs`:** `HelpButton_Click` 이벤트 핸들러를 추가했습니다. 이 핸들러는 `HelpViewModel`과 `HelpWindow`를 생성하고 `ShowDialog()`로 모달 창을 엽니다. 창이 닫힌 후에는 `MainViewModel`의 `LoadAppSettingsAsync()` 메서드(이전 단계에서 추가됨)를 호출하여 혹시 변경되었을 수 있는 담당자 이름을 상태 표시줄에 새로고침합니다.