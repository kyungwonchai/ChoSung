Express WPF 차트를 사용하여 실시간으로 데이터를 업데이트하고, 각 차트에 'T'와 'B' 구분에 따른 두 개의 시리즈를 표시하는 전체 코드를 제공하겠습니다. 이 코드는 데이터 소스를 연속적으로 업데이트하고, 각 데이터 포인트가 추가될 때마다 차트가 최신 상태를 반영하도록 설정합니다.

1. 데이터 클래스 및 초기 설정
먼저, 차트에 사용될 데이터를 정의하는 클래스를 생성합니다.

csharp
Copy code
public class ChartData
{
    public DateTime FileTime { get; set; }
    public double CTValue { get; set; }
    public string Type { get; set; }
    // 추가 필요한 속성
}
2. 데이터 관리 및 실시간 업데이트
ObservableCollection을 사용하여 실시간으로 데이터를 관리합니다.

csharp
Copy code
ObservableCollection<ChartData> dataSource = new ObservableCollection<ChartData>();

// 실시간 데이터 업데이트 로직
void UpdateData(ChartData newData)
{
    dataSource.Add(newData);
    if (dataSource.Count > 1000)
    {
        dataSource.RemoveAt(0);
    }
}
3. XAML 구성
XAML에서는 두 개의 차트를 세로로 배열합니다.

xml
Copy code
<Window xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts">
    <StackPanel>
        <!-- 첫 번째 차트 (Type T) -->
        <dxc:ChartControl x:Name="chartT">
            <dxc:XYDiagram2D>
                <dxc:LineSeries2D DisplayName="T" ArgumentDataMember="FileTime" ValueDataMember="CTValue"/>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
        <!-- 두 번째 차트 (Type B) -->
        <dxc:ChartControl x:Name="chartB">
            <dxc:XYDiagram2D>
                <dxc:LineSeries2D DisplayName="B" ArgumentDataMember="FileTime" ValueDataMember="CTValue"/>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
    </StackPanel>
</Window>
4. 차트 설정 및 데이터 바인딩
마지막으로, C# 코드에서 각 차트의 시리즈에 데이터 소스를 바인딩합니다.

csharp
Copy code
// 각 차트에 대한 시리즈 설정 및 데이터 바인딩
void SetupCharts()
{
    var seriesT = new LineSeries2D { DisplayName = "T" };
    seriesT.DataSource = dataSource.Where(item => item.Type == "T");
    chartT.Diagram.Series.Add(seriesT);

    var seriesB = new LineSeries2D { DisplayName = "B" };
    seriesB.DataSource = dataSource.Where(item => item.Type == "B");
    chartB.Diagram.Series.Add(seriesB);
}
5. 데이터 업데이트 메커니즘
실제 어플리케이션에서는 UpdateData 메소드를 주기적으로 호출하거나, 데이터 소스로부터 새 데이터를 받을 때마다 호출해야 합니다. 예를 들어, 타이머 또는 이벤트 기반 메커니즘을 사용할 수 있습니다.

이 코드는 기본적인 구조를 제공합니다. 실제 사용 시에는 차트의 축 범위, 모양, 툴팁 형식 등을 설정할 필요가 있으며, 실제 데이터 소스와의 통합 방법에 따라 추가적인 수정이 필요할 수 있습니다. DevExpress의 공