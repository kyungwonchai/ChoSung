다음은 MSSQL 데이터베이스에서 데이터를 가져와 Android Compose UI에 표시하는 전체 코드를 포함한 예제입니다. 이를 통해 이미지 데이터를 가져와 화면에 표시하고, 확대/축소 및 드로잉 기능을 구현할 수 있습니다.

프로젝트 설정
먼저, Android Studio에서 새 프로젝트를 생성합니다. 그런 다음 MainActivity.kt 파일을 설정하고 필요한 의존성을 추가합니다.

build.gradle (앱 수준)
gradle
코드 복사
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.mssqlimageapp"
        minSdk 24
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.compose.ui:ui:1.0.5'
    implementation 'androidx.compose.material:material:1.0.5'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.0.5'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'net.sourceforge.jtds:jtds:1.3.1'
    implementation 'androidx.compose.foundation:foundation:1.0.5'
    implementation 'androidx.compose.runtime:runtime-livedata:1.0.5'
    implementation 'androidx.compose.ui:ui-tooling:1.0.5'
    implementation 'androidx.compose.ui:ui-graphics:1.0.5'
}
MainActivity.kt
kotlin
코드 복사
package com.example.mssqlimageapp

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.text.BasicText
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import com.example.mssqlimageapp.ui.theme.MSSQLImageAppTheme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import kotlin.math.roundToInt

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MSSQLImageAppTheme {
                Surface(color = MaterialTheme.colors.background) {
                    ImageListScreen()
                }
            }
        }
    }
}

@Composable
fun ImageListScreen() {
    var imageList by remember { mutableStateOf(listOf<ImageData>()) }
    var selectedImage by remember { mutableStateOf<Bitmap?>(null) }

    val scope = rememberCoroutineScope()

    LaunchedEffect(Unit) {
        imageList = fetchDataFromDatabase()
    }

    Column {
        LazyColumn(modifier = Modifier.weight(1f)) {
            items(imageList.size) { index ->
                val imageData = imageList[index]
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp)
                ) {
                    Text(imageData.imageTitle, modifier = Modifier.weight(1f))
                    Text(imageData.datetime, modifier = Modifier.weight(1f))
                    Button(onClick = {
                        scope.launch {
                            selectedImage = fetchImageFromDatabase(imageData.imageTitle, imageData.datetime)
                        }
                    }) {
                        Text("Load Image")
                    }
                }
            }
        }
        selectedImage?.let { bitmap ->
            ImageDisplayScreen(bitmap = bitmap)
        }
    }
}

data class ImageData(val imageTitle: String, val datetime: String)

suspend fun fetchDataFromDatabase(): List<ImageData> {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.createStatement()
        val resultSet: ResultSet = statement.executeQuery("EXEC yourProcedure")

        val imageList = mutableListOf<ImageData>()
        while (resultSet.next()) {
            val imageTitle = resultSet.getString("imagetitle")
            val datetime = resultSet.getString("datetime1")
            imageList.add(ImageData(imageTitle, datetime))
        }
        connection.close()
        imageList
    }
}

suspend fun fetchImageFromDatabase(imageTitle: String, datetime: String): Bitmap {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.prepareCall("{call yourImageProcedure(?, ?)}")
        statement.setString(1, imageTitle)
        statement.setString(2, datetime)
        val resultSet: ResultSet = statement.executeQuery()
        
        var bitmap: Bitmap? = null
        if (resultSet.next()) {
            val blob = resultSet.getBlob("imageColumn")
            val byteArray = blob.binaryStream.readBytes()
            bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
        }
        connection.close()
        bitmap ?: throw Exception("Image not found")
    }
}

@Composable
fun ImageDisplayScreen(bitmap: Bitmap) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    
    Box(modifier = Modifier
        .fillMaxSize()
        .pointerInput(Unit) {
            detectTransformGestures { _, pan, zoom, _ ->
                scale *= zoom
                offset = Offset(offset.x + pan.x, offset.y + pan.y)
            }
        }
    ) {
        Image(
            bitmap = bitmap.asImageBitmap(),
            contentDescription = null,
            modifier = Modifier
                .offset { IntOffset(offset.x.roundToInt(), offset.y.roundToInt()) }
                .graphicsLayer(
                    scaleX = scale,
                    scaleY = scale,
                    translationX = offset.x,
                    translationY = offset.y
                )
        )
    }
}
UI 테마 설정
Compose 테마를 설정하여 MSSQLImageAppTheme가 빨간색을 사용하는 테마를 설정합니다.

Theme.kt
kotlin
코드 복사
package com.example.mssqlimageapp.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material.MaterialTheme
import androidx.compose.material.darkColors
import androidx.compose.material.lightColors
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val DarkColorPalette = darkColors(
    primary = Color.Red,
    primaryVariant = Color.DarkRed,
    secondary = Color.Red
)

private val LightColorPalette = lightColors(
    primary = Color.Red,
    primaryVariant = Color.DarkRed,
    secondary = Color.Red
)

@Composable
fun MSSQLImageAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) {
        DarkColorPalette
    } else {
        LightColorPalette
    }

    MaterialTheme(
        colors = colors,
        typography = Typography,
        shapes = Shapes,
        content = content
    )
}
이제 전체 코드를 포함하고 있으며, 데이터베이스에서 데이터를 가져와 표시하고, 이미지를 확대/축소 및 드로잉할 수 있는 기능을 갖춘 Android Compose UI를 완성했습니다. 이 코드를 Android Studio에서 빌드하고 실행하면 원하는 기능을 확인할 수 있습니