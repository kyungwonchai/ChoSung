 가져온 데이터를 파싱하여 C#의 DataTable에 행과 열을 동적으로 생성하고, 그 결과를 DevExpress WPF GridControl에 표시하는 방법을 설명하겠습니다.

데이터가 ^로 구분된 레코드이고 각 레코드 내에서 :로 구분된 키-값 쌍이라고 가정하겠습니다. 첫 번째 레코드는 DataTable의 컬럼 이름을 제공하고, 이후 레코드는 데이터를 제공합니다.

MSSQL에서 데이터 가져오기:

Table_log1에서 데이터를 가져옵니다.
첫 번째 레코드로 DataTable의 컬럼 생성:

첫 번째 레코드를 분석하여 DataTable의 컬럼을 생성합니다.
이후 레코드로 데이터 채우기:

나머지 레코드를 분석하여 DataTable에 데이터를 추가합니다.
DevExpress GridControl에 DataTable 바인딩:

완성된 DataTable을 GridControl에 바인딩합니다.
MSSQL 데이터 가져오기
csharp
Copy code
string connectionString = "YourConnectionStringHere";
string query = "SELECT LogColumn FROM Table_log1";

DataTable dataTable = new DataTable();
using (SqlConnection connection = new SqlConnection(connectionString))
{
    SqlCommand command = new SqlCommand(query, connection);
    connection.Open();
    SqlDataReader reader = command.ExecuteReader();

    // 첫 번째 레코드 처리
    if (reader.Read())
    {
        string firstRow = reader["LogColumn"].ToString();
        string[] columns = firstRow.Split('^');

        foreach (string column in columns)
        {
            string columnName = column.Split(':')[0].Trim();
            dataTable.Columns.Add(columnName, typeof(string));
        }
    }

    // 이후 레코드 처리
    while (reader.Read())
    {
        string rowData = reader["LogColumn"].ToString();
        string[] cellData = rowData.Split('^');
        DataRow newRow = dataTable.NewRow();

        for (int i = 0; i < cellData.Length; i++)
        {
            string value = cellData[i].Split(':')[1].Trim();
            newRow[i] = value;
        }

        dataTable.Rows.Add(newRow);
    }
}
DevExpress GridControl에 DataTable 바인딩
XAML에서 GridControl을 정의한 후, C# 코드에서 DataTable을 바인딩합니다.

xml
Copy code
<dxg:GridControl x:Name="gridControl">
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True"/>
    </dxg:GridControl.View>
</dxg:GridControl>
C# 코드에서:

csharp
Copy code
gridControl.ItemsSource = dataTable;
이 접근 방식으로, MSSQL에서 가져온 복잡한 문자열 데이터를 분석하여 동적으로 DataTable을 생성하고, 이를 DevExpress GridControl에 표시할 수 