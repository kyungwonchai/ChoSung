플리케이션 매니페스트(App.manifest) 수정
프로젝트에 app.manifest 파일을 추가하고 실행 수준(level)을 requireAdministrator로 변경하여 앱이 항상 관리자 권한으로 실행되도록 설정할 수 있습니다.

솔루션 탐색기에서 프로젝트를 마우스 오른쪽 버튼으로 클릭합니다.

추가 > 새 항목을 선택합니다.

애플리케이션 매니페스트 파일을 선택하고 추가합니다. (app.manifest 파일이 생성됩니다.)

생성된 app.manifest 파일을 열고 <requestedExecutionLevel> 부분을 찾습니다.

level 속성을 asInvoker에서 **requireAdministrator**로 수정합니다.

XML

<requestedPrivileges xmlns="urn:schemas-microsoft-com:asm.v3">
    <requestedExecutionLevel level="requireAdministrator" uiAccess="false" />
</requestedPrivileges>
이제 애플리케이션을 빌드하고 실행하면, 실행 시 관리자 권한을 요구하는 UAC 프롬프트가 나타나게 됩니다. 사용자가 '예'를 누르면 앱이 관리자 권한으로 실행되어 net use와 shutdown 명령어를 문제없이 사용할 수 있습니다.

2. ProcessStartInfo를 이용한 권한 상승
애플리케이션 자체는 일반 권한으로 실행하되, 특정 명령어만 관리자 권한으로 실행하고 싶을 때 사용하는 방법입니다.

ProcessStartInfo 클래스의 Verb 속성을 "runas"로 설정하면 해당 프로세스를 관리자 권한으로 실행하도록 요청할 수 있습니다.

C#

using System.Diagnostics;

// ... 버튼 클릭 이벤트 핸들러 등 ...
private void ShutdownButton_Click(object sender, EventArgs e)
{
    try
    {
        // 1. net use 명령어 실행
        ProcessStartInfo netUsePsi = new ProcessStartInfo("net.exe", "use Z: \\\\server\\share");
        netUsePsi.CreateNoWindow = true;
        netUsePsi.UseShellExecute = false; // ShellExecute를 false로 해야 직접 실행 가능
        Process.Start(netUsePsi)?.WaitForExit();

        // 2. shutdown 명령어 실행 (관리자 권한 필요)
        ProcessStartInfo shutdownPsi = new ProcessStartInfo("shutdown.exe", "/s /t 0");
        shutdownPsi.Verb = "runas"; // 이 부분이 관리자 권한으로 실행을 요청합니다.
        Process.Start(shutdownPsi);
    }
    catch (Exception ex)
    {
        // 사용자가 UAC 프롬프트에서 '아니요'를 클릭하면 예외가 발생할 수 있습니다.
        MessageBox.Show($"오류가 발생했습니다: {ex.Message}");
    }