ttings 클래스는 App.config에서 설정을 읽고 저장할 때 사용할 커스텀 클래스입니다. 이를 직접 정의해야 합니다. 제가 누락한 부분을 보충하고 다시 전체 코드 예제를 제공하겠습니다.

Settings 클래스는 COM 포트 이름과 BaudRate 값을 저장하는 역할을 하며, 이 값을 App.config 파일로부터 읽고 저장할 때 사용됩니다. 이 클래스를 직접 정의해야 합니다.

1. Settings.cs (설정 저장 클래스)
csharp
코드 복사
public class Settings
{
    public string PortName { get; set; }
    public int BaudRate { get; set; }
}
이제 이 Settings 클래스를 사용하여 COM 포트 설정 값을 저장하고 불러올 수 있습니다.

전체 코드 예시 (App.config 이용)
App.config (프로젝트 파일에 추가)
xml
코드 복사
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- COM 포트 설정 -->
    <add key="ComPortName" value="COM3"/>
    <add key="BaudRate" value="9600"/>
  </appSettings>
</configuration>
SettingsManager.cs (설정 관리 클래스)
csharp
코드 복사
using System;
using System.Configuration;

public static class SettingsManager
{
    // COM 포트 설정을 불러오는 함수
    public static Settings LoadSettings()
    {
        try
        {
            // App.config에서 포트 이름과 BaudRate 불러오기
            string portName = ConfigurationManager.AppSettings["ComPortName"];
            string baudRateString = ConfigurationManager.AppSettings["BaudRate"];
            int baudRate = int.Parse(baudRateString);

            return new Settings
            {
                PortName = portName,
                BaudRate = baudRate
            };
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 불러오기 실패: {ex.Message}");
            return null;
        }
    }

    // COM 포트 설정을 저장하는 함수
    public static void SaveSettings(Settings settings)
    {
        try
        {
            // 현재 설정 파일을 불러옴
            var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);

            // App.config에서 설정값을 수정
            config.AppSettings.Settings["ComPortName"].Value = settings.PortName;
            config.AppSettings.Settings["BaudRate"].Value = settings.BaudRate.ToString();

            // 수정된 설정을 저장
            config.Save(ConfigurationSaveMode.Modified);
            ConfigurationManager.RefreshSection("appSettings");

            msgvs.Instance.LogT5($"설정 저장 완료: {settings.PortName}, {settings.BaudRate}");
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 저장 실패: {ex.Message}");
        }
    }
}
MainViewModel.cs (설정 불러오기 및 저장 로직 포함)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    private ComPortMergeOI _comPort;
    private bool _isComPortConfigured = false;

    public ObservableCollection<CommandModel> UnprocessedCommands { get; set; }
    public ICommand OpenConfigCommand { get; set; }

    public MainViewModel()
    {
        UnprocessedCommands = new ObservableCollection<CommandModel>();
        OpenConfigCommand = new RelayCommand(OpenConfigWindow);

        // 프로그램 시작 시 설정을 불러옴
        LoadComPortSettings();
    }

    // COM 포트 설정을 불러오는 함수
    private void LoadComPortSettings()
    {
        var settings = SettingsManager.LoadSettings();

        if (settings != null)
        {
            try
            {
                _comPort = new ComPortMergeOI(settings.PortName, settings.BaudRate);
                _comPort.OpenPort();
                _isComPortConfigured = true;
                msgvs.Instance.LogT5($"COM 포트 {settings.PortName} 열림");
            }
            catch (Exception ex)
            {
                msgvs.Instance.LogT5($"포트 열기 오류: {ex.Message}");
                OpenConfigWindow(); // 설정된 포트가 잘못되었을 경우 설정창을 띄움
            }
        }
        else
        {
            msgvs.Instance.LogT5("COM 포트 설정이 없습니다.");
            OpenConfigWindow(); // 설정이 없을 경우 설정창을 띄움
        }
    }

    // 설정창을 열고 설정을 저장하는 함수
    private void OpenConfigWindow()
    {
        var configWindow = new ComPortConfigWindow(); // 설정창 인스턴스
        if (configWindow.ShowDialog() == true)
        {
            string portName = configWindow.SelectedPortName;
            int baudRate = configWindow.SelectedBaudRate;

            _comPort = new ComPortMergeOI(portName, baudRate);
            _comPort.OpenPort();
            _isComPortConfigured = true;

            // 설정 저장 (App.config에)
            var settings = new Settings { PortName = portName, BaudRate = baudRate };
            SettingsManager.SaveSettings(settings);

            msgvs.Instance.LogT5($"COM 포트 {portName} 설정 및 저장 완료");
        }
    }
}
4. ComPortConfigWindow.xaml.cs (설정창에서 설정 완료 시 저장)
csharp
코드 복사
private void OnSetButtonClick(object sender, RoutedEventArgs e)
{
    if (PortComboBox.SelectedItem != null && BaudRateComboBox.SelectedItem != null)
    {
        SelectedPortName = PortComboBox.SelectedItem.ToString();
        SelectedBaudRate = (int)BaudRateComboBox.SelectedItem;

        this.DialogResult = true;
        this.Close();
    }
    else
    {
        MessageBox.Show("포트와 BaudRate를 선택해주세요.");
    }
}
설명:
Settings 클래스 정의: COM 포트 설정 정보를 담는 클래스를 별도로 정의하여 이를 설정 파일에서 불러오거나 저장할 수 있습니다.
App.config 사용: SettingsManager 클래스는 App.config 파일의 appSettings 섹션을 사용하여 COM 포트 설정을 저장하고 불러옵니다.
설정 불러오기 및 저장: 프로그램이 실행될 때 저장된 설정을 불러와 포트를 열고, 설정이 없거나 잘못된 경우 설정 창을 띄웁니다. 설정 완료 후에는 이를 다시 App.config에 저장합니다.
설정 창: 설정창에서 사용자가 선택한 COM 포트와 BaudRate를 설정하고 저장하며, 그 값은 App.config에 영구적으로 저장됩니다.
이렇게 설정을 관리하면 애플리케이션 실행 중 설정을 불러오고, 사용자가 설정을 변경하면 이를 저장하여 다음 실행 시에도 유지됩니