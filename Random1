로젝트를 완성할 수 있도록 필요한 모든 코드를 주석과 함께 상세히 설명하겠습니다.

프로젝트 설정
1. 프로젝트 수준 build.gradle
프로젝트의 빌드스크립트를 설정합니다. Kotlin 버전과 Gradle 플러그인을 설정합니다.

groovy
코드 복사
// 프로젝트 루트의 build.gradle 파일
buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
2. 모듈 수준 build.gradle
Compose와 접근성 서비스를 사용하기 위해 필요한 종속성을 추가합니다.

groovy
코드 복사
// 모듈(app)의 build.gradle 파일
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-android-extensions'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.btscannerapp"
        minSdk 16 // API 16 이상을 지원하도록 설정
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = '1.3.2' // Compose 버전 설정
    }

    buildFeatures {
        compose true // Compose 사용 설정
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation 'androidx.compose.ui:ui:1.3.2'
    implementation 'androidx.compose.material:material:1.3.2'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.3.2'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.4.0'
    implementation 'androidx.navigation:navigation-compose:2.4.0-alpha10'
    implementation 'androidx.compose.runtime:runtime-livedata:1.3.2'

    androidTestImplementation 'androidx.compose.ui:ui-test-junit4:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-tooling:1.3.2'
    debugImplementation 'androidx.compose.ui:ui-test-manifest:1.3.2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
접근성 서비스 설정
3. AndroidManifest.xml
블루투스 및 접근성 권한을 추가하고, 접근성 서비스를 설정합니다.

xml
코드 복사
<!-- AndroidManifest.xml 파일 -->
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.btscannerapp">

    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BTScannerApp">

        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".MyAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>

</manifest>
4. 접근성 서비스 설정 파일
res/xml/accessibility_service_config.xml 파일을 추가합니다.

xml
코드 복사
<!-- 접근성 서비스 설정 파일 -->
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name" <!-- 대상 앱의 패키지 이름 -->
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
애플리케이션 코드 작성
5. MainActivity.kt
블루투스 스캐너에서 데이터를 읽고 접근성 서비스를 통해 다른 앱의 입력 창에 값을 넣는 로직을 작성합니다.

kotlin
코드 복사
// MainActivity.kt
package com.example.btscannerapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : AppCompatActivity() {

    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
6. MyAccessibilityService.kt
접근성 서비스 클래스에서 다른 앱의 입력 창에 값을 넣는 기능을 구현합니다.

kotlin
코드 복사
// MyAccessibilityService.kt
package com.example.btscannerapp

import android.accessibilityservice.AccessibilityService
import android.os.Bundle
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class MyAccessibilityService : AccessibilityService() {

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // 이벤트 처리
    }

    override fun onInterrupt() {
        // 인터럽트 처리
    }

    fun setTextToInputField(packageName: String, text: String) {
        val rootNode = rootInActiveWindow ?: return
        val nodeList = ArrayList<AccessibilityNodeInfo>()
        findNodesByText(rootNode, packageName, nodeList)

        for (node in nodeList) {
            if (node.className == "android.widget.EditText") {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,
                    text
                )
                node.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
            }
        }
    }

    private fun findNodesByText(
        node: AccessibilityNodeInfo,
        packageName: String,
        nodeList: ArrayList<AccessibilityNodeInfo>
    ) {
        if (node.packageName == packageName) {
            nodeList.add(node)
        }
        for (i in 0 until node.childCount) {
            findNodesByText(node.getChild(i), packageName, nodeList)
        }
    }
}
추가 설명
AndroidManifest.xml 파일에서는 블루투스 권한과 접근성 서비스 권한을 추가합니다. 접근성 서비스는 다른 앱의 UI 요소에 접근할 수 있도록 합니다.
accessibility_service_config.xml 파일에서는 접근성 서비스의 설정을 정의합니다. 대상 앱의 패키지 이름을 정확히 지정해야 합니다.
MainActivity.kt 파일에서는 블루투스 스캐너에서 데이터를 읽어오는 로직과 접근성 서비스를 시작하는 코드를 작성합니다.
MyAccessibilityService.kt 파일에서는 다른 앱의 입력 창에 데이터를 넣는 기능을 구현합니다.
이 모든 설정을 완료한 후에는 Build > Clean Project와 Build > Rebuild Project를 통해 프로젝트를 빌드하고, APK를 생성할 수 있습니다.