PF DevExpress 22.2 리본 폼에서 버튼을 개인별로 즐겨찾기 관리하려면, 다음과 같은 구조와 구현 방법을 사용할 수 있습니다. 이 접근법은 전문적이고 합리적이며, 사용자가 PC에 개인적인 설정을 저장하고 관리할 수 있도록 설계되었습니다.

구현 목표
즐겨찾기 버튼 추가/제거 기능 구현

리본 버튼에 우클릭 메뉴를 추가하여 즐겨찾기에 버튼을 추가/제거.
즐겨찾기는 리본의 별도 페이지(Group)로 표시.
사용자별 설정 저장

PC의 특정 폴더(예: C:\Users\<사용자>\AppData\Local\MyRibbonApp)에 설정을 JSON 파일로 저장.
동적 로드 및 상태 유지

애플리케이션 시작 시 즐겨찾기 정보를 읽어 UI에 반영.
애플리케이션 종료 시 변경된 즐겨찾기를 파일로 저장.
UI와 기능 통합

MVVM 패턴을 유지하면서 사용자 입력과 데이터 동기화.
1. 파일 구조
View: MainWindow.xaml (리본 UI 정의)
ViewModel: MainViewModel.cs (명령 및 데이터 관리)
Model: FavoriteManager.cs (즐겨찾기 관리 로직)
2. 주요 클래스 설계
FavoriteManager.cs
csharp
코드 복사
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public class FavoriteManager
{
    private const string FavoritesFilePath = @"C:\Users\<사용자>\AppData\Local\MyRibbonApp\favorites.json";
    public List<string> Favorites { get; private set; }

    public FavoriteManager()
    {
        Favorites = LoadFavorites();
    }

    public void AddToFavorites(string buttonId)
    {
        if (!Favorites.Contains(buttonId))
        {
            Favorites.Add(buttonId);
            SaveFavorites();
        }
    }

    public void RemoveFromFavorites(string buttonId)
    {
        if (Favorites.Contains(buttonId))
        {
            Favorites.Remove(buttonId);
            SaveFavorites();
        }
    }

    private List<string> LoadFavorites()
    {
        if (File.Exists(FavoritesFilePath))
        {
            string json = File.ReadAllText(FavoritesFilePath);
            return JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }
        return new List<string>();
    }

    private void SaveFavorites()
    {
        Directory.CreateDirectory(Path.GetDirectoryName(FavoritesFilePath));
        string json = JsonSerializer.Serialize(Favorites);
        File.WriteAllText(FavoritesFilePath, json);
    }
}
MainViewModel.cs
csharp
코드 복사
using DevExpress.Xpf.Ribbon;
using System.Collections.ObjectModel;
using System.Linq;

public class MainViewModel
{
    public ObservableCollection<BarButtonItem> RibbonButtons { get; set; }
    public ObservableCollection<BarButtonItem> FavoriteButtons { get; set; }
    private FavoriteManager _favoriteManager;

    public MainViewModel()
    {
        _favoriteManager = new FavoriteManager();
        RibbonButtons = new ObservableCollection<BarButtonItem>();
        FavoriteButtons = new ObservableCollection<BarButtonItem>();

        // 버튼 초기화
        InitializeButtons();
        LoadFavoriteButtons();
    }

    private void InitializeButtons()
    {
        // 모든 버튼 추가 (예제)
        RibbonButtons.Add(new BarButtonItem { Content = "Button 1", Tag = "btn1" });
        RibbonButtons.Add(new BarButtonItem { Content = "Button 2", Tag = "btn2" });
        RibbonButtons.Add(new BarButtonItem { Content = "Button 3", Tag = "btn3" });
    }

    private void LoadFavoriteButtons()
    {
        foreach (var buttonId in _favoriteManager.Favorites)
        {
            var button = RibbonButtons.FirstOrDefault(b => b.Tag.ToString() == buttonId);
            if (button != null)
            {
                FavoriteButtons.Add(button);
            }
        }
    }

    public void AddToFavorites(BarButtonItem button)
    {
        if (!FavoriteButtons.Contains(button))
        {
            FavoriteButtons.Add(button);
            _favoriteManager.AddToFavorites(button.Tag.ToString());
        }
    }

    public void RemoveFromFavorites(BarButtonItem button)
    {
        if (FavoriteButtons.Contains(button))
        {
            FavoriteButtons.Remove(button);
            _favoriteManager.RemoveFromFavorites(button.Tag.ToString());
        }
    }
}
3. XAML UI 구현
MainWindow.xaml
xml
코드 복사
<dxr:RibbonControl>
    <!-- 기존 리본 페이지 -->
    <dxr:RibbonDefaultPageCategory>
        <dxr:RibbonPage Caption="Main">
            <dxr:RibbonPageGroup Caption="Commands">
                <ItemsControl ItemsSource="{Binding RibbonButtons}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <dxb:BarButtonItem Content="{Binding Content}" Command="{Binding DataContext.AddToFavoritesCommand, RelativeSource={RelativeSource AncestorType=dxr:RibbonControl}}" CommandParameter="{Binding}"/>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </dxr:RibbonPageGroup>
        </dxr:RibbonPage>
    </dxr:RibbonDefaultPageCategory>

    <!-- 즐겨찾기 페이지 -->
    <dxr:RibbonPage Caption="Favorites">
        <dxr:RibbonPageGroup Caption="Favorite Commands">
            <ItemsControl ItemsSource="{Binding FavoriteButtons}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <dxb:BarButtonItem Content="{Binding Content}" Command="{Binding DataContext.RemoveFromFavoritesCommand, RelativeSource={RelativeSource AncestorType=dxr:RibbonControl}}" CommandParameter="{Binding}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </dxr:RibbonPageGroup>
    </dxr:RibbonPage>
</dxr:RibbonControl>
4. 명령 추가
MainViewModel.cs (추가 코드)
csharp
코드 복사
using System.Windows.Input;

public ICommand AddToFavoritesCommand { get; }
public ICommand RemoveFromFavoritesCommand { get; }

public MainViewModel()
{
    AddToFavoritesCommand = new RelayCommand<BarButtonItem>(AddToFavorites);
    RemoveFromFavoritesCommand = new RelayCommand<BarButtonItem>(RemoveFromFavorites);
}
5. 저장 구조
저장 파일 경로: C:\Users\<사용자>\AppData\Local\MyRibbonApp\favorites.json
저장 데이터 형식 (JSON):
json
코드 복사
[
    "btn1",
    "btn2"
]
장점
확장성: 새로운 버튼 추가 시 동적으로 관리 가능.
유지보수성: JSON 저장 방식으로 파일 관리가 간편.
MVVM 준수: 바인딩을 활용해 데이터와 UI를 분리.