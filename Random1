아, 데이터를 추가할 때마다 지속적으로 PO_NO 값에 따라 배경색을 번갈아 적용하는 방식으로 수정해야 하군요. 이를 위해 TaskList.CollectionChanged 이벤트를 사용하여 데이터가 추가될 때마다 배경색을 동적으로 적용하는 방법을 제공하겠습니다.

주요 변경 사항:
CollectionChanged 이벤트로 새로운 데이터가 추가될 때마다 배경색을 동적으로 적용.
PO_NO 값에 따라 배경색을 번갈아가며 적용.
시퀀스 컬럼은 XAML에서 시퀀스 값에 따라 배경색이 적용됩니다.
XAML 코드 (시퀀스 컬럼만 색상 적용)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" CanUserSortColumns="False" Margin="10">
            <DataGrid.Columns>
                <!-- PO_NO 컬럼 -->
                <DataGridTextColumn Header="PO NO" Binding="{Binding PO_NO}" Width="*" />
                
                <!-- SequenceFlag 컬럼 (컬럼 색상만 변경) -->
                <DataGridTextColumn Header="Sequence">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <!-- 시퀀스 플래그에 따른 배경색 변경 -->
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="1">
                                    <Setter Property="Background" Value="Yellow" /> <!-- 노란색 -->
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="2">
                                    <Setter Property="Background" Value="SkyBlue" /> <!-- 하늘색 -->
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="3">
                                    <Setter Property="Background" Value="LightGreen" /> <!-- 녹색 -->
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.Binding>
                        <Binding Path="SequenceFlag" />
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                
                <!-- Function Status 컬럼 (시퀀스에 따른 도형 색상 표시) -->
                <DataGridTemplateColumn Header="Function Status">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- 함수 상태를 표시하는 ItemsControl -->
                            <ItemsControl ItemsSource="{Binding FunctionStatusList}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <!-- 함수 상태를 표시하는 도형 -->
                                            <Ellipse Width="30" Height="30" Fill="{Binding StatusColor}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
코드 비하인드 (데이터가 추가될 때마다 PO_NO에 따른 배경색 적용)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Collections.Specialized; // CollectionChanged 이벤트를 위해 추가
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<TaskModel> TaskList { get; set; }

        public MainWindow()
        {
            InitializeComponent();

            // TaskList에 데이터가 추가될 때마다 배경색을 업데이트하기 위해 CollectionChanged 이벤트 추가
            TaskList = new ObservableCollection<TaskModel>();
            TaskList.CollectionChanged += TaskList_CollectionChanged;

            // 처음 몇 개의 데이터를 추가해보기
            TaskList.Add(new TaskModel { PO_NO = "12345", SequenceFlag = 1 });
            TaskList.Add(new TaskModel { PO_NO = "12345", SequenceFlag = 2 });
            TaskList.Add(new TaskModel { PO_NO = "12346", SequenceFlag = 1 });
            TaskList.Add(new TaskModel { PO_NO = "12346", SequenceFlag = 3 });

            DataContext = this;
        }

        // TaskList에 데이터가 추가되면 호출되는 이벤트 핸들러
        private void TaskList_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Add)
            {
                ApplyRowColors(); // 데이터 추가 시 배경색 갱신
            }
        }

        // PO_NO에 따른 배경색을 번갈아가며 설정하는 로직
        private void ApplyRowColors()
        {
            string previousPO = null;
            bool toggle = false;

            foreach (var item in TaskDataGrid.Items)
            {
                var row = (DataGridRow)TaskDataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null)
                {
                    var task = item as TaskModel;
                    if (task.PO_NO != previousPO)
                    {
                        toggle = !toggle; // PO_NO가 달라질 때마다 토글
                    }

                    // 번갈아가며 두 가지 색상 적용 (빨간색과 흰색)
                    row.Background = toggle ? new SolidColorBrush(Color.FromRgb(255, 255, 0)) : new SolidColorBrush(Colors.White);
                    previousPO = task.PO_NO;
                }
            }
        }
    }

    public class TaskModel
    {
        public string PO_NO { get; set; }
        public int SequenceFlag { get; set; }
        public ObservableCollection<Brush> FunctionStatusList { get; set; } = new ObservableCollection<Brush>();
    }
}
설명:
CollectionChanged 이벤트:

ObservableCollection인 TaskList에 항목이 추가될 때마다 CollectionChanged 이벤트를 통해 배경색을 다시 적용합니다.
새로운 항목이 추가되면 ApplyRowColors() 메서드를 호출해 PO_NO 값에 따라 배경색을 번갈아가며 설정합니다.
XAML에서 시퀀스 플래그 값에 따라 해당 컬럼만 색상이 적용됩니다:

시퀀스 값이 1이면 노란색, 2이면 하늘색, 3이면 녹색으로 설정됩니다.
동작 방식:
새로운 작업이 TaskList에 추가될 때마다 배경색을 재적용하며, PO_NO 값이 같은 행끼리 같은 색을 사용하고 PO_NO 값이 바뀌면 배경색이 번갈아 적용됩니다.
시퀀스 컬럼은 시퀀스 값에 따라 XAML에서 색상이 설정됩니다.
이 방식으로 데이터가 추