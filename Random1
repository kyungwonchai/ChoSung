PF에서 DevExpress를 사용하여 Unbound Column을 다루는 경우, 셀의 값이 변경되었을 때 이를 감지하고 처리하는 것은 조금 다를 수 있습니다. Unbound Column은 데이터 소스에 직접 연결되지 않기 때문에, 특별한 처리가 필요합니다.

다음은 간단한 예시입니다. 이 예시에서는 GridControl이 있고, 그 안에 텍스트박스를 포함하는 Unbound Column (dxg:GridColumn)과 "no1"이라는 다른 컬럼이 있다고 가정합니다. 사용자가 Unbound Column의 텍스트박스 값을 변경하면, 변경된 값과 같은 행의 "no1" 컬럼 값을 가져오는 방법을 보여줍니다.

XAML 코드
xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="350" Width="525">

    <Grid>
        <dxg:GridControl x:Name="gridControl">
            <dxg:GridControl.Columns>
                <!-- Unbound Column with TextBox -->
                <dxg:GridColumn FieldName="UnboundColumn" UnboundType="String" Header="Unbound Column">
                    <dxg:GridColumn.EditSettings>
                        <dxg:TextEditSettings EditValueChanged="TextEditSettings_EditValueChanged" />
                    </dxg:GridColumn.EditSettings>
                </dxg:GridColumn>

                <!-- Other Column -->
                <dxg:GridColumn FieldName="no1" Header="No1 Column"/>
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (Code-Behind)
csharp
Copy code
using System.Windows;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // 데이터 소스 설정 (예시)
            gridControl.ItemsSource = YourDataSource; // YourDataSource는 실제 데이터 소스로 교체
        }

        private void TextEditSettings_EditValueChanged(object sender, EditValueChangedEventArgs e)
        {
            var editor = sender as TextEdit;
            if (editor != null)
            {
                var rowHandle = gridControl.View.GetRowHandleByListIndex(gridControl.GetListIndexByRowHandle(gridControl.View.FocusedRowHandle));
                var no1Value = gridControl.GetCellValue(rowHandle, "no1");

                MessageBox.Show($"변경된 값: {editor.Text}, No1 컬럼 값: {no1Value}");
            }
        }
    }
}
설명
dxg:GridColumn에 UnboundType="String"을 설정하여 Unbound Column을 생성합니다.
텍스트박스는 TextEditSettings를 통해 구현하고, EditValueChanged 이벤트를 사용하여 값이 변경될 때 이벤트를 처리합니다.
TextEditSettings_EditValueChanged 이벤트 핸들러에서, 변경된 텍스트박스의 값을 가져오고, 같은 행의 "no1" 컬럼 값을 GetCellValue 메소드를 사용하여 가져옵니다.
이 코드는 DevExpress WPF GridControl에서 Unbound Column과 관련된 기본적인 구현을 보여줍니다. 실제 애플리케이션에 맞게 데이터 소스 및 기타 설정을 조정해야 할 수 있습니다.