백을 두고 메인 화면을 가리지 않도록 설정하려면, DataActivity를 Dialog 스타일의 Activity로 설정하고, 상단에 여백을 두어 배경의 메인 화면이 일부 보이도록 구현할 수 있습니다. 이를 위해 Android에서 제공하는 Dialog 스타일을 활용하여 DataActivity의 레이아웃을 조정합니다.

1. AndroidManifest.xml 설정
먼저 DataActivity를 팝업 스타일로 설정하기 위해 AndroidManifest.xml에서 DataActivity의 테마를 Dialog 스타일로 지정합니다.

xml
코드 복사
<activity
    android:name=".DataActivity"
    android:theme="@style/DialogActivityTheme"/>
2. styles.xml에서 스타일 정의
Dialog 스타일의 테마를 정의하여, 상단에 111dp의 여백을 주고 팝업이 나타나도록 합니다. 이를 위해 styles.xml에 스타일을 추가합니다.

xml
코드 복사
<resources>
    <!-- Dialog 스타일의 액티비티 테마 정의 -->
    <style name="DialogActivityTheme" parent="Theme.AppCompat.Light.Dialog">
        <item name="android:windowIsFloating">true</item>
        <item name="android:windowBackground">@android:color/transparent</item>
        <item name="android:windowIsTranslucent">true</item>
        <item name="android:windowSoftInputMode">stateAlwaysHidden|adjustResize</item>
    </style>
</resources>
3. activity_data.xml 레이아웃 파일
DataActivity의 레이아웃 파일을 수정하여 팝업 창이 상단에 111dp의 여백을 두고 띄워지도록 설정합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="vertical"
    android:paddingTop="111dp"
    android:background="@android:color/white"
    android:layout_gravity="top">

    <!-- 상단에 SignalR 연결 상태를 표시하는 TextView -->
    <TextView
        android:id="@+id/connectionStatusTextView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#EFEFEF"
        android:gravity="center"
        android:padding="8dp"
        android:text="연결 상태를 표시합니다."
        android:textColor="#000000"/>

    <!-- 표를 표시하는 RecyclerView -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:layout_margin="8dp"/>
</LinearLayout>
4. DataActivity.kt Kotlin 코드
팝업 창으로 설정된 DataActivity에서 SignalR 연결 상태를 실시간으로 업데이트하는 코드를 추가합니다. 이 코드는 앞서 설명한 것과 동일하게 작동하지만, 팝업 형태로 뜨기 때문에 메인 화면의 일부가 보이게 됩니다.

kotlin
코드 복사
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import com.microsoft.signalr.HubConnectionState
import kotlinx.coroutines.*

class DataActivity : AppCompatActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var connectionStatusTextView: TextView
    private lateinit var recyclerView: RecyclerView
    private var reconnectJob: Job? = null
    private val mainHandler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // TextView와 RecyclerView 초기화
        connectionStatusTextView = findViewById(R.id.connectionStatusTextView)
        recyclerView = findViewById(R.id.recyclerView)

        setupRecyclerView()
        initializeSignalR()
    }

    private fun setupRecyclerView() {
        // RecyclerView 설정
        recyclerView.layoutManager = LinearLayoutManager(this)
        recyclerView.addItemDecoration(DividerItemDecoration(this, DividerItemDecoration.VERTICAL))

        // 예제 데이터 설정
        val dataList = listOf(
            TableData("Column1", "Column2", "Column3", "Column4"),
            TableData("Data1", "Data2", "Data3", "Data4")
        )

        val adapter = TableAdapter(dataList)
        recyclerView.adapter = adapter
    }

    private fun initializeSignalR() {
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        // 수신 이벤트 설정
        hubConnection.on("ReceiveMessage1", { message: String ->
            Log.d("SignalR", "Message 1 received: $message")
            // 메시지 1 처리 로직
        }, String::class.java)

        hubConnection.on("ReceiveMessage2", { message: String ->
            Log.d("SignalR", "Message 2 received: $message")
            // 메시지 2 처리 로직
        }, String::class.java)

        hubConnection.on("ReceiveMessage3", { message: String ->
            Log.d("SignalR", "Message 3 received: $message")
            // 메시지 3 처리 로직
        }, String::class.java)

        startConnection()
    }

    private fun startConnection() {
        updateConnectionStatus("연결 시도 중...", "#FFA500") // 주황색

        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            try {
                hubConnection.start().blockingAwait()
                updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                reconnectJob?.cancel()
            } catch (e: Exception) {
                Log.e("SignalR", "Connection failed, retrying...", e)
                updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                retryConnection()
            }
        }

        hubConnection.onClosed {
            Log.e("SignalR", "Connection closed, retrying...")
            updateConnectionStatus("SignalR 연결 끊김 - 재시도 중...", "#FF0000") // 빨간색
            retryConnection()
        }
    }

    private fun retryConnection() {
        reconnectJob?.cancel()
        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            while (hubConnection.connectionState != HubConnectionState.CONNECTED) {
                try {
                    delay(2000) // 2초 대기 후 재연결 시도
                    hubConnection.start().blockingAwait()
                    updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                } catch (e: Exception) {
                    Log.e("SignalR", "Reconnection attempt failed", e)
                    updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                }
            }
        }
    }

    // 연결 상태를 업데이트하는 함수
    private fun updateConnectionStatus(status: String, color: String) {
        mainHandler.post {
            connectionStatusTextView.text = status
            connectionStatusTextView.setTextColor(android.graphics.Color.parseColor(color))
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        reconnectJob?.cancel()
        hubConnection.stop()
    }
}
설명
DialogActivityTheme 스타일:

Dialog 스타일의 테마를 사용하여 DataActivity가 팝업처럼 뜨도록 설정합니다.
상단에 111dp의 여백을 추가하여 메인 화면의 일부가 보이도록 조정합니다.
activity_data.xml:

LinearLayout의 상단에 paddingTop="111dp"를 추가하여 팝업 창이 화면의 상단에서 111dp 아래에 위치하도록 설정합니다.
DataActivity:
