Query와 기타 의존성을 모두 로컬에 저장하여 오프라인 환경에서도 작동하도록 수정된 코드를 제공합니다.

1. 필요한 라이브러리 다운로드
Chart.js
Chart.js의 최소화된 버전(Chart.min.js) 다운로드:
Chart.js GitHub에서 다운로드하거나 아래 URL로 접근:
arduino
코드 복사
https://cdn.jsdelivr.net/npm/chart.js
jQuery
jQuery의 최소화된 버전(jquery.min.js) 다운로드:
jQuery 공식 다운로드 페이지에서 다운로드하거나 아래 URL로 접근:
arduino
코드 복사
https://code.jquery.com/jquery-3.6.0.min.js
저장 경로
Flask 프로젝트의 static/js/ 폴더에 Chart.min.js와 jquery.min.js를 저장합니다.
2. Flask 애플리케이션 코드 (app.py)
python
코드 복사
from flask import Flask, render_template, request, jsonify
import pandas as pd
import os

app = Flask(__name__)

# 로컬 데이터 파일 경로
DATA_FILE = "plcerr_data.xlsx"

# 데이터 읽기 함수
def load_data():
    if not os.path.exists(DATA_FILE):
        raise FileNotFoundError(f"{DATA_FILE} 파일이 없습니다. 데이터를 다운로드 후 저장하세요.")
    return pd.read_excel(DATA_FILE)

@app.route('/PLCErr', methods=['GET', 'POST'])
def plcerr():
    # 데이터 로드
    df = load_data()

    # 라인별 발생 수 데이터 준비
    line_counts = df['라인명'].value_counts().reset_index()
    line_counts.columns = ['라인명', '발생수']

    # 에러번호별 발생 수 데이터 준비
    error_counts = df['에러번호'].value_counts().reset_index()
    error_counts.columns = ['에러번호', '발생수']

    # 페이지네이션 처리
    page = int(request.args.get("page", 1))
    per_page = 100
    total_pages = -(-len(df) // per_page)  # 총 페이지 수
    df_page = df.iloc[(page - 1) * per_page : page * per_page]

    return render_template(
        'plcerr.html',
        data=df_page.to_dict(orient='records'),
        line_counts=line_counts.to_dict(orient='records'),
        error_counts=error_counts.to_dict(orient='records'),
        current_page=page,
        total_pages=total_pages
    )

@app.route('/PLCErr/filter', methods=['POST'])
def filter_plcerr():
    # 데이터 로드
    df = load_data()

    # 필터 값 받기
    filters = request.json
    if filters['line']:
        df = df[df['라인명'].str.contains(filters['line'], case=False, na=False)]
    if filters['error']:
        df = df[df['에러번호'].astype(str).str.contains(filters['error'], case=False, na=False)]
    if filters['value']:
        df = df[df['에러값'].astype(str).str.contains(filters['value'], case=False, na=False)]

    return jsonify(df.to_dict(orient='records'))


if __name__ == '__main__':
    app.run(debug=True)
3. HTML 템플릿 (templates/plcerr.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PLC Error Viewer</title>
    <!-- 로컬에 저장된 Chart.js 및 jQuery -->
    <script src="{{ url_for('static', filename='js/Chart.min.js') }}"></script>
    <script src="{{ url_for('static', filename='js/jquery.min.js') }}"></script>
    <style>
        body {
            background-color: #121212; /* 다크 배경 */
            color: #e0e0e0; /* 텍스트 색상 */
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        h1 {
            text-align: center;
            color: #00bcd4;
        }
        .charts {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            height: 20%;
        }
        canvas {
            background-color: #1e1e1e; /* 차트 배경 */
            border-radius: 10px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            background-color: #1e1e1e;
        }
        thead {
            background-color: #004d66;
        }
        thead th, tbody td {
            padding: 8px;
            text-align: left;
        }
        tbody tr:nth-child(even) {
            background-color: #2a2a2a;
        }
        tbody tr:hover {
            background-color: #3d3d3d;
        }
        .pagination {
            text-align: center;
            margin: 20px 0;
        }
        .pagination button {
            padding: 8px 16px;
            margin: 0 5px;
            border: none;
            border-radius: 5px;
            background-color: #00bcd4;
            color: #fff;
            cursor: pointer;
        }
        .pagination button.disabled {
            background-color: #555;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <h1>PLC Error Logs</h1>
    <div class="charts">
        <canvas id="lineChart" width="300" height="150"></canvas>
        <canvas id="errorChart" width="300" height="150"></canvas>
    </div>
    <input type="text" id="search" placeholder="라인명, 에러번호, 에러값으로 검색">
    <table>
        <thead>
            <tr>
                <th>라인명</th>
                <th>에러번호</th>
                <th>에러값</th>
                <th>시간</th>
            </tr>
        </thead>
        <tbody id="tableBody">
            {% for row in data %}
                <tr>
                    <td>{{ row['라인명'] }}</td>
                    <td>{{ row['에러번호'] }}</td>
                    <td>{{ row['에러값'] }}</td>
                    <td>{{ row['시간'] }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
    <div class="pagination">
        <button {% if current_page == 1 %}class="disabled"{% endif %} onclick="changePage({{ current_page - 1 }})">이전</button>
        <button {% if current_page == total_pages %}class="disabled"{% endif %} onclick="changePage({{ current_page + 1 }})">다음</button>
    </div>

    <script>
        const lineData = {{ line_counts | tojson }};
        const errorData = {{ error_counts | tojson }};
        const ctxLine = document.getElementById('lineChart').getContext('2d');
        const ctxError = document.getElementById('errorChart').getContext('2d');

        // 라인명별 발생수 차트
        new Chart(ctxLine, {
            type: 'bar',
            data: {
                labels: lineData.map(d => d['라인명']),
                datasets: [{
                    label: '라인별 발생수',
                    data: lineData.map(d => d['발생수']),
                    backgroundColor: '#007acc',
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                }
            }
        });

        // 에러번호별 발생수 차트
        new Chart(ctxError, {
            type: 'bar',
            data: {
                labels: errorData.map(d => d['에러번호']),
                datasets: [{
                    label: '에러번호별 발생수',
                    data: errorData.map(d => d['발생수']),
                    backgroundColor: '#ff5722',
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { display: false }
                }
            }
        });

        // 검색 기능
        $('#search').on('input', function () {
            const value = $(this).val();
            filterTable(value, value, value);
        });

        function changePage(page) {
            window.location.href = `/PLCErr?page=${page}`;
        }

        function filterTable(line, error, value) {
            $.ajax({
                url: '/PLCErr/filter',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ line, error, value }),
                success: function (data) {
                    const tableBody = $('#tableBody');
                    tableBody.empty();
                    data.forEach(row => {
                        tableBody.append(`
                            <tr>
                                <td>${row['라인명']}</td>
                                <td>${row['에러번호']}</td>
                                <td>${row['에러값']}</td>
                                <td>${row['시간']}</td>
                            </tr>
                        `);
                    });
                }
            });
        }
    </script>
</body>
</html>
주요 변경 사항
Chart.js와 jQuery 로컬 사용:
