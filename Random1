# app.py
# 이 스크립트는 Flask 웹 서버를 실행하여 Ubuntu 게이트웨이로부터 제어 명령을 받아 LED를 제어합니다.
# 설치: pip install Flask gunicorn rpi_ws281x
import os
import threading
from datetime import datetime
from flask import Flask, request, jsonify

# --- 전역 상태 및 로깅 ---
IS_RASPBERRY_PI = False
EXPECTED_PI_API_KEY = os.getenv("PI_API_KEY", "SUPER_SECRET_KEY_FOR_PI")

def log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

# --- LED 제어 로직 ---
try:
    from rpi_ws281x import PixelStrip, Color
    IS_RASPBERRY_PI = True
    
    class LedController:
        def __init__(self):
            self.LED_COUNT = 792
            self.LED_PIN = 18
            self.LED_BRIGHTNESS = 128
            self.strip = PixelStrip(self.LED_COUNT, self.LED_PIN, 800000, 10, False, self.LED_BRIGHTNESS)
            self.strip.begin()
            log("? 실제 LED 컨트롤러 초기화 완료 (Raspberry Pi).")
            self.turn_off_all()

        def light_up(self, index, duration):
            if not (0 <= index < self.LED_COUNT):
                log(f"?? [ERROR] LED 인덱스 {index}가 범위를 벗어남 (0-{self.LED_COUNT-1}).")
                return
            self.turn_off_all()
            color = Color(255, 180, 0) # GRB 순서: Green, Red, Blue
            self.strip.setPixelColor(index, color)
            self.strip.show()
            threading.Timer(duration, self.turn_off_all).start()

        def turn_off_all(self):
            for i in range(self.strip.numPixels()):
                self.strip.setPixelColor(i, Color(0, 0, 0))
            self.strip.show()

except (ImportError, RuntimeError):
    IS_RASPBERRY_PI = False
    class MockLedController:
        def __init__(self):
            log("?? 에뮬레이션 모드로 LED 컨트롤러 초기화 (Not a Raspberry Pi).")
        def light_up(self, index, duration):
            log(f"?? [EMULATE] LED {index} 점등 ({duration}초).")
            threading.Timer(duration, self.turn_off_led, args=[index]).start()
        def turn_off_led(self, index):
            log(f"? [EMULATE] LED {index} 자동 소등.")
        def turn_off_all(self):
            log("? [EMULATE] 모든 LED 소등.")

# --- Flask 웹 서버 ---
app = Flask(__name__)
led_controller = LedController() if IS_RASPBERRY_PI else MockLedController()

@app.route('/api/v1/light-up', methods=['POST'])
def handle_light_up_request():
    log(f"?? API 요청 수신: {request.method} {request.path}")
    
    data = request.get_json()
    if not data:
        log("?? [ERROR] 요청 본문에 JSON 데이터가 없음.")
        return jsonify({"error": "Bad Request: JSON body required"}), 400

    # --- API Key Authentication (from JSON body) ---
    api_key_received = data.get('apiKey')
    if api_key_received != EXPECTED_PI_API_KEY:
        log(f"?? [AUTH] 인증 실패. 잘못된 API 키 수신: {api_key_received}")
        return jsonify({"error": "Unauthorized"}), 401

    led_index = data.get('ledIndex')
    if led_index is None or not isinstance(led_index, int) or led_index < 0:
        log(f"?? [WARN] 잘못된 ledIndex 값: {led_index}")
        return jsonify({"error": "Invalid 'ledIndex' field"}), 400

    log(f"? 인증 성공. LED {led_index} 점등 명령 실행.")
    led_controller.light_up(index=led_index, duration=11)

    return jsonify({"status": "success", "message": f"LED {led_index} activated."}), 200

def main():
    if EXPECTED_PI_API_KEY == "SUPER_SECRET_KEY_FOR_PI":
        log("?? [WARN] 기본 API 키를 사용 중입니다. 운영 환경에서는 PI_API_KEY 환경변수를 설정하세요.")
    
    # 개발 환경에서는 Flask 내장 서버를 사용합니다.
    # 운영 환경에서는 systemd + gunicorn을 사용하므로 이 부분은 실행되지 않습니다.
    log("Flask 개발 서버 시작 (운영 환경에서는 Gunicorn 사용 권장)...")
    app.run(host='0.0.0.0', port=5000, debug=True)

if __name__ == "__main__":
    main()