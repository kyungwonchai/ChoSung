using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using QRCoder;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;

namespace QRMAKER
{
    public partial class MainWindow : ThemedWindow
    {
        private List<string> _items;

        public MainWindow()
        {
            InitializeComponent();
            _items = new List<string>();
            gridControl.ItemsSource = _items;
        }

        private void LoadFromClipboard(object sender, RoutedEventArgs e)
        {
            try
            {
                _items.Clear();
                qrCodePanel.Children.Clear();
                gridControl.ItemsSource = null;

                // 클립보드에서 데이터 가져오기
                string clipboardText = Clipboard.GetText();
                if (!string.IsNullOrEmpty(clipboardText))
                {
                    var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    foreach (var line in lines)
                    {
                        if (line.Length == 22 && IsAlphanumeric(line))
                        {
                            _items.Add(line);
                        }
                    }
                    gridControl.ItemsSource = _items;
                    GenerateQRCodes();
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Slider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            try
            {
                GenerateQRCodes();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void GenerateQRCodes()
        {
            try
            {
                qrCodePanel.Children.Clear();
                foreach (var item in _items)
                {
                    var qrCode = GenerateQRCode(item);
                    var image = new System.Windows.Controls.Image
                    {
                        Source = BitmapToImageSource(qrCode),
                        Width = sizeSlider.Value,
                        Height = sizeSlider.Value,
                        Margin = new Thickness(spacingSlider.Value)
                    };
                    var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };
                    var textBlock = new TextBlock
                    {
                        Text = item,
                        Foreground = System.Windows.Media.Brushes.Blue,
                        HorizontalAlignment = HorizontalAlignment.Center
                    };
                    stackPanel.Children.Add(image);
                    stackPanel.Children.Add(textBlock);

                    image.MouseLeftButtonDown += (s, e) => 
                    {
                        DeselectAllRows();
                        int index = _items.IndexOf(item);
                        tableView.FocusedRowHandle = index;
                        gridControl.View.FocusedRowHandle = index;
                    };

                    qrCodePanel.Children.Add(stackPanel);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Bitmap GenerateQRCode(string text)
        {
            QRCodeGenerator qrGenerator = new QRCodeGenerator();
            QRCodeData qrCodeData = qrGenerator.CreateQrCode(text, QRCodeGenerator.ECCLevel.Q);
            QRCode qrCode = new QRCode(qrCodeData);
            return qrCode.GetGraphic(20);
        }

        private BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            using (var memory = new System.IO.MemoryStream())
            {
                bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = memory;
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapImage.EndInit();
                return bitmapImage;
            }
        }

        private bool IsAlphanumeric(string str)
        {
            foreach (char c in str)
            {
                if (!char.IsLetterOrDigit(c))
                {
                    return false;
                }
            }
            return true;
        }

        private void DeselectAllRows()
        {
            for (int i = 0; i < gridControl.VisibleRowCount; i++)
            {
                int rowHandle = gridControl.GetRowHandleByVisibleIndex(i);
                tableView.UnselectRow(rowHandle);
            }
        }

        private void TableView_RowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
            var rowHandle = e.HitInfo.RowHandle;
            var selectedRow = gridControl.GetRow(rowHandle) as string;
            if (selectedRow != null)
            {
                int index = _items.IndexOf(selectedRow);
                HighlightQRCode(index);
            }
        }

        private void DeselectAllQRCode()
        {
            foreach (StackPanel stackPanel in qrCodePanel.Children)
            {
                stackPanel.Background = System.Windows.Media.Brushes.Transparent;
            }
        }

        private void HighlightQRCode(int index)
        {
            if (index >= 0 && index < qrCodePanel.Children.Count)
            {
                StackPanel stackPanel = qrCodePanel.Children[index] as StackPanel;
                stackPanel.Background = System.Windows.Media.Brushes.Yellow;
            }
        }
    }
}
