방금 설명해 드린 가장 간결한 방식의 이중 실행 방지 로직을 모두 포함한 App.xaml.cs 전체 코드입니다. 이 코드를 복사해서 그대로 붙여넣으시면 됩니다.

다른 파일은 수정할 필요 없이 이 파일 하나만 교체하시면 됩니다.

App.xaml.cs 간소화 버전 (전체 코드)
C#

// 필요한 using 문들입니다.
using System;
using System.Threading; // Mutex를 사용하기 위해 추가
using System.Windows;

// 사용자님의 프로젝트 네임스페이스입니다.
namespace SAgentM.App 
{
    /// <summary>
    /// App.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class App : Application
    {
        // 1. 이중 실행 방지를 위한 Mutex 변수 선언
        private Mutex _mutex;
        private const string MutexName = "Global\\SAgentMApp_Mutex_UniqueId_20250526"; // PC에서 이 앱만 식별하는 고유 이름

        /// <summary>
        /// 애플리케이션 시작 지점입니다.
        /// </summary>
        protected override void OnStartup(StartupEventArgs e)
        {
            // 2. 이중 실행 여부 확인
            bool createdNew;
            _mutex = new Mutex(true, MutexName, out createdNew);

            if (!createdNew)
            {
                // Mutex가 이미 존재하면(앱이 이미 실행 중이면) 메시지를 표시하고 새 인스턴스를 종료합니다.
                MessageBox.Show("SAgentM 에이전트가 이미 실행 중입니다.", "실행 확인", MessageBoxButton.OK, MessageBoxImage.Information);
                Application.Current.Shutdown();
                return; // 여기서 시작 프로세스를 중단합니다.
            }
            
            // --- 이중 실행이 아닐 경우, 여기에서부터 기존 앱 초기화 코드를 실행합니다. ---
            base.OnStartup(e);

            // 예: MainWindow를 생성하고 표시하는 코드
            // MainWindow mainWindow = new MainWindow();
            // mainWindow.Show();
        }

        /// <summary>
        /// 애플리케이션 종료 지점입니다.
        /// </summary>
        protected override void OnExit(ExitEventArgs e)
        {
            // 3. 앱이 종료될 때 사용하던 Mutex를 반드시 해제합니다.
            _mutex?.ReleaseMutex();
            _mutex?.Close();

            base.OnExit(e);
        }
    }
}
코드 설명
변수 선언: _mutex와 MutexName을 선언하여 앱 전체에서 사용할 수 있도록 합니다. MutexName은 다른 프로그램과 절대 겹치지 않을 만한 이름으로 만드는 것이 중요합니다.
OnStartup: 앱이 시작될 때 가장 먼저 Mutex를 잡으려고 시도합니다. 만약 실패하면(createdNew가 false), 이미 실행 중인 것으로 간주하고 메시지 박스를 띄운 뒤 조용히 종료됩니다. 성공해야만 base.OnStartup(e) 이하의 기존 로직(예: 메인 윈도우 생성)이 실행됩니다.
OnExit: 앱이 어떤 이유로든 종료될 때, 잡고 있던 Mutex를 풀어줍니다(ReleaseMutex). 이래야만 다음번에 앱을 정상적으로 실행할 수 있습니다.
