네, 프로그램을 닫을 때 "로그 로딩 오류"가 발생하는 문제는 주로 창이 닫히는 과정에서 비동기 작업(로그 로딩)이 아직 진행 중인데 관련 리소스(특히 DbContext)가 먼저 해제(Dispose)될 때 발생합니다.

프로그램 종료 시 실행되는 관련 함수:

MainWindow.xaml.cs의 MainWindow_Closing 이벤트 핸들러: 창이 닫히기 직전에 호출됩니다.
MainViewModel.cs의 Dispose 메서드: MainWindow_Closing에서 호출되며, MainViewModel이 사용하는 DbContext와 자식 ViewModel(LogViewModel 등)의 Dispose를 호출합니다.
LogViewModel.cs의 Dispose 메서드: MainViewModel의 Dispose에서 호출되며, LogViewModel이 사용하는 DbContext를 해제하고, 진행 중이던 비동기 작업(LoadLogsAsync)을 취소하려고 시도합니다 (_cts.Cancel()).
LogViewModel.cs의 LoadLogsAsync 메서드: 만약 이 메서드가 await 상태에서 대기 중이었다가 DbContext가 Dispose된 이후에 다시 실행되면, 해제된 DbContext에 접근하려다 오류가 발생할 수 있습니다.
해결 방법:

LogViewModel에 _disposed 플래그를 추가하고, LoadLogsAsync 메서드 등 DbContext를 사용하는 부분에서 작업을 시작하기 전과 await 이후에 이 플래그 및 CancellationToken 상태를 더 엄격하게 확인하여 이미 리소스가 해제되었다면 작업을 중단하도록 수정합니다.

수정해야 할 파일 목록:

ViewModels/LogViewModel.cs
ViewModels/MainViewModel.cs (LogVM Dispose 호출 확인 및 자체 Dispose 로직 확인)
아래에 이 두 파일의 수정된 전체 코드를 작성합니다.

1. ViewModels/LogViewModel.cs (수정)

_disposed 플래그 추가 및 관리.
LoadLogsAsync 내부에서 _disposed 및 _cts.IsCancellationRequested 확인 강화.
LoadLogsCommand의 CanExecute 조건 추가 (선택 사항).
C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Threading; // CancellationTokenSource 사용
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 감사 로그 조회 ViewModel (Dispose 오류 수정)
    /// </summary>
    public class LogViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private ObservableCollection<AuditLog> _auditLogs;
        private string _statusMessage;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false; // *** 추가: Dispose 되었는지 확인하는 플래그 ***

        public ObservableCollection<AuditLog> AuditLogs { get => _auditLogs; set => SetProperty(ref _auditLogs, value); }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }
        public ICommand LoadLogsCommand { get; }

        public LogViewModel()
        {
            AuditLogs = new ObservableCollection<AuditLog>(); // 생성자 초기에 초기화

            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"[Log] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusMessage = "[Log] DB 연결 오류!"; LoadLogsCommand = new RelayCommand(_ => { }, _ => false); return; }

            // *** 수정: CanExecute 조건 추가 (선택 사항) ***
            LoadLogsCommand = new RelayCommand(async _ => await LoadLogsAsync(), _ => !_disposed && _context != null);

            if (_context != null) { _ = LoadLogsAsync(); }
        }

        /// <summary>
        /// 감사 로그를 비동기적으로 로드합니다. (CancellationToken 및 Dispose 확인 강화)
        /// </summary>
        public async Task LoadLogsAsync()
        {
            // *** 수정: 메서드 시작 시 _disposed 및 취소 상태 확인 ***
            if (_context == null || _disposed || _cts.IsCancellationRequested) return;
            StatusMessage = "로그 로딩 중...";
            (LoadLogsCommand as RelayCommand)?.RaiseCanExecuteChanged(); // 로딩 중 버튼 비활성화 (선택 사항)

            try
            {
                // *** 수정: ToListAsync 호출 전 다시 확인 ***
                if (_disposed || _cts.IsCancellationRequested) return;

                var logs = await _context.AuditLogs
                                         .OrderByDescending(log => log.Timestamp)
                                         .Take(1000)
                                         .AsNoTracking()
                                         .ToListAsync(_cts.Token); // 취소 토큰 전달

                // *** 수정: UI 업데이트 전 다시 확인 ***
                if (!_disposed && !_cts.IsCancellationRequested)
                {
                    AuditLogs = new ObservableCollection<AuditLog>(logs); // 새 컬렉션 할당 방식 사용
                    StatusMessage = $"총 {AuditLogs.Count}개 로그 로드.";
                }
            }
            catch (OperationCanceledException)
            {
                Debug.WriteLine("LoadLogsAsync 작업 취소됨.");
                if (!_disposed) StatusMessage = "로그 로딩 취소됨."; // Dispose되지 않았을 때만 상태 업데이트
            }
            catch (ObjectDisposedException) // DbContext가 이미 Dispose된 경우
            {
                 Debug.WriteLine("LoadLogsAsync 실행 중 DbContext가 Dispose됨.");
                 if (!_disposed) StatusMessage = "로그 로딩 중 오류 발생 (컨텍스트 해제됨).";
            }
            catch (Exception ex)
            {
                if (!_disposed && !_cts.IsCancellationRequested)
                {
                    StatusMessage = $"로그 로딩 오류: {ex.Message}";
                    MessageBox.Show($"{StatusMessage}\n\n데이터베이스 연결 및 로그 테이블 상태를 확인하세요.", "로그 로딩 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            finally
            {
                 if (!_disposed) (LoadLogsCommand as RelayCommand)?.RaiseCanExecuteChanged(); // 로딩 완료 후 버튼 상태 갱신
            }
        }

        #region IDisposable 구현 (CancellationToken 취소 및 _disposed 플래그 설정)
        // private bool disposed = false; // 클래스 멤버 변수로 이동됨
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed) // 중복 Dispose 방지
            {
                if (disposing)
                {
                    Debug.WriteLine("LogViewModel Dispose 시작...");
                    // *** 수정: CancellationTokenSource 취소 호출 ***
                    _cts?.Cancel(); // 진행 중인 비동기 작업 취소 요청
                    _cts?.Dispose();

                    _context?.Dispose(); // DbContext 해제
                    Debug.WriteLine("LogViewModel 리소스 해제 완료.");
                }
                _disposed = true; // *** 수정: Dispose 되었음을 플래그로 표시 ***
            }
        }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}

2. ViewModels/MainViewModel.cs (확인용)

Dispose 메서드에서 LogVM?.Dispose()를 호출하는지 확인합니다. (이전 최종 버전과 동일)

C#

// 필요한 네임스페이스
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Views;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Security;
using System.Threading; // CancellationTokenSource 사용
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;
using System.IO;
using System.Text;
using System.Windows.Threading;
using System.Diagnostics;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel (종료 시 오류 방지 - CancellationToken 추가 확인)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";
        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;
        public LogViewModel LogVM { get; private set; } // LogViewModel 인스턴스

        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false; // MainViewModel 자체의 Dispose 플래그

        #region Public Properties (이전과 동일)
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set { if (SetProperty(ref _isMasterModeEnabled, value)) { /* MasterDataVM 상태 전파 제거됨 */ StatusBarText = value ? "마스터 모드 활성화." : "마스터 모드 비활성화."; } } }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands (이전과 동일)
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        public ICommand OpenMasterDataWindowCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); } catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }
            _lockerAssignments = new ObservableCollection<LockerAssignment>(); _allLockerTypes = new ObservableCollection<LockerType>(); _allFloors = new ObservableCollection<Floor>(); _allZones = new ObservableCollection<Zone>(); _allSubParts = new ObservableCollection<SubPart>(); _allAdministrators = new ObservableCollection<Administrator>();
            LogVM = new LogViewModel(); // LogViewModel 생성
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync(), _ => !_disposed); SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync(), _ => !_disposed); AddNewCommand = new RelayCommand(AddNewLocker, _ => !_disposed); DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => !_disposed && SelectedAssignment != null); ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => !_disposed && SelectedAssignment != null && SelectedAssignment.IsAssigned); CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword, _ => !_disposed); RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync(), _ => !_disposed); OpenMasterDataWindowCommand = new RelayCommand(OpenMasterDataWindow, _ => !_disposed);
            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        // --- 데이터 로딩 메서드 (LoadAssignmentsAsync에 CancellationToken 사용 확인) ---
        private async Task LoadInitialDataAsync() { if (_disposed || _cts.IsCancellationRequested) return; await LoadMasterDataAsync(); if (_disposed || _cts.IsCancellationRequested) return; await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync() { if (_context == null || _disposed || _cts.IsCancellationRequested) return; StatusBarText = "사물함 목록 로딩 중..."; try { var trackedAssignments = _context.ChangeTracker.Entries<LockerAssignment>().ToList(); if (trackedAssignments.Any()) { foreach (var entry in trackedAssignments) entry.State = EntityState.Detached; } var assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(_cts.Token); if (!_cts.IsCancellationRequested) { LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; } } catch (OperationCanceledException) { Debug.WriteLine("LoadAssignmentsAsync 작업 취소됨."); if (!_disposed) StatusBarText = "사물함 목록 로딩 취소됨."; } catch (Exception ex) { if (!_cts.IsCancellationRequested && !_disposed) HandleGenericException("사물함 목록 로딩", ex); } }
        private async Task LoadMasterDataAsync() { if (_disposed || _cts.IsCancellationRequested) return; StatusBarText = "마스터 데이터(콤보박스용) 로딩 중..."; LockerDbContext tempContext = null; try { using (tempContext = new LockerDbContext()) { AllLockerTypes = new ObservableCollection<LockerType>(await tempContext.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync(_cts.Token)); if (_cts.IsCancellationRequested) return; AllFloors = new ObservableCollection<Floor>(await tempContext.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync(_cts.Token)); if (_cts.IsCancellationRequested) return; AllZones = new ObservableCollection<Zone>(await tempContext.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync(_cts.Token)); if (_cts.IsCancellationRequested) return; AllSubParts = new ObservableCollection<SubPart>(await tempContext.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync(_cts.Token)); if (_cts.IsCancellationRequested) return; AllAdministrators = new ObservableCollection<Administrator>(await tempContext.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync(_cts.Token)); if (!_cts.IsCancellationRequested) StatusBarText = "마스터 데이터(콤보박스용) 로드 완료."; } } catch (OperationCanceledException) { Debug.WriteLine("LoadMasterDataAsync 작업 취소됨."); if (!_disposed) StatusBarText = "마스터 데이터 로딩 취소됨."; } catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader")) { if (!_cts.IsCancellationRequested && !_disposed) { HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx); MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); } } catch (Exception ex) { if (!_cts.IsCancellationRequested && !_disposed) HandleGenericException("마스터 데이터 로딩", ex); } }
        // CheckMasterPassword, OpenMasterDataWindow (이전과 동일)
        private void CheckMasterPassword(object parameter) { try { string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"]; if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }
        private void OpenMasterDataWindow(object parameter) { if (!BackupDataToCsv()) { if (MessageBox.Show("데이터 백업 실패. 계속 진행하시겠습니까?", "백업 실패", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No) return; } try { using (var masterDataVM = new MasterDataViewModel()) { var masterDataWindow = new MasterDataWindow { DataContext = masterDataVM, Owner = Application.Current.MainWindow }; masterDataWindow.ShowDialog(); _ = LoadMasterDataAsync(); _ = LoadAssignmentsAsync(); } } catch (Exception ex) { MessageBox.Show($"마스터 데이터 관리 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }

        #region CRUD 및 기타 메서드 (CancellationToken 전달 추가)
        private async Task SaveChangesAsync() { if (_context == null || _disposed || _cts.IsCancellationRequested) return; StatusBarText = "변경 사항 저장 중..."; List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(_cts.Token); /* CancellationToken 전달 */ StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (OperationCanceledException) { Debug.WriteLine("SaveChangesAsync 작업 취소됨."); StatusBarText = "저장 작업 취소됨."; RollbackChanges(allChangedEntriesForRollback); } catch (DbEntityValidationException vex) { HandleValidationException(vex); RollbackChanges(allChangedEntriesForRollback); } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { if (!_cts.IsCancellationRequested && !_disposed) HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); } }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null || _disposed || changedEntries == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: try { entry.Reload(); } catch { entry.State = EntityState.Unchanged; } break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null || _disposed) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null || _disposed || _cts.IsCancellationRequested) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(_cts.Token); /* CancellationToken 전달 */ LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (OperationCanceledException) { Debug.WriteLine("DeleteSelectedAsync 작업 취소됨."); StatusBarText = "삭제 작업 취소됨."; RollbackChanges(changesForRollback); } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { if (!_cts.IsCancellationRequested && !_disposed) HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null || _disposed) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        #endregion

        #region Backup Logic (CSV - 이전과 동일)
        private bool BackupDataToCsv() { /* ... 백업 로직 ... */ return true; }
        private void WriteTableToCsv<T>(LockerDbContext context, StreamWriter writer) where T : class { /* ... CSV 쓰기 로직 ... */ }
        private string EscapeCsvValue(string value) { /* ... CSV 값 처리 ... */ return value; }
        #endregion

        #region Helper Methods (이전과 동일)
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { Exception innerMostException = dbEx; while (innerMostException.InnerException != null) innerMostException = innerMostException.InnerException; string innerExMsg = innerMostException.Message; var validationErrors = dbEx.Entries.SelectMany(e => e.GetValidationResult().ValidationErrors); string validationErrorMsg = ""; if (validationErrors.Any()) validationErrorMsg = "\n\n유효성 검사 오류:\n" + string.Join("\n", validationErrors.Select(err => $" - {err.PropertyName}: {err.ErrorMessage}")); StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"데이터베이스 작업 중 오류가 발생했습니다:\n{innerExMsg}{validationErrorMsg}\n\n(전체 오류: {dbEx.ToString()})", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private void HandleValidationException(DbEntityValidationException vex) { var errorMessages = vex.EntityValidationErrors.SelectMany(x => x.ValidationErrors).Select(x => $"{x.PropertyName}: {x.ErrorMessage}"); var fullErrorMessage = string.Join("\n", errorMessages); var exceptionMessage = $"데이터 유효성 검사 오류:\n{fullErrorMessage}"; StatusBarText = "데이터 유효성 검사 오류 발생"; MessageBox.Show(exceptionMessage, "유효성 검사 오류", MessageBoxButton.OK, MessageBoxImage.Warning); Debug.WriteLine($"!!! DbEntityValidationException 발생:\n{exceptionMessage}\n{vex.ToString()}"); }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현 (CancellationToken 취소 및 Dispose 플래그 확인)
        // private bool disposed = false; // 클래스 멤버 변수로 이동됨
        protected virtual void Dispose(bool disposing)
        {
            if (!_disposed) // 중복 Dispose 방지
            {
                if (disposing)
                {
                    Debug.WriteLine("MainViewModel Dispose 시작...");
                    // *** 수정: CancellationTokenSource 취소 호출 ***
                    _cts?.Cancel(); // 진행 중인 비동기 작업 취소 요청
                    _cts?.Dispose();

                    _context?.Dispose(); // DbContext 해제
                    LogVM?.Dispose();    // LogViewModel 해제
                    Debug.WriteLine("MainViewModel 리소스 해제 완료.");
                }
                _disposed = true; // Dispose 되었음을 플래그로 표시
            }
        }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
핵심 변경 사항:

LogViewModel.cs / MainViewModel.cs:
CancellationTokenSource (_cts) 멤버 변수를 추가했습니다.
Dispose 메서드에서 _cts.Cancel()을 호출하여 ViewModel이 해제될 때 진행 중인 비동기 작업(주로 데이터 로딩)을 취소하도록 요청합니다. 또한 _cts.Dispose()를 호출하여 리소스를 정리합니다.
LoadLogsAsync, LoadAssignmentsAsync, LoadMasterDataAsync, SaveChangesAsync, DeleteSelectedAsync 등 DbContext를 사용하는 주요 비동기 메서드 내의 ToListAsync 또는 SaveChangesAsync 호출 시 _cts.Token을 전달합니다.