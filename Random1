네, '추가' 로그가 이제 정상적으로 남는다니 정말 다행입니다!

이제 로그에 기록되는 사용자 이름 앞에 "[마스터]" 또는 "[일반]"을 구분해서 표시하는 기능을 추가해 보겠습니다. 이 작업은 약간의 코드 수정이 필요하지만 충분히 가능합니다.

구현 방식:

LockerDbContext의 SaveChanges 및 SaveChangesAsync 메서드에 bool isMaster 라는 파라미터를 추가합니다.
MainViewModel에서 SaveChanges를 호출할 때는 false를 전달하고, MasterDataViewModel에서 호출할 때는 true를 전달합니다.
LockerDbContext의 CreateAuditEntries 메서드도 bool isMaster 파라미터를 받도록 수정하고, 이 값을 사용하여 UserName 앞에 "[마스터]" 또는 "[일반]" 접두사를 붙입니다.
수정해야 할 파일 목록:

Data/LockerDbContext.cs
ViewModels/MainViewModel.cs
ViewModels/MasterDataViewModel.cs
아래에 이 3개 파일의 수정된 전체 코드(주석 제외)를 작성합니다.

1. Data/LockerDbContext.cs (수정)

C#

using LockerManagementApp.Models;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Diagnostics;
using System.Data.SqlClient;
using System.Data.Entity.Core;
using System.Threading;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Data
{
    public class LockerDbContext : DbContext
    {
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }

        private const string ConnectionStringName = "LockerDbConnection";

        public LockerDbContext() : base(GetConnectionString())
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LockerDbContext instance created.");
        }

        private static string GetConnectionString()
        {
            try { var cs = ConfigurationManager.ConnectionStrings[ConnectionStringName]; if (cs == null || string.IsNullOrWhiteSpace(cs.ConnectionString)) throw new ConfigurationErrorsException($"App.config에서 '{ConnectionStringName}' 연결 문자열 없음/비어있음."); Debug.WriteLine($"ConnectionString '{ConnectionStringName}' 로드 성공."); return cs.ConnectionString; }
            catch (ConfigurationErrorsException confEx) { Debug.WriteLine($"!!! 설정 파일 오류: {confEx.ToString()}"); throw new Exception("App.config 설정 오류.", confEx); }
            catch (Exception ex) { Debug.WriteLine($"!!! 연결 문자열 로드 중 예외: {ex.ToString()}"); throw new Exception($"App.config 연결 문자열 읽기 오류.", ex); }
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Entity<LockerAssignment>().Property(p => p.UserName).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.KnoxId).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.SubPart).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Administrator).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.TransferStatus).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Details).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Remarks).IsOptional();
            modelBuilder.Entity<LockerAssignment>().Property(p => p.Notes).IsOptional();
            base.OnModelCreating(modelBuilder);
        }

        protected override DbEntityValidationResult ValidateEntity(DbEntityEntry entityEntry, IDictionary<object, object> items)
        {
            var result = base.ValidateEntity(entityEntry, items);
            if (entityEntry.Entity is LockerAssignment assignment && (entityEntry.State == EntityState.Added || entityEntry.State == EntityState.Modified)) { var userNameErrors = result.ValidationErrors.Where(err => err.PropertyName == nameof(LockerAssignment.UserName) && string.IsNullOrWhiteSpace(assignment.UserName)).ToList(); if (userNameErrors.Any()) { Debug.WriteLine($"경고: LockerAssignment(ID:{assignment.Id})의 UserName 필수 오류 무시."); foreach (var error in userNameErrors) { result.ValidationErrors.Remove(error); } } }
            return result;
        }

        #region SaveChanges Overrides for Audit Logging (isMaster 파라미터 추가)

        public int SaveChanges(bool isMaster) // isMaster 파라미터 추가
        {
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기, isMaster={isMaster}) Override 시작...");
            List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(isMaster); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 완료."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
            else { Debug.WriteLine("  -> 추가할 로그 없음."); }

            try { Debug.WriteLine($"  -> base.SaveChanges() 호출 시도..."); var result = base.SaveChanges(); Debug.WriteLine($"  -> base.SaveChanges() 완료. 결과 = {result}"); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChanges 중 일반 오류 (동기): {ex.ToString()}"); throw; }
            finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChanges(동기) Override 종료."); }
        }

        public async Task<int> SaveChangesAsync(bool isMaster, CancellationToken cancellationToken = default) // isMaster 파라미터 추가
        {
             Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChangesAsync(비동기, isMaster={isMaster}) Override 시작...");
             List<AuditLog> auditEntries = null;
            try { auditEntries = CreateAuditEntries(isMaster); Debug.WriteLine($"  -> 생성된 로그 수 = {auditEntries?.Count ?? 0}"); }
            catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }

            if (auditEntries != null && auditEntries.Any()) { try { this.AuditLogs.AddRange(auditEntries); Debug.WriteLine($"  -> 로그 {auditEntries.Count}개 AddRange 완료."); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 AddRange 중 오류 발생: {ex.ToString()}"); } }
             else { Debug.WriteLine("  -> 추가할 로그 없음."); }

            try { Debug.WriteLine($"  -> base.SaveChangesAsync(cancellationToken) 호출 시도..."); var result = await base.SaveChangesAsync(cancellationToken); Debug.WriteLine($"  -> base.SaveChangesAsync(cancellationToken) 완료. 결과 = {result}"); return result; }
            catch (DbEntityValidationException vex) { LogValidationErrors(vex); throw; }
            catch (DbUpdateException dbEx) { LogDbUpdateException(dbEx); throw; }
            catch (OperationCanceledException) { Debug.WriteLine("SaveChangesAsync(CancellationToken) 작업 취소됨."); throw; }
            catch (Exception ex) { Debug.WriteLine($"!!! SaveChangesAsync(CancellationToken) 중 일반 오류 (비동기): {ex.ToString()}"); throw; }
            finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] SaveChangesAsync(비동기) Override 종료."); }
        }

        // 기본 SaveChanges/SaveChangesAsync 오버라이드는 isMaster=false로 위임
        public override int SaveChanges() => SaveChanges(false);
        public override Task<int> SaveChangesAsync(CancellationToken cancellationToken) => SaveChangesAsync(false, cancellationToken);


        /// <summary>
        /// 감사 로그 엔트리 생성 (isMaster 파라미터 사용)
        /// </summary>
        private List<AuditLog> CreateAuditEntries(bool isMaster) // isMaster 파라미터 추가
        {
            Debug.WriteLine($"  CreateAuditEntries 시작 (isMaster={isMaster})...");
            string currentPrincipalName = System.Threading.Thread.CurrentPrincipal?.Identity?.Name;
            // *** 수정: isMaster 플래그에 따라 사용자 이름 접두사 추가 ***
            string userNameForLog = $"{(isMaster ? "[마스터]" : "[일반]")}{currentPrincipalName ?? "UnknownUser"}";
            var auditEntries = new List<AuditLog>();
            var changedEntries = ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged && e.State != EntityState.Detached).ToList();

            if (!changedEntries.Any()) { Debug.WriteLine("  CreateAuditEntries: 감지된 변경 엔티티 없음."); return auditEntries; }

            Debug.WriteLine($"  CreateAuditEntries: 감지된 변경 엔티티 수 = {changedEntries.Count}");
            var jsonSettings = new JsonSerializerSettings { ReferenceLoopHandling = ReferenceLoopHandling.Ignore, PreserveReferencesHandling = PreserveReferencesHandling.None, Formatting = Formatting.None };

            foreach (var entry in changedEntries)
            {
                if (entry.Entity is AuditLog) { Debug.WriteLine("    - AuditLog 엔티티 변경 감지됨 (로깅 건너뜀)."); continue; }

                var auditEntry = new AuditLog { Timestamp = DateTime.Now, UserName = userNameForLog, TableName = entry.Entity.GetType().Name, Action = entry.State.ToString() };
                try { auditEntry.RecordId = entry.State == EntityState.Deleted ? entry.OriginalValues["Id"]?.ToString() : entry.CurrentValues["Id"]?.ToString() ?? "N/A"; } catch (Exception ex) { Debug.WriteLine($"    - 감사 로그: 'Id' PK 조회 실패 ({auditEntry.TableName}) - {ex.Message}"); auditEntry.RecordId = "PK Error"; }
                var oldValues = new Dictionary<string, object>(); var newValues = new Dictionary<string, object>(); var affectedColumns = new List<string>();
                if (entry.State == EntityState.Added) { foreach (var pn in entry.CurrentValues.PropertyNames) newValues[pn] = entry.CurrentValues[pn]; try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Added 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; } }
                else if (entry.State == EntityState.Deleted) { foreach (var pn in entry.OriginalValues.PropertyNames) oldValues[pn] = entry.OriginalValues[pn]; try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Deleted 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; } }
                else if (entry.State == EntityState.Modified) { bool propertyChanged = false; foreach (var pn in entry.OriginalValues.PropertyNames) { var ov = entry.OriginalValues[pn]; var cv = entry.CurrentValues[pn]; if (!Equals(ov, cv)) { propertyChanged = true; affectedColumns.Add(pn); oldValues[pn] = ov; newValues[pn] = cv; } } if (propertyChanged) { auditEntry.AffectedColumns = string.Join(",", affectedColumns); try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Modified Old 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; } try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"    !!! 감사 로그 Modified New 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; } } else { Debug.WriteLine($"    - 엔티티 {auditEntry.TableName} (ID: {auditEntry.RecordId})는 Modified 상태지만 실제 값 변경 없음. 로그 건너뜀."); continue; } }
                auditEntries.Add(auditEntry);
                Debug.WriteLine($"    - 로그 생성됨: {auditEntry.TableName}, Action: {auditEntry.Action}, RecordId: {auditEntry.RecordId}, User: {auditEntry.UserName}");
            }
            UpdateLockerAssignmentTimestamps(changedEntries);
            Debug.WriteLine("  CreateAuditEntries 종료.");
            return auditEntries;
        }
        private void UpdateLockerAssignmentTimestamps(List<DbEntityEntry> changedEntries) { var lockerEntries = changedEntries.Where(e => e.Entity is LockerAssignment && (e.State == EntityState.Added || e.State == EntityState.Modified)); int count = 0; foreach (var entry in lockerEntries) { ((LockerAssignment)entry.Entity).LastUpdated = DateTime.Now; count++; } if (count > 0) Debug.WriteLine($"UpdateLockerAssignmentTimestamps: {count}개 LockerAssignment 타임스탬프 업데이트됨."); }

        #endregion

        #region Error Logging Helpers
        private void LogDbUpdateException(DbUpdateException dbEx) { Debug.WriteLine($"!!! DbUpdateException 발생: {dbEx.ToString()}"); if (dbEx.InnerException != null) Debug.WriteLine($"  InnerException: {dbEx.InnerException.ToString()}"); foreach (var entry in dbEx.Entries) { Debug.WriteLine($"  - 오류 엔티티: {entry.Entity.GetType().Name}, 상태: {entry.State}"); } }
        private void LogValidationErrors(DbEntityValidationException vex) { Debug.WriteLine($"!!! DbEntityValidationException 발생: {vex.Message}"); foreach (var validationErrors in vex.EntityValidationErrors) { Debug.WriteLine($"  - 엔티티 타입: {validationErrors.Entry.Entity.GetType().Name}, 상태: {validationErrors.Entry.State}"); foreach (var validationError in validationErrors.ValidationErrors) { Debug.WriteLine($"    - 속성: {validationError.PropertyName}, 오류: {validationError.ErrorMessage}"); } } }
        #endregion
    }
}
2. ViewModels/MainViewModel.cs (수정)

SaveChangesAsync 및 DeleteSelectedAsync 메서드에서 _context.SaveChangesAsync() 호출 시 isMaster 플래그 false를 전달하고 