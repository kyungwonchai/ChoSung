두 가지 문제를 해결하기 위해 다음과 같은 작업을 수행할 수 있습니다:

화면이 꺼지지 않도록 설정:

WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON 플래그를 사용하여 화면이 꺼지지 않도록 설정할 수 있습니다.
화면이 꺼진 동안에도 SingleR 메시지를 받고 화면이 켜지면 바로 갱신된 이미지를 표시:

Service를 사용하여 백그라운드에서 SingleR 메시지를 수신하고 이미지를 업데이트할 수 있습니다.
화면이 켜질 때 이미지를 업데이트하기 위해 BroadcastReceiver를 사용하여 화면 상태 변화를 감지할 수 있습니다.
1. 화면이 꺼지지 않도록 설정
MainActivity.kt 파일에 WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON 플래그를 설정합니다.

kotlin
코드 복사
import android.os.Bundle
import android.view.WindowManager

class MainActivity : ComponentActivity() {
    // ... (기존 코드)

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // 화면이 꺼지지 않도록 설정
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        // ... (기존 코드)
    }

    // ... (기존 코드)
}
2. 화면이 꺼졌을 때도 SingleR 메시지를 받고 화면을 켜면 바로 갱신된 이미지를 표시
Step 1: 서비스 생성
SingleRService.kt 파일을 생성하여 백그라운드 서비스에서 SingleR 연결을 유지합니다.

kotlin
코드 복사
package com.example.mssqlimageapp

import android.app.Service
import android.content.Intent
import android.os.IBinder
import android.util.Log
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch

class SingleRService : Service() {
    private lateinit var hubConnection: HubConnection
    private val serviceScope = CoroutineScope(Dispatchers.IO)

    override fun onCreate() {
        super.onCreate()
        setupSignalR()
    }

    private fun setupSignalR() {
        hubConnection = HubConnectionBuilder.create("https://yourserver/signalrhub").build()

        hubConnection.on("UpdateImage", { imageTitle: String, datetime: String ->
            Log.d("SingleRService", "UpdateImage event received with title: $imageTitle and datetime: $datetime")
            // 이미지를 업데이트하는 로직을 추가합니다.
        }, String::class.java, String::class.java)

        serviceScope.launch {
            hubConnection.start()
                .doOnComplete {
                    Log.d("SingleRService", "Hub connection started successfully")
                }
                .doOnError { error ->
                    Log.e("SingleRService", "Error starting hub connection: ${error.message}")
                }
                .blockingAwait()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        serviceScope.launch {
            hubConnection.stop()
                .doOnComplete {
                    Log.d("SingleRService", "Hub connection stopped successfully")
                }
                .doOnError { error ->
                    Log.e("SingleRService", "Error stopping hub connection: ${error.message}")
                }
                .blockingAwait()
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
Step 2: 서비스 시작 및 화면 상태 변화 감지
MainActivity.kt에서 서비스 시작 및 화면 상태 변화를 감지하는 BroadcastReceiver를 설정합니다.

kotlin
코드 복사
package com.example.mssqlimageapp

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.graphics.Bitmap
import android.os.Bundle
import android.util.Log
import android.view.WindowManager
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.dp
import com.example.mssqlimageapp.ui.theme.MSSQLImageAppTheme
import kotlinx.coroutines.*

class MainActivity : ComponentActivity() {
    private val mainScope = CoroutineScope(Dispatchers.Main + SupervisorJob())

    private val selectedImageTitle = mutableStateOf("")
    private val selectedDatetime = mutableStateOf("")
    private val selectedImage = mutableStateOf<Bitmap?>(null)

    private val screenReceiver = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                Intent.ACTION_SCREEN_ON -> {
                    Log.d("MainActivity", "Screen ON")
                    // 화면이 켜졌을 때 이미지를 갱신합니다.
                    selectedImageTitle.value.let { title ->
                        selectedDatetime.value.let { datetime ->
                            if (title.isNotEmpty() && datetime.isNotEmpty()) {
                                mainScope.launch {
                                    val newBitmap = fetchImageFromDatabase(title, datetime)
                                    withContext(Dispatchers.Main) {
                                        selectedImage.value = newBitmap
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("MainActivity", "onCreate called")

        // 화면이 꺼지지 않도록 설정
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)

        // SingleR 서비스 시작
        val serviceIntent = Intent(this, SingleRService::class.java)
        startService(serviceIntent)

        // 화면 상태 변화 감지
        val filter = IntentFilter(Intent.ACTION_SCREEN_ON)
        registerReceiver(screenReceiver, filter)

        setContent {
            MSSQLImageAppTheme {
                Surface(color = MaterialTheme.colors.background) {
                    var imageList by remember { mutableStateOf(listOf<ImageData>()) }
                    var isRefreshing by remember { mutableStateOf(false) }

                    ImageListScreen(
                        imageList = imageList,
                        selectedImage = selectedImage.value,
                        selectedImageTitle = selectedImageTitle.value,
                        selectedDatetime = selectedDatetime.value,
                        onFetchData = {
                            mainScope.launch(Dispatchers.IO) {
                                val newList = fetchDataFromDatabase()
                                withContext(Dispatchers.Main) {
                                    imageList = newList
                                }
                            }
                        },
                        onImageSelected = { imageTitle, datetime ->
                            Log.d("MainActivity", "Image selected: $imageTitle, $datetime")
                            selectedImageTitle.value = imageTitle
                            selectedDatetime.value = datetime
                            mainScope.launch(Dispatchers.IO) {
                                val image = fetchImageFromDatabase(imageTitle, datetime)
                                withContext(Dispatchers.Main) {
                                    selectedImage.value = image
                                }
                            }
                        },
                        onBack = {
                            selectedImage.value = null
                        },
                        onFit = {
                            selectedImage.value = selectedImage.value // Reset zoom and pan
                        },
                        isRefreshing = isRefreshing,
                        onToggleRefresh = { isRefreshing = it }
                    )
                }
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        unregisterReceiver(screenReceiver)
        val serviceIntent = Intent(this, SingleRService::class.java)
        stopService(serviceIntent)
    }
}
위 코드에서:

SingleRService는 백그라운드에서 SingleR 메시지를 수신하여 처리합니다.
MainActivity에서 화면 상태 변화 (ACTION_SCREEN_ON)를 감지하고, 화면이 켜질 때 이미지를 갱신합니다.
화면이 꺼지지 않도록 설정합니다 (WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON).
이제 앱이 실행되는 동안 화면이 꺼지지 않으며, 화면이 꺼져도 SingleR 메시지를 받을 수 있습니다. 화면이 켜지면 즉시 최신 이미지를 갱신합니다.