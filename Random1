using UnityEngine;
using UnityEditor;

public class RackLayoutGenerator
{
    // --- 여기서 배치 설정을 수정하세요 ---
    private static readonly string[] ZONES = { "A", "B" };       // 생성할 구역
    private static readonly int RACKS_PER_ZONE = 10;          // 구역 당 랙 개수 (A~J)
    private static readonly float RACK_GAP = 0.01f;           // 랙과 랙 사이의 미세한 간격
    private static readonly float AISLE_WIDTH = 4.0f;         // A구역과 B구역 사이의 복도 넓이
    // ------------------------------------

    [MenuItem("Tools/SMD Rack/Generate Rack Layout")]
    private static void GenerateLayout()
    {
        // 1. Project 창에서 선택한 프리팹을 가져옴
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        // 2. 랙들을 담을 부모 오브젝트를 찾거나 생성
        string parentName = "Rack_Installations";
        GameObject parentObject = GameObject.Find(parentName);
        if (parentObject == null)
        {
            parentObject = new GameObject(parentName);
        }
        else // 기존에 생성된 랙이 있다면 모두 삭제
        {
            for (int i = parentObject.transform.childCount - 1; i >= 0; i--)
            {
                GameObject.DestroyImmediate(parentObject.transform.GetChild(i).gameObject);
            }
        }
        
        // 3. 프리팹의 가로 길이(너비) 자동 계산
        // 자식 오브젝트들의 모든 Bounds를 포함하여 전체 너비를 계산합니다.
        Bounds totalBounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if(renderers.Length > 0)
        {
            totalBounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers)
            {
                totalBounds.Encapsulate(renderer.bounds);
            }
        }
        float rackWidth = totalBounds.size.x;


        // 4. 설정에 따라 랙 생성 및 배치
        for (int i = 0; i < ZONES.Length; i++)
        {
            string zone = ZONES[i];
            for (int j = 0; j < RACKS_PER_ZONE; j++)
            {
                // 프리팹 인스턴스 생성
                GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
                
                // 이름 설정 (예: A_A, B_J)
                char rackLetter = (char)('A' + j);
                rackInstance.name = $"{zone}_{rackLetter}";

                // 위치 및 회전 설정
                float posX = j * (rackWidth + RACK_GAP);
                float posY = 0;
                float posZ = 0;
                Quaternion rotation = Quaternion.identity; // 기본 회전 (A구역)

                // B구역일 경우, 마주보도록 위치와 회전 조정
                if (i == 1) 
                {
                    posZ = AISLE_WIDTH;
                    rotation = Quaternion.Euler(0, 180, 0); // 180도 회전하여 마주보기
                }
                
                rackInstance.transform.position = new Vector3(posX, posY, posZ);
                rackInstance.transform.rotation = rotation;
            }
        }

        EditorUtility.DisplayDialog("완료", "마주보는 랙 배치가 완료되었습니다.", "확인");
    }
}