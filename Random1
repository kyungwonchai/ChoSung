송합니다. 다음 작업이 Pending 상태로 남아있는 문제는, 작업이 끝났을 때 다음 작업을 제대로 시작하지 못하고 있는 문제일 수 있습니다. 이는 StartNextTask 델리게이트가 제대로 호출되지 않거나, 큐의 흐름에서 문제가 있을 수 있습니다. 이를 수정하겠습니다.

수정할 사항:
다음 작업을 시작하는 방식에서, 현재 작업이 완료된 후 StartNextTask가 올바르게 실행되도록 해야 합니다.
**작업 큐(TaskQueue)**는 한 번에 하나의 작업만 실행해야 하므로, 각 작업이 순차적으로 실행되도록 TaskQueue를 개선하겠습니다.
수정된 TaskModel.cs
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Collections.ObjectModel;
using System.Windows;
using System.Collections.Generic;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스 플래그에 따라 함수들을 순차적으로 실행합니다.
/// 함수의 개수에 맞춰 도형이 동적으로 생성되고, 작업 상태가 실시간으로 반영됩니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }  // 시퀀스 플래그 (1: 시작, 2: 중간, 3: 끝)

    // 함수 상태를 위한 도형 색상 리스트 (각 함수에 따른 도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 각 함수 이름을 저장 (마우스 오버 시 함수 이름 표시)
    public ObservableCollection<string> FunctionNames { get; set; }

    // 실제 비동기 함수를 저장하는 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 진행 상태를 표시하는 텍스트 (실시간으로 반영)
    private string _progressText;
    public string ProgressText
    {
        get => _progressText;
        set
        {
            _progressText = value;
            OnPropertyChanged(nameof(ProgressText));
        }
    }

    private TaskQueue _taskQueue;
    public string Status { get; set; }

    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSpecificTaskCommand { get; }  // 도형 우클릭 시 특정 함수만 실행

    // 다음 작업 행을 관리하는 Action 델리게이트 (현재 작업 완료 후 호출)
    public Action<TaskModel> StartNextTask { get; set; }

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag; // 시퀀스 플래그는 파일에서 결정됨

        _taskQueue = taskQueue;
        Status = "Pending"; // 처음엔 대기 상태
        ProgressText = "Pending"; // 기본 상태 (대기 중)

        // 각 함수마다 도형을 설정 (시퀀스에 따라 다른 개수)
        FunctionStatusColors = new ObservableCollection<Brush>();
        FunctionNames = new ObservableCollection<string>();
        FunctionTasks = new List<Func<Task>>(); // 비동기 함수를 저장할 리스트 초기화

        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        ExecuteSpecificTaskCommand = new RelayCommand<int>(ExecuteSpecificTask);

        InitializeFunctions(); // 시퀀스 플래그에 따라 함수 및 도형 초기화
    }

    /// <summary>
    /// 작업을 시작하고 각 함수 완료 시 도형 색상을 변경합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";
        ProgressText = "Running...";
        _taskQueue.EnqueueTask(ExecuteTaskSequence); // 작업 큐에 시퀀스 작업 추가
    }

    /// <summary>
    /// 시퀀스 플래그에 따라 작업을 순차적으로 실행합니다.
    /// 작업이 완료되면 StartNextTask로 다음 행을 시작합니다.
    /// </summary>
    private async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            await ExecuteTaskWithColor(i, FunctionTasks[i]); // 함수 실행 후 도형 색상 변경
        }

        // 작업 완료 후 상태 변경
        Status = "Completed";
        ProgressText = "Completed";

        // 현재 작업이 끝났으므로 다음 작업 행을 실행
        Application.Current.Dispatcher.Invoke(() =>
        {
            StartNextTask?.Invoke(this);  // 다음 작업 행 실행
        });
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 완료되면 해당 인덱스의 도형 색상을 변경합니다.
    /// </summary>
    private async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.SkyBlue; // 작업 진행 중 색상
            OnPropertyChanged(nameof(FunctionStatusColors));
        });

        await task(); // 작업 실행

        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.Green; // 작업 완료 시 색상
            OnPropertyChanged(nameof(FunctionStatusColors));
        });
    }

    /// <summary>
    /// 특정 함수를 우클릭하여 단독 실행합니다.
    /// </summary>
    public async void ExecuteSpecificTask(int taskIndex)
    {
        await ExecuteTaskWithColor(taskIndex, FunctionTasks[taskIndex]); // 특정 함수만 실행
    }

    /// <summary>
    /// 함수 및 도형을 초기화하는 메서드
    /// </summary>
    private void InitializeFunctions()
    {
        switch (SequenceFlag)
        {
            case 1:
                AddFunction("Task A", ExecuteTaskA);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task C", ExecuteTaskC);
                break;
            case 2:
                AddFunction("Task C", ExecuteTaskC);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task D", ExecuteTaskD);
                break;
            case 3:
                AddFunction("Task A", ExecuteTaskA);
                AddFunction("Task B", ExecuteTaskB);
                AddFunction("Task E", ExecuteTaskE);
                break;
        }
    }

    /// <summary>
    /// 함수와 도형을 추가하는 메서드입니다.
    /// 함수가 추가되면 도형도 자동으로 회색으로 추가됩니다.
    /// </summary>
    private void AddFunction(string functionName, Func<Task> function)
    {
        FunctionNames.Add(functionName); // 함수 이름 추가
        FunctionTasks.Add(function); // 실제 비동기 함수 추가
        FunctionStatusColors.Add(Brushes.Gray); // 기본 색상 (회색) 추가
    }

    /// <summary>
    /// Task A 실행
    /// </summary>
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task A Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task B 실행
    /// </summary>
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task B Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task C 실행
    /// </summary>
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task C Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task D 실행
    /// </summary>
    private async Task ExecuteTaskD()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task D Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task E 실행
    /// </summary>
    private async Task ExecuteTaskE()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task E Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _taskQueue.Pause();
        ProgressText = "Paused";
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    private void ResumeTask()
    {
        _taskQueue.Resume();
        ProgressText = "Resumed";
    }
}
수정된 TaskQueue.cs (순차적으로 다음 작업 실행)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하며, 작업이 완료되면 다음 작업을 실행합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false; // 현재 작업이 실행 중인지 여부
    private bool _isPaused = false;  // 작업이 일시정지 상태인지 여부

    /// <summary>
    /// 작업 큐에 새로운 작업을 추가하고, 현재 작업이 실행 중이 아니면 즉시 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);  // 작업을 큐에 추가

        // 현재 작업이 실행 중이 아니고 일시정지가 아니라면 즉시 실행
        if (!_isRunning && !_isPaused)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 작업 큐의 다음 작업을 실행하는 메서드.
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0 || _isPaused) // 큐에 작업이 없거나 일시정지 상태라면 리턴
        {
            _isRunning = false;  // 작업이 실행 중이지 않음
            return;
        }

        _isRunning = true; // 현재 작업 실행 중

        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행 (비동기)

        _isRunning = false; // 작업이 완료되었으므로 실행 중 상태 해제
        RunNextTask(); // 다음 작업 실행 (재귀 호출)
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    public void Pause()
    {
        _isPaused = true; // 작업 일시정지 상태로 변경
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    public void Resume()
    {
        if (_isPaused)
        {
            _isPaused = false; // 일시정지 해제
            if (!_isRunning)  // 작업이 실행 중이 아니면 다음 작업 실행
            {
                RunNextTask();
            }
        }
    }
}
주요 개선 사항:
StartNextTask 델리게이트:

작업이 완료되면 자동으로 다음 작업을 실행하도록 StartNextTask 델리게이트가 올바르게 설정되어 있습니다.
작업이 끝나면 다음 작업을 즉시 실행하며, 실시간으로 작업 상태를 변경할 수 있습니다.
TaskQueue:

작업 큐에서 한 번에 하나의 작업만 실행되도록 Queue에서 작업을 하나씩 꺼내서 처리합니다.
비동기 작업이 완료되면 바로 다음 작업이 실행되도록 하였으며, Pause/Resume 기능이 올바르게 동작하도록 처리했습니다.
이제 작업이 순차적으로 실행되며, 첫 작업이 끝나면 다음 작업이 제대로 실행될 것입니다. Pause/Resume 기능도 제대로 적용되었으며, 실시간으로 도형과 작업 상태를 확인할 수 있습니다.

추가적인 수정 사항이나 더 궁금한 점이 있으면 말씀해 주세요!