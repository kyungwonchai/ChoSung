네, 바로 이어서 제어 UI 프로그램(MGSPMonitorControl)의 나머지 주요 파일들의 코드를 제공하겠습니다.

이전 답변에서 로그인 창과 Agent 설정 창 관련 코드, 그리고 MainViewModel의 기본 구조를 드렸습니다. 이제 MainViewModel.cs의 나머지 상세 로직, 메인 창 XAML (MainWindow.xaml), 메인 창 코드 비하인드 (MainWindow.xaml.cs), 그리고 애플리케이션 시작을 담당하는 App.xaml.cs 와 App.config 파일 예시를 드리겠습니다.

6. ViewModels/MainViewModel.cs (메인 창 ViewModel - 완성)

이전 답변에서 기본 구조를 드렸고, 이제 DB 연동, Broker 통신 이벤트 처리, 명령 실행 등의 상세 로직을 추가합니다.

C#

// MGSPMonitorControl/ViewModels/MainViewModel.cs
using System;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows; // Dispatcher, MessageBox
using System.Windows.Input;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;
using MGSPMonitorControl.Views; // AgentConfigWindow (네임스페이스 주의)
using MonitorControl.SharedModels; // BrokerMessage, LiveAgentInfoForUi 등
using Newtonsoft.Json; // JsonConvert

namespace MGSPMonitorControl.ViewModels
{
    public class MainViewModel : ObservableObject
    {
        private readonly UserSession _currentUserSession;
        private readonly IDatabaseService _databaseService;
        private readonly IBrokerClientService _brokerClientService;
        // private readonly ILoggingService _uiLocalLogger; // UI 자체 파일 로깅용 (필요시 추가)

        public ObservableCollection<ManagedAgentDisplay> Agents { get; }
        public ObservableCollection<string> UiActionLogs { get; } // UI 동작 및 Broker 메시지 로그
        public ObservableCollection<string> BrokerServerLogs { get; } // Broker 자체 로그 (Broker가 보내주는)

        private ManagedAgentDisplay _selectedAgent;
        public ManagedAgentDisplay SelectedAgent
        {
            get => _selectedAgent;
            set 
            { 
                SetProperty(ref _selectedAgent, value);
                // 선택 변경 시 Command들의 CanExecute 상태 업데이트
                ((RelayCommand)EditAgentCommand).RaiseCanExecuteChanged();
                ((RelayCommand)DeleteAgentCommand).RaiseCanExecuteChanged();
                ((RelayCommand)MonitorOnCommand).RaiseCanExecuteChanged();
                ((RelayCommand)MonitorOffCommand).RaiseCanExecuteChanged();
                ((RelayCommand)PingAgentCommand).RaiseCanExecuteChanged();
            }
        }

        private BrokerStatusDisplay _brokerStatus = new BrokerStatusDisplay();
        public BrokerStatusDisplay BrokerStatus
        {
            get => _brokerStatus;
            set => SetProperty(ref _brokerStatus, value);
        }
        
        private string _brokerConnectionStatus = "Disconnected";
        public string BrokerConnectionStatus 
        {
            get => _brokerConnectionStatus;
            set 
            { 
                SetProperty(ref _brokerConnectionStatus, value);
                // 연결 상태 변경 시 관련 Command들의 CanExecute 상태 업데이트
                ((RelayCommand)LoadAgentsCommand).RaiseCanExecuteChanged();
                ((RelayCommand)RequestBrokerStatusCommand).RaiseCanExecuteChanged();
                ((RelayCommand)ConnectToBrokerCommand).RaiseCanExecuteChanged();
                ((RelayCommand)DisconnectFromBrokerCommand).RaiseCanExecuteChanged();
                // Agent 제어 Command들은 IsOnline 조건도 보므로 SelectedAgent 변경 시 업데이트됨
            }
        }

        public string CurrentUsername => _currentUserSession?.Username ?? "N/A";
        public Visibility ManageAgentsButtonVisibility => (_currentUserSession?.CanManageAgents ?? false) ? Visibility.Visible : Visibility.Collapsed;
        public Visibility ControlPowerButtonVisibility => (_currentUserSession?.CanControlPower ?? false) ? Visibility.Visible : Visibility.Collapsed;

        // Commands
        public ICommand LoadAgentsCommand { get; }
        public ICommand AddAgentCommand { get; }
        public ICommand EditAgentCommand { get; }
        public ICommand DeleteAgentCommand { get; }
        public ICommand MonitorOnCommand { get; }
        public ICommand MonitorOffCommand { get; }
        public ICommand PingAgentCommand { get; }
        public ICommand RequestBrokerStatusCommand { get; }
        public ICommand ConnectToBrokerCommand { get; }
        public ICommand DisconnectFromBrokerCommand { get; }
        public ICommand ClearUiLogsCommand { get; }


        public MainViewModel(UserSession userSession, IDatabaseService databaseService, IBrokerClientService brokerClientService)
        {
            _currentUserSession = userSession ?? throw new ArgumentNullException(nameof(userSession));
            _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService));
            _brokerClientService = brokerClientService ?? throw new ArgumentNullException(nameof(brokerClientService));

            Agents = new ObservableCollection<ManagedAgentDisplay>();
            UiActionLogs = new ObservableCollection<string>();
            BrokerServerLogs = new ObservableCollection<string>(); // BrokerStatus.RecentServerLogs에 바인딩 예정

            AddUiLog($"User '{_currentUserSession.Username}' logged in. ManageAgents: {CanUserManageAgents}, ControlPower: {CanUserControlPower}");

            _brokerClientService.Connected += OnBrokerConnected;
            _brokerClientService.Disconnected += OnBrokerDisconnected;
            _brokerClientService.MessageReceived += OnBrokerMessageReceived;

            LoadAgentsCommand = new RelayCommand(async () => await ExecuteLoadAgentsAsync(), () => true); // 항상 로드 시도 가능
            AddAgentCommand = new RelayCommand(ExecuteAddAgent, () => CanUserManageAgents);
            EditAgentCommand = new RelayCommand(ExecuteEditAgent, () => SelectedAgent != null && CanUserManageAgents);
            DeleteAgentCommand = new RelayCommand(async () => await ExecuteDeleteAgentAsync(), () => SelectedAgent != null && CanUserManageAgents);
            
            MonitorOnCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOn"), 
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && CanUserControlPower);
            MonitorOffCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOff"), 
                                               () => SelectedAgent != null && SelectedAgent.IsOnline && CanUserControlPower);
            PingAgentCommand = new RelayCommand(async () => await ExecutePingAgentAsync(), () => SelectedAgent != null && SelectedAgent.IsOnline);

            RequestBrokerStatusCommand = new RelayCommand(async () => await ExecuteRequestBrokerStatusAsync(), () => _brokerClientService.IsConnected);
            ConnectToBrokerCommand = new RelayCommand(async () => await _brokerClientService.ConnectAsync(), () => !_brokerClientService.IsConnected);
            DisconnectFromBrokerCommand = new RelayCommand(async () => await _brokerClientService.DisconnectAsync(), () => _brokerClientService.IsConnected);
            ClearUiLogsCommand = new RelayCommand(() => UiActionLogs.Clear());

            // 초기 데이터 로드 및 Broker 연결 시도
            Task.Run(async () => {
                await ExecuteLoadAgentsAsync(); // DB에서 먼저 로드
                if (!_brokerClientService.IsConnected) // 아직 연결 안됐으면 시도
                {
                    await _brokerClientService.ConnectAsync();
                }
                // 연결 성공 시 OnBrokerConnected에서 초기 요청들 보냄
            });
        }

        private void AddUiLog(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                string logEntry = $"[{DateTime.Now:HH:mm:ss.fff}] {message}";
                UiActionLogs.Insert(0, logEntry);
                if (UiActionLogs.Count > 200) UiActionLogs.RemoveAt(UiActionLogs.Count - 1);
            });
        }

        private async Task ExecuteLoadAgentsAsync()
        {
            AddUiLog("Loading managed agents from database...");
            try
            {
                var dbAgents = await _databaseService.GetManagedAgentsAsync();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    Agents.Clear();
                    foreach (var agent in dbAgents.OrderBy(a=>a.AgentName)) // 이름순 정렬
                    {
                        Agents.Add(agent);
                    }
                });
                AddUiLog($"Loaded {dbAgents.Count} agents configuration from DB.");
                
                // Broker에 연결되어 있다면, Broker에게 현재 Agent들의 실시간 상태를 요청하여 UI에 병합
                if(_brokerClientService.IsConnected)
                {
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList });
                }
            }
            catch (Exception ex)
            {
                AddUiLog($"[ERROR] Error loading agents from DB: {ex.Message}");
                MessageBox.Show($"Error loading agents: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void ExecuteAddAgent()
        {
            AddUiLog("Opening 'Add New Agent' window...");
            var agentConfigVm = new AgentConfigViewModel(_databaseService, _currentUserSession.UserId);
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm);
            
            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' added/updated in DB. Refreshing list.");
                Task.Run(async () => await ExecuteLoadAgentsAsync()); 
            }
            else
            {
                AddUiLog("'Add New Agent' window cancelled.");
            }
        }

        private void ExecuteEditAgent()
        {
            if (SelectedAgent == null) return;
            AddUiLog($"Opening 'Edit Agent' window for: {SelectedAgent.AgentName} (ID: {SelectedAgent.AgentIdProvidedByApp})");
            
            // DB에서 최신 정보 다시 로드 (동시성 문제 방지)
            ManagedAgentDisplay agentToEditInDb = null;
            try
            {
                agentToEditInDb = Task.Run(async () => await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid)).Result;
            }
            catch (Exception ex)
            {
                 AddUiLog($"[ERROR] Error fetching agent details for editing: {ex.Message}");
                 MessageBox.Show($"Error fetching agent details: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
                 return;
            }
            
            if(agentToEditInDb == null) {
                AddUiLog($"Agent {SelectedAgent.AgentName} not found in DB for editing. It might have been deleted. Refreshing list.");
                MessageBox.Show("Selected agent not found in database. It might have been deleted.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                Task.Run(async () => await ExecuteLoadAgentsAsync());
                return;
            }

            var agentConfigVm = new AgentConfigViewModel(_databaseService, _currentUserSession.UserId, agentToEditInDb);
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm);
            
            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' updated in DB. Refreshing list.");
                Task.Run(async () => await ExecuteLoadAgentsAsync());
            }
            else
            {
                AddUiLog("'Edit Agent' window cancelled.");
            }
        }

        private async Task ExecuteDeleteAgentAsync()
        {
            if (SelectedAgent == null) return;
            if (MessageBox.Show($"Are you sure you want to delete agent '{SelectedAgent.AgentName}' (ID: {SelectedAgent.AgentIdProvidedByApp}) from the database?\nThis will also delete associated control logs.",
                                "Confirm Delete Agent Configuration", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                AddUiLog($"Attempting to delete agent configuration: {SelectedAgent.AgentName}");
                try
                {
                    bool success = await _databaseService.DeleteManagedAgentAsync(SelectedAgent.AgentGuid);
                    if (success)
                    {
                        AddUiLog($"Agent configuration '{SelectedAgent.AgentName}' deleted successfully. Refreshing list.");
                        await ExecuteLoadAgentsAsync();
                    }
                    else
                    {
                        AddUiLog($"[ERROR] Failed to delete agent configuration '{SelectedAgent.AgentName}'.");
                        MessageBox.Show("Failed to delete agent configuration.", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
                catch (Exception ex)
                {
                    AddUiLog($"[ERROR] Error deleting agent configuration '{SelectedAgent.AgentName}': {ex.Message}");
                    MessageBox.Show($"Error deleting agent: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private async Task ExecuteMonitorControlAsync(string actionType) // "TurnMonitorOn" 또는 "TurnMonitorOff"
        {
            if (SelectedAgent == null) return;

            string correlationId = Guid.NewGuid().ToString();
            AddUiLog($"Sending '{actionType}' command (CorrID: {correlationId}) to agent: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");

            // DB에서 최신 설정 정보 로드 (중요)
            var currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid);
            if (currentAgentConfig == null)
            {
                AddUiLog($"[ERROR] Agent configuration for {SelectedAgent.AgentName} not found in DB. Cannot send command.");
                MessageBox.Show("Agent configuration not found. Please refresh the list.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            var payload = new UiControlAgentPayload 
            {
                TargetAgentIdProvidedByApp = currentAgentConfig.AgentIdProvidedByApp,
                ControlAction = actionType,
                ControlType = currentAgentConfig.ControlType,
                PrimaryIpAddress = currentAgentConfig.PrimaryIpAddress,
                PrimaryPort = currentAgentConfig.PrimaryPort,
                GatewayAgentIdToUse = currentAgentConfig.ControlType == "Gatewayed" ? 
                                      currentAgentConfig.GatewayAgentIpAddress : null, 
                                      // 주의: DB의 GatewayAgentIpAddress 컬럼에 게이트웨이의 'AgentIdProvidedByApp'(IP)가 저장되어야 함
                OriginalParameters = null // 현재는 추가 파라미터 없음
            };

            var message = new BrokerMessage 
            {
                Type = MessageType.UiRequest_ControlAgent,
                CorrelationId = correlationId, 
                Payload = JsonConvert.SerializeObject(payload),
                SourceId = _currentUserSession.Username // 명령을 내린 UI 사용자
            };

            // 로그 테이블에 '명령 전송 시도' 기록
            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = currentAgentConfig.AgentGuid,
                ActionType = actionType,
                RequestedByUserId = _currentUserSession.UserId,
                RequestTimestamp = DateTime.UtcNow, // 명령 시작 시간
                FinalStatus = "SentToBroker", // 초기 상태
                ResultMessage = $"Command sent to broker. Waiting for agent response. CorrID: {correlationId}"
            };
            try { await _databaseService.LogControlActionAsync(logEntry); }
            catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to log initial command send: {ex.Message}"); }

            await _brokerClientService.SendMessageAsync(message);
            // 실제 결과는 OnBrokerMessageReceived -> BrokerToUi_ForwardAgentCommandResult 에서 처리 후 DB 로그 업데이트
        }
        
        private async Task ExecutePingAgentAsync()
        {
            if (SelectedAgent == null) return;
            string correlationId = Guid.NewGuid().ToString();
            AddUiLog($"Sending 'PingAgent' command (CorrID: {correlationId}) to agent: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");
            
            var currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid);
            if (currentAgentConfig == null) { AddUiLog($"[ERROR] Agent config for {SelectedAgent.AgentName} not found for Ping."); return; }


            var payload = new UiControlAgentPayload
            {
                TargetAgentIdProvidedByApp = currentAgentConfig.AgentIdProvidedByApp,
                ControlAction = "PingAgent", // Broker가 이 Action을 보고 Agent.PingAgent 호출하도록
                ControlType = currentAgentConfig.ControlType, 
                PrimaryIpAddress = currentAgentConfig.PrimaryIpAddress,
                PrimaryPort = currentAgentConfig.PrimaryPort,
                GatewayAgentIdToUse = currentAgentConfig.ControlType == "Gatewayed" ? currentAgentConfig.GatewayAgentIpAddress : null
            };
            var message = new BrokerMessage
            {
                Type = MessageType.UiRequest_ControlAgent, // Ping도 제어 명령의 일종으로 취급
                CorrelationId = correlationId,
                Payload = JsonConvert.SerializeObject(payload),
                SourceId = _currentUserSession.Username
            };
            // Ping에 대한 로그는 결과 수신 시 기록
            await _brokerClientService.SendMessageAsync(message);
        }

        private async Task ExecuteRequestBrokerStatusAsync()
        {
            AddUiLog("Requesting broker status and logs...");
            var message = new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = _currentUserSession.Username };
            await _brokerClientService.SendMessageAsync(message);
        }

        #region Broker Event Handlers
        private void OnBrokerConnected()
        {
            Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Connected to Broker";
                AddUiLog("Successfully connected to Broker Service.");
            });
            Task.Run(async () => {
                // UI 클라이언트 자신을 Broker에 알림 (선택적이지만, Broker가 UI 식별에 사용 가능)
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiClientHello, SourceId = _currentUserSession.Username /* 또는 UI의 고유 ID */ });
                
                // 연결 성공 시 초기 데이터 요청
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus });
                // DB에서도 목록 로드 (ExecuteLoadAgentsAsync는 이미 Broker 상태 요청 후 실행됨)
                // await ExecuteLoadAgentsAsync(); 
            });
        }

        private void OnBrokerDisconnected()
        {
             Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Disconnected. Trying to reconnect...";
                AddUiLog("Disconnected from Broker Service. Connection will be retried by BrokerClientService if it's running.");
                foreach(var agent in Agents) { agent.IsOnline = false; agent.CurrentMonitorStatus = "Offline"; }
             });
        }

        private void OnBrokerMessageReceived(BrokerMessage message)
        {
             Application.Current.Dispatcher.Invoke(() =>
            {
                AddUiLog($"Msg from Broker: Type={message.Type}, Src={message.SourceId}, CorrId={message.CorrelationId}, PayloadLen={message.Payload?.Length ?? 0}");
                try
                {
                    switch (message.Type)
                    {
                        case MessageType.BrokerToUi_InitialAgentList:
                            var agentListPayload = JsonConvert.DeserializeObject<List<LiveAgentInfoForUi>>(message.Payload);
                            if (agentListPayload != null)
                            {
                                UpdateAgentListFromBroker(agentListPayload, true);
                                AddUiLog($"Received initial list of {agentListPayload.Count} live agents from Broker.");
                            }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated:
                        case MessageType.BrokerToUi_BroadcastAgentStatus: // 등록/업데이트와 상태 업데이트를 동일하게 처리
                            var liveAgentInfo = JsonConvert.DeserializeObject<LiveAgentInfoForUi>(message.Payload);
                            if (liveAgentInfo != null)
                            {
                                UpdateSingleAgentStatus(liveAgentInfo);
                                if(message.Type == MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated)
                                    AddUiLog($"Agent '{liveAgentInfo.AgentIdProvidedByApp}' registered/updated on Broker.");
                                // else AddUiLog($"Agent status update: {liveAgentInfo.AgentIdProvidedByApp} - Monitor: {liveAgentInfo.CurrentMonitorStatus}");
                            }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentDisconnected:
                            string disconnectedAgentId = message.SourceId; 
                            var agentToMarkOffline = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == disconnectedAgentId);
                            if (agentToMarkOffline != null)
                            {
                                agentToMarkOffline.IsOnline = false;
                                agentToMarkOffline.CurrentMonitorStatus = "Offline";
                                agentToMarkOffline.LastStatusMessageFromAgent = "Disconnected from Broker";
                                AddUiLog($"Agent disconnected from Broker: {disconnectedAgentId}");
                            }
                            break;
                        case MessageType.BrokerToUi_ForwardAgentCommandResult:
                            var cmdResultPayload = JsonConvert.DeserializeObject<AgentCommandResultPayload>(message.Payload);
                            if (cmdResultPayload != null)
                            {
                                AddUiLog($"Result for command [{message.CorrelationId}] from Agent [{message.SourceId}]: {(cmdResultPayload.Success ? "OK" : "NG")} - {cmdResultPayload.Message}");
                                var agentForResult = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == message.SourceId);
                                if(agentForResult != null)
                                {
                                    agentForResult.CurrentMonitorStatus = cmdResultPayload.CurrentMonitorStatus;
                                    agentForResult.LastStatusMessageFromAgent = $"Cmd Res: {cmdResultPayload.Message}";
                                    agentForResult.IsOnline = true; // 결과를 보냈다는 건 온라인이라는 의미
                                }
                                // DB에 로그 기록 (최종 결과)
                                UpdateControlActionLog(message.CorrelationId, message.SourceId, cmdResultPayload.Success, cmdResultPayload.Message, cmdResultPayload.CurrentMonitorStatus, DateTime.UtcNow);
                            }
                            break;
                        case MessageType.BrokerToUi_CommandDispatchFailed:
                             var dispatchFailPayload = JsonConvert.DeserializeObject<dynamic>(message.Payload);
                             string reason = dispatchFailPayload?.Message ?? "Unknown dispatch error";
                             AddUiLog($"[ERROR] Broker failed to dispatch command [{message.CorrelationId}] for Agent [{message.TargetId ?? message.SourceId}]: {reason}"); // TargetId가 있다면 그것 사용
                             // DB 로그에 'DispatchFailed' 상태로 기록
                             UpdateControlActionLog(message.CorrelationId, message.TargetId ?? message.SourceId, false, $"Broker Dispatch Failed: {reason}", null, DateTime.UtcNow, "FailureAtBroker");
                            break;
                        case MessageType.BrokerToUi_SendBrokerStatus:
                            var brokerStatusPayload = JsonConvert.DeserializeObject<BrokerStatusInfoPayload>(message.Payload);
                            if (brokerStatusPayload != null)
                            {
                                BrokerStatus.UpdateFromServerPayload(brokerStatusPayload); // BrokerStatusDisplay 모델의 메서드 사용
                                // Broker 로그는 BrokerStatus.RecentServerLogs에 바인딩될 것임
                                AddUiLog("Broker status and logs updated from server.");
                            }
                            break;
                    }
                }
                catch (JsonException jsonEx) { AddUiLog($"[ERROR] Failed to parse payload for message type {message.Type} from Broker: {jsonEx.Message}"); }
                catch (Exception ex) { AddUiLog($"[ERROR] Error processing message type {message.Type} from Broker: {ex.Message}"); }
            });
        }
        
        private void UpdateAgentListFromBroker(List<LiveAgentInfoForUi> liveAgents, bool isInitialLoad)
        {
            // DB에서 로드된 목록(Agents)과 Broker에서 온 실시간 목록(liveAgents)을 병합/업데이트
            foreach (var liveAgent in liveAgents)
            {
                UpdateSingleAgentStatus(liveAgent);
            }
            // 초기 로드 시, Broker 목록에 없는 DB Agent는 오프라인 처리
            if(isInitialLoad) {
                foreach(var dbAgent in Agents) {
                    if(!liveAgents.Any(la => la.AgentIdProvidedByApp == dbAgent.AgentIdProvidedByApp && la.IsOnline)) {
                        dbAgent.IsOnline = false;
                        dbAgent.CurrentMonitorStatus = "Offline";
                    }
                }
            }
        }

        private void UpdateSingleAgentStatus(LiveAgentInfoForUi liveInfo)
        {
            var agent = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == liveInfo.AgentIdProvidedByApp);
            if (agent != null)
            {
                // DB에 있는 Agent의 실시간 상태 업데이트
                agent.UpdateLiveStatus(liveInfo);
                // AgentName은 DB 것을 유지. Broker가 보내는 이름은 참고용.
            }
            else
            {
                 // Broker에는 있지만 로컬 DB 목록에는 없는 Agent (UI에 표시할지 여부 결정)
                 AddUiLog($"Live agent '{liveInfo.AgentIdProvidedByApp}' from Broker not found in local DB list. It needs to be added via 'Add Agent' първо.");
                 // 원한다면 임시로 표시할 수도 있음:
                 // var tempAgent = new ManagedAgentDisplay { AgentIdProvidedByApp = liveInfo.AgentIdProvidedByApp, AgentName = $"(Live: {liveInfo.AgentIdProvidedByApp} - Not in DB)" };
                 // tempAgent.UpdateLiveStatus(liveInfo);
                 // Agents.Add(tempAgent);
                 // SortAgents(); // 필요시 정렬
            }
        }
        
        private async void UpdateControlActionLog(string correlationId, string agentIdProvidedByApp, bool success, string message, string monitorStatus, DateTime completedTime, string statusOverride = null)
        {
            // CorrelationId로 기존 로그를 찾아 업데이트하거나, AgentIdProvidedByApp로 AgentGuid를 찾아 새 로그를 만듬.
            // 여기서는 단순화를 위해, ExecuteMonitorControlAsync에서 'SentToBroker' 상태로 이미 로그를 남겼다고 가정하고,
            // 그 로그를 찾아 업데이트하거나, 아니면 새 로그를 만듬 (CorrelationId가 없다면).
            // 실제로는 CorrelationId로 로그를 찾는 로직이 필요.
            // 지금은 그냥 새 로그를 기록하는 것처럼 처리 (중복 로그 가능성 있음, 개선 필요)
            
            var agent = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == agentIdProvidedByApp);
            if (agent == null)
            {
                AddUiLog($"[DB LOG ERROR] Cannot update log: Agent with ID {agentIdProvidedByApp} not found for CorrId {correlationId}.");
                return;
            }

            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = agent.AgentGuid,
                // ActionType은 CorrelationId에 해당하는 원래 요청에서 가져와야 함.
                ActionType = "ControlAction (Result)", // 임시
                RequestTimestamp = DateTime.UtcNow.AddSeconds(-5), // 임시, 원래 요청 시간 필요
                ExecutionCompletedTimestamp = completedTime,
                FinalStatus = statusOverride ?? (success ? "Success" : "FailureAtAgent"),
                ResultMessage = message,
                RequestedByUserId = _currentUserSession.UserId,
                // ExecutedViaGatewayAgentId 등 필요
            };
            try
            {
                await _databaseService.LogControlActionAsync(logEntry);
                AddUiLog($"Command result for {agent.AgentName} (CorrId: {correlationId}) final status logged to DB.");
            }
            catch (Exception ex)
            {
                AddUiLog($"[DB ERROR] Failed to log final command status for {agent.AgentName} to DB: {ex.Message}");
            }
        }
        
        #endregion

        public void Cleanup() 
        {
            AddUiLog("MainViewModel cleaning up broker connection...");
            if (_brokerClientService != null)
            {
                _brokerClientService.Connected -= OnBrokerConnected;
                _brokerClientService.Disconnected -= OnBrokerDisconnected;
                _brokerClientService.MessageReceived -= OnBrokerMessageReceived;
                Task.Run(async () => await _brokerClientService.DisconnectAsync()).Wait(TimeSpan.FromSeconds(2)); 
                (_brokerClientService as IDisposable)?.Dispose();
            }
        }
    }
}
7. Views/MainWindow.xaml (메인 창 XAML - 완성)

XML

<Window x:Class="MGSPMonitorControl.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl.Views"
        xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        mc:Ignorable="d"
        Title="MGSP Monitor Control Panel" Height="768" Width="1280"
        WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=viewmodels:MainViewModel, IsDesignTimeCreatable=False}"
        Closing="Window_Closing">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> <RowDefinition Height="200"/>  </Grid.RowDefinitions>

        <Border Grid.Row="0" BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="5">
            <StackPanel Orientation="Vertical">
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="User: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding CurrentUsername}" Margin="0,0,20,0"/>
                    <TextBlock Text="Broker Status: " FontWeight="SemiBold"/>
                    <TextBlock Text="{Binding BrokerConnectionStatus}" Margin="0,0,5,0" 
                               Foreground="{Binding BrokerConnectionStatus, Converter={StaticResource ConnectionStatusToColorConverter}}"/>
                    <Button Content="Connect" Command="{Binding ConnectToBrokerCommand}" Margin="0,0,5,0" Padding="5,2" IsEnabled="{Binding ElementName=ConnectToBrokerCommand, Path=IsEnabled}"/>
                    <Button Content="Disconnect" Command="{Binding DisconnectFromBrokerCommand}" Padding="5,2" IsEnabled="{Binding ElementName=DisconnectFromBrokerCommand, Path=IsEnabled}"/>
                </StackPanel>
                <Expander Header="Broker Server Details" Margin="0,5,0,0" IsExpanded="False">
                    <StackPanel Margin="10,5,0,5">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Version: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.BrokerVersion}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Uptime: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.UptimeString}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Agents: " FontWeight="SemiBold" MinWidth="80"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedAgentCount}"/>
                            <TextBlock Text=" UIs: " FontWeight="SemiBold" Margin="10,0,0,0"/>
                            <TextBlock Text="{Binding BrokerStatus.ConnectedUiClientCount}"/>
                        </StackPanel>
                        <Button Content="Refresh Broker Status" Command="{Binding RequestBrokerStatusCommand}" Margin="0,5,0,0" HorizontalAlignment="Left" Padding="5,2"/>
                    </StackPanel>
                </Expander>
            </StackPanel>
        </Border>

        <GroupBox Grid.Row="1" Header="Managed Agents" Margin="0,5,0,5" Padding="5">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <DataGrid Grid.Row="0" x:Name="AgentsDataGrid" AutoGenerateColumns="False" CanUserAddRows="False"
                          ItemsSource="{Binding Agents}" SelectedItem="{Binding SelectedAgent}" 
                          SelectionMode="Single" IsReadOnly="True" AlternatingRowBackground="#FFF0F0F0"
                          HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                    <DataGrid.Resources>
                        <Style TargetType="DataGridRow">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding IsOnline}" Value="True">
                                    <Setter Property="Foreground" Value="DarkGreen"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsOnline}" Value="False">
                                    <Setter Property="Foreground" Value="DarkRed"/>
                                    <Setter Property="FontStyle" Value="Italic"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGrid.Resources>
                    <DataGrid.Columns>
                        <DataGridCheckBoxColumn Header="Enabled" Binding="{Binding IsEnabled}" Width="Auto" IsReadOnly="True"/>
                        <DataGridTextColumn Header="Name" Binding="{Binding AgentName}" Width="1.5*"/>
                        <DataGridTextColumn Header="Agent ID (IP)" Binding="{Binding AgentIdProvidedByApp}" Width="1.2*"/>
                        <DataGridTextColumn Header="Monitor" Binding="{Binding CurrentMonitorStatus}" Width="Auto">
                            <DataGridTextColumn.ElementStyle>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontWeight" Value="SemiBold"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="On">
                                            <Setter Property="Foreground" Value="Green"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Off">
                                            <Setter Property="Foreground" Value="Red"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Unknown">
                                            <Setter Property="Foreground" Value="Gray"/>
                                        </DataTrigger>
                                         <DataTrigger Binding="{Binding CurrentMonitorStatus}" Value="Offline">
                                            <Setter Property="Foreground" Value="DarkRed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </DataGridTextColumn.ElementStyle>
                        </DataGridTextColumn>
                        <DataGridTextColumn Header="Control Type" Binding="{Binding ControlType}" Width="Auto"/>
                        <DataGridTextColumn Header="Primary IP" Binding="{Binding PrimaryIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="Port" Binding="{Binding PrimaryPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Gateway IP/ID" Binding="{Binding GatewayAgentIpAddress}" Width="Auto"/>
                        <DataGridTextColumn Header="GW Port" Binding="{Binding GatewayAgentPort}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Heartbeat (UTC)" Binding="{Binding LastHeartbeatUtc, StringFormat='HH:mm:ss dd/MM/yy'}" Width="Auto"/>
                        <DataGridTextColumn Header="Last Status Message" Binding="{Binding LastStatusMessageFromAgent}" Width="2*"/>
                    </DataGrid.Columns>
                </DataGrid>
                <StackPanel Grid.Row="1" Orientation="Horizontal" Margin="0,10,0,0">
                    <Button Content="Refresh Agent List (DB)" Command="{Binding LoadAgentsCommand}" Margin="0,0,5,0" Padding="8,4"/>
                    <Button Content="Add Agent" Command="{Binding AddAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding ManageAgentsButtonVisibility}"/>
                    <Button Content="Edit Selected" Command="{Binding EditAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding ManageAgentsButtonVisibility}"/>
                    <Button Content="Delete Selected" Command="{Binding DeleteAgentCommand}" Margin="0,0,5,0" Padding="8,4" Visibility="{Binding ManageAgentsButtonVisibility}"/>
                </StackPanel>
            </Grid>
        </GroupBox>

        <GroupBox Grid.Row="2" Header="Selected Agent Control" Margin="0,5,0,5" Padding="5" IsEnabled="{Binding SelectedAgent.IsOnline}">
             <StackPanel Orientation="Horizontal">
                <TextBlock Text="Selected:" FontWeight="Bold" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBlock Text="{Binding SelectedAgent.AgentName, FallbackValue='(None Selected)'}" VerticalAlignment="Center" Margin="0,0,20,0" FontStyle="Italic"/>
                <Button Content="Monitor ON" Command="{Binding MonitorOnCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding ControlPowerButtonVisibility}"/>
                <Button Content="Monitor OFF" Command="{Binding MonitorOffCommand}" Margin="0,0,5,0" Padding="10,5" Visibility="{Binding ControlPowerButtonVisibility}"/>
                <Button Content="Ping Agent" Command="{Binding PingAgentCommand}" Padding="10,5"/>
            </StackPanel>
        </GroupBox>

        <Grid Grid.Row="3" Margin="0,5,0,0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <GroupBox Grid.Column="0" Header="UI Action Log" Margin="0,0,5,0">
                <DockPanel>
                    <Button DockPanel.Dock="Bottom" Content="Clear UI Log" Command="{Binding ClearUiLogsCommand}" Margin="0,5,0,0" HorizontalAlignment="Right"/>
                    <TextBox x:Name="UiLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                             ItemsSource="{Binding UiActionLogs}" Text="{Binding UiActionLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
                </DockPanel>
            </GroupBox>
            <GroupBox Grid.Column="1" Header="Broker Server Log (Recent 50)" Margin="5,0,0,0">
                 <TextBox x:Name="BrokerLogTextBox" IsReadOnly="True" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" TextWrapping="NoWrap"
                          ItemsSource="{Binding BrokerStatus.RecentServerLogs}" Text="{Binding BrokerStatus.RecentServerLogs, Converter={StaticResource StringCollectionToStringConverter}}"/>
            </GroupBox>
        </Grid>
    </Grid>
    <Window.Resources>
        <local:StringCollectionToStringConverter x:Key="StringCollectionToStringConverter"/>
        <local:ConnectionStatusToColorConverter x:Key="ConnectionStatusToColorConverter"/>
    </Window.Resources>
</Window>
12.1. Views/StringCollectionToStringConverter.cs (또는 Converters/ 폴더)
ObservableCollection<string>을 TextBox에 여러 줄로 표시하기 위한 간단한 컨버터입니다.

C#

// MGSPMonitorControl/Views/StringCollectionToStringConverter.cs
using System;
using System.Collections.ObjectModel;
using System.Globalization;
using System.Linq;
using System.Windows.Data;

namespace MGSPMonitorControl.Views
{
    public class StringCollectionToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is ObservableCollection<string> collection)
            {
                // 최신 로그가 위로 오도록 Insert(0,...) 했으므로, 그대로 Join하면 됨.
                // 만약 Add()를 사용했다면 Reverse() 필요.
                return string.Join(Environment.NewLine, collection);
            }
            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException(); // 사용 안 함
        }
    }
}
12.2. Views/ConnectionStatusToColorConverter.cs (또는 Converters/ 폴더)
Broker 연결 상태 텍스트 색상 변경용 컨버터입니다.

C#

// MGSPMonitorControl/Views/ConnectionStatusToColorConverter.cs
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace MGSPMonitorControl.Views
{
    public class ConnectionStatusToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is string status)
            {
                if (status.Equals("Connected to Broker", StringComparison.OrdinalIgnoreCase))
                    return Brushes.Green;
                if (status.StartsWith("Disconnected", StringComparison.OrdinalIgnoreCase))
                    return Brushes.Red;
            }
            return Brushes.Gray; // 기본값
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}

13. Views/MainWindow.xaml.cs (메인 창 코드 비하인드 - 완성)

ViewModel을 생성하고 DataContext에 할당하며, 창 닫기 시 ViewModel의 정리 메서드를 호출합니다.

C#

// MGSPMonitorControl/Views/MainWindow.xaml.cs
using System.ComponentModel; // CancelEventArgs
using System.Windows;
using MGSPMonitorControl.ViewModels;

namespace MGSPMonitorControl.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow(MainViewModel viewModel) // ViewModel 주입
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;
        }

        // 창이 닫힐 때 ViewModel의 정리(Cleanup) 메서드 호출
        private void Window_Closing(object sender, CancelEventArgs e)
        {
            _viewModel?.Cleanup(); // MainViewModel에 Cleanup 메서드 필요
        }
    }
}
14. App.xaml.cs (애플리케이션 시작 로직 - 완성)

서비스 초기화, 로그인 창 표시, 로그인 성공 시 메인 창 표시 등의 로직을 담당합니다.

C#

// MGSPMonitorControl/App.xaml.cs
using System;
using System.Windows;
using MGSPMonitorControl.DataAccess; // DatabaseService (App.config 참조 위해 네임스페이스 확인)
using MGSPMonitorControl.Models;    // UserSession
using MGSPMonitorControl.Services;  // PasswordService, BrokerClientService 등
using MGSPMonitorControl.ViewModels; // LoginViewModel, MainViewModel
using MGSPMonitorControl.Views;      // LoginWindow, MainWindow

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        // 서비스 인스턴스들 (DI 컨테이너 사용 시 더 좋음)
        private IDatabaseService _databaseService;
        private IPasswordService _passwordService;
        private IBrokerClientService _brokerClientService;
        // private ILoggingService _uiLogger; // UI 자체 로깅용 (필요시)

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // 서비스 인스턴스 생성
            try
            {
                // DatabaseService 생성자는 App.config에서 연결 문자열을 읽음
                _databaseService = new DatabaseService(); 
            }
            catch (System.Configuration.ConfigurationErrorsException cex)
            {
                MessageBox.Show($"Database configuration error: {cex.Message}\nPlease check App.config and ensure 'MonitorControlDBConnection' connection string is valid.\nThe application will now exit.", 
                                "Configuration Error", MessageBoxButton.OK, MessageBoxImage.Error);
                Shutdown(-1);
                return;
            }
            catch (Exception ex) // DB 서비스 초기화 중 다른 예외
            {
                 MessageBox.Show($"Failed to initialize database service: {ex.Message}\nThe application will now exit.", 
                                "Initialization Error", MessageBoxButton.OK, MessageBoxImage.Error);
                Shutdown(-1);
                return;
            }

            _passwordService = new PasswordService();
            _brokerClientService = new BrokerClientService(/* _uiLogger */); // 필요시 로거 주입


            // 로그인 창 표시
            var loginViewModel = new LoginViewModel(_databaseService, _passwordService);
            var loginWindow = new LoginWindow(loginViewModel); // ViewModel 주입
            
            // 예시: 기본 사용자 생성 (최초 실행 시 또는 필요에 따라)
            // 이 부분은 실제 운영에서는 더 안전하고 적절한 시점에 처리되어야 합니다.
            // Task.Run(async () => await loginViewModel.EnsureDefaultUserExists());


            bool? loginResult = loginWindow.ShowDialog();

            if (loginResult == true && loginWindow.AuthenticatedUserSession != null)
            {
                // 로그인 성공
                UserSession userSession = loginWindow.AuthenticatedUserSession;

                // 메인 창 ViewModel 및 메인 창 생성 및 표시
                var mainViewModel = new MainViewModel(userSession, _databaseService, _brokerClientService /*, _uiLogger */);
                var mainWindow = new MainWindow(mainViewModel); // ViewModel 주입
                
                this.MainWindow = mainWindow; // 애플리케이션의 주 창으로 설정
                mainWindow.Show();
            }
            else
            {
                // 로그인 실패 또는 창 닫힘
                Shutdown();
            }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            // 애플리케이션 종료 시 BrokerClientService 정리
            (_brokerClientService as IDisposable)?.Dispose();
            // 다른 서비스들도 IDisposable을 구현했다면 여기서 정리
            base.OnExit(e);
        }
    }
}
15. App.config 파일 예시 (프로젝트에 추가)

프로젝트에 App.config 파일이 없다면 새로 추가하고, 다음 내용을 기본으로 하여 DB 연결 문자열과 Broker 주소를 설정합니다.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <connectionStrings>
        <add name="MonitorControlDBConnection" 
             connectionString="Server=YOUR_DB_SERVER_ADDRESS;Database=MonitorControlDB;User ID=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;Pooling=true;Max Pool Size=100;Connect Timeout=15;" 
             providerName="System.Data.SqlClient" />
    </connectionStrings>
    <appSettings>
        <add key="BrokerAddress" value="127.0.0.1:9001"/> 
    </appSettings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>
App.config 사용을 위해서는 프로젝트에 System.Configuration.dll 어셈블리 참조가 필요합니다.

이것으로 제어 UI 프로그램(MGSPMonitorControl)의 주요 파일들에 대한 전체 코드를 제공해 드렸습니다.

실행 전 최종 점검 사항:

DB 스크립트 실행: MonitorControlDB 데이터베이스 및 테이블들이 생성되어 있어야 합니다. 예시 사용자도 추가해두시면 로그인 테스트에 편리합니다 (비밀번호는 PasswordService의 해싱 방식에 맞게 직접 해시하여 DB에 넣거나, CreateUserAsync 같은 기능을 UI에 임시로 만들어 사용).
App.config 설정: connectionStrings의 MonitorControlDBConnection과 appSettings의 BrokerAddress를 실제 환경에 맞게 정확히 수정해야 합니다.
MessageContract.cs 일치: 세 프로젝트(MGSPBrokerService, MonitorAgent, MGSPMonitorControl)의 MessageContract.cs 파일 내용이 네임스페이스(MonitorControl.SharedModels) 포함하여 완전히 동일한지 다시 한번 확인합니다.
NuGet 패키지: Newtonsoft.Json, (선택적) CommunityToolkit.Mvvm (여기서는 수동 헬퍼 사용), 그리고 System.Configuration.dll 참조가 올바르게 되었는지 확인합니다.
중계 프로그램 실행: MGSPBrokerService를 먼저 실행하여 UI와 Agent가 접속할 수 있도록 준비합니다.