인터넷 권한 문제를 해결하기 위해 AndroidManifest.xml 파일에 인터넷 권한을 추가해야 합니다. 그리고 버튼을 눌렀을 때 서버에서 이미지를 가져오도록 코드를 수정하겠습니다.

전체 코드
AndroidManifest.xml
xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.mssqlimageapp">

    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MSSQLImageApp">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
MainActivity.kt
kotlin
코드 복사
package com.example.mssqlimageapp

import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.clickable
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.IntOffset
import androidx.compose.ui.unit.dp
import com.example.mssqlimageapp.ui.theme.MSSQLImageAppTheme
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import kotlin.math.roundToInt

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MSSQLImageAppTheme {
                Surface(color = MaterialTheme.colors.background) {
                    ImageListScreen()
                }
            }
        }
    }
}

@Composable
fun ImageListScreen() {
    var imageList by remember { mutableStateOf(listOf<ImageData>()) }
    var selectedImage by remember { mutableStateOf<Bitmap?>(null) }

    val scope = rememberCoroutineScope()

    // Fetch data when the button is clicked
    Column {
        Button(
            onClick = {
                scope.launch {
                    imageList = fetchDataFromDatabase()
                }
            },
            modifier = Modifier.padding(16.dp)
        ) {
            Text("Fetch Data")
        }
        LazyColumn(modifier = Modifier.weight(1f)) {
            items(imageList.size) { index ->
                val imageData = imageList[index]
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp)
                ) {
                    Text(imageData.imageTitle, modifier = Modifier.weight(1f))
                    Text(imageData.datetime, modifier = Modifier.weight(1f))
                    Button(onClick = {
                        scope.launch {
                            selectedImage = fetchImageFromDatabase(imageData.imageTitle, imageData.datetime)
                        }
                    }) {
                        Text("Load Image")
                    }
                }
            }
        }
        selectedImage?.let { bitmap ->
            ImageDisplayScreen(bitmap = bitmap)
        }
    }
}

data class ImageData(val imageTitle: String, val datetime: String)

suspend fun fetchDataFromDatabase(): List<ImageData> {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.createStatement()
        val resultSet: ResultSet = statement.executeQuery("EXEC yourProcedure")

        val imageList = mutableListOf<ImageData>()
        while (resultSet.next()) {
            val imageTitle = resultSet.getString("imagetitle")
            val datetime = resultSet.getString("datetime1")
            imageList.add(ImageData(imageTitle, datetime))
        }
        connection.close()
        imageList
    }
}

suspend fun fetchImageFromDatabase(imageTitle: String, datetime: String): Bitmap {
    return withContext(Dispatchers.IO) {
        val connection: Connection = DriverManager.getConnection(
            "jdbc:jtds:sqlserver://10.211.211.211:2111;databaseName=yourDatabase",
            "yourUsername",
            "yourPassword"
        )
        val statement = connection.prepareCall("{call yourImageProcedure(?, ?)}")
        statement.setString(1, imageTitle)
        statement.setString(2, datetime)
        val resultSet: ResultSet = statement.executeQuery()
        
        var bitmap: Bitmap? = null
        if (resultSet.next()) {
            val blob = resultSet.getBlob("imageColumn")
            val byteArray = blob.binaryStream.readBytes()
            bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
        }
        connection.close()
        bitmap ?: throw Exception("Image not found")
    }
}

@Composable
fun ImageDisplayScreen(bitmap: Bitmap) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    
    Box(modifier = Modifier
        .fillMaxSize()
        .pointerInput(Unit) {
            detectTransformGestures { _, pan, zoom, _ ->
                scale *= zoom
                offset = Offset(offset.x + pan.x, offset.y + pan.y)
            }
        }
    ) {
        Image(
            bitmap = bitmap.asImageBitmap(),
            contentDescription = null,
            modifier = Modifier
                .offset { IntOffset(offset.x.roundToInt(), offset.y.roundToInt()) }
                .graphicsLayer(
                    scaleX = scale,
                    scaleY = scale,
                    translationX = offset.x,
                    translationY = offset.y
                )
        )
    }
}
Theme.kt
kotlin
코드 복사
package com.example.mssqlimageapp.ui.theme

import androidx.compose.foundation.isSystemInDarkTheme
import androidx.compose.material.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.graphics.Color

private val DarkColorPalette = darkColors(
    primary = Color.Red,
    primaryVariant = Color(0xFF8B0000), // DarkRed에 대한 RGB 코드 사용
    secondary = Color.Red
)

private val LightColorPalette = lightColors(
    primary = Color.Red,
    primaryVariant = Color(0xFF8B0000), // DarkRed에 대한 RGB 코드 사용
    secondary = Color.Red
)

@Composable
fun MSSQLImageAppTheme(
    darkTheme: Boolean = isSystemInDarkTheme(),
    content: @Composable () -> Unit
) {
    val colors = if (darkTheme) {
        DarkColorPalette
    } else {
        LightColorPalette
    }

    MaterialTheme(
        colors = colors, // colors 부분이 빨간색으로 표시됨
        typography = Typography,
        shapes = Shapes, // shapes 부분이 빨간색으로 표시됨
        content = content
    )
}
Shapes.kt
kotlin
코드 복사
package com.example.mssqlimageapp.ui.theme

import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.Shapes
import androidx.compose.ui.unit.dp

val Shapes = Shapes(
    small = RoundedCornerShape(4.dp),
    medium = RoundedCornerShape(4.dp),
    large = RoundedCornerShape(0.dp)
)
Typography.kt
kotlin
코드 복사
package com.example.mssqlimageapp.ui.theme

import androidx.compose.material.Typography
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.sp

val Typography = Typography(
    body1 = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 16.sp
    )
    /* Other default text styles to override
    button = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.W500,
        fontSize = 14.sp
    ),
    caption = TextStyle(
        fontFamily = FontFamily.Default,
        fontWeight = FontWeight.Normal,
        fontSize = 12.sp
    )
    */
)
이제 앱을 빌드하고 실행하면 버튼을 눌러 서버에서 데이터를 가져오고, 이미지를 로드할 수 있습니다. 또한 AndroidManifest.xml에 인터넷 권한을 추가하여 인터넷 연