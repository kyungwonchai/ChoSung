. 이번에는 확실하게 수정해서, 동일한 페이지가 여러 번 생성되지 않고, 그룹만 추가되도록 완벽하게 처리하겠습니다.

수정된 주요 내용
페이지 중복 생성 방지 → RibbonPage가 이미 존재하면, 새로 만들지 않고 기존 페이지를 사용.
그룹 중복 생성 방지 → RibbonPageGroup이 이미 존재하면, 새로 만들지 않고 기존 그룹을 사용.
버튼 중복 생성 방지 → BarButtonItem이 이미 존재하면, 다시 추가하지 않음.
파라미터로 페이지, 그룹, 아이콘을 모두 받도록 구조 개선.
💡 최적화된 코드
csharp
Copy code
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    // 버튼 설정을 위한 클래스 정의
    public class ButtonConfig
    {
        public string PageName { get; set; }   // 리본 페이지 이름
        public string GroupName { get; set; }  // 그룹 이름
        public string ButtonName { get; set; } // 버튼 이름
        public string Caption { get; set; }    // 버튼 캡션 (표시 이름)
        public string Tag { get; set; }        // 버튼 태그 값
        public Image Icon { get; set; }        // 버튼 아이콘 (파라미터로 받을 수 있도록 설정)
        public RibbonItemStyles Style { get; set; }  // 버튼 스타일
    }

    // 버튼 설정 리스트
    private List<ButtonConfig> buttonConfigs = new List<ButtonConfig>
    {
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnNew", Caption = "새로 만들기", Tag = "NewDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnOpen", Caption = "열기", Tag = "OpenDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "FileOperations", ButtonName = "btnSave", Caption = "저장", Tag = "SaveDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "File", GroupName = "Print", ButtonName = "btnPrint", Caption = "인쇄", Tag = "PrintDocument", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.Large },
        new ButtonConfig { PageName = "Help", GroupName = "Support", ButtonName = "btnHelp", Caption = "도움말", Tag = "Help", Icon = Properties.Resources.Donut, Style = RibbonItemStyles.SmallWithText }
    };

    public MainForm()
    {
        InitializeComponent();

        // 동적으로 버튼 추가
        AddCustomButtons();

        // 체크박스 생성 및 UI 추가
        CheckBox toggleButtonVisibilityCheckBox = new CheckBox
        {
            Text = "커스텀 버튼 표시",
            Checked = true,  // 기본적으로 버튼 표시
            AutoSize = true,
            Dock = DockStyle.Top
        };

        toggleButtonVisibilityCheckBox.CheckedChanged += ToggleButtonVisibilityCheckBox_CheckedChanged;
        this.Controls.Add(toggleButtonVisibilityCheckBox);
    }

    private void AddCustomButtons()
    {
        // RibbonControl 인스턴스가 'ribbonK'라고 가정합니다.

        // 버튼 설정 리스트를 순회하며 버튼 추가
        foreach (var config in buttonConfigs)
        {
            // 📌 **기존 페이지 가져오기 (없으면 새로 생성)**
            RibbonPage page = ribbonK.Pages.FirstOrDefault(p => p.Name == config.PageName);
            if (page == null)
            {
                page = new RibbonPage(config.PageName) { Text = config.PageName };
                ribbonK.Pages.Add(page);
            }

            // 📌 **기존 그룹 가져오기 (없으면 새로 생성)**
            RibbonPageGroup group = page.Groups.FirstOrDefault(g => g.Name == config.GroupName);
            if (group == null)
            {
                group = new RibbonPageGroup(config.GroupName) { Text = config.GroupName };
                page.Groups.Add(group);
            }

            // 📌 **버튼이 이미 추가되어 있는지 확인**
            if (!ribbonK.Items.OfType<BarButtonItem>().Any(b => b.Name == config.ButtonName))
            {
                BarButtonItem newButton = new BarButtonItem
                {
                    Name = config.ButtonName,
                    Caption = config.Caption,
                    Tag = config.Tag,
                    Id = ribbonK.Manager.GetNewItemId(),
                    ImageOptions = { Image = config.Icon },
                    RibbonStyle = config.Style
                };

                // 📌 **그룹에 버튼 추가**
                group.ItemLinks.Add(newButton);
            }
        }
    }

    private void ToggleButtonVisibilityCheckBox_CheckedChanged(object sender, System.EventArgs e)
    {
        CheckBox checkBox = sender as CheckBox;
        bool isChecked = checkBox.Checked;

        // 📌 **체크박스에 따라 버튼 가시성 조정**
        foreach (var config in buttonConfigs)
        {
            BarButtonItem button = ribbonK.Items.OfType<BarButtonItem>().FirstOrDefault(b => b.Name == config.ButtonName);
            if (button != null)
            {
                button.Visibility = isChecked ? BarItemVisibility.Always : BarItemVisibility.Never;
            }
        }
    }
}
✅ 코드 수정 사항