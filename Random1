_SAFE_UPDATES 설정과 이벤트 내에서 MONTH 함수 사용과 관련된 문제를 해결하여 제공하겠습니다.

1. 백업 테이블 생성
sql
코드 복사
CREATE TABLE IF NOT EXISTS smd.management_mobile_checksheet_backup AS 
SELECT * FROM smd.management_mobile_checksheet WHERE 1=0;
2. 백업 및 삭제 쿼리
sql
코드 복사
SET SQL_SAFE_UPDATES = 0;

INSERT INTO smd.management_mobile_checksheet_backup 
SELECT * FROM smd.management_mobile_checksheet 
WHERE check_time < NOW() - INTERVAL 18 MONTH;

DELETE FROM smd.management_mobile_checksheet 
WHERE check_time < NOW() - INTERVAL 18 MONTH;

SET SQL_SAFE_UPDATES = 1;
3. 이벤트 작업 등록
sql
코드 복사
DELIMITER $$

CREATE EVENT IF NOT EXISTS backup_and_delete_old_checksheet_data
ON SCHEDULE EVERY 1 DAY
STARTS CURRENT_TIMESTAMP
DO
BEGIN
    SET SQL_SAFE_UPDATES = 0;

    INSERT INTO smd.management_mobile_checksheet_backup 
    SELECT * FROM smd.management_mobile_checksheet 
    WHERE check_time < NOW() - INTERVAL 18 MONTH;

    DELETE FROM smd.management_mobile_checksheet 
    WHERE check_time < NOW() - INTERVAL 18 MONTH;

    SET SQL_SAFE_UPDATES = 1;
END$$

DELIMITER ;
설명:
SET SQL_SAFE_UPDATES = 0 및 1: MySQL에서 안전 업데이트 모드를 비활성화(SET SQL_SAFE_UPDATES = 0) 하여, 업데이트나 삭제 시 조건이 없거나 인덱스를 사용하지 않는 경우에도 오류가 발생하지 않도록 합니다. 작업이 끝난 후에는 안전 업데이트 모드를 다시 활성화(SET SQL_SAFE_UPDATES = 1) 합니다.

DELIMITER $$ 및 DELIMITER ;: 이벤트 생성 시 여러 SQL 명령문을 포함하기 위해 DELIMITER를 변경하여 이벤트 블록 내에서 세미콜론(;)이 아닌 $$를 사용하도록 설정합니다. 이벤트 생성이 끝나면 원래의 DELIMITER ;로 복원합니다.

이벤트 작업 등록: 이벤트 작업은 매일 한 번 실행되어, 18개월이 지난 데이터를 백업하고 원본 테이블에서 삭제합니다.

이 쿼리들을 사용하면 MySQL에서 안전하게 데이터를 백업하고 삭제하는 작업