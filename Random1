using System;
using System.Data;
using System.Drawing;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Native;
using DevExpress.XtraRichEdit.Commands;

// 백그라운드 작업을 위한 비동기 메서드
private async Task UpdateRichEditControlAsync(DataTable dataTable, RichEditControl richEditControl)
{
    // DataTable의 내용을 표 형태로 변환
    string tableHtml = ConvertDataTableToHtml(dataTable);

    // 백그라운드에서 RichEditControl 업데이트
    await Task.Run(() =>
    {
        richEditControl.Invoke(new MethodInvoker(() =>
        {
            // RichEditControl에 표 형태의 내용 설정
            richEditControl.Document.BeginUpdate();

            // 테이블 스타일 지정
            richEditControl.Document.InsertText(richEditControl.Document.Range.Start, "<MaskFilter 경과일 사전 알림>\n\n");
            richEditControl.Document.Paragraphs[0].Alignment = ParagraphAlignment.Center;
            richEditControl.Document.AppendText("\t\t\t\t\t"); // 첫 번째 행의 첫 번째 셀을 추가하여 테이블 헤더 색상 지정

            // 테이블 헤더 생성
            for (int col = 0; col < dataTable.Columns.Count; col++)
            {
                richEditControl.Document.AppendText(dataTable.Columns[col].ColumnName);
                if (col < dataTable.Columns.Count - 1)
                {
                    richEditControl.Document.AppendText("\t");
                }
            }
            richEditControl.Document.AppendText("\n");
            richEditControl.Document.Paragraphs[1].LeftIndent = richEditControl.Document.Paragraphs[0].LeftIndent;
            richEditControl.Document.Paragraphs[1].Alignment = ParagraphAlignment.Center;

            // 테이블 데이터 생성
            for (int row = 0; row < dataTable.Rows.Count; row++)
            {
                DataRow dataRow = dataTable.Rows[row];
                for (int col = 0; col < dataTable.Columns.Count; col++)
                {
                    richEditControl.Document.AppendText(dataRow[col].ToString());
                    if (col < dataTable.Columns.Count - 1)
                    {
                        richEditControl.Document.AppendText("\t");
                    }

                    // 셀 스타일 설정
                    if (col == 3 && col < dataTable.Columns.Count - 1)
                    {
                        int currentCellValue = int.Parse(dataRow[col].ToString());
                        int nextCellValue = int.Parse(dataRow[col + 1].ToString());
                        if (currentCellValue < nextCellValue)
                        {
                            richEditControl.Document.Selection = richEditControl.Document.CreateRange(
                                richEditControl.Document.CaretPosition.ToInt() - (dataRow[col].ToString().Length + 1),
                                dataRow[col].ToString().Length);
                            richEditControl.Document.Selection.BackColor = Color.Yellow;
                            richEditControl.Document.Selection = richEditControl.Document.CreateRange(
                                richEditControl.Document.CaretPosition.ToInt() + 1,
                                dataRow[col + 1].ToString().Length);
                            richEditControl.Document.Selection.BackColor = Color.Yellow;
                        }
                    }
                }
                richEditControl.Document.AppendText("\n");
            }

            richEditControl.Document.EndUpdate();
        }));
    });
}

// 예시로 사용하는 메서드
private async void LoadDataInBackground()
{
    // 예시로 DataTable 생성
    DataTable dataTable = new DataTable();
    dataTable.Columns.Add("Name", typeof(string));
    dataTable.Columns.Add("Age", typeof(int));
    dataTable.Columns.Add("Date", typeof(string));
    dataTable.Columns.Add("Remaining Days", typeof(int));
    dataTable.Rows.Add("John Doe", 30, "2023-07-15", 5);
    dataTable.Rows.Add("Jane Smith", 25, "2023-07-20", 2);

    // RichEditControl 업데이트를 백그라운드로 실행
    await UpdateRichEditControlAsync(dataTable, richEditControl1);
}
