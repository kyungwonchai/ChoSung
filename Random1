function fetchData() {
    fetch('/logsensors-data')
        .then(response => response.json())
        .then(data => {
            updateTable(data);
        })
        .catch(error => console.error('Error fetching data:', error));
}

function updateTable(data) {
    const tbody = document.querySelector('tbody');
    tbody.innerHTML = ''; // 기존 테이블 내용 초기화

    data.forEach(item => {
        const row = document.createElement('tr');
        row.setAttribute('data-ip', item.ip);

        row.innerHTML = `
            <td>${item.ip}</td>
            <td>
                <div class="circle-container">
                    ${item.sensor1.split('').map((value, index) => {
                        return `<span class="circle ${value === '1' ? 'red' : 'green'}" data-ip="${item.ip}" data-index="${index}"></span>`;
                    }).join('')}
                </div>
            </td>
            <td>${item.time1}</td>
            <td>${item.line}</td>
            <td class="duration-cell" data-ip="${item.ip}">Not active</td>
        `;

        tbody.appendChild(row);

        const secondSensor = row.querySelector('.circle-container .circle[data-index="1"]');
        if (secondSensor) {
            if (secondSensor.classList.contains('red')) {
                if (!sensorActivationTimes[item.ip]) {
                    sensorActivationTimes[item.ip] = new Date();
                }
                startOrUpdateTimer(item.ip);
            } else {
                clearDuration(item.ip, row);
            }
        }
    });

    attachClickHandlers();
}

function clearDuration(ip, row) {
    clearInterval(timerIntervals[ip]);
    sensorActivationTimes[ip] = null;
    const durationCell = row.querySelector(`.duration-cell[data-ip="${ip}"]`);
    if (durationCell) {
        durationCell.textContent = 'Not active';
    }
}

function attachClickHandlers() {
    const circles = document.querySelectorAll('.circle');
    circles.forEach(circle => {
        circle.addEventListener('click', event => {
            circles.forEach(c => c.classList.remove('active'));
            event.target.classList.add('active');

            const ip = event.target.getAttribute('data-ip');
            const index = event.target.getAttribute('data-index');
            const sensorName = sensorNames[index] || 'Unknown Sensor';
            document.getElementById('sensorInfo').value = `IP: ${ip}, ${sensorName} (Position: ${index})`;
        });
    });
}

function startOrUpdateTimer(ip) {
    const durationCell = document.querySelector(`.duration-cell[data-ip="${ip}"]`);
    if (durationCell) {
        if (!timerIntervals[ip]) {
            timerIntervals[ip] = setInterval(() => {
                const startTime = sensorActivationTimes[ip];
                if (startTime) {
                    const currentTime = new Date();
                    const duration = Math.floor((currentTime - startTime) / 1000);
                    durationCell.textContent = `${duration} seconds`;
                }
            }, 1000);
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    fetchData();
    setInterval(fetchData, 3000);
});
