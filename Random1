이제 요구사항에 맞춰 Flask 애플리케이션을 수정하겠습니다.

1. 프로젝트 구조
bash
코드 복사
file_download_app/
│
├── app.py
├── templates/
│   └── index.html
│   └── upload.html
├── static/
│   └── css/
│       └── style.css
└── files/
    ├── program1/
    │   ├── description.txt
    │   └── file.pdf
    ├── program2/
    │   ├── info.txt
    │   └── installer.exe
    └── program3/
        ├── readme.txt
        └── data.csv
2. app.py 작성
Flask 애플리케이션의 주요 기능을 작성합니다. 이 코드에서는 폴더마다 파일 합계가 3개 이상인 경우 무시하고, 업로드 기능을 추가합니다.

python
코드 복사
from flask import Flask, render_template, send_from_directory, request, redirect, url_for, flash
import os

app = Flask(__name__)
app.secret_key = 'supersecretkey'  # 보안을 위한 시크릿 키 설정

# 파일들이 저장된 메인 디렉토리
FILE_DIRECTORY = os.path.join(os.getcwd(), 'files')

# 업로드를 위한 허용된 파일 확장자 설정
ALLOWED_EXTENSIONS = {'txt', 'pdf', 'png', 'jpg', 'jpeg', 'gif', 'zip', 'exe', 'csv'}

def allowed_file(filename):
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

@app.route('/')
def index():
    programs = []
    
    for folder in os.listdir(FILE_DIRECTORY):
        folder_path = os.path.join(FILE_DIRECTORY, folder)
        if os.path.isdir(folder_path):
            files = os.listdir(folder_path)
            txt_files = [f for f in files if f.endswith('.txt')]
            non_txt_files = [f for f in files if not f.endswith('.txt')]
            
            # 폴더에 파일이 두 개 이상이면 무시
            if len(txt_files) == 1 and len(non_txt_files) == 1:
                with open(os.path.join(folder_path, txt_files[0]), 'r') as f:
                    description = f.read()
                programs.append({
                    'folder': folder,
                    'filename': non_txt_files[0],
                    'description': description
                })
    
    return render_template('index.html', programs=programs)

@app.route('/download/<program>/<filename>')
def download_file(program, filename):
    folder_path = os.path.join(FILE_DIRECTORY, program)
    return send_from_directory(folder_path, filename, as_attachment=True)

@app.route('/upload', methods=['GET', 'POST'])
def upload_file():
    if request.method == 'POST':
        password = request.form.get('password')
        if password != 'yourpassword':  # 업로드를 위한 비밀번호 확인
            flash('Incorrect password')
            return redirect(request.url)

        folder_name = request.form.get('folder')
        file = request.files.get('file')
        description = request.form.get('description')

        if file and allowed_file(file.filename):
            # 폴더 경로 생성
            folder_path = os.path.join(FILE_DIRECTORY, folder_name)
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)

            # 파일과 설명 저장
            file.save(os.path.join(folder_path, file.filename))
            with open(os.path.join(folder_path, 'description.txt'), 'w') as f:
                f.write(description)

            flash('File successfully uploaded')
            return redirect(url_for('index'))

    return render_template('upload.html')

if __name__ == '__main__':
    app.run(host='10.222.222.222', port=8090)
3. index.html 작성
index.html 파일을 수정하여 폴더명, 파일명, 설명을 테이블에 표시합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Download</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="text-center">
            <h1 class="display-4">Program Files</h1>
            <p class="lead">Select a file to download and view its description.</p>
        </div>
        <div class="row justify-content-center mt-4">
            <div class="col-md-10">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Folder Name</th>
                            <th>File Name</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for program in programs %}
                            <tr>
                                <td>{{ program.folder }}</td>
                                <td><a href="{{ url_for('download_file', program=program.folder, filename=program.filename) }}">{{ program.filename }}</a></td>
                                <td>{{ program.description }}</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>
                <a href="{{ url_for('upload_file') }}" class="btn btn-primary">Upload New File</a>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
4. upload.html 작성
upload.html 파일을 작성하여 업로드 기능을 제공하는 페이지를 만듭니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Upload</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body class="bg-light">
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <h1 class="text-center">Upload File</h1>
                <form action="{{ url_for('upload_file') }}" method="post" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label for="folder" class="form-label">Folder Name</label>
                        <input type="text" class="form-control" id="folder" name="folder" required>
                    </div>
                    <div class="mb-3">
                        <label for="file" class="form-label">Select File</label>
                        <input type="file" class="form-control" id="file" name="file" required>
                    </div>
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" name="description" rows="3" required></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            </div>
        </div>
    </div>
    <!-- Bootstrap JS with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
5. style.css 작성
기존과 동일한 스타일을 적용합니다.

css
코드 복사
body {
    font-family: 'Arial', sans-serif;
}

h1 {
    color: #007bff;
    font-weight: bold;
}

.table {
    background-color: #fff;
}

.table td, .table th {
    vertical-align: middle;
}

.table a {
    color: #007bff;
    text-decoration: none;
}

.table a:hover {
    text-decoration: underline;
}

.table-striped > tbody > tr:nth-of-type(odd) {
    background-color: #f9f9f9;
}
6. 애플리케이션 실행
이제 Flask 애플리케이션을 실행하여 웹 서버를 시작합니다.

bash
코드 복사
python3 app.py
7. 웹사이트 테스트
브라우저에서 http://10.222.222.222:8090으로 접속하여 프로그램별 파일 목록을 확인하세요.
파일 목록에서 폴더명, 파일명, 설명이 각각의 컬럼에 표시되며, 파일명을 클릭하면 해당 파일을 다운로드할 수 있습니다.
파일 업로드를 위해 Upload New File 버튼