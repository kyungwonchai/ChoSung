했습니다. 다음은 DisplayFormatString을 사용하여 날짜 형식을 수정하고, 검색 결과가 제대로 나타나며 수정된 로그가 남도록 구현한 코드입니다.

1. XAML 코드 수정
날짜 선택기에 DisplayFormatString을 추가하고, 검색 결과가 올바르게 표시되도록 설정합니다.

xml
코드 복사
<Window x:Class="ShiftReportApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:local="clr-namespace:ShiftReportApp"
        Title="Shift Report Manager" Height="600" Width="800">
    <Window.Resources>
        <Style TargetType="TextBox">
            <Setter Property="Foreground" Value="Black"/>
        </Style>
    </Window.Resources>
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="날짜" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="번호" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="주" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="3" Text="후" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" Text="야" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="5" Text="공통인계사항" Background="Black" Foreground="White" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Date1" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" x:Name="Date2" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="0" x:Name="Date3" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" x:Name="Date4" Background="LightGray" Foreground="Black" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="1" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="2" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="3" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="1" Text="4" Background="LightGray" Foreground="Black" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="2" x:Name="DayShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="2" x:Name="DayShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="2" x:Name="DayShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="2" x:Name="DayShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="3" x:Name="EveningShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="3" x:Name="EveningShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="3" x:Name="EveningShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="3" x:Name="EveningShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="4" x:Name="NightShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="4" x:Name="NightShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="4" x:Name="NightShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="4" x:Name="NightShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="5" x:Name="CommonReport1" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="5" x:Name="CommonReport2" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="5" x:Name="CommonReport3" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="5" x:Name="CommonReport4" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10">
                        <TextBlock Text="검색 시작일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="startDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <TextBlock Text="검색 종료일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="endDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <Button Content="조회" Click="OnSearchReports"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlSearch" AutoGenerateColumns="None">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True" ShowSearchPanelMode="Always"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date" DisplayFormatString="yyyy-MM-dd"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="로그">
                <Grid>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="10">
                        <dxe:DateEdit Name="logDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <Button Content="조회" Click="OnLogSearch"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlLog" AutoGenerateColumns="None">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date" DisplayFormatString="yyyy-MM-dd"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                            <dxg:GridColumn Header="IP주소" FieldName="IPAddress"/>
                            <dxg:GridColumn Header="시간" FieldName="Timestamp"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
2. C# 코드 수정
C# 코드에서 검색 결과가 올바르게 나타나고, 수정된 내용을 로그에 기록하도록 수정합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;

namespace ShiftReportApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string_here";
        private DataTable searchTable;
        private DataTable logTable;

        public MainWindow()
        {
            InitializeComponent();
            LoadTodayReport(null, null);
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                AddEmptyReportsForDate(date);
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Date", date);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dataTable);
                }
            }

            ClearReports();

            if (dataTable.Rows.Count > 0)
            {
                foreach (DataRow row in dataTable.Rows)
                {
                    int number = Convert.ToInt32(row["Number"]);
                    string shiftType = row["ShiftType"].ToString();

                    if (shiftType == "주")
                    {
                        ((TextBox)FindName($"DayShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "후")
                    {
                        ((TextBox)FindName($"EveningShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "야")
                    {
                        ((TextBox)FindName($"NightShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "공통")
                    {
                        ((TextBox)FindName($"CommonReport{number}")).Text = row["Report"].ToString();
                    }

                    ((TextBlock)FindName($"Date{number}")).Text = date;
                }
            }
        }

        private void AddEmptyReportsForDate(string date)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                for (int i = 1; i <= 4; i++)
                {
                    foreach (string shiftType in new[] { "주", "후", "야", "공통" })
                    {
                        SqlCommand cmd = new SqlCommand("SaveReport", conn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Date", date);
                        cmd.Parameters.AddWithValue("@Number", i);
                        cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                        cmd.Parameters.AddWithValue("@Report", "");
                        cmd.Parameters.AddWithValue("@IPAddress", GetLocalIPAddress());
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }

        private void ClearReports()
        {
            for (int i = 1; i <= 4; i++)
            {
                ((TextBox)FindName($"DayShiftReport{i}")).Text = "";
                ((TextBox)FindName($"EveningShiftReport{i}")).Text = "";
                ((TextBox)FindName($"NightShiftReport{i}")).Text = "";
                ((TextBox)FindName($"CommonReport{i}")).Text = "";
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            string date = ((TextBlock)FindName($"Date{number}")).Text;
            string ipAddress = GetLocalIPAddress();
            SaveReport(date, number, shiftType, report, ipAddress);
        }

        private void SaveReport(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();

                // 로그 기록
                SaveLog(date, number, shiftType, report, ipAddress);
            }
        }

        private void SaveLog(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveLog", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);
                cmd.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnSearchReports(object sender, RoutedEventArgs e)
        {
            DateTime? startDate = startDatePicker.DateTime;
            DateTime? endDate = endDatePicker.DateTime;

            if (startDate.HasValue && endDate.HasValue)
            {
                LoadSearchReports(startDate.Value.ToString("yyyy-MM-dd"), endDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReports(string startDate, string endDate)
        {
            searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("SELECT * FROM ShiftReport WHERE Date BETWEEN @StartDate AND @EndDate ORDER BY Date", conn);
                cmd.Parameters.AddWithValue("@StartDate", startDate);
                cmd.Parameters.AddWithValue("@EndDate", endDate);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            DateTime? selectedDate = logDatePicker.DateTime;
            if (selectedDate.HasValue)
            {
                LoadLogReport(selectedDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadLogReport(string date)
        {
            logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLogByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            if (logTable.Rows.Count > 0)
            {
                gridControlLog.ItemsSource = logTable.DefaultView;
            }
            else
            {
                MessageBox.Show("선택한 날짜에 대한 로그가 없습니다.");
            }
        }
    }
}
데이터베이스 저장 프로시저
데이터베이스에 필요한 저장 프로시저를 설정합니다.

sql
코드 복사
CREATE PROCEDURE GetReportsByDate
    @Date DATE
AS
BEGIN
    SELECT * FROM ShiftReport WHERE Date = @Date;
END

CREATE PROCEDURE SaveReport
    @Date DATE,
    @Number INT,
    @ShiftType NVARCHAR(50),
    @Report NVARCHAR(MAX),
    @IPAddress NVARCHAR(50)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM ShiftReport WHERE Date = @Date AND Number = @Number AND ShiftType = @ShiftType)
    BEGIN
        UPDATE ShiftReport SET Report = @Report, IPAddress = @IPAddress WHERE Date = @Date AND Number = @Number AND ShiftType = @ShiftType;
    END
    ELSE
    BEGIN
        INSERT INTO ShiftReport (Date, Number, ShiftType, Report, IPAddress) VALUES (@Date, @Number, @ShiftType, @Report, @IPAddress);
    END
END

CREATE PROCEDURE SaveLog
    @Date DATE,
    @Number INT,
    @ShiftType NVARCHAR(50),
    @Report NVARCHAR(MAX),
    @IPAddress NVARCHAR(50),
    @Timestamp DATETIME
AS
BEGIN
    INSERT INTO ReportLog (Date, Number, ShiftType, Report, IPAddress, Timestamp) VALUES (@Date, @Number, @ShiftType, @Report, @IPAddress, @Timestamp);
END

CREATE PROCEDURE GetLogByDate
    @Date DATE
AS
BEGIN
    SELECT * FROM ReportLog WHERE Date = @Date;
END
이제 이 코드는 DevExpress 컨트롤을 사용하여 날짜 선택기 및 검색 기능을 구현하고, 검색된 데이터가 제대로 표시되며 수정된 로그가 남도록 합니다. 추