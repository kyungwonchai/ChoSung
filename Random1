리본 버튼에 우클릭하면 "MyMenu에 추가"라는 팝업 메뉴가 나와야 하며, 이 팝업 메뉴는 각 리본 버튼에 적용될 수 있도록 해야 합니다. 우클릭 이벤트가 제대로 동작하고, "MyMenu에 추가" 기능이 제대로 적용되기 위해서는 팝업 메뉴의 초기화와 이벤트 연결이 올바르게 되어야 합니다.

다음 단계로 팝업 메뉴 초기화, 우클릭 이벤트 연결, 그리고 모든 버튼에 MyMenu 추가 기능 적용을 설명하겠습니다.

1. PopupMenu 초기화 및 "MyMenu에 추가" 버튼 생성
우선, 팝업 메뉴를 초기화하고, "MyMenu에 추가"라는 항목을 팝업 메뉴에 포함시켜야 합니다. 이 부분은 프로그램이 시작될 때 한 번만 실행되어야 합니다.

csharp
코드 복사
PopupMenu addMenuPopup;  // 우클릭 시 표시될 팝업 메뉴

private void InitializeAddMenuPopup()
{
    // 1. PopupMenu 초기화
    addMenuPopup = new PopupMenu();

    // 2. "MyMenu에 추가"라는 버튼 생성
    BarButtonItem addToMyMenuButton = new BarButtonItem(ribbonControl1.Manager, "MyMenu에 추가");

    // 3. "MyMenu에 추가" 버튼 클릭 시 처리할 이벤트 핸들러 등록
    addToMyMenuButton.ItemClick += AddToMyMenuButton_ItemClick;

    // 4. PopupMenu에 "MyMenu에 추가" 버튼 추가
    addMenuPopup.ItemLinks.Add(addToMyMenuButton);
}
2. 모든 리본 버튼에 우클릭 이벤트 연결
ribbonControl1_MouseDown 이벤트를 통해 리본 버튼에 우클릭 시 팝업 메뉴를 표시할 수 있도록 처리합니다.

코드 예시:
csharp
코드 복사
private void ribbonControl1_MouseDown(object sender, MouseEventArgs e)
{
    // 우클릭했을 때만 동작
    if (e.Button == MouseButtons.Right)
    {
        // 클릭 위치에 있는 리본 항목을 확인
        BarItem hitItem = ribbonControl1.CalcHitInfo(e.Location).Item;

        // 클릭된 항목이 리본 버튼인 경우
        if (hitItem != null && hitItem is BarButtonItem)
        {
            // 팝업 메뉴를 클릭 위치에 표시
            addMenuPopup.ShowPopup(Control.MousePosition);
        }
    }
}
위 코드는 ribbonControl1_MouseDown 이벤트를 통해 사용자가 우클릭한 항목이 리본 버튼(BarButtonItem)인 경우에만 팝업 메뉴를 표시합니다. CalcHitInfo 메서드를 통해 우클릭된 위치에 있는 항목을 찾고, 그 항목이 리본 버튼일 때만 팝업 메뉴를 보여줍니다.

3. "MyMenu에 추가" 버튼 클릭 시 처리
사용자가 팝업 메뉴에서 "MyMenu에 추가" 버튼을 클릭하면 해당 리본 버튼을 MyMenu에 추가하도록 이벤트 핸들러를 작성합니다.

코드 예시:
csharp
코드 복사
private void AddToMyMenuButton_ItemClick(object sender, ItemClickEventArgs e)
{
    // 우클릭된 리본 버튼을 MyMenu에 추가합니다.
    BarButtonItem clickedItem = e.Item as BarButtonItem;

    if (clickedItem != null)
    {
        // 1. MyMenu에 추가할 새로운 버튼 생성 (기존 리본 버튼의 이름 사용)
        BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, clickedItem.Caption);
        
        // 2. 새로 추가된 MyMenu 항목이 클릭될 때 처리할 이벤트 핸들러 등록
        newMenuItem.ItemClick += MyMenuItem_ItemClick;

        // 3. MyMenu 그룹에 새 항목 추가
        myMenuGroup.ItemLinks.Add(newMenuItem);

        // 4. MyMenu 상태 저장
        SaveMyMenuItems();
    }
}
4. RibbonControl과 PopupMenu 초기화
위에서 설명한 코드를 정상적으로 동작하게 하려면, RibbonControl과 PopupMenu가 올바르게 초기화되고 이벤트가 연결되어야 합니다. 이 작업은 Form_Load 또는 생성자에서 수행합니다.

코드 예시:
csharp
코드 복사
public MainForm()
{
    InitializeComponent();

    // 1. MyMenu 초기화
    InitializeMyMenu();

    // 2. PopupMenu 초기화 (우클릭 팝업 메뉴)
    InitializeAddMenuPopup();

    // 3. RibbonControl의 우클릭 이벤트 핸들러 등록
    ribbonControl1.MouseDown += ribbonControl1_MouseDown;
}
5. 전체 코드 통합
아래는 지금까지 설명한 모든 기능을 통합한 코드입니다.

csharp
코드 복사
public partial class MainForm : DevExpress.XtraBars.Ribbon.RibbonForm
{
    RibbonPage myMenuPage;
    RibbonPageGroup myMenuGroup;
    PopupMenu addMenuPopup;

    public MainForm()
    {
        InitializeComponent();

        // MyMenu 초기화
        InitializeMyMenu();

        // PopupMenu 초기화
        InitializeAddMenuPopup();

        // RibbonControl의 우클릭 이벤트 핸들러 등록
        ribbonControl1.MouseDown += ribbonControl1_MouseDown;
    }

    // MyMenu 초기화
    private void InitializeMyMenu()
    {
        myMenuPage = new RibbonPage("MyMenu");
        ribbonControl1.Pages.Insert(0, myMenuPage);

        myMenuGroup = new RibbonPageGroup("MyMenu 항목");
        myMenuPage.Groups.Add(myMenuGroup);

        LoadMyMenuItems();
    }

    // PopupMenu 초기화
    private void InitializeAddMenuPopup()
    {
        addMenuPopup = new PopupMenu();
        BarButtonItem addToMyMenuButton = new BarButtonItem(ribbonControl1.Manager, "MyMenu에 추가");
        addToMyMenuButton.ItemClick += AddToMyMenuButton_ItemClick;
        addMenuPopup.ItemLinks.Add(addToMyMenuButton);
    }

    // 리본 버튼 우클릭 시 팝업 메뉴 표시
    private void ribbonControl1_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            BarItem hitItem = ribbonControl1.CalcHitInfo(e.Location).Item;

            if (hitItem != null && hitItem is BarButtonItem)
            {
                addMenuPopup.ShowPopup(Control.MousePosition);
            }
        }
    }

    // "MyMenu에 추가" 버튼 클릭 시 MyMenu에 항목 추가
    private void AddToMyMenuButton_ItemClick(object sender, ItemClickEventArgs e)
    {
        BarButtonItem clickedItem = e.Item as BarButtonItem;

        if (clickedItem != null)
        {
            BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, clickedItem.Caption);
            newMenuItem.ItemClick += MyMenuItem_ItemClick;
            myMenuGroup.ItemLinks.Add(newMenuItem);

            SaveMyMenuItems();
        }
    }

    // MyMenu 항목 클릭 처리
    private void MyMenuItem_ItemClick(object sender, ItemClickEventArgs e)
    {
        BarButtonItem clickedItem = e.Item as BarButtonItem;
        MessageBox.Show($"'{clickedItem.Caption}' 항목이 클릭되었습니다!", "MyMenu 클릭");
    }

    // MyMenu 항목 저장
    private void SaveMyMenuItems()
    {
        List<string> menuItems = new List<string>();
        foreach (BarItemLink item in myMenuGroup.ItemLinks)
        {
            menuItems.Add(item.Caption);
        }

        string json = JsonConvert.SerializeObject(menuItems);
        File.WriteAllText("MyMenuState.json", json);
    }

    // MyMenu 항목 불러오기
    private void LoadMyMenuItems()
    {
        if (File.Exists("MyMenuState.json"))
        {
            string json = File.ReadAllText("MyMenuState.json");
            List<string> menuItems = JsonConvert.DeserializeObject<List<string>>(json);

            foreach (string caption in menuItems)
            {
                BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, caption);
                newMenuItem.ItemClick += MyMenuItem_ItemClick;
                myMenuGroup.ItemLinks.Add(newMenuItem);
            }
        }
    }
}
요약:
PopupMenu 생성 및 초기화: 우클릭 시 표시되는 팝업 메뉴를 설정하고 "MyMenu에 추가" 버튼을 포함시킵니다.
우클릭 이벤트 연결: ribbonControl1_MouseDown 이벤트를 통해 우클릭 시 팝업 메뉴가 표시되도록 설정합니다.