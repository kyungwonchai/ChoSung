const express = require('express');
const sql = require('mssql');

const app = express();
app.use(express.json());

// --- API 키 및 검사 미들웨어 (기존과 동일) ---
const SECRET_API_KEY = "LightMeter-Secret-Key-1234";

const apiKeyMiddleware = (req, res, next) => {
    const apiKey = req.get('x-api-key');
    if (!apiKey || apiKey !== SECRET_API_KEY) {
        return res.status(401).send('Unauthorized');
    }
    next();
};

// --- DB 연결 풀(Connection Pool) 설정 (기존과 동일) ---
const dbConfig = {
    user: '사용자ID',
    password: '비밀번호',
    server: '내서버IP',
    database: '데이터베이스이름',
    pool: {
        max: 10,
        min: 0,
        idleTimeoutMillis: 30000
    },
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

// --- 서버 시작과 동시에 DB 연결 풀 생성 (기존과 동일) ---
const poolPromise = new sql.ConnectionPool(dbConfig)
    .connect()
    .then(pool => {
        console.log('? DB 연결 풀 생성 완료');
        return pool;
    })
    .catch(err => console.error('DB 연결 풀 생성 실패', err));


// --- [수정] 실시간 로그 처리: UPDATE 쿼리 적용 ---
app.post('/log', apiKeyMiddleware, async (req, res) => {
    const { deviceId, lux } = req.body;
    if (deviceId === undefined || lux === undefined) {
        return res.status(400).send('값이 없습니다.');
    }

    try {
        const pool = await poolPromise;
        await pool.request()
            .input('LuxValue', sql.Float, lux)
            .input('DeviceId', sql.VarChar, deviceId)
            // ★★★ 보내주신 쿼리로 수정 ★★★
            .query('UPDATE Table_Lux2 SET lux1 = @LuxValue WHERE ip1 = @DeviceId');
        
        res.status(200).send('실시간 데이터 업데이트 성공');
    } catch (err) {
        console.error('DB 오류 (실시간 UPDATE):', err);
        res.status(500).send('서버 오류 발생');
    }
});

// --- [수정] 1분 평균 로그 처리: INSERT 쿼리 적용 ---
app.post('/log1min', apiKeyMiddleware, async (req, res) => {
    const { deviceId, avgLux } = req.body;
    if (deviceId === undefined || avgLux === undefined) {
        return res.status(400).send('값이 없습니다.');
    }

    try {
        const pool = await poolPromise;
        await pool.request()
            .input('DeviceId', sql.VarChar, deviceId)
            .input('LuxValue', sql.Float, avgLux) // avgLux 값을 @LuxValue 파라미터로 전달
            // ★★★ 보내주신 쿼리로 수정 ★★★
            .query('INSERT Table_Lux1min (ip1, lux1) VALUES (@DeviceId, @LuxValue)');
        
        console.log(`[1분 평균] 데이터 저장 성공: ${deviceId} - ${avgLux} lux`);
        res.status(200).send('1분 평균 데이터 저장 성공');
    } catch (err) {
        console.error('DB 오류 (1분 INSERT):', err);
        res.status(500).send('서버 오류 발생');
    }
});


const PORT = 3000;
app.listen(PORT, () => {
    console.log(`API 서버가 ${PORT}번 포트에서 실행 중입니다.`);
});