ml.cs에 관련 코드를 추가하였습니다.
MySplashScreen.xaml

xaml

<dx:DXSplashScreen x:Class="YourNamespace.MySplashScreen"
                   xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                   xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                   xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core">
    <Grid>
        <ProgressBar x:Name="progressBar" Maximum="100" Height="30" Width="200" />
    </Grid>
</dx:DXSplashScreen>

MySplashScreen.xaml.cs

csharp

using DevExpress.XtraSplashScreen;
using System;

namespace YourNamespace
{
    public partial class MySplashScreen : SplashScreen
    {
        public enum SplashScreenCommand
        {
            SetProgress
        }

        public MySplashScreen()
        {
            InitializeComponent();
        }

        public override void ProcessCommand(Enum cmd, object arg)
        {
            base.ProcessCommand(cmd, arg);

            if (cmd.Equals(SplashScreenCommand.SetProgress))
            {
                progressBar.Value = Convert.ToInt32(arg);
            }
        }
    }
}

이제 MainWindow.xaml.cs의 LoadExcelData 메서드에서 MySplashScreen을 사용하면 됩니다.

csharp

private void LoadExcelData()
{
    SplashScreenManager.ShowForm(typeof(MySplashScreen));
    
    int totalRows = 100; // 이 부분은 실제 엑셀의 행 수로 변경해 주세요.
    for (int i = 0; i < totalRows; i++)
    {
        // 실제 엑셀 데이터 로딩 및 업로드 코드
        System.Threading.Thread.Sleep(50);  // 이 부분은 실제 로직으로 대체해 주세요.
        
        int progress = (int)((double)(i + 1) / totalRows * 100);
        SplashScreenManager.Default.SendCommand(MySplashScreen.SplashScreenCommand.SetProgress, progress);
    }

    SplashScreenManager.CloseForm();
}

이렇게 하면 DevExpress Splash Screen 안에 프로그레스바가 표시되고, 엑셀 데이터 로딩 시에 진행 상황이 업데이트됩니다.