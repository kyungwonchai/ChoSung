플라스크로 작성된 프로그램을 사용하여 주어진 요구 사항을 해결할 수 있습니다. 이 예시는 주어진 요구 사항을 따라 비동기적으로 SQL Server에서 데이터를 조회하고, 그 결과를 UI에 동적으로 표시하는 방식으로 구현할 수 있습니다. 주어진 요구 사항에 맞는 플라스크 애플리케이션을 아래와 같이 구현할 수 있습니다.

단계별 구현:
파라미터화된 쿼리 실행: 함수A는 커넥션 문자열과 SQL 쿼리, 테이블 이름을 파라미터로 받아 데이터를 조회하고 테이블을 반환합니다.
UI 표시: Flask 템플릿 엔진을 사용하여 반환된 데이터를 동적으로 HTML 테이블로 표시하고, 쿼리 결과가 없을 경우 "없음" 메시지를 표시합니다.
비동기 처리: 비동기로 데이터를 처리하여 UI에서 쿼리 실행이 완료될 때까지 기다리지 않도록 처리합니다.
예시 코드
python
코드 복사
from flask import Flask, render_template, request, jsonify
import pyodbc
import asyncio
import threading

app = Flask(__name__)

# MSSQL 데이터베이스 연결 함수 (커넥션 스트링을 사용)
def fetch_data_from_db(connection_string, query, table_name):
    try:
        # 데이터베이스 연결
        conn = pyodbc.connect(connection_string)
        cursor = conn.cursor()
        cursor.execute(query)
        
        # 결과를 테이블 형식으로 변환
        columns = [column[0] for column in cursor.description]  # 컬럼명 추출
        rows = cursor.fetchall()
        
        if len(rows) > 0:
            # 데이터가 있으면 테이블로 반환
            data = [dict(zip(columns, row)) for row in rows]
            return data
        else:
            # 데이터가 없으면 None 반환
            return None
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링, 쿼리, 테이블명을 받아 데이터를 조회
def functionA(connection_string, query, table_name):
    result = fetch_data_from_db(connection_string, query, table_name)
    return result

# 함수 B: 함수 A를 비동기적으로 실행하는 함수
async def functionB(connection_string, query, table_name):
    # 함수 A를 비동기로 실행
    data = await asyncio.to_thread(functionA, connection_string, query, table_name)
    
    return data

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
async def get_data():
    connection_string = request.form['connection_string']
    query = request.form['query']
    table_name = request.form['table_name']
    
    # 비동기적으로 함수 B 실행
    data = await functionB(connection_string, query, table_name)
    
    if data is None:
        return jsonify({'status': 'No data', 'message': 'No data found for the given query.'})
    else:
        return render_template('table.html', data=data, table_name=table_name)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
HTML 템플릿 (templates/index.html):
이 HTML 파일은 사용자 입력을 받는 폼을 포함합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query</title>
</head>
<body>
    <h1>SQL 쿼리 실행</h1>
    <form action="/get_data" method="POST">
        <label for="connection_string">Connection String:</label><br>
        <input type="text" id="connection_string" name="connection_string"><br><br>

        <label for="query">SQL Query:</label><br>
        <textarea id="query" name="query"></textarea><br><br>

        <label for="table_name">Table Name:</label><br>
        <input type="text" id="table_name" name="table_name"><br><br>

        <input type="submit" value="Run Query">
    </form>
</body>
</html>
결과 테이블 HTML (templates/table.html):
데이터를 테이블 형식으로 표시합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ table_name }} Results</title>
</head>
<body>
    <h1>{{ table_name }} 결과</h1>

    {% if data %}
        <table border="1">
            <thead>
                <tr>
                    {% for column in data[0].keys() %}
                        <th>{{ column }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
                {% for row in data %}
                    <tr>
                        {% for value in row.values() %}
                            <td>{{ value }}</td>
                        {% endfor %}
                    </tr>
                {% endfor %}
            </tbody>
        </table>
    {% else %}
        <p>데이터가 없습니다.</p>
    {% endif %}
    
    <br>
    <a href="/">다시 실행</a>
</body>
</html>
설명:
fetch_data_from_db: 주어진 커넥션 문자열과 SQL 쿼리로 데이터를 조회하여 테이블 형태로 변환합니다.
functionA: fetch_data_from_db를 호출하여 데이터를 가져옵니다.
functionB: functionA를 비동기적으로 호출하고 결과를 반환합니다.
HTML 폼: 사용자가 쿼리와 커넥션 문자열을 입력할 수 있는 폼을 제공합니다.
결과 테이블: 쿼리 실행 결과가 있을 경우, 데이터를 동적으로 테이블로 표시하고, 없을 경우 "데이터가 없습니다."라는 메시지를 표시합니다.
실행 방법:
Flask가 설치되어 있지 않으면, pip install Flask pyodbc 명령어로 설치합니다.
위의 코드와 템플릿을 작성한 후, app.py로 실행합니다.