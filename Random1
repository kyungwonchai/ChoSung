 적용 코드 예시
아래는 위 두 부분을 합친 전체 코드입니다. 기존 JScript에 filterByValues 함수를 추가하고, btnareaA 이벤트 핸들러 부분을 아래와 같이 수정하시면 됩니다.

JavaScript

// =================================================================
// 동적 필터링을 위한 새로운 함수 (스크립트 상단이나 적절한 위치에 추가)
// =================================================================
/**
 * 지정된 컬럼의 값이 주어진 배열(filterValues)에 포함된 행만 필터링하는 함수
 * @param {object} grid - 필터링을 적용할 그리드 객체
 * @param {number} columnIndex - 필터링할 컬럼의 인덱스 (0부터 시작)
 * @param {Array} filterValues - 필터링할 값들이 담긴 배열
 */
function filterByValues(grid, columnIndex, filterValues) {
    if (!grid) return;

    var rowCount = grid.getRowCount();

    for (var i = 0; i < rowCount; i++) {
        var cellValue = grid.getCellValue(i, columnIndex);
        
        // 값이 필터링 배열에 포함되면 보여주고, 아니면 숨김
        if (filterValues.includes(cellValue.toString())) {
            grid.setRowVisible(i, true); // 실제 함수명은 프레임워크에 맞게 확인 필요
        } else {
            grid.setRowVisible(i, false); // 실제 함수명은 프레임워크에 맞게 확인 필요
        }
    }
}


// =================================================================
// 기존 이벤트 핸들러 수정 부분
// =================================================================
// ... (기존 다른 버튼들 코드) ...

} else if (args.Id == "btnareaA") { // '새로 필터' 버튼
    
    // 필터링할 값들을 동적으로 정의
    var targetValues = ["S", "A", "B"]; 

    // 필터링할 컬럼 인덱스 지정 (예: 3번째 컬럼)
    var columnIndexToFilter = 2; 

    // 현재 활성화된 그리드에 새로운 필터링 함수 적용
    filterByValues(activeDataGrid, columnIndexToFilter, targetValues);

} else {
// ... (기존 다른 코드들) ...
요약
filterByValues 함수를 새로 만드세요.

btnareaA 버튼의 클릭 이벤트 핸들러에서,

원하는 값으로 targetValues 배열을 만드세요.

필터링하고 싶은 columnIndexToFilter를 지정하세요.

