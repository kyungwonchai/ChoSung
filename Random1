타이틀바에서 더블 클릭이 제대로 작동하지 않는 이유는 메시지 처리 (WndProc)에서 WM_NCLBUTTONDBLCLK가 처리되지 않거나, SkinableForm이 기본적으로 더블 클릭을 처리하지 않기 때문입니다. 이를 해결하기 위해 커스텀 타이틀바를 완벽히 구현하고 더블 클릭 이벤트를 정확히 처리하는 방식을 제안합니다.

최종 수정 코드
아래 코드는 SkinableForm의 커스텀 타이틀바에서 더블 클릭을 정확히 감지하고, 기본 창 동작(최대화/복원)을 구현합니다.

구현 코드
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private const int WM_NCLBUTTONDBLCLK = 0xA3; // 타이틀바 더블 클릭 메시지
    private Rectangle titleBarRect = new Rectangle(0, 0, 0, 30); // 타이틀바 영역

    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 타이틀바 높이 확보
        this.DoubleBuffered = true;

        // 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 버튼 위치 업데이트
        this.SizeChanged += UpdateButtonPositions;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        return new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            },
            FlatStyle = FlatStyle.Flat,
            Click = clickHandler
        };
    }

    private void UpdateButtonPositions(object sender, EventArgs e)
    {
        // 버튼 위치 업데이트
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경 그리기
        titleBarRect = new Rectangle(0, 0, this.Width, 30);
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, titleBarRect);
        }

        // 타이틀바 텍스트 그리기
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
        base.OnMouseDown(e);

        // 타이틀바 드래그 처리
        if (e.Button == MouseButtons.Left && titleBarRect.Contains(e.Location))
        {
            this.Capture = false;
            var msg = Message.Create(this.Handle, 0xA1, new IntPtr(2), IntPtr.Zero); // WM_NCLBUTTONDOWN, HTCAPTION
            this.WndProc(ref msg);
        }
    }

    protected override void OnMouseDoubleClick(MouseEventArgs e)
    {
        base.OnMouseDoubleClick(e);

        // 타이틀바 더블 클릭으로 최대화/복원
        if (titleBarRect.Contains(e.Location))
        {
            ToggleMaximizeRestore();
        }
    }

    private void ToggleMaximizeRestore()
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        ToggleMaximizeRestore(); // 최대화/복원
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
핵심 구현 사항
타이틀바 더블 클릭 이벤트:

OnMouseDoubleClick를 재정의하여 타이틀바 영역에서만 더블 클릭을 감지.
더블 클릭 시 최대화/복원 동작을 처리.
타이틀바 영역 설정:

타이틀바의 영역은 Rectangle(titleBarRect)로 정의.
타이틀바 내에서만 더블 클릭 및 드래그 동작이 가능하도록 설정.
기본 동작 추가:

드래그: OnMouseDown에서 WM_NCLBUTTONDOWN 메시지를 사용하여 창 이동.
최소화/최대화/복원/닫기 버튼: SimpleButton으로 구현하며, 각 버튼에 클릭 이벤트를 연결.
스타일 및 레이아웃:

타이틀바의 배경, 텍스트, 버튼 스타일을 커스터마이징.
창 크기가 변경되면 버튼 위치가 동적으로 업데이트.
결과
더블 클릭 동작:

타이틀바를 더블 클릭하면 창이 최대화/복원됩니다.
타이틀바 드래그:

타이틀바를 드래그하여 창을 이동할 수 있습니다.
심플 버튼 추가:

타이틀바 우측에 최소화, 최대화/복원, 닫기 버튼이 추가되며 동작합니다.
디자인 유지:

커스텀 타이틀바의 배경색과 텍스트, 버튼 스타일을 간단히 수정 가능.
문제 해결
더블 클릭이 타이틀바에서 정확히 감지되도록 OnMouseDoubleClick을 사용.
titleBarRect로 타이틀바 영역을 명확히 설정하여 동작을 제어.
이제 더블 클릭 및 모든 동작이 완벽히 구현됩니다.











ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.