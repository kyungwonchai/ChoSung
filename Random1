import paramiko
import time
import os

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================

# 1. 500대 라즈베리파이의 IP 주소 목록
#    파일에서 읽어오거나, 직접 리스트로 작성합니다.
HOSTS = [
    '192.168.1.101',
    '192.168.1.102',
    # ... 500개 IP 주소 추가 ...
]

# 2. 라즈베리파이 접속 정보
SSH_USER = 'pi'
# SSH 키 파일의 절대 경로 (예: C:/Users/YourUser/.ssh/id_rsa)
SSH_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa') 
# ※ SSH 키를 사용하지 않을 경우, 아래 줄의 주석을 풀고 비밀번호를 입력하세요.
# SSH_PASSWORD = 'your_raspberry_pi_password' 

# 3. PM2로 실행되던 애플리케이션의 이름 또는 ID
PM2_APP_NAME = 'main' # 'pm2 list'로 확인한 이름

# 4. systemd 서비스 파일 내용 정의
#    'pm2 describe [이름]'으로 확인한 정보를 바탕으로 작성합니다.
PYTHON_EXEC_PATH = '/usr/bin/python3'
APP_WORKING_DIR = '/home/pi/my_project' # main.py가 있는 디렉토리
APP_SCRIPT_PATH = '/home/pi/my_project/main.py' # main.py의 전체 경로
APP_ARGS = '--mode production --port 8080' # main.py 실행 시 필요한 인자들

# --- 아래는 수정할 필요 없음 ---
SERVICE_FILE_NAME = 'myapp.service'
SERVICE_FILE_CONTENT = f"""[Unit]
Description=My Python Application with Watchdog
After=network.target

[Service]
ExecStart={PYTHON_EXEC_PATH} {APP_SCRIPT_PATH} {APP_ARGS}
WorkingDirectory={APP_WORKING_DIR}
StandardOutput=inherit
StandardError=inherit
Restart=always
User={SSH_USER}
WatchdogSec=60

[Install]
WantedBy=multi-user.target
"""
# ===================================================================

def run_command(client, command):
    """원격 서버에서 명령어를 실행하고 결과를 출력하는 함수"""
    print(f"  [실행] {command}")
    stdin, stdout, stderr = client.exec_command(command, get_pty=True)
    exit_status = stdout.channel.recv_exit_status()
    
    stdout_output = stdout.read().decode('utf-8').strip()
    stderr_output = stderr.read().decode('utf-8').strip()

    if stdout_output:
        print(f"  [출력] {stdout_output}")
    if stderr_output:
        print(f"  [오류] {stderr_output}")

    if exit_status != 0:
        raise Exception(f"명령어 실행 실패 (종료 코드: {exit_status})")
    
    return stdout_output


def deploy_to_host(hostname):
    """단일 호스트에 접속하여 배포 작업을 수행하는 메인 함수"""
    print(f"\n{'='*20} [{hostname}] 작업 시작 {'='*20}")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    try:
        # --- 1. SSH 연결 ---
        print(f"[{hostname}] SSH 연결 중...")
        if 'SSH_PASSWORD' in globals():
            client.connect(hostname, username=SSH_USER, password=SSH_PASSWORD, timeout=10)
        else:
            client.connect(hostname, username=SSH_USER, key_filename=SSH_KEY_FILE, timeout=10)
        print(f"[{hostname}] SSH 연결 성공.")

        # --- 2. PM2 비활성화 ---
        print(f"[{hostname}] 1단계: PM2 자동 시작 해제 및 중지")
        # sudo 실행 시 pm2 경로를 찾지 못하는 문제를 해결하기 위해 pm2 경로를 직접 찾아 실행
        pm2_path = run_command(client, "which pm2")
        run_command(client, f"sudo {pm2_path} unstartup")
        run_command(client, f"{pm2_path} stop {PM2_APP_NAME}")
        run_command(client, f"{pm2_path} save --force")

        # --- 3. systemd 서비스 파일 생성 ---
        print(f"[{hostname}] 2단계: systemd 서비스 파일 생성")
        # 따옴표 문제를 피하기 위해 파일로 직접 쓰는 방식 사용
        command = f"""
        echo '{SERVICE_FILE_CONTENT}' | sudo tee /etc/systemd/system/{SERVICE_FILE_NAME}
        """
        run_command(client, command)

        # --- 4. systemd 서비스 활성화 ---
        print(f"[{hostname}] 3단계: systemd 서비스 활성화 및 시작")
        run_command(client, "sudo systemctl daemon-reload")
        run_command(client, f"sudo systemctl enable {SERVICE_FILE_NAME}")
        run_command(client, f"sudo systemctl restart {SERVICE_FILE_NAME}") # start 대신 restart로 확실하게 재시작
        
        time.sleep(5) # 서비스가 안정적으로 시작될 때까지 잠시 대기

        # --- 5. 최종 상태 확인 ---
        print(f"[{hostname}] 4단계: 최종 서비스 상태 확인")
        run_command(client, f"sudo systemctl status {SERVICE_FILE_NAME}")
        
        print(f"--- [{hostname}] 작업 성공적으로 완료! ---")

    except Exception as e:
        print(f"!!!!!! [{hostname}]에서 심각한 오류 발생: {e} !!!!!!")
    finally:
        client.close()


if __name__ == '__main__':
    for host_ip in HOSTS:
        deploy_to_host(host_ip)