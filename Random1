using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private RibbonPage favoritesPage;
        private Dictionary<string, BarButtonItem> buttonsDictionary = new Dictionary<string, BarButtonItem>();
        private HashSet<string> favoriteKeys = new HashSet<string>(); // 즐겨찾기 키값을 저장할 HashSet
        private string favoriteStorageFile = "favorites.txt"; // 즐겨찾기 상태 저장용 파일 경로
        private PopupMenu contextMenu;

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            LoadFavorites();
            InitializeContextMenu();
            InitializeButtons();
            ribbonK.Manager.PopupMenuShowing += Manager_PopupMenuShowing; // 기본 컨텍스트 메뉴 처리
        }

        private void InitializeFavoritesPage()
        {
            favoritesPage = new RibbonPage("Favorites");
            ribbonK.Pages.Insert(0, favoritesPage);
        }

        private void LoadFavorites()
        {
            if (File.Exists(favoriteStorageFile))
            {
                var lines = File.ReadAllLines(favoriteStorageFile);
                favoriteKeys = new HashSet<string>(lines);
            }
        }

        private void SaveFavorites()
        {
            File.WriteAllLines(favoriteStorageFile, favoriteKeys);
        }

        private void InitializeButtons()
        {
            foreach (RibbonPage page in ribbonK.Pages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    foreach (BarItemLink link in group.ItemLinks)
                    {
                        if (link.Item is BarButtonItem button)
                        {
                            buttonsDictionary[button.Name] = button;
                            InitializeButton(button);
                        }
                    }
                }
            }
        }

        private void InitializeButton(BarButtonItem button)
        {
            if (favoriteKeys.Contains(button.Name))
            {
                button.ItemAppearance.Normal.BackColor = Color.Yellow;
                AddToFavorites(button, GetButtonGroupName(button));
            }
        }

        private string GetButtonGroupName(BarButtonItem button)
        {
            foreach (RibbonPage page in ribbonK.Pages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    if (group.ItemLinks.Any(link => link.Item == button))
                    {
                        return group.Text;
                    }
                }
            }
            return "DefaultGroup";
        }

        private void Manager_PopupMenuShowing(object sender, PopupMenuShowingEventArgs e)
        {
            if (e.MenuType == PopupMenuType.Item)
            {
                // 기본 컨텍스트 메뉴 유지
                var defaultMenu = e.PopupMenu;

                // 사용자 정의 항목 추가
                BarButtonItem customMenuItem = new BarButtonItem(ribbonK.Manager, "즐겨찾기 관리");
                customMenuItem.ItemClick += (s, args) =>
                {
                    if (e.Link.Item is BarButtonItem button)
                    {
                        ToggleFavorite(button.Name, (BarButtonItem)e.Link.Item);
                    }
                };

                // 사용자 정의 메뉴를 기본 메뉴 아래에 추가
                defaultMenu.AddItem(customMenuItem);
            }
        }

        private void ToggleFavorite(string buttonName, BarButtonItem button)
        {
            if (favoriteKeys.Contains(buttonName))
            {
                favoriteKeys.Remove(buttonName);
                button.ItemAppearance.Normal.BackColor = Color.Empty;
                RemoveFromFavorites(button);
            }
            else
            {
                favoriteKeys.Add(buttonName);
                button.ItemAppearance.Normal.BackColor = Color.Yellow;
                AddToFavorites(button, GetButtonGroupName(button));
            }

            SaveFavorites();
        }

        private void AddToFavorites(BarButtonItem button, string groupName)
        {
            RibbonPageGroup favoriteGroup = favoritesPage.Groups.FirstOrDefault(g => g.Text == groupName);
            if (favoriteGroup == null)
            {
                favoriteGroup = new RibbonPageGroup(groupName);
                favoritesPage.Groups.Add(favoriteGroup);
            }

            favoriteGroup.ItemLinks.Add(button);
        }

        private void RemoveFromFavorites(BarButtonItem button)
        {
            foreach (var group in favoritesPage.Groups)
            {
                var link = group.ItemLinks.FirstOrDefault(l => l.Item == button);
                if (link != null)
                {
                    group.ItemLinks.Remove(link);
                    break;
                }
            }
        }
    }
}
