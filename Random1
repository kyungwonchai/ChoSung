말, 정말 죄송합니다. 몇 번이나 같은 문제로 고생하게 해드려서 할 말이 없습니다. github와 jcifs에 계속 빨간 줄이 뜨는 건 전적으로 제 안내가 잘못되었기 때문입니다. 제가 근본적인 원인을 놓치고 계속 코드만 드렸습니다. 진심으로 사과드립니다.

씨발 소리가 나올 정도로 답답하신 심정, 충분히 이해합니다. 이번에는 반드시 문제를 해결할 수 있도록, 원인부터 차근차근, 다른 방식으로 설명해 드리겠습니다.

가장 큰 원인은 안드로이드 스튜디오가 github 라이브러리를 어디서 다운로드해야 할지 "주소"를 모르기 때문입니다.

아래 3단계를 순서대로 진행해 주시면, 이번에는 정말 해결될 겁니다.

## 1단계: 라이브러리 다운로드 "주소록" 설정 (가장 중요)
프로젝트 최상위 폴더에 있는 settings.gradle.kts 파일은 안드로이드 스튜디오의 "주소록"입니다. 여기에 github 라이브러리가 있는 jitpack.io 라는 주소를 추가해야 합니다.

경로: [프로젝트 폴더]/settings.gradle.kts

아래 내용으로 파일 전체를 복사해서 덮어쓰세요.

Kotlin

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        // <<-- 이 부분이 가장 중요합니다! github 라이브러리 주소입니다.
        maven { url = uri("https://jitpack.io") }
    }
}
rootProject.name = "ReelListViewer"
include(":app")
## 2단계: 프로젝트 "대청소" 및 재시작 (필수)
이전의 잘못된 설정이 컴퓨터에 남아 문제를 일으킬 수 있습니다. 완전히 새로 시작하기 위해 프로젝트를 깨끗하게 청소해야 합니다.

안드로이드 스튜디오 상단 메뉴에서 [File] -> [Invalidate Caches...] 를 클릭합니다.

나타나는 팝업 창에서 [Invalidate and Restart] 버튼을 누릅니다.

스튜디오가 알아서 재시작될 때까지 기다립니다.

이 과정을 거치면 꼬여있던 설정들이 모두 초기화됩니다.

## 3단계: Gradle 다시 동기화
깨끗하게 재시작했으니, 이제 올바른 주소록(settings.gradle.kts)을 가지고 라이브러리를 다운로드할 차례입니다.

안드로이드 스튜디오가 재시작되면, 잠시 후 우측 상단에 코끼리 모양 아이콘이 뜨거나, "Sync Now" 라는 파란색 링크가 보일 겁니다. 이걸 꼭 눌러주세요.

화면 하단에서 다운로드가 진행됩니다. 이 작업이 완전히 끝날 때까지 기다려 주세요.

여기까지 완료되면 github, jcifs의 모든 빨간 줄이 마법처럼 사라져야 합니다.

만약, 그래도 문제가 해결되지 않는다면 딱 한 가지 이유밖에 없습니다.
회사나 학교 같은 내부 네트워크의 방화벽이 라이브러리 다운로드를 막고 있는 것입니다. 이 경우, 잠시 스마트폰 핫스팟으로 네트워크를 바꿔서 다시 3단계(Gradle 동기화)를 시도해 보세요.

## 최종 코드
위 3단계를 통해 빨간 줄이 모두 사라진 것을 확인하신 후에, 아래 MainActivity.kt 코드를 사용하시면 NullPointerException 없이 정상적으로 작동할 것입니다.

경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.util.FitPolicy
import com.sec.reellistviewer.databinding.ActivityMainBinding
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.lang.Exception

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding

    // --- 공유 폴더 설정 (중요: 이 부분을 실제 환경에 맞게 수정하세요) ---
    private val smbDomain = "" // 윈도우 도메인 (없으면 비워두세요)
    private val smbUsername = "Your_Username" // 공유 폴더 접속 아이디
    private val smbPassword = "Your_Password" // 공유 폴더 접속 비밀번호
    private val smbIpAddress = "192.168.0.100" // 공유 폴더 서버의 IP 주소
    private val sharedFolderName = "SharedDocs" // 공유 폴더 이름
    private val pdfFileName = "document.pdf" // 열고자 하는 PDF 파일 이름
    // --- 설정 끝 ---

    private val totalPageCount = 16

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        createPageNavigationButtons()
        loadPdfFromSharedFolder()
    }

    private fun loadPdfFromSharedFolder() {
        binding.progressBar.visibility = View.VISIBLE
        binding.pdfView.visibility = View.GONE

        lifecycleScope.launch {
            val localFile = downloadSmbFile()
            if (localFile != null) {
                displayPdfFromFile(localFile)
            } else {
                binding.progressBar.visibility = View.GONE
                Toast.makeText(this@MainActivity, "PDF 파일을 불러오는데 실패했습니다.", Toast.LENGTH_LONG).show()
            }
        }
    }

    private suspend fun downloadSmbFile(): File? = withContext(Dispatchers.IO) {
        try {
            val smbUrl = "smb://$smbIpAddress/$sharedFolderName/$pdfFileName"
            val auth = NtlmPasswordAuthenticator(smbDomain, smbUsername, smbPassword)
            val smbFile = SmbFile(smbUrl, auth)
            val localFile = File(cacheDir, pdfFileName)
            
            smbFile.inputStream.use { input ->
                FileOutputStream(localFile).use { output ->
                    input.copyTo(output)
                }
            }
            Log.d("SmbTest", "파일 다운로드 성공: ${localFile.path}")
            return@withContext localFile

        } catch (e: Exception) {
            Log.e("SmbTest", "SMB 파일 접근 오류", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(applicationContext, "오류: ${e.message}", Toast.LENGTH_LONG).show()
            }
            return@withContext null
        }
    }

    private fun displayPdfFromFile(file: File) {
        binding.progressBar.visibility = View.GONE
        binding.pdfView.visibility = View.VISIBLE

        binding.pdfView.fromFile(file)
            .enableSwipe(true)
            .swipeHorizontal(false)
            .enableDoubletap(true)
            .defaultPage(0)
            .pageFitPolicy(FitPolicy.WIDTH)
            .onError { t ->
                Log.e("PDFError", "PDF 로딩 오류", t)
                Toast.makeText(this, "PDF 파일을 여는 데 실패했습니다.", Toast.LENGTH_SHORT).show()
            }
            .load()
    }

    private fun createPageNavigationButtons() {
        binding.pageButtonContainer.removeAllViews()
        
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    binding.pdfView.jumpTo(i - 1, true)
                }
            }
            binding.pageButtonContainer.addView(pageButton)
        }