lMasterDataAsync() 호출 부분을 제거합니다. MasterDataViewModel은 생성자에서 이미 자체적으로 데이터를 로드하고 있습니다.

C#

// 필요한 네임스페이스
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel 클래스 (.NET Framework 4.8 버전 - DataReader 오류 수정)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";

        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;

        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }

        #region Public Properties
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            MasterDataVM = new MasterDataViewModel(_context);
            LogVM = new LogViewModel(_context);

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());

            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        private async Task LoadInitialDataAsync()
        {
            await LoadAssignmentsAsync();
            await LoadMasterDataAsync();
        }

        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 로드 (콤보박스용)
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "마스터 데이터 로딩 중...";
            try
            {
                // MainViewModel에서 사용하는 콤보박스용 목록만 로드
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync());
                StatusBarText = "마스터 데이터 로드 완료.";

                // *** 수정된 부분: MasterDataViewModel의 로드 메서드 호출 제거 ***
                // MasterDataViewModel은 자체적으로 데이터를 로드하므로 여기서 호출할 필요 없음
                // if (MasterDataVM != null)
                // {
                //     await MasterDataVM.LoadAllMasterDataAsync(); // 이 줄 제거
                // }
            }
            catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); }
        }


        private void CheckMasterPassword(object parameter)
        {
            try
            {
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey)가 정의되지 않았습니다.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);
                if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 관리자 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); }
                else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            }
            catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일(App.config) 처리 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        }

        // --- SaveChangesAsync, RollbackChanges, AddNewLocker, DeleteSelectedAsync, ClearSelectedAssignment 등 (이전과 동일) ---
        private async Task SaveChangesAsync()
        {
             if (_context == null) return; StatusBarText = "변경 사항 저장 중..."; try { /* ... 중복 검사 ... */ foreach(var entry in _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified)) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); } catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
        }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        // --- 기존 메서드 끝 ---

        #region Helper Methods
        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
 1 수정 사항 요약:   
1.
github.com
github.com

App.config: 연결 문자열에 MultipleActiveResultSets=True;를 추가하여 MARS를 활성화했습니다. (이전 단계에서 안내)
MainViewModel.cs:
LoadMasterDataAsync 메서드 내에서 await MasterDataVM?.LoadAllMasterDataAsync(); 호출 부분을 제거했습니다. MainViewModel은 자신의 콤보박스에 필요한 목록만 로드하고, MasterDataViewModel은 자체적으로 데이터를 로드하도록 역할을 분리했습니다.
using System.Configuration; 지시문을 추가했습니다.