이전에 제공한 코드에서 **박스플롯(Box Plot)**을 각 **라인(LineName)**별로 그룹화하여 표시하고, XAML에서 **축 제목(Axis Title)**을 설정하는 방법을 구현하였습니다. 그러나 박스플롯을 5개의 측정 지점(MP1~MP5)별로 생성하는 대신, 각 라인별로 그룹화하여 표시해야 하며, XAML에서 축 제목을 설정하는 부분에서 문제가 있었습니다. 이를 해결하기 위해 코드를 수정하였습니다.

수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            InitializeBoxPlotChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void InitializeBoxPlotChart()
        {
            var lineGroups = allData.GroupBy(d => d.ModelName);

            foreach (var group in lineGroups)
            {
                var recentData = group.Take(100).ToList();

                var allValues = recentData.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).ToList();
                if (allValues.Count > 0)
                {
                    var series = new BoxPlotSeries2D
                    {
                        DisplayName = group.Key,
                        ArgumentDataMember = "Argument",
                        MinValueDataMember = "Min",
                        Quartile1ValueDataMember = "Quartile1",
                        MedianValueDataMember = "Median",
                        Quartile3ValueDataMember = "Quartile3",
                        MaxValueDataMember = "Max",
                        DataSource = new List<BoxPlotData>
                        {
                            new BoxPlotData
                            {
                                Argument = group.Key,
                                Min = allValues.Min(),
                                Quartile1 = GetPercentile(allValues, 25),
                                Median = GetPercentile(allValues, 50),
                                Quartile3 = GetPercentile(allValues, 75),
                                Max = allValues.Max()
                            }
                        }
                    };
                    series.Tag = group.Key; // 시리즈에 라인 이름을 태그로 저장
                    BoxPlotChart.Diagram.Series.Add(series);
                }
            }
        }

        private void BoxPlotChart_SelectionChanged(object sender, ChartSelectionChangedEventArgs e)
        {
            var selectedSeries = e.SelectedItems.OfType<BoxPlotSeries2D>().FirstOrDefault();
            if (selectedSeries != null)
            {
                var lineName = selectedSeries.Tag.ToString();
                LoadLineData(lineName);
            }
        }

        private void LoadLineData(string lineName)
        {
            var lineData = allData.Where(d => d.ModelName == lineName).Take(500).ToList();

            var lModelData = lineData.Where(d => d.ModelName.EndsWith("L")).ToList();
            var rModelData = lineData.Where(d => d.ModelName.EndsWith("R")).ToList();

            InitializeModelChart(LModelChart, lModelData, "Timestamp", "Values");
            InitializeModelChart(RModelChart, rModelData, "Timestamp", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle)
        {
            chart.Diagram.Series.Clear();

            for (int i = 1; i <= 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"MP{i}",
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i}",
                    Tag = $"MP{i}",
                    CheckedInLegend = true
                };
                chart.Diagram.Series.Add(series);
            }

            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = Visibility.Visible };
        }

        private double GetPercentile(List<double> sortedData, double percentile)
        {
            if (sortedData.Count == 0)
                return double.NaN;

            sortedData.Sort();
            double realIndex = percentile / 100.0 * (sortedData.Count - 1);
            int index = (int)realIndex;
            double frac = realIndex - index;

            if (index + 1 < sortedData.Count)
                return sortedData[index] * (1 - frac) + sortedData[index + 1] * frac;
            else
                return sortedData[index];
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class BoxPlotData
    {
        public string Argument { get; set; }
        public double Min { get; set; }
        public double Quartile1 { get; set; }
        public double Median { get; set; }
        public double Quartile3 { get; set; }
        public double Max { get; set; }
    }
}
주요 변경 사항
라인별 박스플롯 생성:

각 라인별로 최근 100개의 데이터를 그룹화하여, 모든 측정 지점(MP1~MP5)의 값을 결합한 후 박스플롯을 생성하였습니다.
XAML에서 축 제목 설정: