아래는 수정된 Flask app.py와 HTML 템플릿 파일 client_check.html입니다. 이 버전은 클라이언트가 특정 IP와 포트에 접속 가능한지를 확인하도록 설계되었습니다.

app.py
Flask 서버는 클라이언트가 /ipchk 경로로 접속하면 HTML 파일을 반환합니다.

python
코드 복사
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/ipchk')
def ip_check_page():
    # 클라이언트가 직접 IP와 포트 상태를 확인하도록 HTML 반환
    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
templates/client_check.html
이 HTML 파일은 클라이언트가 JavaScript를 사용해 IP와 포트를 검사하며, WebSocket을 통해 접근 가능 여부를 확인합니다. 결과는 테이블로 표시됩니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Client Port Accessibility Checker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Client Port Accessibility Checker</h1>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="results"></tbody>
    </table>

    <script>
        // 검사할 IP와 포트 목록
        const ipPorts = [
            { ip: "10.10.100.11", ports: [80, 443, 8080] },
            { ip: "192.168.1.1", ports: [22, 3306, 3389] },
            { ip: "10.10.100.12", ports: [80, 443] }
        ];

        const resultsTable = document.getElementById("results");

        // WebSocket을 통해 포트 상태 확인
        function checkPort(ip, port) {
            return new Promise(resolve => {
                const ws = new WebSocket(`ws://${ip}:${port}`);
                ws.onopen = () => {
                    ws.close();
                    resolve({ ip, port, status: "Open" });
                };
                ws.onerror = () => {
                    resolve({ ip, port, status: "Closed" });
                };
            });
        }

        // IP와 포트 상태를 순차적으로 검사
        async function runCheck() {
            for (const entry of ipPorts) {
                for (const port of entry.ports) {
                    const result = await checkPort(entry.ip, port);
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${result.ip}</td>
                        <td>${result.port}</td>
                        <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                            ${result.status}
                        </td>
                    `;
                    resultsTable.appendChild(row);
                }
            }
        }

        // 검사 시작
        runCheck();
    </script>
</body>
</html>
주요 기능
IP 및 포트 검사:

ipPorts 변수에 검사할 IP와 포트를 설정합니다.
WebSocket을 사용해 각 IP와 포트에 접근 시도.
결과 표시:

IP, Port, Status를 테이블 형식으로 표시합니다.
Open: 초록색으로 표시.
Closed: 빨간색으로 표시.
UI 디자인:

CSS로 간단하고 깔끔한 테이블 스타일 적용.
마우스를 올리면 행이 강조되어 가독성을 높임.
실행 방법
Flask 서버 실행:

bash
코드 복사
python app.py
브라우저에서 /ipchk 경로로 접속:

arduino
코드 복사
http://<Flask_서버_IP>:5000/ipchk
결과:
