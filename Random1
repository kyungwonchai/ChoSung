알겠습니다. AI 시대를 맞아 여러 사람의 역할을 수행해야 하는 개발자님을 위한 최고의 생산성 도구, '초고속 메모 캡처 및 검색 앱' 제작을 도와드리겠습니다.

요청하신 대로, 이 모든 프로젝트 폴더와 파일을 한 번에 생성하는 **'단일 Python 스크립트'**를 제공해 드립니다. 아래 스크립트를 실행하기만 하면, 즉시 Visual Studio에서 빌드하고 실행할 수 있는 완전한 C# WPF 프로젝트가 생성됩니다.

핵심 기능
전역 단축키로 즉시 메모장 활성화 ( Win + Shift + M ): 어떤 작업을 하던 중에도 단축키를 누르면 화면 중앙에 작은 메모 입력창이 나타나 바로 아이디어를 기록할 수 있습니다.

빠른 저장 및 취소: 메모 입력 후 Enter 키를 누르면 MSSQL DB에 즉시 저장되고 창은 사라집니다. Esc 키를 누르면 취소됩니다.

강력한 검색 기능: 메인 앱 화면에서 모든 메모를 실시간으로 검색하고 확인할 수 있습니다.

미래 확장성 (LLM, RAG): 데이터를 구조화된 Notes 테이블에 저장하여, 나중에 LLM이 분석하고 RAG 소스로 활용하기에 최적화된 구조입니다.

안정적인 아키텍처: 유지보수가 용이한 MVVM(Model-View-ViewModel) 패턴을 적용했습니다.

1단계: Python 스크립트 실행
아래 코드를 create_quick_memo_app.py 라는 이름의 파일로 저장하고, 원하는 위치에서 실행하십시오. 실행 즉시 QuickMemoSolution이라는 폴더와 그 안에 모든 C# 프로젝트 파일이 생성됩니다.

Python

import os
import uuid

# --- 프로젝트 설정 ---
SOLUTION_NAME = "QuickMemoSolution"
PROJECT_NAME = "QuickMemo"
TARGET_FRAMEWORK = "net8.0-windows"  # 최신 .NET 8.0 LTS 사용

# --- 솔루션 및 프로젝트 GUID 생성 ---
SOLUTION_GUID = str(uuid.uuid4()).upper()
PROJECT_GUID = str(uuid.uuid4()).upper()

# --- 파일 내용 정의 ---

# .gitignore
GITIGNORE_CONTENT = """
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Ll]og/

# Visual Studio 2019 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's launch settings
# launchSettings.json

# Rider files
.idea/
"""

# README.md
README_CONTENT = f"""
# {PROJECT_NAME} - 초고속 메모 캡처 및 검색 앱

AI 시대를 위한 개발자용 생산성 도구입니다.
어떤 작업 중에도 단축키로 생각을 즉시 캡처하고, 나중에 쉽게 검색하여 활용할 수 있습니다.

## 🚀 시작 가이드

### 1. 데이터베이스 설정
1.  SQL Server Management Studio(SSMS)를 엽니다.
2.  사용할 데이터베이스를 선택하거나 새로 생성합니다.
3.  프로젝트 루트에 있는 `database_setup.sql` 파일의 내용을 실행하여 `Notes` 테이블을 생성합니다.

### 2. 연결 문자열 수정
1.  Visual Studio에서 `QuickMemoSolution.sln` 파일을 엽니다.
2.  솔루션 탐색기에서 `{PROJECT_NAME}/Data/DatabaseService.cs` 파일을 엽니다.
3.  파일 상단에 있는 `_connectionString` 변수의 값을 **자신의 MSSQL 서버 정보에 맞게 수정**합니다.

    ```csharp
    // !!! 중요: 이 연결 문자열을 자신의 DB 환경에 맞게 반드시 수정하세요 !!!
    private readonly string _connectionString = "Server=YOUR_SERVER_NAME;Database=YOUR_DATABASE_NAME;User Id=your_user;Password=your_password;TrustServerCertificate=True;";
    ```

### 3. 빌드 및 실행
1.  Visual Studio 상단 메뉴에서 `빌드(Build) > 솔루션 빌드(Build Solution)`를 선택하거나 `Ctrl+Shift+B`를 누릅니다.
2.  빌드가 성공하면 `F5` 키를 눌러 애플리케이션을 시작합니다.
3.  앱이 실행되면 작업 표시줄 트레이에 아이콘이 나타납니다.

## ✨ 사용 방법

-   **메모 캡처**: 키보드에서 `Win` + `Shift` + `M` 을 누릅니다.
-   **메모 저장**: 내용을 입력하고 `Enter` 키를 누릅니다.
-   **취소**: `Esc` 키를 누릅니다.
-   **메모 검색**: 작업 표시줄 트레이의 아이콘을 클릭하여 메인 창을 열고 메모를 검색합니다.
"""

# database_setup.sql
SQL_SCRIPT_CONTENT = """
-- 만약 Notes 테이블이 이미 존재한다면 삭제합니다. (초기 설정용)
IF OBJECT_ID('dbo.Notes', 'U') IS NOT NULL
    DROP TABLE dbo.Notes;
GO

-- Notes 테이블을 생성합니다.
-- 이 테이블은 나중에 LLM 분석 및 RAG 소스로 활용하기에 적합한 구조입니다.
CREATE TABLE dbo.Notes (
    Id INT PRIMARY KEY IDENTITY(1,1), -- 고유 식별자
    Content NVARCHAR(MAX) NOT NULL,   -- 메모 내용 (제한 없음)
    Tags NVARCHAR(255) NULL,          -- 추후 분류를 위한 태그 (쉼표로 구분)
    CreatedAt DATETIME2 NOT NULL DEFAULT GETDATE() -- 생성 시각 (정밀한 시간)
);
GO

-- 샘플 데이터 추가 (선택 사항)
INSERT INTO dbo.Notes (Content, Tags) VALUES (N'이것은 첫 번째 테스트 메모입니다.', N'샘플, 테스트');
INSERT INTO dbo.Notes (Content, Tags) VALUES (N'글로벌 단축키 기능 아이디어 구상', N'아이디어, 개발');
GO

PRINT 'Notes 테이블이 성공적으로 생성되었습니다.';
"""

# QuickMemoSolution.sln
SLN_CONTENT = f"""
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.0.31903.59
MinimumVisualStudioVersion = 10.0.40219.1
Project("{{{SOLUTION_GUID}}}") = "{PROJECT_NAME}", "{PROJECT_NAME}\\{PROJECT_NAME}.csproj", "{{{PROJECT_GUID}}}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{{{PROJECT_GUID}}}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{{{PROJECT_GUID}}}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{{{PROJECT_GUID}}}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{{{PROJECT_GUID}}}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {{{str(uuid.uuid4()).upper()}}}
	EndGlobalSection
EndGlobal
"""

# QuickMemo.csproj
CSPROJ_CONTENT = f"""
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>{TARGET_FRAMEWORK}</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <UseWPF>true</UseWPF>
    <ApplicationIcon>icon.ico</ApplicationIcon>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="icon.ico" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Dapper" Version="2.1.35" />
    <PackageReference Include="Microsoft.Data.SqlClient" Version="5.2.0" />
  </ItemGroup>

  <ItemGroup>
    <Resource Include="icon.ico" />
  </ItemGroup>

</Project>
"""

# App.xaml
APP_XAML_CONTENT = """
<Application x:Class="QuickMemo.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:QuickMemo"
             ShutdownMode="OnExplicitShutdown">
    <Application.Resources>
         
    </Application.Resources>
</Application>
"""

# App.xaml.cs
APP_XAML_CS_CONTENT = f"""
using System.Windows;
using QuickMemo.Data;
using QuickMemo.Services;
using QuickMemo.Views;
using System.Windows.Forms;

namespace QuickMemo
{{
    public partial class App : System.Windows.Application
    {{
        private GlobalHotkeyService? _hotkeyService;
        private DatabaseService? _databaseService;
        private NotifyIcon? _notifyIcon;
        private MainWindow? _mainWindow;

        protected override void OnStartup(StartupEventArgs e)
        {{
            base.OnStartup(e);

            _databaseService = new DatabaseService();

            // 메인 윈도우 생성 (하지만 바로 보여주지는 않음)
            _mainWindow = new MainWindow();

            // 전역 단축키 등록
            _hotkeyService = new GlobalHotkeyService();
            _hotkeyService.Register(ModifierKeys.Win | ModifierKeys.Shift, System.Windows.Input.Key.M);
            _hotkeyService.HotKeyPressed += OnHotKeyPressed;

            // 작업 표시줄 트레이 아이콘 설정
            SetupTrayIcon();
        }}

        private void SetupTrayIcon()
        {{
            _notifyIcon = new NotifyIcon();
            _notifyIcon.Icon = new System.Drawing.Icon("icon.ico");
            _notifyIcon.Visible = true;
            _notifyIcon.Text = "{PROJECT_NAME}";

            _notifyIcon.ContextMenuStrip = new ContextMenuStrip();
            _notifyIcon.ContextMenuStrip.Items.Add("Open {PROJECT_NAME}", null, OnOpenClicked);
            _notifyIcon.ContextMenuStrip.Items.Add("Exit", null, OnExitClicked);

            _notifyIcon.MouseClick += (sender, args) =>
            {{
                if (args.Button == MouseButtons.Left)
                {{
                    OnOpenClicked(sender, args);
                }}
            }};
        }}

        private void OnOpenClicked(object? sender, EventArgs e)
        {{
            if (_mainWindow == null || !_mainWindow.IsVisible)
            {{
                _mainWindow = new MainWindow();
                _mainWindow.Show();
                _mainWindow.Activate();
            }}
            else
            {{
                _mainWindow.Activate();
            }}
        }}

        private void OnExitClicked(object? sender, EventArgs e)
        {{
            Current.Shutdown();
        }}
        
        private async void OnHotKeyPressed(object? sender, EventArgs e)
        {{
            var captureWindow = new CaptureWindow();
            var result = captureWindow.ShowDialog();

            if (result == true && !string.IsNullOrWhiteSpace(captureWindow.NoteContent) && _databaseService != null)
            {{
                await _databaseService.AddNoteAsync(captureWindow.NoteContent);
                // 메인 창이 열려있으면 메모 목록을 새로고침
                if (_mainWindow != null && _mainWindow.IsVisible)
                {{
                    await _mainWindow.ViewModel.LoadNotesAsync();
                }}
            }}
        }}

        protected override void OnExit(ExitEventArgs e)
        {{
            _hotkeyService?.Dispose();
            _notifyIcon?.Dispose();
            base.OnExit(e);
        }}
    }}
}}
"""

# Models/Note.cs
NOTE_MODEL_CS_CONTENT = """
namespace QuickMemo.Models
{
    public class Note
    {
        public int Id { get; set; }
        public string Content { get; set; } = string.Empty;
        public string? Tags { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
"""

# Data/DatabaseService.cs
DATABASE_SERVICE_CS_CONTENT = """
using Dapper;
using Microsoft.Data.SqlClient;
using QuickMemo.Models;

namespace QuickMemo.Data
{
    public class DatabaseService
    {
        // !!! 중요: 이 연결 문자열을 자신의 DB 환경에 맞게 반드시 수정하세요 !!!
        // 예: "Server=localhost\\SQLEXPRESS;Database=MyNotesDB;Trusted_Connection=True;TrustServerCertificate=True;"
        private readonly string _connectionString = "Server=YOUR_SERVER_NAME;Database=YOUR_DATABASE_NAME;User Id=your_user;Password=your_password;TrustServerCertificate=True;";

        public async Task AddNoteAsync(string content, string? tags = null)
        {
            using var connection = new SqlConnection(_connectionString);
            var sql = "INSERT INTO Notes (Content, Tags) VALUES (@Content, @Tags)";
            await connection.ExecuteAsync(sql, new { Content = content, Tags = tags });
        }

        public async Task<IEnumerable<Note>> SearchNotesAsync(string searchTerm)
        {
            using var connection = new SqlConnection(_connectionString);
            var sql = "SELECT Id, Content, Tags, CreatedAt FROM Notes WHERE Content LIKE @SearchTerm ORDER BY CreatedAt DESC";
            return await connection.QueryAsync<Note>(sql, new { SearchTerm = $"%{searchTerm}%" });
        }
    }
}
"""

# Services/GlobalHotkeyService.cs
HOTKEY_SERVICE_CS_CONTENT = """
using System.Runtime.InteropServices;
using System.Windows;
using System.Windows.Input;
using System.Windows.Interop;

namespace QuickMemo.Services
{
    [Flags]
    public enum ModifierKeys : uint
    {
        None = 0,
        Alt = 1,
        Control = 2,
        Shift = 4,
        Win = 8
    }

    public class GlobalHotkeyService : IDisposable
    {
        [DllImport("user32.dll")]
        private static extern bool RegisterHotKey(IntPtr hWnd, int id, uint fsModifiers, uint vk);

        [DllImport("user32.dll")]
        private static extern bool UnregisterHotKey(IntPtr hWnd, int id);

        private HwndSource? _source;
        private const int HOTKEY_ID = 9000;
        public event EventHandler? HotKeyPressed;

        public GlobalHotkeyService()
        {
            // 가상 윈도우를 만들어 단축키 메시지를 수신
            var helperWindow = new Window();
            helperWindow.Show();
            helperWindow.Hide();
            
            _source = HwndSource.FromHwnd(new WindowInteropHelper(helperWindow).Handle);
            _source?.AddHook(HwndHook);
        }
        
        public void Register(ModifierKeys modifier, Key key)
        {
            if (_source == null) return;
            var virtualKey = KeyInterop.VirtualKeyFromKey(key);
            RegisterHotKey(_source.Handle, HOTKEY_ID, (uint)modifier, (uint)virtualKey);
        }

        private IntPtr HwndHook(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)
        {
            const int WM_HOTKEY = 0x0312;
            if (msg == WM_HOTKEY && wParam.ToInt32() == HOTKEY_ID)
            {
                HotKeyPressed?.Invoke(this, EventArgs.Empty);
                handled = true;
            }
            return IntPtr.Zero;
        }

        public void Dispose()
        {
            _source?.RemoveHook(HwndHook);
            if(_source != null)
            {
                UnregisterHotKey(_source.Handle, HOTKEY_ID);
            }
            GC.SuppressFinalize(this);
        }
    }
}
"""

# ViewModels/MainViewModel.cs
MAIN_VIEWMODEL_CS_CONTENT = """
using QuickMemo.Data;
using QuickMemo.Models;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace QuickMemo.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly DatabaseService _databaseService;
        private string _searchTerm = string.Empty;
        private ObservableCollection<Note> _notes = new();

        public MainViewModel()
        {
            _databaseService = new DatabaseService();
            SearchCommand = new RelayCommand(async _ => await LoadNotesAsync());
            // 초기 로딩
            Task.Run(async () => await LoadNotesAsync());
        }

        public string SearchTerm
        {
            get => _searchTerm;
            set
            {
                _searchTerm = value;
                OnPropertyChanged();
                // 타이핑할 때마다 검색 실행
                Task.Run(async () => await LoadNotesAsync());
            }
        }

        public ObservableCollection<Note> Notes
        {
            get => _notes;
            set
            {
                _notes = value;
                OnPropertyChanged();
            }
        }

        public ICommand SearchCommand { get; }

        public async Task LoadNotesAsync()
        {
            var result = await _databaseService.SearchNotesAsync(SearchTerm);
            App.Current.Dispatcher.Invoke(() =>
            {
                Notes.Clear();
                foreach (var note in result)
                {
                    Notes.Add(note);
                }
            });
        }

        public event PropertyChangedEventHandler? PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string? propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    
    // Simple RelayCommand implementation
    public class RelayCommand : ICommand
    {
        private readonly Action<object?> _execute;
        private readonly Predicate<object?>? _canExecute;

        public RelayCommand(Action<object?> execute, Predicate<object?>? canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object? parameter) => _canExecute == null || _canExecute(parameter);
        public void Execute(object? parameter) => _execute(parameter);
        public event EventHandler? CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
"""

# Views/MainWindow.xaml
MAIN_WINDOW_XAML_CONTENT = """
<Window x:Class="QuickMemo.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:QuickMemo.Views"
        xmlns:viewModels="clr-namespace:QuickMemo.ViewModels"
        mc:Ignorable="d"
        Title="QuickMemo Search" Height="600" Width="800"
        WindowStartupLocation="CenterScreen" Icon="/icon.ico">
    <Window.DataContext>
        <viewModels:MainViewModel/>
    </Window.DataContext>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <TextBox Grid.Row="0" Margin="5" Padding="5" FontSize="16"
                 Text="{Binding SearchTerm, UpdateSourceTrigger=PropertyChanged}"
                 ToolTip="검색어를 입력하세요..."/>

        <ListView Grid.Row="1" Margin="5" ItemsSource="{Binding Notes}" HorizontalContentAlignment="Stretch">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <Border BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="10">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <TextBlock Grid.Row="0" FontWeight="Bold" Foreground="#FF5A5A5A"
                                       Text="{Binding CreatedAt, StringFormat='yyyy-MM-dd HH:mm:ss'}"/>
                            <TextBlock Grid.Row="1" TextWrapping="Wrap" Margin="0,5,0,0" FontSize="14"
                                       Text="{Binding Content}"/>
                        </Grid>
                    </Border>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>
    </Grid>
</Window>
"""

# Views/MainWindow.xaml.cs
MAIN_WINDOW_XAML_CS_CONTENT = """
using QuickMemo.ViewModels;
using System.Windows;

namespace QuickMemo.Views
{
    public partial class MainWindow : Window
    {
        public MainViewModel ViewModel => (MainViewModel)DataContext;

        public MainWindow()
        {
            InitializeComponent();
        }
        
        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            // 창을 실제로 닫지 않고 숨기기만 함
            e.Cancel = true;
            this.Hide();
        }
    }
}
"""

# Views/CaptureWindow.xaml
CAPTURE_WINDOW_XAML_CONTENT = """
<Window x:Class="QuickMemo.Views.CaptureWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Capture Note" Height="150" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="Transparent"
        WindowStartupLocation="CenterScreen"
        ShowInTaskbar="False"
        KeyDown="Window_KeyDown">
    <Border Background="#333" CornerRadius="10" BorderBrush="#555" BorderThickness="2">
        <Grid>
            <TextBox x:Name="NoteTextBox" 
                     Background="Transparent" Foreground="White" 
                     CaretBrush="White" FontSize="18"
                     TextWrapping="Wrap" AcceptsReturn="True"
                     VerticalContentAlignment="Center"
                     Margin="15" BorderThickness="0"
                     Text="..."/>
        </Grid>
    </Border>
</Window>
"""

# Views/CaptureWindow.xaml.cs
CAPTURE_WINDOW_XAML_CS_CONTENT = """
using System.Windows;
using System.Windows.Input;

namespace QuickMemo.Views
{
    public partial class CaptureWindow : Window
    {
        public string? NoteContent { get; private set; }

        public CaptureWindow()
        {
            InitializeComponent();
            Loaded += (s, e) =>
            {
                NoteTextBox.Focus();
                NoteTextBox.SelectAll();
            };
        }

        private void Window_KeyDown(object sender, KeyEventArgs e)
        {
            // Enter만 누르면 저장, Shift+Enter는 줄바꿈
            if (e.Key == Key.Enter && (Keyboard.Modifiers & ModifierKeys.Shift) == 0)
            {
                e.Handled = true;
                NoteContent = NoteTextBox.Text;
                DialogResult = true;
                Close();
            }
            else if (e.Key == Key.Escape)
            {
                e.Handled = true;
                DialogResult = false;
                Close();
            }
        }
    }
}
"""

# icon.ico (Base64 encoded)
ICON_BASE64 = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5ubm/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+jo6P/n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//m5ub/4uLi/+Li4v/i4uL/5ubm/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//k5OT/3t7e/97e3v/e3t7/5OTk/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//j4+P/3d3d/93d3f/d3d3/4+Pj/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//h4eH/29vb/9vb2//b29v/4eHh/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//g4OD/2tra/9ra2v/a2tr/4ODg/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/wAAAADn5+f/5+fn/wAAAADn5+f/AAAAAAAAAAAAAAAA5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/5+fn/+fn5//n5+f/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAA=="

# --- 스크립트 실행 로직 ---
def create_file(path, content):
    """지정된 경로에 파일을 생성하고 내용을 쓴다."""
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"CREATED: {path}")

def create_binary_file(path, base64_content):
    """Base64 인코딩된 콘텐츠로 바이너리 파일을 생성한다."""
    import base64
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'wb') as f:
        f.write(base64.b64decode(base64_content))
    print(f"CREATED: {path}")

def main():
    """프로젝트 구조와 모든 파일을 생성한다."""
    print(f"'{SOLUTION_NAME}' 솔루션 생성을 시작합니다...")

    # 기본 경로 설정
    solution_dir = SOLUTION_NAME
    project_dir = os.path.join(solution_dir, PROJECT_NAME)

    # 디렉토리 생성
    os.makedirs(os.path.join(project_dir, "Models"), exist_ok=True)
    os.makedirs(os.path.join(project_dir, "Data"), exist_ok=True)
    os.makedirs(os.path.join(project_dir, "Services"), exist_ok=True)
    os.makedirs(os.path.join(project_dir, "ViewModels"), exist_ok=True)
    os.makedirs(os.path.join(project_dir, "Views"), exist_ok=True)

    # 파일 생성
    create_file(os.path.join(solution_dir, ".gitignore"), GITIGNORE_CONTENT)
    create_file(os.path.join(solution_dir, "README.md"), README_CONTENT)
    create_file(os.path.join(solution_dir, "database_setup.sql"), SQL_SCRIPT_CONTENT)
    create_file(os.path.join(solution_dir, f"{SOLUTION_NAME}.sln"), SLN_CONTENT)

    create_file(os.path.join(project_dir, f"{PROJECT_NAME}.csproj"), CSPROJ_CONTENT)
    create_file(os.path.join(project_dir, "App.xaml"), APP_XAML_CONTENT)
    create_file(os.path.join(project_dir, "App.xaml.cs"), APP_XAML_CS_CONTENT)

    create_file(os.path.join(project_dir, "Models", "Note.cs"), NOTE_MODEL_CS_CONTENT)
    create_file(os.path.join(project_dir, "Data", "DatabaseService.cs"), DATABASE_SERVICE_CS_CONTENT)
    create_file(os.path.join(project_dir, "Services", "GlobalHotkeyService.cs"), HOTKEY_SERVICE_CS_CONTENT)
    create_file(os.path.join(project_dir, "ViewModels", "MainViewModel.cs"), MAIN_VIEWMODEL_CS_CONTENT)

    create_file(os.path.join(project_dir, "Views", "MainWindow.xaml"), MAIN_WINDOW_XAML_CONTENT)
    create_file(os.path.join(project_dir, "Views", "MainWindow.xaml.cs"), MAIN_WINDOW_XAML_CS_CONTENT)
    create_file(os.path.join(project_dir, "Views", "CaptureWindow.xaml"), CAPTURE_WINDOW_XAML_CONTENT)
    create_file(os.path.join(project_dir, "Views", "CaptureWindow.xaml.cs"), CAPTURE_WINDOW_XAML_CS_CONTENT)

    # 아이콘 파일 생성
    create_binary_file(os.path.join(project_dir, "icon.ico"), ICON_BASE64)

    print("\n" + "="*50)
    print("🎉 프로젝트 생성이 완료되었습니다!")
    print(f"'{SOLUTION_NAME}' 폴더를 확인하세요.")
    print("다음 단계를 진행해 주세요. (자세한 내용은 README.md 참조)")
    print("1. 'database_setup.sql' 스크립트를 MSSQL에서 실행")
    print("2. 'QuickMemo/Data/DatabaseService.cs' 파일의 연결 문자열 수정")
    print("3. Visual Studio에서 'QuickMemoSolution.sln' 열고 빌드 (Ctrl+Shift+B)")
    print("="*50)

if __name__ == '__main__':
    main()
2단계: 앱 빌드 및 실행
데이터베이스 설정: 생성된 QuickMemoSolution 폴더 안에 있는 database_setup.sql 파일을 열어 그 내용을 복사한 후, SQL Server Management Studio(SSMS) 에서 실행하여 Notes 테이블을 만듭니다.

연결 문자열 수정: Visual Studio로 QuickMemoSolution.sln 파일을 엽니다. 솔루션 탐색기에서 QuickMemo 프로젝트 아래 Data/DatabaseService.cs 파일을 열고, 상단에 있는 _connectionString 변수의 값을 사용하시는 MSSQL 서버 정보로 정확하게 수정합니다.

빌드 및 실행: Visual Studio에서 Ctrl + Shift + B를 눌러 솔루션을 빌드하고, F5 키를 눌러 실행합니다.