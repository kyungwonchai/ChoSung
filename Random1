 제공했던 LogEntry 내용을 표시하고, FunctionStatus 컬럼과 함께 도형이 표시되는 구조를 말씀하시는 것 같네요. 이 구조에서 도형에 비동기 함수를 연결하고, 개별 도형 클릭으로 해당 함수가 실행되도록 수정해 드리겠습니다.

우선, 로그 엔트리 내용과 FunctionStatus 컬럼을 표시하는 기존 구조를 복원하고, 도형에 비동기 함수를 연결하는 부분을 수정하겠습니다.

TaskModel (로그 엔트리와 도형 기반 비동기 함수 추가)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

public class TaskModel : ViewModelBase
{
    // 로그 엔트리 내용
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }

    // 도형과 함수 상태 컬럼
    public ObservableCollection<FunctionItem> FunctionStatus { get; set; }

    // 개별 실행 명령어
    public ICommand FunctionClickCommand { get; }

    public TaskModel(LogEntry logEntry)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;

        // FunctionStatus 컬럼에 함수와 도형 추가 (Task A, B, C)
        FunctionStatus = new ObservableCollection<FunctionItem>
        {
            new FunctionItem { Name = "Task A", Status = Brushes.Gray, ExecuteFunction = ExecuteTaskA },
            new FunctionItem { Name = "Task B", Status = Brushes.Gray, ExecuteFunction = ExecuteTaskB },
            new FunctionItem { Name = "Task C", Status = Brushes.Gray, ExecuteFunction = ExecuteTaskC }
        };

        // 도형 클릭 명령어 설정
        FunctionClickCommand = new RelayCommand<FunctionItem>(ExecuteFunctionClick);
    }

    /// <summary>
    /// 도형을 클릭했을 때 해당 함수만 실행하는 함수.
    /// </summary>
    private async void ExecuteFunctionClick(FunctionItem function)
    {
        await function.ExecuteFunction();  // 도형에 연결된 비동기 함수 실행
        Application.Current.Dispatcher.Invoke(() =>
        {
            function.Status = Brushes.Green;  // 완료 후 도형 색상 변경
        });
    }

    // Task A 비동기 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 비동기 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 비동기 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
FunctionItem (함수와 도형 연결)
csharp
코드 복사
public class FunctionItem
{
    public string Name { get; set; }  // 함수 이름 (Task A, B, C 등)
    public Brush Status { get; set; } // 도형 색상 (Gray, Green 등)
    public Func<Task> ExecuteFunction { get; set; }  // 실행할 비동기 함수
}
MainViewModel (작업 추가 및 바인딩)
csharp
코드 복사
using System.Collections.ObjectModel;

public class MainViewModel : ViewModelBase
{
    // TaskModel 리스트 (로그 엔트리와 함수 상태 관리)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO123", PO_PLAN_QTY = 100, PO_PROD_QTY = 50 }),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO456", PO_PLAN_QTY = 200, PO_PROD_QTY = 100 })
        };
    }
}
LogEntry 클래스 (로그 엔트리 데이터 클래스)
csharp
코드 복사
public class LogEntry
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
}
XAML (DataGrid 및 도형)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />
                
                <!-- FunctionStatus (도형) Column -->
                <DataGridTemplateColumn Header="Function Status">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ItemsControl ItemsSource="{Binding FunctionStatus}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <!-- 도형 (Ellipse) -->
                                        <Ellipse Width="20" Height="20" Fill="{Binding Status}" 
                                                 Stroke="Black" StrokeThickness="1">
                                            <!-- 도형 클릭 시 함수 실행 -->
                                            <Ellipse.InputBindings>
                                                <MouseBinding Command="{Binding DataContext.FunctionClickCommand, 
                                                                        RelativeSource={RelativeSource AncestorType=DataGrid}}" 
                                                              CommandParameter="{Binding}" 
                                                              MouseAction="LeftClick"/>
                                            </Ellipse.InputBindings>
                                        </Ellipse>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
코드 설명:
TaskModel은 각 로그 엔트리(MAG_NO, PO_NO, PO_PLAN_QTY, PO_PROD_QTY) 정보를 관리하고, FunctionStatus 컬럼으로 각 작업의 상태를 시각적으로 보여줍니다.

FunctionItems는 각 작업에 해당하는 함수(Task A, B, C)와 연결된 도형(Ellipse)을 나타냅니다.
각 도형을 클릭하면 그 도형에 연결된 함수가 실행되고, 실행 완료 후 녹색으로 색상이 변경됩니다.
FunctionItem은 비동기 함수와 **도형 상태(색상)**를 관리합니다. 도형을 클릭하면 그 함수가 실행됩니다.

MainViewModel은 TaskModel 리스트를 관리하며, UI에서 DataGrid를 통해 각 로그 엔트리와 그에 대응하는 함수 상태를 표시합니다.

XAML에서 DataGrid는 MAG_NO, PO_NO, 그리고 FunctionStatus 컬럼을 포함하며, 도형(작업의 상태)을 시각적으로 나타냅니다. 도형을 클릭하면 해당 비동기 함수가 실행되고, 작업이 완료되면 도형의 색상이 녹색으로 변경됩니다.

최종 정리:
로그 엔트리(MAG_NO, PO_NO 등)를 관리하는 TaskModel을 사용하여 작업을 추가하고, 각 작업은 FunctionItems 컬럼에서 **도형(함수 상태)**으로 시각화됩니다.
각 도형은 비동기 함수와 연결되어 있으며, 클릭 시 해당 함수만 실행됩니다.
FunctionStatus 컬럼은 도형을 통해 작업 상태를 보여주며, 클릭으로 함수 실행과 색상 변경을 처리합니다.
이 구조로 구현하면, 로그 엔트리와 함수 실행 상태를 시각적으로 보여주고, 도형 기반 함수 실행을 쉽게 구현할 수 있습니다.