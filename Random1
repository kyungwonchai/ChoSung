. C# 7.3에서는 switch 표현식이나 리턴 타입 추론 등의 기능이 없으므로, 이를 C# 7.3에서 지원하는 문법으로 변환하겠습니다.

주요 변경 사항:
switch 표현식을 일반적인 switch 문으로 변환.
람다식 내에서 명령문을 지원하지 않는 경우를 수정.
함수 호출 시 명시적인 형 변환 및 리턴 타입 지정.
1. TaskModel.cs (수정된 코드 - C# 7.3 호환)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Collections.ObjectModel;

/// <summary>
/// TaskModel은 개별 작업의 상태를 관리하고, 작업의 시작 및 상태를 업데이트합니다.
/// PLC 시퀀스 플래그에 따라 다른 작업을 묶어 실행하며, 각 함수는 도형과 연동되어 상태를 표시합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public int MAG_QTY { get; set; }
    public string BASIC_MODEL { get; set; }
    public string MODEL_CODE { get; set; }
    public string PO_NO { get; set; }
    public int PO_PLAN_QTY { get; set; }
    public int PO_PROD_QTY { get; set; }
    public int SequenceFlag { get; set; }  // 시퀀스 플래그 표시 (1, 2, 3)

    // 함수 상태를 위한 도형 색상 리스트 (각 함수에 따른 도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }
    
    // 각 함수 이름을 저장 (마우스 오버 시 함수 이름 표시)
    public ObservableCollection<string> FunctionNames { get; set; }
    
    // 진행 상태를 표시하는 텍스트 (실시간으로 반영)
    private string _progressText;
    public string ProgressText
    {
        get => _progressText;
        set
        {
            _progressText = value;
            OnPropertyChanged(nameof(ProgressText));
        }
    }
    
    private TaskQueue _taskQueue;
    public string Status { get; set; }
    
    public ICommand PauseCommand { get; }
    public ICommand ResumeCommand { get; }
    public ICommand ExecuteSpecificTaskCommand { get; }  // 도형 우클릭 시 해당 함수만 실행
    
    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        MAG_QTY = logEntry.MAG_QTY;
        BASIC_MODEL = logEntry.BASIC_MODEL;
        MODEL_CODE = logEntry.MODEL_CODE;
        PO_NO = logEntry.PO_NO;
        PO_PLAN_QTY = logEntry.PO_PLAN_QTY;
        PO_PROD_QTY = logEntry.PO_PROD_QTY;
        SequenceFlag = logEntry.SequenceFlag;

        _taskQueue = taskQueue;
        Status = "Pending";
        ProgressText = "Pending"; // 기본 상태 (대기 중)

        // 각 함수마다 도형을 설정 (시퀀스에 따라 다른 개수)
        FunctionStatusColors = new ObservableCollection<Brush>();
        FunctionNames = new ObservableCollection<string>();

        PauseCommand = new RelayCommand(PauseTask);
        ResumeCommand = new RelayCommand(ResumeTask);
        ExecuteSpecificTaskCommand = new RelayCommand<int>(ExecuteSpecificTask);  // 특정 함수 실행

        InitializeFunctionColors(); // 초기 도형 상태 설정
    }

    /// <summary>
    /// 작업을 시작하고 각 함수 완료 시 도형 색상을 변경합니다.
    /// </summary>
    public void StartTask()
    {
        Status = "Running";
        ProgressText = "Running..."; // 실시간 진행 상태 업데이트

        switch (SequenceFlag)
        {
            case 1: // 시퀀스 플래그가 1인 경우: 함수 A, B, C 실행
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(0, ExecuteTaskA); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(1, ExecuteTaskB); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(2, ExecuteTaskC); });
                break;
            case 2: // 시퀀스 플래그가 2인 경우: 함수 C, B, D 실행
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(0, ExecuteTaskC); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(1, ExecuteTaskB); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(2, ExecuteTaskD); });
                break;
            case 3: // 시퀀스 플래그가 3인 경우: 함수 A, B, E 실행
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(0, ExecuteTaskA); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(1, ExecuteTaskB); });
                _taskQueue.EnqueueTask(async () => { await ExecuteTaskWithColor(2, ExecuteTaskE); });
                break;
        }
    }

    /// <summary>
    /// 각 함수에 대한 작업을 실행하고, 완료되면 해당 인덱스의 도형 색상을 변경합니다.
    /// </summary>
    private async Task ExecuteTaskWithColor(int index, Func<Task> task)
    {
        FunctionStatusColors[index] = Brushes.SkyBlue; // 작업 진행 중 색상
        OnPropertyChanged(nameof(FunctionStatusColors));

        await task(); // 작업 실행

        FunctionStatusColors[index] = Brushes.Green; // 작업 완료 시 색상
        OnPropertyChanged(nameof(FunctionStatusColors));
    }

    /// <summary>
    /// 특정 함수를 우클릭하여 단독 실행합니다.
    /// </summary>
    private async void ExecuteSpecificTask(int taskIndex)
    {
        switch (FunctionNames[taskIndex])
        {
            case "Task A":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskA);
                break;
            case "Task B":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskB);
                break;
            case "Task C":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskC);
                break;
            case "Task D":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskD);
                break;
            case "Task E":
                await ExecuteTaskWithColor(taskIndex, ExecuteTaskE);
                break;
            default:
                throw new ArgumentException("Unknown task");
        }
    }

    /// <summary>
    /// 각 함수의 기본 도형 색상을 설정합니다 (회색).
    /// </summary>
    private void InitializeFunctionColors()
    {
        int functionCount = 3; // 각 시퀀스 플래그에서 기본 3개의 함수

        for (int i = 0; i < functionCount; i++)
        {
            FunctionStatusColors.Add(Brushes.Gray); // 기본 색상 (회색)
        }

        // 각 함수의 이름을 설정
        switch (SequenceFlag)
        {
            case 1:
                FunctionNames.Add("Task A");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task C");
                break;
            case 2:
                FunctionNames.Add("Task C");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task D");
                break;
            case 3:
                FunctionNames.Add("Task A");
                FunctionNames.Add("Task B");
                FunctionNames.Add("Task E");
                break;
        }
    }

    /// <summary>
    /// Task A 실행
    /// </summary>
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task A Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task B 실행
    /// </summary>
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task B Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task C 실행
    /// </summary>
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task C Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task D 실행
    /// </summary>
    private async Task ExecuteTaskD()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task D Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// Task E 실행
    /// </summary>
    private async Task ExecuteTaskE()
    {
        await Task.Delay(1000); // 1초 대기 (작업 시뮬레이션)
        ProgressText = "Task E Completed"; // 진행 상태 업데이트
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    private void PauseTask()
    {
        _taskQueue.Pause();
        ProgressText = "Paused"; // 진행 상태 업데이트
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    private void ResumeTask()
    {
        _taskQueue.Resume();
        ProgressText = "Resumed"; // 진행 상태 업데이트
    }
}
주요 변경 사항:
switch 표현식을 switch 문으로 변환하여, C# 7.3과 호환되도록 수정했습니다.
람다식 내부에 있는 명령문을 명시적으로 async 람다로 변경하여, 작업을 큐에 추가하는 방식을 수정했습니다.
우클릭 시 함수 실행 부분에서도 switch 문을 사용하여 C# 7.3에서 실행되도록 수정했습니다.
이제 C# 7.3에서 실행될 수 있으며, 요청하신 모든 기능이 반영된 최종 코드입니