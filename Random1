네, 알겠습니다. SAgentM.App (WPF 에이전트)에서 생성되는 로그 파일 중 3일이 지난 오래된 로그 파일은 자동으로 삭제되도록 기능을 추가하겠습니다. 이 작업은 에이전트 프로그램이 시작될 때 수행하는 것이 간단하고 효과적입니다.

수정 대상 파일:

SAgentM.App/App.xaml.cs: 애플리케이션 시작 시점에 OnStartup 메서드 내에서 오래된 로그 파일을 찾아 삭제하는 로직을 추가합니다.
수정: SAgentM.App/App.xaml.cs (오래된 로그 파일 자동 삭제 기능 추가)
C#

// SAgentM.App/App.xaml.cs
using Serilog; // 여전히 파일 로깅에 사용 (이전 답변에서 Serilog 제거는 Flask 앱에 한함)
using Serilog.Events;
using System;
using System.Configuration;
using System.IO; // Path, Directory, File, FileInfo, DateTime 사용
using System.Linq; // LINQ 사용 (파일 필터링)
using System.Windows;
// SAgentM.App.Services, SAgentM.App.ViewModels 등 필요한 using은 이전 답변 내용 유지

namespace SAgentM.App
{
    public partial class App : Application
    {
        // NotifyIcon, MainWindow, 서비스 인스턴스 등은 이전 답변 #61에서 정의한대로 유지
        // private Hardcodet.Wpf.TaskbarNotification.TaskbarIcon _notifyIcon; 
        // private MainWindow _mainWindow;
        // private Services.ILoggingService _loggingService;
        // private Services.IAgentCoreService _agentCoreService;
        // private ViewModels.MainViewModel _mainViewModel;


        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            // 1. Serilog 전역 파일 로거 설정 (이전 답변 #61의 내용 유지)
            var logFilePattern = ConfigurationManager.AppSettings["LogFilePath"] ?? "Logs_SAgentM\\SAgentM_App_.log"; // 로그 파일 이름 패턴 포함
            var baseDir = AppDomain.CurrentDomain.BaseDirectory;
            var fullLogPathPattern = Path.Combine(baseDir, logFilePattern); // 실제 파일 이름은 날짜가 붙음
            var logDirectory = Path.GetDirectoryName(fullLogPathPattern);

            if (!string.IsNullOrEmpty(logDirectory) && !Directory.Exists(logDirectory))
            {
                Directory.CreateDirectory(logDirectory);
            }

            Log.Logger = new LoggerConfiguration()
                .MinimumLevel.Debug()
                .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
                .Enrich.FromLogContext()
                .Enrich.WithThreadId()
                .Enrich.WithProcessId()
                .WriteTo.File(
                    fullLogPathPattern, // 예: Logs_SAgentM\SAgentM_App_.log -> Logs_SAgentM\SAgentM_App_20240101.log
                    rollingInterval: RollingInterval.Day,
                    retainedFileCountLimit: null, // Serilog 자체의 파일 개수 제한은 사용 안 함 (수동 삭제 로직 사용)
                    shared: true,
                    flushToDiskInterval: TimeSpan.FromSeconds(5)
                 )
                .CreateLogger();

            Log.Information("SAgentM.App Application_Startup: Logging initialized. Log pattern: {LogPathPattern}", fullLogPathPattern);


            // --- ▼▼▼ 오래된 로그 파일 삭제 로직 (신규 추가) ▼▼▼ ---
            try
            {
                if (!string.IsNullOrEmpty(logDirectory) && Directory.Exists(logDirectory))
                {
                    Log.Information("SAgentM.App: 오래된 로그 파일 정리 시작...");
                    int daysToKeep = 3; // 보관할 최근 일수 (3일 초과된 로그 삭제)
                    DateTime cutoffDate = DateTime.Now.Date.AddDays(-daysToKeep); // 이 날짜 이전의 로그는 삭제 대상

                    // 로그 파일 이름 패턴에서 날짜 부분을 제외한 순수 파일 이름과 확장자 추출
                    // 예: "SAgentM_App_.log" -> "SAgentM_App_", ".log"
                    string fileNameWithoutDate = Path.GetFileNameWithoutExtension(logFilePattern).TrimEnd('_'); // "SAgentM_App"
                    string fileExtension = Path.GetExtension(logFilePattern); // ".log"
                    string searchPattern = $"{fileNameWithoutDate}_*{fileExtension}"; // 예: "SAgentM_App_*.log"

                    var logFiles = Directory.GetFiles(logDirectory, searchPattern)
                                     .Select(filePath => new FileInfo(filePath))
                                     .ToList();
                    
                    int deletedCount = 0;
                    foreach (var logFile in logFiles)
                    {
                        // 파일 이름에서 날짜 추출 시도 (예: SAgentM_App_20250520.log)
                        string datePart = logFile.Name
                                          .Replace(fileNameWithoutDate + "_", "")
                                          .Replace(fileExtension, "");
                        
                        if (DateTime.TryParseExact(datePart, "yyyyMMdd", 
                                                  System.Globalization.CultureInfo.InvariantCulture, 
                                                  System.Globalization.DateTimeStyles.None, 
                                                  out DateTime fileDate))
                        {
                            if (fileDate.Date < cutoffDate)
                            {
                                try
                                {
                                    logFile.Delete();
                                    deletedCount++;
                                    Log.Information("SAgentM.App: 오래된 로그 파일 삭제됨: {DeletedLogFile}", logFile.FullName);
                                }
                                catch (IOException ioEx)
                                {
                                    Log.Warning(ioEx, "SAgentM.App: 로그 파일 삭제 중 IO 오류 발생 (파일 사용 중일 수 있음): {LogFile}", logFile.FullName);
                                }
                                catch (UnauthorizedAccessException uaEx)
                                {
                                    Log.Error(uaEx, "SAgentM.App: 로그 파일 삭제 권한 없음: {LogFile}", logFile.FullName);
                                }
                            }
                        }
                        else
                        {
                            Log.Warning("SAgentM.App: 로그 파일 이름에서 날짜를 파싱할 수 없음 (패턴 불일치 또는 다른 파일): {LogFile}", logFile.Name);
                        }
                    }
                    if (deletedCount > 0)
                    {
                        Log.Information("SAgentM.App: 총 {Count}개의 오래된 로그 파일 삭제 완료.", deletedCount);
                    }
                    else
                    {
                        Log.Information("SAgentM.App: 삭제할 오래된 로그 파일이 없습니다.");
                    }
                }
                else
                {
                    Log.Warning("SAgentM.App: 로그 디렉토리를 찾을 수 없어 로그 정리를 건너뜁니다. Path: {LogDirectory}", logDirectory);
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex, "SAgentM.App: 오래된 로그 파일 정리 중 예기치 않은 오류 발생.");
            }
            // --- ▲▲▲ 오래된 로그 파일 삭제 로직 끝 ▲▲▲ ---


            // 서비스 및 ViewModel 초기화, NotifyIcon 설정 등은 이전 답변 #61의 코드와 동일하게 유지
            // _loggingService = new LoggingService(); 
            // _agentCoreService = new AgentCoreService(_loggingService);
            // _mainViewModel = new MainViewModel(_loggingService, _agentCoreService);
            // _mainWindow = new MainWindow { DataContext = _mainViewModel };
            // _notifyIcon = (Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)FindResource("AppNotifyIcon");
            // if (_notifyIcon != null) { /* ... */ }
            // if (!_agentCoreService.IsRunning) { /* _agentCoreService.Start(); ... */ }
            // 이 부분은 이전 답변(#61)에서 제공된 `App.xaml.cs`의 나머지 `OnStartup` 로직을 그대로 사용하시면 됩니다.
            // 간결성을 위해 여기서는 생략합니다.
        }

        // ShowMainWindow_Click, ExitApplication_MenuItemClick, OnExit 등 다른 메서드들은
        // 이전 답변 #61의 `App.xaml.cs` 코드와 동일하게 유지합니다.
        // (이 부분도 생략합니다. 이전 답변을 참조해주세요.)
    }
}
App.xaml.cs의 OnStartup 메서드 주요 변경 사항:

Serilog 설정 유지: 파일 로깅을 위한 Serilog 설정은 그대로 유지합니다. 다만, retainedFileCountLimit: null로 설정하여 Serilog 자체의 자동 파일 삭제 기능은 사용하지 않고, 아래 추가된 수동 삭제 로직을 사용합니다.
오래된 로그 파일 삭제 로직 추가:
daysToKeep = 3;: 보관할 최근 로그 파일의 일수를 3일로 설정합니다.
cutoffDate: 이 날짜보다 오래된 로그 파일은 삭제 대상이 됩니다.
로그 파일 검색:
App.config의 LogFilePath 설정값 (예: Logs_SAgentM\SAgentM_App_.log)을 기준으로 로그 파일 디렉토리와 파일 이름 패턴을 결정합니다.
Directory.GetFiles()와 Select(filePath => new FileInfo(filePath))를 사용하여 SAgentM_App_*.log 패턴의 모든 로그 파일을 가져옵니다.
날짜 파싱 및 삭제:
각 로그 파일의 이름에서 날짜 부분(예: 20250520)을 추출하여 DateTime 객체로 파싱합니다. 파일 이름 패턴은 SAgentM_App_yyyyMMdd.log로 가정합니다.
파싱된 파일 날짜가 cutoffDate보다 이전이면 해당 파일을 삭제합니다.
삭제 성공, 실패(IO 오류, 권한 오류), 날짜 파싱 실패 등의 경우에 대한 로그를 기록합니다.
참고:

LogFilePath 설정: App.config의 LogFilePath 값은 Serilog가 로그 파일을 생성할 때 사용하는 패턴입니다. 예시(Logs_SAgentM\SAgentM_App_.log)는 Logs_SAgentM 폴더 아래에 SAgentM_App_20240101.log, SAgentM_App_20240102.log 와 같이 날짜가 포함된 파일명을 생성합니다. 위 삭제 로직은 이 패턴을 기준으로 파일명에서 날짜를 추출합니다. 만약 다른 패턴을 사용 중이시라면 날짜 추출 로직(datePart 생성 및 DateTime.TryParseExact 부분)을 그에 맞게 수정해야 합니다.
retainedFileCountLimit in Serilog: Serilog의 WriteTo.File 설정에서 retainedFileCountLimit를 null로 설정했습니다. 이렇게 하면 Serilog 자체적으로는 오래된 로그 파일을 삭제하지 않고, 위에서 추가한 로직을 통해서만 3일 이전 파일이 삭제됩니다. 만약 Serilog의 이 기능을 사용하고 싶다면, daysToKeep 대신 retainedFileCountLimit를 원하는 값으로 설정하고 위 수동 삭제 로직은 제거할 수 있습니다. (단, retainedFileCountLimit는 파일 개수 기준이고, 여기서는 날짜 기준 삭제입니다.)