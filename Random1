제에서는 DevExpress WPF 22.2 버전을 사용하고 있습니다.

    XAML 설정:
    XAML 파일에서 GridControl을 정의하고 MouseLeave와 MouseLeftButtonDown 이벤트를 구독하십시오.

xml

<dxg:GridControl x:Name="grid" 
                 MouseLeave="OnMouseLeave" 
                 MouseLeftButtonDown="OnMouseLeftButtonDown">
    <!-- Other GridControl properties and settings -->
</dxg:GridControl>

    이벤트 핸들러 정의:
    MainWindow.xaml.cs (code-behind 파일)에서 이벤트 핸들러를 정의합니다.

csharp

private void OnMouseLeftButtonDown(object sender, MouseButtonEventArgs e)
{
    var grid = sender as GridControl;
    if (grid == null) return;

    var hitInfo = grid.CalcHitInfo(e.GetPosition(grid));
    if (hitInfo.InRowCell)
    {
        var rowHandle = hitInfo.RowHandle;
        var column = hitInfo.Column;

        string tooltipText = $"Row: {grid.GetRowVisibleIndexByHandle(rowHandle) + 1}, Column: {column.HeaderCaption}";
        grid.ToolTip = tooltipText;
    }
}

private void OnMouseLeave(object sender, MouseEventArgs e)
{
    var grid = sender as GridControl;
    if (grid != null)
    {
        grid.ToolTip = null;
    }
}

이 코드는 마우스가 셀을 클릭하면 OnMouseLeftButtonDown 이벤트 핸들러를 호출하고, 마우스가 GridControl을 벗어나면 OnMouseLeave 이벤트 핸들러를 호출합니다. OnMouseLeftButtonDown 이벤트 핸들러는 클릭된 셀의 행과 열 정보를 툴팁으로 표시하며, OnMouseLeave 이벤트 핸들러는 마우스가 GridControl을 벗어나면 툴팁을