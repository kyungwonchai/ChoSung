재 창이 화면 중앙에 있고, 배경이 흰색이며, 일부 글자가 포함되어 있음에도 불구하고 창을 감지하지 못하는 문제가 발생하고 있습니다.
가능한 원인:

이진화(Threshold) 과정에서 글자 부분이 검게 나와서 창이 깨져 인식되지 않음
창이 여러 개의 컨투어로 분리되어 가장 큰 사각형을 찾지 못함
배경과 경계 부분의 명확한 대비가 부족하여 경계를 감지하지 못함
컨투어를 찾는 과정에서 글자로 인해 일부 영역이 분리되어 버림
2. 해결 방법
✅ 1) 창의 경계를 정확히 감지하도록 Threshold 적용 방식 변경
기존에는 ThresholdTypes.Binary (200,255) 를 사용했지만, 이 방식에서는 글자가 검게 남아서 창이 분리될 가능성이 높음.
➡ 대신 AdaptiveThreshold를 사용하여 배경과 글자를 적절히 분리

✅ 2) Morphology(침식, 팽창) 적용
➡ 작은 글씨로 인해 창이 여러 개로 나뉘는 문제 해결

✅ 3) BoundingRect 필터링 조건 완화
➡ 창이 잘려서 인식되지 않는 문제 해결

3. 수정된 코드 (Form1.cs)
csharp
코드 복사
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;
using OpenCvSharp;
using OpenCvSharp.Extensions;

namespace WinFormsOpenCv
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage; // 이미지 맞추기
        }

        // 버튼 클릭 시 실행
        private void btnProcess_Click(object sender, EventArgs e)
        {
            // 화면 캡처
            Bitmap screenshot = CaptureScreen();

            // OpenCV Mat 변환 및 이진화 적용
            Mat matImage = BitmapConverter.ToMat(screenshot);
            Mat processedImage = PreprocessImage(matImage);

            // 창 감지
            Rect detectedWindow = DetectWindow(processedImage, matImage);

            if (detectedWindow != Rect.Empty)
            {
                // 우측 상단 기준 좌표에서 x -10, y -10 지점 클릭
                int clickX = detectedWindow.Right - 10;
                int clickY = detectedWindow.Top - 10;
                Cursor.Position = new System.Drawing.Point(clickX, clickY);
                mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, clickX, clickY, 0, IntPtr.Zero);

                Console.WriteLine($"닫기 버튼 클릭: ({clickX}, {clickY})");
            }
            else
            {
                Console.WriteLine("해당 조건의 창을 찾을 수 없습니다.");
            }

            // PictureBox에 감지된 창 표시
            pictureBox1.Image = ConvertMatToBitmap(matImage);
            pictureBox1.Refresh();
        }

        // 화면 캡처 함수 (전체 화면 캡처)
        private Bitmap CaptureScreen()
        {
            Rectangle bounds = Screen.PrimaryScreen.Bounds;
            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);
            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);
            }
            return bitmap;
        }

        // Mat → Bitmap 변환 함수
        private Bitmap ConvertMatToBitmap(Mat mat)
        {
            return BitmapConverter.ToBitmap(mat);
        }

        // **전처리 함수 (이진화 및 노이즈 제거)**
        private Mat PreprocessImage(Mat image)
        {
            Mat gray = new Mat();
            Cv2.CvtColor(image, gray, ColorConversionCodes.BGR2GRAY);

            // **AdaptiveThreshold 적용 (글자가 있어도 창이 하나로 유지되도록)**
            Mat binary = new Mat();
            Cv2.AdaptiveThreshold(gray, binary, 255, AdaptiveThresholdTypes.GaussianC, ThresholdTypes.Binary, 11, 2);

            // **Morphology 연산 적용 (글자 부분을 매꿔서 하나의 창으로 인식되도록)**
            Mat kernel = Cv2.GetStructuringElement(MorphShapes.Rect, new OpenCvSharp.Size(5, 5));
            Cv2.MorphologyEx(binary, binary, MorphTypes.Close, kernel);

            return binary;
        }

        // 창 감지 및 테두리 그리기 함수
        private Rect DetectWindow(Mat binary, Mat originalImage)
        {
            // 컨투어 찾기
            Cv2.FindContours(binary, out OpenCvSharp.Point[][] contours, out _, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

            Rect detectedWindow = Rect.Empty;
            int screenWidth = Screen.PrimaryScreen.Bounds.Width;
            int screenCenterX = screenWidth / 2;
            double maxArea = 0;

            foreach (var contour in contours)
            {
                Rect rect = Cv2.BoundingRect(contour);
                double area = rect.Width * rect.Height;

                // 창 감지 조건 (너무 작은 것 제외, 화면 중앙, y > 150)
                if (rect.Width > 150 && rect.Height > 80 && rect.Y > 150 && 
                    Math.Abs(rect.X + rect.Width / 2 - screenCenterX) < 300 && area > maxArea)
                {
                    maxArea = area;
                    detectedWindow = rect;

                    // 창 테두리 그리기 (빨간색)
                    Cv2.Rectangle(originalImage, rect, new Scalar(0, 0, 255), 3);
                    Console.WriteLine($"창 감지: 위치 ({rect.X}, {rect.Y}), 크기 ({rect.Width}x{rect.Height})");
                }
            }

            return detectedWindow;
        }

        // 마우스 클릭을 위한 WinAPI
        [DllImport("user32.dll", SetLastError = true)]
        static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, IntPtr dwExtraInfo);

        const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        const uint MOUSEEVENTF_LEFTUP = 0x04;
    }
}
4. 주요 변경점
✅ 1) Adaptive Threshold 적용 (글자가 있어도 창이 유지되도록)
csharp
코드 복사
Cv2.AdaptiveThreshold(gray, binary, 255, AdaptiveThresholdTypes.GaussianC, ThresholdTypes.Binary, 11, 2);
기존 Threshold (200, 255) 대신 AdaptiveThreshold 적용
작은 글씨가 창을 쪼개는 문제 해결
✅ 2) Morphology 연산 (Close) 적용 (창이 분리되지 않도록)
csharp
코드 복사
Mat kernel = Cv2.GetStructuringElement(MorphShapes.Rect, new OpenCvSharp.Size(5, 5));
Cv2.MorphologyEx(binary, binary, MorphTypes.Close, kernel);
작은 텍스트를 뭉쳐서 창이 하나로 감지되도록 보정
✅ 3) 창 감지 필터링 조건 완화
csharp
코드 복사
if (rect.Width > 150 && rect.Height > 80 && rect.Y > 150 && 
    Math.Abs(rect.X + rect.Width / 2 - screenCenterX) < 300 && area > maxArea)
창이 너무 작으면 무시 (Width > 150, Height > 80)
Y 좌표가 150 이상 (rect.Y > 150)
창이 화면 중앙에서 300픽셀 이내에 있어야 감지
5. 실행 결과
WinForms 실행 후 "이진화 적용" 버튼 클릭
현재 화면을 캡처하여 Y ≥ 150 & 중앙에 있는 창을 감지
AdaptiveThreshold & Morphology 적용하여 창이 분리되지 않도록 보정
감지된 창에 빨간색 테두리를 그림
감지된 창이 있으면 닫기 버튼을 클릭