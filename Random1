# 쿼터니언을 Euler 각도로 변환하는 함수
def qua2euler(w, x, y, z):
    """
    쿼터니언(w, x, y, z)을 Euler 각도(x, y, z)로 변환.
    :param w: 쿼터니언의 w 값
    :param x: 쿼터니언의 x 값
    :param y: 쿼터니언의 y 값
    :param z: 쿼터니언의 z 값
    :return: (roll, pitch, yaw) - Euler 각도 (단위: 라디안)
    """
    import math

    # roll (x축 회전)
    sinr_cosp = 2 * (w * x + y * z)
    cosr_cosp = 1 - 2 * (x * x + y * y)
    roll = math.atan2(sinr_cosp, cosr_cosp)

    # pitch (y축 회전)
    sinp = 2 * (w * y - z * x)
    if abs(sinp) >= 1:
        pitch = math.copysign(math.pi / 2, sinp)  # 극단값 처리
    else:
        pitch = math.asin(sinp)

    # yaw (z축 회전)
    siny_cosp = 2 * (w * z + x * y)
    cosy_cosp = 1 - 2 * (y * y + z * z)
    yaw = math.atan2(siny_cosp, cosy_cosp)

    return roll, pitch, yaw

# 사용 예제
quaternion = [0.707, 0, 0.707, 0]  # w, x, y, z
roll, pitch, yaw = qua2euler(*quaternion)

print("Roll (x축):", roll)
print("Pitch (y축):", pitch)