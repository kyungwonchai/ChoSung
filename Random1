
수정된 코드와 함께 주석을 추가하여 설명을 상세히 작성했습니다. 버튼 데이터를 정확히 추적하기 위해 button_details를 적절히 처리하도록 변경했으며, 각 단계에 주석을 추가하여 이해를 돕습니다.

Python 코드 (수정 및 주석 추가)
python
코드 복사
import csv

def extract_ribbon_details(input_file, output_file):
    """
    리본 컨트롤의 BarButtonItem 정보를 추출하여 CSV 파일로 저장하는 함수.
    """
    # 결과 데이터를 저장할 리스트
    ribbon_data = []

    try:
        # 입력 파일 읽기
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        # 현재 페이지와 그룹 추적용 변수
        current_page = None
        current_group = None

        # 현재 버튼 정보 저장용 딕셔너리
        button_details = {}

        for i, line in enumerate(lines):
            stripped_line = line.strip()  # 각 줄에서 공백 제거

            # 리본 페이지 탐지
            if 'RibbonPage' in stripped_line and 'Text =' in stripped_line:
                # 페이지 이름 추출
                current_page = stripped_line.split('Text =')[1].strip().strip('"')

            # 리본 그룹 탐지
            elif 'RibbonPageGroup' in stripped_line and 'Text =' in stripped_line:
                # 그룹 이름 추출
                current_group = stripped_line.split('Text =')[1].strip().strip('"')

            # BarButtonItem 탐지 (새 버튼 시작)
            elif 'BarButtonItem' in stripped_line:
                # 이전 버튼 정보 저장 (기존 버튼이 있으면 저장)
                if button_details:
                    ribbon_data.append([
                        current_page,  # 페이지 이름
                        current_group,  # 그룹 이름
                        button_details.get("button_name", "Unknown"),  # 버튼 이름
                        button_details.get("tag_name", ""),  # 태그 이름
                        button_details.get("icon_path", ""),  # 아이콘 경로
                        button_details.get("tooltip", ""),  # 툴팁
                        button_details.get("action_function", ""),  # 액션 함수
                        button_details.get("style", "")  # 스타일
                    ])

                # 새로운 버튼 초기화
                button_details = {
                    "button_name": None,
                    "tag_name": None,
                    "icon_path": None,
                    "tooltip": None,
                    "action_function": None,
                    "style": None
                }

                # 버튼 이름 추출
                if 'Name =' in stripped_line:
                    button_details["button_name"] = stripped_line.split('Name =')[1].strip().strip('"')

            # 버튼 관련 속성 추적
            if button_details:
                if 'Tag =' in stripped_line:
                    # Tag 속성 추출
                    button_details["tag_name"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'ImageOptions.Image =' in stripped_line:
                    # 아이콘 경로 추출
                    button_details["icon_path"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'Hint =' in stripped_line:
                    # 툴팁 추출
                    button_details["tooltip"] = stripped_line.split('=')[1].strip().strip('"')
                elif 'ItemClick += ' in stripped_line:
                    # 액션 함수 추출
                    button_details["action_function"] = stripped_line.split('+=')[1].strip().strip(';').strip()
                elif 'Style =' in stripped_line:
                    # 스타일 정보 추출
                    button_details["style"] = stripped_line.split('=')[1].strip().strip(';').strip()

        # 마지막 버튼 정보 저장 (파일의 끝에 도달한 경우)
        if button_details:
            ribbon_data.append([
                current_page,  # 페이지 이름
                current_group,  # 그룹 이름
                button_details.get("button_name", "Unknown"),  # 버튼 이름
                button_details.get("tag_name", ""),  # 태그 이름
                button_details.get("icon_path", ""),  # 아이콘 경로
                button_details.get("tooltip", ""),  # 툴팁
                button_details.get("action_function", ""),  # 액션 함수
                button_details.get("style", "")  # 스타일
            ])

        # CSV 파일로 저장
        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
            csvwriter = csv.writer(csvfile)
            # CSV 헤더 작성
            csvwriter.writerow([
                'Page Name', 'Group Name', 'Button Name',
                'Tag Name', 'Icon Path', 'Tooltip',
                'Action Function', 'Ribbon Item Style'
            ])
            # 데이터 작성
            csvwriter.writerows(ribbon_data)

        print(f"리본 데이터를 {output_file} 파일에 성공적으로 저장했습니다.")

    except Exception as e:
        # 오류 발생 시 출력
        print(f"오류 발생: {e}")

# 실행
input_path = r"C:\agent\txt1.txt"  # 디자이너 파일 경로
output_path = r"C:\agent\ribbon_data.csv"  # 출력 CSV 경로
extract_ribbon_details(input_path, output_path)
주요 변경 및 주석 추가 내용
button_details 초기화:

각 BarButtonItem을 탐지할 때 button_details를 딕셔너리로 초기화하여 이전 버튼의 데이터를 덮어쓰지 않도록 수정했습니다.
버튼 속성 추적:

button_details에서 필요한 속성(button_name, tag_name, icon_path, tooltip, action_function, style)을 하나씩 추적하며 데이터 저장.
이전 버튼 정보 저장:

새 버튼을 탐지할 때 기존 버튼 정보를 리스트(ribbon_data)에 추가하여 데이터 손실 방지.
마지막 버튼 정보 처리:

파일 끝에서 마지막으로 추적한 버튼 데이터를 리스트에 추가.
주석 추가:

코드의 모든 단계에 상세한 설명 주석 추가.
출력 예시 (ribbon_data.csv)
csv
코드 복사
Page Name,Group Name,Button Name,Tag Name,Icon Path,Tooltip,Action Function,Ribbon Item Style
"File","Manage","OpenFile","file_open","C:\icons\open.png","Open a file","OpenFile_Click","Large"
"File","Manage","SaveFile","file_save","C:\icons\save.png","Save current file","SaveFile_Click","Small"
"Edit","Clipboard","Copy","edit_copy","C:\icons\copy.png","Copy selected","Copy_Click","Small"
사용 방법
입력 파일 준비:

디자이너 파일 내용을 C:\agent\txt1.txt로 저장.
코드 실행:

Python 스크립트를 실행하면 ribbon_data.csv에 리본 데이터가 저장됩니다.
결과 확인:

버튼별 페이지, 그룹, 태그, 아이콘 경로, 툴팁, 액션 함수, 스타일 등이 출력됩니다.
기대 결과