기존 스크립트를 수정하여 MSSQL 테이블을 조회하고, 특정 값이 있는지 확인한 후 와치독을 작동시키는 코드를 만들어 드리겠습니다.

이번 스크립트의 핵심은 다음과 같습니다.

특정 테이블에 접속하여 **1**이 존재하는지 확인합니다.

1이 존재하지 않을 경우에만 스크립트가 실패(exit 1)하여 와치독이 재부팅을 유발하도록 만듭니다.

1. 수정된 mssql-check.sh 스크립트 코드 💻
이전에 사용했던 /etc/watchdog.d/mssql-check.sh 스크립트 파일을 다음 코드로 교체해주세요. DB_SERVER, DB_TABLE, DB_COLUMN 등의 변수를 사용자 환경에 맞게 수정해야 합니다.

Bash

#!/bin/bash

# --- MSSQL 접속 및 테이블 정보 설정 ---
DB_SERVER="your_db_server_ip"
DB_USER="your_db_user"
DB_PASSWORD="your_db_password"
DB_NAME="your_db_name"

# --- 확인하려는 테이블 및 컬럼 정보 ---
DB_TABLE="your_table"
DB_COLUMN="your_column"

# --- 타임아웃 설정 (MSSQL 응답을 기다리는 시간) ---
TIMEOUT_SECONDS=60

# --- 쿼리 실행 및 결과 확인 ---
# 'sqlcmd'를 사용하여 DB에 접속한 뒤, 'DB_TABLE'의 'DB_COLUMN'에 '1'이 있는지 확인합니다.
# 결과가 있으면 1, 없으면 0을 반환합니다.
# -h -1: 헤더를 표시하지 않습니다.
# -W: 열의 공백을 제거합니다.
result=$(timeout "$TIMEOUT_SECONDS" sqlcmd -S "$DB_SERVER" -U "$DB_USER" -P "$DB_PASSWORD" -d "$DB_NAME" -Q "SELECT COUNT(*) FROM $DB_TABLE WHERE $DB_COLUMN = 1" -h -1 -W 2>/dev/null)

# --- 스크립트 결과 판별 ---
# 쿼리 결과(result)의 공백을 제거한 후, 값이 '0'인지 확인합니다.
if [ -z "$result" ] || [ "$result" -eq 0 ]; then
  # 쿼리 결과가 비어있거나 '0'이면, 테이블에 '1'이 없다는 의미입니다.
  echo "Value '1' not found in $DB_TABLE.$DB_COLUMN or connection failed!"
  exit 1 # 와치독에 실패를 알립니다.
else
  # 쿼리 결과가 '0'이 아니면, '1'이 존재한다는 의미입니다.
  echo "Value '1' found in $DB_TABLE.$DB_COLUMN. Connection is OK."
  exit 0 # 와치독에 성공을 알립니다.
fi
스크립트 설명:

DB_TABLE과 DB_COLUMN 변수를 추가하여 조회할 테이블과 컬럼을 명확하게 지정했습니다.

SELECT COUNT(*) ... 쿼리를 사용해 DB_COLUMN에 1이 있는 행의 개수를 반환받습니다.

result=$(...)를 통해 쿼리 결과를 result 변수에 저장합니다.

if [ "$result" -eq 0 ] 구문으로 result가 0인지 확인합니다. 0이면 1이 존재하지 않는 것이므로 exit 1로 실패를 반환합니다.

2. 최종 설정 및 실행
스크립트 권한 설정:

Bash

sudo chmod +x /etc/watchdog.d/mssql-check.sh
와치독 설정 파일 확인:
/etc/watchdog.conf 파일의 test-binary가 /etc/watchdog.d/mssql-check.sh로 올바르게 설정되어 있는지 확인하세요.

와치독 서비스 재시작:

Bash
