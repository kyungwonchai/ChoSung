네, 알겠습니다. 변경된 요구사항을 모두 반영하여, 실행하면 즉시 전체 React/Node.js 프로젝트 폴더와 파일을 생성해주는 Python 스크립트를 작성해 드리겠습니다.

이 스크립트 하나만 실행하면, 말씀하신 모든 로직이 포함된 pdf_viewer_project 폴더가 생성됩니다.

## 주요 변경 사항
파일 그룹핑: PDF 파일명을 마지막 _ 기준으로 분리하여 그룹(예: "1라인")을 만듭니다.

2단 콤보박스: 첫 번째 콤보박스에서 그룹을 선택하면, 두 번째 콤보박스에 해당 그룹의 파일들이 **최종 수정 날짜 내림차순(최신순)**으로 정렬되어 나타납니다.

Python 생성기: 아래 파이썬 코드를 실행하면 이 모든 구조와 코드가 한번에 생성됩니다.

## 프로젝트 생성 파이썬 스크립트
아래 코드를 generate_project.py와 같이 파이썬 파일로 저장한 후, 터미널에서 python generate_project.py 명령으로 실행하세요.

generate_project.py

Python

import os
import textwrap

# --- 프로젝트 기본 설정 ---
PROJECT_DIR = "pdf_viewer_project"

# --- 백엔드: server.js 코드 ---
SERVER_CODE = textwrap.dedent("""\
    const express = require('express');
    const fs = require('fs');
    const path = require('path');
    const cors = require('cors');

    const app = express();
    const PORT = 3001;

    // 중요: 실제 공유 폴더가 마운트된 우분투 경로로 수정하세요.
    const SHARED_DRIVE_PATH = '/mnt/shared_docs';

    app.use(cors());
    app.use(express.static(path.join(__dirname, 'client/build')));

    // API 1: 스캔할 최상위 폴더 목록 반환
    app.get('/api/scan-targets', (req, res) => {
        try {
            const allEntries = fs.readdirSync(SHARED_DRIVE_PATH, { withFileTypes: true });
            const directories = allEntries.filter(d => d.isDirectory()).map(d => d.name);
            res.json(directories);
        } catch (error) {
            console.error(`[ERROR] Reading scan targets from ${SHARED_DRIVE_PATH}:`, error);
            res.status(500).json({ message: '최상위 폴더 목록을 읽는 중 오류 발생', error: error.message });
        }
    });

    // API 2: 특정 폴더 내 PDF 파일들을 그룹화하여 그룹명 목록 반환
    app.get('/api/groups/:folderName', (req, res) => {
        const { folderName } = req.params;
        const targetFolderPath = path.join(SHARED_DRIVE_PATH, folderName);

        try {
            const allFiles = fs.readdirSync(targetFolderPath);
            const pdfFiles = allFiles.filter(file => path.extname(file).toLowerCase() === '.pdf');
            
            const groups = new Set();
            pdfFiles.forEach(file => {
                const basename = path.basename(file, '.pdf');
                const parts = basename.split('_');
                if (parts.length > 1) {
                    groups.add(parts.pop()); // 마지막 부분을 그룹으로 추가
                }
            });

            res.json(Array.from(groups).sort()); // 그룹 목록을 가나다순으로 정렬하여 반환
        } catch (error) {
            console.error(`[ERROR] Grouping PDFs in ${targetFolderPath}:`, error);
            res.status(500).json({ message: 'PDF 그룹 생성 중 오류 발생', error: error.message });
        }
    });

    // API 3: 특정 그룹에 속한 파일 목록을 '수정일 내림차순'으로 반환
    app.get('/api/files/:folderName/:groupName', (req, res) => {
        const { folderName, groupName } = req.params;
        const targetFolderPath = path.join(SHARED_DRIVE_PATH, folderName);
        
        try {
            const allFiles = fs.readdirSync(targetFolderPath);
            const matchingFiles = allFiles.filter(file => 
                file.toLowerCase().endsWith(`_${groupName}.pdf`.toLowerCase())
            );

            const filesWithStats = matchingFiles.map(file => {
                const filePath = path.join(targetFolderPath, file);
                const stats = fs.statSync(filePath);
                return {
                    name: file,
                    mtime: stats.mtime.getTime(),
                };
            });

            // mtime(수정시간)을 기준으로 내림차순 정렬 (최신 파일이 위로)
            filesWithStats.sort((a, b) => b.mtime - a.mtime);

            res.json(filesWithStats.map(file => file.name));
        } catch (error) {
            console.error(`[ERROR] Fetching files for group ${groupName} in ${targetFolderPath}:`, error);
            res.status(500).json({ message: '파일 목록 조회 중 오류 발생', error: error.message });
        }
    });
    
    // API 4: 실제 PDF 파일 전송
    app.get('/api/pdf/:folderName/:pdfName', (req, res) => {
        const { folderName, pdfName } = req.params;
        const pdfFilePath = path.join(SHARED_DRIVE_PATH, folderName, pdfName);
        if (fs.existsSync(pdfFilePath)) {
            res.setHeader('Content-Type', 'application/pdf');
            res.sendFile(pdfFilePath);
        } else {
            res.status(404).send('File not found');
        }
    });

    app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'client/build', 'index.html'));
    });

    app.listen(PORT, () => {
        console.log(`✅ PDF Viewer Server started on http://localhost:${PORT}`);
    });
""")

# --- 프론트엔드: App.js 코드 ---
APP_JS_CODE = textwrap.dedent("""\
    import React, { useState, useEffect } from 'react';
    import axios from 'axios';
    import { Document, Page, pdfjs } from 'react-pdf';
    import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
    import 'react-pdf/dist/esm/Page/TextLayer.css';
    import './App.css';

    pdfjs.GlobalWorkerOptions.workerSrc = `/pdf.worker.min.js`;

    function App() {
      // --- 상태 관리 ---
      const [scanTargets, setScanTargets] = useState([]);
      const [selectedTarget, setSelectedTarget] = useState('');
      
      const [groups, setGroups] = useState([]);
      const [selectedGroup, setSelectedGroup] = useState('');

      const [pdfFiles, setPdfFiles] = useState([]);
      const [selectedPdf, setSelectedPdf] = useState('');
      
      const [pdfUrl, setPdfUrl] = useState(null);
      const [numPages, setNumPages] = useState(null);
      const [pageNumber, setPageNumber] = useState(1);
      const [scale, setScale] = useState(1.5);

      // --- 데이터 로딩 useEffect 훅 ---

      // 1. 최초 로딩 시 스캔 대상 폴더 목록 가져오기
      useEffect(() => {
        axios.get('/api/scan-targets')
          .then(res => setScanTargets(res.data))
          .catch(err => console.error("스캔 대상 폴더 로딩 실패", err));
      }, []);

      // 2. 스캔 대상 폴더 선택 시 그룹 목록 가져오기
      useEffect(() => {
        if (selectedTarget) {
          axios.get(`/api/groups/${selectedTarget}`)
            .then(res => setGroups(res.data))
            .catch(err => console.error("그룹 목록 로딩 실패", err));
        }
        // 하위 선택 초기화
        setGroups([]);
        setSelectedGroup('');
        setPdfFiles([]);
        setSelectedPdf('');
        setPdfUrl(null);
      }, [selectedTarget]);

      // 3. 그룹 선택 시 파일 목록 가져오기
      useEffect(() => {
        if (selectedTarget && selectedGroup) {
          axios.get(`/api/files/${selectedTarget}/${selectedGroup}`)
            .then(res => setPdfFiles(res.data))
            .catch(err => console.error("파일 목록 로딩 실패", err));
        }
        // 하위 선택 초기화
        setPdfFiles([]);
        setSelectedPdf('');
        setPdfUrl(null);
      }, [selectedGroup]);

      // 4. PDF 파일 선택 시 뷰어 URL 설정
      useEffect(() => {
        if (selectedTarget && selectedPdf) {
          setPdfUrl(`/api/pdf/${selectedTarget}/${selectedPdf}`);
          setPageNumber(1); // 새 PDF 로드 시 첫 페이지로
        }
      }, [selectedPdf]);

      // --- 렌더링 ---
      return (
        <div className="App">
          <h1>PDF 문서 뷰어 🗂️</h1>
          <div className="controls-container">
            <div className="combo-wrapper">
              <select className="combo-box" value={selectedTarget} onChange={e => setSelectedTarget(e.target.value)}>
                <option value="">-- 1. 스캔 폴더 선택 --</option>
                {scanTargets.map(target => <option key={target} value={target}>{target}</option>)}
              </select>
            </div>
            
            {selectedTarget && (
              <div className="combo-wrapper">
                <select className="combo-box" value={selectedGroup} onChange={e => setSelectedGroup(e.target.value)}>
                  <option value="">-- 2. 라인(그룹) 선택 --</option>
                  {groups.map(group => <option key={group} value={group}>{group}</option>)}
                </select>
              </div>
            )}
            
            {selectedGroup && (
               <div className="combo-wrapper">
                <select className="combo-box" value={selectedPdf} onChange={e => setSelectedPdf(e.target.value)}>
                  <option value="">-- 3. PDF 파일 선택 (최신순) --</option>
                  {pdfFiles.map(file => <option key={file} value={file}>{file}</option>)}
                </select>
              </div>
            )}
          </div>

          {pdfUrl && (
            <div className="pdf-viewer-container">
              <div className="pdf-controls">
                <button onClick={() => setScale(s => s - 0.1)} disabled={scale <= 0.5}>축소</button>
                <span>{Math.round(scale * 100)}%</span>
                <button onClick={() => setScale(s => s + 0.1)} disabled={scale >= 3}>확대</button>
                <span> | </span>
                <button onClick={() => setPageNumber(p => p - 1)} disabled={pageNumber <= 1}>이전</button>
                <span>{pageNumber} / {numPages}</span>
                <button onClick={() => setPageNumber(p => p + 1)} disabled={pageNumber >= numPages}>다음</button>
              </div>
              <Document file={pdfUrl} onLoadSuccess={({ numPages }) => setNumPages(numPages)} onLoadError={console.error}>
                <Page pageNumber={pageNumber} scale={scale} />
              </Document>
            </div>
          )}
        </div>
      );
    }
    export default App;
""")

# --- 프론트엔드: App.css 코드 ---
APP_CSS_CODE = textwrap.dedent("""\
    body {
      background-color: #f0f2f5;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
    }
    .App {
      max-width: 1200px;
      margin: 20px auto;
      padding: 20px;
      background-color: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    h1 {
      text-align: center;
      color: #333;
    }
    .controls-container {
      display: flex;
      flex-direction: column;
      gap: 15px;
      padding: 20px;
      background-color: #fafafa;
      border: 1px solid #e8e8e8;
      border-radius: 8px;
      margin-bottom: 20px;
    }
    .combo-wrapper {
      width: 100%;
    }
    .combo-box {
      width: 100%;
      padding: 12px;
      font-size: 16px;
      border: 1px solid #ccc;
      border-radius: 6px;
      background-color: white;
      cursor: pointer;
    }
    .combo-box:focus {
      outline: none;
      border-color: #007bff;
      box-shadow: 0 0 0 2px rgba(0,123,255,.25);
    }
    .pdf-viewer-container {
      margin-top: 20px;
      border: 1px solid #ddd;
      height: 80vh;
      display: flex;
      flex-direction: column;
      background-color: #525659;
    }
    .pdf-controls {
      padding: 8px;
      background-color: #333;
      color: white;
      text-align: center;
    }
    .pdf-controls button {
      margin: 0 8px;
      padding: 5px 12px;
      border: 1px solid #555;
      border-radius: 4px;
      background-color: #444;
      color: white;
      cursor: pointer;
    }
    .pdf-controls button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .pdf-controls span {
      margin: 0 10px;
    }
    .react-pdf__Page__canvas {
        margin: 0 auto; /* PDF 페이지 가운데 정렬 */
    }
""")

# --- 패키지 파일: package.json (백엔드) ---
BACKEND_PACKAGE_JSON = textwrap.dedent("""\
    {
      "name": "pdf-viewer-backend",
      "version": "1.0.0",
      "description": "Backend for PDF viewer",
      "main": "server.js",
      "scripts": {
        "start": "node server.js"
      },
      "dependencies": {
        "cors": "^2.8.5",
        "express": "^4.19.2"
      }
    }
""")

# --- 패키지 파일: package.json (프론트엔드) ---
FRONTEND_PACKAGE_JSON = textwrap.dedent("""\
    {
      "name": "client",
      "version": "0.1.0",
      "private": true,
      "dependencies": {
        "@testing-library/jest-dom": "^5.17.0",
        "@testing-library/react": "^13.4.0",
        "@testing-library/user-event": "^13.5.0",
        "axios": "^1.7.2",
        "react": "^18.3.1",
        "react-dom": "^18.3.1",
        "react-pdf": "^9.1.0",
        "react-scripts": "5.0.1",
        "web-vitals": "^2.1.4"
      },
      "scripts": {
        "start": "react-scripts start",
        "build": "react-scripts build",
        "test": "react-scripts test",
        "eject": "react-scripts eject"
      },
      "eslintConfig": { "extends": ["react-app", "react-app/jest"] },
      "browserslist": {
        "production": [">0.2%", "not dead", "not op_mini all"],
        "development": ["last 1 chrome version", "last 1 firefox version", "last 1 safari version"]
      },
      "proxy": "http://localhost:3001"
    }
""")

# --- 프로젝트 생성 함수 ---
def create_project():
    print(f"'{PROJECT_DIR}' 프로젝트 생성을 시작합니다...")

    # 기본 디렉토리 생성
    os.makedirs(os.path.join(PROJECT_DIR, "client", "public"), exist_ok=True)
    os.makedirs(os.path.join(PROJECT_DIR, "client", "src"), exist_ok=True)

    # 파일 생성 함수
    def write_file(path, content):
        with open(os.path.join(PROJECT_DIR, path), "w", encoding="utf-8") as f:
            f.write(content)
        print(f"  - 생성 완료: {path}")

    # 파일 쓰기
    write_file("server.js", SERVER_CODE)
    write_file("package.json", BACKEND_PACKAGE_JSON)
    write_file("client/package.json", FRONTEND_PACKAGE_JSON)
    write_file("client/src/App.js", APP_JS_CODE)
    write_file("client/src/App.css", APP_CSS_CODE)

    # 빈 파일들 생성
    write_file("client/public/index.html", textwrap.dedent("""\
        <!DOCTYPE html>
        <html lang="ko">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>PDF Viewer</title>
          </head>
          <body>
            <noscript>You need to enable JavaScript to run this app.</noscript>
            <div id="root"></div>
          </body>
        </html>
    """))
    write_file("client/src/index.js", textwrap.dedent("""\
        import React from 'react';
        import ReactDOM from 'client';
        import App from './App';
        const root = ReactDOM.createRoot(document.getElementById('root'));
        root.render(<React.StrictMode><App /></React.StrictMode>);
    """))
    
    print(f"\n✅ '{PROJECT_DIR}' 프로젝트 생성이 완료되었습니다!")

# --- 스크립트 실행 ---
if __name__ == "__main__":
    create_project()

## 사용 방법
파이썬 스크립트 실행

위 코드를 generate_project.py로 저장하세요.

터미널에서 python generate_project.py를 실행합니다.

현재 위치에 pdf_viewer_project 라는 폴더가 생성되고 그 안에 모든 파일이 자동으로 만들어집니다.

server.js 경로 수정

생성된 pdf_viewer_project/server.js 파일을 엽니다.

const SHARED_DRIVE_PATH = '/mnt/shared_docs'; 부분을 실제 우분투에 마운트된 공유 폴더 경로로 수정합니다.

의존성 라이브러리 설치

터미널을 열고 생성된 프로젝트 폴더로 이동합니다.

백엔드 라이브러리를 설치합니다.

Bash

cd pdf_viewer_project
npm install
프론트엔드 라이브러리를 설치합니다.

Bash

cd client
npm install
오프라인용 pdf.worker.js 복사

가장 중요합니다. client 폴더 안에서 아래 명령어를 실행하여 react-pdf의 워커 파일을 public 폴더로 복사해야 합니다.

Bash

# 현재 위치: pdf_viewer_project/client
cp node_modules/pdfjs-dist/build/pdf.worker.min.js public/
프론트엔드 빌드

client 폴더 안에서 React 앱을 빌드합니다.

Bash

# 현재 위치: pdf_viewer_project/client
npm run build
서버 실행

프로젝트 최상위 폴더로 이동하여 서버를 실행합니다.

Bash

# 현재 위치: pdf_viewer_project/client
cd ..  # 상위 폴더(pdf_viewer_project)로 이동

# 현재 위치: pdf_viewer_project
node server.js
접속

서버가 실행되면, 내부망의 어떤 PC에서든 웹 브라우저를 열고 http://<우분투서버IP>:3001 로 접속하여 사용하시면 됩니다.

