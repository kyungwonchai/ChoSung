USER_INFO 테이블에서 PROCESS가 "REPAIR"가 포함된 데이터를 가져와서 별도의 DB 테이블 테이블B에 반영하는 예제 코드입니다. 이 코드는 데이터 변경을 추적하여 달라진 점만 반영합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string targetConnectionString = "Data Source=TargetServer;Initial Catalog=TargetDB;User ID=YourUsername;Password=YourPassword";

    public Form1()
    {
        InitializeComponent();
    }

    private void SyncData()
    {
        DataTable sourceData = GetSourceData();
        DataTable targetData = GetTargetData();

        foreach (DataRow sourceRow in sourceData.Rows)
        {
            DataRow[] targetRows = targetData.Select($"E_NUM = '{sourceRow["E_NUM"]}'");

            if (targetRows.Length == 0)
            {
                InsertRow(sourceRow);
            }
            else
            {
                UpdateRow(sourceRow, targetRows[0]);
            }
        }
    }

    private DataTable GetSourceData()
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            conn.Open();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM ESD_USER_INFO WHERE PROCESS LIKE '%REPAIR%'";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private DataTable GetTargetData()
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            conn.Open();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM 테이블B";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private void InsertRow(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            conn.Open();
            string query = "INSERT INTO 테이블B (PROCESS, GROUP_NAME, USER_NAME, E_NUM) VALUES (@PROCESS, @GROUP_NAME, @USER_NAME, @E_NUM)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
            cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
            cmd.ExecuteNonQuery();
        }
    }

    private void UpdateRow(DataRow sourceRow, DataRow targetRow)
    {
        bool isDifferent = !sourceRow["PROCESS"].Equals(targetRow["PROCESS"]) ||
                           !sourceRow["GROUP_NAME"].Equals(targetRow["GROUP_NAME"]) ||
                           !sourceRow["USER_NAME"].Equals(targetRow["USER_NAME"]);

        if (isDifferent)
        {
            using (SqlConnection conn = new SqlConnection(targetConnectionString))
            {
                conn.Open();
                string query = "UPDATE 테이블B SET PROCESS = @PROCESS, GROUP_NAME = @GROUP_NAME, USER_NAME = @USER_NAME WHERE E_NUM = @E_NUM";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
                cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
                cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
                cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
                cmd.ExecuteNonQuery();
            }
        }
    }

    private void btnSync_Click(object sender, EventArgs e)
    {
        SyncData();
        MessageBox.Show("Data synchronization completed.");
    }
}
이 코드는 WinForm에 btnSync라는 버튼을 추가하여 클릭 시 SyncData 메서드를 호출하도록 구현되었습니다. SyncData 메서드는 데이터 변경을 추적하고, 소스 데이터와 타겟 데이터를 비교하여 달라진 점만 반영합니다.

참고: 실제 환경에서는 