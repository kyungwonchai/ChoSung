Streamlit 자체 제한으로 테이블이 세로로 최대 확장되지 않음
Streamlit의 기본 설정에서는 st.dataframe()이 테이블을 표시할 때 스크롤이 필요한 경우가 많습니다.
하지만, 페이지 전체를 꽉 채우고 모든 데이터를 표시하려면 특별한 설정이 필요합니다.

해결 방법
st.dataframe() 대신 st.write()로 HTML 스타일을 직접 적용하여 표시하기.

CSS 스타일을 사용하여 화면을 꽉 채우도록 수정하기.

Streamlit 기본 레이아웃의 제한을 제거하기.

✅ 코드: 테이블을 화면 전체로 확장하기 (스크롤 없이 모든 데이터 표시)
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 및 스타일 적용 함수
def create_dataframe(rows):
    original_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "ACT2_1", "ACT2_2", "ACT2_3", "ACT2_4",
        "ACT2_5", "ACT2_6", "ACT2_7", "ACT2_8"
    ]

    new_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    df = pd.DataFrame(rows, columns=original_columns)
    df.columns = new_columns

    mc_columns = [f"MC{i}" for i in range(1, 9)]
    df[mc_columns] = df[mc_columns].astype(float).round(2)

    return df

# Streamlit 앱 구성
def main():
    st.set_page_config(page_title="MC1 ~ MC8 Data Table", layout="wide")
    st.title("MC1 ~ MC8 Data Table - Fullscreen Mode")

    st.markdown("""
        <style>
            /* 페이지 전체 너비 사용 */
            .css-1oe6wy4 {
                max-width: 100%;
            }
            /* 탭 전체화면 설정 */
            .stTabs {
                height: 100vh;
                overflow: hidden;
            }
            /* 데이터프레임 전체 화면 설정 */
            .block-container {
                padding: 0;
                margin: 0;
                height: 100vh;
                width: 100%;
            }
            .dataframe-container {
                height: 90vh;
                overflow-y: auto;
            }
        </style>
    """, unsafe_allow_html=True)

    rows = fetch_main_data()
    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        df = create_dataframe(rows)

        tabs = st.tabs(["메인 테이블", "탭2", "탭3"])

        with tabs[0]:
            st.subheader("메인 테이블 - 전체 화면 표시")
            html_table = df.to_html(classes='table table-striped', index=False)
            st.markdown(f'<div class="dataframe-container">{html_table}</div>', unsafe_allow_html=True)

        with tabs[1]:
            st.subheader("탭 2 내용")
            st.write("여기는 탭 2 입니다.")

        with tabs[2]:
            st.subheader("탭 3 내용")
            st.write("여기는 탭 3 입니다.")

if __name__ == "__main__":
    main()
✅ 코드 설명
CSS 스타일을 이용하여 전체 화면 사용

css
코드 복사
.block-container {
    padding: 0;
    margin: 0;
    height: 100vh;
    width: 100%;
}
.dataframe-container {
    height: 90vh;
    overflow-y: auto;
}
.block-container: 전체 화면을 차지하도록 설정.

.dataframe-container: 세로 스크롤 없이 모든 데이터를 표시 가능하게 설정.

HTML 테이블로 표시 (pd.DataFrame.to_html())

python
코드 복사
html_table = df.to_html(classes='table table-striped', index=False)
st.markdown(f'<div class="dataframe-container">{html_table}</div>', unsafe_allow_html=True)
pd.DataFrame.to_html()로 HTML 테이블 생성.

Streamlit의 기본 출력 방식이 아닌 HTML로 직접 출력하여 제한 없이 표시.

탭을 최대 크기로 설정

css
코드 복사
.stTabs {
    height: 100vh;
    overflow: hidden;
}
탭의 높이를 최대 화면 크기로 설정하여 잘리지 않게 함.

📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
🔥 결과
모든 데이터가 한 번에 표시됨.

스크롤 없이 전체 화면을 사용하여 데이터가 잘리지 않음.

탭을 클릭해도 화면 크기가 유지됨.