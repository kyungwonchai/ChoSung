알겠습니다. 쿼리에서 파라미터를 단순화하고, pymssql을 사용하여 정상적으로 데이터를 조회할 수 있도록 수정해드리겠습니다. pymssql에서 SQL 쿼리를 실행할 때, 직접적으로 쿼리 문자열에 파라미터를 포함하는 방식으로 할 수 있습니다.

수정 사항:
단순 쿼리로 파라미터를 처리하고,
쿼리 실행 시 문자열 포맷팅 방식으로 파라미터를 직접 포함합니다.
%s 방식 대신 **?**를 사용하지 않고, 직접 쿼리 문자열 내에서 파라미터를 바인딩합니다.
최종 수정된 코드:
python
Copy code
from flask import Flask, render_template, request
import pandas as pd
import pymssql
import logging

# 로그 설정
logging.basicConfig(level=logging.DEBUG)

app = Flask(__name__)

# 단순한 쿼리 (파라미터를 직접 쿼리 문자열에 포함)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = '{0}'"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = '{0}'"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = '{0}'"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # pymssql을 사용하여 데이터베이스 연결
        conn = pymssql.connect(connection_string)
        cursor = conn.cursor()

        # 파라미터를 쿼리 문자열에 직접 삽입
        formatted_query = query.format(qr_value)  # 파라미터를 쿼리 문자열에 포맷팅하여 삽입
        logging.debug(f"Executing query: {formatted_query}")  # 실행되는 쿼리 출력
        cursor.execute(formatted_query)  # 쿼리 실행

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        logging.debug(f"Query executed, fetched rows: {len(rows)}")  # 데이터가 몇 개 나왔는지 출력

        # 결과가 있으면 데이터를 pandas DataFrame으로 변환하여 반환
        if len(rows) > 0:
            df = pd.DataFrame(rows, columns=columns)
            return df
        else:
            logging.debug("No data found for the query.")
            return None
    except Exception as e:
        logging.error(f"Error executing query: {e}")
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    logging.debug("Starting to fetch data for functionA")
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
def get_data():
    """
    사용자가 입력한 QR 값을 받아 functionA를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값

    logging.debug(f"Received QR value: {qr_value}")
    logging.debug(f"Received connection string: {connection_string}")

    # 함수 A 실행: 여러 개의 쿼리를 동기적으로 실행
    data = functionA(connection_string, qr_value)
    
    # DataFrame을 HTML 테이블로 변환
    html_tables = []
    for df in data:
        if isinstance(df, pd.DataFrame):  # df가 DataFrame일 경우에만 to_html()을 호출
            html_tables.append(df.to_html(classes='data', header=True, index=False))
        else:
            html_tables.append("<p>No data found.</p>")

    # 결과를 HTML 테이블 형식으로 렌더링
    return render_template('table.html', tables=html_tables)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
수정된 주요 사항:
쿼리 문자열에서 파라미터 바인딩:
QUERY1, QUERY2, QUERY3의 파라미터를 쿼리 문자열 내에서 {0} 형식으로 바인딩했습니다.