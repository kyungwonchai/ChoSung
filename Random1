PF의 Image 컨트롤을 사용하여 OpenCvSharp에서 처리한 이미지를 표시하려면, OpenCvSharp의 Mat을 BitmapImage로 변환해야 합니다.

1. 핵심 개념
OpenCvSharp에서 Mat을 생성 (이진화 적용)
Mat → Bitmap 변환 (Mat.ToBitmap())
Bitmap → BitmapImage 변환 (MemoryStream 사용)
WPF Image 컨트롤의 Source에 적용
2. WPF 프로젝트 구조
MainWindow.xaml
Image 컨트롤 추가
Button 클릭 시 이미지 업데이트
MainWindow.xaml.cs
화면 캡처 및 이진화 적용
변환된 이미지(BitmapImage)를 Image.Source에 적용
3. WPF XAML (UI)
📌 Image 컨트롤과 Button을 추가하여 클릭하면 결과를 표시하도록 설정

xml
코드 복사
<Window x:Class="WpfOpenCv.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="OpenCV 이미지 처리" Height="600" Width="800">
    <Grid>
        <Button Content="이진화 적용" Width="150" Height="40"
                HorizontalAlignment="Left" VerticalAlignment="Top"
                Click="OnApplyThresholdClick"/>
        
        <Image Name="ResultImage" Width="600" Height="400"
               HorizontalAlignment="Center" VerticalAlignment="Center"/>
    </Grid>
</Window>
4. WPF C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Drawing;
using System.IO;
using System.Windows;
using System.Windows.Media.Imaging;
using OpenCvSharp;
using OpenCvSharp.Extensions;
using Point = System.Drawing.Point;

namespace WpfOpenCv
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        // 버튼 클릭 시 실행
        private void OnApplyThresholdClick(object sender, RoutedEventArgs e)
        {
            // 화면 캡처
            Bitmap screenshot = CaptureScreen();
            
            // OpenCV Mat 변환 및 이진화 적용
            Mat matImage = BitmapConverter.ToMat(screenshot);
            Mat gray = new Mat();
            Cv2.CvtColor(matImage, gray, ColorConversionCodes.BGR2GRAY);
            Mat binary = new Mat();
            Cv2.Threshold(gray, binary, 200, 255, ThresholdTypes.Binary);

            // WPF Image 컨트롤에 표시
            ResultImage.Source = ConvertMatToBitmapImage(binary);
        }

        // 화면 캡처 함수
        private Bitmap CaptureScreen()
        {
            Rectangle bounds = System.Windows.Forms.Screen.PrimaryScreen.Bounds;
            Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);
            using (Graphics g = Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);
            }
            return bitmap;
        }

        // Mat → BitmapImage 변환
        private BitmapImage ConvertMatToBitmapImage(Mat mat)
        {
            using (Bitmap bitmap = mat.ToBitmap())
            {
                MemoryStream memoryStream = new MemoryStream();
                bitmap.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Png);
                memoryStream.Position = 0;

                BitmapImage bitmapImage = new BitmapImage();
                bitmapImage.BeginInit();
                bitmapImage.StreamSource = memoryStream;
                bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                bitmapImage.EndInit();

                return bitmapImage;
            }
        }
    }
}
5. 코드 설명
버튼 클릭 시 OnApplyThresholdClick 실행
화면을 캡처하여 Bitmap 생성
Mat 변환 후 이진화 적용
csharp
코드 복사
Cv2.CvtColor(matImage, gray, ColorConversionCodes.BGR2GRAY);
Cv2.Threshold(gray, binary, 200, 255, ThresholdTypes.Binary);
이진화된 Mat을 BitmapImage로 변환 (ConvertMatToBitmapImage)
csharp
코드 복사
Bitmap bitmap = mat.ToBitmap();
MemoryStream memoryStream = new MemoryStream();
bitmap.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Png);
Image 컨트롤에 결과 표시
csharp
코드 복사
ResultImage.Source = ConvertMatToBitmapImage(binary);
6. 실행 결과
프로그램 실행 후 이진화 적용 버튼 클릭
현재 화면의 공지사항 창이 감지되고,