아래는 요청하신대로 체크박스를 통해 응답 대기 여부를 선택하고, 텍스트박스를 통해 읽으려는 값을 입력하며, 읽거나 쓴 값들이 리스트박스에 이력으로 남도록 전체 코드를 다시 구성한 예제입니다.

주요 변경 사항:
체크박스: 응답을 기다릴지 여부를 선택할 수 있습니다.
텍스트박스: 사용자가 읽으려는 값을 입력할 수 있습니다.
리스트박스: 각 동작(읽기, 쓰기, 단순 전달)이 이루어질 때마다 이력을 기록합니다.
전체 코드
1. MainWindow.xaml (UI 구성)
xml
코드 복사
<Window x:Class="PlcApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Mutocol 통신" Height="500" Width="700">
    <Grid>
        <StackPanel>
            <TextBlock Text="PLC 통신 테스트" FontSize="18" HorizontalAlignment="Center" Margin="10" />

            <!-- 응답 대기 체크박스 -->
            <CheckBox x:Name="ChkWaitForResponse" Content="응답 대기" Margin="10"/>

            <!-- 주소 입력 텍스트박스 -->
            <TextBlock Text="주소 입력:" Margin="5"/>
            <TextBox x:Name="TxtAddress" Width="200" Margin="5"/>

            <!-- 읽기 버튼 -->
            <Button Content="읽기" Click="BtnRead_Click" Width="200" Height="40" Margin="5"/>

            <!-- 덮어쓰기 버튼 -->
            <Button Content="덮어쓰기" Click="BtnOverwrite_Click" Width="200" Height="40" Margin="5"/>

            <!-- 단순 전달 버튼 -->
            <Button Content="단순 전달" Click="BtnSendSimple_Click" Width="200" Height="40" Margin="5"/>

            <!-- 결과 이력 리스트박스 -->
            <ListBox x:Name="LstHistory" Width="400" Height="200" Margin="10"/>

            <!-- 결과 출력 -->
            <TextBlock x:Name="OutputText" Text="결과 출력:" FontSize="14" Margin="10" TextWrapping="Wrap"/>
        </StackPanel>
    </Grid>
</Window>
2. MainWindow.xaml.cs (C# 코드 - MainWindow 클래스)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using System.Windows;

namespace PlcApp
{
    public partial class MainWindow : Window
    {
        private PlcMutocolCommunication _plc;

        public MainWindow()
        {
            InitializeComponent();
            _plc = new PlcMutocolCommunication("COM3", 9600); // 포트와 보드레이트 설정
        }

        // 읽기 버튼 클릭
        private async void BtnRead_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text; // 텍스트박스에서 주소 가져옴
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false; // 체크박스에서 응답 대기 여부

            await ExecutePlcFunctionAsync(() => _plc.ReadAsync(address, waitForResponse), "읽기");
        }

        // 덮어쓰기 버튼 클릭
        private async void BtnOverwrite_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text; // 텍스트박스에서 주소 가져옴
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false; // 체크박스에서 응답 대기 여부

            await ExecutePlcFunctionAsync(() => _plc.OverwriteAsync(address, "1234", waitForResponse), "덮어쓰기");
        }

        // 단순 전달 버튼 클릭
        private async void BtnSendSimple_Click(object sender, RoutedEventArgs e)
        {
            string address = TxtAddress.Text; // 텍스트박스에서 주소 가져옴
            bool waitForResponse = ChkWaitForResponse.IsChecked ?? false; // 체크박스에서 응답 대기 여부

            await ExecutePlcFunctionAsync(() => _plc.SendSimpleAsync(address, "5678", waitForResponse), "단순 전달");
        }

        // 공통적으로 사용할 비동기 함수 실행 로직
        private async Task ExecutePlcFunctionAsync(Func<Task<string>> plcFunc, string actionDescription)
        {
            try
            {
                _plc.OpenPort();
                string result = await plcFunc.Invoke();
                
                // 결과를 리스트박스에 추가
                LstHistory.Items.Add($"{actionDescription}: {result}");
                
                // 출력 텍스트 업데이트
                OutputText.Text = $"{actionDescription} 결과: {result}";
            }
            catch (Exception ex)
            {
                OutputText.Text = $"에러: {ex.Message}";
            }
            finally
            {
                _plc.ClosePort();
            }
        }
    }
}
3. PlcMutocolCommunication.cs (PLC 통신 클래스)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class PlcMutocolCommunication
{
    private SerialPort _serialPort;
    private const int _timeout = 30000; // 30초 타임아웃

    public PlcMutocolCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.DataBits = 8;
        _serialPort.Parity = Parity.None;
        _serialPort.StopBits = StopBits.One;
        _serialPort.ReadTimeout = _timeout;
        _serialPort.WriteTimeout = _timeout;
    }

    public void OpenPort()
    {
        if (!_serialPort.IsOpen)
        {
            _serialPort.Open();
        }
    }

    public void ClosePort()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    // 1. 읽기 함수 (응답 대기 여부 선택)
    public async Task<string> ReadAsync(string address, bool waitForResponse)
    {
        string command = $"@00RD{address}\r\n"; // 읽기 명령어
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "응답 없음 (대기 안 함)";
    }

    // 2. 덮어쓰기 함수 (응답 대기 여부 선택)
    public async Task<string> OverwriteAsync(string address, string value, bool waitForResponse)
    {
        string command = $"@00WD{address}{FormatValue(value)}\r\n"; // 쓰기 명령어
        await WriteCommandAsync(command);

        string response = await ReadResponseAsync();
        return waitForResponse ? response.Contains("OK") ? "덮어쓰기 성공" : "덮어쓰기 실패" : "응답 없음 (대기 안 함)";
    }

    // 3. 단순 전달 함수 (응답 대기 여부 선택)
    public async Task<string> SendSimpleAsync(string address, string value, bool waitForResponse)
    {
        string command = $"@00WD{address}{FormatValue(value)}\r\n"; // 쓰기 명령어
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "단순 전달 완료 (응답 없음)";
    }

    // 명령어 전송
    private async Task WriteCommandAsync(string command)
    {
        byte[] commandBytes = Encoding.ASCII.GetBytes(command);
        await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
    }

    // 응답 읽기
    private async Task<string> ReadResponseAsync()
    {
        byte[] buffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length);
        return Encoding.ASCII.GetString(buffer, 0, bytesRead);
    }

    // 값 변환 함수 (숫자와 문자열 구분)
    private string FormatValue(string value)
    {
        // 값이 숫자인지 문자열인지 확인 후 Mutocol 형식에 맞게 변환
        if (int.TryParse(value, out int numericValue))
        {
            return numericValue.ToString("D4"); // 숫자인 경우 4자리로 변환
        }
        else
        {
            return value; // 문자열 그대로 전달
        }
    }
}
주요 구현 내용:
응답 대기 체크박스 (ChkWaitForResponse): 사용자가 응답을 기다릴지 선택할 수 있습니다. 이 값은 IsChecked로 확인하며, 기본값은 false입니다.
주소 입력 텍스트박스 (TxtAddress): 사용자가 읽거나 쓸 PLC 주소를 입력할 수 있습니다.
리스트박스 (LstHistory): 각 동작(읽기, 쓰기, 단순 전달)이 이루어질 때마다 해당 이력을 리스트박스에 남깁니다.
기능별 함수는 각 기능(읽기, 덮어쓰기, 단순 전달)을 응답 대기 여부에 따라 조건부로 처리하도록 만들었습니다