습니다. 갤럭시 탭 S8 울트라에서 다음 주요 보안 기능을 제공하는 Kotlin 기반 Android 애플리케이션을 다시 구현하겠습니다.

주요 기능:

기기 움직임 감지: 기기 움직임을 감지하여 DB에 전송하고 경고 화면을 띄웁니다.
충전기 해제 감지: 충전기가 해제될 때 DB로 상태를 전송합니다.
경고 화면 표시: 움직임이 감지되었을 때 기기 화면에 경고 메시지를 띄웁니다.
이 프로젝트는 움직임 감지 및 충전기 해제 상태를 실시간으로 감지하고, 이를 서버에 전송하는 기능에 초점을 맞추고 있습니다.

1. 프로젝트 준비 및 권한 설정
기기의 움직임 및 충전 상태를 모니터링하기 위해 다음과 같은 권한들이 필요합니다.

AndroidManifest.xml
카메라 권한은 필요 없으며, 움직임 감지를 위해 WAKE_LOCK 권한과 FOREGROUND_SERVICE 권한이 필요합니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.motionlistener">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.WAKE_LOCK" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.VIBRATE" />

    <application
        android:allowBackup="true"
        android:label="@string/app_name"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar">

        <!-- 충전기 상태 감지 브로드캐스트 리시버 -->
        <receiver android:name=".ChargerReceiver">
            <intent-filter>
                <action android:name="android.intent.action.ACTION_POWER_CONNECTED" />
                <action android:name="android.intent.action.ACTION_POWER_DISCONNECTED" />
            </intent-filter>
        </receiver>

        <!-- 움직임 감지를 위한 서비스 등록 -->
        <service android:name=".MotionDetectionService" android:exported="false"/>

    </application>
</manifest>
2. ChargerReceiver 클래스 (충전기 상태 감지)
충전기 연결 및 해제 상태를 감지하여 충전기가 해제될 경우 DB로 전송하는 기능입니다.

kotlin
코드 복사
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.util.Log
import okhttp3.*
import java.io.IOException

class ChargerReceiver : BroadcastReceiver() {

    override fun onReceive(context: Context, intent: Intent) {
        if (intent.action == Intent.ACTION_POWER_DISCONNECTED) {
            Log.d("ChargerReceiver", "충전기가 해제되었습니다.")

            // 충전 해제 상태 DB 전송
            sendDataToDB("충전 해제됨")
        }
    }

    private fun sendDataToDB(status: String) {
        val client = OkHttpClient()
        val requestBody = FormBody.Builder()
            .add("event", status)
            .build()

        val request = Request.Builder()
            .url("http://yourserver.com/event") // 서버 URL로 변경
            .post(requestBody)
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e("ChargerReceiver", "DB 전송 실패: ${e.message}")
            }

            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    Log.d("ChargerReceiver", "DB 전송 성공")
                }
            }
        })
    }
}
3. MotionDetectionService 클래스 (기기 움직임 감지 및 경고 화면 표시)
기기 움직임을 감지하고, 감지되면 경고 화면을 띄우며 서버로 정보를 전송하는 기능입니다. 움직임 감지는 SensorManager를 사용해 구현했습니다.

kotlin
코드 복사
import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Context
import android.content.Intent
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.annotation.RequiresApi
import okhttp3.*
import java.io.IOException

class MotionDetectionService : Service(), SensorEventListener {

    private lateinit var sensorManager: SensorManager
    private var accelerometer: Sensor? = null

    override fun onCreate() {
        super.onCreate()
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            startForeground(1, createNotification())
        }

        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
        accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)
        accelerometer?.let {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_NORMAL)
        }
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun createNotification(): Notification {
        val channelId = "motion_service_channel"
        val channelName = "Motion Detection Service"
        val notificationChannel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_LOW)
        val notificationManager = getSystemService(NotificationManager::class.java)
        notificationManager.createNotificationChannel(notificationChannel)

        return Notification.Builder(this, channelId)
            .setContentTitle("Motion Detection Service")
            .setContentText("기기 움직임을 감지하고 있습니다.")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .build()
    }

    override fun onSensorChanged(event: SensorEvent) {
        val x = event.values[0]
        val y = event.values[1]
        val z = event.values[2]

        val movementThreshold = 2.0f
        if (Math.abs(x) > movementThreshold || Math.abs(y) > movementThreshold || Math.abs(z) > movementThreshold) {
            Log.d("MotionDetectionService", "움직임 감지됨: x=$x, y=$y, z=$z")

            // DB에 움직임 전송
            sendDataToDB("기기 움직임 감지됨")

            // 경고 화면 표시
            showWarningScreen()
        }
    }

    override fun onAccuracyChanged(sensor: Sensor, accuracy: Int) {
        // 정확도 변경 시 처리할 필요 없음
    }

    private fun sendDataToDB(status: String) {
        val client = OkHttpClient()
        val requestBody = FormBody.Builder()
            .add("event", status)
            .build()

        val request = Request.Builder()
            .url("http://yourserver.com/event") // 서버 URL로 변경
            .post(requestBody)
            .build()

        client.newCall(request).enqueue(object : Callback {
            override fun onFailure(call: Call, e: IOException) {
                Log.e("MotionDetectionService", "DB 전송 실패: ${e.message}")
            }

            override fun onResponse(call: Call, response: Response) {
                if (response.isSuccessful) {
                    Log.d("MotionDetectionService", "DB 전송 성공")
                }
            }
        })
    }

    private fun showWarningScreen() {
        val warningIntent = Intent(this, WarningActivity::class.java)
        warningIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
        startActivity(warningIntent)
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }

    override fun onDestroy() {
        super.onDestroy()
        sensorManager.unregisterListener(this)
    }
}
4. WarningActivity 클래스 (경고 화면 표시)
움직임이 감지되었을 때 사용자에게 경고 화면을 표시하는 액티비티입니다.

kotlin
코드 복사
import android.app.Activity
import android.os.Bundle
import android.view.WindowManager
import android.widget.TextView

class WarningActivity : Activity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_warning)

        // 화면이 잠기지 않도록 설정
        window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON or WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED or WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON)

        val warningTextView = findViewById<TextView>(R.id.warningTextView)
        warningTextView.text = "경고! 기기가 움직였습니다."
    }
}
activity_warning.xml (경고 화면 레이아웃)
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:background="#FF0000">

    <TextView
        android:id="@+id/warningTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="경고! 기기가 움직였습니다."
        android:textColor="#FFFFFF"
        android:textSize="24sp"
        android:layout_centerInParent="true"/>
</RelativeLayout>
마무리
충전기 상태 감지: BroadcastReceiver를 통해 충전기 해제 시 서버로 상태를 전송합니다.
움직임 감지: SensorManager를 이용하여 가속도계를 통해 움직임을 감지하고, 움직임이 감지되면 경고 화면을 띄우고 서버로 정보를 전송합니다.