예시는 CancellationTokenSource를 통해 기존 작업을 취소하고, 새로운 작업이 시작될 때 ProgressBar가 초기화되도록 설정한 코드입니다:

csharp
코드 복사
private CancellationTokenSource _cts;
private bool isRunning = false; // 중복 방지 플래그

public async Task StartOperationPLC(int duration, string message)
{
    // 기존 작업이 진행 중이면 취소
    if (isRunning)
    {
        _cts.Cancel(); // 기존 작업 취소
        await Task.Delay(100); // 잠깐 대기 후 진행
    }

    // 새로운 작업 초기화
    _cts = new CancellationTokenSource();
    var token = _cts.Token;
    isRunning = true; // 작업 시작 상태 설정

    try
    {
        Progress1.ProgressMessage = message; // 메시지 업데이트
        Progress1.ProgressValue = duration; // 초기 값 설정
        Progress1.ProgressMax = duration; // 최대 값 설정

        int interval = 50; // 50밀리초 간격

        for (int i = duration; i >= 0; i -= interval)
        {
            // 작업이 취소되었는지 확인
            if (token.IsCancellationRequested)
            {
                break;
            }

            Progress1.ProgressValue = i; // 프로그래스바 업데이트
            await Task.Delay(interval); // 50밀리초 대기
        }
    }
    finally
    {
        // 완료 또는 취소 시 플래그 및 메시지 초기화
        isRunning = false;
        Progress1.ProgressMessage = ""; // 메시지 초기화
    }
}
코드 설명
중복 실행 방지: isRunning 플래그를 통해 작업이 이미 실행 중인지를 확인합니다. 작업이 진행 중이면 _cts.Cancel()을 통해 기존 작업을 취소하고 새로운 작업을 시작합니다.

CancellationToken 사용: _cts.Token을 활용하여 작업이 취소되었는지를 확인합니다. 작업이 취소되었다면 for 루프가 break 되어 빠져나오게 됩니다.

Finally 블록: 작업이 완료되거나 취소될 때 isRunning 플래그와 ProgressBar 메시지를 초기화하여 다음 작업 준비를 합니다.

이렇게 변경하면 각 호출 시 기존 작업이 중단되고 새로운 작업이 시작되며, ProgressBar가 바르게 초기화되고 중복 실행으로 인한 문제를 방지할 수 있습니다.










