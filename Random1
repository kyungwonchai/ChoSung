 차트를 독립적으로 표시합니다.

xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="800" Width="800">
    <StackPanel>
        <!-- 라인별 차트 -->
        <dxc:ChartControl x:Name="lineChartControl" Height="200" MouseDown="LineChartControl_MouseDown">
            <dxc:XYDiagram2D>
                <dxc:BarSideBySideSeries2D DisplayName="라인별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>

        <!-- 모델별 차트 -->
        <dxc:ChartControl x:Name="modelChartControl" Height="200" MouseDown="ModelChartControl_MouseDown">
            <dxc:XYDiagram2D>
                <dxc:BarSideBySideSeries2D DisplayName="모델별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>

        <!-- 발생유형별 차트 -->
        <dxc:ChartControl x:Name="typeChartControl" Height="200" MouseDown="TypeChartControl_MouseDown">
            <dxc:XYDiagram2D>
                <dxc:BarSideBySideSeries2D DisplayName="발생유형별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>

        <!-- 그리드 컨트롤 -->
        <dxg:GridControl x:Name="gridControl" Height="200"/>
    </StackPanel>
</Window>
C# 코드
C# 코드에서는 서버에서 각 차트의 데이터를 가져와 각 차트에 할당합니다. 또한, 차트의 막대를 클릭했을 때 그리드를 필터링합니다.

csharp
Copy code
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

public partial class MainWindow : Window
{
    private string connectionString = "Your Connection String Here";

    public MainWindow()
    {
        InitializeComponent();
        LoadChartData();
    }

    private void LoadChartData()
    {
        lineChartControl.DataSource = GetData("GetLineData");
        modelChartControl.DataSource = GetData("GetModelData");
        typeChartControl.DataSource = GetData("GetTypeData");
    }

    private DataTable GetData(string storedProcedureName)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            using (SqlCommand cmd = new SqlCommand(storedProcedureName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    return dt;
                }
            }
        }
    }

    private void LineChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        ChartControl_MouseDown(sender, e, "[라인] = ");
    }

    private void ModelChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        ChartControl_MouseDown(sender, e, "[모델] = ");
    }

    private void TypeChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        ChartControl_MouseDown(sender, e, "[발생유형] = ");
    }

    private void ChartControl_MouseDown(object sender, MouseButtonEventArgs e, string filterPrefix)
    {
        var chartControl = sender as ChartControl;
        var hitInfo = chartControl.CalcHitInfo(e.GetPosition(chartControl));
        if (hitInfo.InSeries)
        {
            var seriesPoint = hitInfo.SeriesPoint;
            FilterGridControl(filterPrefix + $"'{seriesPoint.Argument}'");
        }
    }

    private void FilterGridControl(string filterString)
    {
        gridControl.FilterString = filterString;
    }
}
이 코드는 각 차트에 독립적인 데이터를 표시하고, 차트의 막대를 클릭했을 때 해당 카테고리에 대한 데이터로 그리드를 필터링합니다. 데이터베이스 연결 문자열과 저장 프로시저 이름은 환