F에서 DevExpress의 GridControl에 수동으로 컬럼을 추가하고, 그 컬럼에 버튼을 추가하여 버튼 클릭 시 해당 행의 RecordTime 컬럼 값을 메시지 박스로 표시하는 예제를 만들어 보겠습니다.

XAML 설정
먼저 GridControl을 정의하고 컬럼을 추가합니다.

xml
코드 복사
<Window x:Class="WpfDevExpressApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="None">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="RecordId" Header="Record ID" />
                <dxg:GridColumn FieldName="RecordTime" Header="Record Time" />
                <dxg:GridColumn Header="Actions" UnboundType="Object" >
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Show Time" Click="Button_Click" Tag="{Binding}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
다음으로, 데이터를 바인딩하고 버튼 클릭 이벤트를 처리하는 코드를 작성합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.Windows;

namespace WpfDevExpressApp
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Record> Records { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            Records = new ObservableCollection<Record>
            {
                new Record { RecordId = 1, RecordTime = DateTime.Now },
                new Record { RecordId = 2, RecordTime = DateTime.Now.AddMinutes(5) },
                new Record { RecordId = 3, RecordTime = DateTime.Now.AddMinutes(10) }
            };
            gridControl.ItemsSource = Records;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            if (sender is Button button && button.Tag is Record record)
            {
                MessageBox.Show($"Record Time: {record.RecordTime}");
            }
        }
    }

    public class Record
    {
        public int RecordId { get; set; }
        public DateTime RecordTime { get; set; }
    }
}
설명
XAML 설정:

GridControl에 AutoGenerateColumns 속성을 None으로 설정하여 수동으로 컬럼을 추가합니다.
Actions 컬럼을 추가하고, CellTemplate을 사용하여 버튼을 정의합니다. 버튼의 Tag 속성에 현재 행의 데이터를 바인딩합니다.
C# 코드:

ObservableCollection<Record>을 사용하여 데이터 소스를 정의하고 gridControl의 ItemsSource에 바인딩합니다.
Button_Click 이벤트 핸들러에서 버튼 클릭 시 Tag 속성에 바인딩된 데이터를 가져와 해당 행의 RecordTime 값을 메시지 박스로 표시합니다.
이렇게 하면 GridControl에 수동으로 컬럼을 추가하고, 버튼 클릭 시 해당 행의 RecordTime 값을 메시지 박스로 표시할 수 있습