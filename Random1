하겠습니다.

XAML:

xml

<Window x:Class="YourNamespace.YourWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core">
    <Grid>
        <!-- 호가정일 -->
        <Border BorderBrush="Black" BorderThickness="2" Margin="0,0" Width="300">
            <StackPanel>
                <Label Content="호가정일(날짜)" Width="300" Height="30" Background="SkyBlue" HorizontalContentAlignment="Center" BorderBrush="Black" BorderThickness="0,0,0,1" />
                <dx:ComboBoxEdit Name="menuc_SelectedDate" Width="300" Height="50" Background="White" ItemsSource="{Binding Menuc_Dates}" SelectedItem="{Binding Menuc_SelectedDate}" />
            </StackPanel>
        </Border>

        <!-- 보드유형 -->
        <Border BorderBrush="Black" BorderThickness="2" Margin="0,90" Width="300">
            <StackPanel>
                <Label Content="보드유형" Width="300" Height="30" Background="SkyBlue" HorizontalContentAlignment="Center" BorderBrush="Black" BorderThickness="0,0,0,1" />
                <dx:ComboBoxEdit Name="menuc_SelectedBoardType" Width="300" Height="50" Background="White" ItemsSource="{Binding Menuc_BoardTypes}" SelectedItem="{Binding Menuc_SelectedBoardType}" />
            </StackPanel>
        </Border>

        <!-- ... 추가된 행을 반복 -->

    </Grid>
</Window>

C#:

csharp

public partial class YourWindow : Window, INotifyPropertyChanged
{
    private ObservableCollection<string> menuc_Dates;
    private ObservableCollection<string> menuc_BoardTypes;
    private string menuc_SelectedDate;
    private string menuc_SelectedBoardType;

    public ObservableCollection<string> Menuc_Dates
    {
        get { return menuc_Dates; }
        set { menuc_Dates = value; OnPropertyChanged("Menuc_Dates"); }
    }

    public ObservableCollection<string> Menuc_BoardTypes
    {
        get { return menuc_BoardTypes; }
        set { menuc_BoardTypes = value; OnPropertyChanged("Menuc_BoardTypes"); }
    }

    public string Menuc_SelectedDate
    {
        get { return menuc_SelectedDate; }
        set { menuc_SelectedDate = value; OnPropertyChanged("Menuc_SelectedDate"); }
    }

    public string Menuc_SelectedBoardType
    {
        get { return menuc_SelectedBoardType; }
        set { menuc_SelectedBoardType = value; OnPropertyChanged("Menuc_SelectedBoardType"); }
    }

    public YourWindow()
    {
        InitializeComponent();

        // 예시로 임의의 값 설정. 실제로는 DB에서 가져온 값을 이용하십시오.
        Menuc_Dates = new ObservableCollection<string>() { "2023-01-01", "2023-01-02" };
        Menuc_BoardTypes = new ObservableCollection<string>() { "ALL", "Main", "Sec<PRE" };

        this.DataContext = this;
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

이 코드는 각 콤보박스와 라벨을 Border 및 StackPanel로 묶어 스타일