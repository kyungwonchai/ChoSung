evExpress WPF GridControl에서 Timediff 컬럼의 값이 60 이하인 행의 배경색을 노란색으로, 텍스트 색상을 검정으로 설정하는 방법입니다.

1. MSSQL 쿼리 작성
Timediff 컬럼을 계산하는 쿼리로 데이터를 가져옵니다.

sql
코드 복사
SELECT 
    Id,
    IP,
    ReceivedMessage,
    Time1,
    LogType,
    DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0 -- 과거 데이터만 조회
ORDER BY Id DESC;
2. XAML 코드 (GridControl)
GridControl의 CustomRowStyle 이벤트를 사용하여 조건에 따라 행 스타일을 변경합니다.

xaml
코드 복사
<dxg:GridControl Name="gridControl1" AutoGenerateColumns="False" CustomRowStyle="GridControl_CustomRowStyle">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Id" Header="Id" />
        <dxg:GridColumn FieldName="IP" Header="IP" />
        <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
        <dxg:GridColumn FieldName="Time1" Header="Time1" DisplayFormat="G" />
        <dxg:GridColumn FieldName="LogType" Header="LogType" />
        <dxg:GridColumn FieldName="Timediff" Header="Time Difference (Minutes)" />
    </dxg:GridControl.Columns>
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True" ShowGroupPanel="False" />
    </dxg:GridControl.View>
</dxg:GridControl>
3. C# 코드 (MainWindow.xaml.cs)
3.1 데이터 모델 정의
Timediff 값을 포함하는 데이터 모델을 정의합니다.

csharp
코드 복사
public class LogMessage
{
    public int Id { get; set; }
    public string IP { get; set; }
    public string ReceivedMessage { get; set; }
    public DateTime Time1 { get; set; }
    public string LogType { get; set; }
    public int Timediff { get; set; } // 시간 차이 (분 단위)
}
3.2 데이터 가져오기
Timediff 값을 계산하여 데이터로 가져옵니다.

csharp
코드 복사
private List<LogMessage> GetDataFromDatabase()
{
    List<LogMessage> logMessages = new List<LogMessage>();

    string connectionString = "Server=your_server;Database=SMD_ACR_ROUTER;User Id=your_username;Password=your_password;";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        string query = @"
            SELECT 
                Id,
                IP,
                ReceivedMessage,
                Time1,
                LogType,
                DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
            FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
            WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0
            ORDER BY Id DESC;";
        
        SqlCommand command = new SqlCommand(query, connection);
        connection.Open();
        SqlDataReader reader = command.ExecuteReader();

        while (reader.Read())
        {
            logMessages.Add(new LogMessage
            {
                Id = reader.GetInt32(0),
                IP = reader.GetString(1),
                ReceivedMessage = reader.GetString(2),
                Time1 = reader.GetDateTime(3),
                LogType = reader.GetString(4),
                Timediff = reader.GetInt32(5)
            });
        }
    }

    return logMessages;
}
3.3 CustomRowStyle 이벤트 구현
Timediff 값이 60 이하인 경우 행 배경색을 노란색, 글자 색상을 검정으로 설정합니다.

csharp
코드 복사
private void GridControl_CustomRowStyle(object sender, RowStyleEventArgs e)
{
    if (e.Row is LogMessage logMessage)
    {
        // Timediff 값이 60 이하일 경우 스타일 적용
        if (logMessage.Timediff <= 60)
        {
            e.Background = Brushes.Yellow;   // 배경색: 노란색
            e.Foreground = Brushes.Black;   // 텍스트 색상: 검정색
        }
    }
}
3.4 데이터 새로고침 및 타이머 설정
10초마다 데이터를 새로고침하여 최신 상태를 유지합니다.

csharp
코드 복사
DispatcherTimer refreshTimer = new DispatcherTimer();

public MainWindow()
{
    InitializeComponent();

    // 타이머 설정
    refreshTimer.Interval = TimeSpan.FromSeconds(10);
    refreshTimer.Tick += (s, e) => RefreshData();
    refreshTimer.Start();

    // 초기 데이터 로드
    RefreshData();
}

private void RefreshData()
{
    gridControl1.ItemsSource = GetDataFromDatabase();
}
최종 결과
쿼리: MSSQL에서 DATEDIFF를 사용하여 Timediff 값을 계산합니다.
GridControl: Timediff 값을 기준으로 행 스타일을 동적으로 변경합니다.
행 스타일 변경: Timediff 값이 60 이하일 경우 배경색은 노란색, 텍스트 색상은 검정으로 설정됩니다.