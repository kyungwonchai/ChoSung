import bpy
import math

# 기존 오브젝트 삭제
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# 보라색 유리 바닥 생성
bpy.ops.mesh.primitive_plane_add(size=10, location=(0, 0, 0))
floor = bpy.context.object
floor.name = 'Purple_Glass_Floor'

# 보라색 유리 머티리얼 생성 및 적용
glass_material = bpy.data.materials.new(name='Purple_Glass_Material')
glass_material.use_nodes = True
nodes = glass_material.node_tree.nodes
links = glass_material.node_tree.links

# 기본 노드 제거
for node in nodes:
    nodes.remove(node)

# 노드 추가
output_node = nodes.new(type='ShaderNodeOutputMaterial')
glass_node = nodes.new(type='ShaderNodeBsdfGlass')
glass_node.inputs['Color'].default_value = (0.5, 0, 0.5, 1)  # 보라색
glass_node.inputs['Roughness'].default_value = 0.1

# 노드 연결
links.new(glass_node.outputs['BSDF'], output_node.inputs['Surface'])

# 머티리얼을 바닥에 적용
floor.data.materials.append(glass_material)

# 무지개색 벽돌 생성 및 배치
colors = [
    (1, 0, 0, 1),    # 빨강
    (1, 0.5, 0, 1),  # 주황
    (1, 1, 0, 1),    # 노랑
    (0, 1, 0, 1),    # 초록
    (0, 0, 1, 1),    # 파랑
    (0.29, 0, 0.51, 1),  # 남색
    (0.56, 0, 1, 1)  # 보라
]

for i, color in enumerate(colors):
    x_pos = (i - 3) * 1.5  # 벽돌 간격 조절
    bpy.ops.mesh.primitive_cube_add(size=1, location=(x_pos, 0, 0.5))
    brick = bpy.context.object
    brick.name = f'Brick_{i+1}'

    # 머티리얼 생성
    mat = bpy.data.materials.new(name=f'Brick_Material_{i+1}')
    mat.use_nodes = True
    nodes = mat.node_tree.nodes
    links = mat.node_tree.links

    # 기본 노드 제거
    for node in nodes:
        nodes.remove(node)

    # 노드 추가
    output_node = nodes.new(type='ShaderNodeOutputMaterial')
    emission_node = nodes.new(type='ShaderNodeEmission')
    emission_node.inputs['Color'].default_value = color
    emission_node.inputs['Strength'].default_value = 5  # 발광 강도

    # 노드 연결
    links.new(emission_node.outputs['Emission'], output_node.inputs['Surface'])

    # 머티리얼을 벽돌에 적용
    brick.data.materials.append(mat)

# 골든 아워 조명 설정
# 태양광 추가
bpy.ops.object.light_add(type='SUN', location=(0, 0, 10))
sun_light = bpy.context.object
sun_light.data.energy = 5  # 조명 강도 설정
sun_light.rotation_euler = (math.radians(50), math.radians(0), math.radians(30))  # 조명 각도 설정

# 카메라 설정
bpy.ops.object.camera_add(location=(0, -10, 5))
camera = bpy.context.object
camera.rotation_euler = (math.radians(60), 0, 0)
bpy.context.scene.camera = camera

# 렌더링 설정
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.cycles.device = 'GPU'  # GPU 사용
bpy.context.scene.cycles.samples = 128  # 샘플 수
bpy.context.scene.cycles.use_denoising = True  # 디노이즈 사용
bpy.context.scene.render.resolution_x = 7680  # 8K 해상도
bpy.context.scene.render.resolution_y = 4320
bpy.context.scene.render.filepath = '/path/to/your/render_output.png'  # 출력 경로 수정 필요

# 렌더링 실행
bpy.ops.render.render(write_still=True)
