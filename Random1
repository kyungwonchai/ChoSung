정말 죄송합니다. BuildConfig 클래스를 사용하여 앱의 버전 정보를 읽어오지 못하는 상황에서 다른 접근 방법을 제안드리겠습니다.

대안 방법: BuildConfig 대신 PackageInfo 사용
BuildConfig를 사용할 수 없는 경우, Android의 PackageManager와 PackageInfo를 사용하여 앱의 버전 정보를 가져올 수 있습니다. 이 방법은 앱의 빌드 과정과 무관하게 작동하며, 앱이 설치된 상태에서 실행 시점에 정보를 가져옵니다.

PackageInfo를 사용하여 버전 정보 가져오기
다음은 PackageInfo를 사용하여 앱의 버전 이름(versionName)과 버전 코드(versionCode)를 가져오는 방법입니다.

1. PackageInfo 사용 코드 예제
kotlin
코드 복사
import android.content.pm.PackageInfo
import android.content.pm.PackageManager
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.util.Log

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        try {
            // PackageManager를 사용하여 PackageInfo 가져오기
            val packageManager: PackageManager = this.packageManager
            val packageInfo: PackageInfo = packageManager.getPackageInfo(this.packageName, 0)

            // 버전 이름과 버전 코드 가져오기
            val versionName = packageInfo.versionName
            val versionCode = packageInfo.longVersionCode // Android API 28 이상에서는 longVersionCode 사용

            // 버전 정보 로그 출력
            Log.d("AppVersion", "Version Name: $versionName, Version Code: $versionCode")

        } catch (e: PackageManager.NameNotFoundException) {
            e.printStackTrace()
            Log.e("AppVersion", "Failed to get app version info")
        }
    }
}
2. 이 방법이 유용한 이유
독립적: 이 방법은 빌드 시 생성되는 BuildConfig에 의존하지 않습니다. 대신 런타임에 설치된 APK에서 정보를 직접 가져옵니다.
단순성: 추가 설정이나 빌드 스크립트 수정 없이 앱의 컨텍스트만으로 버전 정보를 가져올 수 있습니다.
호환성: 모든 Android 버전에서 PackageManager와 PackageInfo 클래스를 사용할 수 있습니다.
요약
대안 방법: BuildConfig 대신 PackageInfo를 사용하여 앱의 버전 정보를 가져옵니다.
장점: 빌드 과정과 무관하게 안정적으로 버전 정보를 읽어올 수 있습니다.
위의 방법을 사용해 보시고, 만약 이 방법으로도 문제가 해결되지 않는다면, 발생한 특정 오류 메시지나 추가적인 상황 정보를 제공해 주시면 더 자세하게 도와드리겠습니다.