#에서 static을 사용하지 않고 타이머를 이용하여 10분마다 실행되지만, 이전 작업이 완료되지 않으면 기다리는 비동기 실행을 구현하는 예제입니다.

✅ 구현 방법
클래스 인스턴스를 생성하여 static 없이 관리
비동기 Timer 사용 (System.Threading.Timer)
작업 실행 중이면 다음 실행을 대기
작업 중 화면 보호기 방지를 위해 마우스 이동
✅ C# static 없이 타이머 및 마우스 이동 예제
csharp
코드 복사
using System;
using System.Runtime.InteropServices;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

class TimerRunner
{
    private Timer _timer;
    private bool _isRunning = false;
    private readonly object _lock = new object();
    private CancellationTokenSource _cts;

    [DllImport("user32.dll")]
    private static extern bool SetCursorPos(int X, int Y);

    public TimerRunner()
    {
        _timer = new Timer(async _ => await CheckAndRunTask(), null, 0, 600000); // 10분마다 실행
    }

    private async Task CheckAndRunTask()
    {
        lock (_lock)
        {
            if (_isRunning)
            {
                Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 이전 실행이 끝나지 않음, 대기...");
                return;
            }
            _isRunning = true;
        }

        _cts = new CancellationTokenSource();
        var token = _cts.Token;

        Task mouseMoveTask = PreventScreensaver(token); // 마우스 이동 실행
        Task workTask = RunTaskAsync(); // 실제 작업 실행

        await workTask; // 작업이 끝날 때까지 대기
        _cts.Cancel(); // 마우스 이동 작업 중단
        await mouseMoveTask; // 마우스 이동 작업 종료

        Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 작업 완료");
        _isRunning = false;
    }

    private async Task RunTaskAsync()
    {
        Console.WriteLine($"{DateTime.Now:HH:mm:ss} - 작업 시작");
        await Task.Delay(20000); // 20초 동안 실행되는 작업 (예제)
    }

    private async Task PreventScreensaver(CancellationToken token)
    {
        Console.WriteLine("화면 보호기 방지를 위한 마우스 이동 시작...");
        int step = 5;

        while (!token.IsCancellationRequested)
        {
            var pos = Cursor.Position;
            SetCursorPos(pos.X + step, pos.Y);
            await Task.Delay(5000, token);

            SetCursorPos(pos.X, pos.Y);
            await Task.Delay(5000, token);
        }

        Console.WriteLine("화면 보호기 방지 중지.");
    }
}

class Program
{
    static async Task Main()
    {
        Console.WriteLine("Timer 시작...");
        var runner = new TimerRunner();

        await Task.Delay(Timeout.Infinite); // 프로그램 유지
    }
}
✅ 설명
TimerRunner 클래스:
static 없이 this._timer를 사용하여 관리
10분마다 CheckAndRunTask() 실행
이전 작업이 끝나지 않았으면 실행하지 않고 대기
작업이 끝나면 다시 실행 가능하도록 설정
PreventScreensaver():