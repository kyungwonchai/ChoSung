MSSQL 데이터베이스와의 통신 문제:

Streamlit에서 데이터를 가져올 때 cursor.fetchall()로 값이 제대로 안 들어오고 있음.

프로시저가 데이터를 반환하는데도 Streamlit에서 제대로 표시되지 않음.

컬럼 헤더값으로 채워진 이유:

fetch_main_data() 함수에서 cursor.description으로 컬럼명을 가져오는데, 데이터 자체가 비어있으면 rows 리스트는 빈 값이 되거나 헤더값으로만 채워질 수 있습니다.

문제 진단:

프로시저를 직접 실행하여 SQL Server Management Studio에서 값이 잘 나오는지 확인합니다.

Streamlit 코드에서 데이터를 올바르게 처리하는지 확인합니다.

✅ 점검 방법
SQL Server Management Studio에서 실행하기

sql
코드 복사
EXEC Get_min_bestdifferent;
결과 값이 잘 나오는지 확인합니다.

Python 코드로 값 확인하기 (확인용 코드 추가)

python
코드 복사
import pymssql

def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")

    # 컬럼 이름 확인
    columns = [desc[0] for desc in cursor.description]
    print("컬럼 이름:", columns)

    # 데이터 확인
    rows = cursor.fetchall()
    print("가져온 데이터:")
    for row in rows:
        print(row)

    conn.close()

fetch_main_data()
✅ 이 코드로 확인할 내용
콘솔 출력 확인:

컬럼 이름이 정상적으로 출력되는지 확인.

데이터를 가져오면 각 행이 출력되는지 확인.

예상 출력 예시:

less
코드 복사
컬럼 이름: ['group1', 'line1', 'model1', 'type1', 'ecn1', 'edition1', 'act2_1', 'act2_2', 'act2_3', 'act2_4', 'act2_5', 'act2_6', 'act2_7', 'act2_8']
가져온 데이터:
('A', 'L1', 'M1', 'T1', 'E1', 'ED1', 100, 200, 150, 180, 90, 170, 210, 160)
('A', 'L2', 'M2', 'T2', 'E2', 'ED2', 80, 120, 110, 130, 60, 140, 150, 70)
✅ 문제 원인
Streamlit 문제:

Streamlit에서 데이터를 가져올 때 pandas를 사용하지 않고 cursor.fetchall()로 데이터를 가져옵니다.

pandas를 사용할 때와 데이터 처리 방식이 다르기 때문에 문제가 발생합니다.

fetchall() 데이터 처리 문제:

fetchall()로 가져온 데이터를 Streamlit이 제대로 표시하지 못하는 경우가 있습니다.

데이터를 DataFrame으로 변환하거나, HTML 테이블로 직접 만들어 표시해야 합니다.

✅ 수정된 Streamlit 코드 (오류 해결)
python
코드 복사
import streamlit as st
import pymssql

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data():
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute("EXEC Get_min_bestdifferent")
    
    # 컬럼 이름 확인
    columns = [desc[0] for desc in cursor.description]
    
    # 데이터 확인
    rows = cursor.fetchall()
    
    conn.close()
    return rows, columns

# 테이블에서 최대값을 노란색으로 강조하는 HTML 스타일 함수
def generate_html_table(data, columns):
    html = "<table border='1' style='width:100%; border-collapse: collapse;'>"
    html += "<thead><tr>"
    for col in columns:
        html += f"<th>{col}</th>"
    html += "</tr></thead><tbody>"

    act2_columns = [f'act2_{i}' for i in range(1, 9)]

    for row in data:
        html += "<tr>"
        act2_values = {col: row[idx] for idx, col in enumerate(columns) if col in act2_columns}
        
        if act2_values:
            max_value = max(act2_values.values())
        else:
            max_value = None
        
        for idx, value in enumerate(row):
            column_name = columns[idx]
            if column_name in act2_columns and value == max_value:
                html += f"<td style='background-color: yellow;'>{value}</td>"
            else:
                html += f"<td>{value}</td>"
        html += "</tr>"
    html += "</tbody></table>"
    return html

# Streamlit 앱 구성
def main():
    st.set_page_config(layout="wide")
    st.title("Ranked Data Table - act2_1 ~ act2_8 Highlighting (Cursor 방식)")

    # 데이터 가져오기
    data, columns = fetch_main_data()
    
    if not data:
        st.error("프로시저에서 데이터를 가져오지 못했습니다. 데이터베이스 또는 프로시저 설정을 확인하세요.")
    else:
        st.subheader("act2_1 ~ act2_8 데이터 테이블")
        html_table = generate_html_table(data, columns)
        st.markdown(html_table, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
✅ 설명
SQL 서버에서 데이터를 가져오는 코드 (fetchall()) 방식 유지

컬럼 이름을 cursor.description으로 확인

Streamlit에서 HTML로 출력하여 데이터를 정확히 표시

오류 메시지를 추가하여 디버깅 용이하게 함

📌 Streamlit 실행 방법
bash
코드 복사