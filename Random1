네, 정확하게 이해했습니다. "InlineTesterPBA로 시작하는 프로세스"를 찾는 것은 그 프로세스가 실행 중인지 확인하고 그 이름을 설정하는 것이 주 목적이고, 반드시 그 순간에 화면 캡처를 위한 '메인 창 핸들'이 필요한 것은 아니라는 말씀이시군요.

이 부분을 명확히 구분하여 로직을 수정하겠습니다.

핵심 변경 사항:

AutoDetectProcessTimer_Tick (2분 간격 자동 감지 타이머 로직 수정):

이 타이머는 이제 'InlineTesterPBA'로 시작하는 프로세스 이름 자체를 찾는 데 집중합니다.
해당 이름으로 시작하는 프로세스가 단 하나만 실행 중이면, 그 프로세스의 실제 이름 (예: InlineTesterPBA_v1.2)을 txtTarget 입력란에 자동으로 설정하고, '프로세스 이름으로 찾기'를 선택하며, 설정을 저장합니다.
이 단계에서는 해당 프로세스가 즉시 캡처 가능한 '메인 창 핸들'을 가지고 있는지는 검사하지 않습니다. 단순히 프로세스 이름을 찾아 설정하는 역할만 합니다.
GetTargetWindowHandle() 함수 (캡처 직전 창 핸들 확인 로직 유지):

이 함수는 **실제로 캡처를 수행하기 직전 (PerformLogging 내부에서 호출됨)**에 txtTarget에 설정된 이름(창 제목이든, 자동 감지된 프로세스 이름이든)을 바탕으로 **캡처 가능한 창의 핸들(HWND)**을 가져오려고 시도합니다.
만약 AutoDetectProcessTimer_Tick에 의해 txtTarget에 프로세스 이름이 설정되었더라도, 해당 프로세스가 실제로 화면에 표시되는 메인 창이 없거나 MainWindowHandle을 제공하지 않으면, 이 함수는 여전히 IntPtr.Zero를 반환합니다. 그러면 PerformLogging에서는 "대상 창/프로세스를 찾을 수 없습니다"라고 상태를 표시하고, 1분짜리 searchTimer가 다시 동작하여 유효한 창 핸들을 찾으려고 시도하게 됩니다.
이렇게 하면, "프로세스 이름 자체로 찾기"라는 요구사항을 AutoDetectProcessTimer_Tick에서 충족시키면서, 실제 캡처를 위해서는 여전히 유효한 창 핸들이 필요하다는 점을 GetTargetWindowHandle 로직에서 유지할 수 있습니다.

MainWindow.xaml.cs 전체 코드 (수정된 자동 감지 로직 포함)
아래는 위 설명이 반영된 MainWindow.xaml.cs 파일의 전체 코드입니다. 이전 코드를 모두 지우고 아래 코드로 교체해주세요.

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private Wpf.Threading.DispatcherTimer autoDetectProcessTimer;

        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private readonly string logFolderPath;
        private readonly string traceLogPath;
        private string previewImagePath;
        private bool isExiting = false;

        private TesseractEngine OcrEngine
        {
            get
            {
                if (_ocrEngine == null)
                {
                    string exePath = AppDomain.CurrentDomain.BaseDirectory;
                    string tessDataPath = Path.Combine(exePath, "tessdata");
                    _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
                    _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789."); // 마이너스 제외된 최종본
                }
                return _ocrEngine;
            }
        }
        
        public MainWindow()
        {
            logFolderPath = Path.Combine(agentBasePath, "logs");
            traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
            InitializeComponent();
            InitializeApp();
        }

        private void LogTrace(string message)
        {
            try
            {
                Directory.CreateDirectory(logFolderPath);
                string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} - {message}\r\n";
                File.AppendAllText(traceLogPath, logMessage);
            }
            catch { }
        }

        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            LogTrace("Application Initializing...");
            CheckRequiredFiles();
            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;
            searchTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(1) };
            searchTimer.Tick += SearchTimer_Tick;
            autoDetectProcessTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(2) };
            autoDetectProcessTimer.Tick += AutoDetectProcessTimer_Tick;
            Directory.CreateDirectory(agentBasePath);
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
            LogTrace("Application Initialized.");
        }
        
        private void SearchTimer_Tick(object sender, EventArgs e)
        {
            LogTrace("SearchTimer Tick: 일반 재탐색 시작...");
            lblStatus.Text = "대상 창/프로세스를 찾는 중... (1분마다 재시도)";
            IntPtr hWnd = GetTargetWindowHandle(); // 이 함수는 여전히 HWND를 찾으려고 시도
            if (hWnd != IntPtr.Zero)
            {
                LogTrace("SearchTimer Tick: 대상 (캡처 가능한 창) 발견!");
                searchTimer.Stop();
                lblStatus.Text = "대상 발견! 자동 로깅을 시작합니다.";
                if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
            }
            else
            {
                LogTrace("SearchTimer Tick: 대상 (캡처 가능한 창) 찾기 실패.");
            }
        }

        private void AutoDetectProcessTimer_Tick(object sender, EventArgs e)
        {
            LogTrace("AutoDetectProcessTimer Tick: 'InlineTesterPBA' 자동 감지 시도...");
            lblStatus.Text = "InlineTesterPBA 프로세스 자동 감지 중... (2분마다 재시도)";

            Process[] allProcesses = Process.GetProcesses();
            // 이름이 "InlineTesterPBA"로 시작하는 모든 프로세스를 찾음 (MainWindowHandle은 여기서 신경쓰지 않음)
            var targetProcesses = allProcesses.Where(p => 
                p.ProcessName.StartsWith("InlineTesterPBA", StringComparison.OrdinalIgnoreCase)
            ).ToList();

            if (targetProcesses.Count == 1)
            {
                var foundProcess = targetProcesses[0];
                string foundProcessName = foundProcess.ProcessName; 

                LogTrace($"AutoDetectProcessTimer Tick: 'InlineTesterPBA'로 시작하는 단일 프로세스 발견! 이름: '{foundProcessName}'");
                
                autoDetectProcessTimer.Stop(); 

                // UI 업데이트 및 설정 저장
                txtTarget.Text = foundProcessName; // 실제 찾은 프로세스 이름으로 설정
                rbFindByProcess.IsChecked = true; 
                SearchMethod_Changed(null, null); 
                SaveApplicationSettings(); 

                lblStatus.Text = $"프로세스 '{foundProcessName}' 자동 지정 완료. 로깅 재시작 시도.";
                
                // 일반 탐색 타이머나 로깅 타이머를 시작하기 전에 대상이 유효한지 다시 확인
                // 여기서 바로 btnStart_Click을 호출하면, GetTargetWindowHandle()이 HWND를 찾으려고 시도함
                if (isLocked && !string.IsNullOrWhiteSpace(txtPcName.Text) && !timer.IsEnabled)
                {
                    LogTrace("AutoDetectProcessTimer Tick: 자동 지정 후, 메인 로깅 시작 시도...");
                    btnStart_Click(this, new RoutedEventArgs()); // 이 안에서 GetTargetWindowHandle() 호출됨
                }
            }
            else if (targetProcesses.Count > 1)
            {
                LogTrace($"AutoDetectProcessTimer Tick: 'InlineTesterPBA'로 시작하는 프로세스가 여러 개 발견됨 ({targetProcesses.Count}개). 자동 지정 불가.");
                lblStatus.Text = "InlineTesterPBA 프로세스가 여러 개 발견되어 자동 지정 불가.";
            }
            else
            {
                LogTrace("AutoDetectProcessTimer Tick: 'InlineTesterPBA'로 시작하는 프로세스 찾지 못함.");
            }
        }

        private void CheckRequiredFiles()
        {
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string[] requiredFiles = { "tesseract53.dll", "leptonica-1.83.1.dll" }; 
            foreach (var file in requiredFiles)
            {
                if (!File.Exists(Path.Combine(exePath, file)))
                {
                    LogTrace($"CheckRequiredFiles: 필수 파일 없음 - {file}");
                    MessageBox.Show($"실행에 필수적인 파일이 없습니다: {file}\n\nClickOnce 게시 설정에서 모든 관련 파일이 '포함(Include)'되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return;
                }
            }
            if (!Directory.Exists(Path.Combine(exePath, "tessdata")))
            {
                LogTrace("CheckRequiredFiles: tessdata 폴더 없음.");
                MessageBox.Show("tessdata 폴더를 찾을 수 없습니다.\n\nClickOnce 게시 설정에서 tessdata 폴더와 그 안의 파일들이 포함되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return;
            }
            LogTrace("CheckRequiredFiles: 모든 필수 파일 확인 완료.");
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LogTrace("Window_Loaded: 설정 로드 시작.");
            txtTarget.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (Settings.Default.SearchByProcessName)
            {
                rbFindByProcess.IsChecked = true;
            }
            else
            {
                rbFindByTitle.IsChecked = true;
            }
            SearchMethod_Changed(null, null); 

            if (File.Exists(previewImagePath))
            {
                try
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 시도 - {previewImagePath}");
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                    LogTrace("Window_Loaded: 미리보기 이미지 로드 성공.");
                }
                catch (Exception ex)
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 실패 - {ex.Message}");
                }
            }
            else { LogTrace("Window_Loaded: 미리보기 이미지 파일 없음."); }
            UpdateLockState(true);
            LogTrace("Window_Loaded: 설정 로드 완료, 자동 시작 시도.");
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && !string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 충족 (PC 이름 및 대상 정보 있음). 대상 핸들 검색 시도.");
                IntPtr hWnd = GetTargetWindowHandle(); // 여기서는 캡처 가능한 창 핸들을 찾으려고 함
                if (hWnd != IntPtr.Zero)
                {
                    LogTrace("AttemptAutoStart: 대상 (캡처 가능한 창) 즉시 발견. 로깅 시작.");
                    if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
                }
                else
                {
                    LogTrace("AttemptAutoStart: 대상 (캡처 가능한 창) 찾기 실패. 일반 재탐색 타이머 시작.");
                    lblStatus.Text = "대상을 찾을 수 없어, 1분마다 재검색을 시작합니다.";
                    if (!searchTimer.IsEnabled) searchTimer.Start(); // 일반 재탐색 타이머 시작
                }
            }
            else if (!string.IsNullOrWhiteSpace(txtPcName.Text) && rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace("AttemptAutoStart: 대상 프로세스 이름이 비어있음. 'InlineTesterPBA' 자동 감지 타이머 시작.");
                lblStatus.Text = "'InlineTesterPBA' 시작 프로세스 자동 감지를 시작합니다 (2분 간격).";
                if (!autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Start();
            }
            else
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 미충족 (PC 이름 또는 대상 정보 부족).");
            }
        }
        
        private void SaveApplicationSettings()
        {
            LogTrace("SaveApplicationSettings: 설정 저장 시작.");
            Settings.Default.WindowTitle = txtTarget.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
            Settings.Default.Save();
            LogTrace("SaveApplicationSettings: 설정 저장 완료.");
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            SaveApplicationSettings();
            lblStatus.Text = $"상태: {DateTime.Now:T} - 설정이 저장되었습니다.";
            MessageBox.Show("설정이 저장되었습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoDetectProcessTimer.IsEnabled)
            {
                MessageBox.Show("로깅 또는 대상 탐색/감지가 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);
            LogTrace($"btnToggleEdit_Click: 잠금 상태 변경 -> {isLocked}");

            if (isLocked)
            {
                SaveApplicationSettings();
                lblStatus.Text = $"상태: {DateTime.Now:T} - 변경된 설정이 저장되었습니다.";
                if (rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text) && !string.IsNullOrWhiteSpace(txtPcName.Text))
                {
                     if (!autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Start();
                     lblStatus.Text = "대상 프로세스 자동 감지를 시작합니다 (2분 간격).";
                }
            }
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtTarget.IsReadOnly = isLocked;
            rbFindByTitle.IsEnabled = !isLocked;
            rbFindByProcess.IsEnabled = !isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            btnSaveSettings.IsEnabled = !isLocked; 

            if (isLocked)
            {
                btnToggleEdit.Content = "수정";
                txtPcName.Background = Wpf.Media.Brushes.LightGray;
                txtTarget.Background = Wpf.Media.Brushes.LightGray;
            }
            else
            {
                btnToggleEdit.Content = "잠금";
                txtPcName.Background = Wpf.Media.Brushes.White;
                txtTarget.Background = Wpf.Media.Brushes.White;
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoDetectProcessTimer.IsEnabled)
            {
                LogTrace("btnStart_Click: 로깅/탐색/감지 중지 요청.");
                timer.Stop();
                searchTimer.Stop();
                autoDetectProcessTimer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 모든 작업이 중지되었습니다.";
            }
            else
            {
                LogTrace("btnStart_Click: 로깅 시작 요청.");
                searchTimer.Stop(); 
                autoDetectProcessTimer.Stop();

                if (!isLocked) { LogTrace("btnStart_Click: 시작 실패 - 잠금 상태 아님."); MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information); return; }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtTarget.Text)) { LogTrace("btnStart_Click: 시작 실패 - PC이름 또는 대상 정보 부족."); MessageBox.Show("PC이름과 대상(창 제목/프로세스 이름)을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error); return; }
                
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) 
                { 
                    LogTrace("btnStart_Click: 시작 실패 - 대상 (캡처 가능한 창) 찾을 수 없음. 일반 재탐색 시작."); 
                    lblStatus.Text = "상태: 오류! 대상을 찾을 수 없어 일반 재탐색을 시작합니다.";
                    if(!searchTimer.IsEnabled) searchTimer.Start(); 
                    return; 
                }
                
                LogTrace("btnStart_Click: 로깅 시작됨 (캡처 가능한 창 발견).");
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return;
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
            LogTrace($"SearchMethod_Changed: 탐색 방법 변경됨 - { (rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름") }");
        }
        
        private IntPtr GetTargetWindowHandle()
        {
            string target = txtTarget.Text;
            LogTrace($"GetTargetWindowHandle: 대상 찾기 시작 - '{target}'");

            if (string.IsNullOrWhiteSpace(target))
            {
                LogTrace("GetTargetWindowHandle: 대상 문자열이 비어있음. 핸들 반환: IntPtr.Zero");
                return IntPtr.Zero;
            }

            if (rbFindByTitle.IsChecked == true)
            {
                LogTrace("GetTargetWindowHandle: '창 제목으로 찾기' 선택됨.");
                IntPtr hWndByTitle = FindWindow(null, target);
                LogTrace($"GetTargetWindowHandle: FindWindow(title) 결과: {hWndByTitle}");
                return hWndByTitle;
            }
            else // rbFindByProcess.IsChecked == true
            {
                LogTrace("GetTargetWindowHandle: '프로세스 이름으로 찾기' 선택됨.");
                string processName = target.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(target) : target;
                LogTrace($"GetTargetWindowHandle: 검색할 프로세스 이름: '{processName}'");

                Process[] processes = Process.GetProcessesByName(processName);
                if (processes.Length == 0)
                {
                    LogTrace($"GetTargetWindowHandle: '{processName}' 이름의 프로세스를 찾을 수 없음. 핸들 반환: IntPtr.Zero");
                    return IntPtr.Zero;
                }
                LogTrace($"GetTargetWindowHandle: '{processName}' 이름으로 {processes.Length}개의 프로세스 찾음.");

                // 캡처를 위해서는 MainWindowHandle이 있는 프로세스를 찾아야 함
                var processWithWindow = processes.FirstOrDefault(p => p.MainWindowHandle != IntPtr.Zero);
                if (processWithWindow != null)
                {
                    LogTrace($"GetTargetWindowHandle: 프로세스 ID {processWithWindow.Id} ({processWithWindow.ProcessName}) 에서 유효한 MainWindowHandle ({processWithWindow.MainWindowHandle}) 찾음. 이 핸들 반환.");
                    return processWithWindow.MainWindowHandle;
                }

                LogTrace($"GetTargetWindowHandle: '{processName}' 이름의 프로세스들은 찾았으나, 유효한 MainWindowHandle을 가진 프로세스가 없음 (캡처 불가). 핸들 반환: IntPtr.Zero");
                return IntPtr.Zero;
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { LogTrace("MyNotifyIcon_TrayMouseDoubleClick: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { LogTrace("MenuOpen_Click: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { LogTrace("MenuExit_Click: 프로그램 종료 시작."); isExiting = true; this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
            }
            else
            {
                LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
                SaveApplicationSettings();
                LogTrace("Window OnClosing: 설정 저장 완료 (OnClosing 내부).");
                MyNotifyIcon.Dispose();
                LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
                _ocrEngine?.Dispose();
                LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }

        private void PerformLogging()
        {
            Gdi.Rectangle cropArea = Gdi.Rectangle.Empty;
            Gdi.Size bmpSize = Gdi.Size.Empty;
            try
            {
                LogTrace("===== PerformLogging 시작 =====");
                LogTrace("1. 대상 핸들 가져오기 시작...");
                IntPtr hWnd = GetTargetWindowHandle(); // 이 함수는 캡처 가능한 HWND를 찾으려고 함
                if (hWnd == IntPtr.Zero)
                {
                    LogTrace("1-1. 대상 핸들 (캡처 가능한 창) 없음.");
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    
                    if (rbFindByProcess.IsChecked == true && !autoDetectProcessTimer.IsEnabled)
                    {
                        LogTrace("PerformLogging: 로깅 중 대상 프로세스의 캡처 가능한 창 연결 끊김. 'InlineTesterPBA' 자동 감지 시도.");
                        timer.Stop(); 
                        if(searchTimer.IsEnabled) searchTimer.Stop(); 
                        autoDetectProcessTimer.Start(); 
                        lblStatus.Text = "대상 프로세스 창 연결 끊김. 'InlineTesterPBA' 자동 감지를 시작합니다 (2분 간격).";
                    }
                    else if (!searchTimer.IsEnabled && !autoDetectProcessTimer.IsEnabled) 
                    {
                        LogTrace("PerformLogging: 대상 연결 끊김. 일반 재탐색 타이머 시작.");
                        timer.Stop();
                        searchTimer.Start();
                        lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다.";
                    }
                    return;
                }

                LogTrace($"1-1. 대상 핸들 (캡처 가능한 창) 찾음: {hWnd}");
                if (autoDetectProcessTimer.IsEnabled)
                {
                    LogTrace("PerformLogging: 대상이 정상적으로 찾아졌으므로, 'InlineTesterPBA' 자동 감지 타이머 중지.");
                    autoDetectProcessTimer.Stop();
                }

                LogTrace("2. 최소화 상태 확인 시작...");
                if (IsIconic(hWnd)) { LogTrace("2-1. 최소화됨. 작업 건너뜀."); lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }
                LogTrace("2-1. 최소화되지 않음.");
                LogTrace("3. 창 크기 가져오기 시작...");
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"3-1. 유효하지 않은 창 크기({width}x{height}). 작업 건너뜀."); lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다."; return; }
                LogTrace($"3-1. 창 크기 확인: {width}x{height}");
                bmpSize = new Gdi.Size(width, height);
                LogTrace("4. 비트맵 객체 생성 시작...");
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    LogTrace("4-1. 비트맵 객체 생성 완료.");
                    LogTrace("5. 그래픽 컨텍스트 생성 및 PrintWindow 호출 시작...");
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        LogTrace($"5-0. HDC 얻음: {hdc}. PrintWindow 호출.");
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                        LogTrace($"5-0. HDC 해제.");
                    }
                    LogTrace("5-1. PrintWindow 완료.");
                    cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        LogTrace($"6. 오류! 캡처 영역이 창 크기를 벗어남. bmp=({bmp.Width}x{bmp.Height}), crop=({cropArea.X},{cropArea.Y} {cropArea.Width}x{cropArea.Height}). 로깅 중지.");
                        timer.Stop(); btnStart.Content = "로깅 시작"; lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }
                    LogTrace($"6. 이미지 자르기(Clone) 시작... [원본크기: {bmp.Width}x{bmp.Height}, 영역: {cropArea}]");
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        LogTrace("6-1. 이미지 자르기 완료.");
                        LogTrace("7. OCR 처리 시작...");
                        using (var page = OcrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            LogTrace($"7-1. OCR 처리 완료. 인식된 텍스트: '{rawText}'");
                            if (!string.IsNullOrWhiteSpace(rawText)) { ProcessOcrResult(rawText); } else { lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다."; }
                        }
                    }
                }
                LogTrace("===== PerformLogging 성공적으로 완료 =====");
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! PerformLogging에서 예외 발생 !!!!!\n{ex}");
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                if (autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Stop();
                btnStart.Content = "로깅 시작";
                var sb = new StringBuilder();
                sb.AppendLine("캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.");
                sb.AppendLine("==============================================");
                sb.AppendLine($"[진단 정보]");
                sb.AppendLine($"전체 창 크기: {bmpSize.Width} x {bmpSize.Height}");
                sb.AppendLine($"잘라낼 영역 (X,Y,W,H): {cropArea.X}, {cropArea.Y}, {cropArea.Width}, {cropArea.Height}");
                sb.AppendLine("==============================================");
                Exception currentEx = ex;
                int indentLevel = 0;
                while (currentEx != null)
                {
                    sb.AppendLine($"\n[오류 레벨 {indentLevel}] {(indentLevel == 1 ? "(진짜 원인일 가능성이 높음)" : "")}");
                    sb.AppendLine($"  - 오류 유형: {currentEx.GetType().Name}");
                    sb.AppendLine($"  - 메시지: {currentEx.Message}");
                    sb.AppendLine($"  - 스택 트레이스:\n{currentEx.StackTrace}");
                    currentEx = currentEx.InnerException;
                    indentLevel++;
                }
                MessageBox.Show(sb.ToString(), "캡처 상세 오류 보고", MessageBoxButton.OK, MessageBoxImage.Error);
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        private void ProcessOcrResult(string rawText) 
        {
            LogTrace($"ProcessOcrResult: 원본 텍스트='{rawText}'");
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 2) { LogTrace($"ProcessOcrResult: 값 분리 오류, {parts.Length}개 분리됨."); lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)"; return; }
            
            string part1String = parts[0];
            string part2String = parts[1];

            if (!part1String.Contains(".") && part1String.Length >= 2)
            {
                part1String = part1String.Insert(part1String.Length - 1, ".");
                LogTrace($"ProcessOcrResult: part1 자동 소수점 추가 -> '{part1String}' (원본: '{parts[0]}')");
            }
            else if (!part1String.Contains(".") && part1String.Length == 1)
            {
                LogTrace($"ProcessOcrResult: part1 한 자리 숫자 확인 -> '{part1String}' (원본: '{parts[0]}')");
            }

            if (!part2String.Contains(".") && part2String.Length >= 2)
            {
                part2String = part2String.Insert(part2String.Length - 1, ".");
                LogTrace($"ProcessOcrResult: part2 자동 소수점 추가 -> '{part2String}' (원본: '{parts[1]}')");
            }
            else if (!part2String.Contains(".") && part2String.Length == 1)
            {
                 LogTrace($"ProcessOcrResult: part2 한 자리 숫자 확인 -> '{part2String}' (원본: '{parts[1]}')");
            }

            if (decimal.TryParse(part1String, out decimal val1) && decimal.TryParse(part2String, out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                LogTrace($"ProcessOcrResult: 숫자 변환 성공. temp={temp}, humid={humid}. DB 업로드 시작.");
                UploadToDatabase(temp, humid);
            }
            else { LogTrace($"ProcessOcrResult: 숫자 변환 실패. parts[0]='{part1String}', parts[1]='{part2String}'"); lblStatus.Text = $"상태: 숫자 변환 오류 ({part1String},{part2String})"; }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName)) { LogTrace("UploadToDatabase: PC 이름 없음. 건너뜀."); lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다."; return; }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;"; // 실제 정보로 변경 필요
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                LogTrace($"UploadToDatabase: DB 연결 시도 시작. PC={pcName}, T={temp}, H={humid}. 연결 문자열: {connectionString.Substring(0, connectionString.IndexOf("Pwd=") + 4)}******");
                LogTrace("UploadToDatabase: MySqlConnection 객체 생성 시도...");
                conn = new MySqlConnection(connectionString);
                LogTrace("UploadToDatabase: MySqlConnection 객체 생성 성공.");
                LogTrace("UploadToDatabase: conn.Open() 호출 시도...");
                conn.Open();
                LogTrace("UploadToDatabase: conn.Open() 호출 성공. DB 연결 성공.");
                LogTrace("UploadToDatabase: 트랜잭션 시작 시도...");
                trans = conn.BeginTransaction();
                LogTrace("UploadToDatabase: 트랜잭션 시작 성공.");
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.Clear();
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 실행.");
                    rowsAffected = cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 완료. 영향받은 행: {rowsAffected}");
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 실행.");
                    cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 완료.");
                }
                trans.Commit();
                LogTrace("UploadToDatabase: 트랜잭션 커밋 성공.");
                if (rowsAffected > 0) { lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!"; }
                else { lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)"; }
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! UploadToDatabase (실행 단계)에서 예외 발생 !!!!!\n{ex.ToString()}");
                try { trans?.Rollback(); LogTrace("UploadToDatabase: 예외 발생으로 트랜잭션 롤백 시도."); } 
                catch (Exception exRollback) { LogTrace($"UploadToDatabase: 트랜잭션 롤백 중 예외 발생: {exRollback.Message}"); }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                if (conn != null && conn.State != System.Data.ConnectionState.Closed)
                { LogTrace("UploadToDatabase: DB 연결 종료 시도..."); conn.Close(); LogTrace("UploadToDatabase: DB 연결 종료 완료."); }
                else { LogTrace("UploadToDatabase: DB 연결이 없거나 이미 닫혀있음."); }
            }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd == IntPtr.Zero) { MessageBox.Show("먼저 유효한 '대상 창/프로세스 이름'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                LogTrace($"btnSelectArea_Click: 새 영역 설정 - X={txtX.Text}, Y={txtY.Text}, W={txtWidth.Text}, H={txtHeight.Text}");
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                LogTrace("UpdatePreviewImage: 미리보기 업데이트 시작.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) { LogTrace("UpdatePreviewImage: 대상 핸들 없음."); return; }
                if (IsIconic(hWnd)) { LogTrace("UpdatePreviewImage: 대상 최소화됨."); MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); imgPreview.Source = null; return; }
                if (!int.TryParse(txtX.Text, out int capX) || !int.TryParse(txtY.Text, out int capY) || !int.TryParse(txtWidth.Text, out int capW) || !int.TryParse(txtHeight.Text, out int capH) || capW <= 0 || capH <= 0)
                { LogTrace("UpdatePreviewImage: 캡처 좌표/크기 값이 유효하지 않음."); imgPreview.Source = null; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"UpdatePreviewImage: 유효하지 않은 창 크기({width}x{height})."); return; }
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    var cropArea = new Gdi.Rectangle(capX, capY, capW, capH);
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    { LogTrace($"UpdatePreviewImage: 오류! 미리보기 캡처 영역이 창 크기를 벗어남. bmp=({bmp.Width}x{bmp.Height}), crop=({cropArea.X},{cropArea.Y} {cropArea.Width}x{cropArea.Height})."); imgPreview.Source = null; MessageBox.Show("미리보기를 위한 캡처 영역이 창 크기를 벗어났습니다. 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) { imgPreview.Source = BitmapToImageSource(croppedBmp); croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png); LogTrace($"UpdatePreviewImage: 미리보기 이미지 저장 완료 - {previewImagePath}"); }
                }
            }
            catch (Exception ex) { LogTrace($"!!!!! UpdatePreviewImage에서 예외 발생 !!!!!\n{ex}");}
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }
}
&lt;/details>

확인 요청
이 코드로 교체 후, 프로그램을 실행하고 이전과 동일하게 **"프로세스는 있는데 못 찾는 현상"**을 재현해 주십시오.

그다음, C:\Agent\funcenvget\logs\trace_log.txt 파일의 내용을 다시 한번 확인 부탁드립니다. 특히 아래 로그들이 어떻게 찍히는지 알려주시면 원인 파악에 큰 도움이 됩니다.

GetTargetWindowHandle 함수 내부의 로그들 (프로세스 이름으로 찾을 때)
GetTargetWindowHandle: 'InlineTesterPBA' 이름으로 N개의 프로세스 찾음.
GetTargetWindowHandle: 프로세스 ID X (InlineTesterPBA...) 검사 중, MainWindowHandle: YYY (여기서 YYY가 0인지, 아니면 다른 값인지)
GetTargetWindowHandle: ... 유효한 MainWindowHandle을 가진 프로세스가 없음... (이 로그가 찍힌다면, 프로세스는 있지만 캡처할 창이 없다는 의미입니다.)
AutoDetectProcessTimer_Tick 함수 내부의 로그들
AutoDetectProcessTimer Tick: 'InlineTesterPBA'로 시작하는 단일 프로세스 발견! 이름: '실제프로세스명'