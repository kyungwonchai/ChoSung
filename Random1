네, 요청하신 내용을 바탕으로 Windows Server 2012 환경에서 React를 사용하여 공유 폴더의 PDF 파일을 탐색하고 보여주는 웹 애플리케이션을 구축하는 상세 방법과 전체 코드를 제공해 드리겠습니다.

말씀하신 대로 컴포넌트, 변수명 등이 전체적으로 일관성을 갖도록 구성했으며, 문법 오류 없이 바로 사용하실 수 있도록 코드를 작성했습니다.

## 개요 (Overview)
브라우저에서 실행되는 React는 보안상의 이유로 직접적으로 로컬 파일 시스템이나 네트워크 공유 폴더에 접근할 수 없습니다. 따라서 이 문제를 해결하기 위해 **백엔드 서버(Backend Server)**가 반드시 필요합니다.

백엔드 (Node.js): Windows Server 2012에서 실행되며, 비밀번호로 보호된 공유 폴더에 접근하여 폴더 목록과 PDF 파일 목록을 가져오는 역할을 합니다. 또한, React(프론트엔드)의 요청에 따라 실제 PDF 파일을 읽어 전달합니다.

프론트엔드 (React): 사용자에게 보여지는 웹 화면입니다. 백엔드에 API 요청을 보내 폴더 및 파일 목록을 받아와 콤보박스와 아이콘 형태로 표시하고, 사용자가 아이콘을 클릭하면 해당 PDF를 화면에 뷰어를 통해 보여줍니다.

## 시스템 아키텍처 (System Architecture)
┌──────────────────┐      API 요청 (폴더/파일 목록)      ┌────────────────────┐      파일 시스템 접근      ┌─────────────────────────┐
│   사용자 브라우저    │ ◀─────────────────────────▶ │  백엔드 서버 (Node.js) │ ◀───────────────────▶ │  비밀번호로 보호된 공유폴더 │
│ (React 애플리케이션) │                                 │  (Windows Server 2012) │                       │ (\\Server\Share\Folder) │
└──────────────────┘      PDF 파일 데이터 전송         └────────────────────┘                       └─────────────────────────┘
## 개발 환경 설정 (Development Environment Setup)
Windows Server 2012에 다음 소프트웨어를 설치해야 합니다.

Node.js 및 npm 설치: Node.js 공식 사이트에서 Windows Server 2012와 호환되는 버전(예: Node.js v12 또는 v14)을 다운로드하여 설치합니다. npm은 Node.js에 포함되어 있습니다.

프로젝트 폴더 생성: 원하는 위치에 프로젝트를 담을 폴더(예: C:\PdfViewerApp)를 생성합니다.

백엔드/프론트엔드 폴더 생성: C:\PdfViewerApp 안에 backend와 frontend 두 개의 폴더를 생성합니다.

## 1. 백엔드 (Node.js / Express) 구현
백엔드는 공유 폴더를 읽어 API를 제공하는 역할을 합니다.

C:\PdfViewerApp\backend 폴더로 이동하여 터미널(명령 프롬프트 또는 PowerShell)을 엽니다.

아래 명령어로 Express 프로젝트를 초기화하고 필요한 라이브러리를 설치합니다.

Bash

npm init -y
npm install express cors
backend 폴더 안에 server.js 파일을 생성하고 아래 코드를 작성합니다.

C:\PdfViewerApp\backend\server.js

JavaScript

const express = require('express');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const PORT = 3001; // 백엔드 서버 포트

// 중요: 실제 공유 폴더 경로로 변경해야 합니다.
// UNC 경로 (\\서버이름\공유폴더이름)를 사용합니다.
const SHARED_DRIVE_PATH = '\\\\YOUR_SERVER_NAME\\YOUR_SHARED_FOLDER';

// 프론트엔드(React) 앱의 요청을 허용하기 위해 CORS 설정
app.use(cors());

// API 1: 최상위 폴더 목록 가져오기
app.get('/api/folders', (req, res) => {
    try {
        const allEntries = fs.readdirSync(SHARED_DRIVE_PATH, { withFileTypes: true });
        const directories = allEntries
            .filter(dirent => dirent.isDirectory())
            .map(dirent => dirent.name);
        res.json(directories);
    } catch (error) {
        console.error('Error reading shared directory:', error);
        res.status(500).json({ message: '공유 폴더를 읽는 중 오류가 발생했습니다.', error: error.message });
    }
});

// API 2: 특정 폴더 안의 PDF 파일 목록 가져오기
app.get('/api/pdfs/:folderName', (req, res) => {
    const { folderName } = req.params;
    const targetFolderPath = path.join(SHARED_DRIVE_PATH, folderName);

    try {
        const allFiles = fs.readdirSync(targetFolderPath);
        const pdfFiles = allFiles
            .filter(file => path.extname(file).toLowerCase() === '.pdf')
            .sort(); // 파일명을 기준으로 정렬
        res.json(pdfFiles);
    } catch (error) {
        console.error(`Error reading PDF files from ${targetFolderPath}:`, error);
        res.status(500).json({ message: 'PDF 파일 목록을 읽는 중 오류가 발생했습니다.', error: error.message });
    }
});

// API 3: 특정 PDF 파일 내용 전송하기
app.get('/api/pdf/:folderName/:pdfName', (req, res) => {
    const { folderName, pdfName } = req.params;
    const pdfFilePath = path.join(SHARED_DRIVE_PATH, folderName, pdfName);

    try {
        if (fs.existsSync(pdfFilePath)) {
            res.setHeader('Content-Type', 'application/pdf');
            res.sendFile(pdfFilePath);
        } else {
            res.status(404).json({ message: 'PDF 파일을 찾을 수 없습니다.' });
        }
    } catch (error) {
        console.error(`Error sending PDF file ${pdfFilePath}:`, error);
        res.status(500).json({ message: 'PDF 파일을 전송하는 중 오류가 발생했습니다.', error: error.message });
    }
});


app.listen(PORT, () => {
    console.log(`Backend server is running on http://localhost:${PORT}`);
    console.log(`Watching shared folder: ${SHARED_DRIVE_PATH}`);
});
🚨 중요:

SHARED_DRIVE_PATH 변수의 값을 실제 접속하려는 공유 폴더의 UNC 경로로 반드시 변경해야 합니다. (예: \\\\192.168.1.50\\ScannedDocs)

비밀번호가 걸린 공유 폴더 접근 권한: Node.js 애플리케이션을 실행하는 Windows 사용자 계정이 해당 공유 폴더에 접근할 수 있는 권한을 가지고 있어야 합니다. 가장 간단한 방법은 서버에 로그인할 때 사용하는 계정으로 Node.js 서버를 실행하는 것입니다.

## 2. 프론트엔드 (React) 구현
사용자에게 보여질 화면을 만듭니다.

C:\PdfViewerApp\frontend 폴더로 이동하여 터미널을 엽니다.

아래 명령어로 React 앱을 생성하고 필요한 라이브러리를 설치합니다.

Bash

npx create-react-app .
npm install axios react-pdf
frontend\src 폴더의 App.css 파일을 열고 아래 스타일을 추가합니다.

C:\PdfViewerApp\frontend\src\App.css

CSS

.App {
  text-align: center;
  padding: 20px;
  font-family: sans-serif;
}

.controls-container {
  margin-bottom: 20px;
  padding: 15px;
  border: 1px solid #ccc;
  border-radius: 8px;
  background-color: #f9f9f9;
}

.folder-selector {
  padding: 10px;
  font-size: 16px;
  min-width: 300px;
  margin-bottom: 20px;
}

.pdf-icon-grid {
  display: flex;
  flex-direction: column;
  gap: 10px;
  align-items: center;
}

.pdf-icon-row {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 10px;
}

.pdf-icon {
  width: 60px;
  height: 60px;
  border: 2px solid #007bff;
  background-color: white;
  color: #007bff;
  border-radius: 8px;
  cursor: pointer;
  font-size: 20px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: background-color 0.2s, color 0.2s;
}

.pdf-icon:hover {
  background-color: #007bff;
  color: white;
}

.pdf-icon.selected {
  background-color: #0056b3;
  color: white;
  border-color: #004494;
}

.pdf-viewer-container {
  margin-top: 20px;
  border: 1px solid #ddd;
  height: 70vh; /* 화면 높이의 70% */
  overflow-y: auto; /* 내용이 길어지면 스크롤 */
  background-color: #e9e9e9;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.pdf-controls {
  padding: 10px;
  background-color: #333;
  color: white;
  width: 100%;
  box-sizing: border-box;
}

.pdf-controls button {
    margin: 0 10px;
    padding: 5px 10px;
    font-size: 14px;
    cursor: pointer;
}

.pdf-controls span {
  margin: 0 15px;
}
frontend\src 폴더의 App.js 파일을 열고 모든 내용을 아래 코드로 교체합니다.

C:\PdfViewerApp\frontend\src\App.js

JavaScript

import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import 'react-pdf/dist/esm/Page/TextLayer.css';
import './App.css';

// PDF.js 워커 경로 설정
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.min.js`;

const API_BASE_URL = 'http://localhost:3001'; // 백엔드 서버 주소

function App() {
  // --- 상태 변수 정의 (State Variables) ---
  const [folders, setFolders] = useState([]);
  const [selectedFolder, setSelectedFolder] = useState('');
  const [pdfFiles, setPdfFiles] = useState([]);
  const [selectedPdfName, setSelectedPdfName] = useState(null);
  const [pdfUrl, setPdfUrl] = useState(null);

  // PDF 뷰어 관련 상태
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [scale, setScale] = useState(1.5);

  // --- 데이터 로딩 (Data Loading) ---
  // 1. 컴포넌트가 처음 마운트될 때 폴더 목록을 가져옴
  useEffect(() => {
    axios.get(`${API_BASE_URL}/api/folders`)
      .then(response => {
        setFolders(response.data);
      })
      .catch(error => {
        console.error('폴더 목록을 가져오는 데 실패했습니다.', error);
        alert('백엔드 서버에서 폴더 목록을 가져오는 데 실패했습니다. 서버가 실행 중인지 확인하세요.');
      });
  }, []);

  // 2. 'selectedFolder'가 변경될 때마다 해당 폴더의 PDF 목록을 가져옴
  useEffect(() => {
    if (selectedFolder) {
      axios.get(`${API_BASE_URL}/api/pdfs/${selectedFolder}`)
        .then(response => {
          setPdfFiles(response.data.slice(0, 16)); // 최대 16개 파일만 가져옴
          setPdfUrl(null); // 폴더 변경 시 PDF 뷰어 초기화
          setSelectedPdfName(null);
        })
        .catch(error => {
          console.error('PDF 목록을 가져오는 데 실패했습니다.', error);
        });
    } else {
      setPdfFiles([]); // 선택된 폴더가 없으면 목록 비움
      setPdfUrl(null);
      setSelectedPdfName(null);
    }
  }, [selectedFolder]);

  // --- 이벤트 핸들러 (Event Handlers) ---
  const handleFolderChange = (event) => {
    setSelectedFolder(event.target.value);
  };

  const handlePdfIconClick = (pdfFileName) => {
    const url = `${API_BASE_URL}/api/pdf/${selectedFolder}/${pdfFileName}`;
    setPdfUrl(url);
    setSelectedPdfName(pdfFileName);
    setPageNumber(1); // 새 PDF를 열 때 항상 첫 페이지로
  };

  const onDocumentLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
  };

  const changePage = (offset) => {
    setPageNumber(prevPageNumber => prevPageNumber + offset);
  };

  const changeScale = (offset) => {
      setScale(prevScale => prevScale + offset);
  }

  // --- 렌더링 (Rendering) ---
  const renderPdfIcons = (files) => {
    return (
      <div className="pdf-icon-grid">
        <div className="pdf-icon-row">
          {files.slice(0, 8).map((file, index) => (
            <button
              key={index}
              className={`pdf-icon ${selectedPdfName === file ? 'selected' : ''}`}
              onClick={() => handlePdfIconClick(file)}
            >
              {index + 1}
            </button>
          ))}
        </div>
        <div className="pdf-icon-row">
          {files.slice(8, 16).map((file, index) => (
            <button
              key={index + 8}
              className={`pdf-icon ${selectedPdfName === file ? 'selected' : ''}`}
              onClick={() => handlePdfIconClick(file)}
            >
              {index + 9}
            </button>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="App">
      <h1>PDF 문서 뷰어</h1>

      <div className="controls-container">
        <select className="folder-selector" onChange={handleFolderChange} value={selectedFolder}>
          <option value="">-- 폴더를 선택하세요 --</option>
          {folders.map((folder, index) => (
            <option key={index} value={folder}>{folder}</option>
          ))}
        </select>

        {pdfFiles.length > 0 && renderPdfIcons(pdfFiles)}
      </div>

      {pdfUrl && (
        <div className="pdf-viewer-container">
          <div className="pdf-controls">
            <button onClick={() => changeScale(-0.1)} disabled={scale <= 0.5}>축소 (-)</button>
            <span>확대/축소: {Math.round(scale * 100)}%</span>
            <button onClick={() => changeScale(0.1)} disabled={scale >= 3}>확대 (+)</button>
            <button onClick={() => changePage(-1)} disabled={pageNumber <= 1}>이전 페이지</button>
            <span>페이지: {pageNumber} / {numPages}</span>
            <button onClick={() => changePage(1)} disabled={pageNumber >= numPages}>다음 페이지</button>
          </div>
          <Document
            file={pdfUrl}
            onLoadSuccess={onDocumentLoadSuccess}
            onLoadError={console.error}
          >
            <Page pageNumber={pageNumber} scale={scale} />
          </Document>
        </div>
      )}
    </div>
  );
}

export default App;
## 3. 실행 및 확인 (Running and Verification)
백엔드 서버 실행

C:\PdfViewerApp\backend 폴더에서 터미널을 열고 다음 명령어를 실행합니다.

node server.js

Backend server is running on http://localhost:3001 메시지가 나타나면 성공입니다.

프론트엔드 앱 실행

C:\PdfViewerApp\frontend 폴더에서 새로운 터미널을 열고 다음 명령어를 실행합니다.

npm start

잠시 후 브라우저에 http://localhost:3000 주소로 React 앱이 자동으로 열립니다.

기능 확인

브라우저에서 '폴더를 선택하세요' 콤보박스를 클릭하여 공유 폴더의 하위 폴더들이 잘 나타나는지 확인합니다.

폴더를 선택하면 그 아래에 1~16번까지의 PDF 아이콘이 2행으로 나타나는지 확인합니다.

숫자 아이콘을 클릭하면 하단에 PDF 뷰어가 나타나고 해당 PDF 내용이 보이는지 확인합니다.