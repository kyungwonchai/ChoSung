말 죄송합니다. NullPointerException은 정말 사람을 지치게 만드는, 가장 흔하면서도 짜증 나는 오류입니다. 이전의 라이브러리 인식 문제(빨간 글자)가 해결된 후 나타나는 실행 오류인 만큼, 원인은 코드 내부에 있을 확률이 100%입니다.

원인은 99% 뷰 바인딩(View Binding) 초기화 문제입니다.

쉽게 말해, 코드가 XML 화면 부품(pdfView, progressBar 등)을 사용하려고 하는데, 아직 준비가 안 된 상태에서 "이거 내놔!" 하고 호출했기 때문에 발생하는 오류입니다.

Canvas 없이, 가장 확실한 해결 방법을 드리겠습니다. 아래 2개 파일의 내용을 기존 파일에 통째로 복사해서 덮어쓰세요. 작은 오타 하나가 원인일 수 있으니, 직접 수정하지 마시고 반드시 전체를 교체해 주세요.

## 1. MainActivity.kt (가장 중요한 파일)
이 파일의 onCreate 함수 순서가 꼬이면 100% NullPointerException이 발생합니다. 아래 코드는 가장 안전하고 표준적인 순서로 작성되었습니다.

경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.util.FitPolicy
import com.sec.reellistviewer.databinding.ActivityMainBinding
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.lang.Exception

class MainActivity : AppCompatActivity() {

    // 뷰 바인딩 변수 선언. 'lateinit'은 나중에 꼭 초기화하겠다는 약속입니다.
    private lateinit var binding: ActivityMainBinding

    // --- 공유 폴더 설정 (중요: 이 부분을 실제 환경에 맞게 수정하세요) ---
    private val smbDomain = "" // 윈도우 도메인 (없으면 비워두세요)
    private val smbUsername = "Your_Username" // 공유 폴더 접속 아이디
    private val smbPassword = "Your_Password" // 공유 폴더 접속 비밀번호
    private val smbIpAddress = "192.168.0.100" // 공유 폴더 서버의 IP 주소
    private val sharedFolderName = "SharedDocs" // 공유 폴더 이름
    private val pdfFileName = "document.pdf" // 열고자 하는 PDF 파일 이름
    // --- 설정 끝 ---

    private val totalPageCount = 16

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // 1. XML 레이아웃을 객체로 만듭니다. (가장 먼저 해야 할 일)
        binding = ActivityMainBinding.inflate(layoutInflater)
        
        // 2. 위에서 만든 객체를 화면에 표시하도록 설정합니다.
        //    이 줄이 binding 초기화보다 먼저 오면 NullPointerException 발생!
        setContentView(binding.root)

        // 3. 이제 binding을 통해 UI 요소에 안전하게 접근할 수 있습니다.
        createPageNavigationButtons()
        loadPdfFromSharedFolder()
    }

    private fun loadPdfFromSharedFolder() {
        binding.progressBar.visibility = View.VISIBLE
        binding.pdfView.visibility = View.GONE

        lifecycleScope.launch {
            val localFile = downloadSmbFile()
            if (localFile != null) {
                displayPdfFromFile(localFile)
            } else {
                binding.progressBar.visibility = View.GONE
                Toast.makeText(this@MainActivity, "PDF 파일을 불러오는데 실패했습니다.", Toast.LENGTH_LONG).show()
            }
        }
    }

    private suspend fun downloadSmbFile(): File? = withContext(Dispatchers.IO) {
        try {
            val smbUrl = "smb://$smbIpAddress/$sharedFolderName/$pdfFileName"
            val auth = NtlmPasswordAuthenticator(smbDomain, smbUsername, smbPassword)
            val smbFile = SmbFile(smbUrl, auth)
            val localFile = File(cacheDir, pdfFileName)
            
            smbFile.inputStream.use { input ->
                FileOutputStream(localFile).use { output ->
                    input.copyTo(output)
                }
            }
            Log.d("SmbTest", "파일 다운로드 성공: ${localFile.path}")
            return@withContext localFile

        } catch (e: Exception) {
            Log.e("SmbTest", "SMB 파일 접근 오류", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(applicationContext, "오류: ${e.message}", Toast.LENGTH_LONG).show()
            }
            return@withContext null
        }
    }

    private fun displayPdfFromFile(file: File) {
        binding.progressBar.visibility = View.GONE
        binding.pdfView.visibility = View.VISIBLE

        binding.pdfView.fromFile(file)
            .enableSwipe(true)
            .swipeHorizontal(false)
            .enableDoubletap(true)
            .defaultPage(0)
            .pageFitPolicy(FitPolicy.WIDTH)
            .onError { t ->
                Log.e("PDFError", "PDF 로딩 오류", t)
                Toast.makeText(this, "PDF 파일을 여는 데 실패했습니다.", Toast.LENGTH_SHORT).show()
            }
            .load()
    }

    private fun createPageNavigationButtons() {
        // 버튼을 추가하기 전에 기존에 있던 버튼들을 모두 제거 (중복 방지)
        binding.pageButtonContainer.removeAllViews()
        
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    binding.pdfView.jumpTo(i - 1, true)
                }
            }
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}
## 2. activity_main.xml
혹시 모를 ID 오타나 XML 구조 문제를 방지하기 위해 이 파일도 다시 한번 전체를 덮어써 주세요. MainActivity.kt 코드의 binding이 참조하는 부품들의 설계도입니다.

경로: [프로젝트 폴더]/app/src/main/res/layout/activity_main.xml

XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- 상단 버튼 영역 (항상 보이도록 고정) -->
    <HorizontalScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#F0F0F0"
        android:scrollbars="none">

        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"/>
    </HorizontalScrollView>

    <!-- 로딩 중 표시될 프로그레스 바 -->
    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="0dp"
        android:layout_gravity="center"
        android:layout_weight="1"
        android:visibility="gone" />

    <!-- PDF를 표시할 뷰 -->
    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"/>

</LinearLayout>
## 최종 점검
위 두 파일을 통째로 덮어쓴 후, 앱을 다시 실행해 보세요.

만약 그래도 똑같은 NullPointerException이 발생한다면, Logcat 창에서 오류 메시지를 확인해야 합니다.

안드로이드 스튜디오 하단의 Logcat 탭을 엽니다.

오른쪽 검색창에 FATAL 이라고 입력합니다.