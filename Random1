루투스 스캐너에서 읽은 데이터를 특정한 다른 APK의 입력창에 자동으로 넣기 위해서는 Android의 접근성(Accessibility) API를 활용하는 것이 좋습니다. 이를 통해 다른 앱의 UI 요소에 접근하고 값을 설정할 수 있습니다.

다음은 접근성 서비스를 사용하여 블루투스 스캐너에서 읽은 데이터를 다른 앱의 입력 창에 자동으로 넣는 방법을 설명하는 예제입니다.

1. 프로젝트 설정
새로운 Android 프로젝트를 생성하고, 접근성 서비스를 사용하기 위해 필요한 설정을 추가합니다.

2. AndroidManifest.xml 설정
접근성 서비스 권한을 추가합니다.

xml
코드 복사
<uses-permission android:name="android.permission.BLUETOOTH"/>
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
<uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>
3. 접근성 서비스 클래스 작성
다른 앱의 UI 요소에 접근하기 위해 접근성 서비스 클래스를 작성합니다.

MyAccessibilityService.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.accessibilityservice.AccessibilityService
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class MyAccessibilityService : AccessibilityService() {

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // 이벤트 처리
    }

    override fun onInterrupt() {
        // 인터럽트 처리
    }

    fun setTextToInputField(packageName: String, text: String) {
        val rootNode = rootInActiveWindow ?: return
        val nodeList = ArrayList<AccessibilityNodeInfo>()
        findNodesByText(rootNode, packageName, nodeList)

        for (node in nodeList) {
            if (node.className == "android.widget.EditText") {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,
                    text
                )
                node.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
            }
        }
    }

    private fun findNodesByText(
        node: AccessibilityNodeInfo,
        packageName: String,
        nodeList: ArrayList<AccessibilityNodeInfo>
    ) {
        if (node.packageName == packageName) {
            nodeList.add(node)
        }
        for (i in 0 until node.childCount) {
            findNodesByText(node.getChild(i), packageName, nodeList)
        }
    }
}
4. 접근성 서비스 설정
접근성 서비스를 설정하기 위해 res/xml 폴더에 accessibility_service_config.xml 파일을 추가합니다.

res/xml/accessibility_service_config.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name"
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
5. AndroidManifest.xml에 접근성 서비스 추가
접근성 서비스를 선언합니다.

xml
코드 복사
<service
    android:name=".MyAccessibilityService"
    android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
    <intent-filter>
        <action android:name="android.accessibilityservice.AccessibilityService" />
    </intent-filter>
    <meta-data
        android:name="android.accessibilityservice"
        android:resource="@xml/accessibility_service_config" />
</service>
6. MainActivity.kt에서 블루투스 데이터 처리
블루투스 데이터를 읽고 접근성 서비스를 통해 다른 앱의 입력 창에 넣습니다.

kotlin
코드 복사
package com.example.btscannerapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : AppCompatActivity() {

    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
요약
블루투스 데이터를 읽고 처리하는 기능을 구현합니다.
접근성 서비스를 통해 다른 앱의 입력 창에 데이터를 넣는 기능을 구현합니다.
프로젝트 설정과 필요한 권한을 추가합니다.
이 예제는 블루투스 스캐너에서 읽은 데이터를 다른 앱의 입력 창에 자동으로 넣는 방법을 보여줍니다. 실제로 구현할 때는 타겟 앱의 패키지 이름과 UI 구조에 따라 접근성 서비스 코드를 조정해야 합니