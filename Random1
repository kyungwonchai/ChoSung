public partial class TaskModel
{
    // NG 여부를 저장하는 변수
    public bool IsNG { get; private set; }

    public TaskModel(PLCClass plcInstance)
    {
        FunctionStatusList = new ObservableCollection<FunctionStatus>();
        Status = "Pending";
        _stopwatch = new Stopwatch();
        InitializeFunctions(1);  // 예시로 SequenceFlag = 1
        IsNG = false;  // NG 상태 초기화
    }

    // 작업 시작
    public async Task StartTask()
    {
        _stopwatch.Restart();  // 전체 작업 시간 기록 시작
        Status = "Running";
        IsNG = false;  // 작업 시작 시 NG 상태 초기화

        await ExecuteTaskSequence();  // 작업 순차 실행

        Status = IsNG ? "Failed" : "Completed";  // NG 처리 여부에 따라 상태 결정
        TotalSeconds = (int)_stopwatch.Elapsed.TotalSeconds;
        _stopwatch.Stop();  // 전체 작업 종료 시간 기록
    }

    // 작업 순차 실행
    private async Task ExecuteTaskSequence()
    {
        foreach (var functionStatus in FunctionStatusList)
        {
            if (IsNG)  // NG 상태이면 더 이상 실행하지 않음
            {
                break;
            }

            Stopwatch functionStopwatch = new Stopwatch();
            functionStopwatch.Start();

            bool isSuccess = await ExecuteTaskWithColor(FunctionStatusList.IndexOf(functionStatus), functionStatus.Task);

            functionStopwatch.Stop();
            functionStatus.ExecutionTime = $"{functionStopwatch.Elapsed.TotalSeconds:F2} seconds";

            // 타임아웃 처리 (예: 5초 초과 시 NG 처리)
            if (functionStopwatch.Elapsed.TotalSeconds > 5 || !isSuccess)
            {
                IsNG = true;  // NG 처리
                Status = "NG: Task Failed";
                break;
            }
        }
    }

    // 각 함수 실행 및 색상 업데이트
    private async Task<bool> ExecuteTaskWithColor(int index, Func<Task> task)
    {
        try
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusList[index].UpdateStatus(Brushes.SkyBlue);  // 작업 진행 중 색상
            });

            await task();  // 비동기 작업 실행

            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusList[index].UpdateStatus(Brushes.Green);  // 작업 완료 색상
            });

            return true;  // 성공 시 true 반환
        }
        catch (Exception)
        {
            // 작업 중 예외 발생 시 NG 처리
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusList[index].UpdateStatus(Brushes.Red);  // 작업 실패 색상
            });

            return false;  // 실패 시 false 반환
        }
    }

    // 예시 함수들 (Task A, Task B, Task C)
    private async Task ExecuteTaskA()
    {
        // Task A 비동기 작업
        await Task.Delay(1000);  // Task A 작업 (시뮬레이션)
        await _plcInstance.SendSignalAsync("Executing Task A...");

        // 응답 처리 (NG 조건 추가)
        if (!_plcInstance.IsResponseValid())
        {
            throw new Exception("Task A failed due to invalid response");
        }
    }

    private async Task ExecuteTaskB(int value)
    {
        // Task B 비동기 작업
        await Task.Delay(1500);  // Task B 작업 (시뮬레이션)
        await _plcInstance.SendSignalAsync($"Executing Task B with value {value}...");

        // 응답 처리 (NG 조건 추가)
        if (!_plcInstance.IsResponseValid())
        {
            throw new Exception("Task B failed due to invalid response");
        }
    }
}
