C#에서 private void 함수는 반환 값이 없기 때문에 직접적으로 비동기 메서드처럼 await할 수는 없습니다. 하지만, 다음과 같은 방법으로 해결할 수 있습니다:

Task를 반환하도록 수정
void 메서드를 Task 또는 Task<T> 반환 형식으로 변경하면 await 키워드를 사용할 수 있습니다.

Task.Run으로 래핑
void 메서드를 Task.Run으로 감싸서 비동기적으로 실행하고 기다릴 수 있습니다.

방법 1: Task 반환 메서드로 변경
csharp
코드 복사
private async Task FunctionAAsync()
{
    // 작업 수행
    await Task.Delay(1000); // 예: 1초 대기
    Console.WriteLine("FunctionA 실행 완료");
}

// 호출
await FunctionAAsync();
방법 2: Task.Run으로 래핑
void 메서드를 변경하지 않고 비동기로 실행하려면 Task.Run을 사용합니다.

csharp
코드 복사
private void FunctionA()
{
    // 작업 수행
    System.Threading.Thread.Sleep(1000); // 예: 1초 대기 (동기 대기)
    Console.WriteLine("FunctionA 실행 완료");
}

// 호출
await Task.Run(() => FunctionA());
방법 3: ManualResetEvent를 사용한 동기화
동기 메서드를 호출하고 기다리면서 비동기 흐름과 동기 흐름을 조합할 수도 있습니다. 다만, 이것은 일반적으로 권장되지 않습니다.

csharp
코드 복사
private void FunctionA()
{
    // 작업 수행
    System.Threading.Thread.Sleep(1000); // 예: 1초 대기
    Console.WriteLine("FunctionA 실행 완료");
}

// 호출
await Task.Run(() =>
{
    FunctionA();
});
권장 방법
가능하면 Task 또는 Task<T> 반환 메서드로 리팩터링하는 것이 좋습니다.