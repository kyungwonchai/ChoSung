le 데이터베이스에서 모든 테이블을 조회하고, 각 테이블명 앞에 'E'를 붙인 후 Excel 파일로 내보내는 기능은 SQL 쿼리만으로 직접 구현하는 것은 제한적입니다. 이 과정을 자동화하려면 여러 단계와 도구를 조합해야 합니다. PL/SQL과 Oracle SQL Developer를 사용하는 방법을 소개하겠습니다.

방법 1: PL/SQL과 SQL*Plus 사용
PL/SQL 스크립트 작성: 이 스크립트는 모든 테이블을 돌면서 각 테이블 데이터를 CSV 파일로 내보냅니다. 각 CSV 파일의 이름은 테이블명 앞에 'E'가 붙은 형태로 저장됩니다.
sql
코드 복사
DECLARE
  CURSOR table_cur IS SELECT table_name FROM user_tables;
BEGIN
  FOR t IN table_cur LOOP
    DECLARE
      file_name VARCHAR2(255);
      file_handle UTL_FILE.file_type;
    BEGIN
      file_name := 'C:\Agent\E' || t.table_name || '.csv';
      file_handle := UTL_FILE.fopen('C:\Agent', file_name, 'w');
      
      FOR r IN (SELECT * FROM t.table_name) LOOP
        -- CSV 형식으로 데이터 작성 필요: 각 열 데이터를 콤마로 구분하여 출력
        UTL_FILE.put_line(file_handle, r.column1 || ',' || r.column2); -- 열 명세를 실제 테이블 열에 맞춰 수정
      END LOOP;
      
      UTL_FILE.fclose(file_handle);
    EXCEPTION
      WHEN OTHERS THEN
        UTL_FILE.fclose(file_handle);
    END;
  END LOOP;
END;
참고: 위 스크립트는 개념적인 예제이며, 실제로 각 테이블의 구조에 따라 동적 SQL을 작성하고, 모든 열 데이터를 CSV 형식으로 적절히 변환해야 합니다.

SQL*Plus를 사용하여 스크립트 실행: SQL*Plus에서 위 PL/SQL 블록을 실행하면 각 테이블 데이터가 지정된 경로에 CSV 파일로 저장됩니다.
방법 2: Oracle SQL Developer 사용
SQL Developer에서는 'Cart' 기능을 사용하여 여러 테이블을 선택하고 한 번에 다수의 Excel 파일로 내보낼 수 있습니다. 하지만, 파일명을 자동으로 변경하는 기능은 지원하지 않습니다. 이 부분은 수동으로 조정하거나 추가 스크립트를 작성하여 처리해야 합니다.

이 과정에서는 파일명 수정과 테이블당 파일 생성이 수동으로 이루어지므로, PL