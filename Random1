서 비동기로 이미지를 로드하고, 캐싱 없이 Image 컨트롤에 표시하는 예제 코드를 제공하겠습니다. 이 방법은 UI 스레드를 차단하지 않으면서 이미지를 로드하고 표시하는 데 유용합니다.
XAML 구성

먼저, XAML에서 Image 컨트롤을 정의합니다.

xml

<Window ...
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Image Name="MyImage"/>
    </Grid>
</Window>

C# Code-Behind

이제 C# 코드 비하인드에서 비동기 방식으로 이미지를 로드하고 Image 컨트롤에 표시하는 코드를 작성합니다.

csharp

using System;
using System.Net.Http;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Media.Imaging;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        LoadImageAsync("http://example.com/image.jpg");
    }

    private async void LoadImageAsync(string imageUrl)
    {
        try
        {
            var bitmapImage = new BitmapImage();
            bitmapImage.BeginInit();
            bitmapImage.CacheOption = BitmapCacheOption.None;
            bitmapImage.UriSource = new Uri(imageUrl);
            bitmapImage.EndInit();

            await bitmapImage.DownloadCompletedAsync();
            
            MyImage.Source = bitmapImage;
        }
        catch (Exception ex)
        {
            // 예외 처리 로직
            MessageBox.Show("이미지 로드 중 오류 발생: " + ex.Message);
        }
    }
}

이 코드는 다음과 같이 작동합니다:

    LoadImageAsync 메서드는 이미지 URL을 받아 BitmapImage 객체를 초기화합니다.
    CacheOption을 BitmapCacheOption.None으로 설정하여 이미지 캐싱을 방지합니다.
    BitmapImage.DownloadCompletedAsync 메서드를 사용하여 이미지 다운로드가 완료될 때까지 비동기적으로 대기합니다.
    이미지 다운로드가 완료되면, 해당 이미지를 Image 컨트롤의 소스로 설정합니다.

이 방법은 네트워크 또는 디스크에서 이미지를 비동기적으로 로드할 때 유용합니다.