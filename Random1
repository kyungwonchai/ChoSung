하는 방법입니다. 한번 설정해두면 비밀번호 없이 안전하게 접속할 수 있습니다. (SSH 키 설정법은 4번 항목을 참고하세요.)

아래 코드는 원격 접속 및 명령어 실행 부분을 함수(execute_ssh_command)로 만들어, 언제든 다른 명령어와 정보로 재사용하기 쉽게 구성했습니다.

Python

import paramiko
import os

def execute_ssh_command(hostname, port, username, key_filepath, command):
    """
    SSH 키를 사용하여 원격 서버에 접속하고 명령어를 실행합니다.

    :param hostname: (str) 접속할 서버의 IP 주소 또는 도메인
    :param port: (int) SSH 포트 (기본값: 22)
    :param username: (str) 사용자 이름
    :param key_filepath: (str) 개인 SSH 키 파일의 경로 (예: ~/.ssh/id_rsa)
    :param command: (str) 실행할 명령어
    :return: (tuple) (성공 여부, 표준 출력, 표준 에러)
    """
    ssh_client = None  # finally 절에서 사용하기 위해 먼저 선언
    try:
        # 1. SSH 클라이언트 객체 생성
        ssh_client = paramiko.SSHClient()
        
        # 2. 처음 접속 시 호스트 키를 자동으로 추가하는 정책 설정
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        # 3. 개인 키 파일 경로 확장 (예: '~'를 '/home/user'로 변환)
        key_path = os.path.expanduser(key_filepath)
        
        # 4. SSH 키를 사용하여 서버에 연결
        print(f"Connecting to {hostname}...")
        ssh_client.connect(hostname=hostname,
                           port=port,
                           username=username,
                           key_filename=key_path)
        print("Connection successful!")

        # 5. 명령어 실행
        print(f"Executing command: '{command}'")
        stdin, stdout, stderr = ssh_client.exec_command(command)
        
        # 6. 실행 결과 읽기 (bytes를 utf-8 문자열로 변환)
        output = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()
        
        print("Command execution finished.")
        return (True, output, error)

    except Exception as e:
        # 예외 발생 시 에러 메시지 반환
        print(f"An error occurred: {e}")
        return (False, None, str(e))
    
    finally:
        # 7. 연결 종료 (성공/실패 여부와 관계없이 항상 실행)
        if ssh_client:
            ssh_client.close()
            print("Connection closed.")

# --- 함수 사용 예제 ---
if __name__ == "__main__":
    # --- 사용자 설정 변수 ---
    REMOTE_HOST = '192.168.0.10'  # 라즈베리파이 IP 주소
    REMOTE_PORT = 22
    REMOTE_USER = 'pi'            # 라즈베리파이 사용자 이름
    # 윈도우: 'C:/Users/사용자이름/.ssh/id_rsa'
    # 리눅스/macOS: '~/.ssh/id_rsa'
    PRIVATE_KEY_PATH = '~/.ssh/id_rsa' 
    
    # --- 실행할 명령어 ---
    COMMAND_TO_RUN = 'vcgencmd measure_temp' # 예: 라즈베리파이 온도 측정
    # COMMAND_TO_RUN = 'ls -al'
    
    # 함수 호출
    success, result_output, result_error = execute_ssh_command(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        key_filepath=PRIVATE_KEY_PATH,
        command=COMMAND_TO_RUN
    )
    
    # 결과 출력
    print("\n--- Execution Result ---")
    if success:
        print("✅ Success!")
        if result_output:
            print("[Standard Output]:")
            print(result_output)
        if result_error:
            print("[Standard Error]:")
            print(result_error)
    else:
        print("❌ Failure!")
        print(f"[Error Message]:\n{result_error}")

코드 주요 개선점
보안 강화: connect() 함수에서 password 대신 key_filename을 사용하여 SSH 키로 인증합니다.

에러 처리: try...except...finally 구문을 사용하여 접속 실패, 명령어 오류 등 예외 상황에 대비하고, 어떤 경우에도 ssh_client.close()로 연결을 확실히 종료하여 리소스를 정리합니다.

결과 구분: 명령어 실행 결과를 표준 출력(stdout)과 표준 에러(stderr)로 명확히 구분하여, 명령이 실패했을 때 원인을 파악하기 쉽습니다.

재사용성: 접속 정보와 명령어를 파라미터로 받는 함수로 만들어, 코드 수정 없이 다양한 원격 작업에 쉽게 재사용할 수 있습니다.

## 3. (참고) 비밀번호를 사용하는 간편한 방법 (보안에 취약)
🚨 이 방법은 스크립트 코드에 비밀번호가 그대로 노출되어 보안에 매우 취약합니다. 테스트 용도로만 사용하고, 실제 운영 환경에서는 절대 사용하지 마세요.

위 코드에서 ssh_client.connect() 부분만 아래와 같이 수정하면 비밀번호로 접속할 수 있습니다.

Python

# 비밀번호를 사용한 연결 (보안에 취약!)
ssh_client.connect(hostname=hostname,
                   port=port,
                   username=username,
                   password='your_password_here') # 여기에 라즈베리파이 비밀번호를 직접 입력
## 4. SSH 키 생성 및 원격 서버에 복사하기
위의 안전한 코드를 사용하려면, 코드를 실행하는 컴퓨터(로컬)에 SSH 키가 생성되어 있어야 하고, 그 키가 접속하려는 라즈베리파이(원격)에 등록되어 있어야 합니다.

1단계: SSH 키 생성 (로컬 컴퓨터에서 한 번만)
로컬 컴퓨터의 터미널(macOS/Linux) 또는 PowerShell(Windows)에서 아래 명령어를 실행합니다.

Bash

ssh-keygen -t rsa -b 4096
그러면 키를 저장할 위치와 비밀번호를 물어보는데, 그냥 Enter만 계속 눌러서 기본값으로 생성하는 것이 가장 간단합니다. (~/.ssh/ 폴더에 id_rsa(개인키)와 id_rsa.pub(공개키) 파일이 생성됩니다.)

2단계: 생성된 키를 라즈베리파이에 복사
macOS나 Linux 환경에서는 아래 명령어를 쓰는 것이 가장 편리합니다. 라즈베리파이의 비밀번호를 마지막으로 한 번 물어봅니다.

Bash

# ssh-copy-id [사용자이름]@[라즈베리파이_IP]