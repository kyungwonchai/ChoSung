import joblib
from Levenshtein import distance
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

def find_similar_parts(input_text, similarity_matrix, vectorizer):
    input_vector = vectorizer.transform([input_text])
    similarity_scores = cosine_similarity(input_vector, similarity_matrix).flatten()

    top_indices = similarity_scores.argsort()[:-11:-1]
    similar_parts = vectorizer.inverse_transform(similarity_matrix[top_indices])

    similarity_scores = [distance(input_text, part) for part in similar_parts]
    similar_parts_with_distance = sorted(zip(similarity_scores, similar_parts))

    return similar_parts_with_distance

def main():
    model_file = 'model.pkl'
    vectorizer_file = 'vectorizer.pkl'

    # 모델 파일 로드
    model_data = joblib.load(model_file)
    similarity_matrix = model_data['similarity_matrix']
    vectorizer = joblib.load(vectorizer_file)

    # 입력 받기
    input_text = input("부품코드를 입력하세요: ")

    # 유사한 부품 코드 검색
    similar_parts = find_similar_parts(input_text, similarity_matrix, vectorizer)

    # 출력
    for distance, part in similar_parts:
        print(f'{part}: {distance}')

if __name__ == '__main__':
    main()
