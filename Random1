InspectionTime 값을 string으로 처리하며, yyyy-MM-dd HH:mm:ss 형식으로 직접 설정하여 데이터베이스에 저장하도록 수정했습니다. 다음은 수정된 GetNewRows 함수입니다.

수정된 GetNewRows 함수
csharp
코드 복사
public List<Dictionary<string, object>> GetNewRows(string rootPath)
{
    var newRows = new List<Dictionary<string, object>>();
    var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

    foreach (var file in csvFiles)
    {
        using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
        {
            reader.ReadLine(); // 첫 번째 행(헤더) 무시
            while (!reader.EndOfStream)
            {
                var values = reader.ReadLine()?.Split(',');
                if (values == null || values.Length < 12) // MP5DATA와 MP5RESULT 포함 최소 12개 컬럼 확인
                {
                    Debug.WriteLine("Skipped Row: Insufficient columns.");
                    continue;
                }

                // 디버그 출력: 현재 처리 중인 행의 값을 출력
                Debug.WriteLine($"Processing Row: {string.Join(", ", values)}");

                // InspectionTime 형식을 확인 및 변환
                string inspectionTime = values[0];
                if (!DateTime.TryParseExact(inspectionTime, "yyyy-MM-dd HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out _))
                {
                    Debug.WriteLine("Skipped Row: InspectionTime is not in the valid format (yyyy-MM-dd HH:mm:ss).");
                    continue;
                }

                // 4열이 숫자(정수 또는 실수)가 아니면 제외
                if (!decimal.TryParse(values[3], out _))
                {
                    Debug.WriteLine("Skipped Row: 4th column is not a valid number.");
                    continue;
                }

                var row = new Dictionary<string, object>
                {
                    ["InspectionTime"] = inspectionTime, // 문자열로 유지
                    ["ModelName"] = values[1],
                    ["AlignResult"] = values[2],
                    ["MP1DATA"] = float.Parse(values[3]),
                    ["MP1RESULT"] = values[4],
                    ["MP2DATA"] = float.Parse(values[5]),
                    ["MP2RESULT"] = values[6],
                    ["MP3DATA"] = float.Parse(values[7]),
                    ["MP3RESULT"] = values[8],
                    ["MP4DATA"] = float.Parse(values[9]),
                    ["MP4RESULT"] = values[10],
                    ["MP5DATA"] = float.Parse(values[11]),
                    ["MP5RESULT"] = values[12],
                    ["ipname"] = _ipAddress // 현재 IP 추가
                };

                // InspectionTime 조건 검사
                if (DateTime.ParseExact(inspectionTime, "yyyy-MM-dd HH:mm:ss", null) > _lastUploadedTime)
                {
                    Debug.WriteLine("Added Row: Passed all checks.");
                    newRows.Add(row);
                }
                else
                {
                    Debug.WriteLine("Skipped Row: InspectionTime is not newer than the last uploaded time.");
                }
            }
        }
    }

    return newRows;
}
SQL 쿼리 수정
INSERT 문
InspectionTime 값을 string으로 데이터베이스에 삽입:

csharp
코드 복사
using (var command = new SqlCommand(
    @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE ipname = @ipname AND InspectionTime = @InspectionTime AND ModelName = @ModelName)
      INSERT INTO YourTable (ipname, InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, MP5DATA, MP5RESULT)
      VALUES (@ipname, @InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @MP5DATA, @MP5RESULT)", connection))
{
    command.Parameters.AddWithValue("@ipname", row["ipname"]);
    command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]); // 문자열로 삽입
    command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
    command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
    command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
    command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);
    command.Parameters.AddWithValue("@MP2DATA", row["MP2DATA"]);
    command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"]);
    command.Parameters.AddWithValue("@MP3DATA", row["MP3DATA"]);
    command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"]);
    command.Parameters.AddWithValue("@MP4DATA", row["MP4DATA"]);
    command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"]);
    command.Parameters.AddWithValue("@MP5DATA", row["MP5DATA"]);
    command.Parameters.AddWithValue("@MP5RESULT", row["MP5RESULT"]);

    await command.ExecuteNonQueryAsync();
}
수정된 디버그 로그
CSV 데이터
plaintext
코드 복사
2025-01-10 10:00:00,ModelA,Good,123.45,Result1,67.89,Result2,45.67,Result3,89.01,Result4,12.34,Result5
2025-01-09 09:00:00,ModelB,Good,N/A,Result1,67.89,Result2,45.67,Result3,89.01,Result4,12.34,Result5
디버깅 출력
plaintext
코드 복사
Processing Row: 2025-01-10 10:00:00, ModelA, Good, 123.45, Result1, 67.89, Result2, 45.67, Result3, 89.01, Result4, 12.34, Result5
Added Row: Passed all checks.
Processing Row: 2025-01-09 09:00:00, ModelB, Good, N/A, Result1, 67.89, Result2, 45.67, Result3, 89.01, Result4, 12.34, Result5
Skipped Row: 4th column is not a valid number.
변경사항 요약
InspectionTime 처리:

값은 문자열(string)로 처리.
삽입 시 yyyy-MM-dd HH:mm:ss 형식 그대로 유지.
SQL 쿼리 수정:

InspectionTime을 string으로 데이터베이스에 삽입.
디버깅 추가:
