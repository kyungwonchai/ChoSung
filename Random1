프레드시트에서 시트의 추가 또는 삭제가 발생할 때 자동으로 ListBox가 갱신되도록 하려면, 스프레드시트의 WorksheetAdded 및 WorksheetRemoved 이벤트를 사용하여 리스트박스를 업데이트할 수 있습니다. 이를 통해 사용자가 시트를 추가하거나 삭제할 때마다 리스트박스를 자동으로 갱신하게 할 수 있습니다.

아래는 시트가 추가되거나 삭제될 때마다 리스트박스를 갱신하는 코드입니다.

1. XAML 파일은 그대로 유지
XAML 파일은 이전과 동일하게 유지합니다. (SpreadsheetControl, ListBox, TabControl 등)

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="Multi Spreadsheet Sheet List Example with TabControl" Height="600" Width="1000">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="1*" />
        </Grid.ColumnDefinitions>

        <!-- TabControl to hold multiple SpreadsheetControls -->
        <TabControl x:Name="tabControl" Grid.Column="0">
            <TabItem Header="Spreadsheet 1">
                <dx:SpreadsheetControl x:Name="spreadsheetControl1"/>
            </TabItem>
            <TabItem Header="Spreadsheet 2">
                <dx:SpreadsheetControl x:Name="spreadsheetControl2"/>
            </TabItem>
        </TabControl>

        <!-- ListBox to show the names of all sheets in the spreadsheets -->
        <ListBox x:Name="sheetListBox" Grid.Column="1"
                 MouseDoubleClick="SheetListBox_MouseDoubleClick"
                 Margin="10" />
    </Grid>
</Window>
2. C# 코드 비하인드 파일 수정
C# 코드 비하인드에서 각 SpreadsheetControl에 이벤트 핸들러를 연결하여 시트 추가/삭제 시 ListBox가 갱신되도록 합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeSpreadsheetEventHandlers();
            LoadSheetNamesIntoListBox();
        }

        // SpreadsheetControl의 이벤트 핸들러를 설정하는 메소드
        private void InitializeSpreadsheetEventHandlers()
        {
            spreadsheetControl1.Document.WorksheetAdded += OnWorksheetChanged;
            spreadsheetControl1.Document.WorksheetRemoved += OnWorksheetChanged;

            spreadsheetControl2.Document.WorksheetAdded += OnWorksheetChanged;
            spreadsheetControl2.Document.WorksheetRemoved += OnWorksheetChanged;
        }

        // 시트가 추가되거나 삭제될 때 호출되는 이벤트 핸들러
        private void OnWorksheetChanged(object sender, WorksheetCollectionChangedEventArgs e)
        {
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            sheetListBox.Items.Clear(); // 기존 항목을 모두 지웁니다.

            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1", 0);
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2", 1);
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier, int tabIndex)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 및 탭 인덱스 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet, TabIndex = tabIndex };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체, TabIndex를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 해당 탭을 활성화합니다.
                    tabControl.SelectedIndex = tag.TabIndex;

                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // SpreadsheetControl, Worksheet 및 TabIndex를 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
            public int TabIndex { get; set; }
        }
    }
}
주요 수정 사항
InitializeSpreadsheetEventHandlers() 메소드 추가:

각 SpreadsheetControl에 대해 WorksheetAdded와 WorksheetRemoved 이벤트 핸들러를 설정합니다.
이 이벤트들은 시트가 추가되거나 삭제될 때 자동으로 호출됩니다.
OnWorksheetChanged() 이벤트 핸들러:

시트가 추가되거나 삭제되면 OnWorksheetChanged() 메소드가 호출되고, 이 메소드에서는 LoadSheetNamesIntoListBox() 메소드를 다시 호출하여 리스트박스를 갱신합니다.
이로 인해 시트 변경 사항이 발생할 때마다 리스트박스가 최신 상태로 유지됩니다.
LoadSheetNamesIntoListBox() 메소드 변경:

리스트박스를 새로 갱신할 때 기존의 항목을 모두 지우고 (sheetListBox.Items.Clear()) 다시 채워넣습니다.
이를 통해 항상 최신 상태의 시트 목록을 리스트박스에 유지할 수 있습니다.
사용 예시
프로그램 실행:

프로그램을 실행하면 TabControl에 두 개의 SpreadsheetControl이 탭으로 배치되고, 각 스프레드시트의 모든 시트 이름이 리스트박스에 표시됩니다.
시트 추가/삭제:

사용자가 스프레드시트에서 새로운 시트를 추가하거나 기존 시트를 삭제하면, 해당 이벤트 (WorksheetAdded, WorksheetRemoved)가 발생하고, 리스트박스가 자동으로 갱신됩니다.
리스트박스는 항상 최신 상태의 시트 목록을 표시하게 됩니다.
탭 및 시트 이동:
