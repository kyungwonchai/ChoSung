송합니다. 코드가 제대로 동작하지 않아 많이 답답하셨을 겁니다. 제가 처음부터 끝까지, 서비스 프로젝트에 필요한 모든 코드를 단 하나의 누락도 없이 다시 드리겠습니다.

<Startup> 부분에서 오류가 발생하는 것은 대부분 필수 NuGet 패키지가 설치되지 않았기 때문입니다. 아래 순서대로만 따라 하시면 반드시 해결됩니다.

## 1단계: 필수 패키지 설치 (가장 중요)
Visual Studio의 **'도구' -> 'NuGet 패키지 관리자' -> '패키지 관리자 콘솔'**을 열고, 아래 5개의 명령어를 하나씩 복사해서 실행하세요.

PowerShell

Install-Package Microsoft.AspNet.SignalR.Core -ProjectName TimestampUpdaterService
Install-Package Microsoft.AspNet.SignalR.SelfHost -ProjectName TimestampUpdaterService
Install-Package Microsoft.Owin.Host.HttpListener -ProjectName TimestampUpdaterService
Install-Package Microsoft.Owin.Hosting -ProjectName TimestampUpdaterService
Install-Package Owin -ProjectName TimestampUpdaterService
TimestampUpdaterService 프로젝트에 이 5개가 모두 설치되어야 합니다.

## 2단계: 서비스 프로젝트 전체 코드
TimestampUpdaterService 프로젝트의 모든 파일 내용을 아래 코드로 교체하거나, 없는 파일은 새로 만들어서 코드를 붙여넣으세요.

파일 1: App.config
프로젝트에 이미 있는 파일입니다. connectionStrings 부분을 본인 DB 정보로 수정하세요.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <connectionStrings>
        <add name="DBContext" 
             connectionString="Server=YOUR_DB_SERVER;Database=YOUR_DB_NAME;User Id=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;" 
             providerName="System.Data.SqlClient"/>
    </connectionStrings>
    <appSettings>
        <add key="SignalRUrl" value="http://localhost:8313"/>
    </appSettings>
</configuration>
파일 2: Startup.cs (새로 추가)
프로젝트에 마우스 오른쪽 클릭 -> 추가 -> 새 항목 -> 클래스를 선택하고, 파일 이름을 **Startup.cs**로 만들어 아래 코드를 붙여넣습니다.

C#

using Microsoft.Owin.Cors;
using Owin;

namespace TimestampUpdaterService
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            // 다른 PC의 WPF 앱이 접속할 수 있도록 CORS 허용
            app.UseCors(CorsOptions.AllowAll);
            // SignalR 사용 설정
            app.MapSignalR();
        }
    }
}
파일 3: MachineDataHub.cs (새로 추가)
마찬가지로 MachineDataHub.cs 라는 이름의 새 클래스 파일을 만들어 아래 코드를 붙여넣습니다.

C#

using Microsoft.AspNet.SignalR;
using System.Threading.Tasks;

namespace TimestampUpdaterService
{
    public class MachineDataHub : Hub
    {
        // WPF 앱이 구독을 요청할 때 호출됨
        public Task Subscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Add(Context.ConnectionId, groupName);
        }

        // WPF 앱이 구독을 취소할 때 호출됨
        public Task Unsubscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Remove(Context.ConnectionId, groupName);
        }
    }
}
파일 4: TimestampService.cs (기존 파일 전체 교체)
프로젝트 생성 시 만들어진 Service1.cs 파일의 이름을 **TimestampService.cs**로 바꾸고, 아래 코드로 모두 덮어쓰세요.

C#

using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Hosting;
using System;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.ServiceProcess;
using System.Timers;

namespace TimestampUpdaterService
{
    public partial class TimestampService : ServiceBase
    {
        private System.Timers.Timer _timer;
        private string _myLineName;
        private string _targetSystemIp;
        private string _connectionString;
        private IDisposable _signalR;

        public TimestampService()
        {
            InitializeComponent();
            this.ServiceName = "TimestampUpdaterService";
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["DBContext"].ConnectionString;

                if (!GetMyConfiguration())
                {
                    this.Stop();
                    return;
                }

                string signalRUrl = ConfigurationManager.AppSettings["SignalRUrl"];
                _signalR = WebApp.Start<Startup>(url: signalRUrl);
                WriteLog($"SignalR host started at {signalRUrl}");
                
                EnsureMachineDataRowExists();
                WriteLog($"서비스가 '{_myLineName}' 라인 (대상: {_targetSystemIp}) 담당으로 시작됩니다.");

                _timer = new System.Timers.Timer(30 * 1000);
                _timer.Elapsed += OnTimerElapsed;
                _timer.AutoReset = true;
                _timer.Start();

                OnTimerElapsed(null, null);
            }
            catch (Exception ex)
            {
                WriteLog($"서비스 시작 중 심각한 오류 발생: {ex.Message}\n{ex.StackTrace}", true);
                throw;
            }
        }

        private bool GetMyConfiguration()
        {
            string localIp = GetLocalIPAddress();
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    string query = "SELECT LineName, TargetIP FROM SystemConfiguration WHERE CollectorIP = @CollectorIP";
                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CollectorIP", localIp);
                        using (var reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                _myLineName = reader["LineName"].ToString();
                                _targetSystemIp = reader["TargetIP"].ToString();
                                WriteLog($"DB 설정 조회 성공: CollectorIP={localIp}, LineName={_myLineName}, TargetIP={_targetSystemIp}");
                                return true;
                            }
                            else
                            {
                                WriteLog($"DB의 SystemConfiguration 테이블에 이 PC의 IP({localIp})에 대한 설정이 없습니다.", true);
                                return false;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog($"DB에서 설정을 가져오는 중 오류 발생: {ex.Message}", true);
                return false;
            }
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            for (int i = 1; i <= 15; i++)
            {
                string machineName = $"mc{i}";
                long? timestamp = FindLatestTimestampForMachine(_targetSystemIp, i);
                UpdateDatabaseAndNotify(machineName, timestamp);
            }
        }

        protected override void OnStop()
        {
            _timer?.Stop();
            _timer?.Dispose();
            _signalR?.Dispose();
            WriteLog("서비스가 중지되었습니다.");
        }

        private void UpdateDatabaseAndNotify(string machineName, long? timestamp)
        {
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    string query = $"UPDATE MachineData SET {machineName} = @Timestamp, LastUpdated = GETDATE() WHERE LineName = @LineName";
                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Timestamp", (object)timestamp ?? DBNull.Value);
                        command.Parameters.AddWithValue("@LineName", _myLineName);
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
                var hubContext = GlobalHost.ConnectionManager.GetHubContext<MachineDataHub>();
                string groupName = $"{_myLineName}-{machineName}";
                hubContext.Clients.Group(groupName).ReceiveUpdate(machineName, timestamp);
            }
            catch (Exception ex)
            {
                WriteLog($"DB 업데이트 및 알림 오류 ({machineName}): {ex.Message}", true);
            }
        }

        private void WriteLog(string message, bool isError = false)
        {
            EventLog.WriteEntry(this.ServiceName, message, isError ? EventLogEntryType.Error : EventLogEntryType.Information);
        }

        private long? FindLatestTimestampForMachine(string targetIp, int machineNumber)
        {
            try
            {
                var machinePath = new DirectoryInfo($"\\\\{targetIp}\\othersystem\\proviewer\\data\\machine{machineNumber}");
                if (!machinePath.Exists) return null;
                var latestLaneDir = machinePath.EnumerateDirectories("Lane*", SearchOption.AllDirectories).OrderByDescending(d => d.LastWriteTimeUtc).FirstOrDefault();
                return latestLaneDir != null ? (long?)new DateTimeOffset(latestLaneDir.LastWriteTimeUtc).ToUnixTimeSeconds() : null;
            }
            catch { return null; }
        }

        private void EnsureMachineDataRowExists()
        {
            using (var conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("IF NOT EXISTS (SELECT 1 FROM MachineData WHERE LineName = @LineName) INSERT INTO MachineData (LineName) VALUES (@LineName)", conn);
                cmd.Parameters.AddWithValue("@LineName", _myLineName);
                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork) return ip.ToString();
            }
            return "127.0.0.1";
        }
    }
}
파일 5: ProjectInstaller.cs (설치 관리자)
솔루션 탐색기에서 TimestampService.cs를 더블클릭하여 디자인 보기로 엽니다.

회색 배경에서 **마우스 오른쪽 클릭 -> '설치 관리자 추가'**를 선택합니다.

ProjectInstaller.cs 파일이 자동으로 생성됩니다. 이 파일의 코드를 아래 코드로 모두 덮어쓰세요.

C#

using System.ComponentModel;
using System.Configuration.Install;
using System.ServiceProcess;

namespace TimestampUpdaterService
{
    [RunInstaller(true)]
    public partial class ProjectInstaller : System.Configuration.Install.Installer
    {
        private ServiceProcessInstaller serviceProcessInstaller1;
        private ServiceInstaller serviceInstaller1;

        public ProjectInstaller()
        {
            InitializeComponent();

            this.serviceProcessInstaller1 = new ServiceProcessInstaller();
            this.serviceInstaller1 = new ServiceInstaller();
            
            this.serviceProcessInstaller1.Account = ServiceAccount.LocalSystem;
            this.serviceProcessInstaller1.Password = null;
            this.serviceProcessInstaller1.Username = null;
            
            this.serviceInstaller1.Description = "폴더 시간을 DB에 업데이트하고 SignalR로 클라이언트에 알림";
            this.serviceInstaller1.DisplayName = "Timestamp Updater Service";
            this.serviceInstaller1.ServiceName = "TimestampUpdaterService";
            this.serviceInstaller1.StartType = ServiceStartMode.Automatic;
            
            this.Installers.AddRange(new System.Configuration.Install.Installer[] {
                this.serviceProcessInstaller1,
                this.serviceInstaller1
            });
        }
    }