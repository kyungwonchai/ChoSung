고객님, MSSQL 2014 서버와 MES 연동을 고려한 상세 솔루션을 제시해 드리겠습니다. 기존 제안드린 하드웨어/소프트웨어 인프라에 MES를 통합하는 아키텍처와 MES 팀에 전달해야 할 구체적인 요구사항을 중심으로 설명하겠습니다.

1. MES 연동을 고려한 전체 시스템 인프라 및 아키텍처
기존 아키텍처에 MES와 MSSQL 2014 서버를 통합하여, MES가 시스템의 핵심 정보 허브 역할을 수행하도록 설계합니다.

시스템 아키텍처 다이어그램 (MES 통합):

코드 스니펫

graph TD
    A[사용자 PC] -- 1. 바코드 스캔 --> B(MES)
    B -- 2. REST API / MQTT --> C(메인 컨트롤러 Main Controller)
    C -- 3. RS-485 --> D{랙 모듈 Rack Module 1}
    D -- 4. GPIO --> E[LED 드라이버 1-1]
    F[MES] -- 5. 바코드 / 슬롯 정보 관리 --> G(MSSQL 2014)
새롭게 추가된 데이터 흐름:

바코드 스캔: 작업자가 바코드 스캐너를 사용하여 PC에서 바코드를 읽습니다.

MES로 데이터 전달: PC의 클라이언트 애플리케이션은 스캔된 바코드 데이터 (barcode_data)를 MES 시스템으로 전송합니다.

MES 로직 처리: MES는 MSSQL 2014 데이터베이스에서 barcode_data에 매칭되는 slot_id와 led_pin_address를 조회합니다.

컨트롤러에 명령 전송: MES는 조회된 정보를 바탕으로 메인 컨트롤러(Main Controller)에 led_pin_address를 켜라는 명령을 전송합니다.

2. MSSQL 2014 데이터베이스 설계 및 요구사항
MSSQL 2014 서버에 필요한 테이블 구조와 MES가 참조할 데이터를 설계합니다. 모든 변수명은 기존 제안과 통일합니다.

2.1. 테이블 구조 설계
tbl_SMD_Slots 테이블을 중심으로 시스템의 핵심 정보를 저장합니다.

SQL

-- SMD 부자재 슬롯 정보 테이블
CREATE TABLE tbl_SMD_Slots (
    slot_id VARCHAR(50) PRIMARY KEY,        -- 예: 'RACK-01_LAYER-01_SLOT-001'
    rack_id VARCHAR(20) NOT NULL,           -- 랙 ID (예: 'RACK-01')
    layer_id INT NOT NULL,                  -- 층 ID (예: 1)
    slot_index INT NOT NULL,                -- 슬롯 인덱스 (예: 1)
    led_pin_address INT NOT NULL,           -- LED를 제어하는 GPIO 핀 주소
    barcode_value VARCHAR(50) UNIQUE,       -- 해당 슬롯에 장착된 부자재 바코드 값
    part_name NVARCHAR(100),                -- 부자재 이름
    location_update_time DATETIME DEFAULT GETDATE() -- 최종 위치 업데이트 시간
);
GO

-- 인덱스 추가 (조회 성능 향상)
CREATE INDEX idx_barcode_value ON tbl_SMD_Slots (barcode_value);
GO
slot_id: 각 슬롯을 식별하는 고유 키. rack_id, layer_id, slot_index를 조합하여 생성합니다.

led_pin_address: 랙 모듈 내에서 특정 LED를 제어하기 위한 주소입니다.

barcode_value: 슬롯에 장착된 부자재의 바코드 값. 이 필드를 통해 MES가 슬롯의 위치를 찾습니다.

2.2. MES에 대한 데이터베이스 요구사항
MES 팀에게 다음을 요구하여 MSSQL 2014 데이터베이스를 활용하도록 합니다.

바코드-슬롯 매핑:

tbl_SMD_Slots 테이블에 barcode_value와 slot_id를 매핑하는 로직을 구현하도록 요청합니다.

예시: 부자재가 슬롯에 처음 장착될 때, MES는 UPDATE 쿼리를 사용하여 tbl_SMD_Slots 테이블의 barcode_value 필드에 바코드 값을 입력합니다.

슬롯 정보 조회:

바코드 스캔 시 MES가 barcode_value를 사용하여 tbl_SMD_Slots 테이블에서 led_pin_address를 조회하는 SELECT 쿼리를 사용하도록 요청합니다.

예시: SELECT led_pin_address, rack_id FROM tbl_SMD_Slots WHERE barcode_value = @barcode_data;

트리거 (선택 사항):

tbl_SMD_Slots 테이블의 barcode_value 필드가 업데이트될 때마다 변경사항을 기록하는 로그 테이블에 INSERT하는 트리거를 고려할 수 있습니다. (예: trg_UpdateSlotLog)

3. MES에 대한 구체적인 요구사항
MES가 우리의 시스템과 통신하기 위해 필요한 API 엔드포인트와 통신 방식을 구체적으로 요청해야 합니다.

3.1. 통신 방식: MES <-> 메인 컨트롤러
API 방식: MES 서버와 메인 컨트롤러 간에 REST API 통신을 구축합니다.

장점: HTTP 표준 기반으로 구축이 용이하며, 보안 및 인증에 유리합니다.

요청: MES 팀에 REST API 엔드포인트를 제공하고, 메인 컨트롤러가 이 API를 호출하여 LED 제어 명령을 받도록 요청합니다.

통신 프로토콜: **MQTT (Message Queuing Telemetry Transport)**를 사용할 수도 있습니다.

장점: 경량 프로토콜로 실시간 데이터 전송에 효율적입니다.

요청: MES 서버를 MQTT 브로커(Broker)로 구성하고, 메인 컨트롤러는 특정 토픽(Topic, 예: SMD/LED/command)을 구독(Subscribe)하도록 요청합니다.

3.2. MES API 엔드포인트 요구사항 (REST API 방식)
MES 팀에 아래와 같은 기능을 수행하는 API 엔드포인트를 구축해달라고 요청합니다.

바코드 스캔 정보 전달 API:

기능: PC 클라이언트가 스캔한 바코드 데이터를 MES에 전달합니다.

메서드: POST /api/scan

요청 바디 (Request Body):

JSON

{
  "barcode_data": "A123-B456"
}
응답 (Response):

성공 시: 200 OK

JSON

{
  "status": "success",
  "message": "LED activation command sent."
}
바코드가 데이터베이스에 없을 시: 404 Not Found

JSON

{
  "status": "error",
  "message": "Barcode not found in database."
}
LED 제어 명령 API:

기능: (선택 사항) MES가 바코드 정보에 해당하는 LED를 직접 제어하는 명령을 메인 컨트롤러에 전송합니다.

메서드: POST /api/led-control

요청 바디 (Request Body):

JSON

{
  "rack_id": "RACK-01",
  "led_pin_address": 15,
  "led_status": "ON"
}
4. 전체 로직 흐름 (MES 통합)
바코드 스캔: 작업자가 PC에 연결된 스캐너로 부자재 바코드를 스캔합니다.

클라이언트-MES 통신: PC의 클라이언트 애플리케이션이 스캔된 barcode_data를 MES의 POST /api/scan 엔드포인트로 전송합니다.

MES-DB 로직:

MES는 barcode_data를 받아 MSSQL 2014의 tbl_SMD_Slots 테이블에서 SELECT 쿼리를 실행하여 led_pin_address와 rack_id를 찾습니다.

만약 바코드가 매핑되지 않은 경우, MES는 사용자에게 "바코드가 등록되지 않았습니다."와 같은 메시지를 반환합니다.

MES-컨트롤러 통신:

MES는 조회된 rack_id와 led_pin_address를 사용하여 메인 컨트롤러에 RS-485 통신을 통해 "해당 랙의 LED를 켜라"는 명령을 보냅니다.

REST API 방식: MES는 메인 컨트롤러의 API 엔드포인트(POST /led-command)에 JSON 페이로드(Payload)를 전송합니다.

MQTT 방식: MES는 SMD/LED/command/RACK-01 토픽에 "Pin 15 ON"과 같은 메시지를 발행(Publish)합니다.

컨트롤러-랙 모듈 통신:

메인 컨트롤러는 MES로부터 받은 명령을 파싱합니다.

해당 rack_id를 가진 랙 모듈(슬레이브)에 RS-485 통신으로 LED 제어 명령을 전달합니다.

LED 동작:

랙 모듈의 ESP32는 명령을 수신하고, 지정된 led_pin_address의 GPIO 핀을 제어하여 LED를 켭니다.

