다음은 WPF 프로젝트에서 PC에서 PLC로 데이터를 전송하고, 사용자가 요구한 신호와 PO 정보를 전송할 수 있는 전체 코드입니다. PLC 통신 체크를 위한 간단한 버튼 기능도 포함되어 있습니다.

먼저 XAML 파일(MainWindow.xaml)입니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Communication" Height="350" Width="525">
    <Grid>
        <Button Name="BtnCheckConnection" Content="Check Connection" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10" Click="BtnCheckConnection_Click"/>
        <Button Name="BtnSendData" Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,70,0,0" Click="BtnSendData_Click"/>
        <TextBox Name="TxtPOInfo" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Height="50" Margin="10,140,0,0" />
        <Label Content="Enter PO Information" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,200,0,0"/>
        <TextBlock Name="TxtOutput" HorizontalAlignment="Left" VerticalAlignment="Top" Width="400" Height="50" Margin="10,230,0,0" TextWrapping="Wrap"/>
    </Grid>
</Window>
다음은 C# 코드 파일(MainWindow.xaml.cs)입니다:

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;

        public MainWindow()
        {
            InitializeComponent();
            serialPort = new SerialPort("COM1", 9600, Parity.None, 8, StopBits.One);
            serialPort.Open();
        }

        private void BtnCheckConnection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // PLC 통신 체크를 위해 1, 2, 3, 4를 전송합니다.
                for (int i = 1; i <= 4; i++)
                {
                    SendDataToPLC(2300, i);
                    System.Threading.Thread.Sleep(500); // 잠시 대기
                }
                TxtOutput.Text = "Connection check signals sent successfully.";
            }
            catch (Exception ex)
            {
                TxtOutput.Text = $"Error: {ex.Message}";
            }
        }

        private void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                // DT2300에 값을 설정합니다.
                SendDataToPLC(2300, 1); // 예: 신규 LOT 배출

                // PO 정보를 DT2310 ~ DT2319로 전송합니다.
                string poInfo = TxtPOInfo.Text;
                SendPOInfoToPLC(poInfo);

                // 전송 완료 메시지
                TxtOutput.Text = "Data sent successfully!";
            }
            catch (Exception ex)
            {
                TxtOutput.Text = $"Error: {ex.Message}";
            }
        }

        private void SendDataToPLC(int address, int value)
        {
            // MEWTOCOL 형식의 ASCII 코드 메시지를 생성합니다.
            string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
            byte[] messageBytes = Encoding.ASCII.GetBytes(message);

            // 시리얼 포트를 통해 메시지를 전송합니다.
            serialPort.Write(messageBytes, 0, messageBytes.Length);
        }

        private void SendPOInfoToPLC(string poInfo)
        {
            // PO 정보를 2글자씩 잘라서 DT2310 ~ DT2319로 전송합니다.
            for (int i = 0; i < poInfo.Length; i += 2)
            {
                string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                SendDataToPLC(2310 + (i / 2), value);
            }
        }

        private void Window_Closed(object sender, EventArgs e)
        {
            if (serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }
    }
}
이 코드는 다음과 같은 주요 기능을 포함합니다:

시리얼 포트를 통해 PLC와 통신 설정.
버튼 클릭으로 PLC로 1, 2, 3, 4 신호 전송(통신 체크).
PO 정보를 입력하고 버튼 클릭 시 전송.
MEWTOCOL 형식을 사용하여 PLC로 데이터를 전송.
윈도우가 닫힐 때 시리얼 포트를 닫는 기능.
프로그램을 실행하고 버튼을 눌러 PLC와의 통신을 확인하고 데이터를 전송할 수 있습니다. serialPort 객체의 포트 이름("COM1")은 실제 환경에 맞게 변경해야 합