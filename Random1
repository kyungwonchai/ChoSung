습니다. 색상이 흰색으로만 나오는 문제는 DividerItemDecoration이 drawable을 제대로 적용하지 못하는 경우 발생할 수 있습니다. 이를 해결하기 위해 직접 RecyclerView.ItemDecoration을 상속받아 커스텀으로 구현하는 방식으로 수정하겠습니다. 이렇게 하면 선의 색상과 두께를 정확하게 제어할 수 있습니다.

커스텀 DividerItemDecoration 구현
CustomDividerDecoration 클래스 생성:
이 클래스를 사용해 선의 색상과 두께를 정확하게 설정합니다.
kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/CustomDividerDecoration.kt
package com.dxmxsmd.routeracralarm

import android.content.Context
import android.graphics.Canvas
import android.graphics.Paint
import android.graphics.Rect
import android.view.View
import androidx.recyclerview.widget.RecyclerView

class CustomDividerDecoration(context: Context) : RecyclerView.ItemDecoration() {

    private val paint: Paint = Paint().apply {
        color = 0xFF32CD32.toInt() // 연녹색 (lime green)
        strokeWidth = context.resources.displayMetrics.density * 2 // 2dp 두께
        style = Paint.Style.STROKE
    }

    override fun onDrawOver(canvas: Canvas, parent: RecyclerView, state: RecyclerView.State) {
        val left = parent.paddingLeft.toFloat()
        val right = (parent.width - parent.paddingRight).toFloat()

        for (i in 0 until parent.childCount) {
            val child = parent.getChildAt(i)
            val params = child.layoutParams as RecyclerView.LayoutParams
            val top = child.bottom + params.bottomMargin.toFloat()
            val bottom = top + paint.strokeWidth

            // 선을 그립니다.
            canvas.drawLine(left, top, right, bottom, paint)
        }
    }

    override fun getItemOffsets(outRect: Rect, view: View, parent: RecyclerView, state: RecyclerView.State) {
        // 각 항목의 아래에 공간을 추가합니다 (선의 두께만큼).
        outRect.set(0, 0, 0, paint.strokeWidth.toInt())
    }
}
DataActivity.kt에서 커스텀 Divider 적용
이제 DataActivity.kt에서 커스텀 ItemDecoration을 적용하도록 수정합니다.

kotlin
코드 복사
// app/src/main/java/com/dxmxsmd/routeracralarm/DataActivity.kt
package com.dxmxsmd.routeracralarm

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager

/**
 * 데이터 활동 클래스
 * MSSQL 데이터베이스에서 최근 20개의 데이터를 가져와 RecyclerView에 표시
 */
class DataActivity : ComponentActivity() {

    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_data)

        // RecyclerView 초기화
        recyclerView = findViewById(R.id.recyclerView)
        recyclerView.layoutManager = LinearLayoutManager(this)

        // 커스텀 Divider 추가 (연녹색 가로줄)
        recyclerView.addItemDecoration(CustomDividerDecoration(this))

        // 데이터 가져오기
        lifecycleScope.launch {
            val data = fetchDataFromDatabase()
            adapter = DataAdapter(data)
            recyclerView.adapter = adapter
        }
    }

    /**
     * 데이터베이스에서 데이터를 가져오는 함수
     *
     * @return TableData 리스트
     */
    private suspend fun fetchDataFromDatabase(): List<TableData> {
        return withContext(Dispatchers.IO) {
            val dataList = mutableListOf<TableData>()
            try {
                // JDBC URL 구성 (jTDS 드라이버 사용)
                val url = "jdbc:jtds:sqlserver://your-database-server:1433/your-database;useSSL=false"
                val username = "your-username"
                val password = "your-password"

                // 데이터베이스 연결
                Class.forName("net.sourceforge.jtds.jdbc.Driver")
                val connection: Connection = DriverManager.getConnection(url, username, password)
                val statement = connection.createStatement()

                // 쿼리 실행
                val resultSet = statement.executeQuery("SELECT TOP 20 * FROM table2")

                // 결과 처리
                while (resultSet.next()) {
                    val column1 = resultSet.getString("column1")
                    val column2 = resultSet.getString("column2")
                    dataList.add(TableData(column1, column2))
                }

                resultSet.close()
                statement.close()
                connection.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
            dataList
        }
    }
}
주요 변경 사항
CustomDividerDecoration 클래스:

선의 색상을 연녹색으로 설정(0xFF32CD32).
선의 두께를 2dp로 설정했습니다. context.resources.displayMetrics.density를 사용하여 dp 단위를 픽셀로 변환했습니다.
onDrawOver 메서드를 통해 각 항목 아래에 선을 그립니다.
getItemOffsets 메서드를 통해 각 항목 아래에 선 두께만큼의 여백을 추가합니다.
DataActivity.kt에서 커스텀 Divider 적용:

recyclerView.addItemDecoration(CustomDividerDecoration(this))를 통해 RecyclerView에 커스텀 Divider를 적용합니다.