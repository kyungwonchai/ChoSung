using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> _logMessages = new ObservableCollection<string>();
        private readonly string _sourceFilePath = @"C:\Agent\1.jpg";
        private readonly string _destinationRootPath = @"F:\ABC";
        private readonly string _logFilePath = @"F:\filelog.txt";
        private bool _isRunning = false;

        public MainWindow()
        {
            InitializeComponent();
            LogListBox.ItemsSource = _logMessages;
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_isRunning)
                {
                    MessageBox.Show("Process is already running.");
                    return;
                }

                _isRunning = true;
                AddLog("File copy process started.");
                Task.Run(CopyFilesAsync);
            }
            catch (Exception ex)
            {
                var errorMessage = $"Error starting process: {ex.Message}";
                AddLog(errorMessage);
                LogToFile(errorMessage);
                Debug.WriteLine(errorMessage);
            }
        }

        private async Task CopyFilesAsync()
        {
            try
            {
                while (_isRunning)
                {
                    string destinationPath = string.Empty;
                    await Dispatcher.InvokeAsync(() =>
                    {
                        var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                        var fileName = $"{timestamp}file.jpg";
                        destinationPath = IndividualFolderCheckBox.IsChecked == true
                            ? System.IO.Path.Combine(_destinationRootPath, timestamp, fileName)
                            : System.IO.Path.Combine(_destinationRootPath, DateTime.Now.ToString("yyyyMMdd"), fileName);
                    });

                    try
                    {
                        AddLog($"Attempting to create directory for {destinationPath}");
                        var folderPath = System.IO.Path.GetDirectoryName(destinationPath);
                        if (!Directory.Exists(folderPath))
                        {
                            Directory.CreateDirectory(folderPath);
                        }

                        AddLog($"Checking if source file exists: {_sourceFilePath}");
                        if (File.Exists(_sourceFilePath))
                        {
                            AddLog($"Copying file to {destinationPath}");
                            File.Copy(_sourceFilePath, destinationPath, true);
                            var logMessage = $"File copied to: {destinationPath}";
                            await Dispatcher.InvokeAsync(() => AddLog(logMessage));
                            LogToFile(logMessage);
                        }
                        else
                        {
                            var errorMessage = $"Source file not found: {_sourceFilePath}";
                            await Dispatcher.InvokeAsync(() => AddLog(errorMessage));
                            LogToFile(errorMessage);
                            _isRunning = false;
                        }

                        await Dispatcher.InvokeAsync(() =>
                        {
                            if (_logMessages.Count > 200)
                            {
                                _logMessages.RemoveAt(0);
                            }
                        });
                    }
                    catch (Exception ex)
                    {
                        var errorMessage = $"Error during file copy at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                        await Dispatcher.InvokeAsync(() => AddLog(errorMessage));
                        LogToFile(errorMessage);
                        Debug.WriteLine(errorMessage);
                        _isRunning = false;
                    }

                    await Task.Delay(2000); // 2초 대기
                }

                await Dispatcher.InvokeAsync(() => AddLog("File copy process stopped."));
            }
            catch (Exception ex)
            {
                var errorMessage = $"Error in file copy loop at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                await Dispatcher.InvokeAsync(() => AddLog(errorMessage));
                LogToFile(errorMessage);
                Debug.WriteLine(errorMessage);
            }
        }

        private void AddLog(string message)
        {
            _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {message}");
        }

        private void LogToFile(string message)
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(_logFilePath, true))
                {
                    writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
                }
            }
            catch (Exception ex)
            {
                var errorMessage = $"Log file writing error at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                Dispatcher.Invoke(() => _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {errorMessage}"));
                Debug.WriteLine(errorMessage);
            }
        }
    }
}
