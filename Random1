ateEdit 컨트롤에서 연, 월, 일, 시, 분, 초까지 선택할 수 있도록 설정하려면 DevExpress의 DateEdit 컨트롤에서 EditMask와 MaskType을 설정하여 사용자가 연월일시분초까지 선택 가능하게 만들 수 있습니다. 아래는 그에 대한 예제 코드입니다.

XAML 코드 - DateEdit 설정
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="DateEdit Example" Height="200" Width="400">
    <Grid>
        <!-- 연월일시분초 선택 가능한 DateEdit 컨트롤 -->
        <dxe:DateEdit x:Name="dateEditControl" EditValueChanged="DateEditControl_EditValueChanged" 
                      HorizontalAlignment="Center" VerticalAlignment="Center" Width="250"
                      MaskType="DateTime" EditMask="yyyy-MM-dd HH:mm:ss" DisplayFormatString="yyyy-MM-dd HH:mm:ss"/>
    </Grid>
</Window>
설명
MaskType="DateTime": MaskType을 DateTime으로 설정하여 날짜와 시간 모두를 입력할 수 있도록 합니다.
EditMask="yyyy-MM-dd HH:mm
": 날짜와 시간의 형식을 지정하여 연, 월, 일, 시, 분, 초를 입력 가능하게 설정합니다.
DisplayFormatString="yyyy-MM-dd HH:mm
": 표시되는 형식 또한 연월일시분초 형태로 설정하여 사용자가 쉽게 볼 수 있게 합니다.
C# 코드 - 시간 저장 및 알림 트리거
아래 C# 코드는 앞서 제공된 코드와 동일하지만 DateEdit 컨트롤에서 초 단위까지 설정 가능한 시간을 받아 저장하고 모니터링합니다.

csharp
코드 복사
using System;
using System.IO;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private Timer checkTimer;
        private DateTime targetDateTime;
        private string configFilePath = @"C:\agent\kwconfig\eng.ini";

        public MainWindow()
        {
            InitializeComponent();
            LoadSavedDateTime();
            StartMonitoringTime();
        }

        // 프로그램 시작 시 ini 파일에서 저장된 시간 불러오기
        private void LoadSavedDateTime()
        {
            if (File.Exists(configFilePath))
            {
                var savedTime = File.ReadAllText(configFilePath);
                if (DateTime.TryParse(savedTime, out DateTime loadedDateTime))
                {
                    targetDateTime = loadedDateTime;
                    dateEditControl.DateTime = targetDateTime; // DateEdit 컨트롤에 표시
                }
            }
        }

        // DateEdit 값 변경 시 호출되는 메서드
        private void DateEditControl_EditValueChanged(object sender, EventArgs e)
        {
            // DateEdit에서 선택한 시간 가져오기
            targetDateTime = dateEditControl.DateTime;
            
            // 설정된 시간을 ini 파일에 저장
            SaveDateTimeToFile(targetDateTime);
        }

        // ini 파일에 선택된 날짜와 시간을 저장하는 메서드
        private void SaveDateTimeToFile(DateTime dateTime)
        {
            try
            {
                Directory.CreateDirectory(Path.GetDirectoryName(configFilePath));
                File.WriteAllText(configFilePath, dateTime.ToString("yyyy-MM-dd HH:mm:ss"));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"파일 저장 중 오류 발생: {ex.Message}");
            }
        }

        // 타이머 설정 및 시작
        private void StartMonitoringTime()
        {
            checkTimer = new Timer(1000); // 1초마다 실행
            checkTimer.Elapsed += CheckTime;
            checkTimer.Start();
        }

        // 설정된 시간에 맞춰 팝업을 띄우는 메서드
        private void CheckTime(object sender, ElapsedEventArgs e)
        {
            // 현재 시간과 설정된 시간을 비교하여 팝업 표시
            if (DateTime.Now >= targetDateTime)
            {
                // 타이머 정지 및 팝업 표시
                checkTimer.Stop();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    MessageBox.Show("설정된 시간이 되었습니다!", "알림");
                });
            }
        }
    }
}
설명
초 단위까지 설정: DateEdit 컨트롤의 형식을 yyyy-MM-dd HH:mm:ss로 지정하여 사용자가 초 단위까지 시간을 설정할 수 있도록 했습니다.
초 단위 비교: 타이머가 매초마다 설정된 시간과 현재 시간을 비교하여, 설정된 시간이 되면 팝업이 표시됩니다.
이 코드를 통해 사용자가 Date