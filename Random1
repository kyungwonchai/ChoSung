래는 요청하신 **범례(Legend)**와 체크박스 기능을 구현하기 위해 C# 코드 수정과 함께 필요한 변경 사항을 포함한 완전한 코드입니다. 범례에 포함된 체크박스를 통해 시리즈를 동적으로 제어할 수 있도록 수정했습니다.

수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using System.Windows.Input;
using DevExpress.Xpf.Charts;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        // MainChart 데이터 (라인별 표준편차)
        public ObservableCollection<LineData> MainChartData { get; set; } = new ObservableCollection<LineData>();

        // DetailChart 데이터 (MP1~MP5의 시간별 데이터)
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();

        // ScatterChart 데이터 (선택된 MP 데이터)
        public ObservableCollection<ScatterData> ScatterChartData { get; set; } = new ObservableCollection<ScatterData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // MainChart 데이터 로드
            LoadMainChartData();
        }

        /// <summary>
        /// MainChart 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadMainChartData()
        {
            try
            {
                var connectionString = "YourConnectionString"; // 데이터베이스 연결 문자열
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0); // LineName
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            // 표준편차 계산
                            var stdDev = CalculateStandardDeviation(mpData);

                            // MainChartData 추가
                            MainChartData.Add(new LineData { LineName = lineName, StdDev = stdDev });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading MainChart data: {ex.Message}");
            }
        }

        /// <summary>
        /// MainChart의 막대를 클릭하면 DetailChart 데이터를 로드
        /// </summary>
        private void MainChart_MouseDown(object sender, MouseButtonEventArgs e)
        {
            var hitInfo = MainChart.Diagram.CalcHitInfo(e.GetPosition(MainChart));
            if (hitInfo.InSeries) // 클릭된 위치가 시리즈인지 확인
            {
                var seriesPoint = hitInfo.SeriesPoint;
                if (seriesPoint != null)
                {
                    var selectedLineName = seriesPoint.Argument.ToString(); // 클릭된 막대의 LineName
                    LoadDetailChartData(selectedLineName);
                }
            }
        }

        /// <summary>
        /// DetailChart 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear(); // 기존 데이터를 초기화
                var connectionString = "YourConnectionString";

                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult
                                  WHERE LineName = @lineName
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                DetailChartData.Add(new DetailData
                                {
                                    Timestamp = reader.GetDateTime(0),
                                    MP1 = reader.GetDouble(1),
                                    MP2 = reader.GetDouble(2),
                                    MP3 = reader.GetDouble(3),
                                    MP4 = reader.GetDouble(4),
                                    MP5 = reader.GetDouble(5)
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading DetailChart data: {ex.Message}");
            }
        }

        /// <summary>
        /// 범례의 체크박스를 통해 시리즈 표시 여부를 제어
        /// </summary>
        private void LegendItem_Checked(object sender, RoutedEventArgs e)
        {
            if (sender is CheckBox checkBox && checkBox.DataContext is Series series)
            {
                series.Visible = true; // 체크된 시리즈 표시
            }
        }

        private void LegendItem_Unchecked(object sender, RoutedEventArgs e)
        {
            if (sender is CheckBox checkBox && checkBox.DataContext is Series series)
            {
                series.Visible = false; // 체크 해제된 시리즈 숨기기
            }
        }

        /// <summary>
        /// ScatterChart 데이터를 로드
        /// </summary>
        private void LoadScatterChartData(string dataMember)
        {
            ScatterChartData.Clear(); // 기존 데이터를 초기화

            // DetailChartData에서 선택된 데이터 멤버의 값만 추가
            foreach (var detail in DetailChartData)
            {
                ScatterChartData.Add(new ScatterData
                {
                    Timestamp = detail.Timestamp,
                    Value = (double)detail.GetType().GetProperty(dataMember).GetValue(detail)
                });
            }
        }

        /// <summary>
        /// 표준편차 계산
        /// </summary>
        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    /// <summary>
    /// MainChart 데이터 모델
    /// </summary>
    public class LineData
    {
        public string LineName { get; set; } // 라인의 이름
        public double StdDev { get; set; } // 표준편차 값
    }

    /// <summary>
    /// DetailChart 데이터 모델
    /// </summary>
    public class DetailData
    {
        public DateTime Timestamp { get; set; } // 데이터의 시간
        public double MP1 { get; set; } // MP1 값
        public double MP2 { get; set; } // MP2 값
        public double MP3 { get; set; } // MP3 값
        public double MP4 { get; set; } // MP4 값
        public double MP5 { get; set; } // MP5 값
    }

    /// <summary>
    /// ScatterChart 데이터 모델
    /// </summary>
    public class ScatterData
    {
        public DateTime Timestamp { get; set; } // 데이터의 시간
        public double Value { get; set; } // 데이터 값
    }
}
변경 사항
LegendItem의 체크박스 구현

LegendItem_Checked와 LegendItem_Unchecked 이벤트를 통해 시리즈의 Visible 속성을 제어합니다.
체크박스는 LegendItem의 DataContext를 활용해 해당 시리즈와 연결됩니다.
체크박스 제어

sender를 통해 이벤트를 발생시킨 CheckBox와 해당 시리즈를 연결하여 제어합니다.
XAML 업데이트
xml
코드 복사
<dxc:ChartControl.Legend>
    <dxc:Legend UseCheckBoxes="True" 
                CheckBoxChecked="LegendItem_Checked"
                CheckBoxUnchecked="LegendItem_Unchecked" />
</dxc:ChartControl.Legend>
위 XAML에서 체크박스를 범례에 추가하며, LegendItem_Checked와 LegendItem_Unchecked를 이벤트로 연결했습니다.