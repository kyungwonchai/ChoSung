xpress의 **TreeListControl**을 사용하여 그룹(구역)과 라인 데이터를 계층적으로 표시하고, 각 항목에 체크박스를 추가하여 선택 기능을 구현할 수 있습니다. 아래는 이를 구현하는 방법을 단계별로 설명합니다.

1. 데이터 모델 정의
먼저, 그룹과 라인을 표현하는 데이터 모델을 정의합니다.

csharp
코드 복사
public class Line
{
    public int Id { get; set; }
    public int ParentId { get; set; }
    public string Name { get; set; }
    public bool IsChecked { get; set; }
}
여기서 Line 클래스는 그룹과 라인을 모두 표현하며, ParentId를 통해 계층 구조를 형성합니다. IsChecked 속성은 체크박스의 선택 상태를 나타냅니다.

2. XAML에서 TreeListControl 설정
TreeListControl을 사용하여 데이터를 트리 구조로 표시하고, 각 항목에 체크박스를 추가합니다.

xml
코드 복사
<Window x:Class="TreeListExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="TreeList with Checkboxes" Height="450" Width="400">
    <Grid>
        <dxg:TreeListControl x:Name="treeList" AutoExpandAllNodes="True" AutoGenerateColumns="None">
            <dxg:TreeListControl.Columns>
                <!-- 체크박스 컬럼 -->
                <dxg:TreeListColumn FieldName="IsChecked" Header="선택">
                    <dxg:TreeListColumn.EditSettings>
                        <dxe:CheckEditSettings />
                    </dxg:TreeListColumn.EditSettings>
                </dxg:TreeListColumn>
                <!-- 이름 컬럼 -->
                <dxg:TreeListColumn FieldName="Name" Header="이름" />
            </dxg:TreeListControl.Columns>
        </dxg:TreeListControl>
    </Grid>
</Window>
위의 XAML에서는 TreeListControl에 두 개의 컬럼을 정의합니다: 하나는 체크박스를 표시하는 IsChecked 컬럼이고, 다른 하나는 이름을 표시하는 Name 컬럼입니다. AutoGenerateColumns="None" 속성을 설정하여 자동으로 컬럼이 생성되지 않도록 합니다.

3. 코드 비하인드에서 데이터 바인딩 및 선택 상태 동기화
코드 비하인드에서 데이터를 초기화하고, TreeListControl에 바인딩합니다. 또한, 그룹의 체크박스를 선택하거나 해제하면 해당 그룹 내 모든 라인의 선택 상태가 변경되도록 이벤트 핸들러를 구현합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;

namespace TreeListExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Line> Lines { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // 예제 데이터 초기화
            Lines = new ObservableCollection<Line>
            {
                new Line { Id = 1, ParentId = 0, Name = "Group 1" },
                new Line { Id = 2, ParentId = 1, Name = "Line 1.1" },
                new Line { Id = 3, ParentId = 1, Name = "Line 1.2" },
                new Line { Id = 4, ParentId = 0, Name = "Group 2" },
                new Line { Id = 5, ParentId = 4, Name = "Line 2.1" },
                new Line { Id = 6, ParentId = 4, Name = "Line 2.2" }
            };

            // TreeListControl에 데이터 바인딩
            treeList.ItemsSource = Lines;

            // TreeListControl의 키 필드 설정
            treeList.KeyFieldName = "Id";
            treeList.ParentFieldName = "ParentId";

            // 체크박스 상태 변경 이벤트 핸들러 등록
            treeList.CellValueChanged += TreeList_CellValueChanged;
        }

        private void TreeList_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "IsChecked")
            {
                var changedItem = e.Row as Line;
                if (changedItem != null)
                {
                    // 자식 노드의 선택 상태 변경
                    UpdateChildNodesCheckState(changedItem);

                    // 부모 노드의 선택 상태 변경
                    UpdateParentNodeCheckState(changedItem);
                }
            }
        }

        private void UpdateChildNodesCheckState(Line parentItem)
        {
            var childItems = Lines.Where(l => l.ParentId == parentItem.Id).ToList();
            foreach (var child in childItems)
            {
                child.IsChecked = parentItem.IsChecked;
                UpdateChildNodesCheckState(child);
            }
        }

        private void UpdateParentNodeCheckState(Line childItem)
        {
            var parentItem = Lines.FirstOrDefault(l => l.Id == childItem.ParentId);
            if (parentItem != null)
            {
                parentItem.IsChecked = Lines.Where(l => l.ParentId == parentItem.Id).All(l => l.IsChecked);
                UpdateParentNodeCheckState(parentItem);
            }
        }
    }
}
위의 코드에서는 TreeListControl의 CellValueChanged 이벤트를 통해 체크박스의 선택 상태가 변경될 때마다 자식 노드와 부모 노드의 선택 상태를 동기화합니다. UpdateChildNodesCheckState 메서드는 선택된 그룹의 모든 자식 라인의 선택 상태를 변경하고, UpdateParentNodeCheckState 메서드는 자식 라인의 선택 상태에 따라 부모 그룹의 선택 상태를 업데이트합니다.

참고 자료
TreeListControl Class - DevExpress Documentation