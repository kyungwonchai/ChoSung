래는 MysqlDataSource를 사용하여 MySQL에 연결하는 방법을 적용한 코드입니다. 이 코드에는 예외 처리와 함께 연결 시 발생할 수 있는 다양한 오류를 잡기 위한 로깅이 포함되어 있습니다.

수정된 checkModelInMySQL 함수
kotlin
코드 복사
import com.mysql.cj.jdbc.MysqlDataSource
import java.sql.Connection
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.SQLException
import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

private suspend fun checkModelInMySQL(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        var connection: Connection? = null
        var preparedStatement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null
        try {
            // MySQL DataSource 사용하여 연결 설정
            val dataSource = MysqlDataSource()
            dataSource.setURL("jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC")
            dataSource.user = "abc"
            dataSource.setPassword("1233445")

            // 데이터베이스 연결
            connection = dataSource.connection

            // 쿼리 실행
            val query = "SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = ?"
            preparedStatement = connection.prepareStatement(query)
            preparedStatement.setString(1, qrCode)

            resultSet = preparedStatement.executeQuery()

            // 결과 처리
            if (resultSet.next()) {
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val modelnumber = resultSet.getString("modelnumber")
                result = "District: $district, At: $at, Model: $modelnumber"
            }
        } catch (e: SQLException) {
            // SQL 관련 예외 처리
            Log.e("MySQLConnection", "SQL error: ${e.message}")
            e.printStackTrace()
        } catch (e: Exception) {
            // 기타 예외 처리
            Log.e("MySQLConnection", "Unexpected error: ${e.message}")
            e.printStackTrace()
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                connection?.close()
            } catch (e: SQLException) {
                Log.e("MySQLConnection", "Error closing SQL resources: ${e.message}")
                e.printStackTrace()
            }
        }
        result
    }
}
주요 변경 사항 및 설명
MysqlDataSource 사용:

MysqlDataSource를 사용하여 MySQL 데이터베이스에 연결합니다. 이 방식은 DriverManager보다 간편하며, 특히 커넥션 풀링과 같은 고급 기능을 지원합니다.
예외 처리:

SQLException: MySQL 연결, 쿼리 실행, 결과 처리 중 발생할 수 있는 SQL 예외를 처리합니다.
Exception: 다른 일반적인 예외를 처리하여 예상치 못한 오류도 로깅할 수 있도록 합니다.
리소스 정리:

finally 블록에서 ResultSet, PreparedStatement, Connection을 닫아 리소스를 정리합니다. 예외가 발생하더라도 리소스가 제대로 정리되도록 합니다.
로그 확인
Logcat에서 MySQLConnection 태그로 로그를 필터링하여 에러 메시지를 확인할 수 있습니다.
각 예외는 Log.e로 기록되어 빨간색으로 표시됩니다.
이 코드로 인해 MySQL에 접근하는 동안 발생할 수 있는 문제를 더 쉽게 파악할 수 있으며, 연결 문제에 대한 디버깅이 쉬워질 것입니다.