 코드는 파이썬의 pyserial 라이브러리를 사용하여 컴포트 목록을 검색하고, 사용자가 목록에서 선택할 수 있게 한 뒤, 선택된 포트로 연결하는 코드입니다. 이 코드는 터미널에서 실행되며, 사용자가 입력을 통해 포트를 선택합니다.

먼저, pyserial을 설치해야 합니다.

bash
코드 복사
pip install pyserial
파이썬 코드 (주석 포함)
python
코드 복사
import serial  # 시리얼 통신을 위한 라이브러리
import serial.tools.list_ports  # 사용 가능한 포트 검색을 위한 모듈


def list_com_ports():
    """
    사용 가능한 시리얼 포트를 검색하고 출력하는 함수.

    Returns:
        ports (list): 사용 가능한 포트 이름 리스트.
    """
    # 사용 가능한 포트를 검색
    ports = serial.tools.list_ports.comports()

    # 포트 정보를 담을 리스트 초기화
    available_ports = []

    print("사용 가능한 포트 목록:")

    # 검색된 포트를 하나씩 출력
    for index, port in enumerate(ports, start=1):
        print(f"{index}. {port.device} - {port.description}")
        available_ports.append(port.device)

    return available_ports


def select_com_port(available_ports):
    """
    사용자가 포트를 선택하도록 입력을 받아 유효성을 검증하는 함수.

    Args:
        available_ports (list): 사용 가능한 포트 이름 리스트.

    Returns:
        str: 사용자가 선택한 포트 이름.
    """
    while True:
        try:
            # 사용자로부터 포트 번호 입력 받기
            selection = int(input("사용할 포트 번호를 입력하세요: "))

            # 유효한 번호인지 확인
            if 1 <= selection <= len(available_ports):
                return available_ports[selection - 1]
            else:
                print("유효하지 않은 번호입니다. 다시 입력하세요.")
        except ValueError:
            print("숫자만 입력하세요.")


def connect_to_com_port(port_name, baudrate=9600, timeout=1):
    """
    선택된 포트로 연결을 시도하는 함수.

    Args:
        port_name (str): 연결할 포트 이름.
        baudrate (int): 통신 속도 (기본값: 9600).
        timeout (int): 응답 대기 시간 (초 단위, 기본값: 1초).

    Returns:
        serial.Serial: 연결된 시리얼 객체.
    """
    try:
        # 시리얼 포트 연결 시도
        ser = serial.Serial(port=port_name, baudrate=baudrate, timeout=timeout)
        print(f"{port_name} 포트에 성공적으로 연결되었습니다.")
        return ser
    except serial.SerialException as e:
        print(f"{port_name} 포트에 연결할 수 없습니다. 오류: {e}")
        return None


def main():
    """
    프로그램의 메인 함수로, 포트 목록 표시, 사용자 선택, 연결 시도를 모두 처리.
    """
    available_ports = list_com_ports()

    # 포트가 검색되지 않은 경우 종료
    if not available_ports:
        print("사용 가능한 포트가 없습니다. 장치를 확인하세요.")
        return

    selected_port = select_com_port(available_ports)
    connection = connect_to_com_port(selected_port)

    if connection:
        # 연결이 성공했을 경우 추가 작업 수행 가능
        connection.close()  # 연결 종료


if __name__ == "__main__":
    main()
코드 설명
list_com_ports() 함수:

사용 가능한 모든 COM 포트를 검색하여 목록으로 출력합니다.

serial.tools.list_ports.comports() 함수를 사용하여 포트 목록을 검색합니다.

select_com_port() 함수:

사용자로부터 숫자 입력을 받아 목록에서 포트를 선택하게 합니다.

입력값의 유효성을 검사하여 올바른 값일 때만 반환합니다.

connect_to_com_port() 함수:

선택된 포트로 연결을 시도합니다.

통신 속도 (baudrate)와 타임아웃 (timeout)을 설정할 수 있습니다.

연결 성공 여부를 확인하고 성공 시 시리얼 객체를 반환합니다.

main() 함수:

모든 작업을 순서대로 실행합니다.

포트 검색 → 사용자 입력으로 선택 → 연결 시도 → 연결 종료.

실행 예시
java
코드 복사
사용 가능한 포트 목록:
1. COM3 - USB Serial Device (COM3)
2. COM5 - USB Serial Device (COM5)
사용할 포트 번호를 입력하세요: 1
COM3 포트에 성공적으로 연결되었습니다.