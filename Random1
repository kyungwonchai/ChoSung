정확히 이해했습니다. 툴팁으로 함수 이름을 표시하는데 문제가 계속 발생하고 있었고, 지금까지 제시된 방법들이 동작하지 않은 점 사과드립니다. 이번에는 더 안정적이고 다른 방식으로 문제를 해결하겠습니다.

문제 요약:
**ToolTip**에서 함수 이름이 제대로 표시되지 않음.
FunctionNames 배열의 이름을 **ToolTip**으로 표시하는 것에 문제 발생.
해결 방안:
Binding 문제를 해결하기 위해 **ToolTip**에 직접 CommandParameter로 값을 전달하거나 Tag 속성을 활용하는 방법을 사용할 수 있습니다. 이번엔 **ToolTip**에서 FunctionNames 배열을 직접 참조하는 방식 대신, **Tag**를 활용하여 값 전달을 명확하게 하겠습니다.

1. TaskModel.cs (수정된 코드)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 함수와 도형 상태 컬렉션
    public List<Func<Task>> FunctionTasks { get; set; } // 비동기 함수 리스트
    public ObservableCollection<string> FunctionNames { get; set; } // 함수 이름 리스트
    public ObservableCollection<Brush> FunctionStatusColors { get; set; } // 도형 상태 리스트

    public string Status { get; set; }
    public ICommand ResumeCommand { get; }

    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;
        _taskQueue = taskQueue;

        // 리스트 초기화
        FunctionTasks = new List<Func<Task>>();
        FunctionNames = new ObservableCollection<string>();
        FunctionStatusColors = new ObservableCollection<Brush>();

        Status = "Pending";
        ResumeCommand = new RelayCommand(ResumeTask);

        // 함수 추가 (예시)
        AddFunction("Task A", ExecuteTaskA);
        AddFunction("Task B", ExecuteTaskB);
        AddFunction("Task C", ExecuteTaskC);
    }

    /// <summary>
    /// 함수를 추가하고 함수 이름과 도형 색상을 함께 관리합니다.
    /// </summary>
    public void AddFunction(string functionName, Func<Task> task)
    {
        FunctionTasks.Add(task); // 함수 추가
        FunctionNames.Add(functionName); // 함수 이름 추가
        FunctionStatusColors.Add(Brushes.Gray); // 기본 도형 상태
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    public async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.SkyBlue; // 실행 중
            });

            await FunctionTasks[i]();  // 비동기 작업 실행

            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green; // 완료됨
            });
        }
        Status = "Completed";
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
2. XAML 수정 (툴팁에 함수 이름 표시)
xml
코드 복사
<ItemsControl ItemsSource="{Binding FunctionStatusColors}" AlternationCount="{Binding FunctionNames.Count}">
    <ItemsControl.ItemTemplate>
        <DataTemplate>
            <StackPanel Orientation="Horizontal" Margin="5">
                <!-- 도형 (Ellipse) -->
                <Ellipse Width="30" Height="30" Fill="{Binding}"
                         Tag="{Binding DataContext.FunctionNames[ItemsControl.AlternationIndex], 
                               RelativeSource={RelativeSource AncestorType=ItemsControl}}">
                    <!-- 툴팁으로 Tag 속성을 사용하여 함수 이름 표시 -->
                    <Ellipse.ToolTip>
                        <TextBlock Text="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" />
                    </Ellipse.ToolTip>
                </Ellipse>
            </StackPanel>
        </DataTemplate>
    </ItemsControl.ItemTemplate>
</ItemsControl>
변경 사항 및 해결 방식:
Tag 속성 활용:

Tag 속성에 함수 이름을 바인딩하여 **ToolTip**에서 해당 값을 참조합니다.
Tag 속성에 FunctionNames에서 **AlternationIndex**로 해당 함수 이름을 가져오고, 이를 ToolTip에서 바인딩합니다.
Ellipse.ToolTip:

**Tag**에 바인딩된 값을 **ToolTip**으로 설정합니다.
**RelativeSource={RelativeSource Self}**를 사용하여 Tag 속성의 값을 ToolTip에 표시하도록 합니다.
최종 설명:
Tag 속성을 사용하여 각 Ellipse에 해당 함수의 이름을 저장하고, ToolTip에서 Tag 값을 가져와 표시하는 방식입니다.
이제 도형 위에 마우스를 올리면 그 도형에 연결된 함수 이름이 ToolTip으로 정상적으로 표시될 것입니다.
이 방법으로 툴팁에 함수 이름을