해 pymssql 라이브러리를 사용할 수 있습니다. 데이터를 가져온 후, Python의 set을 사용하여 필요한 데이터만 추려내고 이를 딕셔너리와 비교하여 해당하는 값만을 출력하는 코드를 작성할 수 있습니다.

아래는 이러한 로직을 구현한 코드의 예시입니다:

python

import pymssql
from datetime import datetime

# MSSQL 서버에 연결하고 데이터 가져오기
def fetch_data_from_mssql(server, user, password, database):
    conn = pymssql.connect(server, user, password, database)
    cursor = conn.cursor(as_dict=True)

    # 오늘 날짜에 해당하는 데이터만 가져오기
    today_date = datetime.today().strftime('%Y%m%d')
    query = "SELECT N_RKey FROM T_메인확정 WHERE N_datek = %s"
    cursor.execute(query, (today_date,))

    data_set = set(row['N_RKey'] for row in cursor)
    conn.close()
    
    return data_set

# 딕셔너리에서 set B에 있는 키들만 추려서 출력하기
def filter_dict_by_set(dictionary, data_set):
    filtered_dict = {key: value for key, value in dictionary.items() if key in data_set}
    return filtered_dict

# 이 함수들을 사용하는 예시입니다.
# 먼저, mssql에서 데이터를 가져옵니다.
# server, user, password, database 정보는 실제 사용 환경에 맞게 수정해야 합니다.
data_from_mssql = fetch_data_from_mssql('서버주소', '유저명', '패스워드', '데이터베이스명')

# 엑셀에서 생성한 딕셔너리 (앞선 단계에서 만든 딕셔너리를 사용하세요)
excel_dictionary = {
    # 이곳에 앞서 생성한 딕셔너리 코드를 넣으세요.
}

# 필터링된 딕셔너리를 가져옵니다.
filtered_results = filter_dict_by_set(excel_dictionary, data_from_mssql)

# 필터링된 결과를 출력합니다.
for key, value in filtered_results.items():
    print(f"{key}: {value}")

위 코드에서 fetch_data_from_mssql 함수는 지정된 MSSQL 서버로부터 오늘 날짜에 해당하는 N_RKey 필드를 가져옵니다. 그리고 filter_dict_by_set 함수는 이 set에 있는 키와 일치하는 키를 가진 엑셀에서 생성한 딕셔너리 항목들만 필터링합니다.

실제 환경에서 실행하기 전에 server, user, password, database를 해당하는 값으로 교체하고, MSSQL 서버의 쿼리 구문