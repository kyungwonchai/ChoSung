using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;

namespace FileLineWriter
{
    public partial class MainWindow : Window
    {
        private readonly string _sourceFilePath = @"C:\Agent\_Gen1\largefile.txt";  // 원본 파일 경로
        private readonly double _defaultDelay = 50;  // 0.05초 (밀리초 단위)
        private readonly int _specialDelay = 5000;  // 5초 (특정 키워드가 있을 때 대기 시간)

        public MainWindow()
        {
            InitializeComponent();
        }

        // '시작' 버튼 클릭 시 호출되는 메서드
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            string destinationFilePath = FilePathTextBox.Text;

            // 파일 경로가 입력되지 않았으면 알림 표시
            if (string.IsNullOrEmpty(destinationFilePath))
            {
                MessageBox.Show("파일 경로를 입력해주세요.");
                return;
            }

            // 원본 파일이 존재하는지 확인
            if (!File.Exists(_sourceFilePath))
            {
                MessageBox.Show("원본 파일을 찾을 수 없습니다.");
                return;
            }

            // 경로에서 폴더 확인 후, 없으면 폴더 생성
            string directoryPath = Path.GetDirectoryName(destinationFilePath);
            if (!Directory.Exists(directoryPath))
            {
                Directory.CreateDirectory(directoryPath);
            }

            // 파일이 존재하지 않으면 빈 파일 생성
            if (!File.Exists(destinationFilePath))
            {
                File.Create(destinationFilePath).Close(); // 파일을 생성하고, 바로 닫음
            }

            // 상태 표시 업데이트
            StatusTextBlock.Text = "상태: 처리 중";

            // 원본 파일의 내용을 한 줄씩 읽기
            using (StreamReader reader = new StreamReader(_sourceFilePath))
            {
                string line;
                while ((line = reader.ReadLine()) != null)
                {
                    // 지정된 파일에 한 줄씩 추가
                    await WriteLineToLog(line, destinationFilePath);

                    // 기본 지연 시간 (0.05초)
                    await Task.Delay(TimeSpan.FromMilliseconds(_defaultDelay));
                }
            }

            // 상태 표시 완료
            StatusTextBlock.Text = "상태: 완료";
        }

        // 지정된 로그 파일에 한 줄씩 쓰는 메서드
        private async Task WriteLineToLog(string line, string destinationFilePath)
        {
            // 지정된 파일에 라인을 추가
            using (StreamWriter writer = File.AppendText(destinationFilePath))
            {
                await writer.WriteLineAsync(line);
            }

            // FST, FNL, PLAN 이 포함된 줄이 있을 때는 5초 대기
            if (line.Contains("FST") || line.Contains("FNL") || line.Contains("PLAN"))
            {
                await Task.Delay(_specialDelay);
            }
        }
    }
}
