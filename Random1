MEWTOCOL 프로토콜과 데이터 전송 방식
MEWTOCOL 프로토콜은 주로 ASCII 형식으로 데이터를 PLC와 주고받기 위해 사용됩니다. 각 명령은 고유의 형식으로 구성되며, 특정 명령어는 메모리의 특정 위치에 데이터를 쓰거나 읽기 위해 사용됩니다. 일반적으로, 명령어 형식은 다음과 같습니다:

perl
코드 복사
%01#WDDaaaaaaaabbbcccc**
여기서:

%01#WD는 명령의 시작을 나타냅니다.
D는 대상 메모리 영역을 나타냅니다 (여기서는 데이터 레지스터).
aaaaaaa는 시작 주소를 나타냅니다.
bbb는 끝 주소를 나타냅니다.
cccc는 전송할 데이터입니다.
**는 명령의 끝을 나타냅니다.
데이터 전송 예시
예시 1: 값을 1로 설정 (사용자 정의 프로토콜)
데이터 전송에서의 값 1은 다음과 같이 전송됩니다:

perl
코드 복사
%01#WDD02300023000100**
여기서:

023000은 시작 주소입니다.
023000은 끝 주소입니다.
0100은 전송할 데이터입니다 (01은 값 1, 00은 채우기 값).
예시 2: 문자열 "0123456789" 전송 (사용자 정의 프로토콜)
문자열 "0123456789"를 전송하면 다음과 같은 명령이 생성됩니다:

perl
코드 복사
%01#WDD023100231430313233343536373839**
여기서:

023100은 시작 주소입니다.
023143은 끝 주소입니다.
30313233343536373839는 ASCII 코드 값입니다.
각 문자 ASCII 코드 변환:

0 -> 30 (ASCII 코드)
1 -> 31
2 -> 32
3 -> 33
4 -> 34
5 -> 35
6 -> 36
7 -> 37
8 -> 38
9 -> 39
따라서, 문자열 "0123456789"는 30313233343536373839로 변환되어 전송됩니다.

코드 설명 및 데이터 전송
메서드: SendDataToPLC
csharp
코드 복사
private void SendDataToPLC(int address, int value)
{
    if (!serialPort.IsOpen)
    {
        Dispatcher.Invoke(() => LogError("시리얼 포트가 열려 있지 않습니다."));
        return;
    }

    try
    {
        string message;
        if (isCustomProtocol)
        {
            if (address == 2300)
            {
                message = $"%01#WDD0230002300{value:D2}00\r";
            }
            else
            {
                message = $"%01#WDD0231{address + 10:D4}{value:D4}\r";
            }
        }
        else
        {
            message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
        }
        byte[] messageBytes = Encoding.ASCII.GetBytes(message);
        serialPort.Write(messageBytes, 0, messageBytes.Length);
        Dispatcher.Invoke(() => LogMessage($"PLC로 데이터 전송: {message.Trim()} (포트: {currentPortName})."));
    }
    catch (Exception ex)
    {
        Dispatcher.Invoke(() => LogError($"PLC로 데이터 전송 중 오류: {ex.Message}"));
    }
}
메서드: SendPOInfoToPLC
csharp
코드 복사
private void SendPOInfoToPLC(string poInfo)
{
    if (!serialPort.IsOpen)
    {
        Dispatcher.Invoke(() => LogError("시리얼 포트가 열려 있지 않습니다."));
        return;
    }

    try
    {
        for (int i = 0; i < poInfo.Length; i += 2)
        {
            string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
            int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
            SendDataToPLC(2310 + (i / 2), value);
        }
        Dispatcher.Invoke(() => LogMessage($"PO 정보 전송: {poInfo} (포트: {currentPortName})."));
    }
    catch (Exception ex)
    {
        Dispatcher.Invoke(() => LogError($"PO 정보 전송 중 오류: {ex.Message}"));
    }
}
코드 분석
주소 변환: 023100 주소는 PLC 메모리의 특정 위치를 나타냅니다. 문자열 "0123456789"의 각 문자를 ASCII 코드로 변환하여 이 주소에 전송합니다.
값 변환: 각 문자는 2바이트(16비트)로 변환되어 전송됩니다. 예를 들어, 0는 30(ASCII)로 변환되어 3030으로 전송됩니다.
전송 형식: 기본 프로토콜과 사용자 정의 프로토콜에 따라 명령 형식이 다릅니다. 이 코드에서는 사용자 정의 프로토콜이 활성화된 경우 전송 형식을 맞추기 위해 0231002314 형식을 사용합니다.
응용 방법
데이터 전송:

문자열 데이터를 PLC로 전송하려면, 먼저 각 문자를 ASCII 코드로 변환한 다음 전송할 주소와 함께 MEWTOCOL 명령 형식에 맞게 구성합니다.
전송할 데이터가 숫자라면 SendDataToPLC 메서드를 사용하여 값을 전송합니다.
프로토콜 선택:

사용자가 프로토콜을 선택하면, isCustomProtocol 변수를 설정하여 전송 형식을 제어합니다.
포트 상태 확인:

시리얼 포트가 열려 있는지 확인한 후 데이터를 전송합니다. 포트가 열려 있지 않으면 에러 메시지를 출력합니다.
결론
MEWTOCOL 프로토콜은 PLC와의 통신을 위해 ASCII 형식의 명령어를 사용합니다.
각 명령어는 특정 형식에 따라 구성되며, 데이터는 ASCII 코드로 변환되어 전송됩니다.
이 프로그램은 사용자 정의 프로토콜을 사용하여 데이터를 정확하게 전송하며, 포트 상태를 확인하여 에러를 처리합니다.
이제 이 정보를 바탕으로 데이터를 전송하고 PLC와 통신할 수 있습니다. 추가적인 질문이나 도움이 필요하면 언제든지 말씀해 주세요.