래는 주어진 조건을 만족하는 WPF 애플리케이션의 C# 코드 예시입니다. 이 코드에서는 주기적으로 폴더를 검사하여 조건을 만족하는 폴더를 찾고, 찾으면 후속 작업을 수행하는 로직을 포함하고 있습니다.

csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Timers;
using System.Windows;

namespace FolderCheckApp
{
    public partial class MainWindow : Window
    {
        private Timer timer;
        private readonly string[] folderPaths = {
            @"C:\Folder1",
            @"C:\Folder2",
            @"D:\Folder3",
            @"E:\Folder4",
            @"F:\Folder5"
        };

        public MainWindow()
        {
            InitializeComponent();
            InitializeTimer();
        }

        private void InitializeTimer()
        {
            timer = new Timer(3600000); // 1 hour interval in milliseconds
            timer.Elapsed += OnTimerElapsed;
            timer.AutoReset = true;
            timer.Start();
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            foreach (var folderPath in folderPaths)
            {
                if (Directory.Exists(folderPath))
                {
                    var jpgFiles = Directory.GetFiles(folderPath, "*.jpg", SearchOption.AllDirectories);
                    if (jpgFiles.Length >= 20)
                    {
                        var recentFiles = jpgFiles.Where(file => File.GetCreationTime(file) > DateTime.Now.AddHours(-1));
                        if (recentFiles.Any())
                        {
                            // Folder is selected
                            Dispatcher.Invoke(() => PerformNextAction(folderPath));
                            return;
                        }
                    }
                }
            }
        }

        private void PerformNextAction(string selectedFolderPath)
        {
            // Implement the next action to be performed on the selected folder
            MessageBox.Show($"Selected Folder: {selectedFolderPath}");
        }
    }
}
위 코드에서는 System.Timers.Timer를 사용하여 1시간마다 폴더를 체크합니다. 각 폴더를 검사하여 JPG 파일이 20개 이상 있고, 최근 1시간 이내에 생성된 JPG 파일이 있는 경우 해당 폴더를 선택합니다. 선택된 폴더가 있으면 후속 작업(PerformNextAction 메소드)을 수행합니다.

이 코드를 WPF 프로젝트의 MainWindow.xaml.cs 파일에 추가하면 됩니다. InitializeComponent 메소드는 WPF 창을 초기화하는 역할을 하며, InitializeTimer 메소드는 타이머를 설정합니다. OnTimerElapsed 메소드는 타이머가 만료될 때마다 폴더를 검사합니다. PerformNextAction 메소드에서는 선택된 폴더에 대한 후속 작업을 수행합니다.

이 코드를 통해 주어진 조건을 만족하는 WPF 애플리케이션을 구현할 수 있습니