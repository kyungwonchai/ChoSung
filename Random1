x1에서 항목을 클릭했을 때, 선택된 폴더의 상세 정보를 보여주는 기능을 추가하겠습니다. ListBox1에서 폴더를 선택하면 해당 폴더 내의 파일들 중 가장 큰 파일 5개를 ListBox3에 표시하는 기능을 구현할 것입니다. 이 기능은 선택된 폴더 내의 파일들을 크기 순으로 정렬하고, 상위 5개 파일의 이름과 크기를 ListBox3에 표시합니다.

XAML 변경
새 ListBox를 추가하여, 세 번째 리스트 박스를 UI에 추가합니다.

xml
Copy code
<ListBox x:Name="listBox3" Grid.Row="5" Margin="10" />
MainWindow.xaml.cs 변경
ListBox1의 SelectionChanged 이벤트를 처리하는 메서드를 추가하고, 해당 폴더의 파일 정보를 ListBox3에 표시하는 로직을 구현합니다.

csharp
Copy code
private void ListBox1_SelectionChanged(object sender, SelectionChangedEventArgs e)
{
    if (listBox1.SelectedItem == null) return;

    string selectedFolderPath = listBox1.SelectedItem.ToString();
    DirectoryInfo directory = new DirectoryInfo(selectedFolderPath);
    if (!directory.Exists) return;

    var files = directory.GetFiles("*.*", SearchOption.TopDirectoryOnly)
                         .OrderByDescending(f => f.Length)
                         .Take(5)
                         .ToList();

    listBox3.Items.Clear();
    foreach (var file in files)
    {
        listBox3.Items.Add($"{file.Name} - {file.Length / 1024 / 1024} MB");
    }
}
전체적인 연동
UI 컨트롤들이 적절히 연동되도록 합니다. ListBox1_SelectionChanged 메서드를 ListBox1 컨트롤의 SelectionChanged 이벤트에 연결합니다.

xml
Copy code
<ListBox x:Name="listBox1" Grid.Row="3" Margin="10" SelectionChanged="ListBox1_SelectionChanged" />
이제 프로그램은 사용자가 ListBox1에서 폴더를 선택할 때마다 해당 폴더 내에서 가장 큰 파일 5개를 찾아 ListBox3에 표시합니다. 이를 통해 사용자는 간편하게 각 폴더의 주요 파일들