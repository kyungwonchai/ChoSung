10.244.122.222의 IP 주소와 8116 포트로 Flask 서버를 실행하고 Android 앱에서 접근하려고 할 때, IP 주소와 포트가 올바르게 설정되었는지 확인하고 필요한 조치를 취해야 합니다. 아래 단계들을 따라 설정을 확인하고 문제를 해결해보겠습니다.

1. Flask 서버 확인
먼저 Flask 서버가 올바르게 실행되고 있는지 확인합니다.

Flask 서버 실행 확인:

Flask 서버가 10.244.122.222:8116에서 실행되고 있는지 확인합니다.
서버를 실행할 때 app.run()의 host와 port 인수가 제대로 설정되어 있는지 확인합니다.
예시:

python
코드 복사
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8116)
0.0.0.0은 모든 네트워크 인터페이스에서 접근 가능하도록 하는 설정입니다.

서버 응답 확인:

다른 컴퓨터나 브라우저에서 http://10.244.122.222:8116/api/apk1/version와 같은 URL에 접근하여 서버가 올바르게 응답하는지 확인합니다.
응답이 제대로 오지 않는다면, 서버의 방화벽 설정이나 서버 코드에 문제가 있을 수 있습니다.
2. Android 앱에서 IP 주소와 포트 설정 확인
Android 앱의 MainActivity.kt 파일에서 Flask 서버의 IP 주소와 포트를 올바르게 설정했는지 확인합니다.

2-1. IP 주소 및 포트 설정
아래와 같이 Flask 서버의 IP 주소와 포트를 설정합니다:

kotlin
코드 복사
private fun checkForUpdates(context: Context, apkName: String) {
    val client = OkHttpClient()
    val request = Request.Builder()
        .url("http://10.244.122.222:8116/api/$apkName/version") // 서버의 IP와 포트 사용
        .build()

    client.newCall(request).execute().use { response ->
        if (!response.isSuccessful) throw IOException("Unexpected code $response")

        val responseData = response.body?.string()
        val jsonObject = JSONObject(responseData)
        val latestVersion = jsonObject.getString("version")
        val apkUrl = jsonObject.getString("apk_url")

        val currentVersion = BuildConfig.VERSION_NAME
        if (latestVersion != currentVersion) {
            downloadAndInstallApk(context, apkUrl, apkName)
        }
    }
}
3. 네트워크 설정 및 방화벽 확인
3-1. 서버 방화벽 및 네트워크 설정 확인
서버의 방화벽이나 보안 그룹이 8116 포트로의 외부 접속을 허용하고 있는지 확인합니다.

UFW 설정 (Ubuntu에서 UFW를 사용하는 경우):

bash
코드 복사
sudo ufw status
8116 포트가 허용되어 있는지 확인합니다. 만약 허용되지 않았다면 다음 명령어로 허용할 수 있습니다:

bash
코드 복사
sudo ufw allow 8116
서버 네트워크 설정:

서버가 다른 네트워크에서 접근 가능하도록 설정되어 있는지 확인합니다.
로컬 네트워크 외부에서 접근하려면 공인 IP 주소와 올바른 포트 포워딩이 설정되어야 합니다.
3-2. Android 디바이스 네트워크 설정 확인
Android 디바이스가 서버와 동일한 네트워크에 연결되어 있는지 확인합니다. 만약 서버가 로컬 네트워크에서만 접근 가능하도록 설정되어 있다면, Android 디바이스도 같은 네트워크에 연결되어야 합니다.

4. 서버 응답 및 디버깅
서버에 요청을 보내는 코드에 디버깅 정보를 추가하여, 정확한 오류 원인을 파악할 수 있습니다.

kotlin
코드 복사
client.newCall(request).execute().use { response ->
    if (!response.isSuccessful) {
        Log.e("Server Error", "Unexpected code $response")
        throw IOException("Unexpected code $response")
    }

    val responseData = response.body?.string()
    Log.d("Server Response", responseData ?: "No Response Data")
    
    val jsonObject = JSONObject(responseData)
    val latestVersion = jsonObject.getString("version")
    val apkUrl = jsonObject.getString("apk_url")

    val currentVersion = BuildConfig.VERSION_NAME
    if (latestVersion != currentVersion) {
        downloadAndInstallApk(context, apkUrl, apkName)
    }
}
이 코드로 서버 응답을 로그에 기록하여 문제가 무엇인지 더 정확하게 파악할 수 있습니다.

5. 최종 확인 및 테스트
서버 상태 확인:

서버가 정상적으로 작동하는지 확인하고, 다른 디바이스에서 접근해봅니다.
앱 실행 및 디버깅:

Android 앱을 실행하여 로그캣(Logcat)을 확인하고, 네트워크 요청이 성공적으로 이루어지는지 확인합니다.
이 과정들을 따라 설정을 확인하고 문제를 해결할 수 있습니다. 문제가 지속된다면, 로그를 통해 더 상세한 오류 메시지를 확인하고 추가