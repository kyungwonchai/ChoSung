treamlit을 사용해서 CT 데이터를 가독성 있게 시각화하려면 다음과 같은 방식을 고려할 수 있습니다.

1. 컬럼 색상 강조 방식 (Heatmap 스타일)
CT 값을 데이터프레임 표로 출력하면서 값의 차이에 따라 색을 다르게 표시하는 방식입니다.

CT1 vs CT2 차이 강조:

CT1 값보다 CT2 값이 높으면 빨간색으로 표시.

CT1 값보다 CT2 값이 낮으면 초록색으로 표시.

CT2 vs CT2Best 차이 강조:

CT2 값이 CT2Best보다 크면 빨간색으로 표시 (문제 발생 가능).

CT2 값이 CT2Best와 비슷하거나 더 낮으면 초록색으로 표시.

예시 코드:

python
코드 복사
import streamlit as st
import pandas as pd
import numpy as np

# 예시 데이터프레임 생성
data = pd.DataFrame({
    'Group1': ['A', 'B', 'C'],
    'Line1': ['L1', 'L2', 'L3'],
    'Model1': ['M1', 'M2', 'M3'],
    'Type1': ['T1', 'T2', 'T3'],
    'Ecn1': ['E1', 'E2', 'E3'],
    'Edition1': ['E1', 'E2', 'E3'],
    'CT1': [100, 95, 90],
    'CT2': [110, 90, 95],
    'CT2Best': [95, 85, 90]
})

# CT1 대비 CT2 차이 계산
data['CT1_vs_CT2_Diff'] = data['CT2'] - data['CT1']

# CT2 대비 CT2Best 차이 계산
data['CT2_vs_CT2Best_Diff'] = data['CT2'] - data['CT2Best']

# 색상 강조 함수 정의
def highlight_diff(row):
    styles = []
    if row['CT1_vs_CT2_Diff'] > 0:
        styles.append('background-color: red; color: white;')  # 문제 발생 가능
    else:
        styles.append('background-color: green; color: white;')  # 정상

    if row['CT2_vs_CT2Best_Diff'] > 0:
        styles.append('background-color: red; color: white;')  # 문제 발생 가능
    else:
        styles.append('background-color: green; color: white;')  # 정상

    return styles * len(row)

# 데이터프레임을 스타일링해서 Streamlit에 출력
styled_df = data.style.apply(highlight_diff, axis=1)
st.write(styled_df)
2. Bar Chart 또는 Line Chart 사용하기
각 모델별로 CT1, CT2, CT2Best를 막대 그래프로 비교 표시.

CT1이 기준선으로 표시되게 하고, CT2 및 CT2Best가 이 기준선에 비해 얼마나 차이나는지 시각화.

3. 상태 표시 아이콘 추가하기 (Emoji / 색상 아이콘)
✅ (정상), ⚠️ (경고), ❌ (문제 발생) 같은 아이콘으로 상황 표시.

예를 들어, CT2가 CT2Best보다 많이 높으면 ❌ 표시.

4. 결과 페이지 나누기 (탭 기능)
Streamlit의 st.tabs() 기능을 이용해서 여러 페이지를 만들어서 모델별 또는 라인별로 데이터를 나누어 볼 수 있게 함.

5. 조건부 서식 및 색상 사용하기
Streamlit의 st.dataframe() 함수를 활용해서 데이터프레임 내 값에 따라 색상을 자동으로 지정할 수 있음.

추천 방식: 1번 방식 (컬럼 색상 강조 방식)
이 방식이 가장 직관적으로 한눈에 문제를 파악할 수 있습니다. 빨간색과 초록색으로 명확하게 차이를 보여주기 때문에 실시간 모니터링에 적합합니다.

Streamlit은 HTML 스타일을 지원하므로 st.markdown()으로도 추가 스타일링을 할 수 있습니다. 원한다면 테이블 스타일을 개선할 수 있습니다.

코드 작성이 완료되면 Streamlit 앱을 실행해서 실시간으로 데이터를 확인할 수 있습니다.

bash
코드 복사
streamlit run your_app.py
더 전문적으로 만들려면 필터 기능, 검색 기능, 또는 특정 모델에 대한 상세 분석 페이지를 추가할 수도 있습니다.