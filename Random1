ter from C# code in a WPF application, you'll need to adjust the heights of the RowDefinitions in the Grid where your GridSplitter is located. Below, I'll provide an example on how to set the splitter to the top or middle positions based on your requirements.

Here is a brief guide on how you can modify your setup to programmatically control the GridSplitter:

XAML Setup: First, ensure your XAML is structured to allow for programmatic access to the rows.
xml
Copy code
<Grid Name="MainGrid">
    <!-- Define rows in your grid -->
    <Grid.RowDefinitions>
        <RowDefinition Name="Row1" Height="*"/>
        <RowDefinition Height="Auto"/>
        <RowDefinition Name="Row3" Height="2*"/>
    </Grid.RowDefinitions>

    <!-- GroupBox in the first row -->
    <GroupBox Grid.Row="0" Header="Top GroupBox">
        <!-- Content inside GroupBox -->
    </GroupBox>

    <!-- GridSplitter allows resizing between rows -->
    <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch" />

    <!-- TabControl in the third row -->
    <TabControl Grid.Row="2">
        <TabItem Header="Tab 1">
            <!-- Content inside first tab -->
        </TabItem>
        <TabItem Header="Tab 2">
            <!-- Content inside second tab -->
        </TabItem>
    </TabControl>
</Grid>
C# Code: You'll need to add methods to control the splitter's position.
csharp
Copy code
private void SetSplitterTop()
{
    // Set the first row's height to the minimum
    Row1.Height = new GridLength(0, GridUnitType.Pixel);

    // Adjust the third row to take up the remaining space
    Row3.Height = new GridLength(1, GridUnitType.Star);
}

private void SetSplitterMiddle()
{
    // Set both rows to take equal space
    Row1.Height = new GridLength(1, GridUnitType.Star);
    Row3.Height = new GridLength(1, GridUnitType.Star);
}
Usage: You can call these methods in response to events, such as button clicks or other UI interactions, to move the splitter to the top or middle.
csharp
Copy code
// Example of button click event handlers
private void BtnSetTop_Click(object sender, RoutedEventArgs e)
{
    SetSplitterTop();
}

private void BtnSetMiddle_Click(object sender, RoutedEventArgs e)
{
    SetSplitterMiddle();
}
This setup allows you to programmatically control the location of the GridSplitter by manipulating the Height properties of the adjacent RowDefinitions. This can be a flexible way to adjust your layout dynamically based on user interactions or other program lo