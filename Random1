이해했습니다. DetailCMD와 TaskqueueModel 파일 모두에 대해 다음과 같은 규칙을 적용하여 전체 코드를 수정하겠습니다:

DetailCMD 파일은 보낸 값과 받은 값을 한 행으로 매칭하여 처리하고, 보낸 값이 WD를 포함하거나 50자 이하인 경우에만 CCC 값을 설정합니다.
TaskqueueModel 파일의 경우 MAG: 뒤에 나오는 특정 문자열 값을 추출하고, 이 값이 시간 흐름에서 변경될 때마다 CCC 값을 1에서 2, 2에서 1로 토글합니다.
전체 코드 (C# WPF, DevExpress)
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;

namespace FileAnalysisApp
{
    public partial class MainWindow : Window
    {
        private string selectedFolderPath = @"c:\prod_file_logs";
        public ObservableCollection<LogEntry> Sheet2Entries { get; set; } = new ObservableCollection<LogEntry>();

        public MainWindow()
        {
            InitializeComponent();
            Sheet2Grid.ItemsSource = Sheet2Entries;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = selectedFolderPath;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    selectedFolderPath = dialog.SelectedPath;
                    SelectedFolderText.Text = selectedFolderPath;
                }
            }
        }

        private void Analyze_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFolderPath))
            {
                System.Windows.MessageBox.Show("Please select a folder first.");
                return;
            }

            Sheet2Entries.Clear();
            AnalyzeFiles(selectedFolderPath);
        }

        private void AnalyzeFiles(string folderPath)
        {
            var threeDaysAgo = DateTime.Now.AddDays(-3);
            var responseTracker = new Dictionary<string, string>();
            var sheet2Data = new List<LogEntry>();

            var timePattern = new Regex(@"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}");
            var keyPattern = new Regex(@"고유키:[^\s]+");
            var sendPattern = new Regex(@"보낸값:[^\s]+");
            var recvPattern = new Regex(@"받은값:[^\s]+");
            var magPattern = new Regex(@"MAG:\s([A-Za-z0-9]+)"); // MAG: 뒤의 공백과 특정 문자열 추출

            // CCC 토글 상태를 관리하는 변수
            int cccToggleState = 1;

            foreach (var filePath in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
            {
                var fileCreationTime = File.GetCreationTime(filePath);
                if (fileCreationTime < threeDaysAgo) continue;

                string fileName = Path.GetFileName(filePath);
                var lines = File.ReadAllLines(filePath);

                if (fileName.Contains("DetailCMD"))
                {
                    for (int i = 0; i < lines.Length - 1; i++)
                    {
                        var sendMatch = sendPattern.Match(lines[i]);
                        var recvMatch = recvPattern.Match(lines[i + 1]);

                        if (sendMatch.Success && recvMatch.Success)
                        {
                            var timeMatch = timePattern.Match(lines[i]);
                            var keyMatch = keyPattern.Match(lines[i]);
                            if (timeMatch.Success && keyMatch.Success)
                            {
                                string timeStr = timeMatch.Value;
                                string uniqueKey = keyMatch.Value.Split(':')[1];
                                string sendValue = sendMatch.Value.Split(':')[1];
                                string recvValue = recvMatch.Value.Split(':')[1];
                                string combinedKey = $"{sendValue}_{recvValue}";

                                DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                                string formattedTime = time.ToString("yyMMdd HHmmss");

                                // CCC 컬럼 기본값 설정
                                string cccValue = string.Empty;
                                if (sendValue.Contains("RC")) cccValue = "RC";
                                else if (sendValue.Contains("WDD")) cccValue = "WDD";
                                else if (sendValue.Contains("WDD2300")) cccValue = "WD2300";

                                // WD가 포함된 보낸 값이거나 50자 이하일 때 처리
                                if (sendValue.Contains("WD") || combinedKey.Length <= 50)
                                {
                                    if (sendValue.Contains("WD") || !responseTracker.ContainsKey(sendValue) || responseTracker[sendValue] != recvValue)
                                    {
                                        responseTracker[sendValue] = recvValue;
                                        sheet2Data.Add(new LogEntry
                                        {
                                            Filename = fileName,
                                            Time = formattedTime,
                                            UniqueKey = uniqueKey,
                                            SentValue = sendValue,
                                            ReceivedValue = recvValue,
                                            LengthOrRemainingData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD",
                                            CCC = cccValue
                                        });
                                    }
                                }
                            }
                            i++;
                        }
                    }
                }
                else if (fileName.Contains("TaskqueueModel"))
                {
                    foreach (var line in lines)
                    {
                        var timeMatch = timePattern.Match(line);
                        var magMatch = magPattern.Match(line);

                        if (timeMatch.Success && magMatch.Success)
                        {
                            // 시간과 MAG 값을 추출
                            string timeStr = timeMatch.Value;
                            string magValue = magMatch.Groups[1].Value;

                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");

                            // MAG 값이 이전과 다르면 CCC 값을 토글
                            if (responseTracker.ContainsKey(fileName))
                            {
                                if (responseTracker[fileName] != magValue)
                                {
                                    cccToggleState = cccToggleState == 1 ? 2 : 1;
                                }
                            }
                            responseTracker[fileName] = magValue;

                            // 데이터를 sheet2Data에 추가
                            sheet2Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                LengthOrRemainingData = line.Substring(timeMatch.Length).Trim(),
                                CCC = cccToggleState.ToString()
                            });
                        }
                    }
                }
                else
                {
                    // 다른 파일에 대한 처리 (TaskqueueModel과 DetailCMD 이외의 파일)
                    foreach (var line in lines)
                    {
                        var timeMatch = timePattern.Match(line);
                        if (timeMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");
                            string remainingData = line.Substring(timeMatch.Length).Trim();

                            sheet2Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                LengthOrRemainingData = remainingData
                            });
                        }
                    }
                }
            }

            foreach (var entry in sheet2Data.OrderBy(e => e.Time))
                Sheet2Entries.Add(entry);
        }
    }

    public class LogEntry
    {
        public string Filename { get; set; }
        public string Time { get; set; }
        public string UniqueKey { get; set; }
        public string SentValue { get; set; }
        public string ReceivedValue { get; set; }
        public string LengthOrRemainingData { get; set; }
        public string CCC { get; set; }  // CCC 토글 상태를 반영
    }
}