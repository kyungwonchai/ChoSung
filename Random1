
서비스 상태를 주기적으로 확인하고, 중지된 경우 자동으로 재시작하는 기능은 ViewModel이 아니라 서비스 컨트롤 헬퍼에서 수행하는 것이 더 적절합니다.

ServiceControllerHelper 클래스는 서비스와 관련된 모든 제어 기능(시작, 중지, 상태 확인 등)을 캡슐화하여 ViewModel에서 서비스와의 상호작용을 단순화합니다. 이를 통해 ViewModel은 비즈니스 로직에 집중할 수 있고, 서비스 제어 관련 로직은 ServiceControllerHelper에 집중할 수 있습니다.

이제 ServiceControllerHelper와 MainViewModel을 최종적으로 수정하여, 다음과 같은 기능을 갖추도록 하겠습니다:

ServiceControllerHelper:

서비스 시작, 중지, 상태 확인, 재시작 기능을 모두 포함합니다.
주기적으로 서비스 상태를 확인하는 기능을 포함합니다.
MainViewModel:

ServiceControllerHelper를 사용하여 서비스를 제어하고 상태를 모니터링합니다.
로그 메시지를 업데이트합니다.
수정된 ServiceControllerHelper 코드
csharp
코드 복사
using System;
using System.ServiceProcess;
using System.Timers;

namespace RouterMiddleACR.Services
{
    public class ServiceControllerHelper
    {
        private ServiceController _serviceController;
        private Timer _statusCheckTimer;
        private readonly string _serviceName = "RouterMiddleACRService";

        public event Action<string> OnLogMessage; // 로그 메시지를 전달하는 이벤트

        public ServiceControllerHelper()
        {
            _serviceController = new ServiceController(_serviceName);
            InitializeStatusCheckTimer();
        }

        // 서비스 상태 확인을 위한 타이머 초기화
        private void InitializeStatusCheckTimer()
        {
            _statusCheckTimer = new Timer(10000); // 10초마다 상태 체크
            _statusCheckTimer.Elapsed += (sender, args) => CheckServiceStatus();
            _statusCheckTimer.Start();
        }

        // 서비스 상태를 확인하고 필요한 경우 재시작하는 메서드
        private void CheckServiceStatus()
        {
            try
            {
                _serviceController.Refresh();
                string status = _serviceController.Status.ToString();
                OnLogMessage?.Invoke($"서비스 상태: {status}");

                if (_serviceController.Status == ServiceControllerStatus.Stopped)
                {
                    OnLogMessage?.Invoke("서비스가 중지되었습니다. 재시작합니다...");
                    RestartService();
                }
            }
            catch (Exception ex)
            {
                OnLogMessage?.Invoke($"서비스 상태 확인 중 오류 발생: {ex.Message}");
            }
        }

        // 서비스를 시작하는 메서드
        public void StartService()
        {
            try
            {
                if (_serviceController.Status == ServiceControllerStatus.Stopped)
                {
                    _serviceController.Start();
                    _serviceController.WaitForStatus(ServiceControllerStatus.Running, TimeSpan.FromSeconds(30));
                    OnLogMessage?.Invoke("서비스가 성공적으로 시작되었습니다.");
                }
            }
            catch (Exception ex)
            {
                OnLogMessage?.Invoke($"서비스 시작 중 오류 발생: {ex.Message}");
            }
        }

        // 서비스를 중지하는 메서드
        public void StopService()
        {
            try
            {
                if (_serviceController.Status == ServiceControllerStatus.Running)
                {
                    _serviceController.Stop();
                    _serviceController.WaitForStatus(ServiceControllerStatus.Stopped, TimeSpan.FromSeconds(30));
                    OnLogMessage?.Invoke("서비스가 성공적으로 중지되었습니다.");
                }
            }
            catch (Exception ex)
            {
                OnLogMessage?.Invoke($"서비스 중지 중 오류 발생: {ex.Message}");
            }
        }

        // 서비스를 재시작하는 메서드
        public void RestartService()
        {
            StopService();
            StartService();
        }

        // 현재 서비스 상태를 반환하는 메서드
        public string GetServiceStatus()
        {
            try
            {
                _serviceController.Refresh();
                return _serviceController.Status.ToString();
            }
            catch (Exception ex)
            {
                OnLogMessage?.Invoke($"서비스 상태를 가져오는 중 오류 발생: {ex.Message}");
                return "Unknown";
            }
        }
    }
}
수정된 MainViewModel 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ServiceControllerHelper _serviceControllerHelper;

        public ObservableCollection<string> LogMessages { get; } = new ObservableCollection<string>();

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper();
            _serviceControllerHelper.OnLogMessage += LogMessage; // 로그 메시지 이벤트 핸들러 등록
        }

        // 로그 메시지를 추가하는 메서드
        private void LogMessage(string message)
        {
            LogMessages.Add(message);
        }

        // 서비스 시작 메서드
        public void StartService()
        {
            _serviceControllerHelper.StartService();
        }

        // 서비스 중지 메서드
        public void StopService()
        {
            _serviceControllerHelper.StopService();
        }

        // 서비스 상태를 갱신하는 메서드
        public void RefreshServiceStatus()
        {
            var status = _serviceControllerHelper.GetServiceStatus();
            LogMessage($"서비스 상태: {status}");
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
ServiceControllerHelper 클래스:
서비스 상태 체크:

Timer를 사용하여 10초마다 CheckServiceStatus 메서드를 호출합니다.
서비스가 중지된 경우 RestartService 메서드를 호출하여 서비스를 자동으로 다시 시작합니다.
서비스 시작, 중지, 재시작:

StartService, StopService, RestartService 메서드는 각각 서비스를 시작, 중지, 재시작하는 역할을 합니다.
서비스 상태 변경과 관련된 로그 메시지를 OnLogMessage 이벤트를 통해 외부로 전달합니다.
이벤트 사용:

OnLogMessage 이벤트를 사용하여 서비스 상태 변화나 오류 메시지를 MainViewModel에 전달합니다.
MainViewModel 클래스:
서비스 컨트롤 헬퍼와 상호작용:

ServiceControllerHelper 인스턴스를 생성하고, 로그 메시지 이벤트 핸들러를 LogMessage 메서드에 연결합니다.
서비스를 제어하는 모든 기능(시작, 중지, 상태 갱신 등)을 헬퍼 클래스를 통해 수행합니다.
로그 메시지 관리:

LogMessages 컬렉션에 로그 메시지를 추가하여 UI에 표시합니다.
요약
서비스 상태 관리는 ServiceControllerHelper에서 수행되며, 주기적인 상태 확인과 자동 재시작 기능을 포함합니다.
**MainViewModel**은 헬퍼 클래스의 기능을 사용하여 서비스를 제어하고 로그 메시지를 관리합니다.
이 구조는 MVVM 패턴을 유지하면서 서비스 제어 로직과 UI 로직을 명확하게 분리합니다.






