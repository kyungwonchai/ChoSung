해당 요구 사항을 반영하여 파일 생성 규칙을 다시 구현하겠습니다. 다음은 각 항목에 대한 설명을 기반으로 WPF 애플리케이션에서 파일을 생성하는 규칙을 구현한 코드입니다.

요구 사항 정리:
BASIC_MODEL: 1시간마다 123을 1씩 증가시키고, BASIC_MODEL = BSM-S123/512D 형식으로 생성.
MODEL_CODE: BASIC_MODEL에 "modelcode"를 붙여서 생성.
PO_NO: 12자리 중복 없는 숫자 값.
PO_PLAN_QTY: 각 PO_NO별 계획 수량은 항상 400개.
MAG_NO: 18자리 중복 없는 값으로 W로 시작.
MAG_QTY: 30~50개씩 랜덤하게 생성하여 생산 수량을 기록.
PO_PROD_QTY: MAG_QTY의 누적 값이 400이 되면 다음 PO_NO로 넘어감.
리스트에 맞춰 400, 300, 400, 1000 등의 순서로 계획 수량을 무한 반복.
이를 기반으로 파일 생성기를 다시 작성하겠습니다.

MainWindow.xaml.cs 코드
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;

namespace FileWatcherApp
{
    public partial class MainWindow : Window
    {
        private bool _isGenerating;

        private int _basicModelCounter = 123;  // BASIC_MODEL의 초기값
        private int _poProdQty = 0;            // 누적 생산 수량
        private int _currentPlanQtyIndex = 0;  // 리스트 인덱스
        private string _currentPoNo;           // 현재 PO_NO
        private string _currentBasicModel;     // 현재 BASIC_MODEL
        private List<int> _planQtyList = new List<int> { 400, 300, 400, 1000 };  // PO_PLAN_QTY 리스트

        public MainWindow()
        {
            InitializeComponent();
        }

        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isGenerating)
            {
                Log("File generation is already running.");
                return;
            }

            _isGenerating = true;
            Log("Starting to generate files...");

            _currentPoNo = GenerateUniquePoNo();
            _currentBasicModel = $"BSM-S{_basicModelCounter}/512D";
            _poProdQty = 0;

            try
            {
                while (_isGenerating)
                {
                    // 30~50개 사이의 MAG_QTY 생성
                    int magQty = new Random().Next(30, 51);

                    // PO_PROD_QTY에 더해서 누적 값 계산
                    _poProdQty += magQty;

                    // 계획 수량에 맞춰 마지막 수량 조정
                    if (_poProdQty >= _planQtyList[_currentPlanQtyIndex])
                    {
                        magQty = _planQtyList[_currentPlanQtyIndex] - (_poProdQty - magQty);  // 계획 수량 맞추기
                        _poProdQty = _planQtyList[_currentPlanQtyIndex];  // 누적 수량 400 또는 300 등으로 맞춤
                    }

                    // 로그 파일 생성
                    GenerateLogFile(magQty);

                    // 다음 PO_NO로 넘어가기
                    if (_poProdQty >= _planQtyList[_currentPlanQtyIndex])
                    {
                        Log($"PO_NO {_currentPoNo} completed with {_poProdQty} items.");
                        _currentPlanQtyIndex = (_currentPlanQtyIndex + 1) % _planQtyList.Count;  // 리스트에서 다음 계획 수량 선택
                        _currentPoNo = GenerateUniquePoNo();  // 새로운 PO_NO 생성
                        _poProdQty = 0;  // 누적 생산 수량 초기화

                        // BASIC_MODEL 변경
                        if (_currentPlanQtyIndex == 0)  // 1시간마다 변경, 리스트 한바퀴 돌 때마다
                        {
                            _basicModelCounter++;
                            _currentBasicModel = $"BSM-S{_basicModelCounter}/512D";
                        }
                    }

                    // 30~60초 랜덤 대기
                    var randomInterval = new Random().Next(30, 61);
                    Log($"Next file will be generated in {randomInterval} seconds...");
                    await Task.Delay(randomInterval * 1000);
                }
            }
            catch (Exception ex)
            {
                Log($"Error during file generation: {ex.Message}");
            }
        }

        // 로그 파일 생성 함수
        private void GenerateLogFile(int magQty)
        {
            try
            {
                var prodLogPath = @"C:\PROD_FILE_LOG";

                // 현재 시간을 기반으로 파일 이름 생성
                var currentTime = DateTime.Now.ToString("yyyyMMddHHmmss");
                var fileName = $"W_test_{currentTime}.txt";
                var filePath = Path.Combine(prodLogPath, fileName);

                // 폴더가 없으면 생성
                if (!Directory.Exists(prodLogPath))
                {
                    Directory.CreateDirectory(prodLogPath);
                }

                // MAG_NO 생성 (W로 시작하는 18자리 중복없는 값)
                var magNo = "W" + Guid.NewGuid().ToString("N").Substring(0, 17);

                // 파일 내용 작성
                var fileContent = $"MAG_NO='{magNo}'\n" +
                                  $"MAG_QTY={magQty}\n" +
                                  $"BASIC_MODEL='{_currentBasicModel}'\n" +
                                  $"MODEL_CODE='{_currentBasicModel}modelcode'\n" +
                                  $"PO_NO='{_currentPoNo}'\n" +
                                  $"PO_PLAN_QTY={_planQtyList[_currentPlanQtyIndex]}\n" +
                                  $"PO_PROD_QTY={_poProdQty}";

                // 파일 생성
                File.WriteAllText(filePath, fileContent);

                // 로그 출력
                Log($"Log file generated: {filePath}");
            }
            catch (Exception ex)
            {
                Log($"Error generating log file: {ex.Message}");
            }
        }

        // 중복 없는 12자리 PO_NO 생성 함수
        private string GenerateUniquePoNo()
        {
            return new Random().Next(100000000000, 999999999999).ToString();
        }

        // 로그 출력 함수
        private void Log(string message)
        {
            LogTextBox.AppendText($"{DateTime.Now}: {message}\n");
            LogTextBox.ScrollToEnd();
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            _isGenerating = false;
            Log("Stopped file generation.");
        }
    }
}
MainWindow.xaml (UI)
xml
코드 복사
<Window x:Class="FileWatcherApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Watcher" Height="350" Width="525">
    <Grid>
        <StackPanel>
            <!-- 로그 메시지를 표시하는 TextBox -->
            <TextBox Name="LogTextBox" Height="200" VerticalScrollBarVisibility="Auto" IsReadOnly="True"/>

            <!-- 파일 생성 시작 버튼 -->
            <Button Content="Start Generating Files" Click="StartButton_Click" />

            <!-- 파일 생성 중지 버튼 -->
            <Button Content="Stop Generating Files" Click="StopButton_Click" />
        </StackPanel>
    </Grid>
</Window>
설명
BASIC_MODEL 및 MODEL_CODE: 1시간마다 BASIC_MODEL 값의 숫자를 1씩 증가시키며 MODEL_CODE는 해당 BASIC_MODEL 값에 "modelcode"를 붙여 생성합니다.

PO_NO: 중복 없는 12자리 숫자로 PO_NO를 생성하며, 누적 생산 수량이 계획 수량에 도달하면 새로운 PO_NO로 넘어갑니다.

PO_PLAN_QTY: 주어진 리스트(400, 300, 400, 1000)를 순차적으로 반복하여 생산 계획 수량을 정합니다.

MAG_NO: W로 시작하는 18자리의 중복 없는 값을 생성하며, MAG_QTY는 30~50 사이의 랜덤 값으로 설정됩니다.

PO_PROD_QTY: MAG_QTY를 누적하여 400 또는 300 등의 계획 수량에 도달할 때마다 새로운 PO_NO로 넘어갑니다.

랜덤 대기: 파일 생성 간격은 30~60초 사이로 랜덤하게 설정되며, 로그 창에서 다음 파일이 생성될 시간을 보여줍니다.

중지 기능: "Stop Generating Files" 버튼을 통해 파일 생성 작업을 중단할 수 있습니다.

이 코드는 당신의 요구 사항에 맞춰서 파일을 생성하도록 설계되었습니다. 각 항목은 매 시간, 또는 설정된 수량에 맞춰 동적으로 변경됩니다