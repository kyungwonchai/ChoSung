using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Input;

namespace DataGridAuthorization
{
    public partial class MainWindow : Window
    {
        private SampleDataViewModel viewModel;

        public MainWindow()
        {
            InitializeComponent();
            viewModel = new SampleDataViewModel();
            DataContext = viewModel;
        }
    }

    public class SampleDataViewModel : INotifyPropertyChanged
    {
        private ObservableCollection<SampleData> sampleDataList;
        public ObservableCollection<SampleData> SampleDataList
        {
            get { return sampleDataList; }
            set
            {
                if (sampleDataList != value)
                {
                    sampleDataList = value;
                    NotifyPropertyChanged(nameof(SampleDataList));
                }
            }
        }

        private string[] columnNames;
        private bool[] readOnlyColumns;

        public SampleDataViewModel()
        {
            SampleDataList = new ObservableCollection<SampleData>();
            LoadData();
            InitializeReadOnlyColumns();
        }

        private void LoadData()
        {
            // 데이터베이스 연결 정보
            string connectionString = "YourConnectionStringHere"; // 데이터베이스 연결 문자열을 입력하세요.

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                try
                {
                    // 데이터베이스 연결
                    connection.Open();

                    // 테이블 이름을 수정하세요.
                    string tableName = "YourTableNameHere"; // 데이터베이스에서 사용할 테이블 이름을 입력하세요.

                    // 테이블의 컬럼 정보를 가져오기 위한 쿼리 작성
                    string query = $"SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{tableName}'";

                    using (SqlCommand command = new SqlCommand(query, connection))
                    {
                        using (SqlDataReader reader = command.ExecuteReader())
                        {
                            // 컬럼 정보를 columnNames 배열에 저장
                            int columnCount = reader.FieldCount;
                            columnNames = new string[columnCount];

                            int columnIndex = 0;
                            while (reader.Read())
                            {
                                columnNames[columnIndex] = reader.GetString(0);
                                columnIndex++;
                            }
                        }
                    }

                    // 테이블의 데이터를 가져오기 위한 쿼리 작성
                    string selectQuery = $"SELECT * FROM {tableName}";

                    using (SqlCommand selectCommand = new SqlCommand(selectQuery, connection))
                    {
                        using (SqlDataReader reader = selectCommand.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                SampleData data = new SampleData();
                                for (int i = 0; i < columnNames.Length; i++)
                                {
                                    string columnName = columnNames[i];
                                    data[columnName] = reader[columnName].ToString();
                                }
                                SampleDataList.Add(data);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    // 예외 처리
                    MessageBox.Show("Error: " + ex.Message);
                }
            }
        }

        private void InitializeReadOnlyColumns()
        {
            readOnlyColumns = new bool[columnNames.Length];
            SetAllColumnsReadOnly();
        }

        private void SetAllColumnsReadOnly()
        {
            for (int i = 0; i < readOnlyColumns.Length; i++)
            {
                readOnlyColumns[i] = true;
            }
        }

        private void SetReadOnlyColumns(params int[] editableColumnIndices)
        {
            SetAllColumnsReadOnly();

            foreach (int index in editableColumnIndices)
            {
                if (index >= 0 && index < readOnlyColumns.Length)
                {
                    readOnlyColumns[index] = false;
                }
            }

            NotifyColumnsPropertyChanged();
        }

        private void NotifyColumnsPropertyChanged()
        {
            for (int i = 0; i < readOnlyColumns.Length; i++)
            {
                string propertyName = "ReadOnly" + columnNames[i];
                NotifyPropertyChanged(propertyName);
            }
        }

        public bool ReadOnlyColumnA => readOnlyColumns[0];
        public bool ReadOnlyColumnB => readOnlyColumns[1];
        public bool ReadOnlyColumnC => readOnlyColumns[2];
        public bool ReadOnlyColumnD => readOnlyColumns[3];
        public bool ReadOnlyColumnE => readOnlyColumns[4];
        public bool ReadOnlyColumnF => readOnlyColumns[5];
        public bool ReadOnlyColumnG => readOnlyColumns[6];
        public bool ReadOnlyColumnH => readOnlyColumns[7];
        public bool ReadOnlyColumnI => readOnlyColumns[8];
        public bool ReadOnlyColumnJ => readOnlyColumns[9];

        public event PropertyChangedEventHandler PropertyChanged;

        private void NotifyPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class SampleData
    {
        // 각 컬럼의 데이터를 저장하는 Dictionary
        private readonly Dictionary<string, string> data;

        public SampleData()
        {
            data = new Dictionary<string, string>();
        }

        public string this[string columnName]
        {
            get
            {
                if (data.ContainsKey(columnName))
                    return data[columnName];
                return string.Empty;
            }
            set
            {
                data[columnName] = value;
            }
        }
    }
}
