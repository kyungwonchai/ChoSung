Python

import paramiko
import io
import time

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# 라즈베리파이 접속 정보
REMOTE_HOST = '192.168.0.10'  # 라즈베리파이 IP 주소
REMOTE_PORT = 22
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password' # 라즈베리파이 비밀번호

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder" # 감시할 폴더의 절대 경로
MAX_DELAY_SECONDS = 300  # 폴더 수정이 없을 때 재부팅까지 기다릴 시간 (5분)

# [중요] 부팅 후 무한 재부팅 방지를 위한 유예 기간 (Grace Period)
BOOT_GRACE_PERIOD_SECONDS = 1320 # (22 * 60)
# ===============================================================

def run_sudo_command(ssh_client, command, password):
    """SSH 클라이언트에서 단일 sudo 명령어를 실행하고 결과를 반환합니다."""
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        stdin.write(password + '\n')
        stdin.flush()
        
        exit_status = stdout.channel.recv_exit_status()
        
        stdout_output = stdout.read().decode('utf-8').strip()
        stderr_output = stderr.read().decode('utf-8').strip()

        if exit_status != 0:
            if "sudo" in stderr_output.lower():
                 raise Exception(f"Sudo command failed. Check password or sudoers config. Error: {stderr_output}")
            raise Exception(f"Command failed with exit status {exit_status}. Error: {stderr_output}")
            
        if stdout_output:
            print(stdout_output)
            
        return True, f"Command '{command}' executed successfully."
    except Exception as e:
        return False, str(e)


def setup_watchdog_on_remote(hostname, port, username, password, target_folder, max_delay, grace_period):
    """원격 라즈베리파이에 접속하여 수정된 Watchdog 설정을 자동화하는 메인 함수"""
    ssh_client = None
    try:
        print("Connecting to Raspberry Pi...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port=port, username=username, password=password, timeout=10)
        sftp = ssh_client.open_sftp()
        print("Connection successful.")

        check_script_path = "/etc/watchdog.d/quick_folder_check.sh"
        check_script_content = f"""#!/bin/bash
TARGET_FOLDER="{target_folder}"
MAX_DELAY={max_delay}
GRACE_PERIOD={grace_period}

UPTIME=$(cut -d' ' -f1 /proc/uptime | cut -d'.' -f1)

if [ "$UPTIME" -lt "$GRACE_PERIOD" ]; then
  exit 0
fi

if [ ! -d "$TARGET_FOLDER" ]; then
    exit 1
fi

LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))

if [ $TIME_DIFF -gt $MAX_DELAY ]; then
    exit 1
else
    exit 0
fi
"""
        print("Uploading updated check script...")
        temp_script_path = "/tmp/quick_folder_check.sh"
        
        # ▼▼▼ [수정된 부분 1] StringIO -> BytesIO, .encode('utf-8') 추가 ▼▼▼
        sftp.putfo(io.BytesIO(check_script_content.encode('utf-8')), temp_script_path)
        
        run_sudo_command(ssh_client, "sudo mkdir -p /etc/watchdog.d", password)
        
        success, msg = run_sudo_command(ssh_client, f"sudo mv {temp_script_path} {check_script_path}", password)
        if not success: raise Exception(msg)
        
        success, msg = run_sudo_command(ssh_client, f"sudo chmod +x {check_script_path}", password)
        if not success: raise Exception(msg)
        print("Check script setup complete.")

        config_path = "/etc/watchdog.conf"
        config_content = f"""
watchdog-device        = /dev/watchdog
watchdog-timeout       = 15
interval               = 10
test-binary            = {check_script_path}
test-timeout           = 5
"""
        print(f"Uploading watchdog config to {config_path}...")
        temp_config_path = "/tmp/watchdog.conf"

        # ▼▼▼ [수정된 부분 2] StringIO -> BytesIO, .encode('utf-8') 추가 ▼▼▼
        sftp.putfo(io.BytesIO(config_content.strip().encode('utf-8')), temp_config_path)

        success, msg = run_sudo_command(ssh_client, f"sudo mv {temp_config_path} {config_path}", password)
        if not success: raise Exception(msg)

        run_sudo_command(ssh_client, f"sudo chown root:root {config_path}", password)
        run_sudo_command(ssh_client, f"sudo chmod 644 {config_path}", password)
        print("Watchdog config setup complete.")

        print("Restarting watchdog service...")
        success, msg = run_sudo_command(ssh_client, "sudo systemctl restart watchdog", password)
        if not success: raise Exception(msg)
        print("Watchdog service restarted.")
        
        time.sleep(2)
        print("\nVerifying watchdog service status...")
        run_sudo_command(ssh_client, "sudo systemctl status watchdog --no-pager -l", password)

        sftp.close()
        return (True, "Watchdog setup on Raspberry Pi completed successfully with boot loop protection!")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("\nConnection closed.")


if __name__ == "__main__":
    success, message = setup_watchdog_on_remote(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        password=REMOTE_PASSWORD,
        target_folder=TARGET_FOLDER_TO_WATCH,
        max_delay=MAX_DELAY_SECONDS,
        grace_period=BOOT_GRACE_PERIOD_SECONDS
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")