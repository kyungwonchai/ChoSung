// FILE_ID: ViewModels/StatusViewModel_20250410183000
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic;

namespace LockerManagementApp.ViewModels
{
    public class StatusViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;

        private ObservableCollection<StatusItem> _statusByType;
        private ObservableCollection<StatusItem> _statusByTypeFloorZone; // 수정
        private string _statusMessage;

        public ObservableCollection<StatusItem> StatusByType { get => _statusByType; set => SetProperty(ref _statusByType, value); }
        public ObservableCollection<StatusItem> StatusByTypeFloorZone { get => _statusByTypeFloorZone; set => SetProperty(ref _statusByTypeFloorZone, value); } // 수정
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadStatusCommand { get; }

        public StatusViewModel()
        {
            StatusByType = new ObservableCollection<StatusItem>();
            StatusByTypeFloorZone = new ObservableCollection<StatusItem>(); // 수정

            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[Status] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [Status] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), _ => !_disposed); return; }

            LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), CanExecuteLoad);
            if (_context != null) { _ = LoadStatusDataAsync(); }
        }

        private bool CanExecuteLoad(object parameter = null) => !_disposed && _context != null && !_cts.IsCancellationRequested;

        public async Task LoadStatusDataAsync()
        {
            if (!CanExecuteLoad()) return;
            StatusMessage = "현황 데이터 로딩 중...";
            (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 시작...");

            List<LockerAssignment> allAssignments = null;
            try
            {
                if (!CanExecuteLoad()) return;
                allAssignments = await _context.LockerAssignments.AsNoTracking().ToListAsync(_cts.Token);
                if (_disposed || _cts.IsCancellationRequested) return;

                var statusByType = CalculateStatus(allAssignments, a => a.LockerType);
                // *** 수정: 종류-층-구역별 집계 ***
                var statusByTypeFloorZone = CalculateStatus(allAssignments, a => $"{a.LockerType ?? "미지정"}-{a.Floor ?? "미지정"}-{a.Zone ?? "미지정"}");

                if (_disposed || _cts.IsCancellationRequested) return;

                Application.Current.Dispatcher.Invoke(() =>
                {
                    if (_disposed || _cts.IsCancellationRequested || Application.Current == null) return;
                    StatusByType = new ObservableCollection<StatusItem>(statusByType);
                    StatusByTypeFloorZone = new ObservableCollection<StatusItem>(statusByTypeFloorZone); // 수정
                    StatusMessage = "현황 데이터 로드 완료.";
                });
            }
            catch (OperationCanceledException) { Debug.WriteLine("LoadStatusDataAsync 작업 취소됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 취소됨."; }
            catch (ObjectDisposedException) { Debug.WriteLine("LoadStatusDataAsync 실행 중 DbContext Dispose됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 오류 (컨텍스트 해제됨)."; }
            catch (Exception ex) { StatusMessage = $"현황 데이터 로딩 오류: {ex.Message}"; Debug.WriteLine($"!!! 현황 데이터 로딩 중 오류 발생:\n{ex.ToString()}"); if (!App.IsShuttingDown && !_disposed) MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            finally { if (!_disposed) (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged(); Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 종료."); }
        }

        private List<StatusItem> CalculateStatus(List<LockerAssignment> assignments, Func<LockerAssignment, string> groupingKeySelector)
        {
            if (assignments == null) return new List<StatusItem>();
            return assignments
                .GroupBy(groupingKeySelector)
                .Select(g => {
                    int total = g.Count();
                    int used = g.Count(a => !string.IsNullOrWhiteSpace(a.UserName));
                    int available = total - used;
                    double rate = (total == 0) ? 0 : ((double)used / total * 100.0);
                    return new StatusItem
                    {
                        GroupValue = g.Key ?? "미지정",
                        TotalCount = total,
                        UsedCount = used,
                        AvailableCount = available,
                        UsageRate = rate
                    };
                })
                .OrderBy(s => s.GroupValue) // 그룹 키(문자열) 기준으로 정렬
                .ToList();
        }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("StatusViewModel Dispose 시작..."); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("StatusViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
```

---

**2. `Views/StatusWindow.xaml` (수정)**

두 번째 행의 표와 차트 헤더 및 바인딩을 "종류-층-구역별" 현황에 맞게 수정합니다.

```xml
<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.StatusWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    mc:Ignorable="d"
    Title="사물함 사용 현황" Height="750" Width="1200"
    WindowStartupLocation="CenterOwner" ShowInTaskbar="False"
    Closing="StatusWindow_Closing">

    <dx:ThemedWindow.Resources>
        <Style TargetType="dxg:GridColumnHeader">
            <Setter Property="Background" Value="LightSteelBlue"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="dxg:LightweightCellEditor">
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="LeftAlignCellStyle" TargetType="dxg:LightweightCellEditor">
            <Setter Property="HorizontalAlignment" Value="Left"/>
        </Style>
    </dx:ThemedWindow.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Button Grid.Row="0" Content="🔄 새로고침" Command="{Binding LoadStatusCommand}" HorizontalAlignment="Left" Margin="0,0,0,10" Padding="10,3"/>

        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <GroupBox Grid.Row="0" Grid.Column="0" Header="종류별 현황" Margin="0,0,5,5">
                    <dxg:GridControl ItemsSource="{Binding StatusByType}" AutoGenerateColumns="None">
                        <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="GroupValue" Header="종류" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                            <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                            <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                            <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                            <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </GroupBox>
                <GroupBox Header="종류별 현황 차트" Grid.Row="0" Grid.Column="1" Margin="5,0,0,5">
                     <dxc:ChartControl DataSource="{Binding StatusByType}">
                         <dxc:ChartControl.Diagram> <dxc:XYDiagram2D> <dxc:XYDiagram2D.Series> <dxc:BarSideBySideSeries2D DisplayName="사용" ArgumentDataMember="GroupValue" ValueDataMember="UsedCount" BarWidth="0.4"/> <dxc:BarSideBySideSeries2D DisplayName="여유" ArgumentDataMember="GroupValue" ValueDataMember="AvailableCount" BarWidth="0.4"/> </dxc:XYDiagram2D.Series> <dxc:XYDiagram2D.AxisX> <dxc:AxisX2D/> </dxc:XYDiagram2D.AxisX> <dxc:XYDiagram2D.AxisY> <dxc:AxisY2D><dxc:AxisY2D.Title><dxc:AxisTitle Content="개수"/></dxc:AxisY2D.Title></dxc:AxisY2D> </dxc:XYDiagram2D.AxisY> </dxc:XYDiagram2D> </dxc:ChartControl.Diagram>
                         <dxc:ChartControl.Legend> <dxc:Legend HorizontalPosition="Center" VerticalPosition="BottomOutside" Orientation="Horizontal"/> </dxc:ChartControl.Legend>
                     </dxc:ChartControl>
                </GroupBox>

                <GroupBox Grid.Row="1" Grid.Column="0" Header="종류-층-구역별 현황" Margin="0,5,5,0">
                     <dxg:GridControl ItemsSource="{Binding StatusByTypeFloorZone}" AutoGenerateColumns="None">
                         <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="GroupValue" Header="종류-층-구역" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                             <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                             <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                             <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                             <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                </GroupBox>
                 <GroupBox Header="종류-층-구역별 현황 차트" Grid.Row="1" Grid.Column="1" Margin="5,5,0,0">
                     <dxc:ChartControl DataSource="{Binding StatusByTypeFloorZone}">
                         <dxc:ChartControl.Diagram>
                             <dxc:XYDiagram2D Rotated="True">
                                 <dxc:XYDiagram2D.Series>
                                     <dxc:BarSideBySideSeries2D DisplayName="사용" ArgumentDataMember="GroupValue" ValueDataMember="UsedCount" BarWidth="0.4"/>
                                     <dxc:BarSideBySideSeries2D DisplayName="여유" ArgumentDataMember="GroupValue" ValueDataMember="AvailableCount" BarWidth="0.4"/>
                                 </dxc:XYDiagram2D.Series>
                                 <dxc:XYDiagram2D.AxisX> <dxc:AxisX2D GridLinesVisible="True"/> </dxc:XYDiagram2D.AxisX>
                                 <dxc:XYDiagram2D.AxisY> <dxc:AxisY2D><dxc:AxisY2D.Title><dxc:AxisTitle Content="개수"/></dxc:AxisY2D.Title></dxc:AxisY2D> </dxc:XYDiagram2D.AxisY>
                             </dxc:XYDiagram2D>
                         </dxc:ChartControl.Diagram>
                         <dxc:ChartControl.Legend> <dxc:Legend HorizontalPosition="Center" VerticalPosition="BottomOutside" Orientation="Horizontal"/> </dxc:ChartControl.Legend>
                     </dxc:ChartControl>
                 </GroupBox>

            </Grid>
        </ScrollViewer>

         <StatusBar Grid.Row="2" Background="LightGray" Margin="0,10,0,0">
            <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem>
        </StatusBar>

        <Button Grid.Row="3" Content="닫기" Width="80" HorizontalAlignment="Right" Margin="0,10,0,0" Click="CloseButton_Click" IsCancel="True"/>

    </Grid>
</dx:ThemedWindow>
```

**핵심 변경 사항:**

* **`ViewModels/StatusViewModel.cs`:**
    * `StatusByFloorZone` 속성 이름을 `StatusByTypeFloorZone`으로 변경했습니다.
    * `LoadStatusDataAsync`에서 `CalculateStatus`를 호출할 때 그룹화 키를 `a => $"{a.LockerType ?? "미지정"}-{a.Floor ?? "미지정"}-{a.Zone ?? "미지정"}"`로 변경하여 종류, 층, 구역을 모두 조합한 키로 그룹화하도록 수정했습니다.
* **`Views/StatusWindow.xaml`:**
    * 두 번째 행(`Grid.Row="1"`)의 `GroupBox` 헤더와 `GridColumn` 헤더 텍스트를 "종류-층-구역별 현황", "종류-층-구역"으로 각각 변경했습니다.
    * 두 번째 행의 `GridControl`과 `ChartControl`의 `ItemsSource`/`DataSource` 바인딩 경로를 `{Binding StatusByTypeFloorZone}`으로 수정했습니다.