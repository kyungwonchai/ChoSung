, 알겠습니다. CIFS/Samba 방식이 복잡하거나 환경에 맞지 않다면, SSH 연결을 통해 직접 파일을 복사하는 SFTP 방식이 훨씬 간단하고 좋은 대안입니다.

이전 방식과 새로운 방식을 비교하면 이렇습니다.

기존 방식 (CIFS 마운트):
우분투 공유 폴더 ↔️ 라즈베리파이에서 네트워크로 연결(mount) ↔️ 설치

새로운 방식 (SFTP 직접 복사):
우분투 로컬 파일 ➡️ 라즈베리파이로 파일 전송(sftp) ➡️ 설치

Samba 서버 설정이나 cifs-utils 설치 과정이 모두 필요 없어지고, 파이썬 스크립트가 훨씬 단순해집니다.

## 최종 자동화 Python 스크립트 (SFTP 직접 복사 방식)
Samba 관련 코드를 모두 제거하고, SFTP로 파일을 직접 업로드하여 설치하도록 수정한 최종 코드입니다.

Python

import paramiko
import io
import time
import os

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# 라즈베리파이 접속 정보
REMOTE_HOST = '192.168.0.10'
REMOTE_PORT = 22
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password'

# [중요] 설치할 .deb 파일의 '우분투 머신' 내 로컬 경로
# 이 스크립트를 실행하는 우분투 PC에 파일이 있어야 합니다.
LOCAL_DEB_FILE_PATH = '/home/your_user/packages/your-package.deb'

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder"
MAX_DELAY_SECONDS = 300
BOOT_GRACE_PERIOD_SECONDS = 1320 # (22 * 60)
# ===============================================================

def run_sudo_command(ssh_client, command, password, allow_any_exit=False):
    # ... (이전 코드와 동일, 생략) ...
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        stdin.write(password + '\n')
        stdin.flush()
        exit_status = stdout.channel.recv_exit_status()
        stderr_output = stderr.read().decode('utf-8').strip()
        if not allow_any_exit and exit_status != 0:
            if "sudo" in stderr_output.lower():
                 raise Exception(f"Sudo command failed. Error: {stderr_output}")
            raise Exception(f"Command '{command}' failed with exit status {exit_status}. Error: {stderr_output}")
        if "systemctl status" in command:
            status_output = stdout.read().decode('utf-8').strip()
            print("--- Service Status ---\n" + status_output + "\n----------------------")
        return True, f"Command '{command}' executed."
    except Exception as e:
        return False, str(e)


def setup_pi_environment(hostname, port, username, password, local_deb_path, target_folder, max_delay, grace_period):
    """
    SFTP로 .deb 파일을 직접 복사하여 설치하고 Watchdog을 설정하는 최종 스크립트
    """
    if not os.path.exists(local_deb_path):
        return (False, f"Local file not found at: {local_deb_path}")

    ssh_client = None
    try:
        print("Connecting to Raspberry Pi...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port=port, username=username, password=password, timeout=10)
        sftp = ssh_client.open_sftp()
        print("Connection successful.")

        # ===============================================================
        # ▼▼▼ [수정된 부분] .deb 패키지 설치 로직 (SFTP) ▼▼▼
        # ===============================================================
        print("\n--- Starting Package Installation via SFTP ---")
        
        deb_filename = os.path.basename(local_deb_path)
        remote_temp_path = f"/tmp/{deb_filename}"

        # 1. SFTP를 이용해 로컬 파일을 라즈베리파이 /tmp 폴더로 업로드
        print(f"Step 1: Uploading {deb_filename} to Pi at {remote_temp_path}...")
        sftp.put(local_deb_path, remote_temp_path)
        print("Upload complete.")

        # 2. dpkg로 패키지 설치
        print(f"Step 2: Installing {deb_filename} via dpkg...")
        install_cmd = f"sudo dpkg -i {remote_temp_path}"
        success, msg = run_sudo_command(ssh_client, install_cmd, password)
        if not success:
            print("dpkg failed, attempting to fix broken dependencies...")
            run_sudo_command(ssh_client, "sudo apt-get -f install -y", password)
            success, msg = run_sudo_command(ssh_client, install_cmd, password)
            if not success: raise Exception(f"Package installation failed: {msg}")
        
        # 3. 설치 후 임시 파일 삭제
        print("Step 3: Cleaning up temporary file...")
        run_sudo_command(ssh_client, f"sudo rm {remote_temp_path}", password)
        
        print("--- Package Installation Complete ---")
        # ===============================================================

        # --- [기존 부분] Watchdog 설정 로직 (변경 없음) ---
        print("\n--- Starting Watchdog Setup ---")
        # ... (이전의 Watchdog 설정 코드 전체가 여기에 위치) ...
        check_script_path = "/etc/watchdog.d/quick_folder_check.sh"
        check_script_content = f"""#!/bin/bash
TARGET_FOLDER="{target_folder}"
MAX_DELAY={max_delay}
GRACE_PERIOD={grace_period}
UPTIME=$(cut -d' ' -f1 /proc/uptime | cut -d'.' -f1)
if [ "$UPTIME" -lt "$GRACE_PERIOD" ]; then exit 0; fi
if [ ! -d "$TARGET_FOLDER" ]; then exit 1; fi
LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))
if [ $TIME_DIFF -gt $MAX_DELAY ]; then exit 1; else exit 0; fi
"""
        sftp.putfo(io.BytesIO(check_script_content.encode('utf-8')), "/tmp/check.sh")
        run_sudo_command(ssh_client, "sudo mkdir -p /etc/watchdog.d", password)
        run_sudo_command(ssh_client, f"sudo mv /tmp/check.sh {check_script_path}", password)
        run_sudo_command(ssh_client, f"sudo chmod +x {check_script_path}", password)
        config_content = f"watchdog-device=/dev/watchdog\nwatchdog-timeout=15\ninterval=10\ntest-binary={check_script_path}\ntest-timeout=5"
        sftp.putfo(io.BytesIO(config_content.encode('utf-8')), "/tmp/wd.conf")
        run_sudo_command(ssh_client, "sudo mv /tmp/wd.conf /etc/watchdog.conf", password)
        run_sudo_command(ssh_client, "sudo chown root:root /etc/watchdog.conf", password)
        run_sudo_command(ssh_client, "sudo systemctl restart watchdog", password)
        time.sleep(2)
        run_sudo_command(ssh_client, "sudo systemctl status watchdog --no-pager -l", password, allow_any_exit=True)
        print("--- Watchdog Setup Complete ---")

        sftp.close()
        return (True, "Package installation and Watchdog setup completed successfully!")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("\nConnection closed.")


if __name__ == "__main__":
    success, message = setup_pi_environment(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        password=REMOTE_PASSWORD,
        local_deb_path=LOCAL_DEB_FILE_PATH,
        target_folder=TARGET_FOLDER_TO_WATCH,
        max_delay=MAX_DELAY_SECONDS,
        grace_period=BOOT_GRACE_PERIOD_SECONDS
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")
    else:
        print(f"❌ Failure: {message}")
## 사용 방법
파일 준비: 설치할 .deb 파일을 우분투 PC의 특정 경로(예: /home/내계정/deb/)에 가져다 놓습니다.

스크립트 수정: 위 파이썬 코드 상단의 LOCAL_DEB_FILE_PATH 변수 값을 .deb 파일이 있는 실제 경로로 정확하게 수정합니다.

실행: 우분투 터미널에서 파이썬 스크립트를 실행합니다.