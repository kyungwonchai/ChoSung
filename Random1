아래는 요청하신 내용을 반영하여, 1행 데이터를 예측 처리한 후 **예측값(파랑), 실제값(초록)**을 시각화하는 코드입니다. 또한, 실제값의 ±0.1 범위를 선으로 표시하고, 시간축(X축)에 첫 번째 컬럼(날짜/시간)을 사용합니다.

수정된 코드
python
코드 복사
# 저장된 모델 로드
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# PRealAandB 데이터 불러오기
data = fetch_data_from_db("PRealAandB")  # PRealAandB 저장 프로시저 호출

# 데이터 확인
print(f"Fetched data:\n{data}")
print(f"Data type: {type(data)}")
print(f"Data shape: {data.shape}")

# 데이터가 비어 있는지 확인
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# 데이터가 numpy 배열이 아닌 경우 배열로 변환
if not isinstance(data, np.ndarray):
    data = np.array(data)
    print("Converted to numpy array.")

# 데이터 준비
try:
    timestamps = data[:, 0]  # 첫 번째 열 (날짜/시간, X축)
    features = data[:, 2:5]  # 3~5열 (입력값)
    actual_values = data[:, 1]  # 2열 (실제값)
    print("Timestamps, features, and actual values extracted successfully.")
except Exception as e:
    print(f"Error during slicing: {e}")
    exit()

# 예측 수행
predicted_values = model.predict(features)
print(f"Predicted values: {predicted_values}")
print(f"Actual values: {actual_values}")

# 시각화
plt.figure(figsize=(12, 6))

# 실제값과 ±0.1 범위 표시
plt.fill_between(
    timestamps,
    actual_values - 0.1,
    actual_values + 0.1,
    color='green',
    alpha=0.2,
    label="Actual ± 0.1 Range"
)

# 실제값 (초록색 선)
plt.plot(timestamps, actual_values, color='green', linestyle='-', marker='o', label='Actual Values')

# 예측값 (파란색 선)
plt.plot(timestamps, predicted_values, color='blue', linestyle='--', marker='o', label='Predicted Values')

# 레이블 및 제목
plt.title("Prediction vs Actual with ±0.1 Range")
plt.xlabel("Time")
plt.ylabel("Value")
plt.legend()
plt.grid()

# 시각화 출력
plt.show()

# 예측 정확도 계산
errors = np.abs(predicted_values - actual_values)
accuracy_scores = 100 - (errors / np.maximum(predicted_values, actual_values) * 100)

# 정확도 출력
for i, (timestamp, pred, actual, acc) in enumerate(zip(timestamps, predicted_values, actual_values, accuracy_scores)):
    print(f"Time: {timestamp}, Predicted: {pred:.2f}, Actual: {actual:.2f}, Accuracy: {acc:.2f}/100")
코드 설명
데이터 준비:

시간 축(timestamps): 첫 번째 열(날짜/시간).
입력값(features): 3~5열.
실제값(actual_values): 2열.
예측 수행:

저장된 모델(best_model.pkl)을 사용해 3~5열 데이터를 입력값으로 하여 2열 값을 예측.
시각화:

실제값 ±0.1 범위: fill_between을 사용해 초록색 반투명 영역으로 표시.
실제값: 초록색 실선과 원형 마커.
예측값: 파란색 점선과 원형 마커.
정확도 계산:

각 시간의 예측값과 실제값의 오차를 기준으로 100점 만점의 정확도 계산:
정확도
=
100
−
오차
최대값
×
100
정확도=100− 
최대값
오차
​
 ×100
시간, 예측값, 실제값, 정확도를 출력.
결과
시각화 차트:

시간축(X축)은 첫 번째 열(날짜/시간).
초록색 실선: 실제값.
파란색 점선: 예측값.
초록색 반투명 영역: 실제값의 ±0.1 범위.
정확도 출력:

각 시간의 예측값, 실제값, 정확도를 콘솔에 출력.
필요 사항
MSSQL 저장 프로시저:

PRealAandB는 한 행 이상의 데이터를 반환해야 합니다.
형식:
1열: 날짜/시간.
2열: 실제값(목표값).
3~5열: 입력값(특징값).
모델 파일:
