// FILE_ID: Views/MainWindow_CS_20250410153000
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using LockerManagementApp.Models;
using LockerManagementApp.ViewModels;
using Microsoft.Win32;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;
using DevExpress.Xpf.Printing; // PrintableControlLink 사용
using DevExpress.XtraPrinting; // PrintingSystem, XlsxExportOptionsEx, IPrintable 사용
using DevExpress.Utils; // DefaultBoolean 사용
using System.Collections.Generic;
using System.Linq;

namespace LockerManagementApp.Views
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private MainViewModel ViewModel => DataContext as MainViewModel;

        private void MainWindow_Loaded(object sender, RoutedEventArgs e) { }

        private void MainWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try { disposableViewModel.Dispose(); }
                catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel Dispose 오류: {ex.Message}"); }
            }
        }

        private void TableView_FocusedColumnChanged(object sender, FocusedColumnChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is TableView view)) return;
            var currentItem = view.Grid.CurrentItem as LockerAssignment;
            string newFieldName = e.NewColumn?.FieldName;
            ViewModel.UpdateHighlightInfo(newFieldName, currentItem);
        }

        private void GridControl_CurrentItemChanged(object sender, CurrentItemChangedEventArgs e)
        {
            if (ViewModel == null || !(sender is GridControl grid)) return;
            var view = grid.View as TableView;
            string currentFieldName = view?.FocusedColumn?.FieldName;
            var newItem = e.NewItem as LockerAssignment;
            ViewModel.UpdateHighlightInfo(currentFieldName, newItem);
        }

        private void ExportExcelButton_Click(object sender, RoutedEventArgs e)
        {
            SaveFileDialog saveFileDialog = new SaveFileDialog
            {
                Filter = "Excel Workbook (*.xlsx)|*.xlsx",
                FileName = $"사물함현황_{DateTime.Now:yyyyMMdd}.xlsx",
                Title = "엑셀 파일 저장"
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                string filePath = saveFileDialog.FileName;
                // *** 수정: GridSortInfo[] 사용 ***
                GridSortInfo[] originalSortInfo = null;
                int originalGroupCount = 0;
                GridControl grid = mainTableView.Grid; // GridControl 참조

                try
                {
                    ViewModel.StatusBarText = "엑셀 파일 생성 중...";

                    // 1. 현재 그리드 상태(정렬, 필터 등)를 사용하여 "전체시트" 링크 생성
                    var link1 = new PrintableControlLink(mainTableView) { SheetName = "전체시트" };

                    // 2. "소파트별시트"를 위해 그리드 그룹핑 임시 적용 및 링크 생성
                    originalSortInfo = grid.SortInfo.ToArray();
                    originalGroupCount = grid.GroupCount;
                    grid.ClearGrouping();
                    grid.GroupBy("SubPart");
                    // *** 수정: GridControl의 ExpandAllGroups() 사용 ***
                    grid.ExpandAllGroups();

                    var link2 = new PrintableControlLink(mainTableView) { SheetName = "소파트별시트" };

                    // 3. 두 링크를 합쳐서 엑셀 파일로 내보내기
                    // *** 수정: List<IPrintable> 사용 ***
                    var links = new List<IPrintable> { link1, link2 };
                    var compositeLink = new CompositeLink(links);

                    var options = new XlsxExportOptionsEx
                    {
                        ExportType = DevExpress.Export.ExportType.DataAware,
                        ShowGridLines = true,
                        ShowColumnHeaders = DefaultBoolean.True,
                        ShowGroupSummaries = DefaultBoolean.True,
                        GroupRows = true
                    };

                    compositeLink.ExportToXlsx(filePath, options);

                    ViewModel.StatusBarText = "엑셀 파일 저장 완료.";
                    MessageBox.Show($"엑셀 파일 저장 완료:\n{filePath}", "저장 성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                catch (Exception ex)
                {
                     ViewModel.StatusBarText = "엑셀 파일 저장 오류.";
                     MessageBox.Show($"엑셀 파일 저장 중 오류 발생:\n{ex.ToString()}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error); // ToString()으로 상세 오류 확인
                }
                finally
                {
                    // 4. 그리드 그룹핑 및 정렬 상태 원복
                    try
                    {
                        grid.ClearGrouping();
                        if (originalSortInfo != null)
                        {
                             grid.SortInfo.Clear();
                             foreach(var sortInfo in originalSortInfo)
                             {
                                 grid.SortInfo.Add(sortInfo);
                             }
                        }
                        Debug.WriteLine("Grid layout restored after export.");
                    }
                    catch(Exception layoutEx)
                    {
                        Debug.WriteLine($"!!! 그리드 레이아웃 복구 중 오류: {layoutEx.Message}");
                    }
                }
            }
        }
    }
}
```

**핵심 변경 사항:**

* **`using` 지시문:** `DevExpress.XtraPrinting` 네임스페이스를 추가하여 `IPrintable`, `CompositeLink`, `XlsxExportOptionsEx` 등을 사용할 수 있도록 했습니다. (`DevExpress.Xpf.Printing`은 이미 있었을 수 있습니다.)
* **`originalSortInfo` 타입 변경:** `GridColumnSortInfo[]` 대신 `GridSortInfo[]`를 사용하도록 수정했습니다.
* **`ExpandAllGroups` 호출 변경:** `mainTableView.ExpandAllGroups()` 대신 `mainTableView.Grid.ExpandAllGroups()` 또는 간단히 `grid.ExpandAllGroups()`를 사용하도록 수정했습니다.
* **`CompositeLink` 생성자:** `List<IPrintable>`을 명시적으로 생성하여 전달하도록 수정했습니다.
* **오류 메시지 상세화:** `catch` 블록에서 `ex.Message` 대신 `ex.ToString()`을 사용하여 더 자세한 오류 정보를 볼 수 있도록 했습니다.

**추가 확인 사항:**

* 프로젝트에 **`DevExpress.Printing.vXX.Y.Core.dll`** 및 **`DevExpress.Xpf.Printing.vXX.Y.dll`** 어셈블리 참조가 올바르게 추가되어 있는지 확인하세요. NuGet 패키지를 사용한다면 `DevExpress.Wpf.Printing` 패키지가 설치되어 있어야 합니다.