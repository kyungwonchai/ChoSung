아래는 요청하신 WPF 애플리케이션 코드입니다. 이 코드는 프로그램이 시작될 때 이전에 사용했던 COM 포트를 자동으로 연결하고, 사용자가 선택하는 새로운 COM 포트를 설정하도록 구성되어 있습니다. 또한, 로그를 ListBox에 기록하며, 최대 100개의 로그를 시간과 함께 표시합니다. 데이터는 최대 5개의 다른 COM 포트로 전달될 수 있으며, 전달 조건은 코드에서 설정할 수 있습니다.

1. XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="ComPortScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Scanner" Height="450" Width="600">
    <Grid>
        <ComboBox Name="ComPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="10,10,0,0" SelectionChanged="ComPortComboBox_SelectionChanged"/>
        <Button Content="Refresh Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="220,10,0,0" Click="RefreshPorts_Click"/>
        <Button Content="Open Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="330,10,0,0" Click="OpenPort_Click"/>
        <Button Content="Close Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,10,0,0" Click="ClosePort_Click"/>
        <TextBox Name="DataTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="420" Height="50" Margin="10,50,0,0"/>
        <Button Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,50,0,0" Click="SendData_Click"/>
        <TextBlock Name="StatusTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,110,0,0" Width="500" Height="30" Text="Status: Not Connected"/>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="560" Height="200" Margin="10,150,0,0"/>
    </Grid>
</Window>
2. C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Windows;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _serialPort;
        private List<SerialPort> _targetPorts = new List<SerialPort>(); // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100;
        private const string LastUsedPortKey = "LastUsedPort";

        public MainWindow()
        {
            InitializeComponent();
            LoadLastUsedPort(); // 프로그램 시작 시 마지막으로 사용된 포트를 불러옴
            RefreshPorts(); // 포트 목록 갱신
        }

        private void LoadLastUsedPort()
        {
            // 마지막으로 사용한 포트를 설정에서 불러옴
            string lastUsedPort = Properties.Settings.Default[LastUsedPortKey]?.ToString();
            if (!string.IsNullOrEmpty(lastUsedPort) && SerialPort.GetPortNames().Contains(lastUsedPort))
            {
                ComPortComboBox.SelectedItem = lastUsedPort;
                OpenPort(lastUsedPort);
            }
        }

        private void SaveLastUsedPort(string portName)
        {
            // 마지막으로 사용한 포트를 설정에 저장함
            Properties.Settings.Default[LastUsedPortKey] = portName;
            Properties.Settings.Default.Save();
        }

        private void RefreshPorts()
        {
            // 현재 사용 가능한 COM 포트 목록을 가져와 ComboBox에 표시
            ComPortComboBox.ItemsSource = SerialPort.GetPortNames();
            if (ComPortComboBox.Items.Count > 0)
            {
                ComPortComboBox.SelectedIndex = 0;
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
            LogMessage("Ports refreshed.");
        }

        private void OpenPort_Click(object sender, RoutedEventArgs e)
        {
            if (ComPortComboBox.SelectedItem == null)
            {
                MessageBox.Show("Please select a COM port.");
                return;
            }

            string selectedPort = ComPortComboBox.SelectedItem.ToString();
            OpenPort(selectedPort);
        }

        private void OpenPort(string portName)
        {
            try
            {
                if (_serialPort != null && _serialPort.IsOpen)
                {
                    _serialPort.Close();
                }

                _serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                _serialPort.Open();
                StatusTextBlock.Text = $"Status: Connected to {portName}";
                LogMessage($"Port {portName} opened.");
                SaveLastUsedPort(portName);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open port {portName}: {ex.Message}");
                LogMessage($"Failed to open port {portName}: {ex.Message}");
            }
        }

        private void ClosePort_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                _serialPort.Close();
                StatusTextBlock.Text = "Status: Port Closed";
                LogMessage("Port closed.");
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                try
                {
                    string data = DataTextBox.Text;
                    _serialPort.WriteLine(data);
                    LogMessage($"Data sent: {data}");

                    // 전달할 조건이 충족될 경우 다른 포트로 데이터를 전달
                    foreach (var targetPort in _targetPorts)
                    {
                        if (ShouldForwardData(data))
                        {
                            targetPort.WriteLine(data);
                            LogMessage($"Data forwarded to {targetPort.PortName}: {data}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to send data: {ex.Message}");
                    LogMessage($"Failed to send data: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Port is not open. Please open a COM port first.");
                LogMessage("Failed to send data: Port is not open.");
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시: 데이터가 특정 조건을 만족하는 경우에만 다른 포트로 전송
            // 여기에 원하는 조건을 설정할 수 있습니다.
            return data.Contains("FORWARD");
        }

        private void ComPortComboBox_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (ComPortComboBox.SelectedItem != null)
            {
                OpenPort(ComPortComboBox.SelectedItem.ToString());
            }
        }

        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그가 100개를 초과하면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. 코드 설명
주요 기능
포트 자동 연결: 프로그램이 실행될 때 마지막으로 사용했던 포트를 자동으로 연결합니다. 포트가 존재하지 않을 경우, ComboBox에서 새로운 포트를 선택하면 즉시 연결됩니다.
로그 기록: 모든 동작 및 오류를 ListBox에 시간과 함께 기록합니다. 로그는 최대 100개까지 표시됩니다.
데이터 전달: 데이터가 특정 조건(여기서는 ShouldForwardData 메서드로 정의됨)을 만족할 때만 다른 포트로 전달됩니다. 최대 5개의 포트로 전달할 수 있습니다.
포트 설정 저장: 마지막에 사용한 포트가 저장되며, 프로그램을 재실행하면 자동으로 로드됩니다.
주석과 코드 내 설명
LoadLastUsedPort와 SaveLastUsedPort: 프로그램 시작 시 마지막으로 사용된 포트를 로드하고, 사용 후에는 다시 저장합니다.
RefreshPorts: 현재 시스템에서 사용 가능한 COM 포트 목록을 ComboBox에 업데이트합니다.
OpenPort와 ClosePort: 사용자가 선택한 COM 포트를 열고 닫습니다. 연결이 성공하거나 실패할 경우 로그에 기록됩니다.
SendData_Click: 데이터를 현재 연결된 COM 포트로 전송하고, 필요한 경우 다른 포트로 전달합니다. 전달 조건은 ShouldForwardData 메서드에서 정의됩니다.
LogMessage: 모든 이벤트(포트 열기, 닫기, 데이터 전송 등)를 로그에 기록합니다.
4. 설정 저장을 위한 Settings.settings 설정
이 프로그램이 마지막으로 사용한 포트를 기억하기 위해, Properties 폴더 안에 Settings.settings 파일을 생성하고 다음과 같은 설정을 추가합니다:

Settings.settings:
Name: LastUsedPort
Type: string
Scope: User
Value: (빈 값으로 둡니다)
5. 사용 방법
프로그램 시작: 프로그램이 시작될 때, 마지막으로 사용한 COM 포트를 자동으로 열거나, 존재하지 않는다면 ComboBox에서 포트를 선택할 수 있습니다.
포트 선택: ComboBox에서 새로운 COM 포트를 선택하면 자동으로 연결됩니다.
데이터 전송: 텍스트 박스에 데이터를 입력하고 "Send Data" 버튼을 클릭하면 선택된 포트로 데이터가 전송됩니다. 조건이 충족되면 데이터가 다른 포트로도 전달됩니다.
로그 확인: 모든 동작이 ListBox에 기록되며, 사용자는 로그를 통해 프로그램의 상태를 모니터링할 수 있습니다.
이 코드는 COM 포트를 쉽게 관리하고, 데이터를 전송하며, 필요한 경우 여러 포트로 전달할 수 있는 기능을 제공합니다. 추가적인 질문이나 요구사항이 있으면 언제든지 말씀해 주세요