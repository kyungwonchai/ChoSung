indows Presentation Foundation) using DevExpress, you can achieve the task of getting the value of a TextBox inside a dxg:GridColumn and the value of another column in the same row after an edit. To demonstrate this, let's assume you have a GridControl with a GridColumn containing a TextBox editor, and you want to read the modified value of the TextBox along with the value of a "no1" column in the same row.

Here's a basic example in C# using DevExpress 22.2 in Visual Studio 2022:

First, ensure your GridControl is set up with the necessary columns and data binding.

Use the CellValueChanged event of the GridView to detect changes in any cell.

In the event handler, check if the edited column is the one containing the TextBox. Then, retrieve the values of the TextBox and the "no1" column from the same row.

Here's a code snippet to illustrate this:

csharp
Copy code
using DevExpress.Xpf.Grid;

// ...

private void GridView_CellValueChanged(object sender, DevExpress.Xpf.Grid.CellValueChangedEventArgs e)
{
    var gridView = sender as GridView;

    if (e.Column.FieldName == "YourTextBoxColumnName") // Replace with your actual column name
    {
        var editedValue = e.Value; // This is the new value in your TextBox
        var no1Value = gridView.GetRowCellValue(e.RowHandle, "no1"); // Replace 'no1' with your actual column name

        // Now you can use editedValue and no1Value as needed
        // For example, display them or process them further
        MessageBox.Show($"Edited Value: {editedValue}, No1 Column Value: {no1Value}");
    }
}
In this example:

Replace "YourTextBoxColumnName" and "no1" with the actual field names of your columns.
The CellValueChanged event is triggered after the cell's editor has been closed and its value has been changed. The new value is obtained from e.Value.
The GetRowCellValue method retrieves the value from the "no1" column in the same row that was edited.
Remember to attach this event handler to your GridView. This approach sh