네, 요청하신 대로 최신 안드로이드 코틀린 환경에서 com.github.mhiew:android-pdf-viewer 라이브러리를 사용하여 PDF 뷰어를 구현하는 방법을 단계별로 안내해 드리겠습니다.

상단에 16개의 페이지 이동 버튼을 홀/짝 2줄로 배치하고, 하단에는 확대/축소가 가능한 PDF 뷰를 표시하며, 별도의 버튼으로 파일을 열도록 구성합니다. 변수명은 명확하고 일관성 있게 사용하여 코드의 가독성을 높였습니다.

📝 1단계: 프로젝트 설정 (build.gradle.kts)
먼저, app 수준의 build.gradle.kts 파일에 필요한 라이브러리 의존성을 추가하고, View Binding을 활성화합니다.

Kotlin

// build.gradle.kts (Module :app)

plugins {
    // ...
    id("kotlin-kapt") // 필요한 경우
    id("kotlin-android")
}

android {
    // ...
    buildFeatures {
        viewBinding = true // View Binding 활성화
    }
}

dependencies {
    // ...
    // PDF 뷰어 라이브러리
    implementation("com.github.mhiew:android-pdf-viewer:3.2.0-beta.3")
}
설정 후에는 반드시 'Sync Now'를 클릭하여 프로젝트에 라이브러리를 반영해주세요.

🎨 2단계: 레이아웃 디자인 (activity_main.xml)
다음으로, 화면의 UI를 구성합니다. LinearLayout을 사용하여 버튼과 PDF 뷰를 수직으로 배치하고, 버튼들은 다시 수평 LinearLayout으로 묶어 2줄로 만듭니다.

XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:padding="8dp"
    tools:context=".MainActivity">

    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="PDF 파일 열기" />

    <LinearLayout
        android:id="@+id/pageButtonContainer"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical"
        android:visibility="gone"
        tools:visibility="visible">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">

            <Button
                android:id="@+id/btnPage1"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="1" />
            <Button
                android:id="@+id/btnPage3"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="3" />
            <Button
                android:id="@+id/btnPage5"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="5" />
             <Button
                android:id="@+id/btnPage7"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="7" />
             <Button
                android:id="@+id/btnPage9"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="9" />
             <Button
                android:id="@+id/btnPage11"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="11" />
             <Button
                android:id="@+id/btnPage13"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="13" />
             <Button
                android:id="@+id/btnPage15"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="15" />
        </LinearLayout>

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal">

            <Button
                android:id="@+id/btnPage2"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="2" />
            <Button
                android:id="@+id/btnPage4"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="4" />
            <Button
                android:id="@+id/btnPage6"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="6" />
            <Button
                android:id="@+id/btnPage8"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="8" />
            <Button
                android:id="@+id/btnPage10"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="10" />
            <Button
                android:id="@+id/btnPage12"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="12" />
            <Button
                android:id="@+id/btnPage14"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="14" />
            <Button
                android:id="@+id/btnPage16"
                style="?android:attr/buttonBarButtonStyle"
                android:layout_width="0dp"
                android:layout_height="wrap_content"
                android:layout_weight="1"
                android:text="16" />
        </LinearLayout>
    </LinearLayout>

    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_marginTop="8dp" />

</LinearLayout>
핵심: PDF를 불러오기 전까지 페이지 버튼은 의미가 없으므로 visibility="gone"으로 숨겨두었다가, PDF 로드 후 visible로 변경합니다.

팁: 모든 버튼을 XML에 직접 추가하는 대신, 코드를 통해 동적으로 생성하여 추가하면 레이아웃이 더 깔끔해질 수 있습니다. 하지만 이 예제에서는 명시적으로 배치했습니다.

💻 3단계: MainActivity.kt 코드 작성
이제 Activity에서 UI 요소들을 제어하고 PDF 파일을 불러오는 로직을 구현합니다.

파일 선택: 최신 안드로이드 방식인 ActivityResultLauncher를 사용하여 사용자가 파일을 선택하도록 합니다.

PDF 로드: 사용자가 선택한 파일의 Uri를 받아 PDFView에 로드합니다.

버튼 이벤트 처리: 각 페이지 버튼에 클릭 리스너를 설정하여 해당 페이지로 즉시 이동하는 기능을 구현합니다.

Kotlin

// MainActivity.kt
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.your.package.name.databinding.ActivityMainBinding // 본인의 패키지명으로 변경

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener {

    private lateinit var binding: ActivityMainBinding

    // 파일 선택을 위한 ActivityResultLauncher
    private val pdfFilePickerLauncher = registerForActivityResult(
        ActivityResultContracts.OpenDocument()
    ) { uri: Uri? ->
        uri?.let {
            loadPdfFromUri(it)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setupEventListeners()
    }

    /**
     * UI 컴포넌트들의 이벤트 리스너를 설정합니다.
     */
    private fun setupEventListeners() {
        // 'PDF 파일 열기' 버튼 클릭 시 파일 선택기 실행
        binding.btnOpenFile.setOnClickListener {
            openPdfPicker()
        }

        // 16개의 페이지 이동 버튼에 대한 클릭 리스너 설정
        val pageButtons = mapOf(
            binding.btnPage1 to 1, binding.btnPage2 to 2, binding.btnPage3 to 3, binding.btnPage4 to 4,
            binding.btnPage5 to 5, binding.btnPage6 to 6, binding.btnPage7 to 7, binding.btnPage8 to 8,
            binding.btnPage9 to 9, binding.btnPage10 to 10, binding.btnPage11 to 11, binding.btnPage12 to 12,
            binding.btnPage13 to 13, binding.btnPage14 to 14, binding.btnPage15 to 15, binding.btnPage16 to 16
        )

        pageButtons.forEach { (button, pageNumber) ->
            button.setOnClickListener {
                jumpToPage(pageNumber)
            }
        }
    }

    /**
     * PDF 파일을 선택할 수 있는 시스템 파일 선택기를 엽니다.
     */
    private fun openPdfPicker() {
        pdfFilePickerLauncher.launch(arrayOf("application/pdf"))
    }

    /**
     * 전달받은 Uri를 사용하여 PDF를 PDFView에 로드합니다.
     * @param pdfUri 로드할 PDF 파일의 content Uri
     */
    private fun loadPdfFromUri(pdfUri: Uri) {
        binding.pdfView.fromUri(pdfUri)
            .defaultPage(0) // 기본으로 0번째 페이지(첫 페이지)를 보여줌
            .enableSwipe(true) // 스와이프로 페이지 넘기기 활성화
            .swipeHorizontal(false) // 세로 스크롤
            .enableAnnotationRendering(true) // 주석 렌더링 활성화
            .onLoad(this) // 로드 완료 리스너
            .onPageError(this) // 페이지 에러 리스너
            .scrollHandle(null) // 스크롤 핸들 비활성화
            .load()
    }

    /**
     * 지정된 페이지로 PDF 뷰를 이동시킵니다.
     * @param pageNumber 이동할 페이지 번호 (1부터 시작)
     */
    private fun jumpToPage(pageNumber: Int) {
        // 라이브러리는 페이지 인덱스를 0부터 시작하므로 1을 빼줍니다.
        binding.pdfView.jumpTo(pageNumber - 1, true)
    }

    // OnLoadCompleteListener 인터페이스 구현
    override fun loadComplete(nbPages: Int) {
        Toast.makeText(this, "총 ${nbPages}페이지 PDF 로드 완료", Toast.LENGTH_SHORT).show()
        // PDF 로드가 완료되면 페이지 버튼 컨테이너를 보여줍니다.
        binding.pageButtonContainer.visibility = View.VISIBLE
    }

    // OnPageErrorListener 인터페이스 구현
    override fun onPageError(page: Int, t: Throwable) {
        Log.e("PDFView", "페이지 로드 에러: ${page + 1} 페이지", t)
        Toast.makeText(this, "${page + 1}페이지 로드 중 에러가 발생했습니다.", Toast.LENGTH_SHORT).show()
    }
}
주요 코드 설명
pdfFilePickerLauncher: ActivityResultContracts.OpenDocument()를 사용하여 파일 선택 결과를 처리합니다. 사용자가 PDF 파일을 선택하면 콜백으로 Uri가 반환되고, loadPdfFromUri 함수가 호출됩니다.

setupEventListeners(): 모든 버튼의 클릭 이벤트를 설정합니다. 페이지 버튼들은 Map으로 관리하여 코드를 간결하게 만들었습니다.

loadPdfFromUri(pdfUri: Uri): 실제 PDF를 불러오고 각종 설정을 하는 핵심 부분입니다.

.enableSwipe(true): 확대/축소 후에도 스와이프로 페이지를 넘길 수 있게 합니다.

.onLoad(this): PDF 로딩이 성공적으로 끝나면 loadComplete 콜백 함수를 호출합니다. 여기서 페이지 버튼들을 화면에 표시(VISIBLE)합니다.

jumpToPage(pageNumber: Int): 버튼 클릭 시 호출됩니다. 주의할 점은 라이브러리의 페이지 인덱스는 0부터 시작하므로, 사용자가 누른 버튼의 페이지 숫자(1부터 시작)에서 1을 빼주어야 합니다.

실행 결과 예상
앱을 실행하면 'PDF 파일 열기' 버튼만 보입니다.

버튼을 클릭하여 기기에 저장된 PDF 파일을 선택합니다.

파일이 성공적으로 로드되면 PDF의 첫 페이지가 화면 하단에 나타나고, 상단에는 숨겨져 있던 16개의 페이지 이동 버튼이 나타납니다.

손가락으로 PDF 뷰를 확대하거나 축소할 수 있습니다.

상단의 페이지 번호 버튼을 누르면 해당 페이지로 즉시 이동합니다.