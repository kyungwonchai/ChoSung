 동명이인의 경우 기존에 매칭된 USER_CARD_ID가 이미 존재하면 새로운 USER_CARD_ID로 매칭되도록 수정된 코드를 제공합니다.

데이터 동기화 클래스:
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;

public class DataSync
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string targetConnectionString = "Data Source=TargetServer;Initial Catalog=TargetDB;User ID=YourUsername;Password=YourPassword";
    private string oracleConnectionString = "Data Source=OracleServer;User ID=YourUsername;Password=YourPassword";

    // 데이터 동기화를 시작하고 로그 액션을 인수로 받음
    public async Task StartDataSyncAsync(Action<string> logAction)
    {
        logAction("Starting Initial UserCardID Update...");
        await InitialUserCardIDUpdateAsync(logAction); // 초기 USER_CARD_ID 업데이트
        logAction("Initial UserCardID Update Completed.");
        
        _ = SyncDataAsync(logAction); // 데이터 동기화 작업을 시작
        _ = CheckUserChangesAsync(logAction); // 사용자 변경 체크 작업을 시작
    }

    // 초기 USER_CARD_ID 업데이트 함수
    private async Task InitialUserCardIDUpdateAsync(Action<string> logAction)
    {
        DataTable targetData = await GetTargetDataAsync(); // 타겟 데이터 가져오기
        DataTable oracleData = await GetOracleUserDataAsync(); // 오라클 데이터 가져오기

        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();

            foreach (DataRow targetRow in targetData.Rows)
            {
                // USER_CARD_ID가 비어 있는 경우
                if (string.IsNullOrEmpty(targetRow["USER_CARD_ID"].ToString()))
                {
                    DataRow[] matchedRows = oracleData.Select($"USER_NAME = '{targetRow["USER_NAME"]}' AND USER_CARD_ID IS NOT NULL");

                    if (matchedRows.Length > 0)
                    {
                        foreach (var matchedRow in matchedRows)
                        {
                            // 기존에 매칭된 USER_CARD_ID가 없으면 업데이트
                            if (!TargetDataContainsUserCardID(targetData, matchedRow["USER_CARD_ID"].ToString()))
                            {
                                string userCardId = matchedRow["USER_CARD_ID"].ToString();
                                string query = "UPDATE USER_INFO_Trans SET USER_CARD_ID = @USER_CARD_ID WHERE E_NUM = @E_NUM";
                                SqlCommand cmd = new SqlCommand(query, conn);
                                cmd.Parameters.AddWithValue("@USER_CARD_ID", userCardId);
                                cmd.Parameters.AddWithValue("@E_NUM", targetRow["E_NUM"]);
                                await cmd.ExecuteNonQueryAsync();

                                logAction($"Updated USER_CARD_ID for USER_NAME: {targetRow["USER_NAME"]}, E_NUM: {targetRow["E_NUM"]}");
                                break; // 업데이트된 후에는 반복문 종료
                            }
                        }
                    }
                    else
                    {
                        logAction($"No entry found for USER_NAME: {targetRow["USER_NAME"]}, E_NUM: {targetRow["E_NUM"]}");
                    }
                }
            }
        }
    }

    // 타겟 데이터에 해당 USER_CARD_ID가 이미 존재하는지 확인하는 함수
    private bool TargetDataContainsUserCardID(DataTable targetData, string userCardId)
    {
        return targetData.Select($"USER_CARD_ID = '{userCardId}'").Length > 0;
    }

    // 5분마다 데이터를 동기화하는 함수
    private async Task SyncDataAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting Data Sync...");
            DataTable sourceData = await GetSourceDataAsync(); // 소스 데이터 가져오기
            DataTable targetData = await GetTargetDataAsync(); // 타겟 데이터 가져오기

            foreach (DataRow sourceRow in sourceData.Rows)
            {
                DataRow[] targetRows = targetData.Select($"E_NUM = '{sourceRow["E_NUM"]}'");

                if (targetRows.Length == 0)
                {
                    await InsertRowAsync(sourceRow); // 타겟 테이블에 새로운 행 삽입
                    logAction($"Inserted new row for E_NUM: {sourceRow["E_NUM"]}");
                }
                else
                {
                    await UpdateRowAsync(sourceRow, targetRows[0]); // 기존 행 업데이트
                    logAction($"Updated row for E_NUM: {sourceRow["E_NUM"]}");
                }
            }

            await Task.Delay(TimeSpan.FromMinutes(5)); // 5분 대기
        }
    }

    // 소스 데이터 가져오는 함수
    private async Task<DataTable> GetSourceDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM ESD_USER_INFO WHERE PROCESS LIKE '%REPAIR%'";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 타겟 데이터 가져오는 함수
    public async Task<DataTable> GetTargetDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM, USER_CARD_ID FROM USER_INFO_Trans";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 타겟 테이블에 새로운 행 삽입하는 함수
    private async Task InsertRowAsync(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "INSERT INTO USER_INFO_Trans (PROCESS, GROUP_NAME, USER_NAME, E_NUM) VALUES (@PROCESS, @GROUP_NAME, @USER_NAME, @E_NUM)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
            cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    // 타겟 테이블의 기존 행 업데이트하는 함수
    private async Task UpdateRowAsync(DataRow sourceRow, DataRow targetRow)
    {
        bool isDifferent = !sourceRow["PROCESS"].Equals(targetRow["PROCESS"]) ||
                           !sourceRow["GROUP_NAME"].Equals(targetRow["GROUP_NAME"]) ||
                           !sourceRow["USER_NAME"].Equals(targetRow["USER_NAME"]);

        if (isDifferent)
        {
            using (SqlConnection conn = new SqlConnection(targetConnectionString))
            {
                await conn.OpenAsync();
                string query = "UPDATE USER_INFO_Trans SET PROCESS = @PROCESS, GROUP_NAME = @GROUP_NAME, USER_NAME = @USER_NAME WHERE E_NUM = @E_NUM";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
                cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
                cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
                cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }

    // 오라클 데이터 가져오는 함수
    public async Task<DataTable> GetOracleUserDataAsync()
    {
        using (OracleConnection conn = new OracleConnection(oracleConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT USER_NAME, USER_CARD_ID FROM ut_esc_user WHERE station = 'SMD' AND work_group = 'REPAIR'";
            OracleDataAdapter adapter = new OracleDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    // 10분마다 사용자 변경 사항을 체크하는 함수
    private async Task CheckUserChangesAsync(Action<string> logAction)
    {
        while (true)
        {
            logAction("Starting User Changes Check...");
            DataTable targetData = await GetTargetDataAsync();
            DataTable oracleData = await GetOracleUserDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                join oracle in oracleData.AsEnumerable()
                                on target.Field<string>("USER_NAME") equals oracle.Field<string>("USER_NAME") into tempJoin
                                from subOracle in tempJoin.DefaultIfEmpty()
                                where string.IsNullOrEmpty(target.Field<string>("USER_CARD_ID")) && subOracle != null
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = subOracle.Field<string>("USER_CARD_ID"),
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            foreach (var row in unmatchedRows)
            {
                logAction($"Unmatched User: {row.USER_NAME}, E_NUM: {row.E_NUM}");
            }

            await Task.Delay(TimeSpan.FromMinutes(10));
        }
    }
}
WPF XAML UI:
xaml
코드 복사
<Window x:Class="DataSyncApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Data Sync Application" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="2*" />
        </Grid.ColumnDefinitions>
        
        <ListBox x:Name="logListBox" Grid.Column="0" Margin="10" />
        
        <Grid Grid.Column="1" Margin="10">
            <DataGrid x:Name="dataGrid" AutoGenerateColumns="False" Margin="0,30,0,0" CellEditEnding="DataGrid_CellEditEnding">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="USER_NAME" Binding="{Binding USER_NAME}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="USER_CARD_ID" Binding="{Binding USER_CARD_ID}"/>
                    <DataGridTextColumn Header="E_NUM" Binding="{Binding E_NUM}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="PROCESS" Binding="{Binding PROCESS}" IsReadOnly="True"/>
                    <DataGridTextColumn Header="GROUP_NAME" Binding="{Binding GROUP_NAME}" IsReadOnly="True"/>
                </DataGrid.Columns>
            </DataGrid>
            <Button Content="Load Data" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10" Click="LoadDataButton_Click"/>
        </Grid>
    </Grid>
</Window>
MainWindow.xaml.cs:
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace DataSyncApp
{
    public partial class MainWindow : Window
    {
        private DataSync dataSync;

        public MainWindow()
        {
            InitializeComponent();
            dataSync = new DataSync();
            Task.Run(() => dataSync.StartDataSyncAsync(LogAction));
        }

        private async void LoadDataButton_Click(object sender, RoutedEventArgs e)
        {
            await LoadGridControlAsync();
        }

        private async Task LoadGridControlAsync()
        {
            DataTable targetData = await dataSync.GetTargetDataAsync();

            var unmatchedRows = from target in targetData.AsEnumerable()
                                where string.IsNullOrEmpty(target.Field<string>("USER_CARD_ID"))
                                select new
                                {
                                    USER_NAME = target.Field<string>("USER_NAME"),
                                    USER_CARD_ID = "Not Matched",
                                    E_NUM = target.Field<string>("E_NUM"),
                                    PROCESS = target.Field<string>("PROCESS"),
                                    GROUP_NAME = target.Field<string>("GROUP_NAME")
                                };

            dataGrid.ItemsSource = unmatchedRows.ToList();

            foreach (var item in dataGrid.Items)
            {
                DataGridRow row = (DataGridRow)dataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null && ((dynamic)row.Item).USER_CARD_ID == "Not Matched")
                {
                    row.Background = new SolidColorBrush(Colors.Red);
                }
            }
        }

        private void DataGrid_CellEditEnding(object sender, DataGridCellEditEndingEventArgs e)
        {
            if (e.Column.Header.ToString() == "USER_CARD_ID")
            {
                string userName = ((TextBox)e.EditingElement).Text;
                string userCardId = ((TextBox)e.EditingElement).Text;

                // Handle manual input for USER_CARD_ID
                // For example, you might update a local list or another table in the database.
            }
        }

        private void LogAction(string message)
        {
            Dispatcher.Invoke(() =>
            {
                if (logListBox.Items.Count >= 500)
                {
                    logListBox.Items.Clear();
                }
                logListBox.Items.Add(message);
            });
        }
    }
}
이제 수정된 코드는 동명이인의 경우 기존에 매칭된 USER_CARD_ID가 이미 존재하면 새로운 USER_CARD_ID로 매칭됩니다. 각 함수는 동작을 로그에 기록하며, 로그 내용은 ListBox에 표시됩니다. Load Data 버튼을 누르면 타겟 테이블에 USER_CARD_ID가 없는 항목이 표시됩니다.