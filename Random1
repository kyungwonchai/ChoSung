말 죄송합니다. 요청하신 대로 최신 파일의 전체 코드를 제공하겠습니다. 이전에 제공한 것과의 일관성을 유지하면서, 모든 필요 기능이 포함된 코드를 제공하겠습니다. 수정된 파일과 관련된 모든 코드와 XAML 파일을 포함하여 드리겠습니다.

1. MainWindow.xaml (전체 코드)
xml
코드 복사
<Window x:Class="ScanValueTrans.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Scan Value Trans" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <TextBlock Text="IP Address:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <TextBlock x:Name="IpAddressTextBlock" VerticalAlignment="Center"/>
        </StackPanel>

        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="10">
            <TextBlock Text="Port:" VerticalAlignment="Center" Margin="0,0,10,0"/>
            <ComboBox x:Name="PortComboBox" Width="120" VerticalAlignment="Center"/>
            <Button Content="Refresh Ports" Width="100" Margin="10,0,0,0" Click="RefreshPorts_Click"/>
        </StackPanel>

        <Grid Grid.Row="2" Margin="10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <StackPanel>
                <TextBlock Text="Scanner Port:" Margin="0,0,0,10"/>
                <ComboBox x:Name="ScannerPortComboBox" Width="200" SelectionChanged="ScannerPortComboBox_SelectionChanged"/>
                <ComboBox x:Name="ScannerBaudRateComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerParityComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerDataBitsComboBox" Width="200" Margin="0,10,0,0"/>
                <ComboBox x:Name="ScannerStopBitsComboBox" Width="200" Margin="0,10,0,0"/>
            </StackPanel>

            <StackPanel Grid.Column="1" HorizontalAlignment="Left" Margin="20,0,0,0">
                <TextBlock Text="Target Ports:" Margin="0,0,0,10"/>
                <local:PortConfigControl x:Name="TargetPortConfig1" Width="300" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig2" Width="300" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig3" Width="300" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig4" Width="300" Margin="0,10,0,0"/>
                <local:PortConfigControl x:Name="TargetPortConfig5" Width="300" Margin="0,10,0,0"/>
            </StackPanel>
        </Grid>

        <ListBox x:Name="LogListBox" Grid.Row="3" Margin="10"/>
        <Image x:Name="QrCodeImage" Grid.Row="4" Height="150" Margin="10"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs (전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                settingsManager = SettingsManager.Instance;

                socketServer = SocketServer.Instance;
                if (socketServer == null)
                {
                    throw new InvalidOperationException("소켓 서버 인스턴스를 초기화할 수 없습니다.");
                }
                socketServer.DataReceived += OnSocketDataReceived;

                serialPortManager = SerialPortManager.Instance;

                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                InitializePortSettings();
                LoadLastUsedPorts();

                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                if (!string.IsNullOrEmpty(ipAddress) && !string.IsNullOrEmpty(port))
                {
                    string qrContent = $"{ipAddress}:{port}";
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                    QrCodeImage.Source = qrCodeImage;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue;
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }
                else
                {
                    LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedPort = PortComboBox.SelectedItem?.ToString() ?? "20000";

                if (int.TryParse(selectedPort, out int portNumber))
                {
                    if (socketServer != null)
                    {
                        socketServer.Start(portNumber);
                        settingsManager.SaveSetting("Port", selectedPort);
                    }
                    else
                    {
                        LogMessage("소켓 서버 인스턴스가 초기화되지 않았습니다.");
                    }
                }
                else
                {
                    LogMessage($"포트 번호가 유효하지 않습니다: {selectedPort}");
                }

                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저가 초기화되지 않았습니다.");
                }

                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    serialPortManager.CloseScannerPort();
                }

                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate),
                    (Parity)Enum.Parse(typeof(Parity), parity),
                    int.Parse(dataBits),
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                serialPortManager.ScannerPort.DataReceived += ScannerPort_DataReceived;

                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {portName} 접근 권한이 없습니다: {ex.Message}");
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {portName}에서 I/O 오류 발생: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    string data = serialPortManager.ScannerPort.ReadExisting();

                    foreach (var targetPort in serialPortManager.TargetPorts)
                    {
                        if (targetPort != null && targetPort.IsOpen)
                        {
                            targetPort.Write(data);
                            LogMessage($"스캐너에서 받은 데이터를 타겟 포트 {targetPort.PortName}로 전송: {data}");
                        }
                    }

                    Dispatcher.Invoke(() => LogMessage($"스캐너 포트에서 받은 데이터: {data}"));
                }
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"스캐너 포트 데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                string[] portNames = SerialPort.GetPortNames();

                ScannerPortComboBox.ItemsSource = portNames;

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
3. PortConfigControl.xaml (전체 코드)
xml
코드 복사
<UserControl x:Class




나의 말:
이어
ChatGPT의 말:
ChatGPT
다음은 PortConfigControl.xaml 파일의 나머지 코드와 PortConfigControl.xaml.cs 파일의 전체 코드입니다.

3. PortConfigControl.xaml (나머지 코드)
xml
코드 복사
<UserControl x:Class="ScanValueTrans.PortConfigControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DesignHeight="100" d:DesignWidth="300">
    <Grid>
        <ComboBox x:Name="TargetPortComboBox" SelectionChanged="TargetPortComboBox_SelectionChanged" Width="200" Margin="5"/>
        <Button Content="Clear" Width="60" Height="25" Margin="210,5,0,0" HorizontalAlignment="Left" VerticalAlignment="Top" Click="ClearTargetPortSelection_Click"/>
    </Grid>
</UserControl>
4. PortConfigControl.xaml.cs (전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;

namespace ScanValueTrans
{
    public partial class PortConfigControl : UserControl
    {
        public int PortIndex { get; set; }

        private SerialPortManager serialPortManager;
        private SettingsManager settingsManager;

        public PortConfigControl()
        {
            InitializeComponent();
            serialPortManager = SerialPortManager.Instance;
            settingsManager = SettingsManager.Instance;
        }

        public void LoadPortSettings(int index)
        {
            PortIndex = index;
            string lastUsedPort = settingsManager.GetSetting($"TargetPort{PortIndex}");

            if (!string.IsNullOrEmpty(lastUsedPort))
            {
                TargetPortComboBox.SelectedItem = lastUsedPort;
                AddTargetPort(lastUsedPort);
            }
        }

        public void RefreshPortList(string[] portNames)
        {
            TargetPortComboBox.ItemsSource = portNames;
            if (TargetPortComboBox.SelectedItem != null)
            {
                string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                if (!Array.Exists(portNames, port => port == selectedPort))
                {
                    TargetPortComboBox.SelectedItem = null;
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                }
            }
        }

        private void AddTargetPort(string portName)
        {
            try
            {
                string baudRate = "9600"; // 기본값으로 9600을 사용
                string parity = "None";
                string dataBits = "8";
                string stopBits = "One";

                serialPortManager.AddTargetPort(portName, int.Parse(baudRate),
                                                (Parity)Enum.Parse(typeof(Parity), parity),
                                                int.Parse(dataBits),
                                                (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                if (serialPortManager.IsPortOpen(portName))
                {
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Blue;
                    LogMessage($"타겟 포트 {portName}가 정상적으로 열렸습니다.");
                }
                else
                {
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                    LogMessage($"타겟 포트 {portName}를 열 수 없습니다.");
                }

                settingsManager.SaveSetting($"TargetPort{PortIndex}", portName);
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (TargetPortComboBox.SelectedItem != null)
            {
                string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                AddTargetPort(selectedPort);
            }
        }

        private void ClearTargetPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                TargetPortComboBox.SelectedItem = null;
                TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Black;
                serialPortManager.CloseTargetPorts();
                LogMessage($"타겟 포트 {PortIndex} 선택이 해제되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                ((MainWindow)Application.Current.MainWindow).LogListBox.Items.Add($"{timestamp} - {message}");

                if (((MainWindow)Application.Current.MainWindow).LogListBox.Items.Count > 100)
                {
                    ((MainWindow)Application.Current.MainWindow).LogListBox.Items.RemoveAt(0);
                }
            });
        }
    }
}
주요 기능 요약
PortConfigControl.xaml.cs: TargetPortComboBox에서 포트를 선택하면 AddTargetPort 메서드가 호출되어 해당 포트를 타겟 포트로 설정합니다. 포트가 정상적으로 열리면 글씨 색상이 파란색으로, 열리지 않으면 빨간색으로 표시됩니다. "Clear" 버튼을 클릭하면 선택한 타겟 포트 설정이 해제되고, 글씨 색상이 검정으로 돌아갑니다.

MainWindow.xaml.cs: 메인 윈도우에서 스캐너 포트와 타겟 포트의 설정을 관리하며, 데이터를 전송하고 로그를 기록하는 역할을 합니다. 또한, QR 코드를 생성하여 IP 주소와 포트 정보를 시각화합니다.

이제 모든 파일과 필요한 기능들이 누락 없이 제공되었습니다. 추가적인 문제가 발생하거나 더 도움이 필요하시면 언제든지 알려주세요.