Open sidebar
Win10 화면 녹화 프로그램

Model: Default (GPT-3.5)

User
win10 화면을 녹화하는 winform c# 프로그램을 만들고 싶어 10분단위로 끊어서 파일을 d:\abc폴더에 저장해주고, 파일이 2일이 경과된것은 삭제해야해

ChatGPT
WinForm C# 프로그램을 사용하여 Win10 화면을 녹화하고 파일을 10분 단위로 분할하여 D:\abc 폴더에 저장하고, 2일이 경과한 파일을 삭제하는 프로그램을 만들려면 다음과 같이 할 수 있습니다.

먼저, 프로그램에 필요한 NuGet 패키지를 설치해야 합니다. 프로젝트의 NuGet 패키지 관리자에서 다음 패키지를 설치하세요:

AForge.Video
AForge.Video.DirectShow
다음으로, 프로그램의 Form 디자인을 생성하고 "녹화 시작" 버튼과 "녹화 중지" 버튼을 추가합니다. 또한, Timer 컨트롤을 추가하여 10분마다 녹화를 중지하고 새로운 파일로 시작할 수 있도록 합니다.

다음은 간단한 예제 코드입니다:

csharp
Copy code
using System;
using System.IO;
using System.Windows.Forms;
using AForge.Video;
using AForge.Video.DirectShow;

namespace ScreenRecorder
{
    public partial class MainForm : Form
    {
        private FilterInfoCollection videoDevices;
        private VideoCaptureDevice videoSource;
        private bool isRecording;
        private DateTime recordingStartTime;
        private string currentFileName;

        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // 사용 가능한 비디오 장치 목록 가져오기
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);
        }

        private void btnStartRecording_Click(object sender, EventArgs e)
        {
            if (!isRecording)
            {
                // 새로운 파일 이름 생성
                string fileName = $"D:\\abc\\rec_{DateTime.Now.ToString("yyyyMMddHHmmss")}.avi";
                currentFileName = fileName;

                // 비디오 소스 생성
                videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);
                videoSource.NewFrame += new NewFrameEventHandler(videoSource_NewFrame);
                videoSource.Start();

                // 녹화 시작 시간 저장
                recordingStartTime = DateTime.Now;

                // 타이머 시작 (10분 후에 녹화 중지)
                timerRecording.Interval = 10 * 60 * 1000; // 10분 (단위: 밀리초)
                timerRecording.Start();

                // UI 업데이트
                isRecording = true;
                btnStartRecording.Enabled = false;
                btnStopRecording.Enabled = true;
            }
        }

        private void btnStopRecording_Click(object sender, EventArgs e)
        {
            if (isRecording)
            {
                // 녹화 중지
                videoSource.SignalToStop();
                videoSource.WaitForStop();

                // 타이머 중지
                timerRecording.Stop();

                // UI 업데이트
                isRecording = false;
                btnStartRecording.Enabled = true;
                btnStopRecording.Enabled = false;
            }
        }

        private void timerRecording_Tick(object sender, EventArgs e)
        {
            // 녹화 중지 및 새로운 파일로 시작
            btnStopRecording_Click(sender, e);
            btnStartRecording_Click(sender, e);
        }

        private void videoSource_NewFrame(object sender, NewFrameEventArgs eventArgs)
        {




User
이어서

ChatGPT
csharp
Copy code
        private void videoSource_NewFrame(object sender, NewFrameEventArgs eventArgs)
        {
            if (isRecording)
            {
                // 현재 시간과 녹화 시작 시간 사이의 차이 계산
                TimeSpan elapsedTime = DateTime.Now - recordingStartTime;

                // 10분마다 파일 분할
                if (elapsedTime.TotalMinutes >= 10)
                {
                    // 현재 파일 저장 및 녹화 중지
                    SaveCurrentRecording();

                    // 새로운 파일 이름 생성
                    string fileName = $"D:\\abc\\rec_{DateTime.Now.ToString("yyyyMMddHHmmss")}.avi";
                    currentFileName = fileName;

                    // 녹화 시작 시간 업데이트
                    recordingStartTime = DateTime.Now;

                    // 비디오 소스 초기화
                    videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);
                    videoSource.NewFrame += new NewFrameEventHandler(videoSource_NewFrame);
                    videoSource.Start();
                }

                // 현재 프레임을 파일에 추가
                using (VideoFileWriter writer = new VideoFileWriter())
                {
                    writer.Open(currentFileName, 640, 480, 25, VideoCodec.MPEG4);
                    writer.WriteVideoFrame(eventArgs.Frame);
                }
            }
        }

        private void SaveCurrentRecording()
        {
            // 녹화 중인 파일 저장 및 리소스 해제
            if (videoSource != null && videoSource.IsRunning)
            {
                videoSource.SignalToStop();
                videoSource.WaitForStop();
                videoSource = null;
            }
        }

        private void DeleteOldRecordings()
        {
            // D:\abc 폴더에서 2일이 경과한 파일 삭제
            string[] files = Directory.GetFiles("D:\\abc");
            foreach (string file in files)
            {
                DateTime creationTime = File.GetCreationTime(file);
                if (DateTime.Now - creationTime >= TimeSpan.FromDays(2))
                {
                    File.Delete(file);
                }
            }
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // 프로그램 종료 시 녹화 중인 파일 저장 및 오래된 파일 삭제
            SaveCurrentRecording();
            DeleteOldRecordings();
        }
    }
}
위의 코드는 주요 기능을 갖춘 WinForm C# 프로그램 예제입니다. "녹화 시작" 버튼을 클릭하면 새로운 파일이 생성되고, 10분마다 파일이 분할됩니다. "녹화 중지" 버튼을 클릭하면 녹화가 중지되고, "MainForm_FormClosing" 이벤트에서 프로그램이 종료될 때 녹화 중인 파일이 저장되고 오래된 파일이 삭제됩니다.

주의: 코드는 예제로 제공된 것이며, 실제 프로젝트에는 예외 처리와 추가적인 보완 사항이 필요할 수 있습니다. 또한, AForge.Video 라이브러리를 사용하기 때문에 해당 라이브러리에 대한 참조가 필요합니다.





User
윈도우가 시작하면 자동실행되어야하고, 만약 윈도우가 종료되면 종료직전에 저장하고 종료가 되어야해요 코드를 잘 정리해서 다시 전체코드 주십시오

ChatGPT
자동 실행 및 윈도우 종료 시 저장 기능을 갖춘 전체 코드는 다음과 같습니다:

csharp
Copy code
using System;
using System.IO;
using System.Windows.Forms;
using AForge.Video;
using AForge.Video.DirectShow;

namespace ScreenRecorder
{
    public partial class MainForm : Form
    {
        private FilterInfoCollection videoDevices;
        private VideoCaptureDevice videoSource;
        private bool isRecording;
        private DateTime recordingStartTime;
        private string currentFileName;
        private const string FolderPath = @"D:\abc";

        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // 사용 가능한 비디오 장치 목록 가져오기
            videoDevices = new FilterInfoCollection(FilterCategory.VideoInputDevice);

            // 윈도우 시작 시 자동 실행 설정
            SetAutoStart(true);
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // 프로그램 종료 시 녹화 중인 파일 저장 및 오래된 파일 삭제
            StopRecording();
            DeleteOldRecordings();

            // 윈도우 종료 시 자동 실행 설정 해제
            SetAutoStart(false);
        }

        private void SetAutoStart(bool enabled)
        {
            string appPath = Application.ExecutablePath;
            string appName = Path.GetFileNameWithoutExtension(appPath);
            string runKey = @"SOFTWARE\Microsoft\Windows\CurrentVersion\Run";

            using (Microsoft.Win32.RegistryKey key = Microsoft.Win32.Registry.CurrentUser.OpenSubKey(runKey, true))
            {
                if (enabled)
                {
                    key.SetValue(appName, appPath);
                }
                else
                {
                    key.DeleteValue(appName, false);
                }
            }
        }

        private void btnStartRecording_Click(object sender, EventArgs e)
        {
            if (!isRecording)
            {
                // 새로운 파일 이름 생성
                string fileName = $"{FolderPath}\\rec_{DateTime.Now:yyyyMMddHHmmss}.avi";
                currentFileName = fileName;

                // 비디오 소스 생성
                videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);
                videoSource.NewFrame += videoSource_NewFrame;
                videoSource.Start();

                // 녹화 시작 시간 저장
                recordingStartTime = DateTime.Now;

                // 타이머 시작 (10분 후에 녹화 중지)
                timerRecording.Interval = 10 * 60 * 1000; // 10분 (단위: 밀리초)
                timerRecording.Start();

                // UI 업데이트
                isRecording = true;
                btnStartRecording.Enabled = false;
                btnStopRecording.Enabled = true;
            }
        }

        private void btnStopRecording_Click(object sender, EventArgs e)
        {
            StopRecording();
        }

        private void StopRecording()
        {
            if (isRecording)
            {
                // 녹화 중지
                videoSource.SignalToStop();
                videoSource.WaitForStop();
                videoSource = null;

                // 타이머 중지
                timerRecording.Stop();

                // UI 업데이트
                isRecording = false;
                btnStartRecording.Enabled = true;
                btnStopRecording.Enabled = false;
            }
        }

        private void timerRecording_Tick(object sender, EventArgs e)
        {
            // 녹화 중지 및 새로운 파일로 시작
            StopRecording();
            btnStartRecording_Click(sender, e);
        }

        private void videoSource_NewFrame(object




User
이어서

ChatGPT
csharp
Copy code
        private void videoSource_NewFrame(object sender, NewFrameEventArgs eventArgs)
        {
            if (isRecording)
            {
                // 현재 시간과 녹화 시작 시간 사이의 차이 계산
                TimeSpan elapsedTime = DateTime.Now - recordingStartTime;

                // 10분마다 파일 분할
                if (elapsedTime.TotalMinutes >= 10)
                {
                    // 현재 파일 저장 및 녹화 중지
                    SaveCurrentRecording();

                    // 새로운 파일 이름 생성
                    string fileName = $"{FolderPath}\\rec_{DateTime.Now:yyyyMMddHHmmss}.avi";
                    currentFileName = fileName;

                    // 녹화 시작 시간 업데이트
                    recordingStartTime = DateTime.Now;

                    // 비디오 소스 초기화
                    videoSource = new VideoCaptureDevice(videoDevices[0].MonikerString);
                    videoSource.NewFrame += videoSource_NewFrame;
                    videoSource.Start();
                }

                // 현재 프레임을 파일에 추가
                using (VideoFileWriter writer = new VideoFileWriter())
                {
                    writer.Open(currentFileName, 640, 480, 25, VideoCodec.MPEG4);
                    writer.WriteVideoFrame(eventArgs.Frame);
                }
            }
        }

        private void SaveCurrentRecording()
        {
            // 녹화 중인 파일 저장 및 리소스 해제
            if (videoSource != null && videoSource.IsRunning)
            {
                videoSource.SignalToStop();
                videoSource.WaitForStop();
                videoSource = null;
            }
        }

        private void DeleteOldRecordings()
        {
            // D:\abc 폴더에서 2일이 경과한 파일 삭제
            if (Directory.Exists(FolderPath))
            {
                string[] files = Directory.GetFiles(FolderPath);
                foreach (string file in files)
                {
                    DateTime creationTime = File.GetCreationTime(file);
                    if (DateTime.Now - creationTime >= TimeSpan.FromDays(2))
                    {
                        File.Delete(file);
                    }
                }
            }
        }
    }
}
위의 코드는 자동 실행 및 윈도우 종료 시 파일 저장 및 삭제 기능을 갖춘 전체 WinForm C# 프로그램입니다. "MainForm_Load" 이벤트 핸들러에서 자동 실행을 설정하고, "MainForm_FormClosing" 이벤트 핸들러에서 프로그램이 종료될 때 파일 저장과 자동 실행을 해제합니다.

추가로, "DeleteOldRecordings" 메서드를 추가하여 2일이 경과한 파일을 삭제합니다. 이 메서드는 윈도우 종료 직전에 호출됩니다.

주의: 코드는 예제로 제공된 것이며, 실제 프로젝트에는 예외 처리와 추가적인 보완 사항이 필요할 수 있습니다. 또한, AForge.Video 라이브러리를 사용하기 때문에 해당 라이브러리에 대한 참조가 필요합니다. 폴더 경로를 "D:\abc"로 설정하였으므로, 해당 폴더가 존재해야 합니다.




Send a message


ChatGPT may produce inaccurate information about people, places, or facts. ChatGPT May 24 Version
ChatGPT
