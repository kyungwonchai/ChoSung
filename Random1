수정된 CommandQueueViewModel과 함께 XAML도 요청 사항에 맞춰 드리겠습니다. 이 코드는 큐에 10개 이상 작업이 쌓이면 더 이상 추가되지 않으며, 응답 시간이 초과되거나 재시도가 3회를 넘으면 모든 작업을 중단합니다. 또한 에러는 20개까지만 기록하고, 에러 시간도 기록하여 표시합니다.

수정된 CommandQueueViewModel 코드:
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Collections.Generic;
using System.Diagnostics;
using System.Windows.Threading;

/// <summary>
/// 비동기 작업을 관리하고 큐에 추가/제거를 담당하는 ViewModel 클래스입니다.
/// </summary>
public class CommandQueueViewModel : INotifyPropertyChanged
{
    public ObservableCollection<CommandItem> RemainingCommands { get; set; } = new ObservableCollection<CommandItem>();
    public ObservableCollection<CommandItem> ErrorCommands { get; set; } = new ObservableCollection<CommandItem>(); // 에러 리스트박스용 컬렉션
    public event PropertyChangedEventHandler PropertyChanged;

    private Queue<Func<Task<CommandResult>>> commandQueue = new Queue<Func<Task<CommandResult>>>();
    private bool _isProcessing; // 현재 작업 처리 중인지를 나타내는 플래그
    private bool _isQueueStopped; // 작업 큐가 중지되었는지를 나타내는 플래그
    private readonly DatabaseHelper _dbHelper; // 데이터베이스 작업을 돕는 헬퍼 클래스

    public int RetryLimit { get; set; } = 3; // 재시도 횟수의 상한
    public int RetryInterval { get; set; } = 3000; // 재시도 간격 (밀리초)
    public int ResponseTimeout { get; set; } = 5000; // 응답 시간 제한 (밀리초)
    public int MaximumQueueSize { get; set; } = 10; // 큐가 수용할 수 있는 최대 작업 수
    public int MaxErrorCount { get; set; } = 20; // 최대 에러 개수

    private int _progress; // 현재 처리중인 작업의 진행률
    public int Progress
    {
        get => _progress;
        set
        {
            if (_progress != value)
            {
                _progress = value;
                OnPropertyChanged(nameof(Progress)); // 진행 상태가 변경되면 UI에 통지
            }
        }
    }

    public CommandQueueViewModel()
    {
        _dbHelper = new DatabaseHelper();
        _isProcessing = false; // 처음에는 작업이 처리 중이지 않음
        _isQueueStopped = false; // 처음에는 큐가 중지되지 않음
        Progress = 0; // 진행률 초기화
    }

    /// <summary>
    /// 외부에서 새로운 작업을 큐에 추가하려 할 때 호출하는 메서드입니다.
    /// </summary>
    public void AddAsyncTaskCommand(Func<Task<string>> asyncTask, string commandText, string sentCommand, Func<string, bool> responseValidator)
    {
        if (_isQueueStopped || commandQueue.Count >= MaximumQueueSize)
        {
            ShowAlarm("큐가 멈추었거나 최대 크기에 도달했습니다. 더 이상의 명령을 추가할 수 없습니다.");
            return;
        }

        EnqueueTask(asyncTask, commandText, sentCommand, responseValidator);
    }

    /// <summary>
    /// 큐에 작업을 추가하고, 비동기로 작업을 처리하는 메서드입니다.
    /// </summary>
    private async void EnqueueTask(Func<Task<string>> taskFunc, string commandText, string sentCommand, Func<string, bool> responseValidator)
    {
        var newCommand = new CommandItem
        {
            CommandText = commandText,
            Status = "대기 중",
            MaxRetryLimit = RetryLimit,
            RetryCount = 0
        };

        App.Current.Dispatcher.Invoke(() => RemainingCommands.Add(newCommand));

        commandQueue.Enqueue(async () =>
        {
            newCommand.Status = "처리 중";
            int retryCount = 0;
            Stopwatch stopwatch = new Stopwatch();

            _isProcessing = true;

            while (retryCount < RetryLimit)
            {
                try
                {
                    stopwatch.Restart();
                    string result = await taskFunc();
                    stopwatch.Stop();

                    int responseTime = (int)stopwatch.ElapsedMilliseconds;
                    newCommand.ResponseTime = responseTime;

                    if (responseTime > ResponseTimeout)
                    {
                        newCommand.Status = "시간 초과";
                        ShowAlarm("응답 시간 초과로 모든 작업이 중단됩니다.");
                        newCommand.Result = 0;
                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, "Timeout", "Failed", newCommand.Result, retryCount, responseTime, "Response Timeout");
                        StopQueueProcessing(newCommand);
                        return new CommandResult { Success = false, Message = "Response Timeout" };
                    }

                    if (responseValidator(result))
                    {
                        newCommand.Status = "완료";
                        newCommand.Result = 1;
                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, result);
                        UpdateProgress();
                        _isProcessing = false;
                        return new CommandResult { Success = true, Message = result };
                    }

                    retryCount++;
                    newCommand.RetryCount = retryCount;
                    newCommand.Status = $"{retryCount}/{RetryLimit} 재시도 중";

                    if (retryCount >= RetryLimit)
                    {
                        newCommand.Status = "재시도 횟수 초과";
                        ShowAlarm("최대 재시도 횟수를 초과하여 모든 작업이 중단됩니다.");
                        StopQueueProcessing(newCommand);
                        return new CommandResult { Success = false, Message = "Retry Limit Exceeded" };
                    }

                    await Task.Delay(RetryInterval);
                }
                catch (Exception ex)
                {
                    newCommand.Status = "오류";
                    newCommand.Result = 0;
                    stopwatch.Stop();
                    int responseTime = (int)stopwatch.ElapsedMilliseconds;

                    newCommand.ResponseTime = responseTime;
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);
                    ShowAlarm("오류가 발생하여 모든 작업이 중단됩니다.");
                    StopQueueProcessing(newCommand);
                    return new CommandResult { Success = false, Message = ex.Message };
                }
            }

            UpdateProgress();
            _isProcessing = false;
            return new CommandResult { Success = false };
        });

        if (!_isProcessing)
        {
            _isProcessing = true;
            await ProcessCommandQueue();
        }

        UpdateProgress();
    }

    /// <summary>
    /// 큐에 있는 모든 작업을 순차적으로 실행합니다.
    /// </summary>
    private async Task ProcessCommandQueue()
    {
        while (commandQueue.Count > 0)
        {
            var command = commandQueue.Dequeue();
            await command();
            UpdateProgress();
        }

        _isProcessing = false; // 모든 작업이 완료되면 처리 상태를 해제합니다.
    }

    /// <summary>
    /// 큐 처리를 중단하고 모든 추가 작업을 차단하는 함수입니다.
    /// </summary>
    private void StopQueueProcessing(CommandItem errorCommand)
    {
        _isQueueStopped = true;
        App.Current.Dispatcher.Invoke(() =>
        {
            if (ErrorCommands.Count >= MaxErrorCount) // 에러가 20개를 초과하지 않도록 제한
            {
                ErrorCommands.RemoveAt(0); // 오래된 에러 삭제
            }
            ErrorCommands.Add(errorCommand);
        });
        ShowAlarm("큐가 중단되었습니다. 시간 초과 또는 실패로 인한 조치입니다.");
    }

    /// <summary>
    /// 에러 메시지를 리스트박스에 표시하는 함수입니다.
    /// </summary>
    private void ShowAlarm(string message)
    {
        var errorCommand = new CommandItem
        {
            CommandText = message,
            Status = "오류",
            Result = 0,
            RetryCount = 0,
            ResponseTime = 0,
            CommandTime = DateTime.Now.ToString("HH:mm:ss") // 에러 발생 시간을 기록
        };

        App.Current.Dispatcher.Invoke(() =>
        {
            if (ErrorCommands.Count >= MaxErrorCount)
                ErrorCommands.RemoveAt(0); // 에러 메시지 갯수 제한
            ErrorCommands.Add(errorCommand);
        });
    }

    /// <summary>
    /// 프로그레스바의 상태를 업데이트하는 함수입니다.
    /// </summary>
    private void UpdateProgress()
    {
        Progress = commandQueue.Count; // 남은 작업 수를 통해 진행 상태를 업데이트합니다.
    }

    /// <summary>
    /// 속성 변경을 알리기 위한 PropertyChanged 이벤트를 발생시키는 함수입니다.
    /// </summary>
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
수정된 XAML 코드:
xaml
코드 복사
<Window x:Class="CommandQueueApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Command Queue" Height="450" Width="800">
    <Grid>
        <!-- 그리드 좌우 90% - 10% -->
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="9*"/> <!-- 좌측 90% -->
            <ColumnDefinition Width="1*"/> <!-- 우측 10% -->
        </Grid.ColumnDefinitions>

        <!-- 좌측 2등분 (세로 방향) -->
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/> <!-- 상단 50% (남아 있는 명령 리스트박스) -->
            <RowDefinition Height="1*"/> <!-- 하단 50% (에러 리스트박스) -->
        </Grid.RowDefinitions>

        <!-- 남아 있는 명령 리스트박스 (좌측 상단) -->
        <ListBox Grid.Row="0" Grid.Column="0" ItemsSource="{Binding RemainingCommands}" Margin="10">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <!-- 명령 텍스트 -->
                        <TextBlock Text="{Binding CommandText}" Width="200"/>
                        <!-- 작업 상태 -->
                        <TextBlock Text=" 상태: " Width="50"/>
                        <TextBlock Text="{Binding Status}" Width="100"/>
                        <!-- 재시도 횟수 표시 -->
                        <TextBlock Text=" 재시도: " Width="70"/>
                        <TextBlock Text="{Binding RetryCount}" Width="30"/>
                        <!-- 응답 시간 -->
                        <TextBlock Text=" 응답 시간: " Width="100"/>
                        <TextBlock Text="{Binding ResponseTime}" Width="70"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- 에러 리스트박스 (좌측 하단) -->
        <ListBox Grid.Row="1" Grid.Column="0" ItemsSource="{Binding ErrorCommands}" Margin="10">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Text="에러: " Width="50"/>
                        <TextBlock Text="{Binding CommandText}" Width="200"/>
                        <TextBlock Text=" 상태: " Width="50"/>
                        <TextBlock Text="{Binding Status}" Width="100"/>
                        <TextBlock Text=" 재시도: " Width="70"/>
                        <TextBlock Text="{Binding RetryCount}" Width="30"/>
                        <TextBlock Text=" 응답 시간: " Width="100"/>
                        <TextBlock Text="{Binding ResponseTime}" Width="70"/>
                        <TextBlock Text=" 발생 시간: " Width="100"/>
                        <TextBlock Text="{Binding CommandTime}" Width="100"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>

        <!-- 우측 프로그레스바 (세로형) -->
        <StackPanel Grid.Column="1" VerticalAlignment="Stretch" Margin="10">
            <ProgressBar VerticalAlignment="Top" Height="300" Width="30" Orientation="Vertical" 
                         Value="{Binding Progress}" Maximum="{Binding MaximumQueueSize}"/>
            <!-- ProgressBar 옆에 남은 작업의 개수를 표시 -->
            <TextBlock Text="{Binding Progress}" Margin="10,0,0,0" VerticalAlignment="Center" />
        </StackPanel>
    </Grid>
</Window>
주요 수정 사항:
큐에 10개가 넘으면 작업 추가 불가: 작업이 10개 이상이면 더 이상 추가할 수 없습니다.
순차적인 작업 처리 보장: EnqueueTask가 순차적으로 작업을 처리합니다.
응답 시간 초과 시 작업 중지: 5초 초과 시 작업 중지 및 에러 처리.
재시도 3회 초과 시 작업 중지: 재시도 횟수는 3회를 넘을 수 없으며, 초과 시 작업 중지.
에러 메시지 제한: 에러는 최대 20개까지만 기록하고, 그 이상은 삭제합니다.
에러 발생 시간 표시: 에러가 발생한 시간도 함께 기록.
프로그레스바에 작업 개수 표시: 작업 개수를 프로그레스바 옆에 표시.
이 코드는 요구한 모든 사항을 반영했으며, 주석과 동작 방식도 맞추어 수정되었습니다