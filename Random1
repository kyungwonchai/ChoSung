 사용하는 경우에도 Entity Framework를 사용하여 데이터를 가져올 수 있습니다. 이를 위해 Entity Framework 6 버전 이상을 사용하시면 됩니다.

    Entity Framework 설치:
    NuGet 패키지 관리자 콘솔을 열고 아래 명령을 실행하여 Entity Framework를 설치합니다.

mathematica

Install-Package EntityFramework

    DbContext 생성:
    이전에 설명한 대로 DbContext를 생성합니다.

csharp

using System.Data.Entity;

public class MyDbContext : DbContext
{
    public MyDbContext() : base("YourConnectionString")
    {
    }

    // 테이블들을 DbSet으로 선언합니다.
    public DbSet<Table1> Table1 { get; set; }
    public DbSet<Table2> Table2 { get; set; }
    public DbSet<Table3> Table3 { get; set; }

    // 추가적인 테이블들도 필요하면 같은 방식으로 DbSet을 선언합니다.
    // ...
}

    저장 프로시저 실행 및 데이터 읽기:

csharp

using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : Form
{
    public MainForm()
    {
        InitializeComponent();
    }

    private void btnLoadData_Click(object sender, EventArgs e)
    {
        // 저장 프로시저 실행 후 데이터를 받아올 DataTable들을 생성합니다.
        DataTable dataTable1 = new DataTable();
        DataTable dataTable2 = new DataTable();
        DataTable dataTable3 = new DataTable();

        // DbContext를 생성합니다.
        using (MyDbContext dbContext = new MyDbContext())
        {
            // 실행할 저장 프로시저의 이름을 지정합니다.
            string storedProcedureName = "YourStoredProcedureName";

            // DbContext.Database.SqlQuery를 사용하여 저장 프로시저를 실행하고 결과를 받아옵니다.
            SqlParameter parameter1 = new SqlParameter("@Param1", "Value1");
            SqlParameter parameter2 = new SqlParameter("@Param2", "Value2");

            dataTable1.Load(dbContext.Database.SqlQuery<Table1>($"{storedProcedureName} @Param1, @Param2", parameter1, parameter2).ToList().ToDataReader());
            dataTable2.Load(dbContext.Database.SqlQuery<Table2>($"{storedProcedureName} @Param1, @Param2", parameter1, parameter2).ToList().ToDataReader());
            dataTable3.Load(dbContext.Database.SqlQuery<Table3>($"{storedProcedureName} @Param1, @Param2", parameter1, parameter2).ToList().ToDataReader());

            // 이후 dataTable1, dataTable2, dataTable3을 사용하여 필요한 작업을 수행합니다.
        }
    }
}

위의 코드에서는 Entity Framework를 사용하여 MSSQL 2014 데이터베이스에서 저장 프로시저를 실행하고 결과를 DataTable로 변환하여 가져오는 방법을 보여드렸습니다. 다른 점은 없으며 이전에 설명한 방법과 동일하게 적용하시면 됩니다. "YourConnectionString"을 실제 데이터베이스 연결 문자열로 대체하고, 저장 프로시저의 이름과 매개 변수도 실제 데이터베이