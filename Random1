바코드 스캐너로부터 입력을 받아 특정 활성화된 프로그램에만 입력을 전달하는 C# 애플리케이션을 개발하는 과정은 다음과 같습니다. 이 프로그램은 포트를 하나만 잡고, 특정 어플리케이션이 활성화되어 있으면 해당 어플리케이션으로 데이터를 전달합니다.

1. 주요 기능 구현
COM 포트로부터 데이터 읽기
활성화된 프로그램 확인
활성화된 프로그램에 데이터 전달
2. 사용 라이브러리
System.IO.Ports : COM 포트 통신
System.Diagnostics : 활성화된 프로세스 확인
Windows API : 활성화된 윈도우 확인 및 데이터 전송
3. 전체 코드
csharp
코드 복사
using System;
using System.Diagnostics;
using System.IO.Ports;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;

namespace BarcodeScannerProxy
{
    class Program
    {
        static SerialPort _serialPort;
        static string activeAppName = "YourTargetAppName"; // 활성화된 프로그램 이름 (예: notepad)
        
        [DllImport("user32.dll")]
        static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        static extern int GetWindowText(IntPtr hWnd, StringBuilder text, int count);

        [DllImport("user32.dll")]
        static extern uint GetWindowThreadProcessId(IntPtr hWnd, out uint processId);

        static void Main(string[] args)
        {
            // Serial Port 설정
            _serialPort = new SerialPort("COM3", 9600);
            _serialPort.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
            _serialPort.Open();

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            _serialPort.Close();
        }

        private static void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e)
        {
            SerialPort sp = (SerialPort)sender;
            string inputData = sp.ReadExisting();

            if (IsTargetAppActive())
            {
                SendKeysToActiveApp(inputData);
            }
        }

        private static bool IsTargetAppActive()
        {
            IntPtr hwnd = GetForegroundWindow();
            uint processId;
            GetWindowThreadProcessId(hwnd, out processId);
            Process proc = Process.GetProcessById((int)processId);
            return proc.ProcessName.Contains(activeAppName, StringComparison.OrdinalIgnoreCase);
        }

        private static void SendKeysToActiveApp(string data)
        {
            foreach (char c in data)
            {
                SendKeys.SendWait(c.ToString());
            }
        }
    }
}
4. 코드 설명
COM 포트 설정: SerialPort 클래스를 사용하여 COM 포트를 설정하고 데이터를 수신합니다.
활성화된 프로그램 확인: GetForegroundWindow와 GetWindowThreadProcessId를 사용하여 현재 활성화된 윈도우와 프로세스를 확인합니다.
데이터 전송: SendKeys.SendWait를 사용하여 활성화된 프로그램으로 데이터를 전송합니다.
5. 주의 사항
activeAppName 변수에 당신이 목표로 하는 어플리케이션 이름을 설정하세요.
COM 포트와 통신 속도 등은 실제 사용하는 환경에 맞게 조정하세요.
SendKeys.SendWait는 키 입력을 시뮬레이트하는 방법으로, 특정 어플리케이션이 활성화된 상태에서만 작동합니다.
이 코드는 바코드 스캐너로부터 입력을 받아 특정 활성화된 어플리케이션에만 입력을 전달하는 기능을 구현합니다. 필요한 경우 각 어플리케이션에 맞게 세부 설정을 조정하세요.





만약 내가 입력받은 신호를 그대로 다른 컴포트로 분배해서 마치 실제 컴포트가 입력받은거처럼 하려면 ...모든 winapi를 동원해서라도 해줘요
ChatGPT
입력받은 신호를 다른 COM 포트로 분배하여 실제로 다른 COM 포트가 입력받은 것처럼 하는 작업을 위해 WinAPI와 C#을 사용하는 방법을 설명하겠습니다. 이 작업은 가상 COM 포트를 사용하여 구현할 수 있습니다.

여기서는 com0com이라는 가상 COM 포트 드라이버를 사용하여 가상 COM 포트를 생성하고, C# 프로그램을 통해 데이터를 분배하는 방법을 다룹니다.

1. 가상 COM 포트 드라이버 설치
먼저, com0com을 설치해야 합니다. com0com은 오픈 소스 가상 COM 포트 드라이버입니다.

2. C# 프로그램 구현
이 프로그램은 입력받은 신호를 실제 COM 포트로부터 읽어서 가상 COM 포트로 전달합니다.

프로그램 코드
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Threading;

namespace COMPortProxy
{
    class Program
    {
        static SerialPort _inputPort;
        static SerialPort _outputPort;

        static void Main(string[] args)
        {
            // 입력 포트 설정 (실제 바코드 스캐너가 연결된 포트)
            _inputPort = new SerialPort("COM3", 9600);
            _inputPort.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
            _inputPort.Open();

            // 출력 포트 설정 (가상 COM 포트)
            _outputPort = new SerialPort("COM4", 9600);
            _outputPort.Open();

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            _inputPort.Close();
            _outputPort.Close();
        }

        private static void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e)
        {
            SerialPort sp = (SerialPort)sender;
            string inputData = sp.ReadExisting();
            Console.WriteLine("Received: " + inputData);

            // 입력받은 데이터를 출력 포트로 전송
            if (_outputPort.IsOpen)
            {
                _outputPort.Write(inputData);
            }
        }
    }
}
3. 설명
COM 포트 설정: SerialPort 클래스를 사용하여 실제 바코드 스캐너가 연결된 포트와 가상 COM 포트를 설정합니다.
데이터 수신 처리기: _inputPort.DataReceived 이벤트 핸들러를 사용하여 데이터를 수신하고, 수신된 데이터를 가상 COM 포트로 전달합니다.
포트 열기/닫기: 프로그램 시작 시 실제 COM 포트와 가상 COM 포트를 열고, 종료 시 닫습니다.
4. 설정 방법
com0com을 설치하여 가상 COM 포트를 만듭니다. 예를 들어, COM4와 COM5를 페어로 설정합니다.
실제 바코드 스캐너는 COM3에 연결되어 있다고 가정합니다.
C# 프로그램을 실행하여 COM3에서 데이터를 읽어 COM4로 전달합니다.
다른 애플리케이션은 COM5에서 데이터를 읽도록 설정합니다.
5. 추가 고려 사항
가상 COM 포트 드라이버 설정 및 사용 방법은 com0com 공식 문서를 참고하세요.
실제 환경에 맞게 COM 포트 번호와 통신 속도 등을 조정하세요.
데이터 전송 시 에러 핸들링을 추가하여 안정성을 높이세요.
이 프로그램은 WinAPI를 직접 사용하지 않고, C#의 SerialPort 클래스를 사용하여 가상 COM 포트를 통한 데이터 분배를 구현합니다. 가상 COM 포트를 통해 다른 프로그램이 마치 실제 COM 포트에서 데이터를 받은 것처럼 동작할 수 있습니다