endDataToPLC 메서드와 SendPOInfoToPLC 메서드 내에서 각각 LogMessage를 호출하고, 비동기 작업이 완료된 후에도 LogMessage를 호출하고 있기 때문에 로그 메시지가 중복으로 출력되는 것입니다. 이를 수정하려면 각 메시지가 한 번만 기록되도록 해야 합니다.

다음은 이 문제를 해결하기 위해 수정된 BtnSendData_Click 이벤트 핸들러와 관련 메서드입니다.

MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private SerialPort serialPort;
        private const int MaxRetries = 3; // 에러 발생 시 최대 재시도 횟수
        private DispatcherTimer timer;
        private string iniFilePath = "setup.ini";
        private DispatcherTimer clockTimer;
        private string currentPortName = string.Empty;

        public MainWindow()
        {
            InitializeComponent();
            LoadAvailablePorts();
            LoadSelectedPort();
            InitializeTimer();
            InitializeClock();
        }

        // 사용 가능한 COM 포트를 ComboBox에 로드
        private void LoadAvailablePorts()
        {
            var ports = SerialPort.GetPortNames();
            ComboBoxPorts.ItemsSource = ports;
        }

        // 이전에 선택된 포트를 setup.ini에서 로드
        private void LoadSelectedPort()
        {
            if (File.Exists(iniFilePath))
            {
                var portName = File.ReadAllText(iniFilePath).Trim();
                if (!string.IsNullOrEmpty(portName) && ComboBoxPorts.Items.Contains(portName))
                {
                    ComboBoxPorts.SelectedItem = portName;
                    InitializeSerialPort(portName);
                }
            }
        }

        // 시리얼 포트를 초기화하고 열기
        private void InitializeSerialPort(string portName)
        {
            serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One)
            {
                ReadTimeout = 1000, // 1초 타임아웃 설정
                WriteTimeout = 1000 // 1초 타임아웃 설정
            };

            serialPort.DataReceived += SerialPort_DataReceived;
            try
            {
                serialPort.Open();
                currentPortName = portName;
                LogMessage($"Serial port {portName} opened successfully.");
            }
            catch (Exception ex)
            {
                LogError($"Error opening serial port {portName}: {ex.Message}");
            }
        }

        // 타이머 초기화
        private void InitializeTimer()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        // 시계 타이머 초기화
        private void InitializeClock()
        {
            clockTimer = new DispatcherTimer();
            clockTimer.Interval = TimeSpan.FromSeconds(1);
            clockTimer.Tick += (s, e) =>
            {
                CurrentTimeTextBlock.Text = DateTime.Now.ToString("HH:mm:ss");
            };
            clockTimer.Start();
        }

        // 주기적으로 실행되는 타이머 이벤트 핸들러
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 주기적으로 상태 체크 로직을 여기에 추가할 수 있습니다.
        }

        // ComboBox에서 포트를 선택하면 실행되는 이벤트 핸들러
        private void ComboBoxPorts_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ComboBoxPorts.SelectedItem != null)
            {
                var selectedPort = ComboBoxPorts.SelectedItem.ToString();
                InitializeSerialPort(selectedPort);
                File.WriteAllText(iniFilePath, selectedPort);
            }
        }

        // "Send Value" 버튼 클릭 이벤트 핸들러
        private async void BtnSendValue_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (ComboBoxValues.SelectedItem != null)
                {
                    int selectedValue = int.Parse((ComboBoxValues.SelectedItem as ComboBoxItem).Content.ToString());
                    await Task.Run(() =>
                    {
                        SendMessageWithRetry(() => SendDataToPLC(2300, selectedValue), MaxRetries);
                        Dispatcher.Invoke(() => LogMessage($"Value {selectedValue} sent to D2300 on port {currentPortName}."));
                    });
                }
                else
                {
                    LogError("No value selected to send to D2300.");
                }
            }
            catch (Exception ex)
            {
                LogError($"Error in BtnSendValue_Click: {ex.Message}");
            }
        }

        // "Send Data" 버튼 클릭 이벤트 핸들러
        private async void BtnSendData_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                string poInfo = string.Empty;

                // UI 스레드에서 TxtPOInfo.Text 값을 읽음
                Dispatcher.Invoke(() =>
                {
                    poInfo = TxtPOInfo.Text;
                });

                await Task.Run(() =>
                {
                    SendMessageWithRetry(() => SendDataToPLC(2300, 1), MaxRetries); // 예: 신규 LOT 배출
                    SendMessageWithRetry(() => SendPOInfoToPLC(poInfo), MaxRetries);
                });

                Dispatcher.Invoke(() => LogMessage($"Data sent successfully on port {currentPortName}!"));
            }
            catch (Exception ex)
            {
                LogError($"Error in BtnSendData_Click: {ex.Message}");
            }
        }

        // PLC로 데이터를 전송하는 메소드
        private void SendDataToPLC(int address, int value)
        {
            try
            {
                string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
                byte[] messageBytes = Encoding.ASCII.GetBytes(message);
                serialPort.Write(messageBytes, 0, messageBytes.Length);
                Dispatcher.Invoke(() => LogMessage($"Sent data to PLC: {message.Trim()} on port {currentPortName}."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error sending data to PLC: {ex.Message}"));
            }
        }

        // PO 정보를 PLC로 전송하는 메소드
        private void SendPOInfoToPLC(string poInfo)
        {
            try
            {
                for (int i = 0; i < poInfo.Length; i += 2)
                {
                    string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
                    int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
                    SendDataToPLC(2310 + (i / 2), value);
                }
                Dispatcher.Invoke(() => LogMessage($"Sent PO info to PLC: {poInfo} on port {currentPortName}."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error sending PO info to PLC: {ex.Message}"));
            }
        }

        // 메시지를 재시도 로직과 함께 전송하는 메소드
        private void SendMessageWithRetry(Action sendMessage, int maxRetries)
        {
            int attempts = 0;
            bool success = false;
            while (attempts < maxRetries && !success)
            {
                try
                {
                    sendMessage();
                    success = true;
                }
                catch (Exception ex)
                {
                    attempts++;
                    Dispatcher.Invoke(() => LogError($"Error sending message (Attempt {attempts}) on port {currentPortName}: {ex.Message}"));
                    if (attempts >= maxRetries)
                    {
                        Dispatcher.Invoke(() => LogError("Max retry attempts reached. Giving up."));
                    }
                    else
                    {
                        Thread.Sleep(1000); // 잠시 대기 후 재시도
                    }
                }
            }
        }

        // 시리얼 포트 데이터 수신 이벤트 핸들러
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string receivedData = serialPort.ReadExisting();
                Dispatcher.Invoke(() => LogMessage($"Received data from PLC: {receivedData} on port {currentPortName}."));
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogError($"Error receiving data from PLC: {ex.Message}"));
            }
        }

        // 로그 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogMessage(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logMessage = $"{timestamp}: {message}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = logMessage;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);
            });

            // 로그를 파일로 저장
            using (StreamWriter file = new StreamWriter("log.txt", true))
            {
                file.WriteLine(logMessage);
            }
        }

        // 에러 메시지를 ListBox에 추가하고 파일로 저장하는 메소드
        private void LogError(string error)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string errorMessage = $"{timestamp}: {error}";

            Dispatcher.Invoke(() =>
            {
                ListBoxItem item = new ListBoxItem();
                item.Content = errorMessage;
                item.Foreground = Brushes.Red;
                LogListBox.Items.Add(item);
                LogListBox.ScrollIntoView(item);

                List




뮤토콜이 뭔지 그냥 컴포트연결하고 신호보낼때 값이다른건지 아주상세이론설명과 각함수별동작상세. 동기비동기인지 포함해서설명에
ChatGPT
MEWTOCOL이란?
MEWTOCOL(Matsushita Electric Works Protocol)은 파나소닉(구 마츠시타 전기)의 PLC(Programmable Logic Controller)와 컴퓨터 간의 통신을 위한 프로토콜입니다. 이 프로토콜은 시리얼 통신(RS-232)을 통해 PLC와 PC 간에 데이터를 송수신하는 데 사용됩니다. MEWTOCOL은 주로 데이터 레지스터(DT)나 릴레이(RY)의 값을 읽고 쓰는 데 사용됩니다.

시리얼 통신 개요
시리얼 통신은 데이터를 하나씩 순차적으로 전송하는 방식입니다. 이는 RS-232, RS-485 등과 같은 표준을 통해 구현됩니다. 시리얼 통신은 컴퓨터와 외부 장치 간의 데이터를 주고받는 데 주로 사용됩니다.

프로그램 개요
프로그램은 WPF를 사용하여 구현되었으며, 시리얼 포트를 통해 PLC와 통신합니다. 사용자는 ComboBox에서 포트를 선택하고, 데이터를 보내거나 값을 확인할 수 있습니다. 각 기능은 동기적 또는 비동기적으로 구현되어 UI가 블록되지 않도록 합니다.

각 함수의 역할과 동작 방식
1. InitializeSerialPort
역할: 시리얼 포트를 초기화하고 열기. 타임아웃 설정 포함.

동작 방식:

SerialPort 객체를 생성하고 포트 이름, 보드레이트, 패리티, 데이터 비트, 정지 비트를 설정합니다.
읽기 및 쓰기 타임아웃을 설정하여 연결 시 오래 기다리지 않도록 합니다.
포트를 열고, 성공 시 메시지를 로그에 기록합니다. 실패 시 에러를 기록합니다.
코드:

csharp
코드 복사
private void InitializeSerialPort(string portName)
{
    serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One)
    {
        ReadTimeout = 1000, // 1초 타임아웃 설정
        WriteTimeout = 1000 // 1초 타임아웃 설정
    };

    serialPort.DataReceived += SerialPort_DataReceived;
    try
    {
        serialPort.Open();
        currentPortName = portName;
        LogMessage($"Serial port {portName} opened successfully.");
    }
    catch (Exception ex)
    {
        LogError($"Error opening serial port {portName}: {ex.Message}");
    }
}
2. SendDataToPLC
역할: PLC의 특정 주소로 데이터를 전송합니다.

동작 방식:

MEWTOCOL 명령을 생성하여 데이터를 시리얼 포트를 통해 PLC로 전송합니다.
명령은 ASCII 문자열로 구성되며, %01#WDDxxxxyyyyzzzz 형식을 가집니다.
xxxx: 시작 주소
yyyy: 끝 주소
zzzz: 쓰여질 데이터
전송이 성공하면 로그에 메시지를 기록하고, 실패 시 에러를 기록합니다.
코드:

csharp
코드 복사
private void SendDataToPLC(int address, int value)
{
    try
    {
        string message = $"%01#WDD{address:D4}{address + 1:D4}{value:D4}\r";
        byte[] messageBytes = Encoding.ASCII.GetBytes(message);
        serialPort.Write(messageBytes, 0, messageBytes.Length);
        Dispatcher.Invoke(() => LogMessage($"Sent data to PLC: {message.Trim()} on port {currentPortName}."));
    }
    catch (Exception ex)
    {
        Dispatcher.Invoke(() => LogError($"Error sending data to PLC: {ex.Message}"));
    }
}
3. SendPOInfoToPLC
역할: PLC에 PO(Production Order) 정보를 전송합니다.

동작 방식:

PO 정보를 2바이트씩 나누어 PLC의 연속된 주소에 전송합니다.
각 워드는 두 개의 ASCII 문자로 구성됩니다.
데이터를 시리얼 포트를 통해 PLC로 전송하고, 성공 시 로그를 기록합니다.
코드:

csharp
코드 복사
private void SendPOInfoToPLC(string poInfo)
{
    try
    {
        for (int i = 0; i < poInfo.Length; i += 2)
        {
            string word = poInfo.Substring(i, Math.Min(2, poInfo.Length - i));
            int value = word.Length == 2 ? (word[0] << 8) + word[1] : word[0];
            SendDataToPLC(2310 + (i / 2), value);
        }
        Dispatcher.Invoke(() => LogMessage($"Sent PO info to PLC: {poInfo} on port {currentPortName}."));
    }
    catch (Exception ex)
    {
        Dispatcher.Invoke(() => LogError($"Error sending PO info to PLC: {ex.Message}"));
    }
}
4. SendMessageWithRetry
역할: 메시지를 재시도 로직과 함께 전송합니다.

동작 방식:

주어진 메시지 전송 작업을 최대 재시도 횟수까지 반복합니다.
각 재시도 후 잠시 대기합니다.
전송 성공 시 로그를 기록하고, 실패 시 에러를 기록합니다.
코드:

csharp
코드 복사
private void SendMessageWithRetry(Action sendMessage, int maxRetries)
{
    int attempts = 0;
    bool success = false;
    while (attempts < maxRetries && !success)
    {
        try
        {
            sendMessage();
            success = true;
        }
        catch (Exception ex)
        {
            attempts++;
            Dispatcher.Invoke(() => LogError($"Error sending message (Attempt {attempts}) on port {currentPortName}: {ex.Message}"));
            if (attempts >= maxRetries)
            {
                Dispatcher.Invoke(() => LogError("Max retry attempts reached. Giving up."));
            }
            else
            {
                Thread.Sleep(1000); // 잠시 대기 후 재시도
            }
        }
    }
}
5. SerialPort_DataReceived
역할: PLC로부터 데이터를 수신합니다.

동작 방식:

시리얼 포트에서 데이터를 읽어 로그에 기록합니다.
데이터 수신 시 호출됩니다.
코드:

csharp
코드 복사
private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
{
    try
    {
        string receivedData = serialPort.ReadExisting();
        Dispatcher.Invoke(() => LogMessage($"Received data from PLC: {receivedData} on port {currentPortName}."));
    }
    catch (Exception ex)
    {
        Dispatcher.Invoke(() => LogError($"Error receiving data from PLC: {ex.Message}"));
    }
}
6. LogMessage
역할: 로그 메시지를 기록하고 파일에 저장합니다.

동작 방식:

로그 메시지를 ListBox에 추가하고 파일에 저장합니다.
코드:

csharp
코드 복사
private void LogMessage(string message)
{
    string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
    string logMessage = $"{timestamp}: {message}";

    Dispatcher.Invoke(() =>
    {
        ListBoxItem item = new ListBoxItem();
        item.Content = logMessage;
        LogListBox.Items.Add(item);
        LogListBox.ScrollIntoView(item);
    });

    // 로그를 파일로 저장
    using (StreamWriter file = new StreamWriter("log.txt", true))
    {
        file.WriteLine(logMessage);
    }
}
7. LogError
역할: 에러 메시지를 기록하고 파일에 저장합니다.

동작 방식:

에러 메시지를 빨간색으로 ListBox에 추가하고 파일에 저장합니다.
코드:

csharp
코드 복사
private void LogError(string error)
{
    string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
    string errorMessage = $"{timestamp}: {error}";

    Dispatcher.Invoke(() =>
    {
        ListBoxItem item = new ListBoxItem();
        item.Content = errorMessage;
        item.Foreground = Brushes.Red;
        LogListBox.Items.Add(item);
        LogListBox.ScrollIntoView(item);

        ListBoxItem errorItem = new ListBoxItem();
        errorItem.Content = errorMessage;
        errorItem.Foreground = Brushes.Red;
        ErrorListBox.Items.Add(errorItem);
        ErrorListBox.ScrollIntoView(errorItem);
    });

    // 로그를 파일로 저장
    using (StreamWriter file = new StreamWriter("error_log.txt", true))
    {
        file.WriteLine(errorMessage);
    }
}
비동기/동기 작업
비동기 작업: BtnSendValue_Click, BtnSendData_Click 등 이벤트 핸들러는 async 키워드와 await Task.Run()을 사용하여 비동기 작업을 수행합니다. 이를 통해 UI 스레드가 블록되지 않도록 합니다.
동기 작업: SendDataToPLC, SendPOInfoToPLC 등의 메서드는 동기적으로 데이터를 전송하지만, 비동기 이벤트 핸들러 내에서 호출됩니다.
이 프로그램은 시리얼 포트를 통해 PLC와 통신하며, 다양한 데이터를 전송하고 수신할 수 있습니다. 각 함수는 동기적 또는 비동기적으로 작동하여 UI의 부드러운 동작을 보장합니다.








