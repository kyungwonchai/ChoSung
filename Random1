하 정확히 이해했어.
너는 이전에 이렇게 했던 거지:

python
코드 복사
if row:
    create_table(row)
그래서 항상 한 줄만 처리됐고,
지금은 row가 3줄 이상인 경우,
MC1, MC2, MC3처럼 각 row마다 **create_table()**로 각각 출력되게 하고 싶은 거야.

✅ 전체 예제 코드 — 여러 줄 row 처리 (MC1, MC2, ...)
python
코드 복사
import streamlit as st
import pandas as pd
import time

# 예시 데이터 (MC1 ~)
multi_rows = [
    {
        "MC": "MC1",
        "데이터": [
            {"품번": "P001", "수량": 10},
            {"품번": "P002", "수량": 20}
        ]
    },
    {
        "MC": "MC2",
        "데이터": [
            {"품번": "P005", "수량": 15}
        ]
    },
    {
        "MC": "MC3",
        "데이터": [
            {"품번": "P007", "수량": 7},
            {"품번": "P008", "수량": 11},
            {"품번": "P009", "수량": 6}
        ]
    },
]

# 테이블 생성 함수 (예전 create_table 스타일)
def create_table(mc_name, data):
    st.markdown(f"### 모델: {mc_name}")
    df = pd.DataFrame(data)
    st.dataframe(df, use_container_width=True)

# 자동/수동 새로고침 컨트롤
if "last_refresh_time" not in st.session_state:
    st.session_state.last_refresh_time = time.time()

need_refresh = False
if time.time() - st.session_state.last_refresh_time > 600:
    need_refresh = True
    st.session_state.last_refresh_time = time.time()

if st.button("수동 새로고침"):
    need_refresh = True
    st.session_state.last_refresh_time = time.time()

# 본 처리
if multi_rows:
    for row in multi_rows:
        mc_name = row["MC"]
        data = row["데이터"]
        
        # 각 MC마다 테이블 생성
        create_table(mc_name, data)
        
        # 갱신 표시
        if need_refresh:
            st.success(f"{mc_name} 데이터 갱신됨 ({time.strftime('%H:%M:%S')})")
요약
multi_rows가 여러 줄이니까 for row in multi_rows:로 반복

MC1, MC2, ... 식으로 각 줄마다 create_table() 호출

스타일은 예전처럼 create_table() 안에서 자유롭게 꾸미면 됨

if row: → for row in rows: 로 구조 확장됨
