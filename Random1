입력값에 공백이 포함된 경우도 처리할 수 있도록 수정된 코드는 아래와 같습니다.

python
코드 복사
import tkinter as tk
from tkinter import messagebox

def sync_inputs():
    """입력값 동기화 함수"""
    try:
        # 낱개 입력값을 6개 리스트로 생성
        inputs = [
            entry_ax.get(), entry_ay.get(), entry_az.get(),
            entry_mx.get(), entry_my.get(), entry_mz.get()
        ]

        # 쉼표로 구분된 문자열 업데이트
        single_line.set(", ".join(inputs))

        # 3개씩 분리된 문자열 업데이트
        group1.set(", ".join(inputs[:3]))
        group2.set(", ".join(inputs[3:]))
    except Exception as e:
        messagebox.showerror("오류", f"동기화 중 문제가 발생했습니다: {e}")

def calculate_result():
    """결과 계산 함수"""
    try:
        # 한 줄 입력값에서 처리
        values = single_line.get().split(',')
        
        # 공백 제거 및 숫자로 변환
        numbers = [float(value.strip()) for value in values]

        # 값이 정확히 6개인지 확인
        if len(numbers) != 6:
            raise ValueError("입력값은 쉼표로 구분된 6개의 숫자여야 합니다.")

        # 결과 계산 (예: 모든 값의 합계)
        result = sum(numbers)

        # 결과 출력
        result_label.config(text=f"결과: {result:.2f}")

        # 입력값 동기화
        entry_ax.delete(0, tk.END)
        entry_ay.delete(0, tk.END)
        entry_az.delete(0, tk.END)
        entry_mx.delete(0, tk.END)
        entry_my.delete(0, tk.END)
        entry_mz.delete(0, tk.END)

        entry_ax.insert(0, str(numbers[0]))
        entry_ay.insert(0, str(numbers[1]))
        entry_az.insert(0, str(numbers[2]))
        entry_mx.insert(0, str(numbers[3]))
        entry_my.insert(0, str(numbers[4]))
        entry_mz.insert(0, str(numbers[5]))

        sync_inputs()  # 계산 후 동기화
    except ValueError as e:
        messagebox.showerror("입력 오류", f"오류: {e}")

# GUI 초기화
root = tk.Tk()
root.title("가속도 및 지자기 계산기")
root.geometry("600x400")  # 창 크기 조정

# 낱개 입력
tk.Label(root, text="낱개 입력").grid(row=0, column=0, columnspan=6, pady=5)

entry_ax = tk.Entry(root, width=10)
entry_ax.grid(row=1, column=0, padx=5, pady=5)
entry_ax.bind("<KeyRelease>", lambda _: sync_inputs())

entry_ay = tk.Entry(root, width=10)
entry_ay.grid(row=1, column=1, padx=5, pady=5)
entry_ay.bind("<KeyRelease>", lambda _: sync_inputs())

entry_az = tk.Entry(root, width=10)
entry_az.grid(row=1, column=2, padx=5, pady=5)
entry_az.bind("<KeyRelease>", lambda _: sync_inputs())

entry_mx = tk.Entry(root, width=10)
entry_mx.grid(row=1, column=3, padx=5, pady=5)
entry_mx.bind("<KeyRelease>", lambda _: sync_inputs())

entry_my = tk.Entry(root, width=10)
entry_my.grid(row=1, column=4, padx=5, pady=5)
entry_my.bind("<KeyRelease>", lambda _: sync_inputs())

entry_mz = tk.Entry(root, width=10)
entry_mz.grid(row=1, column=5, padx=5, pady=5)
entry_mz.bind("<KeyRelease>", lambda _: sync_inputs())

# 3개씩 분리된 입력
tk.Label(root, text="3개씩 분리 입력").grid(row=2, column=0, columnspan=6, pady=10)
group1 = tk.StringVar()
group2 = tk.StringVar()

entry_group1 = tk.Entry(root, textvariable=group1, width=50)
entry_group1.grid(row=3, column=0, columnspan=6, padx=5, pady=5)
entry_group1.bind("<KeyRelease>", lambda _: sync_inputs())

entry_group2 = tk.Entry(root, textvariable=group2, width=50)
entry_group2.grid(row=4, column=0, columnspan=6, padx=5, pady=5)
entry_group2.bind("<KeyRelease>", lambda _: sync_inputs())

# 한 줄 입력
tk.Label(root, text="한 줄 입력").grid(row=5, column=0, columnspan=6, pady=10)
single_line = tk.StringVar()
entry_single = tk.Entry(root, textvariable=single_line, width=50)
entry_single.grid(row=6, column=0, columnspan=6, padx=5, pady=5)
entry_single.bind("<KeyRelease>", lambda _: sync_inputs())

# 계산 버튼
calculate_button = tk.Button(root, text="계산", command=calculate_result)
calculate_button.grid(row=7, column=0, columnspan=6, pady=10)

# 결과 출력
result_label = tk.Label(root, text="결과: 없음", font=("Arial", 14))
result_label.grid(row=8, column=0, columnspan=6, pady=10)

# GUI 실행
root.mainloop()
주요 수정 사항
공백 제거 (strip())

입력값의 앞뒤 공백을 제거하기 위해 value.strip()을 추가했습니다.