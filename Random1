using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ProViewerFileProcessor
{
    public partial class Form1 : Form
    {
        private System.Windows.Forms.Button btnProcessFiles;
        private System.Windows.Forms.RichTextBox rtbLog;

        public Form1()
        {
            InitializeComponent();
        }

        /// <summary>
        /// '파일 처리 시작' 버튼 클릭 시 실행되는 이벤트 핸들러
        /// </summary>
        private async void btnProcessFiles_Click(object sender, EventArgs e)
        {
            string dataFolderPath = @"C:\proviewer\Data";

            btnProcessFiles.Enabled = false;
            rtbLog.Clear();
            Log("파일 처리 프로세스를 시작합니다...");
            Log($"대상 기본 폴더: {dataFolderPath}");
            Log("------------------------------------");

            try
            {
                await Task.Run(() => ProcessAllMachineFolders(dataFolderPath));
                Log("------------------------------------");
                Log("✅ 모든 작업이 성공적으로 완료되었습니다.");
            }
            catch (Exception ex)
            {
                Log($"❌ 처리 중 오류가 발생했습니다: {ex.Message}");
                Log($"Stack Trace: {ex.StackTrace}");
            }
            finally
            {
                btnProcessFiles.Enabled = true;
            }
        }

        /// <summary>
        /// 모든 Machine 폴더를 순회하며 처리를 시작하는 메인 메서드
        /// </summary>
        /// <param name="dataFolderPath">데이터 최상위 폴더 경로 (C:\proviewer\Data)</param>
        private void ProcessAllMachineFolders(string dataFolderPath)
        {
            string[] machineNames = {
                "Machine1", "Machine2", "Machine3", "Machine4",
                "Machine5", "Machine6", "Machine7", "Machine8"
            };

            foreach (var machineName in machineNames)
            {
                string stage1Path = Path.Combine(dataFolderPath, machineName, "Stage1");
                Log($"\n▶ {machineName} 폴더 처리 시작...");

                if (!Directory.Exists(stage1Path))
                {
                    Log($"  경고: '{stage1Path}' 폴더를 찾을 수 없습니다. 건너뜁니다.");
                    continue;
                }
                
                Directory.CreateDirectory(Path.Combine(stage1Path, "Lane1"));
                Directory.CreateDirectory(Path.Combine(stage1Path, "Lane2"));

                List<string> proFiles = Directory.GetFiles(stage1Path, "*.PRO", SearchOption.TopDirectoryOnly)
                                                 .OrderBy(f => Path.GetFileName(f))
                                                 .ToList();

                if (proFiles.Count == 0)
                {
                    Log("  처리할 .PRO 파일이 없습니다.");
                    continue;
                }

                // 머신 이름에 따라 다른 처리 로직 호출
                switch (machineName)
                {
                    case "Machine4":
                        ProcessMachine4_New(stage1Path, proFiles);
                        break;
                    case "Machine5":
                        ProcessMachine5_New(stage1Path, proFiles);
                        break;
                    default: // Machine1, 2, 3, 6, 7, 8
                        ProcessGeneralMachines(stage1Path, proFiles);
                        break;
                }
            }
        }

        /// <summary>
        /// Machine 1, 2, 3, 6, 7, 8 처리 로직
        /// </summary>
        private void ProcessGeneralMachines(string stage1Path, List<string> proFiles)
        {
            foreach (var proFilePath in proFiles)
            {
                try
                {
                    var fileContent = new List<string>(File.ReadAllLines(proFilePath, Encoding.Default));
                    int targetLane = 0;

                    bool inTakeUpUnitSection = false;
                    foreach (var line in fileContent)
                    {
                        if (line.Trim().Equals("[TakeUp.Unit]", StringComparison.OrdinalIgnoreCase))
                        {
                            inTakeUpUnitSection = true;
                            continue;
                        }

                        if (inTakeUpUnitSection)
                        {
                            if (string.IsNullOrWhiteSpace(line)) break;
                            if (Regex.IsMatch(line.Trim(), @"^[12],"))
                            {
                                targetLane = int.Parse(line.Trim().Substring(0, 1));
                                break;
                            }
                        }
                    }

                    if (targetLane != 0)
                    {
                        ModifyAndMoveProFile(proFilePath, stage1Path, fileContent, targetLane);
                    }
                    else
                    {
                        Log($"  파일 '{Path.GetFileName(proFilePath)}': 레인 결정 규칙을 찾지 못해 건너뜁니다.");
                    }
                }
                catch (Exception ex)
                {
                    Log($"  파일 '{Path.GetFileName(proFilePath)}' 처리 중 오류: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// Machine 4 처리 로직 (수정됨: 무조건 Lane 2로 처리)
        /// </summary>
        private void ProcessMachine4_New(string stage1Path, List<string> proFiles)
        {
            foreach (var proFilePath in proFiles)
            {
                try
                {
                    var fileContent = new List<string>(File.ReadAllLines(proFilePath, Encoding.Default));
                    int targetLane = 2; // Machine4는 항상 Lane 2로 고정
                    ModifyAndMoveProFile(proFilePath, stage1Path, fileContent, targetLane);
                }
                catch (Exception ex)
                {
                    Log($"  파일 '{Path.GetFileName(proFilePath)}' 처리 중 오류: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// Machine 5 처리 로직 (수정됨: 이전 파일 값과 비교하여 Lane 결정)
        /// </summary>
        private void ProcessMachine5_New(string stage1Path, List<string> proFiles)
        {
            long previousTakeUpValue = 0;
            bool isFirstFile = true;

            foreach (var proFilePath in proFiles)
            {
                try
                {
                    var fileContent = new List<string>(File.ReadAllLines(proFilePath, Encoding.Default));
                    long currentTakeUpValue = 0;
                    int targetLane = 1;

                    bool inTakeUpUnitSection = false;
                    foreach (var line in fileContent)
                    {
                        if (line.Trim().Equals("[TakeUp.Unit]", StringComparison.OrdinalIgnoreCase))
                        {
                            inTakeUpUnitSection = true;
                            continue;
                        }

                        if (inTakeUpUnitSection)
                        {
                            if (string.IsNullOrWhiteSpace(line)) break;
                            if (line.Trim().StartsWith("2,20006"))
                            {
                                string lastValueStr = line.Trim().Split(',').LastOrDefault();
                                long.TryParse(lastValueStr, out currentTakeUpValue);
                                break;
                            }
                        }
                    }

                    if (isFirstFile)
                    {
                        targetLane = 1;
                        isFirstFile = false;
                    }
                    else
                    {
                        if (currentTakeUpValue > previousTakeUpValue)
                        {
                            targetLane = 2;
                        }
                    }
                    
                    ModifyAndMoveProFile(proFilePath, stage1Path, fileContent, targetLane);
                    previousTakeUpValue = currentTakeUpValue;
                }
                catch (Exception ex)
                {
                    Log($"  파일 '{Path.GetFileName(proFilePath)}' 처리 중 오류: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// PRO 파일의 Lane= 값을 수정하고 올바른 Lane 폴더로 이동시키는 공통 메서드
        /// </summary>
        private void ModifyAndMoveProFile(string proFilePath, string stage1Path, List<string> fileContent, int targetLane)
        {
            int laneLineIndex = fileContent.FindIndex(l => l.Trim().StartsWith("Lane=", StringComparison.OrdinalIgnoreCase));
            if (laneLineIndex != -1)
            {
                fileContent[laneLineIndex] = $"Lane={targetLane}";
                File.WriteAllLines(proFilePath, fileContent, Encoding.Default);

                string destFileName = Path.GetFileName(proFilePath);
                string destFolderPath = Path.Combine(stage1Path, $"Lane{targetLane}");
                string destFilePath = Path.Combine(destFolderPath, destFileName);

                if (File.Exists(destFilePath))
                {
                    File.Delete(destFilePath);
                }
                File.Move(proFilePath, destFilePath);

                Log($"  파일 '{destFileName}' -> Lane={targetLane}으로 수정 후 'Lane{targetLane}' 폴더로 이동 완료.");
            }
            else
            {
                Log($"  파일 '{Path.GetFileName(proFilePath)}'에서 'Lane=' 라인을 찾을 수 없습니다.");
            }
        }

        /// <summary>
        /// RichTextBox에 스레드-안전하게 로그를 기록하는 메서드
        /// </summary>
        private void Log(string message)
        {
            if (rtbLog.InvokeRequired)
            {
                rtbLog.Invoke(new Action<string>(Log), message);
            }
            else
            {
                rtbLog.AppendText(message + Environment.NewLine);
                rtbLog.ScrollToCaret();
            }
        }

        #region Windows Form Designer generated code
        private void InitializeComponent()
        {
            this.btnProcessFiles = new System.Windows.Forms.Button();
            this.rtbLog = new System.Windows.Forms.RichTextBox();
            this.SuspendLayout();
            // 
            // btnProcessFiles
            // 
            this.btnProcessFiles.Dock = System.Windows.Forms.DockStyle.Top;
            this.btnProcessFiles.Font = new System.Drawing.Font("맑은 고딕", 12F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(129)));
            this.btnProcessFiles.Location = new System.Drawing.Point(0, 0);
            this.btnProcessFiles.Name = "btnProcessFiles";
            this.btnProcessFiles.Size = new System.Drawing.Size(800, 50);
            this.btnProcessFiles.TabIndex = 0;
            this.btnProcessFiles.Text = "파일 처리 시작";
            this.btnProcessFiles.UseVisualStyleBackColor = true;
            this.btnProcessFiles.Click += new System.EventHandler(this.btnProcessFiles_Click);
            // 
            // rtbLog
            // 
            this.rtbLog.BackColor = System.Drawing.SystemColors.Window;
            this.rtbLog.Dock = System.Windows.Forms.DockStyle.Fill;
            this.rtbLog.Location = new System.Drawing.Point(0, 50);
            this.rtbLog.Name = "rtbLog";
            this.rtbLog.ReadOnly = true;
            this.rtbLog.Size = new System.Drawing.Size(800, 400);
            this.rtbLog.TabIndex = 1;
            this.rtbLog.Text = "";
            // 
            // Form1
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 12F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Controls.Add(this.rtbLog);
            this.Controls.Add(this.btnProcessFiles);
            this.Name = "Form1";
            this.Text = "PRO 파일 분류기";
            this.ResumeLayout(false);
        }
        #endregion