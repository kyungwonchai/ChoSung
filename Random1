정말 죄송합니다! 이전 답변에서 app/routes_admin.py 파일의 일부 코드를 생략하고 신규 기능 위주로 드리면서 혼란을 드렸습니다. 사용자님의 지적대로 전체 코드를 누락 없이 드렸어야 했는데, 제 불찰입니다.

요청하신 대로, pymssql을 직접 사용하는 방식으로 완전히 수정되었고, 모든 관리 기능(대상 PC, 허용 사용자 IP, 관리자 IP, 달력 예외)을 포함하며, 설명 주석을 최소화한 app/routes_admin.py 파일의 최종 전체 코드를 지금 바로 제공해 드리겠습니다.

이 코드는 app/db_utils.py의 get_db_connection() 함수를 사용하여 데이터베이스와 통신합니다.

최종 수정: app/routes_admin.py (전체 코드, pymssql 직접 사용, 주석 최소화)
Python

# scontrol_flask_web/app/routes_admin.py
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app, g
from app.db_utils import get_db_connection
from app.forms import TargetPCForm, AllowedUserIPForm, AdminIPForm, WorkCalendarExceptionForm
from app.auth import ip_auth_required, get_current_user_role
import math
import pymssql # pymssql.IntegrityError 등 예외 처리용
from datetime import datetime as dt_datetime

admin_bp = Blueprint('admin', __name__)

# === 유틸리티 함수: 페이지네이션 정보 생성 ===
def _get_pagination_data(query_count, query_data, page, per_page, params_count=None, params_data=None):
    total_items = 0
    items_on_page = []
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute(query_count, params_count or ())
            count_result = cursor.fetchone()
            if count_result:
                total_items = count_result['total']
            
            if total_items > 0:
                offset = (page - 1) * per_page
                final_params_data = (params_data or ()) + (offset, per_page)
                cursor.execute(query_data, final_params_data)
                items_on_page = cursor.fetchall()
            else: # total_items가 0이면 데이터 조회 불필요
                items_on_page = []

    except Exception as e:
        current_app.logger.error(f"페이지네이션 데이터 조회 중 오류: {e}", exc_info=True)
        flash("데이터를 불러오는 중 오류가 발생했습니다.", "error")
        # 오류 발생 시 빈 목록 및 초기 페이지 정보 반환
        return {'page': 1, 'per_page': per_page, 'total_items': 0, 'total_pages': 1, 
                'items': [], 'has_prev': False, 'has_next': False,
                'prev_num': 1, 'next_num': 1}

    total_pages = math.ceil(total_items / per_page) if total_items > 0 else 1
    return {
        'page': page, 'per_page': per_page, 'total_items': total_items, 
        'total_pages': total_pages, 'items': items_on_page,
        'has_prev': page > 1, 'has_next': page < total_pages,
        'prev_num': page - 1, 'next_num': page + 1
    }

# === 1. 대상 PC 관리 ===
@admin_bp.route('/pcs')
@ip_auth_required('admin')
def manage_target_pcs():
    page = request.args.get('page', 1, type=int); per_page = 10
    query_count = "SELECT COUNT(*) AS total FROM dbo.target_pcs"
    query_data = "SELECT id, pc_name, address1, address2, description, created_at, last_modified FROM dbo.target_pcs ORDER BY pc_name OFFSET %s ROWS FETCH NEXT %s ROWS ONLY"
    pagination = _get_pagination_data(query_count, query_data, page, per_page)
    return render_template('admin/manage_target_pcs.html', pcs=pagination['items'], pagination=pagination, title="대상 PC 관리")

@admin_bp.route('/pcs/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_target_pc():
    form = TargetPCForm()
    if form.validate_on_submit():
        addr2 = form.address2.data if form.address2.data and form.address2.data.strip() else None
        conn = None
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "INSERT INTO dbo.target_pcs (pc_name, address1, address2, description, created_at, last_modified) VALUES (%s, %s, %s, %s, GETDATE(), GETDATE())"
                cursor.execute(sql, (form.pc_name.data, form.address1.data, addr2, form.description.data))
            conn.commit()
            flash(f"PC '{form.pc_name.data}' 추가 성공.", 'success')
            return redirect(url_for('admin.manage_target_pcs'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"PC 이름 '{form.pc_name.data}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Add TargetPC IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"PC 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add TargetPC Error: {e}", exc_info=True)
    return render_template('admin/edit_target_pc.html', form=form, title="새 PC 추가")

@admin_bp.route('/pcs/edit/<int:pc_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_target_pc(pc_id):
    conn = None; pc_data = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, pc_name, address1, address2, description FROM dbo.target_pcs WHERE id = %d", (pc_id,))
            pc_data = cursor.fetchone()
    except Exception as e:
        flash("PC 정보 로드 오류.", "error"); current_app.logger.error(f"Edit TargetPC (GET) ID {pc_id} Error: {e}", exc_info=True); return redirect(url_for('admin.manage_target_pcs'))
    if not pc_data: flash(f"PC ID {pc_id} 없음.", "error"); return redirect(url_for('admin.manage_target_pcs'))

    form = TargetPCForm(data=pc_data) if request.method == 'GET' else TargetPCForm()
    if form.validate_on_submit():
        addr2 = form.address2.data if form.address2.data and form.address2.data.strip() else None
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "UPDATE dbo.target_pcs SET pc_name = %s, address1 = %s, address2 = %s, description = %s WHERE id = %d"
                cursor.execute(sql, (form.pc_name.data, form.address1.data, addr2, form.description.data, pc_id))
            conn.commit()
            flash(f"PC '{form.pc_name.data}' 수정 성공.", 'success')
            return redirect(url_for('admin.manage_target_pcs'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"PC 이름 '{form.pc_name.data}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Edit TargetPC ID {pc_id} IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"PC 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit TargetPC ID {pc_id} Error: {e}", exc_info=True)
    return render_template('admin/edit_target_pc.html', form=form, title=f"PC 정보 수정: {pc_data['pc_name']}", pc=pc_data)

@admin_bp.route('/pcs/delete/<int:pc_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_target_pc(pc_id):
    conn = None; pc_name = f"ID {pc_id}"
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT pc_name FROM dbo.target_pcs WHERE id = %d", (pc_id,))
            data = cursor.fetchone(); 
            if data: pc_name = data['pc_name']
            cursor.execute("DELETE FROM dbo.target_pcs WHERE id = %d", (pc_id,))
        conn.commit()
        flash(f"PC '{pc_name}' 삭제 성공.", 'success')
    except Exception as e:
        if conn: conn.rollback()
        flash(f"PC 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete TargetPC ID {pc_id} Error: {e}", exc_info=True)
    return redirect(url_for('admin.manage_target_pcs'))

# === 2. 허용된 사용자 IP 관리 ===
@admin_bp.route('/users')
@ip_auth_required('admin')
def manage_user_ips():
    page = request.args.get('page', 1, type=int); per_page = 10
    query_count = "SELECT COUNT(*) AS total FROM dbo.allowed_user_ips"
    query_data = """
        SELECT u.id, u.ip_address, u.description, u.created_at, a.ip_address AS admin_ip 
        FROM dbo.allowed_user_ips u LEFT JOIN dbo.admin_ips a ON u.added_by_admin_id = a.id 
        ORDER BY u.ip_address OFFSET %s ROWS FETCH NEXT %s ROWS ONLY
    """
    pagination = _get_pagination_data(query_count, query_data, page, per_page)
    return render_template('admin/manage_user_ips.html', user_ips=pagination['items'], pagination=pagination, title="허용 사용자 IP 관리")

@admin_bp.route('/users/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_user_ip():
    form = AllowedUserIPForm()
    if form.validate_on_submit():
        admin_id = None; conn = None
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                cursor.execute("SELECT id FROM dbo.admin_ips WHERE ip_address = %s", (g.user_ip,))
                admin_rec = cursor.fetchone(); 
                if admin_rec: admin_id = admin_rec['id']
                sql = "INSERT INTO dbo.allowed_user_ips (ip_address, description, added_by_admin_id, created_at) VALUES (%s, %s, %s, GETDATE())"
                cursor.execute(sql, (form.ip_address.data, form.description.data, admin_id))
            conn.commit()
            flash(f"사용자 IP '{form.ip_address.data}' 추가 성공.", 'success')
            return redirect(url_for('admin.manage_user_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"IP 주소 '{form.ip_address.data}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Add AllowedUserIP IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"사용자 IP 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add AllowedUserIP Error: {e}", exc_info=True)
    return render_template('admin/edit_user_ip.html', form=form, title="새 사용자 IP 추가")

@admin_bp.route('/users/edit/<int:user_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_user_ip(user_ip_id):
    conn = None; user_ip_data = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, ip_address, description, added_by_admin_id FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,))
            user_ip_data = cursor.fetchone()
    except Exception as e:
        flash("사용자 IP 정보 로드 오류.", "error"); current_app.logger.error(f"Edit AllowedUserIP (GET) ID {user_ip_id} Error: {e}", exc_info=True); return redirect(url_for('admin.manage_user_ips'))
    if not user_ip_data: flash(f"사용자 IP ID {user_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_user_ips'))
    
    form = AllowedUserIPForm(data=user_ip_data) if request.method == 'GET' else AllowedUserIPForm()
    if form.validate_on_submit():
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "UPDATE dbo.allowed_user_ips SET ip_address = %s, description = %s WHERE id = %d"
                cursor.execute(sql, (form.ip_address.data, form.description.data, user_ip_id))
            conn.commit()
            flash(f"사용자 IP '{form.ip_address.data}' 수정 성공.", 'success')
            return redirect(url_for('admin.manage_user_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"IP 주소 '{form.ip_address.data}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Edit AllowedUserIP ID {user_ip_id} IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"사용자 IP 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit AllowedUserIP ID {user_ip_id} Error: {e}", exc_info=True)
    return render_template('admin/edit_user_ip.html', form=form, title=f"사용자 IP 수정: {user_ip_data['ip_address']}", user_ip_obj=user_ip_data)

@admin_bp.route('/users/delete/<int:user_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_user_ip(user_ip_id):
    conn = None; ip_addr = f"ID {user_ip_id}"
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT ip_address FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,))
            data = cursor.fetchone(); 
            if data: ip_addr = data['ip_address']
            cursor.execute("DELETE FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,))
        conn.commit()
        flash(f"사용자 IP '{ip_addr}' 삭제 성공.", 'success')
    except Exception as e:
        if conn: conn.rollback()
        flash(f"사용자 IP 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete AllowedUserIP ID {user_ip_id} Error: {e}", exc_info=True)
    return redirect(url_for('admin.manage_user_ips'))

# === 3. 관리자 IP 관리 ===
@admin_bp.route('/admins')
@ip_auth_required('admin')
def manage_admin_ips():
    page = request.args.get('page', 1, type=int); per_page = 10
    query_count = "SELECT COUNT(*) AS total FROM dbo.admin_ips"
    query_data = "SELECT id, ip_address, description, created_at FROM dbo.admin_ips ORDER BY ip_address OFFSET %s ROWS FETCH NEXT %s ROWS ONLY"
    pagination = _get_pagination_data(query_count, query_data, page, per_page)
    return render_template('admin/manage_admin_ips.html', admin_ips=pagination['items'], pagination=pagination, title="관리자 IP 관리")

@admin_bp.route('/admins/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_admin_ip():
    form = AdminIPForm()
    if form.validate_on_submit():
        conn = None
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "INSERT INTO dbo.admin_ips (ip_address, description, created_at) VALUES (%s, %s, GETDATE())"
                cursor.execute(sql, (form.ip_address.data, form.description.data))
            conn.commit()
            flash(f"관리자 IP '{form.ip_address.data}' 추가 성공.", 'success')
            return redirect(url_for('admin.manage_admin_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"IP 주소 '{form.ip_address.data}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Add AdminIP IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"관리자 IP 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add AdminIP Error: {e}", exc_info=True)
    return render_template('admin/edit_admin_ip.html', form=form, title="새 관리자 IP 추가")

@admin_bp.route('/admins/edit/<int:admin_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_admin_ip(admin_ip_id):
    conn = None; admin_ip_data = None; original_ip = ""
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT id, ip_address, description FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,))
            admin_ip_data = cursor.fetchone(); 
            if admin_ip_data: original_ip = admin_ip_data['ip_address']
    except Exception as e:
        flash("관리자 IP 정보 로드 오류.", "error"); current_app.logger.error(f"Edit AdminIP (GET) ID {admin_ip_id} Error: {e}", exc_info=True); return redirect(url_for('admin.manage_admin_ips'))
    if not admin_ip_data: flash(f"관리자 IP ID {admin_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_admin_ips'))

    form = AdminIPForm(data=admin_ip_data) if request.method == 'GET' else AdminIPForm()
    if form.validate_on_submit():
        new_ip = form.ip_address.data
        if original_ip != new_ip:
            if original_ip == g.user_ip:
                flash("자신의 현재 접속 IP는 변경할 수 없습니다.", 'error')
                return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
            try: # IP 중복 확인 (자기 자신 제외)
                if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
                with conn.cursor() as cursor:
                    cursor.execute("SELECT id FROM dbo.admin_ips WHERE ip_address = %s AND id != %d", (new_ip, admin_ip_id))
                    if cursor.fetchone(): flash(f"IP '{new_ip}'는 이미 다른 관리자 항목에 있습니다.", 'error'); return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
            except Exception as e: flash(f"IP 중복 확인 중 오류: {e}", "error"); return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
        
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor:
                sql = "UPDATE dbo.admin_ips SET ip_address = %s, description = %s WHERE id = %d"
                cursor.execute(sql, (new_ip, form.description.data, admin_ip_id))
            conn.commit()
            flash(f"관리자 IP '{new_ip}' 수정 성공.", 'success')
            return redirect(url_for('admin.manage_admin_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback()
            msg = f"IP 주소 '{new_ip}'이(가) 이미 존재합니다." if "UNIQUE KEY constraint" in str(ie) or "duplicate key" in str(ie) else f"DB 제약조건 위반: {str(ie)[:100]}"
            flash(msg, 'error'); current_app.logger.error(f"Edit AdminIP ID {admin_ip_id} IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback()
            flash(f"관리자 IP 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit AdminIP ID {admin_ip_id} Error: {e}", exc_info=True)
    return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)

@admin_bp.route('/admins/delete/<int:admin_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_admin_ip(admin_ip_id):
    conn = None; ip_addr_deleted = f"ID {admin_ip_id}"; total_admins = 0
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT ip_address FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,))
            admin_ip_data = cursor.fetchone()
            if not admin_ip_data: flash(f"삭제할 관리자 IP ID {admin_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_admin_ips'))
            ip_addr_deleted = admin_ip_data['ip_address']
            if ip_addr_deleted == g.user_ip: flash("자신의 현재 접속 IP는 삭제할 수 없습니다.", 'error'); return redirect(url_for('admin.manage_admin_ips'))
            cursor.execute("SELECT COUNT(*) AS total FROM dbo.admin_ips"); total_admins = cursor.fetchone()['total']
            if total_admins <= 1: flash("최소 1개의 관리자 IP는 남아 있어야 합니다.", 'error'); return redirect(url_for('admin.manage_admin_ips'))
            # AllowedUserIP.added_by_admin_id 외래키 ON DELETE SET NULL 제약조건이 DB에 설정되어 있어야 함
            cursor.execute("DELETE FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,))
        conn.commit()
        flash(f"관리자 IP '{ip_addr_deleted}' 삭제 성공.", 'success')
    except Exception as e:
        if conn: conn.rollback()
        flash(f"관리자 IP 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete AdminIP ID {admin_ip_id} Error: {e}", exc_info=True)
    return redirect(url_for('admin.manage_admin_ips'))

# === 4. 근무일/비근무일 예외 관리 ===
@admin_bp.route('/calendar_exceptions', methods=['GET', 'POST'])
@ip_auth_required('admin')
def manage_calendar_exceptions():
    form = WorkCalendarExceptionForm()
    conn = None
    if form.validate_on_submit():
        date_val = form.exception_date.data; is_op_val = bool(int(form.is_operational.data))
        desc_val = form.description.data if form.description.data and form.description.data.strip() else None
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                cursor.execute("SELECT 1 FROM dbo.work_calendar_exceptions WHERE exception_date = %s", (date_val.strftime('%Y-%m-%d'),))
                if cursor.fetchone(): flash(f"날짜 {date_val.strftime('%Y-%m-%d')} 예외 이미 존재.", 'error')
                else:
                    sql = "INSERT INTO dbo.work_calendar_exceptions (exception_date, is_operational, description, created_at, last_modified) VALUES (%s, %s, %s, GETDATE(), GETDATE())"
                    cursor.execute(sql, (date_val.strftime('%Y-%m-%d'), is_op_val, desc_val))
                    conn.commit(); flash(f"날짜 {date_val.strftime('%Y-%m-%d')} 예외 추가 성공.", 'success')
            return redirect(url_for('admin.manage_calendar_exceptions'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); flash(f"DB 오류 (중복): {str(ie)[:100]}", 'error'); current_app.logger.error(f"Add CalendarEx IntegrityError: {ie}", exc_info=True)
        except Exception as e:
            if conn: conn.rollback(); flash(f"예외 날짜 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add CalendarEx Error: {e}", exc_info=True)
    
    exceptions_list = []; query_data = "SELECT exception_date, is_operational, description, created_at, last_modified FROM dbo.work_calendar_exceptions ORDER BY exception_date DESC"
    try: # GET 요청 시 목록 조회
        conn = get_db_connection()
        with conn.cursor() as cursor: cursor.execute(query_data); exceptions_list = cursor.fetchall()
    except Exception as e: flash("예외 날짜 목록 로드 오류.", "error"); current_app.logger.error(f"Fetch CalendarEx Error: {e}", exc_info=True)
    return render_template('admin/manage_calendar_exceptions.html', title="근무일/비근무일 예외 관리", form=form, exceptions=exceptions_list)

@admin_bp.route('/calendar_exceptions/delete/<string:date_str>', methods=['POST'])
@ip_auth_required('admin')
def delete_calendar_exception(date_str):
    conn = None
    try:
        date_obj = dt_datetime.strptime(date_str, '%Y-%m-%d').date()
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = "DELETE FROM dbo.work_calendar_exceptions WHERE exception_date = %s"
            cursor.execute(sql, (date_obj.strftime('%Y-%m-%d'),)); rows_deleted = cursor.rowcount
        conn.commit()
        if rows_deleted > 0: flash(f"날짜 {date_str} 예외 삭제 성공.", 'success')
        else: flash(f"날짜 {date_str} 예외 없음.", 'warning')
    except ValueError: flash(f"잘못된 날짜 형식: {date_str}", 'error'); current_app.logger.warning(f"Invalid date format for delete: {date_str}")
    except Exception as e:
        if conn: conn.rollback(); flash(f"예외 날짜 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete CalendarEx for {date_str} Error: {e}", exc_info=True)
    return redirect(url_for('admin.manage_calendar_exceptions'))

app/routes_admin.py의 주요 특징:

_get_pagination_data 유틸리티 함수: 반복적인 페이지네이션 로직을 하나의 함수로 통합하여 코드 중복을 줄였습니다. 각 manage_... 라우트에서 이 함수를 호출하여 페이지네이션된 데이터를 가져옵니다.
모든 DB 작업 pymssql 직접 사용: SQLAlchemy ORM 관련 코드가 모두 제거되고, get_db_connection()을 통해 얻은 pymssql 연결과 커서를 사용하여 직접 SQL 쿼리를 실행합니다.
파라미터화된 쿼리: SQL 인젝션 방지를 위해 모든 SQL 쿼리는 cursor.execute(query, params) 형태로 파라미터를 전달합니다.
트랜잭션 관리: 데이터 변경(INSERT, UPDATE, DELETE) 후에는 conn.commit()을, 오류 발생 시에는 conn.rollback()을 호출합니다.
오류 처리: try-except 블록을 사용하여 DB 작업 중 발생할 수 있는 일반적인 예외 및 pymssql.IntegrityError (예: UNIQUE 제약조건 위반)를 처리하고 사용자에게 flash 메시지를 보여줍니다. 서버 로그에는 더 자세한 오류 정보가 기록됩니다.
폼 데이터 채우기 (Edit 시): GET 요청으로 수정 페이지에 접근할 때, DB에서 조회한 데이터를 WTForms의 data 인자로 전달하여 폼 필드를 미리 채웁니다 (form = FormClass(data=db_row_dict)).
안전장치: 관리자 IP 수정/삭제 시 자신의 현재 IP 또는 마지막 남은 관리자 IP를 변경/삭제하지 못하도록 하는 기본적인 안전장치가 포함되어 있습니다.
이 파일로 scontrol_flask_web/app/routes_admin.py를 완전히 교체하시면 됩니다.
이전에 제공된 HTML 템플릿 파일들 (manage_*.html, edit_*.html)은 이 수정된 라우트와 대부분 호환될 것입니다. (페이지네이션 부분은 pagination 객체의 속성 접근 방식이 약간 다를 수 있으므로, 템플릿에서 pagination.items, pagination.has_prev 등으로 접근하는지 확인 필요. 위 유틸리티 함수는 해당 키를 가진 딕셔너리를 반환합니다.)

이제 Flask 애플리케이션의 관리자 기능은 pymssql을 직접 사용하여 동작할 것입니다.
다음으로 사용자 제어판 기능(app/routes_user.py)을 pymssql로 마저 수정하고, 전체 시스템을 테스트해볼 수 있습니다.


소스





Deep Research
