C 통신 중 재시도 후에도 응답을 받지 못하는 경우, 안정적으로 COM 포트를 닫고 다시 여는 코드를 구현할 수 있습니다. 이를 위해 아래와 같이 CloseAndReopenComPortAsync 메서드를 작성하여 COM 포트를 닫고 다시 여는 과정을 처리하고, 여전히 문제가 있을 경우 오류로 처리하도록 구성했습니다.

코드 구현
csharp
코드 복사
private const int TimeoutDuration = 1000; // 타임아웃 시간 1초
private const int RetryCount = 3; // 재시도 횟수

public async Task<string> SendCommandWithRetryAndReconnectAsync(string command)
{
    int attempt = 0;
    string response = string.Empty;

    while (attempt < RetryCount)
    {
        attempt++;

        // 응답 수신 시도
        var responseTask = SendCommandAsync(command);
        if (await Task.WhenAny(responseTask, Task.Delay(TimeoutDuration)) == responseTask)
        {
            response = responseTask.Result;
            if (!string.IsNullOrEmpty(response))
            {
                LogT5($"응답 수신 성공: {response} (시도 횟수: {attempt})");
                return response;
            }
        }

        // 응답 미수신 시 재시도
        LogT5($"응답 미수신, 재시도 중... (시도 횟수: {attempt})");
        await Task.Delay(500); // 재시도 전 짧은 대기 시간 추가
    }

    // 재시도 실패 시 COM 포트 재설정 시도
    LogT5($"응답 수신 실패: {command}, 최종 시도 횟수: {RetryCount}. COM 포트 재설정 시도 중...");
    bool reconnectSuccess = await CloseAndReopenComPortAsync();
    if (!reconnectSuccess)
    {
        LogT5("COM 포트 재설정 실패. 오류 발생.");
        return "COM 포트 재설정 실패";
    }

    // 재연결 후 명령 재시도
    LogT5("COM 포트 재설정 성공. 명령 재시도 중...");
    return await SendCommandWithRetryAndReconnectAsync(command);
}

private async Task<bool> CloseAndReopenComPortAsync()
{
    try
    {
        // COM 포트 닫기 시도
        LogT5("COM 포트 닫는 중...");
        await Task.Run(() => comPort.Close());
        LogT5("COM 포트 닫힘 성공.");

        // COM 포트 열기 시도
        LogT5("COM 포트 여는 중...");
        await Task.Delay(1000); // 닫힌 후 안정적으로 열리도록 대기 시간 추가
        await Task.Run(() => comPort.Open());
        LogT5("COM 포트 열림 성공.");

        return true; // 성공적으로 재설정
    }
    catch (Exception ex)
    {
        LogT5($"COM 포트 재설정 중 오류 발생: {ex.Message}");
        return false; // 재설정 실패
    }
}

private async Task<string> SendCommandAsync(string command)
{
    try
    {
        LogT5($"명령 전송: {command}");
        await networkStream.WriteAsync(Encoding.ASCII.GetBytes(command)); // 명령 전송

        byte[] buffer = new byte[1024];
        int bytesRead = await networkStream.ReadAsync(buffer, 0, buffer.Length); // 응답 수신
        string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

        LogT5($"응답 수신: {response}");
        return response;
    }
    catch (Exception ex)
    {
        LogT5($"통신 오류: {ex.Message}");
        return string.Empty;
    }
}

private void LogT5(string message)
{
    msgvs.Instance.LogT5($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}");
}
설명
COM 포트 재설정 메서드: CloseAndReopenComPortAsync 메서드는 COM 포트를 닫고 다시 여는 과정을 처리합니다.

포트 닫기: 포트를 닫을 때 comPort.Close()를 호출하며, 안정적인 닫힘을 위해 비동기로 실행합니다.
포트 열기: comPort.Open()을 호출하여 포트를 다시 열며, 중간에 1초 정도 대기하여 포트가 완전히 닫힌 뒤 열릴 수 있도록 설정합니다.
오류가 발생할 경우 로그에 기록하고, 실패 여부를 반환합니다.
명령 재전송 및 포트 재설정:

SendCommandWithRetryAndReconnectAsync 메서드에서는 명령 전송 후 재시도 횟수를 넘겨도 응답을 받지 못하면 CloseAndReopenComPortAsync 메서드를 호출하여 포트를 재설정합니다.
만약 재설정에 성공하면 명령을 다시 시도하고, 실패하면 최종적으로 에러를 반환하도록 합니다.
로깅: 각 단계에서 포트의 상태와 명령 전송, 재시도 상태를 모두 로깅하여 통신 흐름을 추적하고, 문제 발생 시 진단에 활용할 수 있습니다.