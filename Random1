정해야 합니다. 또한, 검색 결과를 적절히 매핑하는 부분을 수정합니다.

1. XAML 코드
검색 및 로그 탭의 레이아웃을 분리한 상태로 유지합니다.

xml
코드 복사
<Window x:Class="ShiftReportApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:local="clr-namespace:ShiftReportApp"
        Title="Shift Report Manager" Height="600" Width="800">
    <Window.Resources>
        <Style TargetType="TextBox">
            <Setter Property="Foreground" Value="Black"/>
        </Style>
    </Window.Resources>
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="날짜" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="번호" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="주" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="3" Text="후" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" Text="야" Background="Black" Foreground="White" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="5" Text="공통인계사항" Background="Black" Foreground="White" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Date1" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" x:Name="Date2" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="0" x:Name="Date3" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" x:Name="Date4" Background="LightGray" Foreground="Black" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="1" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="2" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="3" Background="LightGray" Foreground="Black" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="1" Text="4" Background="LightGray" Foreground="Black" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="2" x:Name="DayShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="2" x:Name="DayShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="2" x:Name="DayShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="2" x:Name="DayShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="3" x:Name="EveningShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="3" x:Name="EveningShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="3" x:Name="EveningShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="3" x:Name="EveningShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="4" x:Name="NightShiftReport1" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="4" x:Name="NightShiftReport2" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="4" x:Name="NightShiftReport3" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="4" x:Name="NightShiftReport4" Background="White" Padding="10" LostFocus="TextBox_LostFocus"/>

                        <TextBox Grid.Row="1" Grid.Column="5" x:Name="CommonReport1" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="2" Grid.Column="5" x:Name="CommonReport2" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="3" Grid.Column="5" x:Name="CommonReport3" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                        <TextBox Grid.Row="4" Grid.Column="5" x:Name="CommonReport4" Background="LightSkyBlue" Padding="10" LostFocus="TextBox_LostFocus"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="10" Grid.Row="0">
                        <TextBlock Text="검색 시작일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="startDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <TextBlock Text="검색 종료일:" VerticalAlignment="Center" Margin="5"/>
                        <dxe:DateEdit Name="endDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <Button Content="조회" Click="OnSearchReports"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlSearch" AutoGenerateColumns="None" Grid.Row="1">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True" ShowSearchPanelMode="Always"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
            <TabItem Header="로그">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" Margin="10" Grid.Row="0">
                        <dxe:DateEdit Name="logDatePicker" Width="200" DisplayFormatString="yyyy-MM-dd"/>
                        <Button Content="조회" Click="OnLogSearch"/>
                    </StackPanel>
                    <dxg:GridControl Name="gridControlLog" AutoGenerateColumns="None" Grid.Row="1">
                        <dxg:GridControl.View>
                            <dxg:TableView ShowGroupPanel="False" AllowPerPixelScrolling="True"/>
                        </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                            <dxg:GridColumn Header="공통인계사항" FieldName="CommonReport"/>
                            <dxg:GridColumn Header="IP주소" FieldName="IPAddress"/>
                            <dxg:GridColumn Header="시간" FieldName="Timestamp"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
2. C# 코드 수정
C# 코드에서 검색 결과를 제대로 매핑하고, 검색 결과가 올바르게 나타나도록 수정합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Net;
using System.Windows;
using DevExpress.Xpf.Editors;
using DevExpress.Xpf.Grid;

namespace ShiftReportApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string_here";
        private DataTable searchTable;
        private DataTable logTable;

        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            LoadTodayReport(null, null);
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            DateTime today = DateTime.Now.Date;
            LoadSearchReports(yesterday.ToString("yyyy-MM-dd"), today.ToString("yyyy-MM-dd"));
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today.ToString("yyyy-MM-dd"));
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday.ToString("yyyy-MM-dd"));
        }

        private void LoadReport(string date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count == 0)
            {
                AddEmptyReportsForDate(date);
                using (SqlConnection conn = new SqlConnection(connectionString))
                {
                    SqlCommand cmd = new SqlCommand("GetReportsByDate", conn);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@Date", date);

                    SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                    adapter.Fill(dataTable);
                }
            }

            ClearReports();

            if (dataTable.Rows.Count > 0)
            {
                foreach (DataRow row in dataTable.Rows)
                {
                    int number = Convert.ToInt32(row["Number"]);
                    string shiftType = row["ShiftType"].ToString();

                    if (shiftType == "주")
                    {
                        ((TextBox)FindName($"DayShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "후")
                    {
                        ((TextBox)FindName($"EveningShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "야")
                    {
                        ((TextBox)FindName($"NightShiftReport{number}")).Text = row["Report"].ToString();
                    }
                    else if (shiftType == "공통")
                    {
                        ((TextBox)FindName($"CommonReport{number}")).Text = row["Report"].ToString();
                    }

                    ((TextBlock)FindName($"Date{number}")).Text = date;
                }
            }
        }

        private void AddEmptyReportsForDate(string date)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                for (int i = 1; i <= 4; i++)
                {
                    foreach (string shiftType in new[] { "주", "후", "야", "공통" })
                    {
                        SqlCommand cmd = new SqlCommand("SaveReport", conn);
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.AddWithValue("@Date", date);
                        cmd.Parameters.AddWithValue("@Number", i);
                        cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                        cmd.Parameters.AddWithValue("@Report", "");
                        cmd.Parameters.AddWithValue("@IPAddress", GetLocalIPAddress());
                        cmd.ExecuteNonQuery();
                    }
                }
            }
        }

        private void ClearReports()
        {
            for (int i = 1; i <= 4; i++)
            {
                ((TextBox)FindName($"DayShiftReport{i}")).Text = "";
                ((TextBox)FindName($"EveningShiftReport{i}")).Text = "";
                ((TextBox)FindName($"NightShiftReport{i}")).Text = "";
                ((TextBox)FindName($"CommonReport{i}")).Text = "";
            }
        }

        private void TextBox_LostFocus(object sender, RoutedEventArgs e)
        {
            TextBox textBox = sender as TextBox;
            string report = textBox.Text;
            string name = textBox.Name;
            string shiftType = "";
            int number = 0;

            if (name.StartsWith("DayShiftReport"))
            {
                shiftType = "주";
                number = int.Parse(name.Substring("DayShiftReport".Length));
            }
            else if (name.StartsWith("EveningShiftReport"))
            {
                shiftType = "후";
                number = int.Parse(name.Substring("EveningShiftReport".Length));
            }
            else if (name.StartsWith("NightShiftReport"))
            {
                shiftType = "야";
                number = int.Parse(name.Substring("NightShiftReport".Length));
            }
            else if (name.StartsWith("CommonReport"))
            {
                shiftType = "공통";
                number = int.Parse(name.Substring("CommonReport".Length));
            }

            string date = ((TextBlock)FindName($"Date{number}")).Text;
            string ipAddress = GetLocalIPAddress();
            SaveReport(date, number, shiftType, report, ipAddress);
        }

        private void SaveReport(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveReport", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);

                cmd.ExecuteNonQuery();

                // 로그 기록
                SaveLog(date, number, shiftType, report, ipAddress);
            }
        }

        private void SaveLog(string date, int number, string shiftType, string report, string ipAddress)
        {
            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SaveLog", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);
                cmd.Parameters.AddWithValue("@Number", number);
                cmd.Parameters.AddWithValue("@ShiftType", shiftType);
                cmd.Parameters.AddWithValue("@Report", report);
                cmd.Parameters.AddWithValue("@IPAddress", ipAddress);
                cmd.Parameters.AddWithValue("@Timestamp", DateTime.Now);

                cmd.ExecuteNonQuery();
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1";
            try
            {
                var host = Dns.GetHostEntry(Dns.GetHostName());
                foreach (var ip in host.AddressList)
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("IP 주소를 가져오는 중 오류가 발생했습니다: " + ex.Message);
            }
            return localIP;
        }

        private void OnSearchReports(object sender, RoutedEventArgs e)
        {
            DateTime? startDate = startDatePicker.DateTime;
            DateTime? endDate = endDatePicker.DateTime;

            if (startDate.HasValue && endDate.HasValue)
            {
                LoadSearchReports(startDate.Value.ToString("yyyy-MM-dd"), endDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadSearchReports(string startDate, string endDate)
        {
            searchTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("SELECT Date, Number, ShiftType, Report FROM ShiftReport WHERE Date BETWEEN @StartDate AND @EndDate ORDER BY Date", conn);
                cmd.Parameters.AddWithValue("@StartDate", startDate);
                cmd.Parameters.AddWithValue("@EndDate", endDate);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(searchTable);
            }

            // 검색 결과 테이블에 필요한 컬럼 추가
            searchTable.Columns.Add("DayShift");
            searchTable.Columns.Add("EveningShift");
            searchTable.Columns.Add("NightShift");
            searchTable.Columns.Add("CommonReport");

            foreach (DataRow row in searchTable.Rows)
            {
                string shiftType = row["ShiftType"].ToString();
                string report = row["Report"].ToString();

                if (shiftType == "주")
                {
                    row["DayShift"] = report;
                }
                else if (shiftType == "후")
                {
                    row["EveningShift"] = report;
                }
                else if (shiftType == "야")
                {
                    row["NightShift"] = report;
                }
                else if (shiftType == "공통")
                {
                    row["CommonReport"] = report;
                }
            }

            gridControlSearch.ItemsSource = searchTable.DefaultView;
        }

        private void OnLogSearch(object sender, RoutedEventArgs e)
        {
            DateTime? selectedDate = logDatePicker.DateTime;
            if (selectedDate.HasValue)
            {
                LoadLogReport(selectedDate.Value.ToString("yyyy-MM-dd"));
            }
        }

        private void LoadLogReport(string date)
        {
            logTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                SqlCommand cmd = new SqlCommand("GetLogByDate", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(logTable);
            }

            if (logTable.Rows.Count > 0)
            {
                gridControlLog.ItemsSource = logTable.DefaultView;
            }
            else
            {
                MessageBox.Show("선택한 날짜에 대한 로그가 없습니다.");
            }
        }
    }
}
이제 이 코드는 DevExpress GridControl을 사용하여 검색 결과가 올바르게 나타나도록 하며, CommonReport 등의 필드가 포함되도록 수정했습니다. 또한, 검색 및 로그 탭의 레이아웃을 분리하고, 검색 결과가 제대로 매핑되도록 했습니다. 추가적인 문제가 발생하면 알려주세