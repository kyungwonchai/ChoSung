C# WPF에서 프로그램 업데이트나 재실행에도 데이터를 저장하고 복원할 수 있는 방법은 여러 가지가 있습니다. 여기서는 간단한 방법으로 로컬 설정 저장(AppSettings 또는 Properties.Settings)과 로컬 파일 저장 방법을 설명하겠습니다. 변수 3개를 저장하고 꺼내 쓰는 방법을 단계별로 설명합니다.

1. AppSettings (Properties.Settings) 사용하기
장점:
WPF 프로젝트 내장 기능으로 간단히 사용할 수 있습니다.
데이터가 자동으로 저장됩니다.
구현 방법:
(1) Settings 파일 추가
Solution Explorer에서 프로젝트를 오른쪽 클릭 > "Properties" 선택.
Settings 탭을 클릭한 후, 이름, 유형, 범위, 기본값을 설정합니다.
이름: Variable1, Variable2, Variable3
유형: string (또는 필요에 따라 int, double 등)
범위: User
기본값: 원하는 초기값.
(2) 값 저장 및 읽기 코드 작성
csharp
코드 복사
// 값 저장하기
Properties.Settings.Default.Variable1 = "값1";
Properties.Settings.Default.Variable2 = "값2";
Properties.Settings.Default.Variable3 = "값3";
// 저장
Properties.Settings.Default.Save();
csharp
코드 복사
// 값 읽어오기
string variable1 = Properties.Settings.Default.Variable1;
string variable2 = Properties.Settings.Default.Variable2;
string variable3 = Properties.Settings.Default.Variable3;

// 값 확인 (디버그용)
Console.WriteLine($"Variable1: {variable1}, Variable2: {variable2}, Variable3: {variable3}");
(3) 프로그램 실행 후 확인
Properties.Settings.Default.Save()가 호출되면 값이 로컬에 저장됩니다.
저장된 위치:
Windows에서는 %LOCALAPPDATA%\[프로그램명]\[버전]\user.config.
2. 로컬 파일에 저장하기
장점:
저장 위치를 직접 제어할 수 있습니다.
파일 포맷(JSON, XML, INI 등)을 자유롭게 선택 가능.
구현 방법:
(1) JSON 파일에 저장
Newtonsoft.Json 라이브러리 사용하기

NuGet 패키지 관리자에서 Newtonsoft.Json 설치.
(2) 데이터 저장 및 읽기 클래스 작성
csharp
코드 복사
using System;
using System.IO;
using Newtonsoft.Json;

// 데이터 클래스 정의
public class AppData
{
    public string Variable1 { get; set; }
    public string Variable2 { get; set; }
    public string Variable3 { get; set; }
}

public class DataManager
{
    private static readonly string FilePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "MyApp", "data.json");

    // 데이터 저장
    public static void SaveData(AppData data)
    {
        string json = JsonConvert.SerializeObject(data, Formatting.Indented);
        Directory.CreateDirectory(Path.GetDirectoryName(FilePath)); // 디렉터리 생성
        File.WriteAllText(FilePath, json);
    }

    // 데이터 읽기
    public static AppData LoadData()
    {
        if (File.Exists(FilePath))
        {
            string json = File.ReadAllText(FilePath);
            return JsonConvert.DeserializeObject<AppData>(json);
        }
        // 파일 없을 경우 기본값 반환
        return new AppData
        {
            Variable1 = "기본값1",
            Variable2 = "기본값2",
            Variable3 = "기본값3"
        };
    }
}
(3) 저장 및 읽기 테스트
csharp
코드 복사
// 데이터 저장
var data = new AppData
{
    Variable1 = "값1",
    Variable2 = "값2",
    Variable3 = "값3"
};
DataManager.SaveData(data);

// 데이터 읽기
var loadedData = DataManager.LoadData();
Console.WriteLine($"Variable1: {loadedData.Variable1}, Variable2: {loadedData.Variable2}, Variable3: {loadedData.Variable3}");
(4) 저장된 위치 확인
%LOCALAPPDATA%\MyApp\data.json에 저장됩니다.
파일 내용은 JSON 형식으로 저장됩니다.
3. Registry (레지스트리) 사용하기
장점:
시스템에 내장된 기능.
작은 데이터를 저장하기에 적합.
코드 예제:
csharp
코드 복사
using Microsoft.Win32;

// 값 저장
RegistryKey key = Registry.CurrentUser.CreateSubKey(@"Software\MyApp");
key.SetValue("Variable1", "값1");
key.SetValue("Variable2", "값2");
key.SetValue("Variable3", "값3");
key.Close();

// 값 읽기
RegistryKey readKey = Registry.CurrentUser.OpenSubKey(@"Software\MyApp");
string variable1 = (string)readKey.GetValue("Variable1", "기본값1");
string variable2 = (string)readKey.GetValue("Variable2", "기본값2");
string variable3 = (string)readKey.GetValue("Variable3", "기본값3");
readKey.Close();

Console.WriteLine($"Variable1: {variable1}, Variable2: {variable2}, Variable3: {variable3}");
저장된 위치:
레지스트리 경로: HKEY_CURRENT_USER\Software\MyApp.
요약
간단한 설정 저장: Properties.Settings 사용.
파일 제어 및 저장: JSON 또는 INI 파일로 데이터 저장.