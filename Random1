래는 RibbonPageGroup 안에 들어가는 버튼 아이템에 대해 고유 키값을 지정할 수 있도록 수정된 코드입니다. 각 버튼은 고유 키값을 가지며, 아이콘 크기, 텍스트 등을 지정할 수 있습니다. 추가적으로 고유 키값을 기준으로 코드에서 버튼을 제어할 수 있습니다.

수정된 코드
csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        // 메뉴 구성 정보 저장할 딕셔너리
        private Dictionary<string, ButtonItemInfo> buttonItems;

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeButtonItems();
            PopulateRibbon();
        }

        // 버튼 아이템 정보를 초기화하는 함수
        private void InitializeButtonItems()
        {
            buttonItems = new Dictionary<string, ButtonItemInfo>
            {
                {
                    "btnNewFile",
                    new ButtonItemInfo
                    {
                        ButtonKey = "btnNewFile",  // 고유 키
                        ButtonText = "New",       // 버튼 텍스트
                        IconPath = "Icons/new.png",
                        RibbonPageName = "File",
                        RibbonGroupName = "File Operations",
                        IconSize = RibbonItemStyles.Large, // 아이콘 크기
                        ClickAction = () => { NewFileAction(); }
                    }
                },
                {
                    "btnOpenFile",
                    new ButtonItemInfo
                    {
                        ButtonKey = "btnOpenFile",  // 고유 키
                        ButtonText = "Open",
                        IconPath = "Icons/open.png",
                        RibbonPageName = "File",
                        RibbonGroupName = "File Operations",
                        IconSize = RibbonItemStyles.Large,
                        ClickAction = () => { OpenFileAction(); }
                    }
                },
                {
                    "btnCopy",
                    new ButtonItemInfo
                    {
                        ButtonKey = "btnCopy",  // 고유 키
                        ButtonText = "Copy",
                        IconPath = "Icons/copy.png",
                        RibbonPageName = "Edit",
                        RibbonGroupName = "Clipboard",
                        IconSize = RibbonItemStyles.Default,
                        ClickAction = () => { CopyAction(); }
                    }
                }
            };
        }

        // 리본 메뉴를 동적으로 생성하는 함수
        private void PopulateRibbon()
        {
            foreach (var item in buttonItems)
            {
                var info = item.Value;

                // RibbonPage가 존재하지 않으면 생성
                var ribbonPage = ribbonControl1.Pages.GetPageByName(info.RibbonPageName)
                                 ?? CreateRibbonPage(info.RibbonPageName);

                // RibbonPageGroup이 존재하지 않으면 생성
                var ribbonGroup = ribbonPage.Groups.GetGroupByName(info.RibbonGroupName)
                                  ?? CreateRibbonGroup(ribbonPage, info.RibbonGroupName);

                // BarButtonItem 생성
                var button = new BarButtonItem
                {
                    Name = info.ButtonKey,    // 고유 키값으로 Name 설정
                    Caption = info.ButtonText, // 버튼 텍스트
                    Glyph = LoadIcon(info.IconPath), // 아이콘 로드
                    RibbonStyle = info.IconSize // 아이콘 크기 및 스타일 설정
                };

                // 버튼 클릭 이벤트 연결
                button.ItemClick += (s, e) => info.ClickAction();

                // RibbonGroup에 버튼 추가
                ribbonGroup.ItemLinks.Add(button);
            }
        }

        // RibbonPage 생성 함수
        private RibbonPage CreateRibbonPage(string pageName)
        {
            var page = new RibbonPage(pageName) { Name = pageName };
            ribbonControl1.Pages.Add(page);
            return page;
        }

        // RibbonPageGroup 생성 함수
        private RibbonPageGroup CreateRibbonGroup(RibbonPage page, string groupName)
        {
            var group = new RibbonPageGroup(groupName) { Name = groupName };
            page.Groups.Add(group);
            return group;
        }

        // 아이콘 로드 함수
        private Image LoadIcon(string path)
        {
            return Image.FromFile(path);
        }

        // 각 버튼에 연결된 함수
        private void NewFileAction()
        {
            Console.WriteLine("New File Action Executed");
        }

        private void OpenFileAction()
        {
            Console.WriteLine("Open File Action Executed");
        }

        private void CopyAction()
        {
            Console.WriteLine("Copy Action Executed");
        }

        // 버튼 아이템 구성 정보 클래스
        private class ButtonItemInfo
        {
            public string ButtonKey { get; set; }       // 고유 키
            public string ButtonText { get; set; }      // 버튼 텍스트
            public string IconPath { get; set; }        // 아이콘 파일 경로
            public string RibbonPageName { get; set; }  // 리본 페이지 이름
            public string RibbonGroupName { get; set; } // 리본 그룹 이름
            public RibbonItemStyles IconSize { get; set; } // 아이콘 스타일/크기
            public Action ClickAction { get; set; }     // 클릭 액션
        }
    }

    // 확장 메서드: 페이지 이름으로 RibbonPage 검색
    public static class RibbonPageCollectionExtensions
    {
        public static RibbonPage GetPageByName(this RibbonPageCollection pages, string name)
        {
            foreach (var page in pages)
            {
                if (page.Name == name) return page;
            }
            return null;
        }
    }

    // 확장 메서드: 그룹 이름으로 RibbonPageGroup 검색
    public static class RibbonPageGroupCollectionExtensions
    {
        public static RibbonPageGroup GetGroupByName(this RibbonPageGroupCollection groups, string name)
        {
            foreach (var group in groups)
            {
                if (group.Name == name) return group;
            }
            return null;
        }
    }
}
주요 변경 사항
고유 키값:

ButtonKey 속성을 추가하여 각 버튼에 고유한 이름을 부여합니다.
Name 속성에 ButtonKey를 사용해 고유 키값으로 버튼을 구분합니다.
버튼 텍스트 및 스타일:

ButtonText로 버튼의 텍스트를 정의합니다.
IconSize를 통해 아이콘 크기(RibbonItemStyles.Large, RibbonItemStyles.Default)를 지정합니다.
버튼 검색 가능:

ButtonKey를 사용하여 특정 버튼을 쉽게 검색하거나 제어할 수 있습니다. 예를 들어:
csharp
코드 복사
var button = ribbonControl1.Items["btnNewFile"] as BarButtonItem;
if (button != null)
{
    button.Caption = "Updated Text";
}
코드에서 확장성 증가:

각 버튼을 개별적으로 설정하고 추가적인 속성을 정의할 수 있습니다.
그룹이나 페이지가 없는 경우에도 자동으로 생성됩니다.
실행 결과