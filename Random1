습니다. 클래스 C의 파라미터로 MainViewModel을 전달하지 않고, MainViewModel에서 이벤트를 통해 클래스 C에 직접 명령을 전달하는 방식으로 수정하겠습니다. MainViewModel은 클래스 C에 직접적인 의존성 없이 이벤트만으로 값을 전달합니다.

구현 목표
MainViewModel에서 클래스 C를 직접 주입하지 않고 이벤트로 호출.
클래스 C는 MainViewModel의 이벤트를 구독하고, 이벤트가 발생하면 값을 받아 처리.
구현 코드
1. MainViewModel
MainViewModel은 이벤트만 정의하고, 이를 통해 클래스 C에 명령을 전달합니다.

csharp
코드 복사
public class MainViewModel
{
    // 상태 알림 이벤트
    public event Action<bool>? OnTaskStatusChanged;

    // 상태 변수
    private bool _isTaskRunning;
    public bool IsTaskRunning
    {
        get => _isTaskRunning;
        set
        {
            _isTaskRunning = value;
            NotifyTaskStatus(); // 값 변경 시 이벤트 호출
        }
    }

    // 이벤트 호출 메서드
    public void NotifyTaskStatus()
    {
        Console.WriteLine($"MainViewModel: 작업 상태 변경 알림 ({_isTaskRunning})");
        OnTaskStatusChanged?.Invoke(_isTaskRunning); // 이벤트 호출
    }
}
2. 클래스 C
클래스 C는 MainViewModel의 이벤트를 외부에서 구독하며, MainViewModel의 직접적인 참조 없이 동작합니다.

csharp
코드 복사
public class C
{
    // MainViewModel의 이벤트 구독 설정
    public void SubscribeToTaskStatus(MainViewModel mainViewModel)
    {
        mainViewModel.OnTaskStatusChanged += HandleTaskStatusChanged; // 이벤트 구독
    }

    // 이벤트 처리 메서드
    private void HandleTaskStatusChanged(bool isTaskRunning)
    {
        Console.WriteLine($"클래스 C: 작업 상태 변경됨 -> {isTaskRunning}");
    }
}
3. 사용 코드
MainViewModel과 클래스 C를 연결하는 코드는 아래와 같이 작성합니다.

csharp
코드 복사
// MainViewModel 생성
var mainViewModel = new MainViewModel();

// 클래스 C 생성
var classC = new C();

// 클래스 C에서 MainViewModel의 이벤트 구독
classC.SubscribeToTaskStatus(mainViewModel);

// 상태 변경 테스트
mainViewModel.IsTaskRunning = true;  // 출력: MainViewModel -> 클래스 C로 상태 전달
mainViewModel.IsTaskRunning = false; // 출력: MainViewModel -> 클래스 C로 상태 전달
구조 설명
MainViewModel

OnTaskStatusChanged라는 이벤트를 정의하여 상태 변경 시 다른 클래스(C)에 알립니다.
MainViewModel은 클래스 C의 존재를 알 필요가 없으며, 이벤트만 호출합니다.
클래스 C

MainViewModel의 OnTaskStatusChanged 이벤트를 외부에서 구독.
이벤트 발생 시 전달된 값을 처리합니다.
결합도 최소화

MainViewModel은 클래스 C를 참조하지 않으며, 클래스 C는 이벤트를 통해 필요한 정보를 받을 뿐입니다.
장점
MainViewModel 주입 없음: MainViewModel을 클래스 C의 파라미터로 전달하지 않습니다.
이벤트 기반 처리: 클래스 간 결합도가 낮아지고, 다른 클래스에서도 동일한 이벤트를 활용 가능.