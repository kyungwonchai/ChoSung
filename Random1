ttings를 다루는 예제를 제공하겠습니다. 이 예제에서는 두 개의 ComboBox (예: Combo1과 Combo2)를 다루지만, 이를 확장하여 다섯 개 이상의 ComboBox에 적용할 수 있습니다.

1단계: 데이터 모델 및 데이터베이스 서비스 클래스 생성
두 개의 서로 다른 테이블에 대응하는 데이터 모델 클래스를 생성합니다.

csharp
Copy code
public class ComboItem
{
    public string Value { get; set; }
}

public class DatabaseService
{
    private string _connectionString = "Your Connection String Here";

    public List<ComboItem> GetComboItems(string tableName)
    {
        var items = new List<ComboItem>();

        using (SqlConnection conn = new SqlConnection(_connectionString))
        {
            conn.Open();
            using (SqlCommand cmd = new SqlCommand($"SELECT * FROM {tableName}", conn))
            {
                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        items.Add(new ComboItem { Value = reader["Column"].ToString() });
                    }
                }
            }
        }

        return items;
    }
}
2단계: ViewModel 생성
MainViewModel 클래스를 만들어 두 개의 ComboBox에 대한 데이터를 관리합니다.

csharp
Copy code
public class MainViewModel : INotifyPropertyChanged
{
    public ObservableCollection<ComboItem> Combo1Items { get; set; }
    public ObservableCollection<ComboItem> Combo2Items { get; set; }

    public MainViewModel()
    {
        DatabaseService dbService = new DatabaseService();
        Combo1Items = new ObservableCollection<ComboItem>(dbService.GetComboItems("TableA"));
        Combo2Items = new ObservableCollection<ComboItem>(dbService.GetComboItems("TableB"));
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
3단계: XAML 설정
XAML에서 두 개의 ComboBox를 각각의 ItemsSource에 바인딩합니다.

xml
Copy code
<Window xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        ...>
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <dxg:GridControl ...>
        <dxg:GridColumn ...>
            <dxg:GridColumn.EditSettings>
                <dxe:ComboBoxEditSettings ItemsSource="{Binding Combo1Items}" DisplayMember="Value"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <dxg:GridColumn ...>
            <dxg:GridColumn.EditSettings>
                <dxe:ComboBoxEditSettings ItemsSource="{Binding Combo2Items}" DisplayMember="Value"/>
            </dxg:GridColumn.EditSettings>
        </dxg:GridColumn>
        <!-- 추가 ComboBox 설정 -->
    </dxg:GridControl>
</Window>
주의사항
GetComboItems 메소드는 테이블 이름을 인수로 받아 해당 테이블에서 데이터를 가져옵니다. 테이블 구조와 컬럼 이름에 따라 쿼리를 조정해야 합니다.
각 ComboBox의 ItemsSource는 별도의 ObservableCollection에 바인딩됩니다.
추가 ComboBox 설정을 위해, MainViewModel에 추가 ObservableCollection 프로퍼티를 정의하고, XAML에서 적절히 바인딩하면 됩니다.
이 예제를 기반으로 필요한 만큼의 ComboBox를 추가하여 애플리케이션에 적용할 수 있