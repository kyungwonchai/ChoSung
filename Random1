F의 TreeView에서 모든 노드를 기본적으로 확장된 상태로 유지하려면 각 TreeViewItem의 IsExpanded 속성을 true로 설정해야 합니다. 이를 위해 데이터 바인딩과 HierarchicalDataTemplate을 활용할 수 있습니다.

아래는 이를 구현하는 방법입니다:

데이터 모델에 IsExpanded 속성 추가: 각 노드가 확장 상태를 가질 수 있도록 데이터 모델에 IsExpanded 속성을 추가합니다.

csharp
코드 복사
public class LineGroup
{
    public string GroupName { get; set; }
    public List<LineInfo> Lines { get; set; }
    public bool IsExpanded { get; set; } = true; // 기본값을 true로 설정
}

public class LineInfo
{
    public string LineName { get; set; }
    public bool IsExpanded { get; set; } = true; // 기본값을 true로 설정
}
HierarchicalDataTemplate에서 IsExpanded 속성 바인딩: XAML에서 TreeViewItem의 IsExpanded 속성을 데이터 모델의 IsExpanded 속성에 바인딩합니다.

xml
코드 복사
<TreeView x:Name="LineTreeView" ItemsSource="{Binding LineGroups}">
    <TreeView.Resources>
        <!-- LineGroup 템플릿 -->
        <HierarchicalDataTemplate DataType="{x:Type local:LineGroup}" ItemsSource="{Binding Lines}">
            <TreeViewItem Header="{Binding GroupName}" IsExpanded="{Binding IsExpanded, Mode=TwoWay}">
                <!-- LineInfo 템플릿 -->
                <TreeViewItem.ItemTemplate>
                    <DataTemplate>
                        <TreeViewItem Header="{Binding LineName}" IsExpanded="{Binding IsExpanded, Mode=TwoWay}" />
                    </DataTemplate>
                </TreeViewItem.ItemTemplate>
            </TreeViewItem>
        </HierarchicalDataTemplate>
    </TreeView.Resources>
</TreeView>
TreeViewItem 스타일 설정: TreeViewItem의 IsExpanded 속성을 데이터 바인딩으로 연결하려면 스타일을 통해 설정해야 합니다.

xml
코드 복사
<TreeView.ItemContainerStyle>
    <Style TargetType="TreeViewItem">
        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}" />
    </Style>
</TreeView.ItemContainerStyle>
위의 설정을 통해 TreeView의 모든 노드가 기본적으로 확장된 상태로 표시됩니다. 추가로, 노드의 확장 상태를 변경하면 해당 상태가 데이터 모델의 IsExpanded 속성에 반영되며, 반대로 데이터 모델의 IsExpanded 속성을 변경하면 UI에도 즉시 반영됩니다.