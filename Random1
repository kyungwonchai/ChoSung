 DevExpress 22.2와 MSSQL 2014를 사용하여 Table_UFS_DRAM 테이블을 GridControl로 가져오고, 검색 기능이 있는 텍스트 박스와 셀 포커스를 잃는 순간 수정된 내용을 DB에 바로 반영하는 기능을 구현하는 방법을 아래에 자세히 설명하겠습니다.

1. 프로젝트 설정
Visual Studio에서 새 WPF 프로젝트를 생성합니다. DevExpress와 MSSQL을 사용하기 위해 필요한 NuGet 패키지를 설치합니다:

DevExpress.Wpf
System.Data.SqlClient
2. XAML 설정
MainWindow.xaml 파일을 열고, GridControl과 TextBox를 추가합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <TextBox Name="searchTextBox" Width="200" Margin="10" VerticalAlignment="Top" HorizontalAlignment="Left"/>
        <Button Name="loadButton" Content="Load Data" Width="100" Height="30" Margin="220,10,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Click="LoadButton_Click"/>
        <dxg:GridControl Name="gridControl" AutoGenerateColumns="AddNew" ItemsSource="{Binding}">
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" CellValueChanged="TableView_CellValueChanged"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
3. C# 코드 설정
MainWindow.xaml.cs 파일에서 데이터를 로드하고 수정 사항을 DB에 반영하는 코드를 작성합니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Controls;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DataTable dataTable;
        private SqlDataAdapter dataAdapter;
        private SqlCommandBuilder commandBuilder;
        private string connectionString = "your_connection_string_here";
        private string selectQuery = "SELECT * FROM Table_UFS_DRAM";

        public MainWindow()
        {
            InitializeComponent();
        }

        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void LoadData()
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                dataAdapter = new SqlDataAdapter(selectQuery, connection);
                commandBuilder = new SqlCommandBuilder(dataAdapter);

                dataTable = new DataTable();
                dataAdapter.Fill(dataTable);

                gridControl.ItemsSource = dataTable.DefaultView;
            }
        }

        private void TableView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            UpdateDatabase();
        }

        private void UpdateDatabase()
        {
            try
            {
                dataAdapter.Update(dataTable);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error updating database: " + ex.Message);
            }
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (dataTable != null)
            {
                string filter = searchTextBox.Text;
                (gridControl.ItemsSource as DataView).RowFilter = $"ColumnName LIKE '%{filter}%'";
            }
        }
    }
}
설명
프로젝트 설정: Visual Studio에서 WPF 프로젝트를 생성하고, DevExpress와 MSSQL에 필요한 NuGet 패키지를 설치합니다.
XAML 설정: GridControl과 검색 기능이 있는 TextBox, 데이터를 불러오는 Button을 추가합니다.
C# 코드 설정:
LoadData 메서드: MSSQL에서 데이터를 불러와 GridControl에 바인딩합니다.
TableView_CellValueChanged 이벤트: 셀이 수정될 때 호출되어 UpdateDatabase 메서드를 통해 DB에 변경 사항을 반영합니다.
UpdateDatabase 메서드: DataAdapter를 사용해 DB에 변경 사항을 업데이트합니다.
SearchTextBox_TextChanged 이벤트: TextBox에 입력된 값에 따라 GridControl의 데이터를 필터링합니다.
이렇게 하면 버튼을 눌러 데이터를 로드하고, 셀을 수정하면 자동으로 DB에 반영되며, 검색 기능도 사용할 수 있습니다.