수를 수정하여 4자리 16진수 숫자를 입력받으면, 해당 숫자의 상하 교체 작업을 수행하고, 센서 상태를 업데이트하도록 구현하겠습니다. 이 과정에서 각 센서 번호에 맞춰서 상하 비트를 제대로 처리한 후, 센서의 상태를 업데이트할 수 있도록 수정할 것입니다.

수정된 UpdateSensorStates 함수 설명:
4자리 16진수를 입력받고, 상하 교체 작업을 수행한 후, 각 16진수 숫자를 2진수로 변환하여 센서 상태를 업데이트합니다.
입력된 4자리 16진수 값은 각 센서에 해당하는 비트를 반영하는데, 예를 들어 "2184"가 들어오면, "8421"로 교체하고, 각 값을 2진수로 변환한 후 센서 상태에 반영합니다.
코드 수정:
csharp
코드 복사
public class ComPort : INotifyPropertyChanged
{
    // 센서 모델 컬렉션
    public ObservableCollection<SensorModel> Sensors { get; set; }
    public event PropertyChangedEventHandler PropertyChanged;

    public ComPort()
    {
        Sensors = new ObservableCollection<SensorModel>();
        InitializeSensors();
    }

    // 센서 목록 초기화 (R520 ~ R540)
    private void InitializeSensors()
    {
        for (int i = 0; i < 18; i++)
        {
            Sensors.Add(new SensorModel
            {
                SensorName = $"R{520 + i:X}",
                IsDetected = false // 초기 상태는 감지되지 않음
            });
        }
    }

    // 주어진 4자리 16진수 값으로 센서 상태를 업데이트하는 함수
    public void UpdateSensorStates(string hex, int sensorStartIndex)
    {
        // 1. 앞 두 자리와 뒤 두 자리를 교체 (상하 교체)
        string swappedHex = hex.Substring(2, 2) + hex.Substring(0, 2);  // 2184 -> 8421

        // 2. 각 16진수 문자를 2진수로 변환하고 4자리 2진수로 맞춤
        string binary = "";
        foreach (char c in swappedHex)
        {
            binary += Convert.ToString(Convert.ToInt32(c.ToString(), 16), 2).PadLeft(4, '0');
        }

        // 3. 2진수 값을 각 센서 상태에 반영
        for (int i = 0; i < binary.Length; i++)
        {
            // binary[i] == '1'이면 감지됨(true), '0'이면 감지되지 않음(false)
            Sensors[sensorStartIndex + i].IsDetected = binary[i] == '1';
        }

        // UI 업데이트를 위해 PropertyChanged 호출
        OnPropertyChanged(nameof(Sensors));
    }

    // PropertyChanged 이벤트 호출
    protected void OnPropertyChanged(string name)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
설명:
UpdateSensorStates 함수:

입력된 4자리 16진수 문자열(hex)의 앞 두 자리와 뒤 두 자리를 교체한 후(8421), 각 16진수 값을 2진수로 변환하여 총 16비트를 생성합니다.
각 2진수 비트는 Sensors 컬렉션의 각 센서에 해당하는 감지 여부에 반영됩니다. **binary[i] == '1'**이면 해당 센서가 감지된 상태(true), **binary[i] == '0'**이면 감지되지 않은 상태(false)로 업데이트됩니다.
파라미터 설명:

hex: 4자리 16진수 문자열 (예: "2184").
sensorStartIndex: 상태를 업데이트할 센서의 시작 인덱스. 이 값을 기반으로 센서 배열에서 상태가 업데이트됩니다.
상하 교체:

예를 들어, "2184"라는 값을 받으면 앞 뒤를 바꿔서 "8421"로 변환하고, 각 자리의 16진수를 2진수로 변환하여 **"1000010000100001"**라는 문자열을 얻습니다. 이를 각 센서의 상태에 반영합니다.
센서 상태 업데이트:

이 함수는 센서의 시작 인덱스를 받아서, 해당 인덱스에서부터 16비트(16개의 센서 상태)를 업데이트합니다.
예를 들어 sensorStartIndex = 0이면, R520~R52F의 상태를 업데이트하게 됩니다.
사용 예시:
csharp
코드 복사
// ComPort 클래스 인스턴스 생성
ComPort comPort = new ComPort();

// 4자리 16진수로 센서 상태 업데이트 (예: 2184)
comPort.UpdateSensorStates("2184", 0);  // R520~R52F의 상태 업데이트
이 코드를 통해 주어진 16진수 값을 기반으로 센서의 상태를 업데이트할 수 있습니다. 더 궁금한 점이 있으면 언제든지 질문해 주