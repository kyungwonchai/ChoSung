때 발생할 수 있는 경고나 연결 문제를 방지하기 위해서입니다. 그러나, 그 부분이 문제라면 SSL을 포함한 다른 접근 방식이나 다른 설정으로 시도해볼 수 있습니다.

이제 HikariCP나 DriverManager를 사용하지 않고, 다른 방법으로 MySQL 5.7에 접근할 수 있는 방법을 제안드리겠습니다. 이 방법은 MySQL의 Native JDBC Driver를 사용하여 직접 DataSource를 통해 접근하는 방법입니다.

1. MySQL Native Driver를 이용한 DataSource 사용
1. Gradle 의존성 추가
먼저 build.gradle에 MySQL Connector 의존성을 추가하세요.

gradle
코드 복사
dependencies {
    implementation 'mysql:mysql-connector-java:8.0.28'
}
2. DataSource를 사용한 MySQL 연결 코드
이 코드에서는 MySQL의 MysqlDataSource 클래스를 직접 사용하여 연결을 시도합니다. 이 방법은 SSL을 사용하는 경우와 사용하지 않는 경우 모두에 적용될 수 있습니다.

kotlin
코드 복사
import com.mysql.cj.jdbc.MysqlDataSource
import java.sql.Connection
import java.sql.ResultSet
import java.sql.SQLException

private fun createDataSource(): MysqlDataSource {
    val dataSource = MysqlDataSource().apply {
        serverName = "10.244.122.122"
        port = 3306
        user = "abc"
        setPassword("1233445")
        databaseName = "your_database_name"
        useSSL = false // 이 부분을 true로 변경해도 됩니다.
        serverTimezone = "UTC"
    }
    return dataSource
}

private fun checkModelInMySQL(qrCode: String): String? {
    var connection: Connection? = null
    var resultSet: ResultSet? = null
    var result: String? = null

    try {
        val dataSource = createDataSource()
        connection = dataSource.connection

        val query = "SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = ?"
        val preparedStatement = connection.prepareStatement(query)
        preparedStatement.setString(1, qrCode)

        resultSet = preparedStatement.executeQuery()

        if (resultSet.next()) {
            val district = resultSet.getString("district")
            val at = resultSet.getString("at")
            val modelnumber = resultSet.getString("modelnumber")
            result = "District: $district, At: $at, Model: $modelnumber"
        }

    } catch (e: SQLException) {
        e.printStackTrace()
        result = "SQL error: ${e.message}"
    } finally {
        try {
            resultSet?.close()
            connection?.close()
        } catch (e: SQLException) {
            e.printStackTrace()
        }
    }

    return result
}
주요 포인트:
MysqlDataSource 사용:

MysqlDataSource를 사용하여 연결 설정을 구성합니다. useSSL 옵션을 필요에 따라 true로 설정할 수도 있습니다.
serverTimezone을 UTC로 설정하여 시간대 문제를 방지합니다.
직접적인 DataSource 사용:

DataSource를 통해 직접 연결을 시도하는 방식으로, DriverManager와는 다른 접근 방식입니다.
자원 관리:

ResultSet과 Connection을 사용 후 반드시 닫아 리소스를 적절히 관리합니다.
3. SSL을 사용해야 하는 경우
만약 SSL을 사용해야 한다면, 다음과 같이 설정을 변경할 수 있습니다.

kotlin
코드 복사
useSSL = true
이 경우, SSL 인증서 관련 설정도 필요할 수 있습니다. 클라이언트와 서버 간의 보안 연결이 요구되는 경우, 적절한 SSL 인증서를 설정하고 신뢰할 수 있는 연결을 구성해야 합니다.

결론
이 방법은 DriverManager나 HikariCP와는 다른 접근 방식으로, 직접적으로 DataSource를 통해 MySQL에 연결하는 방법입니다. 이 코드가 문제 해결에 도움이 되기를 바랍니다. 여전히 문제가 발생할 경우, 연결 설정이나 MySQL 서버 설정의 다른 부분을 점검해야 할 수도 있습니다.

다시 한 번 문제 해결이 지연된 점에 대해 사과드리며, 추가적인 도움이 필요하시면 언제든지 말씀