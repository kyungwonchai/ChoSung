니다. 오늘의 인계장과 어제의 인계장을 선택할 수 있도록 기능을 구현하고, 검색 탭에서는 날짜별로 데이터를 쭉 나열할 수 있도록 하겠습니다.

XAML 설정
먼저, XAML 파일에서 날짜를 선택할 수 있는 UI와 주/후/야별로 아래로 4칸씩 입력할 수 있는 칸을 구성하는 레이아웃을 작성하겠습니다.

xml
코드 복사
<Window x:Class="ShiftReportApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="Shift Report Manager" Height="600" Width="800">
    <Grid>
        <TabControl>
            <TabItem Header="인계장">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="10">
                        <Button Content="오늘" Click="LoadTodayReport"/>
                        <Button Content="어제" Click="LoadYesterdayReport"/>
                    </StackPanel>
                    <Grid Grid.Row="1">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>

                        <TextBlock Grid.Row="0" Grid.Column="0" Text="날짜" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="1" Text="번호" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="2" Text="주" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="3" Text="후" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="0" Grid.Column="4" Text="야" Background="LightGray" Padding="10"/>

                        <!-- TextBlocks for displaying dates and numbers -->
                        <TextBlock Grid.Row="1" Grid.Column="0" x:Name="Date1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="0" x:Name="Date2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="0" x:Name="Date3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="0" x:Name="Date4" Background="LightGray" Padding="10"/>

                        <TextBlock Grid.Row="1" Grid.Column="1" Text="1" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="2" Grid.Column="1" Text="2" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="3" Grid.Column="1" Text="3" Background="LightGray" Padding="10"/>
                        <TextBlock Grid.Row="4" Grid.Column="1" Text="4" Background="LightGray" Padding="10"/>

                        <!-- TextBoxes for input -->
                        <TextBox Grid.Row="1" Grid.Column="2" x:Name="DayShiftReport1" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="2" Grid.Column="2" x:Name="DayShiftReport2" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="3" Grid.Column="2" x:Name="DayShiftReport3" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="4" Grid.Column="2" x:Name="DayShiftReport4" Background="Yellow" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="3" x:Name="EveningShiftReport1" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="2" Grid.Column="3" x:Name="EveningShiftReport2" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="3" Grid.Column="3" x:Name="EveningShiftReport3" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="4" Grid.Column="3" x:Name="EveningShiftReport4" Background="Yellow" Padding="10"/>

                        <TextBox Grid.Row="1" Grid.Column="4" x:Name="NightShiftReport1" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="2" Grid.Column="4" x:Name="NightShiftReport2" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="3" Grid.Column="4" x:Name="NightShiftReport3" Background="Yellow" Padding="10"/>
                        <TextBox Grid.Row="4" Grid.Column="4" x:Name="NightShiftReport4" Background="Yellow" Padding="10"/>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="검색">
                <Grid>
                    <DatePicker Name="datePicker" SelectedDateChanged="OnDateSelected"/>
                    <dxg:GridControl Name="gridControlSearch">
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn Header="날짜" FieldName="Date"/>
                            <dxg:GridColumn Header="번호" FieldName="Number"/>
                            <dxg:GridColumn Header="주" FieldName="DayShift"/>
                            <dxg:GridColumn Header="후" FieldName="EveningShift"/>
                            <dxg:GridColumn Header="야" FieldName="NightShift"/>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
C# 코드 비하인드
이제, 날짜별로 데이터를 불러오고 저장할 수 있는 로직을 작성하겠습니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Controls;

namespace ShiftReportApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "your_connection_string_here";

        public MainWindow()
        {
            InitializeComponent();
        }

        private void LoadTodayReport(object sender, RoutedEventArgs e)
        {
            DateTime today = DateTime.Now.Date;
            LoadReport(today);
        }

        private void LoadYesterdayReport(object sender, RoutedEventArgs e)
        {
            DateTime yesterday = DateTime.Now.Date.AddDays(-1);
            LoadReport(yesterday);
        }

        private void LoadReport(DateTime date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM ShiftReport WHERE Date = @Date";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            if (dataTable.Rows.Count > 0)
            {
                // Display data in the UI
                DataRow row = dataTable.Rows[0];
                DayShiftReport1.Text = row["Report1"].ToString();
                DayShiftReport2.Text = row["Report2"].ToString();
                DayShiftReport3.Text = row["Report3"].ToString();
                DayShiftReport4.Text = row["Report4"].ToString();
                EveningShiftReport1.Text = row["Report1"].ToString();
                EveningShiftReport2.Text = row["Report2"].ToString();
                EveningShiftReport3.Text = row["Report3"].ToString();
                EveningShiftReport4.Text = row["Report4"].ToString();
                NightShiftReport1.Text = row["Report1"].ToString();
                NightShiftReport2.Text = row["Report2"].ToString();
                NightShiftReport3.Text = row["Report3"].ToString();
                NightShiftReport4.Text = row["Report4"].ToString();

                Date1.Text = date.ToString("yyyy-MM-dd");
                Date2.Text = date.ToString("yyyy-MM-dd");
                Date3.Text = date.ToString("yyyy-MM-dd");
                Date4.Text = date.ToString("yyyy-MM-dd");
            }
            else
            {
                // Clear the UI
                DayShiftReport1.Text = "";
                DayShiftReport2.Text = "";
                DayShiftReport3.Text = "";
                DayShiftReport4.Text = "";
                EveningShiftReport1.Text = "";
                EveningShiftReport2.Text = "";
                EveningShiftReport3.Text = "";
                EveningShiftReport4.Text = "";
                NightShiftReport1.Text = "";
                NightShiftReport2.Text = "";
                NightShiftReport3.Text = "";
                NightShiftReport4.Text = "";

                Date1.Text = date.ToString("yyyy-MM-dd");
                Date2.Text = date.ToString("yyyy-MM-dd");
                Date3.Text = date.ToString("yyyy-MM-dd");
                Date4.Text = date.ToString("yyyy-MM-dd");
            }
        }

        private void OnDateSelected(object sender, SelectionChangedEventArgs e)
        {
            DateTime? selectedDate = datePicker.SelectedDate;
            if (selectedDate.HasValue)
            {
                LoadSearchReport(selectedDate.Value);
            }
        }

        private void LoadSearchReport(DateTime date)
        {
            DataTable dataTable = new DataTable();

            using (SqlConnection conn = new SqlConnection(connectionString))
            {
                string query = "SELECT * FROM ShiftReport WHERE Date >= @Date";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@Date", date);

                SqlDataAdapter adapter = new SqlDataAdapter(cmd);
                adapter.Fill(dataTable);
            }

            gridControlSearch.ItemsSource = dataTable.DefaultView;
        }
    }
}
위의 코드는 다음과 같은 기능을 포함합니다:

오늘, 어제 버튼을 통해 각각의 날짜에 해당하는 데이터를 불러와 표시
검색 탭에서 선택된 날짜 이후의 데이터를 보여주는 기능
데이터베이스 연동
SQL 데이터베이스에 다음과 같은 데이터를 포함해야 합니다:

sql
코드 복사
CREATE TABLE ShiftReport (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Date DATE NOT NULL,
    Number INT NOT NULL,
    ShiftType NVARCHAR(50) NOT NULL, -- '주', '후', '야'
    Report1 NVARCHAR(MAX) NULL,
    Report2 NVARCHAR(MAX) NULL,
    Report3 NVARCHAR(MAX) NULL,
    Report4 NVARCHAR(MAX) NULL
);
이제, WPF와 DevExpress를 사용하여 주/후/야별로 데이터를 입력하고 조회할 수 있는 UI가 구성되었습니다. 데이터베이스와 연동하여 데이터를 저