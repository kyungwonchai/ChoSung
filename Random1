ommandQueueViewModel 클래스는 WPF 애플리케이션에서 비동기 작업을 관리하고, 큐(Queue)를 사용해 작업을 순차적으로 처리하는 중요한 역할을 합니다. 이 클래스는 WPF에서 ViewModel의 역할을 수행하며, INotifyPropertyChanged 인터페이스를 구현하여 데이터 바인딩을 지원하고, 명령(작업)의 처리 상태를 UI에 반영하는 기능을 합니다.

1. 클래스의 주요 역할
비동기 작업의 관리:
여러 비동기 작업을 큐에 담아 순차적으로 실행하고, 결과를 처리하며, 상태를 UI에 표시.
작업 처리의 순차성 보장:
각 작업이 완료된 후에 다음 작업을 처리하는 방식으로 진행.
작업의 재시도:
응답 오류가 발생한 경우 재시도를 시도하고, 일정 횟수를 초과하면 실패 처리.
응답 시간 제한:
각 작업에 대해 응답 시간 제한을 두고, 응답이 없을 시 작업을 실패로 처리.
작업 상태와 진행 상황을 UI에 반영:
남은 작업, 에러 발생 등 작업의 상태를 리스트박스와 프로그레스바 등으로 표현.
에러 처리 및 알람 기능:
작업 중 에러가 발생하면 알람을 표시하고, 에러 목록을 유지하여 사용자에게 문제 상황을 알림.
2. 클래스의 세부 기능
2.1 ObservableCollection
RemainingCommands와 ErrorCommands는 각각 ObservableCollection으로 정의되어 있습니다. 이 컬렉션은 WPF의 데이터 바인딩을 지원하기 위해 사용되며, 컬렉션이 변경되었을 때 UI에 자동으로 반영됩니다.

RemainingCommands: 처리 중인 명령(작업) 목록을 관리합니다.
ErrorCommands: 실패한 명령 목록을 관리하며, 최대 20개의 에러만 저장합니다.
2.2 큐(Queue)
클래스 내부에 commandQueue라는 큐를 사용하여 명령을 순차적으로 처리합니다.

큐는 FIFO(First In, First Out) 방식으로, 먼저 들어온 작업이 먼저 처리됩니다.
큐에 들어간 작업들은 순차적으로 실행되며, 한 작업이 끝난 후에야 다음 작업이 실행됩니다.
2.3 주요 속성
RetryLimit: 각 명령의 재시도 횟수를 제한합니다. 기본값은 3회입니다.
RetryInterval: 재시도 간격을 설정하며, 기본값은 3000ms (3초)입니다.
ResponseTimeout: 응답 제한 시간을 5000ms (5초)로 설정하며, 이 시간을 초과하면 작업이 실패로 처리됩니다.
MaximumQueueSize: 큐의 최대 크기를 제한하며, 기본값은 10입니다.
MaxErrorCount: 에러 리스트에 저장할 수 있는 최대 개수를 20개로 제한합니다.
3. 클래스 동작 과정
3.1 AddAsyncTaskCommand 메서드
이 메서드는 외부에서 작업을 큐에 추가할 때 호출됩니다.

작업 추가 제한: 큐가 이미 멈춘 상태이거나 큐의 크기가 MaximumQueueSize(10) 이상일 경우, 더 이상 작업을 추가하지 않고 경고 메시지를 출력합니다.
작업 추가: 정상적인 경우 EnqueueTask 메서드를 호출해 작업을 큐에 추가하고 처리하게 됩니다.
3.2 EnqueueTask 메서드
이 메서드는 실제로 비동기 작업을 큐에 추가하고, 순차적으로 작업을 처리하는 핵심 메서드입니다.

작업 생성: CommandItem 객체를 생성하여 작업의 텍스트(CommandText), 상태(Status), 재시도 횟수(RetryCount) 등 초기값을 설정한 후, 이를 RemainingCommands 컬렉션에 추가합니다.
작업 처리: 큐에 작업을 추가하고, 해당 작업이 순차적으로 실행되도록 큐에 넣습니다.
비동기 작업 실행: 큐에서 작업을 꺼내 실행하며, 이 작업은 비동기 함수(taskFunc)로 호출됩니다.
응답 시간 측정: Stopwatch를 사용해 응답 시간을 측정합니다. 응답 시간이 ResponseTimeout(5초)을 초과할 경우, 작업은 시간 초과(Timeout)로 실패 처리됩니다.
재시도 처리: 응답이 잘못된 경우 3초 후 재시도를 시도하며, 최대 RetryLimit(3회)을 초과할 때까지 재시도를 진행합니다. 재시도 중일 때 상태를 "Retrying"으로 표시하며, 재시도 횟수를 갱신합니다.
최종 상태 결정: 재시도 횟수가 3회를 넘거나 응답이 정상일 경우, 작업의 성공 또는 실패 상태가 결정됩니다.
3.3 ProcessCommandQueue 메서드
이 메서드는 큐에서 순차적으로 작업을 처리합니다.

큐 비우기: 큐에 남아 있는 작업을 하나씩 꺼내고, await를 사용해 각 작업이 비동기로 처리된 후에야 다음 작업을 진행합니다.
처리 완료: 모든 작업이 완료되면 _isProcessing을 false로 설정해 처리 중 상태를 해제합니다.
3.4 StopQueueProcessing 메서드
이 메서드는 큐의 처리를 중단하고, 더 이상 새로운 작업을 추가할 수 없도록 만듭니다.

큐 중지: 큐에 추가 작업을 막고, 이미 추가된 작업들의 처리를 중지시킵니다.
에러 저장: 작업 중단에 대한 정보를 ErrorCommands 컬렉션에 추가하며, 에러 개수가 20개를 넘으면 더 이상 추가하지 않습니다.
3.5 ShowAlarm 메서드
ShowAlarm은 작업 중 에러가 발생하거나 중요한 알림을 제공할 때 호출됩니다.

알람 메시지를 ErrorCommands 리스트에 추가하며, 메시지가 20개를 초과하지 않도록 관리합니다.
에러 메시지에는 상태와 응답 시간을 포함해, 언제 에러가 발생했는지 기록합니다.
3.6 UpdateProgress 메서드
이 메서드는 Progress 속성을 업데이트하여 큐에 남은 명령의 수를 UI에 표시합니다.

큐에 남아 있는 명령의 개수를 Progress 속성에 반영하며, 이 속성은 프로그레스바에 연결되어 UI에 실시간으로 반영됩니다.
3.7 INotifyPropertyChanged 인터페이스
INotifyPropertyChanged 인터페이스는 WPF에서 데이터 바인딩을 지원하기 위해 사용됩니다.

OnPropertyChanged 메서드를 호출하면, 해당 속성 값이 변경되었을 때 UI에 자동으로 반영됩니다. 이를 통해 Progress나 작업 상태 등의 변화가 UI에 실시간으로 나타납니다.
4. 응답 시간 초과 처리
응답 시간이 5초를 초과하면 Stopwatch를 통해 응답 시간을 측정한 후, 해당 작업을 "시간 초과" 상태로 표시하고, 큐의 모든 작업을 중지시킵니다. 중지된 작업은 더 이상 실행되지 않으며, 에러 메시지가 리스트박스에 추가됩니다.
5. 재시도 및 실패 처리
만약 작업이 정상적으로 응답되지 않을 경우, 3초 간격으로 재시도를 시도합니다.
최대 3회까지 재시도를 하며, 이를 초과하면 "재시도 횟수 초과" 상태로 표시됩니다. 이 상태가 발생하면 작업은 더 이상 진행되지 않으며, 큐는 멈추고 에러 리스트에 해당 작업이 추가됩니다.
6. 동작 과정 요약
작업 추가: AddAsyncTaskCommand로 작업이 추가되면, 큐에 저장되고 EnqueueTask에서 비동기 처리 시작.
작업 실행: 큐에서 작업을 순차적으로 처리하며, 응답 시간 및 결과를 기록.
재시도 처리: 응답이 실패하면 3초 간격으로 재시도를 시도하며, 재시도 중에는 다른 작업이 처리되지 않음.
작업 성공/실패 처리: 작업이 성공하면 완료 상태로 표시되고, 실패하면 에러 리스트에 기록.
큐 중단: 응답 시간 초과나 재시도 횟수 초과 시 큐는 멈추고, 추가 작업이 불가해짐.
이로써 CommandQueueViewModel 클래스는 비동기 작업을 관리하고, 오류 처리, 재시도, 응답 시간 제한을 적용하며, 이 모든 정보를 UI에 실시간으로 반영하는 역할을 수행합니다