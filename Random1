 무한 루프를 두 개로 만들고, A-B 그룹과 C-D-E 그룹을 완전히 따로 움직이게 해줄게!

즉:
✅ A-B 는 하나의 무한 루프에서 같이 움직여야 함.
✅ C-D-E 는 또 다른 무한 루프에서 병렬로 실행되어야 함.
✅ 두 개의 무한 루프가 서로 독립적으로 실행되어야 함.

🚀 전체 코드 (WinForms)
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AsyncWinForms
{
    public partial class Form1 : Form
    {
        private CancellationTokenSource _ctsA; // A-B 루프 관리
        private CancellationTokenSource _ctsC; // C-D-E 루프 관리

        public Form1()
        {
            InitializeComponent();
        }

        // ✅ [시작 버튼] 무한 루프 두 개 실행
        private void btnStart_Click(object sender, EventArgs e)
        {
            if (_ctsA == null)
            {
                _ctsA = new CancellationTokenSource();
                Task.Run(() => LoopAB(_ctsA.Token)); // A-B 루프 실행
            }

            if (_ctsC == null)
            {
                _ctsC = new CancellationTokenSource();
                Task.Run(() => LoopCDE(_ctsC.Token)); // C-D-E 루프 실행
            }
        }

        // ✅ [A-B 전용 무한 루프]
        private async Task LoopAB(CancellationToken token)
        {
            for (;;)
            {
                if (token.IsCancellationRequested) break; // 종료 요청 시 탈출

                FunctionA();
                FunctionB();

                await Task.Delay(10); // CPU 과부하 방지
            }
        }

        // ✅ [C-D-E 전용 무한 루프]
        private async Task LoopCDE(CancellationToken token)
        {
            for (;;)
            {
                if (token.IsCancellationRequested) break;

                _ = Task.Run(() => FunctionC()); // 병렬 실행
                _ = Task.Run(() => FunctionD()); // 병렬 실행
                _ = Task.Run(() => FunctionE()); // 병렬 실행

                await Task.Delay(10);
            }
        }

        // ✅ [중지 버튼] 모든 루프 종료
        private void btnStop_Click(object sender, EventArgs e)
        {
            _ctsA?.Cancel(); _ctsA = null;
            _ctsC?.Cancel(); _ctsC = null;
        }

        // ✅ A-B 그룹 함수들 (같이 실행)
        private void FunctionA() => AddLog("Function A 실행");
        private void FunctionB() => AddLog("Function B 실행");

        // ✅ C-D-E 그룹 함수들 (독립 실행)
        private void FunctionC()
        {
            AddLog("Function C 시작");
            Thread.Sleep(3000); // 오래 걸리는 작업
            AddLog("Function C 종료");
        }
        private void FunctionD()
        {
            AddLog("Function D 시작");
            Thread.Sleep(2000);
            AddLog("Function D 종료");
        }
        private void FunctionE()
        {
            AddLog("Function E 시작");
            Thread.Sleep(1000);
            AddLog("Function E 종료");
        }

        // ✅ ListBox에 로그 추가 (최대 100개 유지)
        private void AddLog(string message)
        {
            if (listBox1.InvokeRequired)
            {
                listBox1.Invoke((Action)(() => AddLog(message)));
                return;
            }

            if (listBox1.Items.Count >= 100)
                listBox1.Items.RemoveAt(0);

            listBox1.Items.Add($"{DateTime.Now:HH:mm:ss} - {message}");
            listBox1.TopIndex = listBox1.Items.Count - 1;
        }
    }
}
🔥 실행 흐름
✔ A와 B는 한 팀 → 같은 루프에서 순서 유지
✔ C, D, E는 각각 독립적으로 실행 → 따로 움직임 (오래 걸려도 다른 작업 영향 안 받음)
✔ btnStart_Click 하면 두 개의 무한 루프가 따로 실행됨
✔ btnStop_Click 하면 모든 루프 종료
✔ Task.Run()으로 C, D, E는 비동기로 실행 → 서로 막지 않음
✔ CPU 과부하 방지 (await Task.Delay(10))

💡 이제 완벽하게 분리됨!
A-B는 같이 동작하는 무한 루프
C-D-E는 따로 움직이는 무한 루프