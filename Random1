을 감지하는 것이 맞다면, 시계열 분석이 아니라 파일 시간을 기반으로 한 이상 감지로서 시계열 분석이 필요하지 않습니다.

아래는 파일 시간을 기준으로 이상 현상을 감지하고 로그를 남기는 간단한 코드입니다.

python
Copy code
import pymssql
import pandas as pd
from datetime import datetime, timedelta

# MSSQL 연결 정보 설정 (포트 지정 포함)
server = 'your_server'
port = 'your_port'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# MSSQL 서버에 연결
conn = pymssql.connect(server=server, port=port, user=username, password=password, database=database)

# 이상 현상 감지를 위한 설정
threshold = 5  # 이상치로 간주할 임계값 설정
anomaly_count = 0

# 데이터 모니터링 루프
while True:
    # 파일 시간과 CT1 값을 조회하는 SQL 쿼리 작성
    sql_query = "SELECT FileCreateTime, CT1 FROM YourTable WHERE YourConditions ORDER BY FileCreateTime"
    
    # 데이터베이스에서 데이터를 가져옵니다.
    df = pd.read_sql_query(sql_query, conn)
    
    for index, row in df.iterrows():
        file_time = row['FileCreateTime']
        ct = row['CT1']
        
        # 이상 현상을 감지하는 로직
        if ct > threshold:
            anomaly_count += 1
        else:
            anomaly_count = 0
        
        # 이상 현상이 threshold 이상인 경우 로그를 작성
        if anomaly_count >= threshold:
            print(f"이상 현상 감지 - 파일 시간: {file_time}, CT1: {ct}, 시간: {datetime.now()}")
            # 여기에서 MSSQL에 로그를 작성하는 코드 추가
            
    # 일정 시간 간격으로 실행하려면 sleep 함수를 사용합니다.
    # 예: 5분마다 실행
    time.sleep(300)
이 코드는 파일 시간과 CT1 값을 기반으로 이상 현상을 감지하고, 연속된 이상 현상이 threshold 값 이상인 경우 로그를 작성하는 간단한 예제입니다. 코드 내부의 YourTable 및 YourConditions를 실제 데이터베이스 테이블 및 조건으로 대체하고, 이상 현상이 감지되면 원하는 방식으로 로그를 작성하고 MSSQL에 업데이