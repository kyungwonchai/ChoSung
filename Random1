탭 컨트롤(TabControl) 아래 여러 개의 SpreadsheetControl이 있을 때, 특정 시트를 선택하면서 해당 TabItem도 같이 선택하려면, 리스트박스에서 더블클릭 시 적절한 탭을 활성화하는 로직을 추가해야 합니다.

즉, 더블클릭된 시트가 있는 SpreadsheetControl을 포함하고 있는 탭을 찾아 해당 탭을 선택하고, 그 다음에 시트를 활성화해야 합니다. 이를 구현하기 위해 다음과 같은 수정이 필요합니다.

1. XAML 수정
SpreadsheetControl을 각각 TabControl의 TabItem 내에 배치하고, 탭 컨트롤의 이름을 지정해줍니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="Multi Spreadsheet Sheet List Example with TabControl" Height="600" Width="1000">

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" />
            <ColumnDefinition Width="1*" />
        </Grid.ColumnDefinitions>

        <!-- TabControl to hold multiple SpreadsheetControls -->
        <TabControl x:Name="tabControl" Grid.Column="0">
            <TabItem Header="Spreadsheet 1">
                <dx:SpreadsheetControl x:Name="spreadsheetControl1"/>
            </TabItem>
            <TabItem Header="Spreadsheet 2">
                <dx:SpreadsheetControl x:Name="spreadsheetControl2"/>
            </TabItem>
        </TabControl>

        <!-- ListBox to show the names of all sheets in the spreadsheets -->
        <ListBox x:Name="sheetListBox" Grid.Column="1"
                 MouseDoubleClick="SheetListBox_MouseDoubleClick"
                 Margin="10" />
    </Grid>
</Window>
2. C# 코드 비하인드 수정
아래와 같이 코드를 수정하여 더블클릭 시 해당 탭을 활성화한 후, 시트를 선택하도록 구현합니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1", 0);
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2", 1);
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier, int tabIndex)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 및 탭 인덱스 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet, TabIndex = tabIndex };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체, TabIndex를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 해당 탭을 활성화합니다.
                    tabControl.SelectedIndex = tag.TabIndex;

                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // SpreadsheetControl, Worksheet 및 TabIndex를 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
            public int TabIndex { get; set; }
        }
    }
}
주요 수정 사항
SpreadsheetTag 클래스 변경:

SpreadsheetControl과 Worksheet 뿐만 아니라, 해당 컨트롤이 위치한 탭의 인덱스 (TabIndex)를 추가했습니다.
이를 통해 리스트박스 항목에서 어느 탭에 위치한 시트를 선택해야 하는지 알 수 있게 됩니다.
AddSheetNamesFromSpreadsheet 메소드 변경:

TabIndex를 파라미터로 추가하여, 각 SpreadsheetControl이 속한 탭의 인덱스를 SpreadsheetTag에 저장합니다.
이를 통해 나중에 리스트박스에서 더블클릭 시 해당 탭으로 정확히 이동할 수 있습니다.
SheetListBox_MouseDoubleClick 이벤트 핸들러 변경:

선택된 항목의 Tag에서 탭 인덱스를 가져와 TabControl의 SelectedIndex 속성을 설정하여 해당 탭을 활성화합니다.
이후 시트 (Worksheet)를 활성화하여 사용자가 선택한 시트를 볼 수 있게 합니다.
사용 예시
프로그램 실행:

프로그램을 실행하면 TabControl에 두 개의 SpreadsheetControl이 탭으로 배치되고, 각 스프레드시트의 모든 시트 이름이 리스트박스에 표시됩니다.
리스트 아이템 색상 구분:

각 스프레드시트의 시트 이름은 지정된 색상(예: 빨간색은 첫 번째 스프레드시트, 파란색은 두 번째 스프레드시트)으로 구분됩니다.
탭 및 시트 이동:
