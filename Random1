래는 **Exponential Moving Average (EMA)**를 계산하여 선으로 표시하고, 각 MP 데이터에 대해 색상을 다르게 설정하여 점과 선을 동시에 표시하는 차트를 구현한 전체 소스코드입니다. 2개의 차트 대신 1개의 고도화된 차트로 수정했습니다.

C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using DevExpress.Xpf.Charts;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        // MainChart 데이터 (라인별 표준편차)
        public ObservableCollection<LineData> MainChartData { get; set; } = new ObservableCollection<LineData>();

        // DetailChart 데이터 (MP1~MP5의 시간별 데이터)
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();

        // EMA 데이터를 위한 컬렉션
        public ObservableCollection<EmaData> EmaChartData { get; set; } = new ObservableCollection<EmaData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // MainChart 데이터 로드
            LoadMainChartData();
        }

        /// <summary>
        /// MainChart 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadMainChartData()
        {
            try
            {
                var connectionString = "YourConnectionString"; // 데이터베이스 연결 문자열
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0); // LineName
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            // 표준편차 계산
                            var stdDev = CalculateStandardDeviation(mpData);

                            // MainChartData 추가
                            MainChartData.Add(new LineData { LineName = lineName, StdDev = stdDev });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading MainChart data: {ex.Message}");
            }
        }

        /// <summary>
        /// DetailChart 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear(); // 기존 데이터를 초기화
                var connectionString = "YourConnectionString";

                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult
                                  WHERE LineName = @lineName
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                DetailChartData.Add(new DetailData
                                {
                                    Timestamp = reader.GetDateTime(0),
                                    MP1 = reader.GetDouble(1),
                                    MP2 = reader.GetDouble(2),
                                    MP3 = reader.GetDouble(3),
                                    MP4 = reader.GetDouble(4),
                                    MP5 = reader.GetDouble(5)
                                });
                            }
                        }
                    }
                }

                // EMA 데이터 계산 및 업데이트
                CalculateEma();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading DetailChart data: {ex.Message}");
            }
        }

        /// <summary>
        /// EMA 계산
        /// </summary>
        private void CalculateEma()
        {
            EmaChartData.Clear();
            const double smoothing = 2.0;
            double ema = 0;

            // Flattened 데이터 가져오기 (MP1 ~ MP5 값 통합)
            var allData = DetailChartData
                .SelectMany(d => new[]
                {
                    new { d.Timestamp, Value = d.MP1 },
                    new { d.Timestamp, Value = d.MP2 },
                    new { d.Timestamp, Value = d.MP3 },
                    new { d.Timestamp, Value = d.MP4 },
                    new { d.Timestamp, Value = d.MP5 }
                })
                .OrderBy(d => d.Timestamp)
                .ToList();

            for (int i = 0; i < allData.Count; i++)
            {
                if (i == 0)
                {
                    ema = allData[i].Value; // 첫 번째 값은 EMA 초기값으로 사용
                }
                else
                {
                    ema = (allData[i].Value - ema) * (smoothing / (1 + i)) + ema;
                }

                // EMA 데이터 추가
                EmaChartData.Add(new EmaData
                {
                    Timestamp = allData[i].Timestamp,
                    EmaValue = ema
                });
            }
        }

        /// <summary>
        /// 표준편차 계산
        /// </summary>
        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    /// <summary>
    /// MainChart 데이터 모델
    /// </summary>
    public class LineData
    {
        public string LineName { get; set; } // 라인의 이름
        public double StdDev { get; set; } // 표준편차 값
    }

    /// <summary>
    /// DetailChart 데이터 모델
    /// </summary>
    public class DetailData
    {
        public DateTime Timestamp { get; set; } // 데이터의 시간
        public double MP1 { get; set; } // MP1 값
        public double MP2 { get; set; } // MP2 값
        public double MP3 { get; set; } // MP3 값
        public double MP4 { get; set; } // MP4 값
        public double MP5 { get; set; } // MP5 값
    }

    /// <summary>
    /// EMA 데이터 모델
    /// </summary>
    public class EmaData
    {
        public DateTime Timestamp { get; set; } // 데이터의 시간
        public double EmaValue { get; set; } // EMA 값
    }
}
XAML 코드 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="800" Width="1200">
    <Grid>
        <!-- 고도화된 차트 -->
        <dxc:ChartControl x:Name="DetailChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Timestamp" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Values" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>

                    <!-- EMA Line Series -->
                    <dxc:LineSeries2D DisplayName="EMA"
                                      DataSource="{Binding EmaChartData}"
                                      ArgumentDataMember="Timestamp"
                                      ValueDataMember="EmaValue"
                                      MarkerVisible="False" />

                    <!-- Scatter Points for MP1 ~ MP5 -->
                    <dxc:PointSeries2D DisplayName="MP1"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP1" />
                    <dxc:PointSeries2D DisplayName="MP2"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP2" />
                    <dxc:PointSeries2D DisplayName="MP3"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP3" />
                    <dxc:PointSeries2D DisplayName="MP4"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP4" />
                    <dxc:PointSeries2D DisplayName="MP5"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP5" />
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
주요 변경 사항
EMA (Exponential Moving Average)

데이터에서 EMA를 계산하여 선으로 표시합니다.
모든 MP 데이터를 통합하여 EMA를 계산합니다.
점과 선 동시 표시

점은 MP1~MP5 각각의 데이터에 대해 다르게 표시됩니다.
선은 EMA 데이터를 기반으로 표시됩니다.
단일 고도화 차트

시간축은 동일하게 설정.