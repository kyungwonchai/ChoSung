using System;
using System.Windows;
using System.Windows.Media.Imaging;
using OpenCvSharp;
using OpenCvSharp.Extensions;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            ProcessClipboardImage();
        }

        private void ProcessClipboardImage()
        {
            // 클립보드에서 이미지를 가져옵니다.
            if (Clipboard.ContainsImage())
            {
                BitmapSource clipboardImage = Clipboard.GetImage();
                Mat src = clipboardImage.ToMat();

                // 원본 이미지 출력
                ImageControl.Source = BitmapSourceConverter.ToBitmapSource(src);

                // 다양한 방법으로 이미지 색상 변경 및 처리
                Mat[] processedImages = new Mat[]
                {
                    ChangeColor(src, Scalar.Red),
                    ChangeColor(src, Scalar.Blue),
                    ChangeColor(src, Scalar.Green),
                    EnhanceImage(src),
                    ConvertToGray(src),
                };

                foreach (var img in processedImages)
                {
                    Mat qrCodeRegion = DetectAndMarkQRCode(img);
                    if (qrCodeRegion != null)
                    {
                        // QR 코드 영역이 감지되면 표시
                        ImageControl.Source = BitmapSourceConverter.ToBitmapSource(qrCodeRegion);
                        break;
                    }
                }
            }
            else
            {
                MessageBox.Show("클립보드에 이미지가 없습니다.");
            }
        }

        private Mat ChangeColor(Mat src, Scalar color)
        {
            Mat colored = src.Clone();
            Cv2.CvtColor(colored, colored, ColorConversionCodes.BGR2GRAY);
            Cv2.CvtColor(colored, colored, ColorConversionCodes.GRAY2BGR);
            colored += new Scalar(color.Val0, color.Val1, color.Val2);
            return colored;
        }

        private Mat EnhanceImage(Mat src)
        {
            Mat enhanced = new Mat();
            Cv2.DetailEnhance(src, enhanced);
            return enhanced;
        }

        private Mat ConvertToGray(Mat src)
        {
            Mat gray = new Mat();
            Cv2.CvtColor(src, gray, ColorConversionCodes.BGR2GRAY);
            return gray;
        }

        private Mat DetectAndMarkQRCode(Mat src)
        {
            using (var qrDecoder = new QRCodeDetector())
            {
                Point2f[] points;
                string qrText = qrDecoder.DetectAndDecode(src, out points);
                if (!string.IsNullOrEmpty(qrText) && points.Length > 0)
                {
                    // QR 코드가 감지되면 영역을 검정색으로 표시
                    Point[] intPoints = Array.ConvertAll(points, p => new Point((int)p.X, (int)p.Y));
                    Mat mask = Mat.Zeros(src.Size(), MatType.CV_8UC3);
                    Cv2.FillPoly(mask, new[] { intPoints }, Scalar.Black);
                    Cv2.BitwiseOr(src, mask, src);

                    // QR 코드 영역을 표시
                    for (int i = 0; i < points.Length; i++)
                    {
                        Cv2.Line(src, intPoints[i], intPoints[(i + 1) % points.Length], Scalar.Red, 2);
                    }

                    return src;
                }
            }
            return null;
        }
    }

    public static class BitmapSourceExtensions
    {
        public static Mat ToMat(this BitmapSource bitmapsource)
        {
            var width = bitmapsource.PixelWidth;
            var height = bitmapsource.PixelHeight;
            var stride = width * ((bitmapsource.Format.BitsPerPixel + 7) / 8);
            var memoryBlockPointer = IntPtr.Zero;
            try
            {
                memoryBlockPointer = System.Runtime.InteropServices.Marshal.AllocHGlobal(height * stride);
                bitmapsource.CopyPixels(
                  new Int32Rect(0, 0, width, height),
                  memoryBlockPointer,
                  height * stride,
                  stride);

                using (var mat = new Mat(height, width, MatType.CV_8UC4, memoryBlockPointer))
                {
                    return mat.Clone();
                }
            }
            finally
            {
                if (memoryBlockPointer != IntPtr.Zero)
                {
                    System.Runtime.InteropServices.Marshal.FreeHGlobal(memoryBlockPointer);
                }
            }
        }
    }
}
