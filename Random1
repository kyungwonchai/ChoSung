습니다. os.walk() 대신 os.listdir()를 사용하여 모든 폴더를 검색하도록 수정하겠습니다. 이 방식은 네트워크 공유 폴더에서도 잘 동작할 것입니다.

코드 (os.listdir() 사용)
python
코드 복사
import os
import re
import time

def search_folders(root_dir, folder_pattern):
    # 시작 시간 측정
    start_time = time.time()
    pattern = re.compile(folder_pattern, re.IGNORECASE)
    matched_paths = []

    def recursive_search(current_dir):
        try:
            # 현재 폴더 내용 확인
            items = os.listdir(current_dir)
            for item in items:
                item_path = os.path.join(current_dir, item)
                print(f"확인 중: {item_path}")  # 확인용으로 모든 폴더 출력

                # 폴더인 경우
                if os.path.isdir(item_path):
                    # 이름이 패턴에 일치하는지 확인
                    if pattern.search(item):
                        matched_paths.append(item_path)
                        print(f"[발견] {item_path}")
                    
                    # 재귀적으로 하위 폴더 검색
                    recursive_search(item_path)

        except PermissionError:
            print(f"[접근 거부] {current_dir}")
        except Exception as e:
            print(f"[오류] {current_dir} - {str(e)}")

    # 검색 시작
    recursive_search(root_dir)

    # 종료 시간 측정
    end_time = time.time()
    elapsed_time = end_time - start_time

    # 결과 출력
    print(f"\n검색 완료! ({elapsed_time:.2f} 초 소요)")
    print("검색된 폴더 경로 목록:")
    for path in matched_paths:
        print(path)

    return matched_paths


# 사용 예시
root_directory = r"\\ServerName\SharedFolder"  # 네트워크 경로
folder_name_pattern = r"PGM\s*공용\s*사용"  # 띄어쓰기가 있거나 없거나 모두 포함

search_folders(root_directory, folder_name_pattern)
코드 설명
os.listdir(): 현재 디렉토리에 있는 모든 파일과 폴더를 가져옵니다.

os.path.isdir(): 해당 경로가 폴더인지 확인합니다.

재귀 함수 (recursive_search) 사용하여 하위 폴더를 모두 검색합니다.

폴더 이름을 정규 표현식(pattern)으로 검색합니다.

찾은 폴더 경로를 바로 출력합니다.

이 방식의 장점
os.walk() 대신 os.listdir() 사용하여 강제로 모든 폴더를 직접 탐색합니다.

접근 권한 오류나 파일 이름 오류도 표시합니다.

네트워크 공유 폴더에서도 잘 동작합니다.