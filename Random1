는 그라데이션을 더 부드럽고 예쁘게 만드는 방법과 창 크기를 키우면서 위젯 배치를 조정한 코드입니다. 이를 통해 시각적으로 더 아름다운 인터페이스를 구현할 수 있습니다.

수정된 코드
1. 부드러운 그라데이션 구현
Canvas에 그라데이션을 직접 그리되, 점진적으로 색상이 변하도록 RGB 값을 계산하여 채웁니다.

2. 창 크기 조정 및 위젯 크기 조절
창 크기를 키우고, 입력 필드와 버튼의 크기를 적절히 조정합니다.

python
코드 복사
import tkinter as tk
from tkinter import ttk


def rgb_to_hex(r, g, b):
    """RGB 값을 HEX 문자열로 변환"""
    return f'#{r:02x}{g:02x}{b:02x}'


def create_smooth_gradient(canvas, width, height, start_color, end_color):
    """부드러운 그라데이션 생성"""
    r1, g1, b1 = start_color
    r2, g2, b2 = end_color
    steps = height
    for i in range(steps):
        r = int(r1 + (r2 - r1) * i / steps)
        g = int(g1 + (g2 - g1) * i / steps)
        b = int(b1 + (b2 - b1) * i / steps)
        color = rgb_to_hex(r, g, b)
        canvas.create_line(0, i, width, i, fill=color)


# 메인 윈도우 설정
root = tk.Tk()
root.title("가속도 및 지자기 계산기")
root.geometry("800x600")  # 창 크기를 크게 조정

# 캔버스 생성 및 그라데이션 추가
canvas = tk.Canvas(root, width=800, height=600)
canvas.pack(fill="both", expand=True)

# 파랑에서 보라로 부드러운 그라데이션
create_smooth_gradient(canvas, 800, 600, (106, 90, 205), (138, 43, 226))

# 위젯 배치 도우미 함수
def place_widget(widget, x, y, width=None, height=None):
    """위젯을 캔버스 위에 배치"""
    canvas.create_window(x, y, window=widget, width=width, height=height)


# 라벨과 입력 필드 스타일
label_style = {"font": ("Arial", 10, "bold"), "bg": "#9370db", "fg": "white"}
entry_style = {"bg": "white", "fg": "black", "relief": "solid", "bd": 2}

# 낱개 입력
tk.Label(canvas, text="낱개 입력", font=("Arial", 12, "bold"), bg="#6a5acd", fg="white").place(x=400, y=50, anchor="center")
entry_ax = tk.Entry(canvas, **entry_style)
place_widget(entry_ax, 150, 100, width=100)
entry_ay = tk.Entry(canvas, **entry_style)
place_widget(entry_ay, 300, 100, width=100)
entry_az = tk.Entry(canvas, **entry_style)
place_widget(entry_az, 450, 100, width=100)
entry_mx = tk.Entry(canvas, **entry_style)
place_widget(entry_mx, 600, 100, width=100)
entry_my = tk.Entry(canvas, **entry_style)
place_widget(entry_my, 750, 100, width=100)
entry_mz = tk.Entry(canvas, **entry_style)
place_widget(entry_mz, 400, 150, width=150)

# 3개씩 분리된 입력
tk.Label(canvas, text="3개씩 분리 입력", font=("Arial", 12, "bold"), bg="#7b68ee", fg="white").place(x=400, y=200, anchor="center")
group1_entry = tk.Entry(canvas, **entry_style)
place_widget(group1_entry, 400, 250, width=500)
group2_entry = tk.Entry(canvas, **entry_style)
place_widget(group2_entry, 400, 300, width=500)

# 한 줄 입력
tk.Label(canvas, text="한 줄 입력", font=("Arial", 12, "bold"), bg="#8a2be2", fg="white").place(x=400, y=350, anchor="center")
single_line_entry = tk.Entry(canvas, **entry_style)
place_widget(single_line_entry, 400, 400, width=600)

# 계산 버튼과 결과 라벨
calculate_button = tk.Button(canvas, text="계산", bg="#8a2be2", fg="white", font=("Arial", 12, "bold"))
place_widget(calculate_button, 400, 470, width=150)
result_label = tk.Label(canvas, text="결과: 없음", font=("Arial", 14, "bold"), bg="#6a5acd", fg="white")
place_widget(result_label, 400, 520, width=600)

# GUI 실행
root.mainloop()
주요 변경 사항
부드러운 그라데이션

create_smooth_gradient() 함수는 두 RGB 색상 간의 점진적인 변화를 계산하여 화면에 선(line)으로 그립니다.
시작 색상: 파랑 계열 (#6a5acd)
종료 색상: 보라 계열 (#8a2be2)
창 크기 조정

창 크기를 800x600으로 키워 위젯 간 간격과 배치를 넉넉하게 조정했습니다.
위젯 크기 조정

입력 필드 크기를 적절히 축소 및 배치하여 균형을 맞췄습니다.
3개씩 분리 입력과 한 줄 입력 필드는 더 넓게 설정하여 가독성을 높였습니다.
결과 화면
배경: 파란색에서 보라색으로 부드러운 그라데이션.