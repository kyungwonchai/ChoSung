

import React, { useState } from 'react';
import Simulator from './components/Simulator';
import PlanA from './components/PlanA';
import PlanB from './components/PlanB';
import PlanC from './components/PlanC';
import SystemDesign from './components/SystemDesign';
import SequenceDiagrams from './components/SequenceDiagrams';
import DeveloperGuide from './components/DeveloperGuide';
import HardwareEmulator from './components/HardwareEmulator';


type View = 'systemDesign' | 'simulation' | 'hardwareEmulator' | 'sequenceDiagrams' | 'developerGuide' | 'planA' | 'planB' | 'planC';

// Icon components for sidebar
const SystemDesignIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M12 20V10"/><path d="M18 20V4"/><path d="M6 20V16"/></svg>;
const SimulationIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="3" x2="9" y2="21"></line></svg>;
const HardwareEmulatorIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M5 2v4h4"/><path d="M19 22v-4h-4"/><path d="M2 12H5.5a3.5 3.5 0 0 0 0-7H2"/><path d="M22 12H18.5a3.5 3.5 0 0 1 0-7H22"/><path d="M12 15a3 3 0 0 0-3 3v4h6v-4a3 3 0 0 0-3-3z"/><path d="M12 2v4"/></svg>;
const SequenceDiagramIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M15 6l-6 6 6 6"/></svg>;
const DeveloperGuideIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><polyline points="16 18 22 12 16 6"></polyline><polyline points="8 6 2 12 8 18"></polyline></svg>;
const PlanIcon = ({ char }: { char: string }) => <div className="w-5 h-5 mr-3 flex items-center justify-center rounded-full bg-gray-600 text-xs font-bold">{char}</div>;


const App = () => {
  const [activeView, setActiveView] = useState<View>('systemDesign');

  const renderView = () => {
    switch (activeView) {
      case 'systemDesign':
        return <SystemDesign />;
      case 'simulation':
        return <Simulator />;
      case 'hardwareEmulator':
        return <HardwareEmulator />;
      case 'sequenceDiagrams':
        return <SequenceDiagrams />;
      case 'developerGuide':
        return <DeveloperGuide />;
      case 'planA':
        return <PlanA />;
      case 'planB':
        return <PlanB />;
      case 'planC':
        return <PlanC />;
      default:
        return <SystemDesign />;
    }
  };

  const NavButton = ({ view, label, children }: { view: View; label: string; children: React.ReactNode }) => {
    const isActive = activeView === view;
    const baseClasses = 'w-full flex items-center px-3 py-2.5 text-sm font-medium rounded-lg transition-colors duration-200';
    const activeClasses = 'bg-cyan-600 text-white shadow-lg';
    const inactiveClasses = 'text-gray-300 hover:bg-gray-700 hover:text-white';

    return (
      <button onClick={() => setActiveView(view)} className={`${baseClasses} ${isActive ? activeClasses : inactiveClasses}`}>
        {children}
        <span className="truncate">{label}</span>
      </button>
    );
  };

  return (
    <div className="flex h-screen bg-gray-900 text-gray-100">
      {/* Sidebar Navigation */}
      <aside className="w-64 flex-shrink-0 bg-gray-800 p-4 border-r border-gray-700/50 flex flex-col">
        <div className="flex items-center mb-6">
          <svg className="w-8 h-8 text-cyan-400 mr-2" viewBox="0 0 24 24" fill="currentColor"><path d="M12 .5C5.64.5.5 5.64.5 12s5.14 11.5 11.5 11.5S23.5 18.36 23.5 12 .5zM12 21c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zM12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z"/></svg>
          <h1 className="text-xl font-bold text-white">Locator System</h1>
        </div>
        <nav className="flex-grow space-y-2">
          <NavButton view="systemDesign" label="시스템 설계 개요">
            <SystemDesignIcon />
          </NavButton>
          <NavButton view="simulation" label="시뮬레이션">
            <SimulationIcon />
          </NavButton>
          <NavButton view="hardwareEmulator" label="하드웨어 수신기 에뮬레이터">
            <HardwareEmulatorIcon />
          </NavButton>
          <NavButton view="sequenceDiagrams" label="시퀀스 다이어그램">
            <SequenceDiagramIcon />
          </NavButton>
          <NavButton view="developerGuide" label="개발자 가이드">
            <DeveloperGuideIcon />
          </NavButton>

          <div className="pt-4 mt-2 border-t border-gray-700">
            <h2 className="px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider">최종 설계 플랜</h2>
          </div>
          <NavButton view="planA" label="Plan A (무선/MQTT)">
            <PlanIcon char="A" />
          </NavButton>
          <NavButton view="planB" label="Plan B (유선/커스텀)">
            <PlanIcon char="B" />
          </NavButton>
          <NavButton view="planC" label="Plan C (유선/Modbus)">
            <PlanIcon char="C" />
          </NavButton>
        </nav>
        <footer className="text-center text-xs text-gray-500 mt-4">
          Enterprise Solution Prototype
        </footer>
      </aside>

      {/* Main Content */}
      <main className="flex-1 overflow-y-auto p-6 md:p-8">
        <div className={activeView === 'simulation' ? '' : 'max-w-7xl mx-auto'}>
          {renderView()}
        </div>
      </main>
    </div>
  );
};

export default App;