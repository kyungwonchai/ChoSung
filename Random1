ginx 통합 설정: 단일 IP와 경로 기반 라우팅 시나리오
네, 알겠습니다. 모든 서비스를 10.244.222.222라는 단일 IP 주소로 접근하게 하고, URL 경로에 따라 각기 다른 애플리케이션으로 연결하는 통합 Nginx 설정 시나리오를 상세하게 작성해 드리겠습니다.

메인 접속 (http://10.244.222.222/): 간단한 포털 역할을 하는 메인 화면

React 앱 (http://10.244.222.222/app/): 프론트엔드 UI

Streamlit 대시보드 (http://10.244.222.222/dashboard/): 데이터 대시보드

Flask 복합 서비스 (http://10.244.222.222/service/): 여러 내부 API를 가진 백엔드

👑 4단계 (심화): 통합 Nginx 설정 파일 작성
이전 시나리오에서는 각 사이트별로 설정 파일을 분리했지만, 이번에는 사용자의 요구에 맞춰 모든 규칙을 하나의 파일에 통합하여 관리하는 방법을 보여드리겠습니다.

1. 메인 화면용 HTML 파일 준비
Nginx가 가장 먼저 보여줄 간단한 포털 페이지를 만듭니다.

Bash

# 메인 페이지를 위한 디렉터리 생성
sudo mkdir -p /var/www/main-portal

# 간단한 인덱스 페이지 작성
sudo nano /var/www/main-portal/index.html
HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>알파 프로젝트 포털</title>
    <style>
        body { font-family: sans-serif; text-align: center; margin-top: 5em; }
        h1 { color: #333; }
        a { display: inline-block; margin: 10px; padding: 15px 25px; font-size: 1.2em;
            color: white; background-color: #007BFF; text-decoration: none; border-radius: 5px; }
        a:hover { background-color: #0056b3; }
    </style>
</head>
<body>
    <h1>알파 프로젝트에 오신 것을 환영합니다!</h1>
    <p>아래 링크를 통해 각 서비스로 이동할 수 있습니다.</p>
    <div>
        <a href="/app/">메인 서비스 (React)</a>
        <a href="/dashboard/">데이터 대시보드 (Streamlit)</a>
        <a href="/service/">독립 서비스 (Flask)</a>
    </div>
</body>
</html>
2. 통합 Nginx 설정 파일 생성
sites-available에 모든 규칙을 담은 단일 설정 파일을 생성합니다.

Bash

# 기존에 만들었던 링크들이 있다면 모두 제거합니다.
sudo rm /etc/nginx/sites-enabled/*

# 새로운 통합 설정 파일 생성
sudo nano /etc/nginx/sites-available/alpha-project.conf
아래 내용을 alpha-project.conf 파일에 복사하여 붙여넣으세요. 주석을 통해 각 설정의 의미를 상세히 설명했습니다.

Nginx

# === 알파 프로젝트 통합 서버 설정 ===
# 이 서버 블록은 10.244.222.222의 80번 포트로 들어오는 모든 요청을 처리합니다.
server {
    # -----------------------------------------------------------------
    # ## 기본 서버 설정 ##
    # -----------------------------------------------------------------
    # 80번 포트(HTTP)에서 들어오는 요청을 수신합니다.
    listen 80;

    # 이 서버 블록이 응답할 IP 주소를 명시합니다.
    # 사용자의 도메인 이름이 있다면 'server_name a.com b.com;' 과 같이 추가할 수 있습니다.
    server_name 10.244.222.222;


    # -----------------------------------------------------------------
    # ## 라우팅 규칙 (Location Blocks) ##
    # Nginx는 가장 구체적으로 일치하는 location 블록의 규칙을 따릅니다.
    # -----------------------------------------------------------------

    # (1) 메인 포털 페이지 ('/' 경로)
    # 가장 기본이 되는 경로입니다. 다른 location과 일치하지 않는 모든 요청이 이곳으로 옵니다.
    location / {
        # 웹 콘텐츠가 저장된 서버의 실제 경로를 지정합니다.
        root /var/www/main-portal;

        # 해당 디렉터리에서 가장 먼저 찾아볼 파일 이름을 순서대로 지정합니다.
        index index.html index.htm;
    }


    # (2) React 애플리케이션 ('/app/' 경로)
    # '/app/'으로 시작하는 모든 요청을 처리합니다.
    # **중요**: 경로 뒤에 슬래시(/)를 붙이면 '/app'과 '/app/'을 명확히 구분하여 처리 오류를 줄입니다.
    location /app/ {
        # 내부에서 8100번 포트로 실행 중인 React 앱으로 요청을 전달(리버스 프록시)합니다.
        # **매우 중요**: proxy_pass 주소 끝에 슬래시(/)가 있어야 Nginx가 '/app/' 부분을 제거하고
        # 순수한 요청 경로('/')만 React 앱으로 전달합니다. (예: /app/profile -> /profile)
        proxy_pass http://127.0.0.1:8100/;

        # React Router와 같은 클라이언트 사이드 라우팅을 위한 설정입니다.
        # 요청된 파일($uri)이 없으면 index.html을 대신 반환합니다.
        try_files $uri $uri/ /app/index.html;

        # 클라이언트의 실제 IP 주소와 같은 중요한 헤더 정보를 백엔드 앱으로 전달합니다.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }


    # (3) Streamlit 대시보드 ('/dashboard/' 경로)
    # '/dashboard/'로 시작하는 모든 요청을 처리합니다.
    location /dashboard/ {
        # 내부에서 8101번 포트로 실행 중인 Streamlit 앱으로 요청을 전달합니다.
        proxy_pass http://127.0.0.1:8101/;

        # Streamlit은 실시간 통신을 위해 웹소켓(WebSocket)을 사용합니다.
        # 아래 헤더 설정은 웹소켓 연결을 위해 반드시 필요합니다.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # 업그레이드 헤더 전달
        proxy_set_header Connection "upgrade"; # 연결을 'upgrade'로 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }


    # (4) Flask 복합 서비스 ('/service/' 경로)
    # 이 부분은 '/service/' 경로 아래에 여러 하위 API를 가지는 복잡한 구조를 처리합니다.

    # (4-1) Flask API v1 ('/service/api/v1/' 경로)
    # **가장 구체적인 경로를 먼저 선언해야 Nginx가 올바르게 인식합니다.**
    location /service/api/v1/ {
        # 요청 경로에서 '/service/api/v1/' 부분을 제거하고 싶지 않을 때 사용합니다.
        # proxy_pass 주소 끝에 슬래시가 없습니다.
        # 요청: /service/api/v1/users -> 전달: /service/api/v1/users
        proxy_pass http://127.0.0.1:8111; # API v1 서버 포트

        # 공통 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # (4-2) Flask API v2 ('/service/api/v2/' 경로)
    location /service/api/v2/ {
        # 요청 경로에서 '/service/api/v2/' 부분을 제거하고 싶을 때 사용합니다.
        # proxy_pass 주소 끝에 슬래시가 있습니다.
        # 요청: /service/api/v2/items -> 전달: /items
        proxy_pass http://127.0.0.1:8112/; # API v2 서버 포트

        # 공통 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    # (4-3) Flask 메인 UI 및 나머지 ('/service/' 경로)
    # 위에서 정의한 API 경로 외의 모든 '/service/' 요청을 처리합니다.
    location /service/ {
        # 메인 Flask 앱으로 전달합니다.
        # 요청: /service/about -> 전달: /about
        proxy_pass http://127.0.0.1:8110/; # 메인 Flask 앱 포트

        # 공통 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
🔧 5단계: 앱 실행 및 Nginx 적용
1. 앱 실행 명령어 수정 (포트 변경)
systemd 서비스 파일에 등록했던 ExecStart 부분을 새로운 포트에 맞게 수정해야 합니다.

Flask API (메인): ... --bind 127.0.0.1:8110 ...

Flask API (v1): ... --bind 127.0.0.1:8111 ...

Flask API (v2): ... --bind 127.0.0.1:8112 ...

Streamlit: ... --server.port 8101 ...

React: (개발 서버라면) npm start 또는 serve -s build -l 8100

🚨 매우 중요: 경로 기반 라우팅을 위한 앱 수정

React: package.json 파일에 "homepage": "/app"을 추가한 후 npm run build를 다시 실행해야 CSS나 JS 파일 경로가 깨지지 않습니다.

Streamlit: Streamlit을 실행할 때 --server.baseUrlPath /dashboard 옵션을 추가해야 합니다.

예: streamlit run app.py --server.port 8101 --server.headless true --server.baseUrlPath /dashboard

Flask: Blueprint 등을 사용할 때 URL 접두사를 잘 관리해야 합니다.

2. Nginx 설정 활성화 및 재시작
Bash

# 새로운 통합 설정 파일을 활성화합니다.
sudo ln -s /etc/nginx/sites-available/alpha-project.conf /etc/nginx/sites-enabled/

# Nginx 설정에 문법 오류가 없는지 반드시 테스트합니다.
sudo nginx -t
# "syntax is ok", "test is successful" 메시지가 나와야 합니다.

# 오류가 없으면 Nginx를 재시작하여 설정을 적용합니다.
sudo systemctl restart nginx
✅ 최종 확인
이제 웹 브라우저를 열고 각 주소로 접속하여 모든 서비스가 의도대로 동작하는지 확인합니다.

http://10.244.222.222/

"알파 프로젝트 포털" 메인 화면이 나타나야 합니다.

http://10.244.222.222/app/

React 앱이 정상적으로 렌더링되어야 합니다. (CSS/JS 로딩 확인)

http://10.244.222.222/dashboard/

Streamlit 대시보드가 나타나야 합니다.

http://10.244.222.222/service/

메인 Flask 서비스의 화면이 보여야 합니다.

http://10.244.222.222/service/api/v1/some-data

8111번 포트로 실행된 Flask API v1의 응답이 와야 합니다.

http://10.244.222.222/service/api/v2/some-data

8112번 포트로 실행된 Flask API v2의 응답이 와야 합니다.