isfinite not supported 오류는 데이터에 무한값(inf), 음의 무한값(-inf), 또는 NaN(Not a Number) 값이 포함되어 있을 때 발생합니다. 이는 예측값이나 실제값에서 발생할 수 있습니다.

아래는 문제를 해결하기 위한 단계별 접근 방법입니다.

1. 데이터 확인
먼저, features, actual_values, predicted_values에 무한값(inf)이나 NaN 값이 포함되어 있는지 확인합니다.

확인 코드:
python
코드 복사
# Check for invalid values in features
print("Checking features...")
print(f"NaN in features: {np.isnan(features).any()}")
print(f"Inf in features: {np.isinf(features).any()}")

# Check for invalid values in actual values
print("Checking actual values...")
print(f"NaN in actual values: {np.isnan(actual_values).any()}")
print(f"Inf in actual values: {np.isinf(actual_values).any()}")

# Check for invalid values in predicted values
print("Checking predicted values...")
print(f"NaN in predicted values: {np.isnan(predicted_values).any()}")
print(f"Inf in predicted values: {np.isinf(predicted_values).any()}")
2. 문제 해결
Case 1: features에 문제가 있는 경우
features에서 NaN 또는 무한값이 발견되면, 이를 처리해야 합니다.

해결 방법:
NaN 값을 0으로 대체하거나, 열의 평균값으로 대체:

python
코드 복사
features = np.nan_to_num(features, nan=0.0)  # NaN을 0으로 대체
무한값을 최대값 또는 최소값으로 대체:

python
코드 복사
features = np.where(np.isinf(features), np.nan, features)  # 무한값을 NaN으로 변경
features = np.nan_to_num(features, nan=0.0)  # NaN을 0으로 대체
Case 2: actual_values에 문제가 있는 경우
actual_values에서 NaN 또는 무한값이 발견되면, 이를 처리해야 합니다.

해결 방법:
NaN을 0으로 대체:

python
코드 복사
actual_values = np.nan_to_num(actual_values, nan=0.0)
무한값을 최대값 또는 최소값으로 대체:

python
코드 복사
actual_values = np.where(np.isinf(actual_values), np.nan, actual_values)
actual_values = np.nan_to_num(actual_values, nan=0.0)
Case 3: predicted_values에 문제가 있는 경우
모델 예측값(predicted_values)에서 무한값이나 NaN이 발생하면, 입력 데이터의 품질 문제일 가능성이 높습니다.

해결 방법:
모델 예측 전에 입력 데이터의 무결성을 확인하고 처리:

python
코드 복사
features = np.nan_to_num(features, nan=0.0)
features = np.where(np.isinf(features), np.nan, features)
features = np.nan_to_num(features, nan=0.0)
예측 후 결과 값 처리:

python
코드 복사
predicted_values = np.nan_to_num(predicted_values, nan=0.0)
predicted_values = np.where(np.isinf(predicted_values), np.nan, predicted_values)
predicted_values = np.nan_to_num(predicted_values, nan=0.0)
3. 수정된 코드
아래는 무한값과 NaN 값을 처리하는 코드를 포함한 전체 수정본입니다:

python
코드 복사
# Load the trained model
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# Fetch the multi-row data from the database
data = fetch_data_from_db("PRealAandB")  # Fetch PRealAandB multi-row data

# Validate the data
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# Ensure the data is in the correct format (numpy array)
if not isinstance(data, np.ndarray):
    data = np.array(data)

# Extract columns
timestamps = data[:, 0]  # First column (timestamps)
features = data[:, 2:5]  # Columns 3~5 (features for prediction)
actual_values = data[:, 1]  # Column 2 (actual values)

# Handle NaN and infinite values in features and actual values
features = np.nan_to_num(features, nan=0.0)
features = np.where(np.isinf(features), np.nan, features)
features = np.nan_to_num(features, nan=0.0)

actual_values = np.nan_to_num(actual_values, nan=0.0)
actual_values = np.where(np.isinf(actual_values), np.nan, actual_values)
actual_values = np.nan_to_num(actual_values, nan=0.0)

# Make predictions for all rows
predicted_values = model.predict(features)
predicted_values = np.nan_to_num(predicted_values, nan=0.0)
predicted_values = np.where(np.isinf(predicted_values), np.nan, predicted_values)
predicted_values = np.nan_to_num(predicted_values, nan=0.0)

# Plot the combined chart
plt.figure(figsize=(12, 6))

# Plot actual values as a continuous green line
plt.plot(timestamps, actual_values, color="green", label="Actual Values", linestyle="-", marker="o")

# Plot predicted values as a continuous blue line
plt.plot(timestamps, predicted_values, color="blue", label="Predicted Values", linestyle="--", marker="o")

# Fill the ±0.1 range around actual values
plt.fill_between(
    timestamps,
    actual_values - 0.1,
    actual_values + 0.1,
    color="green",
    alpha=0.2,
    label="Actual ± 0.1 Range"
)

# Chart settings
plt.title("Prediction vs Actual Values")
plt.xlabel("Time")
plt.ylabel("Value")
plt.xticks(rotation=45)
plt.legend()
plt.grid()

# Show the chart
plt.show()

# Print details for all rows
for i in range(len(data)):
    print(f"Row {i + 1} - Timestamp: {timestamps[i]}")
    print(f"  Predicted Value: {predicted_values[i]:.2f}")
    print(f"  Actual Value: {actual_values[i]:.2f}")
    print(f"  Error: {abs(predicted_values[i] - actual_values[i]):.2f}")
결과
NaN과 무한값 처리:

입력(features), 실제값(actual_values), 예측값(predicted_values)에서 NaN 및 무한값을 0으로 대체.
시각화:

모든 데이터가 정리되어 문제없이 차트가 생성됩니다.
오류 예방:
