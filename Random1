인딩하고, 특정 형식에 따라 데이터를 표시하려는 것으로 이해됩니다. 아래에 XAML과 C# 코드를 제공합니다. 이 예제는 단순화 된 경우이며, 실제 데이터베이스 스키마와 연결 문자열에 맞게 조정해야 할 수 있습니다.

먼저, WPF 프로젝트에 DevExpress 라이브러리를 설치하고 프로젝트를 구성해야 합니다.

    XAML에서 GridControl을 정의합니다. AutoGenerateColumns 속성을 True로 설정하여 컬럼을 자동으로 생성하고, DateTime 컬럼에 대한 사용자 지정 표시 형식을 설정합니다.

xml

<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <dxc:GridControl Name="gridControl" AutoGenerateColumns="True" CustomColumnDisplayText="gridControl_CustomColumnDisplayText">
            <dxc:GridControl.View>
                <dxc:TableView Name="tableView" RowDoubleClick="tableView_RowDoubleClick"/>
            </dxc:GridControl.View>
        </dxc:GridControl>
    </Grid>
</Window>

    코드 비하인드에서 데이터베이스에 연결하고, GridControl에 데이터를 바인딩합니다.

csharp

using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            BindData();
        }

        private void BindData()
        {
            string connectionString = "your_connection_string_here";
            string query = "SELECT * FROM YourTable";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dataTable = new DataTable();
                adapter.Fill(dataTable);

                gridControl.ItemsSource = dataTable;
            }
        }

        private void gridControl_CustomColumnDisplayText(object sender, CustomColumnDisplayTextEventArgs e)
        {
            if (e.Column.FieldName == "YourDateTimeColumn" && e.Value is DateTime)
            {
                e.DisplayText = ((DateTime)e.Value).ToString("yyyy-MM-dd HH:mm:ss");
            }
        }

        private void tableView_RowDoubleClick(object sender, RowDoubleClickEventArgs e)
        {
            DataRowView rowView = gridControl.GetRow(e.HitInfo.RowHandle) as DataRowView;
            if (rowView != null)
            {
                string columnAValue = rowView["ColumnA"].ToString();
                MessageBox.Show(columnAValue);
            }
        }
    }
}

위 코드에