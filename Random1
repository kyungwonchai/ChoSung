이고 형님, 죄송합니다! 제가 자꾸 코드를 줄여서 드리는 바람에 바쁘신데 더 헷갈리게 해드렸네요. 이번에는 절대 생략 없이, 처음부터 끝까지 모든 내용이 다 들어있는 진짜 최종 완성본을 드리겠습니다.

이 코드 전체를 복사해서 MainActivity.kt에 그대로 붙여넣으시면 됩니다.

## MainActivity.kt 최종 전체 코드 (생략 없음)
Kotlin

package com.kyungwon.reellistviewer

import android.content.Context
import android.content.SharedPreferences
import android.graphics.Typeface
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.text.Spannable
import android.text.SpannableString
import android.text.style.ForegroundColorSpan
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.GestureDetectorCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.core.view.setMargins
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.kyungwon.reellistviewer.databinding.ActivityMainBinding
import jcifs.CIFSContext
import jcifs.config.PropertyConfiguration
import jcifs.context.BaseContext
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.util.Properties

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener, SensorEventListener {

    private lateinit var binding: ActivityMainBinding

    // --- PC 공유폴더 접속 정보 ---
    private val SMB_IP = "192.1.1.5"
    private val SMB_SHARED_FOLDER = "tempshare"
    private val SMB_USER = "win10"
    private val SMB_PASS = "tltmxpa2@"

    // --- UI 상태 관리 변수 ---
    private var totalPdfPages = 0
    private val skippedButtons = mutableSetOf<Int>()
    private val currentButtons = mutableListOf<Button>()
    private var selectedButton: Button? = null
    private lateinit var gestureDetector: GestureDetectorCompat
    private var tappedButton: Button? = null

    // --- 지자계 센서 관련 변수 ---
    private lateinit var sensorManager: SensorManager
    private val accelerometerReading = FloatArray(3)
    private val magnetometerReading = FloatArray(3)
    private val rotationMatrix = FloatArray(9)
    private val orientationAngles = FloatArray(3)
    private var isGeomagneticModeOn = false
    private var currentDirection = Direction.OTHER

    // --- 세션 유지를 위한 SharedPreferences ---
    private lateinit var prefs: SharedPreferences
    private val PREFS_FILENAME = "com.kyungwon.reellistviewer.prefs"
    private val KEY_LAST_LINE = "last_selected_line"

    enum class Direction { EAST, WEST, OTHER }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        hideSystemUI()

        // SharedPreferences 초기화
        prefs = getSharedPreferences(PREFS_FILENAME, Context.MODE_PRIVATE)

        setupGestureDetector()
        setupEventListeners()
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager

        // 앱 시작 시 마지막 세션 자동 로드
        loadLatestFileFromLastLine()
    }

    override fun onResume() {
        super.onResume()
        hideSystemUI()
        sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
        sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        sensorManager.unregisterListener(this)
    }

    private fun hideSystemUI() {
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val controller = WindowInsetsControllerCompat(window, binding.root)
        controller.hide(WindowInsetsCompat.Type.systemBars())
        controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
    }

    private fun setupGestureDetector() {
        gestureDetector = GestureDetectorCompat(this, object : GestureDetector.SimpleOnGestureListener() {
            override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
                tappedButton?.let { onPageButtonClick(it) }
                return true
            }
            override fun onDoubleTap(e: MotionEvent): Boolean {
                tappedButton?.let {
                    onPageButtonClick(it)
                    binding.pdfView.resetZoom()
                    Toast.makeText(this@MainActivity, "화면에 맞춤", Toast.LENGTH_SHORT).show()
                }
                return true
            }
            override fun onLongPress(e: MotionEvent) {
                tappedButton?.let { onPageButtonLongClick(it) }
            }
        })
    }

    private fun setupEventListeners() {
        binding.btnOpenFile.setOnLongClickListener {
            lifecycleScope.launch(Dispatchers.IO) {
                showLineSelectionDialog()
            }
            true
        }
        binding.compassView.setOnLongClickListener {
            isGeomagneticModeOn = !isGeomagneticModeOn
            val modeText = if (isGeomagneticModeOn) "On" else "Off"
            Toast.makeText(this, "지자계 의존 모드: $modeText", Toast.LENGTH_SHORT).show()
            binding.compassView.setGeomagneticMode(isGeomagneticModeOn)
            if (!isGeomagneticModeOn) {
                currentDirection = Direction.OTHER
            }
            updateButtonsAndUI()
            true
        }
    }

    private fun loadLatestFileFromLastLine() {
        val lastLine = prefs.getString(KEY_LAST_LINE, null)
        if (lastLine.isNullOrEmpty()) {
            Toast.makeText(this, "라인을 선택해주세요.", Toast.LENGTH_SHORT).show()
            return
        }

        Toast.makeText(this, "'$lastLine'의 최신 파일을 불러옵니다...", Toast.LENGTH_SHORT).show()
        lifecycleScope.launch(Dispatchers.IO) {
            try {
                val allFiles = listSmbFiles()
                val latestFile = allFiles
                    .filter { it.name.startsWith("${lastLine}_") }
                    .maxByOrNull { it.lastModified() }

                if (latestFile != null) {
                    loadPdfFromSmbFile(latestFile)
                } else {
                    withContext(Dispatchers.Main) {
                        Toast.makeText(this@MainActivity, "'$lastLine'에 파일이 없습니다.", Toast.LENGTH_SHORT).show()
                    }
                }
            } catch (e: Exception) {
                Log.e("SmbTask", "자동 로드 실패", e)
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "자동 로드 실패: ${e.message}", Toast.LENGTH_LONG).show()
                }
            }
        }
    }

    private suspend fun showLineSelectionDialog() {
        try {
            val allFiles = listSmbFiles()
            val lineNames = allFiles
                .mapNotNull { it.name.split('_').firstOrNull() }
                .distinct()
                .sorted()

            if (lineNames.isEmpty()) {
                withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "PDF 파일을 찾을 수 없습니다.", Toast.LENGTH_SHORT).show() }
                return
            }

            withContext(Dispatchers.Main) {
                AlertDialog.Builder(this@MainActivity)
                    .setTitle("라인 선택")
                    .setItems(lineNames.toTypedArray()) { _, which ->
                        val selectedLine = lineNames[which]
                        prefs.edit().putString(KEY_LAST_LINE, selectedLine).apply()
                        lifecycleScope.launch(Dispatchers.IO) {
                            showReelListDialog(selectedLine, allFiles)
                        }
                    }
                    .show()
            }

        } catch (e: Exception) {
            Log.e("SmbTask", "라인 목록 조회 실패", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "라인 목록 조회 실패: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    private suspend fun showReelListDialog(selectedLine: String, allFiles: List<SmbFile>) {
        val filesInLine = allFiles
            .filter { it.name.startsWith("${selectedLine}_") }
            .sortedByDescending { it.lastModified() }

        if (filesInLine.isEmpty()) {
            withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "선택한 라인에 파일이 없습니다.", Toast.LENGTH_SHORT).show() }
            return
        }

        val displayNames = filesInLine.map {
            it.name.removePrefix("${selectedLine}_").removeSuffix(".pdf")
        }

        withContext(Dispatchers.Main) {
            val adapter = ArrayAdapter<SpannableString>(this@MainActivity, android.R.layout.simple_list_item_1)
            displayNames.forEachIndexed { index, name ->
                val spannable = SpannableString(name)
                if (index == 0) {
                    spannable.setSpan(ForegroundColorSpan(ContextCompat.getColor(this@MainActivity, android.R.color.holo_blue_dark)), 0, name.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)
                }
                adapter.add(spannable)
            }

            AlertDialog.Builder(this@MainActivity)
                .setTitle("릴리스트 선택 ($selectedLine)")
                .setAdapter(adapter) { _, which ->
                    val selectedFile = filesInLine[which]
                    lifecycleScope.launch(Dispatchers.IO) {
                        loadPdfFromSmbFile(selectedFile)
                    }
                }
                .show()
        }
    }

    private suspend fun listSmbFiles(): List<SmbFile> {
        val smbUrl = "smb://$SMB_IP/$SMB_SHARED_FOLDER/"
        val properties = Properties().apply {
            put("jcifs.smb.client.minVersion", "SMB300")
            put("jcifs.smb.client.maxVersion", "SMB311")
        }
        val config = PropertyConfiguration(properties)
        val cifsContext: CIFSContext = BaseContext(config)
        val auth = NtlmPasswordAuthenticator(null, SMB_USER, SMB_PASS)
        val context = cifsContext.withCredentials(auth)
        val dir = SmbFile(smbUrl, context)
        return dir.listFiles { f -> f.name.endsWith(".pdf", ignoreCase = true) }.toList()
    }

    override fun loadComplete(nbPages: Int) {
        totalPdfPages = nbPages
        skippedButtons.clear()
        selectedButton = null
        binding.pageButtonContainer.visibility = View.VISIBLE
        isGeomagneticModeOn = false
        binding.compassView.setGeomagneticMode(false)
        updateButtonsAndUI()
    }

    private fun updateButtonsAndUI() {
        var requiredLogicalButtons=0;var physicalPageCounter=0;var logicalButtonCounter=0
        while(physicalPageCounter<totalPdfPages){logicalButtonCounter++;if(!skippedButtons.contains(logicalButtonCounter)){physicalPageCounter++}};requiredLogicalButtons=logicalButtonCounter
        val currentButtonCount=currentButtons.size
        var newButtonCount=if(requiredLogicalButtons%2!=0)requiredLogicalButtons+1 else requiredLogicalButtons
        if(totalPdfPages>0&&newButtonCount==0)newButtonCount=2;newButtonCount=maxOf(newButtonCount,currentButtonCount)
        regenerateButtons(newButtonCount)
        updateAllButtonStyles()
    }

    private fun regenerateButtons(count: Int) {
        binding.topButtonRow.removeAllViews()
        binding.bottomButtonRow.removeAllViews()
        currentButtons.clear()
        val buttonHeight = dpToPx(44)
        val margin = dpToPx(2)
        val buttonParams = LinearLayout.LayoutParams(0, buttonHeight, 1.0f)
        buttonParams.setMargins(margin)
        binding.ivTopRowArrow.visibility = if (isGeomagneticModeOn) View.VISIBLE else View.GONE
        when(currentDirection) {
            Direction.WEST -> binding.ivTopRowArrow.setImageResource(R.drawable.ic_long_arrow_right)
            Direction.EAST -> binding.ivTopRowArrow.setImageResource(R.drawable.ic_long_arrow_left)
            Direction.OTHER -> binding.ivTopRowArrow.visibility = View.GONE
        }
        val (oddRowContainer, evenRowContainer) = when {
            isGeomagneticModeOn && currentDirection == Direction.WEST -> binding.bottomButtonRow to binding.topButtonRow
            isGeomagneticModeOn && currentDirection == Direction.EAST -> binding.topButtonRow to binding.bottomButtonRow
            else -> binding.topButtonRow to binding.bottomButtonRow
        }
        val isRtl = isGeomagneticModeOn && currentDirection == Direction.EAST
        for (i in 1..count) {
            val button = createPageButton(i, buttonParams.also { it.height = buttonHeight })
            if (i % 2 != 0) {
                if (isRtl) oddRowContainer.addView(button, 0) else oddRowContainer.addView(button)
            } else {
                if (isRtl) evenRowContainer.addView(button, 0) else evenRowContainer.addView(button)
            }
            currentButtons.add(button)
        }
    }

    private fun createPageButton(number: Int, layoutParams: LinearLayout.LayoutParams? = null): Button {
        return Button(this).apply {
            text = number.toString(); tag = number
            layoutParams?.let { this.layoutParams = it }
            textSize = 20f; typeface = Typeface.DEFAULT_BOLD
            setOnTouchListener { view, event ->
                tappedButton = view as Button
                gestureDetector.onTouchEvent(event)
                true
            }
        }
    }

    private fun updateAllButtonStyles() {
        if (isGeomagneticModeOn) {
            for (button in currentButtons) {
                val buttonNumber = button.tag as Int
                val isActiveRow = (currentDirection == Direction.WEST && buttonNumber % 2 != 0) || (currentDirection == Direction.EAST && buttonNumber % 2 == 0)
                when {
                    button == selectedButton -> {
                        button.setBackgroundResource(R.drawable.button_bg_geo_selected)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.white))
                    }
                    skippedButtons.contains(buttonNumber) -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                    }
                    isActiveRow && mapLogicalToPhysical(buttonNumber) in 1..totalPdfPages -> {
                        button.setBackgroundResource(R.drawable.button_bg_geo_active)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    }
                    else -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_normal)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    }
                }
            }
        } else {
            for (button in currentButtons) {
                val buttonNumber = button.tag as Int
                if (button == selectedButton) {
                    button.setBackgroundResource(R.drawable.button_bg_page_selected)
                    button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    continue
                }
                when {
                    skippedButtons.contains(buttonNumber) -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                    }
                    else -> {
                        val physicalPage = mapLogicalToPhysical(buttonNumber)
                        if (physicalPage in 1..totalPdfPages) {
                            button.setBackgroundResource(R.drawable.button_bg_page_normal)
                            button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                        } else {
                            button.setBackgroundResource(R.drawable.button_border_invalid)
                            button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                        }
                    }
                }
            }
        }
    }

    private fun mapLogicalToPhysical(logicalButtonNum: Int): Int {
        val skipsBefore = skippedButtons.count { it < logicalButtonNum }
        return logicalButtonNum - skipsBefore
    }

    private fun onPageButtonClick(button: Button) {
        val buttonNumber = button.tag as Int
        if (skippedButtons.contains(buttonNumber)) {
            Toast.makeText(this, "$buttonNumber 페이지는 스킵되었습니다.", Toast.LENGTH_SHORT).show()
            return
        }
        val physicalPage = mapLogicalToPhysical(buttonNumber)
        if (physicalPage in 1..totalPdfPages) {
            binding.pdfView.jumpTo(physicalPage - 1, false)
            selectedButton = button
            updateAllButtonStyles()
        } else {
            Toast.makeText(this, "내용이 없는 페이지입니다.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun onPageButtonLongClick(view: View) {
        val button = view as Button; val buttonNumber = button.tag as Int
        if (skippedButtons.contains(buttonNumber)) {
            skippedButtons.remove(buttonNumber)
            Toast.makeText(this, "$buttonNumber 페이지 스킵 해제", Toast.LENGTH_SHORT).show()
        } else {
            skippedButtons.add(buttonNumber)
            Toast.makeText(this, "$buttonNumber 페이지 스킵 설정", Toast.LENGTH_SHORT).show()
            if (selectedButton == button) { selectedButton = null }
        }
        updateButtonsAndUI()
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}

    override fun onSensorChanged(event: SensorEvent) {
        if (event.sensor.type == Sensor.TYPE_ACCELEROMETER) {
            System.arraycopy(event.values, 0, accelerometerReading, 0, accelerometerReading.size)
        } else if (event.sensor.type == Sensor.TYPE_MAGNETIC_FIELD) {
            System.arraycopy(event.values, 0, magnetometerReading, 0, magnetometerReading.size)
        }
        SensorManager.getRotationMatrix(rotationMatrix, null, accelerometerReading, magnetometerReading)
        SensorManager.getOrientation(rotationMatrix, orientationAngles)
        val azimuthInDegrees = Math.toDegrees(orientationAngles[0].toDouble()).toFloat()
        val normalizedAzimuth = (azimuthInDegrees + 360) % 360
        binding.compassView.updateBearing(normalizedAzimuth)
        if (isGeomagneticModeOn) {
            var newDirection = currentDirection
            val tolerance = 2.0f
            if (normalizedAzimuth in (270f - tolerance)..(270f + tolerance)) {
                newDirection = Direction.WEST
            } else if (normalizedAzimuth in (90f - tolerance)..(90f + tolerance)) {
                newDirection = Direction.EAST
            }
            if (newDirection != currentDirection) {
                currentDirection = newDirection
                updateButtonsAndUI()
            }
        }
    }

    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }

    private suspend fun loadPdfFromSmbFile(smbFile: SmbFile) {
        withContext(Dispatchers.Main) {
            binding.btnOpenFile.isEnabled = false; binding.btnOpenFile.text = "로딩중..."
        }
        try {
            val tempPdfFile = File(cacheDir, smbFile.name)
            smbFile.inputStream.use { input -> FileOutputStream(tempPdfFile).use { output -> input.copyTo(output) } }
            withContext(Dispatchers.Main) {
                binding.tvFileName.text = smbFile.name.substringBeforeLast(".")
                binding.pdfView.fromFile(tempPdfFile).onLoad(this@MainActivity).onPageError(this@MainActivity).load()
            }
        } catch (e: Exception) { Log.e("SmbTask", "파일 다운로드 실패", e)
        } finally {
            withContext(Dispatchers.Main) {
                binding.btnOpenFile.isEnabled = true; binding.btnOpenFile.text = "Open ReelList"
            }
        }
    }

    private suspend fun showPdfListFromSmb(){val smbUrl="smb://$SMB_IP/$SMB_SHARED_FOLDER/";try{val properties=Properties();properties["jcifs.smb.client.minVersion"]="SMB300";properties["jcifs.smb.client.maxVersion"]="SMB311";val config=PropertyConfiguration(properties);val cifsContext:CIFSContext=BaseContext(config);val auth=NtlmPasswordAuthenticator(null,SMB_USER,SMB_PASS);val context=cifsContext.withCredentials(auth);val dir=SmbFile(smbUrl,context);val pdfFiles=dir.listFiles{f->f.name.endsWith(".pdf",ignoreCase=true)};if(pdfFiles.isNullOrEmpty()){withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더에 PDF 파일이 없습니다.",Toast.LENGTH_SHORT).show()};return};val fileNames=pdfFiles.map{it.name}.toTypedArray();withContext(Dispatchers.Main){AlertDialog.Builder(this@MainActivity).setTitle("PDF 파일 선택").setItems(fileNames){_,which->val selectedFile=pdfFiles[which];lifecycleScope.launch(Dispatchers.IO){loadPdfFromSmbFile(selectedFile)}}.setNegativeButton("취소",null).show()}}catch(e:Exception){Log.e("SmbTask","SMB 연결 실패",e);withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더 연결 실패\n오류: ${e.message}",Toast.LENGTH_LONG).show()}}}