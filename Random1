a는 Where 메서드로 필터링된 **컬렉션(List)**이며, 각 데이터의 속성은 LineData 클래스의 프로퍼티로 접근할 수 있습니다.

접근 방법
lData 내부 값 접근 방법
foreach 반복문:
각 요소의 값을 반복적으로 가져올 수 있습니다.
csharp
코드 복사
foreach (var item in lData)
{
    Console.WriteLine($"ModelName: {item.ModelName}, MP1: {item.MP1}, Timestamp: {item.Timestamp}");
}
LINQ로 특정 속성 가져오기:
예를 들어, ModelName 속성만 가져오고 싶다면:
csharp
코드 복사
var modelNames = lData.Select(x => x.ModelName).ToList();
foreach (var name in modelNames)
{
    Console.WriteLine(name);
}
직접 인덱스 접근 (특정 요소):
예를 들어, lData의 첫 번째 요소의 속성 값:
csharp
코드 복사
if (lData.Count > 0)
{
    var firstItem = lData[0];
    Console.WriteLine($"ModelName: {firstItem.ModelName}, MP1: {firstItem.MP1}");
}
ForEach 메서드 사용 (List 전용):
List에 포함된 모든 항목에 대해 동작을 수행.
csharp
코드 복사
lData.ForEach(item =>
{
    Console.WriteLine($"ModelName: {item.ModelName}, MP1: {item.MP1}, Timestamp: {item.Timestamp}");
});
데이터 예시
LineData 클래스
csharp
코드 복사
public class LineData
{
    public string ModelName { get; set; }
    public DateTime Timestamp { get; set; }
    public double MP1 { get; set; }
    public double MP2 { get; set; }
    public double MP3 { get; set; }
    public double MP4 { get; set; }
    public double MP5 { get; set; }
}
예제 코드
csharp
코드 복사
var data = new List<LineData>
{
    new LineData { ModelName = "ModelL1", Timestamp = DateTime.Now, MP1 = 0.1, MP2 = 0.2, MP3 = 0.3, MP4 = 0.4, MP5 = 0.5 },
    new LineData { ModelName = "ModelR1", Timestamp = DateTime.Now, MP1 = 0.15, MP2 = 0.25, MP3 = 0.35, MP4 = 0.45, MP5 = 0.55 },
    new LineData { ModelName = "ModelL2", Timestamp = DateTime.Now, MP1 = 0.2, MP2 = 0.3, MP3 = 0.4, MP4 = 0.5, MP5 = 0.6 }
};

// L 모델 필터링
var lData = data.Where(d => d.ModelName.EndsWith("L")).ToList();

// lData의 모든 내부 값 출력
foreach (var item in lData)
{
    Console.WriteLine($"ModelName: {item.ModelName}, MP1: {item.MP1}, Timestamp: {item.Timestamp}");
}
출력 예시
yaml
코드 복사
ModelName: ModelL1, MP1: 0.1, Timestamp: 2025-01-11 15:30:00
ModelName: ModelL2, MP1: 0.2, Timestamp: 2025-01-11 15:30:01
정리
foreach: 가장 직관적으로 데이터를 순회하며 내부 값을 가져올 수 있습니다.
LINQ: 특정 속성만 선택하거나 필터링된 값을 조작할 때 유용합니다.