private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
{
    while (true)
    {
        try
        {
            long freeSpace = await Task.Run(() => _fileCleaner.GetDriveFreeSpace(driveName));
            List<FileInfo> filesToDelete;

            if (freeSpace <= MinimumFreeSpace)
            {
                filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension, forceDelete: true));
                LogRecentActivity("MonitorAndDisplayFilesToDelete", $"용량이 {freeSpace / (1024 * 1024 * 1024)} GB 남아서 강제 삭제를 진행합니다.");
            }
            else
            {
                filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension));
                if (filesToDelete.Count > 0)
                {
                    LogRecentActivity("MonitorAndDisplayFilesToDelete", "삭제를 진행합니다.");
                }
            }

            Dispatcher.Invoke(() => DisplayFilesToDelete(filesToDelete));
            await _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath, forceDelete: freeSpace <= MinimumFreeSpace);

            await UpdateFolderStatistics(folderPath, fileExtension);
            await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
        }
        catch (Exception ex)
        {
            LogError("MonitorAndDisplayFilesToDelete", "모니터링 중 오류 발생: " + ex.Message);
        }
    }
}

private async Task UpdateFolderStatistics(string folderPath, string fileExtension)
{
    try
    {
        var files = _fileCleaner.GetFiles(folderPath, fileExtension);
        long totalSize = files.Sum(f => f.Length);

        if (totalSize > 0 && totalSize != _fileCleaner.lastLoggedSize) // 총 크기가 0인 경우와 중복 크기 로그 생성을 피함
        {
            _fileCleaner.lastLoggedSize = totalSize;
            LogRecentActivity("UpdateFolderStatistics", $"폴더: {folderPath}, 총 크기: {totalSize / (1024 * 1024)} MB - 폴더의 총 크기 업데이트");
        }
    }
    catch (Exception ex)
    {
        LogError("UpdateFolderStatistics", "폴더 통계 업데이트 실패: " + ex.Message);
    }
}

private void LogRecentActivity(string functionName, string message)
{
    Dispatcher.Invoke(() =>
    {
        string logMessage = $"{DateTime.Now}: [{functionName}] {message}";
        lstRecentLogs.Items.Add(logMessage);
        if (lstRecentLogs.Items.Count > 200)
        {
            lstRecentLogs.Items.RemoveAt(0);
        }
    });
}

private void LogDeletionActivity(string functionName, string message)
{
    Dispatcher.Invoke(() =>
    {
        string logMessage = $"{DateTime.Now}: [{functionName}] {message}";
        lstDeletionLogs.Items.Add(logMessage);
        if (lstDeletionLogs.Items.Count > 200)
        {
            lstDeletionLogs.Items.RemoveAt(0);
        }
    });
}

private void LogError(string functionName, string message)
{
    Dispatcher.Invoke(() =>
    {
        string logMessage = $"{DateTime.Now}: [ERROR] [{functionName}] {message}";
        lstRecentLogs.Items.Add(logMessage);
        if (lstRecentLogs.Items.Count > 200)
        {
            lstRecentLogs.Items.RemoveAt(0);
        }
    });
}
