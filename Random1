래는 요청하신 조건에 맞춰 WD가 포함된 보낸값은 전부 기록하고, WD가 포함되지 않은 경우에는 시간 흐름에 따라 값이 변경될 때마다 기록하도록 한 코드입니다. 또한, GridControl에 전체 데이터를 표시할지 여부를 선택할 수 있는 체크박스를 추가했습니다. 체크박스가 선택된 경우에는 시트1과 시트2 데이터를 각각 나눠서 표시하고, 체크하지 않은 경우에는 필터링된 데이터만 전체 화면에 표시됩니다.

기본 폴더는 c:\prod_file_logs로 설정되어 있습니다.

전체 코드 (C# WPF, DevExpress)
XAML 코드 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="FileAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="File Analysis" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="Select Folder" Click="SelectFolder_Click" Width="100" Margin="5"/>
            <Button Content="Analyze" Click="Analyze_Click" Width="100" Margin="5"/>
            <CheckBox Content="Show All Data" Name="ShowAllDataCheckBox" Margin="10,0" Checked="ShowAllDataCheckBox_Checked" Unchecked="ShowAllDataCheckBox_Unchecked"/>
            <TextBlock Text="Selected Folder:" VerticalAlignment="Center" Margin="10,0"/>
            <TextBlock x:Name="SelectedFolderText" VerticalAlignment="Center" Margin="5,0"/>
        </StackPanel>

        <!-- 전체 데이터 GridControl (Sheet1) -->
        <dxg:GridControl Name="Sheet1Grid" Grid.Row="1" AutoGenerateColumns="AddNew" Margin="10,30,10,10" Visibility="Collapsed">
            <dxg:GridControl.View>
                <dxg:TableView />
            </dxg:GridControl.View>
        </dxg:GridControl>

        <!-- 필터링된 데이터 GridControl (Sheet2) -->
        <dxg:GridControl Name="Sheet2Grid" Grid.Row="2" AutoGenerateColumns="AddNew" Margin="10,30,10,10">
            <dxg:GridControl.View>
                <dxg:TableView />
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;

namespace FileAnalysisApp
{
    public partial class MainWindow : Window
    {
        private string selectedFolderPath = @"c:\prod_file_logs";
        public ObservableCollection<LogEntry> Sheet1Entries { get; set; } = new ObservableCollection<LogEntry>();
        public ObservableCollection<LogEntry> Sheet2Entries { get; set; } = new ObservableCollection<LogEntry>();

        public MainWindow()
        {
            InitializeComponent();
            Sheet1Grid.ItemsSource = Sheet1Entries;
            Sheet2Grid.ItemsSource = Sheet2Entries;
            ShowAllDataCheckBox.IsChecked = false;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = selectedFolderPath;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    selectedFolderPath = dialog.SelectedPath;
                    SelectedFolderText.Text = selectedFolderPath;
                }
            }
        }

        private void Analyze_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFolderPath))
            {
                System.Windows.MessageBox.Show("Please select a folder first.");
                return;
            }

            Sheet1Entries.Clear();
            Sheet2Entries.Clear();
            AnalyzeFiles(selectedFolderPath);
        }

        private void AnalyzeFiles(string folderPath)
        {
            var threeDaysAgo = DateTime.Now.AddDays(-3);
            var responseTracker = new Dictionary<string, string>();
            var sheet1Data = new List<LogEntry>();
            var sheet2Data = new List<LogEntry>();
            
            var timePattern = new Regex(@"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}");
            var keyPattern = new Regex(@"고유키:[^\s]+");
            var sendPattern = new Regex(@"보낸값:[^\s]+");
            var recvPattern = new Regex(@"받은값:[^\s]+");

            foreach (var filePath in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
            {
                var fileCreationTime = File.GetCreationTime(filePath);
                if (fileCreationTime < threeDaysAgo) continue;

                string fileName = Path.GetFileName(filePath);
                var lines = File.ReadAllLines(filePath);
                for (int i = 0; i < lines.Length; i++)
                {
                    var sendMatch = sendPattern.Match(lines[i]);
                    if (sendMatch.Success)
                    {
                        var timeMatch = timePattern.Match(lines[i]);
                        var keyMatch = keyPattern.Match(lines[i]);
                        var recvMatch = (i + 1 < lines.Length) ? recvPattern.Match(lines[i + 1]) : null;

                        if (timeMatch.Success && keyMatch.Success && recvMatch != null && recvMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            string uniqueKey = keyMatch.Value.Split(':')[1];
                            string sendValue = sendMatch.Value.Split(':')[1];
                            string recvValue = recvMatch.Value.Split(':')[1];
                            string combinedKey = $"{sendValue}_{recvValue}";

                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");

                            // Sheet1에 모든 데이터 추가
                            sheet1Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                UniqueKey = uniqueKey,
                                SentValue = sendValue,
                                ReceivedValue = recvValue,
                                AdditionalData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD"
                            });

                            // 필터링 조건: WD 포함시 모두 기록, 없는 경우 변경 시에만 추가
                            if (sendValue.Contains("WD") || combinedKey.Length <= 50)
                            {
                                if (sendValue.Contains("WD") || !responseTracker.ContainsKey(sendValue) || responseTracker[sendValue] != recvValue)
                                {
                                    responseTracker[sendValue] = recvValue;
                                    sheet2Data.Add(new LogEntry
                                    {
                                        Filename = fileName,
                                        Time = formattedTime,
                                        UniqueKey = uniqueKey,
                                        SentValue = sendValue,
                                        ReceivedValue = recvValue,
                                        AdditionalData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD"
                                    });
                                }
                            }
                        }
                    }
                    else
                    {
                        // 기타 파일 처리 (시간 기반 데이터)
                        var timeMatch = timePattern.Match(lines[i]);
                        if (timeMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");
                            string remainingData = lines[i].Substring(timeMatch.Length).Trim();

                            // Sheet1과 Sheet2에 기타 로그 추가
                            sheet1Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                AdditionalData = remainingData
                            });
                            sheet2Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                AdditionalData = remainingData
                            });
                        }
                    }
                }
            }

            // 시간 순으로 정렬 후 Sheet1Entries 및 Sheet2Entries에 추가
            foreach (var entry in sheet1Data.OrderBy(e => e.Time))
                Sheet1Entries.Add(entry);

            foreach (var entry in sheet2Data.OrderBy(e => e.Time))
                Sheet2Entries.Add(entry);
        }

        private void ShowAllDataCheckBox_Checked(object sender, RoutedEventArgs e)
        {
            Sheet1Grid.Visibility = Visibility.Visible;
            Sheet2Grid.SetValue(Grid.RowProperty, 2);
        }

        private void ShowAllDataCheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            Sheet1Grid.Visibility = Visibility.Collapsed;
            Sheet2Grid.SetValue(Grid.RowProperty, 1);
        }
    }

    public class LogEntry
    {
        public string Filename { get; set; }
        public string Time { get; set; }
        public string UniqueKey { get; set; }
        public string SentValue { get; set; }
        public string ReceivedValue { get; set; }
        public string AdditionalData { get; set; }
    }
}
코드 설명
폴더 선택 기능: SelectFolder_Click 메서드에서 기본 폴더 c:\prod_file_logs를 설정하고, 폴더 선택 창을 띄워 사용자가 폴더를 선택할 수 있게 합니다.

분석 및 데이터 처리:

AnalyzeFiles 메서드에서 DetailCMD 파일을 분석하여 WD가 포함된 보낸값은 모두 기록하고, WD가 포함되지 않은 경우 시간 흐름에서 응답이 변경될 때마다 기록합니다.
필터링된 데이터를 sheet2Data에 저장하고, 전체 데이터를 sheet1Data에 저장한 후 정렬하여 Sheet1Entries와 Sheet2Entries에 추가합니다.
체크박스를 통한 전체 데이터 표시 여부:

ShowAllDataCheckBox_Checked 이벤트에서는 Sheet1Grid와 Sheet2Grid를 각각 화면에 나누어 표시합니다.
ShowAllDataCheckBox_Unchecked 이벤트에서는 Sheet2Grid만 전체 화면에 표시합니다.
결과 출력:

Sheet1Grid는 전체 데이터를, Sheet2Grid는 필터링된 데이터를 표시합니다.
이 코드로 두 개의 GridControl을 활용해, 전체 데이터와 필터링된 데이터를 WPF UI에 표시할 수 있습니다.






지금까지의 대화가 도움이 되었나요?





야 니거전에 내한테준 파이썬이랑달라  F열이 Length/RemainingData로 되어야한다고 아씨발 싹다시 




