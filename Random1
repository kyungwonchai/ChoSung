니다. 파일을 주기적으로 복사하고, 진행 상황을 리스트박스에 표시하는 WPF 애플리케이션을 작성해보겠습니다.

요구사항:
C:\Agent\1.jpg 파일을 5초마다 F:\ABCD\yyyyMMddHH 폴더에 복사.
진행 사항을 리스트박스에 표시.
전체 코드:
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> _logMessages = new ObservableCollection<string>();
        private readonly string _sourceFilePath = @"C:\Agent\1.jpg";
        private readonly string _destinationRootPath = @"F:\ABCD";
        private readonly string _logFilePath = @"F:\filelog.txt";
        private bool _isRunning = false;

        public MainWindow()
        {
            InitializeComponent();
            LogListBox.ItemsSource = _logMessages;
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_isRunning)
                {
                    MessageBox.Show("Process is already running.");
                    return;
                }

                _isRunning = true;
                AddLog("File copy process started.");
                Task.Run(CopyFilesAsync);
            }
            catch (Exception ex)
            {
                var errorMessage = $"Error starting process: {ex.Message}";
                AddLog(errorMessage);
                LogToFile(errorMessage);
                Debug.WriteLine(errorMessage);
            }
        }

        private async Task CopyFilesAsync()
        {
            try
            {
                while (_isRunning)
                {
                    var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                    var folderName = DateTime.Now.ToString("yyyyMMddHH");
                    var fileName = $"{timestamp}.jpg";
                    var destinationPath = Path.Combine(_destinationRootPath, folderName, fileName);

                    try
                    {
                        AddLog($"Attempting to create directory for {destinationPath}");
                        var folderPath = Path.GetDirectoryName(destinationPath);
                        if (!Directory.Exists(folderPath))
                        {
                            Directory.CreateDirectory(folderPath);
                        }

                        AddLog($"Checking if source file exists: {_sourceFilePath}");
                        if (File.Exists(_sourceFilePath))
                        {
                            AddLog($"Copying file to {destinationPath}");
                            File.Copy(_sourceFilePath, destinationPath, true);
                            var logMessage = $"File copied to: {destinationPath}";
                            Dispatcher.Invoke(() => AddLog(logMessage));
                            LogToFile(logMessage);
                        }
                        else
                        {
                            var errorMessage = $"Source file not found: {_sourceFilePath}";
                            Dispatcher.Invoke(() => AddLog(errorMessage));
                            LogToFile(errorMessage);
                            _isRunning = false;
                        }

                        Dispatcher.Invoke(() =>
                        {
                            if (_logMessages.Count > 200)
                            {
                                _logMessages.RemoveAt(0);
                            }
                        });
                    }
                    catch (Exception ex)
                    {
                        var errorMessage = $"Error during file copy at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                        Dispatcher.Invoke(() => AddLog(errorMessage));
                        LogToFile(errorMessage);
                        Debug.WriteLine(errorMessage);
                        _isRunning = false;
                    }

                    await Task.Delay(5000); // 5초 대기
                }

                Dispatcher.Invoke(() => AddLog("File copy process stopped."));
            }
            catch (Exception ex)
            {
                var errorMessage = $"Error in file copy loop at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                Dispatcher.Invoke(() => AddLog(errorMessage));
                LogToFile(errorMessage);
                Debug.WriteLine(errorMessage);
            }
        }

        private void AddLog(string message)
        {
            _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {message}");
        }

        private void LogToFile(string message)
        {
            try
            {
                using (StreamWriter writer = new StreamWriter(_logFilePath, true))
                {
                    writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
                }
            }
            catch (Exception ex)
            {
                var errorMessage = $"Log file writing error at {DateTime.Now:HH:mm:ss} - {ex.Message} - StackTrace: {ex.StackTrace}";
                Dispatcher.Invoke(() => _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {errorMessage}"));
                Debug.WriteLine(errorMessage);
            }
        }

        private void StopButton_Click(object sender, RoutedEventArgs e)
        {
            _isRunning = false;
            AddLog("File copy process stopping...");
        }
    }
}
XAML 파일 (MainWindow.xaml):
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Copy" Height="350" Width="525">
    <Grid>
        <ListBox x:Name="LogListBox" HorizontalAlignment="Left" Height="200" VerticalAlignment="Top" Width="500" Margin="10,10,0,0"/>
        <Button Content="Start" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" Margin="10,220,0,0" Click="StartButton_Click"/>
        <Button Content="Stop" HorizontalAlignment="Left" VerticalAlignment="Top" Width="75" Margin="100,220,0,0" Click="StopButton_Click"/>
    </Grid>
</Window>
주요 변경 사항:
비동기 작업: Task.Run을 사용하여 파일 복사 작업을 비동기적으로 수행하도록 했습니다.
폴더 생성: 파일을 복사할 디렉터리가 없으면 생성하도록 했습니다.
UI 스레드 접근: Dispatcher.Invoke를 사용하여 UI 요소를 안전하게 업데이트하도록 했습니다.
로그 출력: 진행 사항과 에러 메시지를 리스트박스와 로그 파일에 기록하도록 했습니다.
Stop 버튼: 파일 복사 작업을 중단할 수 있도록 Stop 버튼을 추가했습니다.
이제 이 코드를 사용하면 파일을 주기적으로 