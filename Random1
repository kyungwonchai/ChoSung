xportMode 설정 변경
ExportMode를 Value로 설정하면 데이터 바인딩된 값이 Excel로 내보내집니다. 이는 주로 XAML에서 설정합니다.

xml
Copy code
<dxg:GridControl Name="gridControl">
    <dxg:GridControl.View>
        <dxg:TableView Name="tableView" ExportMode="Value"/>
    </dxg:GridControl.View>
    <!-- Grid columns and data template setup -->
</dxg:GridControl>
2. Custom Export 이벤트 사용
CustomExport 이벤트를 사용하여 Excel로 내보낼 때 각 셀의 값을 직접 제어합니다.

csharp
Copy code
private void TableView_CustomExport(object sender, DevExpress.Export.CustomExportEventArgs e) {
    var sheet = e.ExcelSheet as DevExpress.Export.IExportSheet;
    var grid = sender as DevExpress.Xpf.Grid.TableView;
    
    for (int rowHandle = 0; rowHandle < grid.Grid.VisibleRowCount; rowHandle++) {
        for (int columnHandle = 0; columnHandle < grid.Grid.VisibleColumns.Count; columnHandle++) {
            var cellValue = grid.Grid.GetCellValue(rowHandle, grid.Grid.VisibleColumns[columnHandle]);
            // 여기에서 cellValue를 조정하여 Excel 셀에 설정
            sheet.SetCellValue(rowHandle, columnHandle, cellValue);
        }
    }
}
3. 설계 변경
기존의 TextBox를 사용하는 대신, 별도의 데이터 열을 사용합니다. 이렇게 하면 ExportToXlsx 메서드가 자동으로 데이터를 인식하고 Excel 파일로 내보낼 수 있습니다.

xml
Copy code
<dxg:GridControl Name="gridControl">
    <dxg:GridControl.Columns>
        <!-- 데이터 열 정의 -->
        <dxg:GridColumn FieldName="Column1" />
        <dxg:GridColumn FieldName="Column2" />
        <dxg:GridColumn FieldName="Column3" />
    </dxg:GridControl.Columns>
</dxg:GridControl>
이러한 코드는 기본적인 방향을 제시할 뿐, 실제 프로젝트의 구체적인 요구 사항과 구조에 맞게 조정해야 합니다. DevExpress의 공식 문서나 지원 포럼을 참조하여 더 많은 정보와 예제를 얻는