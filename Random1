알겠습니다. 포트가 처음 선택되었을 때, 저장된 설정이 없거나 잘못된 경우에도 에러가 발생하지 않도록 수정하겠습니다. 또한, PortComboBox와 ScannerPortComboBox의 SelectionChanged 이벤트 핸들러도 추가하겠습니다. 모든 상황에서 프로그램이 정상적으로 동작하도록 에러 처리를 강화하겠습니다.

1. MainWindow.xaml.cs
SelectionChanged 이벤트 핸들러를 수정하고, 저장된 설정이 없을 때 발생할 수 있는 오류를 방지하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                // 설정 관리 클래스 초기화
                settingsManager = SettingsManager.Instance;

                // IP 주소 가져오기 및 표시
                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                // 포트 선택 콤보박스 초기화
                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                // 포트 및 설정 불러오기
                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                // 스캐너 및 타겟 포트 설정 초기화
                InitializePortSettings();
                LoadLastUsedPorts();

                // 소켓 서버 초기화
                serialPortManager = new SerialPortManager();
                socketServer = SocketServer.Instance;
                socketServer.DataReceived += OnSocketDataReceived;

                // QR 코드 생성
                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                // 포트 목록 갱신
                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (PortComboBox.SelectedItem != null)
                {
                    string selectedPort = PortComboBox.SelectedItem.ToString();
                    settingsManager.SaveSetting("Port", selectedPort);

                    // 선택된 포트가 유효할 경우에만 소켓 서버를 시작
                    if (int.TryParse(selectedPort, out int portNumber))
                    {
                        socketServer.Start(portNumber);
                    }

                    // QR 코드 업데이트
                    string ipAddress = GetLocalIPAddress();
                    GenerateQRCode(ipAddress, selectedPort);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                if (!string.IsNullOrEmpty(ipAddress) && !string.IsNullOrEmpty(port))
                {
                    string qrContent = $"{ipAddress}:{port}";
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                    // QR 코드를 이미지로 표시
                    QrCodeImage.Source = qrCodeImage;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                // 스캐너 포트 설정 로드
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                // 저장된 설정이 유효할 때만 로드
                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }

                // 각 보낼 포트에 대해 설정 로드 및 연결
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem != null)
                {
                    string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                    string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                    string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                    string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                    string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                    OpenScannerPort(selectedPort, baudRate, parity, dataBits, stopBits);

                    // 설정 저장
                    settingsManager.SaveSetting("LastUsedScannerPort", selectedPort);
                    settingsManager.SaveSetting("ScannerBaudRate", baudRate);
                    settingsManager.SaveSetting("ScannerParity", parity);
                    settingsManager.SaveSetting("ScannerDataBits", dataBits);
                    settingsManager.SaveSetting("ScannerStopBits", stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                // COM 포트 목록 갱신
                string[] portNames = SerialPort.GetPortNames();

                // 스캐너 포트 콤보박스 갱신
                ScannerPortComboBox.ItemsSource = portNames;

                // 각 타겟 포트 설정 컨트롤 갱신
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
요약
위의 코드는 다음과 같은 문제를 해결합니다:

저장된 포트 설정이 없을 때 에러가 발생하지 않도록 에러 처리를 추가했습니다. 각 콤보박스에서 선택된 값이 없을 경우 기본값을 사용하거나 예외를 처리합니다.
SelectionChanged 이벤트 핸들러를 추가하여, 포트 선택 시 설정이 변경되도록 했습니다.
QR 코드 생성에서 빈 값을 처리하여, IP 주소나 포트가 없는 경우에도 프로그램이 중단되지 않도록 했습니다.
각 ComboBox의 SelectionChanged 이벤트에 대해, 저장된 값이 없거나 잘못된 경우를 대비하여 기본값을 설정했습니다.
이제 저장된 포트가 없을 때도 프로그램이 안전하게 작동할 것입니다. 추가적으로 문제가 발생하거나 더 필요한 것이 있으면 언제든지 알려주세