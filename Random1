네, 이 작업은 저장 프로시저를 사용하여 구현할 수 있습니다. 저장 프로시저를 사용하면 데이터베이스에 대한 복잡한 작업을 효율적으로 처리할 수 있으며, 데이터 무결성과 보안을 유지하는 데에도 도움이 됩니다.

여기서 요구하는 작업은 다음과 같은 단계로 구현할 수 있습니다:

매개변수 전달: '모델'과 'No' 값을 저장 프로시저의 매개변수로 전달합니다.
기존 데이터 초기화: 'T현장세척업로드대기' 테이블의 '부품1', '부품2', '부품3' 컬럼을 NULL로 설정합니다.
데이터 조회: 'T_모델정보' 테이블에서 'Basic모델' 컬럼의 값이 일치하는 행을 최대 3개까지 조회합니다.
데이터 업데이트: 조회한 '자재코드' 값을 'T현장세척업로드대기' 테이블의 '부품1', '부품2', '부품3' 컬럼에 업데이트합니다. 조회된 결과가 3개 미만이면 나머지 부품 컬럼은 NULL로 유지됩니다.
저장 프로시저 예시 (MS SQL):
sql
Copy code
CREATE PROCEDURE UpdateModelParts
    @Model VARCHAR(50),
    @No INT
AS
BEGIN
    -- 기존 데이터를 NULL로 초기화
    UPDATE T현장세척업로드대기
    SET 부품1 = NULL, 부품2 = NULL, 부품3 = NULL
    WHERE No = @No;

    -- 모델 정보 조회
    WITH ModelInfo AS (
        SELECT TOP 3 자재코드
        FROM T_모델정보
        WHERE Basic모델 = @Model
    )
    -- 조회된 자재코드를 부품 컬럼에 업데이트
    UPDATE T현장세척업로드대기
    SET 부품1 = (SELECT 자재코드 FROM ModelInfo WHERE 자재코드 IS NOT NULL OFFSET 0 ROWS FETCH NEXT 1 ROWS ONLY),
        부품2 = (SELECT 자재코드 FROM ModelInfo WHERE 자재코드 IS NOT NULL OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY),
        부품3 = (SELECT 자재코드 FROM ModelInfo WHERE 자재코드 IS NOT NULL OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY)
    WHERE No = @No;
END;
이 저장 프로시저는 @Model과 @No 값을 입력으로 받아 작업을 수행합니다. UPDATE 문을 사용하여 먼저 해당 No 값을 가진 행의 부품 컬럼을 초기화한 다음, T_모델정보 테이블에서 필요한 정보를 조회하여 T현장세척업로드대기 테이블을 업데이트합니다.

이 예시는 구체적인 데이터베이스 구조와 요구 사항에 따라 수정이 필요할 수 있습니다. 저장 프로시저를 사용하기 전에 테스트 환경에서 충분히 테스트