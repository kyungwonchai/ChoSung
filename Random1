 동작까지 남은 시간을 시, 분, 초로 표시하기 위해 타이머와 남은 시간을 업데이트하는 로직을 추가하겠습니다. 이 타이머는 UI에 표시되도록 하겠습니다.

1. MainWindow.xaml
남은 시간을 표시할 TextBlock 추가
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:SMDFileCleaner"
        Title="SMD File Cleaner" Height="600" Width="525">
    <Grid>
        <ComboBox x:Name="cbFolderPaths" HorizontalAlignment="Left" Margin="10,10,0,0" VerticalAlignment="Top" Width="400" Height="100" IsEditable="True" TextWrapping="Wrap" AcceptsReturn="True"/>
        <Button x:Name="btnApplyFolders" Content="Apply Folders" HorizontalAlignment="Left" Margin="420,10,0,0" VerticalAlignment="Top" Width="75" Click="btnApplyFolders_Click"/>
        
        <TextBox x:Name="txtRegexPatterns" HorizontalAlignment="Left" Height="50" Margin="10,120,0,0" VerticalAlignment="Top" Width="400" TextWrapping="Wrap" AcceptsReturn="True"/>
        <Button x:Name="btnApplyRegexPatterns" Content="Apply Regex" HorizontalAlignment="Left" Margin="420,120,0,0" VerticalAlignment="Top" Width="75" Click="btnApplyRegexPatterns_Click"/>

        <TextBox x:Name="txtSafeSpace" HorizontalAlignment="Left" Height="23" Margin="10,180,0,0" VerticalAlignment="Top" Width="400" PlaceholderText="Enter safe space in GB"/>
        <Button x:Name="btnApplySafeSpace" Content="Apply Safe Space" HorizontalAlignment="Left" Margin="420,180,0,0" VerticalAlignment="Top" Width="75" Click="btnApplySafeSpace_Click"/>
        
        <Button x:Name="btnStart" Content="Start" HorizontalAlignment="Left" Margin="10,220,0,0" VerticalAlignment="Top" Width="75" Click="btnStart_Click"/>

        <local:CustomProgressBar x:Name="ProgressBar" HorizontalAlignment="Left" Margin="10,260,0,0" VerticalAlignment="Top"/>

        <TextBlock x:Name="txtTimeRemaining" HorizontalAlignment="Left" Margin="10,320,0,0" VerticalAlignment="Top" FontSize="16" FontWeight="Bold"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
남은 시간을 계산하고 표시하는 로직 추가
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private FileCleaner _fileCleaner;
        private List<string> _folderPaths = new List<string>();
        private List<Regex> _regexPatterns = new List<Regex>();
        private const string ConfigFilePath = "config.txt";
        private long _safeFreeSpace = 25L * 1024 * 1024 * 1024; // 25 GB 기본 값
        private long _totalDiskSpace;
        private long _freeDiskSpace;
        private DispatcherTimer _timer;
        private DispatcherTimer _countdownTimer;
        private DateTime _nextDeletionTime;

        public MainWindow()
        {
            InitializeComponent();
            _fileCleaner = new FileCleaner(UpdateProgressBar);
            LoadConfig();
            CheckFolderPaths();
            InitializeDiskSpace();
            SetupTimers();
        }

        private void InitializeDiskSpace()
        {
            _totalDiskSpace = GetTotalDiskSpace("D:\\"); // 예시로 D 드라이브 사용
            _freeDiskSpace = GetFreeDiskSpace("D:\\");
            UpdateProgressBar();
        }

        private long GetTotalDiskSpace(string driveName)
        {
            try
            {
                DriveInfo drive = new DriveInfo(driveName);
                return drive.TotalSize;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to get total disk space: " + ex.Message);
                return 0;
            }
        }

        private long GetFreeDiskSpace(string driveName)
        {
            try
            {
                DriveInfo drive = new DriveInfo(driveName);
                return drive.AvailableFreeSpace;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Failed to get free disk space: " + ex.Message);
                return 0;
            }
        }

        private void SetupTimers()
        {
            _timer = new DispatcherTimer
            {
                Interval = TimeSpan.FromMinutes(5)
            };
            _timer.Tick += Timer_Tick;
            _timer.Start();

            _countdownTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _countdownTimer.Tick += CountdownTimer_Tick;
            _countdownTimer.Start();
            _nextDeletionTime = DateTime.Now.AddMinutes(5);
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            _freeDiskSpace = GetFreeDiskSpace("D:\\");
            UpdateProgressBar();
            _nextDeletionTime = DateTime.Now.AddMinutes(5);
        }

        private void CountdownTimer_Tick(object sender, EventArgs e)
        {
            TimeSpan timeRemaining = _nextDeletionTime - DateTime.Now;
            if (timeRemaining < TimeSpan.Zero)
            {
                timeRemaining = TimeSpan.Zero;
            }
            txtTimeRemaining.Text = $"다음 삭제까지 남은 시간: {timeRemaining.Hours}시간 {timeRemaining.Minutes}분 {timeRemaining.Seconds}초";
        }

        private void btnApplyFolders_Click(object sender, RoutedEventArgs e)
        {
            _folderPaths = cbFolderPaths.Text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries).Take(5).ToList();
            CheckFolderPaths();
            SaveConfig();
            MessageBox.Show("폴더 경로가 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnApplyRegexPatterns_Click(object sender, RoutedEventArgs e)
        {
            var patterns = txtRegexPatterns.Text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries).Take(2).ToList();
            _regexPatterns = patterns.Select(p => new Regex(p)).ToList();
            SaveConfig();
            MessageBox.Show("정규식 패턴이 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnApplySafeSpace_Click(object sender, RoutedEventArgs e)
        {
            if (long.TryParse(txtSafeSpace.Text, out long safeSpaceGB))
            {
                _safeFreeSpace = safeSpaceGB * 1024 * 1024 * 1024; // GB를 바이트로 변환
                UpdateProgressBar();
                MessageBox.Show("안전 용량 값이 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            else
            {
                MessageBox.Show("유효한 숫자를 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (_folderPaths.Count == 0 || _regexPatterns.Count == 0)
            {
                MessageBox.Show("폴더와 정규식을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            StartFileDeletion();
        }

        private void StartFileDeletion()
        {
            try
            {
                foreach (var folderPath in _folderPaths)
                {
                    foreach (var regex in _regexPatterns)
                    {
                        var filesToDelete = _fileCleaner.GetFilesToDelete(folderPath, regex);
                        if (filesToDelete.Count >= 10)
                        {
                            _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath).Wait();
                            _freeDiskSpace = GetFreeDiskSpace("D:\\");
                            UpdateProgressBar();
                        }
                    }
                }
                MessageBox.Show("파일 삭제 완료.", "완료", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("파일 삭제 중 오류 발생: " + ex.Message, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void CheckFolderPaths()
        {
            var validPaths = _folderPaths.Where(Directory.Exists).ToList();
            _folderPaths = validPaths;
            cbFolderPaths.ItemsSource = validPaths;
        }

        private void SaveConfig()
        {
            var lines = _folderPaths.Concat(_regexPatterns.Select(r => r.ToString())).ToList();
            lines.Add((_safeFreeSpace / (1024 * 1024 * 1024)).ToString()); // GB 단위로 저장
            File.WriteAllLines(ConfigFilePath, lines);
        }

        private void LoadConfig()
        {
            if (File.Exists(ConfigFilePath))
            {
                var lines = File.ReadAllLines(ConfigFilePath).ToList();
                if (lines.Count > 0)
                {
                    _folderPaths = lines.Take(5).ToList();
                    _regexPatterns = lines.Skip(5).Take(2).Select(p => new Regex(p)).ToList();
                    if (long.TryParse(lines.Last(), out long safeSpaceGB))
                    {
                        _safeFreeSpace = safeSpaceGB * 1024 * 1024 * 1024;
                    }

                    cbFolderPaths.ItemsSource = _folderPaths;
                    txtRegexPatterns.Text = string.Join(Environment.NewLine, _regexPatterns.Select(r => r.ToString()));
                    txtSafeSpace.Text = safeSpaceGB.ToString();
                }
            }
        }

        private void UpdateProgressBar()
        {
            long usedSpace = _totalDiskSpace - _freeDiskSpace;
            double usedPercentage = (double)usedSpace / _totalDiskSpace * 100;
            double safePercentage = (double)(_totalDiskSpace - _safeFreeSpace) / _totalDiskSpace * 100;
            ProgressBar.UpdateProgress(usedPercentage, safePercentage, _totalDiskSpace, usedSpace, _freeDiskSpace);
        }
    }
}
설명
남은 시간을 표시할 TextBlock 추가: txtTimeRemaining TextBlock을 추가하여 남은 시간을 표시합니다.
타이머 설정: SetupTimers 메서드를 추가하여 HDD 용량 갱신 타이머와 남은 시간을 업데이트하는 타이머를 설정합니다.
타이머 이벤트 핸들러: Timer_Tick 및 CountdownTimer_Tick 이벤트 핸들러를 추가하여 HDD 용량 갱신 및 남은 시간 업데이트를 처리합니다.
이제 프로그램은 5분마다 HDD 용량을 갱신하고, 다음 삭제 동작까지 남은 시간을 시, 분, 초로 표시합니다.