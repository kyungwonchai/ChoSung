제의 원인은 여러 가지일 수 있습니다. 아래에서 각각의 문제를 확인하고 해결 방안을 제공합니다.

1. errno 111 - Connection Refused 문제
이 오류는 Flask 서버가 지정된 IP와 포트에 연결을 시도했지만 거부된 경우 발생합니다.

원인:
타겟 서버가 실행 중이지 않거나, 해당 포트가 닫혀 있습니다.
방화벽 설정으로 인해 Flask 서버에서 대상 포트로 연결할 수 없습니다.
해결 방안:
대상 서버가 실행 중인지 확인:

Flask 서버에서 대상 IP와 포트로 연결 가능한지 확인:

bash
코드 복사
telnet <IP> <PORT>
예: telnet 10.10.100.11 80

성공하면 "Connected to <IP>" 메시지가 나타납니다.

실패하면 대상 서버가 실행 중인지 확인하거나, 방화벽 설정을 점검해야 합니다.

타겟 서버 방화벽 확인:

대상 서버에서 해당 포트가 열려 있는지 확인 (Linux 기준):
bash
코드 복사
sudo netstat -tuln | grep <PORT>
포트가 열려 있지 않다면, 해당 서비스를 실행하거나 방화벽 설정에서 포트를 열어야 합니다:
bash
코드 복사
sudo ufw allow <PORT>
Flask 서버 방화벽 설정 확인:

Flask 서버가 타겟 IP와 포트로의 아웃바운드 트래픽을 허용하는지 확인합니다.
2. Timeout 문제
이 오류는 Flask 서버가 대상 포트에 연결을 시도했으나 응답을 받지 못했을 때 발생합니다.

해결 방안:
타임아웃 증가: Flask 코드에서 타임아웃을 늘립니다:
python
코드 복사
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=10):  # 타임아웃 10초로 설정
            return True
    except Exception as e:
        print(f"Error connecting to {ip}:{port} - {e}")  # 디버깅용 메시지
        return False
3. jsonify is not defined 에러
jsonify가 정의되지 않았다는 오류는 Flask에서 jsonify를 임포트하지 않았기 때문입니다.

해결 방안:
Flask 코드 맨 위에 jsonify를 임포트합니다:
python
코드 복사
from flask import Flask, jsonify, render_template, request
4. 웹 페이지에서 테이블에 데이터가 표시되지 않음
웹 페이지에 헤더만 표시되고 데이터가 보이지 않는 문제는 JavaScript에서 서버 응답 데이터를 렌더링하지 못했기 때문입니다.

해결 방안:
Flask 서버 디버깅:

Flask 서버 터미널에서 다음을 확인합니다:
print("Results:", results)가 제대로 데이터를 출력하는지 확인.
오류 메시지가 발생한다면 위의 방화벽/타임아웃 문제를 해결한 후 다시 시도.
JavaScript 디버깅:

브라우저 개발자 도구(Chrome: F12)에서 네트워크 탭을 열고 /ipchk에 대한 POST 요청이 성공했는지 확인.
콘솔 탭에서 오류 메시지가 있는지 확인.
테이블 초기화 및 데이터 렌더링 확인: JavaScript가 서버 응답 데이터를 테이블에 올바르게 렌더링하는지 확인합니다.

javascript
코드 복사
async function checkPorts() {
    try {
        const response = await fetch('/ipchk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ ip_ports: ipPorts })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log("Server Response:", data);  // 서버 응답 디버깅

        const resultsTable = document.getElementById("results");
        resultsTable.innerHTML = "";  // 기존 데이터를 초기화

        data.forEach(result => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${result.ip}</td>
                <td>${result.port}</td>
                <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                    ${result.status}
                </td>
            `;
            resultsTable.appendChild(row);
        });
    } catch (error) {
        console.error("Error checking ports:", error);
    }
}
최종 Flask 및 HTML 코드
Flask 코드 (app.py)
python
코드 복사
from flask import Flask, jsonify, render_template, request
import socket

app = Flask(__name__)

# 포트 상태 확인 함수
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=10):  # 타임아웃 10초
            return True
    except Exception as e:
        print(f"Error connecting to {ip}:{port} - {e}")
        return False

@app.route('/ipchk', methods=['GET', 'POST'])
def ip_check():
    if request.method == 'POST':
        data = request.json
        ip_ports = data.get('ip_ports', [])
        results = []

        for entry in ip_ports:
            ip = entry.get('ip')
            ports = entry.get('ports', [])
            for port in ports:
                status = check_port(ip, port)
                results.append({
                    "ip": ip,
                    "port": port,
                    "status": "Open" if status else "Closed"
                })

        print("Results:", results)  # 디버깅용
        return jsonify(results)

    return render_template('client_check.html')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
HTML 코드 (client_check.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Port Accessibility Checker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Port Accessibility Checker</h1>
    <button onclick="checkPorts()">Check Ports</button>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody id="results"></tbody>
    </table>

    <script>
        const ipPorts = [
            { ip: "10.10.100.11", ports: [80, 443, 8080] },
            { ip: "192.168.1.1", ports: [22, 3306, 3389] },
            { ip: "10.10.100.12", ports: [80, 443] }
        ];

        async function checkPorts() {
            try {
                const response = await fetch('/ipchk', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ip_ports: ipPorts })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log("Server Response:", data);

                const resultsTable = document.getElementById("results");
                resultsTable.innerHTML = "";

                data.forEach(result => {
                    const row = document.createElement("tr");
                    row.innerHTML = `
                        <td>${result.ip}</td>
                        <td>${result.port}</td>
                        <td class="${result.status === "Open" ? "status-open" : "status-closed"}">
                            ${result.status}
                        </td>
                    `;
                    resultsTable.appendChild(row);
                });
            } catch (error) {
                console.error("Error checking ports:", error);
            }
        }
    </script>
</body>
</html>
결과 확인
Flask 서버 실행:

bash
코드 복사
python app.py
브라우저에서 /ipchk 접속:

arduino
코드 복사
http://<Flask 서버 IP>:5000/ipchk
"Check Ports" 버튼 클릭:
