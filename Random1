POStatus 값이 변경되면 필터가 자동으로 적용되도록 하기 위해서는, Item 클래스의 POStatus 속성에 변경 알림을 적용하고, POStatus 값이 변경될 때마다 FilteredItems 컬렉션을 재필터링하는 로직을 추가해야 합니다. 이를 통해, POStatus 값이 변경되면 자동으로 필터가 다시 적용되어 DataGrid에 반영됩니다.

수정된 ViewModel 및 Item 클래스
Item 클래스 변경: POStatus 속성에 변경 알림(INotifyPropertyChanged)을 추가합니다.
POStatus 값 변경 감지: Item 객체의 POStatus 속성이 변경되면, 필터를 다시 적용하도록 처리합니다.
1. ViewModel 수정
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Linq;

public class MainViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private bool _showHiddenRows;
    public bool ShowHiddenRows
    {
        get => _showHiddenRows;
        set
        {
            _showHiddenRows = value;
            OnPropertyChanged(nameof(ShowHiddenRows));
            FilterItems(); // 체크박스 상태 변경 시 필터링
        }
    }

    public ObservableCollection<Item> Items { get; set; }
    public ObservableCollection<Item> FilteredItems { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<Item>
        {
            new Item { POStatus = "처리중" },
            new Item { POStatus = "이미 처리됨" },
            new Item { POStatus = "대기중" },
            new Item { POStatus = "이미 처리됨" }
        };

        // 원본 컬렉션 변경 감지
        Items.CollectionChanged += OnItemsCollectionChanged;

        // 각 항목의 POStatus 변경 감지
        foreach (var item in Items)
        {
            item.PropertyChanged += OnItemPropertyChanged;
        }

        // 초기 필터링 적용
        FilteredItems = new ObservableCollection<Item>(Items);
    }

    // Items 컬렉션에 항목이 추가/삭제될 때 필터를 다시 적용
    private void OnItemsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
    {
        // 새로 추가된 아이템의 PropertyChanged 이벤트 연결
        if (e.NewItems != null)
        {
            foreach (Item newItem in e.NewItems)
            {
                newItem.PropertyChanged += OnItemPropertyChanged;
            }
        }

        // 필터 다시 적용
        FilterItems();
    }

    // 개별 항목의 POStatus 변경 감지
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Item.POStatus))
        {
            // POStatus가 변경되면 필터 다시 적용
            FilterItems();
        }
    }

    // 필터링 로직
    private void FilterItems()
    {
        // 필터 적용 전에 Clear해서 기존 데이터를 비움
        FilteredItems.Clear();

        var filtered = ShowHiddenRows 
            ? Items // 체크박스가 선택된 경우 모든 항목을 표시
            : Items.Where(i => !i.POStatus.Contains("이미")); // "이미" 포함 항목 필터링

        // 필터링된 항목을 FilteredItems에 추가
        foreach (var item in filtered)
        {
            FilteredItems.Add(item);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
2. Item 클래스 수정
Item 클래스에서 POStatus 속성 변경을 감지하기 위해 INotifyPropertyChanged 인터페이스를 구현합니다.

csharp
코드 복사
using System.ComponentModel;

public class Item : INotifyPropertyChanged
{
    private string _poStatus;
    public string POStatus
    {
        get => _poStatus;
        set
        {
            if (_poStatus != value)
            {
                _poStatus = value;
                OnPropertyChanged(nameof(POStatus)); // POStatus 값 변경 시 알림
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
3. XAML (동일)
XAML 파일은 이전과 동일하게 사용합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    
    <Grid>
        <StackPanel>
            <!-- 체크박스: 숨겨진 행을 보여주기 -->
            <CheckBox Content="숨겨진 행 보기" 
                      IsChecked="{Binding ShowHiddenRows, Mode=TwoWay}"
                      Margin="10"/>
            
            <!-- DataGrid: POStatus 컬럼 표시 -->
            <DataGrid ItemsSource="{Binding FilteredItems}" AutoGenerateColumns="False" Height="200" Margin="10">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="POStatus" Binding="{Binding POStatus}" />
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Grid>
</Window>
4. 동작 방식
체크박스 체크: 체크박스를 선택하면 POStatus에 "이미"라는 단어가 포함된 항목도 DataGrid에 표시됩니다.
체크박스 해제: 체크박스를 해제하면 "이미"라는 단어가 포함된 항목이 숨겨집니다.
POStatus 값 변경: POStatus 값이 변경되면 자동으로 필터가 적용되어, 즉시 DataGrid가 업데이트됩니다.
핵심 변경 사항
Item 클래스에 INotifyPropertyChanged 구현: POStatus 속성이 변경될 때 이를 감지하여 PropertyChanged 이벤트가 발생하도록 했습니다.
OnItemPropertyChanged 메서드 추가: Item 객체의 POStatus 속성이 변경될 때마다 필터링을 다시 적용하도록 이벤트 핸들러를 추가했습니다.
FilterItems 메서드 업데이트: 필터링을 적용할 때 기존의 필터된 목록을 지우고 새롭게 필터링된 항목을 다시 추가합니다.
이 방식은 POStatus 값이 변경되면 DataGrid가 즉시 반영되도록 하며, 추가적으로 Item의 속성 변경을 감지하여 필터를 자동으로 적용할 수 있게 만듭니다.