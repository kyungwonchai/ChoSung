using System;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

public class SocketClientMergeOI
{
    private TcpClient _client;
    private NetworkStream _stream;
    private readonly string _ipAddress;
    private readonly int _port;
    private bool _isConnected;
    private const int _retryInterval = 2000;  // 2초 간격으로 재시도
    private const int _maxRetryTime = 5 * 60 * 1000;  // 최대 5분 (300초)

    public SocketClientMergeOI(string ipAddress, int port)
    {
        _ipAddress = ipAddress;
        _port = port;
        _client = new TcpClient();
        _isConnected = false;
    }

    // 메시지를 보내고 응답을 받는 비동기 함수
    public async Task<string> SendAndReceiveMessageAsync(string message)
    {
        int elapsedTime = 0;

        // 연결 상태 확인
        while (!_isConnected && elapsedTime < _maxRetryTime)
        {
            await Task.Delay(_retryInterval);
            elapsedTime += _retryInterval;
        }

        // 5분 동안 연결이 되지 않으면 "NG" 반환
        if (!_isConnected)
        {
            return "NG";
        }

        try
        {
            // STX와 ETX로 메시지 감싸기
            string framedMessage = "\u0002" + message + "\u0003"; // STX(0x02), ETX(0x03)
            byte[] dataToSend = Encoding.ASCII.GetBytes(framedMessage);

            // 메시지 전송
            await _stream.WriteAsync(dataToSend, 0, dataToSend.Length);

            // 응답 받기
            byte[] buffer = new byte[256];
            int bytesRead = await _stream.ReadAsync(buffer, 0, buffer.Length);
            string receivedMessage = Encoding.ASCII.GetString(buffer, 0, bytesRead);

            // OK 또는 NG 판단 (단순 예시로 OK인지 아닌지 판단)
            if (receivedMessage.Contains("OK"))
            {
                return "OK";
            }
            else
            {
                return "NG";
            }
        }
        catch (Exception)
        {
            _isConnected = false;  // 연결이 끊어졌을 경우 플래그 변경
            return "NG";  // 예외 발생 시 "NG" 반환
        }
    }
}
