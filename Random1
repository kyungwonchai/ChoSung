droid 앱의 checkForUpdates 및 downloadAndInstallApk 함수에 로그를 추가하여, 오류나 중요한 정보를 쉽게 확인할 수 있도록 Log 메시지를 추가해드리겠습니다. 로그 태그는 TTTTT로 설정하여 쉽게 필터링할 수 있게 하겠습니다.

MainActivity.kt 코드 수정
kotlin
코드 복사
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.FileProvider
import okhttp3.OkHttpClient
import okhttp3.Request
import org.json.JSONObject
import java.io.File
import java.io.FileOutputStream
import java.io.IOException

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 앱 실행 시 자동으로 업데이트를 확인합니다.
        checkForUpdates(this, "apk1") // apk1 버전 관리
    }

    // 서버에서 APK 버전을 확인하고, 필요 시 업데이트를 진행합니다.
    private fun checkForUpdates(context: Context, apkName: String) {
        Log.d("TTTTT", "Starting checkForUpdates for $apkName")
        
        val client = OkHttpClient()
        val request = Request.Builder()
            .url("http://10.244.122.222:8116/api/$apkName/version") // 서버의 IP와 포트 사용
            .build()

        try {
            client.newCall(request).execute().use { response ->
                if (!response.isSuccessful) {
                    Log.e("TTTTT", "Unexpected response code: ${response.code}")
                    throw IOException("Unexpected code $response")
                }

                val responseData = response.body?.string()
                Log.d("TTTTT", "Received response: $responseData")
                
                val jsonObject = JSONObject(responseData)
                val latestVersion = jsonObject.getString("version")
                val apkUrl = jsonObject.getString("apk_url")

                val currentVersion = BuildConfig.VERSION_NAME
                Log.d("TTTTT", "Current version: $currentVersion, Latest version: $latestVersion")

                if (latestVersion != currentVersion) {
                    Log.d("TTTTT", "New version available. Initiating download.")
                    downloadAndInstallApk(context, apkUrl, apkName)
                } else {
                    Log.d("TTTTT", "App is up to date. No update needed.")
                }
            }
        } catch (e: Exception) {
            Log.e("TTTTT", "Error during checkForUpdates: ${e.message}", e)
        }
    }

    // APK 파일을 다운로드하고 설치를 진행합니다.
    private fun downloadAndInstallApk(context: Context, apkUrl: String, apkName: String) {
        Log.d("TTTTT", "Starting download for $apkName from $apkUrl")

        val client = OkHttpClient()
        val request = Request.Builder().url("http://10.244.122.222:8116$apkUrl").build()

        try {
            client.newCall(request).execute().use { response ->
                if (!response.isSuccessful) {
                    Log.e("TTTTT", "Unexpected response code during download: ${response.code}")
                    throw IOException("Unexpected code $response")
                }

                val apkFile = File(context.getExternalFilesDir(null), "$apkName.apk")
                FileOutputStream(apkFile).use { fos ->
                    fos.write(response.body?.bytes())
                    Log.d("TTTTT", "APK file downloaded successfully to ${apkFile.absolutePath}")
                }

                val apkUri: Uri = FileProvider.getUriForFile(
                    context,
                    context.applicationContext.packageName + ".provider",
                    apkFile
                )

                val intent = Intent(Intent.ACTION_VIEW).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_GRANT_READ_URI_PERMISSION
                    setDataAndType(apkUri, "application/vnd.android.package-archive")
                }
                context.startActivity(intent)
                Log.d("TTTTT", "APK installation initiated for $apkName")

            }
        } catch (e: Exception) {
            Log.e("TTTTT", "Error during downloadAndInstallApk: ${e.message}", e)
        }
    }
}
추가된 로그 설명
Log.d("TTTTT", "..."): 디버그 로그 메시지입니다. 코드 실행의 주요 지점을 표시하고 정상적인 흐름을 추적하는 데 사용됩니다.
Log.e("TTTTT", "...", e): 오류 로그 메시지입니다. 예외 발생 시 해당 예외 메시지와 함께 로그를 출력합니다.
사용 예시
로그 필터링: Android Studio의 Logcat 창에서 TTTTT로 필터링하여 이 태그로 찍힌 로그 메시지만 확인할 수 있습니다.
디버깅 정보: 각 함수의 주요 동작(예: 서버 응답 수신, APK 파일 다운로드, 설치 과정)을 로그로 기록하므로, 문제가 발생했을 때 로그를 통해 상세한 디버깅 정보를 확인할 수 있습니다.
이제 이 로그 메시지를 통해 서버와의 통신 및 APK 파일 다운로드/설치 과정에서 발생하는 문제를 더욱 쉽게 파악할 수 있습니다