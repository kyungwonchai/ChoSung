@startuml
!theme plain

title 라즈베리파이 워치독 시스템 전체 동작 시퀀스 다이어그램

' =============================================
' ==          참여자 (컴포넌트) 정의           ==
' =============================================
' 각 컴포넌트를 계층 구조에 따라 배치합니다.
' 하드웨어 -> 커널 -> 시스템 관리자 -> 서비스 설정 -> 사용자 앱 순서입니다.

participant "하드웨어 워치독 타이머\n(Hardware Watchdog)" as HW_WDT <<하드웨어>>
participant "리눅스 커널\n(Linux Kernel)" as KERNEL <<OS 핵심>>
participant "systemd\n(시스템/서비스 관리자)" as SYSTEMD <<OS 관리>>
participant "my_app.service\n(서비스 설정 파일)" as SERVICE_FILE <<설정>>
participant "main.py\n(사용자 애플리케이션)" as APP <<사용자 코드>>

' =============================================
' ==   시나리오 1: 정상 부팅 및 애플리케이션 실행   ==
' =============================================

box "전원 ON: 시스템 부팅 및 초기화" #LightBlue
    activate KERNEL
    KERNEL -> HW_WDT: 1. 워치독 하드웨어 초기화 및 활성화\n   (커널이 직접 생존 신호 전송 시작)
    activate HW_WDT
    note right of HW_WDT: 이제부터 누군가 주기적으로\n타이머를 리셋하지 않으면\n시스템을 재부팅합니다.

    KERNEL -> SYSTEMD: 2. systemd 프로세스 시작
    activate SYSTEMD
    
    SYSTEMD -> SERVICE_FILE: 3. 'my_app.service' 설정 파일 읽기
    activate SERVICE_FILE
    SERVICE_FILE --> SYSTEMD: 4. 설정값 반환\n(ExecStart, WatchdogSec=60 등)
    deactivate SERVICE_FILE
    
    SYSTEMD -> KERNEL: 5. 커널에게 워치독 제어권 요청
    note right of SYSTEMD: "이제부터 워치독 관리는\n내가(systemd) 직접 하겠다."
    
    SYSTEMD -> APP: 6. 'main.py' 애플리케이션 실행
    activate APP
end box

' --- 정상 작동 루프 ---
loop 정상 작동 반복 (매 30초마다)
    APP -> SYSTEMD: 7. 생존 신호(Heartbeat) 전송\n   "WATCHDOG=1"
    note left of APP: 애플리케이션이 정상적으로\n동작 중임을 systemd에 알림

    SYSTEMD -> HW_WDT: 8. 워치독 타이머 리셋 (Petting)\n   "나와 내 앱 모두 살아있다!"
    note right of HW_WDT: 타이머가 60초에서\n다시 카운트다운 시작
end

' =========================================================
' ==   시나리오 2: 사용자 애플리케이션(main.py)만 멈춘 경우   ==
' =========================================================

box "오류 발생: 애플리케이션 멈춤" #LightCoral
    ... 약 1분 후 ...

    APP x-> SYSTEMD: 9. [오류] 'main.py' 내부 버그로 멈춤\n   (생존 신호 전송 실패)
    note left of APP: 무한 루프, 데드락 등으로\n프로세스는 살아있으나\n정상 동작은 못하는 상태.

    SYSTEMD -> SYSTEMD: 10. WatchdogSec(60초) 타임아웃 발생\n   "main.py로부터 생존 신호가 오지 않는다!"
    
    SYSTEMD x-> HW_WDT: 11. [결과] 워치독 타이머 리셋 중단 (Petting 실패)
    note right of SYSTEMD: systemd는 일부러 하드웨어 워치독에\n생존 신호를 보내지 않음.
end

' --- 하드웨어 워치독의 최종 복구 단계 ---
box "시스템 복구: 하드웨어에 의한 강제 재부팅" #IndianRed
    HW_WDT -> HW_WDT: 12. 내부 타이머 카운트다운 시작\n    (최대 15초)
    note right of HW_WDT: **이 단계는 소프트웨어의 제어를\n전혀 받지 않는 순수 하드웨어 동작**

    ... 15초 후 ...

    HW_WDT -> HW_WDT: 13. 최종 타임아웃. 카운트 0 도달.
    
    HW_WDT -> KERNEL: 14. **CPU에 물리적 리셋(RESET) 신호 전송**
    note right of HW_WDT: 전원 코드를 뽑았다가\n다시 꽂는 것과 동일한 효과.
    
    deactivate APP
    deactivate SYSTEMD
    deactivate KERNEL
    deactivate HW_WDT
    
    ... 시스템 재부팅 ...
end

' =========================================================
' ==   시나리오 3: OS/커널 자체가 멈춘 경우 (Kernel Panic)   ==
' =========================================================
' 이 시나리오는 더 근본적인 문제를 보여줍니다.

... 정상 작동 중 ...

box "치명적 오류 발생: OS/커널 멈춤" #Tomato
    KERNEL x-> KERNEL: [치명적 오류] Kernel Panic 발생
    deactivate APP
    deactivate SYSTEMD
    deactivate KERNEL
    note right of KERNEL: **OS의 모든 기능이 정지.\nsystemd와 main.py도\n당연히 함께 멈춤.**

    HW_WDT -> HW_WDT: [결과] 아무도 생존 신호를 보내지 못함.\n   내부 타이머 카운트다운 시작 (최대 15초)
    note right of HW_WDT: **소프트웨어가 완전히 죽었기 때문에\n워치독을 리셋할 주체가 없음.**
    
    ... 15초 후 ...
    
    HW_WDT -> HW_WDT: 최종 타임아웃. 카운트 0 도달.
    
    HW_WDT -> KERNEL: **CPU에 물리적 리셋(RESET) 신호 전송**
    deactivate HW_WDT

    ... 시스템 재부팅 ...
end
