용하는 방법을 코틀린에서 올바르게 설정하는 과정에서 발생할 수 있는 문제를 해결하기 위해, 아래의 단계별 가이드를 제공합니다. 또한, 필요한 라이브러리 의존성을 설정하는 방법, 코드에 필요한 추가 설명 등을 포함합니다.

1. Gradle 설정
우선, CodeScanner 라이브러리를 사용하기 위해 Gradle에 필요한 의존성을 추가해야 합니다.

build.gradle(:app) 파일에서 다음과 같이 dependencies 블록에 CodeScanner 라이브러리를 추가합니다.

gradle
코드 복사
dependencies {
    implementation 'com.budiyev.android:code-scanner:2.1.0'
    // CameraX 및 기타 필요한 라이브러리도 추가
    implementation "androidx.camera:camera-core:1.1.0"
    implementation "androidx.camera:camera-camera2:1.1.0"
    implementation "androidx.camera:camera-lifecycle:1.1.0"
    implementation "androidx.camera:camera-view:1.0.0-alpha31"
}
2. XML 레이아웃에서 CodeScannerView 추가
다음으로, activity_main.xml에서 CodeScannerView를 포함한 레이아웃을 구성합니다.

xml
코드 복사
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 모드 전환 토글 버튼 -->
    <ToggleButton
        android:id="@+id/modeToggle"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textOn="QR 모드"
        android:textOff="전체 모드"
        android:layout_margin="16dp"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"/>

    <!-- QR 모드에서 사용할 CodeScannerView -->
    <com.budiyev.android.codescanner.CodeScannerView
        android:id="@+id/codeScannerView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"
        android:visibility="gone"/> <!-- 초기에는 보이지 않도록 설정 -->

    <!-- 전체 모드에서 사용할 PreviewView -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/modeToggle"/>
</RelativeLayout>
3. MainActivity.kt 코드 작성
이제 MainActivity.kt 파일에서 CodeScannerView를 사용해 QR 코드를 읽고, 모드를 전환할 수 있는 코드를 작성합니다.

kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.ToggleButton
import androidx.activity.ComponentActivity
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.budiyev.android.codescanner.CodeScanner
import com.budiyev.android.codescanner.CodeScannerView
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var codeScannerView: CodeScannerView
    private lateinit var codeScanner: CodeScanner
    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var modeToggle: ToggleButton

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 뷰 초기화
        modeToggle = findViewById(R.id.modeToggle)
        codeScannerView = findViewById(R.id.codeScannerView)
        previewView = findViewById(R.id.previewView)

        cameraExecutor = Executors.newSingleThreadExecutor()

        // 초기 모드 설정: QR 모드
        modeToggle.isChecked = true
        setupQrMode()

        // 토글 버튼 클릭 시 모드 전환
        modeToggle.setOnCheckedChangeListener { _, isChecked ->
            if (isChecked) {
                setupQrMode()
            } else {
                setupFullMode()
            }
        }

        // 권한이 부여되지 않은 경우 요청
        if (!allPermissionsGranted()) {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun setupQrMode() {
        // QR 모드 설정
        previewView.visibility = View.GONE
        codeScannerView.visibility = View.VISIBLE

        codeScanner = CodeScanner(this, codeScannerView)

        // QR 코드에 대한 설정
        codeScanner.camera = CodeScanner.CAMERA_BACK
        codeScanner.formats = CodeScanner.ALL_FORMATS
        codeScanner.isAutoFocusEnabled = true
        codeScanner.isFlashEnabled = false

        // QR 코드 스캔 리스너 설정
        codeScanner.decodeCallback = {
            runOnUiThread {
                val qrData = it.text
                Log.d("QRCode", "QR 코드 인식됨: $qrData")
                handleQrCode(qrData)
            }
        }

        // 카메라 미리보기 시작
        codeScanner.startPreview()
    }

    private fun setupFullMode() {
        // 전체 모드 설정
        codeScannerView.visibility = View.GONE
        previewView.visibility = View.VISIBLE

        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            // 카메라 설정
            val preview = Preview.Builder().build()

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()

                preview.setSurfaceProvider(previewView.surfaceProvider)
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )

            } catch (exc: Exception) {
                Log.e("CameraXApp", "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun handleQrCode(qrData: String) {
        // QR 코드 처리 로직 (MySQL 및 MSSQL 연동)
        CoroutineScope(Dispatchers.IO).launch {
            val isQrCodeValid = checkQrCodeInMssql(qrData)
            if (isQrCodeValid) {
                // MSSQL에 QR 코드가 존재하는 경우, MySQL에 데이터를 인서트
                insertIntoMySQL(qrData)
            } else {
                Log.e("QRCode", "유효하지 않은 QR 코드")
            }
        }
    }

    private suspend fun checkQrCodeInMssql(qrData: String): Boolean {
        return withContext(Dispatchers.IO) {
            var connection: Connection? = null
            try {
                connection = DriverManager.getConnection(
                    "jdbc:sqlserver://<MSSQL_SERVER>;databaseName=<DATABASE_NAME>;user=<USER>;password=<PASSWORD>"
                )
                val query = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
                val preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrData)
                val resultSet: ResultSet = preparedStatement.executeQuery()
                resultSet.next() && resultSet.getInt(1) > 0
            } catch (e: SQLException) {
                Log.e("QRCode", "MSSQL 오류: ${e.message}")
                false
            } finally {
                connection?.close()
            }
        }
    }

    private suspend fun insertIntoMySQL(qrData: String) {
        withContext(Dispatchers.IO) {
            var connection: Connection? = null
            try {
                connection = DriverManager.getConnection(
                    "jdbc:mysql://<MYSQL_SERVER>:3306/<DATABASE_NAME>?useSSL=false",
                    "<USER>", "<PASSWORD>"
                )
                val query = "INSERT INTO ScannedData (QRCodeData, ScannedAt) VALUES (?, ?)"
                val preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrData)
                preparedStatement.setString(2, "<DEVICE_ID>")
                preparedStatement.executeUpdate()
            } catch (e: SQLException) {
                Log.e("QRCode", "MySQL 오류: ${e.message}")
            } finally {
                connection?.close()
            }
        }
    }

    override fun onResume() {
        super.onResume()
        if (modeToggle.isChecked) {
            codeScanner.startPreview()
        }
    }

    override fun onPause() {
        super.onPause()
        if (modeToggle.isChecked) {
            codeScanner.releaseResources()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    // 권한 체크 및 요청
    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                if (modeToggle.isChecked) {
                    setupQrMode()
                } else {
                    setupFullMode()
                }
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA,
            Manifest.permission.RECORD_AUDIO
        )
    }
}
4. 코드 설명
Gradle 설정: com.budiyev.android:code-scanner:2.1.0 라이브러리를 추가했습니다. 이를 통해 CodeScannerView를 사용할 수 있습니다.
QR 코드 모드: CodeScannerView를 사용해 QR 코드를 빠르게 인식하고, MSSQL 데이터베이스에서 QR 코드가 유효한지 확인한 후, MySQL에 데이터를 저장합니다.
전체 모드: CameraX와 PreviewView를 사용해 카메라 프리뷰를 보여줍니다.
권한 요청: 앱이 실행될 때 카메라와 오디오 권한이 부여되었는지 확인하고, 필요한 경우 요청합니다.
5. 해결 방법
빨간 글씨 오류 해결: 의존성 추가와 XML, Kotlin 코드에서 올바른 라이브러리를 참조하고 있는지 확인합니다. CodeScannerView를 사용하려면 build.gradle(:app)에 code-scanner 라이브러리를 포함해야 합니다.
로그를 통해 디버깅: 코드가 제대로 실행되지 않거나 QR 코드 인식이 안 될 경우, 로그를 통해 어떤 부분에서 문제가 발생했는지 확인할 수 있습니다.
이 방법을 통해 QR 코드 모드와 전체 모드를 간단히 전환할 수 있으며, MSSQL과 MySQL을 연동한 QR 코드 처리도 가능합니다. 추가 질문이 있거나 문제가 지속되면 언제든지 말씀해 주세