와 같이 수정할 수 있습니다. 1초를 타임아웃으로 설정하고, 응답이 오지 않으면 설정된 재시도 횟수만큼 재시도한 뒤 최종 실패 시 로그에 기록하도록 구현했습니다.

csharp
코드 복사
private const int TimeoutDuration = 1000; // 타임아웃 시간 1000ms (1초)
private const int RetryCount = 3; // 재시도 횟수

public async Task<string> SendCommandWithRetryAsync(string command)
{
    int attempt = 0;
    string response = string.Empty;

    while (attempt < RetryCount)
    {
        attempt++;

        // 응답 수신 시도
        var responseTask = SendCommandAsync(command);
        if (await Task.WhenAny(responseTask, Task.Delay(TimeoutDuration)) == responseTask)
        {
            response = responseTask.Result;
            if (!string.IsNullOrEmpty(response))
            {
                LogT5($"응답 수신 성공: {response} (시도 횟수: {attempt})");
                return response;
            }
        }

        // 응답 미수신 시 재시도
        LogT5($"응답 미수신, 재시도 중... (시도 횟수: {attempt})");
        await Task.Delay(500); // 재시도 전 짧은 대기 시간 추가
    }

    // 최종 실패 시 로깅
    LogT5($"응답 수신 실패: {command}, 최종 시도 횟수: {RetryCount}");
    return "응답 실패";
}

private async Task<string> SendCommandAsync(string command)
{
    try
    {
        LogT5($"명령 전송: {command}");
        await networkStream.WriteAsync(Encoding.ASCII.GetBytes(command)); // 명령 전송

        byte[] buffer = new byte[1024];
        int bytesRead = await networkStream.ReadAsync(buffer, 0, buffer.Length); // 응답 수신
        string response = Encoding.ASCII.GetString(buffer, 0, bytesRead);

        LogT5($"응답 수신: {response}");
        return response;
    }
    catch (Exception ex)
    {
        LogT5($"통신 오류: {ex.Message}");
        return string.Empty;
    }
}

private void LogT5(string message)
{
    msgvs.Instance.LogT5($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {message}");
}
설명
타임아웃 설정: TimeoutDuration을 1초(1000ms)로 설정하였습니다. Task.WhenAny를 사용하여 SendCommandAsync 함수가 1초 이내에 응답을 받을 수 있도록 대기합니다. 응답이 오지 않으면 타임아웃이 발생하여 다음 재시도로 넘어갑니다.
재시도 횟수: RetryCount만큼 재시도하도록 설정했습니다. 응답이 없으면 로그에 시도 횟수를 기록하며, 3번 시도 후에도 실패하면 최종 실패로 기록합니다.