습니다. 창 크기 변경 기능을 추가하면서도 타이틀바 더블 클릭, 창 이동, 최소화/최대화/닫기 버튼 동작을 모두 정상적으로 유지하도록 하겠습니다. SkinableForm에서 창 크기 조절 기능을 구현하려면 WM_NCHITTEST 메시지를 처리하여 창의 각 모서리와 가장자리에서 크기 조절이 가능하도록 해야 합니다.

완벽한 창 크기 변경, 타이틀바 더블 클릭 및 기본 동작 구현
최종 코드
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;
    private Rectangle titleBarBounds; // 타이틀바 영역
    private const int TitleBarHeight = 30;

    // Windows 메시지 상수
    private const int WM_NCHITTEST = 0x84; // 창 비클라이언트 영역 클릭
    private const int HTBOTTOMRIGHT = 17; // 오른쪽 하단 모서리
    private const int HTBOTTOM = 15; // 하단
    private const int HTRIGHT = 11; // 오른쪽
    private const int HTCAPTION = 2; // 타이틀바

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, TitleBarHeight, 0, 0); // 타이틀바 높이 확보
        this.DoubleBuffered = true; // 깜빡임 방지

        // 타이틀바 영역 초기화
        titleBarBounds = new Rectangle(0, 0, this.Width, TitleBarHeight);

        // 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 타이틀바와 버튼 위치 업데이트
        this.SizeChanged += UpdateLayout;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        var button = new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            }
        };
        button.Click += clickHandler; // 클릭 이벤트 등록
        return button;
    }

    private void UpdateLayout(object sender, EventArgs e)
    {
        // 버튼 위치 업데이트
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
        titleBarBounds = new Rectangle(0, 0, this.Width, TitleBarHeight); // 타이틀바 영역 재설정
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, new Rectangle(0, 0, this.Width, TitleBarHeight));
        }

        // 타이틀바 텍스트
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    protected override void WndProc(ref Message m)
    {
        base.WndProc(ref m);

        // 창 크기 변경 및 타이틀바 클릭 처리
        if (m.Msg == WM_NCHITTEST)
        {
            Point cursorPosition = PointToClient(Cursor.Position);

            if (cursorPosition.X >= this.Width - 10 && cursorPosition.Y >= this.Height - 10)
            {
                m.Result = (IntPtr)HTBOTTOMRIGHT; // 오른쪽 하단 모서리
            }
            else if (cursorPosition.Y >= this.Height - 10)
            {
                m.Result = (IntPtr)HTBOTTOM; // 하단
            }
            else if (cursorPosition.X >= this.Width - 10)
            {
                m.Result = (IntPtr)HTRIGHT; // 오른쪽
            }
            else if (titleBarBounds.Contains(cursorPosition))
            {
                m.Result = (IntPtr)HTCAPTION; // 타이틀바
            }
        }
    }

    protected override void OnMouseDoubleClick(MouseEventArgs e)
    {
        base.OnMouseDoubleClick(e);

        // 타이틀바 더블 클릭으로 최대화/복원
        if (titleBarBounds.Contains(e.Location))
        {
            ToggleMaximizeRestore();
        }
    }

    private void ToggleMaximizeRestore()
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        ToggleMaximizeRestore(); // 최대화/복원
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
주요 구현 사항
창 크기 변경 지원:

WM_NCHITTEST 메시지를 처리하여 창의 모서리와 가장자리에서 크기 조절 가능.
오른쪽(HTRIGHT), 하단(HTBOTTOM), 오른쪽 하단 모서리(HTBOTTOMRIGHT)에서 크기 조정 활성화.
타이틀바 더블 클릭:

OnMouseDoubleClick 메서드에서 타이틀바 영역을 감지하여 더블 클릭으로 창을 최대화/복원.
창 이동 지원:

WM_NCHITTEST에서 타이틀바 영역을 감지하고, HTCAPTION을 반환하여 창 이동 동작 활성화.
버튼 동작:

최소화, 최대화/복원, 닫기 버튼을 SimpleButton으로 구현.
창 크기 변경 시 버튼 위치를 동적으로 업데이트.
UI 디자인:

타이틀바 배경과 텍스트는 OnPaint에서 렌더링.
결과
창 크기 조정:

창의 모서리와 가장자리에서 마우스를 드래그하여 크기를 조정할 수 있습니다.
타이틀바 더블 클릭:

타이틀바를 더블 클릭하면 창이 최대화/복원됩니다.
창 이동:

타이틀바를 드래그하여 창을 이동할 수 있습니다.
버튼 동작:

타이틀바 우측의 최소화, 최대화/복원, 닫기 버튼이 정상 작동합니다.