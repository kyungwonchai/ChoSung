현하는 방식으로, 다음과 같은 구조로 처리하겠습니다:

전체 일시정지: 버튼을 누르면 모든 작업이 현재 진행 중인 함수까지 실행하고 나서 정지됩니다. 즉, 현재 진행 중인 함수는 끝까지 실행하고, 그 이후의 작업은 대기 상태로 전환됩니다.

Resume: 일시정지 후, Resume 버튼을 누르면 특정 위치에서 작업을 재개하며, 해당 행의 작업부터 아래로 쌓인 작업들이 순차적으로 대기열에 다시 추가되어 실행됩니다.

새로운 작업 감지: 일시정지와 무관하게 새로운 파일이 감지되면, 그 작업은 계속해서 대기열에 추가되어야 합니다.

주요 요구사항:
일시정지 버튼: 모든 작업을 일시정지. 현재 작업을 마친 후 작업을 멈추게 해야 함.
Resume 버튼: 일시정지된 상태에서, 특정 행부터 작업을 재개.
실시간 작업 추가: 일시정지 상태에서도 새로운 작업이 감지되면 대기열에 추가.
수정된 코드 예시
1. TaskModel Class (비동기 작업과 상태 관리)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

public class TaskModel : ViewModelBase
{
    // 로그 엔트리 정보
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 비동기 함수 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 각 함수 상태를 도형으로 표현 (도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 현재 작업이 대기, 실행, 완료 상태인지 나타냄
    public string Status { get; set; }

    // 개별 실행 명령어
    public ICommand FunctionClickCommand { get; }

    public TaskModel(LogEntry logEntry)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;

        // 비동기 함수 리스트 초기화 및 함수 추가
        FunctionTasks = new List<Func<Task>>
        {
            ExecuteTaskA,
            ExecuteTaskB,
            ExecuteTaskC
        };

        // FunctionStatusColors 리스트 초기화 (각 함수의 상태를 색상으로 표현)
        FunctionStatusColors = new ObservableCollection<Brush>
        {
            Brushes.Gray,  // Task A 초기 상태
            Brushes.Gray,  // Task B 초기 상태
            Brushes.Gray   // Task C 초기 상태
        };

        // 상태 초기화
        Status = "Pending";

        // 도형 클릭 명령어 설정
        FunctionClickCommand = new RelayCommand<int>(ExecuteSpecificTask);
    }

    /// <summary>
    /// 도형을 클릭하여 특정 함수를 실행합니다.
    /// </summary>
    private async void ExecuteSpecificTask(int index)
    {
        // 해당 인덱스의 비동기 함수 실행
        await FunctionTasks[index]();

        // 함수 실행 후 도형 색상을 업데이트 (녹색으로 변경)
        Application.Current.Dispatcher.Invoke(() =>
        {
            FunctionStatusColors[index] = Brushes.Green;
        });
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        Status = "Running"; // 실행 중으로 상태 변경
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            await FunctionTasks[i]();

            // 함수 실행 후 색상 변경
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green;
            });
        }
        Status = "Completed"; // 완료 상태로 변경
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
설명:
FunctionTasks는 비동기 함수(Task A, B, C)를 관리하는 리스트로, 각 함수는 대기 상태에서 실행 후 도형의 색상을 녹색으로 변경합니다.
Status는 작업의 상태(대기, 실행 중, 완료)를 관리합니다.
ExecuteTaskSequence는 각 작업(함수)을 순차적으로 실행하며, 완료 후 상태를 변경합니다.
2. MainViewModel Class (전체 일시정지 및 Resume 구현)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    // 작업이 일시정지 상태인지 여부
    private bool isPaused;

    // 명령어: 전체 일시정지
    public ICommand PauseAllCommand { get; }

    // 명령어: 전체 재개
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" })
        };

        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand<TaskModel>(ResumeTasksFrom);
    }

    /// <summary>
    /// 전체 작업을 일시정지
    /// </summary>
    private void PauseAllTasks()
    {
        isPaused = true;

        // 각 작업을 일시정지 상태로 변경
        foreach (var task in TaskList)
        {
            if (task.Status == "Running")
            {
                task.Status = "Paused";
            }
        }
    }

    /// <summary>
    /// 특정 행(TaskModel)부터 작업을 재개
    /// </summary>
    private void ResumeTasksFrom(TaskModel selectedTask)
    {
        if (isPaused)
        {
            isPaused = false;

            // 선택된 행부터 남은 작업들을 순차적으로 실행
            var startIndex = TaskList.IndexOf(selectedTask);
            for (int i = startIndex; i < TaskList.Count; i++)
            {
                var task = TaskList[i];
                if (task.Status == "Paused" || task.Status == "Pending")
                {
                    _ = task.ExecuteTaskSequence();  // 작업 재개
                }
            }
        }
    }
}
설명:
isPaused 플래그를 사용해 전체 일시정지 상태를 관리합니다.
PauseAllCommand는 전체 작업을 일시정지 상태로 전환하며, 현재 실행 중인 작업은 그 작업의 마지막 함수까지 완료한 후 멈춥니다.
ResumeTasksFrom은 Resume 버튼을 클릭하면 선택한 행부터 작업을 재개하고, 그 이후의 모든 작업을 순차적으로 다시 대기열에 추가해 실행합니다.
3. XAML (UI - 전체 일시정지 및 Resume 버튼 추가)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- 전체 일시정지 버튼 -->
        <Button Content="Pause All" Command="{Binding PauseAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10"/>
        
        <!-- Resume 버튼 -->
        <Button Content="Resume From Selected" Command="{Binding ResumeAllCommand}" CommandParameter="{Binding SelectedItem, ElementName=TaskDataGrid}"
                HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="10"/>
    </Grid>
</Window>
설명:
DataGrid는 각 작업(TaskModel)의 MAG_NO, PO_NO, 그리고 작업 상태를 표시합니다.
Pause All 버튼은 모든 작업을 일시정지시키며, 현재 실행 중인 작업을 마지막 함수까지 완료한 후 정지시킵니다.
