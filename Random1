래는 MSSQL에서 사용 가능한 AFTER INSERT 트리거를 작성한 코드입니다. 이 트리거는 Table_InspectionResult 테이블에 INSERT가 발생하면, 특정 IP 범위에 따라 추가로 인서트하며, mp1data ~ mp10data 값에 대해 -0.6 ~ +0.6 범위의 랜덤한 실수를 생성하여 저장합니다.

sql
코드 복사
CREATE TRIGGER trg_InsertInspectionResult
ON Table_InspectionResult
AFTER INSERT
AS
BEGIN
    SET NOCOUNT ON;

    -- 추가 인서트를 발생시킬 C 클래스 IP 리스트
    DECLARE @CClassIPs TABLE (IPClass INT);
    INSERT INTO @CClassIPs (IPClass)
    VALUES (165), (166), (167), (179), (171), (172), (152), (153), (154), (155), (158);

    -- INSERT된 데이터에서 ipname의 C 클래스 부분 추출
    DECLARE @OriginalIP VARCHAR(15);
    SELECT @OriginalIP = ipname FROM INSERTED;

    -- C 클래스 확인: "10.22.164.*" 형태인지 체크
    IF CHARINDEX('10.22.164.', @OriginalIP) = 1
    BEGIN
        -- @OriginalIP에서 IP를 제외한 다른 정보 추출
        DECLARE @inspectiontime DATETIME, @modelname NVARCHAR(50), @alignresult NVARCHAR(50);
        SELECT 
            @inspectiontime = inspectiontime,
            @modelname = modelname,
            @alignresult = alignresult
        FROM INSERTED;

        -- 각 C 클래스 IP에 대해 추가 INSERT 발생
        INSERT INTO Table_InspectionResult (ipname, inspectiontime, modelname, alignresult, mp1data, mp1result, mp2data, mp2result, mp3data, mp3result, mp4data, mp4result, mp5data, mp5result, mp6data, mp6result, mp7data, mp7result, mp8data, mp8result, mp9data, mp9result, mp10data, mp10result)
        SELECT 
            CONCAT('10.22.', IPClass, '.', PARSENAME(@OriginalIP, 1)), -- 새로운 ipname
            @inspectiontime, -- 기존 inspectiontime
            @modelname, -- 기존 modelname
            @alignresult, -- 기존 alignresult
            -- mp1data ~ mp10data는 -0.6 ~ +0.6 랜덤 값
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp1result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp2result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp3result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp4result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp5result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp6result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp7result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp8result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK', -- mp9result
            CAST((RAND(CHECKSUM(NEWID())) * 1.2 - 0.6) AS DECIMAL(6, 3)),
            'OK'  -- mp10result
        FROM @CClassIPs;
    END
END;
주요 동작 원리:
트리거 조건: AFTER INSERT로 설정해 Table_InspectionResult에 인서트가 발생하면 실행됩니다.
IP 확인: INSERTED 테이블에서 삽입된 데이터의 ipname을 확인하여 10.22.164.*인지 판별합니다.
C 클래스 추가 IP 목록: 165, 166, ... 158의 C 클래스 목록에 대해 각 IP에 대해 반복적으로 새로운 데이터를 생성하고 인서트합니다.
랜덤 실수 생성: RAND(CHECKSUM(NEWID()))를 활용해 -0.6 ~ +0.6 범위의 랜덤 값을 생성합니다.
다중 INSERT: 추가 데이터가 원본 INSERT 데이터를 기반으로 추가됩니다.
테스트:
트리거를 적용한 뒤, 아래와 같이 테스트 데이터를 삽입하여 동작을 확인합니다.

sql
코드 복사
INSERT INTO Table_InspectionResult (ipname, inspectiontime, modelname, alignresult, mp1data, mp1result)
VALUES ('10.22.164.22', GETDATE(), 'ModelA', 'Aligned', 0.5, 'OK');