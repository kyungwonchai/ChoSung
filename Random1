정말 죄송합니다. 제가 설명을 명확하게 드리지 못하고 계속해서 부분적인 코드나 "이전과 동일"이라는 표현을 사용하여 사용자님을 더욱 답답하게 만든 것 같습니다. 진심으로 사과드립니다.

사용자님의 요구는 명확합니다. 오류 없이, 바로 실행 가능한 MainViewModel.cs의 전체 코드를 원하시는군요. 로그인 시스템이 제거되고, 하드코딩된 암호로 모드를 변경하며, DatabaseService와 BrokerClientService가 null일 경우에도 최소한 ViewModel 객체 자체가 오류 없이 생성될 수 있도록 방어적인 코드를 포함해야 합니다.

지금 바로 MGSPMonitorControl/ViewModels/MainViewModel.cs 파일의 수정된 전체 코드를 드리겠습니다. 이 코드는 서비스 객체가 null일 가능성을 염두에 두고 작성되었습니다.

C#

// MGSPMonitorControl/ViewModels/MainViewModel.cs
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Security; // SecureString은 PasswordBox에서 직접 받으므로 여기선 불필요할 수 있음
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls; // PasswordBox
using System.Windows.Input;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;
using MGSPMonitorControl.Views; // AgentConfigWindow 등 View 참조
using MonitorControl.SharedModels; // 공용 네임스페이스 (BrokerMessage 등)
using Newtonsoft.Json;

namespace MGSPMonitorControl.ViewModels
{
    public enum ApplicationMode
    {
        Basic,
        User,
        Admin
    }

    public class MainViewModel : ObservableObject // ObservableObject는 이전 답변에서 제공한 기본 클래스
    {
        // --- 하드코딩된 암호 (보안에 매우 취약! 실제 환경에서는 절대 사용 금지) ---
        private const string UserModePassword = "user123";
        private const string AdminModePassword = "admin123";
        // --- ---

        private readonly IDatabaseService _databaseService; // null일 수 있음을 인지하고 사용
        private readonly IBrokerClientService _brokerClientService; // null일 수 있음을 인지하고 사용

        public ObservableCollection<ManagedAgentDisplay> Agents { get; }
        public ObservableCollection<string> UiActionLogs { get; }
        public BrokerStatusDisplay BrokerStatus { get; private set; }

        private ManagedAgentDisplay _selectedAgent;
        public ManagedAgentDisplay SelectedAgent
        {
            get => _selectedAgent;
            set
            {
                if (SetProperty(ref _selectedAgent, value))
                {
                    RefreshAllCommandStates();
                }
            }
        }

        private string _brokerConnectionStatus = "Broker Service Not Initialized";
        public string BrokerConnectionStatus
        {
            get => _brokerConnectionStatus;
            set
            {
                if (SetProperty(ref _brokerConnectionStatus, value))
                {
                    RefreshAllCommandStates();
                }
            }
        }

        private ApplicationMode _currentMode = ApplicationMode.Basic;
        public ApplicationMode CurrentMode
        {
            get => _currentMode;
            private set
            {
                if (SetProperty(ref _currentMode, value))
                {
                    OnPropertyChanged(nameof(CanManageAgents));
                    OnPropertyChanged(nameof(CanControlPower));
                    OnPropertyChanged(nameof(CurrentModeDisplay));
                    RefreshAllCommandStates();
                    AddUiLog($"Application mode changed to: {CurrentMode}");
                }
            }
        }

        public string CurrentModeDisplay => $"Current Mode: {CurrentMode}";
        public bool CanManageAgents => CurrentMode == ApplicationMode.Admin;
        public bool CanControlPower => CurrentMode == ApplicationMode.Admin || CurrentMode == ApplicationMode.User;
        public string UiUserIdentifier => $"{Environment.UserName}@{Environment.MachineName}";

        // Commands
        public ICommand LoadAgentsCommand { get; }
        public RelayCommand<PasswordBox> ApplyModeCommand { get; }
        public ICommand LogoutCommand { get; }
        public ICommand AddAgentCommand { get; }
        public ICommand EditAgentCommand { get; }
        public ICommand DeleteAgentCommand { get; }
        public ICommand MonitorOnCommand { get; }
        public ICommand MonitorOffCommand { get; }
        public ICommand PingAgentCommand { get; }
        public ICommand RequestBrokerStatusCommand { get; }
        public ICommand ConnectToBrokerCommand { get; }
        public ICommand DisconnectFromBrokerCommand { get; }
        public ICommand ClearUiLogsCommand { get; }

        public MainViewModel(IDatabaseService databaseService, IBrokerClientService brokerClientService)
        {
            _databaseService = databaseService; // null이 전달될 수 있음 (App.xaml.cs의 단순화된 테스트 버전)
            _brokerClientService = brokerClientService; // null이 전달될 수 있음

            Agents = new ObservableCollection<ManagedAgentDisplay>();
            UiActionLogs = new ObservableCollection<string>();
            BrokerStatus = new BrokerStatusDisplay(); // null이 아니도록 초기화

            AddUiLog($"Application MainViewModel initialized. Initial mode: {CurrentMode}.");
            if (_databaseService == null) AddUiLog("[WARNING] DatabaseService is NULL. Agent configuration and logging will be unavailable.");
            if (_brokerClientService == null) AddUiLog("[WARNING] BrokerClientService is NULL. Communication with Broker will be unavailable.");
            else
            {
                // BrokerClientService가 null이 아닐 때만 이벤트 구독
                _brokerClientService.Connected += OnBrokerConnected;
                _brokerClientService.Disconnected += OnBrokerDisconnected;
                _brokerClientService.MessageReceived += OnBrokerMessageReceived;
                BrokerConnectionStatus = _brokerClientService.IsConnected ? "Connected" : "Disconnected (UI Init)";
            }

            // Commands 초기화 (CanExecute 조건에서 서비스 null 체크 포함)
            LoadAgentsCommand = new RelayCommand(async () => await ExecuteLoadAgentsAsync(), () => _databaseService != null);
            ApplyModeCommand = new RelayCommand<PasswordBox>(ExecuteApplyMode, (pBox) => pBox != null);
            LogoutCommand = new RelayCommand(ExecuteLogout, () => CurrentMode != ApplicationMode.Basic);

            AddAgentCommand = new RelayCommand(ExecuteAddAgent, () => CanManageAgents && _databaseService != null);
            EditAgentCommand = new RelayCommand(ExecuteEditAgent, () => SelectedAgent != null && CanManageAgents && _databaseService != null);
            DeleteAgentCommand = new RelayCommand(async () => await ExecuteDeleteAgentAsync(), () => SelectedAgent != null && CanManageAgents && _databaseService != null);

            MonitorOnCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOn"),
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && IsBrokerConnectedAndReady());
            MonitorOffCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOff"),
                                               () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && IsBrokerConnectedAndReady());
            PingAgentCommand = new RelayCommand(async () => await ExecutePingAgentAsync(),
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && IsBrokerConnectedAndReady());

            RequestBrokerStatusCommand = new RelayCommand(async () => await ExecuteRequestBrokerStatusAsync(), () => IsBrokerConnectedAndReady());
            ConnectToBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.ConnectAsync(); }, () => _brokerClientService != null && !_brokerClientService.IsConnected);
            DisconnectFromBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.DisconnectAsync(); }, () => IsBrokerConnectedAndReady());
            ClearUiLogsCommand = new RelayCommand(() => UiActionLogs.Clear());

            // ViewModel 생성자에서 바로 데이터 로드 및 연결 시도
            // App.xaml.cs에서 서비스 초기화 실패 시 _databaseService 또는 _brokerClientService가 null일 수 있음
            if (_databaseService != null)
            {
                Task.Run(async () => await ExecuteLoadAgentsAsync());
            }
            if (_brokerClientService != null && !_brokerClientService.IsConnected)
            {
                Task.Run(async () => await _brokerClientService.ConnectAsync());
            }
            RefreshAllCommandStates(); // 초기 Command 상태 설정
        }

        private bool IsBrokerConnectedAndReady() => _brokerClientService != null && _brokerClientService.IsConnected;


        private void RefreshAllCommandStates()
        {
            Application.Current?.Dispatcher?.Invoke(() => // Dispatcher가 null일 수 있는 극단적인 상황 방지
            {
                (LoadAgentsCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ApplyModeCommand as RelayCommand<PasswordBox>)?.RaiseCanExecuteChanged();
                (LogoutCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (AddAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (EditAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DeleteAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOnCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOffCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (PingAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (RequestBrokerStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ConnectToBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DisconnectFromBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
            });
        }

        private void AddUiLog(string message)
        {
            Application.Current?.Dispatcher?.Invoke(() =>
            {
                string logEntry = $"[{DateTime.Now:HH:mm:ss.fff}] {message}";
                UiActionLogs.Insert(0, logEntry);
                if (UiActionLogs.Count > 200) UiActionLogs.RemoveAt(UiActionLogs.Count - 1);
            });
        }

        private void ExecuteApplyMode(PasswordBox passwordBox)
        {
            if (passwordBox == null) { AddUiLog("[ERROR] PasswordBox is null in ApplyMode."); return; }
            
            string enteredPassword = string.Empty;
            // SecureString을 사용하는 것이 더 안전하지만, 사용자 요구에 따라 평문 비교
            // 실제 사용시에는 PasswordBox.Password를 직접 사용하지 않는 것이 좋음
            enteredPassword = passwordBox.Password;
            passwordBox.Clear();

            if (string.IsNullOrEmpty(enteredPassword))
            {
                AddUiLog("[WARNING] Empty password entered for mode change.");
                return;
            }

            if (enteredPassword == AdminModePassword) CurrentMode = ApplicationMode.Admin;
            else if (enteredPassword == UserModePassword) CurrentMode = ApplicationMode.User;
            else
            {
                AddUiLog($"[WARNING] Invalid password ('{enteredPassword}') entered for mode change. Mode remains {CurrentMode}.");
                MessageBox.Show("Invalid password.", "Access Denied", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void ExecuteLogout() => CurrentMode = ApplicationMode.Basic;

        private async Task ExecuteLoadAgentsAsync()
        {
            if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available. Cannot load agents."); return; }
            AddUiLog("Loading managed agent configurations from database...");
            try
            {
                var dbAgents = await _databaseService.GetManagedAgentsAsync();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    Agents.Clear();
                    if (dbAgents != null)
                    {
                        foreach (var agent in dbAgents.OrderBy(a => a.AgentName))
                        {
                            agent.IsOnline = false; // 초기값
                            agent.CurrentMonitorStatus = "Unknown"; // 초기값
                            Agents.Add(agent);
                        }
                    }
                    SelectedAgent = null;
                });
                AddUiLog($"Loaded {dbAgents?.Count ?? 0} agent configurations from DB.");

                if (IsBrokerConnectedAndReady())
                {
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = UiUserIdentifier });
                }
            }
            catch (Exception ex)
            {
                AddUiLog($"[ERROR] Error loading agents from DB: {ex.ToString()}");
                MessageBox.Show($"Error loading agents from database: {ex.Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                RefreshAllCommandStates();
            }
        }

        private async void ExecuteAddAgent()
        {
            if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available for Add Agent."); return; }
            AddUiLog("Opening 'Add New Agent' window...");
            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + "Mode");
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm);

            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' configuration saved. Refreshing list.");
                await ExecuteLoadAgentsAsync();
            }
            else { AddUiLog("'Add New Agent' window cancelled."); }
        }

        private async void ExecuteEditAgent()
        {
            if (SelectedAgent == null || _databaseService == null) { AddUiLog(SelectedAgent == null ? "[WARN] No agent selected for edit." : "[ERROR] DatabaseService not available for Edit Agent."); return; }
            AddUiLog($"Opening 'Edit Agent' window for: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");

            ManagedAgentDisplay agentToEditInDb = null;
            try
            {
                agentToEditInDb = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid);
            }
            catch (Exception ex)
            {
                 AddUiLog($"[ERROR] Error fetching agent details for editing: {ex.GetBaseException().Message}");
                 MessageBox.Show($"Error fetching agent details: {ex.GetBaseException().Message}", "Database Error", MessageBoxButton.OK, MessageBoxImage.Error);
                 return;
            }
            
            if(agentToEditInDb == null) 
            { 
                AddUiLog($"Agent {SelectedAgent.AgentName} not found in DB for editing. Refreshing list."); 
                MessageBox.Show("Selected agent not found in database. It might have been deleted. Please refresh the list.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                await ExecuteLoadAgentsAsync(); 
                return; 
            }

            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + "Mode", agentToEditInDb);
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm);
            
            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' configuration updated. Refreshing list.");
                await ExecuteLoadAgentsAsync();
            }
            else { AddUiLog("'Edit Agent' window cancelled."); }
        }

        private async Task ExecuteDeleteAgentAsync()
        {
            if (SelectedAgent == null || _databaseService == null) { /* ... */ return; }
            if (MessageBox.Show($"Delete config for '{SelectedAgent.AgentName}' (AppID: {SelectedAgent.AgentIdProvidedByApp})?", "Confirm Delete", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                AddUiLog($"Deleting agent config: {SelectedAgent.AgentName}");
                try
                {
                    bool success = await _databaseService.DeleteManagedAgentAsync(SelectedAgent.AgentGuid);
                    if (success) { AddUiLog($"Agent '{SelectedAgent.AgentName}' deleted. Refreshing."); await ExecuteLoadAgentsAsync(); }
                    else { AddUiLog($"[ERROR] Failed to delete '{SelectedAgent.AgentName}'."); MessageBox.Show("Failed to delete.", "DB Error", MessageBoxButton.OK, MessageBoxImage.Error); }
                }
                catch (Exception ex) { AddUiLog($"[ERROR] Deleting '{SelectedAgent.AgentName}': {ex.Message}"); MessageBox.Show($"Error: {ex.Message}", "DB Error", MessageBoxButton.OK, MessageBoxImage.Error); }
            }
        }

        private async Task ExecuteMonitorControlAsync(string actionType)
        {
            if (SelectedAgent == null || _databaseService == null || !IsBrokerConnectedAndReady()) { AddUiLog("[WARN] Cannot send monitor control: No agent selected, or DB/Broker service unavailable, or Broker disconnected."); return; }

            string correlationIdString = Guid.NewGuid().ToString();
            Guid correlationIdGuid = Guid.Parse(correlationIdString);
            AddUiLog($"Sending '{actionType}' (CorrID: {correlationIdString}) to agent: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");

            ManagedAgentDisplay currentAgentConfig = null;
            try { currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid); }
            catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to get agent config for '{actionType}': {ex.Message}"); MessageBox.Show($"DB error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error); return; }
            if (currentAgentConfig == null) { AddUiLog($"[ERROR] Agent config for '{SelectedAgent.AgentName}' not found. Cannot send '{actionType}'."); MessageBox.Show("Agent config not found. Refresh list.", "Error", MessageBoxButton.OK, MessageBoxImage.Error); return; }

            var payload = new UiControlAgentPayload
            {
                TargetAgentIdProvidedByApp = currentAgentConfig.AgentIdProvidedByApp, ControlAction = actionType,
                ControlType = currentAgentConfig.ControlType, PrimaryIpAddress = currentAgentConfig.PrimaryIpAddress,
                PrimaryPort = currentAgentConfig.PrimaryPort,
                GatewayAgentIdToUse = currentAgentConfig.ControlType == "Gatewayed" ? currentAgentConfig.GatewayAgentIpAddress : null,
            };
            var message = new BrokerMessage
            {
                Type = MessageType.UiRequest_ControlAgent, CorrelationId = correlationIdString,
                Payload = JsonConvert.SerializeObject(payload), SourceId = UiUserIdentifier
            };

            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = currentAgentConfig.AgentGuid, CorrelationId = correlationIdGuid, ActionType = actionType,
                RequesterInfo = $"{CurrentMode} Mode ({UiUserIdentifier})", RequestTimestamp = DateTime.UtcNow,
                FinalStatus = "SentToBroker", ResultMessage = $"Command (CorrID: {correlationIdString}) sent to broker."
            };
            try { await _databaseService.LogControlActionAsync(logEntry); AddUiLog($"Initial log for CorrID {correlationIdString} saved."); }
            catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to log initial command send for CorrID {correlationIdString}: {ex.Message}"); }

            await _brokerClientService.SendMessageAsync(message);
        }

        private async Task ExecutePingAgentAsync()
        {
            if (SelectedAgent == null || !IsBrokerConnectedAndReady() || _databaseService == null) { AddUiLog("[WARN] Cannot Ping: No agent selected or Broker/DB service unavailable."); return; }
            string correlationIdString = Guid.NewGuid().ToString(); Guid correlationIdGuid = Guid.Parse(correlationIdString);
            AddUiLog($"Sending 'PingAgent' (CorrID: {correlationIdString}) to: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");
            
            var currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid);
            if (currentAgentConfig == null) { AddUiLog($"[ERROR] Agent config for '{SelectedAgent.AgentName}' not found for Ping."); return; }

            var payload = new UiControlAgentPayload
            {
                TargetAgentIdProvidedByApp = currentAgentConfig.AgentIdProvidedByApp, ControlAction = "PingAgent",
                ControlType = currentAgentConfig.ControlType, PrimaryIpAddress = currentAgentConfig.PrimaryIpAddress,
                PrimaryPort = currentAgentConfig.PrimaryPort, GatewayAgentIdToUse = currentAgentConfig.ControlType == "Gatewayed" ? currentAgentConfig.GatewayAgentIpAddress : null
            };
            var message = new BrokerMessage { Type = MessageType.UiRequest_ControlAgent, CorrelationId = correlationIdString, Payload = JsonConvert.SerializeObject(payload), SourceId = UiUserIdentifier };
            
            var logEntry = new ControlActionLogEntry { AgentGuid = currentAgentConfig.AgentGuid, CorrelationId = correlationIdGuid, ActionType = "PingAgent", RequesterInfo = $"{CurrentMode} Mode ({UiUserIdentifier})", RequestTimestamp = DateTime.UtcNow, FinalStatus = "PingSentToBroker" };
            try { await _databaseService.LogControlActionAsync(logEntry); } catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to log Ping send: {ex.Message}");}
            
            await _brokerClientService.SendMessageAsync(message);
        }

        private async Task ExecuteRequestBrokerStatusAsync()
        {
            if (!IsBrokerConnectedAndReady()) { AddUiLog("[WARN] Cannot request broker status: Not connected."); return; }
            AddUiLog("Requesting broker status and logs...");
            var message = new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = UiUserIdentifier };
            await _brokerClientService.SendMessageAsync(message);
        }

        #region Broker Event Handlers
        private void OnBrokerConnected()
        {
            Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Connected"; AddUiLog("Successfully connected to Broker Service."); RefreshAllCommandStates();
            });
            if (_brokerClientService == null) return;
            Task.Run(async () => {
                string uiIdentifier = UiUserIdentifier;
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiClientHello, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = uiIdentifier });
            });
        }

        private void OnBrokerDisconnected()
        {
             Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Disconnected"; AddUiLog("Disconnected from Broker Service. Check Broker. Will auto-retry if BrokerClientService is designed for it.");
                foreach(var agent in Agents) { agent.IsOnline = false; agent.CurrentMonitorStatus = "Offline (Broker D/C)"; }
                RefreshAllCommandStates();
             });
        }

        private void OnBrokerMessageReceived(BrokerMessage message) 
        {
             Application.Current.Dispatcher.Invoke(() =>
            {
                try
                {
                    switch (message.Type)
                    {
                        case MessageType.BrokerToUi_InitialAgentList:
                            var agentListPayload = JsonConvert.DeserializeObject<List<LiveAgentInfoForUi>>(message.Payload);
                            if (agentListPayload != null) { UpdateAgentListFromBroker(agentListPayload, true); AddUiLog($"Rcvd initial list of {agentListPayload.Count} live agents."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated:
                        case MessageType.BrokerToUi_BroadcastAgentStatus:
                            var liveAgentInfo = JsonConvert.DeserializeObject<LiveAgentInfoForUi>(message.Payload);
                            if (liveAgentInfo != null) { UpdateSingleAgentStatus(liveAgentInfo); if(message.Type == MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated) AddUiLog($"Agent '{liveAgentInfo.AgentIdProvidedByApp}' connection status updated."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentDisconnected:
                            string disconnectedAgentId = message.SourceId; 
                            var agentToMarkOffline = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == disconnectedAgentId);
                            if (agentToMarkOffline != null) { agentToMarkOffline.IsOnline = false; agentToMarkOffline.CurrentMonitorStatus = "Offline (Disconnected)"; agentToMarkOffline.LastStatusMessageFromAgent = "Disconnected from Broker"; AddUiLog($"Agent disconnected from Broker: {disconnectedAgentId}"); RefreshAllCommandStates(); }
                            break;
                        case MessageType.BrokerToUi_ForwardAgentCommandResult:
                            var cmdResultPayload = JsonConvert.DeserializeObject<AgentCommandResultPayload>(message.Payload);
                            if (cmdResultPayload != null && !string.IsNullOrEmpty(message.SourceId))
                            {
                                AddUiLog($"Result for CmdID [{message.CorrelationId}] from Agent [{message.SourceId}]: {(cmdResultPayload.Success ? "OK" : "NG")} - {cmdResultPayload.Message}");
                                var agentForResult = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == message.SourceId);
                                if(agentForResult != null) { agentForResult.CurrentMonitorStatus = cmdResultPayload.CurrentMonitorStatus; agentForResult.LastStatusMessageFromAgent = $"CmdRes: {cmdResultPayload.Message.Substring(0, Math.Min(cmdResultPayload.Message.Length,100))}"; agentForResult.IsOnline = true; RefreshAllCommandStates(); }
                                if (Guid.TryParse(message.CorrelationId, out Guid correlationGuid)) { UpdateControlActionLogAsync(correlationGuid, message.SourceId, cmdResultPayload.Success, cmdResultPayload.Message, cmdResultPayload.CurrentMonitorStatus, DateTime.UtcNow).ConfigureAwait(false); }
                                else { AddUiLog($"[WARN] Invalid CorrelationId format for DB log: {message.CorrelationId}"); }
                            }
                            break;
                        case MessageType.BrokerToUi_CommandDispatchFailed:
                             var dispatchFailPayload = JsonConvert.DeserializeObject<dynamic>(message.Payload);
                             string reason = dispatchFailPayload?.Message ?? "Unknown dispatch error";
                             string failedTargetAgentId = message.TargetId ?? message.SourceId; 
                             AddUiLog($"[ERROR] Broker failed to dispatch command [{message.CorrelationId}] for Agent [{failedTargetAgentId}]: {reason}");
                             if (Guid.TryParse(message.CorrelationId, out Guid correlationGuidFail)) { UpdateControlActionLogAsync(correlationGuidFail, failedTargetAgentId, false, $"Broker Dispatch Failed: {reason}", null, DateTime.UtcNow, "FailureAtBroker").ConfigureAwait(false); }
                             else { AddUiLog($"[WARN] Invalid CorrelationId format for DB log (DispatchFail): {message.CorrelationId}"); }
                            break;
                        case MessageType.BrokerToUi_SendBrokerStatus:
                            var brokerStatusPayload = JsonConvert.DeserializeObject<BrokerStatusInfoPayload>(message.Payload);
                            if (brokerStatusPayload != null) { BrokerStatus.UpdateFromServerPayload(brokerStatusPayload); AddUiLog("Broker status and logs updated."); }
                            break;
                        default: AddUiLog($"Rcvd unhandled msg type '{message.Type}' from Broker. Src: {message.SourceId}"); break;
                    }
                }
                catch (JsonException jsonEx) { AddUiLog($"[ERROR] Parse payload error {message.Type}: {jsonEx.Message}. Payload: {message.Payload}"); }
                catch (Exception ex) { AddUiLog($"[ERROR] Processing message {message.Type}: {ex.Message}. Details: {ex.ToString()}"); }
            });
        }
        
        private void UpdateAgentListFromBroker(List<LiveAgentInfoForUi> liveAgents, bool isInitialLoad)
        {
            if (Application.Current == null) return; // 앱 종료 중일 수 있음
            Application.Current.Dispatcher.Invoke(() =>
            {
                foreach (var liveAgent in liveAgents)
                {
                    UpdateSingleAgentStatus(liveAgent);
                }
                if(isInitialLoad) { 
                    foreach(var dbAgentConfig in Agents.ToList()) { 
                        if(!liveAgents.Any(la => la.AgentIdProvidedByApp == dbAgentConfig.AgentIdProvidedByApp && la.IsOnline)) {
                            dbAgentConfig.IsOnline = false;
                            dbAgentConfig.CurrentMonitorStatus = "Offline (Not on Broker)";
                        }
                    }
                }
                RefreshAllCommandStates();
            });
        }

        private void UpdateSingleAgentStatus(LiveAgentInfoForUi liveInfo)
        {
            if (Application.Current == null) return;
             Application.Current.Dispatcher.Invoke(() =>
            {
                var agentInUiList = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == liveInfo.AgentIdProvidedByApp);
                if (agentInUiList != null)
                {
                    agentInUiList.UpdateLiveStatus(liveInfo);
                }
                else
                {
                    AddUiLog($"Live agent '{liveInfo.AgentIdProvidedByApp}' (IP: {liveInfo.PrimaryReportedIpAddress}) from Broker is not in the local DB configuration list. Add via 'Add Agent Config'.");
                }
                if (SelectedAgent != null && SelectedAgent.AgentIdProvidedByApp == liveInfo.AgentIdProvidedByApp)
                {
                    RefreshAllCommandStates();
                }
            });
        }
        
        private async Task UpdateControlActionLogAsync(Guid correlationId, string agentIdProvidedByApp, 
                                                    bool success, string resultMessage, string finalMonitorStatus, 
                                                    DateTime completedTimestamp, string finalStatusOverride = null)
        {
            if (_databaseService == null) { AddUiLog("[DB LOG ERROR] DatabaseService not available."); return; }
            var agentConfig = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == agentIdProvidedByApp);
            if (agentConfig == null)
            {
                AddUiLog($"[DB LOG ERROR] Cannot log final status: Agent config with AppID {agentIdProvidedByApp} not found for CorrId {correlationId}.");
                return;
            }

            // TODO: CorrelationId로 기존 로그를 찾아 '업데이트' 하는 로직이 DB 서비스에 필요.
            // 현재는 새 로그를 생성.
            string originalActionType = "ControlAction_Result"; // 실제 ActionType은 CorrelationId로 찾아야 함.

            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = agentConfig.AgentGuid,
                CorrelationId = correlationId,
                ActionType = originalActionType, 
                RequestTimestamp = completedTimestamp.AddMinutes(-1), // TODO: 올바른 원래 요청 시간 필요
                ExecutionCompletedTimestamp = completedTimestamp,
                FinalStatus = finalStatusOverride ?? (success ? "Success" : "FailureAtAgent"),
                ResultMessage = resultMessage,
                RequesterInfo = $"{CurrentMode} Mode ({UiUserIdentifier})"
            };
            AddUiLog($"Logging final status for {agentConfig.AgentName} (CorrId: {correlationId}) to DB. Status: {logEntry.FinalStatus}");
            try
            {
                await _databaseService.LogControlActionAsync(logEntry);
            }
            catch (Exception ex)
            {
                AddUiLog($"[DB ERROR] Failed to log final command status for {agentConfig.AgentName} to DB: {ex.Message}");
            }
        }
        
        #endregion

        public void Cleanup() 
        {
            AddUiLog("MainViewModel is cleaning up resources...");
            if (_brokerClientService != null)
            {
                _brokerClientService.Connected -= OnBrokerConnected;
                _brokerClientService.Disconnected -= OnBrokerDisconnected;
                _brokerClientService.MessageReceived -= OnBrokerMessageReceived;
                try { Task.Run(async () => await _brokerClientService.DisconnectAsync()).Wait(TimeSpan.FromMilliseconds(500)); } catch { /* ignore */ }
                (_brokerClientService as IDisposable)?.Dispose();
            }
            AddUiLog("MainViewModel cleanup finished.");
        }
    }
}
MainViewModel.cs의 핵심 변경 사항:

생성자에서 서비스 null 허용: _databaseService와 _brokerClientService가 null로 전달되어도 생성자에서 예외를 던지지 않고, 대신 null일 경우 경고 로그를 남기고 관련 기능이 비활성화될 수 있도록 했습니다. (이렇게 하면 App.xaml.cs에서 서비스 초기화에 실패해도 UI 창 자체는 뜰 가능성이 생깁니다.)
서비스 사용 전 null 체크: 모든 메서드에서 _databaseService나 _brokerClientService를 사용하기 전에 null이 아닌지 확인하는 로직을 추가했습니다. (예: if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available."); return; })
커맨드의 CanExecute 조건 강화: 커맨드가 실행될 수 있는 조건에 해당 서비스가 null이 아니고, Broker의 경우 연결되어 있는지 등을 확인하도록 수정했습니다.
RefreshAllCommandStates() 호출 시점 조정: 주요 상태 변경(모드 변경, 연결 상태 변경, Agent 선택 변경) 시 커맨드의 CanExecute 상태를 다시 평가하도록 했습니다.
UiUserIdentifier 속성 추가: 로그인 정보 대신 간단한 UI 사용자 식별자를 사용합니다.
로그 기록 시 RequesterInfo: ControlActionLogEntry에 현재 모드와 UiUserIdentifier를 기록하도록 수정했습니다.
기타 방어 코드 및 로그 추가: 전반적으로 null 참조나 예외 발생 가능성을 줄이기 위한 방어 코드와 상황 파악을 위한 로그를 추가했습니다.
이제 이 MainViewModel.cs 코드를 프로젝트에 적용하시고, 이전 답변에서 드린 MainWindow.xaml과 App.xaml.cs (극도로 단순화된 버전 또는 서비스 초기화가 포함된 버전)와 함께 테스트해보시면 됩니다.