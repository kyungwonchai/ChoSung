네, 맞습니다. 이 앱은 백그라운드 서비스로 작동하며, 다른 앱의 입력 창에 블루투스 스캐너에서 읽은 데이터를 자동으로 넣습니다. 이제 Kotlin DSL을 사용하여 API 레벨 26 이상에서 작동하는 전체 코드를 제공하겠습니다.

1. 프로젝트 설정
Android Studio에서 새로운 프로젝트를 생성합니다. 프로젝트 이름과 패키지 이름을 지정하고, 언어로 Kotlin을 선택합니다.

2. build.gradle 설정
프로젝트 수준과 모듈 수준의 build.gradle 파일을 설정합니다.

프로젝트 수준 build.gradle
groovy
코드 복사
buildscript {
    ext.kotlin_version = '1.7.10'
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.1.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}
모듈 수준 build.gradle
groovy
코드 복사
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.btscannerapp"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
3. AndroidManifest.xml 설정
접근성 서비스와 블루투스 권한을 추가합니다.

xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.btscannerapp">

    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BTScannerApp">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".MyAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>

</manifest>
4. 접근성 서비스 설정 파일 추가
res/xml/accessibility_service_config.xml 파일을 추가합니다.

res/xml/accessibility_service_config.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name"
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
5. MainActivity.kt 작성
블루투스 스캐너에서 데이터를 읽어오는 코드를 작성합니다.

MainActivity.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : AppCompatActivity() {

    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
6. 접근성 서비스 클래스 작성
다른 앱의 입력창에 데이터를 넣는 코드를 작성합니다.

MyAccessibilityService.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.accessibilityservice.AccessibilityService
import android.os.Bundle
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class MyAccessibilityService : AccessibilityService() {

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // 이벤트 처리
    }

    override fun onInterrupt() {
        // 인터럽트 처리
    }

    fun setTextToInputField(packageName: String, text: String) {
        val rootNode = rootInActiveWindow ?: return
        val nodeList = ArrayList<AccessibilityNodeInfo>()
        findNodesByText(rootNode, packageName, nodeList)

        for (node in nodeList) {
            if (node.className == "android.widget.EditText") {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,
                    text
                )
                node.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
            }
        }
    }

    private fun findNodesByText(
        node: AccessibilityNodeInfo,
        packageName: String,
        nodeList: ArrayList<AccessibilityNodeInfo>
    ) {
        if (node.packageName == packageName) {
            nodeList.add(node)
        }
        for (i in 0 until node.childCount) {
            findNodesByText(node.getChild(i), packageName, nodeList)
        }
    }
}
요약
프로젝트 설정: 새로운 프로젝트를 생성하고 build.gradle 파일을 설정합니다.
권한 설정: AndroidManifest.xml 파일에 접근성 서비스와 블루투스 권한을 추가합니다.
접근성 서비스 설정 파일: res/xml/accessibility_service_config.xml 파일을 추가합니다.
블루투스 데이터 읽기: MainActivity.kt에서 블루투스 데이터를 읽어오는 코드를 작성합니다.
접근성 서비스 구현: MyAccessibilityService.kt 파일을 작성하여 다른 앱의 입력 창에 데이터를 넣는 기능을 구현합니다.
이 코드를 Android Studio에서 프로젝트에 적용하면, 블루투스 스캐너에서 읽은 데이터를 자동으로 다른 앱의 입력 창에 넣는 백그라






