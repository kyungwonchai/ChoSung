래는 요청하신 대로 LastUsedPort 설정을 처음 실행 시에 생성하고, 코드 전체에 상세한 한글 주석과 함께 에러 처리를 추가한 WPF 애플리케이션 예제입니다.

1. XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="ComPortScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Scanner" Height="450" Width="600">
    <Grid>
        <ComboBox Name="ComPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="10,10,0,0" SelectionChanged="ComPortComboBox_SelectionChanged"/>
        <Button Content="Refresh Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="220,10,0,0" Click="RefreshPorts_Click"/>
        <Button Content="Open Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="330,10,0,0" Click="OpenPort_Click"/>
        <Button Content="Close Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,10,0,0" Click="ClosePort_Click"/>
        <TextBox Name="DataTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="420" Height="50" Margin="10,50,0,0"/>
        <Button Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,50,0,0" Click="SendData_Click"/>
        <TextBlock Name="StatusTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,110,0,0" Width="500" Height="30" Text="Status: Not Connected"/>

        <!-- 로그 표시용 ListBox -->
        <ListBox Name="LogListBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="560" Height="200" Margin="10,150,0,0"/>
    </Grid>
</Window>
2. C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO.Ports;
using System.Linq;
using System.Windows;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _serialPort; // 선택된 COM 포트에 대한 시리얼 포트 객체
        private List<SerialPort> _targetPorts = new List<SerialPort>(); // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100; // 로그 표시의 최대 개수
        private const string LastUsedPortKey = "LastUsedPort"; // 마지막으로 사용한 포트를 기억하기 위한 설정 키

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                CreateSettingsIfNotExist(); // 설정 파일에서 LastUsedPort가 없으면 새로 만듦
                LoadLastUsedPort(); // 프로그램 시작 시 마지막으로 사용된 포트를 불러옴
                RefreshPorts(); // 포트 목록 갱신
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
                MessageBox.Show($"프로그램 초기화 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void CreateSettingsIfNotExist()
        {
            // 설정 파일에서 LastUsedPort가 없으면 기본 값을 생성합니다.
            if (Properties.Settings.Default[LastUsedPortKey] == null)
            {
                Properties.Settings.Default[LastUsedPortKey] = string.Empty;
                Properties.Settings.Default.Save();
            }
        }

        private void LoadLastUsedPort()
        {
            // 마지막으로 사용한 포트를 설정에서 불러옵니다.
            string lastUsedPort = Properties.Settings.Default[LastUsedPortKey]?.ToString();
            if (!string.IsNullOrEmpty(lastUsedPort) && SerialPort.GetPortNames().Contains(lastUsedPort))
            {
                // 마지막으로 사용한 포트가 존재할 경우 해당 포트를 선택하고 연결을 시도합니다.
                ComPortComboBox.SelectedItem = lastUsedPort;
                OpenPort(lastUsedPort);
            }
            else
            {
                LogMessage("마지막으로 사용한 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }
        }

        private void SaveLastUsedPort(string portName)
        {
            // 마지막으로 사용한 포트를 설정에 저장합니다.
            Properties.Settings.Default[LastUsedPortKey] = portName;
            Properties.Settings.Default.Save();
        }

        private void RefreshPorts()
        {
            try
            {
                // 현재 사용 가능한 COM 포트 목록을 가져와 ComboBox에 표시
                ComPortComboBox.ItemsSource = SerialPort.GetPortNames();
                if (ComPortComboBox.Items.Count > 0)
                {
                    ComPortComboBox.SelectedIndex = 0;
                }
                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
                MessageBox.Show($"포트 목록 갱신 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenPort_Click(object sender, RoutedEventArgs e)
        {
            if (ComPortComboBox.SelectedItem == null)
            {
                MessageBox.Show("COM 포트를 선택하세요.", "경고", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            string selectedPort = ComPortComboBox.SelectedItem.ToString();
            OpenPort(selectedPort);
        }

        private void OpenPort(string portName)
        {
            try
            {
                // 이미 포트가 열려있는 경우 닫고 새 포트를 엽니다.
                if (_serialPort != null && _serialPort.IsOpen)
                {
                    _serialPort.Close();
                }

                // 선택된 포트로 시리얼 포트를 설정하고 엽니다.
                _serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                _serialPort.Open();
                StatusTextBlock.Text = $"상태: {portName}에 연결됨";
                LogMessage($"포트 {portName}가 열렸습니다.");
                SaveLastUsedPort(portName);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                LogMessage($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClosePort_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                if (_serialPort != null && _serialPort.IsOpen)
                {
                    _serialPort.Close();
                    StatusTextBlock.Text = "상태: 포트 닫힘";
                    LogMessage("포트가 닫혔습니다.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                LogMessage($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                try
                {
                    string data = DataTextBox.Text;
                    _serialPort.WriteLine(data); // 데이터를 시리얼 포트로 전송
                    LogMessage($"데이터 전송: {data}");

                    // 특정 조건이 충족되면 데이터를 다른 포트로 전달
                    foreach (var targetPort in _targetPorts)
                    {
                        if (ShouldForwardData(data))
                        {
                            targetPort.WriteLine(data);
                            LogMessage($"데이터가 {targetPort.PortName}로 전달되었습니다: {data}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"데이터 전송 실패: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    LogMessage($"데이터 전송 실패: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("포트가 열려 있지 않습니다. 먼저 COM 포트를 여세요.", "경고", MessageBoxButton.OK, MessageBoxImage.Warning);
                LogMessage("데이터 전송 실패: 포트가 열려 있지 않습니다.");
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시 조건: 데이터에 "FORWARD"가 포함된 경우에만 다른 포트로 전송
            // 이 조건을 필요에 따라 수정 가능
            return data.Contains("FORWARD");
        }

        private void ComPortComboBox_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            if (ComPortComboBox.SelectedItem != null)
            {
                OpenPort(ComPortComboBox.SelectedItem.ToString());
            }
        }

        private void LogMessage(string message)
        {
            // 현재 시간을 로그에 추가
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그의 개수가 최대치를 넘으면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
3. 코드 상세 설명
주요 기능
설정 초기화: 프로그램이 처음 실행될 때 LastUsedPort 설정이 없으면 자동으로 생성합니다. 이 설정은 마지막에 사용된 COM 포트를 기억하는 데 사용됩니다.
포트 자동 연결: 프로그램이 시작될 때 마지막으로 사용된 COM 포트가 자동으로 연결됩니다. 포트가 존재하지 않으면, 사용자가 ComboBox에서 새로운 포트를 선택할 때 자동으로 연결됩니다.
로그 기록: 모든 동작과 오류는 ListBox에 시간과 함께 기록됩니다. 로그는 최대 100개까지 표시되며, 오래된 로그는 자동으로 삭제됩니다.
에러 처리: 모든 주요 동작에 대해 에러 처리가 되어 있으며, 프로그램이 예기치 않게 종료되지 않도록 설계되었습니다. 발생하는 모든 에러는 ListBox에 기록됩니다.
데이터 전달: 데이터가 특정 조건(예: "FORWARD" 문자열 포함)을 만족할 때만 다른 포트로 전달됩니다.
세부 주석과 코드 내 설명
CreateSettingsIfNotExist: 프로그램이 처음 실행될 때 LastUsedPort 설정이 없으면 빈 문자열로 초기화하여 생성합니다.
LoadLastUsedPort: 마지막에 사용한 COM 포트를 불러와 자동으로 연결을 시도합니다. 포트가 존재하지 않으면 로그에 기록합니다.
SaveLastUsedPort: 포트가 성공적으로 열렸을 때, 해당 포트를 LastUsedPort로 저장합니다.
RefreshPorts: 시스템에서 사용 가능한 COM 포트를 불러와 ComboBox를 갱신합니다. 이 과정에서 발생할 수 있는 에러도 처리합니다.
OpenPort와 ClosePort: 사용자가 선택한 포트를 열고 닫습니다. 각각의 동작은 로그에 기록되며, 발생하는 에러는 모두 처리됩니다.
SendData_Click: 사용자가 입력한 데이터를 현재 열린 포트로 전송하고, 필요에 따라 다른 포트로 전달합니다. 에러 발생 시 로그에 기록합니다.
4. 설정 저장을 위한 Settings.settings 설정
Settings.settings 파일에 LastUsedPort 설정이 없는 경우, 프로그램 실행 시 이 설정이 자동으로 생성됩니다. 아래는 초기화 방법입니다:

Settings.settings:
Name: LastUsedPort
Type: string
Scope: User
Value: (초기에는 빈 값으로 시작)
5. 사용 방법
프로그램 시작: 프로그램이 시작되면, 마지막으로 사용한 COM 포트가 자동으로 열립니다. 포트가 존재하지 않으면 로그에 기록되고, 사용자가 새 포트를 선택하면 자동으로 연결됩니다.
포트 선택: ComboBox에서 새로운 COM 포트를 선택하면 즉시 포트가 열립니다.
데이터 전송: TextBox에 데이터를 입력하고 "Send Data" 버튼을 클릭하면, 선택된 포트로 데이터가 전송됩니다. 특정 조건을 만족하면 다른 포트로 데이터가 전달됩니다.
로그 확인: 모든 동작 및 에러가 ListBox에 기록되므로, 프로그램의 상태를 쉽게 모니터링할 수 있습니다.
이 코드가 요청하신 기능을 충실히 구현할 수 있기를 바랍니다. 추가적인 기능 요청이나 질문이 있으면 언제든지 말씀해 주세