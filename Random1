using Confluent.Kafka;
using Newtonsoft.Json;
using System;
using System.Data;
using System.Threading.Tasks;

public class KafkaProducer
{
    private readonly IProducer<Null, string> _producer;
    private readonly string _topic;

    public KafkaProducer(string bootstrapServers, string topic)
    {
        var config = new ProducerConfig { BootstrapServers = bootstrapServers };
        _producer = new ProducerBuilder<Null, string>(config).Build();
        _topic = topic;
    }

    public async Task SendDataTableAsync(DataTable dataTable)
    {
        // 데이터 테이블을 JSON으로 직렬화합니다.
        string messageJson = JsonConvert.SerializeObject(dataTable, Formatting.Indented);

        // Kafka 토픽으로 직렬화된 데이터 테이블을 전송합니다.
        await _producer.ProduceAsync(_topic, new Message<Null, string> { Value = messageJson });
        Console.WriteLine($"Sent DataTable to {_topic}");
    }
}

public class Program
{
    public static async Task Main(string[] args)
    {
        var producer = new KafkaProducer("your_kafka_broker:9092", "your_topic_name");
        
        // 데이터 테이블 예시 생성
        DataTable dataTable = new DataTable();
        dataTable.Columns.Add("Column1", typeof(int));
        dataTable.Columns.Add("Column2", typeof(string));
        dataTable.Rows.Add(1, "row1");
        dataTable.Rows.Add(2, "row2");

        // 데이터 테이블 전송
        await producer.SendDataTableAsync(dataTable);
    }
}
