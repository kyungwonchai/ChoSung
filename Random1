래는 수정된 TaskModel, TaskQueue, 그리고 MainViewModel 전체 코드입니다. 각각의 역할을 다시 정리하고, 모든 주석을 포함한 코드를 제공하겠습니다.

1. TaskModel Class
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스 플래그에 따라 함수들을 순차적으로 실행합니다.
/// 작업이 완료되면 자동으로 다음 작업을 실행합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    // 로그 엔트리 정보
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 비동기 함수 리스트
    public List<Func<Task>> FunctionTasks { get; set; }

    // 각 함수 상태를 도형으로 표현 (도형 상태)
    public ObservableCollection<Brush> FunctionStatusColors { get; set; }

    // 현재 작업이 대기, 실행, 완료 상태인지 나타냄
    public string Status { get; set; }

    // Resume 명령어 (행마다 존재)
    public ICommand ResumeCommand { get; }

    // 작업 큐와 연결
    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;

        _taskQueue = taskQueue;  // TaskQueue를 받아옴

        // 비동기 함수 리스트 초기화 및 함수 추가
        FunctionTasks = new List<Func<Task>>
        {
            ExecuteTaskA,
            ExecuteTaskB,
            ExecuteTaskC
        };

        // FunctionStatusColors 리스트 초기화 (각 함수의 상태를 색상으로 표현)
        FunctionStatusColors = new ObservableCollection<Brush>
        {
            Brushes.Gray,  // Task A 초기 상태
            Brushes.Gray,  // Task B 초기 상태
            Brushes.Gray   // Task C 초기 상태
        };

        // 상태 초기화
        Status = "Pending";

        // Resume 버튼 명령어 설정
        ResumeCommand = new RelayCommand(ResumeTask);
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    private async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행 (스킵 없이 모든 작업 재실행)
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        for (int i = 0; i < FunctionTasks.Count; i++)
        {
            // 도형 색상을 다시 회색으로 변경 (재실행이므로 초기화)
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Gray;
            });

            await FunctionTasks[i]();  // 비동기 작업 실행

            // 함수 실행 후 색상 변경
            Application.Current.Dispatcher.Invoke(() =>
            {
                FunctionStatusColors[i] = Brushes.Green;
            });
        }
        Status = "Completed";  // 완료 상태로 변경
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}
2. TaskQueue Class
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하는 역할을 담당합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false;

    /// <summary>
    /// 작업을 큐에 추가하고 순차적으로 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);

        // 현재 작업이 실행 중이 아니면, 작업 실행 시작
        if (!_isRunning)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 큐의 다음 작업을 실행하는 메서드
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0)
        {
            _isRunning = false;
            return;
        }

        _isRunning = true; // 작업이 실행 중
        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행

        _isRunning = false; // 작업 완료
        if (_tasks.Count > 0)
        {
            RunNextTask(); // 다음 작업 실행
        }
    }

    /// <summary>
    /// 현재 작업 큐를 비웁니다. (모든 작업을 삭제)
    /// </summary>
    public void ClearQueue()
    {
        _tasks.Clear();
    }
}
3. MainViewModel Class
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;

    // 명령어 정의 (클린/리쥼)
    public ICommand CleanQueueCommand { get; }
    public ICommand ResumeTasksCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();  // TaskQueue 인스턴스 생성

        // 작업 목록 초기화
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }, _taskQueue),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" }, _taskQueue)
        };

        // 클린 명령어 (대기열 비우기)
        CleanQueueCommand = new RelayCommand(CleanQueue);
        
        // 리쥼 명령어 (특정 행 이후부터 작업 재개)
        ResumeTasksCommand = new RelayCommand<TaskModel>(ResumeTasksFrom);
    }

    /// <summary>
    /// 작업 큐 비우기 (모든 작업 삭제)
    /// </summary>
    private void CleanQueue()
    {
        _taskQueue.ClearQueue();
    }

    /// <summary>
    /// 특정 행 이후부터 작업을 다시 시작 (DataGrid에서 Resume 버튼 누를 때 호출)
    /// </summary>
    public void ResumeTasksFrom(TaskModel selectedTask)
    {
        int startIndex = TaskList.IndexOf(selectedTask); // 시작할 행의 인덱스

        // 작업 큐를 비워서 이전 작업을 모두 삭제
        _taskQueue.ClearQueue();

        // 선택된 행부터 남은 작업들을 다시 대기열에 추가
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.ResumeTask();  // 해당 행부터 작업 재개
        }
    }
}
4. XAML (DataGrid와 Resume/Clean 명령어 추가)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- Resume 버튼 -->
                <DataGridTemplateColumn Header="Resume">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Resume" 
                                    Command="{Binding DataContext.ResumeTasksCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 작업 큐 비우기 (Clean 버튼) -->
        <Button Content="Clear Queue" Command="{Binding CleanQueueCommand}" Width="100" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" />

    </Grid>
</Window>
전체 코드 설명:
TaskModel:

각 행의 작업을 관리하는 모델로, 함수 작업 리스트와 도형 상태를 저장합니다.
Resume 버튼이 클릭되면 해당 행부터 작업을 다시 실행합니다.
**Tas