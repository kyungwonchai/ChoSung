정된 요구사항에 맞춰 log2 컬럼에서 partid 값을 추출하고 중복 개수를 계산하며, 날짜와 조를 구분하여 CSV 파일에 저장하는 코드를 작성했습니다. LIKE 'LOG%'로 테이블을 검색하고, datatime1 컬럼의 시간에 따라 날짜와 조를 구분하여 date1과 shift1 컬럼을 추가합니다.

다음은 완성된 코드입니다.

python
코드 복사
import pymssql
import csv
import re
from datetime import datetime, timedelta
from collections import Counter

# 데이터베이스 연결 정보
server = '192.168.1.100'
user = 'sa'
password = 'mypassword123'
database = 'NPM_DAS_DATAS'

# MSSQL 데이터베이스 연결 (포트 5555로 설정)
conn = pymssql.connect(server=server, user=user, password=password, database=database, port=5555)
cursor = conn.cursor()

# LOG로 시작하는 모든 테이블 이름 가져오기
cursor.execute("""
    SELECT TABLE_NAME
    FROM INFORMATION_SCHEMA.TABLES
    WHERE TABLE_NAME LIKE 'LOG%'
""")

tables = cursor.fetchall()
pattern = re.compile(r'(?<=Reel ID-)\S+')  # Reel ID- 이후 공백 전까지 추출할 패턴

# 결과를 저장할 리스트 초기화
result_rows = []

# 각 테이블에서 log1 컬럼 값이 'splicing'인 행 찾기
partid_list = []
for table in tables:
    table_name = table[0]
    query = f"SELECT line1, machine1, lane1, log1, log2, datatime1 FROM {table_name} WHERE log1 = 'splicing'"
    cursor.execute(query)
    rows = cursor.fetchall()

    for row in rows:
        line1, machine1, lane1, log1, log2, datatime1 = row
        
        # `partid` 추출
        partid_match = pattern.search(log2)
        partid = partid_match.group(0) if partid_match else None
        partid_list.append(partid)
        
        # 날짜와 시간에 따른 date1과 shift1 계산
        datatime = datetime.strptime(datatime1, '%Y-%m-%d %H:%M:%S')
        if datatime.hour < 7:
            date1 = (datatime - timedelta(days=1)).strftime('%Y-%m-%d')
        else:
            date1 = datatime.strftime('%Y-%m-%d')
        
        # shift1 계산
        if 7 <= datatime.hour < 17 or (datatime.hour == 17 and datatime.minute == 0):
            shift1 = 'day'
        else:
            shift1 = 'night'

        # 결과 리스트에 추가
        result_rows.append([line1, machine1, lane1, log1, log2, partid, date1, shift1, datatime1])

# 중복 개수 계산
partid_counter = Counter(partid_list)
for row in result_rows:
    partid = row[5]
    row.append(partid_counter[partid])  # `dup` 컬럼 추가

# CSV 파일로 내보내기
csv_file = 'splicing_logs.csv'
with open(csv_file, mode='w', newline='') as file:
    writer = csv.writer(file)
    # 헤더 작성
    writer.writerow(['line1', 'machine1', 'lane1', 'log1', 'log2', 'partid', 'date1', 'shift1', 'datatime1', 'dup'])
    # 데이터 작성
    writer.writerows(result_rows)

print(f"CSV 파일이 '{csv_file}' 이름으로 성공적으로 생성되었습니다.")

# 연결 종료
conn.close()
코드 설명
테이블 검색: LIKE 'LOG%' 조건을 사용하여 LOG로 시작하는 테이블을 검색합니다.
partid 추출: log2 컬럼에서 Reel ID- 이후 공백이 나오기 전까지의 문자열을 추출하여 partid로 저장합니다.
중복 계산: Counter를 사용하여 partid별 중복 개수를 계산하고, 이를 dup 컬럼에 저장합니다.
날짜와 조 구분: datatime1 값에서 시간대에 따라 date1과 shift1 값을 생성합니다.
date1: 오전 7시 이전이면 하루 전 날짜를 기록합니다.
shift1: 07:00~17:00는 day, 17:00 이후부터 다음 날 07:00 전까지는 night으로 표시합니다.