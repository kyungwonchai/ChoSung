래는 차트 시각화 기능을 포함하여 수정된 전체 코드입니다. 차트는 각 데이터 세트(data_a, data_b)에서 모델별 MSE를 시각적으로 비교할 수 있도록 추가했습니다. 또한, 모든 학습과 검증 과정을 명확히 정리하고 결과를 차트로 보여줍니다.

수정된 전체 코드
python
코드 복사
import numpy as np
import pandas as pd
import pymssql
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
from tqdm import tqdm


# 1. 데이터베이스에서 데이터 가져오기 함수
def fetch_data_from_procedure_with_cursor(proc_name, connection_details):
    """
    MSSQL 저장 프로시저를 호출하여 데이터를 가져오는 함수.
    커서를 사용하여 결과를 Pandas DataFrame으로 반환.
    
    :param proc_name: 저장 프로시저 이름 (str).
    :param connection_details: 데이터베이스 연결 정보 (dict).
    :return: Pandas DataFrame.
    """
    print(f"Calling stored procedure: {proc_name}")
    try:
        # 데이터베이스 연결
        conn = pymssql.connect(
            server=connection_details['server'],
            user=connection_details['user'],
            password=connection_details['password'],
            database=connection_details['database']
        )
        cursor = conn.cursor()

        # 저장 프로시저 실행
        cursor.execute(f"EXEC {proc_name}")

        # 결과를 DataFrame으로 변환
        columns = [desc[0] for desc in cursor.description]
        data = cursor.fetchall()
        df = pd.DataFrame(data, columns=columns)

        print(f"Data successfully fetched from procedure: {proc_name}")
        return df

    except Exception as e:
        print(f"Error while calling procedure {proc_name}: {e}")
        return pd.DataFrame()

    finally:
        conn.close()


# 2. DB 연결 정보
connection_details = {
    "server": "localhost",
    "user": "your_username",
    "password": "your_password",
    "database": "your_database"
}

# 3. 데이터 가져오기
print("Fetching data from stored procedures...")
df_test_a = fetch_data_from_procedure_with_cursor("PTestA", connection_details)
df_test_b = fetch_data_from_procedure_with_cursor("PTestB", connection_details)
df_real_a = fetch_data_from_procedure_with_cursor("PRealA", connection_details)
df_real_b = fetch_data_from_procedure_with_cursor("PRealB", connection_details)

# 4. 데이터 준비
if df_test_a.empty or df_test_b.empty or df_real_a.empty or df_real_b.empty:
    print("Error: One or more datasets are empty. Check the stored procedures.")
    exit()

# 데이터에서 첫 열(날짜/시간)을 제외한 나머지 값만 추출
data_a_train = df_test_a.iloc[:, 1:].values
data_b_train = df_test_b.iloc[:, 1:].values
data_a_test = df_real_a.iloc[:, 1:].values
data_b_test = df_real_b.iloc[:, 1:].values

# 5. 모델 리스트 정의
models = {
    "RandomForest": RandomForestRegressor(),
    "LinearRegression": LinearRegression(),
    "SVR": SVR(kernel="linear")
}

# 6. 데이터 A 학습 및 검증
print("Starting model training for data_a...")
best_models_a = []
errors_a = []

for i in tqdm(range(data_a_train.shape[1]), desc="Training models for data_a"):
    try:
        # i번째 값을 제외한 나머지 데이터로 학습 데이터 구성
        X_a_train = np.delete(data_a_train, i, axis=1)  # i번째 열을 제외
        y_a_train = data_a_train[:, i]  # 예측 대상

        X_a_test = np.delete(data_a_test, i, axis=1)  # 테스트 데이터의 i번째 열 제외
        y_a_test = data_a_test[:, i]  # 테스트 데이터의 예측 대상

        # 각 모델로 학습 및 평가
        best_model = None
        best_error = float("inf")
        model_errors = []  # 모델별 MSE 저장
        for model_name, model in models.items():
            model.fit(X_a_train, y_a_train)  # 학습
            predictions = model.predict(X_a_test)  # 검증
            error = mean_squared_error(y_a_test, predictions)  # MSE 계산
            model_errors.append(error)

            print(f"Model: {model_name}, MSE: {error:.5f}")
            if error < best_error:
                best_error = error
                best_model = model_name

        best_models_a.append((best_model, models[best_model]))
        errors_a.append(model_errors)

    except Exception as e:
        print(f"Error during training for data_a column {i}: {e}")
        raise

# 7. 데이터 B 학습 및 검증
print("Starting model training for data_b...")
best_models_b = []
errors_b = []

for i in tqdm(range(data_b_train.shape[1]), desc="Training models for data_b"):
    try:
        # i번째 값을 제외한 나머지 데이터로 학습 데이터 구성
        X_b_train = np.delete(data_b_train, i, axis=1)  # i번째 열을 제외
        y_b_train = data_b_train[:, i]  # 예측 대상

        X_b_test = np.delete(data_b_test, i, axis=1)  # 테스트 데이터의 i번째 열 제외
        y_b_test = data_b_test[:, i]  # 테스트 데이터의 예측 대상

        # 각 모델로 학습 및 평가
        best_model = None
        best_error = float("inf")
        model_errors = []  # 모델별 MSE 저장
        for model_name, model in models.items():
            model.fit(X_b_train, y_b_train)  # 학습
            predictions = model.predict(X_b_test)  # 검증
            error = mean_squared_error(y_b_test, predictions)  # MSE 계산
            model_errors.append(error)

            print(f"Model: {model_name}, MSE: {error:.5f}")
            if error < best_error:
                best_error = error
                best_model = model_name

        best_models_b.append((best_model, models[best_model]))
        errors_b.append(model_errors)

    except Exception as e:
        print(f"Error during training for data_b column {i}: {e}")
        raise

# 8. 결과 출력
print("Training completed.")

# 9. 차트 시각화
def plot_model_errors(errors, title):
    """
    모델별 MSE를 시각화하는 함수.
    :param errors: 각 데이터 포인트의 모델별 MSE 리스트.
    :param title: 차트 제목.
    """
    errors = np.array(errors)
    x = np.arange(errors.shape[0])
    plt.figure(figsize=(10, 6))
    for i, model_name in enumerate(models.keys()):
        plt.plot(x, errors[:, i], label=model_name)

    plt.title(title)
    plt.xlabel("Feature Index")
    plt.ylabel("Mean Squared Error (MSE)")
    plt.legend()
    plt.grid()
    plt.show()


plot_model_errors(errors_a, "Model Errors for Data A")
plot_model_errors(errors_b, "Model Errors for Data B")
추가된 차트 기능
plot_model_errors 함수

각 데이터 세트의 모델별 MSE를 시각화합니다.
X축: 예측 대상 열의 인덱스 (Feature Index)
Y축: MSE 값
모델별 MSE를 그래프 상에서 비교.
결과 출력

errors_a와 errors_b를 기반으로 각각 Data A와 Data B의 모델 성능을 차트로 표시.
결과 예시
1. 출력
plaintext
코드 복사
Training models for data_a: 100%|██████████| 4/4 [00:10<00:00,  2.5s/it]
Training models for data_b: 100%|██████████| 5/5 [00:12<00:00,  2.4s/it]
Training completed.
2. 차트
Data A와 Data B의 MSE 차트가 각각 출력됩니다.

변경된 주요 내용
모델별 MSE 저장 및 시각화 추가:
모델별로 MSE를 저장하고 차트를 통해 비교.
훈련과 검증 과정 개선:
각 모델의 성능을 열별로 비교 가능.
차트 출력: