습니다. 이전 코드에 컬럼 CCC만 추가하여 SentValue의 값에 따라 설정하는 방식으로 수정해드리겠습니다. SentValue에 특정 텍스트가 포함된 경우, CCC 컬럼에 "RC", "WDD", "WD2300" 값을 설정하고, 이 컬럼을 XAML의 데이터 트리거로 스타일링할 수 있도록 해드리겠습니다.

최종 코드 (C# WPF, DevExpress)
XAML 코드 (MainWindow.xaml)
아래는 CCC 컬럼 값을 기반으로 데이터 트리거를 적용하여 행(Row)의 배경색을 변경하는 방식입니다.

xml
코드 복사
<Window x:Class="FileAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="File Analysis" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="Select Folder" Click="SelectFolder_Click" Width="100" Margin="5"/>
            <Button Content="Analyze" Click="Analyze_Click" Width="100" Margin="5"/>
            <TextBlock Text="Selected Folder:" VerticalAlignment="Center" Margin="10,0"/>
            <TextBlock x:Name="SelectedFolderText" VerticalAlignment="Center" Margin="5,0"/>
        </StackPanel>

        <!-- 필터링된 데이터 GridControl -->
        <dxg:GridControl Name="DataGrid" Grid.Row="1" AutoGenerateColumns="AddNew" Margin="10,30,10,10">
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" ShowSearchPanelMode="Always">
                    <dxg:TableView.RowStyle>
                        <!-- 데이터 트리거를 사용하여 배경색 설정 -->
                        <Style TargetType="dxg:GridRowContent">
                            <Style.Triggers>
                                <!-- CCC 컬럼 값이 RC인 경우 배경색 파랑 -->
                                <DataTrigger Binding="{Binding RowData.Row.CCC}" Value="RC">
                                    <Setter Property="Background" Value="LightBlue"/>
                                </DataTrigger>
                                <!-- CCC 컬럼 값이 WDD인 경우 배경색 녹색 -->
                                <DataTrigger Binding="{Binding RowData.Row.CCC}" Value="WDD">
                                    <Setter Property="Background" Value="LightGreen"/>
                                </DataTrigger>
                                <!-- CCC 컬럼 값이 WD2300인 경우 배경색 노랑 -->
                                <DataTrigger Binding="{Binding RowData.Row.CCC}" Value="WD2300">
                                    <Setter Property="Background" Value="Yellow"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </dxg:TableView.RowStyle>
                </dxg:TableView>
            </dxg:GridControl.View>
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Filename" Header="Filename"/>
                <dxg:GridColumn FieldName="Time" Header="Time"/>
                <dxg:GridColumn FieldName="UniqueKey" Header="Unique Key"/>
                <dxg:GridColumn FieldName="SentValue" Header="Sent Value"/>
                <dxg:GridColumn FieldName="ReceivedValue" Header="Received Value"/>
                <dxg:GridColumn FieldName="LengthOrRemainingData" Header="Length / Remaining Data"/>
                <!-- 새로운 CCC 컬럼 추가 -->
                <dxg:GridColumn FieldName="CCC" Header="CCC"/>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
CCC 컬럼 값을 SentValue의 특정 텍스트 여부에 따라 설정합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;

namespace FileAnalysisApp
{
    public partial class MainWindow : Window
    {
        private string selectedFolderPath = @"c:\prod_file_logs";
        public ObservableCollection<LogEntry> FilteredEntries { get; set; } = new ObservableCollection<LogEntry>();

        public MainWindow()
        {
            InitializeComponent();
            DataGrid.ItemsSource = FilteredEntries;
            SelectedFolderText.Text = selectedFolderPath;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = selectedFolderPath;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    selectedFolderPath = dialog.SelectedPath;
                    SelectedFolderText.Text = selectedFolderPath;
                }
            }
        }

        private void Analyze_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFolderPath))
            {
                System.Windows.MessageBox.Show("Please select a folder first.");
                return;
            }

            FilteredEntries.Clear();
            AnalyzeFiles(selectedFolderPath);
        }

        private void AnalyzeFiles(string folderPath)
        {
            var threeDaysAgo = DateTime.Now.AddDays(-3);
            var responseTracker = new Dictionary<string, string>();
            var filteredData = new List<LogEntry>();

            var timePattern = new Regex(@"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}");
            var keyPattern = new Regex(@"고유키:[^\s]+");
            var sendPattern = new Regex(@"보낸값:[^\s]+");
            var recvPattern = new Regex(@"받은값:[^\s]+");

            foreach (var filePath in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
            {
                var fileCreationTime = File.GetCreationTime(filePath);
                if (fileCreationTime < threeDaysAgo) continue;

                string fileName = Path.GetFileName(filePath);
                var lines = File.ReadAllLines(filePath);
                if (fileName.Contains("DetailCMD"))
                {
                    // DetailCMD 파일 처리: 보낸값과 받은값을 한 행으로 기록
                    for (int i = 0; i < lines.Length - 1; i++)
                    {
                        var sendMatch = sendPattern.Match(lines[i]);
                        var recvMatch = recvPattern.Match(lines[i + 1]);

                        if (sendMatch.Success && recvMatch.Success)
                        {
                            var timeMatch = timePattern.Match(lines[i]);
                            var keyMatch = keyPattern.Match(lines[i]);
                            if (timeMatch.Success && keyMatch.Success)
                            {
                                string timeStr = timeMatch.Value;
                                string uniqueKey = keyMatch.Value.Split(':')[1];
                                string sendValue = sendMatch.Value.Split(':')[1];
                                string recvValue = recvMatch.Value.Split(':')[1];
                                string combinedKey = $"{sendValue}_{recvValue}";

                                DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                                string formattedTime = time.ToString("yyMMdd HHmmss");

                                // CCC 컬럼 값 결정
                                string cccValue = string.Empty;
                                if (sendValue.Contains("RC")) cccValue = "RC";
                                else if (sendValue.Contains("WDD")) cccValue = "WDD";
                                else if (sendValue.Contains("WDD2300")) cccValue = "WD2300";

                                // 필터링된 데이터 추가
                                filteredData.Add(new LogEntry
                                {
                                    Filename = fileName,
                                    Time = formattedTime,
                                    UniqueKey = uniqueKey,
                                    SentValue = sendValue,
                                    ReceivedValue = recvValue,
                                    LengthOrRemainingData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD",
                                    CCC = cccValue
                                });
                            }
                            i++;  // 보낸값과 받은값을 한 행으로 처리했으므로 한 줄 건너뜀
                        }
                    }
                }
                else
                {
                    // 기타 파일 처리: 각 행을 독립적으로 기록
                    foreach (var line in lines)
                    {
                        var timeMatch = timePattern.Match(line);
                        if (timeMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");
                            string remainingData = line.Substring(timeMatch.Length).Trim();

                            // 필터링된 데이터 추가
                            filteredData.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                LengthOrRemainingData = remainingData
                            });
                        }
                    }
                }
            }

            // 시간 순으로 정렬 후 FilteredEntries에 추가
            foreach (var entry in filteredData.OrderBy(e => e.Time))
                FilteredEntries.Add(entry);
        }
    }

    public class LogEntry
    {
        public string Filename { get; set; }
        public string Time { get; set; }
        public string UniqueKey { get; set; }
        public string SentValue { get; set; }
        public string ReceivedValue { get; set; }
        public string LengthOrRemainingData { get; set; }
        public string CCC { get; set; }  // 새로 추가한 컬럼
    }
}
코드 설명