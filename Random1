숫자가 1 이상일 때 바로 창이 뜨지 않고, 3초 후에도 값이 1 이상일 때만 창이 뜨도록 구현하기 위해 3초 타이머를 추가합니다. Progress 값이 1 이상으로 변경되면 3초 동안 대기하고, 그 동안에도 값이 여전히 1 이상일 경우에만 경고창이 표시됩니다.

MainViewModel 수정
3초 타이머를 별도로 설정하고, 타이머가 종료될 때 Progress 값을 확인하여 창을 표시하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private int _progress;
        private Timer _mainTimer; // 5초 타이머
        private Timer _delayTimer; // 3초 지연 타이머
        private bool _isWarningVisible;
        private WarningWindow _warningWindow; // 경고창 인스턴스 저장

        public int Progress
        {
            get => _progress;
            set
            {
                if (_progress != value)
                {
                    _progress = value;
                    OnPropertyChanged();

                    // Progress가 1 이상이면 3초 후 창 표시 여부 확인
                    if (_progress >= 1 && !_isWarningVisible)
                    {
                        StartDelayTimer();
                    }
                    // Progress가 0이면 경고창을 닫음
                    else if (_progress == 0)
                    {
                        CloseWarningWindow();
                    }
                }
            }
        }

        public MainViewModel()
        {
            _mainTimer = new Timer(5000); // 5초 타이머 설정
            _mainTimer.Elapsed += MainTimerElapsed;

            _delayTimer = new Timer(3000); // 3초 지연 타이머 설정
            _delayTimer.Elapsed += DelayTimerElapsed;
            _delayTimer.AutoReset = false; // 한 번만 실행되도록 설정
        }

        private void StartDelayTimer()
        {
            // Progress가 1 이상일 때만 지연 타이머 시작
            if (_progress >= 1)
            {
                _delayTimer.Start();
            }
        }

        private void DelayTimerElapsed(object sender, ElapsedEventArgs e)
        {
            // 3초 후에도 Progress가 1 이상일 경우 경고창 표시
            if (_progress >= 1 && !_isWarningVisible)
            {
                ShowWarningWindow("Warning!\nCheck the system status.\nHigh progress value detected.");
            }
        }

        private void ShowWarningWindow(string message)
        {
            // 이미 경고창이 열려 있다면 새로 열지 않음
            if (_isWarningVisible) return;

            Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindow = new WarningWindow(message); // 메시지 전달
                _warningWindow.Topmost = true;
                _warningWindow.Show();

                _warningWindow.Closed += (sender, e) =>
                {
                    _isWarningVisible = false;
                    _mainTimer.Start(); // 창을 닫으면 5초 타이머 시작
                };

                _isWarningVisible = true;
            });
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindow != null)
                {
                    _warningWindow.Close();
                    _warningWindow = null; // 경고창 인스턴스를 초기화
                    _mainTimer.Stop(); // 창을 닫을 때 타이머 중지
                    _isWarningVisible = false;
                }
            });
        }

        private void MainTimerElapsed(object sender, ElapsedEventArgs e)
        {
            _mainTimer.Stop();
            if (_progress >= 1) // Progress가 여전히 1 이상이면 경고창을 다시 표시
            {
                ShowWarningWindow("Warning!\nCheck the system status.\nHigh progress value detected.");
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
_delayTimer (3초 지연 타이머):

Progress가 1 이상이 되면 StartDelayTimer 메서드를 호출해 3초 후에 DelayTimerElapsed 메서드가 실행됩니다.
3초 후에도 Progress가 1 이상일 때 ShowWarningWindow가 호출되어 경고창이 나타납니다.
MainTimerElapsed (5초 주기 타이머):
