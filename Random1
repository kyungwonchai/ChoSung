using LockerManagementApp.Data; // DbContext 네임스페이스
using LockerManagementApp.Models; // AuditLog 모델 네임스페이스
using LockerManagementApp.Infrastructure; // ViewModelBase, RelayCommand 네임스페이스
using System;
using System.Collections.ObjectModel; // ObservableCollection 사용
using System.Data.Entity; // EF6 네임스페이스 (ToListAsync 등)
using System.Linq;
using System.Threading.Tasks;
using System.Windows; // MessageBox 사용
using System.Windows.Input; // ICommand 사용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 감사 로그 조회 화면을 위한 ViewModel 클래스입니다.
    /// </summary>
    public class LogViewModel : ViewModelBase
    {
        private readonly LockerDbContext _context; // 데이터베이스 컨텍스트
        private ObservableCollection<AuditLog> _auditLogs; // 로그 목록 (UI 바인딩용)
        private string _statusMessage; // 상태 메시지

        /// <summary>
        /// UI(DataGrid)에 바인딩될 감사 로그 목록입니다.
        /// </summary>
        public ObservableCollection<AuditLog> AuditLogs
        {
            get => _auditLogs;
            set => SetProperty(ref _auditLogs, value); // 변경 시 UI 알림
        }

        /// <summary>
        /// 현재 작업 상태를 표시하는 메시지입니다.
        /// </summary>
        public string StatusMessage
        {
            get => _statusMessage;
            set => SetProperty(ref _statusMessage, value); // 변경 시 UI 알림
        }

        /// <summary>
        /// 로그 목록을 새로고침하는 명령입니다.
        /// </summary>
        public ICommand LoadLogsCommand { get; }

        /// <summary>
        /// LogViewModel 생성자입니다.
        /// </summary>
        /// <param name="context">주입되거나 생성된 LockerDbContext 인스턴스</param>
        public LogViewModel(LockerDbContext context)
        {
            _context = context ?? throw new ArgumentNullException(nameof(context));
            AuditLogs = new ObservableCollection<AuditLog>(); // 로그 목록 초기화
            LoadLogsCommand = new RelayCommand(async _ => await LoadLogsAsync()); // 새로고침 명령 초기화

            // ViewModel 생성 시 자동으로 로그 로드 시작
            _ = LoadLogsAsync();
        }

        /// <summary>
        /// 데이터베이스에서 감사 로그를 비동기적으로 로드하여 AuditLogs 컬렉션에 채웁니다.
        /// </summary>
        public async Task LoadLogsAsync()
        {
            StatusMessage = "로그 로딩 중...";
            try
            {
                // AuditLogs 테이블에서 데이터를 가져옵니다.
                // 최신 로그가 가장 위에 표시되도록 Timestamp 기준으로 내림차순 정렬합니다.
                // 성능을 고려하여 최근 1000개의 로그만 가져오도록 제한합니다 (필요에 따라 조정).
                var logs = await _context.AuditLogs
                                         .OrderByDescending(log => log.Timestamp) // 최신순 정렬
                                         .Take(1000) // 최근 1000개 제한
                                         .ToListAsync(); // 비동기적으로 리스트로 변환

                AuditLogs.Clear(); // 기존 목록을 지웁니다.
                foreach (var log in logs) // 로드된 로그를 ObservableCollection에 추가합니다.
                {
                    AuditLogs.Add(log);
                }
                // 위 Clear/foreach 대신 아래처럼 새 인스턴스를 할당해도 됩니다.
                // AuditLogs = new ObservableCollection<AuditLog>(logs);

                StatusMessage = $"총 {AuditLogs.Count}개의 로그를 로드했습니다.";
            }
            catch (Exception ex)
            {
                // 오류 발생 시 상태 메시지 업데이트 및 사용자 알림
                StatusMessage = $"로그 로딩 오류: {ex.Message}";
                MessageBox.Show($"{StatusMessage}\n\n데이터베이스 연결 및 로그 테이블 상태를 확인하세요.", "로그 로딩 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }