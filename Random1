다. UserControl의 XAML에서 UI를 꾸미고, 데이터를 주기적으로 업데이트하는 전체 코드를 제공하겠습니다. UserControl에서 차트 UI를 설정하고, 메인 윈도우에서는 이 UserControl을 동적으로 생성하여 데이터를 주기적으로 업데이트하는 방식을 사용합니다.

1. UserControl XAML 정의
UserControl의 XAML에서 차트의 UI를 설정합니다.

ChartUserControl.xaml

xml
Copy code
<UserControl x:Class="YourNamespace.ChartUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    <Grid>
        <dxc:ChartControl x:Name="chartControl">
            <dxc:ChartControl.Legend>
                <dxc:Legend HorizontalPosition="RightOutside" VerticalPosition="Top" Orientation="Vertical"/>
            </dxc:ChartControl.Legend>
            <!-- 기타 차트 설정 -->
        </dxc:ChartControl>
    </Grid>
</UserControl>
YourNamespace는 해당 UserControl이 위치한 네임스페이스로, 실제 사용 환경에 맞게 변경해야 합니다.

2. UserControl 코드 뒷면
UserControl의 코드 뒷면에서 차트 데이터를 설정하는 메서드를 정의합니다.

ChartUserControl.xaml.cs

csharp
Copy code
public partial class ChartUserControl : UserControl
{
    private const int MaxDataPoints = 100;

    public ChartUserControl()
    {
        InitializeComponent();
    }

    public void SetupChart(ObservableCollection<ChartData> data, string line, string[] types)
    {
        foreach (var type in types)
        {
            var series = new LineSeries2D
            {
                DisplayName = type,
                ArgumentScaleType = ScaleType.DateTime,
                ArgumentDataMember = "FileTime",
                ValueDataMember = "CTValue",
                DataSource = new ObservableCollection<ChartData>(data.Where(d => d.Line == line && d.Type == type))
            };

            // 시리즈 스타일링은 XAML에서 정의
            chartControl.Diagram.Series.Add(series);
        }
    }

    public void AddData(ChartData newData)
    {
        // 데이터 추가 로직
    }
}
3. 메인 윈도우에서 UserControl 사용하기
메인 윈도우에서 UserControl을 동적으로 생성하고 데이터를 주기적으로 업데이트합니다.

MainWindow.xaml.cs

csharp
Copy code
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        CreateCharts();
    }

    void CreateCharts()
    {
        var data = FetchDataFromDatabase();
        var lines = data.Select(d => d.Line).Distinct();

        foreach (var line in lines)
        {
            var chartUserControl = new ChartUserControl();
            chartUserControl.SetupChart(data, line, new[] { "T", "B" });
            chartUserControl.Tag = line;
            MainStackPanel.Children.Add(chartUserControl);
        }

        SetupTimer();
    }

    void SetupTimer()
    {
        // 타이머 설정 및 데이터 업데이트 로직
    }

    // 기타 메서드 (FetchDataFromDatabase, UpdateCharts 등)
}
MainWindow.xaml

xml
Copy code
<Window ...>
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- UserControl 인스턴스들이 여기에 추가됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
이 코드는 UserControl을 사용하여 차트의 UI를 XAML에서 정의하고, 메인 윈도우에서 UserControl을 동적으로 생성하여 차트에 데이터를 추가합니다. SetupChart 메서드는 초기 데이터 설정을 담당하고, AddData 메서드는 새 데이터를 추가합니다. 메인 윈도우의 CreateCharts 메서드에서 차트를 초기화하고, SetupTimer 메서드는 주기적으로 데이터를 업데이