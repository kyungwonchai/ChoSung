using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace AutoInputExample
{
    public partial class MainForm : Form
    {
        private const int WH_KEYBOARD_LL = 13;
        private const int WM_KEYDOWN = 0x0100;
        private const int VK_OEM_1 = 0xBA;  // VK_OEM_1 = ';' key code
        private const int VK_OEM_4 = 0xDB;  // VK_OEM_4 = '[' key code
        private const int VK_0 = 0x30;       // VK_0 = '0' key code
        private const int VK_9 = 0x39;       // VK_9 = '9' key code

        private IntPtr hookId = IntPtr.Zero;
        private bool isRunning = false; // 동작 중 여부를 나타내는 플래그

        public MainForm()
        {
            InitializeComponent();
            hookId = SetHook(KeyboardHookCallback); // Low-Level Keyboard Hook 등록
            Application.ApplicationExit += Application_ApplicationExit; // 애플리케이션 종료 시 후크 해제
        }

        private void Application_ApplicationExit(object sender, EventArgs e)
        {
            UnhookWindowsHookEx(hookId); // Low-Level Keyboard Hook 해제
        }

        private IntPtr SetHook(HookProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(WH_KEYBOARD_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        private IntPtr KeyboardHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                if (vkCode == VK_OEM_1 && !isRunning) // ';' 키를 눌렀을 때 동작 중이 아닌 경우
                {
                    isRunning = true; // 동작 시작
                    SendKeys.Send("1z2z3z4z4z5z6z7z8z9z"); // 문자열 자동 입력
                    isRunning = false; // 동작 종료
                }
                else if (vkCode == VK_OEM_4 && !isRunning) // '[' 키를 눌렀을 때 동작 중이 아닌 경우
                {
                    isRunning = true; // 동작 시작
                    for (int i = VK_0; i <= VK_9; i++)
                    {
                        string inputText = (i - VK_0) + "r";
                        SendKeys.Send(inputText); // 문자열 자동 입력
                        Thread.Sleep(1000); // 1초 대기
                        // 마우스 클릭
                        Cursor.Position = new Point(Screen.PrimaryScreen.Bounds.Width / 2, Screen.PrimaryScreen.Bounds.Height / 2);
                        MouseClick();
                    }
                    isRunning = false; // 동작 종료
                }
            }
            return CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam);
        }

        private void MouseClick()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0,

User
이어
ChatGPT

csharp

            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, UIntPtr.Zero);
            Thread.Sleep(100); // 0.1초 대기
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, UIntPtr.Zero);
        }

        #region Win32 API Definitions

        private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("user32.dll")]
        private static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, UIntPtr dwExtraInfo);

        private const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
        private const uint MOUSEEVENTF_LEFTUP = 0x0004;

        #endregion
    }
}

위의 코드에서 isRunning 변수는 동작 중인지를 나타내는 플래그입니다. ';' 키나 '[' 키가 눌렸을 때 해당 키에 대한 동작을 수행하는 도중에는 다시 키를 누를 수 없도록 하기 위해 사용됩니다. 동작이 시작되면 isRunning 변수를 true로 설정하