문에서 설명하신 시나리오를 C# 코드로 구현해 보겠습니다. 이 상황은 **STX(0x02)**와 **ETX(0x03)**로 감싼 데이터를 송신하고, 서버가 정상 처리 시 OK, 실패 시 A0003을 응답하는 형태입니다. 여기서는 클라이언트가 A0001 데이터를 전송하고, 서버로부터 응답을 받는 구조를 설명하겠습니다.

이 예제는 다음과 같은 단계로 나뉩니다:

클라이언트가 A0001 데이터를 STX와 ETX로 감싸서 서버로 전송합니다.
서버는 이 데이터를 받아 처리하고, 정상일 경우 OK, 오류가 발생하면 A0003을 클라이언트에게 전송합니다.
클라이언트는 서버로부터 응답을 받고, 이를 처리합니다.
C# 클라이언트 코드
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;

namespace STX_ETX_Communication
{
    class Program
    {
        static void Main(string[] args)
        {
            // 서버에 연결
            Socket clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            try
            {
                // 서버의 IP 주소와 포트를 설정 (로컬 테스트용)
                clientSocket.Connect("127.0.0.1", 12345);

                // STX, ETX, 전송할 데이터 정의
                byte stx = 0x02;  // STX (시작 텍스트)
                byte etx = 0x03;  // ETX (종료 텍스트)
                string data = "A0001"; // 전송할 데이터 (A0001)
                
                // 데이터를 STX와 ETX로 감싸서 전송 준비
                string messageToSend = $"{(char)stx}{data}{(char)etx}";
                byte[] messageBuffer = Encoding.ASCII.GetBytes(messageToSend);

                // 서버로 데이터 전송
                clientSocket.Send(messageBuffer);
                Console.WriteLine($"전송 데이터: {messageToSend}");

                // 서버로부터 응답 받기
                byte[] receiveBuffer = new byte[1024];
                int receivedBytes = clientSocket.Receive(receiveBuffer);
                string response = Encoding.ASCII.GetString(receiveBuffer, 0, receivedBytes);

                // 받은 응답 확인
                Console.WriteLine($"서버 응답: {response}");

                // 응답에 따른 처리
                if (response.Trim() == "OK")
                {
                    Console.WriteLine("정상 처리되었습니다.");
                }
                else if (response.Trim() == "A0003")
                {
                    Console.WriteLine("처리 실패: NG 응답 받음.");
                }
                else
                {
                    Console.WriteLine("알 수 없는 응답.");
                }
            }
            catch (SocketException ex)
            {
                Console.WriteLine($"소켓 예외 발생: {ex.Message}");
            }
            finally
            {
                // 소켓 종료
                clientSocket.Shutdown(SocketShutdown.Both);
                clientSocket.Close();
            }
        }
    }
}
C# 서버 코드 (간단한 응답 서버)
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace STX_ETX_Server
{
    class Program
    {
        static void Main(string[] args)
        {
            // 서버 소켓 생성
            Socket serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
            IPEndPoint endPoint = new IPEndPoint(IPAddress.Any, 12345);

            // 소켓 바인드 및 대기
            serverSocket.Bind(endPoint);
            serverSocket.Listen(10);
            Console.WriteLine("서버 대기 중...");

            // 클라이언트 연결 수락
            Socket clientSocket = serverSocket.Accept();
            Console.WriteLine("클라이언트 연결됨.");

            // 데이터 수신
            byte[] buffer = new byte[1024];
            int receivedBytes = clientSocket.Receive(buffer);
            string receivedMessage = Encoding.ASCII.GetString(buffer, 0, receivedBytes);

            // 수신 데이터 로그 출력
            Console.WriteLine($"수신된 데이터: {receivedMessage}");

            // STX(0x02)와 ETX(0x03)로 감싼 데이터만 처리
            if (receivedMessage[0] == 0x02 && receivedMessage[^1] == 0x03)
            {
                string data = receivedMessage.Substring(1, receivedMessage.Length - 2); // STX와 ETX 제거한 데이터

                if (data == "A0001")
                {
                    // 정상 처리된 경우 OK 응답
                    byte[] response = Encoding.ASCII.GetBytes("OK");
                    clientSocket.Send(response);
                    Console.WriteLine("정상 응답: OK");
                }
                else
                {
                    // 처리 실패 시 A0003 응답
                    byte[] response = Encoding.ASCII.GetBytes("A0003");
                    clientSocket.Send(response);
                    Console.WriteLine("실패 응답: A0003");
                }
            }
            else
            {
                Console.WriteLine("잘못된 형식의 메시지 수신");
            }

            // 소켓 종료
            clientSocket.Shutdown(SocketShutdown.Both);
            clientSocket.Close();
            serverSocket.Close();
        }
    }
}
코드 설명 (상세한 설명과 주석)
클라이언트 코드
소켓 연결: Socket 클래스의 인스턴스를 생성하고, 127.0.0.1 (로컬)에서 서버의 포트 12345로 연결을 시도합니다.
STX/ETX로 데이터 감싸기: A0001 데이터를 STX(0x02)와 ETX(0x03)로 감싼 후, ASCII 인코딩으로 바이트 배열로 변환합니다.
데이터 전송: Send 메서드를 사용하여 서버로 전송합니다. 전송되는 데이터는 다음과 같습니다:
코드 복사
STX A0001 ETX
서버 응답 수신: 서버로부터 응답을 받아, 이를 ASCII로 디코딩한 후 출력합니다. 만약 응답이 "OK"라면 정상 처리된 것으로 간주하고, "A0003"이라면 처리 실패로 간주합니다.
소켓 종료: 모든 통신이 끝난 후, 소켓을 종료하고 리소스를 해제합니다.
서버 코드
서버 소켓 생성: 서버는 12345 포트에서 클라이언트의 연결을 대기하며, 클라이언트가 연결을 요청하면 수락합니다.
데이터 수신: 클라이언트로부터 데이터를 수신하며, 수신된 메시지가 STX(0x02)로 시작하고 ETX(0x03)로 끝나는지 확인합니다.
데이터 처리: 수신된 데이터를 처리합니다. 만약 데이터가 A0001이라면, 서버는 "OK" 응답을 보내고, 다른 데이터라면 "A0003"을 응답으로 보냅니다.
응답 전송: 클라이언트에게 정상 응답 또는 NG 응답을 보냅니다.
소켓 종료: 서버는 통신이 완료된 후, 소켓을 종료합니다.
요약
STX/ETX는 데이터 전송의 시작과 끝을 나타내며, 통신에서 메시지의 경계를 명확히 하기 위해 사용됩니다.
클라이언트가 A0001 데이터를 서버로 보내면, 서버는 이를 처리하고, 정상 처리되면 "OK" 응답, 실패 시 "A0003" 응답을 보냅니다.
이를 통해 양방향 통신에서 데이터를 주고받으며, 응답에 따라 처리 상태를 확인할 수 있습니다