{% extends "base.html" %}

{% block title %}{{ '게시글 수정' if post else '새 게시글 작성' }} - 나의 게시판{% endblock %}

{% block head_extra %}
    {# TinyMCE 로컬 경로 #}
    <script src="{{ url_for('static', filename='tinymce/tinymce.min.js') }}" referrerpolicy="origin"></script>
{% endblock %}

{% block content %}
<div class="container-fluid mt-4"> {# 또는 이전에 사용하시던 container 클래스 #}
    <h2>{{ '게시글 수정' if post else '새 게시글 작성' }}</h2>
    {# onsubmit="tinymce.triggerSave();" 는 새 글 첫 저장 시 이미지 누락 문제 해결에 중요 #}
    <form method="POST" action="{{ url_for('edit_post', slug=post.slug) if post else url_for('new_post') }}" onsubmit="tinymce.triggerSave();">
        
        <div class="form-group">
            <label for="title">제목</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ title or (post.title if post else '') }}" required>
        </div>

        <div class="form-group">
            <label for="category_id">카테고리</label>
            <select class="form-control" id="category_id" name="category_id">
                <option value="">-- 카테고리 선택 안 함 --</option>
                {% for category_item in categories %}
                    <option value="{{ category_item.id }}" {% if selected_category_id and category_item.id == selected_category_id|int %}selected{% endif %}>
                        {{ category_item.name }}
                    </option>
                {% endfor %}
            </select>
        </div>

        <div class="form-group form-check">
            <input type="checkbox" class="form-check-input" id="is_password_protected_checkbox" name="is_password_protected_checkbox" value="y"
                   {% if post and post.is_password_protected %}checked{% endif %}>
            <label class="form-check-label" for="is_password_protected_checkbox">이 글을 비밀번호로 보호합니다 (체크 시 아래 비밀번호 사용).</label>
        </div>

        <div id="password_fields_container"> {# 비밀번호 필드는 항상 보이도록 style 속성 제거됨 #}
            <div class="form-group">
                <label for="post_password_input">글 비밀번호</label>
                <input type="password" class="form-control" id="post_password_input" name="post_password_input" placeholder="비밀번호 보호 체크 시 사용할 비밀번호">
                <small class="form-text text-muted">
                    위 "비밀번호로 보호" 체크 시, 여기에 입력된 비밀번호가 사용됩니다.
                    체크하지 않으면 이 필드에 입력된 값은 무시됩니다.
                    기존 글 수정 시, 비밀번호를 변경하고 싶을 때만 새 비밀번호를 입력하세요. 비워두고 체크하면 기존 비밀번호가 유지됩니다 (단, 기존 비밀번호가 없는 상태에서 비워두고 체크하면 보호되지 않습니다).
                </small>
            </div>
        </div>

        <div class="form-group">
            <label for="content_editor">내용</label> {# textarea의 id를 content_editor로 사용 #}
            <textarea class="form-control" id="content_editor" name="content" rows="15">{{ content or (post.content if post else '') }}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">저장</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">취소</a>
    </form>
</div>
{% endblock %}

{% block scripts_extra %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    if (typeof tinymce !== 'undefined') {
        tinymce.init({
            selector: 'textarea#content_editor',
            plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons accordion',
            menubar: 'file edit view insert format tools table help',
            toolbar: 'undo redo | accordion accordionremove | blocks fontfamily fontsize | bold italic underline strikethrough | align numlist bullist | link image media table | lineheight outdent indent| forecolor backcolor removeformat | charmap emoticons | code fullscreen preview | save print | pagebreak anchor codesample | ltr rtl',
            height: 600,
            language: 'ko_KR', // 한국어팩 (static/tinymce/langs/ko_KR.js)이 올바른 경로에 있는지 확인
            
            // --- URL 관련 설정 추가 ---
            relative_urls: false,
            remove_script_host: false,
            document_base_url: "{{ request.url_root.rstrip('/') }}", // 현재 애플리케이션의 루트 URL (마지막 슬래시 제거)
            // --- URL 관련 설정 끝 ---
            
            automatic_uploads: true,
            images_upload_url: "{{ url_for('upload_image') }}", // Flask 업로드 엔드포인트
            file_picker_types: 'image',
            paste_data_images: true,

            images_upload_handler: function (blobInfo, progress) { // 이전 답변의 images_upload_handler 내용 유지
                return new Promise((resolve, reject) => {
                    const image_size_mb = blobInfo.blob().size / 1024 / 1024;
                    const client_max_size_mb = 10; 

                    if (image_size_mb > client_max_size_mb) {
                        reject({ 
                            message: '이미지 용량이 너무 큽니다 (' + image_size_mb.toFixed(1) + 'MB). 클라이언트 최대 허용 용량은 ' + client_max_size_mb + 'MB 입니다.', 
                            remove: true
                        });
                        return;
                    }
                    const xhr = new XMLHttpRequest();
                    xhr.withCredentials = false;
                    xhr.open('POST', "{{ url_for('upload_image') }}");
                    xhr.upload.onprogress = (e) => { if (e.lengthComputable) progress(e.loaded / e.total * 100); };
                    xhr.onload = () => {
                        if (xhr.status < 200 || xhr.status >= 300) {
                            let errorMessage = 'HTTP Error: ' + xhr.status;
                            try { const jsonError = JSON.parse(xhr.responseText); if (jsonError && jsonError.error && jsonError.error.message) errorMessage = jsonError.error.message; } catch (e) {
                                if (xhr.status === 413) errorMessage = '파일이 너무 큽니다. 서버에서 요청을 거부했습니다 (HTTP 413).';
                                else if (xhr.responseText && xhr.responseText.length < 300) errorMessage = `서버 오류: ${xhr.status} - ${xhr.responseText.substring(0,100)}`;
                                else errorMessage = `서버에서 예상치 못한 응답을 받았습니다 (HTTP ${xhr.status}).`;
                            }
                            reject({ message: errorMessage, remove: true }); return;
                        }
                        try { const json = JSON.parse(xhr.responseText); if (!json || typeof json.location != 'string') { reject({ message: '서버로부터 잘못된 JSON 응답을 받았습니다: ' + xhr.responseText, remove: true }); return; } resolve(json.location);
                        } catch (e) { reject({ message: '서버 응답 처리 중 오류 발생 (JSON 파싱 실패): ' + e.message + ' 응답내용: ' + xhr.responseText.substring(0,100), remove: true }); }
                    };
                    xhr.onerror = () => { reject({ message: '네트워크 오류로 이미지 업로드에 실패했습니다. 서버 연결을 확인해주세요.', remove: true }); };
                    const formData = new FormData();
                    formData.append('file', blobInfo.blob(), blobInfo.filename());
                    xhr.send(formData);
                });
            },
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px } img { max-width: 100%; height: auto; }'
        });
    } else {
        console.error("CRITICAL: TinyMCE library (tinymce) is not defined. Check the script src path for tinymce.min.js.");
        const contentTextarea = document.getElementById('content_editor');
        if (contentTextarea) {
            const errorDiv = document.createElement('div');
            errorDiv.textContent = '텍스트 에디터를 불러오는 데 실패했습니다. (TinyMCE 로드 실패)';
            errorDiv.style.color = 'red';
            errorDiv.style.padding = '10px';
            errorDiv.style.border = '1px solid red';
            errorDiv.style.marginBottom = '10px';
            contentTextarea.parentNode.insertBefore(errorDiv, contentTextarea);
        }
    }
});
</script>
{% endblock %}