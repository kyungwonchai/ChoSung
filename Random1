다른 클래스에서 SignalRClient의 싱글톤을 사용하여 메시지를 전송하는 샘플 코드를 작성해 드리겠습니다. 이 코드를 통해 다른 클래스에서 MainViewModel을 거치지 않고 SignalRClient로 직접 메시지를 전송할 수 있으며, 이 메시지는 MainViewModel에서 자동으로 수신되고 DataGrid에 표시됩니다.

1. OtherClass (다른 클래스에서 메시지 전송 샘플)
csharp
코드 복사
public class OtherClass
{
    // 다른 클래스에서 SignalR 메시지를 전송하는 메서드
    public async void SendCustomMessage()
    {
        // 전송할 메시지
        string message = "Message from OtherClass";

        // SignalRClient 싱글톤 인스턴스를 사용하여 메시지 전송
        await SignalRClient.Instance.SendMessageAsync(message);
    }
}
2. MainWindow.xaml.cs (MainWindow에서 OtherClass 사용 예시)
csharp
코드 복사
using System.Windows;

public partial class MainWindow : Window
{
    private MainViewModel _viewModel;
    private OtherClass _otherClass;

    public MainWindow()
    {
        InitializeComponent();
        _viewModel = new MainViewModel();
        _otherClass = new OtherClass();
        DataContext = _viewModel;  // ViewModel을 DataContext로 설정
    }

    // 버튼 클릭 시 OtherClass에서 메시지를 전송하는 메서드 (예시)
    private void OnSendButtonClick(object sender, RoutedEventArgs e)
    {
        _otherClass.SendCustomMessage();  // OtherClass에서 메시지 전송
    }
}
3. 샘플 동작 설명
OtherClass:

OtherClass는 MainViewModel과 전혀 연관이 없으며, SignalRClient의 싱글톤 인스턴스를 사용하여 메시지를 직접 전송합니다.
SendCustomMessage() 메서드를 호출하면 SignalRClient를 통해 서버로 메시지를 전송하게 됩니다.
MainWindow:

OtherClass의 SendCustomMessage 메서드를 호출하여 메시지를 전송합니다. 전송된 메시지는 MainViewModel에서 자동으로 수신되고, DataGrid에 표시됩니다.
MainViewModel:

MainViewModel은 SignalRClient의 OnMessageSentAndResponse 콜백을 통해 메시지 전송 및 응답을 처리합니다. OtherClass에서 전송된 메시지도 이 구조를 통해 처리됩니다.
4. 전체 코드 수정이 필요할 경우 (참고용)
만약 이 구조에서 잘 동작하지 않거나 문제가 발생할 경우, 다음과 같이 코드를 수정할 수 있습니다.

SignalRClient 클래스는 이미 싱글톤으로 구현되어 있으므로 수정이 필요 없습니다.
MainViewModel은 이미 SignalRClient와 직접 상호작용하고 있어 다른 클래스에서 메시지를 보내더라도 응답을 받을 준비가 되어 있습니다.