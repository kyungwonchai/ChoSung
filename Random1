해당 오류는 AlertDialog를 스레드가 아닌 코루틴이나 다른 비동기 스레드에서 UI 작업을 시도할 때 발생하는 문제입니다. Android에서는 UI 관련 작업은 항상 메인(UI) 스레드에서 실행되어야 합니다. SignalR이나 다른 네트워크 작업은 일반적으로 백그라운드 스레드에서 실행되므로, 메시지를 수신할 때 UI 작업을 메인 스레드에서 처리하도록 해야 합니다.

에러가 발생하는 이유는 playAlarmSound 함수 내에서 AlertDialog를 백그라운드 스레드에서 실행하려고 하기 때문입니다. 이 문제를 해결하기 위해 코루틴의 메인 디스패처를 사용하여 UI 스레드에서 작업을 실행하거나 Handler를 사용할 수 있습니다.

해결 방법: runOnUiThread 사용
Android의 runOnUiThread 메서드를 이용하면, UI 스레드에서 안전하게 작업을 실행할 수 있습니다. 메시지를 수신할 때 runOnUiThread 내부에서 AlertDialog를 실행하도록 코드를 수정해보겠습니다.

수정된 코드
kotlin
코드 복사
import android.os.Handler
import android.os.Looper

private fun playAlarmSound() {
    // 사운드 재생 설정
    try {
        val alarmSound: Uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)
            ?: RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)

        mediaPlayer = MediaPlayer().apply {
            setAudioAttributes(
                AudioAttributes.Builder()
                    .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                    .setUsage(AudioAttributes.USAGE_ALARM)
                    .build()
            )
            setDataSource(this@MainActivity, alarmSound)
            isLooping = true // 사운드를 반복 재생
            prepare()
            start()
        }
    } catch (e: Exception) {
        Log.e("MainActivity", "Failed to play alarm sound", e)
    }

    // UI 스레드에서 팝업 창을 띄우기
    Handler(Looper.getMainLooper()).post {
        val builder = AlertDialog.Builder(this)
        builder.setTitle("알림")
            .setMessage("문제를 확인하고 창을 터치하여 경고음을 종료하세요.")
            .setPositiveButton("확인") { dialog, _ ->
                stopAlarmSound() // 사운드 멈춤
                dialog.dismiss()
            }
            .setCancelable(false) // 사용자가 창을 닫기 전까지 팝업이 꺼지지 않음
        builder.create().show()
    }
}

private fun stopAlarmSound() {
    mediaPlayer?.let {
        if (it.isPlaying) {
            it.stop()
            it.release()
        }
    }
}
설명
Handler(Looper.getMainLooper()).post 사용:

이 코드는 메인(UI) 스레드에서 AlertDialog를 실행할 수 있게 해줍니다.
Handler와 Looper.getMainLooper()를 사용하여, 백그라운드 스레드에서 메인 스레드로 작업을 전환합니다.
AlertDialog 실행:
