드가 제대로 인식되지 않는 문제와 함께, 실시간 자동 초점 조정을 위해 카메라 설정을 개선해야 할 필요가 있습니다. 다음은 실시간으로 자동 초점 조정을 자주 수행하도록 설정하고, QR 코드 인식 성능을 높이기 위한 코드입니다.

1. activity_main.xml
이 부분은 기존과 동일합니다. 카메라 미리보기 화면 크기는 100dp로 유지합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <com.journeyapps.barcodescanner.DecoratedBarcodeView
        android:id="@+id/camera_preview"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_centerInParent="true" />

    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. MainActivity.kt
카메라의 자동 초점을 실시간으로 자주 조정하도록 설정하고, QR 코드 인식을 개선하기 위한 최적화된 코드를 제공합니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.content.ContextCompat
import com.google.zxing.BarcodeFormat
import com.google.zxing.MultiFormatReader
import com.google.zxing.ResultPoint
import com.journeyapps.barcodescanner.CameraSettings
import com.journeyapps.barcodescanner.DecoratedBarcodeView
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.DefaultDecoderFactory

class MainActivity : ComponentActivity() {

    private lateinit var barcodeView: DecoratedBarcodeView
    private val focusHandler = Handler(Looper.getMainLooper())
    private val focusInterval: Long = 100 // 초점 조정 간격 (밀리초)

    private val requestPermissionLauncher =
        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->
            if (isGranted) {
                setupBarcodeView()
            } else {
                // 권한이 거부된 경우 처리
            }
        }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)
            != PackageManager.PERMISSION_GRANTED) {
            requestPermissionLauncher.launch(Manifest.permission.CAMERA)
        } else {
            setupBarcodeView()
        }
    }

    private fun setupBarcodeView() {
        barcodeView = findViewById(R.id.camera_preview)

        // 카메라 설정: 자동 초점 및 프리뷰 활성화
        val cameraSettings = CameraSettings()
        cameraSettings.isAutoFocusEnabled = true
        barcodeView.barcodeView.cameraSettings = cameraSettings

        // QR 코드와 바코드를 모두 인식할 수 있도록 설정
        val formats = listOf(BarcodeFormat.QR_CODE, BarcodeFormat.CODE_39, BarcodeFormat.CODE_128)
        barcodeView.barcodeView.decoderFactory = DefaultDecoderFactory(formats)
        
        // 실시간 초점 조정
        focusHandler.postDelayed(object : Runnable {
            override fun run() {
                barcodeView.barcodeView.cameraInstance?.requestPreviewFocus()
                focusHandler.postDelayed(this, focusInterval)
            }
        }, focusInterval)

        barcodeView.decodeContinuous(object : BarcodeCallback {
            override fun barcodeResult(result: BarcodeResult?) {
                result?.let {
                    findViewById<TextView>(R.id.text_view_result).text =
                        "Scanned: ${it.text} (${it.barcodeFormat})"
                }
            }

            override fun possibleResultPoints(resultPoints: List<ResultPoint>) {
                // Optional: handle potential result points here
            }
        })
    }

    override fun onResume() {
        super.onResume()
        barcodeView.resume()
    }

    override fun onPause() {
        super.onPause()
        barcodeView.pause()
        focusHandler.removeCallbacksAndMessages(null)  // 초점 조정 중지
    }
}
주요 수정 사항:
카메라 초점 조정: CameraSettings를 통해 자동 초점을 활성화했습니다. 또한, focusHandler를 사용하여 100밀리초마다 자동으로 초점을 조정하도록 설정했습니다.

QR 코드 인식: DefaultDecoderFactory에서 QR 코드와 바코드를 모두 인식할 수 있도록 설정했으며, QR 코드의 위치에 상관없이 인식될 수 있도록 자동 초점을 자주 조정합니다.

이제 이 코드로 QR 코드와 바코드를 모두 인식할 수 있으며, 카메라의 초점이 실시간으로 자동 조정되어 인식률이 향상될 것입니다. QR 코드가 제대로 인식되지 않는다면, 카메라와 QR 코드 간의 거리와 각도를 조정해보는 것이 도움이 