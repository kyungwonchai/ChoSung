근 방식을 사용할 수 있습니다. 아래에 몇 가지 방법을 제시해드립니다:

    클래스 생성:
    문자열 쌍을 저장하기 위해 클래스를 정의하고, 이 클래스의 인스턴스를 리스트에 보관할 수 있습니다.

csharp

public class StringPair
{
    public string String1 { get; set; }
    public string String2 { get; set; }
}

// 사용 예:
var stringPairs = new List<StringPair>
{
    new StringPair { String1 = "hello", String2 = "world" },
    // ... 다른 문자열 쌍들
};

    튜플 사용:
    C#에서는 튜플을 사용하여 두 문자열을 묶을 수 있습니다.

csharp

var stringPairs = new List<(string, string)>
{
    ("hello", "world"),
    // ... 다른 문자열 쌍들
};

    딕셔너리 사용:
    두 문자열 중 하나를 키로 사용하고 다른 하나를 값으로 사용하여 딕셔너리에 저장할 수 있습니다.

csharp

var stringPairs = new Dictionary<string, string>
{
    { "hello", "world" },
    // ... 다른 문자열 쌍들
};

이 리스트나 딕셔너리를 순회하면서 데이터베이스에 삽입할 수 있습니다.

csharp

using System.Data.SqlClient;

string connectionString = "your_connection_string_here";

foreach (var pair in stringPairs)
{
    using (var connection = new SqlConnection(connectionString))
    {
        string query = "INSERT INTO YourTable (Column1, Column2) VALUES (@String1, @String2)";
        using (var command = new SqlCommand(query, connection))
        {
            command.Parameters.AddWithValue("@String1", pair.String1);
            command.Parameters.AddWithValue("@String2", pair.String2);

            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }
    }
}

위 코드는 각 문자열 쌍을 데이터베이스에 삽입하는 방법을 보여줍니다. YourTable, Column1, Column2, 및 your_connect