드 컨트롤을 구현하기 위해 WPF의 기본 DataGrid를 사용할 수 있습니다. 아래 코드는 테이블 데이터를 불러와서 표시하고, 권한에 따라 컬럼을 처리하는 간단한 예입니다.
XAML 부분

xaml

<Window x:Class="WpfApp1.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfApp1"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <DataGrid x:Name="dataGrid1" AutoGenerateColumns="False" CanUserAddRows="False">
        </DataGrid>
    </Grid>
</Window>

C# 백엔드 부분

csharp

using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Windows;

namespace WpfApp1
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<YourDataType> DataList { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            DataList = new ObservableCollection<YourDataType>();

            // MSSQL 2014에 연결
            string connString = @"Data Source=YOUR_SERVER;Initial Catalog=YOUR_DB;User ID=YOUR_ID;Password=YOUR_PASSWORD";
            using (SqlConnection conn = new SqlConnection(connString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SELECT * FROM YourTable", conn);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    var data = new YourDataType()
                    {
                        // 컬럼에 따라 데이터 읽기
                        // 예: Name = reader["Name"].ToString(),
                        // 권한 = Convert.ToInt32(reader["권한"]),
                    };

                    DataList.Add(data);
                }

                dataGrid1.ItemsSource = DataList;
            }

            // 컬럼명과 권한에 따라 동적으로 컬럼 추가
            foreach (var col in TableColumns)  // TableColumns는 데이터베이스에서 불러온 컬럼 이름 목록
            {
                var gridColumn = new DataGridTextColumn
                {
                    Header = col,
                    Binding = new System.Windows.Data.Binding(col)
                };

                // 권한에 따른 처리
                // 예: if (YourAuthority == 1) { gridColumn.IsReadOnly = true; }
                
                dataGrid1.Columns.Add(gridColumn);
            }
        }
    }
}

YourDataType은 테이블의 데이터 타입을 나타내는 클래스이며, 이를 적절하게 정의해주어야 합니다. TableColumns는 불러올 컬럼의 이름 목록입니다.

권한 처리 로직은 // 권한에 따른 처리 주석 부분에 추가해야 합니다. 권한 값에 따라 gridColumn.IsReadOnly를 설정하거나, dataGrid1.Columns.Remove(gridColumn)를 호출하여 컬럼을 제거할 수 있