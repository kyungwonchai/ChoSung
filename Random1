Express 22.2에서는 다양한 도킹 및 문서 관리 기능을 제공합니다. 기본적으로 DocumentManager와 TabbedView를 사용하여 문서 도킹 및 MDI(Multiple Document Interface)를 쉽게 구현할 수 있지만, 더 전문적이고 유연한 방식으로 도킹을 구현하고자 한다면 DevExpress에서 제공하는 DockManager를 활용하는 방법을 추천드립니다.

DockManager 활용을 통한 더 전문적인 문서 도킹
DockManager는 더욱 복잡한 레이아웃과 다양한 창 관리 기능을 제공하며, 다양한 도킹 스타일을 지원합니다. TabbedView는 주로 탭 기반의 문서 관리에 초점을 맞추고 있지만, DockManager를 사용하면 창을 자유롭게 이동하고, 탭, 자동 숨김, 플로팅 윈도우와 같은 복잡한 인터페이스를 구성할 수 있습니다.

DockManager를 활용한 예제 코드
csharp
코드 복사
using System;
using System.Windows.Forms;
using DevExpress.XtraBars.Docking;
using DevExpress.XtraBars.Docking2010.Views;
using DevExpress.XtraBars.Docking2010.Views.Tabbed;

public partial class MainForm : Form
{
    private DockManager dockManager;
    private TabbedView tabbedView;

    public MainForm()
    {
        InitializeComponent();

        // DockManager 및 TabbedView 설정
        dockManager = new DockManager(this);
        tabbedView = new TabbedView();

        // TabbedView를 DockManager와 연결
        dockManager.Form = this;
        dockManager.TopZIndexControls.AddRange(new string[] {
            "DevExpress.XtraBars.BarDockControl",
            "System.Windows.Forms.StatusBar"});

        // DockManager로 문서 도킹 설정
        var panel1 = dockManager.AddPanel(DockingStyle.Left); // 좌측에 도킹
        panel1.Text = "Dock Panel 1";
        
        var panel2 = dockManager.AddPanel(DockingStyle.Right); // 우측에 도킹
        panel2.Text = "Dock Panel 2";

        var panel3 = dockManager.AddPanel(DockingStyle.Float); // 플로팅 윈도우
        panel3.Text = "Floating Panel";

        // 자식 폼을 탭 형태로 추가
        var document = new DevExpress.XtraBars.Docking2010.Views.Tabbed.Document(tabbedView);
        document.Caption = "Document 1";
        document.Control = new ChildForm();
        tabbedView.Documents.Add(document);

        // TabbedView를 DockManager에 연결
        dockManager.DockingOptions.TabbedView = tabbedView;
    }
}

public class ChildForm : Form
{
    public ChildForm()
    {
        this.Text = "Child Form";
        this.Size = new System.Drawing.Size(300, 200);
    }
}
코드 설명
DockManager: DevExpress에서 도킹 레이아웃을 관리하는 도구입니다. 다양한 도킹 스타일을 제공하며, 창을 좌측, 우측, 상단, 하단에 도킹하거나 플로팅 창으로 만들 수 있습니다.
TabbedView: 문서들을 탭 형태로 관리하며, DockManager와 연동하여 탭으로 문서를 표시할 수 있습니다.
DockPanel: 도킹 가능한 패널입니다. 이 패널들은 좌우, 상하에 도킹되거나 플로팅 윈도우로 만들 수 있습니다.
플로팅 윈도우: DockingStyle.Float를 사용하면, 패널을 독립적인 윈도우로 띄울 수 있습니다.
DockManager의 주요 기능
복잡한 레이아웃 관리: 창을 좌측, 우측, 상단, 하단에 도킹하거나, 탭과 플로팅 윈도우로 나눌 수 있어 복잡한 레이아웃을 유연하게 구성할 수 있습니다.
자동 숨김 패널: 사용자가 필요할 때만 보이는 패널을 구현할 수 있으며, 패널이 사용되지 않을 때는 자동으로 숨길 수 있습니다.
플로팅 창: 패널을 독립적인 플로팅 윈도우로 만들어서 사용자에게 더 많은 자유를 제공합니다.
다양한 창 관리 스타일: MDI 형식의 다중 문서 관리뿐 아니라, 탭 형태, 도킹 창 등 다양한 UI 스타일을 지원합니다.
더 전문가적인 문서 도킹
TabbedView는 간단한 문서 관리에 유용하지만, DockManager를 사용하면 더 복잡하고 유연한 도킹 시스템을 구현할 수 있습니다. 패널과 창을 자유롭게 배치할 수 있고, 사용자가 원하는 대로 레이아웃을 수정할 수 있는 기능도 제공합니다.

요약
DevExpress의 DockManager는 TabbedView보다 더 고급 도킹 시스템을 제공합니다.
도킹 레이아웃을 세밀하게 조정하고 복잡한 창 배치를 구현할 수 있습니다.
MDI 스타일과 탭을 동시에 사용하거나, 도킹 창과 플로팅 윈도우를 조합하여 전문가 수준의 UI를 구축할 수 있습니다.
이 방식은 보다 유연하고 복잡한 UI를 구성하는 데 적합하며, 사용자 경험을 향상시