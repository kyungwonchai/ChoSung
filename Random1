문제: 원래 styled_df 리턴 방식 사용 & 기존 방식 유지하기
지금 사용하는 방식은 styled_df를 그대로 리턴하는 방식입니다.
그러니까 그 방식을 유지하면서, 행마다 배경색을 번갈아 적용하고, 최대값은 노란색으로 덮어쓰도록 수정합니다.

✅ 수정된 코드 (기존 방식 유지)
python
코드 복사
import streamlit as st
import pymssql
import pandas as pd

# MSSQL 서버 연결 설정 함수
def get_connection():
    return pymssql.connect(
        server="YOUR_SERVER",
        user="YOUR_USER",
        password="YOUR_PASSWORD",
        database="YOUR_DATABASE"
    )

# Get_min_bestdifferent 프로시저 호출 함수 (cursor.fetchall() 방식)
def fetch_main_data(proc_name):
    conn = get_connection()
    cursor = conn.cursor()
    cursor.execute(f"EXEC {proc_name}")
    rows = cursor.fetchall()
    conn.close()
    return rows

# DataFrame 생성 함수 (전체 높이 사용)
def create_dataframe(rows):
    original_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "ACT2_1", "ACT2_2", "ACT2_3", "ACT2_4",
        "ACT2_5", "ACT2_6", "ACT2_7", "ACT2_8"
    ]

    new_columns = [
        "group1", "line1", "model1", "type1", "ecn1", "edition1",
        "MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"
    ]

    df = pd.DataFrame(rows, columns=original_columns)
    df.columns = new_columns

    mc_columns = [f"MC{i}" for i in range(1, 9)]
    df[mc_columns] = df[mc_columns].astype(float).round(2)

    return df, mc_columns

# Streamlit 앱 구성
def main():
    st.set_page_config(page_title="MC1 ~ MC8 Data Table", layout="wide")
    st.title("MC1 ~ MC8 Data Table - 가독성 개선 및 강조 표시")

    rows = fetch_main_data("Get_min_bestdifferent_t1")
    
    if not rows:
        st.error("데이터를 가져오지 못했습니다. 프로시저 또는 데이터베이스 연결을 확인하세요.")
    else:
        df, mc_columns = create_dataframe(rows)

        # 행별 배경색을 번갈아 적용하기
        def apply_row_styles(row):
            if row.name % 2 == 0:
                return ['background-color: #E0FFFF'] * len(row)  # 아쿠아
            else:
                return ['background-color: white'] * len(row)  # 흰색

        # 최대값 강조 함수 (노란색)
        def highlight_max(row):
            max_value = row[mc_columns].max()
            return ['background-color: yellow' if v == max_value else '' for v in row]

        # 스타일 적용 (배경색 + 최대값 강조)
        styled_df = df.style.apply(apply_row_styles, axis=1)  # 행 색상 번갈아 적용
        styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)  # 최대값 노란색으로 강조

        # 스타일링된 DataFrame 표시
        st.write(styled_df)  # 기존의 방식 유지

if __name__ == "__main__":
    main()
✅ 코드 설명
행 색상 스타일 설정 (apply_row_styles)

python
코드 복사
def apply_row_styles(row):
    if row.name % 2 == 0:
        return ['background-color: #E0FFFF'] * len(row)  # 아쿠아 색상
    else:
        return ['background-color: white'] * len(row)  # 흰색
행 인덱스 (row.name) 값에 따라 배경색을 번갈아 적용.

짝수 행: 아쿠아 (#E0FFFF), 홀수 행: 흰색 (white).

최대값 강조 스타일 설정 (highlight_max)

python
코드 복사
def highlight_max(row):
    max_value = row[mc_columns].max()
    return ['background-color: yellow' if v == max_value else '' for v in row]
MC1 ~ MC8 값 중 가장 큰 값을 **노란색 (yellow)**으로 강조.

기존 스타일 적용 방식 유지

python
코드 복사
styled_df = df.style.apply(apply_row_styles, axis=1)
styled_df = styled_df.apply(highlight_max, subset=mc_columns, axis=1)
st.write(styled_df)
스타일을 styled_df로 설정하고, st.write()로 출력.

📌 Streamlit 실행 방법
bash
코드 복사
streamlit run your_script_name.py
🔥 결과
짝수 행은 아쿠아 (#E0FFFF), 홀수 행은 흰색으로 교차 배경 적용.

최대값은 노란색으로 강조 표시됨.

원래의 st.write(styled_df) 방식 그대로 유지.