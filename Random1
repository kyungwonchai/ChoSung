래는 카메라 미리보기 위쪽에 우측 30% 영역을 차지하는 리스트박스를 추가하여, QR 코드가 읽힐 때마다 해당 리스트박스에 항목이 추가되도록 한 레이아웃과 수정된 코드를 제공하겠습니다.

수정된 XML 레이아웃 (activity_main.xml)
xml
코드 복사
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- IP 주소와 기기 ID 표시 -->
    <TextView
        android:id="@+id/device_info"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Device Info"
        android:textSize="16sp"
        android:textColor="#000000"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:padding="16dp" />

    <!-- 카메라 미리보기 (테두리를 위한 Layout 포함) -->
    <RelativeLayout
        android:id="@+id/camera_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/device_info"
        android:padding="10px"> <!-- 10px 두께의 테두리를 위한 패딩 -->

        <!-- 카메라 미리보기 -->
        <androidx.camera.view.PreviewView
            android:id="@+id/viewFinder"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#FFA500" /> <!-- 기본 주황색 테두리 -->

        <!-- 인식된 텍스트를 보여줄 영역 -->
        <TextView
            android:id="@+id/text_view_result"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_alignParentBottom="true"
            android:layout_centerHorizontal="true"
            android:text="Scan Result"
            android:textSize="18sp"
            android:textColor="#FFFFFF"
            android:background="#000000"
            android:padding="16dp" />
    </RelativeLayout>

    <!-- 우측 30%를 차지하는 리스트박스 -->
    <ListView
        android:id="@+id/qr_code_list"
        android:layout_width="0dp"
        android:layout_height="match_parent"
        android:layout_alignParentRight="true"
        android:layout_alignParentEnd="true"
        android:layout_marginEnd="10dp"
        android:layout_marginRight="10dp"
        android:layout_marginTop="10dp"
        android:layout_marginBottom="10dp"
        android:background="#80FFFFFF"  <!-- 투명 배경 -->
        android:dividerHeight="1dp"
        android:scrollbars="vertical"
        android:layout_weight="1"
        android:layout_width="30%"
        android:padding="5dp" />

</RelativeLayout>
주요 구성 요소:
device_info:

기기 IP와 ID를 표시합니다.
camera_container:

카메라 미리보기를 위한 컨테이너입니다. 이 컨테이너는 테두리를 포함하며, 그 안에 카메라 미리보기(PreviewView)와 text_view_result가 포함됩니다.
text_view_result:

QR 코드 인식 결과를 표시하는 텍스트 뷰입니다. 카메라 미리보기 화면의 하단 중앙에 위치합니다.
qr_code_list:

화면의 우측 30%를 차지하는 리스트박스로, 스캔된 QR 코드의 결과를 표시합니다. 이 리스트박스는 스크롤이 가능하며, 화면의 오른쪽에 위치합니다.
수정된 Kotlin 코드 (MainActivity.kt)
이제 리스트박스에 읽은 QR 코드 데이터를 추가하는 로직을 수정한 Kotlin 코드를 확인하세요.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.net.wifi.WifiManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.util.Log
import android.widget.ArrayAdapter
import android.widget.ListView
import android.widget.RelativeLayout
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.camera2.interop.ExperimentalCamera2Interop
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import kotlinx.coroutines.*
import java.net.InetAddress
import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.util.*
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraContainer: RelativeLayout
    private lateinit var deviceInfo: TextView
    private lateinit var qrCodeList: ListView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var handler: Handler
    private lateinit var qrCodeAdapter: ArrayAdapter<String>

    private lateinit var deviceIp: String
    private lateinit var deviceId: String

    private var isGreenState = false
    private var lastScannedQRCode: String? = null

    // MSSQL 연결 정보
    private val dbUrl = "jdbc:sqlserver://<SERVER>:<PORT>;databaseName=<DATABASE>"
    private val dbUser = "<USERNAME>"
    private val dbPassword = "<PASSWORD>"

    // MySQL 연결 정보
    private val mySqlUrl = "jdbc:mysql://<MYSQL_SERVER>:<MYSQL_PORT>/<MYSQL_DATABASE>"
    private val mySqlUser = "<MYSQL_USERNAME>"
    private val mySqlPassword = "<MYSQL_PASSWORD>"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)
        cameraContainer = findViewById(R.id.camera_container)
        deviceInfo = findViewById(R.id.device_info)
        qrCodeList = findViewById(R.id.qr_code_list)

        // 기기 IP 주소와 ID 가져오기
        deviceIp = getDeviceIpAddress()
        deviceId = Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID)

        // IP 주소와 기기 ID 표시
        deviceInfo.text = "IP: $deviceIp\nID: $deviceId"

        qrCodeAdapter = ArrayAdapter(this, android.R.layout.simple_list_item_1, mutableListOf())
        qrCodeList.adapter = qrCodeAdapter

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
        handler = Handler(Looper.getMainLooper())
    }

    @OptIn(ExperimentalCamera2Interop::class)
    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val previewBuilder = Preview.Builder()

            // Camera2Interop을 사용하여 연속 자동 초점 모드 설정
            val camera2Interop = Camera2Interop.Extender(previewBuilder)
            camera2Interop.setCaptureRequestOption(
                android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE,
                android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
            )

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(viewFinder.surfaceProvider)
            }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setTargetAspectRatio(AspectRatio.RATIO_16_9) // 장치의 최대 해상도 사용
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .setTargetRotation(viewFinder.display.rotation) // 디스플레이 회전에 맞춤
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue

                        // 녹색 상태가 아닐 때만 DB 체크
                        if (!isGreenState) {
                            CoroutineScope(Dispatchers.Main).launch {
                                val isInDatabase = isQrCodeInDatabase(rawValue)
                                if (isInDatabase) {
                                    isGreenState = true
                                    // QR 코드가 DB에 존재할 경우 테두리를 녹색으로 변경
                                    cameraContainer.setBackgroundColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_green_light))

                                    // 5분 동안 DB 체크 중지
                                    delay(TimeUnit.MINUTES.toMillis(5))
                                    isGreenState = false
                                    cameraContainer.setBackgroundColor(ContextCompat.getColor(this@MainActivity, android.R.color.holo_orange_light))
                                }
                            }
                        } else {
                            // 녹색 상태에서는 읽은 바코드를 MSSQL에 저장
                            if (lastScannedQRCode != rawValue) {
                                lastScannedQRCode = rawValue
                                CoroutineScope(Dispatchers.IO).launch {
                                    insertScannedData(rawValue, deviceId)

                                    // MySQL에서 modelnumber 확인
                                    val modelInfo = checkModelInMySQL(rawValue)
                                    modelInfo?.let {
                                        withContext(Dispatchers.Main) {
                                            qrCodeAdapter.add(it)
                                            qrCodeAdapter.notifyDataSetChanged()
                                        }
                                    }

                                    // 3초 동안 동일 바코드 읽지 않음
                                    delay(TimeUnit.SECONDS.toMillis(3))
                                    lastScannedQRCode = null
                                }
                            }
                        }
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private suspend fun isQrCodeInDatabase(qrCode: String): Boolean {
        return withContext(Dispatchers.IO) {
            var connection: Connection? = null
            var preparedStatement: PreparedStatement? = null
            var resultSet: ResultSet? = null
            var result = false
            try {
                // JDBC 드라이버 로드
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")

                // 데이터베이스 연결
                connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)

                // 쿼리 실행
                val query = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
                preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrCode)
                
                resultSet = preparedStatement.executeQuery()

                // 결과 처리
                if (resultSet.next()) {
                    result = resultSet.getInt(1) > 0
                }
            } catch (e: Exception) {
                e.printStackTrace()
            } finally {
                try {
                    resultSet?.close()
                    preparedStatement?.close()
                    connection?.close()
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
            result
        }
    }

    private suspend fun insertScannedData(qrCode: String, deviceId: String) {
        withContext(Dispatchers.IO) {
            var connection: Connection? = null
            var preparedStatement: PreparedStatement? = null
            try {
                // JDBC 드라이버 로드
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")

                // 데이터베이스 연결
                connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)

                // 데이터 삽입
                val query = "INSERT INTO ScannedData (QRCodeData, ScannedAt) VALUES (?, ?)"
                preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrCode)
                preparedStatement.setString(2, deviceId)
                preparedStatement.executeUpdate()
            } catch (e: Exception) {
                e.printStackTrace()
            } finally {
                try {
                    preparedStatement?.close()
                    connection?.close()
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
        }
    }

    private suspend fun checkModelInMySQL(qrCode: String): String? {
        return withContext(Dispatchers.IO) {
            var connection: Connection? = null
            var preparedStatement: PreparedStatement? = null
            var resultSet: ResultSet? = null
            var result: String? = null
            try {
                // MySQL JDBC 드라이버 로드
                Class.forName("com.mysql.jdbc.Driver")

                // 데이터베이스 연결
                connection = DriverManager.getConnection(mySqlUrl, mySqlUser, mySqlPassword)

                // 쿼리 실행
                val query = "SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = ?"
                preparedStatement = connection.prepareStatement(query)
                preparedStatement.setString(1, qrCode)
                
                resultSet = preparedStatement.executeQuery()

                // 결과 처리
                if (resultSet.next()) {
                    val district = resultSet.getString("district")
                    val at = resultSet.getString("at")
                    val modelnumber = resultSet.getString("modelnumber")
                    result = "District: $district, At: $at, Model: $modelnumber"
                }
            } catch (e: Exception) {
                e.printStackTrace()
            } finally {
                try {
                    resultSet?.close()
                    preparedStatement?.close()
                    connection?.close()
                } catch (e: Exception) {
                    e.printStackTrace()
                }
            }
            result
        }
    }

    private fun getDeviceIpAddress(): String {
        try {
            val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
            val ipAddress = wifiManager.connectionInfo.ipAddress
            return InetAddress.getByAddress(
                byteArrayOf(
                    (ipAddress and 0xff).toByte(),
                    (ipAddress shr 8 and 0xff).toByte(),
                    (ipAddress shr 16 and 0xff).toByte(),
                    (ipAddress shr 24 and 0xff).toByte()
                )
            ).hostAddress ?: "IP not found"
        } catch (ex: Exception) {
            return "IP not found"
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
        handler.removeCallbacksAndMessages(null) // 모든 핸들러 작업 중지
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 변경 사항:
리스트박스 위치 및 크기 조정:

리스트박스(ListView)가 화면 우측 30%를 차지하도록 설정되어 있으며, 카메라 미리보기 화면 위에 위치합니다.
리스트박스 업데이트:

QR 코드가 MySQL 데이터베이스에서 확인된 경우, 리스트박스에 추가됩니다.
이제 QR 코드를 스캔할 때마다 리스트박스에 데이터가 추가되며, 카메라 미리보기 화면의 오른쪽에 위치하게 됩니다