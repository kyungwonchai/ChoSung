래는 DevExpress의 최신 버전에서 AxisX2D 및 AxisY2D에 대한 타이틀 설정을 XAML이 아닌 코드 비하인드에서 동적으로 처리하도록 수정한 전체 코드입니다.

XAML에서는 더 이상 AxisX2D.Title 속성이 직접적으로 지원되지 않기 때문에 코드에서 적절히 설정해야 합니다.

수정된 XAML 코드 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="900" Width="1200">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*" />
            <RowDefinition Height="1.5*" />
            <RowDefinition Height="1.5*" />
        </Grid.RowDefinitions>

        <!-- 상단 라인별 BoxPlot 차트 -->
        <dxc:ChartControl Grid.Row="0" x:Name="LineChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 L 모델 차트 -->
        <dxc:ChartControl Grid.Row="1" x:Name="LModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend UseCheckBoxes="True" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 R 모델 차트 -->
        <dxc:ChartControl Grid.Row="2" x:Name="RModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend UseCheckBoxes="True" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadDataFromDatabase();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, dataL, "Timestamp", "Values");

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, dataR, "Timestamp", "Values");

            // 범례 항목 동기화 설정
            SyncLegends();
        }

        private List<DataPoint> LoadDataFromDatabase()
        {
            var result = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }

            return result;
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new BoxPlotSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "ModelName",
                    ValueDataMember = "MP1"
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)LineChart.Diagram, "Line Name", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle)
        {
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName // 범례와 연결
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = System.Windows.Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = System.Windows.Visibility.Visible };
        }

        private void SyncLegends()
        {
            foreach (var item in LModelChart.Legend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }
            foreach (var item in RModelChart.Legend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }
        }

        private void LegendItem_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (sender is LegendItem legendItem && legendItem.Series != null)
            {
                var mpName = legendItem.Series.Tag as string;
                ToggleSeriesVisibility(mpName);
            }
        }

        private void ToggleSeriesVisibility(string mpName)
        {
            ToggleSeriesInChart(LModelChart, mpName);
            ToggleSeriesInChart(RModelChart, mpName);
        }

        private void ToggleSeriesInChart(ChartControl chart, string mpName)
        {
            foreach (var series in ((XYDiagram2D)chart.Diagram).Series)
            {
                if (series.Tag as string == mpName)
                {
                    series.Visible = !series.Visible;
                }
            }
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 변경 사항
AxisTitle 동적 설정:

XAML에서 AxisX2D.Title 및 AxisY2D.Title을 설정하면 에러가 발생하므로, SetAxisTitles 메서드를 통해 코드 비하인드에서 동적으로 설정.
모든 차트에서 X축, Y축 제목 동적으로 추가:

상단 LineChart 및 하단 LModelChart, RModelChart 모두 적용.
XAML과 코드 분리:
