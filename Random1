
import React, { useState } from 'react';
import Simulator from './components/Simulator';
import SequenceDiagrams from './components/SequenceDiagrams';
import SystemDesign from './components/SystemDesign';

// Import the repurposed components with clear aliases
import WiringGuide from './components/PlanA';
import ApiGatewayGuide from './components/PlanB';
import MesGuide from './components/PlanC';
import PiControllerGuide from './components/DeveloperGuide';


type View = 'sequenceDiagrams' | 'simulation' | 'systemDesign' | 'mesGuide' | 'wiringGuide' | 'piControllerGuide' | 'apiGatewayGuide';

// Icon components for sidebar
const SequenceIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M17 12h-5"/><path d="M17 12l-4 4"/><path d="M17 12l-4-4"/><path d="M3 12h5"/><path d="M7 12l4 4"/><path d="M7 12l4-4"/></svg>;
const SimulationIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="9" y1="3" x2="9" y2="21"></line></svg>;
const ArchitectureIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M12 20h9"/><path d="M3 12v8"/><path d="M3 4v.01"/><path d="M12 4h9"/><path d="M3 4h3"/><path d="M3 12h5"/><rect x="16" y="2" width="6" height="6" rx="1"/><rect x="5" y="10" width="6" height="6" rx="1"/><rect x="5" y="18" width="6" height="6" rx="1"/></svg>;
const MesTeamIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;
const ApiServerIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><rect x="2" y="2" width="20" height="8" rx="2" ry="2"></rect><rect x="2" y="14" width="20" height="8" rx="2" ry="2"></rect><line x1="6" y1="6" x2="6.01" y2="6"></line><line x1="6" y1="18" x2="6.01" y2="18"></line></svg>;
const PiIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><path d="M4 11a8 8 0 0 1 16 0v4a8 8 0 0 1-16 0v-4Z"/><path d="M6 11v-4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v4"/><path d="M14 11v-2.5"/><path d="M12.5 6h-1"/><path d="M10 11v-4"/></svg>;
const WiringIcon = () => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="w-5 h-5 mr-3"><rect width="18" height="18" x="3" y="3" rx="2"/><path d="M11 9h4a2 2 0 0 0 2-2V3"/><path d="M11 15h4a2 2 0 0 1 2 2v4"/><path d="M3 11h4a2 2 0 0 1 2 2v4"/><path d="M3 11h4a2 2 0 0 0 2-2V3"/><circle cx="9" cy="9" r="2"/><path d="M7 21v-4a2 2 0 0 1 2-2h4"/><circle cx="15" cy="15" r="2"/><path d="M17 3v4a2 2 0 0 1-2 2h-4"/></svg>;


const App = () => {
  const [activeView, setActiveView] = useState<View>('systemDesign');

  const renderView = () => {
    switch (activeView) {
      case 'sequenceDiagrams':
        return <SequenceDiagrams />;
      case 'simulation':
        return <Simulator />;
      case 'systemDesign':
        return <SystemDesign />;
      case 'mesGuide':
        return <MesGuide />;
      case 'wiringGuide':
        return <WiringGuide />;
      case 'piControllerGuide':
        return <PiControllerGuide />;
      case 'apiGatewayGuide':
        return <ApiGatewayGuide />;
      default:
        return <SystemDesign />;
    }
  };

  const NavButton = ({ view, label, children }: { view: View; label: string; children: React.ReactNode }) => {
    const isActive = activeView === view;
    const baseClasses = 'w-full flex items-center px-3 py-2.5 text-sm font-medium rounded-lg transition-colors duration-200';
    const activeClasses = 'bg-cyan-600 text-white shadow-lg';
    const inactiveClasses = 'text-gray-300 hover:bg-gray-700 hover:text-white';

    return (
      <button onClick={() => setActiveView(view)} className={`${baseClasses} ${isActive ? activeClasses : inactiveClasses}`}>
        {children}
        <span className="truncate">{label}</span>
      </button>
    );
  };

  return (
    <div className="flex h-screen bg-gray-900 text-gray-100">
      {/* Sidebar Navigation */}
      <aside className="w-64 flex-shrink-0 bg-gray-800 p-4 border-r border-gray-700/50 flex flex-col">
        <div className="flex items-center mb-6">
          <svg className="w-8 h-8 text-cyan-400 mr-2" viewBox="0 0 24 24" fill="currentColor"><path d="M12 .5C5.64.5.5 5.64.5 12s5.14 11.5 11.5 11.5S23.5 18.36 23.5 12 .5zM12 21c-4.96 0-9-4.04-9-9s4.04-9 9-9 9 4.04 9 9-4.04 9-9 9zM12 6c-3.31 0-6 2.69-6 6s2.69 6 6 6 6-2.69 6-6-2.69-6-6-6zm0 10c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z"/></svg>
          <h1 className="text-xl font-bold text-white">Locator System</h1>
        </div>
        <nav className="flex-grow space-y-2">
           <NavButton view="systemDesign" label="시스템 아키텍처">
            <ArchitectureIcon />
          </NavButton>
          <NavButton view="sequenceDiagrams" label="시퀀스 다이어그램">
            <SequenceIcon />
          </NavButton>
          <NavButton view="simulation" label="시뮬레이션">
            <SimulationIcon />
          </NavButton>
          
          <div className="pt-4 mt-2 border-t border-gray-700">
            <h2 className="px-3 text-xs font-semibold text-gray-400 uppercase tracking-wider">구현 가이드</h2>
          </div>
          <NavButton view="mesGuide" label="MES 연동 가이드">
            <MesTeamIcon />
          </NavButton>
          <NavButton view="apiGatewayGuide" label="Ubuntu API 서버">
            <ApiServerIcon />
          </NavButton>
          <NavButton view="piControllerGuide" label="Raspberry Pi 제어부">
            <PiIcon />
          </NavButton>
          <NavButton view="wiringGuide" label="하드웨어 결선">
            <WiringIcon />
          </NavButton>

        </nav>
        <footer className="text-center text-xs text-gray-500 mt-4">
          Raspberry Pi Solution
        </footer>
      </aside>

      {/* Main Content */}
      <main className="flex-1 overflow-y-auto p-6 md:p-8">
        <div className={activeView === 'simulation' ? '' : 'max-w-7xl mx-auto'}>
          {renderView()}
        </div>
      </main>
    </div>
  );
};

export default App;
