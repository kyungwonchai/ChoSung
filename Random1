좋습니다. 이제 SignalR을 사용하여 실시간으로 바코드 스캐너의 신호를 받아 갱신하는 기능을 추가해 보겠습니다. 여기서는 SignalR 서버를 설정하고, C# 클라이언트 프로그램에서 서버로부터 데이터를 수신하여 가상 COM 포트로 전달하는 방법을 설명합니다.

SignalR 서버 설정
먼저, SignalR 서버를 설정하여 클라이언트가 데이터를 실시간으로 받을 수 있도록 합니다.

1. ASP.NET Core 프로젝트 생성
Visual Studio에서 새 ASP.NET Core Web Application 프로젝트를 생성합니다.

새 프로젝트 생성:

"ASP.NET Core Web Application"을 선택하고 "Next"를 클릭합니다.
프로젝트 이름과 위치를 지정하고 "Create"를 클릭합니다.
"API" 템플릿을 선택하고 "Create"를 클릭합니다.
SignalR 패키지 추가:

NuGet 패키지 관리자에서 Microsoft.AspNetCore.SignalR 패키지를 설치합니다.
2. SignalR Hub 클래스 생성
Hubs 폴더를 만들고, BarcodeHub.cs 파일을 생성하여 다음 코드를 추가합니다.

csharp
코드 복사
using Microsoft.AspNetCore.SignalR;
using System.Threading.Tasks;

namespace BarcodeScannerServer.Hubs
{
    public class BarcodeHub : Hub
    {
        public async Task SendBarcode(string barcode)
        {
            await Clients.All.SendAsync("ReceiveBarcode", barcode);
        }
    }
}
3. Startup.cs 파일 수정
Startup.cs 파일을 수정하여 SignalR을 설정합니다.

csharp
코드 복사
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using BarcodeScannerServer.Hubs;

namespace BarcodeScannerServer
{
    public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddSignalR();
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseRouting();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
                endpoints.MapHub<BarcodeHub>("/barcodeHub");
            });
        }
    }
}
4. Program.cs 파일 수정
Program.cs 파일을 수정하여 웹 호스트를 설정합니다.

csharp
코드 복사
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Hosting;

namespace BarcodeScannerServer
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
이제 SignalR 서버가 준비되었습니다. 서버를 실행하여 웹 서버가 동작하는지 확인합니다.

C# 클라이언트 작성
이제 C# 클라이언트를 작성하여 SignalR 서버로부터 데이터를 수신하고, 이를 가상 COM 포트로 전달하는 기능을 구현합니다.

1. SignalR 클라이언트 패키지 추가
NuGet 패키지 관리자에서 Microsoft.AspNetCore.SignalR.Client 패키지를 설치합니다.

2. C# 프로그램 코드 작성
아래 코드는 SignalR 클라이언트로부터 데이터를 수신하고, 이를 가상 COM 포트로 전달합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR.Client;

namespace BarcodeScannerClient
{
    class Program
    {
        static SerialPort _outputPort1;
        static SerialPort _outputPort2;
        static HubConnection _connection;

        static async Task Main(string[] args)
        {
            // 출력 포트 설정 (가상 COM 포트)
            _outputPort1 = new SerialPort("COM20", 9600);
            _outputPort2 = new SerialPort("COM21", 9600);
            _outputPort1.Open();
            _outputPort2.Open();

            // SignalR 클라이언트 설정
            _connection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5000/barcodeHub")
                .Build();

            _connection.On<string>("ReceiveBarcode", (barcode) =>
            {
                Console.WriteLine("Received Barcode: " + barcode);
                SendBarcodeData(barcode);
            });

            await _connection.StartAsync();

            Console.WriteLine("Press any key to exit...");
            Console.ReadKey();

            await _connection.StopAsync();
            _outputPort1.Close();
            _outputPort2.Close();
        }

        private static void SendBarcodeData(string data)
        {
            if (_outputPort1.IsOpen)
            {
                _outputPort1.Write(data);
            }
            if (_outputPort2.IsOpen)
            {
                _outputPort2.Write(data);
            }
        }
    }
}
요약
SignalR 서버 설정:

ASP.NET Core Web API 프로젝트를 생성하고 SignalR을 설정합니다.
BarcodeHub 클래스를 작성하여 클라이언트에게 바코드 데이터를 전송합니다.
C# 클라이언트 작성:

SignalR 클라이언트 패키지를 추가합니다.
SignalR 서버로부터 데이터를 수신하고 이를 가상 COM 포트로 전달하는 기능을 구현합니다.
이제 바코드 스캐너 데이터를 SignalR을 통해 실시간으로 받아 가상 COM 포트로 전달하여 프로그램 A와 B가 데이터를 수신할 수 있도록 완성되었습니다.