져와서 테이블로 만드는 방법은 OleDbDataAdapter를 사용하여 데이터를 가져온 후, 테이블의 크기를 조정하는 것입니다. 아래 예제 코드를 참고해보세요:

csharp

using System;
using System.Data;
using System.Data.OleDb;

class Program
{
    static void Main()
    {
        string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=path_to_excel_file;Extended Properties='Excel 12.0;HDR=YES;'";

        using (OleDbConnection connection = new OleDbConnection(connectionString))
        {
            connection.Open();

            // 데이터를 가져올 쿼리 작성
            string query = "SELECT * FROM [마스터$]";

            using (OleDbDataAdapter adapter = new OleDbDataAdapter(query, connection))
            {
                DataTable table = new DataTable();
                adapter.Fill(table);

                // 실제 데이터 영역 범위를 가져오기
                int lastRow = table.Rows.Count - 1;
                int lastColumn = table.Columns.Count - 1;

                // 테이블 크기 조정
                for (int i = table.Columns.Count - 1; i >= 0; i--)
                {
                    if (table.Columns[i].DataType == typeof(string))
                    {
                        bool isEmptyColumn = true;
                        for (int j = 0; j <= lastRow; j++)
                        {
                            if (!string.IsNullOrEmpty(table.Rows[j][i].ToString()))
                            {
                                isEmptyColumn = false;
                                break;
                            }
                        }
                        if (isEmptyColumn)
                        {
                            table.Columns.RemoveAt(i);
                            lastColumn--;
                        }
                        else
                        {
                            break;
                        }
                    }
                }

                for (int i = table.Rows.Count - 1; i >= 0; i--)
                {
                    bool isEmptyRow = true;
                    for (int j = 0; j <= lastColumn; j++)
                    {
                        if (!string.IsNullOrEmpty(table.Rows[i][j].ToString()))
                        {
                            isEmptyRow = false;
                            break;
                        }
                    }
                    if (isEmptyRow)
                    {
                        table.Rows.RemoveAt(i);
                        lastRow--;
                    }
                    else
                    {
                        break;
                    }
                }

                // 테이블 사용 예시: 각 셀 값 출력
                for (int i = 0; i <= lastRow; i++)
                {
                    for (int j = 0; j <= lastColumn; j++)
                    {
                        Console.Write(table.Rows[i][j] + "\t");
                    }
                    Console.WriteLine();
                }
            }
        }
    }
}

위의 예제 코드는 OleDbDataAdapter를 사용하여 데이터를 가져온 후, 가져온 데이터 테이블의 실제 데이터 영역을 계산하고 크기를 조정하는 방법을 보여줍니다. 가져온 데이터 테이블을 사용하여 필요한 작업을 수행하면 됩니다.

예제 코드에서는 데이터 영역을 찾을 때, 비어있는 열과 행을 식별하여 제거하는 방식을 사용하고 있습니다. 이를 통해 실제 데이터가 있는 영역만을 테이블로 가져올 수 있습니다.
User
더 간략한거 없나요 한줄짜리가 왜키길어졋나요
ChatGPT

죄송합니다, 더 간단한 방법은 아래와 같이 Load 메서드를 사용하여 데이터를 직접 로드한 후에 테이블 크기를 조정하는 방법입니다:

csharp

using System;
using System.Data;
using System.Data.OleDb;

class Program
{
    static void Main()
    {
        string connectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=path_to_excel_file;Extended Properties='Excel 12.0;HDR=YES;'";

        using (OleDbConnection connection = new OleDbConnection(connectionString))
        {
            connection.Open();

            string query = "SELECT * FROM [마스터$]";

            using (OleDbCommand command = new OleDbCommand(query, connection))
            {
                using (OleDbDataReader reader = command.ExecuteReader())
                {
                    DataTable table = new DataTable();
                    table.Load(reader);

                    // 테이블 크기 조정
                    table = TrimDataTable(table);

                    // 테이블 사용 예시: 각 셀 값 출력
                    foreach (DataRow row in table.Rows)
                    {
                        foreach (var item in row.ItemArray)
                        {
                            Console.Write(item + "\t");
                        }
                        Console.WriteLine();
                    }
                }
            }
        }
    }

    static DataTable TrimDataTable(DataTable table)
    {
        DataTable trimmedTable = table.Clone();

        // 비어있는 열 제거
        foreach (DataColumn column in table.Columns)
        {
            bool hasValue = false;
            foreach (DataRow row in table.Rows)
            {
                if (!string.IsNullOrEmpty(row[column].ToString()))
                {
                    hasValue = true;
                    break;
                }
            }
            if (hasValue)
            {
                trimmedTable.Columns.Add(column.ColumnName, column.DataType);
            }
        }

        // 비어있는 행 제거
        foreach (DataRow row in table.Rows)
        {
            bool hasValue = false;
            foreach (DataColumn column in table.Columns)
            {
                if (!string.IsNullOrEmpty(row[column].ToString()))
                {
                    hasValue = true;
                    break;
                }
            }
            if (hasValue)
            {
                trimmedTable.ImportRow(row);
            }
        }

        return trimmedTable;
    }
}

위의 코드는 데이터를 직접 로드하여 DataTable로 가져온 후, TrimDataTable 메서드를 사용하여 테이블 크기를 조정하는 방법입니다. TrimDataTable 메서드는 비어있는 열과 행을 제거한 새로운 DataTable을 반환합니다.

간단한 코드를 제공하기 위해 Tr