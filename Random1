F MVVM 패턴에서 SignalR을 통해 값을 보내고, 다른 클래스에서 이벤트로 신호를 주면 MainViewModel에서 SignalR로 값을 보내는 구조를 구현하려면 다음과 같은 코드 구조를 사용할 수 있습니다. 이벤트 기반으로 신호를 받아서 처리하며, 에러 발생 시에도 프로그램이 종료되지 않고 로그를 남기는 기능도 포함됩니다.

1. MainViewModel (SignalR로 값을 보내는 클래스)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR.Client;
using System.ComponentModel;
using System.Runtime.CompilerServices;

public class MainViewModel : INotifyPropertyChanged
{
    private HubConnection _hubConnection;  // SignalR 연결 객체
    private string _logMessage;  // 로그 메시지
    
    public event PropertyChangedEventHandler PropertyChanged;

    public string LogMessage
    {
        get { return _logMessage; }
        set
        {
            _logMessage = value;
            OnPropertyChanged();
        }
    }

    public MainViewModel()
    {
        InitializeSignalRConnection();
        OtherClass.SignalReceived += OnSignalReceived;  // 외부 클래스의 이벤트를 수신
    }

    private async void InitializeSignalRConnection()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5000/myhub")  // SignalR 서버 URL
                .Build();

            await _hubConnection.StartAsync();
            LogMessage = "SignalR Connection Started";  // 연결 성공 로그
        }
        catch (Exception ex)
        {
            LogError(ex.Message);  // 연결 오류 시 로그 기록
        }
    }

    // 외부 클래스에서 이벤트가 발생했을 때 호출되는 함수
    private async void OnSignalReceived(object sender, string message)
    {
        try
        {
            // SignalR로 메시지 전송
            await _hubConnection.InvokeAsync("SendMessage", message);
            LogMessage = $"Message sent: {message}";  // 성공적으로 전송된 경우 로그
        }
        catch (Exception ex)
        {
            LogError(ex.Message);  // 전송 중 오류 발생 시 로그 기록
        }
    }

    // 에러를 로그로 기록하는 함수
    private void LogError(string errorMessage)
    {
        LogMessage = $"Error: {errorMessage}";  // 에러 로그 메시지 기록
        // 프로그램은 에러 발생 시 종료되지 않음
    }

    // PropertyChanged 이벤트 발생 함수
    protected void OnPropertyChanged([CallerMemberName] string name = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
2. OtherClass (신호를 발생시키는 클래스)
csharp
코드 복사
using System;

public class OtherClass
{
    // 신호를 외부로 전달하는 이벤트
    public static event EventHandler<string> SignalReceived;

    // 특정 조건에서 신호를 발생시키는 함수 (예시로 타이머로 신호를 발생시킴)
    public void TriggerSignal()
    {
        string message = "This is a test message";

        // 이벤트 발생, 메인뷰모델에서 수신하여 SignalR로 전송함
        SignalReceived?.Invoke(this, message);
    }
}
3. XAML (UI 부분)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <TextBlock Text="{Binding LogMessage}" VerticalAlignment="Center" HorizontalAlignment="Center" />
    </Grid>
</Window>
4. MainWindow.xaml.cs (뷰모델 설정)
csharp
코드 복사
using System.Windows;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();  // MainViewModel을 DataContext로 설정
    }
}
동작 설명
SignalR 초기화: MainViewModel의 생성자에서 SignalR 서버에 연결을 시도하며, 연결이 성공하면 로그에 성공 메시지를 표시합니다.
이벤트 등록: OtherClass에서 SignalReceived 이벤트를 발생시키면 MainViewModel의 OnSignalReceived 메서드가 호출되어 SignalR을 통해 값을 보냅니다.
에러 처리: SignalR 연결 중에 문제가 발생하거나 메시지 전송 중 오류가 발생하면, LogError 메서드를 통해 에러 메시지를 로그로 남기고 프로그램이 종료되지 않도록 합니다.
UI 업데이트: LogMessage 속성은 UI에 바인딩되어 있어, 로그 메시지가 변경될 때마다 자동으로 UI가 업데이트됩니다.
개선 가능 사항
SignalR 연결 끊김 감지 및 자동 재연결: 필요 시 연결이 끊어졌을 때 자동으로 재연결하는 로직을 추가할 수 있습니다.