아우님, 제대로 찾아오셨습니다. 말씀하신 대로 최신 유니티 허브에서는 UI에 프록시 설정이 보이지 않는 경우가 많습니다. 그럴 때는 설정 파일을 직접 건드리는 '근본'적인 방법을 써야 합니다. 이게 가장 확실하고 강력한 방법입니다.

제가 텍스트 파일을 이용한 프록시 설정 방법을 A to Z로, 그리고 만약을 위한 추가 팁까지 전부 알려드리겠습니다.

핵심 원리: settings.json 파일 직접 수정
유니티 허브는 모든 설정을 settings.json이라는 텍스트 파일에 저장합니다. 우리는 이 파일을 직접 열어서 프록시 정보를 코드로 넣어줄 겁니다.

1단계: 유니티 허브 완전 종료 (🚨가장 중요🚨)
설정 파일을 수정하기 전, 유니티 허브가 완전히 꺼져 있어야 합니다. 창을 닫는 것만으로는 부족합니다. 백그라운드에서 계속 실행되고 있으면 우리가 수정한 내용이 저장되지 않고 원래대로 돌아가 버립니다.

Windows: 작업 표시줄 오른쪽 아래 시스템 트레이에서 유니티 허브 아이콘을 찾아 마우스 오른쪽 클릭 후 **'Quit Unity Hub'**를 선택하세요. 만약 보이지 않으면 작업 관리자(Ctrl+Shift+Esc)를 열어 Unity Hub.exe 프로세스를 완전히 종료시키세요.

macOS: 메뉴 막대에서 유니티 허브 아이콘을 클릭하고 **'Quit Unity Hub'**를 선택하세요.

2단계: settings.json 설정 파일 찾기
설정 파일은 아래 경로에 숨겨져 있습니다.

Windows: C:\Users\[사용자이름]\AppData\Roaming\UnityHub

폴더 쉽게 찾아가는 꿀팁: 파일 탐색기 주소창에 %APPDATA%\UnityHub 라고 입력하고 엔터를 치면 바로 이동합니다.

macOS: ~/Library/Application Support/UnityHub

폴더 쉽게 찾아가는 꿀팁: Finder를 열고 상단 메뉴에서 **이동(Go) > 폴더로 이동...(Go to Folder...)**을 선택한 뒤 ~/Library/Application Support/UnityHub 를 붙여넣고 엔터를 치세요.

해당 폴더 안에 settings.json 파일이 있는지 확인합니다.

파일이 있는 경우: 메모장, VS Code, Sublime Text 같은 텍스트 편집기로 파일을 엽니다.

파일이 없는 경우 (처음 설치 등): 걱정하지 마세요. 직접 settings.json 이라는 이름으로 새 텍스트 파일을 만들어주면 됩니다.

3단계: settings.json 파일에 프록시 정보 추가
이제 파일을 열고 프록시 정보를 추가할 차례입니다. IT팀에서 받은 프록시 서버 주소, 포트, 그리고 필요하다면 계정 정보를 준비하세요.

Case 1: 프록시 서버에 아이디/비밀번호가 없는 경우 (일반적)
IT팀에서 http://proxy.mycompany.com:8080 같은 주소만 받았다면 아래와 같이 추가합니다.

JSON

{
  "proxy": {
    "url": "http://프록시서버주소:포트번호"
  }
}
예시:

JSON

{
  "proxy": {
    "url": "http://proxy.mycompany.com:8080"
  }
}
만약 파일에 이미 다른 내용이 있다면?
기존 내용 끝에 쉼표(,)를 꼭 추가하고 proxy 블록을 넣어주세요. JSON 문법에서 쉼표는 매우 중요합니다!

기존 파일 예시:

JSON

{
  "some_other_setting": "value"
}
수정 후 예시:

JSON

{
  "some_other_setting": "value",
  "proxy": {
    "url": "http://proxy.mycompany.com:8080"
  }
}
Case 2: 프록시 서버에 아이디/비밀번호가 필요한 경우
계정 정보(your_id, your_password)까지 받았다면 username과 password를 추가합니다.

JSON

{
  "proxy": {
    "url": "http://프록시서버주소:포트번호",
    "username": "프록시서버_아이디",
    "password": "프록시서버_비밀번호"
  }
}
예시:

JSON

{
  "proxy": {
    "url": "http://proxy.mycompany.com:8080",
    "username": "unity_user",
    "password": "secure_password123"
  }
}
4단계: 저장 및 유니티 허브 재시작
파일을 수정한 뒤 반드시 저장하고, 유니티 허브를 다시 실행합니다. 이제 유니티 허브는 우리가 settings.json에 명시한 프록시 서버를 통해 인터넷 통신을 시도할 것입니다.

로그인, 에디터 다운로드, 패키지 매니저 접속 등이 정상적으로 되는지 확인합니다.

만약의 상황을 위한 '플랜 B': 환경 변수(Environment Variables) 설정
위 방법으로도 해결되지 않는 아주 드문 경우, 혹은 더 강력한 설정을 원한다면 시스템의 **'환경 변수'**를 이용하는 방법도 있습니다. 많은 프로그램들이 이 환경 변수 설정을 우선적으로 따릅니다.

Windows:

Win + S 키를 눌러 '시스템 환경 변수 편집'을 검색하고 실행합니다.

'환경 변수...' 버튼을 클릭합니다.

'사용자 변수' 또는 '시스템 변수' 섹션에서 '새로 만들기...'를 클릭합니다. (시스템 변수로 만들면 모든 사용자에게 적용됩니다.)

아래 두 변수를 각각 추가합니다.

변수 이름: HTTP_PROXY

변수 값: http://프록시서버주소:포트번호 (계정이 있다면 http://아이디:비밀번호@프록시서버주소:포트번호)

변수 이름: HTTPS_PROXY

변수 값: http://프록시서버주소:포트번호 (계정이 있다면 http://아이디:비밀번호@프록시서버주소:포트번호)

NO_PROXY 변수를 추가하면 특정 주소는 프록시를 타지 않게 할 수 있습니다. (예: localhost,127.0.0.1,mycompany.internal)

확인을 눌러 모든 창을 닫고 PC를 재부팅합니다.

macOS:

터미널을 엽니다.

사용하는 쉘의 설정 파일(~/.zshrc, ~/.bash_profile 등)을 엽니다. (예: nano ~/.zshrc)

파일 맨 아래에 아래 내용을 추가합니다.

Shell

export HTTP_PROXY="http://프록시서버주소:포트번호"
export HTTPS_PROXY="http://프록시서버주소:포트번호"
# 계정이 있다면 아래와 같이
# export HTTP_PROXY="http://아이디:비밀번호@프록시서버주소:포트번호"
# export HTTPS_PROXY="http://아이디:비밀번호@프록시서버주소:포트번호"

export NO_PROXY="localhost,127.0.0.1,*.mycompany.internal"
파일을 저장하고 터미널을 재시작하거나 source ~/.zshrc 명령어를 실행합니다.

중요: settings.json 파일 설정과 환경 변수 설정 중 하나만 사용하는 것을 권장합니다. 충돌이 발생할 수 있습니다. settings.json 방법이 유니티 허브에만 국한되므로 더 안전할 수 있습니다.

최종 체크리스트
유니티 허브 완전 종료했는가? (가장 중요)

settings.json 파일의 경로가 정확한가?

JSON 문법이 올바른가? (큰따옴표 "", 쉼표 , 등)

IT팀에서 받은 프록시 정보가 정확한가? (오타 확인)

(환경 변수 사용 시) PC 재부팅을 했는가?

이전 대화에서 말씀드린 보안 인증서 설치는 완료되었는가? (프록시와 별개의 문제일 수 있음)