ensure that the random value is selected excluding the ABC index value, the function GetRandomValue already filters out the value at excludeIndex. Here’s a refined version of the function that ensures correctness:

Updated GetRandomValue Method
csharp
Copy code
static string GetRandomValue(string barcodeString, int excludeIndex, Random rand)
{
    string[] values = barcodeString.Split(',');
    
    // Ensure there are other values to pick from
    List<string> filteredValues = values
        .Where((v, i) => i != excludeIndex) // Exclude the ABC index value
        .ToList();
    
    return filteredValues.Count > 0 ? filteredValues[rand.Next(filteredValues.Count)] : "N/A";
}
Key Fixes
Excludes the excludeIndex value when selecting a random value.
Checks if there are valid values left (prevents exceptions if all values are filtered).
Selects a random value from the remaining list.
Full Updated Code
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;

class Program
{
    static void Main()
    {
        string connectionString = "Server=YOUR_SERVER;Database=YOUR_DB;User Id=YOUR_USER;Password=YOUR_PASSWORD;";
        string storedProcedureName = "YOUR_PROCEDURE"; // Stored Procedure Name
        string abcValue = "ABC_SAMPLE"; // Example ABC value

        // Fetch data from stored procedure
        DataTable dt = GetDataFromProcedure(connectionString, storedProcedureName, abcValue);

        // Validate row count
        if (dt.Rows.Count != 3)
        {
            Console.WriteLine("Row count is not 3. Exiting.");
            return;
        }

        // Validate first column consistency
        string firstColumnValue = dt.Rows[0]["SZMODELNAME"].ToString();
        if (!dt.AsEnumerable().All(row => row["SZMODELNAME"].ToString() == firstColumnValue))
        {
            Console.WriteLine("First column values do not match. Exiting.");
            return;
        }

        // Find ABC's position in the second row's SZBARCODE values
        string[] barcodeValues = dt.Rows[1]["SZBARCODE"].ToString().Split(',');
        int index = Array.IndexOf(barcodeValues, abcValue);
        if (index == -1)
        {
            Console.WriteLine("ABC value not found in SZBARCODE. Exiting.");
            return;
        }

        // Select random values from row 0 and row 2, excluding ABC index
        Random rand = new Random();
        string randomValueFromRow0 = GetRandomValue(dt.Rows[0]["SZBARCODE"].ToString(), index, rand);
        string randomValueFromRow2 = GetRandomValue(dt.Rows[2]["SZBARCODE"].ToString(), index, rand);

        // Output results
        Console.WriteLine($"Row 0 Random Value (excluding ABC index): {randomValueFromRow0}");
        Console.WriteLine($"Row 2 Random Value (excluding ABC index): {randomValueFromRow2}");
    }

    static DataTable GetDataFromProcedure(string connectionString, string storedProcedureName, string abcValue)
    {
        DataTable dt = new DataTable();
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            using (SqlCommand cmd = new SqlCommand(storedProcedureName, conn))
            {
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add(new SqlParameter("@ABC", abcValue)); // Passing ABC parameter

                SqlDataAdapter da = new SqlDataAdapter(cmd);
                da.Fill(dt);
            }
        }
        return dt;
    }

    static string GetRandomValue(string barcodeString, int excludeIndex, Random rand)
    {
        string[] values = barcodeString.Split(',');

        // Ensure there are valid values available after filtering
        List<string> filteredValues = values
            .Where((v, i) => i != excludeIndex) // Exclude ABC index value
            .ToList();

        return filteredValues.Count > 0 ? filteredValues[rand.Next(filteredValues.Count)] : "N/A";
    }
}
Changes & Fixes
✔ Ensures excludeIndex is properly excluded from random selection.
✔ Prevents selection from an empty list (if no valid values exist, it returns "N/A").
✔ More readable logging for easier debugging.