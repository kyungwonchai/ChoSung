래는 FileProcessor 클래스에 상세한 주석을 포함한 코드입니다. 이 클래스는 파일을 감지하고, 새로운 파일이 감지되면 LogEntry 객체로 변환하여 MainViewModel로 전달하는 역할을 합니다.

FileProcessor.cs (상세 주석 포함)
csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;

/// <summary>
/// FileProcessor는 지정된 경로에서 파일을 감지하고, 새로운 파일이 생성될 때 이를 처리하여 LogEntry를 반환하는 클래스입니다.
/// 이 클래스는 파일을 읽고 파싱하여 작업 큐에 전달할 수 있는 데이터 모델로 변환합니다.
/// </summary>
public class FileProcessor
{
    private readonly string _path; // 감시할 폴더 경로
    private readonly Action<LogEntry> _onLogEntryDetected; // 로그 엔트리 감지 시 호출할 델리게이트
    private FileSystemWatcher _watcher; // 파일 시스템 감시자

    /// <summary>
    /// FileProcessor 생성자.
    /// 파일 감시 경로와, 파일이 감지되었을 때 실행할 콜백을 인자로 받습니다.
    /// </summary>
    /// <param name="path">감시할 폴더 경로</param>
    /// <param name="_onLogEntryDetected">새로운 파일이 감지되었을 때 처리할 콜백 메서드</param>
    public FileProcessor(string path, Action<LogEntry> onLogEntryDetected)
    {
        _path = path; // 경로 저장
        _onLogEntryDetected = onLogEntryDetected; // 로그 엔트리 감지 델리게이트 설정
    }

    /// <summary>
    /// 파일 감지를 시작하는 메서드.
    /// 지정된 경로에서 새로운 파일이 생성되면 해당 파일을 처리할 준비를 합니다.
    /// </summary>
    public void StartProcessing()
    {
        // FileSystemWatcher를 초기화하여 폴더 경로 및 감시할 파일 확장자 지정
        _watcher = new FileSystemWatcher(_path, "*.txt");
        _watcher.Created += OnFileCreated; // 새로운 파일이 생성되었을 때 발생하는 이벤트 연결
        _watcher.EnableRaisingEvents = true; // 감시 시작
    }

    /// <summary>
    /// 파일이 생성되었을 때 호출되는 메서드.
    /// 생성된 파일을 처리하기 위해 ParseLogFile을 호출합니다.
    /// </summary>
    /// <param name="sender">이벤트 소스 (FileSystemWatcher)</param>
    /// <param name="e">파일 이벤트 인자 (파일 경로 포함)</param>
    private void OnFileCreated(object sender, FileSystemEventArgs e)
    {
        Task.Delay(1000).Wait(); // 파일 안정성 확보를 위해 1초 지연 (파일이 완전히 쓰여질 때까지 대기)

        var logEntry = ParseLogFile(e.FullPath); // 생성된 파일을 파싱하여 LogEntry 객체 생성
        _onLogEntryDetected?.Invoke(logEntry); // LogEntry가 생성되면 델리게이트 호출하여 MainViewModel에 전달
    }

    /// <summary>
    /// 파일 내용을 파싱하여 LogEntry 객체로 변환하는 메서드.
    /// 파일 내의 항목들을 분석하고, 각 필드를 LogEntry로 변환합니다.
    /// </summary>
    /// <param name="filePath">파일 경로</param>
    /// <returns>LogEntry 객체</returns>
    private LogEntry ParseLogFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath); // 파일의 모든 줄을 읽음
        return new LogEntry
        {
            MAG_NO = ExtractData(lines, "MAG_NO"), // MAG_NO 필드 추출
            MAG_QTY = int.Parse(ExtractData(lines, "MAG_QTY")), // MAG_QTY 필드 추출 및 정수로 변환
            BASIC_MODEL = ExtractData(lines, "BASIC_MODEL"), // BASIC_MODEL 필드 추출
            MODEL_CODE = ExtractData(lines, "MODEL_CODE"), // MODEL_CODE 필드 추출
            PO_NO = ExtractData(lines, "PO_NO"), // PO_NO 필드 추출
            PO_PLAN_QTY = int.Parse(ExtractData(lines, "PO_PLAN_QTY")), // PO_PLAN_QTY 필드 추출 및 정수로 변환
            PO_PROD_QTY = int.Parse(ExtractData(lines, "PO_PROD_QTY")), // PO_PROD_QTY 필드 추출 및 정수로 변환
            SequenceFlag = DetermineSequenceFlag(lines) // 파일 내용을 기반으로 시퀀스 플래그 결정
        };
    }

    /// <summary>
    /// 파일의 각 줄에서 특정 키에 해당하는 값을 추출하는 메서드.
    /// 각 줄은 "키=값" 형식으로 되어 있으며, '=' 이후의 값을 반환합니다.
    /// </summary>
    /// <param name="lines">파일의 모든 줄</param>
    /// <param name="key">찾고자 하는 키</param>
    /// <returns>키에 해당하는 값</returns>
    private string ExtractData(string[] lines, string key)
    {
        // 각 줄을 순회하여 키와 일치하는 줄에서 값을 추출
        foreach (var line in lines)
        {
            if (line.StartsWith(key)) // 키가 일치하면
            {
                return line.Split('=')[1].Trim(); // '=' 기호로 분리하여 값을 반환
            }
        }
        return string.Empty; // 해당 키가 없으면 빈 문자열 반환
    }

    /// <summary>
    /// 파일 내용을 기반으로 시퀀스 플래그를 결정하는 메서드.
    /// 시퀀스 플래그는 작업의 시작, 중간, 끝을 의미합니다.
    /// PO_PROD_QTY와 MAG_QTY, PO_PLAN_QTY에 따라 결정됩니다.
    /// </summary>
    /// <param name="lines">파일의 모든 줄</param>
    /// <returns>시퀀스 플래그 (1: 시작, 2: 중간, 3: 끝)</returns>
    private int DetermineSequenceFlag(string[] lines)
    {
        // 파일에서 PO_PROD_QTY와 PO_PLAN_QTY 값을 추출
        int poProdQty = int.Parse(ExtractData(lines, "PO_PROD_QTY"));
        int poPlanQty = int.Parse(ExtractData(lines, "PO_PLAN_QTY"));
        int magQty = int.Parse(ExtractData(lines, "MAG_QTY")); // 현재 MAG_QTY 추출

        // MAG_QTY와 PO_PROD_QTY가 같으면 처음 작업 (1)
        if (poProdQty == magQty)
        {
            return 1; // 시작 작업
        }
        // PO_PROD_QTY가 PO_PLAN_QTY와 같으면 마지막 작업 (3)
        else if (poProdQty >= poPlanQty)
        {
            return 3; // 마지막 작업
        }
        // 그 외는 중간 작업 (2)
        else
        {
            return 2; // 중간 작업
        }
    }
}
상세 설명
StartProcessing(): 지정된 폴더 경로에서 .txt 파일을 감시하고, 새로운 파일이 생성될 때마다 이벤트를 발생시킵니다.

OnFileCreated(): 새로운 파일이 생성되면 1초 지연을 두어 파일이 완전히 쓰여진 후 처리되도록 하고, 파일 내용을 파싱하여 LogEntry로 변환한 후 콜백 메서드를 호출합니다.

ParseLogFile(): 파일을 읽고, 각 줄을 키-값 구조로 파싱한 후 MAG_NO, MAG_QTY 등 파일 내용을 기반으로 LogEntry 객체를 반환합니다.

ExtractData(): 파일의 각 줄에서 특정 키에 해당하는 값을 추출하여 반환합니다. 이는 "키=값" 형식의 데이터에서 값을 가져오는 메서드입니다.

DetermineSequenceFlag(): PO_PROD_QTY, PO_PLAN_QTY, MAG_QTY를 기반으로 시작(1), 중간(2), 끝(3) 작업인지 시퀀스 플래그를 결정합니다.

MAG_QTY와 PO_PROD_QTY가 같으면 시작 작업 (1).
PO_PROD_QTY가 PO_PLAN_QTY와 같으면 마지막 작업 (3).
그 외에는 **중간 작업(2)**로 간주됩니다.
이렇게 하면 파일 감지부터 파일 내용 파싱 및 시퀀스 플래그 결정까지 모든 로직이 명확해졌습니다. 추가적으로 수정이 필요하면