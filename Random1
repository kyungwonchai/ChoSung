using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";
        private static readonly string systemId = "시스템 아이디";
        private static readonly string accessToken = "토큰 값";

        public static async Task<(string, string)> SendMail(string userId, string subject, string contents, string senderEmailAddress, List<string> recipientEmailAddresses)
        {
            if (string.IsNullOrEmpty(subject) || string.IsNullOrEmpty(contents))
            {
                Console.WriteLine("Some required values are missing. Please provide both subject and contents.");
                return (null, null);
            }

            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var requestData = new
            {
                subject,
                contents,
                sender = new
                {
                    emailAddress = senderEmailAddress,
                    recipientType = "TO"
                },
                recipients = recipientEmailAddresses.ConvertAll(emailAddress => new
                {
                    emailAddress,
                    recipientType = "TO"
                })
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);
            var content = new StringContent(jsonPayload);
            content.Headers.ContentType = new MediaTypeHeaderValue("application/json");

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var response = await client.PostAsync(requestUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;
                string sendResult = result.result;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");
                Console.WriteLine($"전송 결과: {sendResult}");

                return (mailId, sendResult);
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string errorCode = result.errorCode;
                string errorMessage = result.errorMessage;

                Console.WriteLine("메일 발송에 실패하였습니다.");
                Console.WriteLine($"에러 코드: {errorCode}");
                Console.WriteLine($"에러 메시지: {errorMessage}");

                return (null, null);
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;
        private string sendResult;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string userId = "사용자 ID";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "보내는 이메일 주소";
            List<string> recipientEmailAddresses = new List<string> { "받는 이메일 주소1", "받는 이메일 주소2" };

            (mailId, sendResult) = await MailSender.SendMail(userId, subject, contents, senderEmailAddress, recipientEmailAddresses);
        }
    }
}
