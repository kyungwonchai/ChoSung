송합니다. 설정 파일을 지정된 경로에 자동으로 생성하고, 설정 파일이 존재하지 않으면 자동으로 생성하도록 수정하겠습니다. 또한, 발생하는 오류를 처리하여 프로그램이 종료되지 않도록 하겠습니다.

수정된 C# 코드
1. MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Configuration;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _scannerPort; // 스캐너가 연결된 시리얼 포트 객체
        private SerialPort[] _targetPorts = new SerialPort[5]; // 데이터를 전송할 최대 5개의 포트
        private const int MaxLogCount = 100; // 로그 표시의 최대 개수
        private const string SettingsFilePath = @"C:\agent\scanvaluetran\settings.config"; // 설정 파일 경로
        private Configuration config;

        public MainWindow()
        {
            InitializeComponent();
            try
            {
                EnsureSettingsFileExists(); // 설정 파일이 존재하지 않으면 생성
                LoadConfiguration(); // 설정 파일을 불러옴
                LoadLastUsedPorts(); // 마지막으로 사용된 포트 설정 불러오기
                RefreshPorts(); // 포트 목록 갱신
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
                MessageBox.Show($"프로그램 초기화 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void EnsureSettingsFileExists()
        {
            try
            {
                // 설정 파일이 있는 디렉토리가 없으면 생성
                string directory = Path.GetDirectoryName(SettingsFilePath);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // 설정 파일이 없으면 생성
                if (!File.Exists(SettingsFilePath))
                {
                    var configFileMap = new ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                    Configuration config = ConfigurationManager.OpenMappedExeConfiguration(configFileMap, ConfigurationUserLevel.None);

                    config.Save(ConfigurationSaveMode.Full);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 생성 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 생성 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadConfiguration()
        {
            try
            {
                var configFileMap = new ExeConfigurationFileMap { ExeConfigFilename = SettingsFilePath };
                config = ConfigurationManager.OpenMappedExeConfiguration(configFileMap, ConfigurationUserLevel.None);
            }
            catch (Exception ex)
            {
                LogMessage($"설정 파일 불러오기 중 오류 발생: {ex.Message}");
                MessageBox.Show($"설정 파일 불러오기 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void LoadLastUsedPorts()
        {
            // 스캐너 포트 불러오기
            string lastUsedScannerPort = GetSetting("LastUsedScannerPort");
            if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
            {
                ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                OpenPort(ref _scannerPort, lastUsedScannerPort, ScannerPortComboBox);
            }
            else
            {
                LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
            }

            // 보낼 포트 불러오기 (최대 5개)
            for (int i = 0; i < _targetPorts.Length; i++)
            {
                string key = $"LastUsedTargetPort{i + 1}";
                string lastUsedTargetPort = GetSetting(key);
                ComboBox targetComboBox = GetTargetPortComboBox(i);

                if (!string.IsNullOrEmpty(lastUsedTargetPort) && SerialPort.GetPortNames().Contains(lastUsedTargetPort))
                {
                    targetComboBox.SelectedItem = lastUsedTargetPort;
                    OpenPort(ref _targetPorts[i], lastUsedTargetPort, targetComboBox);
                }
                else
                {
                    LogMessage($"마지막으로 사용한 보낼 포트 {i + 1}를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }
            }
        }

        private string GetSetting(string key)
        {
            if (config.AppSettings.Settings[key] == null)
            {
                config.AppSettings.Settings.Add(key, string.Empty);
                config.Save(ConfigurationSaveMode.Modified);
            }
            return config.AppSettings.Settings[key].Value;
        }

        private void SaveSetting(string key, string value)
        {
            if (config.AppSettings.Settings[key] != null)
            {
                config.AppSettings.Settings[key].Value = value;
            }
            else
            {
                config.AppSettings.Settings.Add(key, value);
            }
            config.Save(ConfigurationSaveMode.Modified);
        }

        private void RefreshPorts()
        {
            try
            {
                // 현재 사용 가능한 COM 포트 목록을 모든 ComboBox에 업데이트
                var portNames = SerialPort.GetPortNames();
                ScannerPortComboBox.ItemsSource = portNames;
                TargetPortComboBox1.ItemsSource = portNames;
                TargetPortComboBox2.ItemsSource = portNames;
                TargetPortComboBox3.ItemsSource = portNames;
                TargetPortComboBox4.ItemsSource = portNames;
                TargetPortComboBox5.ItemsSource = portNames;

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
                MessageBox.Show($"포트 목록 갱신 중 오류가 발생했습니다: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenPort(ref SerialPort serialPort, string portName, ComboBox comboBox)
        {
            try
            {
                // 이미 포트가 열려 있는 경우 닫고 새 포트를 엽니다.
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                }

                // 선택된 포트로 시리얼 포트를 설정하고 엽니다.
                serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
                serialPort.Open();
                comboBox.Foreground = Brushes.Blue; // 정상적으로 열렸을 때 파란색 표시
                LogMessage($"포트 {portName}가 열렸습니다.");

                // 포트가 스캐너 포트인지 확인하고, 해당 키로 저장
                if (comboBox == ScannerPortComboBox)
                {
                    SaveSetting("LastUsedScannerPort", portName);
                }
                else
                {
                    int index = GetTargetPortComboBoxIndex(comboBox);
                    SaveSetting($"LastUsedTargetPort{index + 1}", portName);
                }
            }
            catch (Exception ex)
            {
                comboBox.Foreground = Brushes.Red; // 포트를 열지 못했을 때 빨간색 표시
                LogMessage($"포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ClosePort(ref SerialPort serialPort, ComboBox comboBox)
        {
            try
            {
                if (serialPort != null && serialPort.IsOpen)
                {
                    serialPort.Close();
                    comboBox.Foreground = Brushes.Red; // 포트가 닫혔을 때 빨간색 표시
                    LogMessage($"포트 {serialPort.PortName}가 닫혔습니다.");
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트를 닫는 중 오류가 발생했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (ScannerPortComboBox.SelectedItem != null)
            {
                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                OpenPort(ref _scannerPort, selectedPort, ScannerPortComboBox);
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            ComboBox comboBox = (ComboBox)sender;
            int index = GetTargetPortComboBoxIndex(comboBox);

            if (comboBox.SelectedItem != null)
            {
                string selectedPort = comboBox.SelectedItem.ToString();
                OpenPort(ref _targetPorts[index], selectedPort, comboBox);
            }
        }

        private int GetTargetPortComboBoxIndex(ComboBox comboBox)
        {
            // 각 ComboBox에 대해 인덱스를 반환
            if (comboBox == TargetPortComboBox1) return 0;
            if (comboBox == TargetPortComboBox2) return 1;
            if (comboBox == TargetPortComboBox3) return 2;
            if (comboBox == TargetPortComboBox4) return 3;
            if (comboBox == TargetPortComboBox5) return 4;
            return -1;
        }

        private ComboBox GetTargetPortComboBox(int index)
        {
            // 인덱스에 따라 ComboBox를 반환
            switch (index)
            {
                case 0: return TargetPortComboBox1;
                case 1: return TargetPortComboBox2;
                case 2: return TargetPortComboBox3;
                case 3: return TargetPortComboBox4;
                case 4: return TargetPortComboBox5;
                default: return null;
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_scannerPort != null && _scannerPort.IsOpen)
            {
                try
                {
                    string data = DataTextBox.Text;
                    _scannerPort.WriteLine(data); // 데이터를 스캐너 포트로 전송
                    LogMessage($"스캐너 포트로 데이터 전송: {data}");

                    // 특정 조건이 충족되면 데이터를 다른 포트로 전달
                    for (int i = 0; i < _targetPorts.Length; i++)
                    {
                        if (_targetPorts[i] != null && _targetPorts[i].IsOpen && ShouldForwardData(data))
                        {
                            _targetPorts[i].WriteLine(data);
                            LogMessage($"데이터가 {_targetPorts[i].PortName}로 전달되었습니다: {data}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"데이터 전송 실패: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    LogMessage($"데이터 전송 실패: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("스캐너 포트가 열려 있지 않습니다. 먼저 스캐너 포트를 여세요.", "경고", MessageBoxButton.OK, MessageBoxImage.Warning);
                LogMessage("데이터 전송 실패: 스캐너 포트가 열려 있지 않습니다.");
            }
        }

        private bool ShouldForwardData(string data)
        {
            // 예시 조건: 데이터에 "FORWARD"가 포함된 경우에만 다른 포트로 전송
            // 이 조건을 필요에 따라 수정 가능
            return data.Contains("FORWARD");
        }

        private void LogMessage(string message)
        {
            // 현재 시간을 로그에 추가
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            LogListBox.Items.Add($"{timestamp} - {message}");

            // 로그의 개수가 최대치를 넘으면 첫 번째 로그를 삭제
            if (LogListBox.Items.Count > MaxLogCount)
            {
                LogListBox.Items.RemoveAt(0);
            }
        }
    }
}
2. 주요 변경 사항
설정 파일 생성 및 관리:

설정 파일 경로는 C:\agent\scanvaluetran\settings.config로 지정되어 있으며, 존재하지 않으면 자동으로 생성됩니다.
EnsureSettingsFileExists 함수가 설정 파일과 필요한 디렉토리를 생성합니다.
설정 읽기 및 쓰기:

LoadConfiguration 함수에서 설정 파일을 불러오며, 설정 값이 없는 경우 GetSetting 함수가 이를 초기화하고, 필요한 설정을 추가합니다.
SaveSetting 함수는 설정 값을 저장합니다.
포트 관리:

포트 선택 시, 해당 포트가 자동으로 열리거나 닫히며, 상태에 따라 텍스트 색상이 변경됩니다 (파란색은 정상, 빨간색은 오류).
이전에 사용한 포트 설정이 자동으로 로드되고, 이후 변경 사항이 저장됩니다.
에러 처리:

각 단계에서 발생할 수 있는 오류를 처리하여 프로그램이 종료되지 않도록 설계되었습니다.
오류가 발생할 경우, 사용자에게 메시지를 표시하고 로그에 기록됩니다.
3. 사용 방법
포트 선택 및 연결: 스캐너 포트와 보낼 포트를 각각 선택하면 자동으로 연결됩니다. 포트가 정상적으로 열렸는지 확인하기 위해 콤보박스의 텍스트 색상을 확인합니다.
데이터 전송: DataTextBox에 데이터를 입력하고 "Send Data" 버튼을 클릭하면, 선택된 스캐너 포트로 데이터가 전송됩니다. 특정 조건이 만족되면 다른 포트로도 데이터가 전달됩니다.
로그 확인: 모든 동작 및 에러는 ListBox에 기록되므로, 프로그램의 상태를 쉽게 모니터링할 수 있습니다.
이 코드가 요청하신 기능을 충실히 구현할 수 있기를 바랍니다. 추가적인 기능 요청이나 질문이 있으면 언제든지 말씀해 주세