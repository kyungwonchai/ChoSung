using System;
using System.IO;
using System.Windows.Forms;
using DevExpress.XtraTreeList;
using DevExpress.XtraTreeList.Nodes;
using DevExpress.Utils;

namespace FolderExplorer
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
            treeList.CustomDrawNodeCell += treeList_CustomDrawNodeCell;
            listView.DrawColumnHeader += listView_DrawColumnHeader;
            listView.DrawItem += listView_DrawItem;
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            PopulateTreeList("C:\\back1", null);
        }

        private void PopulateTreeList(string directory, TreeListNode parentNode)
        {
            DirectoryInfo directoryInfo = new DirectoryInfo(directory);
            TreeListNode node = treeList.AppendNode(new object[] { directoryInfo.Name }, parentNode);

            foreach (DirectoryInfo dir in directoryInfo.GetDirectories())
            {
                PopulateTreeList(dir.FullName, node);
            }
        }

        private void treeList_FocusedNodeChanged(object sender, DevExpress.XtraTreeList.FocusedNodeChangedEventArgs e)
        {
            string selectedPath = e.Node.GetDisplayText(0);
            listView.Items.Clear();

            DirectoryInfo directoryInfo = new DirectoryInfo(selectedPath);

            foreach (DirectoryInfo dir in directoryInfo.GetDirectories())
            {
                ListViewItem item = new ListViewItem(dir.Name, 0);
                item.SubItems.Add("Folder");
                listView.Items.Add(item);
            }

            foreach (FileInfo file in directoryInfo.GetFiles())
            {
                ListViewItem item = new ListViewItem(file.Name, 1);
                item.SubItems.Add("File");
                listView.Items.Add(item);
            }
        }

        private void treeList_CustomDrawNodeCell(object sender, DevExpress.XtraTreeList.CustomDrawNodeCellEventArgs e)
        {
            if (e.Node == treeList.FocusedNode)
            {
                e.Appearance.BackColor = SystemColors.Highlight;
                e.Appearance.ForeColor = SystemColors.HighlightText;
            }
            else if ((e.State & ObjectState.Selected) == ObjectState.Selected)
            {
                e.Appearance.BackColor = SystemColors.Control;
                e.Appearance.ForeColor = SystemColors.ControlText;
            }
        }

        private void listView_DrawColumnHeader(object sender, DrawListViewColumnHeaderEventArgs e)
        {
            e.DrawDefault = true;
        }

        private void listView_DrawItem(object sender, DrawListViewItemEventArgs e)
        {
            e.DrawDefault = true;
        }
    }
}
