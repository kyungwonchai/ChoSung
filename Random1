핸들러에서 드래그 도중 임시로 순서를 업데이트하고, 드래그가 완료된 후 데이터베이스에 반영하는 방식으로 구현하겠습니다. 여기서는 드래그가 끝나는 시점을 감지하여 그때만 데이터베이스 업데이트를 수행하도록 합니다.

수정된 OnDragRecordOver - 단일 이벤트 핸들러에서 순서 처리
아래는 OnDragRecordOver 한 개의 핸들러에서 드래그와 데이터베이스 반영을 처리하는 코드입니다.

csharp
코드 복사
private bool isDragging = false;

private void OnDragRecordOver(object sender, DevExpress.Xpf.Grid.DragRecordOverEventArgs e)
{
    // 드래그가 시작되었음을 표시
    if (!isDragging)
    {
        isDragging = true;
    }

    // 드래그 중인 항목과 타겟 항목 가져오기
    var draggedTask = e.SourceRow as TaskModel;
    var targetTask = e.TargetRow as TaskModel;

    if (draggedTask != null && targetTask != null && draggedTask != targetTask)
    {
        // 현재 GridControl의 데이터 소스 가져오기
        var tasks = (ObservableCollection<TaskModel>)taskGrid.ItemsSource;

        // 드래그된 항목을 새로운 위치로 이동
        int oldIndex = tasks.IndexOf(draggedTask);
        int newIndex = tasks.IndexOf(targetTask);

        if (oldIndex != newIndex)
        {
            tasks.Move(oldIndex, newIndex);

            // 각 TaskModel의 Priority를 업데이트하여 UI에 반영
            UpdateTaskPriorities(tasks);

            // 드래그가 완료되었을 때만 데이터베이스에 업데이트 (여기서 드래그 완료 시점 감지)
            if (e.Action == DevExpress.Xpf.Grid.DragDropActions.Drop)
            {
                UpdateDatabaseWithNewOrder(tasks);
                isDragging = false; // 드래그 상태 초기화
            }
        }
    }
}

// 순서 업데이트 함수
private void UpdateTaskPriorities(ObservableCollection<TaskModel> tasks)
{
    for (int i = 0; i < tasks.Count; i++)
    {
        tasks[i].Priority = i + 1;  // 새로운 순서 반영
    }
}

// 데이터베이스 업데이트 메서드
private void UpdateDatabaseWithNewOrder(ObservableCollection<TaskModel> tasks)
{
    using (var connection = new SqlConnection("your_connection_string"))
    {
        connection.Open();
        foreach (var task in tasks)
        {
            var command = new SqlCommand("UPDATE Tasks SET Priority = @Priority WHERE Id = @Id", connection);
            command.Parameters.AddWithValue("@Priority", task.Priority);
            command.Parameters.AddWithValue("@Id", task.Id);
            command.ExecuteNonQuery();
        }
    }
}
설명
드래그 시작 상태 체크 (isDragging): isDragging 플래그를 사용하여 드래그가 시작되었음을 확인합니다.
드래그 중 임시 순서 업데이트: tasks.Move(oldIndex, newIndex)를 통해 드래그된 항목을 새로운 위치로 이동하고, UpdateTaskPriorities를 호출하여 UI에 순서를 반영합니다.
드래그 완료 시점에서 DB 업데이트: e.Action == DevExpress.Xpf.Grid.DragDropActions.Drop 조건을 사용하여 드래그가 완료된 시점에만 데이터베이스를 업데이트합니다.
이제 OnDragRecordOver 하나의 핸들러에서 모든 순서 변경과 데이터베이스 업데이트 작업이 처리됩니다. 추가로 필요한 사항이 있으면 알려 주세요.











