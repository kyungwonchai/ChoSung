좋습니다! 전체 코드를 정리해서 다시 한 번 제공해드리겠습니다.

    서버 측 코드 (server.js)

javascript

// server.js
const express = require('express');
const mysql = require('mysql');
const app = express();

// MySQL 데이터베이스 연결 설정
const connection = mysql.createConnection({
  host: 'YOUR_MYSQL_HOST', // MySQL 호스트
  user: 'YOUR_MYSQL_USER', // MySQL 사용자
  password: 'YOUR_MYSQL_PASSWORD', // MySQL 비밀번호
  database: 'YOUR_MYSQL_DATABASE', // 사용할 데이터베이스 이름
});

// MySQL 연결
connection.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    return;
  }
  console.log('Connected to MySQL!');
});

// 최근 200개의 데이터 조회 API 엔드포인트
app.get('/api/getLatestData', (req, res) => {
  const query = 'SELECT stdtime, temp1, humid1 FROM kwdesk.repair_func_now)log ORDER BY id DESC LIMIT 200';
  connection.query(query, (err, results) => {
    if (err) {
      console.error('Error fetching data from MySQL:', err);
      res.status(500).json({ error: 'Error fetching data from MySQL' });
      return;
    }
    res.json(results);
  });
});

// 서버 시작
const port = 5000; // 원하는 포트 번호로 변경 가능
app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

위 코드에서 'YOUR_MYSQL_HOST', 'YOUR_MYSQL_USER', 'YOUR_MYSQL_PASSWORD', 'YOUR_MYSQL_DATABASE' 부분은 각각 사용하는 MySQL 데이터베이스의 호스트, 사용자, 비밀번호, 데이터베이스 이름으로 대체되어야 합니다. MySQL 데이터베이스에 액세스할 수 있는 적절한 인증 정보를 사용해야 합니다.

    클라이언트 측 코드 (RealtimeChart.js)

javascript

// src/components/RealtimeChart.js
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { Line } from 'react-chartjs-2';

const RealtimeChart = () => {
  const [temperatureData, setTemperatureData] = useState([]);
  const [humidityData, setHumidityData] = useState([]);

  const fetchLatestData = async () => {
    try {
      const response = await axios.get('/api/getLatestData');
      const data = response.data;

      const latestTemperatureData = data.map((item) => item.temp1).slice(-200);
      const latestHumidityData = data.map((item) => item.humid1).slice(-200);

      setTemperatureData(latestTemperatureData);
      setHumidityData(latestHumidityData);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      fetchLatestData();
    }, 1000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div>
      <h1>Realtime Temperature and Humidity Chart</h1>
      <Line
        data={{
          labels: Array.from({ length: 200 }, (_, i) => i + 1),
          datasets: [
            {
              label: 'Temperature',
              data: temperatureData,
              borderColor: 'red',
              backgroundColor: 'rgba(255, 0, 0, 0.2)',
              fill: true,
              yAxisID: 'temperature-y-axis',
            },
            {
              label: 'Humidity',
              data: humidityData,
              borderColor: 'blue',
              backgroundColor: 'rgba(0, 0, 255, 0.2)',
              fill: true,
              yAxisID: 'humidity-y-axis',
            },
          ],
        }}
        options={{
          scales: {
            x: {
              display: true,
              title: {
                display: true,
                text: 'Data Points',
              },
            },
            y: {
              display: true,
              title: {
                display: true,
                text: 'Value',
              },
            },
            'temperature-y-axis': {
              min: 20,
              max: 30,
              ticks: {
                stepSize: 1,
              },
            },
            'humidity-y-axis': {
              min: 30,
              max: 70,
              ticks: {
                stepSize: 5,
              },
            },
          },
        }}
      />
    </div>
  );
};

export default RealtimeChart;

위 코드에서 /api/getLatestData 엔드포인트로 요청을 보내서 서버에서 데이터를 받아옵니다. 데이터를 받아온 후에는 이전 예제에서 사용한 코드와 같이 최근 200개의 데이터를 차트에 표시합니다.

이렇게 설정하면 React 앱이 서버에 요청을 보내 데이터를 실시간으로 갱신하고, 실시간 차트를 그리는 기능이 완성됩니다. 단, MySQL 데이터베이스에 접근할 수 있는 서버 측 코드가 제대로 구현되어야 합니다. 서버 측 코드를 올바르게 작성하여 데이터를 제공하면, 리액트 앱에서 그 데이터를 실시간으로 반영하여 차트를 표시할 수 있습니