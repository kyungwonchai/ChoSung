 수정된 파일들을 기반으로 ListBox1에는 가장 최근에 수정된 5개의 폴더 정보만 표시하고, 나머지 정보는 ListBox2에 표시하는 방법을 구현하겠습니다. 이렇게 하면 사용자는 ListBox1에서 가장 중요한 정보를 쉽게 볼 수 있으며, ListBox2에서 추가적인 정보를 검토할 수 있습니다.

아래 코드는 이 기능을 추가하는 방법을 보여줍니다.

Form1.cs 수정
csharp
Copy code
using System;
using System.IO;
using System.Linq;
using System.Collections.Generic;
using System.Threading;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private List<string> allFolderInfo = new List<string>();  // 모든 폴더 정보를 저장할 리스트

    public Form1()
    {
        InitializeComponent();
        StartFolderAnalysis(@"C:\Path\To\Start");  // 분석을 시작할 루트 디렉토리 경로
    }

    private void StartFolderAnalysis(string path)
    {
        Thread thread = new Thread(() => AnalyzeFolders(path, true));
        thread.IsBackground = true;  // 백그라운드 스레드로 설정
        thread.Start();
    }

    private void AnalyzeFolders(string path, bool isRootCall)
    {
        DirectoryInfo rootDir = new DirectoryInfo(path);
        foreach (DirectoryInfo dir in rootDir.GetDirectories())
        {
            long size = CalculateFolderSize(dir);
            if (size >= 1073741824) // 1GB 이상
            {
                DateTime lastModified = GetMostRecentFileDate(dir);
                string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                allFolderInfo.Add(info);  // 모든 폴더 정보 저장
            }
            AnalyzeFolders(dir.FullName, false);  // 재귀적으로 하위 폴더 분석
        }

        if (isRootCall)
        {
            UpdateListBoxes();  // 최상위 호출에서 ListBox 업데이트
            UpdateListBox1("분석 완료");  // 분석 완료 메시지를 ListBox1에 추가
        }
    }

    private DateTime GetMostRecentFileDate(DirectoryInfo directory)
    {
        return directory.GetFiles().Max(file => file.LastWriteTime);
    }

    private long CalculateFolderSize(DirectoryInfo directory)
    {
        long size = 0;
        FileInfo[] files = directory.GetFiles();
        foreach (FileInfo file in files)
        {
            size += file.Length;
        }
        return size;
    }

    private void UpdateListBoxes()
    {
        var sortedList = allFolderInfo.OrderByDescending(info => 
            DateTime.Parse(info.Split('-').Last().Trim())).ToList();

        if (listBox1.InvokeRequired || listBox2.InvokeRequired)
        {
            listBox1.Invoke(new Action(UpdateListBoxes));
            listBox2.Invoke(new Action(UpdateListBoxes));
        }
        else
        {
            listBox1.Items.Clear();
            listBox2.Items.Clear();

            // 최근 5개 아이템을 ListBox1에 추가
            foreach (var item in sortedList.Take(5))
            {
                listBox1.Items.Add(item);
            }

            // 나머지 아이템을 ListBox2에 추가
            foreach (var item in sortedList.Skip(5))
            {
                listBox2.Items.Add(item);
            }
        }
    }

    private void UpdateListBox1(string info)
    {
        if (listBox1.InvokeRequired)
        {
            listBox1.Invoke(new Action<string>(UpdateListBox1), info);
        }
        else
        {
            listBox1.Items.Add(info);
        }
    }
}
주요 변경 사항:
모든 폴더 정보는 allFolderInfo 리스트에 저장됩니다.
분석이 끝나면, UpdateListBoxes 함수가 호출되어 ListBox1과 ListBox2를 업데이트합니다.
ListBox1은 가장 최근에 수정된 5개의 폴더 정보를 표시하고, ListBox2는 나머지 정보를 표시합니다.
이렇게 하면 프로그램이 사용자에게 중요한 정보를 즉시 제공하면서도 추가적인 정보도 접근 가능하게 만들어 줍