아래는 MSSQL 2014를 사용하여 사용자별로 즐겨찾기를 관리할 수 있도록 수정된 코드입니다. 데이터베이스 테이블 생성부터 쿼리와 프로그램 수정까지 모두 포함되어 있습니다.

1. 데이터베이스 테이블 생성 (SQL 스크립트)
sql
코드 복사
-- 데이터베이스 테이블 생성
CREATE TABLE Favorites (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- 고유 ID
    UserId NVARCHAR(50) NOT NULL,     -- 사용자 ID
    ButtonName NVARCHAR(100) NOT NULL, -- 버튼 이름
    GroupName NVARCHAR(100) NOT NULL  -- 그룹 이름
);

-- 사용자별 즐겨찾기 데이터를 빠르게 조회하기 위한 인덱스 생성
CREATE INDEX IDX_Favorites_UserId ON Favorites (UserId);
2. 수정된 C# 코드
전역 변수 및 초기화
csharp
코드 복사
using System.Data.SqlClient;

private static readonly string ConnectionString = "Server=your_server;Database=your_database;User Id=your_user;Password=your_password;";
private string currentUserId = "default"; // 현재 사용자 ID
데이터 로드 (LoadFavorites)
csharp
코드 복사
private void LoadFavorites()
{
    favoriteKeys.Clear();

    using (var connection = new SqlConnection(ConnectionString))
    {
        connection.Open();
        var command = new SqlCommand("SELECT ButtonName FROM Favorites WHERE UserId = @UserId", connection);
        command.Parameters.AddWithValue("@UserId", currentUserId);

        using (var reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                favoriteKeys.Add(reader.GetString(0)); // 버튼 이름 추가
            }
        }
    }
}
데이터 저장 (SaveFavorites)
csharp
코드 복사
private void SaveFavorites()
{
    using (var connection = new SqlConnection(ConnectionString))
    {
        connection.Open();

        // 기존 사용자 데이터 삭제
        var deleteCommand = new SqlCommand("DELETE FROM Favorites WHERE UserId = @UserId", connection);
        deleteCommand.Parameters.AddWithValue("@UserId", currentUserId);
        deleteCommand.ExecuteNonQuery();

        // 새 데이터 삽입
        foreach (var buttonName in favoriteKeys)
        {
            var insertCommand = new SqlCommand(
                "INSERT INTO Favorites (UserId, ButtonName, GroupName) VALUES (@UserId, @ButtonName, @GroupName)", connection);
            insertCommand.Parameters.AddWithValue("@UserId", currentUserId);
            insertCommand.Parameters.AddWithValue("@ButtonName", buttonName);
            insertCommand.Parameters.AddWithValue("@GroupName", GetButtonGroupName(buttonsDictionary[buttonName]));
            insertCommand.ExecuteNonQuery();
        }
    }
}
즐겨찾기 추가/제거 (ToggleFavorite)
csharp
코드 복사
private void ToggleFavorite(string buttonName, BarButtonItem button)
{
    if (favoriteKeys.Contains(buttonName))
    {
        favoriteKeys.Remove(buttonName);
        ResetButtonStyle(button);
        RemoveFromFavorites(button);
    }
    else
    {
        favoriteKeys.Add(buttonName);
        ApplyFavoriteStyle(button);
        AddToFavorites(button, GetButtonGroupName(button));
    }

    SaveFavorites(); // DB에 즉시 반영
}
초기화 시 호출
csharp
코드 복사
private void ProgramStartup()
{
    currentUserId = GetCurrentUserId(); // 사용자 ID 설정 (로그인 시스템에서 받아오기)
    LoadFavorites(); // 사용자별 즐겨찾기 로드
    InitializeButtons(); // 버튼 초기화
}
주요 변경 사항
SQL Server 연동:

ConnectionString에 MSSQL 서버 정보 입력 (서버 주소, 데이터베이스 이름, 사용자 ID, 비밀번호).
테이블 관리:

사용자 ID를 기준으로 즐겨찾기 데이터를 관리.
버튼 이름(ButtonName)과 그룹 이름(GroupName)을 저장.
즐겨찾기 데이터 처리:

LoadFavorites: 사용자 ID에 해당하는 즐겨찾기 로드.
SaveFavorites: 현재 상태를 DB에 저장.
사용자 ID 기반:

currentUserId 변수로 현재 사용자 ID 관리.
로그인 시스템에서 제공받은 사용자 ID를 활용.
MSSQL 권장사항
인덱스 생성:
UserId에 인덱스를 생성해 빠른 검색을 보장 (CREATE INDEX IDX_Favorites_UserId ON Favorites (UserId)).
DB 권한 설정:
프로그램이 사용할 사용자 계정에 적절한 INSERT, SELECT, DELETE 권한 부여.
동작 흐름
프로그램 실행 시:

currentUserId 설정 후 LoadFavorites로 DB에서 즐겨찾기 로드.
버튼 초기화(InitializeButtons).
즐겨찾기 추가/제거 시:

ToggleFavorite에서 변경된 데이터를 즉시 DB에 반영(SaveFavorites 호출).
다른 PC에서 실행:
