<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF--8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI 채팅 (다크 퍼플 테마 - 선택 복사)</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            background: linear-gradient(135deg, #2c003e, #1a001f, #0d000f, #000000);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
            box-sizing: border-box;
        }
        .chat-container {
            width: 100%;
            max-width: 700px;
            background-color: #1e1024;
            border-radius: 12px;
            box-shadow: 0 8px 30px rgba(0,0,0,0.5);
            display: flex;
            flex-direction: column;
            height: calc(100vh - 40px);
            max-height: 800px;
            border: 1px solid #4a2a61;
        }
        .chat-header {
            background: linear-gradient(to right, #4a0072, #2c003e);
            color: #e0e0e0;
            padding: 15px 20px;
            border-radius: 12px 12px 0 0;
            font-size: 1.2em;
            font-weight: bold;
            text-align: center;
            border-bottom: 1px solid #593580;
        }
        #chatbox {
            flex-grow: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 12px;
            color: #d1c4e9;
        }
        .message-wrapper {
            display: flex;
            max-width: 75%;
        }
        .message {
            padding: 10px 15px;
            border-radius: 18px;
            line-height: 1.5;
            position: relative;
            word-wrap: break-word;
            white-space: pre-wrap;
            box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }
        .user-message-wrapper {
            align-self: flex-end;
            margin-left: auto;
        }
        .user-message .message {
            background: #5e35b1;
            color: #ede7f6;
            border-radius: 18px 18px 5px 18px;
        }
        .api-response-wrapper {
            align-self: flex-start;
            margin-right: auto;
        }
        .api-response .message {
            background-color: #311b40;
            color: #d1c4e9;
            border-radius: 18px 18px 18px 5px;
            border: 1px solid #4a2a61;
        }
        .copy-btn {
            background: transparent;
            border: none;
            cursor: pointer;
            padding: 3px;
            font-size: 0.8em;
            color: #b39ddb;
            opacity: 0.6;
            transition: opacity 0.2s, color 0.2s;
            position: absolute;
            bottom: 8px;
            right: 8px;
            display: flex;
            align-items: center;
        }
        .message:hover .copy-btn {
            opacity: 1;
            color: #ede7f6;
        }
        .copy-btn-icon {
            width: 14px;
            height: 14px;
            margin-right: 3px;
            fill: currentColor;
        }
        .loading-indicator {
            align-self: flex-start;
            margin-right: auto;
            padding: 10px 15px;
            background-color: #311b40;
            color: #b39ddb;
            border-radius: 18px;
            font-style: italic;
        }
        #inputArea {
            display: flex;
            padding: 15px;
            border-top: 1px solid #4a2a61;
            background-color: #2c1d36;
        }
        #messageInput {
            flex-grow: 1;
            padding: 12px 15px;
            border: 1px solid #593580;
            background-color: #3b2a49;
            color: #e0e0e0;
            border-radius: 20px;
            margin-right: 10px;
            font-size: 1em;
            outline: none;
        }
        #messageInput::placeholder {
            color: #a0a0a0;
        }
        #messageInput:focus {
            border-color: #7e57c2;
            box-shadow: 0 0 0 0.2rem rgba(126,87,194,.25);
        }
        #sendButton {
            padding: 12px 20px;
            border: none;
            background: linear-gradient(to bottom right, #6a1b9a, #4a0072);
            color: white;
            cursor: pointer;
            border-radius: 20px;
            font-size: 1em;
            font-weight: bold;
            transition: background-color 0.2s, box-shadow 0.2s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        #sendButton:hover {
            background: linear-gradient(to bottom right, #7b1fa2, #5d008a);
            box-shadow: 0 4px 8px rgba(0,0,0,0.4);
        }
        #sendButton:disabled {
            background: #543b62;
            cursor: not-allowed;
            box-shadow: none;
        }
        #chatbox::-webkit-scrollbar { width: 8px; }
        #chatbox::-webkit-scrollbar-track { background: #2c1d36; border-radius: 10px; }
        #chatbox::-webkit-scrollbar-thumb { background-color: #5e35b1; border-radius: 10px; border: 2px solid #2c1d36; }
        #chatbox::-webkit-scrollbar-thumb:hover { background-color: #7e57c2; }
    </style>
</head>
<body>
    <div class="chat-container">
        <div class="chat-header">AI 페르소나 (선택 복사 기능)</div>
        <div id="chatbox">
            </div>
        <div id="inputArea">
            <input type="text" id="messageInput" placeholder="메시지를 입력하세요..." autocomplete="off">
            <button id="sendButton">전송</button>
        </div>
    </div>

    <script>
        const chatbox = document.getElementById('chatbox');
        const messageInput = document.getElementById('messageInput');
        const sendButton = document.getElementById('sendButton');
        
        const copyIconSvg = `
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-clipboard copy-btn-icon" viewBox="0 0 16 16">
              <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
              <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
            </svg>`;

        // ================================================================================
        // ============================ API 설정 부분 =====================================
        // ================================================================================
        const API_KEY = "YOUR_API_KEY"; // TODO: 실제 API 키로 교체
        const API_URL = "https://agent.sec.samsung.net/api/v1/run/9dba307d-2ba3-44f0-a0ed-79d47b2f4de8?stream=false";
        // ================================================================================
        // ================================================================================

        function addMessageToChat(text, senderType, isLoading = false) {
            const messageWrapper = document.createElement('div');
            messageWrapper.classList.add('message-wrapper', senderType + '-message-wrapper');

            if (isLoading) {
                const loadingDiv = document.createElement('div');
                loadingDiv.classList.add('loading-indicator');
                loadingDiv.textContent = text;
                messageWrapper.appendChild(loadingDiv);
                messageWrapper.id = 'loading-message';
            } else {
                const messageBubble = document.createElement('div');
                messageBubble.classList.add(senderType + '-message');
                
                const messageContent = document.createElement('div');
                messageContent.classList.add('message');
                messageContent.textContent = text; // 전체 텍스트를 우선 표시

                if (senderType === 'api') {
                    const copyButton = document.createElement('button');
                    copyButton.classList.add('copy-btn');
                    copyButton.innerHTML = copyIconSvg + ' 복사';
                    copyButton.title = '메시지 복사';
                    
                    copyButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        
                        const fullApiText = text; // AI 메시지의 전체 텍스트
                        let textToActuallyCopy = fullApiText; // 기본값은 전체 텍스트 복사
                        let copyFeedbackMessage = ' 전체 복사됨!';

                        const markerStartText = "aabbccdd";
                        const markerEndText = "eeffgghh";

                        const lines = fullApiText.split('\n');
                        let markerStartLine = -1;
                        let markerEndLine = -1;

                        for (let i = 0; i < lines.length; i++) {
                            if (lines[i].trim() === markerStartText) {
                                if (markerStartLine === -1) markerStartLine = i; // 첫번째 시작 마커
                            }
                            if (lines[i].trim() === markerEndText) {
                                // 시작 마커가 발견된 이후의 종료 마커만 유효
                                if (markerStartLine !== -1 && i >= markerStartLine) {
                                     markerEndLine = i;
                                     // 첫번째 유효한 쌍을 찾으면 중단 (필요에 따라 조절)
                                     // break; 
                                }
                            }
                        }

                        // 유효한 마커 쌍이 발견된 경우
                        if (markerStartLine !== -1 && markerEndLine !== -1 && markerStartLine <= markerEndLine) {
                            textToActuallyCopy = lines.slice(markerStartLine, markerEndLine + 1).join('\n');
                            copyFeedbackMessage = ' 지정구간 복사됨!';
                        }

                        navigator.clipboard.writeText(textToActuallyCopy).then(() => {
                            const originalButtonHTML = copyButton.innerHTML.replace(/ 복사됨!| 지정구간 복사됨!| 전체 복사됨!| 복사 실패/g, ' 복사');
                            copyButton.innerHTML = copyIconSvg + copyFeedbackMessage;
                            setTimeout(() => {
                                copyButton.innerHTML = originalButtonHTML;
                            }, 2000);
                        }).catch(err => {
                            console.error('복사 실패:', err);
                            const originalButtonHTML = copyButton.innerHTML.replace(/ 복사됨!| 지정구간 복사됨!| 전체 복사됨!| 복사 실패/g, ' 복사');
                            copyButton.innerHTML = copyIconSvg + ' 복사 실패';
                            setTimeout(() => {
                                copyButton.innerHTML = originalButtonHTML;
                            }, 2000);
                        });
                    });
                    messageContent.appendChild(copyButton);
                }
                
                messageBubble.appendChild(messageContent);
                messageWrapper.appendChild(messageBubble);
            }
            
            chatbox.appendChild(messageWrapper);
            chatbox.scrollTop = chatbox.scrollHeight;
            return messageWrapper;
        }

        async function callChatApi(userMessage) {
            if (API_KEY === "YOUR_API_KEY") {
                addMessageToChat("API 키가 설정되지 않았습니다. 스크립트에서 API_KEY를 설정해주세요.", 'api');
                return;
            }

            sendButton.disabled = true;
            const loadingMessageElement = addMessageToChat("AI가 응답을 준비 중입니다...", 'api', true);

            const headers = {
                "Content-Type": "application/json",
                "x-api-key": API_KEY
            };
            const body = JSON.stringify({
                "input_value": userMessage,
                "input_type": "chat",
                "output_type": "text",
                "component_inputs": {}
            });

            try {
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: headers,
                    body: body
                });

                if (loadingMessageElement) {
                    loadingMessageElement.remove();
                }

                const responseDataText = await response.text();

                if (!response.ok) {
                    let detailedError = `HTTP 오류! 상태 코드: ${response.status}`;
                    try {
                        const errorJson = JSON.parse(responseDataText);
                        detailedError += `\n오류 메시지: ${errorJson.message || responseDataText}`;
                    } catch (e) {
                        detailedError += `\n응답 내용: ${responseDataText}`;
                    }
                    throw new Error(detailedError);
                }
                
                let actualMessageContent = "";
                try {
                    const parsedResponse = JSON.parse(responseDataText);
                    if (parsedResponse.outputs && parsedResponse.outputs.length > 0 &&
                        parsedResponse.outputs[0].outputs && parsedResponse.outputs[0].outputs.length > 0 &&
                        parsedResponse.outputs[0].outputs[0].results && parsedResponse.outputs[0].outputs[0].results.length > 0 &&
                        parsedResponse.outputs[0].outputs[0].results[0].text) {
                        actualMessageContent = parsedResponse.outputs[0].outputs[0].results[0].text;
                    } else if (parsedResponse.outputs && parsedResponse.outputs.length > 0 && parsedResponse.outputs[0].text) {
                        actualMessageContent = parsedResponse.outputs[0].text;
                    } else {
                        console.warn("API 응답이 예상된 JSON 구조가 아닙니다 (1차). 받은 텍스트를 그대로 표시합니다.", parsedResponse);
                        actualMessageContent = responseDataText;
                    }
                } catch (e) {
                    // API 응답이 JSON이 아닌 순수 텍스트일 수도 있습니다.
                    // 또는 session_id는 없지만, 최상위가 바로 outputs 배열인 경우 등 다양한 가능성 존재
                    // 이 경우에는 responseDataText를 그대로 사용합니다.
                    console.log("API 응답이 JSON 파싱에 실패했거나 예상 구조가 아닙니다 (2차). 받은 텍스트를 그대로 사용합니다.");
                    actualMessageContent = responseDataText; 
                }
                                
                // \\n을 \n으로 변환하는 것은 실제 텍스트 내용에만 적용
                const cleanedResponseText = actualMessageContent.replace(/\\n/g, '\n');
                addMessageToChat(cleanedResponseText, 'api');

            } catch (error) {
                console.error("API 호출 오류:", error);
                if (loadingMessageElement) {
                    loadingMessageElement.remove();
                }
                addMessageToChat(`오류가 발생했습니다: ${error.message}`, 'api');
            } finally {
                sendButton.disabled = false;
                messageInput.focus();
            }
        }
        
        function handleSendMessage() {
            const messageText = messageInput.value.trim();
            if (messageText && !sendButton.disabled) {
                addMessageToChat(messageText, 'user');
                callChatApi(messageText); 
                messageInput.value = ''; 
            }
        }

        sendButton.addEventListener('click', handleSendMessage);

        messageInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                handleSendMessage();
            }
        });

        addMessageToChat("안녕하세요! 이 채팅 UI는 이제 특정 마커(aabbccdd, eeffgghh)가 포함된 AI 메시지의 경우 해당 구간만 복사하는 기능을 지원합니다.", 'api');

    </script>
</body>
</html>