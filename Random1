. UserControl의 바인딩 수정
StatusIndicatorControl.xaml에서 ServiceName 속성이 올바르게 바인딩되어 있는지 확인합니다.

수정된 StatusIndicatorControl.xaml
xml
코드 복사
<UserControl x:Class="RouterMiddleACR.Controls.StatusIndicatorControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             d:DesignHeight="100" d:DesignWidth="100">
    <StackPanel Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center">
        <!-- 상태를 표시할 원형 도형 -->
        <Ellipse x:Name="IndicatorEllipse" Width="30" Height="30" Fill="Gray" />
        <!-- 서비스 이름을 표시할 텍스트 블록 -->
        <TextBlock Text="{Binding ServiceName, Converter={StaticResource EnumToStringConverter}}" 
                   FontSize="14" FontWeight="Bold" HorizontalAlignment="Center" Margin="5"/>
        <!-- 상태 설명을 표시할 텍스트 블록 -->
        <TextBlock Text="{Binding StatusDescription}" 
                   FontSize="12" HorizontalAlignment="Center" Margin="5"/>
    </StackPanel>
</UserControl>
3. MainWindow.xaml에서 바인딩 수정
MainWindow.xaml에서 ItemsControl의 ItemTemplate을 수정하여 ServiceName을 올바르게 바인딩합니다.

수정된 MainWindow.xaml
xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:RouterMiddleACR.Controls"
        Title="RouterMiddleACR" Height="450" Width="800">
    <Grid>
        <!-- ItemsControl을 사용하여 서비스 상태를 동적으로 표시 -->
        <ItemsControl ItemsSource="{Binding ServiceStatuses}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <StackPanel Orientation="Horizontal" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <!-- 유저 컨트롤 사용 -->
                    <local:StatusIndicatorControl 
                        Status="{Binding Status}" 
                        ServiceName="{Binding ServiceName}" 
                        StatusDescription="{Binding Description}" />
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
4. EnumToStringConverter 추가
만약 ServiceName이 열거형으로 정의되어 있고 이를 문자열로 변환해야 하는 경우, EnumToStringConverter를 추가할 수 있습니다.

EnumToStringConverter.cs
csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;

namespace RouterMiddleACR.Converters
{
    public class EnumToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is Enum)
            {
                return value.ToString();
            }
            return string.Empty;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
App.xaml
App.xaml에서 EnumToStringConverter를 리소스로 추가합니다.

xml
코드 복사
<Application x:Class="RouterMiddleACR.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:RouterMiddleACR.Converters"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <local:EnumToStringConverter x:Key="EnumToStringConverter"/>
    </Application.Resources>
</Application>
요약
ServiceName 열거형 설정: ServiceStatus 객체를 초기화할 때 각 객체의 ServiceName을 고유하게 설정합니다.
Binding 확인: UserControl과 MainWindow.xaml에서 바인딩을 올바르게 설정하여 각 서비스 상태가 제대로 표시되도록 합니다.
Converter 추가: 열거형을 문자열로 변환할 때 EnumToStringConverter를 사용하여 UI에 문자열로 표시되도록 합니다.
이제 각 서비스 상태가 제대로 표시될