네, 말씀하신 파일 처리 구조를 업데이트하겠습니다. 이 요청에 따라 기존의 **FileProcessor**를 수정하여 다음 기능을 추가합니다:

파일 이동: 새로 감지된 파일은 C:\MESPRODFILE_Backup\yyyyMMdd 형식으로 폴더를 만들어 해당 경로로 이동합니다.
파일 확인: 이동한 파일을 열어서 처리합니다.
파일 보관: 이동된 파일은 3개월 동안 보관하고, 3개월이 지난 파일은 자동으로 삭제됩니다.
순차 삭제: 하루에 한 번 파일들을 확인하고, 3개월이 지난 파일을 삭제하는 기능을 추가합니다.
수정된 FileProcessor 구조
1. FileProcessor.cs (파일 이동 및 삭제 포함)
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;

public class FileProcessor
{
    private string _inputDirectory;
    private string _backupDirectory;
    private Timer _cleanupTimer;

    public event Action<LogEntry> OnLogEntryDetected;

    public FileProcessor(string inputDirectory)
    {
        _inputDirectory = inputDirectory;
        _backupDirectory = @"C:\MESPRODFILE_Backup";

        // 하루에 한 번 파일 삭제 작업 실행 (24시간 간격)
        _cleanupTimer = new Timer(TimeSpan.FromDays(1).TotalMilliseconds);
        _cleanupTimer.Elapsed += (sender, args) => CleanupOldFiles();
        _cleanupTimer.Start();
    }

    /// <summary>
    /// 파일 감지 시작
    /// </summary>
    public void StartProcessing()
    {
        Task.Run(() => MonitorDirectory());
    }

    /// <summary>
    /// 디렉토리를 감시하여 새로운 파일을 감지합니다.
    /// </summary>
    private void MonitorDirectory()
    {
        while (true)
        {
            var files = Directory.GetFiles(_inputDirectory, "*.txt");
            foreach (var file in files)
            {
                // 파일을 백업 폴더로 이동한 후 처리
                var backupFile = MoveFileToBackup(file);
                if (backupFile != null)
                {
                    ProcessFile(backupFile);
                }
            }
            Task.Delay(5000).Wait();  // 5초마다 디렉토리 확인
        }
    }

    /// <summary>
    /// 파일을 백업 폴더로 이동
    /// </summary>
    private string MoveFileToBackup(string filePath)
    {
        try
        {
            // 백업 폴더 경로 생성 (yyyyMMdd 형식)
            string backupSubDirectory = Path.Combine(_backupDirectory, DateTime.Now.ToString("yyyyMMdd"));
            if (!Directory.Exists(backupSubDirectory))
            {
                Directory.CreateDirectory(backupSubDirectory);
            }

            // 백업 파일 경로
            string destinationPath = Path.Combine(backupSubDirectory, Path.GetFileName(filePath));

            // 파일 이동
            File.Move(filePath, destinationPath);

            return destinationPath;  // 이동된 파일 경로 반환
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error moving file to backup: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// 이동한 파일을 처리
    /// </summary>
    private void ProcessFile(string filePath)
    {
        try
        {
            var lines = File.ReadAllLines(filePath);
            var logEntry = ParseLogEntry(lines);

            // 처리 후 이벤트 발생
            OnLogEntryDetected?.Invoke(logEntry);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file: {ex.Message}");
        }
    }

    /// <summary>
    /// 로그 파일을 LogEntry 객체로 변환
    /// </summary>
    private LogEntry ParseLogEntry(string[] lines)
    {
        // LogEntry 파싱 로직 구현
        var logEntry = new LogEntry
        {
            // 로그 항목들을 파싱하여 할당
        };
        return logEntry;
    }

    /// <summary>
    /// 3개월 이상 된 백업 파일을 삭제
    /// </summary>
    private void CleanupOldFiles()
    {
        try
        {
            // 3개월 전 날짜
            DateTime thresholdDate = DateTime.Now.AddMonths(-3);

            var directories = Directory.GetDirectories(_backupDirectory);
            foreach (var directory in directories)
            {
                DateTime directoryDate;
                if (DateTime.TryParseExact(Path.GetFileName(directory), "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out directoryDate))
                {
                    // 3개월 이상 된 디렉토리 삭제
                    if (directoryDate < thresholdDate)
                    {
                        Directory.Delete(directory, true);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up old files: {ex.Message}");
        }
    }
}
주요 변경 사항 설명:
파일 이동:

새로 감지된 파일은 MoveFileToBackup 메서드를 통해 **백업 폴더(C:\MESPRODFILE_Backup)**로 이동합니다.
폴더 구조는 yyyyMMdd 형식의 날짜 폴더로 관리됩니다.
파일 처리:

파일을 백업 폴더로 이동한 후, 이동된 파일을 열어서 처리하는 방식으로 변경되었습니다.
ProcessFile 메서드에서 파일을 읽어 파싱하여 LogEntry로 변환한 후 처리합니다.
3개월 이상 된 파일 삭제:

CleanupOldFiles 메서드를 통해 3개월 이상 된 파일을 주기적으로 삭제합니다.
하루에 한 번 **_cleanupTimer**를 통해 3개월 이상 된 파일을 확인하고 삭제합니다.
디렉토리 감시:

MonitorDirectory 메서드는 5초마다 지정된 폴더에서 파일을 감지합니다.
새로 추가된 파일을 백업 폴더로 이동시킨 후 처리합니다.
요약:
파일 처리 방식 변경: 새로 감지된 파일은 백업 폴더로 이동한 뒤에 열어서 처리됩니다.
파일 보관: 파일은 백업 폴더에 3개월 동안 보관되며, 3개월이 지난 파일은 자동으로 삭제됩니다.
주기적인 파일 삭제: 하루에 한 번씩 백업 폴더에서 오래된 파일을 삭제하는 기능을 추가했습니다.
이 코드가 사용자의 요구에 맞게 파일을 안전하게 관리하고 오래된 파일을 자동으로 정리해