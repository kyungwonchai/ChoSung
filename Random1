기존 코드에서 별도의 스레드로 실행되는 작업과는 독립적으로 타이머를 사용하여 15분마다 체크하는 기능을 추가합니다.

Timer 클래스를 사용하여 비동기적으로 작업을 수행합니다.

특정 함수 (CheckTask()) 를 15분마다 호출하도록 설정합니다.

타이머 작업은 프로그램의 다른 작업에 영향을 주지 않도록 독립적으로 실행됩니다.

1. TimerManager.cs (별도 클래스 파일)
csharp
코드 복사
using System;
using System.Threading;
using System.Threading.Tasks;

namespace YourNamespace
{
    public class TimerManager
    {
        private Timer _timer;  // Timer 객체 선언
        private readonly TimeSpan _interval = TimeSpan.FromMinutes(15);  // 15분 간격으로 설정
        private bool _isRunning = false;  // 중복 실행 방지 플래그

        /// <summary>
        /// TimerManager 생성자: 타이머를 초기화합니다.
        /// </summary>
        public TimerManager()
        {
            // 타이머를 설정합니다. 일정 시간마다 CheckTask 메서드를 호출합니다.
            _timer = new Timer(TimerCallback, null, TimeSpan.Zero, _interval);
        }

        /// <summary>
        /// 타이머로 호출될 콜백 함수입니다. CheckTask를 비동기로 호출합니다.
        /// </summary>
        /// <param name="state">타이머 상태 객체 (사용하지 않음)</param>
        private void TimerCallback(object state)
        {
            if (_isRunning) return;  // 이전 작업이 완료되지 않은 경우 중복 실행 방지

            _isRunning = true;

            // 비동기 작업 실행
            Task.Run(async () => 
            {
                try
                {
                    await CheckTask();  // 체크 함수 호출 (비동기 방식)
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"[Timer Error] {ex.Message}");
                }
                finally
                {
                    _isRunning = false;  // 작업 완료 후 플래그 초기화
                }
            });
        }

        /// <summary>
        /// 15분마다 호출될 함수. 사용자가 내용을 추가하면 됩니다.
        /// </summary>
        /// <returns></returns>
        public async Task CheckTask()
        {
            // 여기다가 원하는 기능을 넣으세요.
            Console.WriteLine($"[CheckTask] 작업 실행됨: {DateTime.Now}");

            // 비동기 처리 예시 (예: 로그 저장, 데이터베이스 확인 등)
            await Task.Delay(1000);  // 테스트용 딜레이 (1초)
        }

        /// <summary>
        /// 타이머를 정지시키는 함수입니다.
        /// </summary>
        public void StopTimer()
        {
            _timer?.Change(Timeout.Infinite, Timeout.Infinite);
        }

        /// <summary>
        /// 타이머를 다시 시작하는 함수입니다.
        /// </summary>
        public void StartTimer()
        {
            _timer?.Change(TimeSpan.Zero, _interval);
        }
    }
}
2. 사용 예시 (Main Program)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using YourNamespace;

namespace YourProgram
{
    class Program
    {
        static async Task Main(string[] args)
        {
            Console.WriteLine("프로그램 시작됨.");

            // TimerManager 인스턴스 생성 및 타이머 시작
            TimerManager timerManager = new TimerManager();

            // 프로그램이 종료되지 않도록 유지 (타이머 확인)
            await Task.Delay(TimeSpan.FromHours(1));  // 1시간 동안 유지 (테스트용)
            
            Console.WriteLine("프로그램 종료됨.");
        }
    }
}
3. 설명
✔ TimerManager 클래스
System.Threading.Timer를 사용하여 15분마다 함수를 호출합니다.

Task.Run()을 사용하여 비동기적으로 CheckTask() 함수를 호출하여 타이머의 주 작업과 프로그램의 다른 작업이 충돌하지 않도록 설정합니다.

StopTimer() 와 StartTimer() 메서드를 사용하여 타이머를 일시 중지하거나 다시 시작할 수 있습니다.

중복 실행 방지 기능을 추가하여 이전 작업이 완료되지 않으면 새로운 작업이 시작되지 않도록 했습니다.

✔ CheckTask() 함수
15분마다 호출되는 함수로 원하는 작업을 추가하면 됩니다.

예시로는 현재 시간을 출력하고 1초 동안 대기하도록 작성했습니다.

추가 설명
타이머는 프로그램의 다른 작업과 별개로 동작하므로 기존 Task 작업과 독립적으로 실행됩니다.

오류가 발생해도 프로그램 전체에 영향을 주지 않도록 try-catch 문으로 감쌌습니다.
