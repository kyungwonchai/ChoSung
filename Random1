네, 파일이 열리는 것을 확인했으니 가장 중요한 고비는 넘었습니다. 이제 확대/축소와 페이지 바로가기 버튼 기능을 추가해 보겠습니다.

솔직히 말씀드리면, 안드로이드 기본 기능(ImageView)만으로는 확대/축소를 부드럽게 만드는 게 매우 복잡하고 성능도 떨어집니다.

그래서 문제를 일으켰던 라이브러리를 다시 쓰는 게 가장 확실하고 좋은 방법입니다. 지난번에 Gradle 설정을 바로잡았기 때문에, 이제는 문제없이 작동할 겁니다. 이 라이브러리 하나면 확대/축소, 페이지 이동, 모든 게 한 방에 해결됩니다.

아래 3개 파일을 그대로 덮어쓰기 하시면 원하시는 모든 기능이 포함된 앱이 완성됩니다.

## 1. app/build.gradle.kts (라이브러리 다시 추가)
문제를 일으켰던 PDF 뷰어 라이브러리를 다시 추가합니다. 이제는 Gradle 설정이 올바르게 되어있어 정상적으로 다운로드될 겁니다.

경로: [프로젝트 폴더]/app/build.gradle.kts

Kotlin

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.sec.reellistviewer"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.reellistviewer"
        minSdk = 24 // 라이브러리 호환성을 위해 24로 유지
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")

    // 확대/축소, 페이지 이동 기능이 모두 포함된 PDF 뷰어 라이브러리
    implementation("com.github.barteksc:android-pdf-viewer:3.2.0-beta.1")
}
## 2. activity_main.xml (화면 구조 변경)
상단에 페이지 이동 버튼 16개가 들어갈 스크롤 영역과, 그 아래에 확대/축소가 가능한 PDF 뷰어 영역으로 화면을 구성합니다.

경로: [프로젝트 폴더]/app/src/main/res/layout/activity_main.xml

XML

<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- 상단 페이지 바로가기 버튼 영역 -->
    <HorizontalScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#EAEAEA"
        android:scrollbars="none">

        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:padding="8dp"/>
    </HorizontalScrollView>

    <!-- 파일 선택 버튼 -->
    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_margin="8dp"
        android:text="PDF 파일 열기" />

    <!-- 확대/축소가 가능한 PDF 뷰어 -->
    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>

</LinearLayout>
## 3. MainActivity.kt (핵심 코드 교체)
이전의 복잡한 PdfRenderer 코드를 모두 버리고, 라이브러리를 사용하는 훨씬 간결하고 강력한 코드로 교체합니다.

경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.net.Uri
import android.os.Bundle
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import com.github.barteksc.pdfviewer.util.FitPolicy
import com.sec.reellistviewer.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding
    private val totalPageCount = 16 // 생성할 버튼 개수

    // 파일 선택 창을 띄우고 결과를 받아오는 부분
    private val filePickerLauncher = registerForActivityResult(
        ActivityResultContracts.OpenDocument()
    ) { uri: Uri? ->
        uri?.let {
            loadPdf(it)
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 상단에 16개 페이지 이동 버튼 생성
        createPageNavigationButtons()

        // 'PDF 파일 열기' 버튼 누르면 파일 선택 창 띄우기
        binding.btnOpenFile.setOnClickListener {
            filePickerLauncher.launch(arrayOf("application/pdf"))
        }
    }

    // 사용자가 선택한 PDF 파일을 라이브러리를 사용해 여는 함수
    private fun loadPdf(uri: Uri) {
        binding.pdfView.fromUri(uri)
            .enableSwipe(true) // 손가락으로 페이지 넘기기
            .swipeHorizontal(false) // 세로 스크롤
            .enableDoubletap(true) // 더블탭으로 확대
            .defaultPage(0) // 첫 페이지는 0
            .pageFitPolicy(FitPolicy.WIDTH) // 페이지를 화면 너비에 맞춤
            .load()
    }

    // 상단에 16개의 페이지 이동 버튼을 동적으로 생성하는 함수
    private fun createPageNavigationButtons() {
        // 기존 버튼 모두 제거
        binding.pageButtonContainer.removeAllViews()
        
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                // 각 버튼에 클릭 이벤트 설정
                setOnClickListener {
                    // 라이브러리의 페이지 이동 기능 호출 (페이지는 0부터 시작)
                    binding.pdfView.jumpTo(i - 1, true)
                    Toast.makeText(this@MainActivity, "$i 페이지로 이동", Toast.LENGTH_SHORT).show()
                }
            }
            // 생성된 버튼을 레이아웃에 추가
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}
## 실행 방법
위 3개 파일을 그대로 덮어쓰세요.

안드로이드 스튜디오 우측 상단 **코끼리 아이콘(Sync)**을 눌러서 라이브러리를 설치합니다.

앱을 실행하세요.

이제 앱을 실행하고 [PDF 파일 열기] 버튼을 눌러 파일을 선택하면, 손가락으로 확대/축소가 되고 상단의 숫자 버튼을 누르면 해당 페이지로 바로 이동하는 것을 확인하실 수 있습니다.

