 데이터를 표시하기 위해서는 시리즈를 명시적으로 추가하고, 각 시리즈에 대한 데이터 바인딩을 설정해야 합니다. 또한, MS SQL Server에서 데이터를 가져올 때 각 카테고리(라인, 모델, 발생유형)에 대해 별도의 쿼리를 실행하거나, 데이터를 애플리케이션 레벨에서 적절히 분리해야 합니다. 이를 위해 XAML과 C# 코드를 수정해드리겠습니다.

XAML 코드
xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="2*"/>
        </Grid.RowDefinitions>
        
        <!-- 차트 컨트롤 정의 -->
        <dxc:ChartControl x:Name="chartControl" Grid.Row="0" MouseDown="ChartControl_MouseDown">
            <!-- 시리즈 추가 -->
            <dxc:BarSideBySideSeries2D x:Name="lineSeries" DisplayName="라인별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
            <dxc:BarSideBySideSeries2D x:Name="modelSeries" DisplayName="모델별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
            <dxc:BarSideBySideSeries2D x:Name="typeSeries" DisplayName="발생유형별 수량" ArgumentDataMember="Category" ValueDataMember="Quantity"/>
        </dxc:ChartControl>

        <!-- 그리드 컨트롤 정의 -->
        <dxg:GridControl x:Name="gridControl" Grid.Row="1"/>
    </Grid>
</Window>
C# 코드
C# 코드에서는 서버에서 데이터를 가져오고, 차트 시리즈에 데이터를 할당하며, 차트의 막대를 클릭했을 때 그리드를 필터링하는 로직을 구현합니다.

csharp
Copy code
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

public partial class MainWindow : Window
{
    private string connectionString = "Your Connection String Here";

    public MainWindow()
    {
        InitializeComponent();
        LoadChartData();
    }

    private void LoadChartData()
    {
        // 서버에서 데이터를 가져옵니다
        DataTable lineData = GetData("라인");
        DataTable modelData = GetData("모델");
        DataTable typeData = GetData("발생유형");

        // 차트 시리즈에 데이터를 할당합니다
        lineSeries.DataSource = lineData;
        modelSeries.DataSource = modelData;
        typeSeries.DataSource = typeData;
    }

    private DataTable GetData(string category)
    {
        using (SqlConnection conn = new SqlConnection(connectionString))
        {
            conn.Open();
            string query = $"SELECT '{category}' AS Category, COUNT(*) AS Quantity FROM T_현장셑척 GROUP BY {category}";
            using (SqlCommand cmd = new SqlCommand(query, conn))
            {
                using (SqlDataAdapter da = new SqlDataAdapter(cmd))
                {
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    return dt;
                }
            }
        }
    }

    private void ChartControl_MouseDown(object sender, MouseButtonEventArgs e)
    {
        var hitInfo = chartControl.CalcHitInfo(e.GetPosition(chartControl));
        if (hitInfo.InSeries)
        {
            var seriesPoint = hitInfo.SeriesPoint;
            FilterGridControl(seriesPoint.Argument);
        }
    }

    private void FilterGridControl(string filterArgument)
    {
        gridControl.FilterString = $"[라인] = '{filterArgument}' OR [모델] = '{filterArgument}' OR [발생유형] = '{filterArgument}'";
    }
}
이 코드는 각 카테고리별로 별도의 시리즈를 생성하고, 서버에서 해당 데이터를 가져