렉토리를 찾아 해당 디렉토리의 구조를 분석하는 C# 코드를 작성해 보겠습니다. 이 코드는 루트 디렉토리부터 시작해서 각 폴더의 총 크기를 계산하고, 최대 크기를 가진 폴더와 그 하위 폴더들을 출력합니다.

1. 폴더 크기 계산
먼저 각 폴더의 총 크기를 계산하는 함수를 만듭니다. 이 함수는 지정된 경로의 모든 파일과 하위 폴더들의 크기를 재귀적으로 합산합니다.

csharp
Copy code
using System;
using System.IO;
using System.Collections.Generic;

class Program
{
    static void Main(string[] args)
    {
        string rootPath = @"C:\Path\To\Start"; // 분석하고자 하는 루트 디렉토리 경로
        var largestFolder = GetLargestFolder(rootPath);
        Console.WriteLine($"가장 많은 용량을 차지하는 폴더: {largestFolder.Item1} ({largestFolder.Item2} bytes)");

        DisplayFolderContents(largestFolder.Item1, "");
    }

    static Tuple<string, long> GetLargestFolder(string path)
    {
        long maxSize = 0;
        string maxFolder = "";
        foreach (var directory in Directory.GetDirectories(path))
        {
            long size = GetDirectorySize(directory);
            if (size > maxSize)
            {
                maxSize = size;
                maxFolder = directory;
            }
        }
        return Tuple.Create(maxFolder, maxSize);
    }

    static long GetDirectorySize(string directoryPath)
    {
        long size = 0;
        // 모든 파일의 크기 합산
        FileInfo[] files = new DirectoryInfo(directoryPath).GetFiles();
        foreach (FileInfo file in files)
        {
            size += file.Length;
        }
        // 모든 하위 디렉토리의 크기를 재귀적으로 합산
        DirectoryInfo[] subDirs = new DirectoryInfo(directoryPath).GetDirectories();
        foreach (DirectoryInfo dir in subDirs)
        {
            size += GetDirectorySize(dir.FullName);
        }
        return size;
    }

    static void DisplayFolderContents(string path, string indent)
    {
        DirectoryInfo directoryInfo = new DirectoryInfo(path);
        DirectoryInfo[] subDirs = directoryInfo.GetDirectories();
        FileInfo[] files = directoryInfo.GetFiles();

        foreach (DirectoryInfo dir in subDirs)
        {
            Console.WriteLine($"{indent}{dir.Name} ({GetDirectorySize(dir.FullName)} bytes)");
            DisplayFolderContents(dir.FullName, indent + "  ");
        }

        foreach (FileInfo file in files)
        {
            Console.WriteLine($"{indent}{file.Name} ({file.Length} bytes)");
        }
    }
}
설명
GetDirectorySize 함수: 지정된 디렉토리의 총 크기를 계산합니다. 모든 파일과 하위 디렉토리의 크기를 재귀적으로 더합니다.
GetLargestFolder 함수: 지정된 경로 내의 모든 디렉토리를 순회하며 가장 큰 폴더를 찾습니다.
DisplayFolderContents 함수: 지정된 폴더와 그 하위 항목의 내용을 표시합니다. 각 폴더와 파일의 크기를 출력하여 어떤 항목이 공간을 많이 차지하는지 식별할 수 있습니다.
이 코드는 루트 디렉토리에서 시작하여 가장 많은 용량을 차지하는 폴더를 찾고, 그 폴더 내부의 구조를 보여줌으로써 공간 문제의 원인을 파악하는 데 도움을 줍니다.