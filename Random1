지를 도킹하고 해제하는 기능을 구현하는 예제 코드를 제공하겠습니다. 이 예제에서는 여러 DocumentPanel 객체를 도킹하고, 이를 프로그래매틱 방식으로 해제 및 다시 도킹하는 방법을 보여줍니다.

XAML 구성
먼저, XAML에 DockLayoutManager와 DocumentGroup을 정의합니다. DocumentGroup 내부에 도킹될 DocumentPanel들을 추가합니다.

xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <dxdo:DockLayoutManager x:Name="dockManager">
            <dxdo:LayoutGroup Orientation="Vertical">
                <dxdo:DocumentGroup x:Name="documentGroup"/>
            </dxdo:LayoutGroup>
        </dxdo:DockLayoutManager>
    </Grid>
</Window>
C# 코드
다음으로, C# 코드에서 DocumentPanel을 도킹 및 해제하는 메서드를 작성합니다.

csharp
Copy code
using DevExpress.Xpf.Docking;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void DockDocument(string caption)
        {
            DocumentPanel panel = new DocumentPanel()
            {
                Caption = caption,
                Content = new UserControl() // 여기에 실제 컨텐츠를 넣으세요
            };

            documentGroup.Add(panel);
        }

        private void UndockDocument(string caption)
        {
            var panel = documentGroup.Items.FirstOrDefault(p => p.Caption == caption) as DocumentPanel;
            if (panel != null)
            {
                documentGroup.Remove(panel);
            }
        }
    }
}
이 코드는 다음과 같은 기능을 수행합니다:

DockDocument: 새 DocumentPanel을 생성하고, DocumentGroup에 추가합니다.
UndockDocument: 특정 제목을 가진 DocumentPanel을 찾아 DocumentGroup에서 제거합니다.
사용 방법
DockDocument 메서드를 호출하여 새 문서 패널을 도킹합니다.
UndockDocument 메서드를 호출하여 특정 문서 패널을 해제합니다.
이 코드는 기본적인 도킹 및 해제 기능을 구현하는 데 사용됩니다. 실제 애플리케이션에 맞게 Content를 적절한 사용자 컨트롤로 교체하