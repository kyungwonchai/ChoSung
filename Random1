import pyodbc

# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
# ※ 사용자 설정 영역 ※
# 사용자의 데이터베이스 환경에 맞게 이 부분을 수정하세요.
# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

DB_SERVER = "your_server_ip_or_hostname"  # 예: "192.168.1.100"
DB_DATABASE = "your_database_name"        # 접속할 데이터베이스 이름
DB_USER = "your_username"                 # 데이터베이스 사용자 이름
DB_PASSWORD = "your_password"             # 데이터베이스 비밀번호
DB_PORT = 1433                            # MSSQL 포트 (기본값은 1433)

# ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

def query_mssql_with_pyodbc():
    """pyodbc를 사용하여 MSSQL 서버에 접속하고 쿼리를 실행합니다."""
    
    try:
        # 1. 연결 문자열(Connection String) 생성
        conn_str = (
            f"DRIVER={{ODBC Driver 18 for SQL Server}};"  # <-- 설치한 드라이버 이름
            f"SERVER={DB_SERVER},{DB_PORT};"
            f"DATABASE={DB_DATABASE};"
            f"UID={DB_USER};"
            f"PWD={DB_PASSWORD};"
            f"TrustServerCertificate=yes;"  # <-- 서버 인증서 신뢰 옵션
        )

        # 2. 데이터베이스 연결
        print("데이터베이스 서버에 연결을 시도합니다...")
        conn = pyodbc.connect(conn_str, timeout=10)
        cursor = conn.cursor()
        print("? 연결 성공!")

        # 3. SQL 쿼리 실행 (서버 현재 시간 조회)
        print("\n'SELECT GETDATE()' 쿼리를 실행합니다...")
        cursor.execute("SELECT GETDATE()")
        
        # 4. 결과 가져오기
        result_row = cursor.fetchone()

        if result_row:
            current_datetime = result_row[0]
            print(f"? 쿼리 성공! 서버 현재 시간: {current_datetime}")
        else:
            print("쿼리 결과가 없습니다.")

    except pyodbc.Error as ex:
        # 에러 메시지를 분리해서 명확하게 보여주기
        sqlstate = ex.args[0]
        print(f"? 데이터베이스 오류가 발생했습니다.")
        print(f"   [SQLSTATE]: {sqlstate}")
        print(f"   [에러 메시지]: {ex}")

    finally:
        # 5. 연결 종료
        if 'conn' in locals() and conn:
            conn.close()
            print("\n데이터베이스 연결을 종료했습니다.")


# 스크립트 실행
if __name__ == "__main__":
    query_mssql_with_pyodbc()