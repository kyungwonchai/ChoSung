# app.py
import os
import threading
from datetime import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_socketio import SocketIO

# --- 전역 상태 및 로깅 ---
IS_RASPBERRY_PI = os.uname().machine.startswith(('arm', 'aarch64')) if hasattr(os, 'uname') else False
EXPECTED_PI_API_KEY = os.getenv("PI_API_KEY", "SUPER_SECRET_KEY_FOR_PI")

def log(message):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

# --- LED 인덱스 <-> 슬롯 ID 변환 ---
def ledIndexToSlotId(index):
    if not (0 <= index < 792): return None
    SLOTS_PER_LEVEL, LEVELS_PER_RACK, RACKS_IN_A = 12, 3, 8
    SLOTS_PER_RACK = SLOTS_PER_LEVEL * LEVELS_PER_RACK
    
    rack_index_abs = index // SLOTS_PER_RACK
    slot_in_rack = index % SLOTS_PER_RACK
    
    section = 'A' if rack_index_abs < RACKS_IN_A else 'B'
    rack_num = (rack_index_abs + 1) if section == 'A' else (rack_index_abs - RACKS_IN_A + 1)
    
    level_index = slot_in_rack // SLOTS_PER_LEVEL
    slot_num_in_level = (slot_in_rack % SLOTS_PER_LEVEL) + 1
    
    level = {0: 'A', 1: 'B', 2: 'C'}[level_index]
    
    rack_id = f"{section}{str(rack_num).zfill(2)}"
    slot_id_num = str(slot_num_in_level).zfill(2)
    return f"{rack_id}-{level}-{slot_id_num}"

# --- LED 제어 로직 ---
if IS_RASPBERRY_PI:
    from rpi_ws281x import PixelStrip, Color
    class LedController:
        def __init__(self):
            self.LED_COUNT, self.LED_PIN, self.LED_BRIGHTNESS = 792, 18, 128
            self.strip = PixelStrip(self.LED_COUNT, self.LED_PIN, 800000, 10, False, self.LED_BRIGHTNESS)
            self.strip.begin()
            log("? 실제 LED 컨트롤러 초기화 완료 (Raspberry Pi).")
            self.turn_off_all()

        def light_up(self, index, duration):
            if not (0 <= index < self.LED_COUNT):
                log(f"?? [ERROR] LED 인덱스 {index}가 범위를 벗어남.")
                return
            self.turn_off_all()
            self.strip.setPixelColor(index, Color(255, 180, 0))
            self.strip.show()
            threading.Timer(duration, self.turn_off_all).start()

        def turn_off_all(self):
            for i in range(self.strip.numPixels()):
                self.strip.setPixelColor(i, Color(0, 0, 0))
            self.strip.show()
else: # 에뮬레이션 모드
    class LedController: # MockLedController in non-Pi
        def __init__(self): log("?? 에뮬레이션 모드로 LED 컨트롤러 초기화 (Not a Raspberry Pi).")
        def light_up(self, index, duration):
            log(f"?? [EMULATE] LED {index} 점등 ({duration}초).")
            threading.Timer(duration, lambda: log(f"? [EMULATE] LED {index} 자동 소등.")).start()
        def turn_off_all(self): log("? [EMULATE] 모든 LED 소등.")

# --- Flask 웹 서버 및 WebSocket 설정 ---
app = Flask(__name__, static_folder='.', static_url_path='')
socketio = SocketIO(app, async_mode='threading')
led_controller = LedController()

# --- API 엔드포인트 ---
@app.route('/api/v1/light-up', methods=['POST'])
def handle_light_up_request():
    data = request.get_json()
    if not data: return jsonify({"error": "Bad Request"}), 400

    if data.get('apiKey') != EXPECTED_PI_API_KEY:
        log(f"?? [AUTH] 인증 실패.")
        return jsonify({"error": "Unauthorized"}), 401

    led_index = data.get('ledIndex')
    if led_index is None or not isinstance(led_index, int) or led_index < 0:
        return jsonify({"error": "Invalid 'ledIndex'"}), 400

    log(f"? 인증 성공. LED {led_index} 점등 명령 실행.")
    led_controller.light_up(index=led_index, duration=11)
    
    slot_id = ledIndexToSlotId(led_index)
    if slot_id:
        socketio.emit('led_update', {'slotId': slot_id})
        log(f"?? WebSocket으로 UI 업데이트 전송: {slot_id}")

    return jsonify({"status": "success"}), 200

# --- 웹 UI 제공 라우트 ---
@app.route('/')
def index():
    return send_from_directory('.', 'index.html')

# WebSocket 연결 이벤트 핸들러
@socketio.on('connect')
def handle_connect():
    log(f"???  웹 브라우저 연결됨: {request.sid}")

if __name__ == "__main__":
    log("Flask 메인 서버 시작 (All-in-One)...")
    # use_reloader=False is important for threading.Timer to not run twice in debug mode
    socketio.run(app, host='0.0.0.0', port=5000, debug=True, use_reloader=False, allow_unsafe_werkzeug=True)
3. 웹 UI 코드 (`index.html`)
`~/led_controller` 폴더에 아래 내용으로 `index.html` 파일을 생성하세요. 이 파일 하나에 모든 UI와 로직이 포함되어 있습니다.

html
Copy
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>SMD Barcode LED Locator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <style>
      body { background-color: #111827; color: #f3f4f6; }
      .rack { background-color: #1f2937; border-color: #374151; }
      .rack-active { background-color: #0c4a6e; border-color: #0ea5e9; }
      .lightbar-active { background-color: #38bdf8; }
      .slot { background-color: #4b5563; border-color: #6b7280; }
      .slot-on { background-color: #facc15; border-color: #fde047; }
    </style>
  </head>
  <body class="font-sans">
    <div class="container mx-auto p-4 md:p-8">
      
      <header class="text-center mb-8">
        <h1 class="text-4xl font-extrabold tracking-tight text-white sm:text-5xl">SMD Component Locator</h1>
        <p class="mt-3 max-w-2xl mx-auto text-base text-gray-400 sm:text-lg">실시간 하드웨어 연동 현황판</p>
      </header>

      <div class="max-w-lg mx-auto bg-gray-800/50 border border-gray-700 p-6 rounded-xl shadow-lg mb-4">
        <div id="status-message" class="mb-4 p-4 rounded-lg text-center font-medium w-full transition-all duration-300 bg-blue-900/50 text-blue-200 border border-blue-700">
          시스템 대기 중...
        </div>
      </div>

      <div id="inventory-container" class="w-full mt-8 space-y-12">
        <!-- Racks will be rendered here by JavaScript -->
      </div>

    </div>

    <script>
      // --- APPLICATION STATE ---
      let state = {
        activeSlotId: null,
        activeRackId: null,
        autoOffTimer: null
      };

      // --- DOM ELEMENTS ---
      const inventoryContainer = document.getElementById('inventory-container');
      const statusMessageEl = document.getElementById('status-message');

      // --- INVENTORY DATA & LOGIC ---
      const inventoryLayout = (() => {
          const sections = [];
          const sectionConfigs = [{ id: 'A', rackCount: 8 }, { id: 'B', rackCount: 14 }];
          const levels = ['A', 'B', 'C'];
          const slotsPerLevel = 12;

          for (const sectionConfig of sectionConfigs) {
              const racks = [];
              for (let i = 1; i <= sectionConfig.rackCount; i++) {
                  const rackId = `${sectionConfig.id}${String(i).padStart(2, '0')}`;
                  const rackLevels = [];

                  for (const levelId of levels) {
                      const levelSlots = [];
                      for (let j = 1; j <= slotsPerLevel; j++) {
                          const slotIdNum = String(j).padStart(2, '0');
                          levelSlots.push({
                              id: `${rackId}-${levelId}-${slotIdNum}`,
                              barcode: `MMF10${rackId}${levelId}${slotIdNum}`,
                          });
                      }
                      rackLevels.push({ id: levelId, slots: levelSlots });
                  }
                  racks.push({ id: rackId, levels: rackLevels });
              }
              sections.push({ id: sectionConfig.id, racks: racks });
          }
          return sections;
      })();

      function renderInventory() {
        if (!inventoryContainer) return;
        inventoryContainer.innerHTML = inventoryLayout.map(section => `
          <div>
            <h2 class="text-3xl font-bold text-white mb-4 border-l-4 border-cyan-400 pl-4">Section ${section.id}</h2>
            <div class="overflow-x-auto pb-4 bg-gray-800/50 rounded-lg shadow-inner">
                <div class="inline-flex gap-4 p-4">
                ${section.racks.map(rack => `
                    <div class="w-36 flex-shrink-0">
                        <div class="rack flex flex-col p-2 rounded-lg border-2 transition-all duration-500 w-full h-full ${rack.id === state.activeRackId ? 'rack-active' : ''}">
                            <div class="h-1.5 rounded-full mb-2 transition-all duration-500 ${rack.id === state.activeRackId ? 'lightbar-active' : 'bg-gray-700'}"></div>
                            <h2 class="text-base font-bold text-center mb-2 text-white">${rack.id}</h2>
                            <div class="space-y-2 flex-grow">
                                ${rack.levels.map(level => `
                                <div class="bg-gray-900/50 p-1.5 rounded-md">
                                    <h3 class="text-xs text-gray-400 font-semibold mb-1.5 px-1">LEVEL ${level.id}</h3>
                                    <div class="grid grid-cols-12 gap-0.5">
                                    ${level.slots.map(slot => `
                                        <div class="flex justify-center">
                                            <div title="${slot.barcode}" class="slot w-2 h-12 rounded border transition-all duration-300 ease-in-out ${slot.id === state.activeSlotId ? 'slot-on' : ''}"></div>
                                        </div>
                                    `).join('')}
                                    </div>
                                </div>
                                `).join('')}
                            </div>
                        </div>
                    </div>
                `).join('')}
                </div>
            </div>
          </div>
        `).join('');
      }
      
      function updateStatusMessage(message, type = 'info') {
          if (!statusMessageEl) return;
          statusMessageEl.textContent = message;
          statusMessageEl.className = 'mb-4 p-4 rounded-lg text-center font-medium w-full transition-all duration-300 ';
          if (type === 'info') statusMessageEl.className += 'bg-blue-900/50 text-blue-200 border border-blue-700';
          if (type === 'success') statusMessageEl.className += 'bg-green-900/50 text-green-200 border border-green-700';
          if (type === 'error') statusMessageEl.className += 'bg-red-900/50 text-red-200 border border-red-700';
      }
      
      function clearAutoOffTimer() {
        if(state.autoOffTimer) clearTimeout(state.autoOffTimer);
        state.autoOffTimer = null;
      }
      
      function handleReset() {
          state.activeSlotId = null;
          state.activeRackId = null;
          updateStatusMessage('시스템 대기 중. MES의 다음 요청을 기다립니다.', 'info');
          clearAutoOffTimer();
          renderInventory();
      }

      // --- WEBSOCKET LOGIC ---
      function setupWebSocket() {
        const socket = io();
        socket.on('connect', () => {
          console.log('WebSocket Connected!');
          updateStatusMessage('실시간 연결 성공. MES 요청 대기 중입니다.', 'info');
        });

        socket.on('led_update', (data) => {
          const { slotId } = data;
          if (slotId) {
            const [rackId, level, slotNum] = slotId.split('-');
            state.activeSlotId = slotId;
            state.activeRackId = rackId;
            updateStatusMessage(`[실시간] MES 요청! 랙 ${rackId}, ${level}층, ${slotNum}번 점등`, 'success');
            
            clearAutoOffTimer();
            state.autoOffTimer = setTimeout(handleReset, 11000);
            renderInventory();
          }
        });
        
        socket.on('disconnect', () => {
             updateStatusMessage('실시간 연결 끊김. 재연결을 시도합니다...', 'error');
        });
      }

      // --- INITIALIZATION ---
      document.addEventListener('DOMContentLoaded', () => {
        renderInventory();
        setupWebSocket();
      });
    </script>
  </body>
</html>
4. 운영 배포 및 자동 실행 (systemd + Gunicorn)
systemd 서비스를 등록하여 시스템 재부팅 시에도 서버가 자동으로 실행되도록 설정합니다.

1. systemd 서비스 파일 생성
bash
Copy
sudo nano /etc/systemd/system/led_controller.service
에디터가 열리면 아래 내용을 붙여넣고 저장합니다.

ini
Copy
[Unit]
Description=Main Application Server (Flask + SocketIO) for LED Controller
After=network.target

[Service]
User=root
WorkingDirectory=/home/pi/led_controller
Environment="PATH=/home/pi/led_controller/venv/bin"
ExecStart=/home/pi/led_controller/venv/bin/gunicorn --worker-class eventlet -w 1 --bind 0.0.0.0:5000 app:app
Restart=always

[Install]
WantedBy=multi-user.target
2. 서비스 활성화 및 시작
아래 명령어를 실행하여 서비스를 시스템에 등록하고 시작합니다. `status` 명령으로 정상 동작하는지 확인하고, `journalctl`로 로그를 실시간으로 볼 수 있습니다.

bash
Copy
sudo systemctl daemon-reload
sudo systemctl enable led_controller.service
sudo systemctl start led_controller.service

# --- 상태 확인 및 로그 보기 ---
sudo systemctl status led_controller.service
journalctl -u led_controller.ser