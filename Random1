했습니다. 상단에는 각 **라인(LineName)**별로 최근 100개의 데이터를 기반으로 **박스플롯(Box Plot)**을 표시하고, 사용자가 특정 박스플롯을 선택하면 해당 라인의 최근 500개의 데이터를 하단의 좌측(L) 또는 우측(R) 차트에 **선 그래프(Line Chart)**로 표시하는 기능을 구현하겠습니다.

구현 계획
데이터 로드 및 전처리:

데이터베이스에서 데이터를 로드하고, 각 라인별로 최근 100개 및 최근 500개의 데이터를 추출합니다.
상단 박스플롯 차트 초기화:

각 라인별로 최근 100개의 데이터를 기반으로 박스플롯을 생성합니다.
하단 선 그래프 차트 초기화:

초기 상태에서는 빈 차트로 두고, 사용자가 상단의 박스플롯을 선택하면 해당 라인의 최근 500개의 데이터를 로드하여 선 그래프로 표시합니다.
상호작용 구현:

상단 박스플롯에서 특정 시리즈를 선택하면 해당 라인의 데이터를 하단의 적절한 차트(L 또는 R)에 로드하여 표시합니다.
구현 코드
아래는 위의 계획을 반영한 WPF 애플리케이션의 XAML 및 C# 코드입니다.

XAML (MainWindow.xaml):

xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Line Data Viewer" Height="900" Width="1200">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*" />
            <RowDefinition Height="1.5*" />
            <RowDefinition Height="1.5*" />
        </Grid.RowDefinitions>

        <!-- 상단 박스플롯 차트 -->
        <dxc:ChartControl Grid.Row="0" x:Name="BoxPlotChart" SelectionChanged="BoxPlotChart_SelectionChanged">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Line Name" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Values" />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 L 모델 차트 -->
        <dxc:ChartControl Grid.Row="1" x:Name="LModelChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Values" />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 R 모델 차트 -->
        <dxc:ChartControl Grid.Row="2" x:Name="RModelChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Values" />
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# (MainWindow.xaml.cs):

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            InitializeBoxPlotChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void InitializeBoxPlotChart()
        {
            var lineGroups = allData.GroupBy(d => d.ModelName);

            foreach (var group in lineGroups)
            {
                var recentData = group.Take(100).ToList();

                for (int i = 1; i <= 5; i++)
                {
                    var mpValues = recentData.Select(d => (double)d.GetType().GetProperty($"MP{i}").GetValue(d)).ToList();
                    if (mpValues.Count > 0)
                    {
                        var series = new BoxPlotSeries2D
                        {
                            DisplayName = $"{group.Key} - MP{i}",
                            ArgumentDataMember = "Argument",
                            MinValueDataMember = "Min",
                            Quartile1ValueDataMember = "Quartile1",
                            MedianValueDataMember = "Median",
                            Quartile3ValueDataMember = "Quartile3",
                            MaxValueDataMember = "Max",
                            DataSource = new List<BoxPlotData>
                            {
                                new BoxPlotData
                                {
                                    Argument = $"{group.Key} - MP{i}",
                                    Min = mpValues.Min(),
                                    Quartile1 = GetPercentile(mpValues, 25),
                                    Median = Get
::contentReference[oaicite:0]{index=0}
 





나의 말:
끊어졌다 이어라
ChatGPT의 말:
ChatGPT
이전에 제공한 코드에서 상단의 박스플롯을 클릭하면 해당 라인의 최근 500개 데이터를 하단의 L 또는 R 모델 차트에 선 그래프로 표시하도록 구현하였습니다. 그러나 코드가 중간에 끊어져 완전한 기능을 제공하지 못했습니다. 아래는 해당 기능을 완전히 구현한 코드입니다.

C# (MainWindow.xaml.cs):

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            InitializeBoxPlotChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void InitializeBoxPlotChart()
        {
            var lineGroups = allData.GroupBy(d => d.ModelName);

            foreach (var group in lineGroups)
            {
                var recentData = group.Take(100).ToList();

                for (int i = 1; i <= 5; i++)
                {
                    var mpValues = recentData.Select(d => (double)d.GetType().GetProperty($"MP{i}").GetValue(d)).ToList();
                    if (mpValues.Count > 0)
                    {
                        var series = new BoxPlotSeries2D
                        {
                            DisplayName = $"{group.Key} - MP{i}",
                            ArgumentDataMember = "Argument",
                            MinValueDataMember = "Min",
                            Quartile1ValueDataMember = "Quartile1",
                            MedianValueDataMember = "Median",
                            Quartile3ValueDataMember = "Quartile3",
                            MaxValueDataMember = "Max",
                            DataSource = new List<BoxPlotData>
                            {
                                new BoxPlotData
                                {
                                    Argument = $"{group.Key} - MP{i}",
                                    Min = mpValues.Min(),
                                    Quartile1 = GetPercentile(mpValues, 25),
                                    Median = GetPercentile(mpValues, 50),
                                    Quartile3 = GetPercentile(mpValues, 75),
                                    Max = mpValues.Max()
                                }
                            }
                        };
                        series.Tag = group.Key; // 시리즈에 라인 이름을 태그로 저장
                        BoxPlotChart.Diagram.Series.Add(series);
                    }
                }
            }
        }

        private void BoxPlotChart_SelectionChanged(object sender, ChartSelectionChangedEventArgs e)
        {
            var selectedSeries = e.SelectedItems.OfType<BoxPlotSeries2D>().FirstOrDefault();
            if (selectedSeries != null)
            {
                var lineName = selectedSeries.Tag.ToString();
                LoadLineData(lineName);
            }
        }

        private void LoadLineData(string lineName)
        {
            var lineData = allData.Where(d => d.ModelName == lineName).Take(500).ToList();

            var lModelData = lineData.Where(d => d.ModelName.EndsWith("L")).ToList();
            var rModelData = lineData.Where(d => d.ModelName.EndsWith("R")).ToList();

            InitializeModelChart(LModelChart, lModelData, "Timestamp", "Values");
            InitializeModelChart(RModelChart, rModelData, "Timestamp", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle)
        {
            chart.Diagram.Series.Clear();

            for (int i = 1; i <= 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"MP{i}",
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i}",
                    Tag = $"MP{i}",
                    CheckedInLegend = true
                };
                chart.Diagram.Series.Add(series);
            }

            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = Visibility.Visible };
        }

        private double GetPercentile(List<double> sortedData, double percentile)
        {
            if (sortedData.Count == 0)
                return double.NaN;

            sortedData.Sort();
            double realIndex = percentile / 100.0 * (sortedData.Count - 1);
            int index = (int)realIndex;
            double frac = realIndex - index;

            if (index + 1 < sortedData.Count)
                return sortedData[index] * (1 - frac) + sortedData[index + 1] * frac;
            else
                return sortedData[index];
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class BoxPlotData
    {
        public string Argument { get; set; }
        public double Min { get; set; }
        public double Quartile1 { get; set; }
        public double Median { get; set; }
        public double Quartile3 { get; set; }
        public double Max { get; set; }
    }
}
주요 변경 사항:

박스플롯 시리즈에 태그 추가:

각 박스플롯 시리즈의 Tag 속성에 해당 라인의 이름을 저장하여, 선택 시 어떤 라인인지 식별할 수 있도록 하였습니다.
박스플롯 선택 이벤트 핸들러 추가: