는 DevExpress WPF ChartControl을 사용하는 전체 구현 코드입니다. 왼쪽에 라인 목록, 날짜 검색 구간, 선택 조회 버튼, 자동 갱신 옵션을 포함하여 데이터를 조회하고 차트에 반영하는 기능을 구현했습니다.

XAML 코드
xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 컨트롤 -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <dx:CheckListBoxEdit x:Name="LineCheckListBox" DisplayMember="LineName" ValueMember="LineID" 
                                 SelectionMode="Multiple" CheckMode="Multiple" />

            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dx:DateEdit x:Name="StartDatePicker" EditValue="{x:Static sys:DateTime.Now}" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dx:DateEdit x:Name="EndDatePicker" EditValue="{x:Static sys:DateTime.Now}" />
            </StackPanel>

            <CheckBox x:Name="AutoRefreshCheckBox" Content="자동 갱신" Margin="0,20,0,10" />
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <dxc:ChartControl x:Name="LineChart" Grid.Column="1" Margin="10">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.WholeRange>
                                <dxc:Range MinValue="-1" MaxValue="1" />
                            </dxc:AxisY2D.WholeRange>
                            <dxc:AxisY2D.ConstantLines>
                                <dxc:ConstantLine Value="0.6" Brush="Green">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Upper Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                                <dxc:ConstantLine Value="-0.6" Brush="Red">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Lower Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                            </dxc:AxisY2D.ConstantLines>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using DevExpress.Xpf.Editors;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Timers;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private Timer autoRefreshTimer;
        private List<LineInfo> lineList;
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadLineList();
            SetupAutoRefresh();
        }

        private void LoadLineList()
        {
            lineList = new List<LineInfo>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = "SELECT LineID, LineName FROM LineTable"; // 라인 목록 조회

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        lineList.Add(new LineInfo
                        {
                            LineID = reader.GetInt32(0),
                            LineName = reader.GetString(1)
                        });
                    }
                }
            }

            LineCheckListBox.ItemsSource = lineList;
            LineCheckListBox.SelectAll(); // 기본적으로 전체 선택
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = LineCheckListBox.SelectedItems.Cast<LineInfo>().ToList();
            var startDate = StartDatePicker.DateTime;
            var endDate = EndDatePicker.DateTime;

            if (selectedLines.Any())
            {
                LoadChartData(selectedLines, startDate, endDate);
            }
            else
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }

        private void LoadChartData(List<LineInfo> selectedLines, DateTime startDate, DateTime endDate)
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT LineID, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    WHERE LineID IN (@LineIDs) AND Timestamp BETWEEN @StartDate AND @EndDate";

                var lineIds = string.Join(",", selectedLines.Select(l => l.LineID));

                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@LineIDs", lineIds);
                    command.Parameters.AddWithValue("@StartDate", startDate);
                    command.Parameters.AddWithValue("@EndDate", endDate);

                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            allData.Add(new DataPoint
                            {
                                LineID = reader.GetInt32(0),
                                Timestamp = reader.GetDateTime(1),
                                MP1 = reader.GetDouble(2),
                                MP2 = reader.GetDouble(3),
                                MP3 = reader.GetDouble(4),
                                MP4 = reader.GetDouble(5),
                                MP5 = reader.GetDouble(6),
                            });
                        }
                    }
                }
            }

            UpdateChart();
        }

        private void UpdateChart()
        {
            var diagram = LineChart.Diagram as XYDiagram2D;
            if (diagram == null) return;

            diagram.Series.Clear();

            foreach (var lineGroup in allData.GroupBy(d => d.LineID))
            {
                for (int i = 1; i <= 5; i++)
                {
                    var series = new LineSeries2D
                    {
                        DisplayName = $"Line {lineGroup.Key} MP{i}",
                        DataSource = lineGroup.ToList(),
                        ArgumentDataMember = "Timestamp",
                        ValueDataMember = $"MP{i}",
                        MarkerVisible = true
                    };
                    diagram.Series.Add(series);
                }
            }
        }

        private void SetupAutoRefresh()
        {
            autoRefreshTimer = new Timer(10000); // 10초마다 갱신
            autoRefreshTimer.Elapsed += (s, e) =>
            {
                if (AutoRefreshCheckBox.IsChecked == true)
                {
                    Dispatcher.Invoke(() => SearchButton_Click(null, null));
                }
            };
            autoRefreshTimer.Start();
        }
    }

    public class LineInfo
    {
        public int LineID { get; set; }
        public string LineName { get; set; }
    }

    public class DataPoint
    {
        public int LineID { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 변경 사항
라인 목록 로드:

LineTable에서 LineID와 LineName을 조회하여 CheckListBoxEdit에 바인딩.
기본적으로 모든 라인을 선택.
조회 버튼:

선택된 라인과 날짜 구간을 기준으로 데이터를 조회.
SQL 쿼리에 파라미터로 LineIDs와 Timestamp를 추가.
자동 갱신:

Timer를 사용하여 일정 간격(10초)으로 데이터 갱신.
차트 업데이트:

LineSeries2D를 사용하여 라인별로 선 차트를 추가.