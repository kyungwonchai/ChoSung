겠습니다. 새 탭에 도킹할 때 새로운 페이지 또는 윈도우를 생성하여 텍스트 박스를 포함하는 구조로 만들어보겠습니다. 여기서는 새로운 윈도우를 생성하여 도킹하는 예제를 보여드리겠습니다.

1. MainWindow.xaml
xml
코드 복사
<Window x:Class="ClipboardApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        Title="Clipboard App" Height="350" Width="525">
    <Grid>
        <dx:DockLayoutManager x:Name="dockLayoutManager">
            <dx:LayoutGroup>
                <dx:LayoutPanel x:Name="myPanel" Caption="My Panel">
                    <TextBox x:Name="myTextBox"/>
                </dx:LayoutPanel>
            </dx:LayoutGroup>
        </dx:DockLayoutManager>
    </Grid>
</Window>
2. NewWindow.xaml
새로운 윈도우를 생성하여 클립보드 내용을 표시하는 TextBox를 포함합니다.

xml
코드 복사
<Window x:Class="ClipboardApp.NewWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="New Window" Height="300" Width="400">
    <Grid>
        <TextBox x:Name="newTextBox" />
    </Grid>
</Window>
3. MainWindow.xaml.cs
새로운 윈도우를 생성하고 도킹하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.Runtime.InteropServices;
using System.Windows;
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Layout.Core;

namespace ClipboardApp
{
    public partial class MainWindow : DXWindow
    {
        // 외부 DLL 호출
        [DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
        [DllImport("user32.dll")]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        public MainWindow()
        {
            InitializeComponent();
            LoadClipboardContent();
        }

        private void LoadClipboardContent()
        {
            if (Clipboard.ContainsText())
            {
                string clipboardText = Clipboard.GetText();
                myTextBox.Text = clipboardText;
            }
        }

        private void DockNewWindow(string content)
        {
            NewWindow newWindow = new NewWindow
            {
                Owner = this
            };
            newWindow.newTextBox.Text = content;

            var newPanel = new LayoutPanel
            {
                Content = newWindow.Content,
                Caption = "New Tab"
            };

            dockLayoutManager.DockController.Dock(newPanel, dockLayoutManager.LayoutRoot, DockType.Fill);
        }

        public static void ActivateExistingInstance()
        {
            IntPtr hWnd = FindWindow(null, "Clipboard App");
            if (hWnd != IntPtr.Zero)
            {
                SetForegroundWindow(hWnd);
                ((MainWindow)Application.Current.MainWindow).DockNewWindow(Clipboard.GetText());
            }
        }
    }
}
4. App.xaml.cs
중복 실행을 방지하고 기존 인스턴스를 활성화하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.Threading;
using System.Windows;

namespace ClipboardApp
{
    public partial class App : Application
    {
        private static Mutex mutex = null;

        protected override void OnStartup(StartupEventArgs e)
        {
            const string appName = "ClipboardApp";
            bool createdNew;

            mutex = new Mutex(true, appName, out createdNew);

            if (!createdNew)
            {
                MainWindow.ActivateExistingInstance();
                Application.Current.Shutdown();
                return;
            }

            base.OnStartup(e);
        }
    }
}
5. NewWindow.xaml.cs
새로운 윈도우의 코드 비하인드를 추가합니다.

csharp
코드 복사
using System.Windows;

namespace ClipboardApp
{
    public partial class NewWindow : Window
    {
        public NewWindow()
        {
            InitializeComponent();
        }
    }
}
위의 코드는 다음과 같은 작업을 수행합니다:

프로그램 실행 시 클립보드 내용을 가져와 TextBox에 넣습니다.
새로운 클립보드 내용을 포함하는 윈도우를 생성합니다.
생성된 윈도우를 새로운 탭으로 도킹합니다.
중복 실행 시 기존 인스턴스를 활성화하고 새로운 탭을 추가합니다.
이를 통해 사용자 요구사항을 충족하는 프로그램을 만들 수 있습니다. 필요한 경우 이 코드를 확장하거나 수정하여 추가 기능을 구현할 수