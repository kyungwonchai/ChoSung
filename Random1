네, 이 상황은 '의존성 지옥(Dependency Hell)'이라고 불리는 매우 어렵고 실패 확률이 높은 작업입니다. 😥

GitHub에서 받은 .zip 파일은 해당 라이브러리의 소스 코드일 뿐, 그 라이브러리가 동작하기 위해 필요한 **수많은 '부품(의존성 패키지)'**들을 포함하고 있지 않습니다.

apt-get과 pip가 인터넷이 안 된다면, 이 모든 '부품'들을 인터넷이 되는 PC에서 수동으로 하나씩 다 찾아서 USB로 옮겨와야 합니다.

아래는 그 처절하고 아주 상세한 과정입니다.

0단계: 마음가짐
이 작업은 한 번에 성공할 확률이 0%에 가깝습니다.

[실행 ➔ 에러 확인 ➔ USB 들고 인터넷 PC로 이동 ➔ 파일 다운로드 ➔ USB 들고 오프라인 Pi로 이동 ➔ 설치] 이 과정을 최소 10번 이상 반복할 각오를 하셔야 합니다.

가장 큰 문제는 (A) 파이썬 의존성과 (B) 시스템 의존성이라는 두 종류의 '부품'을 모두 해결해야 한다는 것입니다.

1단계: [오프라인 Pi 5] 소스 코드 압축 해제 및 첫 설치 시도
먼저, 가지고 있는 .zip 파일로 설치를 시도하고, 어떤 '부품'이 없어서 실패하는지 에러 메시지를 확인해야 합니다.

USB에 있는 .zip 파일을 라즈베리파이 5의 홈 디렉터리 등으로 복사합니다.

Bash

# 예시: /media/my_usb/rpi-ws281x-python.zip 파일을 홈으로 복사
cp /media/my_usb/rpi-ws281x-python.zip ~
cd ~
압축을 풉니다.

Bash

unzip rpi-ws281x-python.zip
압축이 풀린 폴더로 이동합니다.

Bash

cd rpi-ws281x-python  # (폴더 이름은 다를 수 있습니다)
첫 번째 설치 시도 (당연히 실패합니다):

pip를 사용한 설치를 시도합니다. (가장 표준적인 방법)

이때 인터넷 접속을 막고, 현재 폴더에서만 부품을 찾으라고 명령합니다.

Bash

# (반드시 sudo로 실행해야 합니다)
sudo pip3 install . --no-index --find-links .
2단계: (A) '파이썬 의존성' 해결 (무한 루프)
이제 첫 번째 에러 메시지를 마주하게 됩니다.

🔴 에러 예시 1
ERROR: Could not find a version that satisfies the requirement adafruit-blinka (from versions: none)
ERROR: No matching distribution found for adafruit-blinka
이것은 adafruit-blinka라는 **파이썬 '부품'**이 없다는 뜻입니다.

[인터넷 PC] 💻

웹 브라우저에서 pypi.org (파이썬 패키지 저장소)에 접속합니다.

adafruit-blinka를 검색합니다.

'Download files' 탭으로 이동합니다.

.whl (휠) 파일을 다운로드합니다. (중요!)

주의: 라즈베리파이 5(64비트 OS)에 맞는 파일을 받아야 합니다. (예: ...cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl) 만약 aarch64가 없다면 .tar.gz (소스) 파일을 받습니다.

[오프라인 Pi 5] 🥧

다운로드한 .whl 파일을 USB로 옮겨와서, 아까 압축 푼 폴더(예: ~/rpi-ws281x-python) 안에 whl_packages 같은 폴더를 만들어 넣어둡니다.

설치 재시도:

Bash

# --find-links 에 방금 만든 whl_packages 폴더를 지정
sudo pip3 install . --no-index --find-links ./whl_packages
🔴 에러 예시 2
adafruit-blinka를 넣어주니, 이번엔 다른 에러가 뜹니다.

ERROR: Could not find a version that satisfies the requirement spidev (from versions: none)
ERROR: No matching distribution found for spidev
spidev라는 **또 다른 '부품'**이 없다는 뜻입니다.

[인터넷 PC] 💻

다시 pypi.org에 가서 spidev를 검색하고 .whl 파일을 다운로드합니다.

[오프라인 Pi 5] 🥧

다운로드한 spidev-xxx.whl 파일도 USB로 옮겨 whl_packages 폴더에 넣습니다.

설치 재시도: (명령어는 동일)

Bash

sudo pip3 install . --no-index --find-links ./whl_packages
... 이 과정을 ImportError나 No matching distribution 에러가 더 이상 뜨지 않을 때까지 반복합니다. ...

3단계: (B) '시스템 의존성' 해결 (최대 고비)
파이썬 '부품'을 모두 모으면, pip는 이제 C언어로 된 소스 코드를 **'컴파일(빌드)'**하려고 시도합니다. 이때 **두 번째 종류의 '부품'**인 시스템 라이브러리가 필요합니다.

🔴 에러 예시 3 (컴파일러 없음)
Error: command 'gcc' failed: No such file or directory
이것은 C 코드를 컴파일할 gcc 컴파일러가 없다는 뜻입니다. gcc는 build-essential 패키지에 포함되어 있습니다.

🔴 에러 예시 4 (헤더 파일 없음)
fatal error: Python.h: No such file or directory
이것은 파이썬 C API 개발 파일(python3-dev)이 없다는 뜻입니다.

🔴 에러 예시 5 (라이브러리 없음)
fatal error: gpiod.h: No such file or directory
이것은 libgpiod 라이브러리 개발 파일(libgpiod-dev)이 없다는 뜻입니다.

4단계: '시스템 의존성' 수동 해결 (.deb 파일 사냥)
apt-get이 안 되므로, 이 시스템 '부품'들은 .deb 확장자 파일로 직접 가져와야 합니다.

[인터넷 PC] 💻 (가급적 동일한 OS 버전의 다른 라즈베리파이 5)

apt-get download 명령을 사용하거나, packages.debian.org 사이트에서 수동으로 검색합니다.

필수 패키지:

build-essential

python3-dev

libgpiod-dev (또는 libgpiod2)

명령어 (인터넷 Pi):

Bash

# 다운로드할 폴더 생성
mkdir deb_packages
cd deb_packages

# 필요한 .deb 파일들을 '설치 없이' 다운로드만 받기
apt-get download build-essential python3-dev libgpiod-dev

# (중요!) 이 패키지들의 의존성까지 받아야 합니다.
# 하지만 apt-get download는 의존성까지 받아주진 않습니다.
# 그래서 '의존성 지옥'이 시작됩니다.
[오프라인 Pi 5] 🥧

다운로드한 .deb 파일들을 USB로 가져옵니다. (예: ~/deb_files)

dpkg 명령으로 설치합니다.

Bash

cd ~/deb_files
sudo dpkg -i *.deb
🔴 또 다른 실패: dpkg 명령은 십중팔구 또 다른 의존성 문제로 실패합니다.

dpkg: dependency problems prevent configuration of python3-dev:
 python3-dev depends on libpython3-dev (= 3.11.2-1); however:
  Package libpython3-dev is not installed.
이것은 python3-dev를 설치하려면 libpython3-dev가 먼저 필요하다는 뜻입니다.

[인터넷 PC] 💻

다시 인터넷 PC로 가서 apt-get download libpython3-dev를 실행합니다.

[오프라인 Pi 5] 🥧

가져와서 sudo dpkg -i libpython3-dev_*.deb를 실행합니다.

...

이 과정을 시스템 의존성 에러가 더 이상 발생하지 않을 때까지 반복합니다.

5단계: 최종 설치 시도
모든 파이썬 부품(.whl)과 모든 시스템 부품(.deb)이 성공적으로 설치되었다면, 드디어 원래의 설치 명령이 성공할 수 있습니다.

원래의 소스 코드 폴더로 돌아갑니다.

Bash

cd ~/rpi-ws281x-python
최종 설치 명령을 다시 실행합니다.

Bash

sudo pip3 install . --no-index --find-links ./whl_packages
컴파일이 진행되고 Successfully installed ... 메시지가 보이면 성공입니다.

결론 및 '진짜' 해결책
보시다시피, .zip 파일 하나만 달랑 들고 와서 설치하는 것은 사실상 불가능에 가까운 고행입니다.

가장 현실적이고 올바른 방법은, 인터넷이 되는 동일한 환경의 Pi 5에서 미리 모든 부품을 다운로드하는 것입니다. (이것이 제가 이전 답변에서 pip download를 설명드린 이유입니다.)

[인터넷 Pi] mkdir packages && cd packages

[인터넷 Pi] (파이썬 부품) pip download rpi-ws281x adafruit-circuitpython-neopixel

[인터넷 Pi] (시스템 부품) apt-get download build-essential python3-dev libgpiod-dev (그리고 이것들이 의존하는 수십 개의 추가 .deb 파일들...)