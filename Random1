, 두 가지 문제를 정확히 짚어주셨습니다.

콘솔에 비밀번호가 노출되는 문제

마지막에 'exit status 1' 오류가 발생하는 문제

두 문제는 서로 다른 원인이며, 모두 해결 가능합니다. 설정 자체는 거의 완료되었을 가능성이 높습니다.

## 1. 비밀번호가 노출된 원인
이것은 보안상으로 수정이 반드시 필요한 부분입니다.

원인: 자동화 스크립트가 라즈베리파이의 가상 터미널 화면을 그대로 복사해서 보여주기 때문입니다.
쉽게 비유하자면, 자동화 스크립트가 로봇 팔이 되어 가상 키보드에 비밀번호를 타이핑하고, 우리 코드의 print(stdout_output) 부분이 그 가상 모니터 화면을 그대로 우리 눈앞에 보여주는 것과 같습니다. 이 때문에 로봇 팔이 입력한 비밀번호까지 보이게 된 것입니다.

해결책: run_sudo_command 함수 내에서 화면 전체를 출력하는 print(stdout_output) 코드를 제거하면 간단히 해결됩니다.

## 2. 'exit status 1' 오류가 발생한 이유
이 오류는 Watchdog 설정이 실패해서가 아니라, 마지막의 "상태 확인" 단계에서 발생한 것입니다.

원인: systemctl status watchdog 명령어는 서비스 상태에 따라 다른 종료 코드(exit status)를 반환합니다.

정상 실행 중 (active/running): 종료 코드 0

정상 종료됨 (inactive/dead): 종료 코드 3

실패 또는 알 수 없는 상태: 종료 코드 1 또는 다른 숫자

우리 파이썬 코드는 종료 코드가 0이 아니면 무조건 "실패"로 간주하도록 만들어져 있습니다. 따라서 systemctl status가 3이나 1을 반환하자, 코드가 "명령어 실패!" 예외를 발생시키고 멈춘 것입니다.

해결책: 마지막 systemctl status 명령어를 실행할 때만, 종료 코드가 0이 아니더라도 예외를 발생시키지 않도록 코드를 수정해야 합니다.

## 3. 해결책: 수정된 최종 코드
위 두 가지 문제를 모두 해결한 최종 파이썬 스크립트입니다. 수정된 부분에 주석으로 표시해 두었습니다.

Python

import paramiko
import io
import time

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# 라즈베리파이 접속 정보
REMOTE_HOST = '192.168.0.10'
REMOTE_PORT = 22
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password'

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder"
MAX_DELAY_SECONDS = 300

# 부팅 후 무한 재부팅 방지를 위한 유예 기간 (Grace Period)
BOOT_GRACE_PERIOD_SECONDS = 1320 # (22 * 60)
# ===============================================================

def run_sudo_command(ssh_client, command, password, allow_any_exit=False):
    """
    SSH 클라이언트에서 단일 sudo 명령어를 실행하고 결과를 반환합니다.
    allow_any_exit 파라미터가 추가되었습니다.
    """
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        stdin.write(password + '\n')
        stdin.flush()
        
        exit_status = stdout.channel.recv_exit_status()
        
        # [수정 1] 비밀번호 노출을 막기 위해 stdout_output 변수와 print 구문을 제거했습니다.
        # 이제 터미널 화면 내용을 그대로 출력하지 않습니다.
        stderr_output = stderr.read().decode('utf-8').strip()

        # [수정 2] allow_any_exit 플래그가 True가 아니고, 종료 코드가 0이 아닐 때만 예외를 발생시킵니다.
        if not allow_any_exit and exit_status != 0:
            if "sudo" in stderr_output.lower():
                 raise Exception(f"Sudo command failed. Check password or sudoers config. Error: {stderr_output}")
            raise Exception(f"Command '{command}' failed with exit status {exit_status}. Error: {stderr_output}")
            
        # 상태 확인 명령어의 출력을 보기 위해 별도로 처리
        if "systemctl status" in command:
            # 상태 확인 명령어는 stdout을 직접 읽어와서 출력해줍니다.
            status_output = stdout.read().decode('utf-8').strip()
            print("--- Service Status ---")
            print(status_output)
            print("----------------------")

        return True, f"Command '{command}' executed."
    except Exception as e:
        return False, str(e)


def setup_watchdog_on_remote(hostname, port, username, password, target_folder, max_delay, grace_period):
    """원격 라즈베리파이에 접속하여 수정된 Watchdog 설정을 자동화하는 메인 함수"""
    ssh_client = None
    try:
        print("Connecting to Raspberry Pi...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port=port, username=username, password=password, timeout=10)
        sftp = ssh_client.open_sftp()
        print("Connection successful.")

        check_script_path = "/etc/watchdog.d/quick_folder_check.sh"
        check_script_content = f"""#!/bin/bash
TARGET_FOLDER="{target_folder}"
MAX_DELAY={max_delay}
GRACE_PERIOD={grace_period}

UPTIME=$(cut -d' ' -f1 /proc/uptime | cut -d'.' -f1)

if [ "$UPTIME" -lt "$GRACE_PERIOD" ]; then
  exit 0
fi

if [ ! -d "$TARGET_FOLDER" ]; then
    exit 1
fi

LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))

if [ $TIME_DIFF -gt $MAX_DELAY ]; then
    exit 1
else
    exit 0
fi
"""
        print("Uploading updated check script...")
        temp_script_path = "/tmp/quick_folder_check.sh"
        
        sftp.putfo(io.BytesIO(check_script_content.encode('utf-8')), temp_script_path)
        
        run_sudo_command(ssh_client, "sudo mkdir -p /etc/watchdog.d", password)
        
        success, msg = run_sudo_command(ssh_client, f"sudo mv {temp_script_path} {check_script_path}", password)
        if not success: raise Exception(msg)
        
        success, msg = run_sudo_command(ssh_client, f"sudo chmod +x {check_script_path}", password)
        if not success: raise Exception(msg)
        print("Check script setup complete.")

        config_path = "/etc/watchdog.conf"
        config_content = f"""
watchdog-device        = /dev/watchdog
watchdog-timeout       = 15
interval               = 10
test-binary            = {check_script_path}
test-timeout           = 5
"""
        print(f"Uploading watchdog config to {config_path}...")
        temp_config_path = "/tmp/watchdog.conf"

        sftp.putfo(io.BytesIO(config_content.strip().encode('utf-8')), temp_config_path)

        success, msg = run_sudo_command(ssh_client, f"sudo mv {temp_config_path} {config_path}", password)
        if not success: raise Exception(msg)

        run_sudo_command(ssh_client, f"sudo chown root:root {config_path}", password)
        run_sudo_command(ssh_client, f"sudo chmod 644 {config_path}", password)
        print("Watchdog config setup complete.")

        print("Restarting watchdog service...")
        success, msg = run_sudo_command(ssh_client, "sudo systemctl restart watchdog", password)
        if not success: raise Exception(msg)
        print("Watchdog service restarted.")
        
        time.sleep(2)
        print("\nVerifying watchdog service status...")
        # [수정 3] 마지막 상태 확인 시에는 어떤 종료 코드가 와도 예외를 발생시키지 않도록 allow_any_exit=True를 추가합니다.
        run_sudo_command(ssh_client, "sudo systemctl status watchdog --no-pager -l", password, allow_any_exit=True)

        sftp.close()
        return (True, "Watchdog setup on Raspberry Pi completed successfully!")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("\nConnection closed.")


if __name__ == "__main__":
    success, message = setup_watchdog_on_remote(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        password=REMOTE_PASSWORD,
        target_folder=TARGET_FOLDER_TO_WATCH,
        max_delay=MAX_DELAY_SECONDS,
        grace_period=BOOT_GRACE_PERIOD_SECONDS
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")