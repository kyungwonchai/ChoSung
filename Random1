습니다, 완전한 코드 예시를 제공하겠습니다. 이 코드는 XAML에서 차트 UI를 정의하고, 데이터를 주기적으로 업데이트하는 UserControl을 포함합니다. UserControl은 메인 윈도우에서 인스턴스화되고, 주기적으로 새로운 데이터를 받아 차트를 업데이트합니다.

1. UserControl XAML 정의
ChartUserControl.xaml

xml
Copy code
<UserControl x:Class="YourNamespace.ChartUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
             xmlns:local="clr-namespace:YourNamespace">
    <Grid>
        <dxc:ChartControl x:Name="chartControl">
            <dxc:ChartControl.Legend>
                <dxc:Legend HorizontalPosition="RightOutside" VerticalPosition="Top" Orientation="Vertical"/>
            </dxc:ChartControl.Legend>
            <dxc:XYDiagram2D x:Name="diagram">
                <!-- 시리즈 및 축 설정은 코드에서 수행 -->
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
    </Grid>
</UserControl>
2. UserControl 코드 뒷면
ChartUserControl.xaml.cs

csharp
Copy code
public partial class ChartUserControl : UserControl
{
    private const int MaxDataPoints = 100;

    public ChartUserControl()
    {
        InitializeComponent();
    }

    public void InitializeChartData(string line)
    {
        var seriesT = new LineSeries2D { DisplayName = "T" };
        var seriesB = new LineSeries2D { DisplayName = "B" };

        seriesT.DataSource = new ObservableCollection<ChartData>();
        seriesB.DataSource = new ObservableCollection<ChartData>();

        diagram.Series.AddRange(new Series[] { seriesT, seriesB });
    }

    public void AddData(ChartData newData)
    {
        var series = diagram.Series.FirstOrDefault(s => s.DisplayName == newData.Type) as LineSeries2D;
        if (series == null) return;

        (series.DataSource as ObservableCollection<ChartData>).Add(newData);
        if (series.ActualData.Count > MaxDataPoints)
        {
            (series.DataSource as ObservableCollection<ChartData>).RemoveAt(0);
        }
    }
}
3. 메인 윈도우에서 UserControl 사용하기
MainWindow.xaml.cs

csharp
Copy code
public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        CreateCharts();
    }

    void CreateCharts()
    {
        var lines = FetchLinesFromDatabase();
        foreach (var line in lines)
        {
            var chartUserControl = new ChartUserControl();
            chartUserControl.InitializeChartData(line);
            MainStackPanel.Children.Add(chartUserControl);

            AddInitialDataToChart(chartUserControl, line);
        }

        SetupTimer();
    }

    List<string> FetchLinesFromDatabase()
    {
        // 데이터베이스에서 라인 리스트 가져오는 로직
        // 예시 반환 값
        return new List<string> { "Line1", "Line2" };
    }

    void AddInitialDataToChart(ChartUserControl chartUserControl, string line)
    {
        var initialData = FetchInitialData(line);
        foreach (var data in initialData)
        {
            chartUserControl.AddData(data);
        }
    }

    IEnumerable<ChartData> FetchInitialData(string line)
    {
        // 데이터베이스에서 초기 데이터 가져오는 로직
        // 예시 반환 값
        return new List<ChartData>();
    }

    void SetupTimer()
    {
        var timer = new System.Timers.Timer(5000);
        timer.Elapsed += (sender, e) =>
        {
            var newData = FetchNewData();
            Application.Current.Dispatcher.Invoke(() =>
            {
                UpdateCharts(newData);
            });
        };
        timer.Start();
    }

    ChartData FetchNewData()
    {
        // 새 데이터 가져오는 로직
        // 예시 반환 값
        return new ChartData();
    }

    void UpdateCharts(ChartData newData)
    {
        foreach (ChartUserControl control in MainStackPanel.Children.OfType<ChartUserControl>())
        {
            control.AddData(newData);
        }
    }
}
MainWindow.xaml

xml
Copy code
<Window ...>
    <ScrollViewer>
        <StackPanel x:Name="MainStackPanel">
            <!-- UserControl 인스턴스들이 여기에 추가됩니다 -->
        </StackPanel>
    </ScrollViewer>
</Window>
설명
ChartUserControl.xaml: XAML에서 차트의 레이아웃과 기본 구성을 정의합니다.
ChartUserControl.xaml.cs: 코드 뒷면에서 차트 데이터를 초기화하고 새 데이터를 추가하는 메서드를 정의합니다.
MainWindow.xaml.cs: 메인 윈도우에서 UserControl을 동적으로 생성하고 초기 데이터를 추가합니다. SetupTimer 메서드는 주기적으로 새 데이터를 가져와 차트를 업데이트합니다.
YourNamespace는 UserControl이 위치한 네임스페이스로, 실제 사용 환경에 맞게 변경해야 합니다. 데이터베이스 접근 로직(FetchLinesFromDatabase, FetchInitialData, FetchNewData)은 프로젝트의 실제 데이터베이스 구조에 따라 구현해야 합