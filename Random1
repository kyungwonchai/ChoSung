아래는 MainViewModel에서 파일 감시 클래스를 생성하여 5초마다 파일을 체크하고 로그 파일을 DataGrid에 업데이트하는 코드입니다. 기존 MainViewModel에서 이 기능을 추가하고, 상세 주석을 포함하였습니다.

MainViewModel (수정된 전체 코드)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Input;
using System.ComponentModel;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly string _logFolder = @"C:\PROD_FILE_LOG";  // 감시할 로그 파일 경로
        private FileSystemWatcher _fileWatcher;  // 파일 감시를 위한 FileSystemWatcher 인스턴스
        private Timer _timer;  // 주기적으로 폴더를 감시하기 위한 타이머

        public ObservableCollection<LogEntry> LogEntries { get; set; }  // DataGrid에 바인딩할 로그 엔트리 목록

        public ICommand LoadLogsCommand { get; }  // 버튼 클릭 시 로그 파일을 로드하는 명령

        public MainViewModel()
        {
            LogEntries = new ObservableCollection<LogEntry>();

            // 버튼 클릭 시 실행될 명령 초기화
            LoadLogsCommand = new RelayCommand(LoadRecentLogs);

            // 파일 감시기(FileSystemWatcher) 설정
            InitializeFileWatcher();

            // 5초마다 폴더를 감시할 타이머 설정
            _timer = new Timer(WatchFolder, null, 0, 5000);
        }

        /// <summary>
        /// FileSystemWatcher를 초기화하고 파일 생성 이벤트를 설정합니다.
        /// </summary>
        private void InitializeFileWatcher()
        {
            // FileSystemWatcher 초기화
            _fileWatcher = new FileSystemWatcher
            {
                Path = _logFolder,  // 감시할 폴더 경로 설정
                Filter = "*.txt",  // 감시할 파일 형식 필터 설정 (*.txt 파일만 감시)
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName,  // 파일 변경 및 생성 시 이벤트 발생
                EnableRaisingEvents = true  // 이벤트 활성화
            };

            // 새로운 파일이 생성될 때 이벤트 핸들러 연결
            _fileWatcher.Created += OnFileCreated;
        }

        /// <summary>
        /// 파일이 생성될 때 호출되는 메서드입니다.
        /// </summary>
        /// <param name="sender">이벤트 발생 객체</param>
        /// <param name="e">파일 정보가 담긴 이벤트 매개변수</param>
        private void OnFileCreated(object sender, FileSystemEventArgs e)
        {
            // 새로 생성된 파일을 로드하여 DataGrid에 추가
            LoadLogFile(e.FullPath);
        }

        /// <summary>
        /// 5초마다 폴더를 감시하여 새로운 파일이 있으면 데이터를 로드합니다.
        /// </summary>
        /// <param name="state">타이머의 상태</param>
        private void WatchFolder(object state)
        {
            // 폴더 내의 모든 로그 파일을 가져와서 파일명을 기준으로 최신순 정렬
            var files = Directory.GetFiles(_logFolder, "*.txt").OrderByDescending(f => f);

            // 각 파일을 로드하여 데이터 그리드에 추가
            foreach (var file in files)
            {
                LoadLogFile(file);
            }
        }

        /// <summary>
        /// 로그 파일을 로드하고 데이터를 파싱하여 LogEntries에 추가합니다.
        /// </summary>
        /// <param name="filePath">읽어올 로그 파일 경로</param>
        private void LoadLogFile(string filePath)
        {
            // 파일 내용 읽기
            var lines = File.ReadAllLines(filePath);
            var logEntry = new LogEntry
            {
                FileName = Path.GetFileName(filePath),  // 파일명
                MAG_NO = GetValueFromLine(lines, "MAG_NO"),  // MAG_NO 값 파싱
                MAG_QTY = int.Parse(GetValueFromLine(lines, "MAG_QTY")),  // MAG_QTY 값 파싱
                PO_NO = GetValueFromLine(lines, "PO_NO"),  // PO_NO 값 파싱
                PO_PLAN_QTY = int.Parse(GetValueFromLine(lines, "PO_PLAN_QTY")),  // PO_PLAN_QTY 값 파싱
                PO_PROD_QTY = int.Parse(GetValueFromLine(lines, "PO_PROD_QTY"))  // PO_PROD_QTY 값 파싱
            };

            // 파일명이 중복되지 않으면 DataGrid에 추가
            if (!LogEntries.Any(entry => entry.FileName == logEntry.FileName))
            {
                // UI 스레드에서 ObservableCollection에 추가
                App.Current.Dispatcher.Invoke(() => LogEntries.Add(logEntry));
            }
        }

        /// <summary>
        /// 파일에서 특정 키에 해당하는 값을 추출합니다.
        /// </summary>
        /// <param name="lines">파일 내용</param>
        /// <param name="key">찾고자 하는 키 (예: "MAG_NO")</param>
        /// <returns>해당 키에 해당하는 값</returns>
        private string GetValueFromLine(string[] lines, string key)
        {
            // 키에 해당하는 라인을 찾고 '='로 구분하여 값을 추출
            var line = lines.FirstOrDefault(l => l.Contains(key));
            return line?.Split('=')[1].Trim('\'');  // 값을 추출하여 반환
        }

        /// <summary>
        /// 최근 두 개의 로그 파일을 로드합니다. (버튼 클릭 시 호출)
        /// </summary>
        private void LoadRecentLogs()
        {
            // 폴더에서 최근 두 개의 파일을 가져옴
            var files = Directory.GetFiles(_logFolder, "*.txt").OrderByDescending(f => f).Take(2);

            // 각각의 파일을 로드하여 DataGrid에 표시
            foreach (var file in files)
            {
                LoadLogFile(file);
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }
}
LogEntry 클래스
csharp
코드 복사
public class LogEntry
{
    public string FileName { get; set; }  // 파일 이름
    public string MAG_NO { get; set; }  // MAG_NO
    public int MAG_QTY { get; set; }  // MAG_QTY
    public string PO_NO { get; set; }  // PO_NO
    public int PO_PLAN_QTY { get; set; }  // PO_PLAN_QTY
    public int PO_PROD_QTY { get; set; }  // PO_PROD_QTY
}
RelayCommand 클래스
csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;

    public RelayCommand(Action execute)
    {
        _execute = execute;
    }

    public bool CanExecute(object parameter) => true;

    public void Execute(object parameter)
    {
        _execute();
    }

    public event EventHandler CanExecuteChanged;
}
설명
FileSystemWatcher 설정: InitializeFileWatcher()에서 FileSystemWatcher를 초기화하고, 파일이 생성될 때마다 OnFileCreated() 이벤트 핸들러가 호출되어 해당 파일을 읽습니다.
5초마다 폴더 감시: Timer를 이용해 5초마다 폴더를 감시하며, 새로운 파일이 있을 경우 WatchFolder()에서 파일을 읽어 데이터 그리드에 추가합니다.
로그 파일 파싱: 파일 내용을 읽어 LogEntry 객체로 변환한 후, 중복되지 않는 항목을 ObservableCollection<LogEntry>에 추가합니다. 이 데이터는 DataGrid에 실시간으로 표시됩니다.
LoadLogsCommand: 버튼을 클릭하면 최근 두 개의 로그 파일을 로드하여 DataGrid에 표시합니다.
이 코드를 적용하면, WPF UI에서 5초마다 로그 폴더를 감시하여 새로 생성된 파일을 DataGrid에 자동으로 추가하는 기능을 구현할 수 있습니