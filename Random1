그로 바꾸어 위아래로 나누겠습니다. 필요한 경우 MainWindow.xaml.cs 파일도 수정하여 제공합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD 검사기 이미지 파일 삭제" Height="600" Width="800"
        Closing="Window_Closing">
    <Window.Resources>
        <!-- 스타일 리소스 정의 -->
        <Style x:Key="RoundedButtonStyle" TargetType="Button">
            <Setter Property="Background" Value="#FF800080"/> <!-- 보라색 배경 -->
            <Setter Property="Foreground" Value="White"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="BorderBrush" Value="#FF4B0082"/> <!-- 보라색 테두리 -->
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Grid>
                            <Border Background="{TemplateBinding Background}" 
                                    BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" 
                                    CornerRadius="15">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF9932CC"/> <!-- 밝은 보라색 배경 -->
                                <Setter Property="Foreground" Value="White"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="60"/> <!-- 제목 -->
            <RowDefinition Height="50"/> <!-- 폴더 선택 및 확장자 선택 -->
            <RowDefinition Height="50"/> <!-- 시작 및 종료 버튼 -->
            <RowDefinition Height="*"/> <!-- 리스트박스 -->
        </Grid.RowDefinitions>

        <!-- 제목 -->
        <TextBlock Grid.Row="0" Text="SMD 검사기 이미지 파일 삭제" FontSize="24" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,10"/>

        <!-- 폴더 선택 및 확장자 선택 -->
        <StackPanel Grid.Row="1" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="5">
            <TextBlock Text="현재 폴더:" VerticalAlignment="Center" Margin="5"/>
            <TextBox x:Name="txtFolderPath" Width="300" Margin="5" IsReadOnly="True"/>
            <Button Style="{StaticResource RoundedButtonStyle}" Content="폴더 선택" Click="btnSelectFolder_Click"/>
            <TextBlock Text="확장자:" VerticalAlignment="Center" Margin="5"/>
            <ComboBox x:Name="cmbFileExtension" Width="100" Margin="5">
                <ComboBoxItem Content=".jpg"/>
                <ComboBoxItem Content=".png"/>
                <ComboBoxItem Content=".bmp"/>
            </ComboBox>
        </StackPanel>

        <!-- 시작 및 종료 버튼 -->
        <Grid Grid.Row="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <Button Grid.Column="0" Style="{StaticResource RoundedButtonStyle}" Content="시작" Click="btnStart_Click" Width="100" Height="50" HorizontalAlignment="Right" Margin="5"/>
            <Button Grid.Column="1" Style="{StaticResource RoundedButtonStyle}" Content="종료" Click="btnExit_Click" Width="100" Height="50" HorizontalAlignment="Left" Margin="5"/>
        </Grid>

        <!-- 탭 -->
        <TabControl Grid.Row="3">
            <TabItem Header="운영 로그">
                <Grid>
                    <ListBox x:Name="lstRecentLogs" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="운영 로그" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="삭제 로그">
                <Grid>
                    <ListBox x:Name="lstDeletionLogs" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="삭제 로그" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="우선순위 파일">
                <Grid>
                    <ListBox x:Name="lstPriorityFiles" Width="700" Height="400" Margin="5">
                        <ListBox.Background>
                            <VisualBrush Opacity="0.3">
                                <VisualBrush.Visual>
                                    <TextBlock Text="우선순위 파일" Foreground="LightGray" FontSize="48" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </VisualBrush.Visual>
                            </VisualBrush>
                        </ListBox.Background>
                    </ListBox>
                </Grid>
            </TabItem>
            <TabItem Header="학습 데이터">
                <Grid>
                    <StackPanel Margin="10">
                        <DataGrid x:Name="dataGridTrainingData" Width="700" Height="200" Margin="5"/>
                        <DataGrid x:Name="dataGridTrainingResults" Width="700" Height="200" Margin="5"/>
                    </StackPanel>
                </Grid>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
MainWindow.xaml.cs
이 파일은 트레이 아이콘 기능과 프로그램 종료 기능을 포함하며, 사용자가 버튼을 클릭하면 해당 기능이 실행되도록 합니다.

csharp
코드 복사
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private NotifyIcon notifyIcon;
        private SettingsManager _settingsManager;
        private Logger _logger;
        private MLModelBuilder _mlModelBuilder;
        private FileCleaner _fileCleaner;
        private List<FileRecord> _trainingData;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTrayIcon();
            InitializeLogger();
            LoadSettings();
        }

        private void InitializeTrayIcon()
        {
            notifyIcon = new NotifyIcon
            {
                Icon = System.Drawing.SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
            };

            notifyIcon.ContextMenuStrip.Items.Add("열기", null, Open_Click);
            notifyIcon.ContextMenuStrip.Items.Add("닫기", null, Close_Click);
            notifyIcon.DoubleClick += Open_Click;
        }

        private void Open_Click(object sender, EventArgs e)
        {
            Show();
            WindowState = WindowState.Normal;
        }

        private void Close_Click(object sender, EventArgs e)
        {
            if (System.Windows.MessageBox.Show("프로그램을 종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
            {
                notifyIcon.Dispose();
                Application.Current.Shutdown();
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
            notifyIcon.BalloonTipText = "프로그램이 트레이로 최소화되었습니다.";
            notifyIcon.ShowBalloonTip(3000);
        }

        private void btnExit_Click(object sender, RoutedEventArgs e)
        {
            Close_Click(sender, e);
        }

        private void btnSelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new System.Windows.Forms.FolderBrowserDialog())
            {
                dialog.SelectedPath = txtFolderPath.Text;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    txtFolderPath.Text = dialog.SelectedPath;
                    SaveSettings(); // 폴더 선택 시 설정 저장
                }
            }
        }

        private void SaveSettings()
        {
            try
            {
                _settingsManager.SaveSettings(new Settings
                {
                    FolderPath = txtFolderPath.Text,
                    FileExtension = cmbFileExtension.Text,
                    DriveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private void LoadSettings()
        {
            try
            {
                var settings = _settingsManager.LoadSettings();
                if (settings != null)
                {
                    txtFolderPath.Text = settings.FolderPath ?? "D:\\";
                    cmbFileExtension.Text = settings.FileExtension ?? ".jpg";
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex.Message);
            }
        }

        private async void btnStart_Click(object sender, RoutedEventArgs e)
        {
            string folderPath = txtFolderPath.Text;
            string fileExtension = cmbFileExtension.Text;
            string driveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\";

            if (string.IsNullOrEmpty(folderPath) || folderPath == "폴더 경로 입력" ||
                string.IsNullOrEmpty(fileExtension))
            {
                System.Windows.Forms.MessageBox.Show("모든 입력값을 제공해주세요.");
                return;
            }

            try
            {
                Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 중..."; });

                _trainingData = await Task.Run(() => CollectInitialFileData(folderPath, fileExtension));
                if (_trainingData.Count < 10) // 최소 샘플 수
                {
                    System.Windows.Forms.MessageBox.Show($"학습 모델을 훈련시키기에 샘플이 충분하지 않습니다. 최소 샘플 수: 10");
                    Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: 샘플 부족"; });
                    return;
                }

                _mlModelBuilder.TrainModel(_trainingData);

                Dispatcher.Invoke(() =>
                {
                    dataGridTrainingData.ItemsSource = _trainingData;
                    txtTrainingStatus.Text = "학습 완료";
                    txtCurrentPatterns.Text = string.Join(", ", _mlModelBuilder.GetRegexPatterns().Select(p => p.ToString()));
                });

                await Task.Run(() => MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName));
            }
            catch (Exception ex)
            {
                _logger.LogError("모델 훈련 실패: " + ex.Message);
                Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: " + ex.Message); });
            }
        }

        private List<FileRecord> CollectInitialFileData(string folderPath, string fileExtension)
        {
            var fileDataList = new List<FileRecord>();
            try
            {
                var files = GetFiles(folderPath, fileExtension);
                if (files != null && files.Count > 0)
                {
                    fileDataList = files.Select(f => new FileRecord
                    {
                        FilePath = f.FullName,
                        Extension = f.Extension,
                        Size = (float)f.Length, // float 형식으로 변환
                        FolderPath = f.DirectoryName
                    }).ToList();

                    Dispatcher.Invoke(() =>
                    {
                        txtCurrentPatterns.Text = $"학습 중인 파일 수: {files.Count}개";
                    });
                }
                else
                {
                    Dispatcher.Invoke(() =>
                    {
                        txtCurrentPatterns.Text = "학습할 파일이 없습니다.";
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError("파일 데이터 수집 실패: " + ex.Message);
                Dispatcher.Invoke(() =>
                {
                    txtCurrentPatterns.Text = "파일 데이터 수집 오류.";
                });
            }
            return fileDataList;
        }

        private List<FileInfo> GetFiles(string folderPath, string fileExtension)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles($"*{fileExtension}", SearchOption.TopDirectoryOnly)
                    .Where(f => f.Length > 1 * 1024 * 1024)); // 1MB 이상의 파일

                foreach (var subDir in directory.GetDirectories())
                {
                    if (!IsSystemVolumeInformation(subDir))
                    {
                        files.AddRange(GetFiles(subDir.FullName, fileExtension));
                    }
                }
            }
            catch (UnauthorizedAccessException ex)
            {
                _logger.LogError("폴더 접근 거부됨: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        private bool IsSystemVolumeInformation(DirectoryInfo dirInfo)
        {
            return dirInfo.FullName.Contains("System Volume Information");
        }

        private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
        {
            while (true)
            {
                try
                {
                    long freeSpace = await Task.Run(() => _fileCleaner.GetDriveFreeSpace(driveName));
                    List<FileInfo> filesToDelete;

                    if (freeSpace <= 25L * 1024 * 1024 * 1024) // 25 GB
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension, forceDelete: true));
                        _logger.LogRecentActivity($"용량이 {freeSpace / (1024 * 1024 * 1024)} GB 남아서 강제 삭제를 진행합니다.");
                    }
                    else
                    {
                        filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension));
                        if (filesToDelete.Count > 0)
                        {
                            _logger.LogRecentActivity("삭제를 진행합니다.");
                        }
                    }

                    Dispatcher.Invoke(() => DisplayFilesToDelete(filesToDelete));
                    await _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath, forceDelete: freeSpace <= 25L * 1024 * 1024 * 1024);

                    await Task.Run(() => _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension));
                    await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
                }
                catch (Exception ex)
                {
                    _logger.LogError("모니터링 중 오류 발생: " + ex.Message);
                }
            }
        }

        private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
        {
            Dispatcher.Invoke(() =>
            {
                lstPriorityFiles.Items.Clear();
                foreach (var file in filesToDelete)
                {
                    lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
                }
                dataGridTrainingResults.ItemsSource = filesToDelete.Select(f => new { f.Name, f.CreationTime });
            });
        }

        private void LogRecentActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }

        private void LogDeletionActivity(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: {message}";
                lstDeletionLogs.Items.Add(logMessage);
                if (lstDeletionLogs.Items.Count > 200)
                {
                    lstDeletionLogs.Items.RemoveAt(0);
                }
            });
        }

        private void UpdateFolderStatistics(long totalSize, string folderPath)
        {
            Dispatcher.Invoke(() =>
            {
                string logMessage = $"{DateTime.Now}: 폴더: {folderPath}, 총 크기: {totalSize / (1024 * 1024)} MB";
                lstRecentLogs.Items.Add(logMessage);
                if (lstRecentLogs.Items.Count > 200)
                {
                    lstRecentLogs.Items.RemoveAt(0);
                }
            });
        }
    }
}
위의 코드는:

탭 컨트롤을 사용하여 운영 로그, 삭제 로그, 우선순위 파일, 학습 데이터 탭을 추가.
시작 및 종료 버튼을 가로로 50:50 비율로 나누어 배치.
운영 로그와 삭제 로그 리스트박스를 위아래로 배치.
필요한 경우 MainWindow.xaml.cs 파일도 업데이트하여 프로그램의 동작을 수정했습니다.
이제 이 코드를 사용하여 프로그램을 실행하면 원하는 UI 레