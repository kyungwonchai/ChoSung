겠습니다. StatusWindow.xaml의 레이아웃 및 오류 수정과 관련된 요청을 처리하겠습니다.

IsReadOnly 오류 수정: GridControl에 직접 IsReadOnly="True" 속성을 사용하는 것은 올바르지 않습니다. 대신 TableView의 AllowEditing="False" 속성을 사용해야 합니다 (이미 적용되어 있음). 해당 IsReadOnly 속성을 제거합니다.
레이아웃 변경 및 차트 추가: 창을 좌우 2단으로 나누어, 좌측에는 기존의 현황 표 3개(종류별, 층별, 구역별)를 세로로 배치하고, 우측에는 이 데이터를 시각화하는 막대 차트를 추가합니다. 차트에는 우선 종류별 현황 데이터를 사용하여 각 종류별 "사용 개수"와 "여유 개수"를 막대로 표시하겠습니다.
수정/추가해야 할 파일 목록:

Views/StatusWindow.xaml (레이아웃 변경, 차트 추가, IsReadOnly 제거)
ViewModels/StatusViewModel.cs (이번 수정 사항 없음, 확인용으로 최종본 제공)
아래에 이 두 파일의 수정된 전체 코드(주석 제외, 파일 ID 포함)를 작성합니다.

1. Views/StatusWindow.xaml (수정)

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.StatusWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    mc:Ignorable="d"
    Title="사물함 사용 현황" Height="700" Width="1100"
    WindowStartupLocation="CenterOwner" ShowInTaskbar="False"
    Closing="StatusWindow_Closing">

    <dx:ThemedWindow.Resources>
        <Style TargetType="dxg:GridColumnHeader">
            <Setter Property="Background" Value="LightSteelBlue"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="dxg:LightweightCellEditor">
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="LeftAlignCellStyle" TargetType="dxg:LightweightCellEditor">
            <Setter Property="HorizontalAlignment" Value="Left"/>
        </Style>
    </dx:ThemedWindow.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Button Grid.Row="0" Content="🔄 새로고침" Command="{Binding LoadStatusCommand}" HorizontalAlignment="Left" Margin="0,0,0,10" Padding="10,3"/>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Vertical">
                <GroupBox Header="종류별 현황" Margin="0,0,5,5">
                    <dxg:GridControl ItemsSource="{Binding StatusByType}" AutoGenerateColumns="None" MaxHeight="180">
                        <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                        <dxg:GridControl.Columns>
                            <dxg:GridColumn FieldName="GroupValue" Header="종류" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                            <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                            <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                            <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                            <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                        </dxg:GridControl.Columns>
                    </dxg:GridControl>
                </GroupBox>

                <GroupBox Header="층별 현황" Margin="0,5,5,5">
                     <dxg:GridControl ItemsSource="{Binding StatusByFloor}" AutoGenerateColumns="None" MaxHeight="180">
                         <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="GroupValue" Header="층"/>
                             <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                             <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                             <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                             <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                </GroupBox>

                <GroupBox Header="구역별 현황" Margin="0,5,5,0">
                     <dxg:GridControl ItemsSource="{Binding StatusByZone}" AutoGenerateColumns="None" MaxHeight="180">
                         <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                         <dxg:GridControl.Columns>
                             <dxg:GridColumn FieldName="GroupValue" Header="구역" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                             <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                             <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                             <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                             <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                         </dxg:GridControl.Columns>
                     </dxg:GridControl>
                </GroupBox>
            </StackPanel>

            <GroupBox Header="종류별 현황 차트" Grid.Column="1" Margin="5,0,0,0">
                 <dxc:ChartControl DataSource="{Binding StatusByType}">
                     <dxc:ChartControl.Diagram>
                         <dxc:XYDiagram2D>
                             <dxc:XYDiagram2D.Series>
                                 <dxc:BarSideBySideSeries2D DisplayName="사용" DataSource="{Binding StatusByType}" ArgumentDataMember="GroupValue" ValueDataMember="UsedCount" BarWidth="0.4"/>
                                 <dxc:BarSideBySideSeries2D DisplayName="여유" DataSource="{Binding StatusByType}" ArgumentDataMember="GroupValue" ValueDataMember="AvailableCount" BarWidth="0.4"/>
                             </dxc:XYDiagram2D.Series>
                             <dxc:XYDiagram2D.AxisX>
                                 <dxc:AxisX2D>
                                     <dxc:AxisX2D.Title> <dxc:AxisTitle Content="사물함 종류"/> </dxc:AxisX2D.Title>
                                 </dxc:AxisX2D>
                             </dxc:XYDiagram2D.AxisX>
                             <dxc:XYDiagram2D.AxisY>
                                 <dxc:AxisY2D>
                                     <dxc:AxisY2D.Title> <dxc:AxisTitle Content="개수"/> </dxc:AxisY2D.Title>
                                 </dxc:AxisY2D>
                             </dxc:XYDiagram2D.AxisY>
                         </dxc:XYDiagram2D>
                     </dxc:ChartControl.Diagram>
                     <dxc:ChartControl.Legend>
                         <dxc:Legend HorizontalPosition="Center" VerticalPosition="BottomOutside" Orientation="Horizontal"/>
                     </dxc:ChartControl.Legend>
                     <dxc:ChartControl.Titles>
                         <dxc:Title Content="사물함 종류별 사용/여유 현황" HorizontalAlignment="Center"/>
                     </dxc:ChartControl.Titles>
                 </dxc:ChartControl>
            </GroupBox>

        </Grid>
        <StatusBar Grid.Row="2" Background="LightGray" Margin="0,10,0,0">
            <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem>
        </StatusBar>

        <Button Grid.Row="3" Content="닫기" Width="80" HorizontalAlignment="Right" Margin="0,10,0,0" Click="CloseButton_Click" IsCancel="True"/>

    </Grid>
</dx:ThemedWindow>
2. ViewModels/StatusViewModel.cs (최종 확인용)

이 파일은 이전 단계에서 제공한 코드와 동일합니다. (변경 없음)

C#

// FILE_ID: ViewModels/StatusViewModel_20250410173000
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic;

namespace LockerManagementApp.ViewModels
{
    public class StatusViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;

        private ObservableCollection<StatusItem> _statusByType;
        private ObservableCollection<StatusItem> _statusByFloor;
        private ObservableCollection<StatusItem> _statusByZone;
        private string _statusMessage;

        public ObservableCollection<StatusItem> StatusByType { get => _statusByType; set => SetProperty(ref _statusByType, value); }
        public ObservableCollection<StatusItem> StatusByFloor { get => _statusByFloor; set => SetProperty(ref _statusByFloor, value); }
        public ObservableCollection<StatusItem> StatusByZone { get => _statusByZone; set => SetProperty(ref _statusByZone, value); }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadStatusCommand { get; }

        public StatusViewModel()
        {
            StatusByType = new ObservableCollection<StatusItem>();
            StatusByFloor = new ObservableCollection<StatusItem>();
            StatusByZone = new ObservableCollection<StatusItem>();

            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[Status] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [Status] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), _ => !_disposed); return; }

            LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), CanExecuteLoad);
            if (_context != null) { _ = LoadStatusDataAsync(); }
        }

        private bool CanExecuteLoad(object parameter = null) => !_disposed && _context != null && !_cts.IsCancellationRequested;

        public async Task LoadStatusDataAsync()
        {
            if (!CanExecuteLoad()) return;
            StatusMessage = "현황 데이터 로딩 중...";
            (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 시작...");

            List<LockerAssignment> allAssignments = null;
            try
            {
                if (!CanExecuteLoad()) return;
                allAssignments = await _context.LockerAssignments.AsNoTracking().ToListAsync(_cts.Token);
                if (_disposed || _cts.IsCancellationRequested) return;

                var statusByType = CalculateStatus(allAssignments, a => a.LockerType);
                var statusByFloor = CalculateStatus(allAssignments, a => a.Floor);
                var statusByZone = CalculateStatus(allAssignments, a => a.Zone);

                if (_disposed || _cts.IsCancellationRequested) return;

                Application.Current.Dispatcher.Invoke(() =>
                {
                    if (_disposed || _cts.IsCancellationRequested || Application.Current == null) return;
                    StatusByType = new ObservableCollection<StatusItem>(statusByType);
                    StatusByFloor = new ObservableCollection<StatusItem>(statusByFloor);
                    StatusByZone = new ObservableCollection<StatusItem>(statusByZone);
                    StatusMessage = "현황 데이터 로드 완료.";
                });
            }
            catch (OperationCanceledException) { Debug.WriteLine("LoadStatusDataAsync 작업 취소됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 취소됨."; }
            catch (ObjectDisposedException) { Debug.WriteLine("LoadStatusDataAsync 실행 중 DbContext Dispose됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 오류 (컨텍스트 해제됨)."; }
            catch (Exception ex) { StatusMessage = $"현황 데이터 로딩 오류: {ex.Message}"; Debug.WriteLine($"!!! 현황 데이터 로딩 중 오류 발생:\n{ex.ToString()}"); if (!App.IsShuttingDown && !_disposed) MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            finally { if (!_disposed) (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged(); Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 종료."); }
        }

        private List<StatusItem> CalculateStatus(List<LockerAssignment> assignments, Func<LockerAssignment, string> groupingKeySelector)
        {
            if (assignments == null) return new List<StatusItem>();
            return assignments.GroupBy(groupingKeySelector).Select(g => { int total = g.Count(); int used = g.Count(a => !string.IsNullOrWhiteSpace(a.UserName)); int available = total - used; double rate = (total == 0) ? 0 : ((double)used / total * 100.0); return new StatusItem { GroupValue = g.Key ?? "미지정", TotalCount = total, UsedCount = used, AvailableCount = available, UsageRate = rate }; }).OrderBy(s => s.GroupValue).ToList();
        }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("StatusViewModel Dispose 시작..."); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("StatusViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
핵심 변경 사항:

Views/StatusWindow.xaml:
메인 Grid를 2개의 열로 나누었습니다.
좌측 열(Grid.Column="0")에 기존 3개의 현황 표(GroupBox와 GridControl)를 StackPanel 안에 배치했습니다. 각 GridControl의 MaxHeight를 설정하여 세로 공간을 적절히 나누도록 했습니다.
우측 열(Grid.Column="1")에 dxc:ChartControl을 추가하고, StatusByType 데이터를 사용하여 "사용"과 "여유" 개수를 보여주는 막대 차트를 구성했습니다. 범례와 제목도 추가했습니다.
GridControl 태그에서 잘못 사용된 IsReadOnly="True" 속성을 제거했습니다 (TableView의 AllowEditing="False"가 올바른 속성).
추가 확인 사항:
