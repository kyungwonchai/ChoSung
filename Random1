네, 있습니다. 스크립트 내에서 watchdog.conf 파일에 들어갈 설정 내용을 직접 만들고, 이 내용을 라즈베리파이에 업로드하여 덮어쓰는 부분이 포함되어 있습니다.

요청하신 최종 버전의 전체 파이썬 코드를 다시 드립니다.

watchdog.conf 설정이 만들어지는 부분을 주석으로 명확하게 표시해 두었습니다.

## 최종 자동화 Python 스크립트
Python

import paramiko
import io
import time
import os

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# 라즈베리파이 접속 정보
REMOTE_HOST = '192.168.0.10'
REMOTE_PORT = 22
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password'

# 설치할 .deb 파일의 '우분투 머신' 내 로컬 경로
LOCAL_DEB_FILE_PATH = '/home/your_user/packages/your-package.deb'

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder"
MAX_DELAY_SECONDS = 300
BOOT_GRACE_PERIOD_SECONDS = 1320 # (22 * 60)
# ===============================================================

def run_sudo_command(ssh_client, command, password, allow_any_exit=False):
    """SSH 클라이언트에서 단일 sudo 명령어를 실행하고 결과를 반환합니다."""
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command, get_pty=True)
        stdin.write(password + '\n')
        stdin.flush()
        exit_status = stdout.channel.recv_exit_status()
        stderr_output = stderr.read().decode('utf-8').strip()
        if not allow_any_exit and exit_status != 0:
            if "sudo" in stderr_output.lower():
                 raise Exception(f"Sudo command failed. Check password or sudoers config. Error: {stderr_output}")
            raise Exception(f"Command '{command}' failed with exit status {exit_status}. Error: {stderr_output}")
        if "systemctl status" in command:
            status_output = stdout.read().decode('utf-8').strip()
            print("--- Service Status ---\n" + status_output + "\n----------------------")
        return True, f"Command '{command}' executed."
    except Exception as e:
        return False, str(e)


def setup_pi_environment(hostname, port, username, password, local_deb_path, target_folder, max_delay, grace_period):
    """
    SFTP로 .deb 파일을 직접 복사하여 설치하고 Watchdog을 설정하는 최종 스크립트
    """
    if not os.path.exists(local_deb_path):
        return (False, f"Local file not found at: {local_deb_path}")

    ssh_client = None
    try:
        print("Connecting to Raspberry Pi...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port=port, username=username, password=password, timeout=10)
        sftp = ssh_client.open_sftp()
        print("Connection successful.")

        # --- .deb 패키지 설치 (Fire and Forget) ---
        print("\n--- Starting Package Installation (Fire and Forget) ---")
        deb_filename = os.path.basename(local_deb_path)
        remote_temp_path = f"/tmp/{deb_filename}"

        print(f"Step 1: Uploading {deb_filename} to Pi...")
        sftp.put(local_deb_path, remote_temp_path)
        print("Upload complete.")

        print(f"Step 2: Executing installation command for {deb_filename}...")
        install_cmd = f"sudo DEBIAN_FRONTEND=noninteractive dpkg -i --force-confold {remote_temp_path}"
        run_sudo_command(ssh_client, install_cmd, password, allow_any_exit=True)
        
        print("Command sent. Waiting for 30 seconds for installation to proceed...")
        time.sleep(30)
        
        print("Step 3: Cleaning up temporary file...")
        run_sudo_command(ssh_client, f"sudo rm {remote_temp_path}", password)
        print("--- Package Installation Task Finished ---")
        

        # --- Watchdog 설정 ---
        print("\n--- Starting Watchdog Setup ---")
        check_script_path = "/etc/watchdog.d/quick_folder_check.sh"
        check_script_content = f"""#!/bin/bash
TARGET_FOLDER="{target_folder}"
MAX_DELAY={max_delay}
GRACE_PERIOD={grace_period}
UPTIME=$(cut -d' ' -f1 /proc/uptime | cut -d'.' -f1)
if [ "$UPTIME" -lt "$GRACE_PERIOD" ]; then exit 0; fi
if [ ! -d "$TARGET_FOLDER" ]; then exit 1; fi
LAST_MODIFIED=$(stat -c %Y "$TARGET_FOLDER")
CURRENT_TIME=$(date +%s)
TIME_DIFF=$((CURRENT_TIME - LAST_MODIFIED))
if [ $TIME_DIFF -gt $MAX_DELAY ]; then exit 1; else exit 0; fi
"""
        # 테스트 스크립트 업로드 및 설정
        sftp.putfo(io.BytesIO(check_script_content.encode('utf-8')), "/tmp/check.sh")
        run_sudo_command(ssh_client, "sudo mkdir -p /etc/watchdog.d", password)
        run_sudo_command(ssh_client, f"sudo mv /tmp/check.sh {check_script_path}", password)
        run_sudo_command(ssh_client, f"sudo chmod +x {check_script_path}", password)

        # ===============================================================
        # ▼▼▼ 바로 이 부분이 watchdog.conf 파일 내용을 만드는 곳입니다 ▼▼▼
        # ===============================================================
        config_content = f"""
watchdog-device        = /dev/watchdog
watchdog-timeout       = 15
interval               = 10
test-binary            = {check_script_path}
test-timeout           = 5
"""
        # ===============================================================
        
        # 설정 파일 업로드 및 권한 설정
        sftp.putfo(io.BytesIO(config_content.strip().encode('utf-8')), "/tmp/wd.conf")
        run_sudo_command(ssh_client, "sudo mv /tmp/wd.conf /etc/watchdog.conf", password)
        run_sudo_command(ssh_client, "sudo chown root:root /etc/watchdog.conf", password)
        
        # Watchdog 서비스 재시작 및 상태 확인
        run_sudo_command(ssh_client, "sudo systemctl restart watchdog", password)
        time.sleep(2)
        run_sudo_command(ssh_client, "sudo systemctl status watchdog --no-pager -l", password, allow_any_exit=True)
        print("--- Watchdog Setup Complete ---")

        sftp.close()
        return (True, "All tasks including package installation attempt completed!")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("\nConnection closed.")


if __name__ == "__main__":
    success, message = setup_pi_environment(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        password=REMOTE_PASSWORD,
        local_deb_path=LOCAL_DEB_FILE_PATH,
        target_folder=TARGET_FOLDER_TO_WATCH,
        max_delay=MAX_DELAY_SECONDS,
        grace_period=BOOT_GRACE_PERIOD_SECONDS
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")