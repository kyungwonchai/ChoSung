이 작업을 위해 React를 사용하여 웹 앱을 구축하겠습니다. 프론트엔드에서는 비밀번호 유효성 검사를 하고 이미지를 업로드하며, 백엔드에서는 이미지를 MSSQL 2014 데이터베이스에 저장하고 조회합니다. 여기서는 기본적인 아이디어를 제공하므로 실제 환경에 따라 코드를 수정해야 할 수도 있습니다. 이 작업은 Python Flask를 백엔드로 사용하겠습니다.

    React에서의 비밀번호 유효성 검사와 이미지 업로드:

먼저, 두 개의 비밀번호 입력 필드와 이미지를 업로드할 수 있는 input 요소를 만듭니다.

javascript

import React, { useState } from "react";

function App() {
  const [password1, setPassword1] = useState("");
  const [password2, setPassword2] = useState("");
  const [image, setImage] = useState(null);

  const isPasswordValid = () => {
    // 복잡도 규칙을 이곳에 추가하십시오.
    return password1 === password2;
  };

  const handleUpload = async () => {
    if (!isPasswordValid()) {
      alert("비밀번호가 일치하지 않거나 규칙이 맞지 않습니다.");
      return;
    }
    
    const formData = new FormData();
    formData.append("password", password1);
    formData.append("image", image);

    // Flask 앱의 URL로 변경하십시오.
    const response = await fetch("http://localhost:5000/upload", {
      method: "POST",
      body: formData,
    });

    if (response.ok) {
      alert("이미지가 성공적으로 업로드되었습니다.");
    } else {
      alert("이미지 업로드에 실패했습니다.");
    }
  };

  return (
    <div>
      <input
        type="password"
        value={password1}
        onChange={(e) => setPassword1(e.target.value)}
        placeholder="비밀번호를 입력하십시오."
      />
      <input
        type="password"
        value={password2}
        onChange={(e) => setPassword2(e.target.value)}
        placeholder="비밀번호를 다시 입력하십시오."
      />
      <input
        type="file"
        onChange={(e) => setImage(e.target.files[0])}
      />
      <button onClick={handleUpload}>업로드</button>
    </div>
  );
}

export default App;

위 코드는 비밀번호 복잡도 규칙을 검증하고, 이미지를 업로드하는 기본 로직을 담고 있습니다. 비밀번호의 복잡도 규칙은 isPasswordValid 함수 내에 작성하시면 됩니다.

    Python Flask에서의 이미지 저장:

Flask 서버에서는 이미지를 받아 MSSQL 데이터베이스에 저장하는 로직을 구현하겠습니다. MSSQL에 접근하기 위해 pyodbc를 사용하겠습니다.

다음 코드는 이미지를 받아서 MSSQL 데이터베이스에 저장하는 기본적인 로직입니다. 이미지는 바이트로 저장하고, 조회 시 바이트 데이터를 다시 이미지로 변환합니다.

python

from flask import Flask, request
import pyodbc

app = Flask(__name__)

def save_to_db(password, image):
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=서버명;DATABASE=데이터베이스명;UID=사용자명;PWD=비밀번호')
    cursor = conn.cursor()

    # 프로시저1에 맞게 변경하십시오.
    cursor.execute("EXEC 프로시저1 ?, ?", (password, image.read()))
    conn.commit()

@app.route('/upload', methods=['POST'])
def upload():
    password = request.form['password']
    image = request.files['image']
    save_to_db(password, image)

    return '', 204

위 코드는 이미지를 바이트로 처리하여 데이터베이스에 저장하는 기본적인 로직을 담고 있습니다. 필요에 따라 코드를 수정하십시오.

    이미지 조회 및 출력:

이미지를 조회하고 출력하는 로직은 다음과 같이 구현할 수 있습니다.

python

from flask import send_file
import io

def get_image_from_db(image_id):
    conn = pyodbc.connect('DRIVER={SQL Server};SERVER=서버명;DATABASE=데이터베이스명;UID=사용자명;PWD=비밀번호')
    cursor = conn.cursor()

    cursor.execute("SELECT image FROM Table1 WHERE id = ?", image_id)
    row = cursor.fetchone()

    if row is not None:
        return io.BytesIO(row.image)

    return None

@app.route('/image/<int:image_id>', methods=['GET'])
def get_image(image_id):
    image = get_image_from_db(image_id)

    if image is None:
        return '', 404

    return send_file(image, mimetype='image/jpeg')

이 코드는 image_id에 해당하는 이미지를 조회하여 바이트 데이터를 다시 이미지로 변환한 뒤 클라이언트에게 전송합니다. 이미지 형식에 따라 mimetype을 적절히 변경하십시오.

위의 코드들은 모두 기본적인 아이디어를 제공하는 것이므로 실제 환경에 따라 적절히 수정하