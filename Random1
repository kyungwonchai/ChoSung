using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class RackSystemManager : MonoBehaviour
{
    [Header("핵심 연결 대상")]
    [Tooltip("모든 랙들의 최상위 부모 오브젝트")]
    public Transform rackContainer;

    [Header("머티리얼")]
    [Tooltip("꺼져 있을 때의 기본 램프 머티리얼")]
    public Material defaultLampMaterial;
    [Tooltip("켜졌을 때의 발광 램프 머티리얼")]
    public Material litLampMaterial;

    [Header("애니메이션")]
    [Tooltip("마스크 슬라이드 시간")]
    public float animationDuration = 0.5f;
    [Tooltip("마스크가 앞으로 나오는 거리")]
    public float slideOutDistance = 0.4f;

    // 내부 데이터 저장소
    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();

    // 마지막으로 활성화된 오브젝트 상태
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;


    void Start()
    {
        InitializeAllRacks();
    }

    // 씬에 배치된 모든 램프와 마스크를 찾아 등록하는 함수
    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");

        // rackContainer 아래의 모든 렌더러 컴포넌트를 가져옴
        Renderer[] allRenderers = rackContainer.GetComponentsInChildren<Renderer>(true);
        foreach (Renderer rend in allRenderers)
        {
            // 이름 규칙에 따라 램프와 마스크를 구분하여 딕셔너리에 저장
            if (rend.name.Contains("_Lamp_"))
            {
                lampRenderers.Add(rend.name, rend);
                rend.material = defaultLampMaterial; // 모든 램프를 '꺼진' 상태로 초기화
            }
            else if (rend.name.Contains("_Mask_"))
            {
                maskObjects.Add(rend.name, rend.gameObject);
            }
        }
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    // 바코드 입력을 처리하는 메인 함수
    public void ProcessBarcode(string barcode)
    {
        ResetPreviousSlot(); // 이전 상태 초기화

        // 바코드 형식: MMF10 A 01 B 05
        // MMF10(고정), A(열), 01(랙번호), B(층), 05(칸)
        if (barcode.Length != 12 || !barcode.StartsWith("MMF10"))
        {
            Debug.LogError($"잘못된 바코드 형식입니다: {barcode}");
            return;
        }

        string row = barcode.Substring(5, 1);       // "A"
        string rackNum = barcode.Substring(6, 2);   // "01"
        string floor = barcode.Substring(8, 1);     // "B"
        string slotNum = barcode.Substring(9, 2);   // "05"

        // 바코드 정보로 유니티 오브젝트 이름 조합
        string rackID = $"{row}_{rackNum}";          // 예: "A_01"
        string lampID = $"{rackID}_Lamp_{floor}{slotNum}"; // 예: "A_01_Lamp_B05"
        string maskID = $"{rackID}_Mask_{floor}{slotNum}"; // 예: "A_01_Mask_B05"

        // 해당 램프를 찾아 켜기
        if (lampRenderers.TryGetValue(lampID, out Renderer targetLampRenderer))
        {
            targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
        }

        // 해당 마스크를 찾아 애니메이션 재생
        if (maskObjects.TryGetValue(maskID, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
    }

    // 이전에 활성화된 슬롯을 원래 상태로 되돌리는 함수
    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    // 마스크를 부드럽게 움직이는 애니메이션 함수
    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        // 마스크의 물리 효과를 잠시 끔 (애니메이션과 충돌 방지)
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;

        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;

        if (isSlidingOut)
        {
            // 로컬 Z축(파란색 화살표) 방향으로 튀어나옴
            endPosition = startPosition + Vector3.forward * slideOutDistance;
        }
        else
        {
            endPosition = lastMaskOriginalLocalPosition;
        }

        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition; // 정확한 위치 보정

        // 애니메이션이 끝나면 물리 효과를 다시 켬
        if (rb != null) rb.isKinematic = false;
    }

    // UI 버튼이 호출할 함수
    public void ActivateFromInputField(InputField inputField)
    {
        if (inputField != null && !string.IsNullOrEmpty(inputField.text))
        {
            ProcessBarcode(inputField.text.ToUpper());
        }
    }
}