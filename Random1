{% extends "layout.html" %} {# layout.html을 상속받습니다. #}

{# 페이지 제목 설정 #}
{% block title %}{{ title if title else "제어 이력 보기" }}{% endblock %}

{# 이 페이지에만 적용될 추가 CSS 스타일 정의 #}
{% block styles %}
{{ super() }} {# layout.html의 스타일을 먼저 로드합니다. #}
<style>
    .chart-container {
        width: 90%; /* 차트 너비 조정 */
        max-width: 800px; /* 차트 최대 너비 */
        margin: 20px auto 40px auto; /* 상하좌우 여백 및 중앙 정렬 */
        padding: 20px;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        background-color: #ffffff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.07);
    }
    .log-table { /* 로그 테이블 기본 스타일은 layout.html 것을 사용 */
        margin-top: 10px; /* 차트와 테이블 사이 간격 */
    }
    .log-table th, .log-table td {
        font-size: 0.9em; /* 로그 테이블 폰트 약간 작게 */
        white-space: nowrap; /* 기본적으로 한 줄로 표시 */
        vertical-align: middle;
    }
    .log-table td.message-col { /* 메시지 컬럼만 내용이 길 경우 여러 줄로 표시 및 최대 너비 */
        white-space: normal;   /* 줄바꿈 허용 */
        word-break: break-all; /* 단어 단위로 줄바꿈 */
        min-width: 200px;      /* 최소 너비 */
        max-width: 350px;      /* 최대 너비 (이 너비를 넘으면 줄바꿈) */
    }
    .log-table .success-true { 
        color: green; 
        font-weight: bold;
    }
    .log-table .success-false { 
        color: red; 
        font-weight: bold; 
    }
    .delete-logs-section { 
        margin-top: 20px; /* 차트와 삭제 버튼 사이 간격 */
        margin-bottom: 20px; 
        padding: 15px; 
        border: 1px solid #e74c3c; 
        background-color: #fceded; 
        text-align: right; 
        border-radius: 5px;
    }
    .delete-logs-section p {
        margin: 0 0 10px 0;
        text-align: left;
        color: #721c24;
        font-size: 0.9em;
    }
</style>
{% endblock %}


{% block content %}
    <h1>{{ title }}</h1>

    {# --- 1. 차트 표시 영역 --- #}
    <div class="chart-container">
        <canvas id="actionLogChart"></canvas>
    </div>

    {# --- 2. 모든 이력 삭제 버튼 (관리자 전용) --- #}
    {% if current_user_role == 'admin' %}
    <div class="delete-logs-section">
        <p><strong>주의:</strong> 모든 제어 이력을 영구적으로 삭제합니다. 이 작업은 되돌릴 수 없습니다.</p>
        <form method="POST" action="{{ url_for('logs.delete_all_action_logs') }}" 
              onsubmit="return confirm('정말로 모든 제어 이력을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다!');">
            {# CSRF 토큰이 Flask-WTF를 통해 폼에 자동 추가된다면 이 폼에는 불필요 #}
            {# 만약 수동으로 CSRF 토큰을 사용한다면 <input type="hidden" name="csrf_token" value="{{ csrf_token() }}"> 추가 #}
            <input type="submit" value="모든 제어 이력 삭제" class="btn btn-danger">
        </form>
    </div>
    {% endif %}


    {# --- 3. 로그 목록 테이블 --- #}
    <h2>상세 제어 이력 (최근 3일)</h2>
    {% if logs %}
    <div style="overflow-x: auto;"> {# 내용이 길 경우 가로 스크롤 #}
    <table class="log-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>시간</th>
                <th>대상 PC 이름</th>
                <th>전송된 IP</th>
                <th>최종 IP (릴레이)</th>
                <th>명령어</th>
                <th>페이로드 요약</th>
                <th>작업 설명</th>
                <th>결과</th>
                <th class="message-col">결과 메시지</th>
                <th>실행자 IP</th>
            </tr>
        </thead>
        <tbody>
            {% for log_item in logs %} {# 변수명을 log에서 log_item으로 변경 (Jinja2 내장 log 객체와 충돌 방지) #}
            <tr>
                <td>{{ log_item.id }}</td>
                <td title="{{ log_item.log_timestamp|datetimeformat('%Y-%m-%d %H:%M:%S.%f') }}">
                    {{ log_item.log_timestamp|datetimeformat('%y-%m-%d %H:%M') }}
                </td>
                <td>{{ log_item.target_pc_name if log_item.target_pc_name else '-' }}</td>
                <td>{{ log_item.target_ip_sent_to }}</td>
                <td>{{ log_item.final_target_ip if log_item.final_target_ip else '-' }}</td>
                <td>{{ log_item.command_name }}</td>
                <td title="{{ log_item.command_payload_summary }}">
                    {{ log_item.command_payload_summary|truncate(25, True, '...') if log_item.command_payload_summary else '-' }}
                </td>
                <td title="{{ log_item.action_type }}">
                    {{ log_item.action_type|truncate(20, True, '...') }}
                </td>
                <td class="{{ 'success-true' if log_item.result_success else 'success-false' }}">
                    {{ '성공' if log_item.result_success else '실패' }}
                </td>
                <td class="message-col" title="{{ log_item.result_message }}">
                    {{ log_item.result_message|truncate(40, True, '...') if log_item.result_message else '-' }}
                </td>
                <td>{{ log_item.triggered_by_ip if log_item.triggered_by_ip else '-' }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    </div>

    {# 페이지네이션 (이전과 동일) #}
    {% if pagination and pagination.total_pages > 1 %}
    <div class="pagination">
        {% if pagination.has_prev %}
            <a href="{{ url_for(request.endpoint, page=pagination.prev_num) }}">&laquo; 이전</a>
        {% else %}
            <span class="disabled">&laquo; 이전</span>
        {% endif %}
        
        <span style="margin: 0 10px;">페이지 {{ pagination.page }} / {{ pagination.total_pages }}</span>
        
        {% if pagination.has_next %}
            <a href="{{ url_for(request.endpoint, page=pagination.next_num) }}">다음 &raquo;</a>
        {% else %}
            <span class="disabled">다음 &raquo;</span>
        {% endif %}
        <span style="margin-left: 15px;">(총 {{ pagination.total_items }}개)</span>
    </div>
    {% endif %}

    {% else %}
    <p>지난 3일간의 제어 이력이 없습니다.</p>
    {% endif %}
{% endblock %}

{% block scripts %}
{{ super() }} {# layout.html의 scripts 블록 내용을 먼저 포함 #}
{# Chart.js CDN 링크 #}
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script> 
{# Chart.js 버전은 필요에 따라 최신으로 변경 가능, 또는 로컬에 저장된 파일 사용 #}
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('actionLogChart');
        if (ctx) {
            let chartDataFromFlask;
            try {
                // Flask에서 전달된 chart_data_json (JSON 문자열)을 JavaScript 객체로 파싱
                // tojson 필터는 XSS 방지를 위해 유니코드 문자를 이스케이프하므로, 
                // JavaScript에서 안전하게 사용하려면 HTML 속성이나 <script> 태그 내 변수로 전달하는 것이 좋음.
                // 여기서는 tojson의 결과를 직접 JSON.parse에 사용합니다.
                // 만약 chart_data_json에 HTML 특수 문자가 포함될 가능성이 거의 없다면 |safe 를 사용할 수 있지만,
                // tojson 이 더 안전합니다.
                const chartDataJsonString = {{ chart_data_json|tojson }}; // tojson은 이미 문자열을 반환하므로 JSON.parse에 바로 사용
                chartDataFromFlask = JSON.parse(chartDataJsonString);

            } catch (e) {
                console.error("Flask에서 전달된 차트 데이터(chart_data_json) 파싱 오류:", e);
                // chart_data_json 변수 자체를 콘솔에 찍어보는 것도 좋음
                // console.log("Raw chart_data_json from Flask:", {{ chart_data_json|safe if chart_data_json else 'null' }});
                // ctx.parentElement.innerHTML = "<p style='color:red;'>차트 데이터를 로드하는 중 오류가 발생했습니다.</p>";
                // return; // 차트 초기화 중단
            }

            if (chartDataFromFlask) {
                new Chart(ctx, {
                    type: 'bar', // 막대 차트 (또는 'pie', 'line' 등)
                    data: chartDataFromFlask, // Flask에서 전달된 데이터 사용
                    options: {
                        responsive: true,
                        maintainAspectRatio: false, // 컨테이너 크기에 맞게 비율 조정 안함 (높이 조절 용이)
                        indexAxis: 'y', // 가로 막대 차트로 변경 (선택 사항)
                        scales: {
                            x: { // 가로 막대 차트에서는 x축이 값 ????
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1, // Y축(이제 X축) 눈금 간격
                                    precision: 0 // 정수 눈금만 표시
                                }
                            },
                            y: { // 가로 막대 차트에서는 y축이 레이블 ????
                                // 필요한 경우 y축 관련 설정 추가
                            }
                        },
                        plugins: {
                            title: {
                                display: true,
                                text: '최근 3일간 명령 실행 현황',
                                font: { size: 16, weight: 'bold' },
                                padding: { top: 10, bottom: 20 }
                            },
                            legend: {
                                position: 'bottom', // 범례 위치
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                            }
                        }
                    }
                });
            } else {
                 console.warn("차트 데이터가 Flask로부터 제대로 전달되지 않았습니다.");
                 if(ctx.parentElement){ // 안전하게 부모 요소가 있는지 확인
                    // ctx.parentElement.innerHTML = "<p style='color:orange;'>차트 데이터를 표시할 수 없습니다.</p>";
                 }
            }
        } else {
            console.warn("Chart canvas element 'actionLogChart' not found.");
        }
    });
</script>
{% endblock %}