안드로이드 스튜디오에서 Jetpack Compose를 사용할 경우 XML 레이아웃 파일이 아닌 Kotlin 코드로 UI를 작성하게 됩니다. 이 방법으로 16개의 버튼을 두 줄로 배치하고, 버튼 클릭 시 192.168.102.1의 공유 폴더에 있는 1.txt 파일에 값을 기록하는 예제를 작성하겠습니다.

1. 프로젝트 설정
build.gradle (프로젝트 수준)

groovy
코드 복사
buildscript {
    ext.kotlin_version = "1.8.21"
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:8.0.2"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}
build.gradle (앱 수준)

groovy
코드 복사
plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.example.yourapp"
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.10.1'
    implementation 'androidx.compose.ui:ui:1.4.3'
    implementation 'androidx.compose.material:material:1.4.3'
    implementation 'androidx.compose.ui:ui-tooling-preview:1.4.3'
    implementation 'androidx.activity:activity-compose:1.6.1'
    implementation 'com.github.agna:smbj:0.11.0'
}
2. MainActivity 설정
MainActivity.kt

kotlin
코드 복사
package com.example.yourapp

import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.padding
import androidx.compose.material.Button
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import com.hierynomus.msdtyp.AccessMask
import com.hierynomus.smbj.SMBClient
import com.hierynomus.smbj.auth.AuthenticationContext
import com.hierynomus.smbj.connection.Connection
import com.hierynomus.smbj.session.Session
import com.hierynomus.smbj.share.DiskShare
import com.hierynomus.smbj.share.File
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.GlobalScope
import kotlinx.coroutines.launch
import java.io.OutputStreamWriter

class MainActivity : ComponentActivity() {

    private val smbClient = SMBClient()
    private lateinit var connection: Connection
    private lateinit var session: Session
    private lateinit var share: DiskShare

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MyApp()
        }
        connectToSmb()
    }

    @Composable
    fun MyApp() {
        Column(
            verticalArrangement = Arrangement.spacedBy(8.dp),
            modifier = Modifier.padding(16.dp)
        ) {
            for (i in 0..1) {
                Row(
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    for (j in 1..8) {
                        val label = "${i + 1}T$j"
                        Button(onClick = { writeToFile(label) }) {
                            Text(text = label)
                        }
                    }
                }
            }
        }
    }

    private fun connectToSmb() {
        GlobalScope.launch(Dispatchers.IO) {
            try {
                connection = smbClient.connect("192.168.102.1")
                val ac = AuthenticationContext("username", "password".toCharArray(), "domain")
                session = connection.authenticate(ac)
                share = session.connectShare("sfolder") as DiskShare
            } catch (e: Exception) {
                Log.e("SMB", "Connection error: ${e.message}")
            }
        }
    }

    private fun writeToFile(content: String) {
        GlobalScope.launch(Dispatchers.IO) {
            try {
                val remoteFile: File = share.openFile(
                    "1.txt",
                    setOf(AccessMask.GENERIC_WRITE),
                    null,
                    SMB2CreateDisposition.FILE_OPEN_IF,
                    null
                )

                remoteFile.outputStream.use { output ->
                    OutputStreamWriter(output).use { writer ->
                        writer.write(content)
                        writer.flush()
                    }
                }
            } catch (e: Exception) {
                Log.e("SMB", "File write error: ${e.message}")
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        try {
            if (this::share.isInitialized) share.close()
            if (this::session.isInitialized) session.close()
            if (this::connection.isInitialized) connection.close()
        } catch (e: Exception) {
            Log.e("SMB", "Error closing connection: ${e.message}")
        }
    }
}
이 코드는 Jetpack Compose를 사용하여 16개의 버튼을 두 줄로 배치하고, 각 버튼을 클릭하면 해당 버튼의 텍스트가 1.txt 파일에 기록됩니다. 네트워크 폴더에 파일을 쓰기 위해 jcifs-ng 라이브러리를 사용합니다. 이 코드는 Android 7.0 이상에서도 작동하도록 설정되었습니다.






4o