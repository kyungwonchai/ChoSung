import os
import torch
import pickle
import pandas as pd
from train import TextClassifier, MODEL_PATH, EMBEDDING_DIM, HIDDEN_DIM

# ?? 저장된 vocab과 label_encoder 불러오기
with open("vocab.pkl", "rb") as f:
    vocab = pickle.load(f)

with open("label_encoder.pkl", "rb") as f:
    label_encoder = pickle.load(f)

# ?? 예측을 위한 데이터셋 클래스 (훈련 데이터 불필요)
class PredictionDataset:
    def __init__(self, vocab):
        self.vocab = vocab

    def tokenize(self, text):
        return text.lower().split()

    def encode_text(self, text):
        tokens = self.tokenize(text)
        return [self.vocab.get(token, 0) for token in tokens]

# ?? 예측 수행 함수
def predict_from_folder(folder):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # ?? 저장된 모델 불러오기
    model = TextClassifier(len(vocab), EMBEDDING_DIM, HIDDEN_DIM, len(label_encoder.classes_))
    model.load_state_dict(torch.load(MODEL_PATH, map_location=device))
    model.to(device)
    model.eval()

    file_paths = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(".txt")]
    predictions = []

    with torch.no_grad():
        dataset = PredictionDataset(vocab)
        for file_path in file_paths:
            with open(file_path, 'r', encoding='utf-8') as f:
                text = f.read()
            input_tensor = torch.tensor([dataset.encode_text(text)], dtype=torch.long).to(device)
            output = model(input_tensor)
            pred_label = label_encoder.inverse_transform([torch.argmax(output, dim=1).item()])[0]
            predictions.append((os.path.basename(file_path), pred_label))

    # ?? 결과 저장
    df = pd.DataFrame(predictions, columns=["파일명", "예측된 숫자"])
    df.to_csv(os.path.join(folder, "prediction_results.txt"), index=False, sep="\t", encoding="utf-8")
    df.to_excel(os.path.join(folder, "prediction_results.xlsx"), index=False)

    print(f"? 예측 완료: 결과 저장 → {folder}/prediction_results.txt, {folder}/prediction_results.xlsx")
    print(df)

# ?? 실행 코드
if __name__ == "__main__":
    predict_from_folder("data3/test3")  # ? 예측할 폴더 (새로운 데이터)
