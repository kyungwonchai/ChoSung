 코드를 통해 DropShadowEffect를 사용하여 선 주위에만 흐림 효과를 주면서 내부 콘텐츠에는 영향을 미치지 않도록 구현해보겠습니다.

수정된 XAML 코드:
xml
코드 복사
<Window x:Class="GradientBorderExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="300" Width="400">
    <Grid>
        <!-- 푸른 그라데이션 및 흐림 효과가 적용된 Border -->
        <Border Width="300" Height="150" CornerRadius="10" BorderThickness="5">
            <!-- 선을 따라 푸른 그라데이션 설정 -->
            <Border.BorderBrush>
                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                    <GradientStop Color="LightBlue" Offset="0.0"/>
                    <GradientStop Color="Blue" Offset="1.0"/>
                </LinearGradientBrush>
            </Border.BorderBrush>

            <!-- 선 주위만 은은한 흐림 효과 (DropShadowEffect 사용) -->
            <Border.Effect>
                <DropShadowEffect Color="LightBlue"
                                  BlurRadius="10"
                                  ShadowDepth="0"
                                  Opacity="0.8"/>
            </Border.Effect>

            <!-- 내용물: 텍스트 블록 -->
            <TextBlock Text="This is a Border with gradient and shadow effect."
                       VerticalAlignment="Center" HorizontalAlignment="Center"/>
        </Border>
    </Grid>
</Window>
설명:
DropShadowEffect:
BlurRadius="10": 그림자 흐림의 정도를 조정합니다. 값이 클수록 흐림이 강해지지만, 선 주위에서만 흐리게 만들기 위해 적절히 조정했습니다.
ShadowDepth="0": 그림자의 거리 값을 0으로 설정하여 그림자가 멀리 떨어지지 않고 Border 주위에만 흐림 효과가 적용되도록 했습니다.
Opacity="0.8": 그림자의 투명도를 조정하여 너무 진하지 않도록 자연스러운 흐림 효과를 만들었습니다.
선 주위에만 효과 적용:
DropShadowEffect는 BlurEffect처럼 전체를 덮지 않고, 선 주위에만 흐림 효과를 줍니다. 이를 통해 Border의 내부 콘텐츠에는 영향을 미치지 않으면서 선 주위에만 흐림 효과가 자연스럽게 적용됩니다.
이 코드를 실행하면 선 주위에만 은은한 푸른 흐림 효과가 적용되고, 내부 텍스트나 콘텐츠는 뿌옇게 덮이지 않도록 할 수 있습니다.