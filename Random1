이 오류는 보통 인텐트를 통해 데이터를 주고받을 때 발생할 수 있습니다. 특히 null 값을 전달하려고 할 때 발생합니다. 오류를 해결하려면 QRBarcodeService 클래스에서 Intent의 데이터를 확인하고, null 값이 전달되지 않도록 해야 합니다.

하지만, 현재 QRBarcodeService에서는 Intent를 사용하지 않으므로 다른 부분에서 문제가 발생했을 가능성이 큽니다. 가장 먼저 할 수 있는 것은 MainActivity에서 서비스 시작 부분과 Intent 객체의 초기화 상태를 확인하는 것입니다.

수정된 코드
아래는 MainActivity와 QRBarcodeService에서 Intent를 명확히 설정하고, 로그를 추가하여 오류를 추적하는 방법입니다.

1. MainActivity.kt

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.core.content.ContextCompat
import android.util.Log

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        try {
            val serviceIntent = Intent(this, QRBarcodeService::class.java)
            ContextCompat.startForegroundService(this, serviceIntent)
        } catch (e: Exception) {
            Log.e("MainActivity", "Error starting service", e)
        }

        // 메인 액티비티를 백그라운드로 전환
        moveTaskToBack(true)
    }
}
2. QRBarcodeService.kt

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.media.RingtoneManager
import android.os.Build
import android.os.IBinder
import android.util.Log
import androidx.core.app.NotificationCompat
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.CompoundBarcodeView
import java.sql.DriverManager

class QRBarcodeService : Service() {

    private lateinit var barcodeView: CompoundBarcodeView

    override fun onCreate() {
        super.onCreate()
        try {
            barcodeView = CompoundBarcodeView(this)
            barcodeView.decodeContinuous(object : BarcodeCallback {
                override fun barcodeResult(result: BarcodeResult?) {
                    result?.let {
                        val qrCodeData = it.text
                        // MSSQL 데이터베이스에 저장
                        saveToDatabase(qrCodeData)
                        // 소리 재생
                        playSound()
                    }
                }

                override fun possibleResultPoints(resultPoints: MutableList<com.google.zxing.ResultPoint>?) {}
            })
            startForegroundService()
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error in onCreate", e)
        }
    }

    private fun startForegroundService() {
        try {
            val channelId = "QRBarcodeServiceChannel"
            val channelName = "QR Barcode Service"
            val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
                notificationManager.createNotificationChannel(channel)
            }
            val notification: Notification = NotificationCompat.Builder(this, channelId)
                .setContentTitle("QR Barcode Service")
                .setContentText("Scanning for QR codes and barcodes in the background")
                .setSmallIcon(R.drawable.ic_launcher_foreground)
                .build()
            startForeground(1, notification)
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error starting foreground service", e)
        }
    }

    private fun saveToDatabase(data: String) {
        Thread {
            try {
                // JDBC URL
                val connectionUrl = "jdbc:sqlserver://<SERVER_IP>:<PORT>;databaseName=QRCodeScannerDB;user=<USER>;password=<PASSWORD>"

                // 데이터베이스 연결
                val connection = DriverManager.getConnection(connectionUrl)

                // SQL 쿼리
                val statement = connection.createStatement()
                val sql = "INSERT INTO ScannedData (QRCodeData) VALUES ('$data')"

                // 쿼리 실행
                statement.executeUpdate(sql)

                // 연결 종료
                statement.close()
                connection.close()
            } catch (e: Exception) {
                Log.e("QRBarcodeService", "Error saving to database", e)
            }
        }.start()
    }

    private fun playSound() {
        try {
            val notification = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
            val r = RingtoneManager.getRingtone(applicationContext, notification)
            r.play()
        } catch (e: Exception) {
            Log.e("QRBarcodeService", "Error playing sound", e)
        }
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
로그를 확인하여 디버깅하기
위 코드에서 Log.e를 사용하여 오류가 발생할 수 있는 모든 주요 부분에 로그를 추가했습니다. 이제 앱을 실행한 후 Logcat에서 "MainActivity"와 "QRBarcodeService" 태그로 필터링하여 오류 메시지를 확인할 수 있습니다.

이렇게 하면 오류의 원인을 보다 명확하게 파악할 수 있고, 추가적인 조치를 취할 수 있습니다. 만약 특정 위치에서 오류가 발생한다면, 해