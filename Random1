문서 목적: 이 문서는 AI 기반 코드 처리 엔진(이하 'AI')에게 C# 프로젝트의 전면적인 리팩토링 및 안정화 작업을 지시하기 위한 공식 명령 명세서입니다. AI는 이 문서에 기술된 절차, 규칙, 철학을 단 하나의 예외 없이 준수해야 합니다.

작업 핵심 철학: "선(先) 전면 개선, 후(後) 안정화". 코드의 품질을 산발적으로 개선하는 것이 아니라, 전문가가 프로젝트 전체를 한 번에 재설계하듯, 가능한 모든 개선 사항을 코드베이스 전체에 먼저 적용합니다. 그 후, 오직 그 결과물이 완벽하게 컴파일되도록 만드는 '안정화' 단계에 집중합니다.

Phase 0: 사전 준비 및 환경 설정 (Pre-computation & Environment Setup)
이유: 본격적인 코드 수정에 앞서, 작업의 안정성을 보장하고 필요한 모든 정보를 사전에 확보하기 위함입니다.

0.1: 최우선 원칙 - .NET 프레임워크 버전 절대 불변 확인 (TOP PRIORITY - .NET FRAMEWORK VERSION IMMUTABILITY)

명령: 다른 모든 작업에 앞서, 프로젝트의 원본 .NET Framework 버전을 .csproj 파일에서 정확히 감지하십시오. 이 버전은 이번 작업 전체에서 **'절대 불변의 상수'**로 취급해야 합니다.
검증 절차: 어떠한 리팩토링 과정에서도 이 버전을 업그레이드하거나 변경하려는 시도를 해서는 안 됩니다. 만약 코드 수정 후 .csproj 파일의 <TargetFrameworkVersion> 또는 관련 태그가 원본과 달라졌다면, 해당 수정은 즉시 실패로 간주하고 원상 복구해야 합니다.
이유: 프로젝트는 특정 .NET 버전에 강하게 종속된 라이브러리와 API를 사용할 가능성이 높습니다. 버전을 변경하는 것은 수많은 컴파일 오류와 런타임 예외를 유발하는, 가장 위험하고 금지된 작업입니다.
0.2: 작업 대상 식별: 현재 AI의 작업 세션 또는 활성 환경에 로드된 Visual Studio 솔루션(.sln)을 이번 작업의 유일한 대상으로 확정하십시오.

0.3: 메타데이터 추출 및 저장: 대상 솔루션으로부터 다음의 핵심 데이터들을 추출하여 내부 변수에 저장하고, 작업이 끝날 때까지 이 데이터를 일관되게 사용하십시오.

SolutionName: 솔루션 파일의 이름 (예: MyProject.sln)
SolutionRootPath: 솔루션 파일이 위치한 최상위 디렉토리의 절대 경로
BuildConfig: 솔루션에 정의된 기본 빌드 구성 (예: Debug|Any CPU)
0.4: 백업 건너뛰기 확인: 경고: 사용자의 명시적인 지시에 따라, 원본 소스 코드 백업 단계를 건너뜁니다. 이 작업은 안전망 없이 원본 코드를 직접 수정하므로, 모든 변경 사항은 되돌릴 수 없습니다. 각별한 주의가 필요합니다.

Phase 1: 전역 코드 리팩토링 (Global Code Refactoring)
이유: 이 단계의 목표는 코드베이스를 '최상의 상태'로 한 번에 변환하는 것입니다.

1.1: 작업 철학의 이해: 이 단계는 단 한 번의 원자적(Atomic)인 작업으로, 프로젝트 전체를 분석하고 가능한 모든 개선점을 적용하는 과정입니다.

1.2: 종합 분석 지시: 솔루션에 포함된 모든 C# 소스 코드 파일(.cs)에 대해 심층 분석을 시작하여 코드 간의 모든 상호 의존성을 파악해야 합니다.

1.3: 다중 개선 항목 동시 적용: 1.2의 분석 모델을 바탕으로, 아래 체크리스트의 모든 항목에 해당하는 개선 사항을 코드베이스 전체에 걸쳐 적용하십시오.

[리팩토링 체크리스트]
안정성 확보: 잠재적인 모든 리소스 누수 지점을 찾아 수정하십시오.
구조적 개선: 과도하게 비대한 클래스나 메서드를 논리적인 단위로 분할하십시오.
군더더기 제거: 절대로 호출되지 않는 private 멤버, 미사용 참조 및 using 지시문을 과감히 삭제하십시오.
설계 품질 향상: SOLID 원칙과 디자인 패턴을 코드의 맥락에 맞게 적용하십시오.
비동기 처리 및 스레드 안전성 강화:
명령 1 (적극적인 async/await 도입): 모든 동기적 장기 실행 작업을 async/await 기반의 비동기 코드로 전환하십시오.
명령 2 (UI 스레드 접근 규칙 절대 준수): 백그라운드 스레드에서 UI 컨트롤을 직접 접근하는 코드는 절대 있어서는 안 되며, 발견 즉시 올바르게 수정해야 합니다.
명령 3 (비동기 안티패턴 방지): async void의 부적절한 사용을 피하고, ConfigureAwait(false)를 적극적으로 사용하여 데드락을 예방하십시오.
Phase 2: 빌드 안정화 루프 (Build Stabilization Loop)
이유: 1단계의 대규모 변경으로 인해 발생한 컴파일 오류를 체계적으로 해결하기 위함입니다. 이 단계의 유일한 목표는 '컴파일 성공'입니다.

2.1: 루프의 목적 명확화: 당신은 이제부터 '리팩터'가 아닌 '버그 픽서'의 역할을 수행합니다. 코드의 의미나 구조를 바꾸려 해서는 안 됩니다.

2.2: 실행 프로토콜: 최대 50회 또는 빌드가 성공할 때까지 아래의 'A-B-C' 단계를 반복하십시오.

A. 빌드 시도 및 로그 생성: MSBuild 커맨드를 실행하고, 모든 출력 및 에러를 1.log 파일에 덮어쓰기 형태로 저장해야 합니다. (msbuild ... > 1.log 2>&1)
B. 결과 분석: 1.log 파일의 내용을 읽고 빌드 성공 또는 실패 여부를 확인합니다.
C. 오류 수정 (빌드 실패 시):
명령 1 (최우선 순위 오류 처리 - sDatabaseServer.dll): 에러 원인이 smdDBConnection 클래스 참조 누락일 경우, 프로젝트의 빌드 출력 폴더(예: bin\Debug)에서 sDatabaseServer.dll을 찾아 참조를 올바르게 수정하고 즉시 A단계로 돌아갑니다.
명령 2 (일반 오류 처리): 위 경우가 아니라면, 로그에 기록된 가장 첫 번째 에러에만 집중하여, 문제를 해결하기 위한 최소한의 코드 수정만을 적용하고 즉시 A단계로 돌아갑니다.
Phase 3: 최종 보고 및 완료 (Final Reporting & Completion)
이유: 사용자가 AI의 모든 작업을 명확하게 추적하고, 어떤 코드가 왜 변경되었는지 완전히 이해할 수 있도록 하기 위함입니다.

3.1: 보고서 생성: D:\refactoringhistory\{SolutionFolderName}\{SolutionName}_{yyyyMMddHHmmss}.txt 경로에 최종 보고 파일을 생성하십시오.
3.2: 보고서 내용 명세 (상세 감사 추적):
명령: 생성된 파일에 다음 내용을 '반드시' 극도로 상세하게 기록하십시오.
1. 작업 요약: "전역 리팩토링 후 빌드 안정화 작업 완료. 총 빌드 시도 횟수: [실제 시도 횟수]회."
2. 상세 변경 로그: 1단계와 2단계에서 발생한 모든 코드 수정 내역을 단 하나도 빠짐없이 Git Diff 스타일의 Before/After 형식으로 기록해야 합니다.
전역 불변 규칙 (Global Immutable Rules)
경고: 아래 규칙들은 이 명세서의 다른 어떤 지시보다도 우선하며, 모든 단계에서 항상 유효합니다.

[최상위 규칙] .NET 프레임워크 버전 절대 유지: Phase 0에서 감지된 원본 .NET 버전은 작업 전 과정에 걸쳐 절대 변경되어서는 안 됩니다.
실행 절대 금지: 컴파일된 .exe 파일은 어떤 이유로도 실행되어서는 안 됩니다.
password 문자열 취급: 이 단어는 일반 텍스트로 간주하며, 수정 대상에서 제외하지 않습니다.
실제 자격 증명 보호: 명백한 데이터베이스 연결 문자열 등은 절대 수정해서는 안 됩니다.