인되지 않았을 때 로컬 favorites.txt 파일을 사용하고, 로그인되면 데이터베이스를 사용하도록 수정한 전체 코드입니다. 이 코드에서는 로컬 파일을 기반으로 즐겨찾기를 관리하다가 로그인하면 DB 데이터로 전환합니다.

주요 기능
로컬 파일 기반 즐겨찾기:

favorites.txt 파일을 로컬에 저장.
파일 경로: AppDomain.CurrentDomain.BaseDirectory/favorites.txt.
DB와 로컬 파일 전환:

로그인: DB에서 즐겨찾기 데이터 로드.
로그아웃: 로컬 파일 기반 데이터 사용.
자동 전환:

로그인 시 DB 데이터를 우선 적용.
로그아웃 시 로컬 파일 데이터를 자동 로드.
전체 코드
전역 변수
csharp
코드 복사
using System.Data.SqlClient;
using System.IO;

private static readonly string ConnectionString = "Server=your_server,1633;Database=your_database;User Id=your_user;Password=your_password;";
private const string Separator = ","; // 즐겨찾기 구분자
private string currentUserId; // 현재 사용자 ID
private readonly string localFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "favorites.txt");
SetCurrentUser 함수
csharp
코드 복사
public void SetCurrentUser(string userId)
{
    try
    {
        currentUserId = userId;

        if (!string.IsNullOrWhiteSpace(currentUserId))
        {
            Console.WriteLine($"[Info] Logged in as User ID: {currentUserId}");
            LoadFavoritesFromDatabase(); // DB 데이터 로드
        }
        else
        {
            Console.WriteLine("[Info] Logged out. Using local favorites.");
            LoadFavoritesFromFile(); // 로컬 파일 데이터 로드
        }

        InitializeButtons(); // UI 갱신
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Error] SetCurrentUser: {ex.Message}");
    }
}
LoadFavoritesFromDatabase 함수
csharp
코드 복사
private void LoadFavoritesFromDatabase()
{
    try
    {
        favoriteKeys.Clear();

        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();
            var command = new SqlCommand("SELECT FavoriteItems FROM Favorites WHERE UserId = @UserId", connection);
            command.Parameters.AddWithValue("@UserId", currentUserId);

            using (var reader = command.ExecuteReader())
            {
                if (reader.Read() && !reader.IsDBNull(0))
                {
                    var favorites = reader.GetString(0);
                    favoriteKeys.UnionWith(favorites.Split(new[] { Separator }, StringSplitOptions.RemoveEmptyEntries));
                }
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Error] LoadFavoritesFromDatabase: {ex.Message}");
    }
}
LoadFavoritesFromFile 함수
csharp
코드 복사
private void LoadFavoritesFromFile()
{
    try
    {
        favoriteKeys.Clear();

        if (File.Exists(localFilePath))
        {
            var favorites = File.ReadAllText(localFilePath);
            favoriteKeys.UnionWith(favorites.Split(new[] { Separator }, StringSplitOptions.RemoveEmptyEntries));
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Error] LoadFavoritesFromFile: {ex.Message}");
    }
}
SaveFavoritesToDatabase 함수
csharp
코드 복사
private void SaveFavoritesToDatabase()
{
    if (string.IsNullOrWhiteSpace(currentUserId))
    {
        Console.WriteLine("[Info] SaveFavoritesToDatabase: User ID is invalid.");
        return;
    }

    try
    {
        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();
            var favorites = string.Join(Separator, favoriteKeys);

            var command = new SqlCommand(@"
                IF EXISTS (SELECT 1 FROM Favorites WHERE UserId = @UserId)
                BEGIN
                    UPDATE Favorites SET FavoriteItems = @FavoriteItems WHERE UserId = @UserId
                END
                ELSE
                BEGIN
                    INSERT INTO Favorites (UserId, FavoriteItems) VALUES (@UserId, @FavoriteItems)
                END", connection);

            command.Parameters.AddWithValue("@UserId", currentUserId);
            command.Parameters.AddWithValue("@FavoriteItems", favorites);
            command.ExecuteNonQuery();
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Error] SaveFavoritesToDatabase: {ex.Message}");
    }
}
SaveFavoritesToFile 함수
csharp
코드 복사
private void SaveFavoritesToFile()
{
    try
    {
        var favorites = string.Join(Separator, favoriteKeys);
        File.WriteAllText(localFilePath, favorites);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"[Error] SaveFavoritesToFile: {ex.Message}");
    }
}
ToggleFavorite 함수
csharp
코드 복사
private void ToggleFavorite(string buttonName, BarButtonItem button)
{
    if (favoriteKeys.Contains(buttonName))
    {
        favoriteKeys.Remove(buttonName);
        ResetButtonStyle(button);
        RemoveFromFavorites(button);
    }
    else
    {
        favoriteKeys.Add(buttonName);
        ApplyFavoriteStyle(button);
        AddToFavorites(button, GetButtonGroupName(button));
    }

    if (!string.IsNullOrWhiteSpace(currentUserId))
    {
        SaveFavoritesToDatabase(); // 로그인 상태에서는 DB에 저장
    }
    else
    {
        SaveFavoritesToFile(); // 로그아웃 상태에서는 로컬 파일에 저장
    }
}
InitializeButtons 함수
csharp
코드 복사
private void InitializeButtons()
{
    foreach (RibbonPage page in ribbonK.Pages)
    {
        foreach (RibbonPageGroup group in page.Groups)
        {
            group.ItemLinks.Clear(); // 기존 버튼 제거
        }
    }

    foreach (var buttonName in favoriteKeys)
    {
        if (buttonsDictionary.TryGetValue(buttonName, out var button))
        {
            ApplyFavoriteStyle(button);
            AddToFavorites(button, GetButtonGroupName(button));
        }
    }
}
동작 흐름
프로그램 시작:

사용자 로그인이 없는 경우 LoadFavoritesFromFile로 로컬 파일에서 즐겨찾기 로드.
로그인:

SetCurrentUser 호출 시 currentUserId가 설정되고, LoadFavoritesFromDatabase로 DB 데이터를 로드.
즐겨찾기 추가/제거:

로그인 상태에서는 SaveFavoritesToDatabase로 DB에 반영.
로그아웃 상태에서는 SaveFavoritesToFile로 로컬 파일에 반영.
로그아웃:

SetCurrentUser(null) 호출 시 LoadFavoritesFromFile로 로컬 파일 데이터를 로드.
테스트 케이스
로그인 없이 실행:

favorites.txt 파일이 없다면 빈 상태로 시작.
favorites.txt에 즐겨찾기 추가/제거 가능.
로그인:

로그인 후 DB 데이터 로드.
favorites.txt 데이터는 무시되고, DB 기반으로 동작.
로그아웃:
