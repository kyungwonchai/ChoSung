습니다. 타이틀바에서 더블 클릭이 안 먹히는 문제를 확실히 해결하기 위해 투명 버튼으로 타이틀바 영역을 덮어 클릭 및 더블 클릭 이벤트를 강제로 처리하도록 구현하겠습니다.

완벽한 더블 클릭 및 드래그 가능한 커스텀 타이틀바
아래 코드는 SkinableForm에서 더블 클릭이 안 되는 문제를 해결하기 위해 투명 버튼을 활용해 타이틀바를 덮고 이벤트를 직접 처리한 구현입니다.

코드 구현
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;
    private Panel transparentTitleBar;

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 타이틀바 높이 확보
        this.DoubleBuffered = true; // 깜빡임 방지

        // 투명 타이틀바 패널 추가
        transparentTitleBar = new Panel
        {
            Size = new Size(this.Width, 30),
            Location = new Point(0, 0),
            BackColor = Color.Transparent
        };
        transparentTitleBar.MouseDown += TransparentTitleBar_MouseDown;
        transparentTitleBar.MouseDoubleClick += TransparentTitleBar_MouseDoubleClick;
        this.Controls.Add(transparentTitleBar);

        // 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 타이틀바와 버튼 위치 업데이트
        this.SizeChanged += UpdateLayout;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        var button = new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            }
        };
        button.Click += clickHandler; // 클릭 이벤트 등록
        return button;
    }

    private void UpdateLayout(object sender, EventArgs e)
    {
        // 투명 타이틀바와 버튼 위치 업데이트
        transparentTitleBar.Size = new Size(this.Width, 30);
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경 그리기
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, new Rectangle(0, 0, this.Width, 30));
        }

        // 타이틀바 텍스트 그리기
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    private void TransparentTitleBar_MouseDown(object sender, MouseEventArgs e)
    {
        // 타이틀바 드래그로 창 이동
        if (e.Button == MouseButtons.Left)
        {
            this.Capture = false;
            var message = Message.Create(this.Handle, 0xA1, new IntPtr(2), IntPtr.Zero); // WM_NCLBUTTONDOWN, HTCAPTION
            this.WndProc(ref message);
        }
    }

    private void TransparentTitleBar_MouseDoubleClick(object sender, MouseEventArgs e)
    {
        // 타이틀바 더블 클릭으로 최대화/복원
        if (e.Button == MouseButtons.Left)
        {
            ToggleMaximizeRestore();
        }
    }

    private void ToggleMaximizeRestore()
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        ToggleMaximizeRestore(); // 최대화/복원
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
핵심 구현 사항
투명 패널을 통한 타이틀바 감지:

transparentTitleBar 패널로 타이틀바 영역을 덮어 클릭 및 더블 클릭 이벤트를 처리.
투명 패널의 MouseDown 이벤트로 창 이동.
MouseDoubleClick 이벤트로 최대화/복원 동작 구현.
타이틀바 드래그 처리:

MouseDown 이벤트에서 Windows 메시지 WM_NCLBUTTONDOWN을 직접 호출하여 창을 이동.
타이틀바 더블 클릭:
