아래는 MouseDown 이벤트를 사용하여 범례 항목을 클릭했을 때 해당 MP 시리즈의 가시성을 제어하도록 수정한 전체 코드입니다. LegendItem.Series가 인식되지 않는 문제를 해결하기 위해, 시리즈의 Tag 속성을 이용해 범례 항목과 시리즈를 매핑하는 방식을 적용했습니다.

수정된 C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadDataFromDatabase();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, dataL, "Timestamp", "Values");

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, dataR, "Timestamp", "Values");

            // 범례 항목 클릭 이벤트 설정
            AddLegendMouseDownEvent(LModelChart, "L");
            AddLegendMouseDownEvent(RModelChart, "R");
        }

        private List<DataPoint> LoadDataFromDatabase()
        {
            var result = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        result.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }

            return result;
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new BoxPlotSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "ModelName",
                    ValueDataMember = "MP1" // BoxPlot 기준 데이터
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)LineChart.Diagram, "Line Name", "Values");
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data, string xTitle, string yTitle)
        {
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName // Tag를 사용하여 LegendItem과 매핑
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }

            // X축 및 Y축 제목 설정
            SetAxisTitles((XYDiagram2D)chart.Diagram, xTitle, yTitle);
        }

        private void SetAxisTitles(XYDiagram2D diagram, string xTitle, string yTitle)
        {
            diagram.AxisX.Title = new AxisTitle { Content = xTitle, Visibility = System.Windows.Visibility.Visible };
            diagram.AxisY.Title = new AxisTitle { Content = yTitle, Visibility = System.Windows.Visibility.Visible };
        }

        private void AddLegendMouseDownEvent(ChartControl chart, string chartName)
        {
            // Legend MouseDown 이벤트 설정
            chart.MouseDown += (s, e) =>
            {
                if (e.HitInfo != null && e.HitInfo.InLegend)
                {
                    var legendItem = e.HitInfo as LegendHitInfo;
                    if (legendItem != null && legendItem.Series != null)
                    {
                        var mpName = legendItem.Series.Tag as string;
                        ToggleSeriesVisibility(mpName, chartName);
                    }
                }
            };
        }

        private void ToggleSeriesVisibility(string mpName, string chartName)
        {
            // 선택한 Chart(L 또는 R)의 시리즈 가시성 토글
            if (chartName == "L")
            {
                ToggleSeriesInChart(LModelChart, mpName);
            }
            else if (chartName == "R")
            {
                ToggleSeriesInChart(RModelChart, mpName);
            }
        }

        private void ToggleSeriesInChart(ChartControl chart, string mpName)
        {
            foreach (var series in ((XYDiagram2D)chart.Diagram).Series)
            {
                if (series.Tag as string == mpName)
                {
                    series.Visible = !series.Visible;
                }
            }
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
수정 사항 요약
MouseDown 이벤트를 사용한 범례 항목 클릭 처리:

차트의 MouseDown 이벤트를 설정하여, 범례 항목을 클릭했을 때 해당 LegendHitInfo에서 Tag 속성을 이용해 MP 시리즈를 식별합니다.
LegendHitInfo로 범례 항목 정보 확인:

MouseDown 이벤트의 e.HitInfo를 통해 범례 항목에 대한 정보를 가져옵니다.
LegendHitInfo.Series.Tag를 사용해 MP 시리즈를 매핑합니다.
범례 항목과 시리즈 매핑:

각 시리즈의 Tag 속성에 MP1, MP2, 등과 같은 이름을 저장하여 범례 클릭 시 가시성을 토글합니다.
선택 차트(L/R)에 따라 토글:
