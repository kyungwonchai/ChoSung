래는 기존 코드를 유지하면서 타이머를 추가하여 작업을 프로그램 시작 시 자동 실행하고, 1분 간격으로 반복 실행하도록 수정한 최종 코드입니다.

MainWindow.xaml.cs (수정된 전체 코드)
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private System.Timers.Timer _timer;

        public MainWindow()
        {
            InitializeComponent();
            InitializeAutoTask(); // 타이머 설정 및 작업 자동 실행
        }

        /// <summary>
        /// 타이머를 초기화하고 작업을 자동 실행합니다.
        /// </summary>
        private void InitializeAutoTask()
        {
            // 타이머 설정: 1분(60,000ms) 간격으로 실행
            _timer = new System.Timers.Timer(60000);
            _timer.Elapsed += async (s, e) => await ExecuteTaskAsync(); // 작업 실행
            _timer.AutoReset = true; // 반복 실행
            _timer.Enabled = true;   // 타이머 활성화

            // 프로그램 시작 시 작업 즉시 실행
            _ = ExecuteTaskAsync();
        }

        /// <summary>
        /// 작업을 비동기로 실행합니다.
        /// </summary>
        private async Task ExecuteTaskAsync()
        {
            try
            {
                // 작업 시작 로그 추가
                AddLog("작업 시작");

                // 여기에 기존 작업 코드 추가
                await Task.Run(() =>
                {
                    // 예제 작업 코드: 파일 처리, DB 업로드 등
                    Thread.Sleep(5000); // 5초 대기 (예제 작업)
                });

                // 작업 완료 로그 추가
                AddLog("작업 완료");
            }
            catch (Exception ex)
            {
                // 작업 중 에러 발생 시 로그 추가
                AddLog($"작업 중 에러: {ex.Message}");
            }
        }

        /// <summary>
        /// 리스트박스에 로그를 추가하고, 20개까지만 유지합니다.
        /// </summary>
        /// <param name="message">로그 메시지</param>
        private void AddLog(string message)
        {
            // 현재 시간과 메시지 결합
            string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            // 리스트박스에 로그 추가
            Application.Current.Dispatcher.Invoke(() =>
            {
                ListBoxLogs.Items.Add(log);

                // 리스트박스 항목이 20개를 초과하면 오래된 항목 삭제
                while (ListBoxLogs.Items.Count > 20)
                {
                    ListBoxLogs.Items.RemoveAt(0);
                }
            });

            // 디버그 출력
            Debug.WriteLine(log);
        }
    }
}
변경된 주요 기능
타이머 추가:

1분 간격(60000ms)으로 작업 반복 실행.
프로그램 시작 시 즉시 작업 수행.
작업 실행 (ExecuteTaskAsync):

기존 작업 코드를 await Task.Run() 내부에 추가.
예제에서는 Thread.Sleep(5000)로 5초 대기 처리.
리스트박스 로그 관리 (AddLog):

로그를 ListBox에 추가.
리스트박스에 20개까지만 유지하며, 오래된 항목을 제거.
MainWindow.xaml (ListBox 예시)
기존에 사용 중인 ListBox 이름이 ListBoxLogs라는 가정 하에, XAML 코드 예시:

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <ListBox x:Name="ListBoxLogs" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" />
    </Grid>
</Window>
결과 예시
리스트박스 출력
yaml
코드 복사
2025-01-10 10:00:00 - 작업 시작
2025-01-10 10:00:05 - 작업 완료
2025-01-10 10:01:00 - 작업 시작
2025-01-10 10:01:05 - 작업 완료
디버그 출력
plaintext
코드 복사
2025-01-10 10:00:00 - 작업 시작
2025-01-10 10:00:05 - 작업 완료
2025-01-10 10:01:00 - 작업 시작
2025-01-10 10:01:05 - 작업 완료