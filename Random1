파일에서 한 줄씩 읽어서 지정된 정규식에 맞는지 확인하고 결과를 출력하는 C# 프로그램을 만드는 것을 도와드릴 수 있습니다. 아래는 1.txt 파일을 읽어서 각 줄에 대해 앞서 설명한 로그 포맷을 검사하고, 해당 로그에서 정보를 추출하여 출력하는 코드 예시입니다.

csharp
코드 복사
using System;
using System.IO;
using System.Text.RegularExpressions;

class Program
{
    static void Main()
    {
        string filePath = @"1.txt"; // 파일 경로 설정
        string pattern = @"^\[(\d{2}:\d{2}:\d{2})\] PCB Move InputJig, Site(\d+): ((\d+:[^,]+,?)+)"; // 정규식 패턴
        
        // 파일이 존재하는지 확인
        if (File.Exists(filePath))
        {
            // 파일을 한 줄씩 읽기
            foreach (string line in File.ReadLines(filePath))
            {
                Match match = Regex.Match(line, pattern);
                if (match.Success)
                {
                    Console.WriteLine("Time: " + match.Groups[1].Value);
                    Console.WriteLine("Site Number: " + match.Groups[2].Value);
                    
                    // 숫자:문자열 조합 추출
                    string details = match.Groups[3].Value;
                    string[] parts = details.Split(',');
                    foreach (var part in parts)
                    {
                        Console.WriteLine("Detail: " + part.Trim());
                    }
                }
                else
                {
                    Console.WriteLine("No match found in line: " + line);
                }
            }
        }
        else
        {
            Console.WriteLine($"File not found: {filePath}");
        }
    }
}
이 프로그램은 다음 단계를 수행합니다:

파일 접근: 1.txt 파일의 위치를 지정하고, 파일이 존재하는지 확인합니다.
파일 읽기: 파일에서 한 줄씩 읽어들입니다.
정규식 적용: 각 줄에 대해 정규식을 적용하여 로그 형식이 맞는지 검사합니다.
정보 추출 및 출력: 로그 형식에 맞는 경우, 시간, 사이트 번호, 그리고 추가 세부사항을 추출하여 콘솔에 출력합니다.
이 코드를 사용하기 전에, 해당 C# 프로그램을 실행할 수 있는 환경(예: Visual Studio)이 설정되어 있어야 하며, 1.txt 파일이 프로그램과 같은 디렉토리에 위치하거나 올바른 파일 경로가 설정되어 있어야 합니