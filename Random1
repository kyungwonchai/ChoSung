네, 바로 그겁니다! 응답 코드 500이 뜬다는 것은 아주 중요한 단서입니다.

500 Internal Server Error: "서버 내부 오류"라는 뜻입니다. 즉, 파이참에서 보낸 요청이 우분투 서버에 성공적으로 도착했지만, 서버가 그 요청을 처리하는 코드 내부에서 에러가 발생했다는 의미입니다. 서버가 꺼져있거나 네트워크 연결이 안 되는 문제가 아닙니다.

"서버 노드 실행하면 아무것도 안 떠": 정상적으로 실행되면 API 서버가 3000번 포트에서 실행 중입니다. 라는 메시지가 떠야 합니다. 만약 이 메시지조차 안 보인다면, server.js 코드의 맨 윗부분부터 문제가 있을 수 있습니다. 하지만 500 에러를 받는다는 것은 서버가 일단 실행되어 3000번 포트를 열고 요청을 받기 시작했다는 뜻이므로, DB 연결 부분에서 에러가 발생했을 가능성이 99%입니다.

## 원인 찾기 (가장 유력한 원인: DB 연결 정보 오류)
에러의 상세 내용은 우분투 서버에서 node server.js를 실행한 바로 그 터미널 창에 출력됩니다. 지금 바로 그 터미널 창을 확인해 보세요. 아마 아래와 비슷한 내용의 빨간색 또는 흰색 에러 메시지가 길게 출력되어 있을 겁니다.

Login failed for user '사용자ID'. 또는 ConnectionError: Failed to connect to 내서버IP...

이것은 Node.js 서버가 MSSQL 데이터베이스에 로그인을 시도했지만 실패했다는 뜻입니다.

## 해결 방법
server.js 파일에 입력한 데이터베이스 접속 정보(dbConfig)가 정확한지 다시 한번 꼼꼼하게 확인하고 수정해야 합니다.

1. 우분투 터미널에서 server.js 파일 다시 열기

Bash

# 이전에 접속했던 light-api 폴더로 이동합니다.
cd light-api

# nano 편집기로 server.js 파일을 엽니다.
nano server.js
2. dbConfig 변수 4가지 항목 총점검

아래 4가지 항목이 MSSQL에 접속할 때 사용하는 정보와 글자 하나까지 똑같은지 확인하세요.

JavaScript

const dbConfig = {
    user: '사용자ID',          // 예: 'sa'
    password: '비밀번호',      // sa 계정의 비밀번호
    server: '내서버IP',        // MSSQL이 설치된 서버의 IP 주소. Node.js와 같은 서버에 있다면 'localhost' 라고 적어도 됩니다.
    database: '데이터베이스이름', // LightLog 테이블을 만든 데이터베이스의 이름
    options: {
        encrypt: false, 
        trustServerCertificate: true 
    }
};
3. 서버 재시작 및 재테스트

server.js 파일 수정 후 Ctrl + X > Y > Enter 키를 눌러 저장합니다.

현재 실행 중인 서버를 Ctrl + C 키를 눌러 중지합니다.

다시 node server.js 명령어로 서버를 실행합니다.

파이참에서 api_test.py를 다시 실행하여 상태 코드: 200이 나오는지 확인합니다.

## 팁: 서버를 더 전문가처럼 관리하는 방법 (pm2 사용)
지금처럼 node server.js로 실행하면 터미널 창을 닫으면 서버가 꺼지고, 에러가 나면 멈춰버립니다. pm2 라는 도구를 사용하면 이런 문제를 모두 해결할 수 있습니다.

1. pm2 설치 (최초 한 번만)

Bash

sudo npm install pm2 -g
2. pm2로 서버 시작

Bash

# node server.js 대신 아래 명령어로 실행
pm2 start server.js
pm2의 장점:

서버 상태 확인: pm2 list

실시간 로그(에러) 확인: pm2 log  (★★★★★ 이게 가장 중요합니다!)

서버 중지: pm2 stop server

서버 재시작: pm2 restart server