매우 일반적이며 다양한 원인이 있을 수 있습니다.

데이터베이스 제약 조건 위반:
NOT NULL 컬럼에 NULL 값을 저장하려고 할 때. (특히 새로 추가된 행의 필수 값 누락)
UNIQUE 제약 조건 위반 (예: 이미 존재하는 "세부위치" 값을 새로 추가하거나 수정하려고 할 때 - DB 스키마에 따라 다름).
(만약 설정했다면) 외래 키(Foreign Key) 제약 조건 위반 (예: 존재하지 않는 마스터 데이터 이름(층, 구역 등)을 저장하려고 할 때).
데이터 타입 또는 길이 불일치: 모델의 데이터 타입이나 길이가 데이터베이스 테이블의 컬럼 정의와 맞지 않을 때.
로그 기록 로직 오류: SaveChanges 이전에 호출되는 CreateAuditEntries 메서드 내부 오류 (예: 특정 데이터 직렬화 실패)가 DbContext 상태에 영향을 미칠 수 있습니다.
해결 시도:

오류 정보 상세화: SaveChanges 및 SaveChangesAsync의 catch 블록에서 발생하는 DbUpdateException의 상세 정보(특히 InnerException 및 Entries)를 더 자세히 확인하여 정확한 원인을 파악하도록 수정합니다.
로그 기록 로직 안정화:
로그 데이터 직렬화 시 JavaScriptSerializer 대신 더 안정적인 Newtonsoft.Json 라이브러리를 사용하도록 변경합니다. (NuGet 패키지 관리자에서 Newtonsoft.Json 설치 필요)
로그 저장 자체에서 발생하는 오류가 주 저장 로직에 영향을 덜 미치도록 try-catch를 유지합니다.
진단을 위한 로그 로직 임시 비활성화: 문제 원인이 로그 기록 자체인지 확인하기 위해, SaveChanges 오버라이드 내에서 로그 생성 및 추가 부분을 쉽게 주석 처리하여 테스트할 수 있도록 코드를 수정합니다.
수정해야 할 파일 목록:

Data/LockerDbContext.cs
ViewModels/MainViewModel.cs (오류 메시지 표시 방식 개선)
아래에 이 두 파일의 수정된 전체 코드를 작성합니다.

1. Data/LockerDbContext.cs (수정)

SaveChanges/SaveChangesAsync의 catch 블록에서 DbUpdateException 상세 정보 로깅 강화.
Newtonsoft.Json 사용하도록 변경 (NuGet 패키지 필요).
로그 생성/추가 부분을 주석 처리하여 임시 비활성화할 수 있도록 표시.
C#

// 필요한 네임스페이스
using LockerManagementApp.Models;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Data.Entity.Infrastructure; // DbEntityEntry, DbUpdateException 사용
using System.Data.Entity.Validation; // DbEntityValidationException 사용
using System.Linq;
using System.Threading.Tasks;
using Newtonsoft.Json; // Newtonsoft.Json 사용 (NuGet 패키지 설치 필요)
using System.Diagnostics;

namespace LockerManagementApp.Data
{
    /// <summary>
    /// Entity Framework 6 DbContext 클래스 (SaveChanges 오류 처리 및 로깅 개선)
    /// </summary>
    public class LockerDbContext : DbContext
    {
        // --- DbSets (이전과 동일) ---
        public DbSet<LockerAssignment> LockerAssignments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }

        public LockerDbContext() : base("name=LockerDbConnection") { }

        protected override void OnModelCreating(DbModelBuilder modelBuilder) { base.OnModelCreating(modelBuilder); }

        #region SaveChanges Overrides for Audit Logging (Revised Error Handling)

        public override int SaveChanges()
        {
            List<AuditLog> auditEntries = null;

            // --- 로깅 비활성화 테스트용 ---
            // 아래 두 줄을 주석 처리하면 로그 생성 및 추가 로직이 실행되지 않습니다.
            try { auditEntries = CreateAuditEntries(); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }
            if (auditEntries != null && auditEntries.Any()) { this.AuditLogs.AddRange(auditEntries); }
            // --- 로깅 비활성화 테스트용 끝 ---

            try
            {
                // 실제 DB 저장 시도
                return base.SaveChanges(); // <<<<----- 여기가 77줄 근처일 가능성 높음
            }
            catch (DbEntityValidationException vex) // EF 유효성 검사 오류 처리
            {
                LogValidationErrors(vex);
                throw; // 예외를 다시 던져 상위에서 처리하도록 함
            }
            catch (DbUpdateException dbEx) // DB 업데이트 오류 처리 (제약 조건 위반 등)
            {
                LogDbUpdateException(dbEx);
                throw; // 예외를 다시 던져 상위에서 처리하도록 함
            }
            catch (Exception ex) // 기타 예외 처리
            {
                Debug.WriteLine($"!!! SaveChanges 중 일반 오류 (동기): {ex.ToString()}");
                throw;
            }
        }

        public override async Task<int> SaveChangesAsync()
        {
            List<AuditLog> auditEntries = null;

            // --- 로깅 비활성화 테스트용 ---
            // 아래 두 줄을 주석 처리하면 로그 생성 및 추가 로직이 실행되지 않습니다.
            try { auditEntries = CreateAuditEntries(); } catch (Exception ex) { Debug.WriteLine($"!!! 감사 로그 생성 중 오류 발생: {ex.ToString()}"); }
            if (auditEntries != null && auditEntries.Any()) { this.AuditLogs.AddRange(auditEntries); }
            // --- 로깅 비활성화 테스트용 끝 ---

            try
            {
                // 실제 DB 저장 시도 (비동기)
                return await base.SaveChangesAsync();
            }
            catch (DbEntityValidationException vex) // EF 유효성 검사 오류 처리
            {
                LogValidationErrors(vex);
                throw;
            }
            catch (DbUpdateException dbEx) // DB 업데이트 오류 처리
            {
                LogDbUpdateException(dbEx);
                throw;
            }
            catch (Exception ex) // 기타 예외 처리
            {
                Debug.WriteLine($"!!! SaveChangesAsync 중 일반 오류 (비동기): {ex.ToString()}");
                throw;
            }
        }

        /// <summary>
        /// 감사 로그 엔트리 생성 (Newtonsoft.Json 사용)
        /// </summary>
        private List<AuditLog> CreateAuditEntries()
        {
            string currentUserName = System.Threading.Thread.CurrentPrincipal?.Identity?.Name ?? "UnknownUser";
            var auditEntries = new List<AuditLog>();
            var changedEntries = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted)
                .ToList();

            // Newtonsoft.Json 설정 (참조 루프 무시 등)
            var jsonSettings = new JsonSerializerSettings
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore, // 순환 참조 무시
                PreserveReferencesHandling = PreserveReferencesHandling.None,
                Formatting = Formatting.None // 로그에는 압축된 형태가 나을 수 있음
            };

            foreach (var entry in changedEntries)
            {
                if (entry.Entity is AuditLog) continue;

                var auditEntry = new AuditLog
                {
                    Timestamp = DateTime.Now, UserName = currentUserName, TableName = entry.Entity.GetType().Name, Action = entry.State.ToString()
                };

                try { auditEntry.RecordId = entry.State == EntityState.Deleted ? entry.OriginalValues["Id"]?.ToString() : entry.CurrentValues["Id"]?.ToString() ?? "N/A"; }
                catch (Exception ex) { Debug.WriteLine($"감사 로그: 'Id' PK 조회 실패 ({auditEntry.TableName}) - {ex.Message}"); auditEntry.RecordId = "PK Error"; }

                var oldValues = new Dictionary<string, object>(); var newValues = new Dictionary<string, object>(); var affectedColumns = new List<string>();

                if (entry.State == EntityState.Added)
                {
                    foreach (var pn in entry.CurrentValues.PropertyNames) newValues[pn] = entry.CurrentValues[pn];
                    try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"!!! 감사 로그 Added 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; }
                }
                else if (entry.State == EntityState.Deleted)
                {
                    foreach (var pn in entry.OriginalValues.PropertyNames) oldValues[pn] = entry.OriginalValues[pn];
                    try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"!!! 감사 로그 Deleted 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; }
                }
                else if (entry.State == EntityState.Modified)
                {
                    foreach (var pn in entry.OriginalValues.PropertyNames) { var ov = entry.OriginalValues[pn]; var cv = entry.CurrentValues[pn]; if (!Equals(ov, cv)) { affectedColumns.Add(pn); oldValues[pn] = ov; newValues[pn] = cv; } }
                    if (affectedColumns.Any()) { auditEntry.AffectedColumns = string.Join(",", affectedColumns); try { auditEntry.OldValues = JsonConvert.SerializeObject(oldValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"!!! 감사 로그 Modified Old 직렬화 오류: {serEx.Message}"); auditEntry.OldValues = "Serialization Error"; } try { auditEntry.NewValues = JsonConvert.SerializeObject(newValues, jsonSettings); } catch (Exception serEx) { Debug.WriteLine($"!!! 감사 로그 Modified New 직렬화 오류: {serEx.Message}"); auditEntry.NewValues = "Serialization Error"; } }
                    else continue;
                }
                auditEntries.Add(auditEntry);
            }
            UpdateLockerAssignmentTimestamps(changedEntries);
            return auditEntries;
        }

        // SaveAuditLogs, SaveAuditLogsAsync 메서드는 제거됨

        private void UpdateLockerAssignmentTimestamps(List<DbEntityEntry> changedEntries) { var lockerEntries = changedEntries.Where(e => e.Entity is LockerAssignment && (e.State == EntityState.Added || e.State == EntityState.Modified)); foreach (var entry in lockerEntries) { ((LockerAssignment)entry.Entity).LastUpdated = DateTime.Now; } }

        #region Error Logging Helpers

        /// <summary>
        /// DbUpdateException 상세 정보 로깅
        /// </summary>
        private void LogDbUpdateException(DbUpdateException dbEx)
        {
            Debug.WriteLine($"!!! DbUpdateException 발생: {dbEx.Message}");
            // InnerException 재귀적으로 탐색
            var innerEx = dbEx.InnerException;
            while (innerEx != null)
            {
                Debug.WriteLine($"  InnerException: {innerEx.Message}");
                innerEx = innerEx.InnerException;
            }
            // 오류 발생 엔티티 정보 로깅
            foreach (var entry in dbEx.Entries)
            {
                Debug.WriteLine($"  - 오류 엔티티: {entry.Entity.GetType().Name}, 상태: {entry.State}");
                // 필요 시 더 상세한 정보 로깅 (예: entry.CurrentValues, entry.OriginalValues)
            }
        }

        /// <summary>
        /// DbEntityValidationException 상세 정보 로깅
        /// </summary>
        private void LogValidationErrors(DbEntityValidationException vex)
        {
            Debug.WriteLine($"!!! DbEntityValidationException 발생: {vex.Message}");
            foreach (var validationErrors in vex.EntityValidationErrors)
            {
                Debug.WriteLine($"  - 엔티티 타입: {validationErrors.Entry.Entity.GetType().Name}, 상태: {validationErrors.Entry.State}");
                foreach (var validationError in validationErrors.ValidationErrors)
                {
                    Debug.WriteLine($"    - 속성: {validationError.PropertyName}, 오류: {validationError.ErrorMessage}");
                }
            }
        }

        #endregion

        #endregion
    }
}
2. ViewModels/MainViewModel.cs (수정)

오류 메시지 박스에 ToString()을 사용하여 더 상세한 예외 정보를 표시하도록 유지합니다.

C#

// 필요한 네임스페이스
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Views;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation; // DbEntityValidationException 사용
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;
using System.IO;
using System.Text;
using System.Windows.Threading;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel (오류 메시지 상세화 확인)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";
        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;
        public LogViewModel LogVM { get; private set; }

        #region Public Properties (이전과 동일)
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands (이전과 동일)
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        public ICommand OpenMasterDataWindowCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); } catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }
            _lockerAssignments = new ObservableCollection<LockerAssignment>(); _allLockerTypes = new ObservableCollection<LockerType>(); _allFloors = new ObservableCollection<Floor>(); _allZones = new ObservableCollection<Zone>(); _allSubParts = new ObservableCollection<SubPart>(); _allAdministrators = new ObservableCollection<Administrator>();
            LogVM = new LogViewModel();
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync()); SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync()); AddNewCommand = new RelayCommand(AddNewLocker); DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null); ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned); CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword); RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync()); OpenMasterDataWindowCommand = new RelayCommand(OpenMasterDataWindow);
            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        private async Task LoadInitialDataAsync() { await LoadMasterDataAsync(); await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync() { if (_context == null) return; StatusBarText = "사물함 목록 로딩 중..."; try { var assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(); LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; } catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); } }
        private async Task LoadMasterDataAsync() { StatusBarText = "마스터 데이터(콤보박스용) 로딩 중..."; LockerDbContext tempContext = null; try { using (tempContext = new LockerDbContext()) { AllLockerTypes = new ObservableCollection<LockerType>(await tempContext.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync()); AllFloors = new ObservableCollection<Floor>(await tempContext.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync()); AllZones = new ObservableCollection<Zone>(await tempContext.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync()); AllSubParts = new ObservableCollection<SubPart>(await tempContext.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync()); AllAdministrators = new ObservableCollection<Administrator>(await tempContext.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync()); } StatusBarText = "마스터 데이터(콤보박스용) 로드 완료."; } catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader")) { HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx); MessageBox.Show("데이터 로딩 중 충돌 발생. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션 확인 또는 재시도.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); } catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); } }
        private void CheckMasterPassword(object parameter) { try { string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"]; if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey) 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키 불일치.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); } catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }
        private void OpenMasterDataWindow(object parameter) { if (!BackupDataToCsv()) { if (MessageBox.Show("데이터 백업 실패. 계속 진행하시겠습니까?", "백업 실패", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No) return; } try { var masterDataVM = new MasterDataViewModel(); var masterDataWindow = new MasterDataWindow { DataContext = masterDataVM, Owner = Application.Current.MainWindow }; masterDataWindow.ShowDialog(); _ = LoadMasterDataAsync(); _ = LoadAssignmentsAsync(); } catch (Exception ex) { MessageBox.Show($"마스터 데이터 관리 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } }

        #region CRUD 및 기타 메서드
        private async Task SaveChangesAsync() { if (_context == null) return; StatusBarText = "변경 사항 저장 중..."; List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } int changedCount = await _context.SaveChangesAsync(); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; } catch (DbEntityValidationException vex) { HandleValidationException(vex); RollbackChanges(allChangedEntriesForRollback); } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); } }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null || changedEntries == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; }
        private void AddNewLocker(object parameter) { if (_context == null) return; var newAssignment = new LockerAssignment { LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함", Floor = AllFloors.FirstOrDefault()?.Name ?? "1", Zone = AllZones.FirstOrDefault()?.Name ?? "A", SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4), Administrator = _currentAdmin, LastUpdated = DateTime.Now }; LockerAssignments.Add(newAssignment); _context.LockerAssignments.Add(newAssignment); SelectedAssignment = newAssignment; StatusBarText = "새 사물함 추가됨. 저장 필요."; }
        private async Task DeleteSelectedAsync() { if (_context == null || SelectedAssignment == null) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); int changedCount = await _context.SaveChangesAsync(); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        private void ClearSelectedAssignment(object parameter) { if (_context == null || SelectedAssignment == null) return; SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null; _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin; StatusBarText = "배정 해제됨. 저장 필요."; }
        #endregion

        #region Backup Logic (CSV - 이전과 동일)
        private bool BackupDataToCsv() { string backupDir = @"C:\agent"; string fileName = $"LockerBackup_{DateTime.Now:yyyyMMdd_HHmmss}.csv"; string filePath = Path.Combine(backupDir, fileName); StatusBarText = "데이터 백업 시작..."; try { Directory.CreateDirectory(backupDir); using (var backupContext = new LockerDbContext()) using (var writer = new StreamWriter(filePath, false, Encoding.UTF8)) { WriteTableToCsv<LockerType>(backupContext, writer); WriteTableToCsv<Floor>(backupContext, writer); WriteTableToCsv<Zone>(backupContext, writer); WriteTableToCsv<SubPart>(backupContext, writer); WriteTableToCsv<Administrator>(backupContext, writer); WriteTableToCsv<LockerAssignment>(backupContext, writer); WriteTableToCsv<AuditLog>(backupContext, writer); } StatusBarText = $"데이터 백업 완료: {filePath}"; MessageBox.Show($"데이터가 다음 위치에 백업되었습니다:\n{filePath}", "백업 완료", MessageBoxButton.OK, MessageBoxImage.Information); return true; } catch (Exception ex) { StatusBarText = $"데이터 백업 실패: {ex.Message}"; MessageBox.Show($"데이터 백업 중 오류가 발생했습니다:\n{ex.ToString()}", "백업 오류", MessageBoxButton.OK, MessageBoxImage.Error); return false; } }
        private void WriteTableToCsv<T>(LockerDbContext context, StreamWriter writer) where T : class { var dbSet = context.Set<T>(); var entityType = typeof(T); var properties = entityType.GetProperties().Where(p => p.GetGetMethod().IsVirtual == false).ToList(); writer.WriteLine($"--- Table: {entityType.Name} ---"); writer.WriteLine(string.Join(",", properties.Select(p => EscapeCsvValue(p.Name)))); foreach (var entity in dbSet.AsNoTracking()) { var values = properties.Select(p => EscapeCsvValue(p.GetValue(entity)?.ToString() ?? "")); writer.WriteLine(string.Join(",", values)); } writer.WriteLine(); writer.WriteLine(); }
        private string EscapeCsvValue(string value) { if (string.IsNullOrEmpty(value)) return ""; if (value.Contains(",") || value.Contains("\"") || value.Contains("\r") || value.Contains("\n")) { return $"\"{value.Replace("\"", "\"\"")}\""; } return value; }
        #endregion

        #region Helper Methods (오류 메시지 상세화)
        /// <summary>
        /// 일반 예외 처리 (상세 정보 포함)
        /// </summary>
        private void HandleGenericException(string operation, Exception ex)
        {
            StatusBarText = $"{operation} 중 오류 발생: {ex.Message}";
            // ToString()을 사용하여 InnerException 정보까지 포함하여 메시지 박스에 표시
            MessageBox.Show($"{operation} 중 예기치 않은 오류가 발생했습니다:\n\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        /// <summary>
        /// 데이터베이스 업데이트 예외 처리 (상세 정보 포함)
        /// </summary>
        private void HandleDbUpdateException(DbUpdateException dbEx)
        {
            // InnerException을 재귀적으로 탐색하여 가장 근본적인 원인 메시지 찾기
            Exception innerMostException = dbEx;
            while (innerMostException.InnerException != null)
            {
                innerMostException = innerMostException.InnerException;
            }
            string innerExMsg = innerMostException.Message;

            // 유효성 검사 오류가 있는지 확인
            var validationErrors = dbEx.Entries.SelectMany(e => e.GetValidationResult().ValidationErrors);
            string validationErrorMsg = "";
            if (validationErrors.Any())
            {
                validationErrorMsg = "\n\n유효성 검사 오류:\n" + string.Join("\n", validationErrors.Select(err => $" - {err.PropertyName}: {err.ErrorMessage}"));
            }

            StatusBarText = $"DB 업데이트 오류: {innerExMsg}";
            MessageBox.Show($"데이터베이스 작업 중 오류가 발생했습니다:\n{innerExMsg}{validationErrorMsg}\n\n(전체 오류: {dbEx.ToString()})", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error);

            // 오류 발생 엔티티 상태 되돌리기 시도
            try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ }
        }

         /// <summary>
        /// EF 유효성 검사 예외 처리 (별도)
        /// </summary>
        private void HandleValidationException(DbEntityValidationException vex)
        {
            var errorMessages = vex.EntityValidationErrors
                    .SelectMany(x => x.ValidationErrors)
                    .Select(x => $"{x.PropertyName}: {x.ErrorMessage}");
            var fullErrorMessage = string.Join("\n", errorMessages);
            var exceptionMessage = $"데이터 유효성 검사 오류:\n{fullErrorMessage}";

            StatusBarText = "데이터 유효성 검사 오류 발생";
            MessageBox.Show(exceptionMessage, "유효성 검사 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
            Debug.WriteLine($"!!! DbEntityValidationException 발생:\n{exceptionMessage}\n{vex.ToString()}");
        }


        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); LogVM?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
핵심 변경 사항:

LockerDbContext.cs:
SaveChanges/SaveChangesAsync 메서드 내에서 base.SaveChanges/base.SaveChangesAsync 호출을 try-catch 블록으로 감쌌습니다.
DbUpdateException 및 DbEntityValidationException을 별도로 처리하여, 데이터베이스 제약 조건 위반이나 EF 모델 유효성 검사 오류 발생 시 관련 정보를 디버그 출력 창에 기록하고 예외를 다시 던지도록 수정했습니다. 이를 통해 MainViewModel의 catch 블록에서 더 정확한 오류 원인을 파악할 수 있습니다.
감사 로그 생성(CreateAuditEntries) 및 추가(AuditLogs.AddRange) 부분을 주석 처리하여 로깅 기능을 쉽게 켜고 끌 수 있도록 표시했습니다. 만약 저장 오류가 계속 발생한다면, 이 부분을 주석 처리하여 로깅 로직이 문제의 원인인지 테스트해 보세요.
Newtonsoft.Json 사용을 위한 using 지시문과 JsonConvert.SerializeObject 호출로 변경했습니다. NuGet 패키지 관리자에서 Newtonsoft.Json을 반드시 설치해야 합니다.
MainViewModel.cs:
SaveChangesAsync의 catch 블록에 DbEntityValidationException 처리 로직(HandleValidationException) 호출을 추가했습니다.
HandleDbUpdateException 및 HandleGenericException 메서드에서 MessageBox에 ex.ToString()을 포함하여 InnerException 정보까지 모두 표시하도록 유지했습니다.
다음 단계:

NuGet 패키지 설치: 프로젝트에 Newtonsoft.Json 패키지를 설치합니다. (솔루션 탐색기 -> 프로젝트 우클릭 -> NuGet 패키지 관리 -> 찾아보기 -> "Newtonsoft.Json" 검색 및 설치)
코드 적용 및 빌드: 위 코드로 해당 파일들을 업데이트하고 솔루션을 다시 빌드합니다.
오류 재현 및 확인:
신규 행을 추가하고 저장해 봅니다.
오류가 발생하면, 나타나는 오류 메시지 박스의 전체 내용 (특히 InnerException 관련 내용) 또는 Visual Studio의 출력(Output) 창에 기록된 상세 오류 정보(DbUpdateException, DbEntityValidationException 관련 로그)를 알려주세요.