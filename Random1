import paramiko
import time
import os
import logging
import platform
import subprocess
import base64
from datetime import datetime

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================
HOSTS = ['192.168.1.101', '192.168.1.102',] # 500대 IP 주소 목록
SSH_USER = 'pi'
SSH_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa')
PM2_APP_NAME = 'sensor' 
LOG_FILE = 'deployment_log.txt'

# --- systemd 서비스 파일 내용 정의 ---
PYTHON_EXEC_PATH = '/usr/bin/python3'
APP_WORKING_DIR = '/home/pi/my_project'
APP_SCRIPT_PATH = '/home/pi/my_project/main.py'
APP_ARGS = '--mode production --port 8080'
SERVICE_FILE_NAME = 'myapp.service'
SERVICE_FILE_CONTENT = f"""[Unit]
Description=My Python Application with Watchdog
After=network.target
[Service]
ExecStart={PYTHON_EXEC_PATH} {APP_SCRIPT_PATH} {APP_ARGS}
WorkingDirectory={APP_WORKING_DIR}
StandardOutput=inherit
StandardError=inherit
Restart=always
User={SSH_USER}
WatchdogSec=60
[Install]
WantedBy=multi-user.target
"""
# ===================================================================

def setup_logging():
    logger = logging.getLogger('DeploymentLogger')
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(logging.Formatter('%(message)s'))
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
    return logger

def is_host_reachable(hostname, logger):
    logger.info(f"[{hostname}] Ping 테스트 시작...")
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-w', '2', hostname]
    try:
        response = subprocess.run(command, capture_output=True, check=False)
        if response.returncode == 0:
            logger.info(f"[{hostname}] Ping 성공.")
            return True
        else:
            logger.warning(f"[{hostname}] Ping 실패. 건너뜁니다.")
            return False
    except FileNotFoundError:
        logger.error("[오류] 'ping' 명령어를 찾을 수 없습니다.")
        return False

def deploy_to_host(hostname, logger):
    logger.info(f"[{hostname}] 워치독 배포 작업 시작...")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(
            hostname, username=SSH_USER, key_filename=SSH_KEY_FILE, timeout=10,
            disabled_algorithms=dict(pubkeys=['rsa-sha2-512', 'rsa-sha2-256'])
        )
        logger.info(f"[{hostname}] SSH 연결 성공.")
        
        # 1. PM2 서비스 직접 중지 및 비활성화 (기다리지 않고 명령만 전송)
        logger.info(f"[{hostname}] 1단계: PM2 서비스 중지 및 비활성화 시도...")
        pm2_service_name = f"pm2-{SSH_USER}.service"
        client.exec_command(f"pm2 stop {PM2_APP_NAME}")
        client.exec_command(f"sudo systemctl stop {pm2_service_name}")
        client.exec_command(f"sudo systemctl disable {pm2_service_name}")
        logger.info(f"[{hostname}] PM2 중지/비활성화 명령 전송 완료. (2초 대기)")
        time.sleep(2)

        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        # ==     Base64를 이용한 가장 안정적인 파일 생성 방식 (핵심)     ==
        # ★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★
        logger.info(f"[{hostname}] 2단계: Base64로 서비스 파일 생성")
        # 서비스 파일 내용을 Base64로 인코딩
        encoded_content = base64.b64encode(SERVICE_FILE_CONTENT.encode('utf-8')).decode('utf-8')
        # 인코딩된 내용을 원격지에서 디코딩하여 파일로 저장하는 단일 명령어
        command = f"echo '{encoded_content}' | base64 --decode | sudo tee /etc/systemd/system/{SERVICE_FILE_NAME} > /dev/null"
        
        # 이 명령어는 즉시 끝나므로, 결과를 기다릴 필요 없이 실행
        stdin, stdout, stderr = client.exec_command(command)
        # 명령어 실행 보장을 위한 잠시 대기
        time.sleep(2)
        logger.info(f"[{hostname}] 서비스 파일 생성 명령 전송 완료.")


        # 3. 새로운 서비스 활성화
        logger.info(f"[{hostname}] 3단계: 새로운 systemd 서비스 활성화 및 시작")
        client.exec_command("sudo systemctl daemon-reload")
        client.exec_command(f"sudo systemctl enable {SERVICE_FILE_NAME}")
        client.exec_command(f"sudo systemctl restart {SERVICE_FILE_NAME}")
        logger.info(f"[{hostname}] 서비스 재시작 명령 전송 완료. (3초 대기)")
        time.sleep(3)

        # 4. 최종 상태 확인
        logger.info(f"[{hostname}] 4단계: 최종 서비스 상태 확인")
        stdin, stdout, stderr = client.exec_command(f"sudo systemctl status {SERVICE_FILE_NAME}")
        status_output = stdout.read().decode('utf-8')
        logger.info(f"[{hostname}] 상태:\n{status_output}")

        logger.info(f"--- [{hostname}] 작업 성공적으로 완료! ---")

    except Exception as e:
        logger.error(f"!!!!!! [{hostname}]에서 심각한 오류 발생: {e} !!!!!!")
    finally:
        if client:
            client.close()

if __name__ == '__main__':
    logger = setup_logging()
    logger.info("\n" + "="*20 + " 워치독 배포 작업 시작 (Base64 버전) " + "="*20)

    for host in HOSTS:
        if is_host_reachable(host, logger):
            deploy_to_host(host, logger)
            
    logger.info("="*20 + " 워치독 배포 작업 완료 " + "="*20 + "\n")
```