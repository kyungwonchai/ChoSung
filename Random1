공지사항 창을 감지하고, 우측 상단을 기준으로 x -10, y -10 지점을 클릭하는 C# 코드를 작성해드리겠습니다.

1. 흐름
화면을 캡처한 후 OpenCV를 이용해 처리
밝은 공지사항 창(흰색 배경) 감지
컨투어(외곽선) 탐색 후 가장 큰 사각형 찾기
해당 사각형의 우측 상단 지점을 기준으로 x -10, y -10 좌표 계산
해당 좌표를 mouse_event를 사용해 클릭
2. 설치 필요 라이브러리
아래 라이브러리를 설치해야 합니다.

sh
코드 복사
Install-Package Emgu.CV
Emgu.CV는 OpenCV의 C# 래퍼 라이브러리입니다.

3. C# 코드
csharp
코드 복사
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.CV.CvEnum;
using Emgu.CV.Util;

class Program
{
    // 마우스 클릭을 위한 WinAPI
    [DllImport("user32.dll", SetLastError = true)]
    static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, IntPtr dwExtraInfo);
    
    const uint MOUSEEVENTF_LEFTDOWN = 0x02;
    const uint MOUSEEVENTF_LEFTUP = 0x04;

    static void Main()
    {
        // 화면 캡처
        Bitmap screenshot = CaptureScreen();

        // 공지사항 창 감지
        Rectangle noticeRect = DetectNoticeWindow(screenshot);

        if (noticeRect != Rectangle.Empty)
        {
            // 우측 상단 기준 좌표
            int clickX = noticeRect.Right - 10;
            int clickY = noticeRect.Top - 10;

            Console.WriteLine($"클릭 위치: ({clickX}, {clickY})");

            // 마우스 이동 후 클릭
            Cursor.Position = new Point(clickX, clickY);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, clickX, clickY, 0, IntPtr.Zero);
        }
        else
        {
            Console.WriteLine("공지사항 창을 찾을 수 없음");
        }
    }

    // 화면 캡처 함수
    static Bitmap CaptureScreen()
    {
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);
        using (Graphics g = Graphics.FromImage(bitmap))
        {
            g.CopyFromScreen(Point.Empty, Point.Empty, bounds.Size);
        }
        return bitmap;
    }

    // 공지사항 창 감지 함수
    static Rectangle DetectNoticeWindow(Bitmap screenshot)
    {
        using (Image<Bgr, byte> image = new Image<Bgr, byte>(screenshot))
        using (Image<Gray, byte> gray = image.Convert<Gray, byte>())
        {
            // 밝은 부분 강조
            CvInvoke.Threshold(gray, gray, 200, 255, ThresholdType.Binary);

            // 컨투어 찾기
            using (VectorOfVectorOfPoint contours = new VectorOfVectorOfPoint())
            {
                Mat hierarchy = new Mat();
                CvInvoke.FindContours(gray, contours, hierarchy, RetrType.External, ChainApproxMethod.Simple);

                Rectangle largestRect = Rectangle.Empty;
                int maxArea = 0;

                for (int i = 0; i < contours.Size; i++)
                {
                    Rectangle rect = CvInvoke.BoundingRectangle(contours[i]);

                    // 크기가 적절한 경우만 선택
                    if (rect.Width > 200 && rect.Height > 100) 
                    {
                        int area = rect.Width * rect.Height;
                        if (area > maxArea)
                        {
                            maxArea = area;
                            largestRect = rect;
                        }
                    }
                }

                return largestRect;
            }
        }
    }
}
4. 코드 설명
화면 캡처 (CaptureScreen()): 현재 화면을 비트맵으로 저장
공지사항 창 감지 (DetectNoticeWindow()):
캡처한 이미지에서 밝은 부분(흰색 배경)을 강조
가장 큰 사각형 컨투어를 찾아서 공지사항 창으로 간주
클릭 수행:
감지된 공지창의 우측 상단 좌표 계산 (x -10, y -10)
마우스를 해당 위치로 이동 후 클릭
5. 실행 방법
Emgu.CV 설치 후 프로젝트에 추가
위 코드를 실행
자동으로 공지사항 창의 닫기 버튼 근처를 클릭
⚠ 주의:

공지사항 창의 밝기가 200 이상의 흰색이어야 감지됨
창 크기가 최소 200x100 이상이어야 함