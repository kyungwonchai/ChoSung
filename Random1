겠습니다. 제가 드린 App.xaml.cs 코드로 변경하자마자 UI 프로그램이 시작과 동시에 "Shutdown" 관련 로그를 남기며 바로 종료된다는 말씀이시군요. Broker 연결 이전에 발생하는 문제로 보입니다.

"시작하자마자 셧다운되었다는 로그부터 생기고 시작" 이라는 현상은 App.xaml.cs의 OnStartup 메서드, 특히 그 안에서 호출되는 InitializeAndRunApplication 메서드 초반부에서 예외가 발생하여 ShowCriticalErrorAndShutdown 메서드가 즉시 호출되었을 가능성이 매우 높습니다.

이전에 InitializeAndRunApplication 메서드에 단계별로 콘솔 로그를 추가했었습니다.

C#

// MGSPMonitorControl/App.xaml.cs (문제 발생 예상 지점 포함된 이전 버전)
// ...
        private async void InitializeAndRunApplication()
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] InitializeAndRunApplication called."); // <<< 이 로그는 찍히는지?
            try
            {
                // 1. 서비스 인스턴스 생성
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Initializing DatabaseService..."); // <<< 여기까지는?
                _databaseService = new DatabaseService();
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] DatabaseService initialized."); // <<< 여기까지는?
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Initializing BrokerClientService..."); // <<< 여기까지는?
                _brokerClientService = new BrokerClientService(/* _uiLogger */);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] BrokerClientService initialized."); // <<< 여기까지는?

                // 2. 메인 창 ViewModel 및 메인 창 바로 생성 및 표시
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating MainViewModel..."); // <<< 여기까지는?
                var mainViewModel = new MainViewModel(_databaseService, _brokerClientService);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainViewModel created."); // <<< 여기까지는?
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating MainWindow...");
                var mainWindow = new MainWindow(mainViewModel);
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainWindow created.");
                
                this.MainWindow = mainWindow;
                mainWindow.Show();
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MGSPMonitorControl UI started and MainWindow shown.");
                // ... (이후 Broker 연결 시도)
            }
            catch (ConfigurationErrorsException cex) // App.config 관련 오류
            {
                // ... ShowCriticalErrorAndShutdown 호출 ...
            }
            catch (SqlException sqlEx) // 데이터베이스 연결 또는 쿼리 오류
            {
                 // ... ShowCriticalErrorAndShutdown 호출 ...
            }
            catch (Exception ex) // 그 외 모든 예외
            {
                 // ... ShowCriticalErrorAndShutdown 호출 ...
            }
        }
// ...
가장 유력한 원인 (다시 한번 강조):

App.config 파일 문제:

파일 부재: MGSPMonitorControl 프로젝트의 실행 폴더(보통 bin\Debug 또는 bin\Release)에 MGSPMonitorControl.exe.config 파일이 없는 경우. (프로젝트의 App.config 파일 속성에서 "출력 디렉터리로 복사"가 "항상 복사" 또는 "변경된 내용만 복사"로 되어 있어야 합니다.)
내용 오류: App.config 파일 내 connectionStrings 섹션의 MonitorControlDBConnection 항목 또는 appSettings 섹션의 BrokerAddress 항목의 형식이 잘못되었거나, 필수 속성(예: connectionString)이 누락된 경우 ConfigurationManager가 이를 읽으려 할 때 ConfigurationErrorsException이 발생하여 ShowCriticalErrorAndShutdown이 호출됩니다.
DB 연결 문자열 자체의 문제: 연결 문자열이 존재하지만, 내용이 실제 DB 환경과 맞지 않아 new DatabaseService() 생성자 내부에서 DB 연결을 시도하다가 (만약 생성자에서 즉시 연결을 시도한다면) SqlException 등이 발생할 수 있습니다. (현재 DatabaseService 생성자는 연결 문자열만 읽고, 실제 연결은 메서드 호출 시 이루어지므로, 이 가능성은 낮지만 연결 문자열 포맷 자체의 오류는 ConfigurationErrorsException 유발 가능)
DatabaseService 또는 BrokerClientService 생성자 내부의 예외:

이들 서비스의 생성자에서 App.config를 읽는 부분 외에 다른 초기화 로직에서 예외가 발생하고, 이것이 InitializeAndRunApplication의 catch (Exception ex) 블록에 잡히는 경우.
진단 및 해결을 위한 단계:

가장 먼저, App.config 파일이 올바르게 존재하고 설정되어 있는지 확인해야 합니다.

1. App.config 파일 확인 (매우 중요):

MGSPMonitorControl 프로젝트에 App.config 파일이 있는지 확인합니다.

App.config 파일의 내용을 다시 한번 확인하여, 오타나 형식 오류가 없는지 확인합니다. 특히 connectionStrings과 appSettings 섹션.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <connectionStrings>
        <add name="MonitorControlDBConnection" 
             connectionString="Server=(localdb)\MSSQLLocalDB;Database=MonitorControlDB;Integrated Security=True;Connect Timeout=15;" 
             providerName="System.Data.SqlClient" />
        </connectionStrings>
    <appSettings>
        <add key="BrokerAddress" value="127.0.0.1:9001"/> 
    </appSettings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>
App.config 파일의 속성에서 **"출력 디렉터리로 복사"**가 "항상 복사" 또는 **"변경된 내용만 복사"**로 설정되어 있는지 확인합니다. 그래야 빌드 시 실행 폴더로 MGSPMonitorControl.exe.config 파일이 복사됩니다.

System.Configuration.dll 참조 확인: 프로젝트에 이 어셈블리 참조가 있는지 확인합니다. (솔루션 탐색기 > 프로젝트 > 참조).

2. 단계별 디버깅:

만약 App.config에 문제가 없어 보인다면, Visual Studio에서 디버그 모드(F5)로 실행하여 InitializeAndRunApplication 메서드에 중단점을 설정하고 한 줄씩 실행(F10)하면서 정확히 어느 라인에서 예외가 발생하는지 확인해야 합니다.

_databaseService = new DatabaseService(); 라인에서 예외가 발생하는지?
_brokerClientService = new BrokerClientService(); 라인에서 예외가 발생하는지?
오류 메시지 "핸들이 잘못되었다" 와의 연관성 (추측):

만약 App.config 파일이 아예 없거나 connectionStrings 또는 appSettings 섹션 자체가 없다면, ConfigurationManager가 내부적으로 특정 리소스 핸들을 찾지 못해 "핸들이 잘못되었다"와 유사한 내부 오류 후 ConfigurationErrorsException을 발생시킬 수도 있습니다. (정확한 것은 스택 트레이스를 봐야 합니다.)

사용자님께 다시 요청드릴 정보:

죄송하지만, 정확한 원인 파악을 위해 다음 정보가 필요합니다:

App.config 파일의 전체 내용을 보여주실 수 있나요?
MGSPMonitorControl 프로젝트의 빌드 출력 폴더(예: bin\Debug)에 MGSPMonitorControl.exe.config 파일이 존재하는지, 그리고 그 내용이 프로젝트의 App.config와 동일한지 확인 부탁드립니다.