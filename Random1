ndow.xaml 변경 사항
XAML 파일에 라벨을 추가하여 폴더 검사 진행 상황을 표시할 수 있도록 하겠습니다. 이 라벨은 분석 버튼 아래에 위치하게 됩니다.

xml
Copy code
<Window x:Class="FolderAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Folder Analysis" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Button Grid.Row="0" Content="Start Analysis" Click="Button_Click"/>
        <Label x:Name="labelFolderCount" Grid.Row="1" Margin="10" Content="Folders Analyzed: 0"/>
        <ListBox x:Name="listBox1" Grid.Row="2" Margin="10" />
        <ListBox x:Name="listBox2" Grid.Row="3" Margin="10" />
    </Grid>
</Window>
MainWindow.xaml.cs 변경 사항
폴더의 총 개수를 관리하고 라벨을 업데이트하는 로직을 추가하겠습니다. 폴더를 검사할 때마다 폴더 카운트를 증가시키고 이를 UI에 반영합니다.

csharp
Copy code
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows;

namespace FolderAnalysisApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> allFolderInfo = new ObservableCollection<string>();
        private int folderCount = 0;  // 폴더 개수를 카운트할 변수

        public MainWindow()
        {
            InitializeComponent();
            listBox1.ItemsSource = new ObservableCollection<string>();
            listBox2.ItemsSource = new ObservableCollection<string>();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            folderCount = 0;  // 버튼 클릭시 폴더 카운트 초기화
            Thread thread = new Thread(() => AnalyzeFolders(@"C:\Path\To\Start", true));
            thread.IsBackground = true;
            thread.Start();
        }

        private void AnalyzeFolders(string path, bool isRootCall)
        {
            try
            {
                DirectoryInfo rootDir = new DirectoryInfo(path);
                foreach (DirectoryInfo dir in rootDir.GetDirectories())
                {
                    folderCount++;
                    UpdateFolderCount();  // 라벨 업데이트 함수 호출

                    try
                    {
                        long size = CalculateFolderSize(dir);
                        if (size >= 1073741824) // 1GB 이상
                        {
                            DateTime lastModified = GetMostRecentFileDate(dir);
                            string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                            Application.Current.Dispatcher.Invoke(() => UpdateListBoxes(info, lastModified));
                        }
                        AnalyzeFolders(dir.FullName, false);
                    }
                    catch (UnauthorizedAccessException)
                    {
                        continue;
                    }
                }

                if (isRootCall)
                {
                    Application.Current.Dispatcher.Invoke(() => UpdateListBox1("분석 완료"));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}");
            }
        }

        private void UpdateFolderCount()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                labelFolderCount.Content = $"Folders Analyzed: {folderCount}";
            });
        }

        // 나머지 메서드는 이전 코드와 동일합니다.
    }
}
이 코드는 분석 중인 폴더의 수를 카운트하고, 이 정보를 라벨에 실시간으로 업데이트하여 사용자가 진행 상황을 쉽게 확인할 수 있게 합니다. 