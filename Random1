import pandas as pd
import pyodbc
import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

# --------------------------------------------------------------------------
# [사전 설정] 한글 폰트 설정 (선택 사항)
# --------------------------------------------------------------------------
# # Windows 예시
# font_path = 'C:/Windows/Fonts/malgun.ttf'
# font_name = fm.FontProperties(fname=font_path).get_name()
# plt.rc('font', family=font_name)
#
# # macOS 예시
# # plt.rc('font', family='AppleGothic')
#
plt.rcParams['axes.unicode_minus'] = False
# --------------------------------------------------------------------------


# 1. 데이터베이스 연결 설정
# ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
# ※ 사용자 정보 입력 (여기를 수정하세요)
# ※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※※
db_config = {
    'driver': '{ODBC Driver 17 for SQL Server}', # 설치된 ODBC 드라이버 버전에 맞게 수정
    'server': '10.10.10.10,9595', # IP 주소와 포트
    'database': 'Env11',
    'username': 'your_username', # 사용자 이름
    'password': 'your_password'  # 사용자 암호
}

# 연결 문자열 생성
conn_str = (
    f"DRIVER={db_config['driver']};"
    f"SERVER={db_config['server']};"
    f"DATABASE={db_config['database']};"
    f"UID={db_config['username']};"
    f"PWD={db_config['password']};"
)

# 2. DB에서 데이터 불러오기
try:
    # 데이터베이스에 연결
    cnxn = pyodbc.connect(conn_str)
    print("? 데이터베이스 연결 성공!")

    # 쿼리문 작성
    query_lux = "SELECT time1, lux1 FROM Table_Lux1min"
    query_temp = "SELECT TimeStamp, BatteryTemp, ApTemp FROM Table_LuxPhoneStatusLog"

    # 데이터 불러와서 DataFrame으로 변환
    df_lux = pd.read_sql(query_lux, cnxn)
    df_temp = pd.read_sql(query_temp, cnxn)
    
    # 날짜/시간 타입으로 변환
    df_lux['time1'] = pd.to_datetime(df_lux['time1'])
    df_temp['TimeStamp'] = pd.to_datetime(df_temp['TimeStamp'])

    print("데이터 로딩 완료.")
    print(f"조도 데이터 {len(df_lux)}개, 온도 데이터 {len(df_temp)}개를 불러왔습니다.")

    # 연결 종료
    cnxn.close()

except Exception as e:
    print(f"? 데이터베이스 연결 또는 쿼리 실행 중 오류 발생: {e}")
    # 오류 발생 시, 분석을 진행하지 않도록 빈 데이터프레임 생성
    df_lux = pd.DataFrame()
    df_temp = pd.DataFrame()


# 3. 조도(Illuminance) 데이터 분석
if not df_lux.empty:
    # IQR을 이용한 이상치 제거
    q1 = df_lux['lux1'].quantile(0.25)
    q3 = df_lux['lux1'].quantile(0.75)
    iqr = q3 - q1
    lower_bound = q1 - 1.5 * iqr
    upper_bound = q3 + 1.5 * iqr
    df_lux_no_outliers = df_lux[(df_lux['lux1'] >= lower_bound) & (df_lux['lux1'] <= upper_bound)].copy()

    # 신뢰성 평가 지표 계산
    mean_illum = df_lux_no_outliers['lux1'].mean()
    std_illum = df_lux_no_outliers['lux1'].std()
    cv_illum = (std_illum / mean_illum) * 100 if mean_illum != 0 else 0
    
    print("\n--- [조도 센서 분석 결과] ---")
    print(f"평균 조도 (lux): {mean_illum:.2f}")
    print(f"표준편차: {std_illum:.2f}")
    print(f"▶ 변동 계수 (CV): {cv_illum:.2f}% (값이 낮을수록 정밀)")


# 4. 온도(Temperature) 데이터 분석
if not df_temp.empty:
    # 시간순으로 정렬
    df_temp = df_temp.sort_values(by='TimeStamp').reset_index(drop=True)
    
    # 안정성 평가 지표 계산 (BatteryTemp 기준)
    df_temp['temp_diff'] = df_temp['BatteryTemp'].diff()
    std_temp_diff = df_temp['temp_diff'].std()
    
    print("\n--- [온도 센서 분석 결과 (BatteryTemp 기준)] ---")
    print(f"▶ 온도 변화량의 표준편차: {std_temp_diff:.4f} (값이 낮을수록 안정적)")


# 5. 시각화
if not df_lux.empty:
    plt.figure(figsize=(12, 6))
    plt.suptitle('조도 센서 데이터 분석 (Table_Lux1min)', fontsize=16)
    plt.subplot(1, 2, 1)
    df_lux['lux1'].plot(kind='box')
    plt.title('이상치 제거 전')
    plt.ylabel('조도 (lux)')
    plt.subplot(1, 2, 2)
    df_lux_no_outliers['lux1'].plot(kind='box')
    plt.title('이상치 제거 후')
    plt.ylabel('조도 (lux)')
    plt.tight_layout(rect=[0, 0.03, 1, 0.95])
    plt.show()

if not df_temp.empty:
    plt.figure(figsize=(12, 6))
    plt.plot(df_temp['TimeStamp'], df_temp['BatteryTemp'], marker='.', linestyle='-', markersize=4, label='배터리 온도 (BatteryTemp)')
    plt.plot(df_temp['TimeStamp'], df_temp['ApTemp'], marker='.', linestyle='--', markersize=4, label='AP 온도 (ApTemp)')
    plt.title('시간에 따른 온도 변화 (Table_LuxPhoneStatusLog)', fontsize=16)
    plt.xlabel('시간 (TimeStamp)')
    plt.ylabel('온도 (°C)')
    plt.legend()
    plt.grid(True)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()