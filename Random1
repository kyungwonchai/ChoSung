알겠습니다. MainViewModel.cs 파일에서 "현황 보기" 창을 여는 데 필요한 코드 부분만 드리겠습니다. 기존 MainViewModel.cs 파일 (ID: ViewModels/MainViewModel_20250410165000)에 아래 코드 조각들을 각각 적절한 위치에 추가하시면 됩니다.

1. Command 속성 추가:

#region Commands 섹션 안에 다른 커맨드 속성들과 함께 다음 라인을 추가합니다.

C#

public ICommand OpenStatusWindowCommand { get; }
2. Command 초기화 추가:

MainViewModel 생성자 내부에서 다른 커맨드들을 초기화하는 부분에 다음 라인을 추가합니다.

C#

OpenStatusWindowCommand = new RelayCommand(OpenStatusWindow, CanExecuteCommand);
3. 창 열기 메서드 추가:

ViewModel 클래스 내부의 다른 메서드들(예: OpenLogWindow, OpenPasswordChangeWindow 등)과 비슷한 위치에 다음 메서드 전체를 추가합니다.

C#

private void OpenStatusWindow(object parameter)
{
    if (!CanExecuteCommand(parameter)) return;
    try
    {
        using (var statusVM = new StatusViewModel()) // StatusViewModel은 IDisposable 구현 가정
        {
            var statusWindow = new StatusWindow
            {
                DataContext = statusVM,
                Owner = Application.Current.MainWindow
            };
            statusWindow.ShowDialog();
        } // using 블록 끝에서 statusVM.Dispose() 자동 호출
    }
    catch (Exception ex)
    {
        // 앱 종료 중이 아니거나 ViewModel이 Dispose되지 않았을 때만 오류 표시
        if (!App.IsShuttingDown && !_disposed)
            MessageBox.Show($"현황 보기 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        else
            Debug.WriteLine($"종료 중 현황 보기 창 열기 오류 무시됨: {ex.Message}");
    }
}
설명:

1번은 "현황 보기" 버튼에 바인딩될 OpenStatusWindowCommand라는 이름의 ICommand 타입 속성을 선언합니다.
2번은 생성자에서 RelayCommand의 새 인스턴스를 만들어 OpenStatusWindowCommand에 할당합니다. 버튼 클릭 시 OpenStatusWindow 메서드가 실행되고, 버튼 활성화 조건은 CanExecuteCommand 메서드를 따릅니다.