, 정확하게 지적해주셨습니다! Process.GetProcessesByName()은 정확한 프로세스 이름을 인자로 받기 때문에 "InlineTesterPBA"라는 고정값으로만 검색하면 당연히 InlineTesterPBA_V1_V2.0.8.exe 같은 전체 이름을 찾을 수 없습니다.

말씀하신 대로, "InlineTesterPBA"로 시작하는 프로세스를 찾으려면, 실행 중인 모든 프로세스를 가져온 후, 각 프로세스의 이름이 "InlineTesterPBA"로 시작하는지 확인하는 방식으로 수정해야 합니다.

이전 답변에서 AutoDetectProcessTimer_Tick 함수는 이미 그 로직으로 수정해드렸었는데, GetTargetWindowHandle 함수 내 "프로세스 이름으로 찾기" 부분은 여전히 GetProcessesByName을 사용하고 있었네요. 이 부분을 수정하겠습니다.

MainWindow.xaml.cs의 GetTargetWindowHandle 함수 수정
GetTargetWindowHandle 함수 내에서 '프로세스 이름으로 찾기' 로직을 아래와 같이 변경합니다. 이제 txtTarget.Text에 InlineTesterPBA라고만 입력해도, InlineTesterPBA_V1_V2.0.8.exe처럼 해당 문자열로 시작하는 실행 중인 프로세스를 찾아 처리합니다.

수정된 GetTargetWindowHandle 함수 코드:

C#

        // GetTargetWindowHandle 함수 (프로세스 이름 검색 로직 수정)
        private IntPtr GetTargetWindowHandle()
        {
            string targetInput = txtTarget.Text; // UI에서 현재 설정된 대상 값
            string searchMethod = rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름";

            LogTrace($"GetTargetWindowHandle: 함수 진입. UI에 설정된 대상: '{targetInput}', 탐색 방법: '{searchMethod}'");

            if (string.IsNullOrWhiteSpace(targetInput))
            {
                LogTrace("GetTargetWindowHandle: 대상 문자열이 비어있으므로 IntPtr.Zero 반환.");
                return IntPtr.Zero;
            }

            if (rbFindByTitle.IsChecked == true)
            {
                LogTrace($"GetTargetWindowHandle: '창 제목으로 찾기' 실행. 찾을 제목: '{targetInput}'");
                IntPtr hWndByTitle = FindWindow(null, targetInput);
                if (hWndByTitle != IntPtr.Zero)
                {
                    LogTrace($"GetTargetWindowHandle: FindWindow API 성공! 창 제목 '{targetInput}'에 해당하는 핸들 {hWndByTitle} 찾음.");
                }
                else
                {
                    LogTrace($"GetTargetWindowHandle: FindWindow API 실패. 창 제목 '{targetInput}'에 해당하는 핸들 찾지 못함.");
                }
                return hWndByTitle;
            }
            else // rbFindByProcess.IsChecked == true (프로세스 이름으로 찾기)
            {
                // targetInput은 "InlineTesterPBA" 같은 시작 문자열일 수 있음
                string prefixToSearch = targetInput.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(targetInput) : targetInput;
                LogTrace($"GetTargetWindowHandle: '프로세스 이름으로 찾기' 실행. 검색할 이름(또는 시작 문자열): '{prefixToSearch}'");

                Process[] allProcesses = Process.GetProcesses();
                LogTrace($"GetTargetWindowHandle: 현재 실행 중인 총 {allProcesses.Length}개의 프로세스 확인.");

                var foundProcesses = allProcesses
                    .Where(p => p.ProcessName.StartsWith(prefixToSearch, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                
                LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 프로세스 {foundProcesses.Count}개 발견.");

                if (foundProcesses.Count == 0)
                {
                    LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 활성 프로세스를 찾을 수 없음. IntPtr.Zero 반환.");
                    return IntPtr.Zero;
                }
                
                // 여러 개가 찾아지더라도, 유효한 MainWindowHandle을 가진 첫 번째 것을 우선 사용
                LogTrace($"GetTargetWindowHandle: 발견된 {foundProcesses.Count}개 프로세스 인스턴스 각각의 MainWindowHandle 검사 시작...");
                for (int i = 0; i < foundProcesses.Count; i++)
                {
                    Process p = foundProcesses[i];
                    IntPtr currentHandle = IntPtr.Zero;
                    string processIdInfo = "N/A";
                    string mainWindowTitle = "N/A";
                    bool hasExited = false;

                    try
                    {
                        if (!p.HasExited)
                        {
                            currentHandle = p.MainWindowHandle;
                            processIdInfo = p.Id.ToString();
                            mainWindowTitle = string.IsNullOrEmpty(p.MainWindowTitle) ? "(비어 있음)" : p.MainWindowTitle;
                        }
                        else { hasExited = true; }
                    }
                    catch (InvalidOperationException) { hasExited = true; } // 이미 종료된 경우
                    catch { /* 기타 예외는 무시하고 다음으로 */ }


                    if (hasExited)
                    {
                        LogTrace($"  - [{i + 1}/{foundProcesses.Count}] 프로세스 '{p.ProcessName}'는 이미 종료된 상태입니다. 건너뜁니다.");
                        continue;
                    }
                    
                    LogTrace($"  - [{i + 1}/{foundProcesses.Count}] 검사 중: 프로세스 ID {processIdInfo} ('{p.ProcessName}'), MainWindowHandle: {currentHandle}, MainWindowTitle: '{mainWindowTitle}'");
                    
                    if (currentHandle != IntPtr.Zero)
                    {
                        LogTrace($"  - 유효한 MainWindowHandle ({currentHandle}) 발견! 이 핸들을 사용합니다.");
                        return currentHandle; // 가장 먼저 찾은 유효한 핸들 반환
                    }
                    else
                    {
                        LogTrace($"  - 이 프로세스 인스턴스의 MainWindowHandle이 0입니다.");
                    }
                }

                LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 프로세스들은 {foundProcesses.Count}개 찾았으나, 모두 유효한 MainWindowHandle (0이 아닌 값)을 가지고 있지 않습니다. 캡처 가능한 창이 없다고 판단하여 IntPtr.Zero 반환.");
                return IntPtr.Zero;
            }
        }
MainWindow.xaml.cs 전체 코드 (위 수정사항 포함)
이전과 같이 펼침 블록 안에 MainWindow.xaml.cs 파일의 전체 코드를 넣어드리겠습니다. 위 GetTargetWindowHandle 함수 수정 외에는 변경 사항이 없습니다.

&lt;details>
&lt;summary>&lt;b>[클릭] 모든 코드가 포함된 MainWindow.xaml.cs 최종 전체 버전&lt;/b>&lt;/summary>

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing; // System.Drawing 네임스페이스를 Gdi 별칭으로 사용
using Wpf = System.Windows; // System.Windows 네임스페이스를 Wpf 별칭으로 사용

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private Wpf.Threading.DispatcherTimer autoDetectProcessTimer;

        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private readonly string logFolderPath;
        private readonly string traceLogPath;
        private string previewImagePath;
        private bool isExiting = false;
        private const string TARGET_PROCESS_PREFIX = "InlineTesterPBA";

        private TesseractEngine OcrEngine
        {
            get
            {
                if (_ocrEngine == null)
                {
                    string exePath = AppDomain.CurrentDomain.BaseDirectory;
                    string tessDataPath = Path.Combine(exePath, "tessdata");
                    _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
                    _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.");
                }
                return _ocrEngine;
            }
        }
        
        public MainWindow()
        {
            logFolderPath = Path.Combine(agentBasePath, "logs");
            traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
            InitializeComponent();
            InitializeApp();
        }

        private void LogTrace(string message)
        {
            try
            {
                Directory.CreateDirectory(logFolderPath);
                string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} - {message}\r\n";
                File.AppendAllText(traceLogPath, logMessage);
            }
            catch { }
        }

        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            LogTrace("Application Initializing...");
            CheckRequiredFiles();
            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;
            searchTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(1) };
            searchTimer.Tick += SearchTimer_Tick;
            autoDetectProcessTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(30) }; // 30초로 변경된 것 확인
            autoDetectProcessTimer.Tick += AutoDetectProcessTimer_Tick;
            Directory.CreateDirectory(agentBasePath);
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
            LogTrace("Application Initialized.");
        }
        
        private void SearchTimer_Tick(object sender, EventArgs e)
        {
            LogTrace("SearchTimer Tick: 일반 재탐색 시작...");
            lblStatus.Text = "대상 창/프로세스를 찾는 중... (1분마다 재시도)";
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd != IntPtr.Zero)
            {
                LogTrace("SearchTimer Tick: 대상 (캡처 가능한 창) 발견!");
                searchTimer.Stop();
                lblStatus.Text = "대상 발견! 자동 로깅을 시작합니다.";
                if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
            }
            else
            {
                LogTrace("SearchTimer Tick: 대상 (캡처 가능한 창) 찾기 실패.");
            }
        }

        private void AutoDetectProcessTimer_Tick(object sender, EventArgs e)
        {
            LogTrace($"AutoDetectProcessTimer Tick: '{TARGET_PROCESS_PREFIX}' 자동 감지/갱신 시도...");
            lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 갱신 중... (30초마다)";

            Process[] allProcesses = Process.GetProcesses();
            var candidateProcesses = allProcesses.Where(p => 
                p.ProcessName.StartsWith(TARGET_PROCESS_PREFIX, StringComparison.OrdinalIgnoreCase)
            ).ToList();

            if (candidateProcesses.Count == 1)
            {
                var foundProcess = candidateProcesses[0];
                string newTargetName = foundProcess.ProcessName;

                if (txtTarget.Text != newTargetName || rbFindByProcess.IsChecked == false) 
                {
                    LogTrace($"AutoDetectProcessTimer Tick: 단일 프로세스 '{newTargetName}' 발견. 대상으로 자동 설정합니다.");
                    autoDetectProcessTimer.Stop(); 
                    txtTarget.Text = newTargetName;
                    rbFindByProcess.IsChecked = true; 
                    SearchMethod_Changed(null, null); 
                    SaveApplicationSettings(); 
                    lblStatus.Text = $"대상 프로세스가 '{newTargetName}'(으)로 자동 변경/설정되었습니다. 로깅 재시작 시도.";
                    if (isLocked && !string.IsNullOrWhiteSpace(txtPcName.Text) && !timer.IsEnabled)
                    {
                        btnStart_Click(this, new RoutedEventArgs()); 
                    }
                }
                else
                {
                     LogTrace($"AutoDetectProcessTimer Tick: 프로세스 '{newTargetName}'는 이미 설정된 대상과 동일. 변경 없음.");
                     autoDetectProcessTimer.Stop(); // 이미 같은 대상이면 더 이상 이 타이머를 돌릴 필요 없음
                     if (!timer.IsEnabled && !searchTimer.IsEnabled && GetTargetWindowHandle() == IntPtr.Zero) // 그런데도 HWND를 못가져오면 일반 탐색으로
                     {
                        searchTimer.Start();
                        lblStatus.Text = $"대상 프로세스 '{newTargetName}'의 창 핸들 재탐색 중 (1분 간격).";
                     }
                }
            }
            else if (candidateProcesses.Count > 1)
            {
                LogTrace($"AutoDetectProcessTimer Tick: '{TARGET_PROCESS_PREFIX}' 시작 프로세스가 여러 개({candidateProcesses.Count}개) 발견되어 자동 갱신 불가.");
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스가 여러 개 발견되어 자동 갱신 불가.";
            }
            else
            {
                LogTrace($"AutoDetectProcessTimer Tick: '{TARGET_PROCESS_PREFIX}' 시작 프로세스를 찾지 못함. 자동 갱신 계속 시도.");
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스를 찾지 못함. 계속 자동 갱신 시도 중...";
            }
        }

        private void CheckRequiredFiles()
        {
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string[] requiredFiles = { "tesseract53.dll", "leptonica-1.83.1.dll" }; 
            foreach (var file in requiredFiles)
            {
                if (!File.Exists(Path.Combine(exePath, file)))
                {
                    LogTrace($"CheckRequiredFiles: 필수 파일 없음 - {file}");
                    MessageBox.Show($"실행에 필수적인 파일이 없습니다: {file}\n\nClickOnce 게시 설정에서 모든 관련 파일이 '포함(Include)'되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return;
                }
            }
            if (!Directory.Exists(Path.Combine(exePath, "tessdata")))
            {
                LogTrace("CheckRequiredFiles: tessdata 폴더 없음.");
                MessageBox.Show("tessdata 폴더를 찾을 수 없습니다.\n\nClickOnce 게시 설정에서 tessdata 폴더와 그 안의 파일들이 포함되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return;
            }
            LogTrace("CheckRequiredFiles: 모든 필수 파일 확인 완료.");
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LogTrace("Window_Loaded: 설정 로드 시작.");
            txtTarget.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (Settings.Default.SearchByProcessName) { rbFindByProcess.IsChecked = true; }
            else { rbFindByTitle.IsChecked = true; }
            SearchMethod_Changed(null, null); 

            if (File.Exists(previewImagePath))
            {
                try
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 시도 - {previewImagePath}");
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                    LogTrace("Window_Loaded: 미리보기 이미지 로드 성공.");
                }
                catch (Exception ex) { LogTrace($"Window_Loaded: 미리보기 이미지 로드 실패 - {ex.Message}"); }
            }
            else { LogTrace("Window_Loaded: 미리보기 이미지 파일 없음."); }
            UpdateLockState(true);
            LogTrace("Window_Loaded: 설정 로드 완료, 자동 시작 시도.");
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && !string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 충족 (PC 이름 및 대상 정보 있음). 대상 핸들 검색 시도.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd != IntPtr.Zero)
                {
                    LogTrace("AttemptAutoStart: 대상 (캡처 가능한 창) 즉시 발견. 로깅 시작.");
                    if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
                }
                else 
                {
                    LogTrace("AttemptAutoStart: 대상 (캡처 가능한 창) 찾기 실패. 일반 재탐색 타이머 시작.");
                    lblStatus.Text = "기존 설정 대상을 찾을 수 없어, 1분마다 일반 재검색을 시작합니다.";
                    if(!searchTimer.IsEnabled) searchTimer.Start();
                }
            }
            else if (!string.IsNullOrWhiteSpace(txtPcName.Text) && rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace($"AttemptAutoStart: 대상 프로세스 이름이 비어있음. '{TARGET_PROCESS_PREFIX}' 자동 감지 타이머 시작.");
                lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 감지를 시작합니다 (30초 간격).";
                if (!autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Start();
            }
            else
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 미충족 (PC 이름 또는 대상 정보 부족).");
            }
        }
        
        private void SaveApplicationSettings()
        {
            LogTrace("SaveApplicationSettings: 설정 저장 시작.");
            Settings.Default.WindowTitle = txtTarget.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
            Settings.Default.Save();
            LogTrace("SaveApplicationSettings: 설정 저장 완료.");
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            SaveApplicationSettings();
            lblStatus.Text = $"상태: {DateTime.Now:T} - 설정이 저장되었습니다.";
            MessageBox.Show("설정이 저장되었습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoDetectProcessTimer.IsEnabled)
            {
                MessageBox.Show("로깅 또는 대상 탐색/자동갱신이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);
            LogTrace($"btnToggleEdit_Click: 잠금 상태 변경 -> {isLocked}");

            if (isLocked)
            {
                SaveApplicationSettings();
                lblStatus.Text = $"상태: {DateTime.Now:T} - 변경된 설정이 저장되었습니다.";
                if (rbFindByProcess.IsChecked == true && string.IsNullOrWhiteSpace(txtTarget.Text) && !string.IsNullOrWhiteSpace(txtPcName.Text))
                {
                     if (!autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Start();
                     lblStatus.Text = $"'{TARGET_PROCESS_PREFIX}' 시작 프로세스 자동 감지를 시작합니다 (30초 간격).";
                }
            }
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtTarget.IsReadOnly = isLocked;
            rbFindByTitle.IsEnabled = !isLocked;
            rbFindByProcess.IsEnabled = !isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            btnSaveSettings.IsEnabled = !isLocked; 

            if (isLocked) { btnToggleEdit.Content = "수정"; txtPcName.Background = Wpf.Media.Brushes.LightGray; txtTarget.Background = Wpf.Media.Brushes.LightGray; }
            else { btnToggleEdit.Content = "잠금"; txtPcName.Background = Wpf.Media.Brushes.White; txtTarget.Background = Wpf.Media.Brushes.White; }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled || autoDetectProcessTimer.IsEnabled)
            {
                LogTrace("btnStart_Click: 로깅/탐색/자동갱신 중지 요청.");
                timer.Stop();
                searchTimer.Stop();
                autoDetectProcessTimer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 모든 작업이 중지되었습니다.";
            }
            else
            {
                LogTrace("btnStart_Click: 로깅 시작 요청.");
                searchTimer.Stop(); 
                autoDetectProcessTimer.Stop();

                if (!isLocked) { LogTrace("btnStart_Click: 시작 실패 - 잠금 상태 아님."); MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information); return; }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtTarget.Text)) { LogTrace("btnStart_Click: 시작 실패 - PC이름 또는 대상 정보 부족."); MessageBox.Show("PC이름과 대상(창 제목/프로세스 이름)을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error); return; }
                
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) 
                { 
                    LogTrace("btnStart_Click: 시작 실패 - 대상 (캡처 가능한 창) 찾을 수 없음. 일반 재탐색 시작."); 
                    lblStatus.Text = "상태: 오류! 대상을 찾을 수 없어 일반 재탐색을 시작합니다.";
                    if(!searchTimer.IsEnabled) searchTimer.Start(); 
                    return; 
                }
                
                LogTrace("btnStart_Click: 로깅 시작됨 (캡처 가능한 창 발견).");
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return;
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
            LogTrace($"SearchMethod_Changed: 탐색 방법 변경됨 - { (rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름") }");
        }
        
        // GetTargetWindowHandle 함수 (프로세스 이름 검색 로직 수정됨)
        private IntPtr GetTargetWindowHandle()
        {
            string targetInput = txtTarget.Text; 
            string searchMethod = rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름";

            LogTrace($"GetTargetWindowHandle: 함수 진입. UI에 설정된 대상: '{targetInput}', 탐색 방법: '{searchMethod}'");

            if (string.IsNullOrWhiteSpace(targetInput))
            {
                LogTrace("GetTargetWindowHandle: 대상 문자열이 비어있으므로 IntPtr.Zero 반환.");
                return IntPtr.Zero;
            }

            if (rbFindByTitle.IsChecked == true)
            {
                LogTrace($"GetTargetWindowHandle: '창 제목으로 찾기' 실행. 찾을 제목: '{targetInput}'");
                IntPtr hWndByTitle = FindWindow(null, targetInput);
                if (hWndByTitle != IntPtr.Zero)
                {
                    LogTrace($"GetTargetWindowHandle: FindWindow API 성공! 창 제목 '{targetInput}'에 해당하는 핸들 {hWndByTitle} 찾음.");
                }
                else
                {
                    LogTrace($"GetTargetWindowHandle: FindWindow API 실패. 창 제목 '{targetInput}'에 해당하는 핸들 찾지 못함.");
                }
                return hWndByTitle;
            }
            else // rbFindByProcess.IsChecked == true
            {
                string prefixToSearch = targetInput.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(targetInput) : targetInput;
                LogTrace($"GetTargetWindowHandle: '프로세스 이름으로 찾기' 실행. 검색할 이름(또는 시작 문자열): '{prefixToSearch}'");

                Process[] allProcesses = Process.GetProcesses();
                LogTrace($"GetTargetWindowHandle: 현재 실행 중인 총 {allProcesses.Length}개의 프로세스 확인.");

                var foundProcesses = allProcesses
                    .Where(p => p.ProcessName.StartsWith(prefixToSearch, StringComparison.OrdinalIgnoreCase))
                    .ToList();
                
                LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 프로세스 {foundProcesses.Count}개 발견.");

                if (foundProcesses.Count == 0)
                {
                    LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 활성 프로세스를 찾을 수 없음. IntPtr.Zero 반환.");
                    return IntPtr.Zero;
                }
                
                LogTrace($"GetTargetWindowHandle: 발견된 {foundProcesses.Count}개 프로세스 인스턴스 각각의 MainWindowHandle 검사 시작...");
                for (int i = 0; i < foundProcesses.Count; i++)
                {
                    Process p = foundProcesses[i];
                    IntPtr currentHandle = IntPtr.Zero;
                    string processIdInfo = "N/A";
                    string mainWindowTitle = "N/A";
                    bool hasExited = false;

                    try
                    {
                        if (!p.HasExited)
                        {
                            currentHandle = p.MainWindowHandle;
                            processIdInfo = p.Id.ToString();
                            mainWindowTitle = string.IsNullOrEmpty(p.MainWindowTitle) ? "(비어 있음)" : p.MainWindowTitle;
                        }
                        else { hasExited = true; }
                    }
                    catch (InvalidOperationException) { hasExited = true; }
                    catch {}


                    if (hasExited)
                    {
                        LogTrace($"  - [{i + 1}/{foundProcesses.Count}] 프로세스 '{p.ProcessName}'는 이미 종료된 상태입니다. 건너뜁니다.");
                        continue;
                    }
                    
                    LogTrace($"  - [{i + 1}/{foundProcesses.Count}] 검사 중: 프로세스 ID {processIdInfo} ('{p.ProcessName}'), MainWindowHandle: {currentHandle}, MainWindowTitle: '{mainWindowTitle}'");
                    
                    if (currentHandle != IntPtr.Zero)
                    {
                        LogTrace($"  - 유효한 MainWindowHandle ({currentHandle}) 발견! 이 핸들을 사용합니다.");
                        return currentHandle;
                    }
                    else
                    {
                        LogTrace($"  - 이 프로세스 인스턴스의 MainWindowHandle이 0입니다.");
                    }
                }

                LogTrace($"GetTargetWindowHandle: '{prefixToSearch}'(으)로 시작하는 프로세스들은 {foundProcesses.Count}개 찾았으나, 모두 유효한 MainWindowHandle (0이 아닌 값)을 가지고 있지 않습니다. 캡처 가능한 창이 없다고 판단하여 IntPtr.Zero 반환.");
                return IntPtr.Zero;
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { LogTrace("MyNotifyIcon_TrayMouseDoubleClick: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { LogTrace("MenuOpen_Click: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { LogTrace("MenuExit_Click: 프로그램 종료 시작."); isExiting = true; this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
            }
            else
            {
                LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
                SaveApplicationSettings();
                LogTrace("Window OnClosing: 설정 저장 완료 (OnClosing 내부).");
                MyNotifyIcon.Dispose();
                LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
                _ocrEngine?.Dispose();
                LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }

        private void PerformLogging()
        {
            Gdi.Rectangle cropArea = Gdi.Rectangle.Empty;
            Gdi.Size bmpSize = Gdi.Size.Empty;
            try
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    if (rbFindByProcess.IsChecked == true && !autoDetectProcessTimer.IsEnabled && !searchTimer.IsEnabled)
                    {
                        timer.Stop(); 
                        autoDetectProcessTimer.Start(); 
                        lblStatus.Text = $"현재 대상({txtTarget.Text})을 찾을 수 없습니다. '{TARGET_PROCESS_PREFIX}' 자동 갱신 시작 (30초 간격).";
                    }
                    else if (!searchTimer.IsEnabled && !autoDetectProcessTimer.IsEnabled) 
                    {
                        timer.Stop();
                        searchTimer.Start();
                        lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다.";
                    }
                    return;
                }
                
                if (searchTimer.IsEnabled) searchTimer.Stop();
                if (autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Stop();

                if (IsIconic(hWnd)) { lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다."; return; }
                bmpSize = new Gdi.Size(width, height);
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        timer.Stop(); btnStart.Content = "로깅 시작"; lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) { using (var page = OcrEngine.Process(croppedBmp)) { string rawText = page.GetText().Trim(); if (!string.IsNullOrWhiteSpace(rawText)) { ProcessOcrResult(rawText); } else { lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다."; } } }
                }
            }
            catch (Exception ex)
            {
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                if (autoDetectProcessTimer.IsEnabled) autoDetectProcessTimer.Stop();
                btnStart.Content = "로깅 시작";
                var sb = new StringBuilder();
                sb.AppendLine("캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.");
                sb.AppendLine("==============================================");
                sb.AppendLine($"[진단 정보]");
                sb.AppendLine($"전체 창 크기: {bmpSize.Width} x {bmpSize.Height}");
                sb.AppendLine($"잘라낼 영역 (X,Y,W,H): {cropArea.X}, {cropArea.Y}, {cropArea.Width}, {cropArea.Height}");
                sb.AppendLine("==============================================");
                Exception currentEx = ex;
                int indentLevel = 0;
                while (currentEx != null)
                {
                    sb.AppendLine($"\n[오류 레벨 {indentLevel}] {(indentLevel == 1 ? "(진짜 원인일 가능성이 높음)" : "")}");
                    sb.AppendLine($"  - 오류 유형: {currentEx.GetType().Name}");
                    sb.AppendLine($"  - 메시지: {currentEx.Message}");
                    sb.AppendLine($"  - 스택 트레이스:\n{currentEx.StackTrace}");
                    currentEx = currentEx.InnerException;
                    indentLevel++;
                }
                MessageBox.Show(sb.ToString(), "캡처 상세 오류 보고", MessageBoxButton.OK, MessageBoxImage.Error);
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        private void ProcessOcrResult(string rawText) 
        {
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 2) { lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)"; return; }
            string part1String = parts[0];
            string part2String = parts[1];
            if (!part1String.Contains(".") && part1String.Length >= 2) { part1String = part1String.Insert(part1String.Length - 1, "."); }
            if (!part2String.Contains(".") && part2String.Length >= 2) { part2String = part2String.Insert(part2String.Length - 1, "."); }
            if (decimal.TryParse(part1String, out decimal val1) && decimal.TryParse(part2String, out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                UploadToDatabase(temp, humid);
            }
            else { lblStatus.Text = $"상태: 숫자 변환 오류 ({part1String},{part2String})"; }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName)) { lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다."; return; }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;"; 
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                conn = new MySqlConnection(connectionString);
                conn.Open();
                trans = conn.BeginTransaction();
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.Clear();
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    rowsAffected = cmd.ExecuteNonQuery();
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    cmd.ExecuteNonQuery();
                }
                trans.Commit();
                if (rowsAffected > 0) { lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!"; }
                else { lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)"; }
            }
            catch (Exception ex)
            {
                try { trans?.Rollback(); } catch { }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally { conn?.Close(); }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd == IntPtr.Zero) { MessageBox.Show("먼저 유효한 '대상 창/프로세스 이름'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) return;
                if (IsIconic(hWnd)) { MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); imgPreview.Source = null; return; }
                if (!int.TryParse(txtX.Text, out int capX) || !int.TryParse(txtY.Text, out int capY) || !int.TryParse(txtWidth.Text, out int capW) || !int.TryParse(txtHeight.Text, out int capH) || capW <= 0 || capH <= 0)
                { imgPreview.Source = null; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) return;
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    var cropArea = new Gdi.Rectangle(capX, capY, capW, capH);
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    { imgPreview.Source = null; MessageBox.Show("미리보기를 위한 캡처 영역이 창 크기를 벗어났습니다. 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) { imgPreview.Source = BitmapToImageSource(croppedBmp); croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png); }
                }
            }
            catch { }
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }