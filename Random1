nixodbc 및 unixodbc-dev 설치
libodbc.so.2 파일을 제공하는 ODBC 드라이버 관리자(unixodbc)와 개발 헤더 파일(unixodbc-dev)을 설치합니다.

Bash

sudo apt install -y unixodbc unixodbc-dev
설치 후 libodbc.so.2 파일이 시스템 라이브러리 경로(예: /usr/lib/x86_64-linux-gnu/)에 있는지 확인해볼 수 있습니다.

3. Microsoft ODBC Driver for SQL Server 설치
MSSQL Server에 연결하려면 Microsoft에서 제공하는 공식 ODBC 드라이버를 설치해야 합니다. 사용하는 Ubuntu 버전에 따라 설치 방법이 약간 다를 수 있으므로, Microsoft 공식 문서를 참고하는 것이 가장 정확합니다.

일반적인 msodbcsql17 (또는 최신 버전인 msodbcsql18) 설치 과정은 다음과 같습니다 (Ubuntu 버전에 따라 저장소 URL이 다를 수 있습니다. 예: ubuntu/20.04, ubuntu/22.04 등):

a. Microsoft GPG 키 등록:

Bash

curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
b. Microsoft 리포지토리 추가 (Ubuntu 버전에 맞게 $(lsb_release -rs)가 자동으로 버전 설정):

Bash

curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
```

만약 위 `$(lsb_release -rs)` 부분이 정확한 Ubuntu 버전 코드 (예: 20.04, 22.04)로 자동 변환되지 않거나, 해당 버전에 대한 Microsoft 저장소가 없다면, 직접 버전을 명시해야 할 수 있습니다. (예: `ubuntu/20.04/prod.list`)

**c. 패키지 목록 다시 업데이트 및 드라이버 설치:**

```bash
sudo apt-get update
sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17 
(최신 드라이버를 원하시면 msodbcsql18로 시도해볼 수 있습니다. 단, config.py의 ODBC 드라이버 이름도 맞춰야 합니다.)

d. (선택 사항) SQL Server 명령줄 유틸리티 설치:
sqlcmd, bcp 같은 유틸리티가 필요하다면 설치합니다.

Bash

sudo ACCEPT_EULA=Y apt-get install -y mssql-tools
  만약 설치했다면, PATH 환경 변수에 추가하는 것이 좋습니다 (터미널 재시작 또는 `source ~/.bashrc` 필요):
Bash

echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
source ~/.bashrc 
이 부분은 Flask 앱 실행에 필수는 아니지만, DB 연결 테스트 등에 유용할 수 있습니다.

4. 공유 라이브러리 캐시 업데이트
새로 설치된 라이브러리들을 시스템이 인식하도록 라이브러리 캐시를 업데이트합니다.

Bash

sudo ldconfig
5. ODBC 드라이버 등록 확인 (선택 사항)
설치된 ODBC 드라이버가 시스템에 올바르게 등록되었는지 확인할 수 있습니다. msodbcsql17 설치 시 보통 자동으로 odbcinst.ini 파일에 등록됩니다.

Bash

odbcinst -q -d
이 명령을 실행했을 때, 출력 목록에 [ODBC Driver 17 for SQL Server] (또는 설치한 버전)가 보여야 합니다.

위 단계들을 모두 실행한 후, 다시 Flask 애플리케이션 (python run.py)을 실행해 보십시오. pyodbc 모듈이 libodbc.so.2 및 MSSQL ODBC 드라이버를 정상적으로 찾을 수 있게 되어 오류가 해결될 것입니다.