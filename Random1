네, 바로 수정해 드리겠습니다.

말씀하신 증상은 pymssql의 접속 옵션과 pandas 라이브러리가 데이터를 주고받는 방식이 맞지 않을 때 발생하는 대표적인 문제입니다.

문제의 원인은 DB_CONFIG 설정에 포함된 'as_dict': True 옵션입니다. 이 옵션을 제거하면 문제가 해결됩니다.

💡 수정 방법
app.py 파일에서 DB_CONFIG 부분을 아래와 같이 수정하세요. 'as_dict': True 라인을 삭제하거나 주석 처리(#)하면 됩니다.

기존 코드 (문제 발생)

Python

DB_CONFIG = {
    'server': 'YOUR_SERVER_IP_OR_HOSTNAME',
    'user': 'YOUR_USERNAME',
    'password': 'YOUR_PASSWORD',
    'database': 'SControlFlaskDB',
    'as_dict': True # <-- 이 옵션이 문제의 원인입니다.
}
수정된 코드 (정상 작동)

Python

DB_CONFIG = {
    'server': 'YOUR_SERVER_IP_OR_HOSTNAME',
    'user': 'YOUR_USERNAME',
    'password': 'YOUR_PASSWORD',
    'database': 'SControlFlaskDB'
    # 'as_dict': True 라인을 완전히 삭제합니다.
}
전체 수정된 코드 (app.py)
수정된 전체 코드는 다음과 같습니다. 아래 코드로 app.py 파일의 내용을 교체하세요.

Python

import streamlit as st
import pandas as pd
import pymssql
from datetime import datetime

# -----------------------------------------------------------
# DB 접속 정보 (as_dict 옵션 제거)
# -----------------------------------------------------------
DB_CONFIG = {
    'server': 'YOUR_SERVER_IP_OR_HOSTNAME',  # 실제 서버 IP로 변경
    'user': 'YOUR_USERNAME',                # 실제 유저 이름으로 변경
    'password': 'YOUR_PASSWORD',            # 실제 비밀번호로 변경
    'database': 'SControlFlaskDB'
}
# -----------------------------------------------------------

# 페이지 기본 설정
st.set_page_config(
    page_title="npmlog 실시간 조회",
    page_icon="📜",
    layout="wide"
)

# 제목
st.title("📜 npmlog 실시간 로그 조회")

# 데이터 로딩 함수 (캐시 사용으로 성능 향상)
@st.cache_data(ttl=10) # 10초마다 캐시 만료
def load_data():
    """npmlog 테이블에서 데이터를 조회하여 Pandas DataFrame으로 반환합니다."""
    try:
        # DB_CONFIG에서 as_dict=True를 제거했으므로 pandas가 정상적으로 인식합니다.
        conn = pymssql.connect(
            server=DB_CONFIG['server'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            database=DB_CONFIG['database']
        )
        query = "SELECT no1, line, onoff, datetime1 FROM npmlog ORDER BY no1 DESC;"
        df = pd.read_sql(query, conn)
        conn.close()
        
        # datetime1 컬럼의 시간 포맷을 보기 좋게 변경 (밀리초 제거)
        if 'datetime1' in df.columns:
            df['datetime1'] = pd.to_datetime(df['datetime1']).dt.strftime('%Y-%m-%d %H:%M:%S')

        return df

    except Exception as e:
        st.error(f"데이터베이스 연결 또는 조회 중 오류 발생: {e}")
        return pd.DataFrame()

# 데이터 로드
df_log = load_data()

# 새로고침 버튼과 마지막 업데이트 시간 표시
col1, col2 = st.columns([1, 5])
with col1:
    if st.button("새로고침 🔄"):
        st.cache_data.clear()
        st.experimental_rerun()

with col2:
    st.markdown(f"""
    <div style="text-align: right; color: grey;">
        마지막 업데이트: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
    </div>
    """, unsafe_allow_html=True)

# 데이터프레임 표시
if not df_log.empty:
    st.dataframe(df_log, use_container_width=True, height=600)
    st.info(f"총 {len(df_log)}개의 로그가 조회되었습니다.")
else:
    st.warning("조회할 데이터가 없거나, DB 연결 정보를 확인해주세요.")
조치 사항
위 내용으로 app.py 파일을 수정한 후 저장하세요.

systemd로 서비스를 운영 중이라면, 아래 명령어로 서비스를 재시작하여 변경사항을 적용하세요.

Bash

sudo systemctl restart streamlit_app
이제 다시 웹페이지에 접속하면 실제 데이터가 정상적으로 표시될 것입니다.

