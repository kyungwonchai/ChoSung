using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private RibbonPage favoritesPage;
        private Dictionary<string, BarButtonItem> buttonsDictionary = new Dictionary<string, BarButtonItem>();
        private HashSet<string> favoriteKeys = new HashSet<string>(); // 즐겨찾기 키값을 저장할 HashSet
        private string favoriteStorageFile = "favorites.txt"; // 즐겨찾기 상태 저장용 파일 경로

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            LoadFavorites();
            InitializeButtons();
        }

        private void InitializeFavoritesPage()
        {
            // 즐겨찾기 페이지 초기화
            favoritesPage = new RibbonPage("Favorites");
            ribbonControl1.Pages.Insert(0, favoritesPage);
        }

        private void LoadFavorites()
        {
            // 파일에서 즐겨찾기 정보를 불러오기
            if (File.Exists(favoriteStorageFile))
            {
                var lines = File.ReadAllLines(favoriteStorageFile);
                favoriteKeys = new HashSet<string>(lines);
            }
        }

        private void SaveFavorites()
        {
            // 즐겨찾기 정보를 파일에 저장하기
            File.WriteAllLines(favoriteStorageFile, favoriteKeys);
        }

        private void InitializeButtons()
        {
            // 예시 버튼들을 초기화
            var buttons = new List<UBtn>
            {
                new UBtn("Button1", "Key1", "Tag1", "icon1.ico", "Tooltip 1", ButtonClick1, ribbonControl1.Pages[1], ribbonControl1.Pages[1].Groups[0], RibbonItemStyles.Large),
                new UBtn("Button2", "Key2", "Tag2", "icon2.ico", "Tooltip 2", ButtonClick2, ribbonControl1.Pages[1], ribbonControl1.Pages[1].Groups[0], RibbonItemStyles.Large),
            };

            foreach (var btn in buttons)
            {
                AddButton(btn);
            }
        }

        private void AddButton(UBtn uBtn)
        {
            // BarButtonItem 생성
            BarButtonItem button = new BarButtonItem();
            button.Caption = uBtn.Caption;
            button.Tag = uBtn.Tag;
            button.Hint = uBtn.Tooltip;
            button.RibbonStyle = uBtn.ButtonSize;
            button.ItemClick += (s, e) => uBtn.Action();

            if (!string.IsNullOrEmpty(uBtn.IconPath) && File.Exists(uBtn.IconPath))
            {
                button.ImageOptions.Image = Image.FromFile(uBtn.IconPath);
            }

            // 버튼 우상단에 별표를 추가하는 사용자 정의 패널 생성
            BarButtonItem starButton = new BarButtonItem();
            starButton.Caption = ""; // 캡션을 비워둠
            starButton.ImageOptions.SvgImage = DevExpress.Utils.Svg.SvgImage.FromFile("star_icon.svg"); // 별 아이콘 파일 경로 지정 (SVG 또는 이미지 파일 사용 가능)
            starButton.ImageOptions.SvgImageSize = new Size(16, 16); // 별 아이콘 크기 조정
            starButton.ItemClick += (s, e) => ToggleFavorite(uBtn.Key, starButton);
            starButton.ItemAppearance.Normal.ForeColor = favoriteKeys.Contains(uBtn.Key) ? Color.Yellow : Color.Gray;
            starButton.Alignment = BarItemLinkAlignment.Right; // 버튼 우측에 배치되도록 설정
            starButton.Border = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder; // 별 버튼의 테두리 제거로 더 자연스럽게 표시

            // 버튼과 별표 아이템을 리본 그룹에 추가
            uBtn.RibbonPageGroup.ItemLinks.Add(button);
            uBtn.RibbonPageGroup.ItemLinks.Add(starButton);

            // 버튼 사전에 저장
            buttonsDictionary[uBtn.Key] = button;

            // 즐겨찾기 페이지에 추가되어야 하는지 확인 후 추가
            if (favoriteKeys.Contains(uBtn.Key))
            {
                AddToFavorites(button);
            }
        }

        private void ToggleFavorite(string key, BarButtonItem starButton)
        {
            // 즐겨찾기 추가/제거 로직
            if (favoriteKeys.Contains(key))
            {
                favoriteKeys.Remove(key);
                starButton.ImageOptions.SvgImage = DevExpress.Utils.Svg.SvgImage.FromFile("star_outline_icon.svg"); // 즐겨찾기 해제 시 별표 외곽선 이미지 사용
                starButton.ItemAppearance.Normal.ForeColor = Color.Gray;
                RemoveFromFavorites(buttonsDictionary[key]);
            }
            else
            {
                favoriteKeys.Add(key);
                starButton.ImageOptions.SvgImage = DevExpress.Utils.Svg.SvgImage.FromFile("star_filled_icon.svg"); // 즐겨찾기 추가 시 채워진 별 이미지 사용
                starButton.ItemAppearance.Normal.ForeColor = Color.Yellow;
                AddToFavorites(buttonsDictionary[key]);
            }

            SaveFavorites(); // 즐겨찾기 상태를 변경할 때마다 저장하기
        }

        private void AddToFavorites(BarButtonItem button)
        {
            // 즐겨찾기 페이지에 버튼 추가
            if (favoritesPage.Groups.Count == 0)
            {
                favoritesPage.Groups.Add(new RibbonPageGroup("Favorites Group"));
            }

            favoritesPage.Groups[0].ItemLinks.Add(button);
        }

        private void RemoveFromFavorites(BarButtonItem button)
        {
            // 즐겨찾기 페이지에서 버튼 제거
            var link = favoritesPage.Groups[0].ItemLinks.FirstOrDefault(l => l.Item == button);
            if (link != null)
            {
                favoritesPage.Groups[0].ItemLinks.Remove(link);
            }
        }

        // 버튼 클릭 예시 함수들
        private void ButtonClick1()
        {
            MessageBox.Show("Button 1 clicked");
        }

        private void ButtonClick2()
        {
            MessageBox.Show("Button 2 clicked");
        }
    }

    // 버튼 정보를 담는 클래스 정의
    public class UBtn
    {
        public string Caption { get; set; }
        public string Key { get; set; } // 키값을 사용자 정의로 설정
        public string Tag { get; set; }
        public string IconPath { get; set; } // 아이콘 경로 추가
        public string Tooltip { get; set; }
        public Action Action { get; set; }
        public RibbonPage RibbonPage { get; set; }
        public RibbonPageGroup RibbonPageGroup { get; set; }
        public RibbonItemStyles ButtonSize { get; set; }

        public UBtn(string caption, string key, string tag, string iconPath, string tooltip, Action action, RibbonPage ribbonPage, RibbonPageGroup ribbonPageGroup, RibbonItemStyles buttonSize)
        {
            Caption = caption;
            Key = key; // 키값을 생성자에서 전달받아 설정
            Tag = tag;
            IconPath = iconPath; // 아이콘 경로 설정
            Tooltip = tooltip;
            Action = action;
            RibbonPage = ribbonPage;
            RibbonPageGroup = ribbonPageGroup;
            ButtonSize = buttonSize;
        }
    }