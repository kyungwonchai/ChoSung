inForms에서 ListBox(listBox1)에 비동기로 로그를 추가하고, 100개를 초과하면 가장 오래된 항목을 삭제하는 코드입니다.

구현 방식
비동기 로그 추가: Task.Run()을 사용하여 UI 스레드와 별도로 실행.
Invoke 사용: listBox1.Invoke()를 사용하여 UI 컨트롤에 접근.
최대 개수 제한: 100개를 초과하면 가장 오래된 항목을 삭제.
코드
csharp
Copy code
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace AsyncLogWinForms
{
    public partial class Form1 : Form
    {
        private readonly Queue<string> logQueue = new Queue<string>(); // 로그 저장용 큐
        private readonly int maxLogCount = 100; // 최대 로그 개수 제한

        public Form1()
        {
            InitializeComponent();
        }

        // 비동기 로그 추가 함수
        public async Task AddLogAsync(string message)
        {
            await Task.Run(() =>
            {
                string logMessage = $"{DateTime.Now:HH:mm:ss} - {message}";

                // UI 스레드에서 ListBox 업데이트
                listBox1.Invoke((Action)(() =>
                {
                    if (logQueue.Count >= maxLogCount)
                    {
                        logQueue.Dequeue(); // 가장 오래된 로그 삭제
                        listBox1.Items.RemoveAt(0);
                    }

                    logQueue.Enqueue(logMessage);
                    listBox1.Items.Add(logMessage);

                    // 항상 최신 로그가 보이도록 스크롤 조정
                    listBox1.TopIndex = listBox1.Items.Count - 1;
                }));
            });
        }

        // 버튼 클릭 시 로그 추가 테스트
        private async void btnAddLog_Click(object sender, EventArgs e)
        {
            await AddLogAsync("New log entry added.");
        }
    }
}
설명
Queue<string> (logQueue)를 사용하여 로그를 저장하고 관리합니다.
Invoke()를 사용하여 UI 컨트롤 (listBox1)에 안전하게 접근합니다.
로그가 100개를 초과하면 가장 오래된 항목을 삭제(Dequeue() & RemoveAt(0))합니다.
최신 로그가 항상 보이도록 스크롤 자동 이동 (listBox1.TopIndex = listBox1.Items.Count - 1)을 수행합니다.