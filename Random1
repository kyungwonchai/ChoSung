삭제 시 하드 디스크 용량이 부족한 경우, 보관 기간이 남아 있는 파일 중에서 오래된 파일을 먼저 삭제하는 로직으로 수정하겠습니다. 파일을 순차적으로 확인하며 용량을 확보할 때까지 파일을 삭제하도록 변경하겠습니다.

FileManager.cs
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace FileCleanupApp
{
    public class FileManager
    {
        private string targetFolder;
        private int retentionDays;
        private long maxDiskUsage;
        private string logFolder = @"C:\agent\smdfilecleaner\log";

        public FileManager(string targetFolder, int retentionDays, long maxDiskUsage)
        {
            this.targetFolder = targetFolder;
            this.retentionDays = retentionDays;
            this.maxDiskUsage = maxDiskUsage;

            // 로그 폴더가 없으면 생성
            if (!Directory.Exists(logFolder))
            {
                Directory.CreateDirectory(logFolder);
            }
        }

        public async Task CleanUpAsync()
        {
            DateTime serverTime = await TimeSyncManager.GetServerTimeAsync();
            var files = new DirectoryInfo(targetFolder).GetFiles().OrderBy(f => f.CreationTime).ToList();
            long currentUsage = files.Sum(f => f.Length);
            string logFilePath = Path.Combine(logFolder, serverTime.ToString("yyyyMMdd") + ".txt");

            using (StreamWriter logWriter = new StreamWriter(logFilePath, true))
            {
                // 보관 기간이 지난 파일 삭제
                foreach (var file in files.Where(f => serverTime - f.CreationTime > TimeSpan.FromDays(retentionDays)))
                {
                    if (!IsFileLocked(file))
                    {
                        logWriter.WriteLine($"{serverTime}: Deleted {file.FullName} due to retention policy");
                        file.Delete();
                        currentUsage -= file.Length;
                    }
                }

                // 하드 디스크 용량 확보를 위해 오래된 파일 삭제
                foreach (var file in files.Where(f => serverTime - f.CreationTime <= TimeSpan.FromDays(retentionDays)))
                {
                    if (currentUsage <= maxDiskUsage)
                    {
                        break;
                    }

                    if (!IsFileLocked(file))
                    {
                        logWriter.WriteLine($"{serverTime}: Deleted {file.FullName} due to disk space limit");
                        file.Delete();
                        currentUsage -= file.Length;
                    }
                }
            }

            CleanUpLogs(serverTime);
        }

        private void CleanUpLogs(DateTime serverTime)
        {
            var logFiles = new DirectoryInfo(logFolder).GetFiles("*.txt").OrderBy(f => f.CreationTime).ToList();

            foreach (var logFile in logFiles)
            {
                if (serverTime - logFile.CreationTime > TimeSpan.FromDays(60))
                {
                    logFile.Delete();
                }
            }
        }

        private bool IsFileLocked(FileInfo file)
        {
            try
            {
                using (FileStream stream = file.Open(FileMode.Open, FileAccess.ReadWrite, FileShare.None))
                {
                    stream.Close();
                }
            }
            catch (IOException)
            {
                return true;
            }

            return false;
        }
    }
}
이제 파일이 삭제되는 로직은 다음과 같이 작동합니다:

보관 기간이 지난 파일을 먼저 삭제합니다.
하드 디스크 용량이 부족한 경우, 보관 기간이 남아 있는 파일 중에서 오래된 파일을 순차적으로 삭제합니다.
파일 삭제는 잠금 상태가 아닌 파일만 처리합니다.
이 변경사항을 통해 파일을 더 효율적으로 삭제하고 하드 디스크 용량을 확보할 