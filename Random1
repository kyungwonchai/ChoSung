스에서 NumberMapping에 접근하고 값을 처리하는 구조로 변경하는 것입니다. 이를 위해 다른 클래스에 NumberMapping을 주입하고, 그 클래스에서 값을 변경하거나 처리하도록 설계하겠습니다.

1. 다른 클래스에 NumberMapping 주입 구조
MainViewModel: NumberMapping 객체를 생성하고, 다른 클래스에 주입하는 역할을 합니다.
ExternalClass: 이 클래스는 NumberMapping 객체를 받아서 값을 처리하고, 필요한 경우 숫자를 변경하는 기능을 수행합니다.
구현 코드
1. MainViewModel 수정
NumberMapping 객체를 생성한 후, 다른 클래스에 전달하여 사용할 수 있도록 설계합니다.

csharp
코드 복사
public class MainViewModel : INotifyPropertyChanged
{
    private NumberMapping _numberMapping;  // NumberMapping 클래스 인스턴스

    public MainViewModel()
    {
        var model = new NumberStringMappingModel();  // 모델 초기화
        _numberMapping = new NumberMapping(model);   // NumberMapping 초기화

        // ExternalClass에 NumberMapping 객체를 주입
        var externalClass = new ExternalClass(_numberMapping);
        externalClass.Process();  // 외부 클래스에서 처리 수행
    }

    public event PropertyChangedEventHandler PropertyChanged;

    // NumberMapping 객체를 그대로 노출
    public NumberMapping NumberMapping
    {
        get { return _numberMapping; }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
2. ExternalClass 정의
NumberMapping 객체를 주입받고, 이를 이용하여 숫자 값을 변경하거나 다른 처리를 수행할 수 있습니다.

csharp
코드 복사
public class ExternalClass
{
    private NumberMapping _numberMapping;

    // 생성자에서 NumberMapping 객체를 주입받음
    public ExternalClass(NumberMapping numberMapping)
    {
        _numberMapping = numberMapping;
    }

    // 숫자 값을 변경하거나 다른 작업을 처리하는 함수
    public void Process()
    {
        // NumberMapping 객체의 Number 값을 변경
        _numberMapping.Number = 5;

        // 변경된 매핑된 문자열 출력
        Console.WriteLine($"Updated Mapped String: {_numberMapping.MappedString}");
    }
}
3. NumberMapping 클래스 (변경 없음)
NumberMapping 클래스는 그대로 유지됩니다.

csharp
코드 복사
using System;
using System.ComponentModel;

public class NumberMapping : INotifyPropertyChanged
{
    private NumberStringMappingModel _model;  // Model 인스턴스
    private int _number;  // 숫자 값
    private string _mappedString;  // 매핑된 문자열

    public event PropertyChangedEventHandler PropertyChanged;

    public NumberMapping(NumberStringMappingModel model)
    {
        _model = model;
        Number = 1;  // 기본 값 설정
    }

    // 숫자 값
    public int Number
    {
        get { return _number; }
        set
        {
            if (_number != value)
            {
                _number = value;
                MappedString = _model.GetMappedString(_number);
                OnPropertyChanged(nameof(Number));
            }
        }
    }

    // 매핑된 문자열
    public string MappedString
    {
        get { return _mappedString; }
        private set
        {
            if (_mappedString != value)
            {
                _mappedString = value;
                OnPropertyChanged(nameof(MappedString));
                LogMappedString();  // 로그 기록
            }
        }
    }

    // 매핑된 문자열과 현재 시간을 로그에 기록
    private void LogMappedString()
    {
        string logMessage = $"[{DateTime.Now}] Number: {Number}, Mapped String: {MappedString}";
        log123(logMessage);  // log123 함수에 로그 메시지를 넘김
    }

    // PropertyChanged 이벤트 호출
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // 이미 존재하는 log123 함수 (가정)
    private void log123(string message)
    {
        // 여기서 로그 파일에 기록하는 작업을 수행한다고 가정
        Console.WriteLine(message);  // 콘솔에 로그 출력
    }
}
4. View (XAML)
XAML에서는 여전히 NumberMapping의 MappedString을 바인딩하여 값을 표시합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Number Mapping" Height="200" Width="400">

    <Window.DataContext>
        <!-- MainViewModel을 DataContext로 설정 -->
        <local:MainViewModel />
    </Window.DataContext>

    <Grid>
        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Spacing="10">

            <!-- 매핑된 문자열을 표시하는 TextBlock -->
            <TextBlock Width="200" Height="30" 
                       Text="{Binding NumberMapping.MappedString}" 
                       VerticalAlignment="Center" 
                       HorizontalAlignment="Center" />
        </StackPanel>
    </Grid>
</Window>
주요 변경 사항 설명
MainViewModel에서 주입: MainViewModel이 NumberMapping 객체를 생성하고, 이를 ExternalClass에 주입합니다.
ExternalClass에서 처리: ExternalClass는 주입받은 NumberMapping 객체의 속성에 접근하여 숫자를 변경하거나 다른 처리를 수행합니다.
UI 연동: NumberMapping의 MappedString 속성은 여전히 UI에 바인딩되어 있으므로, 숫자가 변경될 때마다 UI에서 매핑된 문자열이 실시간으로 업데이트됩니다.
이 구조를 통해 MainViewModel에서 생성된 객체를 다른 클래스에 전달하고, 그 클래스에서 값을 변경하거나 처리할 수 있습니다. UI에는 변경된 값이 자동