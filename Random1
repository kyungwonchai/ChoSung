SensorDataConsumer 클래스를 사용하여 특정 위치의 센서 값을 조회하고 그 결과를 리턴하는 기능을 추가하겠습니다. 여기서는 SensorDataConsumer에 메서드를 추가하여, 지정된 인덱스의 센서가 감지되었는지(값이 1인지) 아닌지(값이 0인지)를 확인하는 기능을 구현하겠습니다.

이 메서드는 특정 인덱스의 센서의 IsDetected 속성을 검사하고, 해당 값이 true이면 1을, false이면 0을 리턴합니다.

SensorDataConsumer 클래스에 메서드 추가
아래 코드는 SensorDataConsumer 클래스에 GetSensorDetectionStatus 메서드를 추가하여 특정 인덱스의 센서 상태를 확인하고 해당 상태를 리턴하는 기능을 구현합니다.

csharp
코드 복사
// 파일명: SensorDataConsumer.cs
public class SensorDataConsumer
{
    private ISensorDataService _sensorService;

    public SensorDataConsumer(ISensorDataService sensorService)
    {
        _sensorService = sensorService;
    }

    // 특정 인덱스의 센서 감지 상태를 확인하는 메서드
    public int GetSensorDetectionStatus(int sensorIndex)
    {
        // SensorModel 객체를 가져옴
        var sensor = _sensorService.GetSensorByIndex(sensorIndex);
        // sensor.IsDetected가 true이면 1을, false이면 0을 리턴
        return sensor.IsDetected ? 1 : 0;
    }
}
사용 예시
위에서 정의한 SensorDataConsumer의 GetSensorDetectionStatus 메서드를 사용하는 예는 다음과 같습니다. 이 예시는 SensorViewModel의 인스턴스를 생성하고, 이를 사용하여 SensorDataConsumer를 초기화한 후, 지정된 센서의 감지 상태를 확인합니다.

csharp
코드 복사
// 예를 들어, App.xaml.cs 또는 MainWindow.xaml.cs 등에서 다음 코드를 실행할 수 있습니다.
public partial class App : Application
{
    protected override void OnStartup(StartupEventArgs e)
    {
        base.OnStartup(e);

        // ViewModel 인스턴스 생성
        var viewModel = new SensorViewModel();
        // Consumer 인스턴스 생성 및 ViewModel 주입
        var consumer = new SensorDataConsumer(viewModel);

        // 10번째 센서의 감지 상태 조회
        int sensorIndex = 10;
        int detectionStatus = consumer.GetSensorDetectionStatus(sensorIndex);
        Console.WriteLine($"Sensor at index {sensorIndex} detection status: {detectionStatus}");
    }
}
이 코드는 SensorDataConsumer 인스턴스를 사용하여 특정 센서(예: 10번째 센서)의 감지 상태를 확인하고 그 결과를 출력합니다. 이 방법을 통해 SensorViewModel에서 관리하는 센서 데이터에 안전하게 접근하고, 필요한 정보를 효과적으로 추출할 수 있습니다.