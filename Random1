위에서 학습한 **최적 모델(best_model.pkl)**을 사용해 예측을 수행하는 코드입니다. 이 코드는 PRealAandB 데이터를 DB에서 불러와 3~5열을 입력값으로 사용하여 2열을 예측하고, 실제값과 비교하여 시각화합니다.

2. 예측 및 시각화 코드
python
코드 복사
# 필요한 라이브러리 임포트
import joblib
import pymssql
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 데이터베이스에서 PRealAandB 데이터를 불러오는 함수
def fetch_data_from_db(proc_name):
    """
    MSSQL 저장 프로시저를 호출하여 데이터를 가져옵니다.
    :param proc_name: 저장 프로시저 이름
    :return: 데이터 (numpy 배열)
    """
    server = "localhost"  # DB 서버 주소
    user = "your_username"  # 사용자 이름
    password = "your_password"  # 비밀번호
    database = "your_database"  # 데이터베이스 이름

    try:
        conn = pymssql.connect(server=server, user=user, password=password, database=database)
        query = f"EXEC {proc_name}"  # 저장 프로시저 실행
        df = pd.read_sql(query, conn)  # 데이터프레임으로 변환
        return df.values  # numpy 배열로 반환
    except Exception as e:
        print(f"Error fetching data: {e}")
        return np.array([])

# 저장된 모델 로드
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# PRealAandB 데이터 불러오기 (예측용 데이터)
data = fetch_data_from_db("PRealAandB")  # PRealAandB 저장 프로시저 호출
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# 데이터 준비
# 3~5열은 입력값(features), 2열은 실제값(target), 1열은 날짜/시간(버림)
features = data[:, 2:5]  # 3~5열 (입력값)
actual_value = data[0, 1]  # 2열 (실제값)

# 예측 수행
predicted_value = model.predict(features)[0]  # 예측값
print(f"Predicted value for column 2: {predicted_value}")
print(f"Actual value for column 2: {actual_value}")

# 시각화: 예측값 vs 실제값
plt.figure(figsize=(8, 6))

# 예측값과 실제값 시각화
plt.bar(["Predicted", "Actual"], [predicted_value, actual_value], color=['blue', 'red'], alpha=0.7)
plt.title("Predicted vs Actual Value for Column 2")
plt.ylabel("Value")
plt.grid(axis='y')

# 오차 표시
error = np.abs(predicted_value - actual_value)
plt.text(0, predicted_value, f"Pred: {predicted_value:.2f}", ha='center', va='bottom')
plt.text(1, actual_value, f"Actual: {actual_value:.2f}", ha='center', va='bottom')
plt.text(0.5, max(predicted_value, actual_value) + 0.1, f"Error: {error:.2f}", ha='center', color='black')

plt.show()

# 정확도 계산
max_possible_value = max(predicted_value, actual_value)
error_score = 100 - (error / max_possible_value * 100)
print(f"Accuracy Score: {error_score:.2f}/100")
코드 설명
DB에서 PRealAandB 데이터 불러오기:

MSSQL 저장 프로시저 PRealAandB를 호출하여 데이터를 가져옵니다.
데이터 형식:
1열: 날짜/시간(버림).
2열: 실제값(목표값).
3~5열: 입력값(특징값).
모델 로드 및 예측 수행:

이전에 저장한 최적 모델(best_model.pkl)을 로드합니다.
3~5열 데이터를 입력값으로 사용하여 2열 값을 예측합니다.
결과 시각화:

예측값 vs 실제값: 막대 그래프로 비교.
오차: 예측값과 실제값 차이를 막대 위에 표시.
정확도 계산:

최대값을 기준으로 100점 만점의 정확도를 계산:
정확도
=
100
−
오차
최대값
×
100
정확도=100− 
최대값
오차
​
 ×100
결과
막대 그래프:

파란색: 예측된 2열 값.
빨간색: 실제 2열 값.
막대 위에 예측값, 실제값, 오차 표시.
정확도 출력:

예측값과 실제값의 오차를 기반으로 100점 만점의 정확도를 출력.
필요 사항
MSSQL 저장 프로시저:

PRealAandB 저장 프로시저는 한 행의 데이터를 반환해야 하며, 데이터 형식은 다음과 같습니다:
1열: 날짜/시간.
2열: 목표값(실제값).
3~5열: 입력값(특징값).
모델 파일:
