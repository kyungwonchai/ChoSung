아, 이해했습니다. 말씀하신 대로 시분초.밀리초 형식의 시간 값을 추출하여, PLAN Selected 행을 만났을 때 **연월일(yyyyMMdd)**과 결합하는 부분을 수정하겠습니다.

목표:
로그 행의 앞부분에 있는 [시분초.밀리초] 값을 추출하여, PLAN Selected 행에서 연월일과 함께 붙여서 전체 시간 값을 생성합니다.
PLAN Selected 행을 만나면 앞부분에 있는 시간값을 사용해 ProductOrderModel의 날짜 필드에 추가합니다.
수정된 함수 (ExtractTimestamp와 ProcessLogLine)
csharp
코드 복사
// 시간값을 추출하는 함수 (시분초.밀리초 형태의 값을 추출)
private string ExtractTimestamp(string line)
{
    // 로그 행의 가장 앞에 [시분초.밀리초] 형태로 존재하는지 확인
    var match = Regex.Match(line, @"\[(\d{2}:\d{2}:\d{2}\.\d{3})");
    if (match.Success)
    {
        return match.Groups[1].Value; // 시간값 반환
    }
    return null; // 시간값이 없을 경우 null 반환
}

// 로그 파일의 각 줄을 처리하는 메소드
private void ProcessLogLine(string line, string filePath)
{
    string fileName = Path.GetFileNameWithoutExtension(filePath);
    string dayString = fileName.Substring(fileName.Length - 2); // 파일 이름의 마지막 두 글자를 날짜로 사용
    string currentYearMonth = DateTime.Now.ToString("yyyyMM");  // 현재 연도와 월을 yyyyMM 형식으로 가져옴
    string fullDate = currentYearMonth + dayString; // yyyyMMdd 형식으로 날짜 조합

    // 시간값을 추출
    string timestamp = ExtractTimestamp(line);

    // PLAN Selected 감지 시 처리
    if (line.Contains("PLAN Selected"))
    {
        var splitLine = line.Split(' ');
        string productOrder = splitLine[1]; // 주문 번호 추출

        if (timestamp != null)
        {
            // 시분초.밀리초 값이 존재하면 연월일과 결합하여 최종 시간 생성
            string fullDateTime = fullDate + " " + timestamp;

            msgvs.Instance.LogT2($"FileCheckerMES20: PLAN Selected 감지 (주문 번호: {productOrder}, 시간: {fullDateTime})");

            // 새로운 주문이거나 다른 주문일 경우 처리
            if (_currentProductOrder == null || _currentProductOrder.ProductOrder != productOrder)
            {
                _currentProductOrder = new ProductOrderModel
                {
                    ProductOrder = productOrder,
                    PDate = fullDateTime, // yyyyMMdd HH:mm:ss.밀리초 형식으로 날짜 설정
                    POStatus = "wait" // 주문 상태를 "대기(wait)"로 설정
                };

                // ProductOrderModel 추가
                _productOrders.Add(_currentProductOrder);

                // 로그: 새로운 주문 추가 및 UI 갱신
                msgvs.Instance.LogT2($"FileCheckerMES20: 새로운 주문 추가 -> 주문 번호: {productOrder}");
                msgvs.Instance.LogT2("FileCheckerMES20: 표를 갱신합니다.");
            }
        }

        _lastPlanSelectedDate = DateTime.Now;
    }
    // 나머지 로그 처리
    else if (line.Contains("BasicModel") && _currentProductOrder != null)
    {
        var modelData = line.Split(':')[1].Trim();
        _currentProductOrder.BasicModel = modelData;
        msgvs.Instance.LogT2($"FileCheckerMES20: BasicModel 처리 -> {modelData}");
    }
    else if (line.Contains("MB^") && _currentProductOrder != null)
    {
        var mbData = line.Split('^');
        _currentProductOrder.PORemain = int.Parse(mbData[1]);
        _currentProductOrder.MGCount = int.Parse(mbData[2]);
        msgvs.Instance.LogT2($"FileCheckerMES20: MB^ 처리 -> 잔여 수량: {_currentProductOrder.PORemain}, 매거진 수량: {_currentProductOrder.MGCount}");
    }
    else if (line.Contains("JB^") && _currentProductOrder != null)
    {
        _currentProductOrder.PCount++;
        msgvs.Instance.LogT2($"FileCheckerMES20: JB^ 처리 -> 생산된 제품 개수: {_currentProductOrder.PCount}");
    }
    else if (line.Contains("FNL^") && _currentProductOrder != null)
    {
        _currentProductOrder.POStatus = "stack";
        msgvs.Instance.LogT2($"FileCheckerMES20: FNL^ 처리 -> 상태: {_currentProductOrder.POStatus}");
    }
    else if (line.Contains("JD^") && _currentProductOrder != null)
    {
        _currentProductOrder.POStatus = "out";
        ExecuteOutFunction();
        msgvs.Instance.LogT2($"FileCheckerMES20: JD^ 처리 -> 상태: {_currentProductOrder.POStatus}");
    }
}
주요 변경 사항:
ExtractTimestamp 함수:

로그 행의 시분초.밀리초 형태의 시간값을 추출하는 함수입니다.
정규식을 사용하여 **[00:00:00.000]**와 같은 형태의 시간 값을 찾아 반환합니다.
ProcessLogLine 수정:

PLAN Selected 행을 만났을 때, 시분초.밀리초 값과 연월일을 결합하여 최종 시간 값을 생성합니다.
그 값을 **ProductOrderModel.PDate**에 설정합니다.
이제 **PLAN Selected**가 검출되었을 때, 시분초.밀리초 값을 **연월일(yyyyMMdd)**과 결합하여 최종 날짜와 시간을 ProductOrderModel에 반영하고, 실시간으로 갱신할 수 있습니다