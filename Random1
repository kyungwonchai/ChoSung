알겠습니다. 로컬 static/image1 폴더에 img1.jpg, img2.jpg, ..., img5.jpg (또는 다른 확장자)와 같이 이미지를 저장해두고 이를 사용하도록 코드를 수정하겠습니다.

Flask에서 로컬 정적 파일(이미지, CSS, JS 파일 등)을 사용하려면, 기본적으로 애플리케이션 루트에 static이라는 폴더를 만들고 그 안에 파일을 위치시켜야 합니다. 그리고 템플릿에서는 url_for('static', filename='경로/파일명')을 사용하여 해당 파일의 URL을 생성합니다.

1. 프로젝트 폴더 구조 변경:

다음과 같이 static 폴더를 만들고 그 안에 image1 폴더를, 다시 그 안에 이미지 파일들을 위치시킵니다. (파일 확장자는 .jpg로 가정했지만, .png, .gif 등 실제 파일에 맞게 조정하세요.)

flask_auto_row_height/
├── app.py
├── static/                  <-- 새 폴더
│   └── image1/              <-- 새 폴더
│       ├── img1.jpg         <-- 사용자 이미지
│       ├── img2.jpg
│       ├── img3.jpg
│       ├── img4.jpg
│       └── img5.jpg
└── templates/
    └── index.html
2. app.py 수정 (로컬 이미지 URL 사용)

url_for 함수를 임포트하고, 데이터의 image_url 부분을 url_for를 사용하여 동적으로 생성하도록 변경합니다.

Python

from flask import Flask, render_template, url_for # url_for 임포트

app = Flask(__name__)

@app.route('/')
def index():
    # 샘플 데이터 - 이미지 이름을 포함하도록 수정
    # 실제 파일 확장자에 맞게 .jpg, .png 등을 조정하세요.
    items_data = [
        {
            "id": 1,
            "name": "John Doe",
            "description": "This is a short description.",
            "image_filename": "img1.jpg" # 이미지 파일 이름
        },
        {
            "id": 2,
            "name": "Jane Smith",
            "description": "This is a medium-length description. It might span multiple lines if the content is long enough to wrap.",
            "image_filename": "img2.jpg"
        },
        {
            "id": 3,
            "name": "Peter Jones",
            "description": "This item requires a very long description. If the text is extensive, it should automatically wrap to fit within the cell, and explicitly entered\nnew lines\nlike this one\nshould also be respected.\nThe content will be displayed across multiple lines.\nThis is the last line.",
            "image_filename": "img3.jpg"
        },
        {
            "id": 4,
            "name": "Alice Brown",
            "description": "First line.\nSecond line.\nThird line.\n\nFifth line (includes an empty line).",
            "image_filename": "img4.jpg"
        },
        {
            "id": 5,
            "name": "Robert Wilson",
            "description": "All cells in the same row will adjust to the height of the cell with the most content.",
            "image_filename": "img5.jpg"
        }
    ]

    # 각 아이템 데이터에 image_url 추가
    processed_data = []
    for item in items_data:
        if item.get("image_filename"):
            # 'static' 엔드포인트를 사용하고, filename에 'image1/실제파일명' 형태로 전달
            item["image_url"] = url_for('static', filename=f'image1/{item["image_filename"]}')
        else:
            item["image_url"] = None # 또는 기본 이미지 URL
        processed_data.append(item)

    return render_template('index.html', table_data=processed_data)

if __name__ == '__main__':
    app.run(debug=True)
설명:

url_for 함수를 flask로부터 임포트했습니다.
items_data 리스트의 각 딕셔너리에 image_filename 키를 추가하여 이미지 파일의 실제 이름을 저장합니다. (예: img1.jpg)
중요: static/image1/ 폴더 안에 img1.jpg, img2.jpg 등의 파일이 실제로 존재해야 합니다. 파일 확장자가 다르면 (예: img1.png) image_filename 값도 그에 맞게 수정해야 합니다 ("img1.png").
processed_data 리스트를 만들어 각 아이템에 대해 image_url을 url_for('static', filename=f'image1/{item["image_filename"]}')을 통해 생성합니다.
f'image1/{item["image_filename"]}' 부분은 static 폴더 내의 경로를 지정합니다. (예: static/image1/img1.jpg)
3. templates/index.html (변경 없음)

index.html 파일은 {{ row.image_url }} 부분을 그대로 사용하므로 변경할 필요가 없습니다. Flask의 app.py에서 image_url 값을 올바르게 생성하여 전달해주기 때문입니다.

HTML

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Auto Row Height Table with Image Modal</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            table-layout: fixed;
        }
        th, td {
            border: 1px solid #ccc;
            padding: 5px; /* Reduced padding for tighter fit */
            text-align: left;
            vertical-align: top;
            word-wrap: break-word;
            overflow-wrap: break-word;
        }
        th {
            background-color: #f2f2f2;
        }
        td.description-cell {
            white-space: pre-wrap;
        }
        .thumbnail-image {
            max-width: 80px; /* Max width for thumbnails */
            max-height: 80px; /* Max height for thumbnails */
            height: auto;
            cursor: pointer;
            display: block; /* To prevent extra space below image if cell is taller */
            background-color: #f0f0f0; /* Add a light background for images */
            object-fit: cover; /* Ensures the image covers the area, might crop */
        }

        /* Modal Styles */
        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1000; /* Sit on top */
            padding-top: 50px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.85); /* Black w/ opacity */
        }
        .modal-content {
            margin: auto;
            display: block;
            max-width: 80%;
            max-height: 80vh; /* Max height relative to viewport height */
        }
        .modal-caption {
            margin: 15px auto;
            display: block;
            width: 80%;
            max-width: 700px;
            text-align: center;
            color: #ccc;
            padding: 10px 0;
            height: 50px; /* Fixed height for caption area */
        }
        .close-button {
            position: absolute;
            top: 15px;
            right: 35px;
            color: #f1f1f1;
            font-size: 40px;
            font-weight: bold;
            transition: 0.3s;
        }
        .close-button:hover,
        .close-button:focus {
            color: #bbb;
            text-decoration: none;
            cursor: pointer;
        }
    </style>
</head>
<body>

    <h1>Flask Table (Auto Row Height with Image Modal)</h1>

    <table id="myTable">
        <thead>
            <tr>
                <th style="width: 5%;">ID</th>
                <th style="width: 15%;">Name</th>
                <th style="width: 15%;">Image</th>
                <th style="width: 65%;">Description</th>
            </tr>
        </thead>
        <tbody>
            {% for row in table_data %}
            <tr>
                <td>{{ row.id }}</td>
                <td>{{ row.name }}</td>
                <td>
                    {% if row.image_url %}
                    <img src="{{ row.image_url }}" alt="Image for {{ row.name }}" class="thumbnail-image" data-title="{{ row.name }}">
                    {% else %}
                    <span>No image</span>
                    {% endif %}
                </td>
                <td class="description-cell">{{ row.description }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    <div id="imageModal" class="modal">
        <span class="close-button">&times;</span>
        <img class="modal-content" id="modalImage">
        <div id="modalCaption" class="modal-caption"></div>
    </div>

    <script>
        function adjustRowHeights() {
            const table = document.getElementById('myTable');
            if (!table) return;

            const tbody = table.getElementsByTagName('tbody')[0];
            if (!tbody) return;

            const rows = tbody.getElementsByTagName('tr');

            for (let i = 0; i < rows.length; i++) {
                const row = rows[i];
                row.style.height = 'auto';

                let maxHeight = 0;
                const cells = row.getElementsByTagName('td');

                for (let j = 0; j < cells.length; j++) {
                    const cell = cells[j];
                    cell.style.height = 'auto';
                    
                    // Check for image inside the cell and ensure it's loaded for height calculation
                    const imgInCell = cell.querySelector('img.thumbnail-image');
                    if (imgInCell && !imgInCell.complete) {
                        // If image not loaded, skip accurate height for now, rely on CSS or re-run later
                        // For simplicity, we assume 'load' event on window handles this.
                        // More complex scenarios might need individual image load listeners.
                    }

                    if (cell.scrollHeight > maxHeight) {
                        maxHeight = cell.scrollHeight;
                    }
                }
                
                if (maxHeight > 0) {
                    for (let j = 0; j < cells.length; j++) {
                         cells[j].style.height = maxHeight + 'px';
                    }
                }
            }
        }

        // Modal Get Elements
        const modal = document.getElementById("imageModal");
        const modalImg = document.getElementById("modalImage");
        const captionText = document.getElementById("modalCaption");
        const closeButton = document.getElementsByClassName("close-button")[0];

        // Function to open modal
        function openModal(element) {
            modal.style.display = "block";
            modalImg.src = element.src; 
            captionText.innerHTML = element.dataset.title || element.alt; 
        }

        const thumbnails = document.querySelectorAll(".thumbnail-image");
        thumbnails.forEach(thumb => {
            thumb.addEventListener('click', function() {
                openModal(this);
            });
        });

        if(closeButton) {
            closeButton.onclick = function() {
                modal.style.display = "none";
            }
        }

        window.onclick = function(event) {
            if (event.target == modal) {
                modal.style.display = "none";
            }
        }

        window.addEventListener('load', function() {
            adjustRowHeights();
            // Re-attach event listeners if content was dynamically added after initial load
            // (not strictly necessary for this example as images are part of initial render)
            const currentThumbnails = document.querySelectorAll(".thumbnail-image");
            currentThumbnails.forEach(thumb => {
                if (!thumb.dataset.listenerAttached) { // Simple flag to avoid multiple listeners
                    thumb.addEventListener('click', function() {
                        openModal(this);
                    });
                    thumb.dataset.listenerAttached = 'true';
                }
            });
        });
        
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function() {
                adjustRowHeights();
            }, 150);
        });
    </script>

</body>
</html>
실행 전 준비:

flask_auto_row_height 폴더 내에 static 폴더를 만듭니다.
static 폴더 내에 image1 폴더를 만듭니다.
static/image1/ 폴더 안에 img1.jpg, img2.jpg, img3.jpg, img4.jpg, img5.jpg 파일을 넣어주세요. (파일명과 확장자는 app.py의 image_filename 값과 일치해야 합니다.)