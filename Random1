 같이 ProcessRecentFiles 함수를 수정하여, 최근 20개의 파일을 과거 순서로 처리하고, 마지막 파일의 시간을 **_lastProcessedTime**에 갱신하도록 하겠습니다.

수정된 ProcessRecentFiles 함수
csharp
코드 복사
/// <summary>
/// 첫 실행 시 백업 폴더에서 최근 20개의 파일을 완료 처리
/// </summary>
private void ProcessRecentFiles()
{
    try
    {
        // 백업 폴더의 파일 목록에서 최근 20개 파일을 날짜 기준으로 가져오기 (오름차순 정렬)
        var recentFiles = Directory.GetFiles(_backupDirectory, "*.txt")
                                   .OrderBy(f => File.GetLastWriteTime(f))  // 과거 파일이 먼저 처리되도록 오름차순
                                   .Take(20);

        foreach (var file in recentFiles)
        {
            // 파일을 완료 처리
            Console.WriteLine($"Processing recent file (completed): {file}");
            CompleteFile(file);
        }

        // 마지막으로 처리된 파일의 시간을 기록 (가장 최근 파일의 시간으로 설정)
        _lastProcessedTime = recentFiles.Any() ? File.GetLastWriteTime(recentFiles.Last()) : DateTime.MinValue;
        Console.WriteLine($"_lastProcessedTime updated to: {_lastProcessedTime}");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error processing recent files: {ex.Message}");
    }
}
수정 사항 설명:
과거 순서로 처리: OrderBy(f => File.GetLastWriteTime(f))를 사용하여 오름차순(과거부터) 정렬 후 파일을 처리합니다.
마지막 처리된 파일 시간 갱신: 처리한 파일 중 가장 최근 파일의 시간을 **_lastProcessedTime**에 기록합니다. 이는 그 이후 파일 감지에 사용됩니다.
파일 완료 처리: 각 파일은 **CompleteFile(file)**로 처리되며, Console.WriteLine으로 처리된 파일과 시간을 출력합니다.
이 수정된 함수는 첫 실행 시 과거 20개의 파일을 차례대로 완료 처리하고, 마지막 파일의 시간을 기준으로 이후 새로운 파일을 감지합니