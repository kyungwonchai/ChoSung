ress WPF GridControl의 컬럼 설정을 위한 별도의 윈도우를 구현하는 데 필요한 전체 코드를 아래에 제공합니다. 이 코드는 설정 윈도우에서 GridControl의 컬럼 순서와 가시성을 변경할 수 있게 해주며, 이 변경 사항은 메인 윈도우의 GridControl에 반영됩니다.

먼저, GridControl의 컬럼 정보를 저장할 ColumnInfo 클래스를 정의합니다:

csharp
Copy code
public class ColumnInfo
{
    public string Header { get; set; }
    public bool IsVisible { get; set; }
    public int DisplayIndex { get; set; }
}
설정 윈도우의 XAML(ColumnOrderingWindow.xaml)은 다음과 같습니다:

xml
Copy code
<Window x:Class="ColumnOrderingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Column Order" Height="300" Width="200">
    <ListBox x:Name="ListBoxColumns" AllowDrop="True" PreviewMouseMove="ListBoxColumns_PreviewMouseMove" Drop="ListBoxColumns_Drop">
        <ListBox.ItemTemplate>
            <DataTemplate>
                <StackPanel Orientation="Horizontal">
                    <CheckBox IsChecked="{Binding IsVisible}" Content="{Binding Header}"/>
                </StackPanel>
            </DataTemplate>
        </ListBox.ItemTemplate>
    </ListBox>
</Window>
설정 윈도우의 코드 비하인드(ColumnOrderingWindow.xaml.cs)는 다음과 같습니다:

csharp
Copy code
public partial class ColumnOrderingWindow : Window
{
    public ObservableCollection<ColumnInfo> ColumnsInfo { get; set; }

    public ColumnOrderingWindow(IEnumerable<ColumnInfo> columns)
    {
        InitializeComponent();
        ColumnsInfo = new ObservableCollection<ColumnInfo>(columns);
        ListBoxColumns.ItemsSource = ColumnsInfo;
    }

    private void ListBoxColumns_PreviewMouseMove(object sender, MouseEventArgs e)
    {
        if (e.LeftButton == MouseButtonState.Pressed)
        {
            ListBoxItem draggedItem = FindAncestor<ListBoxItem>((DependencyObject)e.OriginalSource);
            if (draggedItem != null)
            {
                DragDrop.DoDragDrop(draggedItem, draggedItem.DataContext, DragDropEffects.Move);
            }
        }
    }

    private void ListBoxColumns_Drop(object sender, DragEventArgs e)
    {
        ColumnInfo droppedData = e.Data.GetData(typeof(ColumnInfo)) as ColumnInfo;
        ColumnInfo target = ((ListBoxItem)(sender)).DataContext as ColumnInfo;

        int removedIdx = ListBoxColumns.Items.IndexOf(droppedData);
        int targetIdx = ListBoxColumns.Items.IndexOf(target);

        if (removedIdx < targetIdx)
        {
            ColumnsInfo.Insert(targetIdx + 1, droppedData);
            ColumnsInfo.RemoveAt(removedIdx);
        }
        else
        {
            int remIdx = removedIdx + 1;
            if (ColumnsInfo.Count + 1 > remIdx)
            {
                ColumnsInfo.Insert(targetIdx, droppedData);
                ColumnsInfo.RemoveAt(remIdx);
            }
        }
    }

    // Helper to search up the VisualTree
    private static T FindAncestor<T>(DependencyObject current) where T : DependencyObject
    {
        do
        {
            if (current is T)
            {
                return (T)current;
            }
            current = VisualTreeHelper.GetParent(current);
        }
        while (current != null);
        return null;
    }
}
메인 윈도우에서 설정 윈도우를 호출하고 변경 사항을 적용하는 부분(MainWindow.xaml.cs)은 다음과 같습니다:

csharp
Copy code
private void OpenColumnOrderingWindow_Click(object sender, RoutedEventArgs e)
{
    var columnsInfo = gridControl1.Columns
        .Select(c => new ColumnInfo
        {
            Header = c.Header.ToString(),
            IsVisible = c.Visible,
            DisplayIndex = c.VisibleIndex
        })
        .OrderBy(c => c.DisplayIndex).ToList();

    var columnOrderingWindow = new ColumnOrderingWindow(columnsInfo);
    if (columnOrderingWindow.ShowDialog() == true)
    {
        // 설정 윈도우에서 받은 변경 사항을 GridControl에 반영
        foreach (var colInfo in columnOrderingWindow.ColumnsInfo)
        {
            var column = gridControl1.Columns.FirstOrDefault(c => c.Header.ToString() == colInfo.Header);
            if (column != null)
            {
                column.Visible = colInfo.IsVisible;
                column.VisibleIndex = columnOrderingWindow.ColumnsInfo.IndexOf(colInfo);
            }
        }
    }
}
MainWindow.xaml의 버튼 클릭 이벤트를 설정 윈도우를 여는 코드로 연결합니다:

xml
Copy code
<Button Content="Configure Columns" Click="OpenColumnOrderingWindow_Click"/>
이 코드는 메인 윈도우의 GridControl 컬럼 설정을 사용자가 조작할 수 있는 별도의 설정 윈도우를 통해 변경할 수 있게 해줍니다. 설정 윈도우에서의 드래그 앤 드롭과 체크박스 변경 사항은 메인 윈도우의 GridControl에 반