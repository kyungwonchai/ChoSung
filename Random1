이 문제를 해결하기 위해, 먼저 각 상태에 맞는 배경색을 설정하고, 상태가 명확하게 나타나도록 Status 필드와 배경색을 조정하겠습니다.

수정 사항:
Status: Pending, Processing, Completed, Failed, Retrying 등의 상태로 작업 진행 상황을 표시합니다.
배경색:
Processing 상태일 때 하늘색으로 표시.
Retrying 상태일 때도 명확히 상태가 보이도록 표시.
나머지 에러나 실패한 상태는 이미 처리한 대로 배경을 노란색으로 처리합니다.
CommandItem 클래스 수정
csharp
코드 복사
public class CommandItem
{
    public string CommandText { get; set; } // 명령 텍스트
    public string Status { get; set; } // 명령 상태 (Pending, Processing, Completed, Failed, Retrying 등)
    public int RetryCount { get; set; } // 재시도 횟수
    public int MaxRetryLimit { get; set; } // 최대 재시도 횟수
    public int ResponseTime { get; set; } // 응답 시간
    public string CommandTime { get; set; } // 명령이 추가된 시간 (yyMMdd HH:mm:ss.fff)
    public string Output { get; set; } // 명령의 결과 또는 응답

    // 명령의 결과를 문자열로 처리
    private int _result;
    public int Result
    {
        get => _result;
        set
        {
            _result = value;
            ResultText = _result == 0 ? "Error" : "OK"; // 0이면 "Error", 1이면 "OK"로 변환
        }
    }

    // 에러 상태를 텍스트로 저장
    public string ResultText { get; private set; } // 에러 상태 텍스트
}
EnqueueTask 함수에서 Status 변경
상태를 더 명확하게 표시하기 위해 Status 값을 적절한 시점마다 변경해줍니다.

csharp
코드 복사
commandQueue.Enqueue(async () =>
{
    newCommand.Status = "Processing"; // 처리 중일 때 상태를 "Processing"으로 설정
    int retryCount = 0;
    Stopwatch stopwatch = new Stopwatch();

    _isProcessing = true;

    while (retryCount < RetryLimit)
    {
        try
        {
            stopwatch.Restart();
            string result = await taskFunc();
            stopwatch.Stop();

            int responseTime = (int)stopwatch.ElapsedMilliseconds;
            newCommand.ResponseTime = responseTime;
            newCommand.RetryCount = retryCount;

            if (responseTime > ResponseTimeout)
            {
                newCommand.Status = "Timeout"; // 응답 시간이 초과될 때 상태를 "Timeout"으로 변경
                ShowAlarm("Timeout occurred. All tasks stopped.");
                newCommand.Result = 0;
                await _dbHelper.LogCommandToDatabase(commandText, sentCommand, "Timeout", "Failed", newCommand.Result, retryCount, responseTime, "Response Timeout");
                StopQueueProcessing(newCommand);
                return new CommandResult { Success = false, Message = "Response Timeout" };
            }

            if (responseValidator(result))
            {
                newCommand.Status = "Completed"; // 성공 시 "Completed"로 상태 변경
                newCommand.Result = 1;
                await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, newCommand.Output);
                UpdateProgress();
                _isProcessing = false;
                return new CommandResult { Success = true, Message = result };
            }
            else
            {
                retryCount++;
                newCommand.Status = $"Retrying {retryCount}/{RetryLimit}"; // 재시도 중일 때 상태를 "Retrying"으로 변경
                ShowAlarm($"Retrying {retryCount}/{RetryLimit} due to incorrect response.");

                if (retryCount >= RetryLimit)
                {
                    newCommand.Status = "Failed"; // 재시도 실패 시 "Failed"로 변경
                    newCommand.Result = 0;
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Failed", newCommand.Result, retryCount, responseTime, result);
                    ShowAlarm("Queue has been stopped over retry count.");
                    StopQueueProcessing(newCommand);
                    return new CommandResult { Success = false, Message = result };
                }

                await Task.Delay(RetryInterval);
            }
        }
        catch (Exception ex)
        {
            newCommand.Status = "Failed"; // 예외 발생 시 "Failed"로 변경
            newCommand.Result = 0;
            stopwatch.Stop();
            int responseTime = (int)stopwatch.ElapsedMilliseconds;

            newCommand.ResponseTime = responseTime;
            await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);
            ShowAlarm("Error occurred. All tasks stopped.");
            StopQueueProcessing(newCommand);
            return new CommandResult { Success = false, Message = ex.Message };
        }
    }

    UpdateProgress();
    _isProcessing = false;
    return new CommandResult { Success = false };
});
DataGrid 수정 사항
배경색을 상태에 따라 동적으로 변경하도록 설정합니다. Processing 상태는 하늘색, Retrying 상태는 명확히 표시하도록 처리하고, 나머지는 이미 처리된 노란색 배경을 유지합니다.

xml
코드 복사
<DataGrid Grid.Row="0" Grid.Column="0" ItemsSource="{Binding CommandQueue.RemainingCommands}" AutoGenerateColumns="False" Margin="10">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Command" Binding="{Binding CommandText}" Width="200"/>
        <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100"/>
        <DataGridTextColumn Header="Retry Count" Binding="{Binding RetryCount}" Width="100"/>
        <DataGridTextColumn Header="Response Time" Binding="{Binding ResponseTime}" Width="100"/>
        <DataGridTextColumn Header="Error Status" Binding="{Binding ResultText}" Width="100"/>
        <DataGridTextColumn Header="Time" Binding="{Binding CommandTime}" Width="150"/>
    </DataGrid.Columns>

    <DataGrid.RowStyle>
        <Style TargetType="DataGridRow">
            <Style.Triggers>
                <!-- 처리 중인 작업은 하늘색 배경 -->
                <DataTrigger Binding="{Binding Status}" Value="Processing">
                    <Setter Property="Background" Value="LightBlue"/>
                </DataTrigger>

                <!-- 재시도 중인 작업은 별도로 표시 -->
                <DataTrigger Binding="{Binding Status}" Value="Retrying 1/3">
                    <Setter Property="Background" Value="LightCoral"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Status}" Value="Retrying 2/3">
                    <Setter Property="Background" Value="LightCoral"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Status}" Value="Retrying 3/3">
                    <Setter Property="Background" Value="LightCoral"/>
                </DataTrigger>

                <!-- 에러 발생 시 배경을 노란색으로 설정 -->
                <DataTrigger Binding="{Binding ResultText}" Value="Error">
                    <Setter Property="Background" Value="Yellow"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </DataGrid.RowStyle>
</DataGrid>
요약
Status 값 수정: 각 상태에 맞게 Pending, Processing, Completed, Retrying, Failed 등으로 표시되며, Retrying 시 재시도 횟수가 표시됩니다.
배경색 처리:
Processing 상태는 하늘색으로 배경 표시.
Retrying 상태는 LightCoral로 배경색 처리.
Error 상태는 이미 설정한 대로 노란색.
Pending 상태는 큐에 들어가 있지만 아직 실행되지 않은 상태입니다. Pending이 표시되는 것은 작업이 실행 대기 상태임을 의미합니다. P