서 센서 값을 읽고, MVVM 패턴을 사용하여 UI에서 해당 값을 바탕으로 **Ellipse(램프)**의 색상을 변경하는 방법을 제시해 드리겠습니다. 뷰모델을 통해 PLC의 값을 가져와 UI에 반영하는 방식으로 진행합니다.

단계별 해결 방법
PLC의 센서 값을 읽어와서(R520, R521, R522) 그 값을 바탕으로 색상을 설정합니다.
MVVM 패턴을 사용하여 뷰모델에서 센서 상태를 관리하고, 해당 상태에 따라 색상을 변경합니다.
UI 바인딩을 통해 Ellipse의 색상이 동적으로 변하도록 설정합니다.
1. MainViewModel.cs (뷰모델)
뷰모델에서 PLC의 센서 값을 읽어서 UI에서 바인딩된 값에 따라 색상을 변경합니다.

csharp
코드 복사
using System.ComponentModel;
using System.Windows.Media;

public class MainViewModel : INotifyPropertyChanged
{
    private ComportManager comportManager;

    // 센서 상태에 따라 램프 색상을 나타내는 속성
    private Brush _sensorLamp1Color;
    private Brush _sensorLamp2Color;
    private Brush _sensorLamp3Color;

    public Brush SensorLamp1Color
    {
        get { return _sensorLamp1Color; }
        set
        {
            _sensorLamp1Color = value;
            OnPropertyChanged(nameof(SensorLamp1Color));
        }
    }

    public Brush SensorLamp2Color
    {
        get { return _sensorLamp2Color; }
        set
        {
            _sensorLamp2Color = value;
            OnPropertyChanged(nameof(SensorLamp2Color));
        }
    }

    public Brush SensorLamp3Color
    {
        get { return _sensorLamp3Color; }
        set
        {
            _sensorLamp3Color = value;
            OnPropertyChanged(nameof(SensorLamp3Color));
        }
    }

    public MainViewModel()
    {
        comportManager = ComportManager.GetInstance();
        UpdateSensorStates();
    }

    // PLC에서 센서 상태를 주기적으로 읽어옴
    private async void UpdateSensorStates()
    {
        while (true)
        {
            // PLC에서 R520, R521, R522의 값을 읽음
            string sensor1Value = await comportManager.ReadRegisterAsync("R520");
            string sensor2Value = await comportManager.ReadRegisterAsync("R521");
            string sensor3Value = await comportManager.ReadRegisterAsync("R522");

            // 센서 값에 따라 색상 변경 (1: 빨강, 0: 녹색)
            SensorLamp1Color = sensor1Value == "1" ? Brushes.Red : Brushes.Green;
            SensorLamp2Color = sensor2Value == "1" ? Brushes.Red : Brushes.Green;
            SensorLamp3Color = sensor3Value == "1" ? Brushes.Red : Brushes.Green;

            await Task.Delay(1000); // 1초마다 갱신
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
2. MainWindow.xaml (UI)
UI에서는 Ellipse의 Fill 속성을 뷰모델의 속성과 바인딩하여 색상이 동적으로 변할 수 있도록 설정합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Sensor Monitoring" Height="400" Width="600">

    <Grid>
        <!-- 첫 번째 센서 (R520) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="10,320,0,0">
            <TextBlock Text="Sensor 1 (R520)" HorizontalAlignment="Center"/>
            <Ellipse Width="30" Height="30" Fill="{Binding SensorLamp1Color}" />
        </StackPanel>

        <!-- 두 번째 센서 (R521) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="170,320,0,0">
            <TextBlock Text="Sensor 2 (R521)" HorizontalAlignment="Center"/>
            <Ellipse Width="30" Height="30" Fill="{Binding SensorLamp2Color}" />
        </StackPanel>

        <!-- 세 번째 센서 (R522) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="330,320,0,0">
            <TextBlock Text="Sensor 3 (R522)" HorizontalAlignment="Center"/>
            <Ellipse Width="30" Height="30" Fill="{Binding SensorLamp3Color}" />
        </StackPanel>
    </Grid>
</Window>
3. ComportManager.cs (PLC 통신)
ComportManager는 PLC와 통신하여 센서 값을 읽는 역할을 합니다. 여기서는 비동기적으로 센서 값을 읽어오는 메서드를 사용합니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class ComportManager
{
    private static ComportManager _instance;
    private SerialPort _serialPort;

    private ComportManager()
    {
        _serialPort = new SerialPort("COM1", 9600, Parity.None, 8, StopBits.One);
        _serialPort.Open();
    }

    public static ComportManager GetInstance()
    {
        if (_instance == null)
            _instance = new ComportManager();
        return _instance;
    }

    // 비동기적으로 PLC 레지스터 값을 읽음
    public async Task<string> ReadRegisterAsync(string registerAddress)
    {
        // 명령어 전송 및 응답 처리 (예시)
        string command = $"%01#RDD{registerAddress}**\n";
        byte[] buffer = Encoding.ASCII.GetBytes(command);
        _serialPort.Write(buffer, 0, buffer.Length);

        // 응답 받기
        byte[] readBuffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream.ReadAsync(readBuffer, 0, readBuffer.Length);

        // 응답 처리
        string response = Encoding.ASCII.GetString(readBuffer, 0, bytesRead);
        return ParseResponse(response);
    }

    // 응답을 처리하여 값을 추출
    private string ParseResponse(string response)
    {
        if (response.StartsWith("%01$RD"))
        {
            return response.Substring(6, 1); // 응답에서 센서 값을 추출
        }
        return "0"; // 기본값
    }
}
전체 설명
뷰모델(MainViewModel):

PLC에서 R520, R521, R522 값을 1초마다 주기적으로 읽습니다.
센서 값이 1이면 빨간색, 0이면 녹색으로 설정합니다.
Brush 타입 속성(SensorLamp1Color, SensorLamp2Color, SensorLamp3Color)을 통해 UI의 Ellipse 색상을 변경합니다.
UI(MainWindow.xaml):

뷰모델의 SensorLamp1Color, SensorLamp2Color, SensorLamp3Color 속성과 바인딩하여, 센서 값에 따라 UI의 램프 색상이 변경됩니다.
PLC 통신(ComportManager):

ReadRegisterAsync 메서드를 사용하여 PLC의 레지스터 값을 읽습니다.
센서 값은 ASCII 형식으로 처리하여 뷰모델에 전달됩니다.
결론
이 코드로 PLC 센서 값을 실시간으로 읽어와서 MVVM 패턴을 통해 램프의 색상을 변경할 수 있습