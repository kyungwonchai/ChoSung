알겠습니다. 즐겨찾기 관리를 위한 간단한 HTML 페이지를 만들어 드릴게요. 이 페이지는 로컬 스토리지를 사용하여 데이터를 저장하므로, 본인만 사용할 수 있고 별도의 서버 설정이 필요 없습니다.

다음은 HTML, CSS, JavaScript 코드로 구성된 단일 HTML 파일입니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>나만의 즐겨찾기</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            background-color: #fff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #333;
        }
        input[type="text"], input[type="url"] {
            width: calc(50% - 22px);
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }
        input[type="text"]:first-of-type {
            margin-right: 10px;
        }
        button {
            padding: 10px 15px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-right: 5px;
        }
        button:hover {
            background-color: #0056b3;
        }
        .toggle-button {
            background-color: #28a745;
            margin-bottom: 20px;
        }
        .toggle-button:hover {
            background-color: #1e7e34;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 12px;
            text-align: left;
        }
        th {
            background-color: #f0f0f0;
        }
        .actions button {
            padding: 6px 10px;
            font-size: 0.9em;
        }
        .delete-button {
            background-color: #dc3545;
        }
        .delete-button:hover {
            background-color: #c82333;
        }
        .edit-button {
            background-color: #ffc107;
            color: #333;
        }
        .edit-button:hover {
            background-color: #e0a800;
        }
        .save-button {
            background-color: #28a745;
        }
        .save-button:hover {
            background-color: #1e7e34;
        }
        .cancel-button {
            background-color: #6c757d;
        }
        .cancel-button:hover {
            background-color: #545b62;
        }
        .bookmarks-list {
            list-style: none;
            padding: 0;
        }
        .bookmarks-list li {
            margin-bottom: 10px;
        }
        .bookmarks-list a {
            text-decoration: none;
            color: #007bff;
            font-size: 1.1em;
            padding: 8px;
            display: block;
            background-color: #e9ecef;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }
        .bookmarks-list a:hover {
            background-color: #dde2e6;
            text-decoration: underline;
        }
        .hidden {
            display: none;
        }
        /* 수정 모드 시 입력 필드 스타일 */
        td input[type="text"], td input[type="url"] {
            width: calc(100% - 10px); /* 패딩 고려 */
            padding: 6px;
            margin-bottom: 0;
        }
    </style>
</head>
<body>

    <div class="container">
        <h1>나만의 즐겨찾기 관리</h1>

        <button id="toggleModeButton" class="toggle-button">수정 모드 켜기</button>

        <div id="addBookmarkFormContainer" class="hidden">
            <h2>새 즐겨찾기 추가</h2>
            <form id="addBookmarkForm">
                <input type="text" id="bookmarkName" placeholder="이름" required>
                <input type="url" id="bookmarkUrl" placeholder="주소 (예: https://www.example.com)" required>
                <button type="submit">추가</button>
            </form>
        </div>

        <div id="bookmarksTableContainer" class="hidden">
            <h2>즐겨찾기 목록 (수정)</h2>
            <table id="bookmarksTable">
                <thead>
                    <tr>
                        <th>이름</th>
                        <th>주소</th>
                        <th>작업</th>
                    </tr>
                </thead>
                <tbody>
                    </tbody>
            </table>
        </div>

        <div id="bookmarksListContainer">
            <h2>즐겨찾기</h2>
            <ul id="bookmarksList" class="bookmarks-list">
                </ul>
        </div>
    </div>

    <script>
        const addBookmarkForm = document.getElementById('addBookmarkForm');
        const bookmarkNameInput = document.getElementById('bookmarkName');
        const bookmarkUrlInput = document.getElementById('bookmarkUrl');
        const bookmarksTableBody = document.querySelector('#bookmarksTable tbody');
        const bookmarksList = document.getElementById('bookmarksList');
        const toggleModeButton = document.getElementById('toggleModeButton');

        const addBookmarkFormContainer = document.getElementById('addBookmarkFormContainer');
        const bookmarksTableContainer = document.getElementById('bookmarksTableContainer');
        const bookmarksListContainer = document.getElementById('bookmarksListContainer');

        let bookmarks = JSON.parse(localStorage.getItem('bookmarks')) || [];
        let isEditMode = false;
        let editingBookmarkId = null; // 현재 수정 중인 북마크의 ID

        function saveBookmarks() {
            localStorage.setItem('bookmarks', JSON.stringify(bookmarks));
        }

        function renderBookmarks() {
            bookmarksTableBody.innerHTML = ''; // 테이블 초기화
            bookmarksList.innerHTML = '';    // 리스트 초기화

            if (bookmarks.length === 0) {
                if (isEditMode) {
                    bookmarksTableBody.innerHTML = '<tr><td colspan="3">즐겨찾기가 없습니다.</td></tr>';
                } else {
                    bookmarksList.innerHTML = '<li>즐겨찾기가 없습니다.</li>';
                }
                return;
            }

            bookmarks.forEach(bookmark => {
                if (isEditMode) {
                    const tr = document.createElement('tr');
                    tr.dataset.id = bookmark.id;

                    if (editingBookmarkId === bookmark.id) {
                        // 수정 중인 행
                        tr.innerHTML = `
                            <td><input type="text" class="edit-name-input" value="${escapeHtml(bookmark.name)}" required></td>
                            <td><input type="url" class="edit-url-input" value="${escapeHtml(bookmark.url)}" required></td>
                            <td class="actions">
                                <button class="save-button" onclick="saveEditedBookmark('${bookmark.id}')">저장</button>
                                <button class="cancel-button" onclick="cancelEditBookmark()">취소</button>
                            </td>
                        `;
                    } else {
                        // 일반 행
                        tr.innerHTML = `
                            <td>${escapeHtml(bookmark.name)}</td>
                            <td><a href="${escapeHtml(bookmark.url)}" target="_blank">${escapeHtml(bookmark.url)}</a></td>
                            <td class="actions">
                                <button class="edit-button" onclick="enableEditModeForRow('${bookmark.id}')">수정</button>
                                <button class="delete-button" onclick="deleteBookmark('${bookmark.id}')">삭제</button>
                            </td>
                        `;
                    }
                    bookmarksTableBody.appendChild(tr);
                } else {
                    const li = document.createElement('li');
                    const a = document.createElement('a');
                    a.href = escapeHtml(bookmark.url);
                    a.textContent = escapeHtml(bookmark.name);
                    a.target = '_blank'; // 새 탭에서 열기
                    li.appendChild(a);
                    bookmarksList.appendChild(li);
                }
            });
        }

        // HTML injection 방지를 위한 간단한 escape 함수
        function escapeHtml(unsafe) {
            if (typeof unsafe !== 'string') return unsafe;
            return unsafe
                 .replace(/&/g, "&amp;")
                 .replace(/</g, "&lt;")
                 .replace(/>/g, "&gt;")
                 .replace(/"/g, "&quot;")
                 .replace(/'/g, "&#039;");
        }

        addBookmarkForm.addEventListener('submit', function(event) {
            event.preventDefault();
            const name = bookmarkNameInput.value.trim();
            const url = bookmarkUrlInput.value.trim();

            if (name && url) {
                const newBookmark = {
                    id: Date.now().toString(), // 고유 ID 생성
                    name: name,
                    url: url
                };
                bookmarks.push(newBookmark);
                saveBookmarks();
                renderBookmarks();
                bookmarkNameInput.value = '';
                bookmarkUrlInput.value = '';
            }
        });

        window.deleteBookmark = function(id) {
            if (confirm('정말로 이 즐겨찾기를 삭제하시겠습니까?')) {
                bookmarks = bookmarks.filter(bookmark => bookmark.id !== id);
                saveBookmarks();
                // 수정 중이던 항목이 삭제되면 editingBookmarkId 초기화
                if (editingBookmarkId === id) {
                    editingBookmarkId = null;
                }
                renderBookmarks();
            }
        }

        window.enableEditModeForRow = function(id) {
            editingBookmarkId = id;
            renderBookmarks(); // 전체 목록을 다시 렌더링하여 해당 행을 수정 모드로 변경
        }

        window.saveEditedBookmark = function(id) {
            const row = document.querySelector(`tr[data-id='${id}']`);
            if (!row) return;

            const nameInput = row.querySelector('.edit-name-input');
            const urlInput = row.querySelector('.edit-url-input');

            const newName = nameInput.value.trim();
            const newUrl = urlInput.value.trim();

            if (newName && newUrl) {
                const bookmarkIndex = bookmarks.findIndex(b => b.id === id);
                if (bookmarkIndex > -1) {
                    bookmarks[bookmarkIndex].name = newName;
                    bookmarks[bookmarkIndex].url = newUrl;
                    saveBookmarks();
                    editingBookmarkId = null; // 수정 완료 후 ID 초기화
                    renderBookmarks();
                }
            } else {
                alert('이름과 주소를 모두 입력해주세요.');
            }
        }

        window.cancelEditBookmark = function() {
            editingBookmarkId = null;
            renderBookmarks();
        }

        toggleModeButton.addEventListener('click', function() {
            isEditMode = !isEditMode;
            editingBookmarkId = null; // 모드 변경 시 수정 상태 초기화

            if (isEditMode) {
                toggleModeButton.textContent = '일반 모드 보기';
                addBookmarkFormContainer.classList.remove('hidden');
                bookmarksTableContainer.classList.remove('hidden');
                bookmarksListContainer.classList.add('hidden');
            } else {
                toggleModeButton.textContent = '수정 모드 켜기';
                addBookmarkFormContainer.classList.add('hidden');
                bookmarksTableContainer.classList.add('hidden');
                bookmarksListContainer.classList.remove('hidden');
            }
            renderBookmarks();
        });

        // 페이지 로드 시 초기 렌더링
        renderBookmarks();
        // 초기 모드 설정 (기본은 일반 모드)
        if (isEditMode) { // 혹시라도 isEditMode가 true로 시작될 경우 대비
            toggleModeButton.textContent = '일반 모드 보기';
            addBookmarkFormContainer.classList.remove('hidden');
            bookmarksTableContainer.classList.remove('hidden');
            bookmarksListContainer.classList.add('hidden');
        } else {
            toggleModeButton.textContent = '수정 모드 켜기';
            addBookmarkFormContainer.classList.add('hidden');
            bookmarksTableContainer.classList.add('hidden');
            bookmarksListContainer.classList.remove('hidden');
        }

    </script>

</body>
</html>
사용 방법:

위 코드를 복사합니다.
텍스트 편집기(예: 메모장, VS Code 등)를 열고 붙여넣습니다.
파일을 .html 확장자(예: my_bookmarks.html)로 저장합니다.
저장한 HTML 파일을 웹 브라우저(Chrome, Edge, Firefox 등)에서 열면 됩니다.
기능 설명:

초기 화면 (일반 모드):
저장된 즐겨찾기 목록이 이름만 표시됩니다.
이름을 클릭하면 해당 주소가 새 탭에서 열립니다.
상단에 "수정 모드 켜기" 버튼이 있습니다.
수정 모드 켜기:
"수정 모드 켜기" 버튼을 클릭하면 UI가 변경됩니다.
버튼 이름이 "일반 모드 보기"로 바뀝니다.
새 즐겨찾기 추가: 이름과 주소를 입력하고 "추가" 버튼을 눌러 새 즐겨찾기를 등록할 수 있습니다.
즐겨찾기 목록 (표):
기존 즐겨찾기들이 표 형태로 이름, 주소, 작업(수정, 삭제 버튼)과 함께 표시됩니다.
수정: 각 항목 옆의 "수정" 버튼을 누르면 해당 행의 이름과 주소가 입력 필드로 바뀝니다. 여기서 내용을 변경하고 "저장" 버튼을 누르면 업데이트됩니다. "취소"를 누르면 원래대로 돌아갑니다.
삭제: "삭제" 버튼을 누르면 해당 즐겨찾기가 삭제됩니다. (확인창이 뜸)
데이터 저장:
모든 데이터는 웹 브라우저의 로컬 스토리지에 저장됩니다. 따라서 같은 브라우저에서 다시 열면 이전에 저장한 내용을 그대로 볼 수 있습니다. 다른 브라우저나 다른 PC에서는 공유되지 않습니다.
참고:

URL 입력 시 http:// 또는 https:// 를 포함해야 링크가 올바르게 작동합니다. (type="url" 속성이 어느 정도 유효성 검사를 하지만, 완벽하진 않습니다.)
보안을 위해 escapeHtml 함수를 사용하여 사용자가 입력한 내용이 HTML로 해석되어 원치 않는 동작을 하는 것(XSS 공격)을 방지했습니다.