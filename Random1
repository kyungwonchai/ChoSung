알겠습니다! 변수 이름은 영어로 하고, 주석은 한글로 추가한 전체 코드를 다시 작성하겠습니다. 각 함수와 변수의 역할을 명확하게 설명하는 주석을 추가해드리니, 쉽게 이해하실 수 있을 겁니다.

영어 변수명과 한글 주석이 포함된 전체 코드
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading.Tasks;
using System.Windows.Input;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Collections.Generic;

public class CommandQueueViewModel : INotifyPropertyChanged
{
    // PLC 명령을 순서대로 저장하는 큐 (FIFO 방식)
    private Queue<Func<Task>> commandQueue = new Queue<Func<Task>>();

    // 명령 실패 시 최대 재시도 횟수
    private int maxRetryCount = 3;

    // 데이터베이스 연결 문자열
    private string connectionString = "your_connection_string_here"; 

    // UI에서 보여줄 명령 기록 (ListBox와 바인딩)
    public ObservableCollection<CommandItem> CommandItems { get; set; } = new ObservableCollection<CommandItem>();

    // INotifyPropertyChanged 이벤트를 사용해 UI 업데이트
    public event PropertyChangedEventHandler PropertyChanged;

    // 프로그레스바 상태 (큐에 남아 있는 명령의 개수를 나타냄)
    private int _progress;
    public int Progress
    {
        get => _progress;
        set { _progress = value; OnPropertyChanged(nameof(Progress)); }
    }

    // 새로운 명령을 큐에 추가하는 함수
    public async Task EnqueueCommand(string commandText)
    {
        // 비동기 명령을 큐에 추가
        commandQueue.Enqueue(() => ExecuteCommand(commandText));

        // 큐에 첫 번째 명령이 추가된 경우에만 명령 처리 시작
        if (commandQueue.Count == 1)
        {
            await ProcessCommandQueue();
        }

        // 프로그레스바 업데이트 (큐에 남은 명령 개수 반영)
        UpdateProgress();
    }

    // 큐에 쌓인 명령을 순차적으로 처리하는 함수
    private async Task ProcessCommandQueue()
    {
        // 큐에 명령이 남아 있는 동안 계속 처리
        while (commandQueue.Count > 0)
        {
            // 큐에서 명령을 꺼내어 실행
            var command = commandQueue.Dequeue();
            await command();

            // 프로그레스바 업데이트 (남은 명령 개수 반영)
            UpdateProgress();
        }
    }

    // 프로그레스바 상태 업데이트 (큐에 남아 있는 명령의 개수 반영)
    private void UpdateProgress()
    {
        Progress = commandQueue.Count; // 큐에 남은 명령의 수를 UI에 반영
    }

    // PLC에 명령을 전송하고 응답을 처리하는 함수
    private async Task ExecuteCommand(string commandText)
    {
        int retryCount = 0; // 재시도 횟수 카운트
        bool success = false; // 명령 성공 여부
        string response = string.Empty; // PLC에서 받은 응답
        Stopwatch stopwatch = new Stopwatch(); // 응답 시간을 측정하기 위한 스톱워치

        // 재시도 횟수가 남아 있고 아직 성공하지 못한 경우 반복
        while (retryCount < maxRetryCount && !success)
        {
            stopwatch.Restart(); // 응답 시간 측정 시작
            response = await SendCommandToPLC(commandText); // PLC로 명령 전송 및 응답 대기
            stopwatch.Stop(); // 응답 시간 측정 완료

            success = ValidateResponse(response); // 응답이 올바른지 확인

            // 응답이 실패하면 1초 대기 후 재시도
            if (!success)
            {
                retryCount++;
                await Task.Delay(1000); // 1초 대기 후 재시도
            }
        }

        // DB에 명령, 응답, 성공 여부, 재시도 횟수, 응답 시간 기록
        await LogCommandToDatabase(commandText, response, success ? 1 : 0, retryCount, stopwatch.ElapsedMilliseconds);

        // UI에 표시할 명령 기록 항목 추가 (실시간으로 ListBox에 반영)
        CommandItems.Add(new CommandItem
        {
            CommandText = commandText, // 보낸 명령어
            ResponseText = response, // 받은 응답
            Result = success ? 1 : 0, // 성공 여부 (1: 성공, 0: 실패)
            RetryCount = retryCount, // 재시도 횟수
            ResponseTime = stopwatch.ElapsedMilliseconds // 응답 시간 (밀리초)
        });
    }

    // PLC에 명령을 전송하는 가상 함수 (실제 PLC와 통신하는 로직 필요)
    private async Task<string> SendCommandToPLC(string commandText)
    {
        await Task.Delay(500); // 실제 PLC 통신 시간을 가정 (500ms 대기)
        return "OK"; // 가상 응답 (실제 PLC 응답을 처리하는 코드로 변경 필요)
    }

    // 응답을 검증하는 함수 (응답이 올바른지 확인)
    private bool ValidateResponse(string response)
    {
        return response == "OK"; // 응답이 "OK"이면 성공으로 간주 (필요 시 수정 가능)
    }

    // DB에 명령과 응답을 기록하는 함수
    private async Task LogCommandToDatabase(string commandText, string response, int result, int retryCount, long responseTime)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            await connection.OpenAsync(); // 비동기로 DB 연결
            using (SqlCommand command = new SqlCommand(
                "INSERT INTO CommandLog (CommandText, ResponseText, Result, RetryCount, ResponseTime) " +
                "VALUES (@CommandText, @ResponseText, @Result, @RetryCount, @ResponseTime)", connection))
            {
                // SQL 파라미터 설정 (SQL 인젝션 방지)
                command.Parameters.AddWithValue("@CommandText", commandText);
                command.Parameters.AddWithValue("@ResponseText", response);
                command.Parameters.AddWithValue("@Result", result);
                command.Parameters.AddWithValue("@RetryCount", retryCount);
                command.Parameters.AddWithValue("@ResponseTime", responseTime);

                await command.ExecuteNonQueryAsync(); // SQL 명령 실행
            }
        }
    }

    // UI 업데이트를 위한 이벤트 트리거 함수
    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

// UI에 표시할 명령 기록 항목 클래스
public class CommandItem
{
    public string CommandText { get; set; } // 보낸 명령어
    public string ResponseText { get; set; } // 받은 응답
    public int Result { get; set; } // 성공 여부 (1: 성공, 0: 실패)
    public int RetryCount { get; set; } // 재시도 횟수
    public long ResponseTime { get; set; } // 응답 시간 (밀리초)
}
주요 함수 설명 및 주석
EnqueueCommand:

이 함수는 새로운 명령을 큐에 추가하고, 큐가 비어있다면 첫 번째 명령이 들어왔을 때 명령처리 함수를 호출합니다.
추가된 명령이 처리되는 동안 다른 명령이 추가되어도 이미 실행 중이기 때문에 명령이 중복 처리되지 않습니다.
ProcessCommandQueue:

큐에 있는 명령을 하나씩 처리하는 함수입니다. 큐에서 명령을 꺼내어 실행하고, 모든 명령이 처리될 때까지 계속 실행됩니다.
명령이 완료되면 다음 명령이 자동으로 처리됩니다.
ExecuteCommand:

실제로 PLC에 명령을 보내고 응답을 처리하는 함수입니다.
응답이 성공하지 못한 경우 최대 3번까지 재시도하며, 각 재시도 간 1초의 대기 시간이 있습니다.
SendCommandToPLC:

PLC로 명령을 보내는 가상의 함수로, 실제 PLC와 통신하는 코드로 변경될 필요가 있습니다.
ValidateResponse:

응답을 검증하는 함수로, PLC로부터 받은 응답이 올바른지 확인합니다. 이 예제에서는 "OK"라는 응답을 받으면 성공으로 간주합니다.
LogCommandToDatabase:

명령과 그 결과를 DB에 기록하는 함수입니다. 명령어, 응답, 성공 여부, 재시도 횟수, 응답 시간을 기록하여 로그로 남깁니다.
OnPropertyChanged:

UI 업데이트를 위해 호출되는 함수입니다. 프로그레스바와 같은 UI 요소가 데이터에 따라 자동으로 업데이트되도록 해줍니다.
