# 1단계: '두뇌' 스크립트 준비 (RackSystemManager.cs)
이 스크립트는 게임이 실행될 때의 모든 실제 동작을 담당합니다.

Project 창 Scripts 폴더에 RackSystemManager.cs 파일을 만들고 아래 코드를 붙여넣으세요.

C#

using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class RackSystemManager : MonoBehaviour
{
    public Transform rackContainer;
    public Material defaultLampMaterial;
    public Material litLampMaterial;
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();

    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }
        Renderer[] allRenderers = rackContainer.GetComponentsInChildren<Renderer>(true);
        foreach (Renderer rend in allRenderers)
        {
            if (rend.name.Contains("_Lamp_"))
            {
                if (!lampRenderers.ContainsKey(rend.name)) lampRenderers.Add(rend.name, rend);
                if (defaultLampMaterial != null) rend.material = defaultLampMaterial;
            }
            else if (rend.name.Contains("_Mask_"))
            {
                if (!maskObjects.ContainsKey(rend.name)) maskObjects.Add(rend.name, rend.gameObject);
            }
        }
    }

    public void ProcessBarcode(string barcode)
    {
        ResetPreviousSlot();
        if (string.IsNullOrEmpty(barcode) || barcode.Length != 12 || !barcode.StartsWith("MMF10")) return;

        string row = barcode.Substring(5, 1);
        string rackNum = barcode.Substring(6, 2);
        string floor = barcode.Substring(8, 1);
        string slotNum = barcode.Substring(9, 2);

        string rackID = $"{row}_{rackNum}";
        string lampID = $"{rackID}_Lamp_{floor}{slotNum}";
        string maskID = $"{rackID}_Mask_{floor}{slotNum}";

        if (lampRenderers.TryGetValue(lampID, out Renderer targetLampRenderer))
        {
            if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
        }
        if (maskObjects.TryGetValue(maskID, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;

        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        if (isSlidingOut) { endPosition = startPosition + new Vector3(0, 0, slideOutDistance); }
        else { endPosition = lastMaskOriginalLocalPosition; }

        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;

        if (rb != null) rb.isKinematic = false;
    }

    public void ActivateFromInputField(InputField inputField)
    {
        if (inputField != null && !string.IsNullOrEmpty(inputField.text))
        {
            ProcessBarcode(inputField.text.ToUpper());
        }
    }
}
## 2단계: '기능 자동 연결' 스크립트 준비
이 스크립트는 Rack_Installations가 배치된 상태에서, 나머지 모든 것을 자동으로 설정해줍니다.

Editor 폴더에 FinalizeSceneSetup.cs 라는 이름으로 새 C# 스크립트를 만듭니다. (기존 RackLayoutGenerator와는 다른 파일입니다.)

아래 코드를 전체 복사하여 붙여넣고 저장합니다.

C#

using UnityEngine;
using UnityEngine.UI;
using UnityEditor;
using UnityEditor.Events;
using UnityEngine.EventSystems;

public class FinalizeSceneSetup
{
    [MenuItem("Tools/SMD Rack/기능 및 UI 자동 연결")]
    private static void FinalizeSetup()
    {
        // --- 1. 씬에 이미 있는 Rack_Installations 오브젝트를 찾음 ---
        string installationsName = "Rack_Installations";
        GameObject installationsObject = GameObject.Find(installationsName);
        if (installationsObject == null)
        {
            EditorUtility.DisplayDialog("오류", "Hierarchy 창에 'Rack_Installations' 오브젝트가 없습니다.\n먼저 랙 배치를 완료해주세요.", "확인");
            return;
        }
        
        // --- 2. RackSystemManager 자동 생성 및 연결 ---
        string managerName = "RackSystemManager";
        GameObject managerObject = GameObject.Find(managerName);
        if (managerObject == null)
        {
            managerObject = new GameObject(managerName);
        }

        RackSystemManager managerScript = managerObject.GetComponent<RackSystemManager>();
        if (managerScript == null)
        {
            managerScript = managerObject.AddComponent<RackSystemManager>();
        }

        // --- 3. 필요한 머티리얼 자동 생성 또는 찾기 ---
        Material defaultMat = CreateOrFindMaterial("Assets/Materials/DefaultLampMaterial.mat", Color.gray);
        Material litMat = CreateOrFindMaterial("Assets/Materials/LitLampMaterial.mat", Color.yellow, true);
        
        // --- 4. 스크립트에 모든 정보 자동 연결 ---
        managerScript.rackContainer = installationsObject.transform;
        managerScript.defaultLampMaterial = defaultMat;
        managerScript.litLampMaterial = litMat;
        
        // --- 5. UI 자동 생성 및 버튼 기능 연결 ---
        CreateAndWireUI(managerScript);

        EditorUtility.DisplayDialog("완료", "기존 랙에 모든 기능과 UI가 자동으로 연결되었습니다.", "확인");
    }

    private static Material CreateOrFindMaterial(string path, Color color, bool isEmissive = false)
    {
        Material mat = AssetDatabase.LoadAssetAtPath<Material>(path);
        if (mat == null)
        {
            if (!AssetDatabase.IsValidFolder("Assets/Materials")) AssetDatabase.CreateFolder("Assets", "Materials");
            mat = new Material(Shader.Find("Standard"));
            mat.SetColor("_Color", color);
            if(isEmissive)
            {
                mat.EnableKeyword("_EMISSION");
                mat.SetColor("_EmissionColor", color * 2f);
            }
            AssetDatabase.CreateAsset(mat, path);
        }
        return mat;
    }
    
    private static void CreateAndWireUI(RackSystemManager manager)
    {
        if (GameObject.FindObjectOfType<EventSystem>() == null)
        {
            new GameObject("EventSystem", typeof(EventSystem), typeof(StandaloneInputModule));
        }

        GameObject canvasObj = GameObject.Find("Canvas");
        if(canvasObj == null)
        {
            canvasObj = new GameObject("Canvas");
            Canvas canvas = canvasObj.AddComponent<Canvas>();
            canvas.renderMode = RenderMode.ScreenSpaceOverlay;
            canvasObj.AddComponent<CanvasScaler>();
            canvasObj.AddComponent<GraphicRaycaster>();
        }
        
        InputField inputField = canvasObj.GetComponentInChildren<InputField>();
        if(inputField == null)
        {
            GameObject inputFieldObj = new GameObject("InputField");
            inputFieldObj.transform.SetParent(canvasObj.transform, false);
            inputFieldObj.AddComponent<Image>().color = new Color(1, 1, 1, 0.5f);
            inputField = inputFieldObj.AddComponent<InputField>();
            RectTransform inputRect = inputFieldObj.GetComponent<RectTransform>();
            inputRect.anchorMin = new Vector2(0, 1); inputRect.anchorMax = new Vector2(0, 1);
            inputRect.pivot = new Vector2(0, 1); inputRect.anchoredPosition = new Vector2(20, -20);
            inputRect.sizeDelta = new Vector2(200, 30);

            GameObject textObj = new GameObject("Text");
            textObj.transform.SetParent(inputFieldObj.transform, false);
            Text text = textObj.AddComponent<Text>();
            text.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            text.color = Color.black;
            text.alignment = TextAnchor.MiddleLeft;
            inputField.textComponent = text;
        }

        Button button = canvasObj.GetComponentInChildren<Button>();
        if(button == null)
        {
            GameObject buttonObj = new GameObject("Button");
            buttonObj.transform.SetParent(canvasObj.transform, false);
            buttonObj.AddComponent<Image>();
            button = buttonObj.AddComponent<Button>();
            RectTransform buttonRect = buttonObj.GetComponent<RectTransform>();
            buttonRect.anchorMin = new Vector2(0, 1); buttonRect.anchorMax = new Vector2(0, 1);
            buttonRect.pivot = new Vector2(0, 1);
            buttonRect.anchoredPosition = new Vector2(230, -20);
            buttonRect.sizeDelta = new Vector2(80, 30);

            GameObject buttonTextObj = new GameObject("ButtonText");
            buttonTextObj.transform.SetParent(buttonObj.transform, false);
            Text buttonText = buttonTextObj.AddComponent<Text>();
            buttonText.font = Resources.GetBuiltinResource<Font>("Arial.ttf");
            buttonText.text = "실행";
            buttonText.color = Color.black;
            buttonText.alignment = TextAnchor.MiddleCenter;
        }
        
        button.onClick.RemoveAllListeners();
        var methodInfo = typeof(RackSystemManager).GetMethod("ActivateFromInputField");
        UnityAction<InputField> action = (InputField arg0) => methodInfo.Invoke(manager, new object[] { arg0 });
        UnityEventTools.AddObjectPersistentListener(button.onClick, action, inputField);
    }
}
## 최종 사용법
씬에 RackLayoutGenerator로 생성한 Rack_Installations 오브젝트가 있는 상태에서 시작합니다.

유니티 상단 메뉴에서 **Tools -> SMD Rack -> 기능 및 UI 자동 연결**을 클릭합니다.

이제 Hierarchy 창에 RackSystemManager와 Canvas가 자동으로 생성되고 모든 기능이 연결되었을 것입니다. 바로 재생(▶) 버튼을 눌러 테스트할 수 있습니다.