using System;
using System.Drawing;
using System.Drawing.Printing;
using System.Windows.Forms;

namespace PrintPreviewWithFilteredPrinterSelection
{
    public partial class Form1 : Form
    {
        private PrintDocument printDocument;

        public Form1()
        {
            InitializeComponent();

            // 프린트 문서 초기화
            printDocument = new PrintDocument();
            printDocument.PrintPage += PrintDocument_PrintPage;
        }

        // 프린터 선택 버튼 클릭 이벤트 핸들러
        private void btnSelectPrinter_Click(object sender, EventArgs e)
        {
            using (PrintDialog printDialog = new PrintDialog())
            {
                // "10"이라는 문구가 포함된 프린터만 필터링
                printDialog.PrinterSettings.PrinterName = FindPrinterContainingText("10");

                // PrintDialog에서 프린터를 선택하도록 합니다.
                if (printDialog.ShowDialog() == DialogResult.OK)
                {
                    // 선택한 프린터를 사용하여 PrintDocument에 할당합니다.
                    printDocument.PrinterSettings = printDialog.PrinterSettings;

                    // PrintPreviewDialog를 열기 전에 인쇄할 내용을 PrintDocument에 설정합니다.
                    // 예를 들어, PrintDocument_PrintPage 이벤트에서 내용을 그리거나 설정할 수 있습니다.
                }
            }
        }

        // 인쇄 미리보기 버튼 클릭 이벤트 핸들러
        private void btnPrintPreview_Click(object sender, EventArgs e)
        {
            using (PrintPreviewDialog printPreviewDialog = new PrintPreviewDialog())
            {
                // PrintDocument를 PrintPreviewDialog에 할당합니다.
                printPreviewDialog.Document = printDocument;

                // PrintPreviewDialog를 엽니다.
                printPreviewDialog.ShowDialog();
            }
        }

        // PrintDocument_PrintPage 이벤트 핸들러 (프린트할 내용 설정)
        private void PrintDocument_PrintPage(object sender, PrintPageEventArgs e)
        {
            // 여기에 프린트할 내용을 설정합니다.
            // 예를 들어, 그림이나 텍스트를 그리거나 PrintDocument의 설정을 변경할 수 있습니다.
            // e.Graphics를 사용하여 출력될 그래픽 개체를 그리고 설정할 수 있습니다.
            // 이 예제에서는 간단한 텍스트를 그리는 예제를 보여줍니다.
            e.Graphics.DrawString("프린트할 내용입니다.", new Font("Arial", 12), Brushes.Black, new PointF(50, 50));
        }

        // "10"이라는 문구가 포함된 프린터를 찾아 반환하는 메서드
        private string FindPrinterContainingText(string searchText)
        {
            foreach (string printerName in PrinterSettings.InstalledPrinters)
            {
                if (printerName.Contains(searchText))
                {
                    return printerName;
                }
            }

            // "10"이라는 문구가 포함된 프린터를 찾지 못한 경우 기본 프린터를 반환
            return PrinterSettings.InstalledPrinters[0];
        }
    }
}
