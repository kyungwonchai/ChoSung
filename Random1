리스트박스에 최대 50개의 로그만 남기고, 나머지는 삭제하는 기능을 추가하려면 ObservableCollection<string>을 사용하여 로그를 관리하는 곳에서 이 기능을 적용해야 합니다. ObservableCollection은 WPF의 데이터 바인딩을 지원하며, 컬렉션이 변경될 때마다 UI에 자동으로 반영되기 때문에 여기에 추가적인 로직을 넣어 로그 수를 제한할 수 있습니다.

적용 방법
로그를 추가할 때마다 현재 로그 수를 확인하고, 만약 50개를 초과하면 가장 오래된 로그를 삭제하는 로직을 추가합니다.

1. MainViewModel 수정
MainViewModel에서 각 로그 컬렉션에 새로운 로그를 추가할 때마다, 컬렉션의 크기를 체크하고, 최대 크기를 초과할 경우 오래된 항목을 삭제하는 메서드를 추가합니다.

수정된 MainViewModel.cs 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Threading;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ServiceControllerHelper _serviceControllerHelper;

        // 로그 컬렉션 정의
        public ObservableCollection<string> GeneralLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ServiceLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> SystemLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ErrorLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> UserLogs { get; } = new ObservableCollection<string>();

        private const int MaxLogCount = 50; // 최대 로그 개수

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper();
            _serviceControllerHelper.OnGeneralLogMessage += LogGeneralMessage;
            _serviceControllerHelper.OnServiceLogMessage += LogServiceMessage;
            _serviceControllerHelper.OnSystemLogMessage += LogSystemMessage;
            _serviceControllerHelper.OnErrorLogMessage += LogErrorMessage;
            _serviceControllerHelper.OnUserLogMessage += LogUserMessage;
        }

        // 일반 로그 메시지를 추가하는 메서드
        private void LogGeneralMessage(string message)
        {
            AddLog(GeneralLogs, message);
        }

        // 서비스 로그 메시지를 추가하는 메서드
        private void LogServiceMessage(string message)
        {
            AddLog(ServiceLogs, message);
        }

        // 시스템 로그 메시지를 추가하는 메서드
        private void LogSystemMessage(string message)
        {
            AddLog(SystemLogs, message);
        }

        // 에러 로그 메시지를 추가하는 메서드
        private void LogErrorMessage(string message)
        {
            AddLog(ErrorLogs, message);
        }

        // 사용자 로그 메시지를 추가하는 메서드
        private void LogUserMessage(string message)
        {
            AddLog(UserLogs, message);
        }

        // 로그를 추가하고 최대 개수를 초과하면 오래된 로그를 삭제하는 메서드
        private void AddLog(ObservableCollection<string> logCollection, string message)
        {
            App.Current.Dispatcher.Invoke(() =>
            {
                logCollection.Add(message);
                if (logCollection.Count > MaxLogCount)
                {
                    logCollection.RemoveAt(0); // 가장 오래된 로그 삭제
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
MaxLogCount 상수 정의:

최대 로그 개수를 정의합니다. 이 경우 MaxLogCount는 50으로 설정되어 있습니다.
AddLog 메서드:

로그 메시지를 추가하고, ObservableCollection의 항목 개수를 체크하여, 만약 MaxLogCount를 초과하면 가장 오래된 로그 항목을 삭제합니다.
이 메서드는 로그 컬렉션과 메시지를 매개변수로 받아와서, 어떤 컬렉션이든지 같은 방식으로 로그를 추가하고 제한을 적용할 수 있게 합니다.
로그 메시지 추가 메서드 (LogGeneralMessage, LogServiceMessage 등):

각 로그 유형별로 로그 메시지를 추가하는 메서드는 이제 AddLog 메서드를 호출하여 로그를 추가하고 개수 제한을 관리합니다.
요약
**MainViewModel**에서 로그를 추가하는 메서드에 로그 개수 제한 기능을 추가했습니다.
AddLog 메서드를 통해 각 로그 컬렉션에 로그를 추가할 때마다 최대 50개의 로그만 유지하고, 초과하는 경우 가장 오래된 로그를 삭제하도록 했습니다.
이렇게 하면 로그가 자동으로 관리되며, UI에는 항상 최신 50개의 로그만 표시됩니