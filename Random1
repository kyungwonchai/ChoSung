from flask import Flask, redirect, request
import pyodbc
from itsdangerous import TimedJSONWebSignatureSerializer

app = Flask(__name__)
app.secret_key = 'your-secret-key'

# MSSQL 연결 설정
server = 'your-server-name'
database = 'your-database-name'
username = 'your-username'
password = 'your-password'
cnxn = pyodbc.connect('DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD='+password)
cursor = cnxn.cursor()

# 토큰 생성 함수
def generate_token(username):
    serializer = TimedJSONWebSignatureSerializer(app.secret_key, expires_in=3600)
    token = serializer.dumps({'username': username}).decode('utf-8')
    return token

# 토큰 검증 함수
def verify_token(token):
    serializer = TimedJSONWebSignatureSerializer(app.secret_key)
    try:
        data = serializer.loads(token)
        username = data.get('username')
        return username
    except:
        return None

# 사용자 인증 함수
def authenticate_user(username, password):
    # 사용자 인증 로직을 수행합니다.
    # 예를 들어, MSSQL에서 사용자명과 비밀번호를 검증하는 쿼리를 실행할 수 있습니다.
    query = "SELECT * FROM users WHERE username=? AND password=?"
    cursor.execute(query, (username, password))
    user = cursor.fetchone()

    if user:
        return user.username  # 사용자명(고유키)을 반환합니다.
    else:
        return None

# 로그인 라우트
@app.route('/login', methods=['POST'])
def login():
    username = request.form['username']
    password = request.form['password']

    user_id = authenticate_user(username, password)
    if user_id:
        # 토큰 생성
        token = generate_token(user_id)
        # 생성된 토큰을 사용자에게 전달하거나 다른 작업을 수행합니다.
        return redirect('/redirect-page?token=' + token)
    else:
        # 인증 실패 처리
        return '인증에 실패하였습니다.'

# 리다이렉션 페이지 라우트
@app.route('/redirect-page')
def redirect_page():
    token = request.args.get('token')
    if token:
        # 토큰 검증
        username = verify_token(token)
        if username:
            # 유효한 토큰인 경우 리다이렉션할 페이지 주소를 반환합니다.
            # 여기서는 임시로 구글 홈페이지로 리다이렉션하도록 설정했습니다.
            return redirect('https://www.google.com')
        else:
            # 토큰이 유효하지 않은 경우 처리합니다.
            return '유효하지 않은 토큰입니다.'
    else:
        # 토큰이 제공되지 않은 경우 처리합니다.
        return '토큰이 제공되지 않았습니다.'

if __name__ == '__main__':
    app.run()
