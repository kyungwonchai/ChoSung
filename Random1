 XAML 파일 (MainWindow.xaml)
각 GridControl에 데이터를 표시하고, 행 색상 설정을 위한 스타일을 적용합니다.

xaml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="Log Viewer" Height="800" Width="1200">
    <Window.Resources>
        <Style x:Key="TimeBasedRowStyle" TargetType="dxg:GridRowContent">
            <Style.Triggers>
                <DataTrigger Binding="{Binding Time1}" Value="{x:Static sys:DateTime.Now}">
                    <DataTrigger.Value>
                        <sys:DateTime>
                            <sys:DateTime.DateTime>
                                <Binding Path="Time1" Converter="{StaticResource Time1HighlightConverter}"/>
                            </sys:DateTime.DateTime>
                        </sys:DateTime>
                    </DataTrigger.Value>
                    <Setter Property="Background">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                <GradientStop Color="Purple" Offset="0.0" />
                                <GradientStop Color="DarkPurple" Offset="1.0" />
                            </LinearGradientBrush>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        
        <!-- 첫 번째 GridControl -->
        <dxg:GridControl Name="gridControl1" Grid.Row="0" ItemsSource="{Binding Data1}">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Id" Header="Id" />
                <dxg:GridColumn FieldName="IP" Header="IP" />
                <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
                <dxg:GridColumn FieldName="Time1" Header="Time1" />
                <dxg:GridColumn FieldName="LogType" Header="LogType" />
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" ShowGroupPanel="False" RowStyle="{StaticResource TimeBasedRowStyle}"/>
            </dxg:GridControl.View>
        </dxg:GridControl>

        <!-- 두 번째 GridControl -->
        <dxg:GridControl Name="gridControl2" Grid.Row="1" ItemsSource="{Binding Data2}">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Id" Header="Id" />
                <dxg:GridColumn FieldName="IP" Header="IP" />
                <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
                <dxg:GridColumn FieldName="Time1" Header="Time1" />
                <dxg:GridColumn FieldName="LogType" Header="LogType" />
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" ShowGroupPanel="False" RowStyle="{StaticResource TimeBasedRowStyle}"/>
            </dxg:GridControl.View>
        </dxg:GridControl>

        <!-- 세 번째 GridControl -->
        <dxg:GridControl Name="gridControl3" Grid.Row="2" ItemsSource="{Binding Data3}">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Id" Header="Id" />
                <dxg:GridColumn FieldName="IP" Header="IP" />
                <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
                <dxg:GridColumn FieldName="Time1" Header="Time1" />
                <dxg:GridColumn FieldName="LogType" Header="LogType" />
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" ShowGroupPanel="False" RowStyle="{StaticResource TimeBasedRowStyle}"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
2. C# 코드 파일 (MainWindow.xaml.cs)
MSSQL2014에서 데이터를 가져와 GridControl에 표시하고, 10초마다 새로고침하는 타이머를 설정합니다. 또한, Time1 컬럼의 시간에 따라 행 색상을 설정하는 로직도 포함되어 있습니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Threading;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            
            // 타이머 설정
            DispatcherTimer refreshTimer = new DispatcherTimer();
            refreshTimer.Interval = TimeSpan.FromSeconds(10);
            refreshTimer.Tick += (s, e) => RefreshData();
            refreshTimer.Start();
            
            // 초기 데이터 로드
            RefreshData();
        }

        private void RefreshData()
        {
            // 각각의 쿼리에 대한 데이터를 가져와서 GridControl에 바인딩합니다.
            gridControl1.ItemsSource = GetDataFromDatabase("SELECT * FROM [SMD_ACR_ROUTER].[dbo].[LogMessages] WHERE [IP] = '33.33.33.33' ORDER BY [id] DESC");
            gridControl2.ItemsSource = GetDataFromDatabase("SELECT * FROM [SMD_ACR_ROUTER].[dbo].[LogMessages] WHERE [ReceivedMessage] LIKE '%DT12330 불일치%' ORDER BY [id] DESC");
            gridControl3.ItemsSource = GetDataFromDatabase("SELECT * FROM [SMD_ACR_ROUTER].[dbo].[LogMessages] WHERE [logtype] = 'voc' ORDER BY [id] DESC");
        }

        private List<LogMessage> GetDataFromDatabase(string query)
        {
            List<LogMessage> logMessages = new List<LogMessage>();

            // SQL Server 연결 문자열
            string connectionString = "Server=your_server;Database=SMD_ACR_ROUTER;User Id=your_username;Password=your_password;";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = new SqlCommand(query, connection);
                connection.Open();
                SqlDataReader reader = command.ExecuteReader();

                while (reader.Read())
                {
                    logMessages.Add(new LogMessage
                    {
                        Id = reader.GetInt32(0),
                        IP = reader.GetString(1),
                        ReceivedMessage = reader.GetString(2),
                        Time1 = reader.GetDateTime(3),
                        LogType = reader.GetString(4)
                    });
                }
            }

            return logMessages;
        }
    }

    public class LogMessage
    {
        public int Id { get; set; }
        public string IP { get; set; }
        public string ReceivedMessage { get; set; }
        public DateTime Time1 { get; set; }
        public string LogType { get; set; }
    }
}
3. Time1 컬럼 시간 조건에 따른 행 색상 설정
Time1 컬럼의 값이 현재 시간으로부터 1시간 이내일 경우 행 색상을 지정하기 위해 IValueConverter를 추가하여 시간 조건을 체크합니다.

Time1HighlightConverter.cs
csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;

namespace YourNamespace
{
    public class Time1HighlightConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            DateTime time1 = (DateTime)value;
            return DateTime.Now - time1 <= TimeSpan.FromHours(1);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
4. App.xaml에서 Time1HighlightConverter 리소스 등록
컨버터를 WPF 리소스로 등록하여 사용할 수 있도록 설정합니다.

xaml
코드 복사
<Application x:Class="YourNamespace.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:YourNamespace"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <local:Time1HighlightConverter x:Key="Time1HighlightConverter"/>
    </Application.Resources>
</Application>