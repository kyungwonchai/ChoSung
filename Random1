import pandas as pd
import pymssql

server = 'your_server'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# 데이터베이스 연결
conn = pymssql.connect(server=server, user=username, password=password, database=database)

# SQL 쿼리 실행 및 결과를 pandas DataFrame으로 가져오기
# SQL 쿼리 수정: 업체PN, 부품코드, 업체명을 모두 선택하도록 수정
sql_query = "SELECT 업체PN, 부품코드, 업체명 FROM your_table"
data = pd.read_sql(sql_query, conn)

def find_similar_parts(input_str, top_n=10):
    input_vec = tfidf.transform([input_str])
    cosine_similarities = linear_kernel(input_vec, tfidf_matrix).flatten()
    related_docs_indices = cosine_similarities.argsort()[:-top_n-1:-1]
    
    # 결과 데이터 수정: 업체PN, 부품코드, 업체명을 모두 반환하도록 수정
    result = data.iloc[related_docs_indices]
    return result['업체PN'].tolist(), result['부품코드'].tolist(), result['업체명'].tolist()

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        input1 = request.form['part_code']
        similar_parts_pn, similar_parts_code, similar_parts_name = find_similar_parts(input1)
        
        # 결과 데이터를 template에 전달
        return render_template('index.html', part_code=input1, similar_parts_pn=similar_parts_pn, similar_parts_code=similar_parts_code, similar_parts_name=similar_parts_name)
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
