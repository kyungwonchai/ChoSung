스페이스 추가
먼저, 필요한 네임스페이스를 추가해야 합니다:

csharp
Copy code
using System;
using System.Data.SqlClient;
using System.IO;
using System.Windows.Media.Imaging;
2. 이미지를 byte[]로 변환하는 메서드
Image 컨트롤의 Source 속성에서 BitmapImage를 가져와 byte[]로 변환하는 메서드를 작성합니다:

csharp
Copy code
public byte[] ImageToByte(BitmapImage imageSource)
{
    byte[] data;
    JpegBitmapEncoder encoder = new JpegBitmapEncoder();
    encoder.Frames.Add(BitmapFrame.Create(imageSource));
    using (MemoryStream ms = new MemoryStream())
    {
        encoder.Save(ms);
        data = ms.ToArray();
    }
    return data;
}
3. 데이터베이스에 이미지 저장
이미지 데이터를 MSSQL 데이터베이스에 저장하는 메서드입니다:

csharp
Copy code
public void SaveImageToDatabase(byte[] imageBytes)
{
    string connectionString = "Your Connection String Here";
    using (SqlConnection conn = new SqlConnection(connectionString))
    {
        string sql = "INSERT INTO YourTableName (YourImageColumn) VALUES (@Image)";
        using (SqlCommand cmd = new SqlCommand(sql, conn))
        {
            cmd.Parameters.AddWithValue("@Image", imageBytes);
            conn.Open();
            cmd.ExecuteNonQuery();
        }
    }
}
4. Image 컨트롤에서 이미지 가져오기 및 저장
이제 Image 컨트롤에서 이미지를 가져와 위의 메서드들을 사용하여 데이터베이스에 저장할 수 있습니다:

csharp
Copy code
private void UploadImageToDatabase()
{
    BitmapImage bitmapImage = imageView.Source as BitmapImage;
    if (bitmapImage != null)
    {
        byte[] imageData = ImageToByte(bitmapImage);
        SaveImageToDatabase(imageData);
    }
}
여기서 imageView는 XAML에서 정의한 Image 컨트롤의 이름입니다.

데이터베이스 연결 문자열(connectionString), 테이블 이름(YourTableName), 열 이름(YourImageColumn)은 실제 환경에 맞게 변경해야 합니다. 또한, 이 코드는 예외 처리가 포함되어 있지 않으므로, 실제 애플리케이션에서 사용할 때는 적절