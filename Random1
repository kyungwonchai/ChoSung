아래는 각 시간대의 MP1~MP5 데이터의 **최소값(Min)**과 **최대값(Max)**을 계산하여 데이터 모델에 추가하는 C# 코드입니다. 이 데이터를 RangeAreaSeries2D와 연동하기 위해 사용합니다.

C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;
        public List<RangeDataPoint> LModelData { get; private set; }
        public List<RangeDataPoint> RModelData { get; private set; }

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            ProcessData();
            InitializeLineChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void ProcessData()
        {
            // L 모델 데이터 처리
            LModelData = allData
                .Where(d => d.ModelName.EndsWith("L"))
                .GroupBy(d => d.Timestamp)
                .Select(g => new RangeDataPoint
                {
                    Timestamp = g.Key,
                    MinValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Min(),
                    MaxValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Max()
                }).ToList();

            // R 모델 데이터 처리
            RModelData = allData
                .Where(d => d.ModelName.EndsWith("R"))
                .GroupBy(d => d.Timestamp)
                .Select(g => new RangeDataPoint
                {
                    Timestamp = g.Key,
                    MinValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Min(),
                    MaxValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Max()
                }).ToList();
        }

        private void InitializeLineChart()
        {
            LineChart.DataContext = this;
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class RangeDataPoint
    {
        public DateTime Timestamp { get; set; }
        public double MinValue { get; set; }
        public double MaxValue { get; set; }
    }
}
주요 변경 사항
RangeDataPoint 클래스 추가:

MinValue: 해당 시간대의 최소값.
MaxValue: 해당 시간대의 최대값.
Timestamp: 시간.
ProcessData 메서드:

데이터를 시간(Timestamp)으로 그룹화합니다.
각 시간대에 대해 MP1~MP5 값을 수집하여 최소값(Min)과 최대값(Max)을 계산합니다.
LModelData와 RModelData는 각각 L 모델과 R 모델의 데이터를 포함합니다.
RangeAreaSeries2D와 데이터 연동:

XAML에서 DataSource를 LModelData와 RModelData에 바인딩합니다.
Value1DataMember와 Value2DataMember를 각각 MinValue와 MaxValue로 설정합니다.
동작 방식
데이터베이스에서 데이터 읽기: LoadData 메서드.
최소/최대값 계산: ProcessData 메서드.
차트 초기화 및 데이터 바인딩: InitializeLineChart 메서드.