해했습니다. 아래는 MainWindow.xaml 및 MainWindow.xaml.cs 파일의 코드입니다. 이 파일들은 WPF의 UI를 정의하고, MainViewModel을 DataContext로 설정하여 UI와 ViewModel 간의 데이터 바인딩을 처리합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log File Viewer" Height="450" Width="800">
    <Grid>
        <!-- DataGrid for displaying log entries -->
        <DataGrid ItemsSource="{Binding LogEntries}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" />
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" />
                <DataGridTextColumn Header="MAG_QTY" Binding="{Binding MAG_QTY}" />
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" />
                <DataGridTextColumn Header="PO_PLAN_QTY" Binding="{Binding PO_PLAN_QTY}" />
                <DataGridTextColumn Header="PO_PROD_QTY" Binding="{Binding PO_PROD_QTY}" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- Button to manually reload logs -->
        <Button Content="Reload Logs" Command="{Binding LoadLogsCommand}" Width="150" Height="30" 
                HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10"/>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // MainViewModel을 DataContext로 설정하여 바인딩
            DataContext = new MainViewModel();
        }
    }
}
설명:
MainWindow.xaml:

DataGrid: LogEntries 컬렉션을 바인딩하여 File Name, MAG_NO, MAG_QTY, PO_NO, PO_PLAN_QTY, PO_PROD_QTY 등의 정보를 열로 구성하여 표시합니다.
Button: LoadLogsCommand에 바인딩된 버튼을 클릭하면 수동으로 로그 파일을 다시 로드합니다.
MainWindow.xaml.cs:

이 파일에서 MainWindow 클래스는 WPF 창을 초기화할 때 MainViewModel을 DataContext로 설정하여 데이터 바인딩을 활성화합니다.
이제 전체적인 흐름은 다음과 같습니다:

MainViewModel: UI와 바인딩되어 DataGrid에 로그 데이터를 표시하고, 타이머를 사용하여 5초마다 새로운 파일을 확인하여 추가합니다.
MainWindow.xaml: WPF의 UI를 정의하며, DataGrid와 버튼을 통해 사용자 인터페이스를 제공합니다.
MainWindow.xaml.cs: MainWindow를 초기화하고 MainViewModel을 DataContext로 설정하여 UI와 ViewModel 간의 데이터 바인딩을 처리합니다.
이 코드를 프로젝트에 적용하면, 처음 실행 시 최근 두 개의 PO_NO에 대한 파일들을 불러와 표시하고, 이후 새로 생성된 파일은 