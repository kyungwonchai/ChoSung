요청 사항을 반영하여 다음과 같은 기능을 추가하고 수정했습니다:

작업이 프로그램 시작 시 자동 실행되도록 설정.
작업 완료 후 1분 뒤 다시 실행.
리스트박스에 20개까지만 유지하며 과거 항목 제거.
수정된 코드
1. 작업 반복 실행 및 자동 시작
작업을 일정 간격으로 반복 실행하기 위해 Task와 Timer를 사용합니다.

csharp
코드 복사
private System.Timers.Timer _timer;

public MainWindow()
{
    InitializeComponent();
    InitializeAutoTask(); // 프로그램 시작 시 작업 초기화 및 실행
}

private void InitializeAutoTask()
{
    // 타이머 설정: 1분(60,000ms) 간격으로 실행
    _timer = new System.Timers.Timer(60000);
    _timer.Elapsed += async (s, e) => await ExecuteTaskAsync(); // 작업 실행
    _timer.AutoReset = true; // 반복 실행
    _timer.Enabled = true;   // 타이머 활성화

    // 프로그램 시작 시 작업 즉시 실행
    _ = ExecuteTaskAsync();
}
2. 작업 처리 함수 수정
리스트박스에 로그를 추가하며, 20개까지만 유지하도록 수정합니다.

csharp
코드 복사
private async Task ExecuteTaskAsync()
{
    try
    {
        // 작업 시작 로그 추가
        AddLog("작업 시작");

        // 여기에 실제 작업 코드 추가
        await Task.Run(() =>
        {
            // 예제 작업 코드: 파일 처리, DB 업로드 등
            Thread.Sleep(5000); // 5초 대기 (예제 작업)
        });

        // 작업 완료 로그 추가
        AddLog("작업 완료");
    }
    catch (Exception ex)
    {
        // 작업 중 에러 발생 시 로그 추가
        AddLog($"작업 중 에러: {ex.Message}");
    }
}

private void AddLog(string message)
{
    // 현재 시간과 메시지 결합
    string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

    // 리스트박스에 로그 추가
    Application.Current.Dispatcher.Invoke(() =>
    {
        ListBoxLogs.Items.Add(log);

        // 리스트박스 항목이 20개를 초과하면 오래된 항목 삭제
        while (ListBoxLogs.Items.Count > 20)
        {
            ListBoxLogs.Items.RemoveAt(0);
        }
    });

    // 디버그 출력
    Debug.WriteLine(log);
}
변경된 동작
프로그램 시작 시 자동 실행:

InitializeAutoTask 메서드가 호출되어 작업이 즉시 실행됩니다.
1분 간격으로 작업 반복 실행:

System.Timers.Timer를 사용하여 1분마다 ExecuteTaskAsync를 실행합니다.
리스트박스 관리:

AddLog 메서드가 로그를 리스트박스에 추가하며, 항목이 20개를 초과하면 오래된 항목을 삭제합니다.
디버그 로그:

모든 작업 로그는 Debug.WriteLine으로 출력되어 디버깅 시 확인 가능합니다.
결과 예시
리스트박스 출력
yaml
코드 복사
2025-01-10 10:00:00 - 작업 시작
2025-01-10 10:00:05 - 작업 완료
2025-01-10 10:01:00 - 작업 시작
2025-01-10 10:01:05 - 작업 완료
디버그 출력
plaintext
코드 복사
2025-01-10 10:00:00 - 작업 시작
2025-01-10 10:00:05 - 작업 완료
2025-01-10 10:01:00 - 작업 시작