서버 소켓이 시작할 때 사용 가능한 포트를 입력받아 설정하도록 코드를 수정해보겠습니다. 이 예제에서는 WPF의 TextBox를 사용하여 포트를 입력받고, 해당 포트로 소켓 서버를 시작할 수 있도록 구현합니다.

서버 측 프로그램 수정
MainWindow.xaml (서버)
먼저, 포트를 입력받을 수 있는 TextBox와 서버를 시작하는 버튼을 추가합니다.

xml
코드 복사
<Window x:Class="SocketServerApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Socket Server" Height="400" Width="525">
    <Grid>
        <TextBox x:Name="portTextBox" HorizontalAlignment="Left" Height="23" Margin="10,10,0,0" VerticalAlignment="Top" Width="497" Text="포트를 입력하세요"/>
        <Button Content="서버 시작" HorizontalAlignment="Left" Margin="10,38,0,0" VerticalAlignment="Top" Width="497" Height="25" Click="StartServerButton_Click"/>
        <ListBox x:Name="listBox" HorizontalAlignment="Left" Height="297" VerticalAlignment="Top" Width="497" Margin="10,70,0,0"/>
    </Grid>
</Window>
MainWindow.xaml.cs (서버)
사용자가 입력한 포트를 사용하여 서버를 시작하도록 수정합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Windows;
using System.Windows.Threading; // Dispatcher를 사용하기 위해 추가

namespace SocketServerApp
{
    public partial class MainWindow : Window
    {
        private Socket serverSocket;
        private byte[] buffer = new byte[1024];

        public MainWindow()
        {
            InitializeComponent();
        }

        private void StartServerButton_Click(object sender, RoutedEventArgs e)
        {
            int port;
            if (int.TryParse(portTextBox.Text, out port))
            {
                StartServer(port);
            }
            else
            {
                UpdateStatus("유효한 포트 번호를 입력하세요.");
            }
        }

        private void StartServer(int port)
        {
            try
            {
                serverSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);

                // 모든 네트워크 인터페이스에서 입력된 포트로 수신
                IPEndPoint localEndPoint = new IPEndPoint(IPAddress.Any, port);

                serverSocket.Bind(localEndPoint);
                serverSocket.Listen(10);
                serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
                UpdateStatus($"서버가 포트 {port}에서 시작되었습니다.");
            }
            catch (Exception ex)
            {
                UpdateStatus($"서버 시작 오류: {ex.Message}");
            }
        }

        private void AcceptCallback(IAsyncResult AR)
        {
            try
            {
                Socket clientSocket = serverSocket.EndAccept(AR);
                UpdateStatus("클라이언트가 연결되었습니다.");
                clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
                serverSocket.BeginAccept(new AsyncCallback(AcceptCallback), null);
            }
            catch (Exception ex)
            {
                UpdateStatus($"클라이언트 연결 오류: {ex.Message}");
            }
        }

        private void ReceiveCallback(IAsyncResult AR)
        {
            try
            {
                Socket clientSocket = (Socket)AR.AsyncState;
                int received = clientSocket.EndReceive(AR);
                if (received > 0)
                {
                    string data = Encoding.UTF8.GetString(buffer, 0, received);
                    UpdateStatus($"받은 데이터: {data}");
                    clientSocket.BeginReceive(buffer, 0, buffer.Length, SocketFlags.None, new AsyncCallback(ReceiveCallback), clientSocket);
                }
            }
            catch (Exception ex)
            {
                UpdateStatus($"데이터 수신 오류: {ex.Message}");
            }
        }

        private void UpdateStatus(string message)
        {
            Dispatcher.BeginInvoke((Action)(() =>
            {
                listBox.Items.Add(message);
            }));
        }
    }
}
수정된 코드 설명
포트 입력받기: portTextBox TextBox를 통해 사용자가 포트를 입력할 수 있도록 하였습니다. 기본값으로는 "포트를 입력하세요"라는 안내 문구가 설정되어 있습니다.

서버 시작 버튼: StartServerButton_Click 이벤트 핸들러는 버튼 클릭 시 실행됩니다. 이 핸들러는 사용자가 입력한 포트를 파싱하고, 유효한 포트가 입력된 경우에만 서버를 시작합니다.

서버 시작 메서드: StartServer(int port) 메서드는 입력받은 포트를 사용하여 서버 소켓을 설정하고, 모든 네트워크 인터페이스에서 수신할 수 있도록 IPAddress.Any를 사용합니다.

에러 핸들링: 각 네트워크 작업에 대해 try-catch 블록을 사용하여 예외를 처리하고, 발생한 오류 메시지를 ListBox에 표시합니다.

사용 방법
서버 애플리케이션을 실행합니다.
"포트를 입력하세요"라는 TextBox에 사용할 포트 번호(예: 5000)를 입력합니다.
"서버 시작" 버튼을 클릭하여 서버를 시작합니다.
입력한 포트 번호로 서버가 시작되고, 클라이언트 연결을 기다리게 됩니다.
이렇게 수정된 코드로 사용자는 원하는 포트를 직접 입력하여 서버를 시작할 수 있습니다. 포트가 사용 중이거나 잘못된 포트가 입력되었을 경우 적절한 오류 메시지가 표시됩니