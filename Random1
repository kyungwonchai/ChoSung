{% extends 'layout.html' %}

{% block content %}
<div class="container">
    <h1>{{ title }}</h1>

    <div class="mb-3">
        <button onclick="location.reload()" class="btn btn-primary">상태 새로고침: 전체보기</button>
        <button onclick="toggleFailedConnections()" class="btn btn-danger ml-2">통신이상 보기</button>
    </div>

    <div class="table-responsive">
        <table class="table table-bordered table-hover">
            <thead class="thead-light">
                <tr>
                    <th>PC 이름</th>
                    <th>IP 주소</th>
                    <th>TS/2000 상태</th>
                </tr>
            </thead>
            <tbody>
                {% for pc in pcs %}
                <tr>
                    <td>{{ pc.name }}</td>
                    <td>{{ pc.address }}</td>
                    <td class="{% if results.get(pc.id) %}bg-success{% else %}bg-warning{% endif %} text-white">
                        {% if results.get(pc.id) %}
                        연결 정상
                        {% else %}
                        연결 실패
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
    let isShowingFailedOnly = false; // 현재 통신 이상만 보고 있는지 여부를 추적

    function toggleFailedConnections() {
        const rows = document.querySelectorAll('tbody tr');
        isShowingFailedOnly = !isShowingFailedOnly; // 클릭 시 상태를 토글

        rows.forEach(row => {
            // 연결 상태를 나타내는 td 요소를 찾습니다.
            const statusCell = row.querySelector('td:nth-child(3)'); // 세 번째 td가 상태를 나타냄

            if (statusCell) {
                // 'bg-success'는 '연결 정상'을 의미
                const isSuccess = statusCell.classList.contains('bg-success');

                if (isShowingFailedOnly) {
                    // 통신 이상만 보고 싶을 때 (isShowingFailedOnly가 true일 때)
                    if (isSuccess) {
                        // 연결 정상인 행은 숨깁니다.
                        row.classList.add('d-none');
                    }
                } else {
                    // 모든 행을 보고 싶을 때 (isShowingFailedOnly가 false일 때)
                    // 모든 행의 d-none 클래스를 제거하여 보이게 합니다.
                    row.classList.remove('d-none');
                }
            }
        });
    }

    // 선택적으로, 페이지 로드 시 'd-none' 클래스가 정의되어 있는지 확인하거나
    // CSS에 다음 규칙이 포함되어 있는지 확인하세요:
    // .d-none { display: none !important; }

</script>
{% endblock %}