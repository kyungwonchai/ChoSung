ort your alldata collection by multiple conditions in LINQ, you can chain the OrderByDescending and ThenByDescending methods. Here's how you can achieve this:

csharp
코드 복사
var sortedData = alldata
    .OrderByDescending(d => d.Timestamp) // Primary sort by Timestamp in descending order
    .ThenByDescending(d => d.AnotherProperty); // Secondary sort by AnotherProperty in descending order
Explanation:

OrderByDescending(d => d.Timestamp): This sorts the alldata collection primarily by the Timestamp property in descending order.

ThenByDescending(d => d.AnotherProperty): This applies a secondary sort by AnotherProperty in descending order for elements that have identical Timestamp values.

Note:

If you want the secondary sort to be in ascending order, use ThenBy instead of ThenByDescending:

csharp
코드 복사
.ThenBy(d => d.AnotherProperty); // Secondary sort by AnotherProperty in ascending order
You can chain multiple ThenBy or ThenByDescending methods to apply additional sorting levels as needed.

Example:

Suppose your data class is defined as follows:

csharp
코드 복사
public class Data
{
    public string Linename { get; set; }
    public DateTime Timestamp { get; set; }
    public int AnotherProperty { get; set; }
}
To sort alldata by Timestamp in descending order and then by AnotherProperty in descending order, you would write:

csharp
코드 복사
var sortedData = alldata
    .OrderByDescending(d => d.Timestamp)
    .ThenByDescending(d => d.AnotherProperty);
Iterating Over the Sorted Data:

You can iterate over the sortedData as follows:

csharp
코드 복사
foreach (var item in sortedData)
{
    Console.WriteLine($"Linename: {item.Linename}, Timestamp: {item.Timestamp}, AnotherProperty: {item.AnotherProperty}");
}
This approach ensures that your data is sorted first by Timestamp in descending order and then by AnotherProperty in the specified order.

