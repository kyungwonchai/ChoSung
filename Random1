using System;
using System.Drawing;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
using System.Windows.Forms;

public partial class MainForm : Form
{
    private string printSettingFilePath = @"C:\agent1\print_settings.dat";
    private PrintDocument printDocument = new PrintDocument();
    private PrintDialog printDialog = new PrintDialog();

    public MainForm()
    {
        InitializeComponent();

        // 이벤트 핸들러 등록
        printDocument.PrintPage += PrintDocument_PrintPage;
    }

    private void btnSavePrintSetting_Click(object sender, EventArgs e)
    {
        try
        {
            // PrintDialog의 PrinterSettings를 가져와서 직렬화하여 파일에 저장
            using (FileStream fs = new FileStream(printSettingFilePath, FileMode.Create))
            {
                BinaryFormatter formatter = new BinaryFormatter();
                formatter.Serialize(fs, printDialog.PrinterSettings);
            }
            MessageBox.Show("Print settings saved successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error saving print settings: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private void btnApplyPrintSetting_Click(object sender, EventArgs e)
    {
        try
        {
            // 파일에서 직렬화된 PrinterSettings를 역직렬화하여 PrintDialog의 PrinterSettings에 적용
            using (FileStream fs = new FileStream(printSettingFilePath, FileMode.Open))
            {
                BinaryFormatter formatter = new BinaryFormatter();
                printDialog.PrinterSettings = (PrinterSettings)formatter.Deserialize(fs);
            }
            MessageBox.Show("Print settings applied successfully.", "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
        catch (Exception ex)
        {
            MessageBox.Show("Error loading print settings: " + ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    private void btnPrint_Click(object sender, EventArgs e)
    {
        // PrintDialog를 통해 사용자가 설정한 인쇄 설정 가져오기
        if (printDialog.ShowDialog() == DialogResult.OK)
        {
            printDocument.PrinterSettings = printDialog.PrinterSettings; // PrintDocument에 인쇄 설정 적용
            printDocument.Print();
        }
    }

    private void PrintDocument_PrintPage(object sender, PrintPageEventArgs e)
    {
        // 실제 인쇄할 내용을 여기에 구현합니다.
        string contentToPrint = "Sample Print Content";
        Font printFont = new Font("Arial", 12);
        e.Graphics.DrawString(contentToPrint, printFont, Brushes.Black, 10, 10);
    }
}
