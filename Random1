import os
import textwrap

def create_csharp_blackbox_recorder():
    """
    요구사항에 맞춰 안정성과 직관성을 높인 C# 블랙박스 녹화 프로그램의
    전체 프로젝트 폴더 및 소스 코드를 생성합니다.
    """
    # --- 1. 프로젝트 폴더 생성 ---
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    project_base_path = os.path.join(desktop_path, "RPA_BlackBox_CS")
    os.makedirs(project_base_path, exist_ok=True)
    print(f"프로젝트 폴더를 '{project_base_path}'에 생성합니다.")

    # --- 2. .csproj 파일 생성 (프로젝트 설정) ---
    csproj_content = textwrap.dedent("""\
    <Project Sdk="Microsoft.NET.Sdk">
      <PropertyGroup>
        <OutputType>WinExe</OutputType>
        <TargetFramework>net6.0-windows</TargetFramework>
        <UseWindowsForms>true</UseWindowsForms>
        <ImplicitUsings>enable</ImplicitUsings>
        <Nullable>enable</Nullable>
        <ApplicationIcon>app.ico</ApplicationIcon>
      </PropertyGroup>

      <ItemGroup>
        <PackageReference Include="FFMpegCore" Version="5.1.0" />
      </ItemGroup>
      
      <ItemGroup>
        <Content Include="app.ico" />
      </ItemGroup>

    </Project>
    """)
    with open(os.path.join(project_base_path, "RPA_BlackBox_CS.csproj"), "w", encoding="utf-8") as f:
        f.write(csproj_content)
    print(".csproj 파일 생성 완료.")
    
    # --- 3. MainForm.cs 파일 생성 (핵심 소스 코드) ---
    mainform_cs_content = textwrap.dedent("""\
    using System;
    using System.Drawing;
    using System.Drawing.Imaging;
    using System.Windows.Forms;
    using System.IO;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using FFMpegCore; // NuGet 패키지 관리자에서 FFMpegCore 설치 필요

    public partial class MainForm : Form
    {
        private readonly System.Windows.Forms.Timer _captureTimer;
        private readonly List<Bitmap> _frameBuffer = new List<Bitmap>();
        private readonly string _outputDirectory = @"D:\\_RPA_BlackboxPC";
        private const int FRAMES_PER_MINUTE = 60;
        private bool _isEncoding = false;

        public MainForm()
        {
            InitializeComponent();
            
            // 타이머 설정 (1초 = 1000ms)
            _captureTimer = new System.Windows.Forms.Timer();
            _captureTimer.Interval = 1000;
            _captureTimer.Tick += CaptureTimer_Tick;
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // 프로그램 시작 시 바로 녹화 시작
            Directory.CreateDirectory(_outputDirectory);
            _captureTimer.Start();
            UpdateStatusLabel();
        }

        private async void CaptureTimer_Tick(object sender, EventArgs e)
        {
            // 화면 캡처
            try
            {
                var screenBounds = Screen.PrimaryScreen.Bounds;
                var frame = new Bitmap(screenBounds.Width, screenBounds.Height);
                using (var graphics = Graphics.FromImage(frame))
                {
                    graphics.CopyFromScreen(Point.Empty, Point.Empty, screenBounds.Size);
                }
                _frameBuffer.Add(frame);
            }
            catch(Exception ex)
            {
                Console.WriteLine($"[Error] Screen capture failed: {ex.Message}");
                // 캡처 실패 시 해당 프레임은 건너뜀
                return;
            }

            // 60프레임(1분)이 모였는지 확인
            if (_frameBuffer.Count >= FRAMES_PER_MINUTE && !_isEncoding)
            {
                _captureTimer.Stop(); // 인코딩 중에는 잠시 타이머 중지
                _isEncoding = true;
                
                // 인코딩할 프레임 목록을 새 리스트에 복사
                var framesToEncode = new List<Bitmap>(_frameBuffer);
                _frameBuffer.Clear();

                // UI가 멈추지 않도록 인코딩은 백그라운드 스레드에서 실행
                await Task.Run(() => EncodeVideo(framesToEncode));
                
                _isEncoding = false;
                _captureTimer.Start(); // 인코딩 완료 후 타이머 재시작
            }
            UpdateStatusLabel();
        }
        
        private void EncodeVideo(List<Bitmap> frames)
        {
            var videoFileName = $"RPA{DateTime.Now:yyyyMMddHHmmss}.mp4";
            var outputVideoPath = Path.Combine(_outputDirectory, videoFileName);
            var tempPath = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());
            Directory.CreateDirectory(tempPath);

            try
            {
                // 캡처된 비트맵들을 임시 이미지 파일로 저장
                var framePaths = new List<string>();
                for (int i = 0; i < frames.Count; i++)
                {
                    string frameFile = Path.Combine(tempPath, $"frame_{i:D4}.png");
                    frames[i].Save(frameFile, ImageFormat.Png);
                    framePaths.Add(frameFile);
                }

                // --- 30fps 영상 제작 (핵심) ---
                // 1초에 1장씩 찍은 이미지를(input framerate=1) 
                // 초당 30프레임의 부드러운 영상으로(output framerate=30) 만듭니다.
                FFMpeg.JoinImageSequence(outputVideoPath, 1, framePaths.ToArray());
                //FFMpegArguments
                //    .FromImageSequence(new ImageSequenceInfo { FrameRate = 1, FilePaths = framePaths.ToArray() })
                //    .OutputToFile(outputVideoPath, true, options => options
                //        .WithVideoCodec("libx264") // 효율적인 코덱 사용
                //        .WithFramerate(30))       // 출력 프레임률 30으로 설정
                //    .ProcessSynchronously();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Error] Video encoding failed: {ex.Message}");
            }
            finally
            {
                // 사용한 비트맵 리소스 즉시 해제
                foreach (var frame in frames)
                {
                    frame.Dispose();
                }
                // 임시 파일 및 폴더 삭제
                if (Directory.Exists(tempPath))
                {
                    Directory.Delete(tempPath, true);
                }
            }
        }

        private void UpdateStatusLabel()
        {
            statusLabel.Text = $"Status: Recording... [Frames: {_frameBuffer.Count}/{FRAMES_PER_MINUTE}]";
            if (_isEncoding)
            {
                statusLabel.Text = "Status: Encoding video... Please wait.";
            }
        }
        
        // --- Windows Forms Designer에서 자동 생성될 코드 ---
        private System.ComponentModel.IContainer components = null;
        private Label statusLabel;
        
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }
        
        private void InitializeComponent()
        {
            this.statusLabel = new System.Windows.Forms.Label();
            this.SuspendLayout();
            // 
            // statusLabel
            // 
            this.statusLabel.Dock = System.Windows.Forms.DockStyle.Fill;
            this.statusLabel.Font = new System.Drawing.Font("Segoe UI", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
            this.statusLabel.Location = new System.Drawing.Point(0, 0);
            this.statusLabel.Name = "statusLabel";
            this.statusLabel.Size = new System.Drawing.Size(400, 100);
            this.statusLabel.TabIndex = 0;
            this.statusLabel.Text = "Status: Initializing...";
            this.statusLabel.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
            // 
            // MainForm
            // 
            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 20F);
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(400, 100);
            this.Controls.Add(this.statusLabel);
            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.Name = "MainForm";
            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
            this.Text = "RPA BlackBox Recorder";
            this.Load += new System.EventHandler(this.MainForm_Load);
            this.ResumeLayout(false);
        }
    }
    """)
    with open(os.path.join(project_base_path, "MainForm.cs"), "w", encoding="utf-8") as f:
        f.write(mainform_cs_content)
    print("MainForm.cs 소스 코드 생성 완료.")

    # --- 4. Program.cs 파일 생성 (프로그램 진입점) ---
    program_cs_content = textwrap.dedent("""\
    internal static class Program
    {
        [STAThread]
        static void Main()
        {
            ApplicationConfiguration.Initialize();
            Application.Run(new MainForm());
        }
    }
    """)
    with open(os.path.join(project_base_path, "Program.cs"), "w", encoding="utf-8") as f:
        f.write(program_cs_content)
    print("Program.cs 파일 생성 완료.")
    
    # --- 5. 아이콘 파일 생성 (Base64 인코딩된 아이콘 데이터) ---
    # 간단한 빨간 점 모양의 아이콘
    ico_b64 = "AAABAAEAEBAAAAEAIABoBAAAFgAAACgAAAAQAAAAIAAAAAEAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////////////////////////////////////////////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAP8AAAD/AAAA/wAAAP8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/ycnJ/8nJyf/Jicn/yYmJ/8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/yYmJ/9KSUr/SklK/0pJSv9JSUr/Jicn/wAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/yYnJ/9KSUr/1tXV/9bV1f/W1dX/SklK/yYmJ/8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/Jicn/0pJSv/W1dX/sbGx/7Gxsf+xsbH/1tXV/0pJSv8mJyf/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8mJyf/SklK/9bV1f+xsbH/gH9//4B/f/+xsbH/1tXV/0pJSv8mJyf/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAYGBg/yYnJ/9KSUr/1tXV/7Gxsf+Af3//gH9//7Gxsf/W1dX/SklK/yYmJ/9gYGD/AAAAAAAAAAAAAAAAAAAAAP8AAAD/Jicn/0pJSv/W1dX/sbGx/4B/f/+Af3//sbGx/9bV1f/SklK/yYnJ/8AAAD/AAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/yYmJ/9KSUr/1tXV/9bV1f/W1dX/SklK/yYmJ/8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/yYnJ/9KSUr/SklK/0pJSv9KSUr/Jicn/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/ycnJ/8nJyf/Jicn/yYmJ/8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////wAAAP8AAAD/AAAA/wAAAP8AAAD//////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//8AAPH/AADg/wAA4H8AAMB/AACAPwAAgB8AAAAPAAAADwAAgB8AAIA/AADAfwAA4H8AAOD/AAPH/wD//wAA"
    import base64
    with open(os.path.join(project_base_path, "app.ico"), "wb") as f:
        f.write(base64.b64decode(ico_b64))
    print("app.ico 아이콘 파일 생성 완료.")
    
    print("\n🎉 모든 파일 생성이 완료되었습니다!")
