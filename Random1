 프로젝트를 시작하기 위해 C#을 사용하여 Windows PC에서 최근 5일 이내에 수정된 파일을 찾고, 해당 파일의 정보를 수집한 뒤 MSSQL 서버로 데이터를 전송하고, WPF UI에서 결과를 시각화하는 방법에 대한 기본 코드를 제공하겠습니다.

1. 파일 정보 수집
C#에서 System.IO 네임스페이스를 사용하여 최근 5일 동안 변경된 파일들을 찾고, 파일의 크기와 경로를 수집합니다. 이 정보는 나중에 SQL 서버로 전송됩니다.

csharp
Copy code
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

class FileScanner
{
    public static void ScanFiles(string directory)
    {
        DirectoryInfo dirInfo = new DirectoryInfo(directory);
        List<FileInfo> files = dirInfo.GetFiles("*.*", SearchOption.AllDirectories)
                                      .Where(f => f.LastWriteTime >= DateTime.Now.AddDays(-5))
                                      .ToList();
        
        foreach (FileInfo file in files)
        {
            Console.WriteLine($"File: {file.FullName}, Size: {file.Length}");
        }
    }

    static void Main()
    {
        ScanFiles(@"C:\Path\To\Directory");  // 대상 디렉토리 경로 설정
    }
}
2. 데이터를 MSSQL 서버로 전송
수집된 파일 정보를 MSSQL 서버로 전송하는 간단한 예제입니다. 이 코드는 SqlConnection과 SqlCommand를 사용합니다.

csharp
Copy code
using System;
using System.Data.SqlClient;

class DataUploader
{
    public static void UploadData(string connectionString, string filePath, long fileSize)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();
            string query = "INSERT INTO FileData (FilePath, FileSize) VALUES (@FilePath, @FileSize)";

            using (SqlCommand command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@FilePath", filePath);
                command.Parameters.AddWithValue("@FileSize", fileSize);
                command.ExecuteNonQuery();
            }
        }
    }
}
3. WPF UI로 결과 시각화
WPF 애플리케이션에서 데이터를 시각화하기 위한 XAML과 C# 코드 조각입니다. 실제 데이터 연동은 ViewModel을 통해 MVVM 패턴을 적용할 수 있습니다.

xml
Copy code
<!-- MainWindow.xaml -->
<Window x:Class="DiskUsageAnalyzer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Disk Usage" Height="450" Width="800">
    <Grid>
        <TreeView x:Name="tvFileSystem">
        </TreeView>
    </Grid>
</Window>
csharp
Copy code
// MainWindow.xaml.cs
using System.Windows;

namespace DiskUsageAnalyzer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            LoadFileSystemObjects();
        }

        private void LoadFileSystemObjects()
        {
            // 여기에 파일 시스템 객체 로드 로직 추가
        }
    }
}
위의 코드는 프로젝트의 시작점을 제공합니다. 각 단계를 자세히 개발하고, 필요에 따라 추가 기능을 구현하여 프로젝트를 완성