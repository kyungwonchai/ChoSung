베이스의 모든 테이블 데이터를 하나씩 순서대로 내려받고 Excel로 내보내는 기능을 구현하려면 다음 단계를 따르면 됩니다. C#과 WPF를 사용하여 코드를 작성합니다.

1. 필요한 라이브러리 추가
Oracle.ManagedDataAccess NuGet 패키지를 추가합니다. 이 패키지는 Oracle 데이터베이스와 통신하기 위해 필요합니다.
DevExpress.Export와 DevExpress.Xpf.Grid를 추가하여 GridControl에서 데이터를 Excel로 내보낼 수 있게 합니다.
2. Oracle 데이터베이스 연결 설정
OracleConnection을 설정하여 데이터베이스에 연결합니다.
3. 데이터 로딩 및 Excel로 내보내기
각 테이블에 대해 데이터를 로드하고 DevExpress의 내보내기 기능을 사용하여 Excel 파일로 저장합니다.
아래는 이를 구현하기 위한 예시 코드입니다:

csharp
코드 복사
using System.Data;
using Oracle.ManagedDataAccess.Client;
using DevExpress.Xpf.Grid;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private string connectionString = "User Id=your_user_id;Password=your_password;Data Source=your_data_source";

        public MainWindow()
        {
            InitializeComponent();
            ExportAllTables();
        }

        private void ExportAllTables()
        {
            using (OracleConnection connection = new OracleConnection(connectionString))
            {
                connection.Open();
                OracleCommand command = new OracleCommand("SELECT table_name FROM user_tables", connection);
                OracleDataAdapter adapter = new OracleDataAdapter(command);
                DataTable tables = new DataTable();
                adapter.Fill(tables);

                foreach (DataRow row in tables.Rows)
                {
                    string tableName = row["table_name"].ToString();
                    ExportTableData(connection, tableName);
                }
            }
        }

        private void ExportTableData(OracleConnection connection, string tableName)
        {
            OracleCommand command = new OracleCommand($"SELECT * FROM {tableName}", connection);
            OracleDataAdapter adapter = new OracleDataAdapter(command);
            DataTable data = new DataTable();
            adapter.Fill(data);

            gridControl.ItemsSource = data.DefaultView;  // DevExpress GridControl 설정

            // 파일 경로와 함께 Excel로 내보내기
            string filePath = $"C:\\Agent\\{tableName}.xlsx";
            gridControl.View.ExportToXlsx(filePath);

            MessageBox.Show($"{tableName} has been exported to Excel.");
        }
    }
}
주의 사항
이 코드는 모든 테이블을 불러와 각 테이블의 데이터를 순차적으로 Excel 파일로 저장합니다. UI 스레드를 차단할 수 있으므로, 비동기 처리나 백그라운드 작업을 고려하는 것이 좋습니다.
DevExpress의 ExportToXlsx 메소드는 UI 스레드에서 실행되어야 합니다. 필요에 따라 Dispatcher.Invoke를 사용하여 UI 스레드에서 호출해야 할 수도 있습니다.
사용자 인증 정보와 데이터 소스는 보안을 고려하여 적절히 관리해야 합