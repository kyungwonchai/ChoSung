네, 사내망의 프록시 및 사설 인증서 문제로 인해 안드로이드 최신 버전에서 빌드가 실패하는 상황은 매우 흔하며, 해결을 위해 JDK부터 안드로이드 스튜디오, Gradle까지 전체 인프라에 걸쳐 일관된 설정이 필요합니다.

요청하신 대로, 설정의 원리를 포함하여 필요한 모든 설정과 모든 옵션을 상세하고 체계적으로 안내해 드리겠습니다. 각 설정이 왜 필요하고 어떻게 서로 연결되는지에 초점을 맞춰 설명하겠습니다.

목차
전체 프로세스 요약: 설정의 전체적인 흐름을 이해합니다.

Part 1: JDK (Java Development Kit) 설정: 모든 자바 기반 도구의 기초가 되는 JDK를 설정합니다.

Part 2: 사내 인증서(Root CA) 설정: HTTPS 통신 오류(PKIX)를 해결합니다.

Part 3: 안드로이드 스튜디오(IDE) 프록시 설정: IDE 자체의 네트워크 통신을 설정합니다.

Part 4: Gradle 프록시 설정: 빌드 시스템의 네트워크 통신을 설정합니다.

Part 5: 최종 확인 및 트러블슈팅: 모든 설정을 적용하고 빌드를 확인하며, 문제 발생 시 해결 방법을 안내합니다.

1. 전체 프로세스 요약
사내 네트워크 환경에서 안드로이드 빌드를 성공시키기 위한 핵심은 모든 도구(JDK, 안드로이드 스튜디오, Gradle)가 사내 프록시를 통해 외부와 통신하고, 그 과정에서 사용되는 사설 인증서를 신뢰하도록 만드는 것입니다.

JDK 설치 및 JAVA_HOME 설정: 안드로이드 스튜디오와 Gradle이 사용할 JDK를 명확히 지정합니다.

사내 인증서 추출: 브라우저를 통해 회사의 Root CA 인증서 파일(.cer)을 확보합니다.

JDK에 인증서 등록: JDK의 신뢰 저장소(cacerts)에 사내 인증서를 추가하여, 자바 기반의 모든 애플리케이션(스튜디오, Gradle 포함)이 사내망의 HTTPS 통신을 신뢰하도록 합니다.

안드로이드 스튜디오 프록시 설정: 플러그인 설치, SDK 업데이트 등 IDE 자체의 통신을 위해 프록시 정보를 입력합니다.

Gradle 프록시 설정: 라이브러리 다운로드 등 실제 빌드 과정에서 사용하는 Gradle의 통신을 위해 프록시 정보를 gradle.properties 파일에 입력합니다.

이 5가지 단계가 모두 유기적으로 연결되어야만 빌드가 성공합니다.

2. Part 1: JDK (Java Development Kit) 설정
✅ 원리 및 중요성
안드로이드 앱은 코틀린이나 자바로 작성되지만, 결국 JVM(Java Virtual Machine) 바이트코드로 컴파일됩니다. 안드로이드 스튜디오와 Gradle 모두 자바(JVM) 위에서 동작하는 프로그램입니다. 따라서 이 모든 도구의 기반이 되는 JDK를 올바르게 설정하는 것이 가장 첫 번째 단계입니다. 특히, 이후에 진행할 인증서 설정은 바로 이 JDK의 신뢰 저장소에 직접 추가하는 것이므로, 어떤 JDK를 사용하는지 명확히 알고 설정해야 합니다.

✅ 설치법 (권장: Adoptium Temurin)
Adoptium Temurin 사이트 접속: https://adoptium.net/

LTS 버전 다운로드: 특별한 이유가 없다면 안정적인 LTS(Long-Term Support) 버전 중 JDK 17 또는 JDK 21을 권장합니다. (최신 안드로이드 Gradle 플러그인은 JDK 17 이상을 요구합니다.)

설치: 다운로드한 msi 설치 파일을 실행하여 기본 옵션으로 설치합니다. 설치 과정에서 Set JAVA_HOME variable 옵션을 선택하면 환경 변수 설정이 자동으로 이루어져 편리합니다.

✅ 설정법 (환경 변수)
설치 시 JAVA_HOME 설정 옵션을 선택하지 않았거나, 수동으로 확인/설정해야 할 경우 아래와 같이 진행합니다.

시스템 속성 열기: Win + R -> sysdm.cpl 입력 후 엔터

환경 변수: 고급 탭 -> 환경 변수 버튼 클릭

시스템 변수 설정:

JAVA_HOME:

새로 만들기를 클릭합니다.

변수 이름: JAVA_HOME

변수 값: JDK가 설치된 경로를 입력합니다. (예: C:\Program Files\Eclipse Adoptium\jdk-17.0.11.9-hotspot)

Path:

시스템 변수 목록에서 Path를 선택하고 편집을 클릭합니다.

새로 만들기를 클릭하고 %JAVA_HOME%\bin 을 추가합니다.

목록의 가장 위로 이동시켜 다른 자바 경로보다 우선적으로 인식되게 합니다.

확인: CMD 또는 PowerShell을 열고 아래 명령어를 입력하여 버전이 올바르게 출력되는지 확인합니다.

Bash

java -version
javac -version
echo %JAVA_HOME%
3. Part 2: 사내 인증서(Root CA) 설정
✅ 원리 및 중요성
사내에서는 보안상의 이유로 모든 HTTPS 통신을 프록시 서버가 중간에서 가로채(MITM, Man-in-the-Middle) 내용을 검사한 후 다시 암호화하여 전달합니다. 이때 프록시 서버는 회사의 자체 **사설 인증서(Root CA)**를 사용하여 재암호화를 합니다.

Gradle이 라이브러리를 다운로드 받는 Maven Central 같은 저장소는 원래 공인된 인증서를 사용하지만, 사내망에서는 이 통신이 프록시에 의해 가로채져 사설 인증서로 재서명됩니다. JDK는 기본적으로 공인된 인증기관(CA)의 인증서만 신뢰하기 때문에, 이 사설 인증서를 알지 못해 "신뢰할 수 없는 인증서"로 판단하고 연결을 끊어버립니다. 이것이 바로 PKIX path building failed 오류의 원인입니다.

해결책은 JDK의 신뢰할 수 있는 인증서 목록(Trust Store)인 cacerts 파일에 우리 회사의 사설 인증서를 직접 추가하여 "이 인증서는 믿어도 된다"고 알려주는 것입니다.

✅ Step 1: 인증서 파일(.cer) 확보
가장 쉬운 방법은 웹 브라우저를 통해 확보하는 것입니다.

Chrome 또는 Edge 브라우저에서 https://로 시작하는 아무 사이트나 접속합니다. (예: https://www.google.com)

주소창의 자물쇠 아이콘을 클릭합니다.

이 연결은 안전합니다 -> 인증서가 유효합니다를 클릭합니다.

인증서 보기 창에서 인증 경로 탭을 선택합니다.

가장 위에 있는 **최상위 인증서(Root CA)**를 선택합니다. 보통 회사 이름이나 관련 명칭이 들어있습니다.

인증서 보기 버튼을 클릭합니다.

새로 열린 창에서 자세히 탭으로 이동한 후 파일에 복사 버튼을 클릭합니다.

인증서 내보내기 마법사가 시작되면 다음을 클릭합니다.

Base-64 encoded X.509 (.CER) 형식을 선택하고 다음을 클릭합니다.

찾아보기를 통해 파일을 저장할 위치를 지정하고 파일 이름을 my-corp-cert.cer 와 같이 알기 쉽게 지정합니다.

마법사를 완료하여 인증서 파일을 저장합니다.

✅ Step 2: JDK의 Trust Store에 인증서 추가
관리자 권한으로 CMD 또는 PowerShell 실행: keytool은 시스템 폴더에 접근해야 하므로 관리자 권한이 필수입니다.

JDK의 security 폴더로 이동:
keytool.exe는 %JAVA_HOME%\bin에 있고, 인증서 저장소 cacerts는 %JAVA_HOME%\lib\security에 있습니다. 작업을 편하게 하기 위해 bin 폴더로 이동합니다.

PowerShell

cd $env:JAVA_HOME\bin
keytool 명령어로 인증서 추가: 아래 명령어를 실행하여 앞서 저장한 인증서 파일을 cacerts에 추가합니다.

Bash

./keytool -importcert -alias "my-corp-ca" -file "C:\path\to\my-corp-cert.cer" -keystore "..\lib\security\cacerts" -storepass changeit
-importcert: 인증서를 추가하는 명령어입니다.

-alias "my-corp-ca": 추가할 인증서에 대한 별칭입니다. 나중에 삭제하거나 확인할 때 사용되므로 식별하기 쉬운 이름으로 지정합니다. 중복되지 않게 주의해야 합니다.

-file "C:\path\to\my-corp-cert.cer": Step 1에서 저장한 인증서 파일의 전체 경로입니다.

-keystore "..\lib\security\cacerts": 인증서를 추가할 대상 저장소 파일입니다. 현재 위치가 bin이므로 상대 경로(..\lib\security\cacerts)를 사용했습니다. $env:JAVA_HOME\lib\security\cacerts와 같이 절대 경로를 사용해도 됩니다.

-storepass changeit: cacerts 파일의 기본 비밀번호입니다. 대부분의 JDK에서 changeit으로 고정되어 있습니다.

신뢰 여부 확인: 명령어를 실행하면 인증서 정보를 보여주며 마지막에 "이 인증서를 신뢰하겠습니까? [아니오]:" 라고 묻습니다. y 또는 yes를 입력하고 엔터를 누릅니다.

완료: "인증서가 키 저장소에 추가되었습니다." 라는 메시지가 나오면 성공입니다.

4. Part 3: 안드로이드 스튜디오(IDE) 프록시 설정
이 설정은 안드로이드 스튜디오 IDE 자체(플러그인, 안드로이드 SDK 다운로드 등)가 프록시를 통해 인터넷에 연결되도록 합니다.

File -> Settings (또는 Ctrl+Alt+S) 로 이동합니다.

Appearance & Behavior -> System Settings -> HTTP Proxy로 이동합니다.

Manual proxy configuration을 선택하고 HTTP 라디오 버튼을 선택합니다.

Host name: 사내 프록시 서버의 주소(IP 또는 도메인)를 입력합니다.

Port number: 프록시 서버의 포트 번호를 입력합니다.

Proxy authentication: 프록시 서버에 인증이 필요하다면 Proxy authentication을 체크하고 사내 계정(ID)과 비밀번호를 입력합니다.

Check connection 버튼을 클릭하고 임의의 URL(예: https://www.google.com)을 입력하여 "Connection successful" 메시지가 뜨는지 확인합니다.

OK 또는 Apply를 눌러 저장합니다.

5. Part 4: Gradle 프록시 설정
가장 중요한 부분입니다. 안드로이드 스튜디오 설정과 별개로, 실제 빌드를 수행하는 Gradle이 외부 라이브러리를 다운로드받기 위한 프록시 설정이 반드시 필요합니다.

✅ 원리
Gradle은 gradle.properties 파일에 정의된 설정을 읽어 빌드 환경을 구성합니다. 여기에 프록시 정보를 시스템 속성(System Property) 형태로 지정해주면, Gradle이 실행하는 JVM이 해당 프록시 설정을 사용하여 네트워크 통신을 하게 됩니다.

✅ 설정법 (gradle.properties 파일 수정)
이 파일은 두 군데에 위치할 수 있습니다.

전역(Global) 설정: 모든 프로젝트에 공통으로 적용됩니다. (권장)

경로: C:\Users\<사용자이름>\.gradle\gradle.properties

프로젝트별 설정: 해당 프로젝트에만 적용됩니다.

경로: <프로젝트 루트 폴더>\gradle.properties

사내 개발 환경에서는 전역 설정 파일에 한 번만 설정해두는 것이 편리합니다. C:\Users\<사용자이름>\.gradle 폴더에 gradle.properties 파일이 없다면 직접 생성합니다.

파일을 열고 아래 내용을 그대로 복사하여 붙여넣고, 자신의 환경에 맞게 값을 수정합니다.

Properties

# -----------------------------------------------------------------------------
# Gradle Proxy Settings
# -----------------------------------------------------------------------------
# 이 파일의 위치: C:/Users/<사용자이름>/.gradle/gradle.properties
# -----------------------------------------------------------------------------

# HTTP Proxy 설정
systemProp.http.proxyHost=your.proxy.server.com
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=your_user_id
systemProp.http.proxyPassword=your_password
systemProp.http.nonProxyHosts=localhost|127.0.0.1|*.your.corp.domain

# HTTPS Proxy 설정 (HTTP와 동일하게 설정하는 경우가 많음)
systemProp.https.proxyHost=your.proxy.server.com
systemProp.https.proxyPort=8080
systemProp.https.proxyUser=your_user_id
systemProp.https.proxyPassword=your_password
systemProp.https.nonProxyHosts=localhost|127.0.0.1|*.your.corp.domain
✅ 모든 옵션 설명
systemProp.http.proxyHost: HTTP 프록시 서버 주소

systemProp.http.proxyPort: HTTP 프록시 서버 포트

systemProp.http.proxyUser: 프록시 인증 아이디 (인증이 필요 없는 경우 이 라인과 password 라인 삭제)

systemProp.http.proxyPassword: 프록시 인증 비밀번호

systemProp.http.nonProxyHosts: 프록시를 거치지 않을 예외 호스트 목록. | 문자로 구분합니다. localhost와 127.0.0.1은 필수로 넣고, 사내 내부망에서만 접근 가능한 서버(예: 사내 Nexus, GitLab)가 있다면 *.your.corp.domain 과 같이 와일드카드를 사용하여 추가합니다.

systemProp.https.*: HTTPS 통신을 위한 설정입니다. 매우 중요합니다. 대부분의 라이브러리 저장소는 HTTPS를 사용하므로 이 부분이 누락되면 빌드가 실패합니다. 보통 HTTP 설정과 동일한 값을 가집니다.

6. Part 5: 최종 확인 및 트러블슈팅
모든 설정을 마쳤다면, 변경 사항이 완전히 적용되도록 다음 단계를 진행합니다.

안드로이드 스튜디오 완전 종료 후 재시작: 가장 확실한 방법입니다.

캐시 무효화 및 재시작 (Invalidate Caches / Restart):

File -> Invalidate Caches... 선택

Clear file system cache and Local History 등 모든 옵션을 체크하고 Invalidate and Restart 클릭

프로젝트 클린 및 리빌드:

Build -> Clean Project

Build -> Rebuild Project

빈 파일 빌드: 새 Kotlin 파일을 하나 추가한 후, Build -> Make Project 를 실행하여 오류 없이 빌드가 성공하는지 최종 확인합니다.

🚨 트러블슈팅
오류: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target

원인: JDK의 cacerts에 인증서가 제대로 추가되지 않았거나, 잘못된 JDK에 추가한 경우입니다.

해결: File -> Settings -> Build, Execution, Deployment -> Build Tools -> Gradle 에서 Gradle JDK가 내가 인증서를 추가한 JDK와 동일한지 확인하세요. keytool -list -v -keystore "..\lib\security\cacerts" -storepass changeit 명령어로 추가한 인증서의 alias가 목록에 보이는지 확인해보세요.

오류: Connect timed out 또는 Connection refused

원인: 프록시 서버 주소, 포트 정보가 잘못되었거나, 방화벽에 의해 연결이 차단된 경우입니다.

해결: gradle.properties 파일의 proxyHost, proxyPort 정보에 오타가 없는지 다시 한번 확인하세요. Check connection 기능으로 연결 자체는 성공하는지 확인하세요.

오류: 407 Proxy Authentication Required

원인: 프록시 인증 정보(ID, 비밀번호)가 틀렸거나 누락된 경우입니다.

해결: gradle.properties 파일의 proxyUser, proxyPassword를 확인하세요. 특수문자가 포함된 비밀번호의 경우 문제가 될 수 있으니 확인이 필요합니다.

이 가이드의 모든 단계를 순서대로 정확하게 따라 하시면, 사내망에서도 원활하게 최신 안드로이드 프로젝트를 빌드하실 수 있을 것입니다.

Gemini에게 수정 가능한 문서나 코드를 작성해 달라고 해 보세요.

사용해 보기






동영상
