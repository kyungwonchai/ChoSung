네, 엑셀 자동화에서 클래스 모듈을 사용하는 기본적인 실용 예제를 들어드릴게요. 클래스 모듈이 왜 유용한지 이유도 자세히 설명해 드리겠습니다.

시나리오:

엑셀 시트에 재고 목록 데이터가 있다고 가정해 봅시다. 각 행은 하나의 재고 품목을 나타내며, 품목 이름, 수량, 단가 정보가 있습니다. 우리는 이 데이터를 읽어서 각 품목의 재고 가치(수량 * 단가)를 계산하고, 전체 재고의 총 가치를 구하려고 합니다.

클래스 모듈을 사용하지 않는 일반적인 방법:

표준 모듈에서 데이터를 직접 읽고 계산하고 출력합니다.

VBA

' 표준 모듈 (Module1 등)

Sub ProcessInventoryData_Standard()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long
    Dim itemName As String
    Dim quantity As Double
    Dim unitPrice As Double
    Dim stockValue As Double
    Dim totalStockValue As Double

    Set ws = ThisWorkbook.Sheets("재고목록") ' 시트 이름은 실제에 맞게 변경

    ' 데이터가 A, B, C 열에 있다고 가정
    ' A열: 품목 이름, B열: 수량, C열: 단가

    lastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
    totalStockValue = 0

    ' 헤더 행 제외 (2행부터 시작)
    For i = 2 To lastRow
        itemName = ws.Cells(i, "A").Value
        quantity = ws.Cells(i, "B").Value
        unitPrice = ws.Cells(i, "C").Value

        ' 재고 가치 계산
        stockValue = quantity * unitPrice

        ' 전체 재고 가치에 더하기
        totalStockValue = totalStockValue + stockValue

        ' (필요하다면 각 품목의 재고 가치를 D열에 쓸 수도 있습니다)
        ' ws.Cells(i, "D").Value = stockValue
    Next i

    ' 결과 출력
    MsgBox "전체 재고 총 가치: " & Format(totalStockValue, "#,##0") & "원"

End Sub
이 코드는 잘 작동합니다. 하지만 데이터가 복잡해지거나, 각 품목에 대해 수행할 작업(메서드)이 많아지면 코드가 길고 복잡해지며 관리하기 어려워집니다.

클래스 모듈을 사용하는 방법:

클래스 모듈 생성: '삽입' -> '클래스 모듈'을 클릭하고 이름을 InventoryItem으로 변경합니다.

클래스 모듈(InventoryItem) 코드 작성:

VBA

' InventoryItem 클래스 모듈

'-----------------------------------------------------
' 속성(Properties) 정의
' 각 InventoryItem 객체가 가질 데이터 항목들입니다.
'-----------------------------------------------------

' 품목 이름
Private pItemName As String

Public Property Get ItemName() As String
    ItemName = pItemName
End Property

Public Property Let ItemName(Value As String)
    pItemName = Value
End Property

' 수량
Private pQuantity As Double ' 수량이 정수 아닐 수도 있으니 Double
' Private pQuantity As Long ' 수량이 항상 정수라면 Long

Public Property Get Quantity() As Double
    Quantity = pQuantity
End Property

Public Property Let Quantity(Value As Double)
    If Value >= 0 Then
        pQuantity = Value
    Else
        ' 유효성 검사: 수량은 음수일 수 없음
        Err.Raise Number:=vbObjectError + 1000, _
                  Source:="InventoryItem Class", _
                  Description:="수량은 0보다 작을 수 없습니다."
    End If
End Property

' 단가
Private pUnitPrice As Double ' 단가가 소수점 있을 수 있으니 Double
' Private pUnitPrice As Currency ' 금액 계산에 Currency 사용 권장 (오차 방지)

Public Property Get UnitPrice() As Double
    UnitPrice = pUnitPrice
End Get

Public Property Let UnitPrice(Value As Double)
    If Value >= 0 Then
        pUnitPrice = Value
    Else
        ' 유효성 검사: 단가는 음수일 수 없음
         Err.Raise Number:=vbObjectError + 1000, _
                  Source:="InventoryItem Class", _
                  Description:="단가는 0보다 작을 수 없습니다."
    End If
End Property

'-----------------------------------------------------
' 계산된 속성 (Calculated Property) 정의
' 이미 가진 속성들로 계산되는 값입니다.
'-----------------------------------------------------

' 재고 가치 (수량 * 단가)
' Property Get만 있습니다. 값을 설정할 수 없습니다.
Public Property Get StockValue() As Double
    StockValue = pQuantity * pUnitPrice
End Property

'-----------------------------------------------------
' 메서드(Methods) 정의
' InventoryItem 객체가 수행할 수 있는 동작입니다.
' 예시로, 품목 정보와 재고 가치를 문자열로 반환하는 메서드
'-----------------------------------------------------

Public Function GetItemDetails() As String
    GetItemDetails = "품목: " & pItemName & ", 수량: " & pQuantity & _
                     ", 단가: " & pUnitPrice & ", 재고 가치: " & Format(StockValue, "#,##0")
End Function
표준 모듈 코드 수정: 이제 InventoryItem 클래스를 사용하여 데이터를 처리합니다.

VBA

' 표준 모듈 (Module1 등)

Sub ProcessInventoryData_UsingClass()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long

    ' InventoryItem 클래스의 인스턴스를 담을 컬렉션
    Dim inventoryCollection As Collection
    ' 컬렉션에서 개별 InventoryItem 인스턴스를 꺼낼 때 사용할 변수
    Dim currentItem As InventoryItem

    Dim totalStockValue As Double

    ' 컬렉션 초기화
    Set inventoryCollection = New Collection

    Set ws = ThisWorkbook.Sheets("재고목록") ' 시트 이름은 실제에 맞게 변경

    ' 데이터가 A, B, C 열에 있다고 가정
    ' A열: 품목 이름, B열: 수량, C열: 단가

    lastRow = ws.Cells(Rows.Count, "A").End(xlUp).Row
    totalStockValue = 0

    ' 헤더 행 제외 (2행부터 시작)
    For i = 2 To lastRow
        ' InventoryItem 클래스의 새로운 인스턴스(객체) 생성
        Set currentItem = New InventoryItem

        ' 시트에서 데이터를 읽어와 객체의 속성에 할당
        currentItem.ItemName = ws.Cells(i, "A").Value
        currentItem.Quantity = ws.Cells(i, "B").Value
        currentItem.UnitPrice = ws.Cells(i, "C").Value

        ' 생성된 객체를 컬렉션에 추가
        inventoryCollection.Add currentItem

        ' 더 이상 필요 없는 currentItem 참조 해제 (선택 사항이지만 좋은 습관)
        Set currentItem = Nothing

    Next i

    ' 컬렉션에 담긴 각 InventoryItem 객체를 순회하며 처리
    For Each currentItem In inventoryCollection
        ' 객체의 속성(StockValue)에 접근하여 값 사용
        totalStockValue = totalStockValue + currentItem.StockValue

        ' (필요하다면 객체의 메서드 호출)
        ' Debug.Print currentItem.GetItemDetails()
    Next currentItem

    ' 결과 출력
    MsgBox "전체 재고 총 가치: " & Format(totalStockValue, "#,##0") & "원"

    ' 컬렉션 및 객체 참조 해제 (선택 사항)
    Set inventoryCollection = Nothing

End Sub
클래스 모듈을 사용했을 때의 장점 (왜 이렇게 하는가?):

가독성과 이해도 향상 (Readability & Understandability):

표준 모듈 코드에서 ws.Cells(i, "B").Value * ws.Cells(i, "C").Value 라고 쓰는 대신, currentItem.StockValue 라고 씁니다. 코드를 읽을 때 currentItem이 '무엇'을 나타내는지, .StockValue가 '무엇'인지 훨씬 직관적으로 알 수 있습니다.
데이터를 처리하는 코드가 복잡해지지 않고, InventoryItem 객체를 생성하고 컬렉션에 담은 후 순회하는 흐름이 명확해집니다.
캡슐화 (Encapsulation):

재고 품목 하나의 '데이터(속성)'(ItemName, Quantity, UnitPrice)와 그 데이터를 가지고 수행하는 '계산/로직'(StockValue 계산, GetItemDetails 메서드)이 InventoryItem 클래스 안에 하나로 묶입니다.
이렇게 하면 데이터와 로직이 분리되지 않고 응집되어 코드를 관리하기 쉬워집니다. 예를 들어, 재고 가치 계산 방식이 변경되면 InventoryItem 클래스 모듈의 StockValue 속성 부분만 수정하면 되고, 이 클래스를 사용하는 모든 곳에 자동으로 반영됩니다.
재사용성 (Reusability):

InventoryItem 클래스는 재고 품목이라는 '개념'을 코드로 정의한 것입니다. 이 클래스는 이 예제뿐만 아니라, 다른 서브 프로시저나 다른 통합 문서에서도 재고 품목 데이터를 다룰 때 재사용할 수 있습니다.
한번 잘 만들어 놓은 클래스는 여러 곳에서 '찍어내듯이' 객체를 생성하여 사용할 수 있습니다.
유지보수 용이성 (Maintainability):

새로운 속성(예: 입고일자, 공급처)이나 메서드(예: 재고 부족 알림 메서드)를 추가해야 할 경우, InventoryItem 클래스 모듈에만 코드를 추가/수정하면 됩니다.
코드가 여러 모듈에 분산되어 있을 때보다 변경 사항을 적용하기 쉽고, 오류 발생 시 원인을 찾기도 수월해집니다.
객체 지향적 사고 (Object-Oriented Thinking):

실제 세계의 '재고 품목'이라는 대상을 코드 세계의 '객체'로 모델링하는 방식입니다. 이는 복잡한 시스템을 만들 때 각 구성 요소를 독립적인 객체로 생각하고 그 객체들 간의 상호작용으로 프로그램을 설계하는 데 도움이 됩니다. 코드가 더 구조적이고 확장 가능해집니다.
단점 (처음에는):

처음 클래스 모듈 개념을 접하면 표준 모듈만 쓸 때보다 코드가 복잡해 보이고 익숙해지는 데 시간이 걸릴 수 있습니다.
간단한 작업에는 오히려 표준 모듈만 쓰는 것이 더 빠르고 편할 수 있습니다.
결론: