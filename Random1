이해했습니다. 카메라의 미리보기에서 특정 영역(노란 테두리 안쪽)만 인식하도록 설정하려는 것입니다. 이를 위해, 카메라에서 제공되는 이미지를 처리할 때 특정 영역만을 사용하여 바코드나 QR 코드를 인식하도록 설정할 수 있습니다.

다음은 노란 테두리 안쪽 영역만 인식되도록 하는 수정된 코드입니다.

1. XML 레이아웃 (activity_main.xml)
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- 카메라 미리보기 -->
    <androidx.camera.view.PreviewView
        android:id="@+id/viewFinder"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_centerInParent="true" />

    <!-- 인식 영역 (노란색 테두리) -->
    <View
        android:id="@+id/focus_area"
        android:layout_width="100dp"
        android:layout_height="100dp"
        android:layout_centerInParent="true"
        android:background="@drawable/focus_border" />

    <!-- 인식된 텍스트를 보여줄 영역 -->
    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. Drawable 리소스 (focus_border.xml)
노란색 테두리를 만드는 focus_border.xml입니다.

xml
코드 복사
<shape xmlns:android="http://schemas.android.com/apk/res/android">
    <solid android:color="@android:color/transparent" />
    <stroke
        android:width="2dp"
        android:color="#FFFF00" /> <!-- 노란색 테두리 -->
</shape>
3. Kotlin 코드 (MainActivity.kt)
카메라 미리보기에서 노란 테두리 안쪽 부분만 인식하도록 수정된 코드를 제공합니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.graphics.Rect
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var focusArea: View

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)
        focusArea = findViewById(R.id.focus_area)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val rotationDegrees = imageProxy.imageInfo.rotationDegrees

            // 미리보기 화면에서 포커스 영역의 위치를 계산
            val viewRect = Rect(
                focusArea.left,
                focusArea.top,
                focusArea.right,
                focusArea.bottom
            )

            // 전체 이미지의 크기와 포커스 영역의 위치를 기반으로 관심 영역 계산
            val cropRect = Rect(
                (viewRect.left * mediaImage.width / viewFinder.width),
                (viewRect.top * mediaImage.height / viewFinder.height),
                (viewRect.right * mediaImage.width / viewFinder.width),
                (viewRect.bottom * mediaImage.height / viewFinder.height)
            )

            // 관심 영역을 설정한 후 이미지 인식 수행
            val image = InputImage.fromMediaImage(mediaImage, rotationDegrees).apply {
                cropRect = cropRect
            }

            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 변경 사항:
인식 영역 제한:

processImageProxy 메서드에서 노란 테두리 안쪽 영역만 인식되도록 이미지를 잘라냅니다.
이를 위해 cropRect를 설정하여 바코드 인식이 특정 영역(노란 테두리 안쪽)에서만 이루어지도록 합니다.
View 크기 기반 계산:

카메라 미리보기의 전체 크기와 포커스 영역의 크기를 기반으로 Rect를 계산하여, 인식하고자 하는 영역만 잘라내어 사용합니다.
이 코드로 카메라 미리보기에서 노란 테두리 안쪽 영역만 인식되도록 설정할 수 있습니다. 이 방법을 통해 초점이 더 잘 맞춰지며, 특정 영역에 대해서만 바코드 인식이 이루어지도록 할 수 있습니