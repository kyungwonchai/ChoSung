gnalR 처리를 전담하는 클래스를 따로 두고, 이를 MainViewModel에서 호출하는 구조로 변경하겠습니다. 이 방식은 SignalRClient 클래스를 별도로 정의하여 SignalR 통신만을 전담하도록 하고, MainViewModel에서는 해당 클래스를 생성하여 필요한 시점에 호출하는 방식입니다. SignalRClient 클래스는 메시지를 보내고, 에러 발생 시 자동으로 로그를 기록하며 프로그램 종료 없이 처리합니다.

1. SignalRClient 클래스 (SignalR 전담 클래스)
csharp
코드 복사
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR.Client;

public class SignalRClient
{
    private HubConnection _hubConnection;
    public event EventHandler<string> LogMessageReceived;  // 로그 이벤트

    public SignalRClient(string hubUrl)
    {
        InitializeSignalRConnection(hubUrl);
    }

    // SignalR 연결 초기화 함수
    private async void InitializeSignalRConnection(string hubUrl)
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .Build();

            await _hubConnection.StartAsync();
            Log("SignalR Connection Started");  // 연결 성공 로그
        }
        catch (Exception ex)
        {
            LogError(ex.Message);  // 연결 오류 시 로그 기록
        }
    }

    // 메시지 전송 함수
    public async Task SendMessageAsync(string message)
    {
        try
        {
            if (_hubConnection != null && _hubConnection.State == HubConnectionState.Connected)
            {
                await _hubConnection.InvokeAsync("SendMessage", message);
                Log($"Message sent: {message}");  // 전송 성공 시 로그
            }
            else
            {
                LogError("SignalR is not connected.");
            }
        }
        catch (Exception ex)
        {
            LogError(ex.Message);  // 전송 중 오류 발생 시 로그 기록
        }
    }

    // 로그 기록 함수
    private void Log(string message)
    {
        LogMessageReceived?.Invoke(this, message);  // 로그 메시지를 외부로 전달
    }

    // 에러를 로그로 기록하는 함수
    private void LogError(string errorMessage)
    {
        Log($"Error: {errorMessage}");  // 에러 로그 메시지 기록
    }
}
2. MainViewModel 클래스 (SignalRClient를 사용하여 메시지 전송)
csharp
코드 복사
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

public class MainViewModel : INotifyPropertyChanged
{
    private SignalRClient _signalRClient;  // SignalRClient 객체
    private string _logMessage;

    public event PropertyChangedEventHandler PropertyChanged;

    public string LogMessage
    {
        get { return _logMessage; }
        set
        {
            _logMessage = value;
            OnPropertyChanged();
        }
    }

    public MainViewModel()
    {
        _signalRClient = new SignalRClient("http://localhost:5000/myhub");  // SignalRClient 초기화
        _signalRClient.LogMessageReceived += OnLogMessageReceived;  // 로그 메시지 수신 이벤트 연결
        OtherClass.SignalReceived += OnSignalReceived;  // 외부 클래스의 이벤트 수신
    }

    // 외부 클래스에서 이벤트가 발생했을 때 호출되는 함수
    private async void OnSignalReceived(object sender, string message)
    {
        await SendSignalRMessageAsync(message);
    }

    // SignalR을 통해 메시지를 보내는 함수
    private async Task SendSignalRMessageAsync(string message)
    {
        await _signalRClient.SendMessageAsync(message);  // SignalRClient를 통해 메시지 전송
    }

    // SignalRClient에서 발생한 로그 메시지를 수신하여 UI에 표시
    private void OnLogMessageReceived(object sender, string logMessage)
    {
        LogMessage = logMessage;  // 로그 메시지 업데이트
    }

    // PropertyChanged 이벤트 발생 함수
    protected void OnPropertyChanged([CallerMemberName] string name = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
3. OtherClass (신호를 발생시키는 클래스)
csharp
코드 복사
using System;

public class OtherClass
{
    // 신호를 외부로 전달하는 이벤트
    public static event EventHandler<string> SignalReceived;

    // 특정 조건에서 신호를 발생시키는 함수 (예시로 타이머로 신호를 발생시킴)
    public void TriggerSignal()
    {
        string message = "This is a test message";

        // 이벤트 발생, MainViewModel에서 수신하여 SignalR로 전송함
        SignalReceived?.Invoke(this, message);
    }
}
4. XAML (UI 부분)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <TextBlock Text="{Binding LogMessage}" VerticalAlignment="Center" HorizontalAlignment="Center" />
    </Grid>
</Window>
5. MainWindow.xaml.cs (뷰모델 설정)
csharp
코드 복사
using System.Windows;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();  // MainViewModel을 DataContext로 설정
    }
}
동작 설명
SignalRClient 클래스: 이 클래스는 SignalR 연결 및 메시지 전송을 담당하며, 내부에서 발생한 로그는 LogMessageReceived 이벤트를 통해 외부로 전달합니다.

SendMessageAsync: 메시지를 전송하는 비동기 함수로, 전송 성공 또는 실패 시 로그 메시지를 발생시킵니다.
InitializeSignalRConnection: SignalR 서버와 연결을 초기화하며, 연결 상태에 따라 로그를 기록합니다.
에러 발생 시 로그를 남기고, 프로그램은 종료되지 않습니다.
MainViewModel: ViewModel은 SignalRClient 객체를 생성하고, 외부 클래스에서 발생하는 SignalReceived 이벤트를 받아 메시지를 전송합니다. 로그 메시지는 UI에 바인딩된 LogMessage 속성을 통해 표시됩니다.

OtherClass: 특정 조건에서 신호를 발생시키는 역할을 하며, 이벤트를 통해 신호가 MainViewModel로 전달됩니다.

에러 처리 및 프로그램 안정성
SignalR 연결 실패 또는 메시지 전송 중 에러가 발생할 경우, SignalRClient에서 로그를 기록하고 프로그램은 종료되지 않습니다.