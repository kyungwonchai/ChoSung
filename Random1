용하여 WPF 애플리케이션을 만들고, 버튼 A, B, C, D를 누를 때마다 해당하는 컬럼들을 편집할 수 있는 권한을 부여하는 코드를 제공하겠습니다.

    MainPage.xaml (XAML)

xaml

<Window x:Class="DataGridAuthorization.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        Title="DataGrid Authorization" Height="450" Width="800">
    <Grid>
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
            <Button Name="btnA" Content="Button A" Click="btnA_Click"/>
            <Button Name="btnB" Content="Button B" Click="btnB_Click"/>
            <Button Name="btnC" Content="Button C" Click="btnC_Click"/>
            <Button Name="btnD" Content="Button D" Click="btnD_Click"/>
        </StackPanel>
        <dxe:GridControl Name="gridControl1" AutoGenerateColumns="AddNew" Margin="10,50,10,10">
            <dxe:GridControl.Columns>
                <dxe:GridColumn FieldName="ColumnA" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnB" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnC" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnD" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnE" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnF" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnG" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnH" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnI" ReadOnly="True" />
                <dxe:GridColumn FieldName="ColumnJ" ReadOnly="True" />
            </dxe:GridControl.Columns>
        </dxe:GridControl>
    </Grid>
</Window>

    MainPage.xaml.cs (C#)

csharp

using System.Collections.Generic;
using System.Windows;

namespace DataGridAuthorization
{
    public partial class MainWindow : Window
    {
        private List<string> editableColumns;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            // Load data from the database and bind to the gridControl1.ItemsSource
            // For example:
            // List<SampleData> data = LoadDataFromDatabase();
            // gridControl1.ItemsSource = data;
        }

        private void btnA_Click(object sender, RoutedEventArgs e)
        {
            editableColumns = new List<string> { "ColumnA" };
            SetColumnEditableStatus();
        }

        private void btnB_Click(object sender, RoutedEventArgs e)
        {
            editableColumns = new List<string> { "ColumnA", "ColumnB", "ColumnC" };
            SetColumnEditableStatus();
        }

        private void btnC_Click(object sender, RoutedEventArgs e)
        {
            editableColumns = new List<string> { "ColumnE", "ColumnF", "ColumnG" };
            SetColumnEditableStatus();
        }

        private void btnD_Click(object sender, RoutedEventArgs e)
        {
            editableColumns = new List<string> { "ColumnA", "ColumnB", "ColumnC", "ColumnD", "ColumnE", "ColumnF", "ColumnG", "ColumnH", "ColumnI", "ColumnJ" };
            SetColumnEditableStatus();
        }

        private void SetColumnEditableStatus()
        {
            foreach (var column in gridControl1.Columns)
            {
                if (editableColumns.Contains(column.FieldName))
                {
                    column.ReadOnly = false;
                }
                else
                {
                    column.ReadOnly = true;
                }
            }
        }
    }
}

위 코드는 WPF 애플리케이션에서 버튼 A, B, C, D를 누르면 해당하는 컬럼들을 편집 가능하게 설정합니다. 버튼을 누를 때마다 SetColumnEditableStatus 메서드를 호출하여 컬럼의 ReadOnly 속성을 변경합니다.

주의: 이 코드는 실제 데이터를 불러오는 부분이 구현되어 있지 않으며, 데이터를 어떻게 불러오는지에 따라 추가적인 코드가 필요할 수 있습니다. 또한, 데이터베이스 연결 부분도 구현되어 있지 않기 때문에 실제 데이터를 불러오는 