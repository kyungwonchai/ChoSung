코드는 Microsoft SQL Server에서 데이터를 가져와 IsolationForest를 사용하여 이상치를 탐지하는 것을 목적으로 합니다. 그러나 코드에는 몇 가지 수정이 필요합니다. 또한, 점진적으로 증가하는 값들을 효과적으로 감지하기 위해 다른 접근 방식을 고려할 수 있습니다.

먼저, 기존 코드의 수정사항을 살펴보겠습니다:

time 모듈을 임포트해야 합니다.
이상치 감지를 위한 모델 훈련(fit)은 루프 바깥에서 한 번만 수행하는 것이 좋습니다.
이상치를 로그로 기록하는 부분에서 df.index[anomalies == -1][0]는 적절하지 않습니다. 이상치가 감지된 행의 시간을 가져와야 합니다.
IsolationForest는 갑작스러운 값의 변화보다는 전체 데이터 세트에서 이상한 값을 찾는 데 더 적합합니다. 점진적으로 증가하는 값을 감지하려면 다른 방법을 고려해야 합니다.
점진적으로 증가하는 이상치를 감지하기 위한 방법으로, 간단한 방법으로는 이동 평균과 표준편차를 사용하여 이상치를 탐지하는 방법이 있습니다. 예를 들어, 일정 기간 동안의 평균과 표준편차를 계산하고, 현재 값이 그 평균에서 특정 표준편차 이상 벗어날 때 이상치로 간주할 수 있습니다.

아래 코드는 이런 방식을 적용한 예시입니다:

python
Copy code
import pandas as pd
import pymssql
import time
from datetime import datetime

# MSSQL 연결 정보 설정
server = 'your_server'
port = 'your_port'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# MSSQL 서버에 연결
conn = pymssql.connect(server=server, port=port, user=username, password=password, database=database)

# 이상 현상 카운트 초기화
anomaly_count = 0

# 데이터 모니터링 루프
while True:
    # 데이터를 조회하는 SQL 쿼리
    sql_query = "SELECT FileCreateTime, CT1 FROM YourTable WHERE YourConditions ORDER BY FileCreateTime"
    
    # 데이터베이스에서 데이터를 가져옵니다.
    df = pd.read_sql_query(sql_query, conn)

    # 이동 평균 및 표준편차 계산
    window_size = 10  # 윈도우 사이즈 설정
    df['Moving_Avg'] = df['CT1'].rolling(window=window_size).mean()
    df['Moving_Std'] = df['CT1'].rolling(window=window_size).std()
    
    # 이상치 기준 설정
    std_multiplier = 2  # 평균에서 몇 표준편차 떨어진 값을 이상치로 간주할지 결정

    # 이상치 탐지
    for index, row in df.iterrows():
        if row['CT1'] > row['Moving_Avg'] + (std_multiplier * row['Moving_Std']):
            anomaly_count += 1
            print(f"이상 현상 감지 - 파일 시간: {row['FileCreateTime']}, CT1: {row['CT1']}, 시간: {datetime.now()}")
            # 여기에서 MSSQL에 로그를 작성하는 코드 추가
        else:
            anomaly_count = 0  # 정상 값일 경우 카운트 초기화

    # 일정 시간 간격으로 실행
    time.sleep(300)
이 코드는 이동 평균과 표준편차를 사용하여 데이터에서 점진적으로 증가하