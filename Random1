래는 모든 데이터를 하나의 CSV 파일로 저장하는 코드입니다. c:/prod_file_logs/ 디렉토리와 모든 하위 폴더에서 3일 이상 된 모든 DetailCMD가 포함된 파일을 처리하여, 하나의 CSV 파일로 쌓아 저장합니다.

코드
python
코드 복사
import os
import csv
import re
from datetime import datetime, timedelta

# 디렉토리 경로 설정
directory_path = 'c:/prod_file_logs/'
output_directory = 'c:/Agent/'

# 3일 전 날짜 계산
three_days_ago = datetime.now() - timedelta(days=3)

# 정규 표현식 패턴 설정
time_pattern = r'\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}'  # 날짜와 시간 추출 패턴
key_pattern = r'고유키:[^\s]+'  # 고유키 추출 패턴 (공백 전까지)
send_value_pattern = r'보낸값:[^\s]+'  # 보낸값 추출 패턴 (공백 전까지)
recv_value_pattern = r'받은값:[^\s]+'  # 받은값 추출 패턴 (공백 전까지)

# CSV로 저장할 데이터를 담을 리스트
data_for_csv = []

# 디렉토리 및 하위 폴더 내 모든 파일을 재귀적으로 탐색
for root, dirs, files in os.walk(directory_path):
    for filename in files:
        # "DetailCMD"가 포함된 .txt 파일만 처리하며, 3일 전보다 이전에 생성된 파일만
        file_path = os.path.join(root, filename)
        if filename.endswith('.txt') and 'DetailCMD' in filename:
            file_creation_time = datetime.fromtimestamp(os.path.getctime(file_path))
            
            if file_creation_time <= three_days_ago:
                with open(file_path, 'r', encoding='utf-8') as file:
                    lines = file.readlines()  # 파일의 모든 줄을 읽음
                    i = 0
                    
                    # 각 줄을 순회하면서 "보낸값"과 "받은값" 쌍 찾기
                    while i < len(lines):
                        # "보낸값" 줄을 찾음
                        send_match = re.search(send_value_pattern, lines[i])
                        
                        if send_match:
                            # "보낸값" 줄에서 시간, 고유키, 보낸값 추출
                            time_match = re.search(time_pattern, lines[i])
                            key_match = re.search(key_pattern, lines[i])
                            
                            if time_match and key_match:
                                # 시간과 고유키 추출
                                time_str = time_match.group()
                                unique_key = key_match.group().split(':')[1]  # 고유키 값만 추출
                                send_value = send_match.group().split(':')[1]  # 보낸값 값만 추출

                                # 다음 줄에서 "받은값" 추출
                                if i + 1 < len(lines):
                                    recv_match = re.search(recv_value_pattern, lines[i + 1])

                                if recv_match:
                                    recv_value = recv_match.group().split(':')[1]  # 받은값 값만 추출
                                    
                                    # 시간 형식을 "yyMMdd HHmmss"로 변환
                                    original_time = datetime.strptime(time_str, '%Y-%m-%d %H:%M:%S.%f')
                                    formatted_time = original_time.strftime('%y%m%d %H%M%S')

                                    # 응답값의 길이 계산
                                    recv_length = len(recv_value)

                                    # 데이터 리스트에 추가 (시간, 고유키, 보낸값, 받은값, 받은값 길이)
                                    data_for_csv.append([formatted_time, unique_key, send_value, recv_value, recv_length])
                            
                            # "보낸값" 다음 줄로 이동
                            i += 2
                        else:
                            # "보낸값"이 없는 경우 다음 줄로 이동
                            i += 1

# 수집된 모든 데이터를 length와 시간 순으로 정렬
data_for_csv.sort(key=lambda x: (x[4], x[0]))

# 하나의 CSV 파일에 저장
timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
output_csv_path = os.path.join(output_directory, f'output_{timestamp}.csv')

with open(output_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
    csv_writer = csv.writer(csvfile)
    csv_writer.writerow(['Time', 'Unique Key', 'Sent Value', 'Received Value', 'Length'])
    csv_writer.writerows(data_for_csv)

print(f'\n모든 데이터를 하나의 CSV 파일에 저장 완료: {output_csv_path}')
코드 설명
하위 폴더 탐색:

os.walk(directory_path)로 c:/prod_file_logs/의 모든 하위 폴더와 파일을 탐색하여 DetailCMD가 포함된 파일을 처리합니다.
모든 데이터 수집:

3일 이상 지난 모든 파일의 데이터를 수집하여 data_for_csv 리스트에 쌓아나갑니다.
정렬 및 단일 CSV 파일 저장:

데이터 수집이 완료되면 length와 시간 순으로 정렬합니다.