using System;
using System.IO;
using System.Timers;
using System.Windows.Forms;
using ScreenRecorderLib;

namespace ScreenRecorderTrayApp
{
    public partial class MainForm : Form
    {
        static Recorder _recorder;
        static Timer _recordTimer;
        static Timer _deleteTimer;
        static int _fileCounter = 0;
        static string _folderPath = @"D:\kwblackbox";

        public MainForm()
        {
            InitializeComponent();
            notifyIcon.Visible = false;

            Directory.CreateDirectory(_folderPath); // 폴더 생성

            // 1분마다 녹화 이벤트를 발생시키는 타이머 설정
            _recordTimer = new Timer(60000);
            _recordTimer.Elapsed += OnRecordEvent;
            _recordTimer.AutoReset = true;
            _recordTimer.Start();

            // 1시간마다 삭제 이벤트를 발생시키는 타이머 설정
            _deleteTimer = new Timer(3600000);
            _deleteTimer.Elapsed += OnDeleteEvent;
            _deleteTimer.AutoReset = true;
            _deleteTimer.Start();

            // 녹화 옵션 설정 (기본 설정 사용)
            RecorderOptions options = new RecorderOptions();
            _recorder = Recorder.CreateRecorder(options);
            _recorder.Record(Path.Combine(_folderPath, $"recording{_fileCounter}.mp4"));
        }

        private void MainForm_Resize(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Minimized)
            {
                notifyIcon.Visible = true;
                Hide();
            }
        }

        private void notifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            Show();
            WindowState = FormWindowState.Normal;
            notifyIcon.Visible = false;
        }

        private void OnRecordEvent(Object source, ElapsedEventArgs e)
        {
            _recorder.Stop();
            _fileCounter++;
            string fileName = Path.Combine(_folderPath, $"recording{_fileCounter}.mp4");
            _recorder.Record(fileName);
        }

        private void OnDeleteEvent(Object source, ElapsedEventArgs e)
        {
            DirectoryInfo di = new DirectoryInfo(_folderPath);
            foreach (FileInfo file in di.GetFiles())
            {
                if (file.LastWriteTime < DateTime.Now.AddDays(-7))
                {
                    file.Delete();
                }
            }
        }
    }
}
