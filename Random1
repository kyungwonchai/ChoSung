프로세스가 켜진 상태로 멈추는 문제를 해결하기 위해선, 프로세스가 비정상 상태인지 확인하는 방법과, 비정상이면 강제로 중지시키는 방법을 구현해야 합니다.

문제 이해
A 프로세스가 멈추는 경우:

실행 중이지만 어떤 이유로 인해 무한 실행 중인 함수가 멈춤 (예: Deadlock, 무한 루프, 오류로 인한 응답 정지 등)

UI는 켜져 있고 프로그램이 종료된 것은 아님

해결 방법
A 프로세스 내부에서 주기적으로 상태 체크 (예: Heartbeat 방식)

B 프로세스에서 A 프로세스를 감시하고 강제 중지 (TaskKill 사용)

방법 1: A 프로세스 내부에서 상태 체크 (Heartbeat 방식)
A 프로세스는 주기적으로 특정 파일에 '정상 실행 중'이라고 기록합니다.
B 프로세스는 이 파일을 일정 간격으로 확인하고, 업데이트가 멈추면 비정상 상태로 판단합니다.

A 프로세스 코드 (Heartbeat 기록)
csharp
코드 복사
using System;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace AProcess
{
    public class Program
    {
        private static CancellationTokenSource _cts;
        private static string heartbeatFile = @"C:\agent\kwconfig\heartbeat.txt";

        public static async Task Main(string[] args)
        {
            _cts = new CancellationTokenSource();
            await Task.Run(() => InfiniteExecution(_cts.Token));
        }

        private static async Task InfiniteExecution(CancellationToken token)
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    // 1분마다 상태 기록
                    File.WriteAllText(heartbeatFile, DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss"));
                    Console.WriteLine("Heartbeat 기록됨");

                    // 1분 대기 (여기서 프로그램이 멈추면 B 프로세스가 감지하게 됨)
                    await Task.Delay(TimeSpan.FromMinutes(1), token);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"에러 발생: {ex.Message}");
                }
            }
        }
    }
}
방법 2: B 프로세스에서 감시하고 강제로 중지 (TaskKill 사용)
B 프로세스 코드 (Heartbeat 모니터링)
csharp
코드 복사
using System;
using System.Diagnostics;
using System.IO;
using System.Threading.Tasks;

namespace BProcess
{
    public class Program
    {
        private static string heartbeatFile = @"C:\agent\kwconfig\heartbeat.txt";
        private static string targetProcessName = "AProcess"; // A 프로세스 이름

        public static async Task Main(string[] args)
        {
            while (true)
            {
                await MonitorProcess();
                await Task.Delay(TimeSpan.FromSeconds(10)); // 10초마다 확인
            }
        }

        private static async Task MonitorProcess()
        {
            try
            {
                if (File.Exists(heartbeatFile))
                {
                    var lastUpdate = File.GetLastWriteTime(heartbeatFile);

                    if ((DateTime.Now - lastUpdate).TotalMinutes > 2) // 2분 동안 업데이트 없으면 멈췄다고 판단
                    {
                        Console.WriteLine("A 프로세스가 멈췄습니다. 강제로 종료합니다.");
                        KillProcess(targetProcessName);
                    }
                    else
                    {
                        Console.WriteLine("A 프로세스는 정상 실행 중입니다.");
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"에러 발생: {ex.Message}");
            }
        }

        private static void KillProcess(string processName)
        {
            foreach (var process in Process.GetProcessesByName(processName))
            {
                try
                {
                    process.Kill();
                    process.WaitForExit();
                    Console.WriteLine($"{processName} 프로세스가 종료되었습니다.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"프로세스 종료 실패: {ex.Message}");
                }
            }
        }
    }
}
설명
A 프로세스 (MainWindow)

C:\agent\kwconfig\heartbeat.txt 파일에 1분마다 현재 시간 기록

파일 기록이 멈추면 비정상 상태로 판단할 수 있게 함

B 프로세스 (모니터링 프로그램)

heartbeat.txt 파일을 10초마다 확인

마지막 업데이트가 2분 이상 지났다면 A 프로세스를 강제로 종료 (KillProcess 메서드)

이 방법의 장점
A 프로세스가 멈춰도 강제로 종료 가능

파일 기반으로 모니터링하여 프로세스의 상태를 외부에서도 감지 가능

무한 실행 중인 함수가 멈추더라도 외부 감시로 확인 가능
