론입니다. 애플리케이션의 백엔드 설정에 필요한 데이터베이스와 테이블을 생성하는 SQL 쿼리를 Microsoft SQL Server (T-SQL) 기준으로 작성해 드렸습니다.
이 쿼리들은 BackendInstructionsModal.tsx에 설명된 백엔드 서버가 올바르게 작동하는 데 필요한 데이터베이스 구조를 만듭니다.
1. 데이터베이스 생성 쿼리
먼저, 레이아웃 데이터를 저장할 전용 데이터베이스를 생성합니다. ProductsDB라는 이름은 예시이며, 원하시는 다른 이름으로 변경하셔도 됩니다.
Generated sql
-- 만약 'ProductsDB'라는 데이터베이스가 존재하지 않으면 새로 생성합니다.
IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'ProductsDB')
BEGIN
    CREATE DATABASE ProductsDB;
END;
GO

-- 이후의 쿼리 작업을 위해 방금 생성한 데이터베이스를 사용하도록 설정합니다.
USE ProductsDB;
GO
Use code with caution.
SQL
설명:
IF NOT EXISTS: 쿼리를 여러 번 실행해도 오류가 발생하지 않도록 데이터베이스가 없을 때만 생성합니다.
CREATE DATABASE: 새로운 데이터베이스를 만듭니다.
USE: 다음에 실행될 CREATE TABLE과 같은 쿼리들이 어떤 데이터베이스를 대상으로 할지 지정합니다.
2. 테이블 생성 쿼리
다음으로, 위에서 생성한 데이터베이스 내에 실제 레이아웃 정보를 저장할 테이블을 생성합니다. 애플리케이션의 dbConfig에 설정된 기본 테이블 이름은 Layouts입니다.
Generated sql
-- 만약 'Layouts'라는 테이블이 존재하지 않으면 새로 생성합니다.
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Layouts' AND xtype='U')
BEGIN
    CREATE TABLE Layouts (
        -- 각 레이아웃의 고유 ID (nanoid로 생성되므로 문자열 타입). 기본 키로 설정합니다.
        id NVARCHAR(50) PRIMARY KEY,

        -- 레이아웃의 이름 (예: "Label 1").
        name NVARCHAR(255) NOT NULL,

        -- 캔버스 위의 모든 요소(위치, 크기, 내용 등) 정보를 JSON 형태의 긴 문자열로 저장합니다.
        elements NVARCHAR(MAX) NOT NULL,

        -- 레코드가 마지막으로 수정된 시간을 자동으로 기록합니다.
        lastModified DATETIME2 DEFAULT GETDATE()
    );
END;
GO
Use code with caution.
SQL
설명:
IF NOT EXISTS: 테이블이 없을 때만 생성하여 안전하게 여러 번 실행할 수 있습니다.
id NVARCHAR(50) PRIMARY KEY: 레이아웃을 구분하는 고유 ID입니다. nanoid가 문자열을 반환하므로 NVARCHAR 타입을 사용하고, 중복될 수 없도록 PRIMARY KEY로 지정합니다.
name NVARCHAR(255) NOT NULL: 레이아웃의 이름을 저장하며, 비어있을 수 없습니다.
elements NVARCHAR(MAX) NOT NULL: 레이아웃의 모든 요소 객체 배열을 JSON 문자열로 변환하여 저장합니다. 매우 길어질 수 있으므로 MAX를 사용합니다.
lastModified DATETIME2 DEFAULT GETDATE(): 데이터가 생성되거나 수정될 때의 시간을 기록하기 위한 필드입니다. GETDATE()를 기본값으로 설정하여 행이 처음 추가될 때 현재 시간이 자동으로 입력됩니다.
사용 방법
SQL Server Management Studio (SSMS)나 Azure Data Studio와 같은 데이터베이스 관리 도구에 연결합니다.
새 쿼리 창을 엽니다.