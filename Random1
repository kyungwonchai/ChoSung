 Windows Forms에서 비동기 매크로 실행 + 로깅 + 화면 캡처 + CV 분석을 포함한 전문가 코드
🛠️ 프로젝트 구조
Forms
MainForm.cs → UI 관리 (버튼 클릭 시 실행)
Macro System
IMacroCommand.cs → 공통 인터페이스
KeyboardCommand.cs → 키보드 입력 명령
MouseClickCommand.cs → 마우스 클릭 명령
DelayCommand.cs → 특정 시간 대기
CVCommand.cs → CV(이미지 분석) 명령
ScreenCaptureCommand.cs → 화면 캡처
Execution
MacroExecutor.cs → 매크로 실행 TaskQueue
MacroManager.cs → 싱글톤 매크로 관리
Logging
MacroLogger.cs → 로그 관리 (ListBox 바인딩)
📂 1. 프로젝트 파일 위치
코드 복사
📦 MacroWinForms
 ┣ 📂 Commands
 ┃ ┣ 📜 IMacroCommand.cs
 ┃ ┣ 📜 KeyboardCommand.cs
 ┃ ┣ 📜 MouseClickCommand.cs
 ┃ ┣ 📜 DelayCommand.cs
 ┃ ┣ 📜 CVCommand.cs
 ┃ ┗ 📜 ScreenCaptureCommand.cs
 ┣ 📂 Core
 ┃ ┣ 📜 MacroExecutor.cs
 ┃ ┣ 📜 MacroManager.cs
 ┃ ┗ 📜 MacroLogger.cs
 ┣ 📂 Forms
 ┃ ┗ 📜 MainForm.cs
 ┣ 📜 Program.cs
 ┗ 📜 MacroWinForms.csproj
📜 2. 코드 상세 구현
🔹 (1) IMacroCommand.cs (매크로 명령 공통 인터페이스)
csharp
코드 복사
namespace MacroWinForms.Commands
{
    using System.Threading.Tasks;

    /// <summary>
    /// 모든 매크로 명령이 구현해야 하는 인터페이스.
    /// </summary>
    public interface IMacroCommand
    {
        Task ExecuteAsync(); // 비동기 실행
    }
}
🔹 (2) KeyboardCommand.cs (키보드 입력)
csharp
코드 복사
namespace MacroWinForms.Commands
{
    using System.Threading.Tasks;
    using System.Windows.Forms;

    public class KeyboardCommand : IMacroCommand
    {
        private readonly Keys _key;

        public KeyboardCommand(Keys key)
        {
            _key = key;
        }

        public async Task ExecuteAsync()
        {
            await Task.Delay(100);
            SendKeys.SendWait(_key.ToString());
            Core.MacroLogger.Instance.AddLog($"키 입력: {_key}");
        }
    }
}
🔹 (3) MouseClickCommand.cs (마우스 클릭)
csharp
코드 복사
namespace MacroWinForms.Commands
{
    using System;
    using System.Runtime.InteropServices;
    using System.Threading.Tasks;
    using System.Windows.Forms;

    public class MouseClickCommand : IMacroCommand
    {
        private readonly int _x, _y;

        [DllImport("user32.dll")]
        private static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, IntPtr dwExtraInfo);

        private const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        private const uint MOUSEEVENTF_LEFTUP = 0x04;

        public MouseClickCommand(int x, int y)
        {
            _x = x;
            _y = y;
        }

        public async Task ExecuteAsync()
        {
            Cursor.Position = new System.Drawing.Point(_x, _y);
            await Task.Delay(50);
            mouse_event(MOUSEEVENTF_LEFTDOWN, _x, _y, 0, IntPtr.Zero);
            await Task.Delay(50);
            mouse_event(MOUSEEVENTF_LEFTUP, _x, _y, 0, IntPtr.Zero);
            Core.MacroLogger.Instance.AddLog($"마우스 클릭: {_x}, {_y}");
        }
    }
}
🔹 (4) DelayCommand.cs (딜레이)
csharp
코드 복사
namespace MacroWinForms.Commands
{
    using System.Threading.Tasks;

    public class DelayCommand : IMacroCommand
    {
        private readonly int _milliseconds;

        public DelayCommand(int milliseconds)
        {
            _milliseconds = milliseconds;
        }

        public async Task ExecuteAsync()
        {
            Core.MacroLogger.Instance.AddLog($"딜레이 {_milliseconds}ms");
            await Task.Delay(_milliseconds);
        }
    }
}
🔹 (5) ScreenCaptureCommand.cs (화면 캡처)
csharp
코드 복사
namespace MacroWinForms.Commands
{
    using System;
    using System.Drawing;
    using System.Threading.Tasks;
    using System.Windows.Forms;

    public class ScreenCaptureCommand : IMacroCommand
    {
        private readonly string _savePath;

        public ScreenCaptureCommand(string savePath)
        {
            _savePath = savePath;
        }

        public async Task ExecuteAsync()
        {
            await Task.Delay(500);
            Bitmap bmp = new Bitmap(Screen.PrimaryScreen.Bounds.Width, Screen.PrimaryScreen.Bounds.Height);
            Graphics graphics = Graphics.FromImage(bmp);
            graphics.CopyFromScreen(0, 0, 0, 0, bmp.Size);
            bmp.Save(_savePath);
            Core.MacroLogger.Instance.AddLog($"화면 캡처 저장: {_savePath}");
        }
    }
}
🔹 (6) MacroExecutor.cs (비동기 매크로 실행)
csharp
코드 복사
namespace MacroWinForms.Core
{
    using System;
    using System.Collections.Concurrent;
    using System.Threading.Tasks;
    using MacroWinForms.Commands;

    public class MacroExecutor
    {
        private readonly ConcurrentQueue<IMacroCommand> _commandQueue = new ConcurrentQueue<IMacroCommand>();
        private bool _isRunning = false;

        public void AddCommand(IMacroCommand command)
        {
            _commandQueue.Enqueue(command);
        }

        public async Task ExecuteAllAsync()
        {
            if (_isRunning) return;
            _isRunning = true;

            while (_commandQueue.TryDequeue(out var command))
            {
                try
                {
                    await command.ExecuteAsync();
                }
                catch (Exception ex)
                {
                    MacroLogger.Instance.AddLog($"[Error] {ex.Message}");
                }
            }

            _isRunning = false;
        }
    }
}
🔹 (7) MacroManager.cs (매크로 중앙 관리)
csharp
코드 복사
namespace MacroWinForms.Core
{
    using System.Threading.Tasks;

    public class MacroManager
    {
        private static MacroManager _instance;
        private static readonly object _lock = new object();
        private readonly MacroExecutor _executor;

        private MacroManager()
        {
            _executor = new MacroExecutor();
        }

        public static MacroManager Instance
        {
            get
            {
                lock (_lock)
                {
                    return _instance ??= new MacroManager();
                }
            }
        }

        public void AddCommand(IMacroCommand command)
        {
            _executor.AddCommand(command);
        }

        public async Task StartExecutionAsync()
        {
            await _executor.ExecuteAllAsync();
        }
    }
}
🔹 (8) MacroLogger.cs (로그 시스템)
csharp
코드 복사
namespace MacroWinForms.Core
{
    using System;
    using System.Collections.ObjectModel;

    public class MacroLogger
    {
        private static MacroLogger _instance;
        private static readonly object _lock = new object();
        public ObservableCollection<string> Logs { get; private set; } = new ObservableCollection<string>();

        private MacroLogger() { }

        public static MacroLogger Instance
        {
            get
            {
                lock (_lock)
                {
                    return _instance ??= new MacroLogger();
                }
            }
        }

        public void AddLog(string message)
        {
            string logEntry = $"{DateTime.Now:yyyyMMddHHmmss} - {message}";
            Logs.Insert(0, logEntry);
            if (Logs.Count > 200) Logs.RemoveAt(200);
        }
    }