음은 비동기 방식으로 1일마다 C:\prod_file_log_backup 폴더 안에 있는 날짜 폴더명을 기준으로 현재 날짜에서 5일 이상 경과된 폴더를 C:\proc_file_log_backup_old로 이동하는 C# 코드를 작성한 것입니다. 전문가 수준의 주석과 함께 제공됩니다.

csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;

public class FolderBackupManager
{
    // 백업 원본 폴더
    private readonly string sourcePath = @"C:\prod_file_log_backup";
    
    // 오래된 폴더를 이동할 목적지 폴더
    private readonly string targetPath = @"C:\proc_file_log_backup_old";
    
    // 백업 기준일 (5일 이상 경과된 폴더 이동)
    private readonly int daysThreshold = 5;

    // 클래스 생성자
    public FolderBackupManager()
    {
        // 만약 목적지 폴더가 존재하지 않으면 생성
        if (!Directory.Exists(targetPath))
        {
            Directory.CreateDirectory(targetPath);
        }
    }

    // 1일마다 비동기로 실행되는 메소드
    public async Task StartFolderBackupAsync()
    {
        while (true)
        {
            // 폴더 백업 작업 시작
            await BackupOldFoldersAsync();

            // 1일 대기 (86400초 = 24시간)
            await Task.Delay(TimeSpan.FromDays(1));
        }
    }

    // 오래된 폴더를 찾고 백업하는 메소드
    private async Task BackupOldFoldersAsync()
    {
        try
        {
            // 소스 경로에서 모든 폴더 가져오기
            var folders = Directory.GetDirectories(sourcePath);

            // 현재 날짜 가져오기
            DateTime currentDate = DateTime.Now;

            // 모든 폴더를 확인
            foreach (var folder in folders)
            {
                // 폴더 이름에서 날짜 부분 추출 (yyyyMMdd 형식)
                string folderName = Path.GetFileName(folder);
                
                // 날짜 변환을 시도, 실패 시 다음 폴더로 넘어감
                if (DateTime.TryParseExact(folderName, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime folderDate))
                {
                    // 폴더 생성 날짜와 현재 날짜의 차이 계산
                    TimeSpan timeDiff = currentDate - folderDate;

                    // 날짜 차이가 기준일보다 크면 폴더 이동
                    if (timeDiff.TotalDays > daysThreshold)
                    {
                        string destinationFolder = Path.Combine(targetPath, folderName);

                        // 비동기로 폴더 이동 (동일 이름이 있을 경우 덮어쓰기)
                        await Task.Run(() =>
                        {
                            if (Directory.Exists(destinationFolder))
                            {
                                Directory.Delete(destinationFolder, true); // 기존 폴더 삭제
                            }
                            Directory.Move(folder, destinationFolder); // 폴더 이동
                        });

                        // 로그 출력
                        Console.WriteLine($"폴더 '{folderName}'가 {targetPath}로 이동되었습니다.");
                    }
                }
                else
                {
                    // 폴더명이 올바른 날짜 형식이 아닐 경우 로그 출력
                    Console.WriteLine($"폴더 '{folderName}'는 유효한 날짜 형식이 아닙니다.");
                }
            }
        }
        catch (Exception ex)
        {
            // 예외 처리: 오류 발생 시 콘솔에 출력
            Console.WriteLine($"오류 발생: {ex.Message}");
        }
    }
}

// 프로그램 실행부
public class Program
{
    public static async Task Main(string[] args)
    {
        // 폴더 백업 매니저 인스턴스 생성
        var backupManager = new FolderBackupManager();

        // 비동기적으로 1일마다 폴더 백업 시작
        await backupManager.StartFolderBackupAsync();
    }
}
주요 기능 설명:
FolderBackupManager 클래스: 폴더를 백업하는 로직을 포함하는 클래스입니다. 소스 폴더와 타겟 폴더를 미리 설정하고, 오래된 폴더를 찾고 이동하는 기능을 구현했습니다.
StartFolderBackupAsync 메소드: 1일마다 실행되는 비동기 메소드입니다. Task.Delay(TimeSpan.FromDays(1))을 통해 24시간마다 반복합니다.
BackupOldFoldersAsync 메소드: 폴더를 확인하여 현재 날짜에서 5일 이상 경과된 폴더를 찾고, 이를 타겟 폴더로 이동합니다. 날짜 형식이 맞지 않는 폴더는 건너뜁니다.