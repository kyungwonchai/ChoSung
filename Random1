주의: 연쇄 업데이트 기능은 데이터 양이 많을 경우 성능에 영향을 줄 수 있습니다. 실제 운영 환경에서는 더 최적화된 방법(예: 외래 키 사용 및 ID 기반 업데이트)을 고려하는 것이 좋습니다. 로그 기능도 기본적인 내용을 기록하며, 상세 변경 내역 추적 등은 추가 구현이 필요합니다.

1. 데이터베이스 스키마 변경 (SQL Script)

기존 LockerAssignments 테이블에 컬럼을 추가하고, 마스터 데이터 및 로그 테이블을 생성합니다.

SQL

-- LockerManagementDB 데이터베이스를 사용합니다.
USE LockerManagementDB;
GO

-- 1. LockerAssignments 테이블에 신규 컬럼 추가
ALTER TABLE LockerAssignments
ADD TransferReturnStatus NVARCHAR(100) NULL, -- 전배복직
    Details NVARCHAR(MAX) NULL,             -- 내용
    Remarks NVARCHAR(MAX) NULL,             -- 특이사항
    Notes NVARCHAR(MAX) NULL;               -- 비고
GO

PRINT 'LockerAssignments 테이블에 컬럼 추가 완료.';
GO

-- 2. 마스터 데이터 테이블 생성 (존재하지 않는 경우)

IF OBJECT_ID('dbo.LockerTypes', 'U') IS NULL
CREATE TABLE LockerTypes (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL UNIQUE -- 사물함 종류 이름 (고유값)
);
INSERT INTO LockerTypes (Name) VALUES ('개인사물함'), ('락커'), ('신발장'); -- 초기값 예시
GO

IF OBJECT_ID('dbo.Floors', 'U') IS NULL
CREATE TABLE Floors (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(10) NOT NULL UNIQUE -- 층 이름 (고유값)
);
INSERT INTO Floors (Name) VALUES ('B1'), ('1'), ('2'), ('3'), ('4'); -- 초기값 예시
GO

IF OBJECT_ID('dbo.Zones', 'U') IS NULL
CREATE TABLE Zones (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL UNIQUE -- 구역 이름 (고유값)
);
INSERT INTO Zones (Name) VALUES ('A'), ('B'), ('C'), ('D'), ('E'), ('F'), ('G'), ('H'), ('B1'), ('B2'), ('B3'), ('B4'), ('1F'), ('2F'), ('3F'), ('4F'), ('기타'); -- 초기값 예시
GO

IF OBJECT_ID('dbo.SubParts', 'U') IS NULL
CREATE TABLE SubParts (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(50) NOT NULL UNIQUE -- 소파트 이름 (고유값)
);
INSERT INTO SubParts (Name) VALUES ('Main(시생산)'), ('MainA'), ('MainB'), ('MainC'), ('MainD'), ('MainE'), ('MainF'), ('MainG'), ('MainH'), ('MainI'), ('MainJ'), ('MainK'), ('MainL'), ('MainM'), ('MainN'), ('MainO'), ('MainP'), ('MainQ'), ('MainR'), ('MainS'), ('MainT'), ('MainU'), ('MainV'), ('MainW'), ('MainX'), ('MainY'), ('MainZ'); -- 초기값 예시
GO

IF OBJECT_ID('dbo.Administrators', 'U') IS NULL
CREATE TABLE Administrators (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Name NVARCHAR(100) NOT NULL UNIQUE -- 관리자 이름 (고유값)
);
INSERT INTO Administrators (Name) VALUES ('홍길동A'), ('홍길동B'), ('홍길동C'), ('홍길동D'), ('홍길동E'), ('홍길동F'), ('홍길동G'), ('홍길동H'), ('홍길동I'), ('홍길동J'), ('홍길동K'), ('홍길동L'), ('홍길동M'), ('홍길동N'), ('홍길동O'), ('홍길동P'), ('홍길동Q'), ('홍길동R'), ('홍길동S'), ('홍길동T'), ('홍길동U'), ('홍길동V'), ('홍길동W'), ('홍길동X'); -- 초기값 예시
GO

PRINT '마스터 데이터 테이블 생성 및 초기값 삽입 완료.';
GO

-- 3. 로그 테이블 생성 (존재하지 않는 경우)
IF OBJECT_ID('dbo.ActivityLogs', 'U') IS NULL
CREATE TABLE ActivityLogs (
    Id INT PRIMARY KEY IDENTITY(1,1),
    Timestamp DATETIME2 NOT NULL DEFAULT GETDATE(), -- 로그 기록 시간
    UserName NVARCHAR(100) NULL,                   -- 작업 수행 사용자 (여기서는 관리자 이름 사용)
    Action NVARCHAR(50) NOT NULL,                  -- 수행 작업 (예: '추가', '수정', '삭제', '연쇄 업데이트')
    EntityType NVARCHAR(100) NOT NULL,             -- 변경된 데이터 타입 (예: 'LockerAssignment', 'SubPart')
    EntityId INT NULL,                             -- 변경된 데이터의 ID (LockerAssignment의 ID 등)
    Description NVARCHAR(MAX) NULL                 -- 변경 내용 요약 또는 설명
);
GO

PRINT 'ActivityLogs 테이블 생성 완료.';
GO
2. 모델 (Models 폴더)

LockerAssignment.cs (수정): 신규 컬럼 속성 추가

C#

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Runtime.CompilerServices;

namespace LockerManagementApp.Models
{
    [Table("LockerAssignments")]
    public class LockerAssignment : INotifyPropertyChanged
    {
        // --- 기존 속성들 ---
        private int _id;
        private string _lockerType = string.Empty;
        private string _floor = string.Empty;
        private string _zone = string.Empty;
        private string _specificLocation = string.Empty;
        private string _userName;
        private string _knoxId;
        private string _subPart;
        private string _administrator;
        private DateTime _lastUpdated = DateTime.Now;

        // --- 신규 속성들 ---
        private string _transferReturnStatus;
        private string _details;
        private string _remarks;
        private string _notes;

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get => _id; set => SetProperty(ref _id, value); }

        [Required(ErrorMessage = "사물함 종류는 필수 항목입니다.")]
        [StringLength(50)]
        public string LockerType { get => _lockerType; set => SetProperty(ref _lockerType, value); }

        [Required(ErrorMessage = "층 정보는 필수 항목입니다.")]
        [StringLength(10)]
        public string Floor { get => _floor; set => SetProperty(ref _floor, value); }

        [Required(ErrorMessage = "구역 정보는 필수 항목입니다.")]
        [StringLength(50)]
        public string Zone { get => _zone; set => SetProperty(ref _zone, value); }

        [Required(ErrorMessage = "세부 위치는 필수 항목입니다.")]
        [StringLength(100)]
        public string SpecificLocation { get => _specificLocation; set => SetProperty(ref _specificLocation, value); }

        [StringLength(100)]
        public string UserName
        {
            get => _userName;
            set { if (SetProperty(ref _userName, value)) OnPropertyChanged(nameof(IsAssigned)); }
        }

        [StringLength(100)]
        public string KnoxId { get => _knoxId; set => SetProperty(ref _knoxId, value); }

        [StringLength(50)]
        public string SubPart { get => _subPart; set => SetProperty(ref _subPart, value); }

        [StringLength(100)]
        public string Administrator { get => _administrator; set => SetProperty(ref _administrator, value); }

        public DateTime LastUpdated { get => _lastUpdated; set => SetProperty(ref _lastUpdated, value); }

        // --- 신규 속성 Getter/Setter ---
        [StringLength(100)]
        public string TransferReturnStatus { get => _transferReturnStatus; set => SetProperty(ref _transferReturnStatus, value); } // 전배복직

        public string Details { get => _details; set => SetProperty(ref _details, value); } // 내용

        public string Remarks { get => _remarks; set => SetProperty(ref _remarks, value); } // 특이사항

        public string Notes { get => _notes; set => SetProperty(ref _notes, value); } // 비고

        // --- 기존 계산 속성 및 메서드 ---
        [NotMapped]
        public bool IsAssigned => !string.IsNullOrWhiteSpace(UserName);

        public override string ToString() => $"{Floor}-{Zone}-{SpecificLocation}: {(IsAssigned ? UserName : "(비어 있음)")}";

        // --- INotifyPropertyChanged 구현 ---
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}
신규 마스터 데이터 모델 파일 (각각 파일 생성):

Models/MasterDataBase.cs (공통 기반 클래스 - 옵션이지만 권장)
C#

using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Models
{
    /// <summary>
    /// 마스터 데이터 모델의 기반 클래스 (ID, Name 공통 속성 및 INotifyPropertyChanged 구현)
    /// </summary>
    public abstract class MasterDataBase : INotifyPropertyChanged
    {
        private int _id;
        private string _name;

        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id
        {
            get => _id;
            set => SetProperty(ref _id, value);
        }

        // 각 테이블에서 UNIQUE 제약 조건은 SQL 스크립트에서 설정
        [Required(ErrorMessage = "이름은 필수 항목입니다.")]
        [Index(IsUnique = true)] // EF6에서는 Index Attribute 사용 가능 (System.ComponentModel.DataAnnotations.Schema 네임스페이스)
        [StringLength(100)] // 길이는 필요에 따라 조절
        public string Name
        {
            get => _name;
            set => SetProperty(ref _name, value);
        }

        public override string ToString() => Name ?? base.ToString();

        // INotifyPropertyChanged 구현
        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        protected bool SetProperty<T>(ref T storage, T value, [CallerMemberName] string propertyName = null)
        {
            if (EqualityComparer<T>.Default.Equals(storage, value)) return false;
            storage = value;
            OnPropertyChanged(propertyName);
            return true;
        }
    }
}
Models/LockerType.cs
C#

using System.ComponentModel.DataAnnotations.Schema;
namespace LockerManagementApp.Models { [Table("LockerTypes")] public class LockerType : MasterDataBase { } }
Models/Floor.cs
C#

using System.ComponentModel.DataAnnotations.Schema;
namespace LockerManagementApp.Models { [Table("Floors")] public class Floor : MasterDataBase { } }
Models/Zone.cs
C#

using System.ComponentModel.DataAnnotations.Schema;
namespace LockerManagementApp.Models { [Table("Zones")] public class Zone : MasterDataBase { } }
Models/SubPart.cs
C#

using System.ComponentModel.DataAnnotations.Schema;
namespace LockerManagementApp.Models { [Table("SubParts")] public class SubPart : MasterDataBase { } }
Models/Administrator.cs
C#

using System.ComponentModel.DataAnnotations.Schema;
namespace LockerManagementApp.Models { [Table("Administrators")] public class Administrator : MasterDataBase { } }
신규 로그 모델 파일:

Models/ActivityLog.cs
C#

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace LockerManagementApp.Models
{
    [Table("ActivityLogs")]
    public class ActivityLog
    {
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int Id { get; set; }

        public DateTime Timestamp { get; set; } = DateTime.Now;

        [StringLength(100)]
        public string UserName { get; set; } // 작업 수행 사용자

        [Required]
        [StringLength(50)]
        public string Action { get; set; } // 수행 작업 (예: '추가', '수정', '삭제')

        [Required]
        [StringLength(100)]
        public string EntityType { get; set; } // 변경된 데이터 타입

        public int? EntityId { get; set; } // 변경된 데이터의 ID (Nullable)

        public string Description { get; set; } // 변경 내용 요약
    }
}
3. 데이터 컨텍스트 (Data/LockerDbContext.cs) (수정)

신규 DbSet 추가 (마스터 데이터, 로그)
SaveChanges/SaveChangesAsync 재정의하여 로그 기록 로직 추가
C#

using LockerManagementApp.Models;
using System;
using System.Collections.Generic; // IEnumerable 사용
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;

namespace LockerManagementApp.Data
{
    public class LockerDbContext : DbContext
    {
        // 기존 DbSet
        public DbSet<LockerAssignment> LockerAssignments { get; set; }

        // 신규 DbSet 추가
        public DbSet<LockerType> LockerTypes { get; set; }
        public DbSet<Floor> Floors { get; set; }
        public DbSet<Zone> Zones { get; set; }
        public DbSet<SubPart> SubParts { get; set; }
        public DbSet<Administrator> Administrators { get; set; }
        public DbSet<ActivityLog> ActivityLogs { get; set; }

        public LockerDbContext() : base("name=LockerDbConnection")
        {
            // 데이터베이스 초기화 전략 등 설정 (필요 시)
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            // Fluent API 설정 (필요 시)
            base.OnModelCreating(modelBuilder);
        }

        // SaveChanges 재정의 (동기)
        public override int SaveChanges()
        {
            LogChanges(); // 변경 사항 로깅
            UpdateTimestamps(); // 타임스탬프 업데이트
            return base.SaveChanges();
        }

        // SaveChangesAsync 재정의 (비동기)
        public override Task<int> SaveChangesAsync()
        {
            LogChanges(); // 변경 사항 로깅
            UpdateTimestamps(); // 타임스탬프 업데이트
            return base.SaveChangesAsync();
        }

        /// <summary>
        /// 추가(Added)되거나 수정(Modified)된 LockerAssignment 엔티티의 LastUpdated 속성을 현재 시간으로 설정합니다.
        /// </summary>
        private void UpdateTimestamps()
        {
            var entries = ChangeTracker.Entries<LockerAssignment>()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

            foreach (var entry in entries)
            {
                entry.Entity.LastUpdated = DateTime.Now;
                // 관리자 정보는 ViewModel에서 설정된 값을 사용
            }
        }

        /// <summary>
        /// 변경 사항을 감지하여 ActivityLogs 테이블에 로그를 기록합니다.
        /// </summary>
        private void LogChanges()
        {
            // 현재 컨텍스트에서 변경된(추가, 수정, 삭제된) 엔티티들을 가져옵니다.
            var changedEntries = ChangeTracker.Entries()
                .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted)
                .ToList(); // ToList()로 가져와서 반복 중 변경 문제 방지

            if (!changedEntries.Any()) return; // 변경 사항 없으면 종료

            // 사용자 이름 가져오기 (여기서는 임시로 "System" 또는 마지막 변경자 사용 시도)
            // 실제 앱에서는 로그인 사용자 정보를 가져와야 함
            string currentUserName = "System"; // 기본값

            foreach (var entry in changedEntries)
            {
                // 로그 기록에서 ActivityLog 자체의 변경은 제외
                if (entry.Entity is ActivityLog) continue;

                var log = new ActivityLog
                {
                    Timestamp = DateTime.Now,
                    UserName = currentUserName, // 실제 사용자 정보로 대체 필요
                    EntityType = entry.Entity.GetType().Name, // 엔티티 타입 이름
                    Action = entry.State.ToString() // "Added", "Modified", "Deleted"
                };

                // 상세 설명 생성 (간단 버전)
                if (entry.Entity is LockerAssignment la)
                {
                    log.EntityId = la.Id; // LockerAssignment의 ID 기록
                    log.UserName = la.Administrator; // 마지막 수정한 관리자 이름 사용 시도
                    log.Description = $"사물함 [{la.Floor}-{la.Zone}-{la.SpecificLocation}] 데이터 {ConvertActionToKorean(log.Action)}";
                }
                else if (entry.Entity is MasterDataBase mdb)
                {
                    log.EntityId = mdb.Id;
                    // 마스터 데이터 변경 시 추가 정보 기록 가능
                    log.Description = $"마스터 데이터 [{log.EntityType} - {mdb.Name}] {ConvertActionToKorean(log.Action)}";
                    // 연쇄 업데이트 로그는 ViewModel에서 별도로 기록
                }
                else
                {
                    // 다른 타입의 엔티티 로그 (필요 시 ID 등 기록)
                    try { log.EntityId = (int?)entry.Property("Id").CurrentValue; } catch { } // ID 속성이 있다면 기록 시도
                    log.Description = $"데이터 [{log.EntityType}] {ConvertActionToKorean(log.Action)}";
                }

                // 생성된 로그를 DbContext에 추가 (아직 저장 전)
                this.ActivityLogs.Add(log);
            }
        }

        // Action 이름을 한글로 변환하는 도우미 메서드
        private string ConvertActionToKorean(string action)
        {
            switch (action)
            {
                case "Added": return "추가됨";
                case "Modified": return "수정됨";
                case "Deleted": return "삭제됨";
                default: return action;
            }
        }
    }
}
4. 메인 ViewModel (ViewModels/MainViewModel.cs) (수정)

마스터 데이터 목록(ObservableCollection 또는 List) 및 로그 목록 속성 추가.
마스터 데이터 로드 로직 추가.
로그 로드 로직 추가.
비밀번호 관련 속성 및 로직 추가 (MasterPasswordInput, IsMasterModeEnabled, CheckMasterPasswordCommand).
SaveChanges 호출 후 로그를 다시 로드하는 로직 추가 (옵션).
MasterDataViewModel 인스턴스 생성 및 관리 (탭 전환용).
C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Security; // SecureString 사용

namespace LockerManagementApp.ViewModels
{
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A"; // 예시 관리자

        // --- 신규 속성 ---
        private ObservableCollection<ActivityLog> _activityLogs; // 로그 목록
        private List<string> _allLockerTypes; // 마스터 데이터 목록 (콤보박스용)
        private List<string> _allFloors;
        private List<string> _allZones;
        private List<string> _allSubParts;
        private List<string> _allAdministrators;
        private bool _isMasterModeEnabled = false; // 마스터 탭 접근 권한
        private SecureString _masterPassword; // 비밀번호 입력 바인딩용 (PasswordBox는 직접 바인딩 어려움)
        private MasterDataViewModel _masterDataViewModel; // 마스터 데이터 관리 ViewModel
        private int _selectedTabIndex = 0; // 현재 선택된 탭 인덱스

        // --- 기존 속성 ---
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) RaiseCanExecuteChangedForCommands(); } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }

        // --- 신규 속성 Getter/Setter ---
        public ObservableCollection<ActivityLog> ActivityLogs { get => _activityLogs; set => SetProperty(ref _activityLogs, value); }
        public List<string> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public List<string> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public List<string> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public List<string> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public List<string> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public SecureString MasterPassword { get => _masterPassword; set => SetProperty(ref _masterPassword, value); } // View에서 Code-behind로 설정 필요
        public MasterDataViewModel MasterDataViewModel { get => _masterDataViewModel; set => SetProperty(ref _masterDataViewModel, value); }
        public int SelectedTabIndex { get => _selectedTabIndex; set => SetProperty(ref _selectedTabIndex, value); } // 탭 전환용

        // --- Commands ---
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; } // 비밀번호 확인 명령
        public ICommand LoadLogsCommand { get; } // 로그 로드 명령

        // --- 마스터 데이터 목록 (임시 - 실제로는 ViewModel 생성 시 DB에서 로드) ---
        // 아래 List들은 생성자에서 DB 로드 후 채워짐
        // public List<string> LockerTypes { get; } = new List<string> { "개인사물함", "락커", "신발장" }; ... (제거)

        // --- 비밀번호 (실제로는 안전하게 저장/관리 필요) ---
        private const string MASTER_KEY = "1234"; // 임시 마스터 키

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                 MessageBox.Show($"데이터베이스 컨텍스트 생성 중 오류 발생:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "데이터베이스 연결 오류!";
                 return;
            }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _activityLogs = new ObservableCollection<ActivityLog>();

            // 마스터 데이터 ViewModel 초기화
            _masterDataViewModel = new MasterDataViewModel(_context);
            // 마스터 데이터 변경 시 메인 ViewModel의 목록도 갱신하도록 이벤트 연결 (옵션)
            _masterDataViewModel.MasterDataChanged += async (sender, type) => await LoadMasterDataAsync(type);


            // Command 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadAllDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker, _ => _context != null);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null && _context != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned && _context != null);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword); // 비밀번호 확인
            LoadLogsCommand = new RelayCommand(async _ => await LoadLogsAsync()); // 로그 로드

            // 생성 시 데이터 로드
            _ = LoadAllDataAsync();
            _ = LoadLogsAsync(); // 로그도 초기에 로드
        }

        // 모든 데이터 로드 (메인 + 마스터 + 로그)
        private async Task LoadAllDataAsync()
        {
            await LoadAssignmentsAsync();
            await LoadAllMasterDataAsync();
        }

        // 사물함 배정 목록 로드
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleException("사물함 목록 로딩 오류", ex); }
        }

        // 모든 마스터 데이터 로드
        private async Task LoadAllMasterDataAsync()
        {
             if (_context == null) return;
             await LoadMasterDataAsync("LockerType");
             await LoadMasterDataAsync("Floor");
             await LoadMasterDataAsync("Zone");
             await LoadMasterDataAsync("SubPart");
             await LoadMasterDataAsync("Administrator");
             // MasterDataViewModel의 목록도 로드
             await MasterDataViewModel.LoadAllMasterDataAsync();
        }

        // 특정 타입의 마스터 데이터 로드 (콤보박스 채우기용)
        private async Task LoadMasterDataAsync(string type)
        {
            if (_context == null) return;
            try
            {
                switch (type)
                {
                    case "LockerType":
                        AllLockerTypes = await _context.LockerTypes.Select(t => t.Name).OrderBy(n => n).ToListAsync();
                        break;
                    case "Floor":
                        AllFloors = await _context.Floors.Select(t => t.Name).OrderBy(n => n).ToListAsync();
                        break;
                    case "Zone":
                        AllZones = await _context.Zones.Select(t => t.Name).OrderBy(n => n).ToListAsync();
                        break;
                    case "SubPart":
                        AllSubParts = await _context.SubParts.Select(t => t.Name).OrderBy(n => n).ToListAsync();
                        break;
                    case "Administrator":
                        AllAdministrators = await _context.Administrators.Select(t => t.Name).OrderBy(n => n).ToListAsync();
                        break;
                }
            }
            catch (Exception ex) { HandleException($"{type} 마스터 데이터 로딩 오류", ex); }
        }

        // 로그 목록 로드
        private async Task LoadLogsAsync()
        {
            if (_context == null) return;
            StatusBarText = "로그 로딩 중...";
            try
            {
                // 최근 1000개 로그만 가져오기 (성능 고려)
                var logs = await _context.ActivityLogs
                                         .OrderByDescending(log => log.Timestamp)
                                         .Take(1000)
                                         .ToListAsync();
                ActivityLogs = new ObservableCollection<ActivityLog>(logs);
                StatusBarText = $"로그 {ActivityLogs.Count}개 로드 완료. {StatusBarText}";
            }
            catch (Exception ex) { HandleException("로그 로딩 오류", ex); }
        }


        // 변경 사항 저장 (로그 기록은 DbContext에서 처리)
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            try
            {
                 // 중복 검사 등 유효성 검사 (필요 시 추가)

                // 관리자 정보 설정 (DbContext의 LogChanges에서 사용될 수 있음)
                var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                   .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);
                 foreach(var entry in changedEntries) { entry.Entity.Administrator = _currentAdmin; }


                int changedCount = await _context.SaveChangesAsync(); // 저장 시 로그 자동 기록됨
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";

                await LoadLogsAsync(); // 저장 후 로그 목록 갱신
            }
            catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); }
            catch (Exception ex) { HandleException("변경 사항 저장 오류", ex); }
        }

        // 나머지 CRUD 및 ClearAssignment 메서드는 이전과 유사하게 유지
        // (단, _context null 체크 추가)

        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment { /* ... 기본값 설정 ... */ Administrator = _currentAdmin };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 저장 필요.";
        }

        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;
             // ... (이전 삭제 로직, 예외 처리 강화) ...
             if (MessageBox.Show(...) == MessageBoxResult.Yes)
             {
                 try
                 {
                     // ... 삭제 로직 ...
                     await _context.SaveChangesAsync(); // 로그 자동 기록
                     // ... UI 업데이트 ...
                     await LoadLogsAsync(); // 로그 갱신
                 }
                 catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); await LoadAssignmentsAsync(); } // 롤백 대신 재로드
                 catch (Exception ex) { HandleException("삭제 오류", ex); await LoadAssignmentsAsync(); }
             }
        }

        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;
             SelectedAssignment.UserName = null;
             SelectedAssignment.KnoxId = null;
             SelectedAssignment.SubPart = null;
             _context.Entry(SelectedAssignment).State = EntityState.Modified;
             SelectedAssignment.Administrator = _currentAdmin; // 변경자 기록
             StatusBarText = "배정 해제됨. 저장 필요.";
        }

        // 비밀번호 확인 로직
        private void CheckMasterPassword(object parameter)
        {
            // SecureString을 일반 string으로 변환 (실제 사용 시 주의!)
            IntPtr valuePtr = IntPtr.Zero;
            string password = "";
            try
            {
                valuePtr = System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(MasterPassword);
                password = System.Runtime.InteropServices.Marshal.PtrToStringUni(valuePtr);
            }
            finally
            {
                System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(valuePtr);
            }

            // 실제로는 해시 비교 등 안전한 방법 사용 필요
            if (password == MASTER_KEY)
            {
                IsMasterModeEnabled = true;
                SelectedTabIndex = 1; // 마스터 데이터 탭으로 이동
                StatusBarText = "마스터 관리자 모드 활성화.";
            }
            else
            {
                IsMasterModeEnabled = false;
                MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                StatusBarText = "마스터 키 인증 실패.";
            }
            // 입력된 비밀번호 초기화 (SecureString은 Clear() 사용)
             MasterPassword?.Clear();
             OnPropertyChanged(nameof(MasterPassword)); // UI 업데이트 알림 (필요 시)
        }


        // --- Helper Methods ---
        private void RaiseCanExecuteChangedForCommands()
        {
            ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
            ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
        }

        private void HandleException(string contextMessage, Exception ex)
        {
            StatusBarText = $"{contextMessage}: {ex.Message}";
            MessageBox.Show($"{contextMessage}:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        private void HandleDbUpdateException(DbUpdateException dbEx)
        {
            var innerExceptionMessage = dbEx.InnerException?.Message ?? dbEx.Message;
            HandleException("데이터베이스 업데이트 오류", dbEx); // 상세 정보 포함하여 로깅/표시
            // 롤백 로직 (필요 시 추가)
            // RollbackChanges(...);
        }

        // IDisposable 구현 (DbContext 해제)
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) _context?.Dispose(); disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }