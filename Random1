LC와 PC 간의 통신에서 엔드 문자가 올 때까지 모든 데이터를 정확하게 읽기 위한 전문적인 C# 코드를 작성하는 방법은, 주어진 데이터를 읽고, STX(시작 문자)부터 ETX(종료 문자)까지 패킷을 수집한 뒤 이를 처리하는 방식으로 접근하는 것이 좋습니다. 비동기적으로 데이터를 처리하고, PLC 통신에서 주로 사용하는 ASCII 인코딩도 적용하겠습니다.

다음은 C#에서 PLC와 통신할 때, 완전한 패킷을 읽는 코드의 예입니다:

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public class PLCCommunication
{
    private SerialPort _serialPort;
    private const byte STX = 0x02;  // Start of Text
    private const byte ETX = 0x03;  // End of Text

    public PLCCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate, Parity.None, 8, StopBits.One);
        _serialPort.Encoding = Encoding.ASCII; // ASCII 인코딩 설정
        _serialPort.Open();
    }

    // 비동기적으로 데이터 읽기
    public async Task<string> ReadUntilETXAsync(CancellationToken cancellationToken)
    {
        var buffer = new byte[256];
        var stringBuilder = new StringBuilder();
        bool reading = false;  // STX 이후 데이터를 읽기 위한 플래그
        int bytesRead;

        while (!cancellationToken.IsCancellationRequested)
        {
            // 1. 데이터를 비동기적으로 읽는다.
            bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length, cancellationToken);
            
            // 2. 바이트 배열을 문자로 변환한다.
            for (int i = 0; i < bytesRead; i++)
            {
                if (buffer[i] == STX)
                {
                    // STX 문자를 만나면 읽기를 시작한다.
                    reading = true;
                    stringBuilder.Clear();  // 새로운 패킷 시작, 기존 데이터 초기화
                }
                else if (buffer[i] == ETX && reading)
                {
                    // ETX 문자를 만나면 읽기를 종료하고 데이터 반환
                    reading = false;
                    return stringBuilder.ToString();  // ETX가 오면 패킷을 반환
                }
                else if (reading)
                {
                    // STX 이후 ETX 전까지의 데이터를 수집
                    stringBuilder.Append((char)buffer[i]);
                }
            }
        }
        
        // 작업이 취소되거나 읽기 중단 시 빈 문자열 반환
        return string.Empty;
    }

    public void Close()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }
}
코드 설명:
SerialPort 설정: SerialPort 클래스는 COM 포트에서 데이터를 읽고 쓸 수 있도록 설정합니다. 이 경우 ASCII 인코딩을 사용하여 PLC의 데이터를 처리합니다.

STX와 ETX 처리: STX (시작 문자)와 ETX (종료 문자)를 바탕으로 통신 패킷을 구분합니다. STX가 오면 데이터를 수집하기 시작하고, ETX가 오면 데이터를 반환하여 패킷의 끝을 구분합니다.

비동기 처리: ReadAsync를 사용하여 비동기적으로 데이터를 읽습니다. CancellationToken을 사용하여 취소할 수 있는 구조를 갖추었습니다.

데이터 수집: stringBuilder를 사용하여 STX 이후부터 ETX까지의 데이터를 문자로 변환하고 수집합니다.

예외 처리: 비동기 작업 중 발생할 수 있는 예외나 취소 처리를 위해 CancellationToken을 활용합니다.

이 코드는 PLC에서 데이터를 읽을 때 완전한 패킷을 수신할 수 있도록 STX부터 ETX까지 읽고, 통신이 끝나면 패킷을 반환합니