ItemLink 관련 빨간 줄 문제는 DevExpress의 RibbonControl에서 BarItem 또는 BarButtonItem의 클릭 이벤트 및 컨텍스트 메뉴를 처리하는 방식이 정확하지 않아서 발생할 수 있습니다. DevExpress RibbonControl은 ItemLinks 대신 BarItem 객체를 다루는 방식으로 코드가 작성되어야 합니다.

수정된 버전은 아래와 같습니다.

수정된 코드
이 코드는 DevExpress의 RibbonControl에서 우클릭 이벤트를 감지하고 버튼의 컨텍스트 메뉴를 추가로 표시하며, 즐겨찾기 페이지를 동적으로 관리합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private const string FavoritesFilePath = @"C:\agent\mgspfavoriate.ini"; // 즐겨찾기 파일 경로
        private RibbonPage favoritesPage; // 즐겨찾기 페이지
        private readonly List<string> favoriteKeys = new List<string>(); // 즐겨찾기된 버튼 키 목록

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            InitializeContextMenu();
            LoadFavoritesFromFile();
        }

        // 1. 즐겨찾기 페이지 초기화
        private void InitializeFavoritesPage()
        {
            favoritesPage = new RibbonPage("즐겨찾기") { Name = "FavoritesPage" };
            ribbonControl1.Pages.Insert(0, favoritesPage); // 가장 좌측에 추가
        }

        // 2. 우클릭 메뉴 초기화
        private void InitializeContextMenu()
        {
            ribbonControl1.MouseDown += (sender, e) =>
            {
                if (e.Button != System.Windows.Forms.MouseButtons.Right) return;

                var hitInfo = ribbonControl1.CalcHitInfo(e.Location);
                if (hitInfo?.Link != null)
                {
                    var barItem = hitInfo.Link.Item as BarButtonItem;
                    if (barItem != null)
                    {
                        ShowContextMenu(barItem, e.Location);
                    }
                }
            };
        }

        // 3. 우클릭 메뉴 표시
        private void ShowContextMenu(BarButtonItem item, Point location)
        {
            var popupMenu = new PopupMenu { Ribbon = ribbonControl1 };

            if (IsFavorite(item.Name))
            {
                // 즐겨찾기에 있는 경우 "즐겨찾기 삭제" 메뉴 추가
                popupMenu.AddItem(new BarButtonItem
                {
                    Caption = "즐겨찾기 삭제",
                    Name = "RemoveFavorite"
                }).ItemClick += (s, e) => RemoveFromFavorites(item.Name);
            }
            else
            {
                // 즐겨찾기에 없는 경우 "즐겨찾기 추가" 메뉴 추가
                popupMenu.AddItem(new BarButtonItem
                {
                    Caption = "즐겨찾기 추가",
                    Name = "AddFavorite"
                }).ItemClick += (s, e) => AddToFavorites(item.Name);
            }

            popupMenu.ShowPopup(ribbonControl1.PointToScreen(location));
        }

        // 4. 즐겨찾기 추가
        private void AddToFavorites(string buttonKey)
        {
            var button = ribbonControl1.Items[buttonKey] as BarButtonItem;
            if (button == null) return;

            var originalGroup = FindGroupContainingButton(buttonKey);
            if (originalGroup == null) return;

            var groupName = originalGroup.Text;
            var favoriteGroup = GetOrCreateFavoritesGroup(groupName);

            // 버튼 복사하여 추가
            var newButton = new BarButtonItem
            {
                Name = buttonKey,
                Caption = button.Caption,
                Glyph = button.Glyph,
                RibbonStyle = button.RibbonStyle
            };
            favoriteGroup.ItemLinks.Add(newButton);

            if (!favoriteKeys.Contains(buttonKey))
                favoriteKeys.Add(buttonKey);

            SaveFavoritesToFile();
        }

        // 5. 즐겨찾기 삭제
        private void RemoveFromFavorites(string buttonKey)
        {
            foreach (var group in favoritesPage.Groups)
            {
                var itemLink = group.ItemLinks[buttonKey];
                if (itemLink != null)
                {
                    group.ItemLinks.Remove(itemLink);
                    break;
                }
            }

            favoriteKeys.Remove(buttonKey);
            SaveFavoritesToFile();
        }

        // 6. 즐겨찾기 그룹 찾거나 생성
        private RibbonPageGroup GetOrCreateFavoritesGroup(string groupName)
        {
            var group = favoritesPage.Groups[groupName];
            if (group == null)
            {
                group = new RibbonPageGroup(groupName);
                favoritesPage.Groups.Add(group);
            }
            return group;
        }

        // 7. 버튼이 포함된 그룹 찾기
        private RibbonPageGroup FindGroupContainingButton(string buttonKey)
        {
            foreach (var page in ribbonControl1.Pages)
            {
                foreach (var group in page.Groups)
                {
                    if (group.ItemLinks.Any(link => link.Item.Name == buttonKey))
                        return group;
                }
            }
            return null;
        }

        // 8. 즐겨찾기 파일로부터 데이터 로드
        private void LoadFavoritesFromFile()
        {
            if (!File.Exists(FavoritesFilePath)) return;

            var lines = File.ReadAllLines(FavoritesFilePath);
            foreach (var line in lines)
            {
                if (string.IsNullOrWhiteSpace(line)) continue;
                favoriteKeys.Add(line);
            }

            foreach (var buttonKey in favoriteKeys)
            {
                AddToFavorites(buttonKey);
            }
        }

        // 9. 즐겨찾기 데이터 저장
        private void SaveFavoritesToFile()
        {
            Directory.CreateDirectory(Path.GetDirectoryName(FavoritesFilePath)); // 디렉터리 생성
            File.WriteAllLines(FavoritesFilePath, favoriteKeys);
        }

        // 10. 즐겨찾기 확인
        private bool IsFavorite(string buttonKey)
        {
            return favoriteKeys.Contains(buttonKey);
        }
    }
}
주요 변경 사항
CalcHitInfo 수정:

CalcHitInfo 메서드에서 Link 속성을 사용해 클릭된 BarButtonItem을 정확히 가져옵니다.
오류 없이 BarButtonItem 컨텍스트 메뉴를 표시합니다.
즐겨찾기 그룹 및 페이지 관리:

FindGroupContainingButton과 GetOrCreateFavoritesGroup 메서드를 활용해 버튼을 동적으로 그룹에 추가하거나 제거합니다.
ItemLinks 관련 수정:

DevExpress의 ItemLinks 접근 방식에 맞춰 코드를 작성했습니다.
모든 그룹 및 페이지를 RibbonControl에서 검색하여 버튼이 포함된 그룹을 찾아냅니다.
테스트 및 결과
즐겨찾기 추가:

리본 버튼을 우클릭하여 "즐겨찾기 추가"를 선택하면 버튼이 "즐겨찾기" 페이지로 복사됩니다.
즐겨찾기 삭제:

"즐겨찾기" 페이지에서 버튼을 우클릭하여 "즐겨찾기 삭제"를 선택하면 버튼이 제거됩니다.
데이터 저장 및 복원:

C:\agent\mgspfavoriate.ini에 즐겨찾기 데이터가 저장되며, 프로그램 실행 시 자동 복원됩니다.











ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.