using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 사용
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using System.Security; // SecureString 사용
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices; // SecureString 변환용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel 클래스 (.NET Framework 4.8 버전 - 기능 추가)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A"; // 예시 관리자 (실제로는 로그인 정보 사용)

        // --- 마스터 키 관련 ---
        private SecureString _masterPasswordInput; // PasswordBox와 바인딩
        private bool _isMasterModeEnabled = false; // 마스터 관리 탭 표시 여부

        // --- 마스터 데이터 목록 (ComboBox용) ---
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        // --- 자식 ViewModel 인스턴스 ---
        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }


        #region Public Properties

        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }

        // --- 마스터 키 속성 ---
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }

        // --- 마스터 데이터 목록 속성 ---
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }

        #endregion

        #region Commands
        // --- 기존 Commands ---
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        // --- 신규 Command ---
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; } // 마스터 데이터 새로고침용

        #endregion

        /// <summary>
        /// MainViewModel 생성자
        /// </summary>
        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex)
            {
                 MessageBox.Show($"데이터베이스 컨텍스트 생성 중 오류 발생:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "데이터베이스 연결 오류!";
                 // 자식 ViewModel 생성 및 데이터 로드 방지
                 return;
            }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            // 자식 ViewModel 생성 (DbContext 전달 또는 내부 생성)
            MasterDataVM = new MasterDataViewModel(_context); // DbContext 전달 방식 예시
            LogVM = new LogViewModel(_context);

            // Command 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync()); // 초기 로드 통합
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync()); // 마스터 데이터만 새로고침

            // 생성 시 데이터 로드
            _ = LoadInitialDataAsync();
        }

        /// <summary>
        /// 초기 데이터 (사물함 배정 목록 및 마스터 데이터 목록) 로드
        /// </summary>
        private async Task LoadInitialDataAsync()
        {
            await LoadAssignmentsAsync();
            await LoadMasterDataAsync();
        }

        /// <summary>
        /// 사물함 배정 목록 로드
        /// </summary>
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleDataAccessException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 (콤보박스용) 로드
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "마스터 데이터 로딩 중...";
            try
            {
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync());
                StatusBarText = "마스터 데이터 로드 완료.";

                // MasterDataViewModel의 목록도 갱신 (이벤트 방식이 더 좋음)
                MasterDataVM?.LoadAllMasterData();
            }
            catch (Exception ex) { HandleDataAccessException("마스터 데이터 로딩", ex); }
        }


        /// <summary>
        /// 마스터 키 비밀번호 확인
        /// </summary>
        private void CheckMasterPassword(object parameter)
        {
            try
            {
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey))
                {
                    MessageBox.Show("설정 파일(App.config)에 마스터 키가 정의되지 않았습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                    return;
                }

                // SecureString을 일반 string으로 변환 (주의: 메모리에 평문 문자열이 잠시 노출됨)
                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);

                if (plainPassword == storedMasterKey)
                {
                    IsMasterModeEnabled = true; // 마스터 모드 활성화
                    StatusBarText = "마스터 관리자 모드가 활성화되었습니다.";
                    MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information);
                }
                else
                {
                    IsMasterModeEnabled = false; // 마스터 모드 비활성화
                    MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                }

                // 입력된 비밀번호 초기화 (선택 사항)
                // MasterPasswordInput?.Clear(); // SecureString 직접 수정 불가, PasswordBox를 통해 제어 필요
            }
            catch (Exception ex)
            {
                MessageBox.Show($"마스터 키 확인 중 오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // --- 기존 SaveChangesAsync, AddNewLocker, DeleteSelectedAsync, ClearSelectedAssignment 등 ---
        // (이전 .NET Framework 4.8 버전 코드 유지, RollbackChanges 포함)
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            try
            {
                 var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);
                 if (duplicates.Any()) { /* ... 중복 처리 ... */ RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); return; }
                foreach(var entry in changedEntries) { entry.Entity.Administrator = _currentAdmin; }
                int changedCount = await _context.SaveChangesAsync(); // 로그 기록은 DbContext에서 처리
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx) { /* ... 오류 처리 ... */ RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
            catch (Exception ex) { /* ... 오류 처리 ... */ RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()); }
        }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries)
        {
            if (_context == null) return;
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified: entry.CurrentValues.SetValues(entry.OriginalValues); entry.State = EntityState.Unchanged; break;
                    case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break;
                    case EntityState.Deleted: entry.State = EntityState.Unchanged; break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }
        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment { /* ... 기본값 설정 ... */ Administrator = _currentAdmin };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 저장 필요.";
        }
        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;
            if (MessageBox.Show(/* ... 확인 ... */) == MessageBoxResult.Yes)
            {
                StatusBarText = "삭제 중...";
                try { /* ... 삭제 로직 ... */ await _context.SaveChangesAsync(); /* ... UI 제거 ... */ }
                catch (DbUpdateException dbEx) { /* ... 오류 처리 및 롤백 ... */ await LoadAssignmentsAsync(); }
                catch (Exception ex) { /* ... 오류 처리 ... */ await LoadAssignmentsAsync(); }
            }
        }
        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;
            SelectedAssignment.UserName = null; SelectedAssignment.KnoxId = null; SelectedAssignment.SubPart = null;
            _context.Entry(SelectedAssignment).State = EntityState.Modified; SelectedAssignment.Administrator = _currentAdmin;
            StatusBarText = "배정 해제됨. 저장 필요.";
        }
        // --- 기존 메서드 끝 ---

        /// <summary>
        /// 데이터 접근 중 발생하는 예외 처리
        /// </summary>
        private void HandleDataAccessException(string operation, Exception ex)
        {
            StatusBarText = $"{operation} 중 오류 발생: {ex.Message}";
            MessageBox.Show($"{operation} 중 오류가 발생했습니다:\n{ex.ToString()}", "데이터 오류", MessageBoxButton.OK, MessageBoxImage.Error);
        }

        /// <summary>
        /// SecureString을 일반 string으로 변환 (메모리 보안 주의)
        /// </summary>
        private string ConvertToUnsecureString(SecureString securePassword)
        {
            if (securePassword == null) return string.Empty;

            IntPtr unmanagedString = IntPtr.Zero;
            try
            {
                unmanagedString = Marshal.SecureStringToGlobalAllocUnicode(securePassword);
                return Marshal.PtrToStringUni(unmanagedString);
            }
            finally
            {
                Marshal.ZeroFreeGlobalAllocUnicode(unmanagedString);
            }
        }


        #region IDisposable 구현
        private bool disposed = false;
        protected virtual void Dispose(bool disposing)
        {
            if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; }
        }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }