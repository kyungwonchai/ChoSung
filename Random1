import socket
import time
import datetime
from win10toast import ToastNotifier # win10toast 라이브러리 임포트

# --- 설정 (변수명 연결) ---
# 이미지에서 확인된 IP 주소와 포트 사용
TARGET_HOST = ' ' # 체크할 대상 서버의 IP 주소 또는 호스트명
TARGET_PORT = 2          # 체크할 대상 포트 (예: RDP 기본 포트, 혹은 SQL Server 포트라면 1433)
CHECK_INTERVAL_SECONDS = 10 # 몇 초마다 체크할지 (예: 10초마다)
LOG_FILE_PATH = 'port_check_log.txt' # 로그를 기록할 파일 경로

# 토스트 알림 객체 생성
toaster = ToastNotifier()

def check_port(host, port):
    """지정된 호스트의 특정 포트가 열려 있는지 확인합니다."""
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1) # 연결 시도 타임아웃 1초 설정
    try:
        result = sock.connect_ex((host, port))
        if result == 0:
            return True # 포트가 열려 있음
        else:
            return False # 포트가 닫혀 있거나 연결할 수 없음 (result 값으로 세분화 가능: 10061 연결 거부, 10035 비블로킹 소켓 작업 완료 불가 등)
    except socket.error as e:
        # 네트워크 오류 등 예외 발생
        # print(f"[{datetime.datetime.now()}] Error connecting to {host}:{port} - {e}") # 로그에 이미 기록하므로 중복 출력 방지
        return False
    finally:
        sock.close()

def write_log(message):
    """로그 메시지를 콘솔에 출력하고 파일에 기록합니다."""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_entry = f"[{timestamp}] {message}"
    print(log_entry)
    with open(LOG_FILE_PATH, 'a', encoding='utf-8') as f:
        f.write(log_entry + '\n')

def show_notification(title, message):
    """Windows 토스트 알림을 표시합니다."""
    try:
        # icon_path 인자를 제거하거나 유효한 .ico 파일 경로로 변경
        toaster.show_toast(title, message, duration=5, threaded=True) 
        # duration: 알림 표시 시간(초), threaded=True: 알림 표시가 메인 스크립트 실행을 막지 않도록 함
    except Exception as e:
        write_log(f"Error showing notification: {e}")
        # 알림 실패 시에도 스크립트는 계속 진행되도록 함

def main():
    """메인 함수: 주기적으로 포트 상태를 체크하고 로그를 기록합니다."""
    write_log(f"Starting port checker for {TARGET_HOST}:{TARGET_PORT} every {CHECK_INTERVAL_SECONDS} seconds...")
    
    # 이전 포트 상태를 추적하여 변경 시에만 알림
    last_port_status = None 

    while True:
        current_port_status = check_port(TARGET_HOST, TARGET_PORT)
        
        if current_port_status:
            status_message = f"Port {TARGET_PORT} on {TARGET_HOST} is OPEN."
            # 포트가 OPEN 상태로 변경되거나, 처음부터 OPEN일 때만 알림
            if last_port_status != True: # 포트가 닫힘 -> 열림 으로 전환될 때 또는 스크립트 시작 후 처음 열림 상태일 때
                write_log(status_message) # 로그 먼저 기록
                show_notification("SQL Server Port Status", f"포트 {TARGET_PORT}가 열렸습니다!")
                write_log("Port is OPEN. Exiting script.")
                break # 포트가 열렸으면 루프를 종료하고 스크립트 종료
        else:
            status_message = f"Port {TARGET_PORT} on {TARGET_HOST} is CLOSED or unreachable."
            # 포트가 CLOSED 상태로 변경되거나, 처음부터 CLOSED일 때만 알림
            if last_port_status != False: # 포트가 열림 -> 닫힘 으로 전환될 때 또는 스크립트 시작 후 처음 닫힘 상태일 때
                write_log(status_message) # 로그 먼저 기록
                show_notification("SQL Server Port Status", f"포트 {TARGET_PORT}가 닫혔거나 연결할 수 없습니다!")
        
        last_port_status = current_port_status # 현재 상태를 이전 상태로 저장

        time.sleep(CHECK_INTERVAL_SECONDS) # 지정된 시간만큼 대기 (OPEN 시에는 실행되지 않음)

if __name__ == "__main__":
    main()