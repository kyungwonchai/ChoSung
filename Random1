음은 C:\prod_file_log_backup뿐만 아니라, C:\prod_file_logs 폴더도 관리하며 1개월이 지난 폴더와 그 안의 파일을 삭제하는 기능을 포함시킨 코드입니다. 두 작업을 동시에 관리할 수 있도록 클래스에 해당 기능을 추가하고, 동일한 주기로 동작하도록 했습니다.

csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;

public class FolderBackupManager
{
    // 백업 원본 폴더
    private readonly string sourceBackupPath = @"C:\prod_file_log_backup";
    
    // 오래된 백업 폴더를 이동할 목적지 폴더
    private readonly string targetBackupPath = @"C:\proc_file_log_backup_old";
    
    // prod_file_logs 폴더
    private readonly string sourceLogsPath = @"C:\prod_file_logs";
    
    // 백업 기준일 (5일 이상 경과된 폴더 이동)
    private readonly int daysThreshold = 5;

    // prod_file_logs 폴더의 삭제 기준일 (1개월, 30일)
    private readonly int logsDaysThreshold = 30;

    // 클래스 생성자
    public FolderBackupManager()
    {
        // 만약 목적지 폴더가 존재하지 않으면 생성
        if (!Directory.Exists(targetBackupPath))
        {
            Directory.CreateDirectory(targetBackupPath);
        }
    }

    // 1일마다 비동기로 실행되는 메소드
    public async Task StartFolderBackupAsync()
    {
        while (true)
        {
            // 폴더 백업 및 로그 폴더 정리 작업 시작
            await BackupAndCleanupFoldersAsync();

            // 1일 대기 (86400초 = 24시간)
            await Task.Delay(TimeSpan.FromDays(1));
        }
    }

    // 오래된 폴더를 백업하고, 오래된 로그 폴더는 삭제하는 메소드
    private async Task BackupAndCleanupFoldersAsync()
    {
        try
        {
            // 백업 폴더 처리
            await BackupOldFoldersAsync(sourceBackupPath, targetBackupPath, daysThreshold);

            // prod_file_logs 폴더 처리 (1개월 경과된 폴더 및 파일 삭제)
            await DeleteOldFoldersAsync(sourceLogsPath, logsDaysThreshold);
        }
        catch (Exception ex)
        {
            // 예외 처리: 오류 발생 시 콘솔에 출력
            Console.WriteLine($"오류 발생: {ex.Message}");
        }
    }

    // 오래된 폴더를 찾아서 이동하는 비동기 메소드 (백업 폴더용)
    private async Task BackupOldFoldersAsync(string sourcePath, string targetPath, int daysThreshold)
    {
        // 소스 경로에서 모든 폴더 가져오기
        var folders = Directory.GetDirectories(sourcePath);

        // 현재 날짜 가져오기
        DateTime currentDate = DateTime.Now;

        // 모든 폴더를 확인
        foreach (var folder in folders)
        {
            // 폴더 이름에서 날짜 부분 추출 (yyyyMMdd 형식)
            string folderName = Path.GetFileName(folder);

            // 날짜 변환을 시도, 실패 시 다음 폴더로 넘어감
            if (DateTime.TryParseExact(folderName, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime folderDate))
            {
                // 폴더 생성 날짜와 현재 날짜의 차이 계산
                TimeSpan timeDiff = currentDate - folderDate;

                // 날짜 차이가 기준일보다 크면 폴더 이동
                if (timeDiff.TotalDays > daysThreshold)
                {
                    string destinationFolder = Path.Combine(targetPath, folderName);

                    // 비동기로 폴더 이동 (동일 이름이 있을 경우 덮어쓰기)
                    await Task.Run(() =>
                    {
                        if (Directory.Exists(destinationFolder))
                        {
                            Directory.Delete(destinationFolder, true); // 기존 폴더 삭제
                        }
                        Directory.Move(folder, destinationFolder); // 폴더 이동
                    });

                    // 로그 출력
                    Console.WriteLine($"폴더 '{folderName}'가 {targetPath}로 이동되었습니다.");
                }
            }
            else
            {
                // 폴더명이 올바른 날짜 형식이 아닐 경우 로그 출력
                Console.WriteLine($"폴더 '{folderName}'는 유효한 날짜 형식이 아닙니다.");
            }
        }
    }

    // 오래된 폴더 및 파일을 삭제하는 비동기 메소드 (prod_file_logs 폴더용)
    private async Task DeleteOldFoldersAsync(string sourcePath, int daysThreshold)
    {
        // 소스 경로에서 모든 폴더 가져오기
        var folders = Directory.GetDirectories(sourcePath);

        // 현재 날짜 가져오기
        DateTime currentDate = DateTime.Now;

        // 모든 폴더를 확인
        foreach (var folder in folders)
        {
            // 폴더 이름에서 날짜 부분 추출 (yyyyMMdd 형식)
            string folderName = Path.GetFileName(folder);

            // 날짜 변환을 시도, 실패 시 다음 폴더로 넘어감
            if (DateTime.TryParseExact(folderName, "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out DateTime folderDate))
            {
                // 폴더 생성 날짜와 현재 날짜의 차이 계산
                TimeSpan timeDiff = currentDate - folderDate;

                // 날짜 차이가 기준일보다 크면 폴더 삭제
                if (timeDiff.TotalDays > daysThreshold)
                {
                    // 비동기로 폴더 및 파일 삭제
                    await Task.Run(() =>
                    {
                        Directory.Delete(folder, true); // 폴더 및 그 안의 파일 삭제
                    });

                    // 로그 출력
                    Console.WriteLine($"폴더 '{folderName}' 및 그 안의 파일이 삭제되었습니다.");
                }
            }
            else
            {
                // 폴더명이 올바른 날짜 형식이 아닐 경우 로그 출력
                Console.WriteLine($"폴더 '{folderName}'는 유효한 날짜 형식이 아닙니다.");
            }
        }
    }
}

// 프로그램 실행부
public class Program
{
    public static async Task Main(string[] args)
    {
        // 폴더 백업 매니저 인스턴스 생성
        var backupManager = new FolderBackupManager();

        // 비동기적으로 1일마다 폴더 백업 및 로그 폴더 정리 시작
        await backupManager.StartFolderBackupAsync();
    }
}
추가된 주요 기능 설명:
DeleteOldFoldersAsync 메소드: C:\prod_file_logs 폴더에서 1개월(30일) 이상 지난 폴더 및 그 안의 모든 파일을 삭제합니다. 동일한 yyyyMMdd 형식의 폴더 이름을 사용하고, 날짜 형식이 맞지 않는 폴더는 건너뜁니다.
BackupAndCleanupFoldersAsync 메소드: 기존 백업 폴더 처리 (C:\prod_file_log_backup의 5일 지난 폴더를 이동)와 함께 C:\prod_file_logs에서 1개월 지난 폴더를 삭제하는 기능을 결합한 메소드입니다.