// MGSPMonitorControl/App.xaml.cs
using System;
using System.Windows;
using MGSPMonitorControl.Services;  // BrokerClientService, DatabaseService 등 (실제 초기화는 주석 유지)
using MGSPMonitorControl.ViewModels; 
using MGSPMonitorControl.Views;      // MainWindow가 루트면 new MainWindow()
using System.Threading.Tasks;     
using System.Configuration; // App.config 사용을 위해

namespace MGSPMonitorControl
{
    public partial class App : Application
    {
        // 서비스 필드들은 선언만 해두고, 초기화는 단계적으로 진행
        private IDatabaseService _databaseService;
        private IBrokerClientService _brokerClientService;

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Application OnStartup - Step 1: ViewModel Test.");

            SetupGlobalExceptionHandling(); 

            try
            {
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Attempting to create MainViewModel and MainWindow...");

                // --- MainViewModel 생성 (서비스는 일단 null로 전달하여 ViewModel 자체 로딩 테스트) ---
                // 실제 서비스 초기화는 다음 단계에서 하나씩 활성화합니다.
                // 이렇게 하면 MainViewModel 생성자에서 서비스가 null일 때를 대비한 방어 코드가 중요해집니다.
                // (이전 답변의 MainViewModel은 이를 고려하여 수정되었습니다.)
                
                // 실제 서비스 초기화 시도 (이 부분에서 오류나면 App.config 문제일 가능성 높음)
                // 만약 이 부분에서 오류나면, 이전처럼 null을 전달하고 해당 서비스 사용 로직을 ViewModel에서 막아야 함.
                try
                {
                    _databaseService = new DatabaseService(); // App.config의 연결 문자열 사용
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] DatabaseService potentially initialized (check App.config if issues).");
                }
                catch (ConfigurationErrorsException cex)
                {
                    ShowCriticalErrorAndShutdown($"CRITICAL: App.config error for Database: {cex.Message}\nConnection string 'MonitorControlDBConnection' must be valid.");
                    return;
                }
                catch (Exception exDb)
                {
                    ShowCriticalErrorAndShutdown($"CRITICAL: Error initializing DatabaseService: {exDb.ToString()}");
                    return;
                }

                try
                {
                     _brokerClientService = new BrokerClientService(); // App.config의 BrokerAddress 사용
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] BrokerClientService potentially initialized (check App.config if issues).");
                }
                catch (ConfigurationErrorsException cex)
                {
                    ShowCriticalErrorAndShutdown($"CRITICAL: App.config error for Broker: {cex.Message}\nAppSetting 'BrokerAddress' must be valid (IP:Port).");
                    return;
                }
                catch (Exception exBroker)
                {
                    ShowCriticalErrorAndShutdown($"CRITICAL: Error initializing BrokerClientService: {exBroker.ToString()}");
                    return;
                }


                MainViewModel mainViewModel = null;
                try
                {
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating MainViewModel with actual services (or null if init failed)...");
                    mainViewModel = new MainViewModel(_databaseService, _brokerClientService);
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainViewModel instance created.");
                }
                catch (Exception exVm)
                {
                    ShowCriticalErrorAndShutdown($"Error CREATING MainViewModel instance: {exVm.ToString()}");
                    return;
                }

                MainWindow mainWindow = null;
                try
                {
                     Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Creating new MainWindow(mainViewModel) instance...");
                    // MainWindow가 루트에 있다면 new MainWindow(), Views 폴더면 new Views.MainWindow()
                    mainWindow = new MainWindow(mainViewModel); // MainWindow 생성자에 MainViewModel 전달
                    Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainWindow instance created.");
                }
                catch (Exception exCreate)
                {
                    ShowCriticalErrorAndShutdown($"Error CREATING MainWindow instance with ViewModel: {exCreate.ToString()}");
                    return;
                }
                
                this.MainWindow = mainWindow;
                
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Attempting to SHOW MainWindow...");
                mainWindow.Show();
                Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainWindow.Show() called. Window should be visible or loading.");
            }
            catch (Exception ex) // 최상위 포괄적 예외 처리
            {
                 ShowCriticalErrorAndShutdown($"An UNEXPECTED critical error occurred during application startup: {ex.ToString()}\nThe application will now exit.");
            }
        }
        
        private void SetupGlobalExceptionHandling()
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Setting up global exception handlers.");
            this.DispatcherUnhandledException += (s, e) =>
            {
                string errorMessage = $"[UI THREAD CRASH] {e.Exception.ToString()}";
                Console.WriteLine(errorMessage);
                try { MessageBox.Show(errorMessage, "Unhandled UI Exception - App Unstable", MessageBoxButton.OK, MessageBoxImage.Error); } catch {}
                e.Handled = true; 
            };

            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                string errorMessage = $"[BACKGROUND THREAD CRASH] {e.Exception.ToString()}";
                Console.WriteLine(errorMessage);
                e.SetObserved(); 
            };
        }
        
        private void ShowCriticalErrorAndShutdown(string message)
        {
            Console.WriteLine($"[FATAL STARTUP ERROR] {message}"); 
            try { MessageBox.Show(message, "Application Startup Error", MessageBoxButton.OK, MessageBoxImage.Error); } catch {}
            
            if (Application.Current != null) 
            {
                if (Application.Current.Dispatcher.CheckAccess()) {
                    try { Application.Current.Shutdown(-1); } catch { try { Environment.Exit(-1); } catch {}}
                }
                else {
                    Application.Current.Dispatcher.Invoke(() => {
                        try { Application.Current.Shutdown(-1); } catch { try { Environment.Exit(-1); } catch {}}
                    });
                }
            }
            else { try { Environment.Exit(-1); } catch {} }
        }

        protected override void OnExit(ExitEventArgs e)
        {
            Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] Application OnExit called. ExitCode: {e.ApplicationExitCode}");
            // MainViewModel의 Cleanup은 MainWindow_Closing에서 호출
            // BrokerClientService의 Dispose는 MainViewModel.Cleanup에서 호출될 수 있도록 설계 또는 여기서 명시적 호출
            (_brokerClientService as IDisposable)?.Dispose(); // 안전하게 Dispose
            base.OnExit(e);
        }
    }
}