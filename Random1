아래는 MSSQL 데이터베이스에서 데이터를 조회하고, Sensor1 값에 따라 동그라미를 그려주는 Flask 웹 애플리케이션의 구현 예제입니다. 이 예제는 MSSQL에 연결해 데이터를 가져오고, IP 순서로 정렬하여 웹 페이지에 테이블과 동그라미를 표시합니다.

1. MSSQL 데이터베이스 연결을 위한 설정
먼저, MSSQL 서버와 연결하기 위해 pyodbc와 같은 파이썬 라이브러리가 필요합니다. 설치하려면 다음 명령을 사용하세요:

bash
코드 복사
pip install pyodbc
2. Flask 애플리케이션 (app.py)
python
코드 복사
from flask import Flask, render_template
import pyodbc

app = Flask(__name__)

# MSSQL 연결 설정
conn_str = (
    r"Driver={SQL Server};"
    r"Server=YOUR_SERVER_NAME;"
    r"Database=YOUR_DATABASE_NAME;"
    r"UID=YOUR_USERNAME;"
    r"PWD=YOUR_PASSWORD;"
)

def get_log_sensors():
    data = []
    try:
        with pyodbc.connect(conn_str) as conn:
            cursor = conn.cursor()
            query = "SELECT IP, Sensor1, Time1 FROM LogSensors ORDER BY IP"
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                ip = row.IP
                sensor1 = row.Sensor1
                time1 = row.Time1
                data.append({'ip': ip, 'sensor1': sensor1, 'time1': time1})
    except Exception as e:
        print(f"Database connection failed: {e}")
    return data

@app.route('/')
def index():
    return "Welcome to the Flask App!"

@app.route('/logsensors')
def log_sensors():
    data = get_log_sensors()
    return render_template('logsensors.html', data=data)

if __name__ == '__main__':
    app.run(debug=True)
3. HTML 템플릿 (templates/logsensors.html)
Flask의 템플릿 엔진인 Jinja를 사용해 데이터를 테이블과 동그라미로 표시할 수 있습니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            margin: 2px;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
    </style>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <table>
        <thead>
            <tr>
                <th>IP</th>
                <th>Sensors</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            {% for item in data %}
            <tr>
                <td>{{ item.ip }}</td>
                <td>
                    {% for char in item.sensor1 %}
                    <span class="circle {% if char == '1' %}red{% else %}green{% endif %}"></span>
                    {% endfor %}
                </td>
                <td>{{ item.time1 }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
설명
get_log_sensors 함수:

MSSQL 서버에서 LogSensors 테이블의 데이터를 조회하고, IP 순서로 정렬하여 가져옵니다. 결과는 딕셔너리 형식으로 리스트에 저장됩니다.
log_sensors 라우트:

/logsensors 경로로 접근하면 logsensors.html 템플릿에 데이터를 전달하여 렌더링합니다.
HTML 템플릿 (logsensors.html):

테이블을 통해 IP, Sensor1의 동그라미(0과 1을 색상으로 구분), Time1을 표시합니다.
.circle 클래스는 동그라미 모양을 만들고, .red와 .green 클래스는 각각 빨간색과 녹색으로 동그라미 색상을 설정합니다.
4. 실행 방법
MSSQL 연결 정보를 정확히 설정합니다 (YOUR_SERVER_NAME, YOUR_DATABASE_NAME, YOUR_USERNAME, YOUR_PASSWORD).
Flask 애플리케이션을 실행합니다:
bash
코드 복사
python app.py