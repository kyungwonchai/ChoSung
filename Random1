니다.

가장 간단한 방법은 모든 제어 이력을 삭제하는 기능을 만드는 것입니다. (특정 기간만 삭제하는 것은 좀 더 복잡한 로직이 필요합니다.)

수정 및 신규 파일:

app/routes_logs.py (수정): 모든 제어 이력을 삭제하는 새로운 라우트를 추가합니다. 관리자만 접근 가능하도록 설정합니다.
app/templates/logs/view_logs.html (수정): "모든 이력 삭제" 버튼을 추가하고, 관리자에게만 보이도록 합니다. 버튼 클릭 시 JavaScript로 재확인 메시지를 띄웁니다.
1. 수정: app/routes_logs.py (이력 삭제 라우트 추가)
기존 view_action_logs 함수 외에, 모든 로그를 삭제하는 delete_all_action_logs 함수를 추가합니다.

Python

# scontrol_flask_web/app/routes_logs.py
from flask import Blueprint, render_template, request, current_app, g, flash, redirect, url_for
from app.db_utils import get_db_connection
from app.auth import ip_auth_required
from datetime import datetime as dt, timedelta
import math
import json
import pymssql

logs_bp = Blueprint('logs', __name__)

@logs_bp.route('/action_logs')
@ip_auth_required('user') 
def view_action_logs():
    page = request.args.get('page', 1, type=int)
    per_page = 15 
    offset = (page - 1) * per_page
    
    logs_on_page = []
    total_logs = 0
    chart_data_raw = {
        '켜기설정_성공': 0, '켜기설정_실패': 0, '끄기설정_성공': 0, 
        '끄기설정_실패': 0, '즉시켜기_성공': 0, '즉시켜기_실패': 0,
    }
    conn = None
    pagination_data = {
        'page': page, 'per_page': per_page, 'total_items': 0, 'total_pages': 1, 
        'items': [], 'has_prev': False, 'has_next': False, 
        'prev_num': 1, 'next_num': 1
    }


    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            three_days_ago = dt.now() - timedelta(days=3)
            
            count_query = "SELECT COUNT(*) AS total FROM dbo.action_logs WHERE log_timestamp >= %s"
            cursor.execute(count_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            total_logs_result = cursor.fetchone()
            if total_logs_result: total_logs = total_logs_result.get('total', 0)

            if total_logs > 0:
                data_query = """
                    SELECT id, log_timestamp, target_pc_name, target_ip_sent_to, final_target_ip,
                           command_name, command_payload_summary, action_type,
                           result_success, result_message, triggered_by_ip
                    FROM dbo.action_logs WHERE log_timestamp >= %s
                    ORDER BY log_timestamp DESC OFFSET %s ROWS FETCH NEXT %s ROWS ONLY
                """
                cursor.execute(data_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'), offset, per_page))
                logs_on_page = cursor.fetchall()

            chart_query = """
                SELECT action_type, result_success, COUNT(*) as count
                FROM dbo.action_logs WHERE log_timestamp >= %s
                GROUP BY action_type, result_success
            """
            cursor.execute(chart_query, (three_days_ago.strftime('%Y-%m-%d %H:%M:%S'),))
            aggregated_data = cursor.fetchall()
            for row in aggregated_data:
                action, success, count = row['action_type'], bool(row['result_success']), row['count']
                if "디스플레이 항상 켜기 설정" in action: key_base = '켜기설정'
                elif "디스플레이 1분 후 자동 꺼짐 설정" in action: key_base = '끄기설정'
                elif "모니터 즉시 켜기" in action: key_base = '즉시켜기'
                else: continue
                
                if success: chart_data_raw[f'{key_base}_성공'] += count
                else: chart_data_raw[f'{key_base}_실패'] += count
            
    except Exception as e:
        current_app.logger.error(f"제어 이력 조회 중 오류: {e}", exc_info=True)
        flash("제어 이력을 불러오는 중 오류가 발생했습니다.", "error")

    total_pages = math.ceil(total_logs / per_page) if total_logs > 0 else 1
    pagination_data.update({
        'total_items': total_logs, 'total_pages': total_pages, 'items': logs_on_page,
        'has_prev': page > 1, 'has_next': page < total_pages,
        'prev_num': page - 1 if page > 1 else 1,
        'next_num': page + 1 if page < total_pages else total_pages
    })
    chart_data_for_template = {
        'labels': ["켜기 설정", "끄기 설정", "즉시 켜기"],
        'datasets': [
            {'label': '성공', 'data': [chart_data_raw['켜기설정_성공'], chart_data_raw['끄기설정_성공'], chart_data_raw['즉시켜기_성공']], 'backgroundColor': 'rgba(75, 192, 192, 0.6)', 'borderColor': 'rgba(75, 192, 192, 1)', 'borderWidth': 1},
            {'label': '실패', 'data': [chart_data_raw['켜기설정_실패'], chart_data_raw['끄기설정_실패'], chart_data_raw['즉시켜기_실패']], 'backgroundColor': 'rgba(255, 99, 132, 0.6)', 'borderColor': 'rgba(255, 99, 132, 1)', 'borderWidth': 1}
        ]
    }
    return render_template('logs/view_logs.html', title="최근 3일 제어 이력", logs=logs_on_page, pagination=pagination_data, chart_data_json=json.dumps(chart_data_for_template))

# --- ▼▼▼ 신규: 모든 제어 이력 삭제 라우트 ▼▼▼ ---
@logs_bp.route('/action_logs/delete_all', methods=['POST'])
@ip_auth_required('admin') # 관리자만 이 기능 사용 가능
def delete_all_action_logs():
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            # TRUNCATE TABLE은 WHERE 절 없이 모든 행을 빠르게 삭제하지만, 롤백이 안 되고, IDENTITY를 초기화합니다.
            # DELETE FROM은 행마다 삭제하므로 로그가 남고 롤백 가능하며, 더 안전할 수 있습니다.
            # 여기서는 모든 로그를 삭제하므로 TRUNCATE도 고려 가능하나, DELETE를 사용합니다.
            cursor.execute("DELETE FROM dbo.action_logs")
            # 만약 특정 조건(예: 오래된 로그)으로 삭제한다면 WHERE 절 추가
        conn.commit()
        flash("모든 제어 이력이 성공적으로 삭제되었습니다.", 'success')
        current_app.logger.info(f"All action logs deleted by admin: {g.user_ip}")
    except Exception as e:
        if conn:
            conn.rollback()
        flash(f"제어 이력 삭제 중 오류 발생: {str(e)[:200]}", 'error') # 오류 메시지 길이 제한
        current_app.logger.error(f"Error deleting all action logs: {e}", exc_info=True)
    
    return redirect(url_for('logs.view_action_logs')) # 이력 보기 페이지로 다시 이동
# --- ▲▲▲ 신규: 모든 제어 이력 삭제 라우트 ▲▲▲ ---
app/routes_logs.py 주요 변경 사항:

delete_all_action_logs() 함수를 새로 추가했습니다.
@ip_auth_required('admin') 데코레이터를 사용하여 관리자만 접근할 수 있도록 합니다.
POST 요청만 허용합니다 (GET 요청으로 중요 데이터 삭제 방지).
DELETE FROM dbo.action_logs SQL 문을 실행하여 action_logs 테이블의 모든 데이터를 삭제합니다.
성공 또는 실패 메시지를 flash로 사용자에게 알리고, 결과를 로깅합니다.
작업 후에는 다시 제어 이력 보기 페이지로 리다이렉트합니다.
2. 수정: app/templates/logs/view_logs.html (이력 삭제 버튼 추가)
로그 목록 테이블 위에 "모든 이력 삭제" 버튼을 추가하고, 관리자에게만 이 버튼이 보이도록 합니다.

HTML

{% extends "layout.html" %}

{% block title %}{{ title }}{% endblock %}

{% block styles %}
{{ super() }}
<style>
    .chart-container { /* ... 이전과 동일 ... */ }
    .log-table th, .log-table td { /* ... 이전과 동일 ... */ }
    .log-table td.message-col { /* ... 이전과 동일 ... */ }
    .log-table .success-true { /* ... 이전과 동일 ... */ }
    .log-table .success-false { /* ... 이전과 동일 ... */ }
    .delete-logs-section { margin-bottom: 20px; padding: 15px; border: 1px solid #e74c3c; background-color: #fceded; text-align: right; }
</style>
{% endblock %}


{% block content %}
    <h1>{{ title }}</h1>

    {# --- 차트 표시 영역 (이전과 동일) --- #}
    <div class="chart-container">
        <canvas id="actionLogChart"></canvas>
    </div>

    {# --- ▼▼▼ 모든 이력 삭제 버튼 추가 (관리자 전용) ▼▼▼ --- #}
    {% if current_user_role == 'admin' %}
    <div class="delete-logs-section">
        <form method="POST" action="{{ url_for('logs.delete_all_action_logs') }}" 
              onsubmit="return confirm('정말로 모든 제어 이력을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다!');">
            <input type="submit" value="모든 제어 이력 삭제" class="btn btn-danger">
        </form>
    </div>
    {% endif %}
    {# --- ▲▲▲ 모든 이력 삭제 버튼 추가 (관리자 전용) ▲▲▲ --- #}


    <h2>상세 제어 이력 (최근 3일)</h2>
    {% if logs %}
    <table class="log-table">
        {# ... 로그 테이블 헤더 및 내용은 이전과 동일 ... #}
        <thead>
            <tr>
                <th>ID</th><th>시간</th><th>대상 PC</th><th>전송 IP</th><th>최종 IP</th>
                <th>명령</th><th>페이로드 요약</th><th>작업 유형</th><th>결과</th>
                <th class="message-col">메시지</th><th>실행자 IP</th>
            </tr>
        </thead>
        <tbody>
            {% for log_entry in logs %}
            <tr>
                <td>{{ log_entry.id }}</td>
                <td title="{{ log_entry.log_timestamp|datetimeformat('%Y-%m-%d %H:%M:%S.%f') }}">{{ log_entry.log_timestamp|datetimeformat('%y-%m-%d %H:%M') }}</td>
                <td>{{ log_entry.target_pc_name if log_entry.target_pc_name else '-' }}</td>
                <td>{{ log_entry.target_ip_sent_to }}</td>
                <td>{{ log_entry.final_target_ip if log_entry.final_target_ip else '-' }}</td>
                <td>{{ log_entry.command_name }}</td>
                <td>{{ log_entry.command_payload_summary|truncate(30, True) if log_entry.command_payload_summary else '-' }}</td>
                <td>{{ log_entry.action_type }}</td>
                <td class="{{ 'success-true' if log_entry.result_success else 'success-false' }}">{{ '성공' if log_entry.result_success else '실패' }}</td>
                <td class="message-col" title="{{ log_entry.result_message }}">{{ log_entry.result_message|truncate(50, True, '...') if log_entry.result_message else '-' }}</td>
                <td>{{ log_entry.triggered_by_ip if log_entry.triggered_by_ip else '-' }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>

    {# 페이지네이션 (이전과 동일) #}
    {% if pagination and pagination.total_pages > 1 %}
    <div class="pagination">
        {% if pagination.has_prev %}<a href="{{ url_for(request.endpoint, page=pagination.prev_num) }}">&laquo; 이전</a>{% else %}<span class="disabled">&laquo; 이전</span>{% endif %}
        <span style="margin: 0 10px;">페이지 {{ pagination.page }} / {{ pagination.total_pages }}</span>
        {% if pagination.has_next %}<a href="{{ url_for(request.endpoint, page=pagination.next_num) }}">다음 &raquo;</a>{% else %}<span class="disabled">다음 &raquo;</span>{% endif %}
        <span style="margin-left: 15px;">(총 {{ pagination.total_items }}개)</span>
    </div>
    {% endif %}

    {% else %}
    <p>지난 3일간의 제어 이력이 없습니다.</p>
    {% endif %}
{% endblock %}

{% block scripts %}
{{ super() }}
{# Chart.js CDN 및 차트 초기화 스크립트는 이전과 동일 #}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const ctx = document.getElementById('actionLogChart');
        if (ctx) {
            try {
                var chartData = JSON.parse({{ chart_data_json|tojson|safe }});
                new Chart(ctx, { type: 'bar', data: chartData, options: { responsive: true, maintainAspectRatio: true, scales: { y: { beginAtZero: true, ticks: { stepSize: 1 }}}, plugins: { title: {display: true, text: '최근 3일간 명령 실행 현황', font: {size: 16 }}, legend: {position: 'top'} }}});
            } catch (e) { console.error("Error parsing chart data or initializing chart:", e); }
        } else { console.warn("Chart canvas element 'actionLogChart' not found."); }
    });
</script>
{% endblock %}
view_logs.html 주요 변경 사항:

삭제 버튼 추가: {% if current_user_role == 'admin' %} 조건 블록 안에 "모든 제어 이력 삭제" 버튼을 포함하는 폼을 추가했습니다. 이 버튼은 관리자에게만 보입니다.
JavaScript confirm(): 삭제 버튼 클릭 시, onsubmit 이벤트에서 JavaScript confirm() 함수를 호출하여 사용자에게 정말로 삭제할 것인지 다시 한번 확인합니다.
CSS 스타일 추가: .delete-logs-section 클래스에 대한 간단한 스타일을 추가하여 삭제 버튼 영역을 시각적으로 구분했습니다.
app/__init__.py 파일과 app/templates/layout.html 파일은 이전 답변(#52의 최종 버전)에서 이미 logs_bp 등록과 "제어 이력 보기" 메뉴 링크 추가가 반영되어 있으므로, 해당 파일들은 수정할 필요가 없습니다. (만약 logs_bp 등록이나 메뉴 링크가 누락되었다면 이전 답변을 참고하여 추가해야 합니다.)

위 수정된 파일들을 적용하시면, 관리자 역할로 로그인했을 때 "제어 이력 보기" 페이지 상단에 "모든 제어 이력 삭제" 버튼이 나타나고, 이 버튼을 통해 action_logs 테이블의 모든 내용을 삭제할 수 있게 됩니다.