 서치 패널(App Search Panel) 을 활용해 버튼을 검색하고, 검색 결과에서 즐겨찾기 추가/제거 기능을 구현하려면, 다음과 같은 방법을 사용할 수 있습니다.

구현 목표
검색 기능 통합:

서치 패널에서 버튼 이름으로 검색.
검색 결과를 표시하고, 검색된 버튼에서 즐겨찾기 추가/제거 가능.
UI 일관성 유지:

검색된 버튼에서 바로 즐겨찾기 작업 수행.
검색 결과는 서치 패널 내에 표시.
즐겨찾기 상태 반영:

즐겨찾기 추가/제거 후, 리본의 Favorites 그룹에 즉시 반영.
검색 패널에서도 즐겨찾기 상태 업데이트.
구현 방법
1. 서치 패널 추가
WinForms의 DevExpress Search Panel을 활용하여 리본 버튼을 검색합니다.

2. FavoriteManager 클래스
즐겨찾기 관리 클래스는 기존과 동일하게 사용합니다. (위의 예제 참조)

3. MainForm 코드
SearchPanel과 이벤트를 활용하여 검색과 즐겨찾기 관리를 구현합니다.

csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraEditors;
using System;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    private FavoriteManager _favoriteManager;
    private RibbonPageGroup _favoritesGroup;
    private TextEdit _searchBox;
    private ListBoxControl _searchResults;

    public MainForm()
    {
        InitializeComponent();

        // 즐겨찾기 매니저 초기화
        _favoriteManager = new FavoriteManager();

        // UI 요소 초기화
        InitializeSearchPanel();
        CreateFavoritesGroup();

        // 즐겨찾기 버튼 로드
        RefreshFavorites();
    }

    private void InitializeSearchPanel()
    {
        // 검색 입력창 생성
        _searchBox = new TextEdit
        {
            PlaceholderText = "Search buttons...",
            Dock = DockStyle.Top
        };
        _searchBox.EditValueChanged += SearchBox_EditValueChanged;
        Controls.Add(_searchBox);

        // 검색 결과 표시 창 생성
        _searchResults = new ListBoxControl
        {
            Dock = DockStyle.Fill
        };
        _searchResults.DoubleClick += SearchResults_DoubleClick;
        Controls.Add(_searchResults);
    }

    private void SearchBox_EditValueChanged(object sender, EventArgs e)
    {
        string query = _searchBox.Text.ToLower();

        // 버튼 검색
        var results = ribbonPageGroup1.ItemLinks
            .Select(link => link.Item as BarButtonItem)
            .Where(button => button != null && button.Caption.ToLower().Contains(query))
            .Select(button => button)
            .ToList();

        // 검색 결과 표시
        _searchResults.Items.Clear();
        foreach (var button in results)
        {
            _searchResults.Items.Add(new
            {
                Button = button,
                DisplayText = $"{button.Caption} {(IsFavorite(button) ? "[★]" : "")}"
            });
        }
    }

    private void SearchResults_DoubleClick(object sender, EventArgs e)
    {
        if (_searchResults.SelectedItem == null) return;

        dynamic selectedItem = _searchResults.SelectedItem;
        BarButtonItem button = selectedItem.Button;

        // 즐겨찾기 추가/제거 토글
        if (IsFavorite(button))
        {
            _favoriteManager.RemoveFromFavorites(button.Tag.ToString());
        }
        else
        {
            _favoriteManager.AddToFavorites(button.Tag.ToString());
        }

        RefreshFavorites();
        SearchBox_EditValueChanged(null, null); // 검색 결과 업데이트
    }

    private void CreateFavoritesGroup()
    {
        // Favorites 그룹 생성
        _favoritesGroup = new RibbonPageGroup("Favorites");
        ribbonPage1.Groups.Add(_favoritesGroup);
    }

    private void RefreshFavorites()
    {
        // 즐겨찾기 그룹 초기화
        _favoritesGroup.ItemLinks.Clear();

        foreach (var buttonId in _favoriteManager.Favorites)
        {
            var button = ribbonPageGroup1.ItemLinks
                .Select(link => link.Item as BarButtonItem)
                .FirstOrDefault(b => b?.Tag.ToString() == buttonId);

            if (button != null)
            {
                _favoritesGroup.ItemLinks.Add(button);
            }
        }
    }

    private bool IsFavorite(BarButtonItem button)
    {
        return _favoriteManager.Favorites.Contains(button.Tag.ToString());
    }
}
설명
1. 검색 기능
_searchBox:
사용자가 버튼 이름을 입력하면 자동으로 검색.
검색된 버튼만 _searchResults에 표시.
_searchResults:
버튼 이름과 즐겨찾기 상태([★])를 함께 표시.
2. 즐겨찾기 추가/제거
검색 결과에서 더블클릭하면 즐겨찾기 상태가 토글됩니다.
IsFavorite 메서드를 사용하여 버튼의 즐겨찾기 상태를 확인.
3. 즐겨찾기 그룹 업데이트
RefreshFavorites 메서드를 호출하여 즐겨찾기 그룹을 업데이트합니다.
검색 결과도 업데이트하여 상태를 동기화합니다.
4. MainForm UI
MainForm.Designer.cs
리본 페이지와 그룹을 초기화합니다.

csharp
코드 복사
private void InitializeComponent()
{
    this.ribbonControl1 = new DevExpress.XtraBars.Ribbon.RibbonControl();
    this.ribbonPage1 = new DevExpress.XtraBars.Ribbon.RibbonPage();
    this.ribbonPageGroup1 = new DevExpress.XtraBars.Ribbon.RibbonPageGroup();

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).BeginInit();
    this.SuspendLayout();

    // ribbonControl1
    this.ribbonControl1.Pages.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPage[] {
        this.ribbonPage1});
    this.ribbonControl1.Location = new System.Drawing.Point(0, 0);
    this.ribbonControl1.Size = new System.Drawing.Size(800, 150);
    this.ribbonControl1.Name = "ribbonControl1";

    // ribbonPage1
    this.ribbonPage1.Groups.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPageGroup[] {
        this.ribbonPageGroup1});
    this.ribbonPage1.Text = "Main";

    // ribbonPageGroup1
    this.ribbonPageGroup1.Text = "Commands";

    // MainForm
    this.ClientSize = new System.Drawing.Size(800, 450);
    this.Controls.Add(this.ribbonControl1);
    this.Name = "MainForm";
    this.Text = "Ribbon Form with Search and Favorites";

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).EndInit();
    this.ResumeLayout(false);
    this.PerformLayout();
}
결과
서치 패널:

리본 컨트롤의 버튼을 이름으로 검색.
검색된 결과는 버튼 이름과 즐겨찾기 여부([★])를 표시.
즐겨찾기 추가/제거:

검색된 버튼을 더블클릭하면 즐겨찾기 상태를 토글.
즐겨찾기 동기화:

리본의 Favorites 그룹과 서치 패널 결과가 항상 동기화.
장점
검색과 즐겨찾기 통합: 버튼 검색 및 즐겨찾기 관리를 하나의 UI로 제공.
기존 UI 수정 최소화: 기존 버튼을 유지하며 새로운 기능만 추가.