1. TaskModel.cs - 작업 데이터 모델
TaskModel 클래스는 작업의 각 속성을 저장하고, UI가 속성 변화를 감지하도록 합니다.

csharp
코드 복사
using System;
using System.ComponentModel;

namespace TaskManagementApp.Models
{
    public class TaskModel : INotifyPropertyChanged
    {
        public int Id { get; set; }                        // 작업 ID (Primary Key)
        public int Priority { get; set; }                  // 작업 우선순위
        public DateTime CreatedTime { get; set; }          // 작업 생성 시간
        public int UpdateCount { get; set; }               // 작업 수정 횟수
        public DateTime? LastUpdateTime { get; set; }      // 마지막 수정 시간
        public string FolderPath { get; set; }             // 폴더 경로
        private string _cellColor;
        
        public string CellColor
        {
            get => _cellColor;
            set
            {
                if (_cellColor != value)
                {
                    _cellColor = value;
                    OnPropertyChanged(nameof(CellColor));  // UI 업데이트 트리거
                }
            }
        }
        
        public string Assignee { get; set; }               // 담당자
        public bool IsCompleted { get; set; }              // 완료 여부
        
        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged(string name)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
2. TaskManager.cs - 작업 관리 클래스
작업 목록을 관리하며, 순위 및 색상 변경 시 데이터베이스에 업데이트합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using TaskManagementApp.Models;
using TaskManagementApp.Services;

namespace TaskManagementApp.ViewModels
{
    public class TaskManager
    {
        private readonly DatabaseService _databaseService;  // 데이터베이스 연동 서비스
        public ObservableCollection<TaskModel> Tasks { get; set; }

        public TaskManager(DatabaseService databaseService)
        {
            _databaseService = databaseService;
            Tasks = new ObservableCollection<TaskModel>(_databaseService.GetAllTasks());
            Tasks.CollectionChanged += Tasks_CollectionChanged;
        }

        public void AddTask(TaskModel task)
        {
            task.Priority = Tasks.Count + 1;
            Tasks.Insert(0, task);                           // 새 작업을 목록의 맨 위에 추가
            _databaseService.AddTask(task);                  // DB에 새 작업 저장
        }

        public void UpdateTask(TaskModel task)
        {
            task.UpdateCount++;
            task.LastUpdateTime = DateTime.Now;
            _databaseService.UpdateTask(task);               // DB에 작업 수정 내용 저장
        }

        private void Tasks_CollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.Action == NotifyCollectionChangedAction.Move)
            {
                UpdateTaskPriorities();                      // 순위 업데이트
            }
        }

        private void UpdateTaskPriorities()
        {
            for (int i = 0; i < Tasks.Count; i++)
            {
                var task = Tasks[i];
                task.Priority = i + 1;
                _databaseService.UpdateTaskPriority(task.Id, task.Priority);
            }
        }
    }
}
3. FolderManager.cs - 폴더 관리 클래스
폴더 이름 중복을 확인하고 색상을 지정하는 기능을 담당합니다.

csharp
코드 복사
using System.Collections.Generic;
using TaskManagementApp.Models;

namespace TaskManagementApp.ViewModels
{
    public class FolderManager
    {
        private readonly List<string> _folderNames = new List<string>();

        public bool IsFolderNameDuplicate(string folderName)
        {
            return _folderNames.Contains(folderName);
        }

        public void AddFolder(TaskModel task, string folderName, string color)
        {
            if (IsFolderNameDuplicate(folderName))
            {
                throw new Exception("Duplicate folder name.");
            }

            task.FolderPath = folderName;
            task.CellColor = color;
            _folderNames.Add(folderName);
        }
    }
}
4. DatabaseService.cs - 데이터베이스 서비스
MSSQL과의 통신을 담당하며 작업 목록을 저장하고 불러오는 기능을 제공합니다.

csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using TaskManagementApp.Models;

namespace TaskManagementApp.Services
{
    public class DatabaseService
    {
        private readonly string _connectionString = "YourConnectionString";

        public List<TaskModel> GetAllTasks()
        {
            var tasks = new List<TaskModel>();
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("SELECT * FROM Tasks ORDER BY Priority", connection);
                connection.Open();
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        tasks.Add(new TaskModel
                        {
                            Id = (int)reader["Id"],
                            Priority = (int)reader["Priority"],
                            CreatedTime = (DateTime)reader["CreatedTime"],
                            UpdateCount = (int)reader["UpdateCount"],
                            LastUpdateTime = reader["LastUpdateTime"] as DateTime?,
                            FolderPath = reader["FolderPath"] as string,
                            CellColor = reader["CellColor"] as string,
                            Assignee = reader["Assignee"] as string,
                            IsCompleted = (bool)reader["IsCompleted"]
                        });
                    }
                }
            }
            return tasks;
        }

        public void AddTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("INSERT INTO Tasks (Priority, CreatedTime, FolderPath, CellColor, Assignee, IsCompleted) VALUES (@Priority, @CreatedTime, @FolderPath, @CellColor, @Assignee, @IsCompleted)", connection);
                command.Parameters.AddWithValue("@Priority", task.Priority);
                command.Parameters.AddWithValue("@CreatedTime", task.CreatedTime);
                command.Parameters.AddWithValue("@FolderPath", task.FolderPath);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Assignee", task.Assignee);
                command.Parameters.AddWithValue("@IsCompleted", task.IsCompleted);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        public void UpdateTask(TaskModel task)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE Tasks SET UpdateCount = @UpdateCount, LastUpdateTime = @LastUpdateTime, CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@UpdateCount", task.UpdateCount);
                command.Parameters.AddWithValue("@LastUpdateTime", task.LastUpdateTime);
                command.Parameters.AddWithValue("@CellColor", task.CellColor);
                command.Parameters.AddWithValue("@Id", task.Id);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        public void UpdateTaskPriority(int taskId, int newPriority)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE Tasks SET Priority = @Priority WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@Priority", newPriority);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }

        public void UpdateTaskColor(int taskId, string newColor)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand("UPDATE Tasks SET CellColor = @CellColor WHERE Id = @Id", connection);
                command.Parameters.AddWithValue("@CellColor", newColor);
                command.Parameters.AddWithValue("@Id", taskId);
                connection.Open();
                command.ExecuteNonQuery();
            }
        }
    }
}
5. MainViewModel.cs - 메인 뷰모델
메인 뷰모델은 UI와 연결되며, TaskManager와 FolderManager를 사용해 작업 추가 및 수정, 색상 변경 기능을 수행합니다.

csharp
코드 복사
using TaskManagementApp.Models;
using TaskManagementApp.Services;

namespace TaskManagementApp.ViewModels
{
    public class MainViewModel
    {
        public TaskManager TaskManager { get; set; }
        public FolderManager FolderManager { get; set; }

        public MainViewModel()
        {
            var databaseService = new DatabaseService();
            TaskManager = new TaskManager(databaseService);
            FolderManager = new FolderManager();
        }

        public void AddNewTask(string folderName, string color, string assignee)
        {
            var task = new TaskModel
            {
                Assignee = assignee,
                CellColor = color
            };
            
            FolderManager.AddFolder(task, folderName, color);
            TaskManager.AddTask(task);
        }

        public void UpdateTaskColor(TaskModel task, string newColor)
        {
            task.CellColor = newColor;
            TaskManager.UpdateTask(task);
        }
    }
}
6. MainWindow.xaml - UI 코드
GridControl을 사용해 작업 목록을 표시하고, 드래그 앤 드롭과 셀 색상 변경 기능을 제공합니다.

xml
코드 복사
<dxg:GridControl ItemsSource="{Binding TaskManager.Tasks}" AllowDragDrop="True">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Priority" Header="순위" />
        <dxg:GridColumn FieldName="CreatedTime" Header="생성시간" />
        <dxg:GridColumn FieldName="UpdateCount" Header="수정횟수" />
        <dxg:GridColumn FieldName="LastUpdateTime" Header="수정시간" />
        <dxg:GridColumn FieldName="FolderPath" Header="폴더 경로" />
        <dxg:GridColumn FieldName="CellColor" Header="셀 색상">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <Border Background="{Binding CellColor}" />
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
        <dxg:GridColumn FieldName="Assignee" Header="담당자" />
        <dxg:GridColumn FieldName="IsCompleted" Header="완료 여부" />
    </dxg:GridControl.Columns>
</dxg:GridControl>
이로써 전체 코드와 구조를 설명드렸습니다.






