using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class YourRibbonForm : RibbonForm
    {
        private RibbonPage favoritesPage;
        private Dictionary<string, BarButtonItem> buttonsDictionary = new Dictionary<string, BarButtonItem>();
        private HashSet<string> favoriteKeys = new HashSet<string>(); // 즐겨찾기 키값을 저장할 HashSet
        private string favoriteStorageFile = "favorites.txt"; // 즐겨찾기 상태 저장용 파일 경로
        private PopupMenu contextMenu;

        public YourRibbonForm()
        {
            InitializeComponent();
            InitializeFavoritesPage();
            LoadFavorites();
            InitializeContextMenu();
            InitializeButtons();
        }

        private void InitializeFavoritesPage()
        {
            // 즐겨찾기 페이지 초기화
            favoritesPage = new RibbonPage("Favorites");
            ribbonK.Pages.Insert(0, favoritesPage);
        }

        private void LoadFavorites()
        {
            // 파일에서 즐겨찾기 정보를 불러오기
            if (File.Exists(favoriteStorageFile))
            {
                var lines = File.ReadAllLines(favoriteStorageFile);
                favoriteKeys = new HashSet<string>(lines);
            }
        }

        private void SaveFavorites()
        {
            // 즐겨찾기 정보를 파일에 저장하기
            File.WriteAllLines(favoriteStorageFile, favoriteKeys);
        }

        private void InitializeContextMenu()
        {
            // 사용자 정의 컨텍스트 메뉴 초기화
            contextMenu = new PopupMenu();
            contextMenu.Manager = ribbonK.Manager; // 리본 매니저 설정
        }

        private void InitializeButtons()
        {
            // 이미 UI에 있는 모든 버튼들에 대해 초기화 작업을 진행
            foreach (RibbonPage page in ribbonK.Pages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    foreach (BarItemLink link in group.ItemLinks)
                    {
                        if (link.Item is BarButtonItem button)
                        {
                            buttonsDictionary[button.Name] = button;
                            InitializeButton(button);
                        }
                    }
                }
            }
        }

        private void InitializeButton(BarButtonItem button)
        {
            // 즐겨찾기 상태에 따라 버튼의 배경색 설정
            if (favoriteKeys.Contains(button.Name))
            {
                button.ItemAppearance.Normal.BackColor = Color.Yellow;
                AddToFavorites(button, GetButtonGroupName(button));
            }

            // DevExpress 기본 컨텍스트 메뉴와 병합하여 우클릭 메뉴 표시
            button.ItemClick += (s, e) =>
            {
                if (Control.MouseButtons == MouseButtons.Right)
                {
                    ShowCustomContextMenu(button);
                }
            };
        }

        private string GetButtonGroupName(BarButtonItem button)
        {
            // 버튼의 상위 그룹명을 가져오는 메서드
            foreach (RibbonPage page in ribbonK.Pages)
            {
                foreach (RibbonPageGroup group in page.Groups)
                {
                    if (group.ItemLinks.Any(link => link.Item == button))
                    {
                        return group.Text;
                    }
                }
            }
            return "DefaultGroup";
        }

        private void ShowCustomContextMenu(BarButtonItem button)
        {
            // 기존 컨텍스트 메뉴 초기화
            contextMenu.ClearLinks();

            // 즐겨찾기 추가/제거 메뉴 항목 추가
            BarButtonItem favoriteMenuItem = new BarButtonItem
            {
                Caption = favoriteKeys.Contains(button.Name) ? "즐겨찾기 제거" : "즐겨찾기 추가"
            };
            favoriteMenuItem.ItemClick += (s, e) => ToggleFavorite(button.Name, button);

            // 컨텍스트 메뉴에 항목 추가
            contextMenu.AddItem(favoriteMenuItem);

            // 컨텍스트 메뉴 표시
            contextMenu.ShowPopup(Control.MousePosition);
        }

        private void ToggleFavorite(string buttonName, BarButtonItem button)
        {
            // 즐겨찾기 추가/제거 로직
            if (favoriteKeys.Contains(buttonName))
            {
                favoriteKeys.Remove(buttonName);
                button.ItemAppearance.Normal.BackColor = Color.Empty; // 배경색 초기화
                RemoveFromFavorites(button);
            }
            else
            {
                favoriteKeys.Add(buttonName);
                button.ItemAppearance.Normal.BackColor = Color.Yellow; // 즐겨찾기 추가 시 배경색을 노랑으로 변경
                AddToFavorites(button, GetButtonGroupName(button));
            }

            SaveFavorites(); // 즐겨찾기 상태를 변경할 때마다 저장하기
        }

        private void AddToFavorites(BarButtonItem button, string groupName)
        {
            // 즐겨찾기 페이지에 그룹이 있는지 확인
            RibbonPageGroup favoriteGroup = favoritesPage.Groups.FirstOrDefault(g => g.Text == groupName);
            if (favoriteGroup == null)
            {
                // 그룹이 없으면 새로 생성
                favoriteGroup = new RibbonPageGroup(groupName);
                favoritesPage.Groups.Add(favoriteGroup);
            }

            // 즐겨찾기 그룹에 버튼 추가
            favoriteGroup.ItemLinks.Add(button);
        }

        private void RemoveFromFavorites(BarButtonItem button)
        {
            // 즐겨찾기 페이지에서 버튼 제거
            foreach (var group in favoritesPage.Groups)
            {
                var link = group.ItemLinks.FirstOrDefault(l => l.Item == button);
                if (link != null)
                {
                    group.ItemLinks.Remove(link);
                    break;
                }
            }
        }
    }
}
