 INSERT INTO 이력 SELECT ... 구문을 사용하는 트리거를 예로 들겠습니다. 해당 트리거를 수정하여 사용자 정보를 추가하는 방법과 C#에서 해야 할 일을 안내해 드리겠습니다.

    트리거 수정:

sql

CREATE TRIGGER trg_Products_InsertHistory
ON Products
FOR INSERT
AS
BEGIN
    -- 사용자 정보를 저장할 변수 선언
    DECLARE @ModifiedBy NVARCHAR(100);

    -- 현재 사용자 정보 가져오기
    SET @ModifiedBy = '사용자 계정'; -- 여기에 실제 사용자 계정 정보를 설정해야 합니다.

    -- 이력 테이블에 데이터 삽입
    INSERT INTO 이력 (품목코드, 수량, 수정, 사용자계정)
    SELECT p.품목코드, d.수량1, '수정', @ModifiedBy
    FROM deleted d
    INNER JOIN 품목 p ON d.품목코드 = p.품목코드;
END

위의 예제는 FOR INSERT로 트리거를 설정하고, 이력 테이블에 데이터를 삽입하는 트리거입니다. 사용자 계정 정보를 추가하기 위해 @ModifiedBy라는 변수를 선언하고, 해당 변수에 실제 사용자 계정 정보를 설정합니다. 이후 INSERT INTO 이력 SELECT ... 문에서 사용자 계정 정보를 함께 추가하여 트리거 동작 시 사용자 계정 정보가 저장될 수 있도록 합니다.

    C#에서 해야 할 일:

C# WinForms 애플리케이션에서 물품을 수정할 때, 트리거에 사용자 계정 정보를 전달하기 위해 다음과 같은 작업을 수행해야 합니다:

csharp

public void UpdateProduct(Product product)
{
    // 사용자 계정 정보 가져오기
    string modifiedBy = GetCurrentUserAccount(); // 현재 사용자 계정 정보를 얻는 로직을 구현해야 합니다.

    // 데이터베이스 연결 및 커맨드 생성
    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        using (SqlCommand command = connection.CreateCommand())
        {
            // SQL 문장 작성
            command.CommandText = "UPDATE Products SET 수량 = @수량 WHERE 품목코드 = @품목코드";

            // 파라미터 추가
            command.Parameters.AddWithValue("@수량", product.Quantity);
            command.Parameters.AddWithValue("@품목코드", product.ProductCode);

            // 데이터베이스 연결 열기
            connection.Open();

            // 쿼리 실행
            command.ExecuteNonQuery();
        }
    }
}

C# 코드에서는 UpdateProduct 메서드를 통해 물품을 수정하는 작업을 수행합니다. 해당 메서드 내에서 GetCurrentUserAccount 메서드를