, 그럼요! TableLuxPhonestatusLog 테이블의 데이터를 실시간으로 보여주는 깔끔한 웹 대시보드를 Streamlit을 사용하여 우분투에 게시하는 방법을 아주 상세하게 안내해 드리겠습니다.

Streamlit은 파이썬(Python)만으로 아주 쉽고 빠르게 데이터 시각화 웹 앱을 만들 수 있는 강력한 도구입니다. 아래 순서대로 따라 하시면 전문가 수준의 모니터링 페이지를 만드실 수 있습니다.

## 1단계: 우분투 서버에 필수 프로그램 설치하기
먼저, Streamlit과 MSSQL을 연결하는 데 필요한 프로그램들을 설치해야 합니다.

우분투 터미널에서 아래 명령어를 순서대로 입력하세요.

Bash

# 1. 파이썬 및 패키지 관리자(pip) 설치
sudo apt update
sudo apt install python3-pip -y

# 2. MSSQL 연결을 위한 ODBC 드라이버 설치 (Microsoft 공식 가이드)
# 이 과정은 복잡해 보이지만, 아래 명령어를 순서대로 복사/붙여넣기만 하면 됩니다.
curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
sudo apt-get update
sudo ACCEPT_EULA=Y apt-get install -y msodbcsql17
## 2단계: 대시보드 프로젝트 생성 및 라이브러리 설치
이제 대시보드 웹 앱을 만들 프로젝트 폴더를 생성하고 필요한 파이썬 라이브러리를 설치합니다.

우분투 터미널에서 아래 작업을 진행하세요.

Bash

# 1. 'dashboard' 라는 이름의 폴더를 만들고 그 안으로 들어갑니다.
mkdir dashboard
cd dashboard

# 2. 필요한 파이썬 라이브러리 3개를 설치합니다.
# streamlit: 웹 앱 프레임워크
# pandas: 데이터 처리 및 분석 도구
# pyodbc: MSSQL 연결 드라이버
pip install streamlit pandas pyodbc
## 3단계: DB 연결 정보 안전하게 보관하기 (secrets.toml)
DB 접속 정보를 코드에 직접 넣는 것은 위험합니다. Streamlit의 secrets 기능을 사용하면 안전하게 관리할 수 있습니다.

dashboard 폴더 안에서 아래 명령어로 .streamlit 폴더와 secrets.toml 파일을 생성하고 편집합니다.

Bash

mkdir .streamlit
nano .streamlit/secrets.toml
[아래 내용을 복사해서 터미널에 붙여넣기]
db_server, db_name 등 사용자님의 실제 DB 정보로 수정해야 합니다.

Ini, TOML

# .streamlit/secrets.toml

[database]
driver = "ODBC Driver 17 for SQL Server"
server = "내서버IP"
port = "1433"
name = "데이터베이스이름"
username = "사용자ID"
password = "비밀번호"
[붙여넣기 후 저장 및 종료]

Ctrl + X 키를 누릅니다.

Y 키를 누릅니다.

Enter 키를 누릅니다.

## 4단계: Streamlit 대시보드 코드 작성하기 (dashboard.py)
이제 실제 웹 페이지를 그리는 파이썬 코드를 작성합니다. 이 코드는 10초마다 DB에서 최신 데이터를 가져와 화면을 자동으로 새로고침합니다.

dashboard 폴더 안에서 nano 편집기로 dashboard.py 파일을 만들고 아래 코드를 그대로 붙여넣으세요.

Bash

nano dashboard.py
[아래 코드를 복사해서 터미널에 붙여넣기]

Python

import streamlit as st
import pandas as pd
import pyodbc
import time
from datetime import datetime

# --- 페이지 기본 설정 ---
st.set_page_config(
    page_title="실시간 장비 상태 대시보드",
    page_icon="📡",
    layout="wide", # 넓은 레이아웃 사용
    initial_sidebar_state="collapsed" # 사이드바 숨기기
)

# --- DB 연결 함수 (Streamlit 캐시 기능으로 성능 최적화) ---
@st.cache_resource(ttl=30) # 30초 동안 연결 재사용
def get_db_connection():
    # secrets.toml 파일에서 DB 정보 읽어오기
    db = st.secrets["database"]
    connection_string = (
        f"DRIVER={{{db['driver']}}};"
        f"SERVER={db['server']},{db['port']};"
        f"DATABASE={db['name']};"
        f"UID={db['username']};"
        f"PWD={db['password']};"
    )
    return pyodbc.connect(connection_string)

# --- 데이터 조회 함수 ---
def fetch_latest_data():
    conn = get_db_connection()
    # 각 DeviceId 별로 가장 최근 데이터를 가져오는 쿼리
    query = """
        WITH LatestEntries AS (
            SELECT *,
                   ROW_NUMBER() OVER(PARTITION BY DeviceId ORDER BY Timestamp DESC) as rn
            FROM TableLuxPhonestatusLog
        )
        SELECT DeviceId, BatteryLevel, BatteryTemp, IsCharging, ChargeType, BatteryHealth, ApTemp, Timestamp
        FROM LatestEntries
        WHERE rn = 1
        ORDER BY DeviceId;
    """
    df = pd.read_sql(query, conn)
    return df

# --- 대시보드 UI 그리기 ---
st.title("📡 실시간 장비 상태 모니터링 대시보드")

# 마지막 업데이트 시간을 표시할 영역
last_updated_placeholder = st.empty()

# 데이터를 표시할 메인 영역
main_placeholder = st.empty()

# --- 10초마다 자동 새로고침 루프 ---
while True:
    try:
        # 데이터 가져오기
        df = fetch_latest_data()
        
        # 마지막 업데이트 시간 표시
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        last_updated_placeholder.text(f"마지막 업데이트: {now}")

        # main_placeholder 컨테이너 안에서 UI를 그립니다.
        with main_placeholder.container():
            # 장비별로 섹션을 나누어 표시
            for index, row in df.iterrows():
                st.markdown(f"### 📲 장비 ID: `{row['DeviceId']}`")
                
                # 3개의 컬럼으로 나누어 핵심 정보 표시
                col1, col2, col3 = st.columns(3)
                col1.metric("배터리 잔량 (%)", f"{row['BatteryLevel']}%")
                col2.metric("배터리 온도 (°C)", f"{row['BatteryTemp']:.1f}°C")
                col3.metric("AP 온도 (°C)", f"{row['ApTemp']:.1f}°C")
                
                # 상세 정보 테이블
                st.subheader("상세 정보")
                # 보기 좋게 데이터를 재구성
                detail_data = {
                    "항목": ["충전 상태", "충전 방식", "배터리 건강 상태", "마지막 업데이트"],
                    "값": [
                        "⚡ 충전 중" if row['IsCharging'] else "🔋 방전 중",
                        row['ChargeType'],
                        row['BatteryHealth'],
                        row['Timestamp'].strftime('%Y-%m-%d %H:%M:%S')
                    ]
                }
                st.table(pd.DataFrame(detail_data).set_index("항목"))
                st.markdown("---") # 구분선

    except Exception as e:
        st.error(f"데이터를 불러오는 중 오류가 발생했습니다: {e}")

    # 10초 대기
    time.sleep(10)
[붙여넣기 후 저장 및 종료]

Ctrl + X 키를 누릅니다.

Y 키를 누릅니다.

Enter 키를 누릅니다.

## 5단계: 대시보드 실행 및 웹으로 게시하기
이제 만든 대시보드를 웹에 게시하여 어디서든 접속할 수 있게 만듭니다. 이전에 사용하셨던 **pm2**를 그대로 사용합니다.

우분투 터미널에서 아래 작업을 진행하세요.

Bash

# 1. 방화벽에서 Streamlit이 사용하는 8501번 포트를 열어줍니다.
sudo ufw allow 8501

# 2. pm2를 이용해 대시보드 앱을 백그라운드에서 실행합니다.
# 'streamlit-dashboard' 라는 이름으로 dashboard.py를 실행
pm2 start streamlit -- run dashboard.py --name streamlit-dashboard

# 3. 현재 pm2 작업 목록을 저장하여 서버 재부팅 시에도 자동 실행되도록 합니다.
pm2 save
모든 작업이 끝났습니다!

이제 PC나 휴대폰의 웹 브라우저 주소창에 아래와 같이 입력하면, 직접 만드신 실시간 모니터링 대시보드에 접속할 수 있습니다.