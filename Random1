ows Presentation Foundation)에서 DevExpress를 사용하여 설명하신 기능을 구현하는 것은 대화 상자를 사용하여 메시지를 입력 받고, 사용자의 응답에 따라 특정 작업을 수행하는 것을 포함합니다. 아래는 이를 구현하기 위한 기본적인 방법을 단계별로 설명합니다.

사용자 정의 대화 상자 만들기: 사용자에게 메시지를 입력 받기 위한 대화 상자를 만들어야 합니다. 이 대화 상자에는 텍스트 입력 필드와 '확인', '취소' 버튼이 있어야 합니다.

대화 상자에서 데이터 받기: 사용자가 '확인' 버튼을 클릭하면 입력한 메시지를 메인 윈도우로 전달하고, '취소' 버튼을 클릭하면 아무 동작도 하지 않고 닫아야 합니다.

메시지 표시: 메인 윈도우에서는 사용자가 입력한 메시지를 받아 추가 작업을 수행하거나 메시지 박스로 표시할 수 있습니다.

창 위치와 스타일: 대화 상자가 화면 중앙에 나타나게 하려면, WindowStartupLocation 속성을 CenterScreen으로 설정하고, 스타일은 XAML을 사용하여 꾸밀 수 있습니다.

다음은 이러한 기능을 구현하는 간단한 코드 예시입니다:

XAML 코드 (대화 상자용)
xml
Copy code
<Window x:Class="YourNamespace.RejectDialog"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="반려 사유 입력" Height="200" Width="300"
        WindowStartupLocation="CenterScreen">
    <StackPanel>
        <TextBox x:Name="txtMessage" Width="280" Margin="10"/>
        <Button Content="확인" Width="80" Margin="10" HorizontalAlignment="Right" Click="Accept_Click"/>
        <Button Content="취소" Width="80" Margin="10" HorizontalAlignment="Right" Click="Cancel_Click"/>
    </StackPanel>
</Window>
C# 코드 (대화 상자용)
csharp
Copy code
public partial class RejectDialog : Window
{
    public string Message { get; private set; }

    public RejectDialog()
    {
        InitializeComponent();
    }

    private void Accept_Click(object sender, RoutedEventArgs e)
    {
        this.Message = txtMessage.Text;
        this.DialogResult = true;
    }

    private void Cancel_Click(object sender, RoutedEventArgs e)
    {
        this.DialogResult = false;
    }
}
C# 코드 (메인 윈도우에서 대화 상자 호출)
csharp
Copy code
private void Button_Click(object sender, RoutedEventArgs e)
{
    RejectDialog dialog = new RejectDialog();
    if (dialog.ShowDialog() == true)
    {
        MessageBox.Show("반려 사유
: " + dialog.Message);
// 여기서 추가적인 반려 처리 로직을 구현합니다.
}
else
{
// 취소 버튼을 눌렀을 때의 처리 로직
}
}

markdown
Copy code

이 예시에서는:

- `RejectDialog`라는 사용자 정의 대화 상자 클래스를 만들었습니다. 이 클래스는 텍스트 입력 필드(`TextBox`)와 두 개의 버튼(`확인`, `취소`)을 가지고 있습니다.
- `Accept_Click` 메서드는 사용자가 `확인` 버튼을 클릭할 때 호출되며, 입력된 메시지를 `Message` 속성에 저장하고 대화 상자의 `DialogResult`를 `true`로 설정합니다.
- `Cancel_Click` 메서드는 사용자가 `취소` 버튼을 클릭할 때 호출되며, 대화 상자의 `DialogResult`를 `false`로 설정합니다.
- 메인 윈도우에서는 `RejectDialog`를 인스턴스화하고 `ShowDialog` 메서드를 호출하여 대화 상자를 표시합니다. 사용자가 `확인`을 클릭하면 입력된 메시지를 `MessageBox`로 표시하고, `취소`를 클릭하면 아무런 동작을 하지 않습니다.

이 코드는 간단한 예시로, 실제 애플