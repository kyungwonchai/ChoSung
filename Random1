MainViewModel 클래스에서 LogMessage 변수는 로그 메시지를 UI에 표시하기 위해 사용됩니다. 이 변수는 SignalRClient에서 발생하는 중요한 메시지, 예를 들어 연결 상태나 메시지 전송 성공/실패 여부 등을 기록하고, 이를 UI의 TextBlock에 바인딩하여 사용자에게 보여줍니다.

아래는 LogMessage의 역할과 흐름을 상세히 설명한 내용입니다.

1. LogMessage의 역할
로그 메시지 기록: LogMessage는 SignalRClient에서 발생하는 여러 가지 로그를 기록하고 UI에 실시간으로 업데이트합니다.
UI와의 바인딩: XAML에서 TextBlock과 바인딩되어 있어, LogMessage의 값이 변경되면 UI에 자동으로 표시됩니다. 예를 들어, SignalR 연결이 성공했거나 메시지 전송이 완료되었을 때 그 상태를 사용자에게 보여주기 위한 용도입니다.
2. LogMessage가 사용되는 흐름
1) MainViewModel에서 정의된 LogMessage 속성
csharp
코드 복사
public string LogMessage
{
    get { return _logMessage; }
    set
    {
        _logMessage = value;
        OnPropertyChanged();  // 값이 변경될 때 UI에 알림
    }
}
이 속성은 MainViewModel의 LogMessage 필드를 읽거나 쓰는 역할을 합니다.
OnPropertyChanged() 메서드를 통해 속성 값이 변경되면 UI에 자동으로 반영됩니다.
2) SignalRClient에서 LogMessage를 사용하여 로그 기록
csharp
코드 복사
SignalRClient.Instance.OnLogMessage = (logMessage) => LogMessage = logMessage;
SignalRClient에서 중요한 이벤트(연결 성공, 전송 실패 등)가 발생하면 OnLogMessage 콜백을 통해 logMessage가 전달됩니다.
전달된 logMessage는 MainViewModel의 LogMessage에 할당되어, 그 결과가 UI의 TextBlock에 표시됩니다.
3) SignalRClient의 Log() 메서드에서 로그 메시지 생성
csharp
코드 복사
private void Log(string message)
{
    OnLogMessage?.Invoke(message);  // 로그 메시지를 콜백을 통해 전달
}
SignalRClient 내부에서 연결 성공, 메시지 전송 성공/실패와 같은 이벤트가 발생하면 Log() 메서드가 호출됩니다.
Log() 메서드는 OnLogMessage 콜백을 호출하여 해당 메시지를 MainViewModel의 LogMessage 속성으로 전달합니다.
4) XAML에서 LogMessage를 UI에 바인딩
xml
코드 복사
<TextBlock Text="{Binding LogMessage}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="10"/>
TextBlock은 MainViewModel의 LogMessage 속성과 바인딩되어 있습니다.
LogMessage가 변경되면 UI에 그 값이 즉시 반영됩니다. 예를 들어, "SignalR Connection Started", "Message sent: Message from OtherClass", "Error: SignalR is not connected"와 같은 메시지가 표시됩니다.
3. 로그 메시지 예시
1) SignalR 연결 성공 시 로그 기록
csharp
코드 복사
await _hubConnection.StartAsync();
Log("SignalR Connection Started");  // 로그 기록
SignalR 연결이 성공하면 "SignalR Connection Started"라는 메시지가 LogMessage에 기록되고, UI에 표시됩니다.
2) 메시지 전송 성공 시 로그 기록
csharp
코드 복사
await _hubConnection.InvokeAsync("SendMessage", message);
Log($"Message sent: {message}");  // 메시지 전송 후 로그 기록
메시지 전송이 성공하면 "Message sent: {message}"라는 메시지가 LogMessage에 기록되어, UI에 표시됩니다.
3) 오류 발생 시 로그 기록
csharp
코드 복사
catch (Exception ex)
{
    LogError(ex.Message);  // 오류 발생 시 로그 기록
}
오류 발생 시 "Error: {오류 메시지}"라는 메시지가 LogMessage에 기록되고, UI에 표시됩니다.
4. 최종적으로 UI에 보여지는 예시
SignalR 연결 성공: "SignalR Connection Started"
메시지 전송 성공: "Message sent: Message from OtherClass"
연결 실패: "Error: SignalR is not connected"
5. 전체 코드 흐름 다시 보기
SignalRClient에서 발생하는 로그 메시지(연결 성공, 메시지 전송 성공, 오류)는 모두 LogMessage에 기록되어 TextBlock에 표시됩니다.