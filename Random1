using UnityEngine;
using UnityEngine.SceneManagement;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.UI;
using System;
using System.Data;
using UnityEngine.Networking;
using System.Text.RegularExpressions;
using System.Text;
using System.Linq;
using System.Collections.Generic;


public class SendToGitKyungwon : MonoBehaviour
{

    private string filePath = "main/Random1"; // 파일 경로
    private string owner = "kyungwonchai"; // GitHub 저장소 소유자 이름
    private string repo = "ChoSung"; // 저장소 이름
    private string token = "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"; // personal access token 값

    public int imgnow = 1;
    public Sprite imagePath1 ; // 이미지의 경로와 이름을 설정합니다.
    public Sprite imagePath2  ; // 이미지의 경로와 이름을 설정합니다.

    private string githubRepoOwner = "kyungwonchai"; // GitHub 저장소 소유자 이름
    private string githubRepoName = "ChoSung"; // 저장소 이름 
    private string githubFilePath = "main/Random1"; // 파일 경로
    private string textToUpload = "";     // 업로드할 텍스트

    Dictionary<string, string> leftDict = new Dictionary<string, string>();

    private void SaveToLogFile(string textToSave)
    {
        string directoryPath;
        if (Application.platform == RuntimePlatform.Android)
        {
            directoryPath = "/storage/emulated/0/__kwGPT"; // 일반적인 외부 저장소 경로
        }
        else
        {
            directoryPath = Path.Combine(Application.persistentDataPath, "__kwGPT"); // 다른 플랫폼을 위한 경로
        }



        // '__경원공부/yyyyMM/yyMMdd' 형식의 폴더 경로 생성
        string folderPath = Path.Combine(directoryPath, DateTime.Now.ToString("yyyyMM"), DateTime.Now.ToString("yyMMdd"));
        string fileName = DateTime.Now.ToString("yyyyMMddHHmmss") + ".ulog";
        string fullPath = Path.Combine(folderPath, fileName);

        // 폴더가 없으면 생성
        if (!Directory.Exists(folderPath))
        {
            Directory.CreateDirectory(folderPath);
        }

        // 파일에 문자열 저장
        File.WriteAllText(fullPath, textToSave);
    }



    public void SendGit1()
    {    // 클립보드에서 텍스트 가져오기
        string textToUpload = GUIUtility.systemCopyBuffer;

        StartCoroutine(AppendTextToFile(textToUpload));

        // PC의 폴더에 파일 저장
        SaveToLogFile(textToUpload);


        // 이 부분을 수정합니다.
        GameObject inputObject = GameObject.FindWithTag("txtinfo");
        if (inputObject != null)
        {
            TMPro.TextMeshProUGUI textMeshPro = inputObject.GetComponent<TMPro.TextMeshProUGUI>();

            if (textMeshPro != null)
            {
                //    textMeshPro.text = "S " + DateTime.Now.ToString("yy-MM-dd HH:mm:ss"); ;
                textMeshPro.text = "";

                    GameObject inputObject2 = GameObject.FindWithTag("tagimg1");

                if (inputObject2 != null )
                {
                   // Debug.Log("211111");
                    Image imageComponent = inputObject2.GetComponent<Image>();
                    if (imageComponent != null)
                    {

                        if (imgnow == 1)
                        {
                            imgnow = 2;
                            // 이미지를 로드하여 할당합니다.
                          
                                imageComponent.sprite = imagePath1;
                            
                        }
                        else
                        {
                            imgnow = 1;
                           
                                imageComponent.sprite = imagePath2;
                            
                        }

                    }
                    
                }

            }
            else
            {
                Debug.LogError("TMP_InputField 컴포넌트를 찾을 수 없습니다.");
            }
        }
        else
        {
            Debug.LogError("태그가 'txtinfo'인 게임 오브젝트를 찾을 수 없습니다.");
        }

        // 클립보드 초기화
     //   GUIUtility.systemCopyBuffer = "";
    }


    private GameObject txtNow;
    private TMPro.TextMeshProUGUI txtnow2;

    private int currentIndex = 0; // 현재 인덱스
    private float elapsedTime = 0f; // 경과 시간
    private float interval = 10f; // 호출 간격


    private GameObject txtkk1;
    private TMPro.TextMeshProUGUI txtuu1;

    private GameObject txtkk2;
    private TMPro.TextMeshProUGUI txtuu2;

    private void Start()
    {
        txtNow = GameObject.FindWithTag("txt1");
        txtnow2 = txtNow.GetComponent<TMPro.TextMeshProUGUI>();
        //
        //   txtkk1 = GameObject.FindWithTag("txt2");
        //   txtuu1 = txtkk1.GetComponent<TMPro.TextMeshProUGUI>();
        //
        //   txtkk2 = GameObject.FindWithTag("txt3");
        //   txtuu2 = txtkk2.GetComponent<TMPro.TextMeshProUGUI>();
        //
        //   StartCoroutine(GetGitFile());
 

    }

  
    private void Update()
    {
            txtnow2.text = DateTime.Now.ToString("MM-dd HH:mm:ss");


        //    elapsedTime += Time.deltaTime;
        //    if (elapsedTime >= interval)
        //    {
        //        elapsedTime = 0f;
        //
        //           
        //
        //            KeyValuePair<string, string> log = leftDict.ElementAt(currentIndex);
        //
        //            txtuu1.text = log.Key;
        //                txtuu2.text = log.Value;
        //                currentIndex++;
        //
        //        if(currentIndex ==leftDict.Count)
        //        {
        //            currentIndex = 0;
        //        }
        //           
        //    }
        //
    }



    IEnumerator GetGitFile()
    {
        string filePath = "main/Random2";
        string owner = "kyungwonchai";
        string repo = "ChoSung";

        using (UnityWebRequest wwwGet = UnityWebRequest.Get("https://api.github.com/repos/" + owner + "/" + repo + "/contents/" + filePath))
        {
            wwwGet.SetRequestHeader("Authorization", "Token " + token);
            yield return wwwGet.SendWebRequest();

            if (wwwGet.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError("Error: " + wwwGet.error);
                yield break;
            }
            /////
            // 파일 내용 가져오기
            string contentString = wwwGet.downloadHandler.text;
            GitFile gitFile = JsonUtility.FromJson<GitFile>(contentString);
            string base64String = gitFile.content;


            // base64 인코딩된 파일 내용을 디코딩하여 문자열로 변환
            byte[] bytes = System.Convert.FromBase64String(base64String);
            string currentText = Encoding.UTF8.GetString(bytes);


            string[] lines = currentText.Split('\n'); // 문자열을 행 단위로 분리

            foreach (string line in lines)
            {
                string[] tokens = line.Split(new string[] { "^^" }, StringSplitOptions.RemoveEmptyEntries);
                if (tokens.Length == 2)
                {
                    leftDict[tokens[0]] = tokens[1]; // 좌측 문자열을 key로, 우측 문자열을 value로 저장 
                }
            }





        }
    }


    IEnumerator AppendTextToFile(string newText)
    {
        string filePath = "Random1";
        string owner = "kyungwonchai";
        string repo = "ChoSung";

        using (UnityWebRequest wwwGet = UnityWebRequest.Get("https://api.github.com/repos/" + owner + "/" + repo + "/contents/" + filePath))
        {
            wwwGet.SetRequestHeader("Authorization", "Token " + token);
            yield return wwwGet.SendWebRequest();

            if (wwwGet.result != UnityWebRequest.Result.Success)
            {
                Debug.LogError("Error: " + wwwGet.error);
                yield break;
            }
            /////
            // 파일 내용 가져오기
            string contentString = wwwGet.downloadHandler.text;
            GitFile gitFile = JsonUtility.FromJson<GitFile>(contentString);
            string base64String = gitFile.content;






            // base64 인코딩된 파일 내용을 디코딩하여 문자열로 변환
            byte[] bytes = System.Convert.FromBase64String(base64String);
            string currentText = Encoding.UTF8.GetString(bytes);


            // 새로운 내용을 현재 내용 끝에 추가
            string updatedText = newText;
            byte[] updatedBytes = Encoding.UTF8.GetBytes(updatedText);
            string updatedBase64String = System.Convert.ToBase64String(updatedBytes);

            // 파일 내용 덮어쓰기를 위한 데이터 생성
            string commitMessage = "Updated " + filePath;
            string putData = "{\"message\":\"" + commitMessage + "\",\"content\":\"" + updatedBase64String + "\",\"sha\":\"" + gitFile.sha + "\"}";

            // PUT 요청을 사용하여 파일 내용 덮어쓰기
            using (UnityWebRequest wwwPut = UnityWebRequest.Put("https://api.github.com/repos/" + owner + "/" + repo + "/contents/" + filePath, putData))
            {
                wwwPut.method = UnityWebRequest.kHttpVerbPUT;
                wwwPut.SetRequestHeader("Authorization", "Token " + token);
                wwwPut.SetRequestHeader("Content-Type", "application/json");
                yield return wwwPut.SendWebRequest();

                if (wwwPut.result == UnityWebRequest.Result.ConnectionError || wwwPut.result == UnityWebRequest.Result.ProtocolError)
                {
                    Debug.LogError("Error: " + wwwPut.error);
                }
                else
                {
                    Debug.Log("File overwritten.");
                }
            }
        }
    }


    private class GitFile
    {
        public string name;
        public string path;
        public string sha;
        public int size;
        public string url;
        public string html_url;
        public string git_url;
        public string download_url;
        public string type;
        public string content;
        public string encoding;
    }




}