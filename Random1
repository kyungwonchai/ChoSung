로부터 입력받은 숫자를 서버로 POST 요청을 보내는 기능을 구현하기 위해 React 컴포넌트를 사용하되, fetch API를 활용하여 비동기적으로 서버에 데이터를 전송하는 방식을 채택할 수 있습니다. 이 예시에서는 사용자로부터 숫자를 입력받은 뒤, 특정 조건(여기서는 line과 loc 값)에 따라 그 숫자와 함께 서버로 POST 요청을 보내는 방법을 다룹니다.

아래의 코드 예시에서는 간단한 UI를 구성하여 숫자를 입력받고, 조건을 만족하는 경우에만 서버로 데이터를 전송하는 예시를 보여줍니다.

React 컴포넌트 예시
jsx
Copy code
import React, { useState } from 'react';

function DataSender() {
  const [number, setNumber] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault(); // 폼 제출 시 페이지 새로고침 방지

    // line과 loc 값을 조건으로 설정
    const line = 1; // 예시 값
    const loc = 100; // 예시 값

    // 여기서는 조건을 단순화했으나, 실제로는 입력값에 따라 조건을 동적으로 설정할 수 있습니다.
    if (line === 1 && loc === 100) {
      try {
        const response = await fetch('서버_URL', { // '서버_URL'을 실제 서버의 URL로 대체하세요.
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            number,
            line,
            loc,
          }),
        });

        if (!response.ok) {
          throw new Error('서버 에러');
        }

        const data = await response.json(); // 서버로부터 응답 받기
        console.log(data); // 응답 로깅
        alert('데이터가 성공적으로 전송되었습니다.');
      } catch (error) {
        console.error('데이터 전송 실패:', error);
        alert('데이터 전송에 실패했습니다.');
      }
    } else {
      alert('조건을 만족하지 않습니다.');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber(e.target.value)}
        placeholder="숫자 입력"
        required
      />
      <button type="submit">서버로 전송</button>
    </form>
  );
}

export default DataSender;
이 컴포넌트는 사용자로부터 숫자를 입력받고, line과 loc의 값이 특정 조건을 만족할 때만 서버로 POST 요청을 보내는 기능을 수행합니다. 서버의 URL은 실제로 사용하는 서버의 주소로 변경해야 하며, 서버 측에서도 이러한 POST 요청을 처리할 수 있는 라우트와 로직이 구현되어 있어야 합니다.

fetch API는 비동기 요청을 처리하기 때문에 async/await 구문을 사용하여 요청이 완료될 때까지 기다린 후, 요청의 성공 여부에 따라 적절한 액션(응답 로깅, 성공/실패 알림 등)을