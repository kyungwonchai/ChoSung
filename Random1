네, Unity Industrial Collection을 사용하여 안드로이드 앱(APK)을 빌드하고 배포하려면 반드시 **키스토어(Keystore)**로 서명해야 합니다. 이 키스토어는 앱의 소유자를 증명하는 디지털 서명과 같아서, 앱을 업데이트하거나 구글 플레이 스토어에 출시할 때 필수적입니다.

아래에서 키스토어 생성부터 APK 빌드까지 전체 과정을 상세히 안내해 드리겠습니다.

1. Unity 빌드 환경 설정 (Android)
가장 먼저 Unity 프로젝트가 안드로이드 플랫폼용으로 설정되어 있는지 확인하고, 필요한 모듈이 설치되어 있어야 합니다.

플랫폼 전환: Unity 에디터 상단 메뉴에서 File > Build Settings로 이동합니다.

Android 선택: Platform 목록에서 Android를 선택하고, 우측 하단의 Switch Platform 버튼을 클릭합니다. (버튼이 활성화되어 있지 않다면 이미 안드로이드 플랫폼으로 설정된 것입니다.)

Android Build Support 설치: 만약 Android 플랫폼 옆에 "Install with Unity Hub"라는 메시지가 보인다면, Unity Hub를 통해 Android Build Support, OpenJDK, Android SDK & NDK tools를 설치해야 합니다.

2. 플레이어 설정 (Player Settings)
APK 파일을 빌드하기 전에 앱의 중요한 정보들을 설정해야 합니다. Build Settings 창 하단의 Player Settings... 버튼을 클릭하여 설정 창을 엽니다.

Company Name: 회사 이름을 영문으로 입력합니다. (예: MyCompany)

Product Name: 애플리케이션의 이름을 영문으로 입력합니다. (예: MyAwesomeApp)

Version: 앱의 버전을 입력합니다. (예: 1.0.0)

가장 중요한 'Other Settings'
Player Settings 창의 Other Settings 섹션에서 패키지 이름과 같은 핵심 정보를 설정합니다.

Identification

Package Name: 앱의 고유 식별자입니다. com.회사이름.제품이름 형식을 따르는 것이 일반적입니다. 이 이름은 한번 출시하면 절대 변경할 수 없으므로 신중하게 결정해야 합니다.

예시: com.mycompany.myawesomeapp

Version: 앱의 버전을 다시 한번 확인합니다. (예: 1.e)

Bundle Version Code: 구글 플레이 스토어가 앱의 업데이트 여부를 판단하는 정수 값입니다. 앱을 새로 빌드할 때마다 이 값을 1씩 증가시키는 것이 좋습니다. (예: 1, 2, 3...)

Minimum API Level: 앱이 지원할 최소 안드로이드 OS 버전을 선택합니다.

Target API Level: 앱이 타겟으로 하는 안드로이드 OS 버전을 선택합니다. 보통 최신 버전으로 자동 설정하는 것을 권장합니다.

Configuration

Scripting Backend: 대부분의 경우 IL2CPP를 선택하는 것이 성능상 유리합니다.

Target Architectures: ARMv7과 ARM64를 모두 체크하여 64비트 기기를 지원해야 합니다. (구글 플레이 스토어 필수 정책)

3. 키스토어(Keystore) 생성 및 설정
이제 앱을 서명할 키스토어를 만들 차례입니다.

키스토어 매니저 열기: Player Settings > Publishing Settings 섹션으로 이동합니다. Keystore Manager... 버튼을 클릭합니다.

새 키스토어 생성:

Keystore Manager 창이 뜨면, 상단의 드롭다운 메뉴에서 Create New를 선택하고, 원하는 위치(보통 프로젝트 폴더 외부의 안전한 곳)에 저장하도록 경로를 지정합니다.

Password: 키스토어 파일 자체의 비밀번호를 설정합니다. 이 비밀번호는 절대 잃어버리면 안 됩니다.

Confirm password: 비밀번호를 다시 한번 입력합니다.

새 키(Alias) 생성:

Alias: 키의 별칭(이름)을 지정합니다. (예: mykey)

Password: 해당 키(Alias)의 비밀번호를 설정합니다. 키스토어 비밀번호와 같아도 되지만, 다르게 설정하는 것이 더 안전합니다. 이 비밀번호 역시 절대 잃어버리면 안 됩니다.

Confirm password: 비밀번호를 다시 한번 입력합니다.

Validity (years): 키의 유효 기간입니다. 구글 플레이 스토어는 최소 2048년 이후까지 유효한 키를 요구하므로, 25년 이상으로 넉넉하게 설정하는 것이 좋습니다.

Certificate: 이름, 부서, 조직, 도시, 주, 국가 코드(한국은 KR) 등 인증서 정보를 입력합니다. (필수 입력 항목은 아니지만, 채워두는 것이 좋습니다.)

키 생성 완료: 모든 정보를 입력한 후 Add Key 버튼을 클릭하면 키가 생성되고 키스토어 파일(.keystore)이 지정된 위치에 저장됩니다.

프로젝트에 키스토어 할당:

Publishing Settings으로 돌아와 Custom Keystore 체크박스를 활성화합니다.

Select 버튼을 눌러 방금 생성한 .keystore 파일을 선택합니다.

Password 란에 키스토어 파일의 비밀번호를 입력합니다.

Alias 드롭다운 메뉴에서 방금 생성한 **키의 별칭(Alias)**을 선택합니다.

Password 란에 키(Alias)의 비밀번호를 입력합니다.

(이미지 예시: 실제 UI는 Unity 버전에 따라 다를 수 있습니다.)

4. APK 빌드하기
모든 설정이 완료되었습니다. 이제 최종 APK 파일을 생성할 차례입니다.

Build Settings 창 열기: File > Build Settings로 돌아갑니다.

빌드 옵션 확인: Build App Bundles (Google Play) 옵션이 체크 해제되어 있는지 확인합니다. (체크하면 APK 대신 AAB 파일이 생성됩니다.)

빌드 시작: Build 버튼을 클릭합니다.

파일 저장: APK 파일이 저장될 위치와 파일 이름을 지정하고 저장 버튼을 누르면 빌드가 시작됩니다.

빌드가 성공적으로 완료되면 지정한 폴더에 .apk 파일이 생성됩니다. 이 파일이 바로 다른 사람에게 공유하거나 안드로이드 기기에 직접 설치할 수 있는 서명된 앱 파일입니다.

⚠️ 중요! 꼭 기억하세요.
키스토어 파일(.keystore)과 비밀번호는 절대 잃어버리면 안 됩니다. 분실 시 동일한 앱으로 업데이트하는 것이 불가능해지며, 새로운 앱으로 다시 출시해야 하는 최악의 상황이 발생할 수 있습니다. 안전한 곳에 여러 벌 백업해두세요.

패키지 이름(Package Name)은 한번 출시하면 변경할 수 없습니다. 신중하게 결정하세요.