래는 요청에 따라 차트 위에 마우스 올릴 때 툴팁에 yyyy-MM-dd HH:mm:ss 포맷을 표시하도록 수정하고, MP별 점 크기를 작게 설정하며, 선은 연하게 표시, 그리고 MP별 필터를 위한 범례(Legend) 추가를 구현한 전체 소스코드입니다.

C# 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using DevExpress.Xpf.Charts;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        // BoxPlot 데이터
        public ObservableCollection<BoxPlotData> BoxPlotChartData { get; set; } = new ObservableCollection<BoxPlotData>();

        // Detail 차트 데이터 (MP1~MP5)
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();

        // EMA 데이터
        public ObservableCollection<EmaData> EmaChartData { get; set; } = new ObservableCollection<EmaData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // BoxPlot 데이터 로드
            LoadBoxPlotData();
        }

        /// <summary>
        /// BoxPlot 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadBoxPlotData()
        {
            try
            {
                var connectionString = "YourConnectionString"; // 데이터베이스 연결 문자열
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0); // LineName
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            // BoxPlot 데이터 추가
                            BoxPlotChartData.Add(new BoxPlotData
                            {
                                LineName = lineName,
                                MinValue = mpData.Min(),
                                MaxValue = mpData.Max(),
                                MedianValue = CalculateMedian(mpData),
                                LowerQuartile = CalculatePercentile(mpData, 25),
                                UpperQuartile = CalculatePercentile(mpData, 75)
                            });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading BoxPlot data: {ex.Message}");
            }
        }

        /// <summary>
        /// BoxPlot에서 선택된 라인 데이터를 기반으로 Detail 차트를 업데이트
        /// </summary>
        private void BoxPlotChart_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            var hitInfo = BoxPlotChart.Diagram.CalcHitInfo(e.GetPosition(BoxPlotChart));
            if (hitInfo.InSeries)
            {
                var seriesPoint = hitInfo.SeriesPoint;
                if (seriesPoint != null)
                {
                    var selectedLineName = seriesPoint.Argument.ToString();
                    LoadDetailChartData(selectedLineName);
                }
            }
        }

        /// <summary>
        /// Detail 차트 데이터를 데이터베이스에서 로드
        /// </summary>
        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear();
                var connectionString = "YourConnectionString";

                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult
                                  WHERE LineName = @lineName
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                DetailChartData.Add(new DetailData
                                {
                                    Timestamp = reader.GetDateTime(0),
                                    MP1 = reader.GetDouble(1),
                                    MP2 = reader.GetDouble(2),
                                    MP3 = reader.GetDouble(3),
                                    MP4 = reader.GetDouble(4),
                                    MP5 = reader.GetDouble(5)
                                });
                            }
                        }
                    }
                }

                // EMA 데이터 계산
                CalculateEma();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading DetailChart data: {ex.Message}");
            }
        }

        /// <summary>
        /// EMA 데이터 계산
        /// </summary>
        private void CalculateEma()
        {
            EmaChartData.Clear();
            const double smoothing = 2.0;
            double ema = 0;

            var allData = DetailChartData
                .SelectMany(d => new[]
                {
                    new { d.Timestamp, Value = d.MP1 },
                    new { d.Timestamp, Value = d.MP2 },
                    new { d.Timestamp, Value = d.MP3 },
                    new { d.Timestamp, Value = d.MP4 },
                    new { d.Timestamp, Value = d.MP5 }
                })
                .OrderBy(d => d.Timestamp)
                .ToList();

            for (int i = 0; i < allData.Count; i++)
            {
                if (i == 0)
                {
                    ema = allData[i].Value;
                }
                else
                {
                    ema = (allData[i].Value - ema) * (smoothing / (1 + i)) + ema;
                }

                EmaChartData.Add(new EmaData
                {
                    Timestamp = allData[i].Timestamp,
                    EmaValue = ema
                });
            }
        }

        /// <summary>
        /// 중앙값 계산
        /// </summary>
        private double CalculateMedian(double[] values)
        {
            var sorted = values.OrderBy(v => v).ToArray();
            int mid = sorted.Length / 2;

            return (sorted.Length % 2 != 0) ? sorted[mid] : (sorted[mid - 1] + sorted[mid]) / 2.0;
        }

        /// <summary>
        /// 특정 퍼센트 계산 (Lower/Upper Quartile)
        /// </summary>
        private double CalculatePercentile(double[] values, int percentile)
        {
            var sorted = values.OrderBy(v => v).ToArray();
            double k = (percentile / 100.0) * (sorted.Length - 1);
            int f = (int)Math.Floor(k);
            int c = (int)Math.Ceiling(k);

            return (f == c) ? sorted[f] : sorted[f] + (k - f) * (sorted[c] - sorted[f]);
        }
    }

    /// <summary>
    /// BoxPlot 데이터 모델
    /// </summary>
    public class BoxPlotData
    {
        public string LineName { get; set; }
        public double MinValue { get; set; }
        public double MaxValue { get; set; }
        public double MedianValue { get; set; }
        public double LowerQuartile { get; set; }
        public double UpperQuartile { get; set; }
    }

    /// <summary>
    /// Detail 차트 데이터 모델
    /// </summary>
    public class DetailData
    {
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    /// <summary>
    /// EMA 데이터 모델
    /// </summary>
    public class EmaData
    {
        public DateTime Timestamp { get; set; }
        public double EmaValue { get; set; }
    }
}
XAML 코드 (MainWindow.xaml)
xml
코드 복사
<dxc:PointSeries2D ArgumentDataMember="Timestamp"
                   ValueDataMember="MP1"
                   CrosshairLabelPattern="MP1: {V:F2}"
                   MarkerSize="5"
                   LineOpacity="0.2" />





나의 말:
끊어졌다 xaml만 싹다시줘
ChatGPT의 말:
ChatGPT
아래는 요청에 따라 수정된 XAML 코드입니다. 주요 변경 사항은 다음과 같습니다:

툴팁에 시간 표시: yyyy-MM-dd HH:mm:ss 형식으로 수정.
점 크기 줄임: MarkerSize 속성을 사용해 조정.
선 투명도 낮춤: LineOpacity 속성을 사용.
범례(Legend) 활성화 및 MP별 필터링 가능: UseCheckBoxes="True"로 설정.
XAML 코드 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="800" Width="1200">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="2*" />
            <RowDefinition Height="3*" />
        </Grid.RowDefinitions>

        <!-- BoxPlot Chart -->
        <dxc:ChartControl Grid.Row="0" x:Name="BoxPlotChart" MouseDown="BoxPlotChart_MouseDown">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Line Name" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Values" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>

                    <!-- BoxPlot Series -->
                    <dxc:BoxPlotSeries2D DataSource="{Binding BoxPlotChartData}"
                                         ArgumentDataMember="LineName"
                                         MinValueDataMember="MinValue"
                                         MaxValueDataMember="MaxValue"
                                         MedianValueDataMember="MedianValue"
                                         LowerQuartileValueDataMember="LowerQuartile"
                                         UpperQuartileValueDataMember="UpperQuartile" />
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- Detail + EMA Chart -->
        <dxc:ChartControl Grid.Row="1">
            <dxc:ChartControl.Legend>
                <dxc:Legend UseCheckBoxes="True" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.DateTimeScaleOptions>
                                <dxc:DateTimeScaleOptions MeasureUnit="Second" AggregationMode="None" />
                            </dxc:AxisX2D.DateTimeScaleOptions>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Timestamp" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Values" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>

                    <!-- EMA Line -->
                    <dxc:LineSeries2D DisplayName="EMA"
                                      DataSource="{Binding EmaChartData}"
                                      ArgumentDataMember="Timestamp"
                                      ValueDataMember="EmaValue"
                                      MarkerVisible="False"
                                      LineOpacity="0.7" />

                    <!-- Scatter Points for MP1 ~ MP5 -->
                    <dxc:PointSeries2D DisplayName="MP1"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP1"
                                       MarkerSize="5"
                                       LineOpacity="0.2"
                                       CrosshairLabelPattern="MP1: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})" />
                    <dxc:PointSeries2D DisplayName="MP2"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP2"
                                       MarkerSize="5"
                                       LineOpacity="0.2"
                                       CrosshairLabelPattern="MP2: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})" />
                    <dxc:PointSeries2D DisplayName="MP3"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP3"
                                       MarkerSize="5"
                                       LineOpacity="0.2"
                                       CrosshairLabelPattern="MP3: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})" />
                    <dxc:PointSeries2D DisplayName="MP4"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP4"
                                       MarkerSize="5"
                                       LineOpacity="0.2"
                                       CrosshairLabelPattern="MP4: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})" />
                    <dxc:PointSeries2D DisplayName="MP5"
                                       DataSource="{Binding DetailChartData}"
                                       ArgumentDataMember="Timestamp"
                                       ValueDataMember="MP5"
                                       MarkerSize="5"
                                       LineOpacity="0.2"
                                       CrosshairLabelPattern="MP5: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})" />
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
변경 사항 요약
툴팁 포맷 수정:

CrosshairLabelPattern="MPX: {V:F2} ({A:yyyy-MM-dd HH:mm:ss})"를 사용하여 시간 정보가 초까지 표시되도록 수정.
점 크기 조정:

MarkerSize="5"로 점 크기를 줄였습니다.
선 투명도 조정:

LineOpacity="0.2"로 선을 연하게 표시.
범례 활성화 및 체크박스 추가:

Legend에 UseCheckBoxes="True"를 설정하여 MP별 표시를 필터링 가능.
결과
상단 BoxPlot 차트: 라인 데이터를 요약하여 표시.
하단 Detail 차트:
각 MP 데이터는 점으로 표시되며, EMA는 선으로 표시.
마우스 올릴 때 시간과 값을 툴팁으로 확인 가능.