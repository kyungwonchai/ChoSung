아래는 프로그램 이름을 RouterVisionInspGather로 변경하고 주석을 포함한 전체 코드를 제공합니다. 이 코드는 WPF 프로젝트로 작성되어 UI를 통해 CSV 파일 처리를 수행하며, 데이터베이스로 업로드 상태를 확인할 수 있습니다.

프로젝트 개요
프로젝트 이름: RouterVisionInspGather
주요 기능:
\\10.22.22.22\Result 경로에서 CSV 파일 탐색.
파일의 InspectionTime과 ModelName을 고유 키로 설정하여 중복 방지.
IP 정보(ipname)를 데이터베이스에 저장.
마지막 처리된 InspectionTime을 기준으로 작업 이어서 수행.
UI를 통해 작업 상태 표시.
XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterVisionInspGather.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Router Vision Inspection Gather" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 작업 시작 버튼 -->
        <Button Content="작업 시작" Grid.Row="0" Margin="10" Click="StartButton_Click"/>

        <!-- 상태 메시지를 표시하는 ListBox -->
        <ListBox x:Name="StatusListBox" Grid.Row="1" Margin="10"/>

        <!-- 하단 상태 텍스트 -->
        <TextBlock Text="작업 상태 메시지:" Grid.Row="2" Margin="10" VerticalAlignment="Center"/>
    </Grid>
</Window>
Code-Behind (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    /// <summary>
    /// MainWindow.xaml의 코드 비하인드
    /// 프로그램의 주요 UI와 CSV 처리 시작 작업을 담당합니다.
    /// </summary>
    public partial class MainWindow : Window
    {
        // 마지막 처리된 InspectionTime을 저장
        private DateTime _lastInspectionTime;

        public MainWindow()
        {
            InitializeComponent();

            // 프로그램 시작 시 데이터베이스에서 마지막 처리된 InspectionTime 가져오기
            _lastInspectionTime = GetLastInspectionTimeFromDatabase();
            StatusListBox.Items.Add($"마지막 처리된 시간: {_lastInspectionTime}");
        }

        /// <summary>
        /// 데이터베이스에서 마지막 InspectionTime 가져오기
        /// </summary>
        /// <returns>마지막 처리된 InspectionTime</returns>
        private DateTime GetLastInspectionTimeFromDatabase()
        {
            const string query = "SELECT MAX(InspectionTime) FROM YourTable";

            using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
            {
                connection.Open();
                using (var command = new SqlCommand(query, connection))
                {
                    var result = command.ExecuteScalar();
                    // 결과값이 없을 경우 1년 전 시간 반환
                    return result == DBNull.Value ? DateTime.Now.AddYears(-1) : Convert.ToDateTime(result);
                }
            }
        }

        /// <summary>
        /// 작업 시작 버튼 클릭 이벤트
        /// </summary>
        private async void StartButton_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                StatusListBox.Items.Add("작업 시작 중...");
                await StartProcessingAsync();
                StatusListBox.Items.Add("작업 완료");
            }
            catch (Exception ex)
            {
                StatusListBox.Items.Add($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            var processor = new FileProcessor(_lastInspectionTime);
            var newFiles = processor.GetNewFiles(@"\\10.22.22.22\Result");

            if (newFiles.Any())
            {
                foreach (var file in newFiles)
                {
                    StatusListBox.Items.Add($"파일 처리 중: {file}");

                    // 파일 읽기
                    var rows = processor.ReadCsv(file);

                    // 데이터베이스 업로드
                    var uploader = new DatabaseUploader();
                    await uploader.UploadToDatabaseAsync(rows);

                    StatusListBox.Items.Add($"파일 업로드 완료: {file}");
                }

                // 마지막 처리된 InspectionTime 업데이트
                _lastInspectionTime = GetLastInspectionTimeFromDatabase();
            }
            else
            {
                StatusListBox.Items.Add("처리할 새로운 파일이 없습니다.");
            }
        }
    }

    /// <summary>
    /// 파일 처리 클래스
    /// </summary>
    public class FileProcessor
    {
        private readonly DateTime _lastInspectionTime;

        public FileProcessor(DateTime lastInspectionTime)
        {
            _lastInspectionTime = lastInspectionTime;
        }

        /// <summary>
        /// 새로운 파일 탐색
        /// </summary>
        public List<string> GetNewFiles(string rootPath)
        {
            return Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories)
                            .Where(file => File.GetLastWriteTime(file) > _lastInspectionTime)
                            .ToList();
        }

        /// <summary>
        /// CSV 파일 읽기
        /// </summary>
        public List<Dictionary<string, object>> ReadCsv(string filePath)
        {
            var rows = new List<Dictionary<string, object>>();

            using (var reader = new StreamReader(new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
            {
                var headers = reader.ReadLine()?.Split(',');
                if (headers == null) throw new InvalidOperationException("CSV 파일이 비어있습니다.");

                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine()?.Split(',');
                    if (values == null || values.Length < headers.Length) continue;

                    var row = new Dictionary<string, object>();
                    for (int i = 0; i < headers.Length; i++)
                    {
                        row[headers[i]] = values[i];
                    }

                    // AlignResult가 N/A인 경우 제외
                    if (row.TryGetValue("AlignResult", out var alignResult) && alignResult.ToString() == "N/A")
                    {
                        continue;
                    }

                    // IP 정보 추가
                    row["ipname"] = "10.22.22.22";

                    rows.Add(row);
                }
            }

            return rows;
        }
    }

    /// <summary>
    /// 데이터베이스 업로드 클래스
    /// </summary>
    public class DatabaseUploader
    {
        public const string ConnectionString = "Server=YOUR_SERVER;Database=YOUR_DATABASE;User Id=YOUR_USER;Password=YOUR_PASSWORD;";

        /// <summary>
        /// 데이터베이스로 업로드
        /// </summary>
        public async Task UploadToDatabaseAsync(List<Dictionary<string, object>> rows)
        {
            using (var connection = new SqlConnection(ConnectionString))
            {
                await connection.OpenAsync();

                foreach (var row in rows)
                {
                    using (var command = new SqlCommand(
                        @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE InspectionTime = @InspectionTime AND ModelName = @ModelName)
                          INSERT INTO YourTable (InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, ipname)
                          VALUES (@InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @ipname)", connection))
                    {
                        command.Parameters.AddWithValue("@InspectionTime", DateTime.Parse(row["InspectionTime"].ToString()));
                        command.Parameters.AddWithValue("@ModelName", row["ModelName"].ToString());
                        command.Parameters.AddWithValue("@AlignResult", row["AlignResult"].ToString());
                        command.Parameters.AddWithValue("@MP1DATA", float.Parse(row["MP1DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP2DATA", float.Parse(row["MP2DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP3DATA", float.Parse(row["MP3DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"].ToString());
                        command.Parameters.AddWithValue("@MP4DATA", float.Parse(row["MP4DATA"].ToString()));
                        command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"].ToString());
                        command.Parameters.AddWithValue("@ipname", row["ipname"].ToString());

                        await command.ExecuteNonQueryAsync();
                    }
                }
            }
        }
    }
}
MSSQL 테이블 생성
sql
코드 복사
CREATE TABLE YourTable (
    InspectionTime DATETIME NOT NULL,
    ModelName NVARCHAR(100) NOT NULL,
    AlignResult NVARCHAR(100),
    MP1DATA FLOAT,
    MP1RESULT NVARCHAR(100),
    MP2DATA FLOAT,
    MP2RESULT NVARCHAR(100),
    MP3DATA FLOAT,
    MP3RESULT NVARCHAR(100),
    MP4DATA FLOAT,
    MP4RESULT NVARCHAR(100),
    ipname NVARCHAR(50) NOT NULL,
    PRIMARY KEY (InspectionTime, ModelName) -- 고유 키 설정
);
변경사항 요약
프로그램 이름을 RouterVisionInspGather로 설정.
주석을 추가하여 각 클래스와 함수의 동작을 상세히 설명.
WPF UI를 통해 작업 상태를 표시.