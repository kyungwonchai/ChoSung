알겠습니다. 처음 파일을 선택하고 "시작" 버튼을 누른 후, 로그 파일이 수정될 때 마지막 줄부터 기록이 시작되도록 수정하겠습니다.

이 문제를 해결하기 위해 StartMonitoring_Click 이벤트 핸들러에서 마지막으로 기록된 위치를 저장하고, 파일이 변경될 때 마지막 위치에서부터 새로 추가된 라인만 읽어오도록 해야 합니다.

아래는 이러한 기능을 구현한 수정된 전체 코드입니다:

수정된 C# 코드 파일 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using System.Windows;

namespace LogMonitor
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher _fileWatcher;
        private string _logFilePath;
        private string _backupFolderPath;
        private int _maxLogLines = 1000;
        private readonly Dictionary<long, string> _logLinesDictionary = new Dictionary<long, string>(); // 줄 번호와 로그를 매핑하는 딕셔너리
        private long _lastFileLength = 0; // 마지막 파일 길이
        private bool _isMonitoringStarted = false; // 모니터링 시작 여부

        private const string ConfigFileName = "config.ini"; // 설정 파일 이름

        public MainWindow()
        {
            InitializeComponent();
            LoadSettings(); // 설정 파일 로드
        }

        // 설정 파일에서 값 로드
        private void LoadSettings()
        {
            if (File.Exists(ConfigFileName))
            {
                var lines = File.ReadAllLines(ConfigFileName);
                foreach (var line in lines)
                {
                    var parts = line.Split('=');
                    if (parts.Length == 2)
                    {
                        var key = parts[0].Trim();
                        var value = parts[1].Trim();
                        if (key == "LogFilePath")
                        {
                            _logFilePath = value;
                            LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                        }
                        else if (key == "BackupFolderPath")
                        {
                            _backupFolderPath = value;
                            BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                        }
                        else if (key == "MaxLogLines")
                        {
                            if (int.TryParse(value, out int maxLines))
                            {
                                _maxLogLines = maxLines;
                            }
                        }
                    }
                }
            }

            MaxLinesTextBox.Text = _maxLogLines.ToString();
        }

        // 설정 파일에 값 저장
        private void SaveSettings()
        {
            var lines = new List<string>
            {
                $"LogFilePath={_logFilePath}",
                $"BackupFolderPath={_backupFolderPath}",
                $"MaxLogLines={_maxLogLines}"
            };

            File.WriteAllLines(ConfigFileName, lines);
        }

        // 로그 파일 변경 감시 시작
        private void StartFileWatcher()
        {
            if (_fileWatcher != null)
            {
                _fileWatcher.Dispose();
            }

            _fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(_logFilePath))
            {
                Filter = Path.GetFileName(_logFilePath),
                NotifyFilter = NotifyFilters.LastWrite
            };

            _fileWatcher.Changed += OnLogFileChanged;
            _fileWatcher.EnableRaisingEvents = true;
        }

        // 로그 파일이 변경되었을 때 호출되는 이벤트 핸들러
        private async void OnLogFileChanged(object sender, FileSystemEventArgs e)
        {
            if (_isMonitoringStarted)
            {
                await ReadNewLinesAsync();
            }
        }

        // 새로운 로그 라인 읽기 (비동기)
        private async Task ReadNewLinesAsync()
        {
            await Dispatcher.InvokeAsync(() =>
            {
                // 파일이 존재하지 않으면 리턴
                if (!File.Exists(_logFilePath))
                    return;

                using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    // 이전에 읽었던 파일의 길이부터 읽기 시작
                    fs.Seek(_lastFileLength, SeekOrigin.Begin);

                    using (var sr = new StreamReader(fs, Encoding.Default))
                    {
                        long lineNumber = _logLinesDictionary.Count; // 기존 줄 수를 기반으로 새로운 줄 번호 계산

                        while (!sr.EndOfStream)
                        {
                            var line = sr.ReadLine();
                            if (!string.IsNullOrWhiteSpace(line))
                            {
                                // 현재 줄 번호와 로그 라인을 조합하여 해시로 관리
                                lineNumber++;
                                string captureTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                                string formattedLine = $"[{captureTime}] [{lineNumber}]\t\t\t\t{line}";

                                if (!_logLinesDictionary.ContainsKey(lineNumber))
                                {
                                    _logLinesDictionary[lineNumber] = line; // 줄 번호와 로그 라인을 저장
                                    LogListBox.Items.Add(formattedLine); // 포맷된 로그 라인 추가
                                    BackupLogLine(formattedLine); // 백업
                                }
                            }

                            // 최대 로그 라인 수 유지
                            if (LogListBox.Items.Count > _maxLogLines)
                            {
                                LogListBox.Items.RemoveAt(0);
                                _logLinesDictionary.Remove(lineNumber - _maxLogLines);
                            }
                        }

                        // 마지막 파일 길이 저장
                        _lastFileLength = fs.Length;
                    }
                }
            });
        }

        // 로그 파일 선택 버튼 클릭 이벤트 핸들러
        private void SelectLogFile_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog();
            if (openFileDialog.ShowDialog() == true)
            {
                _logFilePath = openFileDialog.FileName;
                LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                SaveSettings(); // 설정 저장
                _lastFileLength = new FileInfo(_logFilePath).Length; // 초기 파일 길이 설정
                DisplayLastThreeLines(); // 마지막 3줄 표시
            }
        }

        // 백업 폴더 선택 버튼 클릭 이벤트 핸들러
        private void SelectBackupFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderDialog = new System.Windows.Forms.FolderBrowserDialog();
            if (folderDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _backupFolderPath = folderDialog.SelectedPath;
                BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                SaveSettings(); // 설정 저장
            }
        }

        // 마지막 3줄 표시
        private void DisplayLastThreeLines()
        {
            if (!File.Exists(_logFilePath))
                return;

            var lines = new List<string>();

            using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                fs.Seek(0, SeekOrigin.Begin);

                using (var sr = new StreamReader(fs, Encoding.Default))
                {
                    while (!sr.EndOfStream)
                    {
                        var line = sr.ReadLine();
                        if (!string.IsNullOrWhiteSpace(line))
                        {
                            lines.Add(line);
                            if (lines.Count > 3)
                            {
                                lines.RemoveAt(0);
                            }
                        }
                    }
                }
            }

            LogListBox.Items.Clear();
            LogListBox.Items.Add("최종 3줄:");
            long lineNumber = 0;

            foreach (var line in lines)
            {
                lineNumber++;
                string captureTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                string formattedLine = $"[{captureTime}] [{lineNumber}]\t\t\t\t{line}";
                LogListBox.Items.Add(formattedLine);
            }

            _lastFileLength = new FileInfo(_logFilePath).Length; // 파일의 길이를 마지막 위치로 설정
        }

        // 로그 감시 시작 버튼 클릭 이벤트 핸들러
        private void StartMonitoring_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_logFilePath))
            {
                _isMonitoringStarted = true; // 모니터링 시작 표시
                _lastFileLength = new FileInfo(_logFilePath).Length; // 시작 시점의 파일 길이로 설정
                StartFileWatcher();
            }
        }

        // 로그 지우기 버튼 클릭 이벤트 핸들러
        private void ClearLogs_Click(object sender, RoutedEventArgs e)
        {
            LogListBox.Items.Clear();
            _logLinesDictionary.Clear();
        }

        // 최대 로그 라인 수 텍스트 박스 변경 이벤트 핸들러
        private void MaxLinesTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (int.TryParse(MaxLinesTextBox.Text, out int maxLines))
            {
                _maxLogLines = maxLines;
                SaveSettings(); // 설정 저장
            }
        }

        // 백업 폴더에 로그 라인 저장
        private void BackupLogLine(string line)
        {
            if (string.IsNullOrEmpty(_backupFolderPath))
            {
                return;
            }

            // 날짜별 폴더 생성
            var dateFolder = Path.Combine(_backupFolderPath, DateTime.Now.ToString("yyyyMMdd"));
            if (!Directory.Exists(dateFolder))
            {
                Directory.CreateDirectory(dateFolder);
            }

            var backupFilePath = Path.Combine(dateFolder, $"backup_{DateTime.Now:yyyyMMdd}.log");

            using (var sw = new StreamWriter(backupFilePath, true, Encoding.Default))
            {
                sw.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {line}");
            }
        }
    }
}
주요 변경 사항:
모니터링 시작 위치 설정: StartMonitoring_Click 이벤트 핸들러에서 _isMonitoringStarted 플래그를 설정하여 모니터링이 시작되었음을 표시하고, 파일의 길이를 _lastFileLength에 저장합니다. 이로 인해 "시작" 버튼을 누른 후 수정된 부분부터 로그를 기록합니다.

변경 감지 시 조건 추가: OnLogFileChanged 이벤트 핸들러에서는 _isMonitoringStarted가 true일 때만 로그를 읽도록 조건을 추가했습니다. 이렇게 하면 모니터링이 시작된 이후부터 파일 변경을 감지하고 로그를 읽기 시작합니다.

파일 길이 추적: 파일이 변경될 때마다 _lastFileLength를 업데이트하여, 다음 읽기 시 마지막 위치에서부터 읽을 수 있도록 합니다.

이제 프로그램은 로그 파일을 선택하고 "시작" 버튼을 누르면 모니터링을 시작하고, 이후 파일의 변경 사항을 감지하여 마지막 줄 이후의 내용만 읽어올 것입니다.