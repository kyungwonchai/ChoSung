Template 내의 TextBox 컨트롤을 포함하여 DevExpress WPF GridControl의 내용을 Excel로 내보내는 것은 복잡할 수 있습니다. DataTemplate을 사용하는 경우, GridControl이 TextBox의 실제 내용을 자동으로 인식하지 못할 수 있습니다. 이를 해결하기 위해 CustomExport 이벤트를 사용하여 수동으로 각 셀의 값을 추출하고 Excel로 내보내야 할 수 있습니다.

다음은 DataTemplate에 TextBox가 포함된 GridControl을 Excel로 내보내는 방법에 대한 전체 예제 코드입니다.

XAML 파일
먼저, DataTemplate과 함께 GridControl을 정의합니다.

xml
Copy code
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="350" Width="525">

    <Grid>
        <dxg:GridControl Name="gridControl">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Column1">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <TextBox Text="{Binding Value1}" />
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
                <!-- 기타 열 추가 -->
            </dxg:GridControl.Columns>
            
            <dxg:GridControl.View>
                <dxg:TableView Name="tableView" CustomExport="TableView_CustomExport"/>
            </dxg:GridControl.View>
        </dxg:GridControl>

        <Button Content="Export to Excel" Click="Button_Click"/>
    </Grid>
</Window>
C# 코드 뒷면
그리고 CustomExport 이벤트와 내보내기 버튼 클릭 이벤트를 처리합니다.

csharp
Copy code
using DevExpress.Xpf.Grid;
using System.Windows;
using System.Windows.Controls;

namespace WpfApp {
    public partial class MainWindow : Window {
        public MainWindow() {
            InitializeComponent();
            gridControl.ItemsSource = /* 데이터 소스 설정 */;
        }

        private void TableView_CustomExport(object sender, CustomExportEventArgs e) {
            var tableView = sender as TableView;
            var sheet = e.ExcelSheet as DevExpress.Export.IExportSheet;

            for (int rowHandle = 0; rowHandle < tableView.Grid.VisibleRowCount; rowHandle++) {
                for (int columnHandle = 0; columnHandle < tableView.Grid.VisibleColumns.Count; columnHandle++) {
                    var cellContent = tableView.Grid.GetCellContent(rowHandle, tableView.Grid.VisibleColumns[columnHandle]);
                    if (cellContent is TextBox textBox) {
                        sheet.SetCellValue(rowHandle + 1, columnHandle, textBox.Text);
                    } else {
                        var cellValue = tableView.Grid.GetCellValue(rowHandle, tableView.Grid.VisibleColumns[columnHandle]);
                        sheet.SetCellValue(rowHandle + 1, columnHandle, cellValue);
                    }
                }
            }
        }

        private void Button_Click(object sender, RoutedEventArgs e) {
            tableView.ExportToXlsx("exportedFile.xlsx");
        }
    }
}
이 코드에서 CustomExport 이벤트는 GridControl의 각 셀을 순회하면서 TextBox 컨트롤을 찾고, 해당 TextBox의 Text 속성 값을 Excel 파일에 기록합니다. 이 예제는 기본적인 구조를 제공하므로, 실제 사용 시에는 데이터 소스 설정, 열 구성, 경로 설정 등을 프로젝트의 요구 사항에 맞게 조정