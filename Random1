니다, 제가 잘못 설명했습니다. 그 예시 코드는 마지막 라인을 찾기 위해 파일의 모든 라인을 읽습니다. 파일이 크다면 이 방식은 비효율적입니다.

파일의 마지막 라인만 읽기 위한 더 효율적인 방법은 파일의 끝에서 시작하여 역순으로 읽는 것입니다. 다음은 이를 구현한 예시 코드입니다.

csharp

using System;
using System.IO;

class Program
{
    static string ReadLastLine(string path)
    {
        byte[] buffer = new byte[1];
        using (FileStream fs = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
        {
            long offset = 1;
            fs.Seek(-offset, SeekOrigin.End);
            while (fs.ReadByte() != '\n' && fs.Position > 2)
            {
                fs.Seek(-++offset, SeekOrigin.End);
            }
            buffer = new byte[offset];
            fs.Read(buffer, 0, buffer.Length);
        }
        return System.Text.Encoding.Default.GetString(buffer).TrimEnd('\r', '\n');
    }

    static void Main()
    {
        string path = @"C:\SmartSP\Log\VisionLog.log";
        string lastLine = ReadLastLine(path);
        Console.WriteLine($"Last Line: {lastLine}");
    }
}

이 코드는 파일의 끝에서부터 시작하여 개행 문자 (\n)를 찾을 때까지 역순으로 읽습니다. 이렇게 하면 마지막 라인만을 효율적으로 읽을 