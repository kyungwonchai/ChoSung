ogService에서 로그를 전송하고, 전송된 로그가 ViewModel의 ObservableCollection에 추가되도록 하려면 몇 가지 단계를 거쳐야 합니다.

LogService에서 로그 전송 시 이벤트를 발생시킵니다.
ViewModel에서 LogService의 이벤트를 구독(subscribe)하여, 로그가 전송될 때 ObservableCollection에 추가되도록 합니다.
이 예시에서는 LogService에서 로그를 전송할 때 이벤트를 사용해 ViewModel의 ObservableCollection에 값을 추가하는 방법을 설명합니다.

1. LogService.cs (로그 전송 및 이벤트 발생)
csharp
코드 복사
using System;

namespace RouterMiddleACRService
{
    public class LogService
    {
        private static LogService _instance;

        public static LogService Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new LogService();
                }
                return _instance;
            }
        }

        // 로그 전송 이벤트
        public event Action<string> LogSent; // 로그가 전송될 때 발생할 이벤트

        private LogService() {}

        // 로그를 전송하는 메서드
        public void LogMessage(string message)
        {
            string logEntry = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            // 로그 전송 로직 (파일에 쓰거나 네트워크로 보내기)
            Console.WriteLine(logEntry); // 예시로 콘솔에 출력

            // 로그가 성공적으로 전송되면 이벤트 발생
            OnLogSent(logEntry);
        }

        // 로그 전송 시 이벤트 호출
        protected virtual void OnLogSent(string logEntry)
        {
            LogSent?.Invoke(logEntry); // 이벤트 구독자가 있을 때만 호출
        }
    }
}
2. MainViewModel.cs (이벤트 구독 및 ObservableCollection에 추가)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public ObservableCollection<string> LogMessages { get; set; } = new ObservableCollection<string>();

        public MainViewModel()
        {
            // LogService의 로그 전송 이벤트를 구독
            LogService.Instance.LogSent += OnLogReceived;
        }

        // LogService로부터 로그가 전송될 때 호출되는 메서드
        private void OnLogReceived(string logMessage)
        {
            // ObservableCollection에 로그 추가
            LogMessages.Add(logMessage);
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
3. MainWindow.xaml (LogMessages 바인딩)
xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <!-- 로그 메시지를 보여줄 ListBox -->
        <ListBox ItemsSource="{Binding LogMessages}" />
    </Grid>
</Window>
4. MainWindow.xaml.cs (DataContext 설정)
csharp
코드 복사
using System.Windows;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // MainViewModel을 DataContext로 설정
            DataContext = new MainViewModel();
        }
    }
}
설명
LogService:

LogSent라는 이벤트가 정의되어 있습니다. 로그를 전송할 때마다 이 이벤트가 발생하여 구독자에게 로그 메시지를 전달합니다.
LogMessage 메서드에서 로그 전송 후 OnLogSent(logEntry)를 호출하여 이벤트가 발생합니다.
MainViewModel:

LogMessages는 ObservableCollection<string>으로 정의되어 있어, UI와 자동으로 동기화됩니다. 새로운 로그가 추가되면 UI에 즉시 반영됩니다.
LogService.Instance.LogSent += OnLogReceived;를 통해 LogService의 이벤트를 구독합니다. 로그가 전송될 때마다 OnLogReceived 메서드가 호출되고, 여기서 LogMessages에 로그 메시지를 추가합니다.
MainWindow.xaml:

ListBox가 LogMessages에 바인딩되어 있어, ObservableCollection에 새로운 로그가 추가될 때마다 자동으로 UI에 표시됩니다.
요약
LogService에서 로그가 전송될 때마다 LogSent 이벤트가 발생하며, 이 이벤트를 ViewModel이 구독합니다.
로그가 전송되면 ObservableCollection에 로그 메시지를 추가하고, 이 ObservableCollection은 UI에 자동으로 바인딩되어 있어 로그가 즉시 화면에 표시됩니다.
이 구조를 통해 LogService에서 발생한 로그를 UI에 실시간으로 반영할 수 있습니다