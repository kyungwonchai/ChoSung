# Python MDB 리더 v4 (기준 테이블 조인 및 CSV 출력)
# 기준 테이블을 중심으로, 다른 모든 테이블의 관련 정보를 찾아 옆에 붙여넣고 CSV 파일로 저장합니다.

import os
import pandas as pd
from pandas_access import read_table, list_tables
import sys
from tqdm import tqdm # 진행률 표시를 위한 라이브러리

# 터미널 및 파일 출력 시 한글 깨짐 방지
sys.stdout.reconfigure(encoding='utf-8')

def create_master_report(mdb_file_path, base_table_name, key_column_name, output_file_path):
    """
    기준 테이블의 각 행에 대해, key column 값을 이용해 다른 모든 테이블에서
    관련 정보를 찾아 'Joined_Info' 컬럼에 추가하고 CSV로 저장합니다.
    """
    if not os.path.exists(mdb_file_path):
        print(f"오류: MDB 파일을 찾을 수 없습니다 -> '{mdb_file_path}'")
        return

    print("1. MDB 파일에서 모든 테이블을 읽어오는 중입니다... (시간이 걸릴 수 있습니다)")
    try:
        all_table_names = list_tables(mdb_file_path)
        if base_table_name not in all_table_names:
            print(f"오류: 기준 테이블 '{base_table_name}'을 MDB 파일에서 찾을 수 없습니다.")
            print(f"사용 가능한 테이블: {all_table_names}")
            return
            
        # 모든 테이블 데이터를 메모리에 로드
        all_data = {tbl: read_table(mdb_file_path, tbl, encoding='cp949') for tbl in tqdm(all_table_names, desc="테이블 로딩")}
        base_df = all_data.pop(base_table_name) # 기준 테이블 분리
        
        if key_column_name not in base_df.columns:
            print(f"오류: 기준 테이블 '{base_table_name}'에 KEY 컬럼 '{key_column_name}'이 없습니다.")
            print(f"사용 가능한 컬럼: {list(base_df.columns)}")
            return

    except Exception as e:
        print(f"MDB 파일 또는 테이블을 읽는 중 심각한 오류 발생: {e}")
        return

    print(f"2. '{base_table_name}' 테이블을 기준으로 정보 취합을 시작합니다...")

    # 각 부품 코드에 대한 관련 정보를 찾는 함수
    def find_related_info(part_code, all_other_data):
        if pd.isna(part_code):
            return ""
            
        part_code_normalized = str(part_code).replace('-', '').strip()
        related_items = set()

        # 다른 모든 테이블을 순회하며 정보 검색
        for table_name, df in all_other_data.items():
            for col_name in df.columns:
                # 문자열로 변환된 컬럼에서 정규화된 부품 코드 검색
                matching_rows = df[df[col_name].astype(str).str.replace('-', '').str.strip() == part_code_normalized]
                
                if not matching_rows.empty:
                    for _, row in matching_rows.iterrows():
                        for item in row.values:
                            s_item = str(item).strip()
                            # 부품 코드 자체, 비어있는 값, 이미 추가된 값은 제외
                            if s_item.replace('-', '').strip() != part_code_normalized and s_item and s_item != 'nan':
                                related_items.add(s_item)
        
        return " | ".join(sorted(list(related_items)))

    # tqdm을 사용하여 진행률 표시
    tqdm.pandas(desc="정보 조인 중")
    # 기준 테이블의 KEY 컬럼에 함수를 적용하여 'Joined_Info' 컬럼 생성
    base_df['Joined_Info'] = base_df[key_column_name].progress_apply(lambda x: find_related_info(x, all_data))

    print(f"3. 결과를 CSV 파일로 저장하는 중입니다...")
    try:
        # 엑셀에서 한글이 깨지지 않도록 'utf-8-sig' 인코딩 사용
        base_df.to_csv(output_file_path, index=False, encoding='utf-8-sig')
        print("\n--- 작업 완료 ---")
        print(f"모든 관련 정보가 조인된 결과가 아래 파일에 저장되었습니다:")
        print(f"-> {os.path.abspath(output_file_path)}")
    except Exception as e:
        print(f"파일 저장 중 오류 발생: {e}")


# --- 메인 실행 부분 ---
if __name__ == "__main__":
    # --- 사용자 설정 영역 ---
    
    # 1. MDB 파일의 전체 경로를 지정하세요.
    mdb_path = "/home/kw/kv122/mdbtest/md/VISION_BGA_PARAM_Det.mdb"

    # 2. [중요] 기준이 될 테이블의 이름을 정확하게 입력하세요.
    # 예: "PartMaster", "VISION_POLYGON_WHOLE_Det" 등
    BASE_TABLE = "VISION_POLYGON_WHOLE_Det"

    # 3. [중요] 기준 테이블에서 부품 코드가 들어있는 컬럼(열)의 이름을 정확하게 입력하세요.
    # 예: "PartCode", "PROFILE" 등
    KEY_COLUMN = "PROFILE"

    # 4. 결과가 저장될 CSV 파일의 경로와 이름을 지정하세요.
    output_csv_path = f"./{BASE_TABLE}_master_report.csv"
    
    # --- 설정 끝 ---

    # tqdm 라이브러리가 없으면 설치 안내
    try:
        from tqdm import tqdm
    except ImportError:
        print("오류: 'tqdm' 라이브러리가 필요합니다. 'pip install tqdm' 명령으로 설치해주세요.")
        sys.exit(1)

    # 함수를 실행합니다.
    create_master_report(mdb_path, BASE_TABLE, KEY_COLUMN, output_csv_path)

