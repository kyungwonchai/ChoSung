1. MainWindow.xaml.cs (윈도우 닫힐 때 이벤트 처리)
csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            // 윈도우 닫힐 때 이벤트 등록
            this.Closing += MainWindow_Closing;
        }

        // 윈도우 닫힐 때 뷰모델의 종료 함수 호출
        private void MainWindow_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            _viewModel.Cleanup();  // 뷰모델의 자원 해제 함수 호출
        }
    }
}
2. MainViewModel.cs (자원 해제 코드 추가)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Net;
using System.Net.Sockets;
using System.Windows.Input;

namespace WpfApp
{
    public class MainViewModel : ViewModelBase
    {
        private ComportManager comportManager1;
        private ComportManager comportManager2;
        private SocketServer socketServer;
        public ObservableCollection<string> LogMessages { get; set; }

        public ICommand OpenPortCommand { get; }
        public ICommand ClosePortCommand { get; }
        public ICommand StartSocketServerCommand { get; }

        public MainViewModel()
        {
            LogMessages = new ObservableCollection<string>();
            comportManager1 = ComportManager.GetInstance();
            comportManager2 = ComportManager.GetInstance();
            FileWatcherService fileWatcher = new FileWatcherService();

            // 명령 초기화
            OpenPortCommand = new RelayCommand(OpenPorts);
            ClosePortCommand = new RelayCommand(ClosePorts);
            StartSocketServerCommand = new RelayCommand(StartSocketServer);

            fileWatcher.StartWatching(@"C:\Logs");
        }

        // 포트 열기
        private void OpenPorts()
        {
            comportManager1.OpenPort("COM1", 9600);
            comportManager2.OpenPort("COM2", 9600);
            LogMessages.Add("포트가 열렸습니다.");
        }

        // 포트 닫기
        private void ClosePorts()
        {
            comportManager1.ClosePort();
            comportManager2.ClosePort();
            LogMessages.Add("포트가 닫혔습니다.");
        }

        // 소켓 서버 시작
        private void StartSocketServer()
        {
            socketServer = new SocketServer();
            socketServer.Start();
            LogMessages.Add("소켓 서버가 시작되었습니다.");
        }

        // 모든 자원 해제
        public void Cleanup()
        {
            // COM 포트 닫기
            comportManager1.ClosePort();
            comportManager2.ClosePort();

            // 소켓 서버 종료
            if (socketServer != null)
            {
                socketServer.Stop();
                LogMessages.Add("소켓 서버가 종료되었습니다.");
            }

            // 추가적인 자원 해제 작업
            LogMessages.Add("모든 자원이 해제되었습니다.");
        }
    }
}
3. SocketServer.cs (소켓 서버 종료 함수 추가)
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace WpfApp
{
    public class SocketServer
    {
        private TcpListener listener;

        public void Start()
        {
            listener = new TcpListener(IPAddress.Any, 5000);
            listener.Start();
            listener.BeginAcceptTcpClient(AcceptCallback, null);
        }

        public void Stop()
        {
            listener?.Stop();  // 소켓 서버 종료
        }

        private void AcceptCallback(IAsyncResult ar)
        {
            TcpClient client = listener.EndAcceptTcpClient(ar);
            NetworkStream stream = client.GetStream();
            byte[] buffer = new byte[client.ReceiveBufferSize];
            stream.Read(buffer, 0, buffer.Length);

            string message = Encoding.ASCII.GetString(buffer);
            Console.WriteLine("Received: " + message);
            stream.Close();
            client.Close();
            listener.BeginAcceptTcpClient(AcceptCallback, null);  // 다시 대기
        }
    }
}
설명
MainWindow.xaml.cs에서 Closing 이벤트 처리:

MainWindow가 닫힐 때 Closing 이벤트가 발생합니다. 이때, MainWindow_Closing 메서드를 통해 MainViewModel의 Cleanup() 메서드를 호출하여 자원을 해제합니다.
MainViewModel.Cleanup():

이 메서드는 COM 포트를 닫고, 소켓 서버를 종료하며, 필요한 자원을 모두 해제하는 역할을 합니다.
포트 닫기: ComportManager 인스턴스를 사용해 열려 있던 포트를 닫습니다.
소켓 서버 종료: 소켓 서버가 실행 중이라면 이를 종료하는 코드를 추가합니다.
SocketServer.Stop():

소켓 서버를 종료할 때는 TcpListener의 Stop() 메서드를 호출하여 연결을 중단합니다.
이 코드를 사용하면 윈도우가 닫힐 때 뷰모델의 자원을 안전하게 해제할 수 있습니다. Cleanup() 메서드는 모든 자원 해제를 한 곳에서 처리하도록 설계되었습니다