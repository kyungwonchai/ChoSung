import os

# --- 설정 값 ---
# 안드로이드 프로젝트의 패키지 이름을 정확하게 입력해주세요.
# 예: com.example.mypdfviewer
PACKAGE_NAME = "com.example.mypdfviewer"
# --- 설정 끝 ---

# 패키지 이름을 폴더 경로로 변환
package_path = os.path.join('app', 'src', 'main', 'java', *PACKAGE_NAME.split('.'))

# 1. build.gradle.kts (Module :app) 파일 내용
# Kotlin DSL(.kts) 문법에 맞게 수정되었습니다.
build_gradle_content = """
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "{package_name}"
    compileSdk = 34

    defaultConfig {
        applicationId = "{package_name}"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    // 뷰 바인딩 활성화
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    // PDF 뷰어 라이브러리
    implementation("com.github.barteksc:android-pdf-viewer:3.2.0-beta.1")

    // 네트워크 공유 폴더(SMB) 접근을 위한 라이브러리
    implementation("org.smbj:jcifs-ng:2.1.10")

    // 코틀린 코루틴 (비동기 네트워크 작업을 위함)
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
}
""".replace("{package_name}", PACKAGE_NAME)

# 2. AndroidManifest.xml 파일 내용 (이전과 동일)
manifest_content = """
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <!-- 인터넷 및 네트워크 상태 접근 권한 추가 -->
    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.MyPdfViewer"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
"""

# 3. activity_main.xml (레이아웃) 파일 내용 (이전과 동일)
layout_content = """
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <!-- 상단 버튼 영역 (항상 보이도록 고정) -->
    <HorizontalScrollView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#F0F0F0"
        android:scrollbars="none">

        <LinearLayout
            android:id="@+id/pageButtonContainer"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:orientation="horizontal"
            android:paddingStart="8dp"
            android:paddingEnd="8dp"/>
    </HorizontalScrollView>

    <!-- 로딩 중 표시될 프로그레스 바 -->
    <ProgressBar
        android:id="@+id/progressBar"
        style="?android:attr/progressBarStyle"
        android:layout_width="wrap_content"
        android:layout_height="0dp"
        android:layout_gravity="center"
        android:layout_weight="1"
        android:visibility="gone" />

    <!-- PDF를 표시할 뷰 -->
    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"/>

</LinearLayout>
"""

# 4. MainActivity.kt 파일 내용 (이전과 동일, 패키지명만 수정)
main_activity_content = """
package {package_name}

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.util.FitPolicy
import {package_name}.databinding.ActivityMainBinding
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream

class MainActivity : AppCompatActivity() {

    // 뷰 바인딩을 위한 변수 선언
    private lateinit var binding: ActivityMainBinding

    // --- 공유 폴더 설정 (중요: 이 부분을 실제 환경에 맞게 수정하세요) ---
    private val smbDomain = "" // 도메인 (없으면 비워두세요)
    private val smbUsername = "Your_Username" // 공유 폴더 접속 아이디
    private val smbPassword = "Your_Password" // 공유 폴더 접속 비밀번호
    private val smbIpAddress = "192.168.0.100" // 공유 폴더 서버의 IP 주소
    private val sharedFolderName = "SharedDocs" // 공유 폴더 이름
    private val pdfFileName = "document.pdf" // 열고자 하는 PDF 파일 이름
    // --- 설정 끝 ---

    // 총 페이지(버튼) 수
    private val totalPageCount = 16

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        // 뷰 바인딩 초기화
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // 페이지 이동 버튼 생성
        createPageNavigationButtons()

        // 공유 폴더에서 PDF 파일 로드 시작
        loadPdfFromSharedFolder()
    }

    /**
     * 공유 폴더에서 PDF 파일을 비동기적으로 로드합니다.
     */
    private fun loadPdfFromSharedFolder() {
        binding.progressBar.visibility = View.VISIBLE
        binding.pdfView.visibility = View.GONE

        // 코루틴을 사용하여 백그라운드에서 네트워크 작업 수행
        lifecycleScope.launch {
            val localFile = downloadSmbFile()
            if (localFile != null) {
                displayPdfFromFile(localFile)
            } else {
                binding.progressBar.visibility = View.GONE
                Toast.makeText(this@MainActivity, "PDF 파일을 불러오는데 실패했습니다.", Toast.LENGTH_LONG).show()
            }
        }
    }

    /**
     * SMB/CIFS 프로토콜을 사용하여 공유 폴더의 파일을 앱 내부 저장소로 다운로드합니다.
     * @return 다운로드 성공 시 File 객체, 실패 시 null
     */
    private suspend fun downloadSmbFile(): File? = withContext(Dispatchers.IO) {
        try {
            // smb://{IP주소}/{공유폴더명}/{파일명} 형식의 경로 생성
            val smbUrl = "smb://$smbIpAddress/$sharedFolderName/$pdfFileName"

            // 인증 정보 생성
            val auth = NtlmPasswordAuthenticator(smbDomain, smbUsername, smbPassword)

            // SmbFile 객체 생성
            val smbFile = SmbFile(smbUrl, auth)

            // 앱 내부 캐시 디렉토리에 임시 파일 생성
            val localFile = File(cacheDir, pdfFileName)
            
            // 파일 복사 (다운로드)
            smbFile.inputStream.use { input ->
                FileOutputStream(localFile).use { output ->
                    input.copyTo(output)
                }
            }
            Log.d("SmbTest", "파일 다운로드 성공: ${"$"}{localFile.path}")
            return@withContext localFile

        } catch (e: Exception) {
            Log.e("SmbTest", "SMB 파일 접근 오류", e)
            // UI 스레드에서 Toast 메시지 표시
            withContext(Dispatchers.Main) {
                Toast.makeText(applicationContext, "오류: ${"$"}{e.message}", Toast.LENGTH_LONG).show()
            }
            return@withContext null
        }
    }

    /**
     * 로컬 파일 경로의 PDF를 화면에 표시합니다.
     * @param file 표시할 PDF 파일 객체
     */
    private fun displayPdfFromFile(file: File) {
        binding.progressBar.visibility = View.GONE
        binding.pdfView.visibility = View.VISIBLE

        binding.pdfView.fromFile(file)
            .enableSwipe(true) // 스와이프로 페이지 넘기기 활성화
            .swipeHorizontal(false) // 수직 스크롤
            .enableDoubletap(true) // 더블탭으로 확대/축소 활성화
            .defaultPage(0) // 초기 페이지 설정 (0부터 시작)
            .pageFitPolicy(FitPolicy.WIDTH) // 페이지를 화면 너비에 맞춤
            .load()
    }

    /**
     * 상단에 16개의 페이지 이동 버튼을 동적으로 생성하고 클릭 이벤트를 설정합니다.
     */
    private fun createPageNavigationButtons() {
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    // 페이지 번호는 0부터 시작하므로 (i - 1)로 전달
                    binding.pdfView.jumpTo(i - 1, true)
                }
            }
            // 생성된 버튼을 컨테이너에 추가
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}
""".replace("{package_name}", PACKAGE_NAME)

# 파일 생성 및 쓰기 함수
def write_file(path, content):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"✅ 파일 생성 완료: {path}")

# --- 스크립트 실행 ---
print("🚀 안드로이드 프로젝트 파일 생성을 시작합니다... (KTS 버전)")

# 파일 경로 정의
build_gradle_path = os.path.join('app', 'build.gradle.kts') # .kts로 변경
manifest_path = os.path.join('app', 'src', 'main', 'AndroidManifest.xml')
layout_path = os.path.join('app', 'src', 'main', 'res', 'layout', 'activity_main.xml')
main_activity_path = os.path.join(package_path, 'MainActivity.kt')

# 파일 생성
write_file(build_gradle_path, build_gradle_content)
write_file(manifest_path, manifest_content)
write_file(layout_path, layout_content)
write_file(main_activity_path, main_activity_content)

print("\n🎉 모든 파일이 성공적으로 생성(덮어쓰기)되었습니다!")
print("   - 안드로이드 스튜디오 우측 상단의 코끼리 모양 아이콘(Sync Project with Gradle Files)을 눌러 라이브러리를 설치해주세요.")
print("   - MainActivity.kt 파일의 공유 폴더 설정 부분을 실제 환경에 맞게 꼭 수정해주세요.")