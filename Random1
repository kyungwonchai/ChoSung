using UnityEngine;
using UnityEditor;

public class RackLayoutGenerator
{
    // --- 여기서 배치 설정을 수정하세요 ---
    private static readonly int RACK_COUNT_PER_ROW = 12;      // 한 줄(세트)에 배치될 랙의 개수
    private static readonly float RACK_GAP = 0.01f;           // 랙과 랙 사이의 미세한 간격
    private static readonly float AISLE_WIDTH = 4.0f;         // 두 줄의 랙 세트 사이의 복도 넓이
    // ------------------------------------

    [MenuItem("Tools/SMD Rack/Generate Final Layout")]
    private static void GenerateLayout()
    {
        // 1. Project 창에서 선택한 프리팹을 가져옴
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        // 2. 랙들을 담을 부모 오브젝트를 찾거나 생성 (기존 내용 삭제)
        string parentName = "Rack_Installations";
        GameObject parentObject = GameObject.Find(parentName);
        if (parentObject == null)
        {
            parentObject = new GameObject(parentName);
        }
        else 
        {
            for (int i = parentObject.transform.childCount - 1; i >= 0; i--)
            {
                GameObject.DestroyImmediate(parentObject.transform.GetChild(i).gameObject);
            }
        }
        
        // 3. 프리팹의 가로 길이(너비) 자동 계산
        Bounds totalBounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if(renderers.Length > 0)
        {
            totalBounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers)
            {
                totalBounds.Encapsulate(renderer.bounds);
            }
        }
        float rackWidth = totalBounds.size.x;

        // 4. 두 줄의 랙 세트 생성
        // 첫 번째 줄 (A열) 생성
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
            
            // 이름 설정 (예: A_01, A_12)
            rackInstance.name = $"A_{i + 1:02d}";

            // 위치 설정
            float posX = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(posX, 0, 0);
            rackInstance.transform.rotation = Quaternion.identity; // 기본 방향
        }
        
        // 두 번째 줄 (B열, 마주보는 줄) 생성
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
            
            // 이름 설정 (예: B_01, B_12)
            rackInstance.name = $"B_{i + 1:02d}";

            // 위치 및 회전 설정
            float posX = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(posX, 0, AISLE_WIDTH);
            rackInstance.transform.rotation = Quaternion.Euler(0, 180, 0); // 180도 회전하여 마주보기
        }

        EditorUtility.DisplayDialog("완료", "12개 랙 2세트가 마주보도록 배치되었습니다.", "확인");
    }
}