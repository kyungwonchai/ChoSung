// templates/edit_post.html 내의 tinymce.init({...}) 안쪽
images_upload_handler: function (blobInfo, progress) { // progress 콜백 추가
    return new Promise((resolve, reject) => {
        const image_size_mb = blobInfo.blob().size / 1024 / 1024; // 파일 크기를 MB 단위로 변환
        const max_size_mb = 10; // 예시: 클라이언트 측 최대 허용 파일 크기 10MB (서버 제한보다 작거나 같게)

        if (image_size_mb > max_size_mb) {
            reject({ 
                message: '이미지 용량이 너무 큽니다 (' + image_size_mb.toFixed(1) + 'MB). 최대 허용 용량은 ' + max_size_mb + 'MB 입니다.', 
                remove: true // 편집기에서 이미지 미리보기 제거
            });
            return;
        }

        // 파일 크기가 유효한 경우, 실제 업로드 로직 수행
        const xhr = new XMLHttpRequest();
        xhr.withCredentials = false; // 로컬 환경이므로 false 유지
        xhr.open('POST', "{{ url_for('upload_image') }}"); // 기존 Flask 업로드 엔드포인트

        xhr.upload.onprogress = (e) => { // progress 콜백 사용
            if (e.lengthComputable) {
                progress(e.loaded / e.total * 100);
            }
        };

        xhr.onload = () => {
            if (xhr.status < 200 || xhr.status >= 300) {
                // 서버에서 413 등의 오류가 발생하면 여기서 처리됨
                let errorMessage = 'HTTP Error: ' + xhr.status;
                try {
                    const jsonError = JSON.parse(xhr.responseText);
                    if (jsonError && jsonError.error && jsonError.error.message) {
                        errorMessage = jsonError.error.message;
                    }
                } catch (e) {
                    // JSON 파싱 실패 시 (예: HTML 오류 페이지 반환)
                    if (xhr.status === 413) {
                         errorMessage = '파일이 너무 큽니다. 서버에서 요청을 거부했습니다.';
                    } else if (xhr.responseText && xhr.responseText.length < 200) { // 짧은 텍스트 오류 메시지일 경우
                        errorMessage = xhr.responseText;
                    }
                }
                reject({ message: errorMessage, remove: true });
                return;
            }
            try {
                const json = JSON.parse(xhr.responseText);
                if (!json || typeof json.location != 'string') {
                    reject({ message: '잘못된 JSON 응답입니다: ' + xhr.responseText, remove: true });
                    return;
                }
                resolve(json.location); // 성공 시 이미지 경로 반환
            } catch (e) {
                reject({ message: '서버 응답 처리 중 오류 발생: ' + e.message, remove: true });
            }
        };

        xhr.onerror = () => {
            reject({ message: '네트워크 오류로 이미지 업로드에 실패했습니다.', remove: true });
        };

        const formData = new FormData();
        formData.append('file', blobInfo.blob(), blobInfo.filename());

        xhr.send(formData);
    });
}