tep-by-Step Guide for Your Requirements in WPF C#
1. Add an Image in WPF:
Open Visual Studio.
Add an image to the project:
Right-click on the project in Solution Explorer.
Select Add → New Folder and name it "Images".
Right-click the Images folder, choose Add → Existing Item, and browse to your image file.
Set the Build Action for the image to Resource.
In your XAML file, add an Image control to display the image:
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <Image Source="Images/yourimage.png" Width="100" Height="100" />
    </Grid>
</Window>
Replace "Images/yourimage.png" with the path of your actual image.
2. Prevent Multiple Instances of the Application:
Use a Mutex to ensure that only one instance of the application runs:

csharp
코드 복사
using System;
using System.Threading;
using System.Windows;

namespace WpfApp
{
    public partial class App : Application
    {
        private static Mutex _mutex = null;

        protected override void OnStartup(StartupEventArgs e)
        {
            const string appName = "WpfApp";
            bool createdNew;

            _mutex = new Mutex(true, appName, out createdNew);

            if (!createdNew)
            {
                // If the mutex already exists, close the new instance
                Application.Current.Shutdown();
                return;
            }

            base.OnStartup(e);
        }
    }
}
This code checks if another instance is already running. If it is, it shuts down the new instance.

3. Minimize to System Tray on Close:
Implement system tray functionality by using NotifyIcon. Add System.Windows.Forms as a reference:

Right-click the project → Add → Reference → search for and add System.Windows.Forms.
In your MainWindow.xaml.cs file:

csharp
코드 복사
using System.Windows;
using System.Windows.Forms;
using System.Drawing;
using Application = System.Windows.Application;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private NotifyIcon _notifyIcon;

        public MainWindow()
        {
            InitializeComponent();
            SetupTrayIcon();
        }

        private void SetupTrayIcon()
        {
            _notifyIcon = new NotifyIcon();
            _notifyIcon.Icon = new Icon("Images/youricon.ico"); // Add your icon file here
            _notifyIcon.Visible = true;
            _notifyIcon.DoubleClick += NotifyIcon_DoubleClick;

            // Add a context menu for the tray icon
            var contextMenu = new System.Windows.Forms.ContextMenu();
            var exitMenuItem = new MenuItem("Exit", Exit_Click);
            contextMenu.MenuItems.Add(exitMenuItem);

            _notifyIcon.ContextMenu = contextMenu;
        }

        private void NotifyIcon_DoubleClick(object sender, EventArgs e)
        {
            // Restore the window when the tray icon is double-clicked
            this.Show();
            this.WindowState = WindowState.Normal;
        }

        private void Exit_Click(object sender, EventArgs e)
        {
            // Close the application when "Exit" is clicked in the tray menu
            _notifyIcon.Visible = false;
            Application.Current.Shutdown();
        }

        protected override void OnStateChanged(EventArgs e)
        {
            if (WindowState == WindowState.Minimized)
            {
                this.Hide(); // Hide the window when minimized
                _notifyIcon.ShowBalloonTip(1000, "App Minimized", "The application has been minimized to the system tray.", ToolTipIcon.Info);
            }

            base.OnStateChanged(e);
        }

        protected override void OnClosing(System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true; // Cancel the default close action
            this.Hide();     // Minimize to tray instead
        }
    }
}
Ensure you have an icon file (youricon.ico) in the project folder to represent your app in the system tray.
The tray icon will have a right-click context menu with an "Exit" option, and the app will minimize to the tray when closed or minimized.
4. Restore the Window on Double-Click:
In the NotifyIcon_DoubleClick event, we already have the functionality to restore the window when the tray icon is double-clicked:
csharp
코드 복사
private void NotifyIcon_DoubleClick(object sender, EventArgs e)
{
    this.Show();
    this.WindowState = WindowState.Normal;
}
Summary:
Image: Added via XAML using the <Image> tag.
Single Instance: Ensured using a Mutex.
System Tray: Implemented with a NotifyIcon, which minimizes to the tray on close, shows a context menu, and allows restoring the window on double-click.
Exit from Tray: Handled through the tray context menu with an "Exit" option.
This setup gives you a detailed WPF implementation with an image display, single-instance prevention, and full system tray contro