private void LoadFromClipboard(object sender, RoutedEventArgs e)
{
    try
    {
        _items.Clear();
        qrCodePanel.ItemsSource = null;

        // 클립보드에서 데이터 가져오기
        string clipboardText = Clipboard.GetText();
        if (!string.IsNullOrEmpty(clipboardText))
        {
            var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
            int no = 1;
            foreach (var line in lines)
            {
                if (line.Length == 22 && IsAlphanumeric(line) && !_items.Exists(item => item.Magazine == line))
                {
                    _items.Add(new Item { No = no++, Magazine = line });
                }
            }
            gridControl.ItemsSource = _items;
            GenerateQRCodes();
        }
        else
        {
            MessageBox.Show("클립보드에 데이터가 없습니다.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Clipboard loading error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void GenerateQRCodes()
{
    try
    {
        var qrCodeList = new List<UIElement>();
        double qrCodeWidth = sizeSlider.Value;
        double qrCodeHeight = sizeSlider.Value;
        double spacing = spacingSlider.Value;

        foreach (var item in _items)
        {
            try
            {
                var qrCode = GenerateQRCode(item.Magazine);
                var image = new System.Windows.Controls.Image
                {
                    Source = BitmapToImageSource(qrCode),
                    Width = qrCodeWidth,
                    Height = qrCodeHeight,
                    Margin = new Thickness(spacing)
                };

                var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };
                
                // QR 코드 아래 텍스트를 2줄로 표시
                var textBlock = new TextBlock
                {
                    Text = item.Magazine,
                    Foreground = System.Windows.Media.Brushes.Blue,
                    TextWrapping = TextWrapping.Wrap,
                    HorizontalAlignment = HorizontalAlignment.Center,
                    MaxWidth = qrCodeWidth // 텍스트가 QR 코드 너비를 넘지 않도록 설정
                };

                stackPanel.Children.Add(image);
                stackPanel.Children.Add(textBlock);

                image.MouseLeftButtonDown += (s, e) =>
                {
                    DeselectAllRows();
                    int index = _items.IndexOf(item);
                    tableView.FocusedRowHandle = index;
                    gridControl.View.FocusedRowHandle = index;
                    HighlightQRCode(item.Magazine);
                };

                qrCodeList.Add(stackPanel);
                _qrCodePanels[item.Magazine] = stackPanel;
            }
            catch (Exception ex)
            {
                MessageBox.Show($"QR Code generation error for item '{item.Magazine}': {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        qrCodePanel.ItemsSource = qrCodeList;
    }
    catch (Exception ex)
    {
        MessageBox.Show($"QR Code generation error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private Bitmap GenerateQRCode(string text)
{
    try
    {
        BarcodeWriter writer = new BarcodeWriter
        {
            Format = BarcodeFormat.QR_CODE,
            Options = new ZXing.Common.EncodingOptions
            {
                Height = 200,
                Width = 200
            }
        };
        return writer.Write(text);
    }
    catch (Exception ex)
    {
        throw new Exception($"Error generating QR Code: {ex.Message}");
    }
}

private BitmapImage BitmapToImageSource(Bitmap bitmap)
{
    try
    {
        using (var memory = new System.IO.MemoryStream())
        {
            bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
            memory.Position = 0;
            var bitmapImage = new BitmapImage();
            bitmapImage.BeginInit();
            bitmapImage.StreamSource = memory;
            bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
            bitmapImage.EndInit();
            return bitmapImage;
        }
    }
    catch (Exception ex)
    {
        throw new Exception($"Error converting Bitmap to ImageSource: {ex.Message}");
    }
}

private bool IsAlphanumeric(string str)
{
    foreach (char c in str)
    {
        if (!char.IsLetterOrDigit(c))
        {
            return false;
        }
    }
    return true;
}

private void DeselectAllRows()
{
    try
    {
        for (int i = 0; i < gridControl.VisibleRowCount; i++)
        {
            int rowHandle = gridControl.GetRowHandleByVisibleIndex(i);
            tableView.UnselectRow(rowHandle);
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error deselecting rows: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
    }
}

private void HighlightQRCode(string magazine)
{
    foreach (var key in _qrCodePanels.Keys)
    {
        _qrCodePanels[key].Background = System.Windows.Media.Brushes.Transparent;
    }
    if (_qrCodePanels.ContainsKey(magazine))
    {
        _qrCodePanels[magazine].Background = System.Windows.Media.Brushes.Yellow;
    }
}

private void TableView_SelectionChanged(object sender, GridSelectionChangedEventArgs e)
{
    if (gridControl.SelectedItem is Item selectedItem)
    {
        HighlightQRCode(selectedItem.Magazine);
        ScrollToQRCode(selectedItem.Magazine);
    }
}

private void ScrollToQRCode(string magazine)
{
    if (_qrCodePanels.ContainsKey(magazine))
    {
        var stackPanel = _qrCodePanels[magazine];
        stackPanel.BringIntoView();
    }
}
