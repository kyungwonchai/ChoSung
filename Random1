using System;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using Microsoft.Web.WebView2.Core;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private int retryCount = 0; // 재시도 횟수

        public MainWindow()
        {
            InitializeComponent();
            MyWebView.Source = new Uri("https://www.example.com"); // 사용할 URL로 변경
        }

        // 버튼 클릭 시 호출되는 이벤트 핸들러
        private async void ReadTextAreaButton_Click(object sender, RoutedEventArgs e)
        {
            retryCount = 0; // 재시도 횟수 초기화
            await TryReadTextAreaAsync(); // 비동기 함수 호출
        }

        // 텍스트를 읽어오고, 조건에 따라 재시도하는 비동기 함수
        private async Task TryReadTextAreaAsync()
        {
            // JavaScript 코드로 textarea의 내용을 읽어오기
            string script = @"
                (function() {
                    let container = document.querySelector('div.Box-sc-g0xbh4-0.iJOeCH');
                    if (container) {
                        let textArea = container.querySelector('#read-only-cursor-text-area');
                        return textArea ? btoa(unescape(encodeURIComponent(textArea.value))) : '';
                    }
                    return '';
                })();";

            // JavaScript 코드 실행 및 Base64로 인코딩된 결과 가져오기
            string result = await MyWebView.ExecuteScriptAsync(script);
            result = result.Trim('"'); // 큰따옴표 제거

            try
            {
                byte[] data = Convert.FromBase64String(result);
                string decodedText = Encoding.UTF8.GetString(data); // 원본 텍스트로 변환

                // 조건 검사: 빈 값이거나, 에러가 발생하거나, 길이가 5 이하일 때 재시도
                if (string.IsNullOrEmpty(decodedText) || decodedText.Length <= 5)
                {
                    retryCount++;
                    if (retryCount < 5)
                    {
                        await Task.Delay(2000); // 2초 대기 후 재시도
                        await TryReadTextAreaAsync(); // 재귀 호출
                    }
                    else
                    {
                        MessageBox.Show("5회 시도에도 값을 읽어오지 못했습니다.", "오류");
                    }
                }
                else
                {
                    // 성공 시 클립보드에 복사하고 OK 메시지
                    Clipboard.SetText(decodedText);
                    MessageBox.Show("텍스트가 클립보드에 복사되었습니다. OK", "복사 완료");
                }
            }
            catch
            {
                // Base64 디코딩 실패 시 재시도
                retryCount++;
                if (retryCount < 5)
                {
                    await Task.Delay(2000); // 2초 대기 후 재시도
                    await TryReadTextAreaAsync();
                }
                else
                {
                    MessageBox.Show("5회 시도에도 값을 읽어오지 못했습니다.", "오류");
                }
            }
        }
    }
}
