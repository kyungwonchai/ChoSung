import subprocess
import getpass
import os
import logging
import platform
from datetime import datetime

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================
# 1. 500대 라즈베리파이의 IP 주소 목록
HOSTS = [
    '192.168.1.101',
    '192.168.1.102',
    # ... 500개 IP 주소 추가 ...
]
# 2. 라즈베리파이 접속 유저 이름
SSH_USER = 'pi'
# 3. 중앙 컴퓨터의 SSH 공개키 파일 경로
PUBLIC_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa.pub')
# 4. 로그 파일 이름
LOG_FILE = 'deployment_log.txt'
# ===================================================================

def setup_logging():
    """파일 및 콘솔 로깅을 설정하는 함수"""
    logger = logging.getLogger('DeploymentLogger')
    logger.setLevel(logging.INFO)
    
    # 파일 핸들러 설정 (로그 파일에 기록)
    file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
    file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
    
    # 스트림 핸들러 설정 (콘솔에 출력)
    stream_handler = logging.StreamHandler()
    stream_handler.setFormatter(logging.Formatter('%(message)s'))
    
    # 핸들러 추가 (중복 추가 방지)
    if not logger.handlers:
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
        
    return logger

def is_host_reachable(hostname, logger):
    """Ping을 통해 호스트가 응답하는지 확인하는 함수"""
    logger.info(f"[{hostname}] Ping 테스트 시작...")
    
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-w', '2', hostname] # 2초 타임아웃
    
    try:
        response = subprocess.run(command, capture_output=True, check=False)
        if response.returncode == 0:
            logger.info(f"[{hostname}] Ping 성공. 장비가 온라인 상태입니다.")
            return True
        else:
            logger.warning(f"[{hostname}] Ping 실패. 장비를 건너뜁니다.")
            return False
    except FileNotFoundError:
        logger.error("[오류] 'ping' 명령어를 찾을 수 없습니다. 시스템에 설치되어 있는지 확인하세요.")
        return False

def copy_key_to_host(hostname, user, password, logger):
    """단일 호스트에 SSH 공개키를 복사하는 함수"""
    logger.info(f"[{hostname}] SSH 키 복사 시작...")
    command = [
        'sshpass', '-p', password, 'ssh-copy-id',
        '-o', 'StrictHostKeyChecking=no',
        '-o', 'ConnectTimeout=10',
        f'{user}@{hostname}'
    ]
    try:
        subprocess.run(command, check=True, capture_output=True, text=True, encoding='utf-8')
        logger.info(f"[{hostname}] SSH 키 복사 성공.")
    except Exception as e:
        logger.error(f"[{hostname}] SSH 키 복사 실패. 오류: {e}")

if __name__ == '__main__':
    logger = setup_logging()
    
    # 사전 요구사항 확인
    # ... (생략, 필요 시 추가) ...

    logger.info("\n" + "="*20 + " SSH 키 자동 복사 작업 시작 " + "="*20)
    
    try:
        pi_password = getpass.getpass(f"모든 라즈베리파이({SSH_USER})의 비밀번호를 입력하세요: ")
    except Exception as e:
        logger.critical(f"비밀번호 입력 중 오류 발생: {e}")
        exit(1)

    for host in HOSTS:
        if is_host_reachable(host, logger):
            copy_key_to_host(host, SSH_USER, pi_password, logger)
    
    logger.info("="*20 + " SSH 키 자동 복사 작업 완료 " + "="*20 + "\n")
```

---

### 2단계: (업그레이드) 워치독 배포 스크립트 with Ping & Logging

SSH 키 복사가 완료된 후, 이 스크립트를 사용하여 워치독 서비스를 배포합니다. 이 스크립트 역시 Ping 테스트를 먼저 수행하며, 모든 작업 내역을 위와 동일한 `deployment_log.txt` 파일에 이어서 기록합니다.


```python
import paramiko
import time
import os
import logging
import platform
import subprocess
from datetime import datetime

# ===================================================================
# ==                 ★★★★★ 설정 (사용자 수정 영역) ★★★★★                 ==
# ===================================================================
HOSTS = ['192.168.1.101', '192.168.1.102',] # 키 복사 스크립트와 동일한 목록
SSH_USER = 'pi'
SSH_KEY_FILE = os.path.expanduser('~/.ssh/id_rsa')
PM2_APP_NAME = 'main'
LOG_FILE = 'deployment_log.txt'

# --- systemd 서비스 파일 내용 정의 ---
PYTHON_EXEC_PATH = '/usr/bin/python3'
APP_WORKING_DIR = '/home/pi/my_project'
APP_SCRIPT_PATH = '/home/pi/my_project/main.py'
APP_ARGS = '--mode production --port 8080'
SERVICE_FILE_NAME = 'myapp.service'
SERVICE_FILE_CONTENT = f"""[Unit]
Description=My Python Application with Watchdog
After=network.target
[Service]
ExecStart={PYTHON_EXEC_PATH} {APP_SCRIPT_PATH} {APP_ARGS}
WorkingDirectory={APP_WORKING_DIR}
StandardOutput=inherit
StandardError=inherit
Restart=always
User={SSH_USER}
WatchdogSec=60
[Install]
WantedBy=multi-user.target
"""
# ===================================================================

def setup_logging():
    """파일 및 콘솔 로깅을 설정하는 함수 (위 스크립트와 동일)"""
    logger = logging.getLogger('DeploymentLogger')
    logger.setLevel(logging.INFO)
    if not logger.handlers:
        file_handler = logging.FileHandler(LOG_FILE, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter('%(asctime)s - %(message)s'))
        stream_handler = logging.StreamHandler()
        stream_handler.setFormatter(logging.Formatter('%(message)s'))
        logger.addHandler(file_handler)
        logger.addHandler(stream_handler)
    return logger

def is_host_reachable(hostname, logger):
    """Ping을 통해 호스트가 응답하는지 확인하는 함수 (위 스크립트와 동일)"""
    logger.info(f"[{hostname}] Ping 테스트 시작...")
    param = '-n' if platform.system().lower() == 'windows' else '-c'
    command = ['ping', param, '1', '-w', '2', hostname]
    try:
        response = subprocess.run(command, capture_output=True, check=False)
        if response.returncode == 0:
            logger.info(f"[{hostname}] Ping 성공. 장비가 온라인 상태입니다.")
            return True
        else:
            logger.warning(f"[{hostname}] Ping 실패. 장비를 건너뜁니다.")
            return False
    except FileNotFoundError:
        logger.error("[오류] 'ping' 명령어를 찾을 수 없습니다.")
        return False

def deploy_to_host(hostname, logger):
    """단일 호스트에 워치독 서비스를 배포하는 함수"""
    logger.info(f"[{hostname}] 워치독 배포 작업 시작...")
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        client.connect(hostname, username=SSH_USER, key_filename=SSH_KEY_FILE, timeout=10)
        
        # PM2 비활성화
        pm2_path = client.exec_command("which pm2")[1].read().decode().strip()
        if not pm2_path: pm2_path = 'pm2' # 경로 못찾을 시 기본값
        client.exec_command(f"sudo {pm2_path} unstartup")
        client.exec_command(f"{pm2_path} stop {PM2_APP_NAME}")
        
        # 서비스 파일 생성
        client.exec_command(f"echo '{SERVICE_FILE_CONTENT}' | sudo tee /etc/systemd/system/{SERVICE_FILE_NAME}")
        
        # 서비스 활성화
        client.exec_command("sudo systemctl daemon-reload")
        client.exec_command(f"sudo systemctl enable {SERVICE_FILE_NAME}")
        client.exec_command(f"sudo systemctl restart {SERVICE_FILE_NAME}")
        
        logger.info(f"[{hostname}] 워치독 배포 성공.")
    except Exception as e:
        logger.error(f"[{hostname}] 워치독 배포 실패. 오류: {e}")
    finally:
        client.close()

if __name__ == '__main__':
    logger = setup_logging()
    logger.info("\n" + "="*20 + " 워치독 배포 작업 시작 " + "="*20)

    for host in HOSTS:
        if is_host_reachable(host, logger):
            deploy_to_host(host, logger)
            