알겠습니다. selectedImageTitle과 selectedDatetime이 빈 값이어서 문제가 발생하는 것이므로, SignalR에서 이벤트를 받을 때 직접 이미지 업데이트를 호출하여 문제가 발생하지 않도록 하겠습니다.

MainActivity.kt 수정
SignalR에서 이벤트를 받을 때 selectedImageTitle과 selectedDatetime을 설정하고 이미지 업데이트를 직접 호출하는 방식을 사용하겠습니다.

kotlin
코드 복사
package com.example.mssqlimageapp

import android.graphics.Bitmap
import android.os.Bundle
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.gestures.detectTransformGestures
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.dp
import com.example.mssqlimageapp.ui.theme.MSSQLImageAppTheme
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.*
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import kotlin.concurrent.fixedRateTimer

class MainActivity : ComponentActivity() {
    private lateinit var hubConnection: HubConnection

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        Log.d("MainActivity", "onCreate called")
        setupSignalR()

        setContent {
            MSSQLImageAppTheme {
                Surface(color = MaterialTheme.colors.background) {
                    var imageList by remember { mutableStateOf(listOf<ImageData>()) }
                    var selectedImageTitle by remember { mutableStateOf("") }
                    var selectedDatetime by remember { mutableStateOf("") }
                    var selectedImage by remember { mutableStateOf<Bitmap?>(null) }
                    var currentBitmap by remember { mutableStateOf<Bitmap?>(null) }
                    var isRefreshing by remember { mutableStateOf(false) }

                    LaunchedEffect(selectedImage) {
                        currentBitmap = selectedImage
                    }

                    ImageListScreen(
                        imageList = imageList,
                        selectedImage = selectedImage,
                        selectedImageTitle = selectedImageTitle,
                        selectedDatetime = selectedDatetime,
                        onFetchData = {
                            CoroutineScope(Dispatchers.IO).launch {
                                imageList = fetchDataFromDatabase()
                            }
                        },
                        onImageSelected = { imageTitle, datetime ->
                            Log.d("MainActivity", "Image selected: $imageTitle, $datetime")
                            selectedImageTitle = imageTitle
                            selectedDatetime = datetime
                            CoroutineScope(Dispatchers.IO).launch {
                                val image = fetchImageFromDatabase(imageTitle, datetime)
                                withContext(Dispatchers.Main) {
                                    selectedImage = image
                                    currentBitmap = image
                                }
                            }
                        },
                        onBack = {
                            selectedImage = null
                            currentBitmap = null
                        },
                        onFit = {
                            currentBitmap = selectedImage
                        },
                        currentBitmap = currentBitmap,
                        isRefreshing = isRefreshing,
                        onToggleRefresh = { isRefreshing = it }
                    )
                }
            }
        }
    }

    private fun setupSignalR() {
        Log.d("SignalR", "setupSignalR called")
        hubConnection = HubConnectionBuilder.create("https://yourserver/signalrhub").build()

        hubConnection.on("UpdateImage", { imageTitle: String, datetime: String ->
            Log.d("SignalR", "UpdateImage event received with title: $imageTitle and datetime: $datetime")
            CoroutineScope(Dispatchers.Main).launch {
                selectedImageTitle = imageTitle
                selectedDatetime = datetime
                updateImage(imageTitle, datetime)
            }
        }, String::class.java, String::class.java)

        hubConnection.start()
            .doOnComplete {
                Log.d("SignalR", "Hub connection started successfully")
            }
            .doOnError { error ->
                Log.e("SignalR", "Error starting hub connection: ${error.message}")
            }
            .blockingAwait()
    }

    private suspend fun updateImage(imageTitle: String, datetime: String) {
        val newBitmap = fetchImageFromDatabase(imageTitle, datetime)
        newBitmap?.let {
            Log.d("SignalR", "Image updated for title: $imageTitle and datetime: $datetime")
            withContext(Dispatchers.Main) {
                selectedImage = newBitmap
                currentBitmap = newBitmap
            }
        }
    }

    override fun onDestroy() {
        Log.d("SignalR", "onDestroy called")
        hubConnection.stop()
            .doOnComplete {
                Log.d("SignalR", "Hub connection stopped successfully")
            }
            .doOnError { error ->
                Log.e("SignalR", "Error stopping hub connection: ${error.message}")
            }
            .blockingAwait()
        super.onDestroy()
    }
}

@Composable
fun ImageListScreen(
    imageList: List<ImageData>,
    selectedImage: Bitmap?,
    selectedImageTitle: String,
    selectedDatetime: String,
    onFetchData: () -> Unit,
    onImageSelected: (String, String) -> Unit,
    onBack: () -> Unit,
    onFit: () -> Unit,
    currentBitmap: Bitmap?,
    isRefreshing: Boolean,
    onToggleRefresh: (Boolean) -> Unit
) {
    Column {
        if (selectedImage == null) {
            Button(
                onClick = { onFetchData() },
                modifier = Modifier.padding(16.dp)
            ) {
                Text(if (imageList.isEmpty()) "Fetch Data" else "Reload Data")
            }
        }

        LazyColumn(modifier = Modifier.weight(1f)) {
            items(imageList) { imageData ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(8.dp)
                ) {
                    Text(imageData.datetime, modifier = Modifier.weight(1f))
                    Button(onClick = {
                        onImageSelected(imageData.imageTitle, imageData.datetime)
                    }) {
                        Text(imageData.imageTitle)
                    }
                }
            }
        }

        selectedImage?.let {
            currentBitmap?.let { bitmap ->
                ImageDisplayScreen(
                    bitmap = bitmap,
                    imageTitle = selectedImageTitle,
                    datetime = selectedDatetime,
                    onBack = onBack,
                    onFit = onFit,
                    isRefreshing = isRefreshing,
                    onToggleRefresh = onToggleRefresh
                )
            }
        }
    }
}

@Composable
fun ImageDisplayScreen(
    bitmap: Bitmap,
    imageTitle: String,
    datetime: String,
    onBack: () -> Unit,
    onFit: () -> Unit,
    isRefreshing: Boolean,
    onToggleRefresh: (Boolean) -> Unit
) {
    var scale by remember { mutableStateOf(1f) }
    var offset by remember { mutableStateOf(Offset.Zero) }
    var currentBitmap by remember { mutableStateOf(bitmap) }
    val scope = rememberCoroutineScope()

    LaunchedEffect(currentBitmap) {
        currentBitmap = bitmap
    }

    LaunchedEffect(isRefreshing) {
        var timer: Timer? = null
        if (isRefreshing) {
            timer = fixedRateTimer("imageRefresher", true, 0L, 60000) {
                scope.launch {
                    val newBitmap = fetchImageFromDatabase(imageTitle, datetime)
                    if (newBitmap != null) {
                        currentBitmap = newBitmap
                    }
                }
            }
        } else {
            timer?.cancel()
        }
        onDispose {
            timer?.cancel()
        }
    }

    Box(modifier = Modifier.fillMaxSize()) {
        Image(
            bitmap = currentBitmap.asImageBitmap(),
            contentDescription = null,
            modifier = Modifier
                .fillMaxSize()
                .pointerInput(Unit) {
                    detectTransformGestures { _, pan, zoom, _ ->
                        scale *= zoom
                        offset = Offset(offset.x + pan.x, offset.y + pan.y)
                    }
                }
                .graphicsLayer(
                    scaleX = scale,
                    scaleY = scale,
                    translationX = offset.x,
                    translationY = offset.y
                )
        )
        Column(
            modifier = Modifier.align(Alignment.BottomCenter).fillMaxWidth()
                .background(MaterialTheme.colors.surface)
        ) {
            Row(
                modifier = Modifier.fillMaxWidth().padding(8.dp),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                Button(onClick = onBack) {
                    Text("Back")
                }
                Button(onClick = {
                    scale = 1f
                    offset = Offset.Zero
                    onFit()
                }) {
                    Text("Fit")
                }
                Row(
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Checkbox(
                        checked = isRefreshing,
                        onCheckedChange = onToggleRefresh
                    )
                    Text("Auto Refresh")
                }
            }
        }
    }
}

data class ImageData(val imageTitle: String, val datetime: String)

suspend fun fetchDataFromDatabase(): List<ImageData> {
    return withContext(Dispatchers.IO) {
        try {
            val connection: Connection = DriverManager.getConnection(
                "jdbc:jtds:sqlserver://10.222.222.222:1633;databaseName=ddbb123",
                "yourUsername",
                "yourPassword"
            )
            val statement = connection.createStatement()
            val resultSet: ResultSet = statement.executeQuery("EXEC yourProcedure")

            val imageList = mutableListOf<ImageData>()
            while (resultSet.next()) {
                val imageTitle = resultSet.getString("imagetitle")
                val datetime = resultSet.getString("datetime1")
                imageList.add(ImageData(imageTitle, datetime))
            }
            connection.close()
            imageList
        } catch (e: Exception) {
            emptyList()
        }
    }
}

suspend fun fetchImageFromDatabase(imageTitle: String, datetime: String): Bitmap? {
    return withContext(Dispatchers.IO) {
        try {
            val connection: Connection = DriverManager.getConnection(
                "jdbc:jtds:sqlserver://10.222.222.222:1633;databaseName=ddbb123",
                "yourUsername",
                "yourPassword"
            )
            val statement = connection.prepareCall("{call yourImageProcedure(?, ?)}")
            statement.setString(1, imageTitle)
            statement.setString(2, datetime)
            val resultSet: ResultSet = statement.executeQuery()
            
            var bitmap: Bitmap? = null
            if (resultSet.next()) {
                val blob = resultSet.getBlob("imageColumn")
                val byteArray = blob.binaryStream.readBytes()
                bitmap = BitmapFactory.decodeByteArray(byteArray, 0, byteArray.size)
            }
            connection.close()
            bitmap
        } catch (e: Exception) {
            null
        }
    }
}
주요 변경 사항:
SignalR 이벤트 수신 시 selectedImageTitle과 selectedDatetime을 설정: SignalR에서 이벤트를 받을 때 selectedImageTitle과 selectedDatetime을 설정하고 바로 updateImage를 호출하여 이미지를 업데이트합니다.
ImageDisplayScreen에서 LaunchedEffect를 통해 상태를 갱신: currentBitmap이 변경될 때마다 UI가 즉시 업데이트되도록 합니다.
이제 SingleR 이벤트가 수신되면 selectedImageTitle과 selectedDatetime이 올바르게 설정되고, 이미지가 정상적으로 업데이트될 것입니다.






