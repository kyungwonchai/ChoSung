클래스 C: 비동기 함수 받기
csharp
코드 복사
using System;
using System.Threading.Tasks;

public class ClassC
{
    private readonly Func<int, Task> _asyncTask;  // 비동기 함수를 저장할 변수

    // 생성자에서 비동기 함수를 받음
    public ClassC(Func<int, Task> asyncTask)
    {
        _asyncTask = asyncTask;
    }

    // 필요할 때 비동기 함수를 호출하는 메서드
    public async Task TriggerAsyncEvent(int value)
    {
        if (_asyncTask != null)
        {
            // 전달받은 비동기 함수 호출
            await _asyncTask(value);
        }
    }
}
2. MainViewModel: 비동기 함수 정의
csharp
코드 복사
using System;
using System.Threading.Tasks;

public class MainViewModel
{
    // 비동기 함수 정의 (이 함수를 넘길 것임)
    public async Task HandleAsync(int value)
    {
        Console.WriteLine($"비동기 작업 시작: {value}");
        await Task.Delay(3000);  // 3초 대기
        Console.WriteLine($"비동기 작업 완료: {value}");
    }
}
3. Program: Main에서 클래스 C에 함수 전달 및 호출
csharp
코드 복사
using System;
using System.Threading.Tasks;

public class Program
{
    public static async Task Main(string[] args)
    {
        // MainViewModel 인스턴스 생성
        MainViewModel mainViewModel = new MainViewModel();

        // 클래스 C 생성자에 MainViewModel의 비동기 함수를 넘김
        ClassC classC = new ClassC(mainViewModel.HandleAsync);

        // 클래스 C에서 비동기 함수 호출
        await classC.TriggerAsyncEvent(42);

        // 메인 스레드가 끝나지 않도록 대기
        Console.ReadLine();
    }
}
설명:
클래스 C는 생성자에서 Func<int, Task> 형식의 비동기 함수를 받습니다. 이 함수는 클래스 내부에서 _asyncTask로 저장됩니다.

TriggerAsyncEvent 메서드에서 나중에 비동기 작업을 수행할 때, 생성자에서 받은 비동기 함수를 호출합니다.

**MainViewModel**에서 HandleAsync라는 비동기 함수를 정의하고, 이를 클래스 C의 생성자에 인자로 넘깁니다.

**Program**에서 ClassC의 인스턴스를 생성할 때, MainViewModel의 비동기 함수 HandleAsync를 직접 넘겨주고, 나중에 TriggerAsyncEvent 메서드를 호출하면, 넘겨받은 비동기 함수가 실행됩니다.