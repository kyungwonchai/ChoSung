// 필요한 네임스페이스 추가
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.Generic; // List<T> 사용
using System.Collections.ObjectModel;
using System.Configuration; // AppSettings 및 ConnectionStrings 사용 위해 추가
using System.Data.Entity;
using System.Data.Entity.Infrastructure; // DbEntityEntry, DbUpdateException 사용
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices; // Marshal 사용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 윈도우(MainWindow)와 연결되는 주 ViewModel 클래스입니다.
    /// (.NET Framework 4.8 버전 - CS1063 오류 수정)
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";

        private SecureString _masterPasswordInput;
        private bool _isMasterModeEnabled = false;

        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;

        public MasterDataViewModel MasterDataVM { get; private set; }
        public LogViewModel LogVM { get; private set; }

        #region Public Properties
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set { if (SetProperty(ref _selectedAssignment, value)) { ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged(); ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged(); } } }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set => SetProperty(ref _isMasterModeEnabled, value); }
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusBarText = "DB 연결 오류!"; return; }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();
            _allLockerTypes = new ObservableCollection<LockerType>();
            _allFloors = new ObservableCollection<Floor>();
            _allZones = new ObservableCollection<Zone>();
            _allSubParts = new ObservableCollection<SubPart>();
            _allAdministrators = new ObservableCollection<Administrator>();

            MasterDataVM = new MasterDataViewModel(_context);
            LogVM = new LogViewModel(_context);

            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);
            CheckMasterPasswordCommand = new RelayCommand(CheckMasterPassword);
            RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync());

            if (_context != null) { _ = LoadInitialDataAsync(); }
        }

        /// <summary>
        /// 초기 데이터 로드
        /// </summary>
        private async Task LoadInitialDataAsync()
        {
            await LoadMasterDataAsync(); // 마스터 데이터 먼저 로드
            await LoadAssignmentsAsync(); // 그 다음 사물함 목록 로드
        }

        /// <summary>
        /// 사물함 배정 목록 로드
        /// </summary>
        private async Task LoadAssignmentsAsync()
        {
            if (_context == null) return;
            StatusBarText = "사물함 목록 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 사물함 정보를 로드했습니다.";
            }
            catch (Exception ex) { HandleGenericException("사물함 목록 로딩", ex); }
        }

        /// <summary>
        /// 마스터 데이터 목록 로드 (콤보박스용)
        /// </summary>
        private async Task LoadMasterDataAsync()
        {
            if (_context == null) return;
            StatusBarText = "마스터 데이터 로딩 중...";
            try
            {
                AllLockerTypes = new ObservableCollection<LockerType>(await _context.LockerTypes.OrderBy(t => t.Name).ToListAsync());
                AllFloors = new ObservableCollection<Floor>(await _context.Floors.OrderBy(f => f.Name).ToListAsync());
                AllZones = new ObservableCollection<Zone>(await _context.Zones.OrderBy(z => z.Name).ToListAsync());
                AllSubParts = new ObservableCollection<SubPart>(await _context.SubParts.OrderBy(p => p.Name).ToListAsync());
                AllAdministrators = new ObservableCollection<Administrator>(await _context.Administrators.OrderBy(a => a.Name).ToListAsync());
                StatusBarText = "마스터 데이터 로드 완료.";
            }
            catch (InvalidOperationException ioEx) when (ioEx.Message.Contains("DataReader"))
            {
                 HandleGenericException("마스터 데이터 로딩 (DataReader 충돌 가능성)", ioEx);
                 MessageBox.Show("데이터 로딩 중 충돌이 발생했습니다. App.config 연결 문자열에 MultipleActiveResultSets=True; 옵션이 있는지 확인하거나, 잠시 후 다시 시도해 주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
            catch (Exception ex) { HandleGenericException("마스터 데이터 로딩", ex); }
        }


        /// <summary>
        /// 마스터 키 비밀번호 확인 로직
        /// </summary>
        private void CheckMasterPassword(object parameter)
        {
            try
            {
                string storedMasterKey = ConfigurationManager.AppSettings["MasterKey"];
                if (string.IsNullOrEmpty(storedMasterKey)) { MessageBox.Show("App.config에 마스터 키(MasterKey)가 정의되지 않았습니다.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; }
                string plainPassword = ConvertToUnsecureString(MasterPasswordInput);
                if (plainPassword == storedMasterKey) { IsMasterModeEnabled = true; StatusBarText = "마스터 관리자 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); }
                else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            }
            catch (ConfigurationErrorsException confEx) { MessageBox.Show($"설정 파일(App.config) 처리 오류:\n{confEx.Message}", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            catch (Exception ex) { MessageBox.Show($"마스터 키 확인 오류: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        }

        #region CRUD 및 기타 메서드

        /// <summary>
        /// 사물함 관리 탭의 변경 사항 저장
        /// </summary>
        private async Task SaveChangesAsync()
        {
             if (_context == null) return;
            StatusBarText = "변경 사항 저장 중...";
            // 롤백을 위해 모든 변경된 엔트리를 미리 가져옴
            List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList();

            try
            {
                 // *** 수정된 부분: Entries<T>() 사용하여 LockerAssignment 변경만 가져오기 ***
                 var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList();

                 // 중복 위치 검사 (UI 컬렉션 기준)
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);
                 if (duplicates.Any())
                 {
                     MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                     // 중복 발생 시 모든 변경된 엔트리 롤백
                     RollbackChanges(allChangedEntriesForRollback);
                     return;
                 }

                // 변경된 LockerAssignment 엔티티에 관리자 정보 업데이트
                foreach(var entry in changedLockerEntries) // 이제 entry는 DbEntityEntry<LockerAssignment> 타입
                {
                    entry.Entity.Administrator = _currentAdmin;
                }

                // 변경 사항 저장 (로그는 DbContext에서 자동으로 기록됨)
                int changedCount = await _context.SaveChangesAsync();
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx)
            {
                HandleDbUpdateException(dbEx);
                // 오류 발생 시 모든 변경된 엔트리 롤백
                RollbackChanges(allChangedEntriesForRollback);
            }
            catch (Exception ex)
            {
                HandleGenericException("저장", ex);
                // 오류 발생 시 모든 변경된 엔트리 롤백
                RollbackChanges(allChangedEntriesForRollback);
            }
        }

        /// <summary>
        /// EF6에서 변경 사항 롤백 (간단 버전)
        /// </summary>
        /// <param name="changedEntries">롤백할 엔티티 목록 (List<DbEntityEntry> 타입)</param>
        private void RollbackChanges(List<DbEntityEntry> changedEntries) // 매개변수 타입 List<DbEntityEntry> 유지
        {
            if (_context == null || changedEntries == null) return;

            foreach (var entry in changedEntries) // 이미 List이므로 ToList() 불필요
            {
                switch (entry.State)
                {
                    case EntityState.Modified:
                        entry.CurrentValues.SetValues(entry.OriginalValues);
                        entry.State = EntityState.Unchanged;
                        break;
                    case EntityState.Added:
                        entry.State = EntityState.Detached;
                        if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity))
                        {
                            LockerAssignments.Remove(addedEntity);
                        }
                        break;
                    case EntityState.Deleted:
                        entry.State = EntityState.Unchanged;
                        break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }

        /// <summary>
        /// 새 사물함 추가 (UI 및 Context)
        /// </summary>
        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;
            var newAssignment = new LockerAssignment {
                LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함",
                Floor = AllFloors.FirstOrDefault()?.Name ?? "1",
                Zone = AllZones.FirstOrDefault()?.Name ?? "A",
                SpecificLocation = "새 위치-" + Guid.NewGuid().ToString("N").Substring(0, 4),
                Administrator = _currentAdmin,
                LastUpdated = DateTime.Now
            };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 세부 정보 입력 후 저장 필요.";
        }

        /// <summary>
        /// 선택된 사물함 삭제
        /// </summary>
        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;
            if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 사물함 정보를 정말 삭제하시겠습니까?", "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                StatusBarText = "삭제 중...";
                List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList();
                try
                {
                    var assignmentToDelete = SelectedAssignment;
                    var entry = _context.Entry(assignmentToDelete);
                    if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); }
                     _context.LockerAssignments.Remove(assignmentToDelete);
                    int changedCount = await _context.SaveChangesAsync();
                    LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null;
                    StatusBarText = $"성공적으로 {changedCount}개의 레코드를 삭제했습니다.";
                }
                catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } // 삭제 실패 시 롤백
                catch (Exception ex) { HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } // 삭제 실패 시 롤백
            }
        }

        /// <summary>
        /// 선택된 사물함의 사용자 배정 정보 해제
        /// </summary>
        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;
            SelectedAssignment.UserName = null;
            SelectedAssignment.KnoxId = null;
            SelectedAssignment.SubPart = null;
            _context.Entry(SelectedAssignment).State = EntityState.Modified;
            SelectedAssignment.Administrator = _currentAdmin;
            StatusBarText = "배정 해제됨. 변경 사항 저장 필요.";
        }

        #endregion

        #region Helper Methods

        private void HandleGenericException(string operation, Exception ex) { StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }

        #endregion

        #region IDisposable 구현 (DbContext 해제)
        private bool disposed = false;
        protected virtual void Dispose(bool disposing) { if (!disposed) { if (disposing) { _context?.Dispose(); } disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
```

**주요 수정 사항:**

1.  **`SaveChangesAsync` 메서드 수정:**
    * 롤백을 위해 `_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList()`를 사용하여 **모든** 변경된 엔트리를 `allChangedEntriesForRollback` 변수에 미리 저장합니다.
    * `Administrator`를 설정할 `LockerAssignment` 엔트리만 가져올 때는 `_context.ChangeTracker.Entries<LockerAssignment>()` 제네릭 메서드를 사용하여 `DbEntityEntry<LockerAssignment>` 타입의 목록(`changedLockerEntries`)을 얻습니다. 이렇게 하면 `.Select(e => (DbEntityEntry<LockerAssignment>)e)` 형변환이 필요 없어지고 오류가 해결됩니다.
    * `catch` 블록에서 `RollbackChanges`를 호출할 때는 미리 저장해 둔 `allChangedEntriesForRollback` 리스트를 전달하여, 저장 실패 시 `LockerAssignment` 외의 다른 변경 사항(예: 마스터 데이터 변경)도 함께 롤백될 수 있도록 합니다.
2.  **`RollbackChanges` 메서드:** 매개변수 타입을 `List<DbEntityEntry>`로 유지하고, 내부에서 `ToList()` 호출 없이 바로 사용하도록 합니다 (호출하는 쪽에서 이미 `ToList()`를 호출하므로).