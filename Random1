L 인터페이스 구성은 다음과 같습니다. 시작 버튼과 두 개의 ListBox 컨트롤을 포함합니다.

xml
Copy code
<Window x:Class="FolderAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Folder Analysis" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Button Grid.Row="0" Content="Start Analysis" Click="Button_Click"/>
        <ListBox x:Name="listBox1" Grid.Row="1" Margin="10" />
        <ListBox x:Name="listBox2" Grid.Row="2" Margin="10" />
    </Grid>
</Window>
MainWindow.xaml.cs
이 C# 코드에서는 폴더 분석 로직과 UI 업데이트를 처리합니다. ObservableCollection을 사용하여 실시간 UI 업데이트가 가능하도록 구성했습니다.

csharp
Copy code
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading;
using System.Windows;

namespace FolderAnalysisApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> allFolderInfo = new ObservableCollection<string>();

        public MainWindow()
        {
            InitializeComponent();
            listBox1.ItemsSource = new ObservableCollection<string>();
            listBox2.ItemsSource = new ObservableCollection<string>();
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {
            Thread thread = new Thread(() => AnalyzeFolders(@"C:\Path\To\Start", true));
            thread.IsBackground = true;
            thread.Start();
        }

        private void AnalyzeFolders(string path, bool isRootCall)
        {
            try
            {
                DirectoryInfo rootDir = new DirectoryInfo(path);
                foreach (DirectoryInfo dir in rootDir.GetDirectories())
                {
                    try
                    {
                        long size = CalculateFolderSize(dir);
                        if (size >= 1073741824) // 1GB 이상
                        {
                            DateTime lastModified = GetMostRecentFileDate(dir);
                            string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                            Application.Current.Dispatcher.Invoke(() => UpdateListBoxes(info, lastModified));
                        }
                        AnalyzeFolders(dir.FullName, false);
                    }
                    catch (UnauthorizedAccessException)
                    {
                        continue;
                    }
                }

                if (isRootCall)
                {
                    Application.Current.Dispatcher.Invoke(() => UpdateListBox1("분석 완료"));
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"An error occurred: {ex.Message}");
            }
        }

        private void UpdateListBoxes(string info, DateTime lastModified)
        {
            allFolderInfo.Add(info);
            var sortedList = allFolderInfo.OrderByDescending(i => DateTime.Parse(i.Split('-').Last().Trim())).ToList();
            ((ObservableCollection<string>)listBox1.ItemsSource).Clear();
            ((ObservableCollection<string>)listBox2.ItemsSource).Clear();

            for (int i = 0; i < sortedList.Count; i++)
            {
                if (i < 5) // 최근 5개 아이템을 ListBox1에 추가
                    ((ObservableCollection<string>)listBox1.ItemsSource).Add(sortedList[i]);
                else // 나머지 아이템을 ListBox2에 추가
                    ((ObservableCollection<string>)listBox2.ItemsSource).Add(sortedList[i]);
            }
        }

        private DateTime GetMostRecentFileDate(DirectoryInfo directory)
        {
            FileInfo[] files = directory.GetFiles();
            return files.Length > 0 ? files.Max(file => file.LastWriteTime) : DateTime.MinValue;
        }

        private long CalculateFolderSize(DirectoryInfo directory)
        {
            return directory.EnumerateFiles("*", SearchOption.AllDirectories).Sum(file => file.Length);
        }

        private void UpdateListBox1(string info)
        {
            ((ObservableCollection<string>)listBox1.ItemsSource).Add(info);
        }
    }
}
이 코드는 WPF에서의 동작을 보장하기 위해 필요한 모든 수정사항을 포함하고 있