그인 상태를 보관하는 CustomClass1를 사용하는 예제를 보여드리겠습니다.

csharp

public partial class MainForm : Form
{
    public MainForm()
    {
        InitializeComponent();
    }

    private void loginButton_Click(object sender, EventArgs e)
    {
        string username = usernameTextBox.Text;
        string password = passwordTextBox.Text;

        // 로그인 처리
        bool isAuthenticated = AuthenticateUser(username, password);

        if (isAuthenticated)
        {
            // 로그인 성공 시 CustomClass1에 로그인 정보 저장
            CustomClass1.LoggedInUsername = username;

            // 메인 폼 열기
            this.Hide();
            MainForm mainForm = new MainForm();
            mainForm.ShowDialog();
            this.Close();
        }
        else
        {
            MessageBox.Show("로그인에 실패했습니다. 올바른 사용자명과 비밀번호를 입력하세요.");
        }
    }

    private bool AuthenticateUser(string username, string password)
    {
        // 사용자 인증 로직
        // ...
    }
}

위의 예제에서 MainForm은 로그인을 위한 폼이라고 가정합니다. loginButton_Click 이벤트 핸들러에서 사용자명과 비밀번호를 가져와 AuthenticateUser 메서드를 호출하여 사용자 인증을 수행합니다. 인증이 성공하면 CustomClass1.LoggedInUsername에 로그인된 사용자명을 저장합니다.

이후, MainForm 폼을 닫고 메인 기능을 수행하는 다른 폼이나 동작을 실행할 수 있습니다. 다른 폼이나 동작에서는 CustomClass1.IsLoggedIn 프로퍼티를 사용하여 로그인 상태를 확인할 수 있습니다.

csharp

public partial class SomeOtherForm : Form
{
    public SomeOtherForm()
    {
        InitializeComponent();
    }

    private void SomeOtherForm_Load(object sender, EventArgs e)
    {
        // 로그인 상태 확인
        if (CustomClass1.IsLoggedIn)
        {
            string loggedInUsername = CustomClass1.LoggedInUsername;
            // 로그인된 사용자명을 이용한 처리
            // ...
        }
        else
        {
            // 로그인되지 않은 경우에 대한 처리
            // ...
        }
    }
}

위의 예제에서 SomeOtherForm은 메인 폼 이외의 다른 폼이라고 가정합니다. 해당 폼의 Load 이벤트 핸들러에서 CustomClass1.IsLoggedIn을 사용하여 로그인 상태를 확인하고, 로그인된 사용자명을 이용한 처리를 수행할 수 있습니다