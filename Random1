이터를 직접 가공하여 줄 바꿈을 유지하도록 설정하겠습니다.

다음은 DevExpress WPF GridControl에서 줄 바꿈을 유지하여 데이터를 엑셀로 내보내는 방법입니다.

1. XAML 설정
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="myGridControl" AutoGenerateColumns="AddNew">
            <dxg:GridControl.View>
                <dxg:TableView Name="myTableView" />
            </dxg:GridControl.View>
        </dxg:GridControl>
        <Button Content="Export to Excel" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="10" Click="btnExportToExcel_Click"/>
    </Grid>
</Window>
2. Code-Behind 설정 (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Export.Xl;
using DevExpress.Xpf.Grid;
using DevExpress.XtraPrinting;
using System.Data;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // 샘플 데이터 추가
            DataTable dataTable = new DataTable();
            dataTable.Columns.Add("Name");
            dataTable.Columns.Add("Address");

            DataRow row1 = dataTable.NewRow();
            row1["Name"] = "John Doe";
            row1["Address"] = "1234 Elm Street\nApt 5";
            dataTable.Rows.Add(row1);

            DataRow row2 = dataTable.NewRow();
            row2["Name"] = "Jane Smith";
            row2["Address"] = "5678 Oak Avenue\nSuite 12B";
            dataTable.Rows.Add(row2);

            myGridControl.ItemsSource = dataTable.DefaultView;
        }

        private void btnExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            string filePath = "output.xlsx";
            ExportGridToExcel(myGridControl, filePath);
            MessageBox.Show("엑셀로 내보내기가 완료되었습니다: " + filePath);
        }

        private void ExportGridToExcel(GridControl gridControl, string filePath)
        {
            // DataTable을 임시 GridControl에 설정
            DataView dataView = gridControl.ItemsSource as DataView;
            DataTable dataTable = dataView.ToTable();

            using (var workbook = new XLWorkbook())
            {
                var worksheet = workbook.Worksheets.Add("Sheet1");

                // 컬럼 헤더 추가
                for (int i = 0; i < dataTable.Columns.Count; i++)
                {
                    worksheet.Cell(1, i + 1).Value = dataTable.Columns[i].ColumnName;
                }

                // 데이터 추가
                for (int i = 0; i < dataTable.Rows.Count; i++)
                {
                    for (int j = 0; j < dataTable.Columns.Count; j++)
                    {
                        var cellValue = dataTable.Rows[i][j].ToString();
                        if (dataTable.Columns[j].ColumnName == "Address")
                        {
                            // 줄 바꿈 유지
                            cellValue = cellValue.Replace("\n", Environment.NewLine);
                        }
                        worksheet.Cell(i + 2, j + 1).Value = cellValue;
                    }
                }

                // 엑셀 파일 저장
                workbook.SaveAs(filePath);
            }
        }
    }
}
이 코드에서는 다음과 같은 작업을 수행합니다:

XAML 설정: GridControl과 Export 버튼을 포함하는 간단한 UI를 정의합니다.
Code-Behind 설정:
DataTable을 생성하고 샘플 데이터를 추가하여 GridControl에 바인딩합니다.
btnExportToExcel_Click 이벤트 핸들러에서 ExportGridToExcel 메서드를 호출합니다.
ExportGridToExcel 메서드는 DataTable의 데이터를 변환하여 줄 바꿈을 유지합니다.
ClosedXML 라이브러리를 사용하여 데이터를 엑셀 파일로 내보냅니다. 줄 바꿈을 유지하기 위해 Address 필드의 값을 Environment.NewLine으로 대체합니다.
이 코드를 사용하면 GridControl의 데이터를 엑셀로 내보낼 때 줄 바꿈이 유지된 상태로 출력될 것입니다