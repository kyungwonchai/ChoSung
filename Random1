능을 완성하기 위해 ManagementItems 프로퍼티를 User 모델에 추가하고, 데이터베이스에서 로드하도록 수정하겠다.

6. Models/User.cs (ManagementItems 포함)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;

namespace WPF_DevExpress_Locker_Management.Models
{
    public class User
    {
        public Guid UserId { get; set; }
        public string Name { get; set; }
        public string KnoxId { get; set; }
        
        // 사용자의 관리 항목들 (신발장, 락커, 사물함 등)
        public ObservableCollection<ManagementItem> ManagementItems { get; set; }

        public User()
        {
            ManagementItems = new ObservableCollection<ManagementItem>();
        }
    }
}
8. Services/DataRepository.cs (ManagementItems 추가 로드 기능 추가)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Collections.ObjectModel;
using WPF_DevExpress_Locker_Management.Models;

namespace WPF_DevExpress_Locker_Management.Services
{
    public class DataRepository
    {
        private readonly string _connectionString = "Server=localhost;Database=LockerDB;User Id=your_user;Password=your_password;";

        public List<User> GetUsers()
        {
            var users = new List<User>();

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT * FROM Users", conn);
                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    var userId = (Guid)reader["UserId"];
                    var user = new User
                    {
                        UserId = userId,
                        Name = reader["Name"].ToString(),
                        KnoxId = reader["KnoxId"].ToString(),
                        ManagementItems = GetManagementItems(userId)  // 관련 관리 항목 로드
                    };
                    users.Add(user);
                }
            }
            return users;
        }

        public ObservableCollection<ManagementItem> GetManagementItems(Guid userId)
        {
            var items = new ObservableCollection<ManagementItem>();

            using (SqlConnection conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT * FROM ManagementItems WHERE UserId = @UserId", conn);
                cmd.Parameters.AddWithValue("@UserId", userId);

                var reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    items.Add(new ManagementItem
                    {
                        Name = reader["Name"].ToString(),
                        Floor = reader["Floor"].ToString(),
                        Zone = reader["Zone"].ToString(),
                        SubPart = reader["SubPart"].ToString(),
                        Manager = reader["Manager"].ToString()
                    });
                }
            }
            return items;
        }
    }
}
10. Models/ManagementItem.cs (관리 항목 모델 정의)
csharp
코드 복사
namespace WPF_DevExpress_Locker_Management.Models
{
    public class ManagementItem
    {
        public string Name { get; set; }
        public string Floor { get; set; }
        public string Zone { get; set; }
        public string SubPart { get; set; }
        public string Manager { get; set; }
    }
}
✅ 수정 사항
User 모델에 ManagementItems 프로퍼티 추가

DataRepository.cs에서 GetUsers() 메서드가 관련 ManagementItems를 포함해서 가져오도록 수정

ManagementItems 테이블 구조에 맞게 ManagementItem 모델 추가

ManagementItems의 수정/추가/삭제 기능이 정상적으로 작동되도록 수정

📌 ManagementItems 테이블 구조 확인 및 수정 (SQL)
sql
코드 복사
CREATE TABLE ManagementItems (
    ItemId INT PRIMARY KEY IDENTITY(1,1),
    UserId UNIQUEIDENTIFIER,
    Name NVARCHAR(100),
    Floor NVARCHAR(50),
    Zone NVARCHAR(50),
    SubPart NVARCHAR(100),
    Manager NVARCHAR(100)
);