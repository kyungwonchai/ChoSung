요청하신 대로, 상단에 라인별 차트 하나와 하단에 'L' 및 'R' 모델별로 각각의 MP1MP5 데이터를 표시하는 두 개의 차트를 배치하였습니다. 또한, 범례를 통해 MP1MP5의 표시 여부를 제어하면 두 모델 분류에 동시에 적용되도록 구현하였습니다.

전체 소스 코드:

XAML (MainWindow.xaml):

xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="900" Width="1200">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="1*" />
            <RowDefinition Height="1.5*" />
            <RowDefinition Height="1.5*" />
        </Grid.RowDefinitions>

        <!-- 상단 라인별 차트 -->
        <dxc:ChartControl Grid.Row="0" x:Name="LineChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Line Name" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Value" />
                    </dxc:XYDiagram2D.AxisY>
                    <!-- 시리즈는 코드 비하인드에서 추가 -->
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 L 모델 차트 -->
        <dxc:ChartControl Grid.Row="1" x:Name="LModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend x:Name="LModelLegend" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:XYDiagram2D.AxisX>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Value" />
                    </dxc:XYDiagram2D.AxisY>
                    <!-- 시리즈는 코드 비하인드에서 추가 -->
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- 하단 R 모델 차트 -->
        <dxc:ChartControl Grid.Row="2" x:Name="RModelChart">
            <dxc:ChartControl.Legend>
                <dxc:Legend x:Name="RModelLegend" />
            </dxc:ChartControl.Legend>
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D EnableAxisXNavigation="True">
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D Title="Timestamp" />
                    </dxc:AxisX2D>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D Title="Value" />
                    </dxc:AxisY2D>
                    <!-- 시리즈는 코드 비하인드에서 추가 -->
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs):

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadData();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, LModelLegend, dataL);

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, RModelLegend, dataR);
        }

        private List<DataPoint> LoadData()
        {
            // 실제 데이터 로드 로직 구현
            return new List<DataPoint>
            {
                // 예시 데이터
                new DataPoint { ModelName = "Model1L", Timestamp = DateTime.Now.AddMinutes(-10), MP1 = 10, MP2 = 20, MP3 = 30, MP4 = 40, MP5 = 50 },
                new DataPoint { ModelName = "Model2R", Timestamp = DateTime.Now.AddMinutes(-5), MP1 = 15, MP2 = 25, MP3 = 35, MP4 = 45, MP5 = 55 },
                // 추가 데이터...
            };
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            // 라인별 시리즈 생성 및 추가
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new LineSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = "MP1" // 예시로 MP1 사용, 필요에 따라 변경
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }
        }

        private void InitializeModelChart(ChartControl chart, Legend legend, List<DataPoint> data)
        {
            // MP1~MP5 시리즈 생성 및 추가
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName // 범례 항목과 연결하기 위한 태그 설정
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }

            // 범례 항목 클릭 이벤트 핸들러 추가
            foreach (var item in legend.Items)
            {
                item.MouseLeftButtonUp += (s, e) => ToggleSeriesVisibility((string)item.Tag);
            }
        }

        private void ToggleSeriesVisibility
::contentReference[oaicite:0]{index=0}
 





나의 말:
이어서
ChatGPT의 말:
ChatGPT
이어서, 범례 항목을 클릭하여 두 모델 차트의 시리즈 가시성을 동기화하는 기능을 구현하려면, 각 차트의 범례 항목에 동일한 이벤트 핸들러를 연결하고, 해당 핸들러에서 두 차트의 시리즈 가시성을 동시에 제어해야 합니다.

C# 코드 (MainWindow.xaml.cs):

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeCharts();
        }

        private void InitializeCharts()
        {
            // 데이터 로드 및 분리
            var data = LoadData();
            var dataL = data.Where(d => d.ModelName.EndsWith("L")).ToList();
            var dataR = data.Where(d => d.ModelName.EndsWith("R")).ToList();

            // 상단 라인별 차트 초기화
            InitializeLineChart(data);

            // 하단 L 모델 차트 초기화
            InitializeModelChart(LModelChart, dataL);

            // 하단 R 모델 차트 초기화
            InitializeModelChart(RModelChart, dataR);

            // 범례 항목 클릭 이벤트 핸들러 추가
            AddLegendClickHandlers();
        }

        private List<DataPoint> LoadData()
        {
            // 실제 데이터 로드 로직 구현
            return new List<DataPoint>
            {
                // 예시 데이터
                new DataPoint { ModelName = "Model1L", Timestamp = DateTime.Now.AddMinutes(-10), MP1 = 10, MP2 = 20, MP3 = 30, MP4 = 40, MP5 = 50 },
                new DataPoint { ModelName = "Model2R", Timestamp = DateTime.Now.AddMinutes(-5), MP1 = 15, MP2 = 25, MP3 = 35, MP4 = 45, MP5 = 55 },
                // 추가 데이터...
            };
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            // 라인별 시리즈 생성 및 추가
            var lineGroups = data.GroupBy(d => d.ModelName);
            foreach (var group in lineGroups)
            {
                var series = new LineSeries2D
                {
                    DisplayName = group.Key,
                    DataSource = group.ToList(),
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = "MP1" // 예시로 MP1 사용, 필요에 따라 변경
                };
                ((XYDiagram2D)LineChart.Diagram).Series.Add(series);
            }
        }

        private void InitializeModelChart(ChartControl chart, List<DataPoint> data)
        {
            // MP1~MP5 시리즈 생성 및 추가
            for (int i = 1; i <= 5; i++)
            {
                var mpName = $"MP{i}";
                var series = new LineSeries2D
                {
                    DisplayName = mpName,
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = mpName,
                    Tag = mpName // 범례 항목과 연결하기 위한 태그 설정
                };
                ((XYDiagram2D)chart.Diagram).Series.Add(series);
            }
        }

        private void AddLegendClickHandlers()
        {
            // L 모델 차트 범례 항목 클릭 이벤트 핸들러 추가
            foreach (var item in LModelLegend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }

            // R 모델 차트 범례 항목 클릭 이벤트 핸들러 추가
            foreach (var item in RModelLegend.Items)
            {
                item.MouseLeftButtonUp += LegendItem_MouseLeftButtonUp;
            }
        }

        private void LegendItem_MouseLeftButtonUp(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            if (sender is LegendItem legendItem && legendItem.Series != null)
            {
                var mpName = legendItem.Series.Tag as string;
                ToggleSeriesVisibility(mpName);
            }
        }

        private void ToggleSeriesVisibility(string mpName)
        {
            // L 모델 차트의 해당 시리즈 가시성 토글
            ToggleSeriesVisibilityInChart(LModelChart, mpName);

            // R 모델 차트의 해당 시리즈 가시성 토글
            ToggleSeriesVisibilityInChart(RModelChart, mpName);
        }

        private void ToggleSeriesVisibilityInChart(ChartControl chart, string mpName)
        {
            foreach (var series in ((XYDiagram2D)chart.Diagram).Series)
            {
                if (series.Tag as string == mpName)
                {
                    series.Visible = !series.Visible;
                }
            }
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
설명:

범례 항목 클릭 이벤트 핸들러 추가 (AddLegendClickHandlers 메서드):

LModelLegend와 RModelLegend의 각 범례 항목에 MouseLeftButtonUp 이벤트 핸들러를 추가하여, 사용자가 범례 항목을 클릭할 때 LegendItem_MouseLeftButtonUp 메서드가 호출되도록 설정합니다.
범례 항목 클릭 시 시리즈 가시성 토글 (LegendItem_MouseLeftButtonUp 메서드):

범례 항목이 클릭되면, 해당 항목의 시리즈에 연결된 Tag 값을 가져와 ToggleSeriesVisibility 메서드를 호출합니다.
시리즈 가시성 토글 (ToggleSeriesVisibility 메서드):

mpName에 해당하는 시리즈의 가시성을 LModelChart와 RModelChart에서 동시에 토글합니다.
차트 내 시리즈 가시성 토글 (ToggleSeriesVisibilityInChart 메서드):

지정된 차트에서 mpName에 해당하는 시리즈를 찾아 그 가시성을 토글합니다.
이렇게 구현하면, 사용자가 하단의 L 모델 차트나 R 모델 차트의 범례에서 MP1~MP5를 선택하거나 해제할 때, 두 차트의 해당 시리즈가 동시에 표시되거나 숨겨집니다.

참고 자료: