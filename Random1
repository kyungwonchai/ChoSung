private async Task PerformAutomationAsync()
{
    // 지정된 영역의 좌표 및 크기
    int startX = 1200;
    int endX = 1500;
    int startY = 500;
    int endY = 600;

    // 스크린샷 캡처
    Bitmap screenshot = CaptureScreen(startX, startY, endX - startX, endY - startY);
    Mat src = BitmapConverter.ToMat(screenshot);

    // BGR 색상 범위 설정
    Scalar lower = new Scalar(50, 50, 150); // BGR에서 B:150, G:50, R:50
    Scalar upper = new Scalar(200, 120, 50); // BGR에서 B:200, G:120, R:50

    // 색상 범위에 해당하는 마스크 생성
    Mat mask = new Mat();
    Cv2.InRange(src, lower, upper, mask);

    // 마스크에서 윤곽선 찾기
    Cv2.FindContours(mask, out Point[][] contours, out HierarchyIndex[] hierarchy, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

    foreach (var contour in contours)
    {
        // 윤곽선의 외접 사각형 구하기
        Rect rect = Cv2.BoundingRect(contour);

        // 사각형의 크기 조건 확인
        if (rect.Width >= 200 && rect.Height >= 30)
        {
            // 조건에 맞는 사각형을 찾았을 때
            int clickX = startX + rect.X + rect.Width / 2;
            int clickY = startY + rect.Y - 157;

            // 마우스 클릭 시뮬레이션
            SetCursorPos(clickX, clickY);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, (uint)clickX, (uint)clickY, 0, 0);

            // 키보드 입력 시뮬레이션
            await Task.Delay(100); // 약간의 지연을 추가하여 안정성 확보
            SendKeys.SendWait("kkkkbbbbb");
            await Task.Delay(100);
            SendKeys.SendWait("{TAB}");
            await Task.Delay(100);
            SendKeys.SendWait("aaaaabbbb");

            // 파란 버튼의 중앙을 클릭 (예: 직사각형의 중앙)
            await Task.Delay(100);
            SetCursorPos(clickX, startY + rect.Y + rect.Height / 2);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, (uint)clickX, (uint)(startY + rect.Y + rect.Height / 2), 0, 0);

            return;
        }
    }

    MessageBox.Show("조건에 맞는 직사각형을 찾을 수 없습니다.");
}

private Bitmap CaptureScreen(int x, int y, int width, int height)
{
    Bitmap bmp = new Bitmap(width, height);
    using (Graphics g = Graphics.FromImage(bmp))
    {
        g.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(width, height), CopyPixelOperation.SourceCopy);
    }
    return bmp;