만약 작업을 추가할 때 단순 대기 함수를 넣고 싶다면, 비동기 작업을 실행하는 함수(taskFunc)에서 일정 시간 동안 대기하는 함수를 사용할 수 있습니다. C#에서 비동기 대기는 Task.Delay()를 통해 쉽게 구현할 수 있습니다.

해결 방법:
대기 작업을 추가하고 싶다면, Task.Delay()를 비동기 함수로 넣으면 됩니다.
이 작업은 응답 검증 함수(responseValidator)에서 대기 후 성공 또는 실패를 반환하는 방식으로 처리할 수 있습니다.
예시 코드: 단순 대기 작업 추가
대기 작업을 정의: Task.Delay()로 일정 시간 동안 대기하는 비동기 함수를 정의합니다.

검증 함수: 단순히 true 또는 false를 반환하여, 대기 작업이 끝난 후 성공 처리하도록 설정합니다.

1. 대기 함수 추가
csharp
코드 복사
private async Task<string> WaitTask()
{
    // 5초 동안 대기하는 작업
    await Task.Delay(5000); 
    return "Wait Completed"; // 대기 완료 후 메시지 반환
}
2. 검증 함수 추가
csharp
코드 복사
private bool ValidateWaitTask(string result)
{
    // 대기 작업이 완료되면 무조건 true로 성공 처리
    return result == "Wait Completed";
}
3. 대기 작업을 큐에 추가하는 코드
csharp
코드 복사
public void AddWaitTaskCommand()
{
    // 대기 작업과 검증 함수 추가
    AddAsyncTaskCommand(WaitTask, "Wait 5 Seconds", "Waiting", ValidateWaitTask);
}
4. 전체 흐름
csharp
코드 복사
public class CommandQueueViewModel : INotifyPropertyChanged
{
    public ObservableCollection<CommandItem> RemainingCommands { get; set; } = new ObservableCollection<CommandItem>();

    // 명령을 큐에 추가하는 함수
    public void AddAsyncTaskCommand(Func<Task<string>> asyncTask, string commandText, string sentCommand, Func<string, bool> responseValidator)
    {
        var newCommand = new CommandItem
        {
            CommandText = commandText,
            Status = "Pending",
            MaxRetryLimit = RetryLimit,
            RetryCount = 0,
            CommandTime = DateTime.Now.ToString("yyMMdd HH:mm:ss.fff")
        };

        App.Current.Dispatcher.Invoke(() =>
        {
            RemainingCommands.Add(newCommand);
            
            if (RemainingCommands.Count > 5)
            {
                RemainingCommands.RemoveAt(0); // FIFO 방식으로 가장 오래된 명령 삭제
            }
        });

        commandQueue.Enqueue(async () =>
        {
            newCommand.Status = "Processing";
            int retryCount = 0;
            Stopwatch stopwatch = new Stopwatch();
            _isProcessing = true;

            while (retryCount < RetryLimit)
            {
                try
                {
                    stopwatch.Restart();
                    string result = await asyncTask(); // 여기서 대기 작업 실행
                    stopwatch.Stop();

                    int responseTime = (int)stopwatch.ElapsedMilliseconds;
                    newCommand.ResponseTime = responseTime;

                    if (responseValidator(result))
                    {
                        newCommand.Status = "Completed";
                        newCommand.Result = 1;

                        App.Current.Dispatcher.Invoke(() => RemainingCommands.Remove(newCommand)); // 완료된 명령 제거

                        await _dbHelper.LogCommandToDatabase(commandText, sentCommand, result, "Completed", newCommand.Result, retryCount, responseTime, result);
                        UpdateProgress();
                        _isProcessing = false;
                        return new CommandResult { Success = true, Message = result };
                    }
                    else
                    {
                        retryCount++;
                        newCommand.Status = $"Retrying {retryCount}/{RetryLimit}";
                        await Task.Delay(RetryInterval);
                    }
                }
                catch (Exception ex)
                {
                    newCommand.Status = "Failed";
                    newCommand.Result = 0;
                    stopwatch.Stop();
                    int responseTime = (int)stopwatch.ElapsedMilliseconds;
                    newCommand.ResponseTime = responseTime;
                    await _dbHelper.LogCommandToDatabase(commandText, sentCommand, ex.Message, "Failed", newCommand.Result, retryCount, responseTime, ex.Message);
                    StopQueueProcessing(newCommand);
                    return new CommandResult { Success = false, Message = ex.Message };
                }
            }

            UpdateProgress();
            _isProcessing = false;
            return new CommandResult { Success = false };
        });

        if (!_isProcessing)
        {
            _isProcessing = true;
            ProcessCommandQueue(); // 큐 처리 시작
        }

        UpdateProgress();
    }
}
전체 흐름 설명:
WaitTask: 이 함수는 5초 동안 대기하는 비동기 작업을 수행하며, 완료되면 "Wait Completed" 메시지를 반환합니다.

ValidateWaitTask: 응답이 "Wait Completed"이면 성공(true)으로 간주하고, 그렇지 않으면 실패 처리합니다.

AddWaitTaskCommand: 큐에 대기 작업을 추가하는 함수입니다. 호출하면 5초 동안 대기하는 작업이 추가됩니다.

FIFO 방식: RemainingCommands의 항목이 5개를 초과하면 가장 먼저 들어온 항목을 자동으로 삭제합니다. DataGrid에는 항상 최대 5개의 미완료된 명령만 표시됩니다.

이 코드를 통해 단순 대기 작업을 명령 큐에 추가할 수 있으며, 작업이 완료되면 성공 처리됩니다