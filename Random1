요구 사항을 반영하여 DateEdit 값 변경 시 설정을 파일과 변수에 저장하고, 프로그램 시작 시 설정된 값을 불러오는 방식으로 수정하겠습니다. 타이머는 변수에 저장된 시간과 현재 시간을 비교하여 팝업을 띄우도록 구현할 것입니다.

수정된 코드
csharp
코드 복사
using System;
using System.IO;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private Timer checkTimer;
        private DateTime targetDateTime;
        private string configFilePath = @"C:\agent\kwconfig\eng.ini";

        public MainWindow()
        {
            InitializeComponent();
            LoadSavedDateTime();
            StartMonitoringTime();
        }

        // 프로그램 시작 시 ini 파일에서 저장된 시간 불러오기
        private void LoadSavedDateTime()
        {
            if (File.Exists(configFilePath))
            {
                var savedTime = File.ReadAllText(configFilePath);
                if (DateTime.TryParse(savedTime, out DateTime loadedDateTime))
                {
                    targetDateTime = loadedDateTime;
                    dateEditControl.DateTime = targetDateTime; // DateEdit 컨트롤에 표시
                }
            }
        }

        // DateEdit 값 변경 시 호출되는 메서드
        private void DateEditControl_EditValueChanged(object sender, EventArgs e)
        {
            // DateEdit에서 선택한 시간 가져오기
            targetDateTime = dateEditControl.DateTime;
            
            // 설정된 시간을 ini 파일에 저장
            SaveDateTimeToFile(targetDateTime);
        }

        // ini 파일에 선택된 날짜와 시간을 저장하는 메서드
        private void SaveDateTimeToFile(DateTime dateTime)
        {
            try
            {
                Directory.CreateDirectory(Path.GetDirectoryName(configFilePath));
                File.WriteAllText(configFilePath, dateTime.ToString("yyyy-MM-dd HH:mm:ss"));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"파일 저장 중 오류 발생: {ex.Message}");
            }
        }

        // 타이머 설정 및 시작
        private void StartMonitoringTime()
        {
            checkTimer = new Timer(1000); // 1초마다 실행
            checkTimer.Elapsed += CheckTime;
            checkTimer.Start();
        }

        // 설정된 시간에 맞춰 팝업을 띄우는 메서드
        private void CheckTime(object sender, ElapsedEventArgs e)
        {
            // 현재 시간과 설정된 시간을 비교하여 팝업 표시
            if (DateTime.Now >= targetDateTime)
            {
                // 타이머 정지 및 팝업 표시
                checkTimer.Stop();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    MessageBox.Show("설정된 시간이 되었습니다!", "알림");
                });
            }
        }
    }
}
변경된 부분 설명
프로그램 시작 시 설정된 시간 불러오기: LoadSavedDateTime 메서드가 프로그램 시작 시 eng.ini 파일에서 저장된 시간을 불러와 targetDateTime 변수에 저장하고, DateEdit 컨트롤에도 표시합니다.

DateEdit 값 변경 시 파일 및 변수 업데이트: DateEditControl_EditValueChanged 이벤트에서 선택된 시간을 targetDateTime 변수와 eng.ini 파일에 저장합니다. 따라서 변경될 때마다 변수와 파일이 동기화됩니다.

타이머를 통한 시간 비교: 타이머가 targetDateTime 변수에 저장된 값과 현재 시간을 계속 비교하여 설정된 시간이 되면 팝업을 띄우고 