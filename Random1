using System;
using System.Security;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;

namespace LockerManagementApp.Infrastructure
{
    public static class PasswordHelper
    {
        public static readonly DependencyProperty AttachProperty =
            DependencyProperty.RegisterAttached("Attach", typeof(bool), typeof(PasswordHelper), new PropertyMetadata(false, AttachChanged));

        public static bool GetAttach(DependencyObject dp) => (bool)dp.GetValue(AttachProperty);
        public static void SetAttach(DependencyObject dp, bool value) => dp.SetValue(AttachProperty, value);

        public static readonly DependencyProperty PasswordProperty =
            DependencyProperty.RegisterAttached("Password", typeof(SecureString), typeof(PasswordHelper),
                new FrameworkPropertyMetadata(null, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, PasswordPropertyChanged));

        public static SecureString GetPassword(DependencyObject dp) => (SecureString)dp.GetValue(PasswordProperty);
        public static void SetPassword(DependencyObject dp, SecureString value) => dp.SetValue(PasswordProperty, value);

        private static readonly DependencyProperty IsUpdatingProperty =
           DependencyProperty.RegisterAttached("IsUpdating", typeof(bool), typeof(PasswordHelper));

        private static bool GetIsUpdating(DependencyObject dp) => (bool)dp.GetValue(IsUpdatingProperty);
        private static void SetIsUpdating(DependencyObject dp, bool value) => dp.SetValue(IsUpdatingProperty, value);

        private static void AttachChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;
            if ((bool)e.OldValue) { passwordBox.PasswordChanged -= PasswordBox_PasswordChanged; }
            if ((bool)e.NewValue) { passwordBox.PasswordChanged += PasswordBox_PasswordChanged; }
        }

        private static void PasswordPropertyChanged(DependencyObject sender, DependencyPropertyChangedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;
            if (!GetIsUpdating(passwordBox))
            {
                // ViewModel -> PasswordBox 업데이트 시 PasswordBox.Password 직접 설정은 지양
                // 필요하다면 passwordBox.Password = ConvertToUnsecureString(e.NewValue as SecureString); 와 같이 구현 가능하나 보안 주의
            }
        }

        private static void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)
        {
            if (!(sender is PasswordBox passwordBox)) return;
            SetIsUpdating(passwordBox, true);
            SetPassword(passwordBox, passwordBox.SecurePassword);
            SetIsUpdating(passwordBox, false);
        }

        // 필요 시 SecureString -> string 변환 메서드 (ViewModel에 있는 것 사용)
        // private static string ConvertToUnsecureString(SecureString securePassword) { ... }