실전 코드를 아래에 제공합니다.

train_model.py (모델 학습용 파일):

python

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import joblib

def preprocess_data(data):
    # 데이터 전처리 작업 수행
    # 예시로 특수 문자 제거 및 소문자 변환 작업을 수행합니다.
    data = data.apply(lambda x: x.replace('[^\w\s]', '').lower())

    return data

def train_model(data):
    # 데이터 전처리
    preprocessed_data = preprocess_data(data)

    # 벡터 변환
    vectorizer = CountVectorizer()
    parts_vector = vectorizer.fit_transform(preprocessed_data)

    # 유사도 계산
    similarity_matrix = cosine_similarity(parts_vector)

    return similarity_matrix, vectorizer

def save_model(similarity_matrix, vectorizer, model_file, vectorizer_file):
    # 모델 저장
    model_data = {'similarity_matrix': similarity_matrix, 'vectorizer': vectorizer}
    joblib.dump(model_data, model_file)
    joblib.dump(vectorizer, vectorizer_file)

# 데이터베이스에서 데이터 추출
# 예시 데이터를 데이터프레임으로 가정하고 부품코드 컬럼이 있다고 가정합니다.
data = pd.read_sql_query("SELECT 부품코드 FROM 테이블명", connection)

# 모델 학습
similarity_matrix, vectorizer = train_model(data['부품코드'])

# 학습된 모델 저장
save_model(similarity_matrix, vectorizer, 'model.pkl', 'vectorizer.pkl')

ui.py (PyQt UI 파일):

python

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QLabel, QLineEdit, QVBoxLayout, QPushButton, QListWidget
import joblib
from Levenshtein import distance
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle('부품코드 유사도 검색')
        self.resize(300, 400)

        self.model_file = 'model.pkl'
        self.vectorizer_file = 'vectorizer.pkl'

        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        self.input_label = QLabel('부품코드를 입력하세요:')
        layout.addWidget(self.input_label)

        self.input_entry = QLineEdit()
        layout.addWidget(self.input_entry)

        self.search_button = QPushButton('검색')
        self.search_button.clicked.connect(self.search_similar_parts)
        layout.addWidget(self.search_button)

        self.result_list = QListWidget()
        layout.addWidget(self.result_list)

        self.setLayout(layout)

    def load_model(self):
        model_data = joblib.load(self.model_file)
        self.similarity_matrix = model_data['similarity_matrix']
        self.vectorizer = joblib.load(self.vectorizer_file)

    def find_similar_parts(self, input_text):
        input_vector = self.vectorizer.transform([input_text])
        similarity_scores = cosine_similarity(input_vector, self.similarity_matrix).flatten()

        top_indices = similarity_scores.argsort()[:-11:-1]
        similar_parts = self.vectorizer.inverse_transform(self.similarity_matrix[top_indices])

        similarity_scores = [distance(input_text, part) for part in

User
이어서
ChatGPT

similar_parts_with_distance = sorted(zip(similarity_scores, similar_parts))

python

    return similar_parts_with_distance

def search_similar_parts(self):
    input_text = self.input_entry.text()

    similar_parts = self.find_similar_parts(input_text)

    self.result_list.clear()
    for distance, part in similar_parts:
        self.result_list.addItem(f'{part}: {distance}')

if name == 'main':
app = QApplication(sys.argv)

scss

window = MainWindow()
window.load_model()

window.show()

sys.exit(app.exec_())

go


위의 코드는 모델 학습용 파일인 `train_model.py`와 UI 파일인 `ui.py`로 구성되어 있습니다. `train_model.py`는 모델을 학습하고 저장하는 역할을 수행하며, `ui.py`는 PyQt를 사용하여 UI를 구성하고 모델을 로드하여 유사한 부품코드를 검색하는 기능을 제공합니다.

실제 데이터베이스에서 데