알겠습니다. 비밀번호를 'kkkwww'로 기본 설정하고, 별도의 수정 없이 바로 실행해 볼 수 있도록 최대한 완성된 형태로 코드를 제공해 드리겠습니다. TinyMCE의 경우, API 키 없이도 기본적인 기능은 동작하지만, "This domain is not registered..."라는 경고 메시지가 편집기 위에 표시될 수 있습니다. 프로덕션 환경이나 모든 기능을 사용하려면 TinyMCE Cloud에서 무료 API 키를 발급받아 config.py에 설정하는 것이 좋습니다.

프로젝트 구조:

flask_board/
├── app.py
├── config.py
├── models.py
├── requirements.txt
├── static/
│   ├── css/
│   │   └── style.css
│   └── uploads/  <-- 이 폴더는 실행 시 자동으로 생성됩니다.
└── templates/
    ├── base.html
    ├── index.html
    ├── view_post.html
    ├── edit_post.html
    └── login.html
1. requirements.txt

Plaintext

Flask
Flask-SQLAlchemy
Werkzeug
Pillow
python-dotenv
2. config.py

Python

import os

class Config:
    # !!! 보안 경고: 실제 운영 환경에서는 절대 하드코딩된 비밀번호를 사용하지 마세요. !!!
    # 이 비밀번호는 요청에 따라 'kkkwww'로 설정되었습니다.
    # 환경 변수나 외부 설정 파일을 사용하는 것이 안전합니다.
    ADMIN_PASSWORD = 'kkkwww'

    # Flask 애플리케이션의 보안을 위해 강력한 SECRET_KEY를 사용해야 합니다.
    # 터미널에서 python -c 'import secrets; print(secrets.token_hex())' 명령으로 생성 가능
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'a_very_strong_default_secret_key_for_dev_only' # 개발용 기본값, 실제 배포 시 반드시 변경

    # 데이터베이스 설정
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///board.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False

    # 파일 업로드 설정
    UPLOAD_FOLDER = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'static/uploads')
    ALLOWED_EXTENSIONS = {'png', 'jpg', 'jpeg', 'gif'}
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB 업로드 제한

    # TinyMCE API 키
    # 'no-api-key'를 사용하면 개발/테스트 목적으로 API 키 없이 사용 가능 (경고 메시지 표시됨)
    # 안정적인 사용 및 모든 기능을 위해서는 TinyMCE Cloud에서 무료 API 키를 발급받아 여기에 입력하세요.
    # 예: TINYMCE_API_KEY = 'your_actual_tinymce_api_key'
    TINYMCE_API_KEY = 'no-api-key'
3. models.py

Python

from datetime import datetime, timezone
from flask_sqlalchemy import SQLAlchemy
import re

db = SQLAlchemy()

def slugify(text):
    text = re.sub(r'[^\w\s-]', '', text, flags=re.UNICODE).strip().lower()
    text = re.sub(r'[-\s]+', '-', text, flags=re.UNICODE)
    return text

class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    slug = db.Column(db.String(200), unique=True, nullable=False)
    content = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, index=True, default=lambda: datetime.now(timezone.utc))

    def __init__(self, title, content, slug=None):
        self.title = title
        self.content = content
        if slug:
            self.slug = slug
        else:
            self.slug = self._generate_unique_slug(title)

    def _generate_unique_slug(self, title):
        base_slug = slugify(title)
        if not base_slug: # 제목이 특수문자 등으로만 이루어져 slug가 비는 경우
            base_slug = "post"

        slug = base_slug
        counter = 1
        # 루프 전에 Post 모델이 db 세션에 바인딩 되어 있도록 확인 필요
        # app.py에서 app 컨텍스트 내에서 호출되므로 문제 없음
        while Post.query.filter_by(slug=slug).first():
            slug = f"{base_slug}-{counter}"
            counter += 1
        return slug

    def __repr__(self):
        return f'<Post {self.title}>'
4. app.py

Python

import os
from flask import (
    Flask, render_template, request, redirect, url_for, flash, session, jsonify, abort
)
from werkzeug.utils import secure_filename
from datetime import datetime, timezone
import uuid
from functools import wraps

from config import Config
from models import db, Post

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)

# 이미지 업로드 폴더 생성 (존재하지 않을 경우)
if not os.path.exists(app.config['UPLOAD_FOLDER']):
    os.makedirs(app.config['UPLOAD_FOLDER'])

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

# --- 인증 관련 ---
def is_admin_logged_in():
    return session.get('is_admin_logged_in', False)

def admin_required(f):
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not is_admin_logged_in():
            flash('이 작업을 수행하려면 로그인이 필요합니다.', 'warning')
            return redirect(url_for('login', next=request.url))
        return f(*args, **kwargs)
    return decorated_function

@app.context_processor
def inject_admin_status():
    return dict(is_admin=is_admin_logged_in())

@app.context_processor
def inject_now():
    return {'now': datetime.utcnow}

@app.route('/login', methods=['GET', 'POST'])
def login():
    if is_admin_logged_in():
        return redirect(url_for('index'))

    if request.method == 'POST':
        password = request.form.get('password')
        if password == app.config['ADMIN_PASSWORD']:
            session['is_admin_logged_in'] = True
            session.permanent = True # 세션을 영구적으로 유지 (브라우저 닫아도 유지)
            app.permanent_session_lifetime = timedelta(days=7) # 예: 7일간 유지
            flash('로그인되었습니다.', 'success')
            next_url = request.args.get('next')
            return redirect(next_url or url_for('index'))
        else:
            flash('잘못된 비밀번호입니다.', 'danger')
    return render_template('login.html')

@app.route('/logout')
def logout():
    session.pop('is_admin_logged_in', None)
    flash('로그아웃되었습니다.', 'info')
    return redirect(url_for('index'))

# --- 라우트 ---
@app.route('/')
def index():
    page = request.args.get('page', 1, type=int)
    posts_pagination = Post.query.order_by(Post.timestamp.desc()).paginate(page=page, per_page=10, error_out=False)
    return render_template('index.html', posts_pagination=posts_pagination)

@app.route('/post/<string:slug>')
def view_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    return render_template('view_post.html', post=post)

@app.route('/new', methods=['GET', 'POST'])
@admin_required
def new_post():
    if request.method == 'POST':
        title = request.form.get('title')
        content = request.form.get('content')

        if not title or not content:
            flash('제목과 내용을 모두 입력해주세요.', 'warning')
            return render_template('edit_post.html', title=title, content=content, tinymce_api_key=app.config['TINYMCE_API_KEY'])

        try:
            post = Post(title=title, content=content)
            db.session.add(post)
            db.session.commit()
            flash('게시글이 성공적으로 작성되었습니다.', 'success')
            return redirect(url_for('view_post', slug=post.slug))
        except Exception as e:
            db.session.rollback()
            flash(f'게시글 작성 중 오류가 발생했습니다: {str(e)}', 'danger')
            app.logger.error(f"Error creating post: {e}")

    return render_template('edit_post.html', tinymce_api_key=app.config['TINYMCE_API_KEY'])

@app.route('/edit/<string:slug>', methods=['GET', 'POST'])
@admin_required
def edit_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    if request.method == 'POST':
        original_title = post.title # 슬러그 변경 여부 확인용
        post.title = request.form.get('title')
        post.content = request.form.get('content')

        if not post.title or not post.content:
            flash('제목과 내용을 모두 입력해주세요.', 'warning')
            # 폼에 현재 입력값을 유지하며 다시 렌더링
            return render_template('edit_post.html', post=post, title=post.title, content=post.content, tinymce_api_key=app.config['TINYMCE_API_KEY'])

        # 제목이 변경되었고, 새 제목으로 생성된 슬러그가 현재 슬러그와 다르면 슬러그 업데이트
        if original_title != post.title:
            new_slug = post._generate_unique_slug(post.title) # _generate_unique_slug는 인스턴스 메서드여야 함
            if new_slug != post.slug:
                post.slug = new_slug
        
        post.timestamp = datetime.now(timezone.utc) # 수정 시간 업데이트
        try:
            db.session.commit()
            flash('게시글이 성공적으로 수정되었습니다.', 'success')
            return redirect(url_for('view_post', slug=post.slug))
        except Exception as e:
            db.session.rollback()
            flash(f'게시글 수정 중 오류가 발생했습니다: {str(e)}', 'danger')
            app.logger.error(f"Error editing post {slug}: {e}")

    return render_template('edit_post.html', post=post, title=post.title, content=post.content, tinymce_api_key=app.config['TINYMCE_API_KEY'])

@app.route('/delete/<string:slug>', methods=['POST'])
@admin_required
def delete_post(slug):
    post = Post.query.filter_by(slug=slug).first_or_404()
    try:
        db.session.delete(post)
        db.session.commit()
        flash('게시글이 삭제되었습니다.', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'게시글 삭제 중 오류가 발생했습니다: {str(e)}', 'danger')
        app.logger.error(f"Error deleting post {slug}: {e}")
    return redirect(url_for('index'))

@app.route('/upload_image', methods=['POST'])
@admin_required
def upload_image():
    if 'file' not in request.files:
        return jsonify({'error': {'message': 'No file part in the request'}}), 400
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': {'message': 'No file selected for uploading'}}), 400

    if file and allowed_file(file.filename):
        original_filename = secure_filename(file.filename)
        # 파일 이름 중복을 피하기 위해 UUID와 원본 파일명 일부 사용
        filename_prefix = str(uuid.uuid4())[:8]
        filename = f"{filename_prefix}_{original_filename}"
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        # 파일명 중복 시 숫자 추가 (더 견고한 방식)
        counter = 1
        temp_filename = filename
        while os.path.exists(filepath):
            name, ext = os.path.splitext(original_filename)
            temp_filename = f"{filename_prefix}_{name}_{counter}{ext}"
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], temp_filename)
            counter += 1
        filename = temp_filename

        try:
            file.save(filepath)
            image_url = url_for('static', filename=f'uploads/{filename}', _external=True) # TinyMCE는 전체 URL을 선호할 수 있음
            return jsonify({'location': image_url})
        except Exception as e:
            app.logger.error(f"Image upload failed: {e}")
            return jsonify({'error': {'message': f'Image upload failed: {str(e)}'}}), 500
    else:
        return jsonify({'error': {'message': f'Allowed file types are {app.config["ALLOWED_EXTENSIONS"]}'}}), 400

# 애플리케이션 컨텍스트 내에서 데이터베이스 초기화 함수
def init_db_command():
    """Clear existing data and create new tables."""
    db.drop_all() # 기존 테이블 삭제 (주의: 데이터 삭제됨)
    db.create_all()
    print('Initialized the database.')

# Flask CLI 명령어 등록 (터미널에서 'flask init-db' 실행)
@app.cli.command('init-db')
def init_db_cli():
    init_db_command()

# 개발 중 편의를 위해 첫 요청 시 DB 자동 생성 (프로덕션에서는 사용하지 않는 것이 좋음)
@app.before_request
def create_tables_on_first_request():
    if not app.config.get('DB_INITIALIZED'): # 한번만 실행되도록 플래그 사용
        # 데이터베이스 파일이 존재하지 않을 때만 테이블 생성
        db_path = app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', '')
        if not os.path.exists(db_path):
            db.create_all()
            print("Database tables created.")
        app.config['DB_INITIALIZED'] = True


if __name__ == '__main__':
    # 데이터베이스 파일이 없으면 생성
    with app.app_context():
        db_path = app.config['SQLALCHEMY_DATABASE_URI'].replace('sqlite:///', '')
        if not os.path.exists(db_path):
             db.create_all()
             print(f"Database created at {db_path}")
        else:
            # 테이블이 존재하는지 확인하고, 없다면 생성 (더 안전한 방법)
            # 이것은 SQLAlchemy의 inspect 기능을 사용해야 하므로, 간단하게 위 로직으로 대체.
            # 필요하다면 sqlalchemy.inspect(db.engine).has_table("post") 등으로 확인
            pass

    app.run(debug=True, host='0.0.0.0', port=5000)
5. templates/base.html

HTML

<!doctype html>
<html lang="ko">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    <title>{% block title %}나의 게시판{% endblock %}</title>
    {% block head_extra %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light mb-4">
        <a class="navbar-brand" href="{{ url_for('index') }}">나의 플라스크 게시판</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('index') }}">홈</a>
                </li>
                {% if is_admin %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('new_post') }}">새 글 작성</a>
                </li>
                {% endif %}
            </ul>
            <ul class="navbar-nav">
                {% if is_admin %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('logout') }}">로그아웃</a>
                </li>
                {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="{{ url_for('login') }}">관리자 로그인</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <div class="container">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                    {{ message }}
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        {% block content %}{% endblock %}
    </div>

    <footer class="mt-5 mb-3 text-center text-muted">
        &copy; {{ now.year }} 나의 게시판
    </footer>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    {% block scripts_extra %}{% endblock %}
</body>
</html>
6. templates/index.html

HTML

{% extends "base.html" %}

{% block title %}게시글 목록 - 나의 게시판{% endblock %}

{% block content %}
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h1>게시글 목록</h1>
        {% if is_admin %}
            <a href="{{ url_for('new_post') }}" class="btn btn-primary">새 글 작성</a>
        {% endif %}
    </div>

    {% if posts_pagination.items %}
        <ul class="list-group mb-4">
            {% for post in posts_pagination.items %}
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <a href="{{ url_for('view_post', slug=post.slug) }}">
                        <h5>{{ post.title }}</h5>
                    </a>
                    <small class="text-muted">
                        작성일: {{ post.timestamp.strftime('%Y-%m-%d %H:%M') }} (UTC)
                    </small>
                </div>
                {% if is_admin %}
                <div>
                    <a href="{{ url_for('edit_post', slug=post.slug) }}" class="btn btn-sm btn-outline-secondary mr-2">수정</a>
                    <form action="{{ url_for('delete_post', slug=post.slug) }}" method="POST" style="display: inline;" onsubmit="return confirm('정말로 이 게시글을 삭제하시겠습니까?');">
                        <button type="submit" class="btn btn-sm btn-outline-danger">삭제</button>
                    </form>
                </div>
                {% endif %}
            </li>
            {% endfor %}
        </ul>

        {% if posts_pagination.pages > 1 %}
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item {% if not posts_pagination.has_prev %}disabled{% endif %}">
                    <a class="page-link" href="{{ url_for('index', page=posts_pagination.prev_num) if posts_pagination.has_prev else '#' }}">이전</a>
                </li>
                {% for page_num in posts_pagination.iter_pages(left_edge=1, right_edge=1, left_current=2, right_current=2) %}
                    {% if page_num %}
                        {% if posts_pagination.page == page_num %}
                            <li class="page-item active"><span class="page-link">{{ page_num }}</span></li>
                        {% else %}
                            <li class="page-item"><a class="page-link" href="{{ url_for('index', page=page_num) }}">{{ page_num }}</a></li>
                        {% endif %}
                    {% else %}
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    {% endif %}
                {% endfor %}
                <li class="page-item {% if not posts_pagination.has_next %}disabled{% endif %}">
                    <a class="page-link" href="{{ url_for('index', page=posts_pagination.next_num) if posts_pagination.has_next else '#' }}">다음</a>
                </li>
            </ul>
        </nav>
        {% endif %}

    {% else %}
        <p class="text-center">게시글이 없습니다. {% if is_admin %}<a href="{{ url_for('new_post') }}">첫 번째 글을 작성해보세요!</a>{% endif %}</p>
    {% endif %}
{% endblock %}
7. templates/view_post.html (변경 없음 - 이전 답변과 동일)

HTML

{% extends "base.html" %}

{% block title %}{{ post.title }} - 나의 게시판{% endblock %}

{% block content %}
    <article>
        <header class="mb-4">
            <h1>{{ post.title }}</h1>
            <div class="text-muted mb-2">
                작성일: {{ post.timestamp.strftime('%Y-%m-%d %H:%M') }} (UTC)
            </div>
            {% if is_admin %}
            <div>
                <a href="{{ url_for('edit_post', slug=post.slug) }}" class="btn btn-secondary btn-sm">수정</a>
                <form action="{{ url_for('delete_post', slug=post.slug) }}" method="POST" style="display: inline;" onsubmit="return confirm('정말로 이 게시글을 삭제하시겠습니까?');">
                    <button type="submit" class="btn btn-danger btn-sm">삭제</button>
                </form>
            </div>
            {% endif %}
        </header>
        <section class="post-content">
            {{ post.content | safe }} {# HTML 렌더링을 위해 safe 필터 사용 #}
        </section>
    </article>
    <hr>
    <a href="{{ url_for('index') }}" class="btn btn-outline-primary mt-3">목록으로 돌아가기</a>
{% endblock %}
8. templates/edit_post.html (TinyMCE 설정에서 images_upload_url을 url_for로 수정)

HTML

{% extends "base.html" %}

{% block title %}{% if post %}게시글 수정{% else %}새 글 작성{% endif %} - 나의 게시판{% endblock %}

{% block head_extra %}
    <script src="https://cdn.tiny.cloud/1/{{ tinymce_api_key }}/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
{% endblock %}

{% block content %}
    <h1>{% if post %}게시글 수정{% else %}새 글 작성{% endif %}</h1>
    <form method="POST" enctype="multipart/form-data"> {# 이미지 업로드를 위해 enctype 추가 #}
        <div class="form-group">
            <label for="title">제목</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ title or post.title or '' }}" required>
        </div>
        <div class="form-group">
            <label for="content">내용</label>
            <textarea class="form-control" id="content" name="content" rows="15">{{ content or post.content | default('', True) }}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">{% if post %}수정 완료{% else %}작성 완료{% endif %}</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">취소</a>
    </form>
{% endblock %}

{% block scripts_extra %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    tinymce.init({
        selector: 'textarea#content',
        plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons accordion',
        menubar: 'file edit view insert format tools table help',
        toolbar: 'undo redo | accordion accordionremove | blocks fontfamily fontsize | bold italic underline strikethrough | align numlist bullist | link image media | table | lineheight outdent indent| forecolor backcolor removeformat | charmap emoticons | code fullscreen preview | save print | pagebreak anchor codesample | ltr rtl',
        autosave_ask_before_unload: true,
        autosave_interval: '30s',
        autosave_prefix: '{path}{query}-{id}-',
        autosave_restore_when_empty: false,
        autosave_retention: '2m',
        image_advtab: true,
        height: 600,
        /* TinyMCE가 이미지를 업로드할 때 사용할 URL */
        images_upload_url: '{{ url_for("upload_image") }}',
        /*
        images_upload_handler: function (blobInfo, success, failure, progress) {
            var xhr, formData;
            xhr = new XMLHttpRequest();
            xhr.withCredentials = false;
            xhr.open('POST', '{{ url_for("upload_image") }}');

            xhr.upload.onprogress = function (e) {
                progress(e.loaded / e.total * 100);
            };

            xhr.onload = function() {
                var json;
                if (xhr.status === 403) {
                    failure('HTTP Error: ' + xhr.status, { remove: true });
                    return;
                }
                if (xhr.status < 200 || xhr.status >= 300) {
                    failure('HTTP Error: ' + xhr.status);
                    return;
                }
                json = JSON.parse(xhr.responseText);
                if (!json || typeof json.location != 'string') {
                    failure('Invalid JSON: ' + xhr.responseText);
                    return;
                }
                success(json.location);
            };
            xhr.onerror = function () {
                failure('Image upload failed due to a XHR Transport error. Code: ' + xhr.status);
            };
            formData = new FormData();
            formData.append('file', blobInfo.blob(), blobInfo.filename());
            xhr.send(formData);
        },
        */
        content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px } img { max-width: 100%; height: auto; }',
        automatic_uploads: true, // 자동으로 이미지 업로드
        file_picker_types: 'image', // 파일 선택기를 이미지에만 사용
        paste_data_images: true // 붙여넣기 시 이미지 자동 업로드
    });
});
</script>
{% endblock %}
9. templates/login.html (변경 없음 - 이전 답변과 동일)

HTML

{% extends "base.html" %}

{% block title %}관리자 로그인 - 나의 게시판{% endblock %}

{% block content %}
    <div class="row justify-content-center mt-5">
        <div class="col-md-6 col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h3 class="text-center">관리자 로그인</h3>
                </div>
                <div class="card-body">
                    <form method="POST" action="{{ url_for('login', next=request.args.get('next')) }}">
                        <div class="form-group">
                            <label for="password">비밀번호</label>
                            <input type="password" class="form-control" id="password" name="password" required autofocus>
                        </div>
                        <button type="submit" class="btn btn-primary btn-block">로그인</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
10. static/css/style.css (선택 사항)

CSS

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f8f9fa;
    padding-top: 56px; /* Navbar height */
}

.container {
    max-width: 960px;
}

.post-content img {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 15px 0;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.navbar-brand {
    font-weight: bold;
}

.list-group-item h5 {
    margin-bottom: 0.3rem;
}

.alert {
    margin-top: 1rem;
}

.card {
    border: none;
    box-shadow: 0 0.125rem 0.25rem rgba(0,0,0,.075);
}
실행 방법:

파일 저장: 위의 코드들을 flask_board 폴더 안에 해당 파일명으로 저장합니다.

flask_board/app.py
flask_board/config.py
flask_board/models.py
flask_board/requirements.txt
flask_board/static/css/style.css
flask_board/templates/base.html
flask_board/templates/index.html
flask_board/templates/view_post.html
flask_board/templates/edit_post.html
flask_board/templates/login.html
flask_board/static/uploads/ 폴더는 app.py 실행 시 자동으로 생성됩니다.
가상 환경 생성 및 활성화 (터미널에서 flask_board 폴더의 상위 디렉토리에서 실행):

Bash

python3 -m venv flask_board_env
source flask_board_env/bin/activate  # Linux/macOS
# flask_board_env\Scripts\activate    # Windows
flask_board 폴더로 이동:

Bash

cd flask_board
패키지 설치:

Bash

pip install -r requirements.txt
(최초 1회) 데이터베이스 초기화:
터미널에서 다음 명령을 실행합니다.

Bash

flask init-db
이 명령은 board.db라는 SQLite 데이터베이스 파일을 생성하고 필요한 테이블을 만듭니다.
(만약 app.py의 if __name__ == '__main__': 부분에 init_db_command() 호출을 추가했다면, python app.py 실행 시 자동으로 생성될 수 있습니다. 하지만 CLI 명령을 사용하는 것이 더 명시적입니다.)
app.py를 수정하여 before_request 훅에서 DB가 없으면 자동으로 생성하도록 코드를 추가했으므로, flask run만 해도 대부분의 경우 DB가 생성될 것입니다. 그래도 flask init-db를 명시적으로 실행하는 것이 좋습니다.

애플리케이션 실행:

Bash

flask run --host=0.0.0.0 --port=5000
또는 python app.py (개발 서버로 실행)

웹 브라우저에서 접속:
http://localhost:5000 또는 (같은 네트워크 내의 다른 컴퓨터에서 접속 시) http://<서버의_IP주소>:5000

중요 사항:

비밀번호: config.py에 'kkkwww'로 하드코딩 되어 있습니다. 보안상 매우 취약하므로 실제 운영 시에는 반드시 환경 변수 등을 사용해 안전하게 관리해야 합니다.
TinyMCE API 키: config.py의 TINYMCE_API_KEY가 'no-api-key'로 설정되어 있어 개발/테스트는 가능하나, 에디터 상단에 경고 메시지가 표시될 수 있습니다. 실제 사용 시에는 TinyMCE Cloud에서 무료 API 키를 발급받아 교체하는 것이 좋습니다.
이미지 관리: 업로드된 이미지는 static/uploads/ 폴더에 저장됩니다. 이 폴더가 웹 서버에서 접근 가능해야 이미지가 정상적으로 표시됩니다.