emsSource를 사용하는 동안 ListBox의 Items 컬렉션을 직접 수정하려고 하면 오류가 발생합니다. ItemsSource로 바인딩된 데이터를 수정해야 할 때는 해당 데이터 소스를 수정하고, ListBox에 반영되도록 해야 합니다.

다음은 ObservableCollection<T>을 사용하여 항목을 이동하고, INotifyPropertyChanged 인터페이스를 구현하여 CheckBox의 체크 상태를 토글하는 방법입니다:

먼저, ListBox의 ItemsSource에 바인딩할 ObservableCollection<T>을 정의합니다:

csharp
Copy code
public ObservableCollection<ColumnInfo> ColumnInfos { get; set; }
ColumnInfo 클래스는 INotifyPropertyChanged를 구현해야 합니다:

csharp
Copy code
public class ColumnInfo : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private string xName;
    public string XName
    {
        get { return xName; }
        set
        {
            if (xName != value)
            {
                xName = value;
                OnPropertyChanged(nameof(XName));
            }
        }
    }

    private bool isVisible;
    public bool IsVisible
    {
        get { return isVisible; }
        set
        {
            if (isVisible != value)
            {
                isVisible = value;
                OnPropertyChanged(nameof(IsVisible));
            }
        }
    }

    private int displayIndex;
    public int DisplayIndex
    {
        get { return displayIndex; }
        set
        {
            if (displayIndex != value)
            {
                displayIndex = value;
                OnPropertyChanged(nameof(DisplayIndex));
            }
        }
    }

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
그 다음, ListBox의 PreviewKeyDown 이벤트를 다음과 같이 처리합니다:

csharp
Copy code
private void ListBox_PreviewKeyDown(object sender, KeyEventArgs e)
{
    var listBox = sender as ListBox;
    if (listBox == null || listBox.SelectedItem == null)
        return;

    if (e.Key == Key.Up || e.Key == Key.Down)
    {
        var currentIndex = listBox.SelectedIndex;
        var newIndex = currentIndex + (e.Key == Key.Up ? -1 : 1);

        if (newIndex >= 0 && newIndex < ColumnInfos.Count)
        {
            var itemToMove = ColumnInfos[currentIndex];
            ColumnInfos.RemoveAt(currentIndex);
            ColumnInfos.Insert(newIndex, itemToMove);
            listBox.SelectedIndex = newIndex;
        }
        e.Handled = true;
    }
    else if (e.Key == Key.Space)
    {
        var selectedItem = listBox.SelectedItem as ColumnInfo;
        if (selectedItem != null)
        {
            selectedItem.IsVisible = !selectedItem.IsVisible;
        }
        e.Handled = true;
    }
}
이 코드는 ListBox의 ItemsSource로 설정된 ObservableCollection<ColumnInfo>를 직접 수정합니다. ColumnInfo의 속성 변경은 ListBox에 자동으로 반영됩니다.

이렇게 하면 ListBox의 항목을 키보드 화살표로 이동하고 스페이스바로 체크박스 상태를 토글할 수 있으며, Items 컬렉션을 직접 수정하는 것이 아니므로 'ItemsSource를 사용하는 동안 작업을 수행할 수 없다'는 오류가 발생하지 않습니다.