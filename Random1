

import React, { useState, useMemo, useEffect } from 'react';
import { ScratchpadItem } from '../types';
import { ModalConfig } from './ConfirmationModal';
import CodeEditor from './CodeEditor';

interface ScratchpadProps {
  scratchpads: ScratchpadItem[];
  setScratchpads: React.Dispatch<React.SetStateAction<ScratchpadItem[]>>;
  showModal: (config: ModalConfig) => void;
  onConvertToTask: (item: { id: string; content: string; type: 'Scratchpad' }) => void;
  apiCall: (endpoint: string, options?: RequestInit) => Promise<any>;
}

const Scratchpad: React.FC<ScratchpadProps> = ({ scratchpads, setScratchpads, showModal, onConvertToTask, apiCall }) => {
  const [selectedPadId, setSelectedPadId] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const sortedScratchpads = useMemo(() => {
    return [...scratchpads].sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
  }, [scratchpads]);
  
  const filteredPads = useMemo(() => {
    if (!searchTerm.trim()) {
      return sortedScratchpads;
    }
    const lowercasedTerm = searchTerm.toLowerCase();
    const matchingIds = new Set<string>();
    const padMap = new Map<string, ScratchpadItem>(scratchpads.map(p => [p.id, p]));

    for (const pad of scratchpads) {
        if (pad.title.toLowerCase().includes(lowercasedTerm) || pad.content.toLowerCase().includes(lowercasedTerm)) {
            matchingIds.add(pad.id);
        }
    }
    if (matchingIds.size === 0) return [];

    const visibleIds = new Set<string>(matchingIds);
    for (const id of matchingIds) {
        let current = padMap.get(id);
        while (current && current.parentId) {
            visibleIds.add(current.parentId);
            current = padMap.get(current.parentId);
        }
    }
    return sortedScratchpads.filter(p => visibleIds.has(p.id));
  }, [searchTerm, sortedScratchpads, scratchpads]);

  const selectedPad = useMemo(() => {
    return scratchpads.find(p => p.id === selectedPadId);
  }, [scratchpads, selectedPadId]);

  useEffect(() => {
    if (sortedScratchpads.length > 0 && !selectedPadId) {
        setSelectedPadId(sortedScratchpads[0].id);
    }
    if (sortedScratchpads.length === 0) {
        setSelectedPadId(null);
    }
  }, [sortedScratchpads, selectedPadId]);

  const handleSelectPad = (pad: ScratchpadItem) => {
    // Optimistic update for view count, not critical if it fails
    apiCall(`/scratchpads/${pad.id}`, { method: 'PUT', body: JSON.stringify({ viewCount: (pad.viewCount || 0) + 1 })})
        .then(updatedPad => {
            // To prevent reordering on click, we only update the viewCount and leave updatedAt untouched.
            setScratchpads(prev => prev.map(p => p.id === pad.id ? { ...p, viewCount: updatedPad.viewCount } : p))
        });
    setSelectedPadId(pad.id);
  };

  const handleUpdate = (id: string, field: 'title' | 'content', value: string) => {
    // Optimistic UI update
    setScratchpads(prev => prev.map(p => 
        p.id === id 
        ? { ...p, [field]: value, updatedAt: new Date().toISOString() } 
        : p
    ));
    // Debounced API call could be used here for performance
    apiCall(`/scratchpads/${id}`, { method: 'PUT', body: JSON.stringify({ [field]: value })})
        .catch(() => { /* Revert or show error */});
  };

  const handleAddNew = (parentId: string | null = null) => {
    if (parentId && (scratchpads.find(p => p.id === parentId)?.depth || 0) >= 4) {
        showModal({ type: 'alert', title: 'Depth Limit', message: 'Cannot create items more than 5 levels deep.' });
        return;
    }
    const newPadData = {
      parentId,
      depth: parentId ? (scratchpads.find(p => p.id === parentId)?.depth || 0) + 1 : 0,
      title: 'New Scratchpad',
      content: '',
      language: 'jsx',
      priority: 0,
      isTask: false,
    };
    apiCall('/scratchpads', { method: 'POST', body: JSON.stringify(newPadData) })
        .then(newPad => {
            setScratchpads(prev => [newPad, ...prev]);
            setSelectedPadId(newPad.id);
        });
  };

  const handleDelete = (id: string) => {
    showModal({
      type: 'confirm',
      title: 'Delete Scratchpad',
      message: 'Are you sure you want to delete this scratchpad and all its children?',
      danger: true,
      onConfirm: () => {
        apiCall(`/scratchpads/${id}`, { method: 'DELETE' })
            .then(() => {
                // To handle cascade deletes properly, refetching is the safest
                apiCall('/scratchpads').then(setScratchpads);
                if (selectedPadId === id) { // This might be brittle if children are selected
                    setSelectedPadId(null);
                }
            });
      }
    });
  };
  
  const renderTree = (items: ScratchpadItem[], parentId: string | null) => {
    const children = items.filter(item => item.parentId === parentId);
    if (children.length === 0) return null;

    return (
      <ul className={parentId ? "ml-4 pl-4 border-l border-gray-700" : ""}>
        {children.map(item => (
          <li key={item.id} className="my-1">
            <div 
              onClick={() => handleSelectPad(item)}
              className={`p-2 rounded cursor-pointer text-sm ${selectedPadId === item.id ? 'bg-accent text-white' : 'hover:bg-primary'}`}
            >
              {item.title}
            </div>
            {renderTree(items, item.id)}
          </li>
        ))}
      </ul>
    );
  };

  return (
    <div className="flex gap-6 h-[calc(100vh-120px)] animate-fade-in">
      <div className="w-1/3 bg-secondary p-4 rounded-xl shadow-lg flex flex-col">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Scratchpads</h2>
          <button onClick={() => handleAddNew()} className="px-2 py-1 text-xs bg-accent text-white rounded hover:brightness-125">+ New</button>
        </div>
        <input
            type="text"
            placeholder="Search scratchpads..."
            value={searchTerm}
            onChange={e => setSearchTerm(e.target.value)}
            className="w-full p-2 mb-4 bg-primary border border-gray-700 rounded text-sm"
        />
        <div className="overflow-y-auto">
            {renderTree(filteredPads, null)}
        </div>
      </div>
      <div className="w-2/3 bg-secondary p-6 rounded-xl shadow-lg flex flex-col">
        {selectedPad ? (
          <>
            <div className="flex justify-between items-center mb-4">
              <input 
                type="text"
                value={selectedPad.title}
                onChange={(e) => handleUpdate(selectedPad.id, 'title', e.target.value)}
                className="text-2xl font-bold bg-transparent border-b-2 border-transparent focus:border-accent focus:outline-none w-full"
              />
              <div className="flex gap-2 flex-shrink-0 ml-4">
                 <button onClick={() => onConvertToTask({ id: selectedPad.id, content: selectedPad.content, type: 'Scratchpad' })} disabled={selectedPad.isTask} className="px-3 py-1 text-xs font-semibold rounded-md transition-all duration-300 bg-gradient-to-br from-green-600 to-green-800 text-white hover:brightness-125 disabled:opacity-50">{selectedPad.isTask ? 'âœ“ Task' : 'Make Task'}</button>
                 <button onClick={() => handleAddNew(selectedPadId)} className="px-3 py-1 text-xs font-semibold rounded-md transition-all duration-300 bg-gradient-to-br from-secondary to-primary border border-gray-600 text-gray-300 hover:border-accent hover:text-white">+ Add Child</button>
                 <button onClick={() => handleDelete(selectedPadId!)} className="px-3 py-1 text-xs font-semibold rounded-md transition-all duration-300 bg-gradient-to-br from-red-600 to-red-800 text-white hover:brightness-125">Delete</button>
              </div>
            </div>
            <div className="relative w-full flex-grow">
                 <CodeEditor
                    value={selectedPad.content}
                    onValueChange={(v) => handleUpdate(selectedPad.id, 'content', v)}
                    language={selectedPad.language || 'jsx'}
                    showModal={showModal}
                 />
            </div>
          </>
        ) : (
          <div className="flex items-center justify-center h-full text-gray-500">
            <p>Select a scratchpad or create a new one.</p>
          </div>
        )}
      </div>
    </div>
  );
};