using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;
        public List<RangeDataPoint> LModelData { get; private set; }
        public List<RangeDataPoint> RModelData { get; private set; }

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            ProcessData();
            InitializeLineChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void ProcessData()
        {
            // L 모델 데이터 처리
            LModelData = allData
                .Where(d => d.ModelName.EndsWith("L"))
                .GroupBy(d => d.Timestamp)
                .Select(g => new RangeDataPoint
                {
                    Timestamp = g.Key,
                    MinValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Min(),
                    MaxValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Max()
                }).ToList();

            // R 모델 데이터 처리
            RModelData = allData
                .Where(d => d.ModelName.EndsWith("R"))
                .GroupBy(d => d.Timestamp)
                .Select(g => new RangeDataPoint
                {
                    Timestamp = g.Key,
                    MinValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Min(),
                    MaxValue = g.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).Max()
                }).ToList();
        }

        private void InitializeLineChart()
        {
            var diagram = LineChart.Diagram as XYDiagram2D;
            if (diagram == null)
                return;

            diagram.Series.Clear();

            // Y축 범위 설정
            diagram.AxisY.WholeRange.SetMinMaxValues(-1.0, 1.0);

            // L 모델 영역 차트 추가
            var lRangeAreaSeries = new RangeAreaSeries2D
            {
                DisplayName = "L 모델 범위",
                DataSource = LModelData,
                ArgumentDataMember = "Timestamp",
                Value1DataMember = "MinValue",
                Value2DataMember = "MaxValue",
                Transparency = 0.5,
                Brush = new SolidColorBrush(Color.FromArgb(128, 173, 216, 230)) // 연한 파란색
            };
            diagram.Series.Add(lRangeAreaSeries);

            // R 모델 영역 차트 추가
            var rRangeAreaSeries = new RangeAreaSeries2D
            {
                DisplayName = "R 모델 범위",
                DataSource = RModelData,
                ArgumentDataMember = "Timestamp",
                Value1DataMember = "MinValue",
                Value2DataMember = "MaxValue",
                Transparency = 0.5,
                Brush = new SolidColorBrush(Color.FromArgb(128, 255, 160, 122)) // 연한 빨간색
            };
            diagram.Series.Add(rRangeAreaSeries);

            // L 모델 선 차트 추가
            AddLineSeries(diagram, LModelData, "L 모델", new[] { Colors.Blue, Colors.SkyBlue, Colors.DodgerBlue, Colors.CornflowerBlue, Colors.LightBlue });

            // R 모델 선 차트 추가
            AddLineSeries(diagram, RModelData, "R 모델", new[] { Colors.Red, Colors.OrangeRed, Colors.Crimson, Colors.IndianRed, Colors.LightCoral });
        }

        private void AddLineSeries(XYDiagram2D diagram, List<RangeDataPoint> data, string modelName, Color[] colors)
        {
            for (int i = 1; i <= 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"{modelName} MP{i}",
                    DataSource = data,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i}",
                    MarkerVisible = true,
                    LineStyle = new LineStyle { Thickness = 2 },
                    Brush = new SolidColorBrush(colors[i - 1]),
                    MarkerBrush = new SolidColorBrush(colors[i - 1])
                };
                diagram.Series.Add(series);
            }
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class RangeDataPoint
    {
        public DateTime Timestamp { get; set; }
        public double MinValue { get; set; }
        public double MaxValue { get; set; }
    }