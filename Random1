, 알겠습니다. 시작하시기 편하도록 모든 코드와 설정 과정을 처음부터 끝까지, 단 하나의 누락도 없이 하나의 답변에 정리해 드리겠습니다.

아래 순서대로 따라 하시면 전체 시스템이 완성됩니다.

## 1단계: 프로젝트 생성 및 NuGet 패키지 설치
Visual Studio를 열고 빈 솔루션을 하나 만듭니다.

솔루션에 아래 두 개의 프로젝트를 추가합니다.

Windows 서비스(.NET Framework)

프로젝트 이름: TimestampUpdaterService

.NET Framework 버전: 4.7.2

WPF 앱(.NET Framework)

프로젝트 이름: MachineDataViewer

.NET Framework 버전: 4.7.2

NuGet 패키지 설치

**'도구' -> 'NuGet 패키지 관리자' -> '패키지 관리자 콘솔'**을 엽니다.

TimestampUpdaterService 프로젝트에 아래 명령어들을 실행합니다.

PowerShell

Install-Package Microsoft.AspNet.SignalR.Core -ProjectName TimestampUpdaterService
Install-Package Microsoft.AspNet.SignalR.SelfHost -ProjectName TimestampUpdaterService
Install-Package Microsoft.Owin.Host.HttpListener -ProjectName TimestampUpdaterService
Install-Package Microsoft.Owin.Hosting -ProjectName TimestampUpdaterService
Install-Package Owin -ProjectName TimestampUpdaterService
MachineDataViewer 프로젝트에 아래 명령어를 실행합니다.

PowerShell

Install-Package Microsoft.AspNet.SignalR.Client -ProjectName MachineDataViewer
## 2단계: 데이터베이스 스크립트 실행
**SQL Server Management Studio (SSMS)**에서 아래 쿼리를 한 번에 실행하여 테이블 생성, 샘플 데이터 삽입, 권한 설정을 모두 완료하세요.

⚠️ 주의: 아래 3개의 [...] 부분을 본인 환경에 맞게 수정해야 합니다.

SQL

-- ======================================================================
-- 1. 테이블 생성
-- ======================================================================
CREATE TABLE LineTable (
    IPAddress VARCHAR(50) PRIMARY KEY,
    LineName VARCHAR(100) NOT NULL UNIQUE
);
GO

CREATE TABLE MachineData (
    LineName VARCHAR(100) PRIMARY KEY,
    mc1 BIGINT NULL, mc2 BIGINT NULL, mc3 BIGINT NULL, mc4 BIGINT NULL, mc5 BIGINT NULL,
    mc6 BIGINT NULL, mc7 BIGINT NULL, mc8 BIGINT NULL, mc9 BIGINT NULL, mc10 BIGINT NULL,
    mc11 BIGINT NULL, mc12 BIGINT NULL, mc13 BIGINT NULL, mc14 BIGINT NULL, mc15 BIGINT NULL,
    LastUpdated DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_MachineData_LineName FOREIGN KEY (LineName) REFERENCES LineTable(LineName)
);
GO

-- ======================================================================
-- 2. 샘플 데이터 삽입 (서비스가 실행될 PC의 IP로 변경하세요)
-- ======================================================================
INSERT INTO LineTable (IPAddress, LineName) VALUES ('192.168.1.10', 'LINE_A');
GO
INSERT INTO MachineData (LineName) VALUES ('LINE_A');
GO

-- ======================================================================
-- 3. SignalR 사용 시 이 부분은 필수는 아니지만, DB 직접 조회도 고려하여 설정
-- (DB 이름을 본인의 데이터베이스 이름으로 변경하세요)
-- ======================================================================
ALTER DATABASE [YourDatabaseName] SET ENABLE_BROKER;
GO

-- ======================================================================
-- 4. DB 접속 계정에 권한 부여
-- (DB 접속 유저 이름을 본인의 계정으로 변경하세요)
-- ======================================================================
GRANT SUBSCRIBE QUERY NOTIFICATIONS TO [YourDbUserName];
GRANT SELECT, UPDATE, INSERT ON LineTable TO [YourDbUserName];
GRANT SELECT, UPDATE, INSERT ON MachineData TO [YourDbUserName];
GO

PRINT 'Database setup complete.';

## 3단계: Windows 서비스 전체 코드
TimestampUpdaterService 프로젝트에 아래 파일들을 생성하고 코드를 그대로 복사/붙여넣기 하세요.

App.config
DB 연결 문자열과 SignalR 주소를 설정합니다. connectionStrings 부분을 본인 환경에 맞게 수정하세요.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <connectionStrings>
        <add name="DBContext" 
             connectionString="Server=YOUR_DB_SERVER;Database=YOUR_DB_NAME;User Id=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;" 
             providerName="System.Data.SqlClient"/>
    </connectionStrings>
    <appSettings>
        <add key="SignalRUrl" value="http://localhost:8313"/>
        <add key="TargetSystemIP" value="TARGET_SHARED_FOLDER_IP"/>
    </appSettings>
</configuration>
Startup.cs (새 클래스 파일 추가)
C#

using Microsoft.Owin.Cors;
using Owin;

namespace TimestampUpdaterService
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.UseCors(CorsOptions.AllowAll);
            app.MapSignalR();
        }
    }
}
MachineDataHub.cs (새 클래스 파일 추가)
C#

using Microsoft.AspNet.SignalR;
using System.Threading.Tasks;

namespace TimestampUpdaterService
{
    public class MachineDataHub : Hub
    {
        public Task Subscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Add(Context.ConnectionId, groupName);
        }

        public Task Unsubscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Remove(Context.ConnectionId, groupName);
        }
    }
}
Service1.cs -> TimestampService.cs로 이름 변경 후 아래 코드로 전체 대체
C#

using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Hosting;
using System;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.ServiceProcess;
using System.Timers;

namespace TimestampUpdaterService
{
    public partial class TimestampService : ServiceBase
    {
        private System.Timers.Timer _timer;
        private string _myLineName;
        private string _connectionString;
        private string _signalRUrl;
        private string _targetSystemIp;
        private IDisposable _signalR;

        public TimestampService()
        {
            InitializeComponent();
            this.ServiceName = "TimestampUpdaterService";
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["DBContext"].ConnectionString;
                _signalRUrl = ConfigurationManager.AppSettings["SignalRUrl"];
                _targetSystemIp = ConfigurationManager.AppSettings["TargetSystemIP"];

                _signalR = WebApp.Start<Startup>(url: _signalRUrl);
                WriteLog($"SignalR host started at {_signalRUrl}");

                _myLineName = GetMyLineName();
                if (string.IsNullOrEmpty(_myLineName))
                {
                    WriteLog("LineTable에서 LineName을 찾을 수 없습니다. 서비스를 중지합니다.", true);
                    this.Stop();
                    return;
                }
                EnsureMachineDataRowExists();
                WriteLog($"서비스가 '{_myLineName}' 라인으로 시작됩니다.");

                _timer = new System.Timers.Timer(30 * 1000); // 30초 주기
                _timer.Elapsed += OnTimerElapsed;
                _timer.AutoReset = true;
                _timer.Start();

                OnTimerElapsed(null, null); // 시작 시 1회 실행
            }
            catch (Exception ex)
            {
                WriteLog($"서비스 시작 오류: {ex.Message}\n{ex.StackTrace}", true);
                throw;
            }
        }

        protected override void OnStop()
        {
            _timer?.Stop();
            _timer?.Dispose();
            _signalR?.Dispose();
            WriteLog("서비스가 중지되었습니다.");
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            for (int i = 1; i <= 15; i++)
            {
                string machineName = $"mc{i}";
                long? timestamp = FindLatestTimestampForMachine(_targetSystemIp, i);
                UpdateDatabaseAndNotify(machineName, timestamp);
            }
        }

        private void UpdateDatabaseAndNotify(string machineName, long? timestamp)
        {
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    string query = $"UPDATE MachineData SET {machineName} = @Timestamp, LastUpdated = GETDATE() WHERE LineName = @LineName";
                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@Timestamp", (object)timestamp ?? DBNull.Value);
                        command.Parameters.AddWithValue("@LineName", _myLineName);
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }
                var hubContext = GlobalHost.ConnectionManager.GetHubContext<MachineDataHub>();
                string groupName = $"{_myLineName}-{machineName}";
                hubContext.Clients.Group(groupName).ReceiveUpdate(machineName, timestamp);
            }
            catch (Exception ex)
            {
                WriteLog($"DB 업데이트 및 알림 오류 ({machineName}): {ex.Message}", true);
            }
        }

        private void WriteLog(string message, bool isError = false)
        {
            EventLog.WriteEntry(this.ServiceName, message, isError ? EventLogEntryType.Error : EventLogEntryType.Information);
        }

        #region Helper Methods
        private long? FindLatestTimestampForMachine(string targetIp, int machineNumber)
        {
            try
            {
                var machinePath = new DirectoryInfo($"\\\\{targetIp}\\othersystem\\proviewer\\data\\machine{machineNumber}");
                if (!machinePath.Exists) return null;
                var latestLaneDir = machinePath.EnumerateDirectories("Lane*", SearchOption.AllDirectories).OrderByDescending(d => d.LastWriteTimeUtc).FirstOrDefault();
                return latestLaneDir != null ? (long?)new DateTimeOffset(latestLaneDir.LastWriteTimeUtc).ToUnixTimeSeconds() : null;
            }
            catch { return null; }
        }

        private string GetMyLineName()
        {
            string localIp = GetLocalIPAddress();
            using (var conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("SELECT LineName FROM LineTable WHERE IPAddress = @LocalIP", conn);
                cmd.Parameters.AddWithValue("@LocalIP", localIp);
                return cmd.ExecuteScalar()?.ToString();
            }
        }
        private void EnsureMachineDataRowExists()
        {
            using (var conn = new SqlConnection(_connectionString))
            {
                conn.Open();
                var cmd = new SqlCommand("IF NOT EXISTS (SELECT 1 FROM MachineData WHERE LineName = @LineName) INSERT INTO MachineData (LineName) VALUES (@LineName)", conn);
                cmd.Parameters.AddWithValue("@LineName", _myLineName);
                cmd.ExecuteNonQuery();
            }
        }
        private string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork) return ip.ToString();
            }
            return "127.0.0.1";
        }
        #endregion
    }
}
ProjectInstaller.cs 추가
솔루션 탐색기에서 TimestampService.cs를 더블클릭하여 디자인 보기로 엽니다.

회색 배경에서 **마우스 오른쪽 클릭 -> '설치 관리자 추가'**를 선택합니다.

ProjectInstaller.cs 파일이 생성됩니다. 이 파일의 코드를 아래 코드로 대체합니다.

C#

using System.ComponentModel;
using System.Configuration.Install;
using System.ServiceProcess;

namespace TimestampUpdaterService
{
    [RunInstaller(true)]
    public partial class ProjectInstaller : Installer
    {
        private ServiceProcessInstaller serviceProcessInstaller;
        private ServiceInstaller serviceInstaller;

        public ProjectInstaller()
        {
            // InitializeComponent(); // 이 줄은 디자이너가 관리하므로 직접 쓰지 않음

            this.serviceProcessInstaller = new ServiceProcessInstaller();
            this.serviceInstaller = new ServiceInstaller();

            // ServiceProcessInstaller 설정
            this.serviceProcessInstaller.Account = ServiceAccount.LocalSystem;
            this.serviceProcessInstaller.Password = null;
            this.serviceProcessInstaller.Username = null;

            // ServiceInstaller 설정
            this.serviceInstaller.Description = "폴더 시간을 DB에 업데이트하고 SignalR로 클라이언트에 알림";
            this.serviceInstaller.DisplayName = "Timestamp Updater Service";
            this.serviceInstaller.ServiceName = "TimestampUpdaterService";
            this.serviceInstaller.StartType = ServiceStartMode.Automatic;

            // Installers 컬렉션에 추가
            this.Installers.AddRange(new Installer[] {
                this.serviceProcessInstaller,
                this.serviceInstaller
            });
        }
    }
}
## 4단계: WPF 애플리케이션 전체 코드
MachineDataViewer 프로젝트에 아래 파일들을 생성하고 코드를 그대로 복사/붙여넣기 하세요.

App.config
서비스의 SignalR 주소를 설정합니다. appSettings 부분을 서비스와 동일한 주소로 설정하세요.

XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <appSettings>
        <add key="SignalRUrl" value="http://localhost:8313"/>
    </appSettings>
</configuration>
MachineInfo.cs (새 클래스 파일 추가)
C#

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace MachineDataViewer
{
    public class MachineInfo : INotifyPropertyChanged
    {
        public string MachineName { get; set; }
        private bool _isSubscribed;
        public bool IsSubscribed
        {
            get => _isSubscribed;
            set { _isSubscribed = value; OnPropertyChanged(); }
        }
        private string _lastUpdated;
        public string LastUpdated
        {
            get => _lastUpdated;
            set { _lastUpdated = value; OnPropertyChanged(); }
        }
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
MainViewModel.cs (새 클래스 파일 추가)
C#

using Microsoft.AspNet.SignalR.Client;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;

namespace MachineDataViewer
{
    public class MainViewModel : INotifyPropertyChanged, IDisposable
    {
        private HubConnection _hubConnection;
        private IHubProxy _hubProxy;

        public ObservableCollection<MachineInfo> Machines { get; set; }
        private string _lineNameToWatch = "LINE_A";
        private string _connectionStatus = "Connecting...";
        public string ConnectionStatus
        {
            get => _connectionStatus;
            set { _connectionStatus = value; OnPropertyChanged(); }
        }

        public MainViewModel()
        {
            Machines = new ObservableCollection<MachineInfo>();
            for (int i = 1; i <= 15; i++)
            {
                var machineInfo = new MachineInfo { MachineName = $"mc{i}", LastUpdated = "N/A" };
                machineInfo.PropertyChanged += OnMachineSubscriptionChanged;
                Machines.Add(machineInfo);
            }
            ConnectToServerAsync();
        }

        private async void ConnectToServerAsync()
        {
            string url = ConfigurationManager.AppSettings["SignalRUrl"];
            _hubConnection = new HubConnection(url);
            _hubProxy = _hubConnection.CreateHubProxy("MachineDataHub");

            _hubProxy.On<string, long?>("ReceiveUpdate", (machineName, timestamp) =>
            {
                Application.Current.Dispatcher.Invoke(() =>
                {
                    var targetMachine = Machines.FirstOrDefault(m => m.MachineName == machineName);
                    if (targetMachine != null)
                    {
                        targetMachine.LastUpdated = timestamp.HasValue ?
                            DateTimeOffset.FromUnixTimeSeconds(timestamp.Value).LocalDateTime.ToString("HH:mm:ss")
                            : "No Data";
                    }
                });
            });

            try
            {
                await _hubConnection.Start();
                ConnectionStatus = "Connected";
            }
            catch (Exception) { ConnectionStatus = "Connection Failed"; }
        }

        private async void OnMachineSubscriptionChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(MachineInfo.IsSubscribed) && _hubConnection.State == ConnectionState.Connected)
            {
                var machine = sender as MachineInfo;
                if (machine.IsSubscribed)
                {
                    await _hubProxy.Invoke("Subscribe", _lineNameToWatch, machine.MachineName);
                }
                else
                {
                    await _hubProxy.Invoke("Unsubscribe", _lineNameToWatch, machine.MachineName);
                }
            }
        }

        public void Dispose()
        {
            _hubConnection?.Dispose();
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
        }
    }
}
MainWindow.xaml
XML

<Window x:Class="MachineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MachineDataViewer"
        Title="Machine Data Viewer" Height="550" Width="400">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBlock Text="Line to Watch: " VerticalAlignment="Center"/>
            <TextBox Text="LINE_A" Width="150" VerticalAlignment="Center" IsReadOnly="True"/>
        </StackPanel>
        
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Machines}">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <UniformGrid Columns="1"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Border BorderBrush="LightGray" BorderThickness="1" Padding="8" Margin="0,2">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <CheckBox IsChecked="{Binding IsSubscribed, Mode=TwoWay}" VerticalAlignment="Center"/>
                                <TextBlock Grid.Column="1" Text="{Binding MachineName}" FontWeight="Bold" Margin="10,0" VerticalAlignment="Center" FontSize="14"/>
                                <TextBlock Grid.Column="2" Text="{Binding LastUpdated}" Foreground="DarkSlateBlue" VerticalAlignment="Center" FontSize="14" MinWidth="80" TextAlignment="Right"/>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
        
        <StatusBar Grid.Row="2" Margin="0,5,0,0">
            <StatusBarItem>
                <TextBlock Text="{Binding ConnectionStatus}"/>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
MainWindow.xaml.cs
앱 종료 시 ViewModel의 Dispose를 호출하여 SignalR 연결을 정리합니다.

C#

using System.Windows;

namespace MachineDataViewer
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.Closing += (s, e) => (this.DataContext as MainViewModel)?.Dispose();
        }
    }
}
## 5단계: 빌드 및 최종 실행
솔루션 전체를 빌드합니다 (F6 또는 Ctrl+Shift+B).

관리자 권한으로 명령 프롬프트(CMD)를 실행하고 아래 명령어를 입력하여 서비스가 포트를 사용할 수 있도록 권한을 줍니다.

DOS

netsh http add urlacl url=http://*:8313/ user="NT AUTHORITY\SYSTEM"
Visual Studio 개발자 명령 프롬프트를 관리자 권한으로 실행합니다.

서비스 프로젝트의 빌드 경로로 이동합니다.

DOS

cd C:\path\to\your\solution\TimestampUpdaterService\bin\Debug
서비스를 설치하고 시작합니다.

DOS

InstallUtil.exe TimestampUpdaterService.exe
net start TimestampUpdaterService
MachineDataViewer 프로젝트를 Visual Studio에서 **시작(F5)**하거나 빌드된 exe 파일을 직접 실행합니다.

WPF 앱 하단 상태 표시줄에 **"Connected"**가 표시되는지 확인합니다.