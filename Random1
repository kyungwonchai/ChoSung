아래는 요구사항에 맞춰서 수정된 파일들입니다. 센서 감지 방식은 마우스 오버로 처리하고, 로그 리스트에는 센서 감지 로그를 남기지 않습니다. 대신, 센서 상태를 시각적으로 표현하기 위해 **램프(동그라미 도형)**를 사용하여, 감지되면 녹색, 감지 안 되면 회색으로 표시합니다.

MainWindow.xaml (UI 수정)
xml
코드 복사
<Window x:Class="PlcSimulation.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="PLC Simulator" Height="500" Width="600">
    <Grid>
        <!-- 통신 로그를 표시하는 리스트 박스 -->
        <ListBox Name="LogListBox" Width="550" Height="300" Margin="10,10,0,0"/>

        <!-- 첫 번째 센서 (R520) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="10,320,0,0">
            <TextBlock Text="Sensor 1 (R520)" HorizontalAlignment="Center"/>
            <Ellipse Name="SensorLamp1" Width="30" Height="30" Fill="Gray" 
                     MouseEnter="Sensor1_MouseEnter" MouseLeave="Sensor1_MouseLeave"/>
        </StackPanel>

        <!-- 두 번째 센서 (R521) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="170,320,0,0">
            <TextBlock Text="Sensor 2 (R521)" HorizontalAlignment="Center"/>
            <Ellipse Name="SensorLamp2" Width="30" Height="30" Fill="Gray" 
                     MouseEnter="Sensor2_MouseEnter" MouseLeave="Sensor2_MouseLeave"/>
        </StackPanel>

        <!-- 세 번째 센서 (R522) 영역과 램프 -->
        <StackPanel Orientation="Vertical" Margin="330,320,0,0">
            <TextBlock Text="Sensor 3 (R522)" HorizontalAlignment="Center"/>
            <Ellipse Name="SensorLamp3" Width="30" Height="30" Fill="Gray" 
                     MouseEnter="Sensor3_MouseEnter" MouseLeave="Sensor3_MouseLeave"/>
        </StackPanel>
    </Grid>
</Window>
MainWindow.xaml.cs (센서 및 램프 처리 로직)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Windows.Media; // 색상 처리를 위해 필요
using System.Windows.Threading;
using System.Collections.Generic;

namespace PlcSimulation
{
    public partial class MainWindow : Window
    {
        private PlcSimulator _plcSimulator;  // PLC 시뮬레이터 객체
        private SerialPort _serialPort;      // 시리얼 통신 객체
        private DispatcherTimer _timer;      // 상태 업데이트 타이머
        private List<string> _logList;       // 로그 리스트 (최대 50개)

        public MainWindow()
        {
            InitializeComponent();

            // PLC 시뮬레이터 초기화
            _plcSimulator = new PlcSimulator();

            // 로그 리스트 초기화 (최대 50개 유지)
            _logList = new List<string>();

            // 시리얼 포트 설정 (COM19, 9600 Baudrate, 기본 통신 설정)
            _serialPort = new SerialPort("COM19", 9600)
            {
                DataBits = 8,
                Parity = Parity.None,
                StopBits = StopBits.One,
                Handshake = Handshake.None
            };

            // 시리얼 포트 데이터 수신 이벤트 핸들러 등록
            _serialPort.DataReceived += SerialPort_DataReceived;

            // 시리얼 포트 열기
            OpenSerialPort();

            // 타이머 설정 (1초마다 상태 업데이트)
            _timer = new DispatcherTimer();
            _timer.Interval = TimeSpan.FromSeconds(1);
            _timer.Tick += Timer_Tick;
            _timer.Start();
        }

        // 시리얼 포트 열기 메서드
        private void OpenSerialPort()
        {
            try
            {
                if (!_serialPort.IsOpen)
                {
                    _serialPort.Open();
                    AddLog("PLC Simulator connected to COM19.");
                }
            }
            catch (Exception ex)
            {
                AddLog("Error opening COM port: " + ex.Message);
            }
        }

        // 시리얼 포트 데이터 수신 처리
        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                string receivedData = _serialPort.ReadLine();  // 데이터 수신
                Dispatcher.Invoke(() => ProcessCommand(receivedData));  // UI 스레드에서 명령 처리
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => AddLog("Error reading from serial port: " + ex.Message));
            }
        }

        // 명령을 처리하고 응답하는 메서드
        private void ProcessCommand(string command)
        {
            string response = _plcSimulator.ProcessCommand(command);

            // 응답을 시리얼 포트로 전송
            if (_serialPort.IsOpen)
            {
                _serialPort.WriteLine(response);
            }

            // 로그에 기록
            AddLog($"Received: {command}, Response: {response}");
        }

        // 주기적으로 실행되는 타이머 이벤트 (UI 업데이트)
        private void Timer_Tick(object sender, EventArgs e)
        {
            // 센서 상태는 로그로 기록하지 않음. 상태가 변경되면 시각적으로만 처리.
        }

        // 센서 1 마우스 오버로 감지 (R520)
        private void Sensor1_MouseEnter(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R520", 1);  // 감지됨
            SensorLamp1.Fill = Brushes.Green;  // 녹색 램프
        }

        // 센서 1 마우스 오버 해제 시 (R520 감지 안 됨)
        private void Sensor1_MouseLeave(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R520", 0);  // 감지 안 됨
            SensorLamp1.Fill = Brushes.Gray;  // 회색 램프
        }

        // 센서 2 마우스 오버로 감지 (R521)
        private void Sensor2_MouseEnter(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R521", 1);  // 감지됨
            SensorLamp2.Fill = Brushes.Green;  // 녹색 램프
        }

        // 센서 2 마우스 오버 해제 시 (R521 감지 안 됨)
        private void Sensor2_MouseLeave(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R521", 0);  // 감지 안 됨
            SensorLamp2.Fill = Brushes.Gray;  // 회색 램프
        }

        // 센서 3 마우스 오버로 감지 (R522)
        private void Sensor3_MouseEnter(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R522", 1);  // 감지됨
            SensorLamp3.Fill = Brushes.Green;  // 녹색 램프
        }

        // 센서 3 마우스 오버 해제 시 (R522 감지 안 됨)
        private void Sensor3_MouseLeave(object sender, RoutedEventArgs e)
        {
            _plcSimulator.SetSensorValue("R522", 0);  // 감지 안 됨
            SensorLamp3.Fill = Brushes.Gray;  // 회색 램프
        }

        // 로그 추가 메서드 (최대 50개 유지, 시간 정보 포함)
        private void AddLog(string message)
        {
            string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
            string logEntry = $"{timestamp} - {message}";

            // 로그가 50개를 초과하면 가장 오래된 로그를 삭제
            if (_logList.Count >= 50)
            {
                _logList.RemoveAt(0);
            }

            // 로그 리스트에 추가하고 UI에 업데이트
            _logList.Insert(0, logEntry);  // 최근 로그가 맨 위에 위치
            LogListBox.ItemsSource = null; // UI 업데이트를 위해 먼저 null로 설정
            LogListBox.ItemsSource = _logList;
        }
    }
}
수정된 사항 요약
센서 감지 방식:

마우스 오버를 사용하여 센서를 감지합니다. 마우스가 센서(램프) 위에 있으면 감지되며, SetSensorValue 메서드를 통해 내부적으로 1이 기록됩니다.
마우스가 영역을 떠나면 감지되지 않으며, SetSensorValue를 통해 0이 기록됩니다.
센서 시각적 표현:

Ellipse(타원)를 사용하여 각 센서를 시각적으로 표현하며, 녹색으로 변경되면 감지(1), 회색으로 변경되면 감지되지 않음(0)을 나타냅니다.
각 센서는 SensorLamp1, SensorLamp2, SensorLamp3로 나뉘어 관리됩니다.
센서 감지 로그 제거:

센서의 감지 상태는 더 이상 로그 리스트에 기록되지 않으며, 오직 시각적 표현으로만 처리됩니다.
리스트박스에는 통신 로그만 남도록 처리했습니다.
요약
이 수정된 PLC 시뮬레이터는 3개의 센서를 마우스 오버로 감지하며, 센서 감지 상태는 **램프(녹색/회색)**로 시각적으로 표현됩니다. 센서 감지 로그는 남기지 않으며,