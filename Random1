/bash

# --- 감시하려는 PM2 애플리케이션 이름 ---
PM2_APP_NAME="your_pm2_app_name"

# --- PM2 상태 확인 ---
# 'pm2 list'의 출력에서 앱 이름과 'online' 상태가 동시에 있는 라인을 찾습니다.
# '| grep -E " $PM2_APP_NAME .*online"'은 앱 이름과 'online'이라는 단어가 포함된 줄을 찾습니다.
# '-q' 옵션은 결과 출력 없이, 성공/실패 여부만 판단하게 합니다.
if pm2 list | grep -qE " $PM2_APP_NAME .*online"; then
  # 앱이 'online' 상태인 경우
  echo "PM2 app '$PM2_APP_NAME' is online."
  exit 0
else
  # 앱이 'online' 상태가 아니거나, PM2가 멈춘 경우
  echo "PM2 app '$PM2_APP_NAME' is NOT online or PM2 command failed!"
  exit 1
fi
스크립트 설명:

pm2 list: 현재 PM2에 등록된 모든 애플리케이션의 상태를 표로 출력합니다.

grep -qE " $PM2_APP_NAME .*online": 이 부분이 핵심입니다.

grep: pm2 list의 결과에서 특정 문자열을 찾습니다.

-q: 결과를 화면에 출력하지 않고, 찾았는지 못 찾았는지 여부만 종료 코드(0 또는 1)로 반환합니다.

-E: 정규식(Extended regex)을 사용하도록 합니다.

" $PM2_APP_NAME .*online":  $PM2_APP_NAME(앱 이름 앞의 공백 포함)과 online 문자열이 한 줄에 모두 있는 경우에만 일치하는 것으로 판단합니다. 이는 stopped나 errored 같은 다른 상태와 혼동될 가능성을 줄여줍니다.

최종 설정 및 테스트
스크립트 권한 설정:

Bash

sudo chmod +x /etc/watchdog.d/pm2-app-check.sh
직접 테스트: 스크립트가 잘 작동하는지 확인하려면 아래 명령어를 사용하세요.

Bash

sudo /etc/watchdog.d/pm2-app-check.sh
echo $?
0이 나오면 성공 (앱이 온라인 상태임).

1이 나오면 실패 (앱이 온라인 상태가 아님).

와치독 서비스 재시작:

Bash

sudo systemctl restart watchdog
이 방법이 더 안정적으로 작동할 것입니다. pm2 describe는 PM2 버전이나 환경에 따라 출력 형식이 조금씩 달라질 수 있지만, pm2 list는 표 형태라 상대적으로 안정적입니다.