. LogService 클래스 수정
LogService 클래스에서 네임드 파이프를 사용하던 부분을 TCP 클라이언트를 사용하도록 변경합니다. 기존의 클래스명과 기능은 유지하고, 통신 방식을 TCP/IP 소켓으로 변경합니다.

수정된 LogService.cs
csharp
코드 복사
using System;
using System.IO;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace RouterMiddleACRService
{
    public class LogService
    {
        private static LogService _instance;
        private readonly string _logDirectory;
        private TcpClient _tcpClient;
        private NetworkStream _networkStream;
        private string _serverIp = "127.0.0.1"; // 메인 UI 서버 IP
        private int _serverPort = 9000; // 메인 UI 서버 포트
        private CancellationTokenSource _cancellationTokenSource;

        public static LogService Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new LogService();
                }
                return _instance;
            }
        }

        private LogService()
        {
            _logDirectory = Path.Combine("C:\\Logs", "RouterMiddleACRService", DateTime.Now.ToString("yyyyMM"));
            Directory.CreateDirectory(_logDirectory);
        }

        public void Start()
        {
            _cancellationTokenSource = new CancellationTokenSource();
            Task.Run(() => ConnectToServer(_cancellationTokenSource.Token)); // 서버 연결을 시작
        }

        public void Stop()
        {
            _cancellationTokenSource.Cancel();
            _networkStream?.Close();
            _tcpClient?.Close();
        }

        private async Task ConnectToServer(CancellationToken cancellationToken)
        {
            try
            {
                _tcpClient = new TcpClient();
                await _tcpClient.ConnectAsync(_serverIp, _serverPort); // 서버에 연결
                _networkStream = _tcpClient.GetStream();
                Console.WriteLine("Connected to main UI server.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error connecting to server: {ex.Message}");
            }
        }

        public void LogMessage(string message)
        {
            try
            {
                string logEntry = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

                string logFilePath = Path.Combine(_logDirectory, $"{DateTime.Now:yyyyMMdd}_ServiceLog.txt");
                File.AppendAllText(logFilePath, logEntry + Environment.NewLine);

                if (_tcpClient != null && _tcpClient.Connected)
                {
                    byte[] data = Encoding.UTF8.GetBytes(logEntry);
                    _networkStream.Write(data, 0, data.Length); // 메시지 전송
                    Console.WriteLine("Log message sent to main UI server.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error logging message: {ex.Message}");
            }
        }
    }
}
2. MainWindow.xaml.cs 수정
메인 UI를 TCP 서버로 변경하여, 서비스로부터 로그를 수신하도록 합니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private TcpListener _tcpListener;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            StartTcpServer(); // TCP 서버를 시작
        }

        // TCP 서버 시작 메서드
        private void StartTcpServer()
        {
            Task.Run(async () =>
            {
                try
                {
                    _tcpListener = new TcpListener(IPAddress.Any, 9000); // 포트 9000에서 대기
                    _tcpListener.Start();
                    Console.WriteLine("TCP server started on port 9000.");

                    while (true)
                    {
                        var client = await _tcpListener.AcceptTcpClientAsync(); // 클라이언트 연결 대기
                        _ = Task.Run(() => HandleClient(client)); // 클라이언트 처리
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Server error: {ex.Message}");
                    Dispatcher.Invoke(() => _viewModel.LogMessages.Add($"Server error: {ex.Message}"));
                }
            });
        }

        // 클라이언트 연결을 처리하는 메서드
        private async Task HandleClient(TcpClient client)
        {
            using (client)
            using (NetworkStream stream = client.GetStream())
            {
                byte[] buffer = new byte[1024];
                int bytesRead;

                while ((bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length)) != 0)
                {
                    string message = Encoding.UTF8.GetString(buffer, 0, bytesRead);
                    Dispatcher.Invoke(() => _viewModel.LogMessages.Add($"Received from service: {message}")); // UI에 로그 메시지 추가
                }
            }
        }

        // 필요한 UI 이벤트 핸들러 (예: 서버 시작/중지 등)
        private void StartService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StartService();
        }

        private void StopService_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.StopService();
        }

        private void RefreshStatus_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshServiceStatus();
        }
    }
}
요약
LogService 클래스:

기존의 네임드 파이프 통신을 TCP 클라이언트 통신으로 변경했습니다.
LogMessage 메서드에서 메시지를 메인 UI 서버로 전송합니다.
MainWindow.xaml.cs:

기존의 네임드 파이프 클라이언트 코드 대신 TCP 서버를 시작하는 로직을 추가했습니다.
클라이언트의 로그 메시지를 수신하고, UI에 표시합니다.
이 구조에서는 메인 UI가 TCP 서버로 동작하며, 여러 서비스(LogService 클래스 사용)가 TCP 클라이언트로 연결되어 로그 메시지를 메인 UI에 전송할 수 있습니다. 이 방법을 통해 메인 UI에서 모든 서비스의 상태와 로그를 중앙에서 모니터링하고 관리할 수 있습니