 Canny Edge Detection 상세 설명 및 50, 150 의미
Canny Edge Detection(캐니 엣지 검출)은 이미지에서 경계를 감지하는 알고리즘이다.
이 알고리즘은 두 개의 임계값 (Threshold1, Threshold2) 을 사용하여 강한 경계선(Edge)과 약한 경계선을 결정한다.

csharp
코드 복사
Cv2.Canny(binary, edges, 50, 150);
50 → Threshold1 (하한 임계값)
150 → Threshold2 (상한 임계값)
🚀 Canny 알고리즘 작동 원리
Canny Edge Detection은 5단계로 구성된다.

1️⃣ 그레이스케일 변환 (Gray Scale)
이미지를 흑백(Grayscale)으로 변환하여 밝기 차이를 기반으로 처리하도록 만든다.

csharp
코드 복사
Cv2.CvtColor(image, gray, ColorConversionCodes.BGR2GRAY);
➡ 이제 픽셀 값은 0~255 범위의 밝기 값으로 표현됨.

2️⃣ 가우시안 블러 (Gaussian Blur)
잡음을 줄이기 위해 이미지를 흐리게 만든다.

csharp
코드 복사
Cv2.GaussianBlur(gray, blurred, new OpenCvSharp.Size(5, 5), 1.5);
➡ 블러를 적용하면 불필요한 작은 노이즈(잡음)를 제거하고, 더 큰 윤곽만 남게 됨.

3️⃣ Sobel 필터 적용 (Gradient 계산)
각 픽셀에서 밝기의 변화율(Gradient, 미분 값) 을 계산한다.

X 방향 변화 (Gx) → 수직 경계 감지
Y 방향 변화 (Gy) → 수평 경계 감지
Sobel 필터를 적용하면 이미지에서 가장 밝기가 급격하게 변하는 부분을 강조할 수 있다.

4️⃣ 비최대 억제 (Non-Maximum Suppression)
앞에서 구한 Gx와 Gy를 기반으로 가장 강한 엣지만 남기고, 불필요한 엣지는 제거한다.
예를 들어, 비슷한 밝기 차이가 있는 곳은 억제하고, 가장 뚜렷한 경계선만 남긴다.
5️⃣ 이중 임계값 (Double Thresholding)
🔥 여기서 50, 150 값이 중요하게 사용됨!

csharp
코드 복사
Cv2.Canny(binary, edges, 50, 150);
Threshold1 = 50 (하한 임계값)
→ 이 값보다 낮은 경계선(Edge)은 노이즈로 간주하고 제거함.
Threshold2 = 150 (상한 임계값)
→ 이 값보다 높은 경계선(Edge)은 강한 경계선으로 유지됨.
📌 결론:

150보다 강한 경계선은 무조건 유지됨 (굵고 확실한 테두리)
50~150 사이의 약한 경계선은 주변에 강한 경계선이 있으면 유지, 없으면 삭제됨.
50보다 약한 경계선은 노이즈로 간주하고 삭제됨.
🎯 50, 150 값이 어떻게 작동하는지 예제
Threshold1 (하한)	Threshold2 (상한)	결과
10	100	너무 많은 경계선이 검출됨 (노이즈 많음)
50	150	적절한 경계선만 검출됨 (적당한 필터링)
100	200	대부분의 경계가 삭제됨 (너무 약한 엣지 제거됨)
📌 50, 150 값을 바꿀 때 효과
csharp
코드 복사
Cv2.Canny(binary, edges, 30, 100);  // 약한 엣지도 많이 검출 (노이즈 많음)
Cv2.Canny(binary, edges, 70, 200);  // 더 강한 엣지만 남김 (세밀한 경계는 사라짐)
Threshold1 값을 작게 하면 → 더 많은 엣지가 검출됨 (노이즈 증가)
Threshold2 값을 크게 하면 → 더 강한 엣지만 남김 (작은 디테일 손실 가능)
🔥 결론: 왜 50, 150을 사용했는가?
공지창은 밝고, 배경은 어두우므로 테두리가 확실함.
50, 150 값이 적절하면 불필요한 작은 경계선(노이즈)은 제거하고, 강한 테두리는 유지됨.
작은 디테일(글자 등)은 무시하고, 창의 윤곽선만 강조할 수 있음.
📌 최적의 코드 적용
csharp
코드 복사
// 테두리를 더욱 강조하기 위해 Canny Edge Detection 적용
Cv2.Canny(binary, edges, 50, 150);
공지창의 테두리만 유지하고, 불필요한 노이즈는 제거
가장 확실한 경계선을 찾을 수 있음
🎯 결론
🔵 Cv2.Canny(binary, edges, 50, 150);
✔ 50 (하한) → 노이즈를 제거하고 약한 테두리는 주변을 보고 유지할지 결정
✔ 150 (상한) → 가장 강한 테두리를 유지하여 확실한 경계 검출