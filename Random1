해했습니다. 기존에 파일 생성기 코드에서 특정 키워드(FST, FNL, PLAN)가 나오면 출력을 하는 기능을 FileSystemWatcher 코드에 적용하고 싶다는 말씀이시군요.

즉, 파일이 생성되거나 변경될 때 특정 키워드가 포함된 내용이 있는지 감시하여 출력하는 기능을 FileSystemWatcher에 추가하면 됩니다.

아래는 수정된 코드입니다. 이 코드는 FileSystemWatcher로 감시 중인 파일이 변경될 때, 해당 파일 내용을 읽고 특정 키워드가 포함된 줄이 있는 경우 출력하도록 수정되었습니다.

수정된 FileSystemWatcher 코드 (키워드 감지 추가)
csharp
코드 복사
using System;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;

namespace LogFileWatcher
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher _watcher;
        private readonly string _folderPath = @"C:\G-MES2.0\GUMI_WEB\log"; // 로그 파일이 있는 폴더 경로
        private readonly string[] _keywords = { "FST", "FNL", "PLAN" };  // 감지할 키워드 목록

        public MainWindow()
        {
            InitializeComponent();
            SetupWatcher();
        }

        private void SetupWatcher()
        {
            // FileSystemWatcher 설정
            _watcher = new FileSystemWatcher
            {
                Path = _folderPath,  // 감시할 폴더 경로 설정
                NotifyFilter = NotifyFilters.LastWrite | NotifyFilters.FileName,  // 파일 이름과 파일 변경 시 감지
                Filter = "*.log",  // .log 확장자 파일만 감지
                EnableRaisingEvents = true,  // 이벤트 활성화
                IncludeSubdirectories = false  // 하위 폴더는 감지하지 않음
            };

            // 파일 생성 및 변경 시 이벤트 등록
            _watcher.Created += OnChanged;
            _watcher.Changed += OnChanged;

            Console.WriteLine("파일 감시 시작: " + _folderPath);
        }

        // 파일이 생성되거나 변경되었을 때 호출되는 이벤트 핸들러
        private void OnChanged(object sender, FileSystemEventArgs e)
        {
            // 변경된 파일의 전체 경로에서 파일 이름만 추출
            string fileName = Path.GetFileName(e.FullPath);

            // IP는 가변적이며, M4OI 뒤의 문자열과 gumi 뒤의 문자열은 가변적이므로 패턴을 설정
            // M4OI 뒤와 gumi 뒤에는 어떠한 문자열이 올 수 있으나 규칙을 지키는 파일만 감지
            // 정규식 패턴: "IP_M4OIxxxxx_gumiyyyyy_날짜.log" 형식의 파일 이름만 감지
            string pattern = @"^\d{1,3}(\.\d{1,3}){3}_M4OI[A-Za-z0-9]+_gumi[A-Za-z0-9]+_\d{2}\.log$";

            // 파일 이름이 정규식 패턴과 일치하는지 확인
            if (Regex.IsMatch(fileName, pattern))
            {
                // 파일 이름에서 날짜 부분을 추출 (마지막 2자리 숫자)
                string datePart = fileName.Substring(fileName.Length - 6, 2);

                // 날짜 문자열을 정수로 변환
                int fileDate = int.Parse(datePart);

                // 오늘 날짜의 일(day)을 가져옴
                int todayDate = DateTime.Now.Day;

                // 파일이 24시간 이내에 생성되었는지 확인 (오늘 날짜 기준으로 확인)
                if (Math.Abs(todayDate - fileDate) <= 1)
                {
                    // 파일이 24시간 이내에 변경된 경우 추가 작업 수행
                    Console.WriteLine($"파일 {fileName}이(가) 24시간 내에 변경되었습니다.");

                    // 파일 내용 확인 및 키워드 감지
                    CheckFileForKeywords(e.FullPath);
                }
            }
        }

        // 변경된 파일의 내용을 읽고 특정 키워드(FST, FNL, PLAN)가 있는지 확인하는 메서드
        private void CheckFileForKeywords(string filePath)
        {
            try
            {
                // 파일을 한 줄씩 읽기
                using (StreamReader reader = new StreamReader(filePath))
                {
                    string line;
                    while ((line = reader.ReadLine()) != null)
                    {
                        // 키워드가 포함된 줄을 찾으면 출력
                        foreach (var keyword in _keywords)
                        {
                            if (line.Contains(keyword))
                            {
                                Console.WriteLine($"특정 문구 발견: {line}");
                                // TODO: 이곳에 해당 줄에 대한 추가 작업을 넣을 수 있음
                            }
                        }
                    }
                }
            }
            catch (IOException ex)
            {
                Console.WriteLine("파일을 읽는 도중 오류가 발생했습니다: " + ex.Message);
            }
        }

        // 윈도우가 닫힐 때 감시자 해제
        protected override void OnClosed(EventArgs e)
        {
            _watcher.Dispose();
            base.OnClosed(e);
        }
    }
}
주요 수정 사항:
CheckFileForKeywords 메서드 추가:

파일이 변경되었을 때 해당 파일을 한 줄씩 읽고, 그 줄에 FST, FNL, PLAN 중 하나가 포함되어 있으면 그 줄을 출력하는 기능을 추가했습니다.
특정 키워드 감지:

파일의 각 줄에 대해 설정된 키워드 목록을 확인합니다. 키워드가 포함된 줄을 발견하면 해당 줄을 출력합니다.
_keywords 배열에 감지할 키워드들을 저장해 놓았습니다 ("FST", "FNL", "PLAN").
파일이 변경될 때 자동으로 호출:

FileSystemWatcher의 OnChanged 이벤트 핸들러가 파일 생성 또는 변경 시 호출됩니다.
파일의 규칙에 맞는 파일만 대상으로 파일의 내용을 확인하고, 키워드가 포함된 줄을 출력합니다.
코드 동작 방식:
폴더 감시: FileSystemWatcher가 설정된 폴더를 감시하면서 파일이 생성되거나 변경될 때 OnChanged 이벤트가 발생합니다.
파일 패턴 확인: 파일 이름이 IP, M4OI, gumi 등과 같은 패턴에 맞는지 정규식으로 확인합니다.
파일 내용 확인: 파일의 내용 중 FST, FNL, PLAN 키워드가 포함된 줄이 있으면 콘솔에 출력합니다.
추가 작업 가능: 출력된 줄을 기반으로 추가적인 작업이 필요하다면 TODO 부분에 해당 작업을 추가할 수 있습니다.
이렇게 수정된 코드를 사용하면, 특정 키워드가 포함된 로그 파일의 줄을 출력할 수 있습니다. 추가적으로 개선할 사항이 있으면 알려주세