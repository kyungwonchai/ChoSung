론입니다. 바쁘신 상황에 맞춰, 안드로이드 스튜디오에서 'Empty Views Activity' 프로젝트를 생성한 직후 바로 덮어쓸 수 있는 프로젝트 자동 생성 파이썬 스크립트를 준비했습니다.

요청하신 대로 프로젝트 이름은 LightMeter로 설정됩니다.

1단계: 파이썬 스크립트 실행
아래 코드를 복사해서 create_lightmeter_project.py 와 같이 파이썬 파일로 저장한 후, 터미널이나 명령 프롬프트에서 실행하세요.

Python

import os
import textwrap

# --- 프로젝트 구조 및 파일 내용 정의 ---
# { "경로/파일명": """파일 내용""" } 형식
project_files = {
    "LightMeter/.gitignore": """
        *.iml
        .gradle
        /local.properties
        /.idea/caches
        /.idea/libraries
        /.idea/modules.xml
        /.idea/workspace.xml
        /.idea/navEditor.xml
        /.idea/assetWizardSettings.xml
        build
        /captures
        .externalNativeBuild
        .cxx
        local.properties
    """,
    "LightMeter/build.gradle.kts": """
        plugins {
            alias(libs.plugins.android.application) apply false
            alias(libs.plugins.jetbrains.kotlin.android) apply false
        }
    """,
    "LightMeter/gradle.properties": """
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        kotlin.code.style=official
    """,
    "LightMeter/gradle/wrapper/gradle-wrapper.properties": """
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\\://services.gradle.org/distributions/gradle-8.4-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
    """,
    "LightMeter/settings.gradle.kts": """
        pluginManagement {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        dependencyResolutionManagement {
            repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
            repositories {
                google()
                mavenCentral()
            }
        }

        rootProject.name = "LightMeter"
        include(":app")
    """,
    "LightMeter/app/.gitignore": """
        /build
    """,
    "LightMeter/app/build.gradle.kts": """
        plugins {
            alias(libs.plugins.android.application)
            alias(libs.plugins.jetbrains.kotlin.android)
        }

        android {
            namespace = "com.example.lightmeter"
            compileSdk = 34

            defaultConfig {
                applicationId = "com.example.lightmeter"
                minSdk = 24
                targetSdk = 34
                versionCode = 1
                versionName = "1.0"

                testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    isMinifyEnabled = false
                    proguardFiles(
                        getDefaultProguardFile("proguard-android-optimize.txt"),
                        "proguard-rules.pro"
                    )
                }
            }
            compileOptions {
                sourceCompatibility = JavaVersion.VERSION_1_8
                targetCompatibility = JavaVersion.VERSION_1_8
            }
            kotlinOptions {
                jvmTarget = "1.8"
            }
            buildFeatures {
                viewBinding = true
            }
        }

        dependencies {
            implementation(libs.androidx.core.ktx)
            implementation(libs.androidx.appcompat)
            implementation(libs.material)
            implementation(libs.androidx.constraintlayout)
            testImplementation(libs.junit)
            androidTestImplementation(libs.androidx.junit)
            androidTestImplementation(libs.androidx.espresso.core)
        }
    """,
    "LightMeter/app/proguard-rules.pro": """
        # Add project specific ProGuard rules here.
        # By default, the flags in this file are appended to flags specified
        # in /usr/local/google/home/ag/sdks/android/sdk/tools/proguard/proguard-android.txt
        # You can edit the include path and order by changing the proguardFiles
        # attribute in build.gradle.
        #
        # For more details, see
        #   http://developer.android.com/guide/developing/tools/proguard.html

        # Add any project specific keep options here:

        # If your project uses WebView with JS, uncomment the following
        # and specify the fully qualified class name to the JavaScript interface
        # class:
        #-keepclassmembers class fqcn.of.javascript.interface.for.webview {
        #   public *;
        #}
    """,
    "LightMeter/app/src/main/AndroidManifest.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">

            <application
                android:allowBackup="true"
                android:dataExtractionRules="@xml/data_extraction_rules"
                android:fullBackupContent="@xml/backup_rules"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:roundIcon="@mipmap/ic_launcher_round"
                android:supportsRtl="true"
                android:theme="@style/Theme.LightMeter"
                tools:targetApi="31">
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>

        </manifest>
    """,
    "LightMeter/app/src/main/java/com/example/lightmeter/MainActivity.kt": """
        package com.example.lightmeter

        import android.content.Context
        import android.hardware.Sensor
        import android.hardware.SensorEvent
        import android.hardware.SensorEventListener
        import android.hardware.SensorManager
        import android.os.Bundle
        import androidx.appcompat.app.AppCompatActivity
        import com.example.lightmeter.databinding.ActivityMainBinding

        class MainActivity : AppCompatActivity(), SensorEventListener {

            private lateinit var binding: ActivityMainBinding
            private lateinit var sensorManager: SensorManager
            private var lightSensor: Sensor? = null

            override fun onCreate(savedInstanceState: Bundle?) {
                super.onCreate(savedInstanceState)
                binding = ActivityMainBinding.inflate(layoutInflater)
                setContentView(binding.root)

                // SensorManager 인스턴스 가져오기
                sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
                // 기기의 기본 조도 센서 가져오기
                lightSensor = sensorManager.getDefaultSensor(Sensor.TYPE_LIGHT)

                if (lightSensor == null) {
                    binding.tvLuxValue.text = "조도 센서 없음"
                }
            }

            override fun onResume() {
                super.onResume()
                // 앱이 활성화될 때 센서 리스너 등록
                lightSensor?.let {
                    sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
                }
            }

            override fun onPause() {
                super.onPause()
                // 앱이 비활성화될 때 리스너 해제 (배터리 절약)
                sensorManager.unregisterListener(this)
            }

            // 센서 값이 변경될 때 호출
            override fun onSensorChanged(event: SensorEvent?) {
                if (event?.sensor?.type == Sensor.TYPE_LIGHT) {
                    val luxValue = event.values[0]
                    binding.tvLuxValue.text = "%.1f".format(luxValue)
                    binding.tvUnit.text = "lux"
                }
            }

            // 센서 정확도가 변경될 때 호출 (여기서는 사용 안 함)
            override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {
                // Do nothing
            }
        }

    """,
    "LightMeter/app/src/main/res/layout/activity_main.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:app="http://schemas.android.com/apk/res-auto"
            xmlns:tools="http://schemas.android.com/tools"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            tools:context=".MainActivity">

            <TextView
                android:id="@+id/tv_lux_value"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="-"
                android:textSize="80sp"
                android:textStyle="bold"
                app:layout_constraintBottom_toBottomOf="parent"
                app:layout_constraintEnd_toEndOf="parent"
                app:layout_constraintStart_toStartOf="parent"
                app:layout_constraintTop_toTopOf="parent"
                app:layout_constraintVertical_bias="0.45" />

            <TextView
                android:id="@+id/tv_unit"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:layout_marginTop="8dp"
                android:text="lux"
                android:textSize="24sp"
                app:layout_constraintEnd_toEndOf="@+id/tv_lux_value"
                app:layout_constraintStart_toStartOf="@+id/tv_lux_value"
                app:layout_constraintTop_toBottomOf="@+id/tv_lux_value" />

        </androidx.constraintlayout.widget.ConstraintLayout>
    """,
    "LightMeter/app/src/main/res/values/strings.xml": """
        <resources>
            <string name="app_name">LightMeter</string>
        </resources>
    """,
    "LightMeter/app/src/main/res/values/themes.xml": """
        <resources xmlns:tools="http://schemas.android.com/tools">
            <style name="Base.Theme.LightMeter" parent="Theme.Material3.DayNight.NoActionBar">
                </style>

            <style name="Theme.LightMeter" parent="Base.Theme.LightMeter" />
        </resources>
    """,
    "LightMeter/app/src/main/res/values/colors.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="black">#FF000000</color>
            <color name="white">#FFFFFFFF</color>
        </resources>
    """,
     "LightMeter/app/src/main/res/xml/backup_rules.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <full-backup-content>
            </full-backup-content>
     """,
     "LightMeter/app/src/main/res/xml/data_extraction_rules.xml": """
        <?xml version="1.0" encoding="utf-8"?>
        <data-extraction-rules>
            <cloud-backup>
                </cloud-backup>
            <device-transfer>
                </device-transfer>
        </data-extraction-rules>
     """,
    "LightMeter/gradle/libs.versions.toml": """
        [versions]
        agp = "8.4.0"
        kotlin = "1.9.0"
        coreKtx = "1.13.1"
        junit = "4.13.2"
        junitVersion = "1.1.5"
        espressoCore = "3.5.1"
        appcompat = "1.7.0"
        material = "1.12.0"
        constraintlayout = "2.1.4"

        [libraries]
        androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
        junit = { group = "junit", name = "junit", version.ref = "junit" }
        androidx-junit = { group = "androidx.test.ext", name = "junit", version.ref = "junitVersion" }
        androidx-espresso-core = { group = "androidx.test.espresso", name = "espresso-core", version.ref = "espressoCore" }
        androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version.ref = "appcompat" }
        material = { group = "com.google.android.material", name = "material", version.ref = "material" }
        androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }

        [plugins]
        android-application = { id = "com.android.application", version.ref = "agp" }
        jetbrains-kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
    """
}

# --- 스크립트 실행 로직 ---
def create_project():
    """정의된 구조에 따라 프로젝트 폴더와 파일을 생성합니다."""
    base_dir = "LightMeter"
    print(f"'{base_dir}' 프로젝트 생성을 시작합니다...")

    if not os.path.exists(base_dir):
        os.makedirs(base_dir)
        print(f"'{base_dir}' 폴더 생성 완료.")
    
    for file_path, content in project_files.items():
        # 파일 경로에서 디렉토리 부분만 추출
        directory = os.path.dirname(file_path)
        
        # 디렉토리가 존재하지 않으면 생성
        if not os.path.exists(directory):
            os.makedirs(directory)
        
        # 파일 생성 및 내용 쓰기
        try:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(textwrap.dedent(content).strip())
            print(f"  - 생성 완료: {file_path}")
        except Exception as e:
            print(f"  - 생성 실패: {file_path} (오류: {e})")
            
    # gradle wrapper 실행 파일 생성 (실행 권한 부여는 수동으로 필요)
    # 실제 바이너리 파일은 아니지만, 프로젝트 로딩에 필요한 파일들입니다.
    gradlew_path = os.path.join(base_dir, "gradlew")
    gradlew_bat_path = os.path.join(base_dir, "gradlew.bat")
    
    # gradlew (Linux/Mac)
    if not os.path.exists(gradlew_path):
        # This is a placeholder. The actual gradlew is a binary/script.
        # Android Studio will regenerate it if needed.
        with open(gradlew_path, 'w') as f:
            f.write("#!/usr/bin/env sh\n\n# Placeholder for Gradle Wrapper executable script.")
        print(f"  - 생성 완료: {gradlew_path} (플레이스홀더)")

    # gradlew.bat (Windows)
    if not os.path.exists(gradlew_bat_path):
        with open(gradlew_bat_path, 'w') as f:
            f.write('@echo off\n\nrem Placeholder for Gradle Wrapper batch script.')
        print(f"  - 생성 완료: {gradlew_bat_path} (플레이스홀더)")
            
    print("\n'LightMeter' 프로젝트 파일 생성이 완료되었습니다!")

if __name__ == "__main__":
    create_project()
2단계: 스크립트 실행 후 작업
파이썬 스크립트 실행:

원하는 위치에 빈 폴더를 하나 만듭니다.

그 안에 위 코드를 create_lightmeter_project.py 이름으로 저장합니다.

터미널을 열고 해당 폴더로 이동한 뒤 python create_lightmeter_project.py 명령어를 실행합니다.

실행이 끝나면 같은 위치에 LightMeter 라는 폴더가 생성됩니다.

안드로이드 스튜디오에서 프로젝트 열기:

안드로이드 스튜디오를 실행합니다.

초기 화면에서 **Open**을 클릭합니다. (기존 프로젝트가 열려있다면 File > Open)

방금 파이썬 스크립트로 생성된 LightMeter 폴더를 선택하고 OK를 누릅니다.

Gradle 동기화 및 빌드:

프로젝트를 처음 열면 안드로이드 스튜디오가 자동으로 Gradle 동기화를 시작합니다. 잠시 기다려주세요.

동기화가 끝나면, 상단 메뉴의 망치 아이콘(Build)을 누르거나 Build > Make Project를 선택해 프로젝트를 빌드합니다.

앱 실행:

실제 안드로이드 기기를 연결하거나 에뮬레이터를 실행합니다.

상단의 재생(▶️) 버튼을 눌러 앱을 설치하고 실행합니다.

앱이 실행되면 화면 중앙에 현재 주변 밝기(조도)가 lux 단위로 표시되는 것을 볼 수 있습니다.