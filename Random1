 알겠습니다. 코드가 길어지고 여러 번 수정되면서 헷갈리실 수 있습니다. 이전 답변에서 검색 기능과 페이지네이션 링크 수정을 함께 안내드렸는데, 이 부분을 포함하여 app/templates/user/control_panel.html 파일과 app/routes_user.py 파일의 최종 수정본 전체를 다시 한번 명확하게 제공해 드리겠습니다.

사용자님께서 이 코드를 적용해보시고 발생하는 오류를 알려주시면 함께 해결해 나가겠습니다.

1. 최종 수정: app/templates/user/control_panel.html (검색 UI 및 검색어 유지 페이지네이션 포함)
HTML

{% extends "layout.html" %}

{% block title %}{{ title }}{% endblock %}

{% block content %}
    <h1>{{ title }}</h1>
    
    <form method="GET" action="{{ url_for('user.control_panel') }}" style="margin-bottom: 20px; display: flex; align-items: center; gap: 10px;">
        <label for="search_term" style="margin-bottom: 0; white-space: nowrap;">PC 검색:</label>
        <input type="text" name="search" id="search_term" value="{{ pagination.search_term if pagination.search_term else '' }}" 
               placeholder="PC 이름, 주소1/2, 설명 포함 단어" style="flex-grow: 1;" class="form-control">
        <button type="submit" class="btn btn-primary btn-sm" style="padding: 10px 15px;">검색</button>
        {% if pagination.search_term %}
        <a href="{{ url_for('user.control_panel') }}" class="btn btn-secondary btn-sm" style="padding: 10px 15px;">필터 해제</a>
        {% endif %}
    </form>

    <p>제어할 PC를 선택하고 하단의 명령 버튼을 클릭하세요.</p>

    {% if pcs %}
    <form action="{{ url_for('user.send_batch_command') }}" method="POST">
        {# 현재 검색어를 hidden 필드로 다음 요청에 전달 #}
        {% if pagination.search_term %}
            <input type="hidden" name="current_search_term" value="{{ pagination.search_term }}">
        {% endif %}
        <table style="margin-bottom: 20px;">
            <thead>
                <tr>
                    <th><input type="checkbox" id="selectAllPcs" onclick="toggleAllCheckBoxes(this, 'selected_pcs')"></th>
                    <th>ID</th>
                    <th>PC 이름</th>
                    <th>주소1 (릴레이 IP)</th>
                    <th>주소2 (최종 IP)</th>
                    <th>설명</th>
                </tr>
            </thead>
            <tbody>
                {% for pc in pcs %}
                <tr>
                    <td><input type="checkbox" name="selected_pcs" value="{{ pc.id }}"></td>
                    <td>{{ pc.id }}</td>
                    <td>{{ pc.pc_name }}</td>
                    <td>{{ pc.address1 }}</td>
                    <td>{{ pc.address2 if pc.address2 else '-' }}</td>
                    <td>{{ pc.description if pc.description else '-' }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>

        <div class="command-buttons">
            <button type="submit" name="command_action" value="켜기" class="btn btn-primary" onclick="return confirmAction('선택된 PC들의 디스플레이 타임아웃을 [사용 안 함]으로 설정하고, 모니터를 즉시 켭니다. 계속하시겠습니까?');">선택 PC 일괄 켜기</button>
            <button type="submit" name="command_action" value="끄기" class="btn btn-danger" onclick="return confirmAction('선택된 PC들의 디스플레이 타임아웃을 [1분 후 끄기]로 설정합니다. 계속하시겠습니까?');">선택 PC 일괄 끄기</button>
        </div>
    </form>
    
    {# 페이지네이션 링크 (검색어 유지) #}
    {% if pagination and pagination.total_pages > 1 %}
    <div class="pagination">
        {% if pagination.has_prev %}
            <a href="{{ url_for(request.endpoint, page=pagination.prev_num, search=pagination.search_term if pagination.search_term else None) }}">&laquo; 이전</a>
        {% else %}
            <span class="disabled">&laquo; 이전</span>
        {% endif %}
        
        <span style="margin: 0 10px;">페이지 {{ pagination.page }} / {{ pagination.total_pages }}</span>
        
        {% if pagination.has_next %}
            <a href="{{ url_for(request.endpoint, page=pagination.next_num, search=pagination.search_term if pagination.search_term else None) }}">다음 &raquo;</a>
        {% else %}
            <span class="disabled">다음 &raquo;</span>
        {% endif %}
        <span style="margin-left: 15px;">(총 {{ pagination.total_items }}개 검색됨)</span>
    </div>
    {% endif %}

    {% else %}
        {% if pagination.search_term %}
            <p>'{{ pagination.search_term }}'에 대한 검색 결과가 없습니다. <a href="{{ url_for('user.control_panel') }}">전체 목록 보기</a></p>
        {% else %}
            <p>제어 가능한 PC가 등록되어 있지 않습니다. 관리자에게 문의하세요.</p>
        {% endif %}
    {% endif %}

    {# Flash 메시지 표시 영역 #}
    <div style="margin-top: 30px;">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                <h3 style="font-size: 1.1em; margin-bottom: 8px;">알림:</h3>
                <ul class="flash-messages">
                {% for category, message in messages %}
                    <li class="{{ category }}">{{ message }}</li>
                {% endfor %}
                </ul>
            {% endif %}
        {% endwith %}
    </div>
    
{% endblock %}

{% block scripts %}
{{ super() }} 
<script>
    function toggleAllCheckBoxes(source, name) {
        var checkboxes = document.getElementsByName(name);
        for(var i=0, n=checkboxes.length; i<n; i++) {
            checkboxes[i].checked = source.checked;
        }
    }
    function confirmAction(message) {
        return confirm(message);
    }
</script>
{% endblock %}
control_panel.html 주요 변경 사항:

검색 UI: 상단에 검색어 입력 <form>을 배치했습니다. value="{{ pagination.search_term if pagination.search_term else '' }}"를 통해 현재 검색어를 입력 필드에 유지합니다.
페이지네이션 링크: url_for 함수에 search=pagination.search_term if pagination.search_term else None 인자를 추가하여, 페이지 이동 시 현재 검색어가 URL에 포함되도록 수정했습니다. (routes_user.py에서 pagination_data에 search_term을 포함시켜 전달해야 합니다.)
일괄 명령 폼: send_batch_command 라우트로 명령 전송 후, 다시 control_panel로 돌아올 때 검색 결과를 유지하기 위해 <input type="hidden" name="current_search_term" value="{{ pagination.search_term }}">를 폼 내부에 추가했습니다. (이것은 send_batch_command 라우트에서 리다이렉트 시 이 값을 사용해야 함을 의미합니다.)
검색 결과가 없을 때의 메시지를 좀 더 명확하게 수정했습니다.
2. 최종 수정: app/routes_user.py (검색어 처리 및 페이지네이션 데이터 전달 수정)
Python

# scontrol_flask_web/app/routes_user.py
from flask import Blueprint, render_template, request, redirect, url_for, flash, current_app, g
from app.db_utils import get_db_connection
from app.auth import ip_auth_required
from app.socket_client import send_command_to_agent
import json
import uuid
from datetime import datetime as dt, timezone
import math

user_bp = Blueprint('user', __name__)

@user_bp.route('/control_panel')
@ip_auth_required('user')
def control_panel():
    page = request.args.get('page', 1, type=int)
    per_page = 20 
    search_term = request.args.get('search', '').strip() 

    offset = (page - 1) * per_page
    pcs_on_current_page = []
    total_pcs = 0
    conn = None
    
    pagination_data = {
        'page': page, 'per_page': per_page, 'total_items': 0, 'total_pages': 1, 
        'items': [], 'has_prev': False, 'has_next': False, 
        'prev_num': 1, 'next_num': 1, 'search_term': search_term # 검색어 저장
    }

    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            count_query_base = "SELECT COUNT(*) AS total FROM dbo.target_pcs"
            data_query_base = "SELECT id, pc_name, address1, address2, description FROM dbo.target_pcs"
            
            where_clauses = []
            query_params = [] # WHERE 절에 사용할 파라미터 리스트

            if search_term:
                like_search_term = f"%{search_term}%"
                where_clauses.append("(LOWER(pc_name) LIKE LOWER(%s) OR LOWER(ISNULL(address1,'')) LIKE LOWER(%s) OR LOWER(ISNULL(address2,'')) LIKE LOWER(%s) OR LOWER(ISNULL(description,'')) LIKE LOWER(%s))")
                # MSSQL의 LIKE는 대소문자를 구분할 수 있으므로, LOWER 함수 사용 또는 DB Collation 확인 필요
                # 여기서는 Python에서 f-string으로 %s를 직접 넣었으므로, 실제 execute 시에는 값이 채워짐.
                # 검색할 각 컬럼에 대해 파라미터 추가
                for _ in range(4): # pc_name, address1, address2, description
                    query_params.append(like_search_term)
            
            sql_where = ""
            if where_clauses:
                sql_where = " WHERE " + " AND ".join(where_clauses) # 현재는 OR만 사용

            final_count_query = count_query_base + sql_where
            cursor.execute(final_count_query, tuple(query_params)) # COUNT 쿼리 파라미터
            total_pcs_result = cursor.fetchone()
            if total_pcs_result:
                total_pcs = total_pcs_result.get('total', 0)
            
            if total_pcs > 0:
                final_data_query = f"""
                    {data_query_base} 
                    {sql_where}
                    ORDER BY pc_name 
                    OFFSET %s ROWS FETCH NEXT %s ROWS ONLY 
                """
                # 데이터 조회용 파라미터에는 기존 query_params에 offset과 per_page 추가
                data_query_params_for_page = query_params + [offset, per_page]
                cursor.execute(final_data_query, tuple(data_query_params_for_page))
                pcs_on_current_page = cursor.fetchall()
            
            total_pages = math.ceil(total_pcs / per_page) if total_pcs > 0 else 1
            pagination_data.update({
                'total_items': total_pcs, 'total_pages': total_pages, 
                'items': pcs_on_current_page, 
                'has_prev': page > 1, 'has_next': page < total_pages,
                'prev_num': page - 1 if page > 1 else 1,
                'next_num': page + 1 if page < total_pages else total_pages
            })

    except Exception as e:
        current_app.logger.error(f"제어판 PC 목록 조회 오류 (검색어: '{search_term}'): {e}", exc_info=True)
        flash("PC 목록을 불러오는 중 오류가 발생했습니다.", "error")
        
    title = "원격 제어판"
    if search_term: title += f" (검색: '{search_term}')"
    if g.current_user_role == 'admin': title = "원격 제어판 (관리자)" + (f" (검색: '{search_term}')" if search_term else "")
        
    return render_template('user/control_panel.html', 
                           pcs=pcs_on_current_page, 
                           pagination=pagination_data, 
                           title=title)

@user_bp.route('/send_batch_command', methods=['POST'])
@ip_auth_required('user')
def send_batch_command():
    selected_pc_ids_str = request.form.getlist('selected_pcs')
    command_action_str = request.form.get('command_action')
    current_search_term_hidden = request.form.get('current_search_term', '') # hidden 필드에서 검색어 가져오기

    redirect_params = {'search': current_search_term_hidden} if current_search_term_hidden else {}

    if not selected_pc_ids_str: flash("PC를 선택하세요.", 'warning'); return redirect(url_for('user.control_panel', **redirect_params))
    if not command_action_str or command_action_str not in ["켜기", "끄기"]: flash("명령(켜기/끄기) 지정 오류.", 'warning'); return redirect(url_for('user.control_panel', **redirect_params))

    selected_pc_ids = [int(id_str) for id_str in selected_pc_ids_str]; conn = None; target_pcs_to_control = []
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            if selected_pc_ids: placeholders = ', '.join(['%s'] * len(selected_pc_ids)); sql_select_pcs = f"SELECT id, pc_name, address1, address2 FROM dbo.target_pcs WHERE id IN ({placeholders})"; cursor.execute(sql_select_pcs, tuple(selected_pc_ids)); target_pcs_to_control = cursor.fetchall()
    except Exception as e: current_app.logger.error(f"명령 대상 PC 정보 조회 오류: {e}", exc_info=True); flash("명령 대상 PC 정보 DB 조회 오류.", "error"); return redirect(url_for('user.control_panel', **redirect_params))
    if not target_pcs_to_control: flash("선택된 PC 정보 없음.", "warning"); return redirect(url_for('user.control_panel', **redirect_params))

    timeout_minutes_for_command = 0 if command_action_str == "켜기" else 1 
    action_description_log = "디스플레이 항상 켜기(0분)" if command_action_str == "켜기" else "디스플레이 1분 후 자동 꺼짐"
    payload_for_agent = {'TimeoutMinutes': timeout_minutes_for_command} 

    for pc_data in target_pcs_to_control:
        packet_set_timeout = { 'PacketId': str(uuid.uuid4()), 'TimestampUtc': dt.now(timezone.utc).isoformat(timespec='milliseconds').replace('+00:00', 'Z'), 'CommandName': "SET_DISPLAY_TIMEOUT", 'PayloadJson': json.dumps(payload_for_agent), 'ResponseAddress': None, 'ResponsePort': None }
        target_ip = ""; is_relay = bool(pc_data.get('address2') and pc_data['address2'].strip())
        if is_relay: packet_set_timeout.update({'Instruction': "RelayToTarget", 'FinalTargetIpForRelayedCommand': pc_data['address2'], 'FinalTargetPortForRelayedCommand': 4026}); target_ip = pc_data['address1']
        else: packet_set_timeout.update({'Instruction': "DirectExecute"}); target_ip = pc_data['address1']
        log_prefix = f"PC '{pc_data.get('pc_name','N/A')}' ({target_ip})"; flash(f"{log_prefix} '{action_description_log}' 전송 시도...", 'info')
        current_app.logger.info(f"{log_prefix} - 전송: {action_description_log}, PktID: {packet_set_timeout['PacketId']}")
        response_timeout = send_command_to_agent(target_ip, packet_set_timeout)
        _process_agent_response(response_timeout, log_prefix, "타임아웃 설정")
        if command_action_str == "켜기": 
            action_desc_monitor_on = "모니터 즉시 켜기"; payload_monitor_on = {'Action': -1} 
            packet_monitor_on = { 'PacketId': str(uuid.uuid4()), 'TimestampUtc': dt.now(timezone.utc).isoformat(timespec='milliseconds').replace('+00:00', 'Z'), 'CommandName': "MONITOR_CONTROL", 'PayloadJson': json.dumps(payload_monitor_on), 'ResponseAddress': None, 'ResponsePort': None, 'Instruction': packet_set_timeout['Instruction'], 'FinalTargetIpForRelayedCommand': packet_set_timeout.get('FinalTargetIpForRelayedCommand'), 'FinalTargetPortForRelayedCommand': packet_set_timeout.get('FinalTargetPortForRelayedCommand') }
            flash(f"{log_prefix} '{action_desc_monitor_on}' 추가 전송 시도...", 'info'); current_app.logger.info(f"{log_prefix} - 전송: {action_desc_monitor_on}, PktID: {packet_monitor_on['PacketId']}")
            response_monitor_on = send_command_to_agent(target_ip, packet_monitor_on)
            _process_agent_response(response_monitor_on, log_prefix, "즉시 모니터 켜기")
            
    return redirect(url_for('user.control_panel', **redirect_params)) # 검색어 유지하며 리다이렉트

# _process_agent_response 헬퍼 함수는 이전과 동일하게 유지
def _process_agent_response(agent_response, log_prefix, command_description):
    # ... (이전 _process_agent_response 코드 전체 - 변경 없음) ...
    if agent_response.get('success'):
        raw_pkt = agent_response.get('raw_response')
        if raw_pkt and isinstance(raw_pkt, dict) and 'PayloadJson' in raw_pkt:
            payload_str = raw_pkt.get('PayloadJson')
            current_app.logger.info(f"{log_prefix} - '{command_description}' 응답 PayloadJson: >>>{payload_str}<<<")
            if payload_str is not None:
                try:
                    resp_pl = json.loads(payload_str);
                    if resp_pl.get('Success'): flash(f"{log_prefix} ({command_description}): 성공 - {resp_pl.get('Message', 'OK')}", 'success'); current_app.logger.info(f"{log_prefix} ({command_description}) 성공: {resp_pl.get('Message')}")
                    else: flash(f"{log_prefix} ({command_description}): 실패 (에이전트) - {resp_pl.get('Message', 'Agent error')}", 'error'); current_app.logger.error(f"{log_prefix} ({command_description}) 에이전트 실패: {resp_pl.get('Message')}")
                except json.JSONDecodeError as je: flash(f"{log_prefix} ({command_description}): 응답 JSON 형식 오류 - {je.msg}", 'error'); current_app.logger.error(f"{log_prefix} ({command_description}) PayloadJson 파싱 오류: {je.msg}. 원본: {payload_str}", exc_info=True)
                except Exception as e: flash(f"{log_prefix} ({command_description}): 응답 처리 중 알 수 없는 오류 - {e}", 'error'); current_app.logger.error(f"{log_prefix} ({command_description}) PayloadJson 처리 중 알 수 없는 오류: {e}. 원본: {payload_str}", exc_info=True)
            else: flash(f"{log_prefix} ({command_description}): 전송 성공 (페이로드 없음)", 'warning'); current_app.logger.warning(f"{log_prefix} ({command_description}) 전송 성공, 페이로드 없음. RawPkt: {raw_pkt}")
        else: flash(f"{log_prefix} ({command_description}): 전송 성공 (상세 응답/페이로드 없음)", 'warning'); current_app.logger.warning(f"{log_prefix} ({command_description}) 전송 성공, 상세 응답/페이로드 없음. RawPkt: {raw_pkt}")
    else: flash(f"{log_prefix} ({command_description}): 전송 실패 - {agent_response.get('message', 'Socket error')}", 'error'); current_app.logger.error(f"{log_prefix} ({command_description}) 전송 실패: {agent_response.get('message')}")

app/routes_user.py의 control_panel 함수 주요 변경 사항:

검색어 처리:
search_term = request.args.get('search', '').strip(): GET 파라미터로 전달된 검색어를 가져옵니다.
pagination_data 딕셔너리에 search_term을 추가하여, 템플릿에서 페이지네이션 링크 생성 시 이 값을 사용할 수 있도록 합니다.
동적 SQL WHERE 절 및 파라미터 구성:
search_term이 있는 경우, pc_name, address1, address2, description 컬럼에 대해 LIKE %검색어% 조건을 포함하는 WHERE 절을 생성합니다.
SQL 인젝션을 방지하기 위해 query_params 리스트에 파라미터를 담아 cursor.execute()에 전달합니다.
대소문자 구분 없는 검색: SQL Server에서 LIKE 검색 시 대소문자 구분을 하지 않으려면 데이터베이스의 Collation 설정이 CI (Case Insen