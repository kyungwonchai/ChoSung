## 2. 핵심 데이터 분석 및 시각화
이제 준비된 df 데이터프레임으로 의미 있는 분석을 시작합니다.

분석 1: 설비(m1)별 사이클 타임 비교 (병목 설비 찾기)
분석 목표: 여러 설비(m1) 중 어떤 설비가 평균적으로 가장 느리거나 빠른지 파악하여 병목 지점을 찾습니다.

Python

# 설비(m1)별로 평균 사이클 타임(ct2) 계산
m1_performance = df.groupby('m1')['ct2'].mean().sort_values()

# 시각화
plt.figure(figsize=(12, 7))
sns.barplot(x=m1_performance.index, y=m1_performance.values)
plt.title('설비(m1)별 평균 사이클 타임', fontsize=16)
plt.xlabel('설비 번호 (m1)', fontsize=12)
plt.ylabel('평균 사이클 타임 (초)', fontsize=12)
plt.show()

print(m1_performance)
결과 해석: 막대그래프의 높이가 유독 높은 설비가 있다면, 해당 설비가 전체 공정의 속도를 늦추는 **병목(bottleneck)**일 가능성이 큽니다. 반대로 가장 낮은 설비는 가장 효율적인 설비입니다.

분석 2: 생산 라인(line1)별 사이클 타임 안정성 비교
분석 목표: 각 생산 라인의 평균 속도뿐만 아니라, 사이클 타임이 얼마나 안정적인지(편차가 적은지)를 비교합니다.

Python

# Box Plot으로 생산 라인별 사이클 타임 분포 시각화
plt.figure(figsize=(15, 8))
sns.boxplot(data=df, x='line1', y='ct2')
plt.title('생산 라인(line1)별 사이클 타임 분포', fontsize=16)
plt.xlabel('생산 라인 번호 (line1)', fontsize=12)
plt.ylabel('사이클 타임 (초)', fontsize=12)
plt.show()
결과 해석:

박스의 높이: 박스가 위아래로 길수록 해당 라인의 사이클 타임 편차가 크고 생산이 불안정하다는 의미입니다.

박스의 위치: 박스가 전체적으로 아래에 위치할수록 평균 속도가 빠릅니다.

점(아웃라이어): 박스 바깥의 점들은 유독 느리거나 빠르게 끝난 예외적인 경우로, 원인 파악이 필요합니다.

분석 3: 시간 흐름에 따른 전체 사이클 타임 추이
분석 목표: 시간의 흐름에 따라 전체 공정의 사이클 타임이 어떻게 변하는지 모니터링합니다. (예: 특정 시간대에 느려지는 현상 파악)

Python

# 시간대별(예: 10분 단위) 평균 사이클 타임 계산
time_series_ct = df.set_index('date1')['ct2'].resample('10min').mean()

# 시각화
plt.figure(figsize=(16, 7))
time_series_ct.plot()
plt.title('시간에 따른 평균 사이클 타임 추이 (10분 단위)', fontsize=16)
plt.xlabel('시간', fontsize=12)
plt.ylabel('평균 사이클 타임 (초)', fontsize=12)
plt.grid(True)
plt.show()
결과 해석: 그래프가 주기적으로 튀는 구간이 있다면, 교대 시간, 자재 교체, 장비 점검 등 특정 이벤트와 연관이 있는지 확인할 수 있습니다. 전반적으로 우상향한다면 공정 효율이 점차 나빠지고 있다는 신호입니다.

## 3. 추가 분석 아이디어
레인(Lane1)별 성능 분석: df.groupby(['m1', 'lane1'])['ct2'].mean() 코드로 특정 설비 내에서 레인별 편차가 있는지 확인할 수 있습니다.

생산 모델(model1)별 분석: df.groupby('model1')['ct2'].mean() 코드로 모델별 평균 사이클 타임을 비교하여, 특정 모델 생산 시 시간이 더 오래 걸리는지 파악할 수 있습니다.

이상치(chk1=1) 분석: df[df['chk1'