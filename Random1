g Average) 모델은 시계열 데이터에서 트렌드를 예측하는 데 자주 사용됩니다. 이 방법을 사용하면 데이터의 자연스러운 변동성을 고려하여 이상치를 더 정확하게 탐지할 수 있습니다.

다음은 ARIMA 모델을 사용하여 시계열 데이터에서 이상치를 감지하는 기본적인 코드 예시입니다:

python
Copy code
import pandas as pd
import pymssql
import time
from datetime import datetime
from statsmodels.tsa.arima.model import ARIMA

# MSSQL 연결 정보 설정
server = 'your_server'
port = 'your_port'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# MSSQL 서버에 연결
conn = pymssql.connect(server=server, port=port, user=username, password=password, database=database)

# 데이터 모니터링 루프
while True:
    # 데이터를 조회하는 SQL 쿼리
    sql_query = "SELECT FileCreateTime, CT1 FROM YourTable WHERE YourConditions ORDER BY FileCreateTime"
    
    # 데이터베이스에서 데이터를 가져옵니다.
    df = pd.read_sql_query(sql_query, conn)

    # ARIMA 모델 초기화 및 훈련
    model = ARIMA(df['CT1'], order=(5,1,0))
    model_fit = model.fit()

    # 예측값 계산
    forecast = model_fit.forecast(steps=1)[0]

    # 실제 값과 예측값 비교
    actual_value = df['CT1'].iloc[-1]
    if abs(actual_value - forecast) > threshold:  # threshold는 사전에 정의된 이상치 감지 기준
        print(f"이상 현상 감지 - 파일 시간: {df['FileCreateTime'].iloc[-1]}, CT1: {actual_value}, 예측값: {forecast}, 시간: {datetime.now()}")
        # 여기에서 MSSQL에 로그를 작성하는 코드 추가

    # 일정 시간 간격으로 실행
    time.sleep(300)
이 코드는 ARIMA 모델을 사용하여 데이터의 트렌드를 예측하고 실제 값이 예측 범위를 벗어날 때 이상치로 간주합니다. 이 방법은 점진적으로 증가하는 트렌드를 잘 포착할 수 있습니다.

단, ARIMA 모델은 매개변수 선택(order 값)과 데이터의 특성에 따라 성능이 달라질 수 있으므로, 실제 데이터에 맞게 모델을 조정해야 합니다. 또한, 이상