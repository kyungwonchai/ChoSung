evExpress WPF GridControl에서 CustomRowStyle 이벤트를 사용할 수 없는 경우, RowStyle 속성을 사용하여 Style을 정의하고 조건부로 행 색상을 변경할 수 있습니다. 아래는 RowStyle을 활용하여 Timediff 값에 따라 행 배경색과 텍스트 색상을 변경하는 방법입니다.

1. MSSQL 쿼리
먼저 Timediff 값을 계산하여 데이터를 가져오는 SQL 쿼리는 동일합니다.

sql
코드 복사
SELECT 
    Id,
    IP,
    ReceivedMessage,
    Time1,
    LogType,
    DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0
ORDER BY Id DESC;
2. XAML에서 RowStyle 설정
GridControl에 RowStyle을 적용하여 조건에 따라 스타일을 변경합니다. Style을 DataTrigger와 함께 사용하여 특정 조건에 따라 색상을 설정합니다.

xaml
코드 복사
<dxg:GridControl Name="gridControl1" AutoGenerateColumns="False">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Id" Header="Id" />
        <dxg:GridColumn FieldName="IP" Header="IP" />
        <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
        <dxg:GridColumn FieldName="Time1" Header="Time1" DisplayFormat="G" />
        <dxg:GridColumn FieldName="LogType" Header="LogType" />
        <dxg:GridColumn FieldName="Timediff" Header="Time Difference (Minutes)" />
    </dxg:GridControl.Columns>
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True" ShowGroupPanel="False">
            <dxg:TableView.RowStyle>
                <Style TargetType="dxg:GridRowContent">
                    <Style.Triggers>
                        <!-- Timediff가 60 이하일 때 배경색과 텍스트 색상 설정 -->
                        <DataTrigger Binding="{Binding Timediff}" Value="60">
                            <Setter Property="Background" Value="Yellow" />
                            <Setter Property="Foreground" Value="Black" />
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </dxg:TableView.RowStyle>
        </dxg:TableView>
    </dxg:GridControl.View>
</dxg:GridControl>
3. C# 데이터 모델 정의
Timediff 값을 포함한 데이터 모델을 정의합니다.

csharp
코드 복사
public class LogMessage
{
    public int Id { get; set; }
    public string IP { get; set; }
    public string ReceivedMessage { get; set; }
    public DateTime Time1 { get; set; }
    public string LogType { get; set; }
    public int Timediff { get; set; } // 시간 차이 (분 단위)
}
4. C# 데이터 가져오기
SQL 쿼리를 실행하여 데이터를 가져옵니다.

csharp
코드 복사
private List<LogMessage> GetDataFromDatabase()
{
    List<LogMessage> logMessages = new List<LogMessage>();

    string connectionString = "Server=your_server;Database=SMD_ACR_ROUTER;User Id=your_username;Password=your_password;";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        string query = @"
            SELECT 
                Id,
                IP,
                ReceivedMessage,
                Time1,
                LogType,
                DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
            FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
            WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0
            ORDER BY Id DESC;";
        
        SqlCommand command = new SqlCommand(query, connection);
        connection.Open();
        SqlDataReader reader = command.ExecuteReader();

        while (reader.Read())
        {
            logMessages.Add(new LogMessage
            {
                Id = reader.GetInt32(0),
                IP = reader.GetString(1),
                ReceivedMessage = reader.GetString(2),
                Time1 = reader.GetDateTime(3),
                LogType = reader.GetString(4),
                Timediff = reader.GetInt32(5)
            });
        }
    }

    return logMessages;
}
5. 데이터 새로고침
10초마다 데이터를 새로고침하여 최신 상태를 유지합니다.

csharp
코드 복사
DispatcherTimer refreshTimer = new DispatcherTimer();

public MainWindow()
{
    InitializeComponent();

    // 타이머 설정
    refreshTimer.Interval = TimeSpan.FromSeconds(10);
    refreshTimer.Tick += (s, e) => RefreshData();
    refreshTimer.Start();

    // 초기 데이터 로드
    RefreshData();
}

private void RefreshData()
{
    gridControl1.ItemsSource = GetDataFromDatabase();
}
최종 결과
조건부 행 색상: Timediff 값이 60 이하인 경우, 해당 행의 배경색은 노란색, 텍스트 색상은 검정색으로 설정됩니다.