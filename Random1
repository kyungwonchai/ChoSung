press 22.2를 사용하여 UI를 구성하겠습니다. 이 과정에서 C#을 사용하며, 바인딩은 DataAdapter를 사용하지 않고 수행할 것입니다.

1. MS SQL Server 2014 테이블 생성
테이블에는 다음과 같은 컬럼이 포함될 것입니다:

날짜 (date)
작업조 (char(1))
라인 (int)
모델 (varchar(20))
귀책부서 (varchar(5))
array (int)
보드수T (int)
보드수B (int)
발생사유 (varchar(255))
현장점검사항 (varchar(255))
유관부서확인사항 (varchar(255))
발생유형 (varchar(20))
부품수 (int)
자재코드 (varchar(11)) - 자동 생성
반납수량 (int) - 자동 생성
이러한 컬럼을 가진 테이블을 만들기 위한 SQL 스크립트입니다:

sql
Copy code
CREATE TABLE YourTableName (
    Date DATE,
    WorkGroup CHAR(1),
    Line INT,
    Model VARCHAR(20),
    ResponsibleDepartment VARCHAR(5),
    Array INT,
    BoardsT INT,
    BoardsB INT,
    Reason VARCHAR(255),
    OnSiteCheck VARCHAR(255),
    DepartmentConfirmation VARCHAR(255),
    OccurrenceType VARCHAR(20),
    PartCount INT,
    MaterialCode VARCHAR(11),
    ReturnQuantity INT
);
2. WPF 및 Devexpress 사용
WPF와 Devexpress를 사용하여 UI를 구성하고, 이를 데이터베이스와 연결하여 GridControl에 데이터를 표시하고 업데이트할 수 있도록 하겠습니다.

기본적인 WPF 프로젝트 구조:
csharp
Copy code
using DevExpress.Xpf.Grid;
using System.Data.SqlClient;
using System.Collections.ObjectModel;

// ViewModel 정의
public class YourViewModel {
    public ObservableCollection<YourDataModel> DataItems { get; set; }

    public YourViewModel() {
        DataItems = new ObservableCollection<YourDataModel>();
        // 여기에서 데이터 로딩 로직을 추가합니다.
    }
    
    // 데이터 로딩 및 업데이트 메소드
    // ...
}

// DataModel 정의
public class YourDataModel {
    // 프로퍼티 정의
    // 예: public string Model { get; set; }
    // ...
}

// MainWindow.xaml.cs
public partial class MainWindow : Window {
    public MainWindow() {
        InitializeComponent();
        this.DataContext = new YourViewModel();
    }
}
MainWindow.xaml:
xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid">
    <Grid>
        <dxg:GridControl ItemsSource="{Binding DataItems}">
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True"/>
            </dxg:GridControl.View>
            <dxg:GridControl.Columns>
                <!-- 컬럼 정의 -->
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
여기서 YourDataModel 클래스는 데이터베이스 테이블의 구조를 반영해야 합니다. YourViewModel 클래스에서는 ObservableCollection<YourDataModel>을 사용하여 GridControl에 데이터를 바인딩합니다. 데이터를 로드하고, 삽입, 업데이트, 삭제하는 로직은 YourViewModel에 구현해야 합니다.

이 예제는 간략한 구조만 제공하며, 실제 구현은 프로젝트의 요구사항과 환경에 맞게 조정해야