다. DevExpress의 SpreadsheetControl에서 시트가 추가되거나 삭제될 때 발생하는 이벤트는 각각 WorksheetInserted와 WorksheetRemoved 이벤트입니다. 제가 잘못된 이벤트 이름을 언급했네요. 시트를 추가하거나 삭제할 때 해당 이벤트를 사용하는 방식으로 코드를 수정해 보겠습니다.

수정된 코드 비하인드
아래는 WorksheetInserted와 WorksheetRemoved 이벤트를 사용하는 코드입니다. 이를 통해 시트 추가/삭제 시 리스트박스를 자동으로 갱신할 수 있습니다.

csharp
코드 복사
using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            InitializeSpreadsheetEventHandlers();
            LoadSheetNamesIntoListBox();
        }

        // SpreadsheetControl의 이벤트 핸들러를 설정하는 메소드
        private void InitializeSpreadsheetEventHandlers()
        {
            // 각 SpreadsheetControl에 대해 WorksheetInserted와 WorksheetRemoved 이벤트 연결
            spreadsheetControl1.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl1.Document.WorksheetRemoved += OnWorksheetChanged;

            spreadsheetControl2.Document.WorksheetInserted += OnWorksheetChanged;
            spreadsheetControl2.Document.WorksheetRemoved += OnWorksheetChanged;
        }

        // 시트가 추가되거나 삭제될 때 호출되는 이벤트 핸들러
        private void OnWorksheetChanged(object sender, WorksheetCollectionChangedEventArgs e)
        {
            // 시트가 추가되거나 삭제될 때 ListBox를 갱신
            LoadSheetNamesIntoListBox();
        }

        // 스프레드시트의 모든 시트 이름을 ListBox에 추가하는 메소드
        private void LoadSheetNamesIntoListBox()
        {
            sheetListBox.Items.Clear(); // 기존 항목을 모두 지웁니다.

            // 각 SpreadsheetControl에 대해 시트 이름을 추가할 때 다른 색상을 지정합니다.
            AddSheetNamesFromSpreadsheet(spreadsheetControl1, Brushes.Red, "Spreadsheet 1", 0);
            AddSheetNamesFromSpreadsheet(spreadsheetControl2, Brushes.Blue, "Spreadsheet 2", 1);
        }

        // 특정 SpreadsheetControl의 시트 이름을 ListBox에 추가하는 메소드
        private void AddSheetNamesFromSpreadsheet(SpreadsheetControl spreadsheet, Brush color, string spreadsheetIdentifier, int tabIndex)
        {
            IWorkbook workbook = spreadsheet.Document;

            foreach (Worksheet sheet in workbook.Worksheets)
            {
                // ListBox 아이템을 텍스트 블록으로 구성하여 색상 지정
                TextBlock textBlock = new TextBlock
                {
                    Text = $"{spreadsheetIdentifier} - {sheet.Name}",
                    Foreground = color
                };

                // 각 시트를 구분하기 위해 Tag에 관련 SpreadsheetControl 및 탭 인덱스 정보를 저장
                textBlock.Tag = new SpreadsheetTag { Spreadsheet = spreadsheet, Worksheet = sheet, TabIndex = tabIndex };
                sheetListBox.Items.Add(textBlock);
            }
        }

        // ListBox의 항목 더블클릭 시 호출되는 이벤트 핸들러
        private void SheetListBox_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            if (sheetListBox.SelectedItem is TextBlock selectedItem)
            {
                // Tag를 통해 Spreadsheet 정보와 Worksheet 객체, TabIndex를 가져옵니다.
                if (selectedItem.Tag is SpreadsheetTag tag)
                {
                    // 해당 탭을 활성화합니다.
                    tabControl.SelectedIndex = tag.TabIndex;

                    // 선택된 시트를 활성화합니다.
                    IWorkbook workbook = tag.Spreadsheet.Document;
                    workbook.Worksheets.ActiveWorksheet = tag.Worksheet;

                    // 사용자에게 알림
                    MessageBox.Show($"'{tag.Worksheet.Name}' 시트를 활성화합니다.", "시트 선택");
                }
            }
        }

        // SpreadsheetControl, Worksheet 및 TabIndex를 포함하는 데이터 클래스 정의
        private class SpreadsheetTag
        {
            public SpreadsheetControl Spreadsheet { get; set; }
            public Worksheet Worksheet { get; set; }
            public int TabIndex { get; set; }
        }
    }
}
주요 수정 사항
이벤트 이름 수정:

이전에 잘못 언급된 WorksheetAdded 이벤트를 올바르게 WorksheetInserted로 수정했습니다.
시트가 추가될 때는 WorksheetInserted 이벤트가 발생하고, 시트가 삭제될 때는 WorksheetRemoved 이벤트가 발생합니다.
이벤트 핸들러 설정:

spreadsheetControl1과 spreadsheetControl2의 WorksheetInserted와 WorksheetRemoved 이벤트를 OnWorksheetChanged 메소드에 연결했습니다.
이를 통해 시트가 추가되거나 삭제될 때 리스트박스를 갱신하게 됩니다.
OnWorksheetChanged() 이벤트 핸들러:

시트가 추가되거나 삭제되면 리스트박스가 자동으로 갱신됩니다.
사용 예시
프로그램 실행:

프로그램을 실행하면 TabControl에 배치된 여러 SpreadsheetControl의 모든 시트 이름이 리스트박스에 표시됩니다.
시트 추가/삭제:

사용자가 스프레드시트에서 시트를 추가하거나 삭제하면 WorksheetInserted 또는 WorksheetRemoved 이벤트가 발생하고, 이에 따라 리스트박스가 자동으로 갱신됩니다.
갱신된 리스트박스는 항상 최신 상태의 시트 목록을 보여줍니다.
탭 및 시트 이동:
