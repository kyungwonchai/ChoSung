하는 모든 파일을 표시하고, 그 이후에는 실시간으로 새롭게 생성되는 파일을 5초마다 확인하여 추가로 보여주도록 구현하겠습니다. 메인 ViewModel에서 너무 많은 코드가 들어가지 않도록 파일 처리 클래스에서 모든 처리를 담당하게 하겠습니다.

전체적인 흐름:
첫 실행: 기존의 폴더에서 최근 두 개의 PO_NO와 관련된 모든 파일을 가져와 DataGrid에 표시.
이후 5초마다: 새로운 파일이 생성되었는지 확인하고, 생성된 파일이 있으면 그 파일을 DataGrid에 추가.
수정된 FileProcessor 클래스 (새 파일 확인 및 처리)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

public class FileProcessor
{
    private readonly string _logFolder;  // 로그 파일이 저장된 폴더 경로
    private Dictionary<string, List<LogEntry>> _poLogEntries = new Dictionary<string, List<LogEntry>>();  // PO_NO에 따른 로그 저장
    private List<string> _processedFiles = new List<string>();  // 이미 처리한 파일명 저장

    public FileProcessor(string logFolder)
    {
        _logFolder = logFolder;
    }

    /// <summary>
    /// 초기 실행 시, 최근 두 개의 PO_NO에 대한 전체 파일을 반환합니다.
    /// </summary>
    public List<LogEntry> LoadInitialPOLogs()
    {
        // 폴더 내의 모든 파일을 시간순으로 정렬
        var files = Directory.GetFiles(_logFolder, "*.txt").OrderBy(f => f).ToList();

        foreach (var file in files)
        {
            // 파일을 읽어서 파싱 후 데이터 추가
            var logEntry = ParseFile(file);

            if (!_poLogEntries.ContainsKey(logEntry.PO_NO))
            {
                _poLogEntries[logEntry.PO_NO] = new List<LogEntry>();
            }
            _poLogEntries[logEntry.PO_NO].Add(logEntry);
            _processedFiles.Add(Path.GetFileName(file));  // 처리한 파일을 목록에 추가
        }

        // 최근 두 개의 PO_NO에 대한 모든 생산 과정을 반환
        return GetRecentPOEntries();
    }

    /// <summary>
    /// 5초마다 폴더를 확인하고 새롭게 생성된 파일이 있으면 처리합니다.
    /// </summary>
    public List<LogEntry> CheckForNewFiles()
    {
        List<LogEntry> newEntries = new List<LogEntry>();

        // 폴더 내의 모든 파일을 시간순으로 정렬
        var files = Directory.GetFiles(_logFolder, "*.txt").OrderBy(f => f).ToList();

        foreach (var file in files)
        {
            // 이미 처리한 파일은 건너뜀
            if (_processedFiles.Contains(Path.GetFileName(file)))
                continue;

            // 파일을 읽어서 파싱 후 데이터 추가
            var logEntry = ParseFile(file);

            if (!_poLogEntries.ContainsKey(logEntry.PO_NO))
            {
                _poLogEntries[logEntry.PO_NO] = new List<LogEntry>();
            }
            _poLogEntries[logEntry.PO_NO].Add(logEntry);
            _processedFiles.Add(Path.GetFileName(file));  // 처리한 파일을 목록에 추가
            newEntries.Add(logEntry);  // 새로 추가된 파일만 리스트에 추가
        }

        return newEntries;
    }

    /// <summary>
    /// 파일을 읽어서 LogEntry 객체로 변환합니다.
    /// </summary>
    /// <param name="filePath">읽을 파일의 경로</param>
    /// <returns>파싱된 LogEntry 객체</returns>
    private LogEntry ParseFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);

        var logEntry = new LogEntry
        {
            FileName = Path.GetFileName(filePath),
            MAG_NO = GetValueFromLine(lines, "MAG_NO"),
            MAG_QTY = int.Parse(GetValueFromLine(lines, "MAG_QTY")),
            PO_NO = GetValueFromLine(lines, "PO_NO"),
            PO_PLAN_QTY = int.Parse(GetValueFromLine(lines, "PO_PLAN_QTY")),
            PO_PROD_QTY = int.Parse(GetValueFromLine(lines, "PO_PROD_QTY"))
        };

        return logEntry;
    }

    /// <summary>
    /// 파일에서 특정 키에 해당하는 값을 추출합니다.
    /// </summary>
    /// <param name="lines">파일 내용</param>
    /// <param name="key">찾고자 하는 키 (예: "MAG_NO")</param>
    /// <returns>해당 키에 해당하는 값</returns>
    private string GetValueFromLine(string[] lines, string key)
    {
        var line = lines.FirstOrDefault(l => l.Contains(key));
        return line?.Split('=')[1].Trim('\'');
    }

    /// <summary>
    /// 최근 두 개의 PO_NO에 대한 모든 로그 파일을 반환합니다.
    /// </summary>
    private List<LogEntry> GetRecentPOEntries()
    {
        var result = new List<LogEntry>();

        // PO_NO에 따라 처리한 로그 중에서 가장 최근 두 개의 PO_NO만 가져옴
        var recentPOs = _poLogEntries.OrderByDescending(p => p.Value.Last().FileName).Take(2).ToList();

        foreach (var poLog in recentPOs)
        {
            result.AddRange(poLog.Value);
        }

        return result;
    }
}
수정된 MainViewModel
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Threading;
using System.Windows.Input;

public class MainViewModel
{
    private readonly FileProcessor _fileProcessor;  // 파일 처리 클래스
    private Timer _timer;  // 5초마다 체크할 타이머

    public ObservableCollection<LogEntry> LogEntries { get; set; }  // DataGrid에 바인딩할 로그 목록
    public ICommand LoadLogsCommand { get; }  // 수동으로 로그를 로드하는 명령

    public MainViewModel()
    {
        LogEntries = new ObservableCollection<LogEntry>();
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG");

        // 처음 실행 시 최근 두 개의 PO_NO에 대한 전체 파일을 로드
        LoadInitialLogs();

        // 5초마다 폴더를 감시하는 타이머 설정
        _timer = new Timer(CheckForNewLogs, null, 5000, 5000);

        // 수동으로 로그 로드를 위한 커맨드 설정
        LoadLogsCommand = new RelayCommand(LoadInitialLogs);
    }

    /// <summary>
    /// 처음 실행 시 최근 두 개의 PO_NO에 대한 로그 파일을 로드합니다.
    /// </summary>
    private void LoadInitialLogs()
    {
        var initialEntries = _fileProcessor.LoadInitialPOLogs();

        // 기존 로그를 모두 클리어하고 새로운 엔트리로 채움
        LogEntries.Clear();
        foreach (var entry in initialEntries)
        {
            LogEntries.Add(entry);
        }
    }

    /// <summary>
    /// 타이머가 5초마다 호출하여 새로운 로그 파일을 확인합니다.
    /// </summary>
    private void CheckForNewLogs(object state)
    {
        var newEntries = _fileProcessor.CheckForNewFiles();

        // 새로운 엔트리들을 DataGrid에 추가
        foreach (var entry in newEntries)
        {
            App.Current.Dispatcher.Invoke(() => LogEntries.Add(entry));
        }
    }
}
LogEntry 클래스
csharp
코드 복사
public class LogEntry
{
    public string FileName { get; set; }  // 파일 이름
    public string MAG_NO { get; set; }  // MAG_NO
    public int MAG_QTY { get; set; }  // MAG_QTY
    public string PO_NO { get; set; }  // PO_NO
    public int PO_PLAN_QTY { get; set; }  // PO_PLAN_QTY
    public int PO_PROD_QTY { get; set; }  // PO_PROD_QTY
}
RelayCommand 클래스
csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;

    public RelayCommand(Action execute)
    {
        _execute = execute;
    }

    public bool CanExecute(object parameter) => true;

    public void Execute(object parameter)
    {
        _execute();
    }

    public event EventHandler CanExecuteChanged;
}
설명:
FileProcessor 클래스:
LoadInitialPOLogs(): 처음 실행 시, 기존 파일들 중에서 최근 두 개의 PO_NO와 관련된 모든 파일을 가져와 반환합니다.
CheckForNewFiles(): 그 이후로는 5초마다 폴더를 확인하여 새로운 파일이 있는지 확인하고, 해당 파일이 있으면 그것을 반환합니다.
MainViewModel 클래스:
LoadInitialLogs(): 처음 실행 시, 최근 두 개의 PO_NO에 대한 파일들을 불러와서 DataGrid에 표시합니다.
CheckForNewLogs(): 타이머를 사용하여 5초마다 새로운 파일이 있는지 확인하고, 새로운 파일만 추가로 DataGrid에 표시합니다.
이제 이 코드는 처음 실행 시 최근 두 개의 PO_NO에 대한 모든 파일을 DataGrid에 표시하며, 이후 새롭게 생성되는 파일은 5초마다 추가로 표시