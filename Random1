는 대신 JavaScript를 통해 특정 데이터를 직접 업데이트하는 방식을 사용할 수 있습니다. 이를 통해 페이지의 구조와 스타일을 유지하면서 센서 데이터만 동적으로 갱신합니다.

아래는 센서 상태와 시간을 업데이트하는 좀 더 세련된 방식입니다. 이 방식에서는 기존 테이블과 스타일을 유지한 채, 각 센서의 상태만 변경하여 표시하는 방식을 채택합니다.

수정된 코드 (logsensors.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            justify-content: center;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
        #sensorName {
            margin: 20px;
            padding: 10px;
            width: 300px;
            font-size: 16px;
            text-align: center;
        }
    </style>
    <script>
        let sensorActivationTimes = {}; // 두 번째 센서의 활성화 시간을 저장

        function trackSecondSensor(ip, status) {
            if (!sensorActivationTimes[ip]) {
                sensorActivationTimes[ip] = null; // 처음에는 null로 초기화
            }

            if (status === 'red') {
                if (!sensorActivationTimes[ip]) {
                    // 센서가 활성화된 시간 기록
                    sensorActivationTimes[ip] = new Date();
                    document.getElementById('duration-' + ip).textContent = 'Active';
                }
            } else if (status === 'green' && sensorActivationTimes[ip]) {
                // 센서가 비활성화된 시간 기록
                const deactivationTime = new Date();
                const activationTime = sensorActivationTimes[ip];
                const duration = (deactivationTime - activationTime) / 1000; // 초 단위로 변환
                document.getElementById('duration-' + ip).textContent = duration + 's';
                sensorActivationTimes[ip] = null; // 초기화하여 다음 활성화를 대기
            }
        }

        function updateSensorStatus(data) {
            data.forEach(item => {
                const ip = item.ip;
                const sensorRow = document.querySelector(`[data-ip="${ip}"]`);
                if (sensorRow) {
                    const secondSensor = sensorRow.querySelector('.second-sensor');
                    const status = item.sensor1[1] === '1' ? 'red' : 'green';

                    // 두 번째 센서 상태 업데이트
                    secondSensor.className = `circle ${status} second-sensor`;
                    trackSecondSensor(ip, status);
                }
            });
        }

        function fetchData() {
            fetch('/logsensors-data')
                .then(response => response.json())
                .then(data => {
                    updateSensorStatus(data);
                });
        }

        setInterval(fetchData, 3000);
    </script>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <input type="text" id="sensorName" placeholder="Click a sensor to see its name" readonly>
    <div id="data-container">
        <table>
            <thead>
                <tr>
                    <th>IP</th>
                    <th>Sensors</th>
                    <th>Time</th>
                    <th>Duration (2nd Sensor)</th>
                </tr>
            </thead>
            <tbody>
                {% for item in data %}
                <tr data-ip="{{ item.ip }}">
                    <td>{{ item.ip }}</td>
                    <td>
                        <div class="circle-container">
                            {% for char in item.sensor1 %}
                            {% set sensor_name = sensor_names.get(loop.index0, 'Unknown Sensor') %}
                            <span class="circle {% if char == '1' %}red{% else %}green{% endif %} 
                                  {% if loop.index0 == 1 %}second-sensor{% endif %}"
                                  onclick="showSensorName('{{ sensor_name }} (Position: {{ loop.index0 + 1 }})')">
                            </span>
                            {% endfor %}
                        </div>
                    </td>
                    <td>{{ item.time1 }}</td>
                    <td id="duration-{{ item.ip }}">Not active yet</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>
</html>
수정 사항 설명
updateSensorStatus 함수:

/logsensors-data 경로에서 가져온 JSON 데이터를 사용하여 두 번째 센서의 상태를 업데이트합니다.
각 행의 두 번째 센서의 상태를 찾아 해당 상태에 따라 색상을 업데이트하고, 센서 상태가 변경될 때 시간을 기록합니다.
AJAX를 통한 JSON 데이터 갱신:

JSON 형식의 데이터를 받아오는 /logsensors-data API 엔드포인트를 가정하고, fetchData 함수가 이를 호출하여 데이터를 가져와 업데이트합니다.
HTML의 구조와 스타일을 변경하지 않으므로 깜박임 없이 안정적으로 데이터를 갱신할 수 있습니다.
HTML 테이블 유지:

HTML 구조를 유지하면서 센서의 상태만 JavaScript를 통해 동적으로 변경하도록 했습니다. 이렇게 하면 스타일이 깨지지 않고 페이지 전체가 깜박이는 문제도 해결됩니다.
서버 측 수정 (app.py)
/logsensors-data API 엔드포인트를 JSON 형식으로 제공하도록 서버 코드를 수정해야 합니다.

python
코드 복사
from flask import Flask, jsonify, render_template
import pyodbc

app = Flask(__name__)

conn_str = (
    r"Driver={SQL Server};"
    r"Server=YOUR_SERVER_NAME;"
    r"Database=YOUR_DATABASE_NAME;"
    r"UID=YOUR_USERNAME;"
    r"PWD=YOUR_PASSWORD;"
)

def get_log_sensors():
    data = []
    try:
        with pyodbc.connect(conn_str) as conn:
            cursor = conn.cursor()
            query = "SELECT IP, Sensor1, Time1 FROM LogSensors ORDER BY IP"
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                data.append({
                    'ip': row[0],
                    'sensor1': row[1],
                    'time1': row[2].strftime('%Y-%m-%d %H:%M:%S')
                })
    except Exception as e:
        print(f"Database connection failed: {e}")
    return data

@app.route('/')
def index():
    data = get_log_sensors()
    return render_template('logsensors.html', data=data)

@app.route('/logsensors-data')
def logsensors_data():
    data = get_log_sensors()
    return jsonify(data)

if __name__ == '__main__':
    app.run(debug=True)
설명
/logsensors-data API:

JSON 형식으로 센서 데이터를 반환합니다. 클라이언트 측에서 이 데이터를 사용하여 센서 상태를 업데이트합니다.
get_log_sensors 함수:

데이터베이스에서 데이터를 가져와 JSON 형식으로 변환하여 제공합니다.
테스트 방법
Flask 서버를 실행합니다:
bash
코드 복사
python app.py
브라우저에서 http://127.0.0.1:5000/로 접속하여 두 번째 센서의 상태가 변경될 때마다 테이블이 깜박이지 않고 데이터가 제대로 업데이트되는지 확인합니다.
이제 HTML 스타일을 유지하면서도 페이지를 깜박이지 않게 하고, 센서의 상태를 실시간으로 정확히 갱신할 수 있습니