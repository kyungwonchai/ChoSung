네, 알겠습니다. 요청하신 대로 프로젝트 파일 목록의 첫 3개 파일(App.config, App.xaml, App.xaml.cs)의 전체 코드를 여기에 바로 작성해 드리겠습니다.

1. App.config

애플리케이션 설정 파일입니다. 데이터베이스 연결 문자열과 마스터 키 설정이 포함되어 있습니다.

XML

<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>

  <appSettings>
    <add key="MasterKey" value="admin123" />
  </appSettings>

  <connectionStrings>
    <add name="LockerDbConnection"
         connectionString="Server=YOUR_SERVER_NAME;Database=LockerManagementDB;Trusted_Connection=True;MultipleActiveResultSets=True;"
         providerName="System.Data.SqlClient"/>
  </connectionStrings>

  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
  </startup>

  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework">
      <parameters>
        <parameter value="mssqllocaldb" /> </parameters>
    </defaultConnectionFactory>
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
</configuration>
 1 주의: 위 코드에서 connectionString의 Server=YOUR_SERVER_NAME; 부분을 실제 사용하는 MS SQL Server 인스턴스 이름으로 변경해야 합니다.   
1.
learn.microsoft.com
learn.microsoft.com

2. App.xaml

애플리케이션의 시작 지점과 전역 리소스를 정의하는 XAML 파일입니다. StartupUri를 통해 MainWindow가 시작되도록 지정합니다.

XML

<Application x:Class="LockerManagementApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:LockerManagementApp"
             StartupUri="Views/MainWindow.xaml"> <Application.Resources>
        </Application.Resources>
</Application>
3. App.xaml.cs

App.xaml의 코드 비하인드 파일입니다. 애플리케이션 수준의 이벤트(시작, 종료 등) 처리 및 전역 예외 처리 로직을 포함합니다. (.NET Framework 4.8 버전에서는 DI 호스트 설정이 없습니다.)

C#

using System;
using System.Diagnostics; // Debug 사용
using System.Threading.Tasks; // TaskScheduler 사용
using System.Windows;
using System.Windows.Threading; // DispatcherUnhandledException 사용

namespace LockerManagementApp
{
    /// <summary>
    /// App.xaml에 대한 상호 작용 논리 (.NET Framework 4.8)
    /// </summary>
    public partial class App : Application
    {
        /// <summary>
        /// 애플리케이션 시작 시 호출됩니다.
        /// </summary>
        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            // 전역 예외 처리 설정
            SetupGlobalExceptionHandling();
            Debug.WriteLine("애플리케이션 시작됨.");
        }

        /// <summary>
        /// 애플리케이션 종료 시 호출됩니다. (필요 시 리소스 정리 등)
        /// </summary>
        protected override void OnExit(ExitEventArgs e)
        {
            Debug.WriteLine("애플리케이션 종료됨.");
            base.OnExit(e);
        }


        #region 전역 예외 처리 (Global Exception Handling)

        /// <summary>
        /// 처리되지 않은 예외를 처리하기 위한 전역 핸들러들을 설정합니다.
        /// </summary>
        private void SetupGlobalExceptionHandling()
        {
            // UI 스레드에서 발생하는 처리되지 않은 예외 처리
            DispatcherUnhandledException += (s, e) =>
            {
                LogAndShowException(e.Exception, "UI Thread Exception");
                // 처리된 것으로 표시하여 앱 비정상 종료 방지 (주의: 심각한 오류는 종료가 나을 수 있음)
                e.Handled = true;
            };

            // 백그라운드 스레드(Task)에서 발생하는 관찰되지 않은 예외 처리
            TaskScheduler.UnobservedTaskException += (s, e) =>
            {
                LogAndShowException(e.Exception, "Background Task Exception");
                // 예외가 관찰되었음을 표시하여 프로세스 종료를 방지합니다.
                e.SetObserved();
            };

            // 현재 애플리케이션 도메인에서 발생하는 처리되지 않은 예외 처리 (최후의 방어선)
            AppDomain.CurrentDomain.UnhandledException += (s, e) =>
            {
                // e.ExceptionObject는 object 타입이므로 Exception으로 캐스팅해야 합니다.
                LogAndShowException((Exception)e.ExceptionObject, "AppDomain Exception");
                // 이 단계에서는 앱 종료를 막기 어려울 수 있습니다.
            };
        }

        /// <summary>
        /// 예외 정보를 로그(디버그 출력)하고 사용자에게 메시지 박스로 알립니다.
        /// </summary>
        /// <param name="exception">발생한 예외 객체</param>
        /// <param name="source">예외 발생 출처 정보 문자열</param>
        private void LogAndShowException(Exception exception, string source)
        {
            // 예외의 상세 정보를 포함하여 문자열 생성 (ToString() 사용)
            string errorMessage = $"예기치 않은 오류가 발생했습니다 ({source}):\n\n{exception.ToString()}";

            // 디버그 출력 창에 오류 기록 (Visual Studio 실행 시 확인 가능)
            Debug.WriteLine($"*** 예외 발생 ({source}) ***\n{errorMessage}");

            try
            {
                 // 사용자에게 오류 메시지 박스 표시
                 MessageBox.Show(errorMessage, "애플리케이션 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            catch (Exception msgEx)
            {
                 // 메시지 박스 표시 자체에서 오류 발생 시 디버그 출력
                 Debug.WriteLine($"*** 메시지 박스 표시 실패 ({source}) ***\n{msgEx.ToString()}");
            }
            // 필요 시 추가적인 오류 처리 로직 (예: 파일 로그 기록, 서버로 오류 전송 등)
        }

        #endregion