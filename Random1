파일을 하나로 합치면서 메인 UI에서 모든 기능을 구현하는 최적화된 C# WPF 프로젝트를 만드는 작업은 상당히 복잡할 수 있습니다. 특히, 기존의 15개 이상의 파일로 구성된 프로젝트를 하나의 파일로 통합하면서 기능을 유지하고, 함수형 패턴을 따르는 코드를 작성하려면 신중한 리팩토링이 필요합니다.

주어진 정보로는 구체적인 기능과 구조를 완전히 파악할 수 없지만, 일반적인 WPF 애플리케이션에서 사용되는 패턴과 소켓 연결의 기본적인 흐름을 통합해 하나의 코드 파일로 최적화하는 방안을 제공할 수 있습니다.

아래는 간단한 예시로, 기존의 다양한 기능을 하나의 MainWindow.xaml.cs 파일로 통합하고, UI와 비즈니스 로직을 같이 처리하도록 구성한 예입니다. 이 예제는 단순화된 형태로, 실제 프로젝트의 모든 세부 사항을 반영하지는 않습니다. 따라서 실제 프로젝트에 적용할 때는 필요에 따라 수정이 필요합니다.

최적화된 C# WPF 코드 예제
MainWindow.xaml
xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="RouterMiddleACR" Height="350" Width="525">
    <Grid>
        <StackPanel>
            <!-- 명령어 입력 필드 -->
            <TextBox Name="CommandTextBox" Width="300" Margin="10"/>
            
            <!-- 전송 버튼 -->
            <Button Name="SendButton" Content="Send Command" Width="100" Margin="10" Click="SendButton_Click"/>
            
            <!-- 로그 출력 -->
            <TextBox Name="LogTextBox" Width="300" Height="200" Margin="10" IsReadOnly="True"/>
        </StackPanel>
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Windows;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private TcpClient _client;
        private NetworkStream _stream;

        public MainWindow()
        {
            InitializeComponent();
            InitializeSocketConnection();
        }

        // 소켓 연결 초기화
        private void InitializeSocketConnection()
        {
            try
            {
                _client = new TcpClient("127.0.0.1", 5000); // IP 주소와 포트를 실제 환경에 맞게 수정
                _stream = _client.GetStream();
                Log("Connected to the server.");
            }
            catch (Exception ex)
            {
                Log($"Connection failed: {ex.Message}");
            }
        }

        // 명령어 전송 버튼 클릭 핸들러
        private void SendButton_Click(object sender, RoutedEventArgs e)
        {
            string command = CommandTextBox.Text;
            if (!string.IsNullOrEmpty(command))
            {
                SendCommand(command);
            }
            else
            {
                Log("Command is empty.");
            }
        }

        // 명령어를 PLC로 전송하는 메서드
        private void SendCommand(string command)
        {
            try
            {
                if (_stream == null)
                {
                    Log("No connection to server.");
                    return;
                }

                // 메시지를 ASCII로 인코딩하고 전송
                byte[] data = Encoding.ASCII.GetBytes(command + "\r");
                _stream.Write(data, 0, data.Length);
                Log($"Sent: {command}");
            }
            catch (Exception ex)
            {
                Log($"Error sending command: {ex.Message}");
            }
        }

        // 로그를 출력하는 메서드
        private void Log(string message)
        {
            Dispatcher.Invoke(() =>
            {
                LogTextBox.AppendText($"{message}\n");
                LogTextBox.ScrollToEnd();
            });
        }

        // 윈도우 닫기 이벤트 핸들러
        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            CloseSocketConnection();
        }

        // 소켓 연결 닫기
        private void CloseSocketConnection()
        {
            try
            {
                _stream?.Close();
                _client?.Close();
                Log("Disconnected from the server.");
            }
            catch (Exception ex)
            {
                Log($"Error disconnecting: {ex.Message}");
            }
        }
    }
}
코드 설명
UI 구성:

TextBox와 Button을 사용해 명령어를 입력하고 전송할 수 있는 간단한 UI를 만듭니다.
로그 출력을 위한 TextBox가 있습니다.
소켓 초기화:

TcpClient를 사용해 서버와의 연결을 초기화합니다.
서버 주소(127.0.0.1)와 포트(5000)는 필요에 따라 수정해야 합니다.
명령어 전송:

사용자가 명령어를 입력하고 전송 버튼을 누르면 SendCommand 메서드가 호출됩니다.
명령어를 ASCII로 인코딩하여 서버로 전송합니다.
로그 출력:

소켓 연결, 명령어 전송, 에러 등의 이벤트가 발생할 때마다 로그를 LogTextBox에 출력합니다.
소켓 종료:

애플리케이션이 종료될 때 소켓 연결을 닫습니다.
결론
이 예제는 모든 기능을 하나의 MainWindow.xaml.cs 파일로 통합하여 코드 복잡성을 줄이고 유지 보수성을 높입니다. 그러나 실제 프로젝트에서는 각 기능이 요구하는 다양한 세부 사항을 모두 반영해야 하므로, 이 코드를 기반으로 필요한 부분을 추가하거나 수정하는 것이 중요합니다.