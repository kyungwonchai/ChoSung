네, 알겠습니다. 이번에는 동일한 기능을 하는 WPF(Windows Presentation Foundation) 데스크톱 애플리케이션 버전으로 코드를 작성해 드리겠습니다.

WPF는 XAML이라는 마크업 언어를 사용해 UI를 디자인하므로 WinForms와는 구조가 다릅니다. 하지만 핵심 로직은 동일하게 적용할 수 있습니다.

1단계: 프로젝트 생성
Visual Studio를 실행하고 '새 프로젝트 만들기'를 클릭합니다.
검색창에 WPF를 검색하고, **WPF 앱 (.NET Framework)**이라고 명시된 C# 템플릿을 선택합니다.
프로젝트 이름을 지정하고, 프레임워크 버전을 .NET Framework 4.6 이상으로 설정한 후 '만들기'를 클릭합니다.
2단계: UI 디자인 (MainWindow.xaml)
프로젝트가 생성되면 MainWindow.xaml 파일이 열립니다. 아래의 XAML 코드를 복사하여 기존 내용을 모두 덮어쓰세요. 버튼과 텍스트 블록(레이블)을 미리 디자인한 코드입니다.

XML

<Window x:Class="WpfBrowserLauncher.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfBrowserLauncher"
        mc:Ignorable="d"
        Title="WPF Browser Launcher" Height="200" Width="400" WindowStartupLocation="CenterScreen">
    <Grid>
        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
            <Button x:Name="launchButton" Content="브라우저 실행" Width="150" Height="40" FontSize="16" Click="LaunchButton_Click"/>
            
            <TextBlock x:Name="statusTextBlock" Text="버튼을 눌러 시작하세요." Margin="0,20,0,0" HorizontalAlignment="Center" FontSize="14"/>
        </StackPanel>
    </Grid>
</Window>
3단계: C# 코드 작성 (MainWindow.xaml.cs)
XAML 편집기에서 LaunchButton_Click 부분에 마우스 오른쪽 클릭 > '정의로 이동'을 선택하거나, 솔루션 탐색기에서 MainWindow.xaml 아래의 MainWindow.xaml.cs 파일을 엽니다. 아래 코드로 전체 내용을 덮어쓰세요.

C#

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows; // WPF 기본 네임스페이스

namespace WpfBrowserLauncher
{
    public partial class MainWindow : Window
    {
        // Windows API 함수 선언 (변경 없음)
        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

        public MainWindow()
        {
            InitializeComponent();
        }

        // 버튼 클릭 이벤트 핸들러 (async 키워드 추가)
        private async void LaunchButton_Click(object sender, RoutedEventArgs e)
        {
            // 💡 1. 여기에 두 개의 웹 주소를 입력하세요.
            string urlLeft = "https://www.google.com";
            string urlRight = "https://www.naver.com";

            // UI 업데이트 및 비활성화
            launchButton.IsEnabled = false;
            statusTextBlock.Text = "브라우저를 실행하고 정렬하는 중입니다...";

            // 2. 주 모니터 해상도 가져오기 (WPF 방식)
            double screenWidth = SystemParameters.PrimaryScreenWidth;
            double screenHeight = SystemParameters.PrimaryScreenHeight;

            // 3. 브라우저 실행 및 위치 조정을 비동기적으로 수행
            await LaunchAndPositionBrowserAsync(urlLeft, 0, 0, (int)(screenWidth / 2), (int)screenHeight);
            await LaunchAndPositionBrowserAsync(urlRight, (int)(screenWidth / 2), 0, (int)(screenWidth / 2), (int)screenHeight);

            statusTextBlock.Text = "완료되었습니다! 2초 후에 프로그램을 종료합니다.";

            // 4. 잠시 후 애플리케이션 자동 종료
            await Task.Delay(2000);
            this.Close();
        }

        /// <summary>
        /// 브라우저를 비동기적으로 실행하고 창 위치를 조정하는 함수 (WinForms 버전과 거의 동일)
        /// </summary>
        private async Task<bool> LaunchAndPositionBrowserAsync(string url, int x, int y, int width, int height)
        {
            try
            {
                var psi = new ProcessStartInfo(url) { UseShellExecute = true };
                Process process = Process.Start(psi);

                // 프로세스가 메인 창 핸들을 가질 때까지 비동기적으로 대기
                int timeoutMilliseconds = 8000;
                var stopwatch = Stopwatch.StartNew();
                while (process.MainWindowHandle == IntPtr.Zero && stopwatch.ElapsedMilliseconds < timeoutMilliseconds)
                {
                    await Task.Delay(100);
                    process.Refresh();
                }

                if (process.MainWindowHandle != IntPtr.Zero)
                {
                    MoveWindow(process.MainWindowHandle, x, y, width, height, true);
                    return true;
                }
                else
                {
                    statusTextBlock.Text = $"{url} 창을 찾는 데 실패했습니다.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"오류 발생: {ex.Message}");
                return false;
            }
        }
    }
}
WinForms 버전과의 주요 차이점
UI 정의: Form1.cs의 디자이너 코드 대신 MainWindow.xaml 파일을 사용하여 UI를 정의합니다.
화면 크기: System.Windows.Forms.Screen 클래스 대신 WPF에 내장된 System.Windows.SystemParameters를 사용하여 주 모니터의 너비와 높이를 가져옵니다. 코드가 더 간결해집니다.
네임스페이스: System.Windows.Forms 대신 System.Windows 네임스페이스를 주로 사용합니다.
나머지 async/await를 이용한 비동기 처리, Process 실행, MoveWindow API 호출 로직은 모두 동일합니다.

실행 파일(.exe) 만들기
WinForms와 동일합니다. 상단 메뉴에서 빌드 > 솔루션 빌드를 실행한 후, 프로젝트 폴더의 bin\Debug (또는 bin\Release) 폴더에서 생성된 .exe 파일을 찾아 사용하시면 됩니다.

