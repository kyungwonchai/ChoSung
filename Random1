dio 프로젝트 내의 Images 폴더에 있는 unmem1.jpg 파일을 WPF Image 컨트롤의 소스로 설정하면서 캐싱을 None으로 하는 코드를 아래와 같이 작성할 수 있습니다. 이 예제에서는 BitmapImage의 CacheOption을 BitmapCacheOption.None으로 설정하여 이미지 캐싱을 방지합니다.
XAML 구성

먼저, XAML에서 Image 컨트롤을 정의합니다.

xml

<Window ...
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Image Name="MyImage"/>
    </Grid>
</Window>

C# Code-Behind

이제 이미지를 로드하고 캐싱을 방지하는 C# 코드 비하인드를 작성합니다.

csharp

using System;
using System.Windows;
using System.Windows.Media.Imaging;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        LoadImageWithoutCaching("pack://application:,,,/Images/unmem1.jpg");
    }

    private void LoadImageWithoutCaching(string imagePath)
    {
        var bitmapImage = new BitmapImage();
        bitmapImage.BeginInit();
        bitmapImage.CacheOption = BitmapCacheOption.None;
        bitmapImage.UriSource = new Uri(imagePath, UriKind.RelativeOrAbsolute);
        bitmapImage.EndInit();

        MyImage.Source = bitmapImage;
    }
}

이 코드에서는 LoadImageWithoutCaching 메서드를 통해 이미지를 로드합니다. BitmapCacheOption.None을 설정하여 이미지의 캐싱을 방지하고, pack://application:,,, URI를 사용하여 프로젝트 내의 리소스에 접근합니다.

Images 폴더에 있는 unmem1.jpg 파일은 프로젝트의 리소스로 포함되어야 하며, 해당 파일의 Build Action 속성은 Resource로 설정