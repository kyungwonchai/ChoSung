
아래는 MVVM 패턴으로 차트에 표시한 데이터를 DevExpress GridControl에도 표시하도록 구현한 코드입니다. 데이터를 관리하는 ViewModel 클래스를 만들어 차트와 GridControl에 동일한 데이터를 바인딩합니다.

MSSQL: Sample Data
LineDataTable에 아래 데이터를 저장한다고 가정합니다.

LineName	Timestamp	MP1	MP2	MP3	MP4	MP5
Line 1.1	2025-01-11 08:00:00	0.1	0.2	0.3	0.4	0.5
Line 1.2	2025-01-11 08:01:00	0.2	0.3	0.4	0.5	0.6
Stored Procedure
sql
코드 복사
CREATE PROCEDURE GetLineData
AS
BEGIN
    SELECT LineName, Timestamp, MP1, MP2, MP3, MP4, MP5
    FROM LineDataTable
    ORDER BY Timestamp
END
MVVM 구조
Model
csharp
코드 복사
using System;

namespace ChartGridMVVM
{
    public class LineData
    {
        public string LineName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
ViewModel
csharp
코드 복사
using DevExpress.Mvvm;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;

namespace ChartGridMVVM
{
    public class MainViewModel : ViewModelBase
    {
        private readonly string _connectionString = "YourConnectionStringHere";

        public ObservableCollection<LineData> LineDataCollection { get; set; }

        public MainViewModel()
        {
            LineDataCollection = new ObservableCollection<LineData>();
            LoadLineData();
        }

        private void LoadLineData()
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("GetLineData", connection))
                {
                    command.CommandType = CommandType.StoredProcedure;
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            LineDataCollection.Add(new LineData
                            {
                                LineName = reader["LineName"].ToString(),
                                Timestamp = reader.GetDateTime(reader.GetOrdinal("Timestamp")),
                                MP1 = reader.GetDouble(reader.GetOrdinal("MP1")),
                                MP2 = reader.GetDouble(reader.GetOrdinal("MP2")),
                                MP3 = reader.GetDouble(reader.GetOrdinal("MP3")),
                                MP4 = reader.GetDouble(reader.GetOrdinal("MP4")),
                                MP5 = reader.GetDouble(reader.GetOrdinal("MP5"))
                            });
                        }
                    }
                }
            }
        }
    }
}
View (XAML)
xml
코드 복사
<Window x:Class="ChartGridMVVM.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:local="clr-namespace:ChartGridMVVM"
        Title="Chart and Grid MVVM" Height="600" Width="800">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="2*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- ChartControl -->
        <dxc:ChartControl Grid.Row="0">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.Series>
                        <dxc:LineSeries2D DisplayName="MP1" 
                                          DataSource="{Binding LineDataCollection}" 
                                          ArgumentDataMember="Timestamp" 
                                          ValueDataMember="MP1" />
                        <dxc:LineSeries2D DisplayName="MP2" 
                                          DataSource="{Binding LineDataCollection}" 
                                          ArgumentDataMember="Timestamp" 
                                          ValueDataMember="MP2" />
                        <dxc:LineSeries2D DisplayName="MP3" 
                                          DataSource="{Binding LineDataCollection}" 
                                          ArgumentDataMember="Timestamp" 
                                          ValueDataMember="MP3" />
                        <dxc:LineSeries2D DisplayName="MP4" 
                                          DataSource="{Binding LineDataCollection}" 
                                          ArgumentDataMember="Timestamp" 
                                          ValueDataMember="MP4" />
                        <dxc:LineSeries2D DisplayName="MP5" 
                                          DataSource="{Binding LineDataCollection}" 
                                          ArgumentDataMember="Timestamp" 
                                          ValueDataMember="MP5" />
                    </dxc:XYDiagram2D.Series>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- GridControl -->
        <dxg:GridControl Grid.Row="1" ItemsSource="{Binding LineDataCollection}">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="LineName" Header="Line Name" />
                <dxg:GridColumn FieldName="Timestamp" Header="Timestamp" />
                <dxg:GridColumn FieldName="MP1" Header="MP1" />
                <dxg:GridColumn FieldName="MP2" Header="MP2" />
                <dxg:GridColumn FieldName="MP3" Header="MP3" />
                <dxg:GridColumn FieldName="MP4" Header="MP4" />
                <dxg:GridColumn FieldName="MP5" Header="MP5" />
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
작동 원리
Model:

LineData 클래스는 데이터 구조를 정의합니다.
ViewModel:

MainViewModel은 LineDataCollection 데이터를 관리하고, SQL 프로시저를 호출하여 데이터를 로드합니다.
View:

ChartControl과 GridControl은 LineDataCollection에 바인딩됩니다.
차트는 시간(Timestamp)에 따라 MP1~MP5 값을 표시합니다.
GridControl은 동일 데이터를 표 형식으로 표시합니다.
결과
차트:

MP1~MP5 데이터가 시간에 따라 선으로 표시됩니다.
GridControl:

동일한 데이터가 표 형식으로 표시됩니다.
MVVM 패턴 준수:
