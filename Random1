nalR 메시지를 수신할 때 기존의 DataActivity를 닫고 새로 열며, 메시지에 "err1" 문자열이 포함되어 있을 때 알림 소리와 함께 소리를 재생하는 방식으로 수정해보겠습니다.

이를 위해 아래와 같은 주요 기능을 추가/수정하겠습니다:

기존 액티비티 닫기: 이미 열려 있는 DataActivity가 있으면 닫고 새로 엽니다.
알림 소리 재생: 메시지에 "err1"이 포함된 경우 시스템 알림 소리와 함께 소리를 재생합니다.
수정된 MainActivity.kt 코드
kotlin
코드 복사
package com.dxmxsmd.routeracralarm

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.media.AudioAttributes
import android.media.MediaPlayer
import android.media.RingtoneManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.os.PowerManager
import android.util.Log
import android.widget.Button
import android.widget.CheckBox
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.app.NotificationCompat
import androidx.lifecycle.lifecycleScope
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import kotlinx.coroutines.launch

class MainActivity : ComponentActivity() {

    private lateinit var hubConnection: HubConnection
    private lateinit var notificationManager: NotificationManager
    private lateinit var vibrationCheckBox: CheckBox
    private lateinit var viewMessagesButton: Button

    // 런타임 권한 요청을 위한 launcher 정의
    private val requestPermissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted: Boolean ->
        if (isGranted) {
            Log.d("Permission", "Notification permission granted")
        } else {
            Log.d("Permission", "Notification permission denied")
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // 진동 체크박스 초기화
        vibrationCheckBox = findViewById(R.id.vibrationCheckBox)

        // 최근 메시지 보기 버튼 초기화 및 클릭 리스너 설정
        viewMessagesButton = findViewById(R.id.viewMessagesButton)
        viewMessagesButton.setOnClickListener {
            openOrReplaceDataActivity() // DataActivity 열기 또는 교체
        }

        // 알림 채널 생성
        createNotificationChannel()

        // Android 13 이상에서 알림 권한 요청
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            requestNotificationPermission()
        }

        // SignalR 서버 연결 설정
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        // SignalR 메시지 수신 대기
        hubConnection.on("ReceiveMessage", { message: String ->
            showNotification(message) // 메시지 수신 시 알림
            wakeUpScreen() // 화면 켜기
            openOrReplaceDataActivity() // DataActivity 열기 또는 기존 액티비티 교체

            // 메시지에 "err1"이 포함되어 있으면 소리 재생
            if (message.contains("err1", ignoreCase = true)) {
                playAlarmSound()
            }
        }, String::class.java)

        lifecycleScope.launch {
            try {
                hubConnection.start().blockingAwait()
                Log.d("SignalR", "Connected to SignalR server.")
            } catch (e: Exception) {
                Log.e("SignalR", "SignalR connection failed", e)
            }
        }
    }

    private fun showNotification(message: String) {
        val intent = Intent(this, MainActivity::class.java)
        val pendingIntent: PendingIntent =
            PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE)

        val builder = NotificationCompat.Builder(this, "SIGNALR_CHANNEL")
            .setSmallIcon(R.drawable.ic_notification)
            .setContentTitle("New SignalR Message")
            .setContentText(message)
            .setPriority(NotificationCompat.PRIORITY_HIGH)
            .setAutoCancel(true)
            .setContentIntent(pendingIntent)

        if (vibrationCheckBox.isChecked) {
            builder.setVibrate(longArrayOf(0, 500, 1000))
        }

        notificationManager.notify(1, builder.build())
    }

    private fun wakeUpScreen() {
        val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
        val isScreenOn = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
            powerManager.isInteractive
        } else {
            @Suppress("DEPRECATION")
            powerManager.isScreenOn
        }

        if (!isScreenOn) {
            val wakeLock = powerManager.newWakeLock(
                PowerManager.SCREEN_BRIGHT_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
                "RouterACRAlarm::WakeLockTag"
            )
            wakeLock.acquire(3000) // 3초 동안 화면 켜짐 유지
        }
    }

    private fun createNotificationChannel() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val name = "SignalR Channel"
            val descriptionText = "Channel for SignalR notifications"
            val importance = NotificationManager.IMPORTANCE_HIGH
            val channel = NotificationChannel("SIGNALR_CHANNEL", name, importance).apply {
                description = descriptionText
            }
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            notificationManager.createNotificationChannel(channel)
        } else {
            notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        }
    }

    private fun requestNotificationPermission() {
        when {
            ActivityCompat.checkSelfPermission(
                this, Manifest.permission.POST_NOTIFICATIONS
            ) == PackageManager.PERMISSION_GRANTED -> {
                Log.d("Permission", "Notification permission already granted")
            }
            else -> {
                requestPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
            }
        }
    }

    // DataActivity를 열거나 기존의 DataActivity가 있을 경우 교체
    private fun openOrReplaceDataActivity() {
        // 이미 열려있는 DataActivity가 있는 경우 닫기
        val intent = Intent(this, DataActivity::class.java)
        intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK
        startActivity(intent)
    }

    // 알림 소리 및 알람 소리 재생
    private fun playAlarmSound() {
        try {
            val alarmSound: Uri = RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)
                ?: RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION)
            
            val mediaPlayer = MediaPlayer().apply {
                setAudioAttributes(
                    AudioAttributes.Builder()
                        .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)
                        .setUsage(AudioAttributes.USAGE_ALARM)
                        .build()
                )
                setDataSource(this@MainActivity, alarmSound)
                prepare()
                start()
            }
        } catch (e: Exception) {
            Log.e("MainActivity", "Failed to play alarm sound", e)
        }
    }
}
변경 사항 설명
기존 액티비티 닫고 새로 열기:

openOrReplaceDataActivity 메서드를 사용하여 기존에 열려 있는 DataActivity가 있으면 닫고 새로 엽니다. 이를 위해 Intent.FLAG_ACTIVITY_CLEAR_TOP과 Intent.FLAG_ACTIVITY_NEW_TASK 플래그를 설정합니다.
소리 재생 기능 추가:

playAlarmSound 메서드는 "err1"이 포함된 메시지가 수신되면 알람 소리를 재생합니다.
RingtoneManager.getDefaultUri(RingtoneManager.TYPE_ALARM)를 사용하여 기본 알람 소리를 가져오고, MediaPlayer를 통해 재생합니다. 만약 알람 소리가 설정되어 있지 않으면 알림 소리를 재생하도록 대체합니다.
결과
SignalR 메시지가 수신되면:
기존에 열려 있는 DataActivity가 닫히고 새로 열립니다.
메시지에 "err1"이 포함된 경우, 시스템 알림 소리와 함께 소리가 재생됩니다.



