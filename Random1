도의 창으로 설정 화면을 구현하기 위해서는 WPF에서 새로운 Window를 생성하고, 해당 창을 필요할 때 열 수 있도록 MainWindow에서 기능을 추가하는 방법이 있습니다. 아래는 이러한 과정을 단계별로 설명한 예제입니다.

1. 설정 창 만들기 (SettingsWindow.xaml)
먼저, 새로운 설정 창을 만듭니다. 이 창은 설정을 위한 UI 요소들을 배치할 수 있는 독립된 창이 됩니다.

SettingsWindow.xaml
xml
코드 복사
<Window x:Class="RouterMiddleACR.SettingsWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="설정" Height="300" Width="400">
    <Grid>
        <!-- 설정 화면의 UI 요소들 -->
        <TextBlock Text="설정 화면" HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="20"/>
    </Grid>
</Window>
SettingsWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace RouterMiddleACR
{
    public partial class SettingsWindow : Window
    {
        public SettingsWindow()
        {
            InitializeComponent();
        }
    }
}
2. MainWindow에 설정 창을 여는 기능 추가
MainWindow에 버튼을 추가하여, 사용자가 설정 창을 열 수 있도록 합니다.

MainWindow.xaml 수정
xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:RouterMiddleACR.Controls"
        Title="RouterMiddleACR" Height="450" Width="800">
    <Grid>
        <!-- 설정 창을 여는 버튼 -->
        <Button Content="설정 열기" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" Click="OpenSettingsWindow_Click"/>
        
        <!-- 나머지 UI 요소들 -->
    </Grid>
</Window>
MainWindow.xaml.cs 수정
csharp
코드 복사
using System.Windows;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
        }

        private void OpenSettingsWindow_Click(object sender, RoutedEventArgs e)
        {
            // 설정 창 열기
            SettingsWindow settingsWindow = new SettingsWindow();
            settingsWindow.ShowDialog(); // 모달 창으로 열기
        }
    }
}
3. ViewModel 수정 (선택사항)
설정 창에서 변경된 설정을 반영하려면, SettingsWindow에 바인딩할 ViewModel을 추가하거나 기존의 ViewModel을 확장하여 사용할 수 있습니다.

예시: ViewModel에 설정 관련 속성 추가
csharp
코드 복사
using System.ComponentModel;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private string _someSetting;
        public string SomeSetting
        {
            get => _someSetting;
            set
            {
                _someSetting = value;
                OnPropertyChanged(nameof(SomeSetting));
            }
        }

        public MainViewModel()
        {
            // 기본 설정 값 초기화
            SomeSetting = "기본 값";
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
요약
설정 창 생성: SettingsWindow.xaml과 .xaml.cs 파일을 생성하여 설정 창을 만듭니다.
설정 창 열기: MainWindow에 버튼을 추가하고, 클릭 이벤트 핸들러에서 설정 창을 모달로 엽니다.
ViewModel 확장: 필요에 따라 ViewModel에 설정 관련 속성을 추가하여 설정 값을 관리할 수 있습니다.
이렇게 하면 별도의 설정 창을 생성하고, 메인 UI에서 설정 창을 여는 기능을 구현할 수 있습니다. 필요한 경우 설정 창에 UI 요소를 추가하여 설정을 관리할 수 있습니다.