네, 이전에 작업했던 Flask 웹 애플리케이션에 특정 IP 주소만 접근을 허용하도록 설정하는 방법을 안내해 드리겠습니다.

Flask 애플리케이션 자체에서 IP를 제한하는 가장 직접적인 방법은 before_request 데코레이터를 사용하는 것입니다. 이 방법은 각 요청이 실제 라우트 핸들러에 도달하기 전에 실행되어 IP를 확인하고, 허용되지 않은 IP의 접근을 차단합니다.

수정된 app.py 파일:

Python

from flask import Flask, render_template, request, abort

app = Flask(__name__)

# --- IP 화이트리스트 설정 ---
# 애플리케이션 접근을 허용할 IP 주소 목록을 정의합니다.
# 예시: ALLOWED_IPS = ['127.0.0.1', '192.168.1.100', '여러분의_공인_IP_주소']
# 중요: 아래 목록에 실제 허용할 IP 주소를 추가하세요.
# '127.0.0.1'은 Flask 서버가 실행되는 컴퓨터 자체에서의 접근을 허용합니다.
ALLOWED_IPS = [
    '127.0.0.1',
    # 여기에 허용할 다른 IP 주소들을 추가하세요.
    # 예: '192.168.0.15', # 내부 네트워크의 특정 IP
    # 예: 'YOUR_PUBLIC_IP_ADDRESS' # 외부에서 접속할 경우의 공인 IP
]

@app.before_request
def limit_remote_addr():
    # 클라이언트의 IP 주소를 가져옵니다.
    # Flask가 Nginx와 같은 리버스 프록시 뒤에서 실행되는 경우, request.remote_addr은 프록시 서버의 IP일 수 있습니다.
    # 이 경우 'X-Forwarded-For' 헤더 등을 확인해야 하며, Werkzeug의 ProxyFix 미들웨어를 사용하는 것이 좋습니다.
    # 현재 Flask 개발 서버를 직접 사용하는 경우에는 request.remote_addr이 일반적으로 정확합니다.
    client_ip = request.remote_addr
    
    if client_ip not in ALLOWED_IPS:
        # 허용되지 않은 IP의 접근 시도 시 로그를 남기고 403 Forbidden 에러를 반환합니다.
        app.logger.warning(f"Forbidden access attempt from IP: {client_ip}")
        abort(403)  # 403 Forbidden 에러 발생

@app.route('/')
def index():
    """
    메인 페이지를 렌더링합니다.
    templates 폴더의 index.html 파일을 사용합니다.
    """
    return render_template('index.html')

if __name__ == '__main__':
    # !!!! 중요 !!!!
    # 위 ALLOWED_IPS 리스트에 실제 접근을 허용할 IP 주소를 정확히 입력해야 합니다.
    # 예를 들어, 여러분의 사무실이나 집의 공인 IP 주소를 추가할 수 있습니다.
    # 공인 IP 주소는 인터넷 브라우저에서 "what is my IP" 등으로 검색하여 확인할 수 있습니다.
    # 내부 네트워크에서 다른 PC의 접근을 허용하려면 해당 PC의 내부 IP (예: 192.168.x.x)를 추가합니다.
    
    # 개발 서버를 실행합니다.
    # host='0.0.0.0'은 모든 네트워크 인터페이스에서 연결을 허용하지만,
    # 위의 IP 화이트리스트에 의해 실제 접근은 제한됩니다.
    app.run(host='0.0.0.0', port=5000, debug=True)

설정 방법 및 주의사항:

ALLOWED_IPS 리스트 수정:

위 코드의 ALLOWED_IPS 리스트에 접근을 허용할 IP 주소를 정확하게 입력해야 합니다.
로컬 접속: 127.0.0.1은 Flask 서버가 실행 중인 바로 그 컴퓨터에서의 접속을 의미합니다.
내부 네트워크 접속: 같은 공유기(네트워크)에 연결된 다른 컴퓨터에서 접속하려면 해당 컴퓨터의 내부 IP 주소(예: 192.168.1.5)를 추가합니다.
외부(인터넷) 접속: 인터넷을 통해 접속하려면 접속하려는 장소의 공인 IP 주소를 추가해야 합니다. 공인 IP 주소는 해당 장소의 인터넷 브라우저에서 "내 IP 주소 확인" 등으로 검색하면 알 수 있습니다. (공인 IP는 유동적일 수 있으니 주의하세요.)
실행:

수정된 app.py 파일을 저장합니다.
터미널에서 python3 app.py 명령으로 Flask 서버를 실행합니다.
이제 ALLOWED_IPS 리스트에 포함된 IP 주소에서만 웹페이지에 접속할 수 있습니다. 목록에 없는 IP에서 접속을 시도하면 "Forbidden" (403 에러) 페이지가 표시됩니다.
리버스 프록시 사용 시:

만약 나중에 Nginx나 Apache 같은 리버스 프록시 서버 뒤에서 Flask 앱을 운영하게 된다면, request.remote_addr는 프록시 서버의 IP를 반환하게 됩니다. 이 경우 실제 클라이언트 IP는 X-Forwarded-For HTTP 헤더에 담겨 오므로, 해당 헤더를 확인하도록 로직을 수정하거나 Flask의 ProxyFix 미들웨어를 사용해야 합니다. 지금은 Flask 개발 서버를 직접 사용하시므로 request.remote_addr로 충분합니다.
debug=True 주의:

debug=True 모드는 개발 중에는 편리하지만, 실제 서비스 환경에서는 보안상 취약할 수 있으므로 False로 설정해야 합니다. IP 제한을 하더라도 디버그 모드는 주의가 필요합니다.
Flask 애플리케이션 레벨 외의 다른 IP 제한 방법 (참고):

방화벽 사용 (예: Ubuntu의 ufw):
OS 레벨에서 특정 IP 주소만 Flask 앱이 사용하는 포트(예: 5000번)로의 접근을 허용할 수 있습니다. 이것이 더 강력한 차단 방법일 수 있습니다.
예시 명령어:
Bash

sudo ufw allow from YOUR_ALLOWED_IP_ADDRESS to any port 5000 proto tcp
sudo ufw enable # ufw 활성화 (이미 활성화되어 있다면 생략)
웹 서버/리버스 프록시 설정 (예: Nginx):