using DevExpress.XtraEditors;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace WinFormsApp
{
    public partial class MainForm : XtraForm
    {
        private Dictionary<GridView, string> gridViews; // GridView와 시트 이름을 저장하는 딕셔너리

        public MainForm()
        {
            InitializeComponent();
            gridViews = new Dictionary<GridView, string>();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // 예시 GridView 추가
            AddGridView(gridControl1, gridView1, "Sheet1");
            AddGridView(gridControl2, gridView2, "Sheet2");
            // 필요한 만큼 GridView를 추가하십시오.

            // GridView 목록을 체크 가능한 목록으로 표시
            PopulateGridViewList();
        }

        private void AddGridView(GridControl gridControl, GridView gridView, string sheetName)
        {
            // GridView 설정
            gridControl.MainView = gridView;
            gridView.GridControl = gridControl;

            // 예시 데이터 설정
            gridView.Columns.AddField("Name").Visible = true;
            gridView.Columns.AddField("Age").Visible = true;
            gridView.Columns.AddField("Address").Visible = true;
            gridView.Columns.AddField("Email").Visible = true;

            // 데이터 바인딩
            gridControl.DataSource = GetDataSource();

            // GridView와 시트 이름을 딕셔너리에 추가
            gridViews.Add(gridView, sheetName);

            // GridControl 추가
            Controls.Add(gridControl);
        }

        private void PopulateGridViewList()
        {
            foreach (var gridViewEntry in gridViews)
            {
                GridView gridView = gridViewEntry.Key;
                string sheetName = gridViewEntry.Value;

                checkedListBoxControl.Items.Add(sheetName, false);
            }
        }

        private void ExportButton_Click(object sender, EventArgs e)
        {
            // 선택된 GridView를 시트별로 엑셀 파일로 내보내기
            SaveFileDialog saveFileDialog = new SaveFileDialog();
            saveFileDialog.Filter = "Excel files|*.xlsx";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                XlsxExportOptionsEx options = new XlsxExportOptionsEx();
                options.ExportType = ExportType.WYSIWYG;
                options.ShowGridLines = true;

                using (FileStream stream = new FileStream(saveFileDialog.FileName, FileMode.Create))
                {
                    XlsxExportOptionsEx sheetOptions = new XlsxExportOptionsEx();
                    sheetOptions.ExportType = ExportType.WYSIWYG;
                    sheetOptions.ShowGridLines = true;

                    for (int i = 0; i < checkedListBoxControl.Items.Count; i++)
                    {
                        string sheetName = checkedListBoxControl.Items[i].ToString();
                        bool isChecked = checkedListBoxControl.GetItemChecked(i);

                        if (isChecked)
                        {
                            foreach (var gridViewEntry in gridViews)
                            {
                                GridView gridView = gridViewEntry.Key;
                                string gridViewSheetName = gridViewEntry.Value;

                                if (sheetName == gridViewSheetName)
                                {
                                    gridView.ExportToXlsx(stream, sheetOptions);
                                }
                            }
                        }
                    }
                }

                XtraMessageBox.Show("Export completed!", "Export", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private object GetDataSource()
        {
            // 예
