엑셀 VBA에 특정 영역의 중복 없는 값(고유값)의 개수를 세는 단 하나의 내장 함수는 없습니다. 워크시트 함수 중 SUMPRODUCT와 COUNTIF 조합 등을 VBA에서 사용하거나, VBA 코드로 직접 처리해야 합니다.

클래스 모듈을 사용해서 이 기능을 구현하는 것은 가능하지만, 일반적으로 고유값 개수를 세는 작업 자체만을 위해 클래스 모듈을 만드는 것은 과할 수 있습니다. 클래스 모듈은 어떤 '대상(객체)'의 속성과 메서드를 정의할 때 더 유용하기 때문입니다. 고유값을 세는 것은 '영역'이라는 대상을 가지고 '계산'을 수행하는 것에 가깝습니다.

VBA에서 고유값 개수를 세는 가장 일반적이고 효율적인 방법은 Scripting.Dictionary 객체를 사용하는 것입니다. 이는 클래스 모듈보다 이 작업에 더 적합한 도구입니다.

하지만 사용자께서 클래스 모듈을 통한 파악을 요청하셨으니, 이 작업 자체에 클래스 모듈이 어떻게 적용될 수 있을지는 설명하겠지만, 이 방식이 가장 간단하거나 권장되는 방법은 아님을 먼저 말씀드립니다. 대신 Scripting.Dictionary를 사용하는 방법을 더 권장하며 예제를 먼저 보여드리겠습니다.

추천 방식: Scripting.Dictionary 객체 사용

Scripting.Dictionary 객체는 '키(Key)'와 '항목(Item)' 쌍을 저장하며, 키는 중복될 수 없다는 특징이 있습니다. 이 특징을 활용하여 특정 영역의 값들을 키로 추가하면 중복은 자동으로 걸러집니다.

VBA

' 표준 모듈 (Module1 등) 에 아래 코드를 작성합니다.

' --- 사전 바인딩을 위한 참조 추가 방법 ---
' VBA 편집기에서 [도구] -> [참조] 클릭
' 목록에서 "Microsoft Scripting Runtime" 찾아서 체크하고 [확인]
' --------------------------------------

Function CountUniqueValues(TargetRange As Range) As Long
    ' 참조를 추가했다면:
    ' Dim uniqueDictionary As Scripting.Dictionary

    ' 참조를 추가하지 않았다면 (늦은 바인딩):
    Dim uniqueDictionary As Object
    Set uniqueDictionary = CreateObject("Scripting.Dictionary")

    Dim cell As Range
    Dim cellValue As Variant ' 셀 값의 데이터 형식이 다양할 수 있으므로 Variant 사용

    On Error Resume Next ' 오류 발생 시 다음 코드로 진행 (Dictionary 추가 시 중복 키 오류 방지)

    ' 지정된 영역의 각 셀을 순회합니다.
    For Each cell In TargetRange
        cellValue = cell.Value

        ' 셀 값이 비어있지 않다면 처리
        If Not IsEmpty(cellValue) Then
            ' Dictionary에 셀 값을 키로 추가 시도
            ' 이미 존재하는 키면 오류 발생 (On Error Resume Next로 무시)
            uniqueDictionary.Add cellValue, 1 ' 값 자체나 아무 값(예: 1)을 Item으로 넣습니다. 중요한 건 Key입니다.
        End If
    Next cell

    On Error GoTo 0 ' 오류 트랩 해제

    ' Dictionary에 저장된 키의 개수가 고유값의 개수입니다.
    CountUniqueValues = uniqueDictionary.Count

    ' 사용한 객체 메모리 해제
    Set uniqueDictionary = Nothing

End Function

' --- 위 함수를 사용하는 예제 서브 프로시저 ---

Sub Example_CountUnique()
    Dim myRange As Range
    Dim uniqueCount As Long

    ' 고유값을 세고 싶은 영역을 지정합니다. (예: 현재 시트의 A1부터 A10까지)
    Set myRange = ThisWorkbook.Sheets("Sheet1").Range("A1:A10") ' 시트 이름과 범위를 실제에 맞게 변경하세요.

    ' 함수 호출하여 고유값 개수 가져오기
    uniqueCount = CountUniqueValues(myRange)

    ' 결과 메시지 박스로 표시
    MsgBox "지정된 영역 (" & myRange.Address & ")의 고유값 개수: " & uniqueCount & "개", vbInformation

End Sub
위 Scripting.Dictionary 방식을 추천하는 이유:

효율성: 대량의 데이터를 처리할 때 속도가 빠릅니다.
간편함: 중복 체크 및 추가 로직을 Dictionary 객체가 내부적으로 처리해 줍니다.
다양한 데이터 형식 처리: 숫자, 문자열, 날짜 등 다양한 형식의 고유값을 잘 구분하여 처리합니다.
클래스 모듈을 사용한 접근 (이 작업 자체에는 비효율적):

만약 클래스 모듈을 굳이 사용한다면, '고유값 집합(UniqueValueCollection)' 같은 개념의 클래스를 만들고, 이 클래스에 값을 추가하는 메서드를 만든 후, 내부적으로 중복을 관리하게 하는 식으로 구현할 수는 있습니다. 하지만 이는 Scripting.Dictionary가 이미 제공하는 기능을 클래스로 다시 만드는 것과 같습니다.

굳이 예시를 들자면 아래와 같은 형태가 될 수 있습니다.

클래스 모듈 생성: '삽입' -> '클래스 모듈' 클릭, 이름 UniqueValueCollection

UniqueValueCollection 클래스 모듈 코드:

VBA

' UniqueValueCollection 클래스 모듈

' 내부적으로 Dictionary를 사용하여 고유값 관리
Private pUniqueValues As Object ' Scripting.Dictionary 사용 (늦은 바인딩)

' 클래스가 초기화될 때 Dictionary 생성
Private Sub Class_Initialize()
    Set pUniqueValues = CreateObject("Scripting.Dictionary")
End Sub

' 클래스가 종료될 때 Dictionary 해제
Private Sub Class_Terminate()
    Set pUniqueValues = Nothing
End Sub

' 고유값 집합에 값을 추가하는 메서드
Public Sub AddValue(value As Variant)
    If Not IsEmpty(value) Then
        On Error Resume Next
        ' Dictionary에 추가 시도 (중복되면 오류)
        pUniqueValues.Add value, 1
        On Error GoTo 0
    End If
End Sub

' 현재 고유값의 개수를 반환하는 속성
Public Property Get Count() As Long
    Count = pUniqueValues.Count
End Property

' (추가적으로, 저장된 고유값 목록을 배열 등으로 반환하는 메서드 등을 만들 수 있습니다)
표준 모듈 코드: UniqueValueCollection 클래스를 사용하여 고유값 개수 세기

VBA

' 표준 모듈 (Module1 등)

Sub Example_CountUnique_UsingClass()
    Dim myRange As Range
    Dim cell As Range

    ' UniqueValueCollection 클래스의 인스턴스 생성
    Dim uniqueCounter As New UniqueValueCollection

    ' 고유값을 세고 싶은 영역을 지정합니다.
    Set myRange = ThisWorkbook.Sheets("Sheet1").Range("A1:A10") ' 시트 이름과 범위를 실제에 맞게 변경하세요.

    ' 지정된 영역의 각 셀을 순회하며 클래스 인스턴스에 값 추가
    For Each cell In myRange
        uniqueCounter.AddValue cell.Value
    Next cell

    ' 클래스 인스턴스의 Count 속성으로 고유값 개수 가져오기
    Dim uniqueCount As Long
    uniqueCount = uniqueCounter.Count

    ' 결과 메시지 박스로 표시
    MsgBox "지정된 영역 (" & myRange.Address & ")의 고유값 개수 (클래스 사용): " & uniqueCount & "개", vbInformation

    ' 클래스 인스턴스 해제
    Set uniqueCounter = Nothing

End Sub
클래스 모듈(UniqueValueCollection) 방식을 설명하는 이유:

이 방식은 '고유값을 관리하는 기능' 자체를 하나의 객체로 캡슐화했다는 데 의의가 있습니다. 만약 고유값 개수를 세는 것 외에, 고유값 목록을 가져오거나, 특정 값이 고유값 집합에 포함되는지 확인하는 등, 고유값 '집합'과 관련된 다양한 기능이 필요하다면 이렇게 클래스로 만들어 관리하는 것이 더 체계적일 수 있습니다. 즉, 고유값 개수를 세는 것 하나만을 위해 클래스를 만드는 것은 오버헤드이고, 관련 기능들이 여러 개 묶여 하나의 '관리 대상'이 될 때 클래스화가 더 빛을 발합니다.