안녕하세요. 우분투 도커 환경에서 프록시 문제와 Nginx를 이용한 리액트 앱 배포에 대해 겪고 계신 문제를 해결해 드리겠습니다. 두 가지 질문에 대해 명확한 '정석' 방법과 상세 가이드를 알려드릴게요.

1. 도커 빌드 시 프록시 설정의 정석
docker build 명령어에 매번 --build-arg로 프록시를 주는 것은 매우 번거롭습니다. 전역 설정을 했는데도 안되는 이유는, 일반적인 터미널의 환경변수(export http_proxy=...)가 도커 데몬(서비스)에 직접적인 영향을 주지 않기 때문입니다.

가장 깔끔하고 표준적인 방법은 도커 클라이언트 설정 파일을 수정하는 것입니다.

정석 해결법: ~/.docker/config.json 파일 설정
이 방법은 현재 로그인한 사용자에게 영구적으로 도커 프록시 설정을 적용합니다.

먼저 ~/.docker/config.json 파일을 텍스트 편집기로 엽니다. 파일이 없다면 새로 생성하면 됩니다.

Bash

nano ~/.docker/config.json
아래와 같은 형식으로 proxies 설정을 추가합니다. 파일에 이미 다른 내용이 있다면, { ... } 안에 proxies 부분만 추가해주세요. your-proxy-server:port 부분은 실제 프록시 서버 주소와 포트로 변경해야 합니다.

JSON

{
 "proxies": {
   "default": {
     "httpProxy": "http://your-proxy-server:port",
     "httpsProxy": "http://your-proxy-server:port",
     "noProxy": "localhost,127.0.0.1,*.local"
   }
 }
}
httpProxy: HTTP 통신에 사용할 프록시 서버 주소입니다.

httpsProxy: HTTPS 통신에 사용할 프록시 서버 주소입니다.

noProxy: 프록시를 거치지 않고 직접 통신할 주소 목록입니다. 내부망 통신이나 로컬 통신에 필요할 수 있으니 보통 localhost,127.0.0.1은 기본으로 넣어줍니다.

파일을 저장하고 닫습니다. (Nano 에디터에서는 Ctrl+X > Y > Enter)

이제부터는 docker build 명령어를 사용할 때 --build-arg 플래그 없이도 도커가 자동으로 이 프록시 설정을 읽어서 npm install 같은 내부 네트워크 통신에 사용합니다.

✅ 이제 이렇게만 실행하시면 됩니다:

Bash

docker build -t kkk111 .
참고: --oncache에 대하여
혹시 –-oncache를 –-no-cache의 오타로 사용하셨다면, --no-cache 옵션은 빌드 캐시를 전혀 사용하지 않고 모든 단계를 처음부터 다시 실행하는 옵션입니다. 네트워크 문제나 스크립트 변경이 확실히 반영되게 하고 싶을 때 유용합니다.

2. Nginx로 두 개의 리액트 도커 컨테이너 서비스 가이드
현재 9999, 9998 포트로 각각의 리액트 앱을 실행 중인 상황에서, Nginx를 리버스 프록시(Reverse Proxy) 로 설정하여 메인 도메인으로 서비스를 통합하는 상세 가이드입니다.

리버스 프록시란, 외부의 요청을 Nginx가 대표로 받은 뒤, 내부의 여러 서버(여기서는 도커 컨테이너) 중 적절한 곳으로 요청을 전달해주는 방식입니다. 마치 회사의 대표 안내데스크와 같습니다.

전체 시나리오:

사용자는 http://your-domain.com/app1 로 접속 -> 첫 번째 리액트 앱 (9999번 포트) 표시

사용자는 http://your-domain.com/app2 로 접속 -> 두 번째 리액트 앱 (9998번 포트) 표시

Step 1: Nginx 설치 확인
먼저 호스트(Ubuntu) 서버에 Nginx가 설치되어 있는지 확인하고, 없다면 설치합니다.

Bash

sudo apt-get update
sudo apt-get install nginx
Step 2: 리액트 도커 컨테이너 실행
이미 하신 것처럼 두 개의 컨테이너를 각각 다른 포트로 실행합니다.

Bash

# 첫 번째 리액트 앱 (app1)
docker run -d -p 9999:80 --name react-app1 [app1-이미지-이름]

# 두 번째 리액트 앱 (app2)
docker run -d -p 9998:80 --name react-app2 [app2-이미지-이름]
컨테이너 내부에서는 80번 포트를 사용하고, 호스트와는 9999, 9998 포트로 연결된 상태입니다.

Step 3: Nginx 설정 파일 생성
Nginx가 우리의 요청을 어떻게 처리할지 알려주는 설정 파일을 만듭니다.

설정 파일을 생성합니다.

Bash

sudo nano /etc/nginx/sites-available/react-proxy
아래 내용을 복사하여 붙여넣습니다. your-domain.com 부분은 실제 도메인 주소나 서버의 공인 IP 주소로 변경해주세요.

Nginx

server {
    listen 80;
    server_name your-domain.com; # 여기에 도메인 또는 서버 IP 입력

    # 기본 접속 시 보여줄 간단한 안내 페이지
    location / {
        return 200 "메인 페이지입니다. /app1 또는 /app2 로 접속해주세요.";
        add_header Content-Type text/plain;
    }

    # '/app1' 경로로 들어오는 모든 요청을 처리
    location /app1/ {
        # 내부의 9999번 포트 컨테이너로 요청을 전달
        proxy_pass http://localhost:9999/;

        # 클라이언트의 실제 IP와 프로토콜 정보를 내부 서버(컨테이너)에 전달하기 위한 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # '/app2' 경로로 들어오는 모든 요청을 처리
    location /app2/ {
        # 내부의 9998번 포트 컨테이너로 요청을 전달
        proxy_pass http://localhost:9998/;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
Step 4: Nginx 설정 활성화 및 재시작
방금 만든 설정을 Nginx가 읽을 수 있도록 활성화(심볼릭 링크 생성)합니다.

Bash

sudo ln -s /etc/nginx/sites-available/react-proxy /etc/nginx/sites-enabled/
설정 파일에 문법 오류가 없는지 테스트합니다. (중요)

Bash

sudo nginx -t
syntax is ok 와 test is successful 메시지가 보이면 성공입니다.

Nginx를 재시작하여 설정을 적용합니다.

Bash

sudo systemctl restart nginx
Step 5: (필수) 리액트 앱 설정 수정
리액트 라우터를 사용하는 경우, 앱이 /app1 또는 /app2 같은 하위 경로에서 실행된다는 것을 알려줘야 합니다. 그렇지 않으면 CSS나 JS 파일을 제대로 불러오지 못해 흰 화면만 보일 수 있습니다.

package.json 수정: 각 리액트 프로젝트의 package.json 파일에 homepage를 추가합니다.

app1 프로젝트의 package.json:

JSON

"homepage": "/app1",
app2 프로젝트의 package.json:

JSON

"homepage": "/app2",
라우터 basename 설정: 각 리액트 앱의 라우터 설정 부분에 basename을 추가합니다.

app1 프로젝트의 라우터 설정 (App.js 또는 index.js):

JavaScript

import { BrowserRouter } from 'react-router-dom';

<BrowserRouter basename="/app1">
  <App />
</BrowserRouter>
app2 프로젝트의 라우터 설정:

JavaScript

import { BrowserRouter } from 'react-router-dom';

<BrowserRouter basename="/app2">
  <App />
</BrowserRouter>
위와 같이 수정한 후, 각 리액트 앱을 다시 빌드하고 도커 이미지도 새로 만들어야 변경 사항이 적용됩니다. 그 후에 다시 Step 2처럼 컨테이너를 실행해주세요.