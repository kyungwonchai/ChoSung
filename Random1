# Python MDB 리더 (Ubuntu/MDBTools 버전)
# 실행 전, Ubuntu에 mdb-tools가 설치되어 있어야 하고,
# Python 가상 환경에 pandas, pandas-access가 설치되어 있어야 합니다.

import os
import pandas as pd
from pandas_access import read_table, list_tables

def display_all_tables_and_data(mdb_file_path):
    """
    MDB 파일의 모든 테이블 목록과 각 테이블의 데이터를 출력합니다.
    """
    if not os.path.exists(mdb_file_path):
        print(f"오류: 파일 경로를 찾을 수 없습니다 -> '{mdb_file_path}'")
        return

    try:
        print("\n--- 모든 테이블 목록 ---")
        # mdb-tools를 사용하여 파일의 모든 테이블 이름을 가져옵니다.
        table_names = list_tables(mdb_file_path)
        
        if not table_names:
            print("데이터베이스에서 테이블을 찾을 수 없습니다.")
            return
            
        for table_name in table_names:
            print(f"- {table_name}")

        print("\n--- 각 테이블 상세 데이터 ---")
        for table_name in table_names:
            print(f"\n--- 테이블: [{table_name}] ---")
            try:
                # 테이블을 pandas DataFrame으로 읽어옵니다.
                df = read_table(mdb_file_path, table_name)
                
                # DataFrame.to_string()을 사용하여 모든 데이터를 예쁘게 출력합니다.
                if df.empty:
                    print("(데이터 없음)")
                else:
                    print(df.to_string())
            except Exception as e:
                print(f"테이블 [{table_name}] 조회 중 오류 발생: {e}")

    except Exception as e:
        print(f"MDB 파일 처리 중 오류 발생: {e}")
        print("mdb-tools가 올바르게 설치되었는지 확인하세요.")

def search_part_code_globally(mdb_file_path, part_code):
    """
    MDB 파일의 모든 테이블을 검색하여 특정 부품 코드와 일치하는 모든 정보를 찾습니다.
    """
    if not os.path.exists(mdb_file_path):
        print(f"오류: 파일 경로를 찾을 수 없습니다 -> '{mdb_file_path}'")
        return

    print(f"\n--- '{part_code}' 부품 코드 전체 검색 결과 ---")
    
    try:
        table_names = list_tables(mdb_file_path)
        found_results = False

        for table_name in table_names:
            try:
                df = read_table(mdb_file_path, table_name)
                if df.empty:
                    continue

                # DataFrame의 각 컬럼을 순회하며 검색
                for column in df.columns:
                    # 데이터 타입을 문자열로 변환하여 비교해야 오류가 발생하지 않습니다.
                    # .astype(str)를 사용하여 모든 값을 문자열로 만듭니다.
                    # .str.contains(part_code, na=False)는 부분 일치도 찾습니다.
                    # 정확히 일치하는 것을 찾으려면 (df[column].astype(str) == part_code)를 사용합니다.
                    results = df[df[column].astype(str) == part_code]

                    if not results.empty:
                        found_results = True
                        print(f"\n>>> 테이블 [{table_name}], 컬럼 [{column}] 에서 결과 발견:")
                        print(results.to_string())

            except Exception as e:
                # 특정 테이블을 읽는 데 실패하더라도 계속 진행합니다.
                print(f"테이블 [{table_name}] 검색 중 오류 발생: {e}")
        
        if not found_results:
            print("해당 부품 코드를 찾을 수 없습니다.")

    except Exception as e:
        print(f"부품 코드 검색 중 오류 발생: {e}")


# --- 메인 실행 부분 ---
if __name__ == "__main__":
    # 여기에 MDB 파일의 전체 경로를 입력하세요.
    # 예: "/home/user/data/database.mdb"
    mdb_path = "/path/to/your/database.mdb"

    # 1. 모든 테이블과 내용 출력하기
    display_all_tables_and_data(mdb_path)
    
    # 2. 특정 부품 코드(11자리)로 관련 정보 모두 검색하기
    # 아래에 검색하고 싶은 부품 코드를 입력하세요.
    part_code_to_search = "12345678901" # 예시 부품 코드
    search_part_code_globally(mdb_path, part_code_to_search)

