// ColumnInfo 클래스 정의
public class ColumnInfo
{
    public string XName { get; set; }
    public bool IsVisible { get; set; }
    public int DisplayIndex { get; set; }
}

// ... 여기에 ListControl과 ColumnInfo 리스트를 초기화하는 코드가 위치합니다.

// 드래그 앤드 드롭 이벤트 핸들러 설정
private void ListControl_MouseMove(object sender, MouseEventArgs e)
{
    // 마우스 왼쪽 버튼이 눌렸을 때만 드래그 시작
    if (e.LeftButton == MouseButtonState.Pressed)
    {
        var listControl = sender as ListBox;
        var dragItem = listControl.SelectedItem;
        if (dragItem != null)
        {
            DragDrop.DoDragDrop(listControl, dragItem, DragDropEffects.Move);
        }
    }
}

private void ListControl_Drop(object sender, DragEventArgs e)
{
    var listControl = sender as ListBox;
    var droppedData = e.Data.GetData(typeof(ColumnInfo)) as ColumnInfo;
    var target = ((ListBoxItem)(listControl.ContainerFromElement((IInputElement)e.OriginalSource))).DataContext as ColumnInfo;
    
    int removedIdx = listControl.Items.IndexOf(droppedData);
    int targetIdx = listControl.Items.IndexOf(target);
    
    if (removedIdx < targetIdx)
    {
        columnInfos.Insert(targetIdx + 1, droppedData);
        columnInfos.RemoveAt(removedIdx);
    }
    else
    {
        int removeIndex = removedIdx + 1;
        if (columnInfos.Count + 1 > removeIndex)
        {
            columnInfos.Insert(targetIdx, droppedData);
            columnInfos.RemoveAt(removeIndex);
        }
    }
    // DisplayIndex를 새로운 순서로 업데이트
    for (int i = 0; i < columnInfos.Count; i++)
    {
        columnInfos[i].DisplayIndex = i;
    }
}

// 체크박스 상태 동기화
private void CheckBox_Checked(object sender, RoutedEventArgs e)
{
    var checkBox = sender as CheckBox;
    var item = checkBox.DataContext as ColumnInfo;
    if (item != null)
    {
        item.IsVisible = checkBox.IsChecked ?? false;
    }
}

private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
{
    // 같은 방식으로 체크 해제 상태를 동기화합니다.
}
