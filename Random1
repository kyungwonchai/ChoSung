청하신 내용을 반영하여 코드를 수정했습니다. 이번 코드는 두 가지 상황에 따라 다르게 동작합니다:

QR 코드에 ^가 포함된 경우:

^로 나눈 첫 번째 값(a1)이 MSSQL의 QRCodeData 테이블에 있는지 확인합니다.
확인된 경우, 두 번째 값(a2)를 MySQL의 checksheet 테이블에 인서트합니다.
QR 코드에 ^가 포함되지 않은 경우:

MySQL의 management_mobile_deviceid 테이블에서 deviceID가 존재하는지 확인합니다.
존재하면, 해당 행의 modelnumber를 가져와서 checkname으로 사용합니다.
deviceID가 존재하지 않으면, 데이터를 인서트하지 않습니다.
수정된 checkAndInsertModel 함수
kotlin
코드 복사
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Timestamp
import java.time.LocalDateTime
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

private var isExecuting = false

suspend fun checkAndInsertModel(qrCode: String, deviceId: String): String? {
    return withContext(Dispatchers.IO) {
        if (isExecuting) {
            return@withContext null
        }

        isExecuting = true
        var mssqlConnection: Connection? = null
        var mysqlConnection: Connection? = null
        var preparedStatement: java.sql.PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null

        try {
            // QR 코드에 ^가 포함되어 있는지 확인
            if (qrCode.contains("^")) {
                // QR 코드를 ^로 분리
                val parts = qrCode.split("^")
                val a1 = parts[0] // 첫 번째 값
                val a2 = parts.getOrNull(1) // 두 번째 값

                if (a2 == null) {
                    result = "QR code format is invalid. No second part found."
                    return@withContext result
                }

                // MSSQL 데이터베이스 연결
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")
                mssqlConnection = DriverManager.getConnection(
                    "jdbc:sqlserver://your_mssql_server:1433;databaseName=your_database_name;user=your_username;password=your_password;"
                )

                // 첫 번째 값 a1이 MSSQL의 QRCodeData 테이블에 있는지 확인
                val mssqlQuery = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
                preparedStatement = mssqlConnection.prepareStatement(mssqlQuery)
                preparedStatement.setString(1, a1)

                resultSet = preparedStatement.executeQuery()

                if (resultSet.next() && resultSet.getInt(1) > 0) {
                    // a1이 존재할 때, a2를 MySQL에 인서트

                    // MySQL 데이터베이스 연결
                    Class.forName("com.mysql.cj.jdbc.Driver")
                    mysqlConnection = DriverManager.getConnection(
                        "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC",
                        "abc", "1233445"
                    )

                    // mainsheet에서 데이터를 가져옴
                    val mainSheetQuery = """
                        SELECT depart, part, floor, district, at, model, modelnumber 
                        FROM smd.management_mobile_mainseet 
                        WHERE modelnumber = ?
                    """.trimIndent()
                    preparedStatement = mysqlConnection.prepareStatement(mainSheetQuery)
                    preparedStatement.setString(1, a2)
                    resultSet = preparedStatement.executeQuery()

                    if (resultSet.next()) {
                        val depart = resultSet.getString("depart")
                        val part = resultSet.getString("part")
                        val floor = resultSet.getString("floor")
                        val district = resultSet.getString("district")
                        val at = resultSet.getString("at")
                        val model = resultSet.getString("model")
                        val modelnumber = resultSet.getString("modelnumber")

                        // 최근 10분 이내에 해당 modelnumber로 체크된 기록이 있는지 확인 (DB 시간 기준)
                        val checkQuery = """
                            SELECT COUNT(*) as count FROM smd.management_mobile_checksheet 
                            WHERE modelnumber = ? AND check_time > (NOW() - INTERVAL 10 MINUTE)
                        """.trimIndent()
                        preparedStatement = mysqlConnection.prepareStatement(checkQuery)
                        preparedStatement.setString(1, modelnumber)

                        val countResultSet = preparedStatement.executeQuery()

                        var shouldInsert = true

                        if (countResultSet.next()) {
                            val count = countResultSet.getInt("count")
                            if (count > 0) {
                                shouldInsert = false
                            }
                        }

                        if (shouldInsert) {
                            val insertQuery = """
                                INSERT INTO smd.management_mobile_checksheet 
                                (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                                VALUES (?, ?, ?, ?, ?, ?, ?, '00000000', 'mobile', '00000000', NOW())
                            """.trimIndent()

                            preparedStatement = mysqlConnection.prepareStatement(insertQuery)
                            preparedStatement.setString(1, depart)
                            preparedStatement.setString(2, part)
                            preparedStatement.setString(3, floor)
                            preparedStatement.setString(4, district)
                            preparedStatement.setString(5, at)
                            preparedStatement.setString(6, model)
                            preparedStatement.setString(7, modelnumber)

                            preparedStatement.executeUpdate()
                            result = "New record inserted for modelnumber: $modelnumber"
                        } else {
                            result = "No insertion needed, recent check_time is within 10 minutes"
                        }
                    } else {
                        result = "No record found in mainsheet for modelnumber: $a2"
                    }
                } else {
                    result = "First part of QR code not found in MSSQL"
                }

            } else {
                // ^가 포함되지 않은 경우

                // MySQL 데이터베이스 연결
                Class.forName("com.mysql.cj.jdbc.Driver")
                mysqlConnection = DriverManager.getConnection(
                    "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC",
                    "abc", "1233445"
                )

                // deviceID가 management_mobile_deviceid 테이블에 있는지 확인
                val deviceIdQuery = """
                    SELECT modelnumber FROM management_mobile_deviceid WHERE deviceid = ?
                """.trimIndent()
                preparedStatement = mysqlConnection.prepareStatement(deviceIdQuery)
                preparedStatement.setString(1, deviceId)
                resultSet = preparedStatement.executeQuery()

                if (resultSet.next()) {
                    val modelnumber = resultSet.getString("modelnumber")

                    // mainsheet에서 데이터를 가져옴
                    val mainSheetQuery = """
                        SELECT depart, part, floor, district, at, model 
                        FROM smd.management_mobile_mainseet 
                        WHERE modelnumber = ?
                    """.trimIndent()
                    preparedStatement = mysqlConnection.prepareStatement(mainSheetQuery)
                    preparedStatement.setString(1, modelnumber)
                    resultSet = preparedStatement.executeQuery()

                    if (resultSet.next()) {
                        val depart = resultSet.getString("depart")
                        val part = resultSet.getString("part")
                        val floor = resultSet.getString("floor")
                        val district = resultSet.getString("district")
                        val at = resultSet.getString("at")
                        val model = resultSet.getString("model")

                        // 최근 10분 이내에 해당 modelnumber로 체크된 기록이 있는지 확인 (DB 시간 기준)
                        val checkQuery = """
                            SELECT COUNT(*) as count FROM smd.management_mobile_checksheet 
                            WHERE modelnumber = ? AND check_time > (NOW() - INTERVAL 10 MINUTE)
                        """.trimIndent()
                        preparedStatement = mysqlConnection.prepareStatement(checkQuery)
                        preparedStatement.setString(1, modelnumber)

                        val countResultSet = preparedStatement.executeQuery()

                        var shouldInsert = true

                        if (countResultSet.next()) {
                            val count = countResultSet.getInt("count")
                            if (count > 0) {
                                shouldInsert = false
                            }
                        }

                        if (shouldInsert) {
                            val insertQuery = """
                                INSERT INTO smd.management_mobile_checksheet 
                                (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                                VALUES (?, ?, ?, ?, ?, ?, ?, '00000000', 'mobile', ?, NOW())
                            """.trimIndent()

                            preparedStatement = mysqlConnection.prepareStatement(insertQuery)
                            preparedStatement.setString(1, depart)
                            preparedStatement.setString(2, part)
                            preparedStatement.setString(3, floor)
                            preparedStatement.setString(4, district)
                            preparedStatement.setString(5, at)
                            preparedStatement.setString(6, model)
                            preparedStatement.setString(7, modelnumber)
                            preparedStatement.setString(8, modelnumber)

                            preparedStatement.executeUpdate()
                            result = "New record inserted for modelnumber: $modelnumber"
                        } else {
                            result = "No insertion needed, recent check_time is within 10 minutes"
                        }
                    } else {
                        result = "No record found in mainsheet for modelnumber: $modelnumber"
                    }
                } else {
                    result = "Device ID $deviceId not found in management_mobile_deviceid"
                }
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            result = "SQL error: ${e.message}"
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            result = "JDBC Driver not found: ${e.message}"
        } catch (e: Exception) {
            e.printStackTrace()
            result = "Unexpected error: ${e.message}"
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                mssqlConnection?.close()
                mysqlConnection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
            isExecuting = false // 작업 완료 후 플래그를 다시 false로 설정
        }

        return@withContext result
    }
}
주요 수정 사항:
QR 코드에 ^가 포함된 경우:

^로 나눈 첫 번째 값(a1)이 MSSQL의 QRCodeData 테이블에 있는지 확인합니다.
확인되면, 두 번째 값(a2)를 MySQL의 checksheet 테이블에 삽입합니다.
QR 코드에 ^가 포함되지 않은 경우:

deviceID가 MySQL의 management_mobile_deviceid 테이블에 존재하는지 확인합니다.
존재하면 해당 행의 modelnumber를 가져와 checkname으로 사용하여 checksheet 테이블에 인서트합니다.
deviceID가 존재하지 않으면 스캔된 데이터는 무시되고 삽입이 이루어지지 않습니다.
결론
이 수정된 코드는 QR 코드에 ^가 포함된 경우와 그렇지 않은 경우 각각의 처리를 올바르게 수행할 수 있습니다. 필요한 데이터베이스 체크와 조건에 따른 삽입 작업을 정확하게 수행하도록 구성되었습니다. 추가적인 질문이 있으면 언제든지 말씀해 주세