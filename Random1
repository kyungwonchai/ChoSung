형님, 제가 중요한 디테일을 놓쳤군요. 죄송합니다! 요청하신 내용을 명확히 인지했습니다.

화살표 수정: '화면 전체를 가로지르는 긴 화살표'를 원하신다는 말씀이셨네요. 기존의 ic_thick_arrow 아이콘 대신, 화면 중앙에 길게 가로지르는 형태로 수정하겠습니다. 기존 꺽쇠 모양이 아니라 긴 직선 화살표로요.

화면 회전 시 흰 화면 문제: 기기 회전(방향 전환) 시 PDF 뷰가 깜빡이거나 하얗게 변하는 현상은, 보통 Activity가 재시작되면서 PDF 뷰의 상태가 초기화될 때 발생합니다. 이를 방지하기 위한 설정을 추가하겠습니다.

두 가지 문제 모두 확실히 수정해드리겠습니다.

## 1. '화면 가로지르는 긴 화살표' 아이콘 추가
기존 ic_thick_arrow.xml 파일은 삭제하고, res/drawable 폴더에 ic_long_arrow_down.xml 파일을 새로 만들어 아래 코드를 붙여넣으세요. 이 아이콘은 화면의 횡으로 길게 뻗은 화살표입니다.

<details>
<summary><strong>res/drawable/ic_long_arrow_down.xml (새 파일) - (클릭하여 코드 보기)</strong></summary>

XML

<vector xmlns:android="http://schemas.android.com/apk/res/android"
    android:width="200dp" android:height="24dp"
    android:viewportWidth="200" android:viewportHeight="24">
    <path
        android:fillColor="#FFFFFF"
        android:pathData="M100,20 L100,4 L190,12 L100,20 M10,12 L180,12" />
</vector>
</details>

참고: 200dp로 너비를 지정했지만, activity_main.xml에서 layout_width="match_parent"를 지정하여 실제로는 화면 가득 채워지게 됩니다.

## 2. activity_main.xml 화살표 이미지뷰 수정
화살표 이미지뷰가 화면 너비에 맞춰 길게 늘어나도록 layout_width를 match_parent로 바꾸고, 새로운 아이콘을 적용합니다.

activity_main.xml 파일 전체를 아래 코드로 교체해주세요.

XML

<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:padding="8dp"
    tools:context=".MainActivity">

    <com.kyungwon.reellistviewer.CompassView
        android:id="@+id/compassView"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_alignParentTop="true"
        android:layout_alignParentEnd="true"
        android:clickable="true"
        android:focusable="true" />
    <Button
        android:id="@+id/btnOpenFile"
        android:layout_width="wrap_content"
        android:layout_height="40dp"
        android:layout_alignParentTop="true"
        android:layout_marginTop="5dp"
        android:layout_marginEnd="8dp"
        android:layout_toStartOf="@id/compassView"
        android:background="@drawable/button_gradient_purple"
        android:paddingHorizontal="16dp"
        android:text="Open ReelList"
        android:textColor="@android:color/white" />
    <TextView
        android:id="@+id/tvFileName"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_alignParentStart="true"
        android:layout_alignParentTop="true"
        android:layout_centerVertical="true"
        android:layout_marginTop="12dp"
        android:layout_toStartOf="@id/btnOpenFile"
        android:ellipsize="end"
        android:maxLines="1"
        android:textSize="16sp"
        android:textStyle="bold"
        tools:text="열린 파일 이름" />

    <LinearLayout
        android:id="@+id/pageButtonContainer"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_below="@id/btnOpenFile"
        android:layout_marginTop="8dp"
        android:orientation="vertical"
        android:visibility="gone"
        tools:visibility="visible">

        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content">

            <LinearLayout
                android:id="@+id/topButtonRow"
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal" />

            <ImageView
                android:id="@+id/ivTopRowArrow"
                android:layout_width="match_parent" android:layout_height="wrap_content"
                android:layout_gravity="center_vertical"
                android:src="@drawable/ic_long_arrow_down" android:visibility="gone"
                android:clickable="false"
                android:focusable="false"
                tools:visibility="visible"/>

        </FrameLayout>

        <LinearLayout
            android:id="@+id/bottomButtonRow"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="horizontal" />
    </LinearLayout>

</RelativeLayout>
## 3. AndroidManifest.xml 회전 시 Activity 재시작 방지
화면 회전 시 Activity가 재시작되는 것을 막고, Activity가 직접 변경 사항을 처리하도록 설정합니다. 이렇게 하면 PDF 뷰가 다시 로드되지 않아 흰 화면이 나타나는 것을 방지할 수 있습니다.

AndroidManifest.xml 파일의 MainActivity 정의 부분을 아래와 같이 수정하세요.

XML

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">

    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32" />
    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="28" />
    <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.READ_MEDIA_IMAGES" />
    <uses-permission android:name="android.permission.READ_MEDIA_VIDEO" />
    <uses-permission android:name="android.permission.READ_MEDIA_AUDIO" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.ReelListViewer"
        android:usesCleartextTraffic="true"
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:configChanges="orientation|screenSize|screenLayout|keyboardHidden|smallestScreenSize" android:launchMode="singleTask">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
수정된 부분: <activity> 태그 안에 android:configChanges="orientation|screenSize|screenLayout|keyboardHidden|smallestScreenSize" 속성을 추가했습니다. 이 속성은 화면 방향, 크기 등의 변경이 발생했을 때 Activity를 재시작하는 대신, onConfigurationChanged() 메서드를 호출하도록 시스템에 알립니다.

## 4. MainActivity.kt 화살표 가시성 및 색상 조정
이제 regenerateButtons 함수에서 화살표의 가시성만 제어하면 됩니다. (이전 MainActivity.kt 로직에서는 화살표의 tint를 변경하는 부분이 없었으므로, 화살표 fillColor를 흰색(@android:color/white)으로 직접 설정했습니다. 필요하다면 .tint 속성을 조정하여 색상을 변경할 수 있습니다.)

MainActivity.kt 파일 전체를 아래 코드로 교체해주세요.

Kotlin

package com.kyungwon.reellistviewer

import android.content.Context
import android.graphics.Typeface
import android.hardware.Sensor
import android.hardware.SensorEvent
import android.hardware.SensorEventListener
import android.hardware.SensorManager
import android.os.Bundle
import android.util.Log
import android.view.GestureDetector
import android.view.MotionEvent
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.GestureDetectorCompat
import androidx.core.view.WindowCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.WindowInsetsControllerCompat
import androidx.core.view.setMargins
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.listener.OnLoadCompleteListener
import com.github.barteksc.pdfviewer.listener.OnPageErrorListener
import com.kyungwon.reellistviewer.databinding.ActivityMainBinding
import jcifs.CIFSContext
import jcifs.config.PropertyConfiguration
import jcifs.context.BaseContext
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.util.Properties

class MainActivity : AppCompatActivity(), OnLoadCompleteListener, OnPageErrorListener, SensorEventListener {

    private lateinit var binding: ActivityMainBinding
    private val SMB_IP = "192.1.1.5"
    private val SMB_SHARED_FOLDER = "tempshare"
    private val SMB_USER = "win10"
    private val SMB_PASS = "tltmxpa2@"
    private var totalPdfPages = 0
    private val skippedButtons = mutableSetOf<Int>()
    private val currentButtons = mutableListOf<Button>()
    private var selectedButton: Button? = null
    private lateinit var gestureDetector: GestureDetectorCompat
    private var tappedButton: Button? = null
    private lateinit var sensorManager: SensorManager
    private val accelerometerReading = FloatArray(3)
    private val magnetometerReading = FloatArray(3)
    private val rotationMatrix = FloatArray(9)
    private val orientationAngles = FloatArray(3)
    private var isGeomagneticModeOn = false
    private var currentDirection = Direction.OTHER

    enum class Direction { EAST, WEST, OTHER }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)
        hideSystemUI()
        setupGestureDetector()
        setupEventListeners()
        sensorManager = getSystemService(Context.SENSOR_SERVICE) as SensorManager
    }

    override fun onResume() {
        super.onResume()
        hideSystemUI()
        sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
        sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD)?.also {
            sensorManager.registerListener(this, it, SensorManager.SENSOR_DELAY_UI)
        }
    }

    override fun onPause() {
        super.onPause()
        sensorManager.unregisterListener(this)
    }

    private fun hideSystemUI() {
        WindowCompat.setDecorFitsSystemWindows(window, false)
        val controller = WindowInsetsControllerCompat(window, binding.root)
        controller.hide(WindowInsetsCompat.Type.systemBars())
        controller.systemBarsBehavior = WindowInsetsControllerCompat.BEHAVIOR_SHOW_TRANSIENT_BARS_BY_SWIPE
    }

    private fun setupGestureDetector() {
        gestureDetector = GestureDetectorCompat(this, object : GestureDetector.SimpleOnGestureListener() {
            override fun onSingleTapConfirmed(e: MotionEvent): Boolean {
                tappedButton?.let { onPageButtonClick(it) }
                return true
            }
            override fun onDoubleTap(e: MotionEvent): Boolean {
                tappedButton?.let {
                    onPageButtonClick(it)
                    binding.pdfView.resetZoom()
                    Toast.makeText(this@MainActivity, "화면에 맞춤", Toast.LENGTH_SHORT).show()
                }
                return true
            }
            override fun onLongPress(e: MotionEvent) {
                tappedButton?.let { onPageButtonLongClick(it) }
            }
        })
    }

    private fun setupEventListeners() {
        binding.btnOpenFile.setOnLongClickListener {
            lifecycleScope.launch(Dispatchers.IO) { showPdfListFromSmb() }
            Toast.makeText(this, "파일 목록을 엽니다.", Toast.LENGTH_SHORT).show()
            true
        }
        binding.compassView.setOnLongClickListener {
            isGeomagneticModeOn = !isGeomagneticModeOn
            val modeText = if (isGeomagneticModeOn) "On" else "Off"
            Toast.makeText(this, "지자계 의존 모드: $modeText", Toast.LENGTH_SHORT).show()
            binding.compassView.setGeomagneticMode(isGeomagneticModeOn)
            if (!isGeomagneticModeOn) {
                currentDirection = Direction.OTHER
            }
            updateButtonsAndUI()
            true
        }
    }

    override fun loadComplete(nbPages: Int) {
        totalPdfPages = nbPages
        skippedButtons.clear()
        selectedButton = null
        binding.pageButtonContainer.visibility = View.VISIBLE
        isGeomagneticModeOn = false
        binding.compassView.setGeomagneticMode(false)
        updateButtonsAndUI()
    }

    private fun updateButtonsAndUI() {
        var requiredLogicalButtons=0;var physicalPageCounter=0;var logicalButtonCounter=0
        while(physicalPageCounter<totalPdfPages){logicalButtonCounter++;if(!skippedButtons.contains(logicalButtonCounter)){physicalPageCounter++}};requiredLogicalButtons=logicalButtonCounter
        val currentButtonCount=currentButtons.size
        var newButtonCount=if(requiredLogicalButtons%2!=0)requiredLogicalButtons+1 else requiredLogicalButtons
        if(totalPdfPages>0&&newButtonCount==0)newButtonCount=2;newButtonCount=maxOf(newButtonCount,currentButtonCount)
        regenerateButtons(newButtonCount)
        updateAllButtonStyles()
    }

    private fun regenerateButtons(count: Int) {
        binding.topButtonRow.removeAllViews()
        binding.bottomButtonRow.removeAllViews()
        currentButtons.clear()

        val buttonHeight = dpToPx(44)
        val margin = dpToPx(2)
        val buttonParams = LinearLayout.LayoutParams(0, buttonHeight, 1.0f)
        buttonParams.setMargins(margin)
        
        // 💡 지자계 모드 ON일 때만 화살표 표시
        binding.ivTopRowArrow.visibility = if (isGeomagneticModeOn) View.VISIBLE else View.GONE
        
        // 💡 현재 방향에 따라 홀수/짝수 버튼이 들어갈 행을 결정
        // LTR(서쪽) 방향일 때: 홀수 행이 아래 (bottomButtonRow), 짝수 행이 위 (topButtonRow)
        // RTL(동쪽) 방향일 때: 짝수 행이 아래 (bottomButtonRow), 홀수 행이 위 (topButtonRow)
        val (oddRowContainer, evenRowContainer) = when {
            isGeomagneticModeOn && currentDirection == Direction.WEST -> binding.bottomButtonRow to binding.topButtonRow
            isGeomagneticModeOn && currentDirection == Direction.EAST -> binding.topButtonRow to binding.bottomButtonRow
            else -> binding.topButtonRow to binding.bottomButtonRow // 지자계 OFF 또는 OTHER 방향일 때는 기본값 (홀수 위, 짝수 아래)
        }

        // 💡 방향에 따른 정렬 방식 결정
        val isRtl = isGeomagneticModeOn && currentDirection == Direction.EAST

        for (i in 1..count) {
            val button = createPageButton(i, buttonParams.also { it.height = buttonHeight })
            if (i % 2 != 0) { // 홀수 버튼
                if (isRtl) oddRowContainer.addView(button, 0) else oddRowContainer.addView(button)
            } else { // 짝수 버튼
                if (isRtl) evenRowContainer.addView(button, 0) else evenRowContainer.addView(button)
            }
            currentButtons.add(button)
        }
    }

    private fun createPageButton(number: Int, layoutParams: LinearLayout.LayoutParams? = null): Button {
        return Button(this).apply {
            text = number.toString(); tag = number
            layoutParams?.let { this.layoutParams = it }
            textSize = 20f; typeface = Typeface.DEFAULT_BOLD
            setOnTouchListener { view, event ->
                tappedButton = view as Button
                gestureDetector.onTouchEvent(event)
                true
            }
        }
    }

    private fun updateAllButtonStyles() {
        if (isGeomagneticModeOn) {
            for (button in currentButtons) {
                val buttonNumber = button.tag as Int
                val isActiveRow = when {
                    currentDirection == Direction.WEST -> buttonNumber % 2 != 0 // 서쪽일 때 홀수 행 활성
                    currentDirection == Direction.EAST -> buttonNumber % 2 == 0 // 동쪽일 때 짝수 행 활성
                    else -> false // 그 외 방향에서는 활성 행 없음 (기본 스타일)
                }

                when {
                    button == selectedButton -> {
                        button.setBackgroundResource(R.drawable.button_bg_geo_selected)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.white))
                    }
                    skippedButtons.contains(buttonNumber) -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                    }
                    isActiveRow && mapLogicalToPhysical(buttonNumber) in 1..totalPdfPages -> {
                        button.setBackgroundResource(R.drawable.button_bg_geo_active)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    }
                    else -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_normal)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    }
                }
            }
        } else { // 지자계 모드 OFF (이전과 동일)
            for (button in currentButtons) {
                val buttonNumber = button.tag as Int
                if (button == selectedButton) {
                    button.setBackgroundResource(R.drawable.button_bg_page_selected)
                    button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                    continue
                }
                when {
                    skippedButtons.contains(buttonNumber) -> {
                        button.setBackgroundResource(R.drawable.button_bg_page_skipped_dark)
                        button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                    }
                    else -> {
                        val physicalPage = mapLogicalToPhysical(buttonNumber)
                        if (physicalPage in 1..totalPdfPages) {
                            button.setBackgroundResource(R.drawable.button_bg_page_normal)
                            button.setTextColor(ContextCompat.getColor(this, android.R.color.black))
                        } else {
                            button.setBackgroundResource(R.drawable.button_border_invalid)
                            button.setTextColor(ContextCompat.getColor(this, android.R.color.darker_gray))
                        }
                    }
                }
            }
        }
    }

    private fun mapLogicalToPhysical(logicalButtonNum: Int): Int {
        val skipsBefore = skippedButtons.count { it < logicalButtonNum }
        return logicalButtonNum - skipsBefore
    }

    private fun onPageButtonClick(button: Button) {
        val buttonNumber = button.tag as Int
        if (skippedButtons.contains(buttonNumber)) {
            Toast.makeText(this, "$buttonNumber 페이지는 스킵되었습니다.", Toast.LENGTH_SHORT).show()
            return
        }
        val physicalPage = mapLogicalToPhysical(buttonNumber)
        if (physicalPage in 1..totalPdfPages) {
            binding.pdfView.jumpTo(physicalPage - 1, false)
            selectedButton = button
            updateAllButtonStyles()
        } else {
            Toast.makeText(this, "내용이 없는 페이지입니다.", Toast.LENGTH_SHORT).show()
        }
    }

    private fun onPageButtonLongClick(view: View) {
        val button = view as Button; val buttonNumber = button.tag as Int
        if (skippedButtons.contains(buttonNumber)) {
            skippedButtons.remove(buttonNumber)
            Toast.makeText(this, "$buttonNumber 페이지 스킵 해제", Toast.LENGTH_SHORT).show()
        } else {
            skippedButtons.add(buttonNumber)
            Toast.makeText(this, "$buttonNumber 페이지 스킵 설정", Toast.LENGTH_SHORT).show()
            if (selectedButton == button) { selectedButton = null }
        }
        updateButtonsAndUI()
    }

    override fun onAccuracyChanged(sensor: Sensor?, accuracy: Int) {}

    override fun onSensorChanged(event: SensorEvent) {
        if (event.sensor.type == Sensor.TYPE_ACCELEROMETER) {
            System.arraycopy(event.values, 0, accelerometerReading, 0, accelerometerReading.size)
        } else if (event.sensor.type == Sensor.TYPE_MAGNETIC_FIELD) {
            System.arraycopy(event.values, 0, magnetometerReading, 0, magnetometerReading.size)
        }
        SensorManager.getRotationMatrix(rotationMatrix, null, accelerometerReading, magnetometerReading)
        SensorManager.getOrientation(rotationMatrix, orientationAngles)
        val azimuthInDegrees = Math.toDegrees(orientationAngles[0].toDouble()).toFloat()
        val normalizedAzimuth = (azimuthInDegrees + 360) % 360
        binding.compassView.updateBearing(normalizedAzimuth)
        if (isGeomagneticModeOn) {
            var newDirection = currentDirection
            val tolerance = 2.0f
            if (normalizedAzimuth in (270f - tolerance)..(270f + tolerance)) { // 서쪽 방향 (왼쪽 -> 오른쪽)
                newDirection = Direction.WEST
            } else if (normalizedAzimuth in (90f - tolerance)..(90f + tolerance)) { // 동쪽 방향 (오른쪽 -> 왼쪽)
                newDirection = Direction.EAST
            } else {
                newDirection = Direction.OTHER // 그 외 방향
            }

            if (newDirection != currentDirection) {
                currentDirection = newDirection
                updateButtonsAndUI()
            }
        }
    }

    private fun dpToPx(dp: Int): Int {
        return (dp * resources.displayMetrics.density).toInt()
    }

    private suspend fun loadPdfFromSmbFile(smbFile: SmbFile) {
        withContext(Dispatchers.Main) {
            binding.btnOpenFile.isEnabled = false; binding.btnOpenFile.text = "로딩중..."
        }
        try {
            val tempPdfFile = File(cacheDir, smbFile.name)
            smbFile.inputStream.use { input -> FileOutputStream(tempPdfFile).use { output -> input.copyTo(output) } }
            withContext(Dispatchers.Main) {
                binding.tvFileName.text = smbFile.name.substringBeforeLast(".")
                binding.pdfView.fromFile(tempPdfFile).onLoad(this@MainActivity).onPageError(this@MainActivity).load()
            }
        } catch (e: Exception) { Log.e("SmbTask", "파일 다운로드 실패", e)
        } finally {
            withContext(Dispatchers.Main) {
                binding.btnOpenFile.isEnabled = true; binding.btnOpenFile.text = "Open ReelList"
            }
        }
    }
    
    private suspend fun showPdfListFromSmb(){val smbUrl="smb://$SMB_IP/$SMB_SHARED_FOLDER/";try{val properties=Properties();properties["jcifs.smb.client.minVersion"]="SMB300";properties["jcifs.smb.client.maxVersion"]="SMB311";val config=PropertyConfiguration(properties);val cifsContext:CIFSContext=BaseContext(config);val auth=NtlmPasswordAuthenticator(null,SMB_USER,SMB_PASS);val context=cifsContext.withCredentials(auth);val dir=SmbFile(smbUrl,context);val pdfFiles=dir.listFiles{f->f.name.endsWith(".pdf",ignoreCase=true)};if(pdfFiles.isNullOrEmpty()){withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더에 PDF 파일이 없습니다.",Toast.LENGTH_SHORT).show()};return};val fileNames=pdfFiles.map{it.name}.toTypedArray();withContext(Dispatchers.Main){AlertDialog.Builder(this@MainActivity).setTitle("PDF 파일 선택").setItems(fileNames){_,which->val selectedFile=pdfFiles[which];lifecycleScope.launch(Dispatchers.IO){loadPdfFromSmbFile(selectedFile)}}.setNegativeButton("취소",null).show()}}catch(e:Exception){Log.e("SmbTask","SMB 연결 실패",e);withContext(Dispatchers.Main){Toast.makeText(this@MainActivity,"공유 폴더 연결 실패\n오류: ${e.message}",Toast.LENGTH_LONG).show()}}}
    override fun onPageError(page:Int,t:Throwable){Log.e("PDFView","페이지 로드 에러",t);Toast.makeText(this,"${page+1}페이지 로드 에러",Toast.LENGTH_SHORT).show()}