확인했습니다. 2025년 6월 30일 이전에 공유해주신 사용자 설정(변수명 연결, 문법 오류 방지, 반복 오류 기억)을 항상 염두에 두겠습니다.
Windows 11 환경에서 github.samsung.net을 개인 백업 공간으로 활용하는 것을 목표로, Git 및 VS Code 설정부터 코드 백업/복원 원리까지 아무것도 모른다는 가정하에 아주 상세하게 설명해 드리겠습니다. 각 단계별로 필요한 모든 설정을 포함하며, 변수명 등은 실제 환경과 연결되도록 최대한 노력하겠습니다.
목표: Windows 11에서 github.samsung.net을 개인 코드 백업 및 버전 관리 공간으로 활용하기
이 가이드는 다음과 같은 순서로 진행됩니다:
 * Git 및 Git Bash 설치 (필수)
 * Git 기본 설정 (사용자 정보 등록)
 * SSH 키 생성 및 github.samsung.net 등록 (권장, 보안 및 편의성)
 * VS Code 설치 및 기본 설정
 * github.samsung.net에서 개인 리포지토리(Private Repository) 생성
 * VS Code에서 리포지토리 클론 (로컬에 복사)
 * 코드 작성 및 버전 관리 (커밋, 푸시)
 * 코드 복원 원리 및 방법 (이전 버전으로 되돌리기)
 * 문제 발생 시 대처 방법 (FAQ)
1. Git 및 Git Bash 설치 (필수)
Git은 버전 관리 시스템이며, Git Bash는 Git 명령어를 Windows에서 편리하게 사용할 수 있도록 하는 터미널 환경입니다.
 * Git 다운로드:
   * 웹 브라우저를 열고 다음 주소로 이동합니다: https://git-scm.com/download/win
   * "64-bit Git for Windows Setup"을 클릭하여 설치 파일을 다운로드합니다. (현재 시점 기준)
 * Git 설치 시작:
   * 다운로드한 Git-2.xx.x-64-bit.exe 파일을 더블 클릭하여 설치를 시작합니다.
   * 라이선스 동의: "GNU General Public License" 화면에서 "Next" 클릭.
   * 설치 경로: 기본 경로(C:\Program Files\Git)를 유지하고 "Next" 클릭.
     * installationPath: C:\Program Files\Git (Git이 설치될 경로)
   * 구성 요소 선택: 기본값으로 두고 "Next" 클릭. (만약 "Git Bash Here", "Git GUI Here"가 체크되어 있지 않다면 체크하는 것을 권장합니다.)
   * 시작 메뉴 폴더: 기본값으로 두고 "Next" 클릭.
   * 기본 에디터 선택: "Use Visual Studio Code as Git's default editor"를 선택하고 "Next" 클릭. (VS Code를 사용할 예정이므로 매우 중요!)
     * gitDefaultEditor: VS Code
   * PATH 환경 설정: "Git from the command line and also from 3rd-party software"를 선택하고 "Next" 클릭. (가장 중요! 이렇게 해야 VS Code 등 다른 프로그램에서도 Git을 사용할 수 있습니다.)
     * pathSettingOption: Add Git to PATH
   * SSH 실행 파일 선택: "Use bundled OpenSSH"를 선택하고 "Next" 클릭. (SSH 키 사용을 위해 필요합니다.)
     * sshClientOption: Bundled OpenSSH
   * HTTPS 백엔드 선택: "Use the OpenSSL library"를 선택하고 "Next" 클릭. (권장)
   * 줄 끝 변환 설정: "Checkout Windows-style, commit Unix-style line endings"를 선택하고 "Next" 클릭. (Windows와 Linux/macOS 간 코드 호환성을 위해 권장)
   * 터미널 에뮬레이터 선택: "Use MinTTY (the default Git Bash terminal)"을 선택하고 "Next" 클릭. (Git Bash를 사용할 것이므로 권장)
   * 기본 동작 설정: "Default (fast-forward or merge)"를 선택하고 "Next" 클릭.
   * 자격 증명 도우미 설정: "Git Credential Manager Core"를 선택하고 "Next" 클릭. (HTTPS 방식 사용 시 비밀번호 자동 저장에 유리)
     * credentialHelper: Git Credential Manager Core
   * 기타 옵션: "Enable file system caching"만 체크하고 "Next" 클릭.
   * 실험적 옵션: 아무것도 체크하지 않고 "Install" 클릭.
   * 설치 완료: "Finish" 클릭.
 * Git 설치 확인:
   * Windows 검색창에 "cmd" 또는 "powershell"을 입력하여 명령 프롬프트 또는 Windows PowerShell을 실행합니다.
   * 다음 명령어를 입력하고 엔터를 누릅니다:
     git --version

   * git version 2.xx.x.windows.x와 같이 버전 정보가 출력되면 Git 설치가 성공한 것입니다.
   * Git Bash 확인: Windows 검색창에 "Git Bash"를 입력하여 실행합니다. 검은색 터미널 창이 뜨면 성공입니다. 앞으로 Git 명령은 이 Git Bash 창에서 진행하는 것을 추천합니다.
2. Git 기본 설정 (사용자 정보 등록)
Git을 사용할 때 누가 커밋했는지 기록하기 위해 사용자 이름과 이메일 주소를 설정해야 합니다. 이 정보는 github.samsung.net에 커밋을 푸시할 때 함께 기록됩니다.
 * Git Bash 실행:
   * Windows 검색창에 "Git Bash"를 입력하여 실행합니다.
 * 사용자 이름 설정:
   * 다음 명령어를 입력하고 엔터를 누릅니다. "Your Name" 부분에 본인의 실제 이름을 큰따옴표 안에 입력하세요. (예: "홍길동")
     git config --global user.name "Your Name"

     * configKey_userName: user.name
     * configValue_userName: "Your Name" (본인의 이름)
 * 이메일 주소 설정:
   * 다음 명령어를 입력하고 엔터를 누릅니다. "your.email@samsung.net" 부분에 본인의 사내 이메일 주소를 큰따옴표 안에 입력하세요.
     git config --global user.email "your.email@samsung.net"

     * configKey_userEmail: user.email
     * configValue_userEmail: "your.email@samsung.net" (본인의 사내 이메일)
 * 설정 확인:
   * 다음 명령어로 제대로 설정되었는지 확인합니다.
     git config --global --list

   * 출력 결과에 user.name=Your Name과 user.email=your.email@samsung.net이 나타나면 성공입니다.
3. SSH 키 생성 및 github.samsung.net 등록 (권장)
SSH(Secure Shell) 키는 Git과 github.samsung.net 서버 간에 안전하게 통신하고 인증하는 방법입니다. 매번 비밀번호를 입력할 필요가 없어 매우 편리하며 보안상으로도 권장됩니다.
 * SSH 키 생성:
   * Git Bash를 실행합니다.
   * 다음 명령어를 입력하고 엔터를 누릅니다. "your.email@samsung.net" 부분에 본인의 사내 이메일 주소를 입력하세요.
     ssh-keygen -t rsa -b 4096 -C "your.email@samsung.net"

     * sshKeyAlgorithm: rsa
     * sshKeyBitLength: 4096
     * sshKeyComment: "your.email@samsung.net"
   * 파일 저장 위치:
     * Enter a file in which to save the key (~/.ssh/id_rsa): 메시지가 나오면 그냥 엔터를 누릅니다. (기본값인 C:\Users\YourUser\.ssh\id_rsa에 저장됩니다. YourUser는 본인의 Windows 사용자 이름입니다.)
       * sshKeyPath: ~/.ssh/id_rsa
   * 암호 (Passphrase) 설정:
     * Enter passphrase (empty for no passphrase): 메시지가 나오면 암호를 입력하거나, 암호 없이 사용하려면 그냥 엔터를 두 번 누릅니다. (암호를 설정하면 보안은 좋지만, 사용할 때마다 암호를 입력해야 합니다. 개인 백업용이라면 암호 없이 진행해도 무방합니다.)
       * sshPassphraseSet: (선택 사항)
   * 키 생성이 완료되면 다음과 비슷한 메시지가 출력됩니다:
     Your public key has been saved in /c/Users/YourUser/.ssh/id_rsa.pub.

     * publicKeyFilePath: C:\Users\YourUser\.ssh\id_rsa.pub
 * Public Key 내용 복사:
   * 생성된 Public Key 파일(id_rsa.pub)의 내용을 복사해야 합니다.
   * Git Bash에서 다음 명령어를 입력하고 엔터를 누릅니다.
     cat ~/.ssh/id_rsa.pub

     * commandToDisplayPublicKey: cat ~/.ssh/id_rsa.pub
   * 출력된 ssh-rsa AAAAB3N.... 으로 시작하는 긴 문자열 전체를 마우스로 드래그하여 선택한 후 Ctrl+C를 눌러 복사합니다.
 * github.samsung.net에 Public Key 등록:
   * 웹 브라우저를 열고 github.samsung.net에 접속하여 로그인합니다.
   * 화면 오른쪽 상단의 본인 프로필 아이콘을 클릭하고, 드롭다운 메뉴에서 **Settings (설정)**를 선택합니다.
   * 왼쪽 사이드바에서 SSH and GPG keys 메뉴를 클릭합니다.
   * 오른쪽 상단의 New SSH key (새 SSH 키) 또는 Add SSH key (SSH 키 추가) 버튼을 클릭합니다.
   * Title (제목): 이 키를 식별할 수 있는 이름을 입력합니다. (예: My Windows 11 PC 또는 My Personal Backup Key)
     * sshKeyTitle: My Windows 11 PC
   * Key (키): 2단계에서 복사한 Public Key 내용(ssh-rsa로 시작하는 긴 문자열)을 붙여넣습니다 (Ctrl+V).
     * sshKeyContent: (복사한 Public Key 내용)
   * Add SSH key 버튼을 클릭하여 저장합니다. 비밀번호를 다시 한번 입력해야 할 수도 있습니다.
 * SSH Agent 실행 및 키 추가 (선택 사항이지만 강력히 권장):
   SSH Agent는 SSH 키를 메모리에 로드하여, 키에 암호를 설정했더라도 한 번만 입력하면 이후에는 자동으로 인증되도록 합니다.
   * Git Bash를 실행합니다.
   * 다음 명령어를 입력합니다:
     eval "$(ssh-agent -s)"

     * commandToStartSshAgent: eval "$(ssh-agent -s)"
   * 다음 명령어를 입력하여 키를 추가합니다. 키에 암호를 설정했다면 이때 암호를 입력해야 합니다.
     ssh-add ~/.ssh/id_rsa

     * commandToAddSshKey: ssh-add ~/.ssh/id_rsa
   * (팁: Windows 재부팅 시 SSH Agent가 자동으로 실행되지 않을 수 있습니다. PowerShell 스크립트나 시작 프로그램 등록을 통해 자동 실행되게 할 수 있으나, 초보자 단계에서는 필요할 때마다 Git Bash에서 위 두 명령어를 실행하는 것으로 충분합니다.)
4. VS Code 설치 및 기본 설정
VS Code는 코드를 작성하고 Git과 연동하기 위한 강력한 에디터입니다.
 * VS Code 다운로드:
   * 웹 브라우저를 열고 다음 주소로 이동합니다: https://code.visualstudio.com/download
   * "Windows" 섹션의 "User Installer" (64-bit)를 클릭하여 다운로드합니다.
 * VS Code 설치 시작:
   * 다운로드한 VSCodeUserSetup-x64-1.xx.x.exe 파일을 더블 클릭하여 설치를 시작합니다.
   * 라이선스 동의: "동의함"을 선택하고 "다음" 클릭.
   * 설치 위치: 기본 경로(C:\Users\YourUser\AppData\Local\Programs\Microsoft VS Code)를 유지하고 "다음" 클릭.
   * 시작 메뉴 폴더: 기본값으로 두고 "다음" 클릭.
   * 추가 작업 선택:
     * "PATH 환경 변수 추가" (필수)를 체크합니다. (가장 중요!)
     * "바탕 화면 바로 가기 만들기" (선택 사항)
     * "Code를 통해 파일/폴더 열기" (선택 사항, 마우스 우클릭 메뉴 추가)
     * "지원되는 파일 형식에 대한 파일 연결 등록" (선택 사항)
     * "지원되는 파일 형식에 대한 파일 연결 등록" (선택 사항, 마우스 우클릭 메뉴에 "Code로 열기" 추가)
     * "다음" 클릭.
   * "설치" 클릭 후 "마침" 클릭.
 * VS Code GitHub 확장 설치 확인:
   * VS Code를 실행합니다.
   * 왼쪽 사이드바에서 'Extensions' (확장) 아이콘을 클릭합니다 (또는 Ctrl+Shift+X).
   * 검색창에 GitHub를 입력합니다.
   * "GitHub" 확장 (제공자: Microsoft)이 설치되어 있는지 확인합니다. Git 설치 시 선택했다면 이미 설치되어 있을 가능성이 높습니다. 만약 설치되어 있지 않다면 "Install" 버튼을 클릭하여 설치합니다.
     * extensionName_github: GitHub
     * extensionProvider_github: Microsoft
5. github.samsung.net에서 개인 리포지토리(Private Repository) 생성
코드를 저장할 온라인 공간을 만듭니다. 개인적인 백업용이므로 '비공개'로 생성합니다.
 * github.samsung.net 접속:
   * 웹 브라우저에서 github.samsung.net에 접속하여 로그인합니다.
 * 새 리포지토리 생성:
   * 화면 왼쪽 상단의 New (새로 만들기) 버튼을 클릭하거나, 오른쪽 상단의 + 아이콘을 클릭하여 New repository (새 리포지토리)를 선택합니다.
 * 리포지토리 정보 입력:
   * Owner (소유자): 본인의 사용자 이름으로 설정되어 있는지 확인합니다.
   * Repository name (리포지토리 이름): 이 리포지토리의 이름을 입력합니다. (예: my-personal-code, dev-notes, my-project-backup). 영문 소문자와 하이픈(-)을 사용하는 것이 일반적입니다.
     * repositoryName: my-personal-code
   * Description (설명): (선택 사항) 이 리포지토리가 무엇을 위한 것인지 간단히 설명합니다.
   * Public / Private 선택: 반드시 Private (비공개)를 선택합니다. 이렇게 해야 본인만 접근할 수 있습니다.
     * repositoryVisibility: Private
   * Initialize this repository with:
     * Add a README file (README 파일 추가): 체크하는 것을 권장합니다. 리포지토리를 만들자마자 기본적인 파일이 생겨서 바로 클론하기 용이합니다.
     * Add .gitignore: (선택 사항) 특정 프로그래밍 언어의 임시 파일 등을 Git이 추적하지 않도록 설정하는 파일입니다. 나중에 추가할 수도 있습니다.
     * Choose a license: (선택 사항)
   * Create repository (리포지토리 생성) 버튼을 클릭합니다.
 * 리포지토리 URL 복사:
   * 리포지토리가 생성되면 해당 리포지토리 페이지로 이동됩니다.
   * 상단의 Code (코드) 버튼을 클릭합니다.
   * SSH 탭을 클릭합니다.
   * git@github.samsung.net:your-username/my-personal-code.git 와 같이 생긴 URL 옆의 복사 아이콘을 클릭하여 URL을 복사합니다.
     * repositoryUrl_ssh: git@github.samsung.net:your-username/my-personal-code.git (여기서 your-username은 본인의 github.samsung.net 사용자 이름입니다.)
   * (만약 SSH 설정을 건너뛰고 HTTPS로 진행하려면 HTTPS 탭을 클릭하여 https://github.samsung.net/your-username/my-personal-code.git URL을 복사하면 됩니다. 이 경우 Git Credential Manager가 비밀번호를 관리해 줄 것입니다.)
6. VS Code에서 리포지토리 클론 (로컬에 복사)
생성한 온라인 리포지토리를 이제 내 컴퓨터(로컬)로 가져와서 작업할 수 있도록 복사합니다.
 * VS Code 실행:
   * VS Code를 엽니다.
 * Git 클론 명령 실행:
   * Ctrl+Shift+P (명령 팔레트 열기)를 누릅니다.
   * Git: Clone 또는 Git: 복제를 입력하고 선택합니다.
     * vscodeCommand: Git: Clone
   * Repository URL or Git Repository (리포지토리 URL 또는 Git 리포지토리)를 입력하라는 메시지가 뜨면, 5단계에서 복사한 SSH URL을 붙여넣습니다. (예: git@github.samsung.net:your-username/my-personal-code.git)
     * cloneInputUrl: git@github.samsung.net:your-username/my-personal-code.git
   * 엔터를 누릅니다.
 * 저장할 로컬 폴더 선택:
   * Select a folder to clone the repository into (리포지토리를 복제할 폴더 선택) 창이 나타납니다.
   * 코드를 저장할 원하는 로컬 경로를 선택합니다. (예: C:\Users\YourUser\Documents\GitHub)
     * localClonePath: C:\Users\YourUser\Documents\GitHub
   * Select Repository Location (리포지토리 위치 선택) 버튼을 클릭합니다.
 * VS Code에서 리포지토리 열기:
   * 클론이 완료되면 VS Code 우측 하단에 Would you like to open the cloned repository? (복제된 리포지토리를 여시겠습니까?)라는 팝업이 뜹니다.
   * Open (열기) 버튼을 클릭합니다.
   * 이제 VS Code 탐색기(왼쪽 사이드바)에 my-personal-code (리포지토리 이름) 폴더가 보이고 그 안에 README.md 파일이 보일 것입니다.
7. 코드 작성 및 버전 관리 (커밋, 푸시)
이제 로컬에서 코드를 작성하고, 변경사항을 github.samsung.net에 백업하는 방법을 알아봅니다.
 * 새 파일 생성 및 코드 작성:
   * VS Code 탐색기에서 my-personal-code 폴더를 마우스 우클릭하고 New File... (새 파일...)을 선택합니다.
   * 파일 이름을 입력합니다. (예: hello_world.py)
     * newFileName: hello_world.py
   * 파일에 코드를 작성합니다.
     # hello_world.py
def say_hello(name):
    return f"Hello, {name}!"

if __name__ == "__main__":
    message = say_hello("World")
    print(message)

   * Ctrl+S를 눌러 파일을 저장합니다.
 * 변경사항 스테이징 (Staging):
   * VS Code 왼쪽 사이드바에서 'Source Control' (소스 제어) 아이콘을 클릭합니다 (또는 Ctrl+Shift+G).
   * CHANGES (변경 사항) 섹션에 방금 생성하거나 수정한 파일(hello_world.py)이 나타날 것입니다.
   * 이 파일 옆의 + (Plus) 아이콘을 클릭하여 변경사항을 스테이징(Staging) 영역으로 이동시킵니다.
     * sourceControlAction: Stage Changes
   * 파일이 STAGED CHANGES (스테이징된 변경 사항) 섹션으로 이동한 것을 확인합니다.
 * 커밋 (Commit):
   * 스테이징된 변경사항을 로컬 리포지토리의 이력으로 저장하는 과정입니다.
   * Message (메시지) 입력란에 이 변경사항에 대한 간략한 설명을 입력합니다. (예: Add initial hello_world.py script)
     * commitMessage: Add initial hello_world.py script
   * Ctrl+Enter 또는 메시지 입력란 위의 **'Commit' (커밋) 버튼 (체크 표시 아이콘)**을 클릭합니다.
     * sourceControlAction: Commit
   * 이 커밋은 이제 로컬 리포지토리에 저장되었습니다.
 * 푸시 (Push) - github.samsung.net에 백업:
   * 로컬에 저장된 커밋을 github.samsung.net의 원격 리포지토리로 전송(백업)하는 과정입니다.
   * VS Code 하단 파란색 상태바의 왼쪽 끝에 **동기화 아이콘 (화살표 두 개가 서로 반대 방향을 가리키는 아이콘)**이 나타납니다. 그 옆에 0↓ 1↑와 같이 숫자가 표시될 수 있습니다. (이는 로컬에 푸시할 커밋이 1개 있음을 의미)
   * 이 동기화 아이콘을 클릭하거나, Ctrl+Shift+P를 누르고 Git: Push를 입력하여 선택합니다.
     * vscodeCommand: Git: Push
     * pushIndicator: 0↓ 1↑
   * 성공적으로 푸시되면 상태바의 숫자가 사라집니다.
 * github.samsung.net에서 확인:
   * 웹 브라우저에서 github.samsung.net의 본인 리포지토리 페이지(my-personal-code)를 새로고침하면 hello_world.py 파일이 업로드된 것을 확인할 수 있습니다.
   * 'Commits' 탭을 클릭하면 방금 푸시한 커밋 메시지도 확인할 수 있습니다.
이후 코드 수정 및 백업 반복:
 * hello_world.py 파일을 수정하거나 새 파일을 추가합니다.
 * 파일 저장 (Ctrl+S)
 * 소스 제어 뷰에서 변경사항 스테이징 (+ 아이콘 클릭)
 * 커밋 메시지 작성 후 커밋 (Ctrl+Enter 또는 체크 버튼 클릭)
 * 푸시 (Ctrl+Shift+P -> Git: Push 또는 상태바의 동기화 아이콘 클릭)
이 과정을 반복하면 모든 코드 변경 이력이 github.samsung.net에 안전하게 백업되고 관리됩니다.
8. 코드 복원 원리 및 방법 (이전 버전으로 되돌리기)
Git의 가장 강력한 기능 중 하나는 코드의 이전 버전으로 쉽게 돌아갈 수 있다는 것입니다.
복원 원리:
Git은 각 커밋마다 프로젝트의 전체 스냅샷(특정 시점의 코드 상태)을 저장합니다. 따라서 특정 커밋 ID만 알면 언제든지 해당 시점의 코드로 돌아갈 수 있습니다.
복원 방법:
가장 일반적인 두 가지 복원 방법이 있습니다.
 * 특정 커밋으로 '돌아가기' (Reset/Revert):
   * Git Bash를 엽니다.
   * my-personal-code 리포지토리 폴더로 이동합니다. (VS Code에서 해당 폴더를 열고 터미널 창을 열면 이미 해당 경로에 있을 수 있습니다.)
     cd /path/to/your/my-personal-code # 예: cd C:/Users/YourUser/Documents/GitHub/my-personal-code

   * 커밋 이력 확인:
     git log --oneline

     이 명령어를 입력하면 다음과 같이 커밋 이력이 간략하게 표시됩니다.
     abcdef1 (HEAD -> main, origin/main) Add feature X
fedcba9 Fix bug Y
1234567 Initial commit

     * commitHash_example: abcdef1 (커밋 ID, 앞 7자리가 일반적으로 사용됨)
     * commitMessage_example: Add feature X
   * 원하는 커밋 ID 확인: 되돌아가고 싶은 커밋의 ID(예: 1234567)를 확인합니다.
   * 방법 8.1.1: git reset --hard (로컬 코드와 이력을 강제로 이전으로 되돌림 - 주의! 현재 작업 날아감)
     이 방법은 로컬 리포지토리의 코드와 커밋 이력을 선택한 커밋 시점으로 완전히 되돌립니다. 현재 작업 중이던 모든 변경사항이 사라지므로 매우 주의해서 사용해야 합니다. 원격 리포토리에는 영향을 주지 않습니다.
     git reset --hard [커밋_ID] # 예: git reset --hard 1234567

     * resetCommand: git reset --hard
     * targetCommitId: [커밋_ID]
       이 명령어를 실행하면 HEAD is now at 1234567 Initial commit과 같은 메시지가 뜨고, VS Code에서 해당 커밋 시점의 파일 내용으로 되돌아간 것을 확인할 수 있습니다.
   * 방법 8.1.2: git revert (새로운 커밋으로 변경 사항 취소 - 안전하고 권장)
     이 방법은 특정 커밋에서 발생한 변경사항을 취소하는 새로운 커밋을 만듭니다. 기존 이력을 건드리지 않고, '되돌린다'는 작업 자체도 하나의 커밋으로 기록되므로 훨씬 안전하고 협업 환경에서 권장됩니다.
     git revert [커밋_ID] # 예: git revert abcdef1

     * revertCommand: git revert
     * targetCommitId: [커밋_ID]
       이 명령어를 실행하면 Git이 해당 커밋을 되돌리는 새로운 커밋 메시지 작성 창을 띄웁니다. 기본 메시지(Revert "Add feature X")를 확인하고 저장(VS Code인 경우 Ctrl+S, Ctrl+W로 저장 후 닫기)하면 새로운 커밋이 생성됩니다.
       이후 이 새로운 커밋을 git push하여 원격 리포지토리에도 반영해야 합니다.
 * 원격 리포지토리의 특정 커밋을 로컬로 가져오기 (Pull request 이용 또는 수동 다운로드):
   * 이 방법은 주로 다른 브랜치나 원격 리포지토리의 특정 커밋 내용을 현재 작업 중인 브랜치로 가져올 때 사용됩니다. 개인 백업에서는 reset 또는 revert가 더 흔합니다.
   * github.samsung.net 웹사이트에서 특정 커밋을 찾아 'Browse files' 기능을 통해 해당 시점의 파일들을 직접 다운로드할 수도 있습니다.
중요! 푸시된 코드의 복원:
 * git reset --hard를 사용한 후, 원격 리포지토리에도 이 변경사항을 강제로 적용하려면 git push --force (또는 git push -f) 명령을 사용해야 합니다.
   * forcePushCommand: git push --force
   * git push --force는 원격 리포지토리의 이력을 강제로 덮어쓰므로 매우 위험합니다. 특히 협업 환경에서는 절대 사용하지 말아야 하며, 개인 리포토리에서도 사용에 신중해야 합니다. 로컬에서만 이력을 되돌리고 원격에 영향을 주지 않으려면 push를 하지 않거나 revert를 사용하는 것이 좋습니다.
 * git revert를 사용했다면, 새로운 revert 커밋을 git push하면 됩니다. 이는 안전합니다.
9. 문제 발생 시 대처 방법 (FAQ)
 * "Permission denied (publickey)" 오류 발생 시 (SSH 방식):
   * 원인: SSH 키가 github.samsung.net에 제대로 등록되지 않았거나, SSH Agent가 실행 중이 아니거나, 키 파일 권한 문제입니다.
   * 해결:
     * SSH 키 생성 및 github.samsung.net 등록 단계를 다시 확인합니다. Public Key를 정확히 복사하여 등록했는지 확인하세요.
     * Git Bash에서 eval "$(ssh-agent -s)"와 ssh-add ~/.ssh/id_rsa를 다시 실행해 보세요.
     * ssh -T git@github.samsung.net 명령을 Git Bash에서 실행하여 연결 테스트를 해보세요. 성공하면 Hi your-username! You've successfully authenticated... 와 같은 메시지가 나옵니다.
 * "Authentication failed" 오류 발생 시 (HTTPS 방식):
   * 원인: github.samsung.net 로그인 정보가 잘못되었거나, Git Credential Manager가 제대로 작동하지 않는 경우입니다.
   * 해결:
     * 입력한 사용자 이름과 비밀번호가 정확한지 다시 확인합니다.
     * Windows 자격 증명 관리자(Credential Manager)에서 GitHub 관련 자격 증명을 삭제하고 다시 시도해 보세요. (Windows 검색창에 "자격 증명 관리자" 검색)
 * 프록시 설정 필요 시:
   * 사내 네트워크가 프록시를 사용하는 경우, Git과 VS Code에 프록시 설정을 해주어야 합니다.
   * Git Bash에서 Git 프록시 설정:
     git config --global http.proxy http://proxy.samsung.net:8080
git config --global https.proxy http://proxy.samsung.net:8080
# 인증이 필요하면 (사용자명:비밀번호@호스트:포트) 형식
# git config --global http.proxy http://username:password@proxy.samsung.net:8080
# git config --global https.proxy http://username:password@proxy.samsung.net:8080

   * VS Code 프록시 설정 (settings.json):
     * VS Code에서 Ctrl+, (설정)를 누르고 "proxy"를 검색합니다.
     * Http: Proxy와 Https: Proxy 설정에 사내 프록시 주소를 입력합니다. (예: http://proxy.samsung.net:8080)
     * Http: Proxy Strict SSL을 false로 설정해야 할 수도 있으나, 이는 보안상 권장되지 않으며 사내 IT 부서와 상의 후 진행하세요.
   * 사내 IT 지원팀에 정확한 프록시 주소 및 설정 방법 문의가 가장 확실합니다.
 * git push 시 "Updates were rejected because the tip of your current branch is behind its remote counterpart" 오류:
   * 원인: github.samsung.net의 코드가 로컬 코드보다 최신 버전인 경우입니다. 다른 곳에서 리포지토리에 푸시했거나, 리포지토리를 만들 때 README.md를 추가한 후 로컬에서 클론하지 않고 바로 푸시하려 할 때 발생할 수 있습니다.
   * 해결: git pull을 먼저 실행하여 원격의 최신 변경사항을 로컬로 가져온 후 다시 git push를 시도합니다.
     git pull origin main # 또는 git pull origin master (기본 브랜치 이름에 따라)
git push origin main
