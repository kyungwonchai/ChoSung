evExpress WPF 컨트롤을 사용하여 이전 코드에 맞춰 날짜와 라인 선택 기능을 구현한 수정된 코드입니다. DevExpress의 TreeListView와 DateEdit 컨트롤을 기반으로 작성되었습니다.

XAML 코드
xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 컨트롤 -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <dxg:GridControl x:Name="LineGridControl" AutoGenerateColumns="None">
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="IsChecked" Header="선택">
                        <dxg:GridColumn.EditSettings>
                            <dxe:CheckEditSettings />
                        </dxg:GridColumn.EditSettings>
                    </dxg:GridColumn>
                    <dxg:GridColumn FieldName="LineName" Header="라인 이름" />
                </dxg:GridControl.Columns>
                <dxg:GridControl.View>
                    <dxg:TreeListView AutoExpandAllNodes="True"
                                      KeyFieldName="ID"
                                      ParentFieldName="ParentID"
                                      ShowCheckBoxSelectorColumn="True"
                                      CheckBoxSelectorField="IsChecked" />
                </dxg:GridControl.View>
            </dxg:GridControl>

            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dxe:DateEdit x:Name="StartDateEdit" EditValueChanged="OnStartDateChanged"
                              DisplayFormat="g" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dxe:DateEdit x:Name="EndDateEdit" EditValueChanged="OnEndDateChanged"
                              DisplayFormat="g" />
            </StackPanel>

            <CheckBox x:Name="AutoRefreshCheckBox" Content="자동 갱신" Margin="0,20,0,10" />
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <TextBlock Grid.Column="1" Text="차트 영역 (구현 필요)" VerticalAlignment="Center" HorizontalAlignment="Center" />
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<LineInfo> LineData { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            InitializeDates();
            LoadLineData();
        }

        private void InitializeDates()
        {
            // 기본 날짜를 오늘의 08:00으로 설정
            StartDate = DateTime.Now.Date.AddHours(8);
            EndDate = DateTime.Now.Date.AddHours(8);

            StartDateEdit.EditValue = StartDate;
            EndDateEdit.EditValue = EndDate;
        }

        private void LoadLineData()
        {
            // 예제 데이터 로드
            LineData = new ObservableCollection<LineInfo>
            {
                new LineInfo { ID = 1, ParentID = 0, LineName = "Group A", IsChecked = true },
                new LineInfo { ID = 2, ParentID = 1, LineName = "Line 1", IsChecked = true },
                new LineInfo { ID = 3, ParentID = 1, LineName = "Line 2", IsChecked = true },
                new LineInfo { ID = 4, ParentID = 0, LineName = "Group B", IsChecked = true },
                new LineInfo { ID = 5, ParentID = 4, LineName = "Line 3", IsChecked = true },
                new LineInfo { ID = 6, ParentID = 4, LineName = "Line 4", IsChecked = true }
            };

            LineGridControl.ItemsSource = LineData;
        }

        private void OnStartDateChanged(object sender, RoutedEventArgs e)
        {
            if (StartDateEdit.EditValue is DateTime selectedDate)
            {
                // 선택된 날짜를 08:00으로 설정
                StartDate = selectedDate.Date.AddHours(8);
                Console.WriteLine($"시작 날짜 변경: {StartDate}");
            }
        }

        private void OnEndDateChanged(object sender, RoutedEventArgs e)
        {
            if (EndDateEdit.EditValue is DateTime selectedDate)
            {
                // 선택된 날짜를 08:00으로 설정
                EndDate = selectedDate.Date.AddHours(8);
                Console.WriteLine($"종료 날짜 변경: {EndDate}");
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = LineData.Where(line => line.IsChecked).Select(line => line.LineName).ToList();

            if (!selectedLines.Any())
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            Console.WriteLine($"조회: 라인={string.Join(",", selectedLines)}, 날짜={StartDate} ~ {EndDate}");
        }
    }

    public class LineInfo
    {
        public int ID { get; set; }
        public int ParentID { get; set; } // 부모 ID
        public string LineName { get; set; }
        public bool IsChecked { get; set; }
    }
}
주요 변경 사항
DevExpress 컨트롤 사용:

TreeListView: 라인 그룹과 라인을 트리 형태로 표시.
DateEdit: 날짜와 시간을 선택할 수 있는 컨트롤.
날짜 기본값 설정:

날짜 선택 시 08:00으로 설정.
EditValue를 통해 날짜와 시간을 동적으로 처리.
라인 데이터 계층화:

KeyFieldName과 ParentFieldName을 사용하여 트리 구조 생성.
IsChecked 속성으로 선택 상태 관리.
조회 버튼 동작:

선택된 라인과 날짜 범위를 콘솔에 출력.
실행 결과
라인 목록은 TreeListView에서 트리 구조로 표시되며 기본적으로 확장된 상태입니다.
날짜 선택은 DateEdit을 사용하며 시간은 항상 08:00으로 설정됩니다.