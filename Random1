아래는 기존 코드에 타이머와 작업 실행을 추가하고, 라인 IP와 내 IP를 얻는 부분 및 마지막 InspectionTime을 DB에서 가져오는 로직을 통합한 최종 코드입니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Net;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private System.Timers.Timer _timer;
        private List<string> _lineIPs; // 라인 IP 목록
        private string _myIP; // 내 IP
        private DateTime _lastInspectionTime; // 마지막 InspectionTime

        public MainWindow()
        {
            InitializeComponent();
            InitializeSystem();  // 시스템 초기화 (IP 및 DB 정보 가져오기)
            InitializeAutoTask(); // 타이머 설정 및 작업 자동 실행
        }

        /// <summary>
        /// 시스템 초기화: IP 및 DB 정보 가져오기
        /// </summary>
        private void InitializeSystem()
        {
            try
            {
                // 내 IP 가져오기
                _myIP = GetLocalIPAddress();
                AddLog($"내 IP: {_myIP}");

                // 라인 IP 목록 가져오기
                _lineIPs = GetLineIPsFromDB();
                AddLog($"라인 IP: {string.Join(", ", _lineIPs)}");

                // 마지막 InspectionTime 가져오기
                _lastInspectionTime = GetLastInspectionTimeFromDB();
                AddLog($"마지막 InspectionTime: {_lastInspectionTime:yyyy-MM-dd HH:mm:ss}");
            }
            catch (Exception ex)
            {
                AddLog($"시스템 초기화 실패: {ex.Message}");
            }
        }

        /// <summary>
        /// 타이머를 초기화하고 작업을 자동 실행합니다.
        /// </summary>
        private void InitializeAutoTask()
        {
            // 타이머 설정: 1분(60,000ms) 간격으로 실행
            _timer = new System.Timers.Timer(60000);
            _timer.Elapsed += async (s, e) => await ExecuteTaskAsync(); // 작업 실행
            _timer.AutoReset = true; // 반복 실행
            _timer.Enabled = true;   // 타이머 활성화

            // 프로그램 시작 시 작업 즉시 실행
            _ = ExecuteTaskAsync();
        }

        /// <summary>
        /// 작업을 비동기로 실행합니다.
        /// </summary>
        private async Task ExecuteTaskAsync()
        {
            try
            {
                AddLog("작업 시작");

                // 여기에 실제 작업 코드 추가
                await Task.Run(() =>
                {
                    foreach (var lineIP in _lineIPs)
                    {
                        // 라인 IP별 작업 처리 (예제)
                        Thread.Sleep(1000); // 예제 작업 대기
                        Debug.WriteLine($"라인 IP: {lineIP}, 작업 처리 중...");
                    }
                });

                AddLog("작업 완료");
            }
            catch (Exception ex)
            {
                AddLog($"작업 중 에러: {ex.Message}");
            }
        }

        /// <summary>
        /// 리스트박스에 로그를 추가하고, 20개까지만 유지합니다.
        /// </summary>
        private void AddLog(string message)
        {
            string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            Application.Current.Dispatcher.Invoke(() =>
            {
                ListBoxLogs.Items.Add(log);

                while (ListBoxLogs.Items.Count > 20)
                {
                    ListBoxLogs.Items.RemoveAt(0);
                }
            });

            Debug.WriteLine(log);
        }

        /// <summary>
        /// 내 로컬 IP를 가져옵니다.
        /// </summary>
        /// <returns>내 IP</returns>
        private string GetLocalIPAddress()
        {
            string localIP = null;
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    localIP = ip.ToString();
                    break;
                }
            }

            if (localIP == null)
                throw new Exception("로컬 IP를 가져올 수 없습니다.");

            return localIP;
        }

        /// <summary>
        /// DB에서 라인 IP 목록을 가져옵니다.
        /// </summary>
        /// <returns>라인 IP 목록</returns>
        private List<string> GetLineIPsFromDB()
        {
            var lineIPs = new List<string>();
            string connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var command = new SqlCommand("SELECT DISTINCT LineIP FROM LineTable", connection);
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        lineIPs.Add(reader.GetString(0));
                    }
                }
            }

            if (lineIPs.Count == 0)
                throw new Exception("라인 IP를 가져올 수 없습니다.");

            return lineIPs;
        }

        /// <summary>
        /// DB에서 마지막 InspectionTime을 가져옵니다.
        /// </summary>
        /// <returns>마지막 InspectionTime</returns>
        private DateTime GetLastInspectionTimeFromDB()
        {
            DateTime lastTime = DateTime.MinValue;
            string connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var command = new SqlCommand("SELECT MAX(InspectionTime) FROM YourTable", connection);
                var result = command.ExecuteScalar();
                if (result != DBNull.Value)
                {
                    lastTime = Convert.ToDateTime(result);
                }
            }

            return lastTime;
        }
    }
}
변경 및 추가된 기능
IP 정보 획득:

GetLocalIPAddress로 내 IP를 가져옵니다.
GetLineIPsFromDB로 데이터베이스에서 라인 IP 목록을 가져옵니다.
마지막 InspectionTime 가져오기:

GetLastInspectionTimeFromDB로 데이터베이스에서 가장 최신 InspectionTime을 조회합니다.
타이머 및 작업 실행:

1분 간격으로 작업을 반복 실행하며, 프로그램 시작 시 자동으로 첫 작업을 실행합니다.
리스트박스 로그 관리:

AddLog로 로그를 리스트박스에 추가하고, 20개까지만 유지합니다.
결과
리스트박스 출력 예시
yaml
코드 복사
2025-01-10 10:00:00 - 내 IP: 192.168.0.1
2025-01-10 10:00:01 - 라인 IP: 192.168.0.2, 192.168.0.3
2025-01-10 10:00:02 - 마지막 InspectionTime: 2025-01-09 18:00:00
2025-01-10 10:00:03 - 작업 시작
2025-01-10 10:00:08 - 작업 완료
디버그 출력
plaintext
코드 복사
2025-01-10 10:00:00 - 내 IP: 192.168.0.1
2025-01-10 10:00:01 - 라인 IP: 192.168.0.2, 192.168.0.3
2025-01-10 10:00:02 - 마지막 InspectionTime: 2025-01-09 18:00:00
2025-01-10 10:00:03 - 작업 시작
라인 IP: 192.168.0.2, 작업 처리 중...
라인 IP: 192.168.0.3, 작업 처리 중...