톤 패턴으로 ComPortClass를 사용해도 문제없습니다. 싱글톤 패턴에서 COM 포트를 안전하게 해제하는 방법은 거의 동일합니다. 다만, 싱글톤의 특성을 고려해 몇 가지 수정이 필요합니다. 다음은 싱글톤 패턴을 사용한 경우 안전하게 COM 포트를 해제하는 전문가 수준의 코드입니다.

1. ComPortClass (싱글톤 패턴 적용)
싱글톤 패턴을 사용하여 ComPortClass를 구현합니다. 여전히 IDisposable을 사용하고, 프로그램 종료 시 COM 포트를 해제할 수 있도록 합니다.

csharp
코드 복사
using System;
using System.IO.Ports;

public class ComPortClass : IDisposable
{
    private static ComPortClass _instance;
    private static readonly object _lock = new object();
    private SerialPort _serialPort;
    private bool _disposed = false;

    // 싱글톤 인스턴스 프로퍼티
    public static ComPortClass Instance
    {
        get
        {
            lock (_lock)
            {
                if (_instance == null)
                {
                    _instance = new ComPortClass();
                }
                return _instance;
            }
        }
    }

    // private 생성자
    private ComPortClass()
    {
        // SerialPort 객체 초기화
        _serialPort = new SerialPort("COM1", 9600);
        _serialPort.Open();
    }

    // 포트 해제 메서드
    public void ClosePort()
    {
        if (_serialPort != null && _serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    // IDisposable 구현
    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // 관리되는 리소스 해제
                ClosePort();
                _serialPort.Dispose();
            }
            _disposed = true;
        }
    }

    // 소멸자
    ~ComPortClass()
    {
        Dispose(false);
    }
}
2. MainViewModel에서 ComPortClass 사용
MainViewModel에서는 싱글톤 인스턴스를 가져와 사용하고, 종료 시 안전하게 해제할 수 있도록 설정합니다.

csharp
코드 복사
using System;
using System.Windows;

public class MainViewModel
{
    private ComPortClass _comPort;

    public MainViewModel()
    {
        // 싱글톤 인스턴스 가져오기
        _comPort = ComPortClass.Instance;

        // Application 종료 이벤트 구독
        Application.Current.Exit += OnApplicationExit;
        AppDomain.CurrentDomain.ProcessExit += OnProcessExit;
    }

    // Application 종료 시 호출되는 메서드
    private void OnApplicationExit(object sender, ExitEventArgs e)
    {
        DisposeComPort();
    }

    // 강제 종료 시 호출되는 메서드
    private void OnProcessExit(object sender, EventArgs e)
    {
        DisposeComPort();
    }

    // COM 포트 인스턴스 해제 메서드
    private void DisposeComPort()
    {
        if (_comPort != null)
        {
            _comPort.Dispose();
        }
    }
}
3. 설명
싱글톤 인스턴스 관리: Instance 프로퍼티를 통해 클래스의 유일한 인스턴스를 가져오며, 멀티스레드 환경에서도 안전하게 동작하도록 lock을 사용합니다.
종료 이벤트 구독: 이전과 동일하게 Application.Current.Exit와 AppDomain.CurrentDomain.ProcessExit 이벤트를 구독하여 프로그램이 종료될 때 COM 포트를 안전하게 해제합니다.