아래는 전체적인 C# WinForm 애플리케이션의 구조를 설명하는 코드입니다. 이 코드는 MSSQL과 Oracle DB 간의 데이터 동기화와 매칭되지 않은 사용자 정보를 수동으로 관리할 수 있는 GridControl을 포함합니다.

먼저 MSSQL과 Oracle에서 데이터를 비동기로 가져오는 클래스를 만들고, 이를 지속적으로 실행하도록 합니다. 그런 다음, 매칭되지 않은 사용자 정보를 보여주고 관리할 수 있는 GridControl을 구현합니다.

데이터 동기화 클래스 (비동기 작업 및 지속 실행):
csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;
using Oracle.ManagedDataAccess.Client;

public class DataSync
{
    private string sourceConnectionString = "Data Source=SourceServer;Initial Catalog=SourceDB;User ID=YourUsername;Password=YourPassword";
    private string targetConnectionString = "Data Source=TargetServer;Initial Catalog=TargetDB;User ID=YourUsername;Password=YourPassword";
    private string oracleConnectionString = "Data Source=OracleServer;User ID=YourUsername;Password=YourPassword";

    public async Task SyncDataAsync()
    {
        while (true)
        {
            DataTable sourceData = await GetSourceDataAsync();
            DataTable targetData = await GetTargetDataAsync();

            foreach (DataRow sourceRow in sourceData.Rows)
            {
                DataRow[] targetRows = targetData.Select($"E_NUM = '{sourceRow["E_NUM"]}'");

                if (targetRows.Length == 0)
                {
                    await InsertRowAsync(sourceRow);
                }
                else
                {
                    await UpdateRowAsync(sourceRow, targetRows[0]);
                }
            }

            // Delay for a certain interval before next sync
            await Task.Delay(TimeSpan.FromMinutes(10));
        }
    }

    private async Task<DataTable> GetSourceDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(sourceConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM ESD_USER_INFO WHERE PROCESS LIKE '%REPAIR%'";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private async Task<DataTable> GetTargetDataAsync()
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT PROCESS, GROUP_NAME, USER_NAME, E_NUM FROM 테이블B";
            SqlDataAdapter adapter = new SqlDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }

    private async Task InsertRowAsync(DataRow sourceRow)
    {
        using (SqlConnection conn = new SqlConnection(targetConnectionString))
        {
            await conn.OpenAsync();
            string query = "INSERT INTO 테이블B (PROCESS, GROUP_NAME, USER_NAME, E_NUM) VALUES (@PROCESS, @GROUP_NAME, @USER_NAME, @E_NUM)";
            SqlCommand cmd = new SqlCommand(query, conn);
            cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
            cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
            cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
            cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
            await cmd.ExecuteNonQueryAsync();
        }
    }

    private async Task UpdateRowAsync(DataRow sourceRow, DataRow targetRow)
    {
        bool isDifferent = !sourceRow["PROCESS"].Equals(targetRow["PROCESS"]) ||
                           !sourceRow["GROUP_NAME"].Equals(targetRow["GROUP_NAME"]) ||
                           !sourceRow["USER_NAME"].Equals(targetRow["USER_NAME"]);

        if (isDifferent)
        {
            using (SqlConnection conn = new SqlConnection(targetConnectionString))
            {
                await conn.OpenAsync();
                string query = "UPDATE 테이블B SET PROCESS = @PROCESS, GROUP_NAME = @GROUP_NAME, USER_NAME = @USER_NAME WHERE E_NUM = @E_NUM";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@PROCESS", sourceRow["PROCESS"]);
                cmd.Parameters.AddWithValue("@GROUP_NAME", sourceRow["GROUP_NAME"]);
                cmd.Parameters.AddWithValue("@USER_NAME", sourceRow["USER_NAME"]);
                cmd.Parameters.AddWithValue("@E_NUM", sourceRow["E_NUM"]);
                await cmd.ExecuteNonQueryAsync();
            }
        }
    }

    public async Task<DataTable> GetOracleUserDataAsync()
    {
        using (OracleConnection conn = new OracleConnection(oracleConnectionString))
        {
            await conn.OpenAsync();
            string query = "SELECT USER_NAME, USER_CARD_ID FROM OracleUserTable";
            OracleDataAdapter adapter = new OracleDataAdapter(query, conn);
            DataTable dataTable = new DataTable();
            adapter.Fill(dataTable);
            return dataTable;
        }
    }
}
WinForm UI 및 GridControl 구현:
csharp
코드 복사
using System;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

public partial class Form1 : Form
{
    private DataSync dataSync;

    public Form1()
    {
        InitializeComponent();
        dataSync = new DataSync();
        Task.Run(() => dataSync.SyncDataAsync());
        LoadGridControl();
    }

    private async void LoadGridControl()
    {
        DataTable sourceData = await dataSync.GetSourceDataAsync();
        DataTable oracleData = await dataSync.GetOracleUserDataAsync();

        var unmatchedRows = from source in sourceData.AsEnumerable()
                            join oracle in oracleData.AsEnumerable()
                            on source.Field<string>("USER_NAME") equals oracle.Field<string>("USER_NAME") into tempJoin
                            from subOracle in tempJoin.DefaultIfEmpty()
                            select new
                            {
                                USER_NAME = source.Field<string>("USER_NAME"),
                                USER_CARD_ID = subOracle == null ? "Not Matched" : subOracle.Field<string>("USER_CARD_ID"),
                                E_NUM = source.Field<string>("E_NUM"),
                                PROCESS = source.Field<string>("PROCESS"),
                                GROUP_NAME = source.Field<string>("GROUP_NAME")
                            };

        dataGridView1.DataSource = unmatchedRows.ToList();

        foreach (DataGridViewRow row in dataGridView1.Rows)
        {
            if (row.Cells["USER_CARD_ID"].Value.ToString() == "Not Matched")
            {
                row.DefaultCellStyle.BackColor = System.Drawing.Color.Red;
            }
        }
    }

    private void dataGridView1_CellEndEdit(object sender, DataGridViewCellEventArgs e)
    {
        if (dataGridView1.Columns[e.ColumnIndex].Name == "USER_CARD_ID")
        {
            string userName = dataGridView1.Rows[e.RowIndex].Cells["USER_NAME"].Value.ToString();
            string userCardId = dataGridView1.Rows[e.RowIndex].Cells["USER_CARD_ID"].Value.ToString();

            // Handle manual input for USER_CARD_ID
            // For example, you might update a local list or another table in the database.
        }
    }
}
이 코드에서는 다음을 구현합니다:

DataSync 클래스를 통해 MSSQL과 Oracle 데이터베이스 간의 데이터 동기화를 비동기로 수행.
WinForm UI에 GridControl을 추가하여 사용자 데이터를 표시하고, 매칭되지 않은 사용자 정보를 빨간색으로 표시.
사용자가 USER_CARD_ID를 수동으로 입력할 수 있도록 GridControl의 CellEndEdit 이벤트를 처리.
이 코드를 통해 데이터 동기화와 수동 매칭 관리가 모두 가능한 WinForm 애플리케이션을 만들 수 있습니다. 추가로, 실제 환경에서는 예외 처리, 트랜잭션 관리, 성능 최적화 등을