이제 **클린(대기열 비우기)**와 리쥼(특정 행부터 재개) 관련된 함수가 필요합니다. 말씀하신 클린과 리쥼 기능을 구현하기 위해서는 다음과 같이 추가할 수 있습니다:

클린(Clean): 작업 대기열을 모두 삭제하는 기능입니다.
리쥼(ResumeTasks): 특정 행 이후의 작업을 다시 시작하는 기능입니다.
수정된 코드
1. TaskQueue Class (ClearQueue 및 ResumeTask 추가)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하는 역할을 담당합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false;

    /// <summary>
    /// 작업을 큐에 추가하고 순차적으로 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);

        // 현재 작업이 실행 중이 아니면, 작업 실행 시작
        if (!_isRunning)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 큐의 다음 작업을 실행하는 메서드
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0)
        {
            _isRunning = false;
            return;
        }

        _isRunning = true; // 작업이 실행 중
        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행

        _isRunning = false; // 작업 완료
        if (_tasks.Count > 0)
        {
            RunNextTask(); // 다음 작업 실행
        }
    }

    /// <summary>
    /// 현재 작업 큐를 비웁니다. (모든 작업을 삭제)
    /// </summary>
    public void ClearQueue()
    {
        _tasks.Clear();
    }
}
설명:
EnqueueTask: 작업을 큐에 추가하고, 작업이 실행 중이 아니면 바로 시작합니다.
RunNextTask: 큐에 있는 다음 작업을 실행합니다.
ClearQueue: 현재 남아있는 모든 작업을 삭제하고 작업 대기열을 비웁니다.
2. MainViewModel Class (ResumeTasks 및 CleanQueue 기능 추가)
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // 작업 목록 (TaskModel 리스트)
    public ObservableCollection<TaskModel> TaskList { get; set; }

    private TaskQueue _taskQueue;

    // 명령어 정의 (클린/리쥼)
    public ICommand CleanQueueCommand { get; }
    public ICommand ResumeTasksCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();  // TaskQueue 인스턴스 생성

        // 작업 목록 초기화
        TaskList = new ObservableCollection<TaskModel>
        {
            new TaskModel(new LogEntry { MAG_NO = "MAG001", PO_NO = "PO12345" }, _taskQueue),
            new TaskModel(new LogEntry { MAG_NO = "MAG002", PO_NO = "PO67890" }, _taskQueue)
        };

        // 클린 명령어 (대기열 비우기)
        CleanQueueCommand = new RelayCommand(CleanQueue);
        
        // 리쥼 명령어 (특정 행 이후부터 작업 재개)
        ResumeTasksCommand = new RelayCommand<TaskModel>(ResumeTasksFrom);
    }

    /// <summary>
    /// 작업 큐 비우기 (모든 작업 삭제)
    /// </summary>
    private void CleanQueue()
    {
        _taskQueue.ClearQueue();
    }

    /// <summary>
    /// 특정 행 이후부터 작업을 다시 시작 (DataGrid에서 Resume 버튼 누를 때 호출)
    /// </summary>
    public void ResumeTasksFrom(TaskModel selectedTask)
    {
        int startIndex = TaskList.IndexOf(selectedTask); // 시작할 행의 인덱스

        // 작업 큐를 비워서 이전 작업을 모두 삭제
        _taskQueue.ClearQueue();

        // 선택된 행부터 남은 작업들을 다시 대기열에 추가
        for (int i = startIndex; i < TaskList.Count; i++)
        {
            var task = TaskList[i];
            task.ResumeTask();  // 해당 행부터 작업 재개
        }
    }
}
설명:
CleanQueue: 대기열을 모두 삭제하는 명령어로, **ClearQueue()**를 호출합니다.
ResumeTasksFrom: 특정 행 이후의 작업을 다시 실행하며, ResumeTasksCommand와 연결됩니다.
3. XAML (Resume 및 Clean 버튼 연결)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="800">
    <Grid>
        <!-- DataGrid to display TaskModels -->
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- MAG_NO Column -->
                <DataGridTextColumn Header="MAG_NO" Binding="{Binding MAG_NO}" Width="*" />
                
                <!-- PO_NO Column -->
                <DataGridTextColumn Header="PO_NO" Binding="{Binding PO_NO}" Width="*" />

                <!-- 상태 표시 -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />

                <!-- Resume 버튼 -->
                <DataGridTemplateColumn Header="Resume">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Resume" 
                                    Command="{Binding DataContext.ResumeTasksCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                    CommandParameter="{Binding}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 작업 큐 비우기 (Clean 버튼) -->
        <Button Content="Clear Queue" Command="{Binding CleanQueueCommand}" Width="100" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="10" />

    </Grid>
</Window>
설명:
Resume 버튼은 각 행마다 존재하고, 특정 행의 Resume 버튼을 누르면 해당 행 이후의 작업이 다시 실행됩니다.
Clean Queue 버튼은 대기 중인 작업을 모두 삭제하는 명령어와 연결되어, 기존 작업을 날릴 수 있습니다.
최종 요약:
CleanQueue는 대기 중인 모든 작업을 삭제합니다.
ResumeTasksFrom는 특정 행부터 작업을 다시 시작하며, 이전의 작업은 무시됩니다.
Resume 버튼은 각 행마다 존재하며, 버튼을 누르면 해당 행 이후의 작업이 다시 실행됩니다.
TaskQueue는 작업 대기열을 관리하며, 작업이 완료될 때마다 다음 작업을 실행합니다.
이제 원하는 대로 작업을 관리할 수 있는 구조로, 작업을 초기화하고 특정 행부터 작업을 재개할 수 있습니다