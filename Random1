책을 제시하겠습니다.

DevExpress의 ItemClick 이벤트는 기본적으로 마우스 왼쪽 클릭을 감지합니다. 하지만 우클릭을 감지하려면 MouseDown 이벤트를 사용하여 직접적으로 마우스 버튼을 확인하는 방법을 사용해야 합니다.

MouseDown 이벤트는 RibbonControl의 아이템에 바로 적용되지 않기 때문에, 우클릭을 감지하는 방법을 좀 더 구체적으로 처리해야 합니다.

해결 방법: MouseDown 이벤트를 사용하여 우클릭 감지
리본 항목 자체에 마우스 우클릭을 직접 감지하기 위해 MouseDown 이벤트를 활용하여 정확하게 우클릭을 인식하도록 하겠습니다.

최종 코드:
csharp
코드 복사
private void ribbonControl1_MouseDown(object sender, MouseEventArgs e)
{
    // 우클릭 했을 때만 처리
    if (e.Button == MouseButtons.Right)
    {
        // 클릭된 위치에서 RibbonHitInfo를 가져옴
        RibbonHitInfo hitInfo = ribbonControl1.CalcHitInfo(e.Location);

        // 클릭된 위치가 리본 항목인지 확인
        if (hitInfo.HitTest == RibbonHitTest.Item && hitInfo.ItemLink != null)
        {
            BarItem clickedItem = hitInfo.ItemLink.Item;

            // 클릭된 항목이 BarButtonItem인지 확인
            if (clickedItem is BarButtonItem)
            {
                // 우클릭이므로 팝업 메뉴를 표시
                addMenuPopup.ShowPopup(Control.MousePosition);
            }
        }
    }
}
코드 설명:
MouseDown 이벤트에서 우클릭을 확인:

e.Button == MouseButtons.Right로 마우스 오른쪽 버튼이 클릭되었는지 확인합니다.
RibbonHitInfo로 클릭된 위치 확인:

ribbonControl1.CalcHitInfo(e.Location)을 사용해 클릭된 위치의 정보를 가져옵니다.
클릭된 위치가 리본 항목인 경우:

hitInfo.HitTest == RibbonHitTest.Item을 통해 클릭된 위치가 리본 항목인지 확인합니다.
hitInfo.ItemLink를 통해 실제 클릭된 BarItem을 가져옵니다.
BarButtonItem 확인 후 팝업 메뉴 표시:

클릭된 항목이 BarButtonItem일 경우에만 팝업 메뉴를 표시하도록 설정했습니다.
전체 코드:
csharp
코드 복사
public partial class MainForm : DevExpress.XtraBars.Ribbon.RibbonForm
{
    RibbonPage myMenuPage;
    RibbonPageGroup myMenuGroup;
    PopupMenu addMenuPopup;

    public MainForm()
    {
        InitializeComponent();

        // MyMenu 초기화
        InitializeMyMenu();

        // PopupMenu 초기화 (우클릭 팝업 메뉴)
        InitializeAddMenuPopup();

        // 리본의 MouseDown 이벤트 핸들러 등록
        ribbonControl1.MouseDown += ribbonControl1_MouseDown;
    }

    // MyMenu 초기화
    private void InitializeMyMenu()
    {
        myMenuPage = new RibbonPage("MyMenu");
        ribbonControl1.Pages.Insert(0, myMenuPage);

        myMenuGroup = new RibbonPageGroup("MyMenu 항목");
        myMenuPage.Groups.Add(myMenuGroup);

        LoadMyMenuItems();
    }

    // PopupMenu 초기화
    private void InitializeAddMenuPopup()
    {
        addMenuPopup = new PopupMenu();
        BarButtonItem addToMyMenuButton = new BarButtonItem(ribbonControl1.Manager, "MyMenu에 추가");
        addToMyMenuButton.ItemClick += AddToMyMenuButton_ItemClick;
        addMenuPopup.ItemLinks.Add(addToMyMenuButton);
    }

    // 리본 버튼 우클릭 시 팝업 메뉴 표시
    private void ribbonControl1_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            // 클릭된 위치에서 RibbonHitInfo 정보를 가져옴
            RibbonHitInfo hitInfo = ribbonControl1.CalcHitInfo(e.Location);

            // 클릭된 위치가 리본 항목인지 확인
            if (hitInfo.HitTest == RibbonHitTest.Item && hitInfo.ItemLink != null)
            {
                BarItem clickedItem = hitInfo.ItemLink.Item;

                // 클릭된 항목이 BarButtonItem인지 확인
                if (clickedItem is BarButtonItem)
                {
                    // 팝업 메뉴를 현재 마우스 위치에 표시
                    addMenuPopup.ShowPopup(Control.MousePosition);
                }
            }
        }
    }

    // "MyMenu에 추가" 버튼 클릭 시 MyMenu에 항목 추가
    private void AddToMyMenuButton_ItemClick(object sender, ItemClickEventArgs e)
    {
        BarButtonItem clickedItem = e.Item as BarButtonItem;

        if (clickedItem != null)
        {
            BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, clickedItem.Caption);
            newMenuItem.ItemClick += MyMenuItem_ItemClick;
            myMenuGroup.ItemLinks.Add(newMenuItem);

            SaveMyMenuItems();
        }
    }

    // MyMenu 항목 클릭 처리
    private void MyMenuItem_ItemClick(object sender, ItemClickEventArgs e)
    {
        BarButtonItem clickedItem = e.Item as BarButtonItem;
        MessageBox.Show($"'{clickedItem.Caption}' 항목이 클릭되었습니다!", "MyMenu 클릭");
    }

    // MyMenu 항목 저장
    private void SaveMyMenuItems()
    {
        List<string> menuItems = new List<string>();
        foreach (BarItemLink item in myMenuGroup.ItemLinks)
        {
            menuItems.Add(item.Caption);
        }

        string json = JsonConvert.SerializeObject(menuItems);
        File.WriteAllText("MyMenuState.json", json);
    }

    // MyMenu 항목 불러오기
    private void LoadMyMenuItems()
    {
        if (File.Exists("MyMenuState.json"))
        {
            string json = File.ReadAllText("MyMenuState.json");
            List<string> menuItems = JsonConvert.DeserializeObject<List<string>>(json);

            foreach (string caption in menuItems)
            {
                BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, caption);
                newMenuItem.ItemClick += MyMenuItem_ItemClick;
                myMenuGroup.ItemLinks.Add(newMenuItem);
            }
        }
    }
}
최종 결론:
MouseDown 이벤트를 사용하여 우클릭을 직접 감지하는 방식으로 처리합니다.