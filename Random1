Forms 어플리케이션 예제를 다시 작성해보겠습니다. 이번에는 DataGrid의 DataTemplate 컬럼을 생성하는 로직을 포함하겠습니다.
C# WinForms 코드

csharp

using System;
using System.Data.SqlClient;
using System.Text;
using System.Windows.Forms;

namespace XAMLGenerator
{
    public partial class MainForm : Form
    {
        public MainForm()
        {
            InitializeComponent();
        }

        private void GenerateButton_Click(object sender, EventArgs e)
        {
            StringBuilder xamlCode = new StringBuilder();

            // 기본 XAML 코드 시작
            xamlCode.AppendLine("<DataGrid x:Name=\"dataGrid1\" AutoGenerateColumns=\"False\" CanUserAddRows=\"False\">");

            // MSSQL 2014에 연결
            string connString = @"Data Source=YOUR_SERVER;Initial Catalog=YOUR_DB;User ID=YOUR_ID;Password=YOUR_PASSWORD";
            using (SqlConnection conn = new SqlConnection(connString))
            {
                conn.Open();
                SqlCommand cmd = new SqlCommand("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'YourTable'", conn);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read())
                {
                    string colName = reader.GetString(0);
                    xamlCode.AppendLine("    <DataGridTemplateColumn Header=\"" + colName + "\">");
                    xamlCode.AppendLine("        <DataGridTemplateColumn.CellTemplate>");
                    xamlCode.AppendLine("            <DataTemplate>");
                    xamlCode.AppendLine("                <TextBox Text=\"{Binding " + colName + ", Mode=TwoWay}\"/>");
                    xamlCode.AppendLine("            </DataTemplate>");
                    xamlCode.AppendLine("        </DataGridTemplateColumn.CellTemplate>");
                    xamlCode.AppendLine("    </DataGridTemplateColumn>");
                }
            }

            // 기본 XAML 코드 끝
            xamlCode.AppendLine("</DataGrid>");

            // XAML 코드를 TextBox에 표시
            textBox1.Text = xamlCode.ToString();
        }
    }
}

WinForms 디자인 코드 (예시)

csharp

private System.Windows.Forms.Button GenerateButton;
private System.Windows.Forms.TextBox textBox1;

public MainForm()
{
    InitializeComponent();

    this.GenerateButton = new System.Windows.Forms.Button();
    this.textBox1 = new System.Windows.Forms.TextBox();

    // GenerateButton
    this.GenerateButton.Location = new System.Drawing.Point(13, 13);
    this.GenerateButton.Name = "GenerateButton";
    this.GenerateButton.Size = new System.Drawing.Size(75, 23);
    this.GenerateButton.TabIndex = 0;
    this.GenerateButton.Text = "Generate";
    this.GenerateButton.UseVisualStyleBackColor = true;
    this.GenerateButton.Click += new System.EventHandler(this.GenerateButton_Click);

    // TextBox1
    this.textBox1.Location = new System.Drawing.Point(13, 43);
    this.textBox1.Multiline = true;
    this.textBox1.Name = "textBox1";
    this.textBox1.Size = new System.Drawing.Size(775, 395);
    this.textBox1.TabIndex = 1;

    // MainForm
    this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
    this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
    this.ClientSize = new System.Drawing.Size(800, 450);
    this.Controls.Add(this.textBox1);
    this.Controls.Add(this.GenerateButton);
    this.Name = "MainForm";
    this.Text = "XAML Generator";
    this.ResumeLayout(false);
    this.PerformLayout();
}

이 예제에서 GenerateButton_Click 메서드가 버튼을 클릭하면 실행되는 로직입니다. 이 로직은 SQL Server에 연결하여 테이블의 컬럼 정보를 읽어와 동적으로 XAML 코드를 생성합니다. 생성된 XAML 코드는 textBox1에 출