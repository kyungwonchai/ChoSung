으로 업데이트하고 Dispatcher를 사용하여 UI를 부드럽게 갱신하는 코드를 포함한 MainWindow.xaml.cs와 StatusIndicator.xaml.cs 파일을 다시 제공하겠습니다. 각 줄마다 주석을 추가하여 이해를 돕겠습니다.

MainWindow.xaml.cs
MainWindow.xaml.cs

csharp
코드 복사
using System;
using System.Windows;
using RouterFlowSync.ViewModel;
using RouterFlowSync.Communication;
using RouterFlowSync.Logging;
using System.Windows.Media;

namespace RouterFlowSync
{
    public partial class MainWindow : Window
    {
        // MainViewModel 인스턴스
        private MainViewModel _viewModel;
        // 각 통신 클래스 인스턴스
        private PlcCommunication _plcCommunication;
        private SocketCommunication _socketCommunication;
        private VirtualComPortCommunication _virtualComPortCommunication;
        private FileWatcher _fileWatcher;

        // 생성자
        public MainWindow()
        {
            InitializeComponent(); // XAML 초기화
            _viewModel = new MainViewModel(); // MainViewModel 초기화
            DataContext = _viewModel; // DataContext 설정

            _plcCommunication = new PlcCommunication("COM1", 9600, _viewModel); // PLC 통신 초기화
            _socketCommunication = new SocketCommunication("127.0.0.1", 8080, _viewModel); // 소켓 통신 초기화
            _virtualComPortCommunication = new VirtualComPortCommunication("COM2", 9600, _viewModel); // 가상 COM 포트 통신 초기화

            string watchedFolder = @"C:\watchedFolder"; // 파일 감시 폴더 경로
            if (!System.IO.Directory.Exists(watchedFolder)) // 폴더 존재 여부 확인
            {
                _viewModel.AddLog("파일 감시 폴더가 존재하지 않습니다: " + watchedFolder, Brushes.Red); // 폴더 없음 로그 추가
                _viewModel.FileWatcherStatus.StatusColor = Brushes.Red; // 상태 색상 설정
                UpdateStatusIndicator(_viewModel.FileWatcherStatus.StatusColor); // UI 업데이트
            }
            else
            {
                _fileWatcher = new FileWatcher(_viewModel, watchedFolder); // FileWatcher 초기화
                _viewModel.FileWatcherStatus.StatusColor = Brushes.Green; // 상태 색상 설정
            }

            _plcCommunication.Connect(); // PLC 통신 연결 시도
            if (!_plcCommunication.IsConnected) // 연결 실패 시
            {
                _viewModel.AddLog("PLC 통신 연결 실패", Brushes.Red); // 로그 추가
                _viewModel.PlcStatus.StatusColor = Brushes.Red; // 상태 색상 설정
                UpdateStatusIndicator(_viewModel.PlcStatus.StatusColor); // UI 업데이트
            }
            else // 연결 성공 시
            {
                _viewModel.PlcStatus.StatusColor = Brushes.Green; // 상태 색상 설정
            }

            _socketCommunication.Connect(); // 소켓 통신 연결 시도
            if (!_socketCommunication.IsConnected) // 연결 실패 시
            {
                _viewModel.AddLog("소켓 통신 연결 실패", Brushes.Red); // 로그 추가
                _viewModel.SocketStatus.StatusColor = Brushes.Red; // 상태 색상 설정
                UpdateStatusIndicator(_viewModel.SocketStatus.StatusColor); // UI 업데이트
            }
            else // 연결 성공 시
            {
                _viewModel.SocketStatus.StatusColor = Brushes.Green; // 상태 색상 설정
            }

            _virtualComPortCommunication.Connect(); // 가상 COM 포트 통신 연결 시도
            if (!_virtualComPortCommunication.IsConnected) // 연결 실패 시
            {
                _viewModel.AddLog("가상 COM 포트 통신 연결 실패", Brushes.Red); // 로그 추가
                _viewModel.ComPortStatus.StatusColor = Brushes.Red; // 상태 색상 설정
                UpdateStatusIndicator(_viewModel.ComPortStatus.StatusColor); // UI 업데이트
            }
            else // 연결 성공 시
            {
                _viewModel.ComPortStatus.StatusColor = Brushes.Green; // 상태 색상 설정
            }

            Application.Current.Exit += new ExitEventHandler(OnApplicationExit); // 프로그램 종료 이벤트 등록
        }

        // 프로그램 종료 시 로그를 기록하는 메서드
        private void OnApplicationExit(object sender, ExitEventArgs e)
        {
            Logger.LogInfo("프로그램이 종료됩니다."); // 프로그램 종료 로그 기록
        }

        // 라디오 버튼 체크 이벤트 처리기
        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            if (_viewModel == null) return;  // 뷰모델이 초기화되지 않았을 경우 예외 처리

            var radioButton = sender as RadioButton; // 라디오 버튼 인스턴스 가져오기
            string filter = radioButton.Content.ToString(); // 필터 텍스트 가져오기

            // Null 체크 후 Logs 초기화
            if (_viewModel.Logs == null)
            {
                _viewModel.Logs = new System.Collections.ObjectModel.ObservableCollection<RouterFlowSync.ViewModel.LogEntry>(); // Logs 초기화
            }
            else
            {
                _viewModel.Logs.Clear(); // Logs 초기화
            }

            // 선택된 필터에 따라 로그를 필터링
            foreach (var log in Logger.GetLogs())
            {
                if (filter == "전체 로그" ||
                    (filter == "에러 로그" && log.Message.Contains("[ERROR]")) ||
                    (filter == "정보 로그" && log.Message.Contains("[INFO]")))
                {
                    _viewModel.AddLog(log.Message, log.Foreground); // 필터에 맞는 로그 추가
                }
            }
        }

        // 상태 인디케이터 색상을 업데이트하는 메서드
        private void UpdateStatusIndicator(Brush color)
        {
            Dispatcher.Invoke(() =>
            {
                this.Background = color; // 배경 색상 업데이트
            });
        }
    }
}
StatusIndicator.xaml.cs
StatusIndicator.xaml.cs

csharp
코드 복사
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace RouterFlowSync.Controls
{
    public partial class StatusIndicator : UserControl
    {
        public StatusIndicator()
        {
            InitializeComponent(); // XAML 초기화
            UpdateGradient(); // 초기화 시 색상 업데이트 메서드 호출
        }

        // 램프 깜빡이기 시작 메서드
        public void StartBlinking()
        {
            Storyboard storyboard = (Storyboard)this.Resources["BlinkStoryboard"]; // 스토리보드 가져오기
            storyboard.Begin(); // 스토리보드 시작
        }

        // 램프 깜빡이기 중지 메서드
        public void StopBlinking()
        {
            Storyboard storyboard = (Storyboard)this.Resources["BlinkStoryboard"]; // 스토리보드 가져오기
            storyboard.Stop(); // 스토리보드 중지
        }

        // 색상 업데이트 메서드
        private void UpdateGradient()
        {
            var gradientBrush = new LinearGradientBrush(); // 그라데이션 브러시 생성
            gradientBrush.GradientStops.Add(new GradientStop(Colors.LightGreen, 0.0)); // 그라데이션 시작 색상
            gradientBrush.GradientStops.Add(new GradientStop(Colors.DarkGreen, 1.0)); // 그라데이션 끝 색상
            IndicatorBorder.Background = gradientBrush; // 그라데이션 색상 적용
        }
    }
}
이제 MainWindow.xaml.cs와 StatusIndicator.xaml.cs 파일에 각 줄마다 상세한 한글 주석을 추가하였으며, Dispatcher를 사용하여 UI 색상이 실시간으로 변경되도록 하였습니다. 이 파일들을 사용하여 프로젝트를 수정해 보시기 바