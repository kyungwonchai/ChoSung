ataActivity를 별도의 팝업이 아닌 메인 화면에서 그대로 사용할 계획이라면, 팝업 형태의 Activity를 사용하지 않고, 메인 액티비티에 프래그먼트를 추가하거나 메인 액티비티의 레이아웃을 변경하여 원하는 UI를 구현하는 것이 좋습니다. 이 방법을 통해 DataActivity의 내용이 메인 화면에 직접 표시되도록 합니다.

방법 1: 메인 액티비티에 프래그먼트를 사용하는 방법
프래그먼트를 사용하면 동적으로 화면을 변경할 수 있으며, 데이터와 UI를 쉽게 공유할 수 있습니다. 아래는 메인 액티비티에 DataFragment를 추가하는 방법입니다.

1. DataFragment 만들기
DataFragment를 만들어, 기존 DataActivity에서 사용하던 UI와 로직을 그대로 사용합니다.

DataFragment.kt
kotlin
코드 복사
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.DividerItemDecoration
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.microsoft.signalr.HubConnection
import com.microsoft.signalr.HubConnectionBuilder
import com.microsoft.signalr.HubConnectionState
import kotlinx.coroutines.*

class DataFragment : Fragment() {

    private lateinit var hubConnection: HubConnection
    private lateinit var connectionStatusTextView: TextView
    private lateinit var recyclerView: RecyclerView
    private var reconnectJob: Job? = null
    private val mainHandler = Handler(Looper.getMainLooper())

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Fragment의 레이아웃 인플레이트
        return inflater.inflate(R.layout.fragment_data, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // TextView와 RecyclerView 초기화
        connectionStatusTextView = view.findViewById(R.id.connectionStatusTextView)
        recyclerView = view.findViewById(R.id.recyclerView)

        setupRecyclerView()
        initializeSignalR()
    }

    private fun setupRecyclerView() {
        // RecyclerView 설정
        recyclerView.layoutManager = LinearLayoutManager(requireContext())
        recyclerView.addItemDecoration(DividerItemDecoration(requireContext(), DividerItemDecoration.VERTICAL))

        // 예제 데이터 설정
        val dataList = listOf(
            TableData("Column1", "Column2", "Column3", "Column4"),
            TableData("Data1", "Data2", "Data3", "Data4")
        )

        val adapter = TableAdapter(dataList)
        recyclerView.adapter = adapter
    }

    private fun initializeSignalR() {
        hubConnection = HubConnectionBuilder.create("https://your-signalr-server-address")
            .build()

        // 수신 이벤트 설정
        hubConnection.on("ReceiveMessage1", { message: String ->
            Log.d("SignalR", "Message 1 received: $message")
            // 메시지 1 처리 로직
        }, String::class.java)

        hubConnection.on("ReceiveMessage2", { message: String ->
            Log.d("SignalR", "Message 2 received: $message")
            // 메시지 2 처리 로직
        }, String::class.java)

        hubConnection.on("ReceiveMessage3", { message: String ->
            Log.d("SignalR", "Message 3 received: $message")
            // 메시지 3 처리 로직
        }, String::class.java)

        startConnection()
    }

    private fun startConnection() {
        updateConnectionStatus("연결 시도 중...", "#FFA500") // 주황색

        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            try {
                hubConnection.start().blockingAwait()
                updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                reconnectJob?.cancel()
            } catch (e: Exception) {
                Log.e("SignalR", "Connection failed, retrying...", e)
                updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                retryConnection()
            }
        }

        hubConnection.onClosed {
            Log.e("SignalR", "Connection closed, retrying...")
            updateConnectionStatus("SignalR 연결 끊김 - 재시도 중...", "#FF0000") // 빨간색
            retryConnection()
        }
    }

    private fun retryConnection() {
        reconnectJob?.cancel()
        reconnectJob = CoroutineScope(Dispatchers.IO).launch {
            while (hubConnection.connectionState != HubConnectionState.CONNECTED) {
                try {
                    delay(2000) // 2초 대기 후 재연결 시도
                    hubConnection.start().blockingAwait()
                    updateConnectionStatus("SignalR 연결됨", "#008000") // 녹색
                } catch (e: Exception) {
                    Log.e("SignalR", "Reconnection attempt failed", e)
                    updateConnectionStatus("SignalR 연결 실패 - 재시도 중...", "#FF0000") // 빨간색
                }
            }
        }
    }

    private fun updateConnectionStatus(status: String, color: String) {
        mainHandler.post {
            connectionStatusTextView.text = status
            connectionStatusTextView.setTextColor(android.graphics.Color.parseColor(color))
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        reconnectJob?.cancel()
        hubConnection.stop()
    }
}
2. fragment_data.xml 생성
fragment_data.xml 파일을 res/layout 폴더에 추가합니다. 이 레이아웃 파일은 프래그먼트의 UI를 정의합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <!-- SignalR 연결 상태를 표시하는 TextView -->
    <TextView
        android:id="@+id/connectionStatusTextView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:background="#EFEFEF"
        android:gravity="center"
        android:padding="8dp"
        android:text="연결 상태를 표시합니다."
        android:textColor="#000000"/>

    <!-- 표를 표시하는 RecyclerView -->
    <androidx.recyclerview.widget.RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="0dp"
        android:layout_weight="1"
        android:layout_margin="8dp"/>
</LinearLayout>
3. MainActivity에서 프래그먼트 추가
MainActivity에서 DataFragment를 추가하여 메인 화면에 표시되도록 합니다.

kotlin
코드 복사
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.fragment.app.commit

class MainActivity : AppCompatActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // DataFragment를 동적으로 추가
        if (savedInstanceState == null) {
            supportFragmentManager.commit {
                replace(R.id.fragmentContainer, DataFragment())
            }
        }
    }
}
4. activity_main.xml 업데이트
메인 액티비티의 레이아웃 파일에서 FragmentContainerView를 추가하여 프래그먼트를 배치할 컨테이너를 설정합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- 프래그먼트를 표시할 컨테이너 -->
    <FrameLayout
        android:id="@+id/fragmentContainer"
        android:layout_width="match_parent"
        android:layout_height="match_parent"/>
</FrameLayout>
설명
DataFragment:
기존 DataActivity의 로직과 UI를 프래그먼트로 옮겼습니다. 프래그먼트를 사용하면 메인 화면에서 SignalR 연결 상태와 데이터를 통합적으로 표시할 수 있습니다.
MainActivity:
DataFragment를 메인 화면의 fragmentContainer에 추가하여 프래그먼트가 메인 화면에 표시되도록 합니다.
activity_main.xml: