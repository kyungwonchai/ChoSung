블루투스 권한 관련 에러와 접근성 서비스를 설정하는 과정에서 발생할 수 있는 문제를 해결하고, 스캔한 데이터를 특정 어플리케이션의 특정 텍스트 박스에 입력하는 방법을 명확히 하겠습니다.

1. 권한 관련 문제 해결
missing permission 에러는 블루투스 권한을 런타임에 요청하지 않아서 발생할 수 있습니다. Android 6.0 (API 23) 이상에서는 권한을 런타임에 요청해야 합니다. 이를 위해 MainActivity에 권한 요청 코드를 추가합니다.

MainActivity.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.Manifest
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import androidx.activity.ComponentActivity
import androidx.activity.result.contract.ActivityResultContracts
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : ComponentActivity() {

    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        // Check and request Bluetooth permissions
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, arrayOf(Manifest.permission.BLUETOOTH_CONNECT), 1)
            }
        }

        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        val serviceIntent = Intent(this@MainActivity, MyAccessibilityService::class.java)
                        startService(serviceIntent)
                        (getSystemService(Context.ACCESSIBILITY_SERVICE) as MyAccessibilityService).setTextToInputField("com.target.package.name", readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
2. 특정 어플리케이션의 패키지 이름 및 텍스트 박스 알아내기
패키지 이름: 설치된 어플리케이션의 패키지 이름은 Android 설정의 앱 정보에서 확인할 수 있습니다. 또는, Google Play 스토어 URL에서 패키지 이름을 확인할 수 있습니다.
특정 텍스트 박스 알아내기: 접근성 서비스를 통해 UI 요소를 탐색할 때, 텍스트 박스의 resource-id 또는 class-name을 사용하여 해당 요소를 찾아낼 수 있습니다.
MyAccessibilityService.kt
kotlin
코드 복사
package com.example.btscannerapp

import android.accessibilityservice.AccessibilityService
import android.os.Bundle
import android.view.accessibility.AccessibilityEvent
import android.view.accessibility.AccessibilityNodeInfo

class MyAccessibilityService : AccessibilityService() {

    override fun onAccessibilityEvent(event: AccessibilityEvent?) {
        // 이벤트 처리
    }

    override fun onInterrupt() {
        // 인터럽트 처리
    }

    fun setTextToInputField(packageName: String, text: String) {
        val rootNode = rootInActiveWindow ?: return
        val nodeList = ArrayList<AccessibilityNodeInfo>()
        findNodesByText(rootNode, packageName, nodeList)

        for (node in nodeList) {
            if (node.className == "android.widget.EditText" && node.isEditable) {
                val arguments = Bundle()
                arguments.putCharSequence(
                    AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE,
                    text
                )
                node.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments)
                break
            }
        }
    }

    private fun findNodesByText(
        node: AccessibilityNodeInfo,
        packageName: String,
        nodeList: ArrayList<AccessibilityNodeInfo>
    ) {
        if (node.packageName == packageName) {
            nodeList.add(node)
        }
        for (i in 0 until node.childCount) {
            findNodesByText(node.getChild(i), packageName, nodeList)
        }
    }
}
3. 리소스 파일 추가
res/values/strings.xml
xml
코드 복사
<resources>
    <string name="app_name">BTScannerApp</string>
    <string name="accessibility_service_description">This service helps to input scanned data into the target app.</string>
</resources>
4. 접근성 서비스 설정
res/xml/accessibility_service_config.xml
xml
코드 복사
<?xml version="1.0" encoding="utf-8"?>
<accessibility-service xmlns:android="http://schemas.android.com/apk/res/android"
    android:description="@string/accessibility_service_description"
    android:packageNames="com.target.package.name" <!-- 대상 앱의 패키지 이름으로 수정하세요 -->
    android:accessibilityEventTypes="typeAllMask"
    android:accessibilityFeedbackType="feedbackAllMask"
    android:notificationTimeout="100"
    android:accessibilityFlags="flagDefault" />
AndroidManifest.xml
xml
코드 복사
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.btscannerapp">

    <uses-permission android:name="android.permission.BLUETOOTH"/>
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
    <uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE"/>

    <application
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.BTScannerApp">

        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>

        <service
            android:name=".MyAccessibilityService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
            <meta-data
                android:name="android.accessibilityservice"
                android:resource="@xml/accessibility_service_config" />
        </service>
    </application>

</manifest>
최종 요약
위 코드들을 Android 프로젝트에 복사하여 붙여넣으면, 블루투스 스캐너에서 읽은 데이터를 다른 앱의 입력창에 자동으로 넣는 백그라운드 서비스가 구현됩니다. com.target.package.name 부분을 접근할 앱의 실제 패키지 이름으로 수정하면 됩니다. minSdkVersion을 16으로 설정하여 접근성 서비스의 속성들이 정상적으로 작동하도록 합니다.

이 모든 설정을 완료한 후에는 Build > Clean Project와 Build > Rebuild Project를 통해 프로젝트를 빌드하고, APK를 생성할 수 있습니다.