SkinableForm에서 기본적으로 사용자 정의 버튼을 타이틀바에 추가할 수 없습니다. 하지만 Custom Draw 방식으로 타이틀바를 완전히 새로 그리거나, 폼 컨트롤로 사용자 정의 버튼을 배치할 수 있습니다.

아래는 SkinableForm에서 버튼을 타이틀바에 추가하고, 동작하도록 구현하는 방법입니다.

방법: 사용자 정의 버튼 추가 및 동작 구현
타이틀바 제거

기본 타이틀바를 제거하고, 사용자 정의 타이틀바를 구현합니다.
사용자 정의 버튼 추가

버튼을 직접 그리거나, WinForms의 Button 컨트롤을 사용해 타이틀바에 배치합니다.
코드 구현
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private Button customButton; // 사용자 정의 버튼

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 사용자 정의 타이틀바 영역 확보

        // 사용자 정의 버튼 추가
        customButton = new Button
        {
            Text = "Custom",
            BackColor = Color.LightGray,
            ForeColor = Color.Black,
            FlatStyle = FlatStyle.Flat,
            Size = new Size(80, 25),
            Location = new Point(this.Width - 100, 5) // 타이틀바 오른쪽에 배치
        };

        customButton.FlatAppearance.BorderSize = 0;
        customButton.Click += CustomButton_Click;
        this.Controls.Add(customButton);

        // 폼 크기 변경 시 버튼 위치 조정
        this.SizeChanged += (s, e) => 
        {
            customButton.Location = new Point(this.Width - 100, 5);
        };
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        var titleBarRect = new Rectangle(0, 0, this.Width, 30);
        using (var titleBarBrush = new SolidBrush(Color.SkyBlue)) // 타이틀바 색상
        {
            e.Graphics.FillRectangle(titleBarBrush, titleBarRect);
        }

        // 타이틀 텍스트
        string titleText = this.Text;
        using (var font = new Font("Arial", 10, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(titleText, font, textBrush, new PointF(10, 7));
        }
    }

    private void CustomButton_Click(object sender, EventArgs e)
    {
        MessageBox.Show("Custom Button Clicked!");
    }

    protected override void OnMouseDown(MouseEventArgs e)
    {
        base.OnMouseDown(e);

        // 타이틀바 드래그로 폼 이동
        if (e.Button == MouseButtons.Left && e.Y <= 30)
        {
            this.Capture = false;
            var message = Message.Create(this.Handle, 0xA1, new IntPtr(2), IntPtr.Zero); // WM_NCLBUTTONDOWN, HTCAPTION
            this.WndProc(ref message);
        }
    }

    protected override void OnDoubleClick(EventArgs e)
    {
        base.OnDoubleClick(e);

        // 타이틀바 더블 클릭으로 최대화/복원
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
        }
    }
}
설명
타이틀바 제거 및 사용자 정의 타이틀바 구현:

FormBorderStyle = FormBorderStyle.None로 기본 타이틀바를 제거.
Padding을 설정하여 타이틀바 영역 확보.
사용자 정의 버튼 추가:

WinForms의 Button 컨트롤을 사용.
버튼 위치는 폼의 크기에 따라 동적으로 조정.
타이틀바 기본 동작 구현:

폼 이동: OnMouseDown에서 WM_NCLBUTTONDOWN 메시지를 전송.
더블 클릭 최대화/복원: OnDoubleClick 이벤트로 구현.
버튼 동작:

Click 이벤트로 버튼의 동작을 정의.
결과
사용자 정의 버튼이 타이틀바 오른쪽에 추가됩니다.
버튼의 Click 이벤트로 동작을 구현할 수 있습니다.
폼 이동, 더블 클릭 최대화/복원 등의 기본 동작이 유지됩니다.
추가사항
다양한 버튼 추가: 여러 버튼을 추가하려면 동일한 방식으로 Button을 생성해 Controls.Add()에 추가합니다.

DevExpress 스타일 적용: 버튼 스타일을 DevExpress의 LookAndFeel 스타일에 맞추려면, DevExpress SimpleButton을 사용할 수도 있습니다.

DevExpress SimpleButton 예제:
csharp
코드 복사
DevExpress.XtraEditors.SimpleButton customButton = new DevExpress.XtraEditors.SimpleButton
{
    Text = "Custom",
    Appearance = { BackColor = Color.LightGray, ForeColor = Color.Black },
    Size = new Size(80, 25),
    Location = new Point(this.Width - 100, 5)
};
customButton.Click += CustomButton_Click;
this.Controls.Add(customButton);











ChatGPT는 실수를 할 수 있습니다. 중요한 정보를 확인하세요.