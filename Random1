네, 알겠습니다. 앞에서 제공해 드린 코드를 Canvas 형식 없이 풀어서 각 부분이 어떤 역할을 하는지 단계별로 자세히 설명해 드리겠습니다.

1단계: 외부 라이브러리 추가하기 (build.gradle.kts 파일)
안드로이드에서 PDF 파일을 직접 열고 확대/축소 기능을 처음부터 만드는 것은 매우 복잡합니다. 그래서 다른 개발자가 만들어 놓은 편리한 도구(라이브러리)를 가져와서 사용합니다. 여기서는 AndroidPdfViewer라는 라이브러리를 사용합니다.

프로젝트에 이 라이브러리를 포함시키려면, 앱의 설계도와 같은 build.gradle.kts (Module: app) 파일에 아래와 같이 한 줄을 추가해야 합니다.

Kotlin

dependencies {
    // ... 다른 디펜던시들

    // PDF 뷰어 라이브러리를 우리 프로젝트에 포함시킨다는 의미입니다.
    implementation("com.github.barteksc:android-pdf-viewer:3.2.0-beta.1")
}
이렇게 추가하고 Sync Now를 누르면, 안드로이드 스튜디오가 인터넷에서 해당 라이브러리를 다운로드하여 프로젝트에서 사용할 수 있도록 준비해 줍니다.

2단계: 화면 디자인하기 (activity_main.xml 파일)
이제 앱의 화면을 어떻게 구성할지 XML 코드로 디자인합니다. 화면 상단에는 버튼 두 개를, 그 아래에는 PDF가 보일 영역을 만듭니다.

XML

<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout ...>

    <!-- 버튼 두 개를 가로로 나란히 놓기 위한 그룹(LinearLayout) -->
    <LinearLayout
        android:id="@+id/buttonLayout"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintTop_toTopOf="parent" ...>

        <!-- "홀수 페이지" 버튼 -->
        <Button
            android:id="@+id/btnOddPages"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="홀수 페이지" />

        <!-- "짝수 페이지" 버튼 -->
        <Button
            android:id="@+id/btnEvenPages"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:text="짝수 페이지" />
    </LinearLayout>

    <!-- 1단계에서 추가한 라이브러리가 제공하는 PDF 전용 뷰 -->
    <!-- 이 영역에 PDF 내용이 표시됩니다. -->
    <com.github.barteksc.pdfviewer.PDFView
        android:id="@+id/pdfView"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintTop_toBottomOf="@id/buttonLayout" ... />

</androidx.constraintlayout.widget.ConstraintLayout>
LinearLayout은 버튼들을 가로(horizontal)로 나란히 배치하는 역할을 합니다. layout_weight="1" 속성은 두 버튼이 공간을 1:1 비율로 똑같이 나눠 갖게 합니다.

com.github.barteksc.pdfviewer.PDFView는 바로 PDF 내용을 보여주기 위한 특수 뷰입니다. 이 뷰가 확대/축소 같은 복잡한 기능을 알아서 처리해 줍니다.

android:id는 각 버튼과 뷰에 고유한 이름표를 붙여서, 나중에 Kotlin 코드에서 이들을 찾아 제어할 수 있게 합니다.

3단계: PDF 파일 준비하기
앱에서 사용할 PDF 파일을 프로젝트 안에 넣어줘야 합니다.

프로젝트의 app/src/main 폴더 아래에 assets라는 이름의 폴더를 만듭니다.

이 assets 폴더 안에 표시하고 싶은 PDF 파일(16페이지 이상)을 넣고, 파일 이름을 sample.pdf로 변경합니다. assets 폴더는 앱이 설치될 때 파일 그대로 포함되므로, 앱 코드에서 쉽게 파일을 읽어올 수 있습니다.

4단계: 기능 구현하기 (MainActivity.kt 파일)
이제 실제 동작을 담당하는 Kotlin 코드를 작성합니다.

Kotlin

package com.example.pdfviewerapp // 자신의 패키지 이름으로 변경하세요

import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.widget.Button
import com.github.barteksc.pdfviewer.PDFView
// ... 다른 import들

class MainActivity : AppCompatActivity() {

    // 1. 변수 선언: 화면의 UI 요소들을 담을 변수를 미리 만듭니다.
    private lateinit var pdfView: PDFView
    private lateinit var btnOddPages: Button
    private lateinit var btnEvenPages: Button

    // 2. 페이지 번호 관리 변수
    private var currentOddPage = 1  // 다음에 보여줄 홀수 페이지 (1, 3, 5, ...)
    private var currentEvenPage = 2 // 다음에 보여줄 짝수 페이지 (2, 4, 6, ...)
    private val maxPage = 16        // 최대 페이지 제한

    // 3. 앱이 처음 실행될 때 호출되는 함수
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main) // activity_main.xml 화면을 표시

        // 4. XML의 뷰와 코드의 변수를 연결
        pdfView = findViewById(R.id.pdfView)
        btnOddPages = findViewById(R.id.btnOddPages)
        btnEvenPages = findViewById(R.id.btnEvenPages)

        // 5. assets 폴더의 PDF 파일을 불러와 화면에 표시
        loadPdfFromAssets()

        // 6. '홀수 페이지' 버튼을 눌렀을 때의 동작 설정
        btnOddPages.setOnClickListener {
            // pdfView에게 currentOddPage로 이동하라고 명령
            // (라이브러리는 0부터 페이지를 세므로, 1을 빼줘야 함)
            pdfView.jumpTo(currentOddPage - 1, true)
            
            // 다음에 보여줄 홀수 페이지 번호를 2 증가시킴 (1 -> 3, 3 -> 5, ...)
            currentOddPage += 2
            
            // 만약 페이지 번호가 15를 넘어가면, 다시 처음 홀수인 1로 돌아감
            if (currentOddPage > maxPage - 1) {
                currentOddPage = 1
            }
        }

        // 7. '짝수 페이지' 버튼을 눌렀을 때의 동작 설정
        btnEvenPages.setOnClickListener {
            // pdfView에게 currentEvenPage로 이동하라고 명령
            pdfView.jumpTo(currentEvenPage - 1, true)

            // 다음에 보여줄 짝수 페이지 번호를 2 증가시킴 (2 -> 4, 4 -> 6, ...)
            currentEvenPage += 2
            
            // 만약 페이지 번호가 16을 넘어가면, 다시 처음 짝수인 2로 돌아감
            if (currentEvenPage > maxPage) {
                currentEvenPage = 2
            }
        }
    }

    // 8. PDF 파일을 실제로 로드하는 함수
    private fun loadPdfFromAssets() {
        pdfView.fromAsset("sample.pdf") // assets 폴더의 sample.pdf 파일을 지정
            .defaultPage(0) // 앱 실행 시 가장 첫 페이지(0번)를 보여줌
            .enableSwipe(true) // 손가락으로 쓸어넘겨 페이지 이동 허용
            .pageFitPolicy(FitPolicy.WIDTH) // 페이지 너비를 화면 너비에 맞춤
            .load() // 설정이 끝났으니 실제로 파일을 불러옴
    }
}
코드 설명 요약
1~2번: 코드에서 사용할 변수들을 미리 선언합니다. lateinit은 "나중에 초기화할게"라는 뜻이고, 페이지 번호 변수들은 버튼을 누를 때마다 어떤 페이지로 이동해야 할지 기억하는 역할을 합니다.

3~4번: onCreate는 액티비티가 시작될 때 가장 먼저 실행되는 부분입니다. setContentView로 화면을 설정하고, findViewById를 통해 XML에 디자인했던 뷰들의 이름표(id)를 이용해 실제 제어 가능한 객체로 가져와 변수에 연결합니다.

5, 8번: loadPdfFromAssets 함수를 호출하여 PDF 파일을 실제로 불러옵니다. fromAsset()으로 파일을 지정하고 여러 가지 옵션(.enableSwipe 등)을 설정한 뒤 마지막에 .load()를 호출하면 화면에 PDF가 나타납니다.

6~7번: setOnClickListener는 버튼이 클릭될 때마다 {} 안의 코드를 실행하도록 약속하는 것입니다. 홀수 버튼을 누르면 currentOddPage로 점프하고 currentOddPage 값을 다음 홀수로 업데이트합니다. 짝수 버튼도 동일한 원리로 동작합니다. 페이지 번호가 maxPage를 넘어가면 처음으로 되돌아가는 순환 로직도 포함되어 있습니다.