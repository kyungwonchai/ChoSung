래는 MP1DATA와 MP1RESULT는 필수로 처리하고, MP2~MP10 데이터는 없으면 숫자는 0, 문자열은 NA로 처리하도록 수정한 전체 코드를 제공합니다.

수정된 GetNewRows 함수
csharp
코드 복사
public List<Dictionary<string, object>> GetNewRows(string rootPath)
{
    var newRows = new List<Dictionary<string, object>>();
    var csvFiles = Directory.GetFiles(rootPath, "*.csv", SearchOption.AllDirectories);

    foreach (var file in csvFiles)
    {
        try
        {
            using (var reader = new StreamReader(new FileStream(file, FileMode.Open, FileAccess.Read, FileShare.ReadWrite)))
            {
                reader.ReadLine(); // 첫 번째 행(헤더) 무시
                while (!reader.EndOfStream)
                {
                    var values = reader.ReadLine()?.Split(',');
                    if (values == null || values.Length < 4) // MP1DATA와 MP1RESULT 최소 4개 컬럼 확인
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: Insufficient columns.");
                        continue;
                    }

                    // 디버그 출력: 현재 처리 중인 행의 값을 출력
                    Debug.WriteLine($"Processing Row in File {file}: {string.Join(", ", values)}");

                    // Null 값 체크: 필수 컬럼에 null 값이 있으면 스킵
                    if (string.IsNullOrWhiteSpace(values[0]) || string.IsNullOrWhiteSpace(values[1]) || string.IsNullOrWhiteSpace(values[2]) || string.IsNullOrWhiteSpace(values[3]))
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: Contains null or empty values in required fields.");
                        continue;
                    }

                    // InspectionTime 형식을 yyyy-MM-dd HH:mm:ss로 변환
                    string inspectionTimeOriginal = values[0];
                    string inspectionTime;
                    if (DateTime.TryParseExact(inspectionTimeOriginal, "yyyyMMdd HH:mm:ss", null, System.Globalization.DateTimeStyles.None, out var parsedDate))
                    {
                        inspectionTime = parsedDate.ToString("yyyy-MM-dd HH:mm:ss"); // 변환된 형식
                    }
                    else
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: InspectionTime is not in the valid format (yyyyMMdd HH:mm:ss).");
                        continue;
                    }

                    // MP1DATA와 MP1RESULT는 필수
                    if (!float.TryParse(values[3], out var mp1Data))
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: MP1DATA is not a valid number.");
                        continue;
                    }

                    var row = new Dictionary<string, object>
                    {
                        ["InspectionTime"] = inspectionTime,
                        ["ModelName"] = values[1],
                        ["AlignResult"] = values[2],
                        ["MP1DATA"] = mp1Data,
                        ["MP1RESULT"] = values[4],
                        ["ipname"] = _ipAddress // 현재 IP 추가
                    };

                    // Optional 컬럼 처리 (MP2~MP10)
                    for (int i = 2; i <= 10; i++)
                    {
                        AddDefaultColumn(row, $"MP{i}DATA", values, (i * 2) + 3);    // MP2DATA, MP3DATA ...
                        AddDefaultColumn(row, $"MP{i}RESULT", values, (i * 2) + 4); // MP2RESULT, MP3RESULT ...
                    }

                    // InspectionTime 조건 검사
                    if (DateTime.ParseExact(inspectionTime, "yyyy-MM-dd HH:mm:ss", null) > _lastUploadedTime)
                    {
                        Debug.WriteLine($"Added Row from File {file}: Passed all checks.");
                        newRows.Add(row);
                    }
                    else
                    {
                        Debug.WriteLine($"Skipped Row in File {file}: InspectionTime is not newer than the last uploaded time.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // 파일 처리 중 에러 발생 시 파일 경로와 에러 메시지 출력
            Debug.WriteLine($"Error processing File {file}: {ex.Message}");
        }
    }

    return newRows;
}
추가된 AddDefaultColumn 함수
csharp
코드 복사
private void AddDefaultColumn(Dictionary<string, object> row, string columnName, string[] values, int index)
{
    if (index < values.Length && !string.IsNullOrWhiteSpace(values[index]))
    {
        if (float.TryParse(values[index], out var numericValue))
        {
            row[columnName] = numericValue; // 숫자로 변환 가능하면 숫자 값 추가
        }
        else
        {
            row[columnName] = "NA"; // 숫자가 아닌 경우 NA 추가
        }
    }
    else
    {
        // 값이 없으면 기본값 추가
        if (columnName.Contains("DATA"))
        {
            row[columnName] = 0; // 숫자 컬럼 기본값 0
        }
        else
        {
            row[columnName] = "NA"; // 문자열 컬럼 기본값 NA
        }
    }
}
수정된 SQL INSERT 문
테이블 수정
테이블에 MP2DATA부터 MP10DATA, MP2RESULT부터 MP10RESULT 컬럼 추가:

sql
코드 복사
ALTER TABLE YourTable
ADD MP2DATA FLOAT DEFAULT 0,
    MP2RESULT NVARCHAR(100) DEFAULT 'NA',
    MP3DATA FLOAT DEFAULT 0,
    MP3RESULT NVARCHAR(100) DEFAULT 'NA',
    MP4DATA FLOAT DEFAULT 0,
    MP4RESULT NVARCHAR(100) DEFAULT 'NA',
    MP5DATA FLOAT DEFAULT 0,
    MP5RESULT NVARCHAR(100) DEFAULT 'NA',
    MP6DATA FLOAT DEFAULT 0,
    MP6RESULT NVARCHAR(100) DEFAULT 'NA',
    MP7DATA FLOAT DEFAULT 0,
    MP7RESULT NVARCHAR(100) DEFAULT 'NA',
    MP8DATA FLOAT DEFAULT 0,
    MP8RESULT NVARCHAR(100) DEFAULT 'NA',
    MP9DATA FLOAT DEFAULT 0,
    MP9RESULT NVARCHAR(100) DEFAULT 'NA',
    MP10DATA FLOAT DEFAULT 0,
    MP10RESULT NVARCHAR(100) DEFAULT 'NA';
INSERT 문
모든 데이터를 처리하여 삽입:

csharp
코드 복사
using (var command = new SqlCommand(
    @"INSERT INTO YourTable (ipname, InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, MP5DATA, MP5RESULT, MP6DATA, MP6RESULT, MP7DATA, MP7RESULT, MP8DATA, MP8RESULT, MP9DATA, MP9RESULT, MP10DATA, MP10RESULT)
      VALUES (@ipname, @InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @MP5DATA, @MP5RESULT, @MP6DATA, @MP6RESULT, @MP7DATA, @MP7RESULT, @MP8DATA, @MP8RESULT, @MP9DATA, @MP9RESULT, @MP10DATA, @MP10RESULT)", connection))
{
    command.Parameters.AddWithValue("@ipname", row["ipname"]);
    command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]);
    command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
    command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
    command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
    command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);

    // Optional 컬럼 추가
    for (int i = 2; i <= 10; i++)
    {
        command.Parameters.AddWithValue($"@MP{i}DATA", row[$"MP{i}DATA"]);
        command.Parameters.AddWithValue($"@MP{i}RESULT", row[$"MP{i}RESULT"]);
    }

    await command.ExecuteNonQueryAsync();
}
결과
필수 데이터:

MP1DATA, MP1RESULT는 반드시 입력.
누락되면 해당 행 스킵.
선택 데이터:

MP2~MP10의 DATA 및 RESULT 컬럼:
값이 없으면 기본값(DATA = 0, RESULT = NA) 추가.
값이 숫자가 아니면 NA로 처리.
디버그 메시지:
