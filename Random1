using System;
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    public ObservableCollection<TaskModel> TaskList { get; set; }
    private TaskQueue _taskQueue;
    private FileProcessor _fileProcessor;

    public ICommand PauseAllCommand { get; }
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>();
        _taskQueue = new TaskQueue();
        _fileProcessor = new FileProcessor(OnLogEntryDetected); // 파일 감지 및 작업 추가 콜백 연결

        // 모든 작업을 일시정지 및 재개하는 명령
        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);

        // 파일 감지 시작
        _fileProcessor.StartProcessing();
    }

    // 파일에서 감지된 로그 엔트리를 추가하는 메서드
    private void OnLogEntryDetected(LogEntry logEntry)
    {
        var task = new TaskModel(logEntry, _taskQueue);

        // TaskModel을 목록에 추가
        Application.Current.Dispatcher.Invoke(() => TaskList.Add(task));

        // 현재 작업이 완료되면 다음 작업을 자동으로 시작하도록 설정
        task.StartNextTask = (completedTask) =>
        {
            var nextTaskIndex = TaskList.IndexOf(completedTask) + 1;
            if (nextTaskIndex < TaskList.Count)
            {
                TaskList[nextTaskIndex].StartTask();
            }
        };

        // 첫 작업이 추가되면 즉시 시작
        if (TaskList.Count == 1 || TaskList.All(t => t.Status == "Completed"))
        {
            task.StartTask();  // 즉시 첫 작업 시작
        }
    }

    // 모든 작업을 일시정지하는 메서드
    private void PauseAllTasks()
    {
        foreach (var task in TaskList)
        {
            task.PauseTask();
        }
    }

    // 모든 작업을 재개하는 메서드
    private void ResumeAllTasks()
    {
        foreach (var task in TaskList)
        {
            task.ResumeTask();
        }
    }
}
