<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            justify-content: center;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
    </style>
    <script>
        let sensorActivationTimes = {}; // 두 번째 센서의 활성화 시간을 저장

        function trackSecondSensor(ip, status) {
            if (!sensorActivationTimes[ip]) {
                sensorActivationTimes[ip] = null; // 초기화
            }

            if (status === 'red') {
                if (!sensorActivationTimes[ip]) {
                    sensorActivationTimes[ip] = new Date();
                    document.getElementById('duration-' + ip).textContent = 'Active';
                }
            } else if (status === 'green' && sensorActivationTimes[ip]) {
                const deactivationTime = new Date();
                const activationTime = sensorActivationTimes[ip];
                const duration = (deactivationTime - activationTime) / 1000; // 초 단위로 변환
                document.getElementById('duration-' + ip).textContent = duration + 's';
                sensorActivationTimes[ip] = null;
            }
        }

        function updateTable(data) {
            console.log("Updating table with new data:", data); // 디버깅 로그 추가
            data.forEach(item => {
                const ip = item.ip;
                let sensorRow = document.querySelector(`[data-ip="${ip}"]`);
                
                // 만약 행이 존재하지 않으면 새 행을 생성합니다.
                if (!sensorRow) {
                    sensorRow = document.createElement('tr');
                    sensorRow.setAttribute('data-ip', ip);
                    sensorRow.innerHTML = `
                        <td>${ip}</td>
                        <td>
                            <div class="circle-container"></div>
                        </td>
                        <td class="time-cell">${item.time1}</td>
                        <td id="duration-${ip}">Not active yet</td>
                    `;
                    document.querySelector('tbody').appendChild(sensorRow);
                }

                const circleContainer = sensorRow.querySelector('.circle-container');
                circleContainer.innerHTML = ''; // 기존 도형 제거

                item.sensor1.split('').forEach((value, index) => {
                    const circle = document.createElement('span');
                    circle.className = `circle ${value === '1' ? 'red' : 'green'}`;
                    circleContainer.appendChild(circle);

                    // 두 번째 센서 추적
                    if (index === 1) {
                        circle.classList.add('second-sensor');
                        trackSecondSensor(ip, value === '1' ? 'red' : 'green');
                    }
                });

                // 시간 정보 갱신
                sensorRow.querySelector('.time-cell').textContent = item.time1;
            });
        }

        function fetchData() {
            fetch('/logsensors-data')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    updateTable(data);
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        // 최초 실행 시 데이터 가져오기
        fetchData();
        // 이후 3초마다 갱신
        setInterval(fetchData, 3000);
    </script>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <div id="data-container">
        <table>
            <thead>
                <tr>
                    <th>IP</th>
                    <th>Sensors</th>
                    <th>Time</th>
                    <th>Duration (2nd Sensor)</th>
                </tr>
            </thead>
            <tbody>
                {% for item in data %}
                <tr data-ip="{{ item.ip }}">
                    <td>{{ item.ip }}</td>
                    <td>
                        <div class="circle-container">
                            {% for char in item.sensor1 %}
                            <span class="circle {% if char == '1' %}red{% else %}green{% endif %}"></span>
                            {% endfor %}
                        </div>
                    </td>
                    <td class="time-cell">{{ item.time1 }}</td>
                    <td id="duration-{{ item.ip }}">Not active yet</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>
</html>
