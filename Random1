네, 알겠습니다. 솔루션 이름을 funcenvget으로 하고, 더 현대적이고 안정적인 UI 프레임워크인 **WPF(Windows Presentation Foundation)**를 기반으로 다시 만들어 드리겠습니다.

OCR 라이브러리는 Windows 내장 기능 대신, NuGet에서 설치할 수 있는 무료이면서도 세계적으로 성능이 검증된 Tesseract 엔진을 사용하겠습니다. Tesseract.Net.SDK라는 패키지를 사용하면 복잡한 설정 없이 Tesseract 엔진을 C#에서 쉽게 사용할 수 있습니다.

WPF와 WinForms의 안정성
간단한 백그라운드 작업에서는 두 프레임워크의 안정성 차이는 거의 없습니다. 하지만 WPF는 하드웨어 가속을 사용하고 UI와 로직의 분리(MVVM 패턴 등)가 용이하여, 복잡한 프로그램으로 확장될 경우 더 유지보수하기 좋고 구조적으로 안정적인 애플리케이션을 만들 수 있습니다. 따라서 WPF를 기반으로 시작하겠습니다.

WPF와 Tesseract OCR로 실시간 숫자 로깅 프로그램 만들기
1단계: WPF 프로젝트 생성
Visual Studio를 실행하고 '새 프로젝트 만들기'를 선택합니다.
**'WPF 앱(.NET Framework)'**을 선택하고 다음을 클릭합니다.
프로젝트 이름을 funcenvget으로 지정하고 원하는 위치에 저장한 후 '만들기'를 클릭합니다.
2단계: NuGet 패키지 설치
Tesseract OCR 엔진을 사용하기 위해 관련 패키지를 설치해야 합니다.

솔루션 탐색기에서 프로젝트 이름(funcenvget)을 마우스 오른쪽 버튼으로 클릭하고 **'NuGet 패키지 관리...'**를 선택합니다.
찾아보기 탭으로 이동하여 Tesseract.Net.SDK를 검색합니다.
Tesseract.Net.SDK 패키지를 찾아 설치합니다. 설치 과정에서 필요한 모든 종속성(엔진, 언어 데이터 등)이 자동으로 프로젝트에 추가됩니다.
3단계: UI 디자인 (MainWindow.xaml)
MainWindow.xaml 파일을 열고, 기존 코드를 모두 삭제한 후 아래의 XAML 코드로 교체합니다. 간단한 입력 필드와 버튼, 상태 표시줄로 구성된 UI입니다.

XML

<Window x:Class="funcenvget.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:funcenvget"
        mc:Ignorable="d"
        Title="실시간 데이터 로거 (funcenvget)" Height="320" Width="450" ResizeMode="CanMinimize">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Label Content="대상 창 제목:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
        <TextBox x:Name="txtWindowTitle" Grid.Row="0" Grid.Column="1" Margin="5" Text="계산기"/>

        <Label Content="캡처 영역 (X, Y):" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
        <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal">
            <TextBox x:Name="txtX" Width="80" Margin="5" Text="10"/>
            <TextBox x:Name="txtY" Width="80" Margin="5" Text="100"/>
        </StackPanel>

        <Label Content="캡처 크기 (W, H):" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
        <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal">
            <TextBox x:Name="txtWidth" Width="80" Margin="5" Text="200"/>
            <TextBox x:Name="txtHeight" Width="50" Margin="5"/>
        </StackPanel>
        
        <Button x:Name="btnStart" Content="로깅 시작" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Margin="5,15,5,5" Padding="5" FontWeight="Bold" Click="btnStart_Click"/>

        <TextBlock x:Name="lblStatus" Text="상태: 대기 중" Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="2" Margin="5" TextWrapping="Wrap"/>
        
    </Grid>
</Window>
4단계: C# 코드 작성 (MainWindow.xaml.cs)
MainWindow.xaml.cs 파일을 열고, 아래의 C# 코드로 전체를 교체합니다. 이 코드는 창 캡처, Tesseract OCR, 파일 로깅 등 모든 핵심 로직을 포함합니다.

C#

using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Threading;
using Tesseract; // Tesseract OCR 네임스페이스

namespace funcenvget
{
    public partial class MainWindow : Window
    {
        // WinAPI 함수 선언
        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);

        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);

        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);

        [StructLayout(LayoutKind.Sequential)]
        public struct RECT
        {
            public int Left, Top, Right, Bottom;
        }

        private DispatcherTimer timer;
        private TesseractEngine ocrEngine;

        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }

        private void InitializeApp()
        {
            // Tesseract 엔진 초기화. 
            // Tesseract.Net.SDK가 자동으로 'tessdata' 폴더를 관리합니다.
            // 숫자와 점(.), 쉼표(,)만 인식하도록 설정하여 정확도 향상
            ocrEngine = new TesseractEngine("./tessdata", "eng", EngineMode.Default);
            ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-"); // 인식할 문자 지정

            // 10초 간격의 타이머 설정
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(10);
            timer.Tick += Timer_Tick;
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled)
            {
                timer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 로깅이 중지되었습니다.";
            }
            else
            {
                if (string.IsNullOrWhiteSpace(txtWindowTitle.Text) || string.IsNullOrWhiteSpace(txtX.Text) ||
                    string.IsNullOrWhiteSpace(txtY.Text) || string.IsNullOrWhiteSpace(txtWidth.Text) ||
                    string.IsNullOrWhiteSpace(txtHeight.Text))
                {
                    MessageBox.Show("모든 입력 필드를 채워주세요.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    return;
                }
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // 비동기 처리를 하지 않으므로 UI가 아주 잠시 멈출 수 있으나, 10초 간격이므로 체감하기 어렵습니다.
            PerformLogging();
        }

        private void PerformLogging()
        {
            try
            {
                // 1. 대상 창 핸들 찾기
                IntPtr hWnd = FindWindow(null, txtWindowTitle.Text);
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창을 찾을 수 없습니다.";
                    return;
                }

                // 2. 창 크기를 가져와서 비트맵 객체 생성
                GetWindowRect(hWnd, out RECT rect);
                using (var bmp = new Bitmap(rect.Right - rect.Left, rect.Bottom - rect.Top, PixelFormat.Format32bppArgb))
                {
                    using (var g = Graphics.FromImage(bmp))
                    {
                        // 3. PrintWindow API로 백그라운드에서 창의 이미지를 캡처
                        bool result = PrintWindow(hWnd, g.GetHdc(), 2); // nFlags=2 : 클라이언트 영역만
                        g.ReleaseHdc();
                        if (!result)
                        {
                            lblStatus.Text = "상태: 오류! 창을 캡처할 수 없습니다.";
                            return;
                        }
                    }

                    // 4. 지정된 좌표와 크기로 이미지 자르기
                    var cropArea = new Rectangle(
                        int.Parse(txtX.Text), int.Parse(txtY.Text),
                        int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));

                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        // 5. Tesseract로 텍스트 인식
                        using (var page = ocrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            if (!string.IsNullOrWhiteSpace(rawText))
                            {
                                // 6. 숫자 2개 추출 및 파일에 로그 기록
                                LogData(rawText);
                                lblStatus.Text = $"상태: {DateTime.Now} - 로그 기록 완료.";
                            }
                            else
                            {
                                lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다.";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // 모든 종류의 예외를 처리하여 프로그램 안정성 확보
                lblStatus.Text = $"상태: 심각한 오류 발생! {ex.Message}";
                LogData($"[ERROR] {ex.Message}");
            }
        }

        private void LogData(string data)
        {
            try
            {
                // 줄바꿈 문자를 공백으로 치환하여 한 줄로 만듦
                string sanitizedData = Regex.Replace(data, @"\s+", " ").Trim();
                
                // 실행파일과 같은 경로에 로그 파일 저장
                string logFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "datalog.txt");
                string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss}\t{sanitizedData}\n";

                File.AppendAllText(logFilePath, logMessage, Encoding.UTF8);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"로그 파일 쓰기 오류: {ex.Message}", "파일 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        // 창이 닫힐 때 리소스 정리
        private void Window_Closed(object sender, EventArgs e)
        {
            if (ocrEngine != null)
            {
                ocrEngine.Dispose();
            }
        }
    }
}
5단계: 프로그램 실행 및 사용법
빌드 및 실행: F5 키를 눌러 프로그램을 시작합니다.
대상 창 제목 입력: 온도/습도가 표시되는 프로그램의 정확한 전체 창 제목을 입력합니다. (예시로 '계산기'가 기본값으로 들어가 있습니다.)
캡처 영역 정보 입력:
X, Y: 캡처할 영역의 창 기준 왼쪽-위 좌표입니다.
W, H: 캡처할 영역의 가로(Width), 세로(Height) 크기입니다.
이 정보는 Windows에 내장된 '캡처 도구'나 '그림판' 등을 이용해 미리 확인해야 합니다.
로깅 시작: [로깅 시작] 버튼을 클릭합니다.
이제 10초마다 백그라운드에서 자동으로 숫자 데이터를 읽어옵니다.
프로그램 실행 파일(.exe)이 있는 폴더(보통 bin/Debug)에 datalog.txt 파일이 생성되며, 인식된 값이 시간과 함께 기록됩니다.