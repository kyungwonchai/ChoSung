아래는 Flask 애플리케이션에서 IP와 포트 리스트를 받아 방화벽 상태를 확인하고, 세련된 HTML 테이블로 결과를 보여주는 코드입니다. 컬럼은 IP, 포트, 상태, 확인 시간 등으로 확장하며, 테이블 스타일은 기본적으로 깔끔한 CSS 스타일을 적용했습니다.

Flask 코드
python
코드 복사
from flask import Flask, render_template
import socket
from datetime import datetime

app = Flask(__name__)

# 포트 상태를 확인하는 함수
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2):
            return True
    except Exception:
        return False

@app.route('/ipchk')
def check_firewall():
    # IP와 포트 목록 (사용자가 원하는 대로 수정 가능)
    ip_ports = [
        {"ip": "10.10.100.11", "ports": [80, 443, 8080]},
        {"ip": "10.10.100.12", "ports": [22, 3306]},
        {"ip": "192.168.1.1", "ports": [80, 22, 3389]},
    ]

    results = []

    # IP와 포트 상태 확인
    for item in ip_ports:
        ip = item["ip"]
        for port in item["ports"]:
            status = check_port(ip, port)
            results.append({
                "ip": ip,
                "port": port,
                "status": "Open" if status else "Closed",
                "checked_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            })

    # HTML 페이지 렌더링
    return render_template('status.html', results=results)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
templates/status.html 파일
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firewall Status</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f4f4f9;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }
        table, th, td {
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: center;
        }
        th {
            background-color: #007BFF;
            color: white;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .status-open {
            color: green;
            font-weight: bold;
        }
        .status-closed {
            color: red;
            font-weight: bold;
        }
    </style>
</head>
<body>
    <h1>Firewall Status Checker</h1>
    <table>
        <thead>
            <tr>
                <th>IP Address</th>
                <th>Port</th>
                <th>Status</th>
                <th>Checked At</th>
            </tr>
        </thead>
        <tbody>
            {% for result in results %}
            <tr>
                <td>{{ result.ip }}</td>
                <td>{{ result.port }}</td>
                <td class="status-{{ 'open' if result.status == 'Open' else 'closed' }}">
                    {{ result.status }}
                </td>
                <td>{{ result.checked_at }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
주요 변경 사항
IP와 포트 리스트:
Python 코드에서 ip_ports 변수에 원하는 IP와 포트를 추가하세요. 예:
python
코드 복사
ip_ports = [
    {"ip": "10.10.100.11", "ports": [80, 443, 8080]},
    {"ip": "192.168.0.1", "ports": [22, 3306]},
]
테이블 컬럼 추가:
IP Address, Port, Status, Checked At 컬럼을 추가했습니다.
CSS 스타일링:
기본적인 CSS를 적용해 테이블을 깔끔하게 디자인했습니다.
상태(Open, Closed)는 색상(녹색/빨간색)으로 강조.
실시간 확인 시간:
상태 확인 시간을 추가해 언제 체크했는지 알 수 있습니다.
결과 확인
Flask 서버 실행 후, 브라우저에서 다음 URL로 접속하세요:

arduino
코드 복사
http://<Flask_서버_IP>:5000/ipchk
출력 예시
IP Address	Port	Status	Checked At
10.10.100.11	80	Open	2024-12-13 14:55:20
10.10.100.11	443	Closed	2024-12-13 14:55:20
10.10.100.12	22	Open	2024-12-13 14:55:20