들 누수를 방지하기 위해 스레드의 실행이 완료되었는지를 체크하고, AutoResetEvent 또한 Dispose 메서드를 호출하여 리소스를 해제할 수 있습니다. CancellationToken을 사용하여 스레드를 안전하게 종료할 수도 있습니다.

아래에 코드 예시를 들겠습니다:

csharp

using System;
using System.Threading;

namespace SafeThreadExample
{
    class Program
    {
        static AutoResetEvent resetEvent = new AutoResetEvent(false);
        static CancellationTokenSource cts = new CancellationTokenSource();

        static void Main(string[] args)
        {
            MyClass myInstance = new MyClass();  // 외부 클래스 인스턴스 생성

            while (true)
            {
                CancellationToken token = cts.Token;

                Thread firstThread = new Thread(() => SafeExecute(() => FirstFunction(myInstance), token));
                Thread secondThread = new Thread(() => SafeExecute(SecondFunction, token));

                firstThread.Start();
                secondThread.Start();

                resetEvent.WaitOne();

                if (token.IsCancellationRequested)
                {
                    Console.WriteLine("취소 요청을 받았습니다.");
                    break;
                }

                // 에러 발생 시 스레드 종료 및 리소스 해제
                firstThread.Join();
                secondThread.Join();

                Console.WriteLine("스레드를 재시작합니다.");
            }

            // 리소스 해제
            resetEvent.Dispose();
            cts.Dispose();
        }

        static void SafeExecute(Action action, CancellationToken token)
        {
            try
            {
                action();
                if (token.IsCancellationRequested)
                {
                    Console.WriteLine("취소 요청을 받았습니다.");
                    resetEvent.Set();
                }
            }
            catch (Exception e)
            {
                Console.WriteLine($"예외 발생: {e.Message}");
                resetEvent.Set();
            }
        }

        static void FirstFunction(MyClass instance)
        {
            instance.SomeMethod();  // 외부 클래스의 메서드 호출
            Console.WriteLine("첫 번째 함수 실행");
            Thread.Sleep(1000);
        }

        static void SecondFunction()
        {
            Console.WriteLine("두 번째 함수 실행");
            Thread.Sleep(1000);
        }
    }

    public class MyClass
    {
        public void SomeMethod()
        {
            // 로직 구현
        }
    }
}

이 예시에서는 CancellationToken을 사용하여 스레드가 취소 요청을 받았는지 확인합니다. 취소 요청이 있으면 resetEvent.Set()를 호출하여 메인 스레드에 알립니다. 또한, AutoResetEvent와 CancellationTokenSource 객체의 Dispose() 메