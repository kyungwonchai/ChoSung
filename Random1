켓 서버 초기화를 MainWindow.xaml.cs에서 직접 처리할 수도 있지만, MVVM 패턴을 유지하려면 뷰모델에서 소켓 서버를 초기화하는 것이 좋습니다. 이렇게 하면 UI와 로직이 분리되어 코드의 유지보수가 더 쉬워집니다. 따라서 소켓 서버는 MainViewModel에서 초기화하고, MainWindow는 이를 뷰모델에 바인딩하거나 명령을 통해 소켓 서버를 제어하게 됩니다.

아래에 전체 WPF 프로젝트의 소스코드를 제시하겠습니다. 이 코드는 XAML 파일, 뷰모델, 파일 와처 서비스, 그리고 COM 포트 매니저와 소켓 서버를 포함한 구성입니다.

1. MainWindow.xaml
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <StackPanel>
            <TextBlock Text="로그 기록:" />
            <ListBox ItemsSource="{Binding LogMessages}" Height="100" />
            <Button Content="포트 열기" Command="{Binding OpenPortCommand}" />
            <Button Content="포트 닫기" Command="{Binding ClosePortCommand}" />
            <Button Content="소켓 서버 시작" Command="{Binding StartSocketServerCommand}" />
        </StackPanel>
    </Grid>
</Window>
2. MainWindow.xaml.cs
csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();  // ViewModel과 바인딩
        }
    }
}
3. MainViewModel.cs
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Net;
using System.Net.Sockets;
using System.Windows.Input;

namespace WpfApp
{
    public class MainViewModel : ViewModelBase
    {
        private ComportManager comportManager1;
        private ComportManager comportManager2;
        private SocketServer socketServer;
        public ObservableCollection<string> LogMessages { get; set; }

        public ICommand OpenPortCommand { get; }
        public ICommand ClosePortCommand { get; }
        public ICommand StartSocketServerCommand { get; }

        public MainViewModel()
        {
            LogMessages = new ObservableCollection<string>();
            comportManager1 = ComportManager.GetInstance();
            comportManager2 = ComportManager.GetInstance();
            FileWatcherService fileWatcher = new FileWatcherService();

            // 명령 초기화
            OpenPortCommand = new RelayCommand(OpenPorts);
            ClosePortCommand = new RelayCommand(ClosePorts);
            StartSocketServerCommand = new RelayCommand(StartSocketServer);

            fileWatcher.StartWatching(@"C:\Logs");
        }

        private void OpenPorts()
        {
            comportManager1.OpenPort("COM1", 9600);
            comportManager2.OpenPort("COM2", 9600);
            LogMessages.Add("포트가 열렸습니다.");
        }

        private void ClosePorts()
        {
            comportManager1.ClosePort();
            comportManager2.ClosePort();
            LogMessages.Add("포트가 닫혔습니다.");
        }

        private void StartSocketServer()
        {
            socketServer = new SocketServer();
            socketServer.Start();
            LogMessages.Add("소켓 서버가 시작되었습니다.");
        }
    }
}
4. ComportManager.cs
csharp
코드 복사
using System;
using System.IO.Ports;

namespace WpfApp
{
    public class ComportManager
    {
        private static ComportManager instance;
        private SerialPort serialPort;

        private ComportManager() { }

        public static ComportManager GetInstance()
        {
            if (instance == null)
                instance = new ComportManager();
            return instance;
        }

        public void OpenPort(string portName, int baudRate)
        {
            if (serialPort == null || !serialPort.IsOpen)
            {
                serialPort = new SerialPort(portName, baudRate);
                serialPort.Open();
            }
        }

        public void ClosePort()
        {
            if (serialPort != null && serialPort.IsOpen)
            {
                serialPort.Close();
            }
        }

        public void SendMessage(string message)
        {
            if (serialPort != null && serialPort.IsOpen)
            {
                serialPort.WriteLine(message);
            }
        }
    }
}
5. SocketServer.cs
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;

namespace WpfApp
{
    public class SocketServer
    {
        private TcpListener listener;

        public void Start()
        {
            listener = new TcpListener(IPAddress.Any, 5000);
            listener.Start();
            listener.BeginAcceptTcpClient(AcceptCallback, null);
        }

        private void AcceptCallback(IAsyncResult ar)
        {
            TcpClient client = listener.EndAcceptTcpClient(ar);
            NetworkStream stream = client.GetStream();
            byte[] buffer = new byte[client.ReceiveBufferSize];
            stream.Read(buffer, 0, buffer.Length);

            string message = Encoding.ASCII.GetString(buffer);
            Console.WriteLine("Received: " + message);
            stream.Close();
            client.Close();
            listener.BeginAcceptTcpClient(AcceptCallback, null);  // 다시 대기
        }
    }
}
6. FileWatcherService.cs
csharp
코드 복사
using System;
using System.IO;

namespace WpfApp
{
    public class FileWatcherService
    {
        private FileSystemWatcher watcher;

        public void StartWatching(string folderPath)
        {
            watcher = new FileSystemWatcher(folderPath);
            watcher.Changed += OnChanged;
            watcher.EnableRaisingEvents = true;
        }

        private void OnChanged(object sender, FileSystemEventArgs e)
        {
            // 파일 변경 시, 로그나 필요한 처리를 여기에 추가
            Console.WriteLine($"파일이 변경됨: {e.FullPath}");
        }
    }
}
7. RelayCommand.cs
csharp
코드 복사
using System;
using System.Windows.Input;

namespace WpfApp
{
    public class RelayCommand : ICommand
    {
        private readonly Action execute;
        private readonly Func<bool> canExecute;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            this.execute = execute;
            this.canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return canExecute == null || canExecute();
        }

        public void Execute(object parameter)
        {
            execute();
        }

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
프로젝트 설명
MainWindow.xaml: UI가 정의된 파일로, 버튼과 로그 리스트박스가 포함되어 있습니다. 각 버튼은 MainViewModel의 명령과 연결됩니다.

MainViewModel: 비즈니스 로직이 들어간 뷰모델로, 포트를 열고 닫는 명령과 소켓 서버를 시작하는 명령이 정의되어 있습니다.

ComportManager: 싱글톤 패턴으로 설계된 클래스입니다. COM 포트를 열고 닫는 기능을 제공합니다.

SocketServer: 간단한 TCP 소켓 서버로, 클라이언트의 연결을 받아 데이터를 처리합니다.

FileWatcherService: 파일 시스템에서 파일 변화를 감지하고, 변동이 있을 때 필요한 처리를 합니다.

RelayCommand: MVVM 패턴에서 명령을 구현하기 위해 사용하는 클래스입니다.

이 코드는 WPF 프로젝트에 적용할 수 있는 기본적인 구조로, 요구사항에 맞춘 기능을 포함하고 있습니다. 이 프로젝트를 Visual Studio에서 바로 실행하면, 소켓 서버를 시작하고, COM 포트를 제어할 수 있는 UI가 작동할 것입니다.