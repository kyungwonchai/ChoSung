결을 대기하도록 하겠습니다.

본컴의 소켓 서버 구현
csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;

class Server
{
    static void Main(string[] args)
    {
        IPAddress ip = IPAddress.Parse("본컴의 IP 주소");
        TcpListener server = new TcpListener(ip, 8080);
        server.Start();
        Console.WriteLine("서버 시작...");

        while (true)
        {
            TcpClient client = server.AcceptTcpClient();
            Thread clientThread = new Thread(() => HandleClient(client));
            clientThread.Start();
        }
    }

    static void HandleClient(TcpClient client)
    {
        NetworkStream stream = client.GetStream();
        byte[] buffer = new byte[1024];
        int bytesRead = stream.Read(buffer, 0, buffer.Length);
        string command = Encoding.ASCII.GetString(buffer, 0, bytesRead).Trim();

        if (command == "OFF")
        {
            System.Diagnostics.Process.Start("nircmd.exe", "monitor off");
        }
        else if (command == "ON")
        {
            System.Diagnostics.Process.Start("nircmd.exe", "monitor on");
        }
        client.Close();
    }
}
갤럭시 북의 소켓 클라이언트 구현
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;

class Client
{
    static void Main(string[] args)
    {
        SendCommand("OFF"); // 화면을 끌 때 "OFF", 켤 때 "ON"
    }

    static void SendCommand(string command)
    {
        try
        {
            TcpClient client = new TcpClient("본컴의 IP 주소", 8080);
            NetworkStream stream = client.GetStream();
            byte[] data = Encoding.ASCII.GetBytes(command);
            stream.Write(data, 0, data.Length);
            client.Close();
        }
        catch (Exception e)
        {
            Console.WriteLine("Error: " + e.Message);
        }
    }
}
모니터 상태에 따라 자동 제어하기
