 하드웨어 워치독 (Hardware Watchdog) 방식
가장 확실한 방법으로, 라즈베리파이가 소프트웨어적으로 완전히 멈추는 '프리즈(Freeze)' 현상이 발생했을 때 물리적으로 재부팅시켜주는 감시 회로입니다.

1. 내장 하드웨어 워치독 활성화 (권장)
라즈베리파이의 핵심 칩(SoC)에는 이미 하드웨어 워치독 타이머가 내장되어 있습니다. 별도의 회로 없이 간단한 설정만으로 활성화할 수 있어 가장 많이 사용됩니다.

작동 원리:

워치독을 활성화하면, 운영체제(OS)가 주기적으로 워치독에게 "나 살아있어!" 라는 신호를 보냅니다. (이를 '먹이를 준다(feeding)' 또는 '펫(pet)'이라고 합니다.)

만약 라즈베리파이가 심각한 오류로 멈춰서 정해진 시간 안에 신호를 보내지 못하면, 워치독은 "주인이 응답이 없네, 시스템에 문제가 생겼군!"이라고 판단합니다.

워치독이 강제로 시스템에 리셋 신호를 보내 라즈베리파이를 재부팅시킵니다.

설정 방법 (Raspberry Pi OS 기준):

터미널에서 설정 파일을 엽니다.

Bash

sudo nano /etc/systemd/system.conf
파일 내용 중 아래 두 줄의 주석(#)을 제거하고 원하는 시간으로 설정합니다.

Ini, TOML

#RuntimeWatchdogSec=
#ShutdownWatchdogSec=
아래와 같이 변경합니다. (최대 15초 이내 권장)

Ini, TOML

RuntimeWatchdogSec=10s
ShutdownWatchdogSec=10min
RuntimeWatchdogSec=10s: 시스템이 10초 동안 응답이 없으면 재부팅합니다.

ShutdownWatchdogSec=10min: 종료 프로세스가 10분 이상 걸리면 강제 재부팅합니다.

설정을 저장(Ctrl+X, Y, Enter)하고 시스템 데몬을 다시 로드하면 적용됩니다.

Bash

sudo systemctl daemon-reexec
2. 외부 워치독 회로 구성
내장 워치독으로 해결되지 않는 특정 상황이나, 더 정밀한 제어가 필요할 때 사용합니다. 555 타이머 IC나 TPL5010과 같은 워치독 전용 IC를 사용하여 직접 회로를 만듭니다.

작동 원리:

라즈베리파이의 GPIO 핀과 리셋(RUN) 핀에 외부 워치독 회로를 연결합니다.

라즈베리파이는 주기적으로 GPIO 핀으로 외부 회로에 "나 살아있어!" 신호를 보냅니다.

만약 신호가 끊기면, 외부 워치독 회로가 타이머에 의해 라즈베리파이의 리셋(RUN) 핀을 물리적으로 쇼트(Short)시켜 강제로 재부팅합니다.

구성: 이 방법은 전자 회로에 대한 이해가 필요하며, 555 타이머, 커패시터, 저항 등의 부품으로 구성됩니다. 라즈베리파이의 RUN 헤더(두 개의 작은 구멍)에 회로의 리셋 신호선을 연결해야 합니다.

💻 소프트웨어 방식 (Crontab)
시스템 안정성과 무관하게, 정해진 스케줄에 따라 주기적으로 재부팅하고 싶을 때 사용하는 가장 간단한 방법입니다. 예를 들어 "매일 새벽 4시에 재부팅"과 같은 규칙을 설정할 수 있습니다.

작동 원리: 리눅스의 cron이라는 작업 스케줄러를 사용하여 특정 시간에 reboot 명령어를 자동으로 실행시킵니다.

설정 방법:

터미널에서 크론탭 편집기를 엽니다.

Bash

sudo crontab -e
파일 맨 아랫줄에 원하는 재부팅 규칙을 추가합니다.

매일 새벽 4시에 재부팅:

코드 스니펫

0 4 * * * /sbin/shutdown -r now
매주 일요일 오전 5시 30분에 재부팅:

코드 스니펫

30 5 * * 0 /sbin/shutdown -r now
파일을 저장(Ctrl+X, Y, Enter)하면 설정이 바로 적용됩니다.

결론
목적	추천 방법	장점	단점
시스템 다운 시 자동 복구	내장 하드웨어 워치독	가장 안정적이고 간편함, 추가 부품 불필요	일부 커널 패닉 상황에선 미작동할 수도 있음
물리적인 강제 리셋 필요	외부 워치독 회로	가장 확실한 재부팅 보장	회로 구성이 복잡하고 전문 지식 필요
주기적인 자동 재부팅	소프트웨어 (Crontab)	설정이 매우 간단함	시스템이 멈추면 재부팅되지 않음
일반적으로 원격지에 설치되어 사람의 접근이 어려운 라즈베리파이의 안정성을 높이기 위해서는 내장 하드웨어 워치독을 활성화하는 것이 가장 효과적이고 표준적인 방법입니다.

워치독 말이에요...지금 라즈베리3이고 옵션은다있네요보니까 근데 저거 코드만수정하먄대요? 물리적으로 제가 선연결해줘야되요?





생각하는 과정 표시
아니요, 물리적으로 선을 연결할 필요가 전혀 없습니다.

라즈베리파이 3에는 이미 워치독 타이머 하드웨어가 메인 칩(SoC) 안에 내장되어 있습니다. 즉, 필요한 부품이 보드에 이미 장착되어 있고 내부적으로 연결까지 다 되어있는 상태입니다.

사용자께서 하실 일은 그 내장된 하드웨어의 "스위치를 켜는" 역할만 하는 것입니다. 이 스위치를 켜는 방법이 바로 소프트웨어 코드를 수정하는 것입니다.

비유하자면...
스마트폰의 Wi-Fi나 블루투스 기능과 같습니다.

Wi-Fi 칩과 안테나는 스마트폰 안에 이미 들어있습니다. (
내장된 하드웨어)

우리는 Wi-Fi를 쓰기 위해 스마트폰을 열고 선을 연결하지 않습니다.

단지 설정 메뉴에 들어가서 Wi-Fi를 "켬"으로 바꾸기만 하면 됩니다. (
소프트웨어 설정)

라즈베리파이의 내장 워치독도 똑같습니다.

물리적 연결이 필요한 경우: 별도의 555 타이머 같은 부품으로 외부 워치독 회로를 직접 만들 때입니다. 이것은 내장 기능이 없을 때나 특별한 목적이 있을 때 사용하는 훨씬 복잡한 방법입니다.

결론
라즈베리파이 3의 내장 워치독을 사용하시는 것이므로, 선 연결은 전혀 신경 쓰지 마시고 알려드린 대로 /etc/systemd/system.conf 파일 수정만 하시면 됩니다. 그것으로 모든 설정이 끝납니다.


우리가 이제까지는 핑테스트도 안되고 연결 제대로 안되면 가서 손으로 재부팅했거든 그러면 예는 정확하게 어느시점재부팅이니 설정하면




정확하게 시스템이 완전히 멈춘 시점에 재부팅됩니다.

손으로 직접 재부팅하셨던 상황, 즉 핑 테스트도 안 되고 SSH 접속도 불가능한 '먹통' 상태가 바로 워치독이 재부팅을 실행하는 시점입니다.

조금 더 자세히 설명해 드릴게요.

워치독의 재부팅 시점: "심장 박동"이 멈췄을 때
워치독의 작동 원리를 "심장 박동"에 비유하면 이해하기 쉽습니다.

정상 상태 (심장이 뛰는 중 💓):

라즈베리파이의 운영체제(OS)는 정상적으로 작동하는 동안, 아주 짧은 간격으로 내장된 워치독 하드웨어에게 계속 신호를 보냅니다.

이것은 마치 "나 아직 살아있어, 문제없어!"라고 주기적으로 보고하는 것과 같습니다.

워치독은 이 신호(심장 박동)를 받을 때마다 타이머를 초기화하고 재부팅하지 않습니다.

시스템 멈춤 (심장이 멎은 상태 멈춤):

어떤 이유로든 라즈베리파이가 다운되어 핑도 안 되고 아무런 응답이 없는 상태가 되면, OS 역시 멈춰버립니다.

OS가 멈추니, 워치독에게 보내던 "나 살아있어!" 신호도 당연히 끊깁니다. 심장 박동이 멎는 것과 같습니다.

재부팅 실행 (심폐 소생술 ⚡):

워치독은 설정된 시간(예: RuntimeWatchdogSec=10s로 설정했다면 10초) 동안 신호가 들어오지 않으면, "시스템이 멈췄구나!"라고 판단합니다.

이때 워치독은 강제로 시스템에 전기적 리셋 신호를 보내, 손으로 전원 코드를 뽑았다가 다시 꽂는 것과 똑같은 효과를 만들어냅니다.

결과적으로 라즈베리파이는 자동으로 재부팅되어 다시 정상 작동을 시작하게 됩니다.

결론
설정하신 RuntimeWatchdogSec=10s 값의 의미는 다음과 같습니다.

"시스템이 완전히 먹통이 되어 10초 동안 아무런 내부 응답이 없으면, 즉시 재부팅을 실행하라."