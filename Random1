using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class RackSystemManager : MonoBehaviour
{
    [Header("핵심 연결 대상")]
    public Transform rackContainer;

    [Header("머티리얼")]
    public Material defaultLampMaterial;
    public Material litLampMaterial;

    [Header("애니메이션")]
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");

        if (rackContainer == null) 
        {
            Debug.LogError("Rack Container가 연결되지 않았습니다! Inspector 창을 확인해주세요.");
            return;
        }

        foreach (Transform rackParent in rackContainer)
        {
            string rackName = rackParent.name;
            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name;
                string globalKey = $"{rackName}_{localName}";

                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                    {
                        lampRenderers.Add(globalKey, rend);
                        if (defaultLampMaterial != null) rend.material = defaultLampMaterial;
                        Debug.Log($"등록된 램프 키: {globalKey}"); // ★★★ 등록되는 램프 키 출력
                    }
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                    {
                        maskObjects.Add(globalKey, rend.gameObject);
                        Debug.Log($"등록된 마스크 키: {globalKey}"); // ★★★ 등록되는 마스크 키 출력
                    }
                }
            }
        }
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    public void ProcessBarcode(string barcode)
    {
        Debug.Log($"입력된 바코드 처리 시작: {barcode}");
        ResetPreviousSlot();

        // ★★★ 바코드 길이를 12 -> 11로 수정 ★★★
        if (string.IsNullOrEmpty(barcode) || barcode.Length != 11 || !barcode.StartsWith("MMF10"))
        {
            Debug.LogError($"잘못된 바코드 형식입니다: {barcode}");
            return;
        }

        // 바코드 형식: MMF10 B08 C05 -> 11자리
        string row = barcode.Substring(5, 1);
        string rackNum = barcode.Substring(6, 2);
        string floor = barcode.Substring(8, 1);
        string slotNum = barcode.Substring(9, 2);

        string rackID = $"{row}_{rackNum}";
        
        string lampKey = $"{rackID}_Lamp_{floor}{slotNum}";
        string maskKey = $"{rackID}_Mask_{floor}{slotNum}";
        
        Debug.Log($"찾는 램프 키: {lampKey}");
        Debug.Log($"찾는 마스크 키: {maskKey}");

        if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
        {
            Debug.Log($"성공: {lampKey} 램프를 찾았습니다. 불을 켭니다.");
            if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
        }
        else
        {
            Debug.LogWarning($"경고: {lampKey} 이름의 램프를 찾지 못했습니다.");
        }

        if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
        {
            Debug.Log($"성공: {maskKey} 마스크를 찾았습니다. 애니메이션을 시작합니다.");
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
        else
        {
            Debug.LogWarning($"경고: {maskKey} 이름의 마스크를 찾지 못했습니다.");
        }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;

        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 

        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }

        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;

        if (rb != null) rb.isKinematic = false;
    }

    public void ActivateFromInputField(InputField inputField)
    {
        if (inputField != null && !string.IsNullOrEmpty(inputField.text))
        {
            ProcessBarcode(inputField.text.ToUpper());
        }
    }
}