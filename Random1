택된 행만 잠그고, 업데이트가 완료되면 잠금을 해제하려면 몇 가지 주요 로직이 필요합니다. HashSet을 사용해 수정 중인 행을 관리하고, 업데이트 버튼을 클릭할 때 해당 행들을 업데이트한 후 잠금을 해제할 수 있습니다.
Data Model

csharp

public class YourDataModel : INotifyPropertyChanged
{
    private bool isLocked;
    // 기타 필드들...

    public bool IsLocked
    {
        get => isLocked;
        set
        {
            isLocked = value;
            OnPropertyChanged(nameof(IsLocked));
        }
    }
    // INotifyPropertyChanged 구현...
}

MainWindow.xaml.cs

csharp

private ObservableCollection<YourDataModel> YourDataCollection = new ObservableCollection<YourDataModel>();
private HashSet<int> LockedRows = new HashSet<int>();

public MainWindow()
{
    InitializeComponent();
    gridControl.ItemsSource = YourDataCollection;
}

private void LockRow(int rowHandle)
{
    if (rowHandle >= 0 && rowHandle < YourDataCollection.Count)
    {
        YourDataCollection[rowHandle].IsLocked = true;
        LockedRows.Add(rowHandle);
    }
}

private void UpdateAndUnlockRows()
{
    foreach (var rowHandle in LockedRows)
    {
        // DB 업데이트 로직
        YourDataCollection[rowHandle].IsLocked = false;
    }
    LockedRows.Clear();
}

private void UpdateButton_Click(object sender, RoutedEventArgs e)
{
    UpdateAndUnlockRows();
}

private void tableView_ShowingEditor(object sender, ShowingEditorEventArgs e)
{
    var item = gridControl.GetRow(e.RowHandle) as YourDataModel;
    if (item != null && item.IsLocked)
    {
        e.Cancel = true;
    }
}

XAML

xaml

<dxg:GridControl Name="gridControl">
    <dxg:GridControl.View>
        <dxg:TableView ShowingEditor="tableView_ShowingEditor" />
    </dxg:GridControl.View>
</dxg:GridControl>
<Button Content="Update" Click="UpdateButton_Click"/>

이 구조에서는 LockRow 함수를 사용하여 선택한 행을 잠근 다음 LockedRows HashSet에 추가합니다. UpdateAndUnlockRows 함수를 통해 DB 업데이트 후 LockedRows에 있는 모든 행의 잠금을 해제합니다.

버튼 클릭 또는 다른 이벤트로 LockRow와 UpdateAndUnlockRows 함수를 적절히 호출하면 요구 사항을 충족시킬 수 있을 것입니다.
