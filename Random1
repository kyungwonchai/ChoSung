후에도 유지
✅ 토/일요일 & 공휴일 기본적으로 노란색 (쉬는 날) → 사용자가 수정 가능
✅ 현재 월이 변경되면 자동으로 해당 월의 데이터 로딩
✅ 쉬는 날이면 모니터 자동 OFF, 평일에는 항상 ON
✅ MVVM 패턴 완벽 준수 → 코드 가독성 향상
✅ UI 깔끔하게 정리 (불필요한 요소 제거, 직관적인 UX)

📌 프로젝트 구조
scss
코드 복사
📂 MonitorControlApp
 ├── 📂 ViewModels
 │    ├── MainViewModel.cs (비즈니스 로직)
 ├── 📂 Views
 │    ├── MainWindow.xaml (UI)
 ├── 📂 Models
 │    ├── HolidayModel.cs (휴일 데이터 관리)
 ├── 📂 Data
 │    ├── (YYYY-MM.dat) (각 연월별 데이터 저장)
 ├── App.xaml
 ├── MainWindow.xaml.cs (MainViewModel과 연결)
 ├── Program.cs (진입점)
🔥 1️⃣ MainViewModel.cs (비즈니스 로직)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows.Input;
using System.Globalization;

namespace MonitorControlApp.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private static readonly int WM_SYSCOMMAND = 0x0112;
        private static readonly int SC_MONITORPOWER = 0xF170;
        private static readonly int MONITOR_ON = -1;
        private static readonly int MONITOR_OFF = 2;
        private bool _isMonitorOff = false;
        private readonly string _dataPath = "Data";
        private DateTime _selectedMonth;

        public ObservableCollection<DateTime> Holidays { get; set; }
        public ICommand ToggleHolidayCommand { get; }
        public ICommand CheckMonitorCommand { get; }
        public ICommand ChangeMonthCommand { get; }

        public DateTime SelectedMonth
        {
            get => _selectedMonth;
            set
            {
                _selectedMonth = value;
                LoadHolidays(_selectedMonth.Year, _selectedMonth.Month);
                OnPropertyChanged(nameof(SelectedMonth));
            }
        }

        public MainViewModel()
        {
            Holidays = new ObservableCollection<DateTime>();
            ToggleHolidayCommand = new RelayCommand<DateTime>(ToggleHoliday);
            CheckMonitorCommand = new RelayCommand(CheckMonitorState);
            ChangeMonthCommand = new RelayCommand<DateTime>(date => SelectedMonth = date);
            SelectedMonth = DateTime.Today;
        }

        private void LoadHolidays(int year, int month)
        {
            Holidays.Clear();
            string fileName = $"{_dataPath}/{year}-{month:D2}.dat";

            if (!Directory.Exists(_dataPath))
                Directory.CreateDirectory(_dataPath);

            if (File.Exists(fileName))
            {
                var savedDates = File.ReadAllLines(fileName)
                                     .Select(date => DateTime.ParseExact(date, "yyyy-MM-dd", CultureInfo.InvariantCulture));
                foreach (var date in savedDates)
                {
                    Holidays.Add(date);
                }
            }
            else
            {
                foreach (var date in GetDefaultHolidays(year, month))
                {
                    Holidays.Add(date);
                }
                SaveHolidays(fileName);
            }

            OnPropertyChanged(nameof(Holidays));
        }

        private List<DateTime> GetDefaultHolidays(int year, int month)
        {
            var holidays = new List<DateTime>();

            for (int day = 1; day <= DateTime.DaysInMonth(year, month); day++)
            {
                DateTime date = new DateTime(year, month, day);
                if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
                {
                    holidays.Add(date);
                }
            }

            // 공휴일 추가 (예제: 1월 1일, 12월 25일)
            if (month == 1) holidays.Add(new DateTime(year, 1, 1));
            if (month == 12) holidays.Add(new DateTime(year, 12, 25));

            return holidays;
        }

        private void ToggleHoliday(DateTime date)
        {
            string fileName = $"{_dataPath}/{date.Year}-{date.Month:D2}.dat";

            if (Holidays.Contains(date))
            {
                Holidays.Remove(date);
            }
            else
            {
                Holidays.Add(date);
            }

            SaveHolidays(fileName);
            OnPropertyChanged(nameof(Holidays));
        }

        private void SaveHolidays(string fileName)
        {
            File.WriteAllLines(fileName, Holidays.Select(date => date.ToString("yyyy-MM-dd")));
        }

        private void CheckMonitorState()
        {
            if (Holidays.Contains(DateTime.Today))
            {
                if (!_isMonitorOff)
                {
                    TurnMonitorOff();
                }
            }
            else
            {
                if (_isMonitorOff)
                {
                    TurnMonitorOn();
                }
            }
        }

        private void TurnMonitorOn()
        {
            SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_ON);
            _isMonitorOff = false;
        }

        private void TurnMonitorOff()
        {
            SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_OFF);
            _isMonitorOff = true;
        }

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr GetDesktopWindow();

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
🔥 2️⃣ MainWindow.xaml (UI)
xml
코드 복사
<Window x:Class="MonitorControlApp.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:MonitorControlApp.ViewModels"
        Title="모니터 자동 ON/OFF" Height="400" Width="600">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <Calendar Name="CalendarControl" 
                  SelectedDatesChanged="CalendarControl_SelectedDatesChanged"
                  DisplayModeChanged="CalendarControl_DisplayModeChanged"
                  DisplayMode="Month"/>
    </Grid>
</Window>
🔥 3️⃣ MainWindow.xaml.cs (달력 이벤트 연결)
csharp
코드 복사
using System;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using MonitorControlApp.ViewModels;

namespace MonitorControlApp.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel ViewModel => DataContext as MainViewModel;

        public MainWindow()
        {
            InitializeComponent();
            HighlightHolidays();
        }

        private void HighlightHolidays()
        {
            CalendarControl.SelectedDates.Clear();
            foreach (var date in ViewModel.Holidays)
            {
                CalendarControl.SelectedDates.Add(date);
            }
        }

        private void CalendarControl_SelectedDatesChanged(object sender, SelectionChangedEventArgs e)
        {
            foreach (var date in e.AddedItems.OfType<DateTime>())
            {
                ViewModel.ToggleHoliday(date);
            }
            HighlightHolidays();
        }

        private void CalendarControl_DisplayModeChanged(object sender, CalendarModeChangedEventArgs e)
        {
            ViewModel.SelectedMonth = CalendarControl.DisplayDate;
            HighlightHolidays();
        }
    }
}