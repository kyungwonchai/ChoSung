네, 알겠습니다. .NET Framework 4.6 이상을 대상으로 하는 Windows Forms 데스크톱 애플리케이션으로 코드를 작성해 드리겠습니다.

이 방법은 실행 시 간단한 창이 나타나고, 버튼을 클릭하면 브라우저 창 두 개를 화면 좌우에 정렬한 후 스스로 종료되는, 사용자가 원했던 '단일 exe'의 완벽한 형태입니다.

1단계: 프로젝트 생성 (.NET Framework 확인)
Visual Studio를 실행하고 '새 프로젝트 만들기'를 클릭합니다.
검색창에 Windows Forms 앱을 검색하고, **Windows Forms 앱 (.NET Framework)**이라고 명시된 C# 템플릿을 선택합니다. (중요: 그냥 'Windows Forms 앱'이 아닌 '.NET Framework'가 붙은 것을 선택해야 합니다.)
프로젝트 이름을 지정하고, 다음 화면에서 프레임워크 버전을 .NET Framework 4.6 이상으로 설정한 후 '만들기'를 클릭합니다.
2단계: UI 디자인 (버튼 추가)
프로젝트가 생성되면 Form1.cs [디자인] 창이 나타납니다.
왼쪽의 '도구 상자(Toolbox)'에서 Button 컨트롤을 찾아 마우스로 끌어 Form1 창 위에 올려놓습니다.
버튼을 선택하고 오른쪽 아래 '속성(Properties)' 창에서 Text를 브라우저 실행 등으로 변경합니다. (Name)은 launchButton으로 변경하겠습니다.
(선택 사항) Label 컨트롤을 추가하여 상태 메시지를 표시할 수 있습니다. (Name)을 statusLabel로 변경합니다.
3단계: Form1.cs 코드 작성
디자인 창에서 방금 추가한 버튼을 더블 클릭하면 Form1.cs 코드 파일이 열리면서 launchButton_Click 이벤트 핸들러가 자동으로 생성됩니다. 아래 코드를 Form1.cs 파일 전체에 덮어쓰거나 필요한 부분을 복사해서 붙여넣으세요.

C#

using System;
using System.Diagnostics;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading.Tasks; // async/await 사용을 위해 추가
using System.Windows.Forms;

namespace WinFormsBrowserLauncher
{
    public partial class Form1 : Form
    {
        // Windows API 함수 선언 (창 위치/크기 조절)
        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool MoveWindow(IntPtr hWnd, int X, int Y, int nWidth, int nHeight, bool bRepaint);

        public Form1()
        {
            InitializeComponent();
        }

        // 버튼 클릭 이벤트 핸들러 (async 키워드 추가)
        private async void launchButton_Click(object sender, EventArgs e)
        {
            // 💡 1. 여기에 두 개의 웹 주소를 입력하세요.
            string urlLeft = "https://www.google.com";
            string urlRight = "https://www.naver.com";

            // UI 업데이트 및 비활성화 (중복 실행 방지)
            launchButton.Enabled = false;
            statusLabel.Text = "브라우저를 실행하고 정렬하는 중입니다...";

            // 2. 주 모니터 해상도 가져오기
            Rectangle screen = Screen.PrimaryScreen.Bounds;

            // 3. 브라우저 실행 및 위치 조정을 비동기적으로 수행
            // await를 사용하여 UI가 멈추지 않고 작업이 완료되기를 기다립니다.
            await LaunchAndPositionBrowserAsync(urlLeft, 0, 0, screen.Width / 2, screen.Height);
            await LaunchAndPositionBrowserAsync(urlRight, screen.Width / 2, 0, screen.Width / 2, screen.Height);

            statusLabel.Text = "완료되었습니다! 2초 후에 프로그램을 종료합니다.";
            
            // 4. 잠시 후 애플리케이션 자동 종료
            await Task.Delay(2000); // 2초 대기
            this.Close(); // 폼 닫기 (프로그램 종료)
        }

        /// <summary>
        /// 브라우저를 비동기적으로 실행하고 창 위치를 조정하는 함수
        /// </summary>
        private async Task<bool> LaunchAndPositionBrowserAsync(string url, int x, int y, int width, int height)
        {
            try
            {
                var psi = new ProcessStartInfo(url) { UseShellExecute = true };
                Process process = Process.Start(psi);

                // 프로세스가 메인 창 핸들을 가질 때까지 비동기적으로 대기
                int timeoutMilliseconds = 8000; // 최대 8초 대기
                var stopwatch = Stopwatch.StartNew();
                while (process.MainWindowHandle == IntPtr.Zero && stopwatch.ElapsedMilliseconds < timeoutMilliseconds)
                {
                    await Task.Delay(100); // UI 스레드를 차단하지 않고 0.1초 대기
                    process.Refresh();
                }

                if (process.MainWindowHandle != IntPtr.Zero)
                {
                    MoveWindow(process.MainWindowHandle, x, y, width, height, true);
                    return true;
                }
                else
                {
                    statusLabel.Text = $"{url} 창을 찾는 데 실패했습니다.";
                    return false;
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"오류 발생: {ex.Message}");
                return false;
            }
        }
    }
}
코드 주요 설명
async void launchButton_Click: async 키워드를 사용하여 버튼 클릭 이벤트 내에서 await를 사용할 수 있게 합니다. 이 덕분에 브라우저가 실행되고 위치를 찾는 동안에도 프로그램 창이 '응답 없음' 상태가 되지 않습니다.
await Task.Delay(100): 기존의 Thread.Sleep 대신 Task.Delay를 사용하여 UI를 멈추지 않고 잠시 기다립니다. 데스크톱 앱에서는 이 방식이 훨씬 더 좋습니다.
this.Close(): 모든 작업이 완료된 후 폼(프로그램)이 자동으로 종료되도록 하여, 사용자가 원하는 '실행기'처럼 동작하게 합니다.
실행 파일(.exe) 만들기
상단 메뉴에서 빌드(Build) > 솔루션 빌드(Build Solution)를 클릭합니다.
솔루션 탐색기에서 프로젝트 이름에 마우스 오른쪽 클릭 > 파일 탐색기에서 폴더 열기를 선택합니다.
bin\Debug 또는 bin\Release 폴더로 이동하면 원하는 .exe 파일을 찾을 수 있습니다. 이 파일을 바탕화면 등에 놓고 더블 클릭하여 사용할 수 있습니다.
