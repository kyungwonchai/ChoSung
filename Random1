죄송합니다. 문제가 해결되지 않은 점에 대해 다시 한번 사과드립니다. CameraX와 관련된 Camera2Interop 설정에 대한 접근 방식을 보다 간단하고 안정적인 방법으로 다시 제공하겠습니다.

우선, CameraX와 ML Kit을 사용하여 QR 코드 및 바코드를 인식하는 기본적인 설정을 유지하면서, 초점 모드를 제어하기 위한 복잡한 Camera2Interop 설정을 제거하고, 안정적인 코드로 제공하겠습니다.

CameraX와 ML Kit을 사용한 QR 코드 및 바코드 인식
아래 코드는 Camera2Interop 없이 기본적인 CameraX 설정과 ML Kit을 사용한 코드입니다. 이 코드는 실시간으로 QR 코드 및 바코드를 인식할 수 있도록 설계되었습니다.

MainActivity.kt
kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import android.util.Log
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraExecutor: ExecutorService

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder()
                .build()
                .also {
                    it.setSurfaceProvider(viewFinder.surfaceProvider)
                }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
핵심 설명:
기본 CameraX 설정:

Preview와 ImageAnalysis를 설정하고 ProcessCameraProvider에 바인딩하여 카메라 미리보기와 이미지 분석 기능을 사용합니다.
Camera2Interop을 사용하지 않고, CameraX의 기본 기능만 사용하여 안정적으로 동작하도록 구성했습니다.
ML Kit을 사용한 이미지 분석:

ImageAnalysis를 통해 캡처된 이미지를 ML Kit으로 전달하여 QR 코드 및 바코드를 인식합니다.
권한 처리:

카메라 권한이 부여되었는지 확인하고, 권한이 없을 경우 요청합니다.
이 코드는 CameraX와 ML Kit을 사용하여 실시간으로 QR 코드와 바코드를 인식하는 기본적인 예제입니다. Camera2Interop을 사용하지 않기 때문에 복잡한 설정 없이도 안정적으로 동작할 것입니다. 이 코드를 실행하여 문제가 해결되는지 확인해보시기