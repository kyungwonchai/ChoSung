죄송합니다. 제가 당연히 C#으로 요청하신 것으로 이해했어야 했는데, 파이썬으로 먼저 제안해 드린 점 사과드립니다. 사용자의 개발 환경을 더 세심하게 고려했어야 합니다. 바로 C# .NET Framework 4.7.2 기반의 Windows 서비스 코드로 작성해 드리겠습니다.

아래의 안내는 Visual Studio를 사용하여 C# Windows 서비스를 만드는 전체 과정입니다.

## 1. 프로젝트 생성
Visual Studio를 열고 '새 프로젝트 만들기'를 선택합니다.

프로젝트 템플릿 검색창에 **'Windows 서비스(.NET Framework)'**를 검색하여 선택합니다.

프로젝트 이름(예: TimestampService)과 위치를 지정하고, .NET Framework 4.7.2를 선택한 후 '만들기'를 클릭합니다.

## 2. 서비스 코드 작성 (Service1.cs)
프로젝트가 생성되면 Service1.cs 파일이 열립니다. 파일 이름을 TimestampService.cs 등으로 변경하는 것을 권장합니다. 아래 코드를 전체 복사하여 붙여넣으세요. 코드 상단의 CONFIG 섹션은 반드시 실제 환경에 맞게 수정해야 합니다.

C#

// TimestampService.cs

using System;
using System.Configuration.Install;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;

namespace TimestampService
{
    public partial class TimestampService : ServiceBase
    {
        #region CONFIGURATION
        // ==============================================================================
        // 설정 (사용자 환경에 맞게 이 부분을 수정하세요)
        // ==============================================================================
        private static class Config
        {
            // --- 데이터베이스 설정 ---
            public const string DbServer = "YOUR_DB_SERVER_ADDRESS"; // 예: "192.168.1.100" 또는 "SERVERNAME\\SQLEXPRESS"
            public const string DbName = "bbb";
            public const string DbUser = "YOUR_DB_USERNAME";
            public const string DbPassword = "YOUR_DB_PASSWORD";
            public const string DbTable = "tableccc";

            // --- 폴더 경로 설정 ---
            public const string RemoteBaseFolder = "othersystem";
            public const string ProviewerFolder = "proviewer";
            public const string DataFolder = "data";
            public const string MachinePrefix = "machine";
            public const string LanePrefix = "Lane";

            // --- 서비스 및 소켓 설정 ---
            public const int SocketPort = 8312;
            public const double CheckIntervalSeconds = 60.0;
        }
        #endregion

        private System.Timers.Timer _timer;
        private TcpListener _listener;
        private CancellationTokenSource _cancellationTokenSource;
        
        // 스레드 간 안전한 데이터 공유를 위한 변수
        private static long _latestTimestamp = 0; // Unix 타임스탬프 (UTC)
        private static readonly object _lock = new object();

        public TimestampService()
        {
            InitializeComponent();
            this.ServiceName = "TimestampSocketService";
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                // 주기적으로 타임스탬프를 갱신하는 타이머 설정
                _timer = new System.Timers.Timer(Config.CheckIntervalSeconds * 1000);
                _timer.Elapsed += OnTimerElapsed;
                _timer.AutoReset = true;
                _timer.Start();
                
                // 서비스 시작 시 즉시 한 번 실행
                Task.Run(() => UpdateTimestamp());

                // 소켓 리스너를 별도 스레드에서 시작
                _cancellationTokenSource = new CancellationTokenSource();
                Task.Run(() => StartSocketListener(_cancellationTokenSource.Token));
            }
            catch (Exception ex)
            {
                EventLog.WriteEntry(this.ServiceName, $"서비스 시작 중 심각한 오류 발생: {ex.Message}", EventLogEntryType.Error);
                throw;
            }
        }
        
        protected override void OnStop()
        {
            _timer?.Stop();
            _timer?.Dispose();
            _cancellationTokenSource?.Cancel();
            _listener?.Stop();
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            UpdateTimestamp();
        }

        private void UpdateTimestamp()
        {
            try
            {
                string localIp = GetLocalIPAddress();
                if (string.IsNullOrEmpty(localIp)) return;

                string targetIp = GetTargetIpFromDb(localIp);
                if (string.IsNullOrEmpty(targetIp)) return;

                long? timestamp = FindLatestLaneFolderTimestamp(targetIp);
                
                lock (_lock)
                {
                    _latestTimestamp = timestamp ?? 0;
                }
            }
            catch (Exception ex)
            {
                EventLog.WriteEntry(this.ServiceName, $"타임스탬프 업데이트 실패: {ex.Message}", EventLogEntryType.Warning);
            }
        }

        private async Task StartSocketListener(CancellationToken token)
        {
            try
            {
                _listener = new TcpListener(IPAddress.Any, Config.SocketPort);
                _listener.Start();
                EventLog.WriteEntry(this.ServiceName, $"소켓 서버가 포트 {Config.SocketPort}에서 시작되었습니다.", EventLogEntryType.Information);

                while (!token.IsCancellationRequested)
                {
                    TcpClient client = await _listener.AcceptTcpClientAsync();
                    // 각 클라이언트를 별도의 태스크로 처리하여 리스너가 차단되지 않도록 함
                    _ = Task.Run(() => HandleClient(client), token);
                }
            }
            catch (Exception ex)
            {
                EventLog.WriteEntry(this.ServiceName, $"소켓 리스너 오류: {ex.Message}", EventLogEntryType.Error);
            }
        }
        
        private void HandleClient(TcpClient client)
        {
            try
            {
                using (var stream = client.GetStream())
                {
                    long currentTimestamp;
                    lock (_lock)
                    {
                        currentTimestamp = _latestTimestamp;
                    }

                    string response = (currentTimestamp > 0) ? currentTimestamp.ToString() : "ERROR: Timestamp not available";
                    byte[] data = Encoding.UTF8.GetBytes(response);
                    stream.Write(data, 0, data.Length);
                }
            }
            catch (Exception ex)
            {
                 EventLog.WriteEntry(this.ServiceName, $"클라이언트 처리 중 오류: {ex.Message}", EventLogEntryType.Warning);
            }
            finally
            {
                client.Close();
            }
        }

        private string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == AddressFamily.InterNetwork)
                {
                    return ip.ToString();
                }
            }
            throw new Exception("로컬 IPv4 주소를 찾을 수 없습니다.");
        }

        private string GetTargetIpFromDb(string localIp)
        {
            string connectionString = $"Server={Config.DbServer};Database={Config.DbName};User Id={Config.DbUser};Password={Config.DbPassword};";
            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                string query = $"SELECT TargetIP FROM {Config.DbTable} WHERE SourceIP = @LocalIP";
                using (var command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@LocalIP", localIp);
                    object result = command.ExecuteScalar();
                    return result?.ToString();
                }
            }
        }

        private long? FindLatestLaneFolderTimestamp(string targetIp)
        {
            var dataPath = new DirectoryInfo($"\\\\{targetIp}\\{Config.RemoteBaseFolder}\\{Config.ProviewerFolder}\\{Config.DataFolder}");

            if (!dataPath.Exists) return null;

            var latestMachineDir = dataPath.EnumerateDirectories(Config.MachinePrefix + "*")
                .Select(dir => new { Dir = dir, Num = int.TryParse(dir.Name.Substring(Config.MachinePrefix.Length), out int n) ? n : -1 })
                .Where(x => x.Num != -1)
                .OrderByDescending(x => x.Num)
                .FirstOrDefault()?.Dir;

            if (latestMachineDir == null) return null;

            var latestLaneFile = latestMachineDir.EnumerateDirectories(Config.LanePrefix + "*", SearchOption.AllDirectories)
                .OrderByDescending(f => f.LastWriteTimeUtc)
                .FirstOrDefault();

            if (latestLaneFile != null)
            {
                // DateTime을 Unix 타임스탬프로 변환하여 반환
                return new DateTimeOffset(latestLaneFile.LastWriteTimeUtc).ToUnixTimeSeconds();
            }

            return null;
        }
    }
}
## 3. 서비스 설치 관리자 추가
서비스를 Windows에 등록하려면 설치 관리자 클래스가 필요합니다.

솔루션 탐색기에서 TimestampService.cs 파일을 디자인 보기로 엽니다 (마우스 오른쪽 클릭 -> '디자이너 보기').

디자인 화면의 회색 배경에서 마우스 오른쪽 버튼을 클릭하고 **'설치 관리자 추가'**를 선택합니다.

ProjectInstaller.cs 파일이 자동으로 생성되고 serviceProcessInstaller1과 serviceInstaller1 두 개의 컴포넌트가 추가됩니다.

serviceInstaller1을 선택하고 속성 창에서 다음과 같이 설정합니다.

ServiceName: TimestampSocketService (코드와 동일하게)

DisplayName: Timestamp Provider Socket Service

Description: 지정된 폴더의 최신 수정 시간을 소켓으로 제공하는 서비스

StartType: Automatic (PC 부팅 시 자동 시작)

serviceProcessInstaller1을 선택하고 속성 창에서 Account를 LocalSystem으로 변경합니다. (네트워크 공유 폴더 접근 권한이 있는 계정으로 설정해야 할 수도 있습니다.)

## 4. 컴파일 및 서비스 설치
솔루션을 빌드합니다 (메뉴 -> 빌드 -> 솔루션 빌드).

**'Visual Studio 개발자 명령 프롬프트'**를 관리자 권한으로 실행합니다.

명령 프롬프트에서 프로젝트의 빌드 출력 경로로 이동합니다.

DOS

cd C:\path\to\your\project\TimestampService\bin\Debug
아래 명령어를 사용하여 서비스를 설치합니다.

DOS

InstallUtil.exe TimestampService.exe
## 5. 서비스 시작 및 관리
서비스 시작:

DOS

net start TimestampSocketService
서비스 중지:

DOS

net stop TimestampSocketService
서비스 제거:

DOS

InstallUtil.exe /u TimestampService.exe
services.msc (서비스 관리 콘솔)을 실행하여 GUI 환경에서 서비스 상태를 확인하고 시작/중지할 수도 있습니다.

## 6. 클라이언트 테스트 코드 (C# 콘솔 앱)
서비스가 잘 작동하는지 확인하기 위한 C# 콘솔 애플리케이션 예제입니다.

C#

using System;
using System.Net.Sockets;
using System.Text;

class Program
{
    static void Main(string[] args)
    {
        string serverIp = "127.0.0.1"; // 서비스가 실행 중인 PC의 IP
        int port = 8312;             // 서비스 포트

        try
        {
            using (var client = new TcpClient(serverIp, port))
            using (var stream = client.GetStream())
            {
                Console.WriteLine($"서버({serverIp}:{port})에 연결되었습니다.");

                byte[] buffer = new byte[1024];
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                string response = Encoding.UTF8.GetString(buffer, 0, bytesRead);

                Console.WriteLine($"서버 응답: {response}");

                if (long.TryParse(response, out long unixTimestamp))
                {
                    DateTimeOffset dateTimeOffset = DateTimeOffset.FromUnixTimeSeconds(unixTimestamp);
                    Console.WriteLine($"변환된 시간 (UTC): {dateTimeOffset.UtcDateTime:yyyy-MM-dd HH:mm:ss}");
                    Console.WriteLine($"변환된 시간 (Local): {dateTimeOffset.LocalDateTime:yyyy-MM-dd HH:mm:ss}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"오류 발생: {ex.Message}");
        }

        Console.WriteLine("아무 키나 누르면 종료됩니다...");
        Console.ReadKey();