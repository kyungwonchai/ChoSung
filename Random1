GSP_GUMI.Properties.ResLanguages.resources가 어셈블리에 제대로 포함되지 않았다는 것처럼 보인다면" 몇 가지를 확인해 볼 필요가 있습니다. 지금 솔루션 탐색기에 Properties 폴더 안에 ResLanguages.resx 파일이 있는 것으로 보이지만, 어셈블리에 제대로 임베드되지 않아서 발생하는 문제일 수 있습니다. 아래 사항들을 확인해주세요:

네임스페이스 및 리소스 경로 확인: 리소스를 불러올 때 사용한 네임스페이스와 파일 경로가 정확히 일치하는지 확인해보세요. 예를 들어:

csharp
코드 복사
ResourceManager rm = new ResourceManager("MGSP_GUMI.Properties.ResLanguages", typeof(YourClass).Assembly);
위 코드에서 "MGSP_GUMI.Properties.ResLanguages"는 네임스페이스를 포함한 경로입니다. 여기서 네임스페이스가 잘못되었거나 누락된 경우, 리소스를 찾을 수 없다고 나올 수 있습니다. 프로젝트 네임스페이스와 파일 위치가 정확하게 맞아야 합니다.

리소스 파일의 빌드 동작 확인: .resx 파일의 속성 중에서 Build Action이 Embedded Resource로 설정되어 있는지 확인해야 합니다. 만약 Embedded Resource가 아니라면, 어셈블리에 포함되지 않아서 오류가 발생할 수 있습니다.

방법:

솔루션 탐색기에서 ResLanguages.resx 파일을 선택합니다.
속성 창에서 Build Action을 Embedded Resource로 변경합니다.
중립 문화권 리소스가 존재하는지 확인: 특정 문화권(예: ko)에 대한 리소스를 사용하려면, 항상 기본 중립 문화권 리소스도 필요합니다. 예를 들어:

ResLanguages.resx (기본, 중립 문화권 리소스 파일)
ResLanguages.ko.resx (한국어 리소스 파일)
여기서 ResLanguages.resx 파일이 없다면, ResLanguages.ko.resx 파일을 사용할 때 어셈블리가 올바르게 로드되지 않을 수 있습니다. 따라서 기본 리소스 파일인 ResLanguages.resx도 반드시 포함되어 있어야 합니다.

리소스 네임스페이스와 프로젝트 네임스페이스 일치 여부: 프로젝트의 네임스페이스와 리소스 파일의 네임스페이스가 일치하지 않으면 리소스를 로드하지 못할 수 있습니다. 따라서 .resx 파일이 속해 있는 프로젝트 네임스페이스와 동일한 경로로 접근하는지 확인하세요.

다시 빌드하기: 리소스 파일이 변경된 경우 솔루션을 클린(Clean) 하고, 다시 빌드(Build) 해보는 것이 좋습니다. 이렇게 하면 프로젝트가 최신 상태로 새로 빌드되고, 변경된 리소스 파일도 올바르게 포함되었는지 확인할 수 있습니다.

리소스 파일의 이름 확인: 리소스 파일의 이름을 사용할 때 대소문자도 구분됩니다. 따라서 리소스 파일 이름을 사용하는 부분에서 정확하게 입력되어 있는지 확인해 보세요 (ResLanguages vs Reslanguages 같은 부분에서 문제가 생길 수 있습니다).

코드에서 리소스 로드 방식 확인: 다음은 리소스를 로드하는 일반적인 코드 예시입니다:

csharp
코드 복사
using System.Globalization;
using System.Resources;

ResourceManager rm = new ResourceManager("MGSP_GUMI.Properties.ResLanguages", typeof(YourClass).Assembly);
CultureInfo culture = new CultureInfo("ko");
string value = rm.GetString("YourKeyName", culture);
여기서 "MGSP_GUMI.Properties.ResLanguages"는 네임스페이스와 리소스 파일 경로를 정확히 나타내야 합니다.