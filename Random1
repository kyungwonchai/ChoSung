 C# 코드입니다. 프로그램은 다음 방식으로 작동합니다:

초기 동작:

C:\MountCrbShare 폴더에 파일이 없으면, 있는 모든 파일을 복사합니다.
복사 시 마지막 쓰기 시간을 기준으로 파일 이름을 지정합니다.
추가 동작:

이후부터는 C:\MountCrbShare에 저장된 가장 최근의 파일 시간을 기준으로 새로운 파일을 감지하여 복사합니다.
전체 코드 (C#)
csharp
코드 복사
using System;
using System.IO; // 시스템 IO 명시
using System.Linq;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;

namespace CrbFileMonitor
{
    public partial class MainWindow : Window
    {
        private readonly string[] PossibleDrives = { @"Y:\", @"X:\", @"Z:\" }; // 검색할 드라이브 목록
        private const string DestinationDirectory = @"C:\MountCrbShare"; // 복사 대상 디렉토리
        private Timer _timer;
        private readonly object _logLock = new object(); // 로그 동기화용 Lock
        private DateTime _lastCopiedTime = DateTime.MinValue; // 마지막 복사된 파일 시간

        public MainWindow()
        {
            InitializeComponent();
            InitializeFileMonitor();
        }

        /// <summary>
        /// 파일 모니터링 초기화
        /// </summary>
        private void InitializeFileMonitor()
        {
            // 대상 폴더가 없으면 생성
            if (!Directory.Exists(DestinationDirectory))
            {
                Directory.CreateDirectory(DestinationDirectory);
                AddLog($"폴더 생성: {DestinationDirectory}");
            }
            else
            {
                // MountCrbShare 폴더에서 가장 최근 파일의 마지막 쓰기 시간 확인
                var existingFiles = Directory.GetFiles(DestinationDirectory, "*", SearchOption.AllDirectories);
                if (existingFiles.Any())
                {
                    _lastCopiedTime = existingFiles
                        .Select(file => new FileInfo(file).LastWriteTime)
                        .Max(); // 가장 최근의 쓰기 시간
                }
                else
                {
                    // 폴더에 파일이 없으면 기본값으로 1년 전 시간 설정
                    _lastCopiedTime = DateTime.Now.AddYears(-1);
                }
            }

            // 타이머 설정 (1분 주기)
            _timer = new Timer(60000); // 60,000ms = 1분
            _timer.Elapsed += async (sender, e) => await MonitorFilesAsync();
            _timer.Start();

            AddLog("CRB 파일 모니터링 시작.");
        }

        /// <summary>
        /// 사용 가능한 첫 번째 드라이브 검색
        /// </summary>
        /// <returns>첫 번째 발견된 드라이브 경로 또는 null</returns>
        private string GetAvailableDrive()
        {
            foreach (var drive in PossibleDrives)
            {
                if (Directory.Exists(drive))
                {
                    return drive;
                }
            }
            return null; // 사용 가능한 드라이브 없음
        }

        /// <summary>
        /// 파일 검색 및 복사
        /// </summary>
        private async Task MonitorFilesAsync()
        {
            string sourceDirectory = GetAvailableDrive();

            if (sourceDirectory == null)
            {
                AddLog("사용 가능한 드라이브가 없습니다. 작업을 건너뜁니다.");
                return;
            }

            try
            {
                // 사용 가능한 드라이브에서 .crb 파일 검색 (하위 폴더 포함)
                string[] crbFiles = Directory.GetFiles(sourceDirectory, "*.crb", SearchOption.AllDirectories);

                foreach (var file in crbFiles)
                {
                    FileInfo fileInfo = new FileInfo(file);

                    // 새로운 파일만 처리
                    if (fileInfo.LastWriteTime <= _lastCopiedTime)
                        continue;

                    // 파일명 생성: 마지막 쓰기 시간 + 기존 파일명
                    string formattedTime = fileInfo.LastWriteTime.ToString("yyyyMMddHHmmss");

                    // 상대 경로 계산
                    string relativePath = fileInfo.DirectoryName.Replace(sourceDirectory, "").TrimStart(Path.DirectorySeparatorChar);
                    string destinationFolder = Path.Combine(DestinationDirectory, relativePath);

                    // 대상 폴더가 없으면 생성
                    if (!Directory.Exists(destinationFolder))
                    {
                        Directory.CreateDirectory(destinationFolder);
                        AddLog($"폴더 생성: {destinationFolder}");
                    }

                    // 파일 복사
                    string destinationPath = Path.Combine(destinationFolder, $"{formattedTime}_{fileInfo.Name}");
                    await Task.Run(() => File.Copy(file, destinationPath, true));

                    // 마지막 복사된 시간 업데이트
                    _lastCopiedTime = fileInfo.LastWriteTime;

                    AddLog($"파일 복사 완료: {destinationPath}");
                }

                if (crbFiles.All(file => new FileInfo(file).LastWriteTime <= _lastCopiedTime))
                {
                    AddLog("새로운 .crb 파일이 없습니다.");
                }
            }
            catch (Exception ex)
            {
                AddLog($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 로그 추가 (ListBox에 출력)
        /// </summary>
        /// <param name="message">로그 메시지</param>
        private void AddLog(string message)
        {
            string logEntry = $"[{DateTime.Now:yyyyMMdd HHmmss}] {message}";

            Dispatcher.Invoke(() =>
            {
                lock (_logLock)
                {
                    if (LogListBox.Items.Count >= 50)
                    {
                        LogListBox.Items.RemoveAt(0); // 오래된 로그 제거
                    }

                    LogListBox.Items.Add(logEntry); // 새 로그 추가
                }
            });
        }
    }
}
코드 설명
초기화 단계 (InitializeFileMonitor):

C:\MountCrbShare 폴더가 없으면 생성.