ntu 환경에서 Flask 애플리케이션을 설정하고 서비스로 등록하는 과정을 상세히 설명드리겠습니다. 다음 단계들을 따라 하시면 됩니다.

1. 필요한 패키지 설치 및 가상환경 설정
Python3, pip, virtualenv 설치
bash
코드 복사
sudo apt update
sudo apt install python3 python3-pip python3-venv
프로젝트 디렉토리 생성 및 가상환경 설정
bash
코드 복사
mkdir ~/my_flask_app
cd ~/my_flask_app
python3 -m venv venv
source venv/bin/activate
2. Flask 및 필요한 패키지 설치
bash
코드 복사
pip install flask pyodbc
3. Flask 애플리케이션 코드 작성
app.py 파일 생성
python
코드 복사
from flask import Flask, render_template, jsonify
import pyodbc
import datetime

app = Flask(__name__)

# MSSQL 데이터베이스 연결 설정
server = 'YOUR_SERVER'
database = 'YOUR_DATABASE'
username = 'YOUR_USERNAME'
password = 'YOUR_PASSWORD'
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'

def get_data():
    conn = pyodbc.connect(connection_string)
    cursor = conn.cursor()
    query = '''
    SELECT CLine, CMachine, CPCBTEMP, CMASKTEMP, CHUMID, CSORDER, CPAPER, CSOLVENT, CFILETIME
    FROM Table_MaskCleaning2
    '''
    cursor.execute(query)
    rows = cursor.fetchall()
    conn.close()

    data = []
    now = datetime.datetime.now()

    for row in rows:
        CLine, CMachine, CPCBTEMP, CMASKTEMP, CHUMID, CSORDER, CPAPER, CSOLVENT, CFILETIME = row
        diff_minutes = int((now - CFILETIME).total_seconds() / 60)
        data.append({
            'CLine': CLine,
            'CMachine': CMachine,
            'CPCBTEMP': CPCBTEMP,
            'CMASKTEMP': CMASKTEMP,
            'CHUMID': CHUMID,
            'CSORDER': CSORDER,
            'CPAPER': CPAPER,
            'CSOLVENT': CSOLVENT,
            'CFILETIME': CFILETIME,
            'DIFF': diff_minutes
        })

    return data

@app.route('/')
def index():
    data = get_data()
    return render_template('index.html', data=data)

@app.route('/refresh', methods=['GET'])
def refresh():
    data = get_data()
    return jsonify(data)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
templates/index.html 파일 생성
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Table Mask Cleaning</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        .yellow {
            background-color: yellow;
        }
        .orange {
            background-color: orange;
        }
    </style>
</head>
<body>
    <h1>Table Mask Cleaning</h1>
    <button onclick="refreshData()">Refresh</button>
    <table>
        <thead>
            <tr>
                <th>CLine</th>
                <th>CMachine</th>
                <th>CPCBTEMP</th>
                <th>CMASKTEMP</th>
                <th>CHUMID</th>
                <th>CSORDER</th>
                <th>CPAPER</th>
                <th>CSOLVENT</th>
                <th>CFILETIME</th>
                <th>DIFF</th>
            </tr>
        </thead>
        <tbody id="table-body">
            {% for row in data %}
            <tr class="{{ 'yellow' if row.DIFF > 10 else '' }}{{ 'orange' if row.DIFF > 480 else '' }}">
                <td>{{ row.CLine }}</td>
                <td>{{ row.CMachine }}</td>
                <td>{{ row.CPCBTEMP }}</td>
                <td>{{ row.CMASKTEMP }}</td>
                <td>{{ row.CHUMID }}</td>
                <td>{{ row.CSORDER }}</td>
                <td>{{ row.CPAPER }}</td>
                <td>{{ row.CSOLVENT }}</td>
                <td>{{ row.CFILETIME }}</td>
                <td>{{ row.DIFF }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <script>
        function refreshData() {
            fetch('/refresh')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('table-body');
                    tableBody.innerHTML = '';
                    data.forEach(row => {
                        const tr = document.createElement('tr');
                        tr.className = row.DIFF > 480 ? 'orange' : row.DIFF > 10 ? 'yellow' : '';
                        tr.innerHTML = `
                            <td>${row.CLine}</td>
                            <td>${row.CMachine}</td>
                            <td>${row.CPCBTEMP}</td>
                            <td>${row.CMASKTEMP}</td>
                            <td>${row.CHUMID}</td>
                            <td>${row.CSORDER}</td>
                            <td>${row.CPAPER}</td>
                            <td>${row.CSOLVENT}</td>
                            <td>${row.CFILETIME}</td>
                            <td>${row.DIFF}</td>
                        `;
                        tableBody.appendChild(tr);
                    });
                });
        }
    </script>
</body>
</html>
4. Gunicorn 설치 및 실행
bash
코드 복사
pip install gunicorn
gunicorn --bind 0.0.0.0:5000 app:app
5. Systemd 서비스 파일 작성
서비스 파일 생성
bash
코드 복사
sudo nano /etc/systemd/system/my_flask_app.service
서비스 파일 내용
ini
코드 복사
[Unit]
Description=Gunicorn instance to serve my_flask_app
After=network.target

[Service]
User=yourusername
Group=www-data
WorkingDirectory=/home/yourusername/my_flask_app
Environment="PATH=/home/yourusername/my_flask_app/venv/bin"
ExecStart=/home/yourusername/my_flask_app/venv/bin/gunicorn --workers 3 --bind unix:my_flask_app.sock -m 007 wsgi:app

[Install]
WantedBy=multi-user.target
6. Nginx 설정
Nginx 설치
bash
코드 복사
sudo apt install nginx
Nginx 설정 파일 작성
bash
코드 복사
sudo nano /etc/nginx/sites-available/my_flask_app
Nginx 설정 파일 내용
nginx
코드 복사
server {
    listen 80;
    server_name your_domain_or_IP;

    location / {
        include proxy_params;
        proxy_pass http://unix:/home/yourusername/my_flask_app/my_flask_app.sock;
    }
}
심볼릭 링크 생성 및 Nginx 재시작
bash
코드 복사
sudo ln -s /etc/nginx/sites-available/my_flask_app /etc/nginx/sites-enabled
sudo systemctl restart nginx
7. 서비스 시작 및 자동 시작 설정
bash
코드 복사
sudo systemctl start my_flask_app
sudo systemctl enable my_flask_app
이제 웹 애플리케이션이 서버에서 실행 중이며, 웹 브라우저에서 http://your_domain_or_IP를 통해 접근할 수 있습니다. 서비스가 자동으로 시작되며, Nginx가 요청을 Gun