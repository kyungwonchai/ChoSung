라즈베리파이에서 Python 스크립트를 서비스로 실행할 때 오류가 발생하는 경우, 서비스 로그를 확인하여 원인을 파악할 수 있습니다. 수동으로 python main.py를 실행할 때는 잘 되지만 서비스로 실행할 때 문제가 생기는 주요 원인으로는 환경 변수, 작업 디렉토리, 권한 등이 있습니다.

서비스 로그 상세 보기
**systemd**를 사용해 서비스를 관리하는 경우, 로그를 확인하는 가장 좋은 방법은 journalctl 명령어를 사용하는 것입니다.

서비스 이름 확인하기

가장 먼저, Python 스크립트가 등록된 서비스 이름을 알아야 합니다. 서비스 파일(.service)을 만들 때 [Unit] 섹션의 Description이나 ExecStart 라인을 통해 이름을 유추할 수 있습니다. 일반적으로는 my-python-app.service와 같은 형식입니다.

로그 확인 명령어

최근 로그 보기:
가장 간단하게 최근 로그를 보려면 다음 명령어를 사용합니다. [서비스이름] 부분에 실제 서비스 이름을 넣으세요.

Bash

sudo journalctl -u [서비스이름]
전체 로그 보기:
해당 서비스의 모든 로그를 처음부터 보고 싶다면 --no-pager 옵션을 사용합니다.

Bash

sudo journalctl -u [서비스이름] --no-pager
실시간 로그 추적:
서비스를 재시작하거나 실행하면서 실시간으로 로그를 확인하고 싶다면 -f (follow) 옵션을 사용합니다.

Bash

sudo journalctl -u [서비스이름] -f
로그에서 오류 찾기

로그를 확인하다 보면 Python 스크립트에서 발생한 **오류 메시지(traceback)**를 발견할 수 있습니다. Permission denied, No such file or directory, ImportError, ModuleNotFoundError와 같은 메시지를 중점적으로 찾아보세요.

문제 해결을 위한 체크리스트
로그 분석을 통해 문제의 원인을 파악한 후, 다음 사항들을 점검하여 해결할 수 있습니다.

작업 디렉토리 (WorkingDirectory) 확인:

서비스 파일(.service) 내의 [Service] 섹션에 WorkingDirectory가 올바르게 설정되어 있는지 확인하세요. 이 설정이 없으면 서비스는 종종 / (루트 디렉토리)에서 실행되어 스크립트가 필요한 파일을 찾지 못할 수 있습니다.

예시: WorkingDirectory=/home/pi/my_project

절대 경로 사용:

서비스 파일의 ExecStart 라인에 스크립트 경로를 절대 경로로 지정했는지 확인하세요. 상대 경로는 서비스 실행 시 예상치 못한 오류를 유발할 수 있습니다.

예시: ExecStart=/usr/bin/python3 /home/pi/my_project/main.py

권한 문제 (User) 확인:

systemd 서비스는 root 권한으로 실행되는 경우가 많습니다. 스크립트가 특정 사용자의 홈 디렉토리에 접근하거나 파일을 생성해야 하는 경우 권한 문제가 발생할 수 있습니다.

User=pi와 같이 User와 Group 설정을 추가하여 스크립트가 pi 사용자의 권한으로 실행되도록 지정하세요.

예시: User=pi

환경 변수 (Environment) 문제:

수동으로 실행할 때는 사용자의 환경 변수가 적용되지만, 서비스로 실행할 때는 그렇지 않습니다.

스크립트가 특정 환경 변수에 의존한다면, 서비스 파일에 Environment="PYTHONPATH=/path/to/modules"와 같이 직접 설정해 주어야 합니다.