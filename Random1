inForms DevExpress 22.2에서 RibbonForm의 RibbonPage 좌측에 MyMenu를 동적으로 추가, 삭제, 드래그 및 위치 이동할 수 있는 기능을 구현하려면, 몇 가지 단계로 작업해야 합니다. 또한, MyMenu 상태는 사용자의 PC에 저장되어야 하며, 프로그램이 다시 실행될 때 또는 버전이 변경되었을 때 불필요한 항목이 자동으로 삭제되도록 해야 합니다.

아래는 구현 과정의 상세한 설명과 코드 예시입니다.

1. RibbonForm 기본 설정
먼저, RibbonForm에 RibbonControl과 MyMenu용 RibbonPage를 추가합니다. MyMenu는 동적으로 추가할 수 있는 기능을 제공하는데, 이를 위해 RibbonPageGroup을 활용하여 메뉴 항목을 담습니다.

코드 예시:
csharp
코드 복사
public partial class MainForm : DevExpress.XtraBars.Ribbon.RibbonForm
{
    RibbonPage myMenuPage;  // MyMenu를 담을 페이지
    RibbonPageGroup myMenuGroup;  // MyMenu에 추가될 항목 그룹

    public MainForm()
    {
        InitializeComponent();
        InitializeMyMenu();  // MyMenu 초기화 함수 호출
    }

    private void InitializeMyMenu()
    {
        // MyMenu라는 이름의 RibbonPage를 생성
        myMenuPage = new RibbonPage("MyMenu");
        ribbonControl1.Pages.Insert(0, myMenuPage);  // 가장 좌측에 MyMenu를 추가

        // MyMenu에 동적 항목을 추가할 RibbonPageGroup 생성
        myMenuGroup = new RibbonPageGroup("MyMenu 항목");
        myMenuPage.Groups.Add(myMenuGroup);

        // 이전에 저장된 MyMenu 항목 불러오기
        LoadMyMenuItems();
    }
}
2. 메뉴 항목 동적 추가 및 삭제 기능
사용자가 특정 메뉴를 우클릭하여 MyMenu에 추가하거나, MyMenu에 추가된 항목을 우클릭하여 삭제할 수 있는 기능을 구현합니다.

2.1. 메뉴 항목 추가
우클릭 시 MyMenu에 항목을 추가할 수 있도록 PopupMenu를 생성합니다. 이 팝업 메뉴에는 "MyMenu에 추가" 버튼을 추가하여 클릭 시 항목이 추가되도록 합니다.

코드 예시:
csharp
코드 복사
PopupMenu addMenuPopup;  // 우클릭 시 표시되는 팝업 메뉴

private void InitializeAddMenuPopup()
{
    addMenuPopup = new PopupMenu();
    
    // "MyMenu에 추가"라는 버튼 생성
    BarButtonItem addToMyMenuButton = new BarButtonItem(ribbonControl1.Manager, "MyMenu에 추가");
    addToMyMenuButton.ItemClick += AddToMyMenuButton_ItemClick;
    
    // 팝업 메뉴에 버튼 추가
    addMenuPopup.ItemLinks.Add(addToMyMenuButton);
}

// "MyMenu에 추가" 버튼 클릭 시 실행될 함수
private void AddToMyMenuButton_ItemClick(object sender, ItemClickEventArgs e)
{
    // 우클릭된 메뉴 항목을 추가할 새 항목으로 생성
    BarButtonItem clickedItem = e.Item as BarButtonItem;
    BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, clickedItem.Caption);
    
    // MyMenu에 추가
    newMenuItem.ItemClick += MyMenuItem_ItemClick;
    myMenuGroup.ItemLinks.Add(newMenuItem);

    // MyMenu 상태 저장
    SaveMyMenuItems();
}
ribbonControl1_MouseDown 이벤트를 활용하여 사용자가 우클릭할 때 팝업 메뉴가 나타나도록 설정합니다.

코드 예시:
csharp
코드 복사
private void ribbonControl1_MouseDown(object sender, MouseEventArgs e)
{
    if (e.Button == MouseButtons.Right)
    {
        // 우클릭 시 팝업 메뉴 표시
        addMenuPopup.ShowPopup(Control.MousePosition);
    }
}
2.2. 메뉴 항목 삭제
MyMenu에 추가된 항목을 우클릭하여 삭제하는 기능도 팝업 메뉴로 처리합니다.

코드 예시:
csharp
코드 복사
PopupMenu removeMenuPopup;

private void InitializeRemoveMenuPopup()
{
    removeMenuPopup = new PopupMenu();
    
    // "MyMenu에서 삭제"라는 버튼 생성
    BarButtonItem removeFromMyMenuButton = new BarButtonItem(ribbonControl1.Manager, "MyMenu에서 삭제");
    removeFromMyMenuButton.ItemClick += RemoveFromMyMenuButton_ItemClick;

    // 팝업 메뉴에 버튼 추가
    removeMenuPopup.ItemLinks.Add(removeFromMyMenuButton);
}

// "MyMenu에서 삭제" 버튼 클릭 시 실행될 함수
private void RemoveFromMyMenuButton_ItemClick(object sender, ItemClickEventArgs e)
{
    BarButtonItem clickedItem = e.Item as BarButtonItem;

    // MyMenu에서 항목 삭제
    myMenuGroup.ItemLinks.Remove(clickedItem);

    // MyMenu 상태 저장
    SaveMyMenuItems();
}
3. MyMenu 상태 저장 및 불러오기
MyMenu의 상태를 사용자가 PC를 끄고 켜도 유지하기 위해, MyMenu에 있는 항목을 JSON 파일로 저장하고 불러오는 방법을 사용합니다.

3.1 MyMenu 항목 저장 함수
MyMenu에 있는 항목을 List<string> 형태로 저장한 후 JSON으로 변환하여 파일에 기록합니다.

코드 예시:
csharp
코드 복사
private void SaveMyMenuItems()
{
    // MyMenu에 있는 항목들의 캡션(이름)을 저장할 리스트 생성
    List<string> menuItems = new List<string>();
    foreach (BarItemLink item in myMenuGroup.ItemLinks)
    {
        menuItems.Add(item.Caption);
    }

    // 리스트를 JSON으로 변환
    string json = JsonConvert.SerializeObject(menuItems);
    
    // JSON을 파일로 저장
    File.WriteAllText("MyMenuState.json", json);
}
3.2 MyMenu 항목 불러오기 함수
프로그램 시작 시 MyMenu 항목을 JSON 파일에서 불러와 다시 MyMenu에 추가합니다.

코드 예시:
csharp
코드 복사
private void LoadMyMenuItems()
{
    if (File.Exists("MyMenuState.json"))
    {
        // 파일에서 JSON 읽기
        string json = File.ReadAllText("MyMenuState.json");

        // JSON을 리스트로 변환
        List<string> menuItems = JsonConvert.DeserializeObject<List<string>>(json);

        // 리스트에 있는 항목들을 MyMenu에 추가
        foreach (string caption in menuItems)
        {
            BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, caption);
            newMenuItem.ItemClick += MyMenuItem_ItemClick;
            myMenuGroup.ItemLinks.Add(newMenuItem);
        }
    }
}
4. 메뉴 항목 드래그 및 위치 변경
DevExpress의 RibbonControl은 Drag-and-Drop 기능을 지원하므로, 이를 사용해 MyMenu 항목을 드래그하여 위치를 변경할 수 있습니다. 위치가 변경될 때마다 상태를 저장하는 부분을 추가해야 합니다.

5. 버전 변경 시 불필요한 메뉴 항목 삭제
프로그램이 시작할 때, 저장된 메뉴 항목을 현재 프로그램의 유효한 메뉴 목록과 비교하여 삭제할 항목이 있다면 MyMenu에서 자동으로 제거합니다.

코드 예시:
csharp
코드 복사
private void CleanupObsoleteMenuItems(List<string> validItems)
{
    var toRemove = new List<BarItemLink>();

    foreach (BarItemLink item in myMenuGroup.ItemLinks)
    {
        // 현재 유효한 메뉴 항목에 없는 경우 삭제 목록에 추가
        if (!validItems.Contains(item.Caption))
        {
            toRemove.Add(item);
        }
    }

    // 삭제할 항목 제거
    foreach (var item in toRemove)
    {
        myMenuGroup.ItemLinks.Remove(item);
    }

    // MyMenu 상태 저장
    SaveMyMenuItems();
}
이 코드를 프로그램 시작 시 호출하여, 유효한 메뉴 목록과 비교한 후 불필요한 항목을 제거하도록 설정합니다.
