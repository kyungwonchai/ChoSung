n C#, you cannot directly select multiple specific indices when splitting a string, as you might in some other languages. However, you can achieve a similar result by splitting the string and then selecting the values at the desired indices. You'll have to do it in a more manual way, such as by iterating over the indices you're interested in and extracting those values. Hereâ€™s how you can do it:

Using Linq
You can use LINQ to elegantly select elements at specific indices after splitting a string. This approach is both flexible and concise.

csharp
Copy code
using System;
using System.Linq;

public class Program
{
    public static void Main()
    {
        string input = "value0_value1_value2_value3_value4_value5_value6_value7_value8";
        int[] indices = { 1, 2, 3, 4, 7 }; // The indices you want to select

        // Split the string
        var splitValues = input.Split('_');
        
        // Select values at specified indices
        var selectedValues = indices.Where(index => index < splitValues.Length)
                                    .Select(index => splitValues[index])
                                    .ToArray();

        // Now, selectedValues contains the values at indices 1, 2, 3, 4, 7
        foreach (var value in selectedValues)
        {
            Console.WriteLine(value);
        }
    }
}
Without LINQ
If you prefer or need to avoid LINQ for any reason, you can achieve the same result with a more manual approach, like so:

csharp
Copy code
using System;
using System.Collections.Generic;

public class Program
{
    public static void Main()
    {
        string input = "value0_value1_value2_value3_value4_value5_value6_value7_value8";
        int[] indices = { 1, 2, 3, 4, 7 }; // The indices you want to select

        // Split the string
        var splitValues = input.Split('_');
        
        // Prepare a list to hold the selected values
        List<string> selectedValues = new List<string>();

        // Loop through the desired indices and add the corresponding values to the list
        foreach (var index in indices)
        {
            if (index < splitValues.Length)
            {
                selectedValues.Add(splitValues[index]);
            }
        }

        // Now, selectedValues contains the values at indices 1, 2, 3, 4, 7
        foreach (var value in selectedValues)
        {
            Console.WriteLine(value);
        }
    }
}
Both methods will give you the values at the specified indices after splitting the string. The first method using LINQ is more concise and is generally preferred for its readability and ease of use.





