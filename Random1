(Node Version Manager)을 사용하면 Node.js 버전을 관리할 수 있지만, 특정 Node.js 버전을 직접적으로 절대 경로로 사용하는 것은 NVM의 관리 방식과 충돌할 수 있습니다. NVM은 사용자가 nvm use <version> 명령어를 통해 특정 버전을 선택할 때 해당 버전을 현재 쉘 세션에 활성화시킵니다. 따라서 절대 경로를 사용하여 Node.js를 직접 실행하려고 하면 문제가 발생할 수 있습니다.

1. NVM의 구조와 절대 경로 사용의 문제
NVM의 동작 방식: NVM은 사용자가 Node.js 버전을 전환할 때 심볼릭 링크나 환경 변수를 설정하여 올바른 Node.js 버전이 선택되도록 합니다. 이를 통해 node 명령어를 호출할 때마다 NVM이 관리하는 버전이 사용됩니다.

절대 경로 사용의 문제: 절대 경로를 사용하여 직접 Node.js를 실행하는 것은 NVM의 버전 관리 기능을 우회하는 것이므로, NVM의 관리 하에 있는 버전을 제대로 사용할 수 없게 됩니다. 또한, NVM을 통해 관리되는 다른 Node.js 버전을 사용할 때 경로 충돌이 발생할 수 있습니다.

2. 올바른 접근 방식
대신, NVM을 통해 Node.js 버전을 관리하고 사용하려는 절대 경로를 설정하려면 아래 방법을 따르는 것이 좋습니다.

1. 심볼릭 링크 생성
특정 Node.js 버전을 직접적으로 사용해야 하는 경우, 심볼릭 링크를 만들어서 원하는 경로에 Node.js를 연결할 수 있습니다.

bash
코드 복사
ln -s ~/.nvm/versions/node/<version>/bin/node /usr/local/bin/node
ln -s ~/.nvm/versions/node/<version>/bin/npm /usr/local/bin/npm
위 명령어는 선택한 Node.js 버전 (<version>을 해당 버전으로 바꾸세요)과 npm을 /usr/local/bin/에 심볼릭 링크로 연결합니다. 이를 통해 home/kw7/note_modes 경로에서 Node.js를 실행할 수 있습니다.

2. PATH 환경 변수 수정
만약 Node.js를 특정 디렉토리에서 사용하고자 한다면, 해당 디렉토리를 PATH에 추가하여 Node.js를 사용합니다.

bash
코드 복사
export PATH=~/.nvm/versions/node/<version>/bin:$PATH
위 명령어를 .bashrc나 .zshrc 파일에 추가하면, 해당 터미널 세션에서 Node.js를 사용할 때 지정한 버전이 우선적으로 사용됩니다.

3. 심볼릭 링크와 PATH 설정의 장단점
심볼릭 링크: 특정 Node.js 버전을 시스템의 기본 위치로 설정할 수 있으며, NVM을 통해 관리되는 버전도 선택적으로 사용 가능합니다. 그러나 이 방식은 Node.js 버전 변경 시 심볼릭 링크를 다시 설정해야 하는 번거로움이 있습니다.

PATH 설정: NVM의 기본 설정을 유지하면서 특정 Node.js 버전을 우선적으로 사용할 수 있습니다. 또한, 여러 프로젝트에서 각기 다른 Node.js 버전을 사용할 때 유연하게 전환할 수 있습니다.

결론
NVM을 사용하는 환경에서는 절대 경로를 사용하기보다, 심볼릭 링크를 통해 필요한 위치에 Node.js를 연결하거나, PATH 환경 변수를 설정하는 방식으로 Node.js를 사용할 것을 권장합니다. 이를 통해 NVM의 버전 관리 기능을 유지하면서도 원하는 Node.js 버전을 효과적으로 사용할 수 있