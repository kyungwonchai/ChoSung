using System;
using System.Security.Principal;
using System.Runtime.InteropServices;

public class NetworkSharingFolder
{
    [DllImport("advapi32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword, 
        int dwLogonType, int dwLogonProvider, out SafeTokenHandle phToken);

    [DllImport("kernel32.dll", CharSet = CharSet.Auto)]
    public extern static bool CloseHandle(IntPtr handle);

    public static WindowsImpersonationContext LogonUser(string userName, string password, string domainName)
    {
        SafeTokenHandle safeTokenHandle;
        const int LOGON32_PROVIDER_DEFAULT = 0;
        const int LOGON32_LOGON_INTERACTIVE = 2;

        bool returnValue = LogonUser(userName, domainName, password, 
            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, out safeTokenHandle);

        if (false == returnValue)
        {
            int ret = Marshal.GetLastWin32Error();
            Console.WriteLine("LogonUser failed with error code: " + ret);
            throw new System.ComponentModel.Win32Exception(ret);
        }

        return WindowsIdentity.Impersonate(safeTokenHandle.DangerousGetHandle());
    }
}

public sealed class SafeTokenHandle : SafeHandleZeroOrMinusOneIsInvalid
{
    private SafeTokenHandle() : base(true) {}

    protected override bool ReleaseHandle()
    {
        return CloseHandle(handle);
    }
}

class Program
{
    static void Main()
    {
        try
        {
            using (WindowsImpersonationContext NFS1 = NetworkSharingFolder.LogonUser("username", "password", "domain"))
            {
                // Access shared folder here
                Console.WriteLine("Accessing shared folder...");

                // Revert to the original user
                NFS1.Undo();
            }

            // Other operations under the original user context
            Console.WriteLine("Performing other operations...");
        }
        catch (Exception ex)
        {
            Console.WriteLine("Exception occurred: " + ex.Message);
        }
    }
}
