 말씀드린 내용에서 일부 혼란을 드린 점 사과드립니다. DevExpress WPF ChartControl에서 CustomDrawCrosshair 이벤트를 활용하여 마우스를 올렸을 때 각 데이터 포인트의 모델 이름을 포함한 상세 정보를 표시하는 방법을 다시 정리해 드리겠습니다.

1. 데이터 모델 정의
먼저, 각 데이터 포인트에 ModelName 속성을 포함한 클래스를 정의합니다.

csharp
코드 복사
public class DataPoint
{
    public DateTime Timestamp { get; set; } // 시간 정보
    public double Value { get; set; }       // 값
    public string ModelName { get; set; }   // 모델 이름
}
2. 차트 초기화 및 시리즈 설정
ChartControl을 초기화하고, 시리즈를 설정할 때 각 데이터 포인트의 ModelName을 Tag 속성에 저장합니다.

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Media;

public void InitializeChart(List<DataPoint> dataPoints)
{
    // ChartControl 인스턴스 생성
    ChartControl chartControl = new ChartControl();

    // XYDiagram2D 설정
    XYDiagram2D diagram = new XYDiagram2D();
    chartControl.Diagram = diagram;

    // LineSeries2D 생성 및 설정
    LineSeries2D series = new LineSeries2D
    {
        DisplayName = "Series1",
        ArgumentDataMember = "Timestamp",
        ValueDataMember = "Value",
        DataSource = dataPoints,
        MarkerVisible = true,
        CrosshairEnabled = true
    };

    // 각 데이터 포인트의 Tag에 해당 DataPoint 객체 저장
    foreach (SeriesPoint point in series.Points)
    {
        var dataPoint = dataPoints.FirstOrDefault(dp => dp.Timestamp == (DateTime)point.Argument && dp.Value == point.Value);
        if (dataPoint != null)
        {
            point.Tag = dataPoint;
        }
    }

    // 시리즈를 다이어그램에 추가
    diagram.Series.Add(series);

    // Crosshair 옵션 설정
    chartControl.CrosshairOptions.ShowArgumentLabels = true;
    chartControl.CrosshairOptions.ShowArgumentLine = true;
    chartControl.CrosshairOptions.ShowValueLabels = true;
    chartControl.CrosshairOptions.ShowValueLine = true;

    // CustomDrawCrosshair 이벤트 핸들러 등록
    chartControl.CustomDrawCrosshair += ChartControl_CustomDrawCrosshair;
}
3. CustomDrawCrosshair 이벤트 핸들러 구현
마우스가 차트 위의 데이터 포인트에 위치할 때, 해당 포인트의 ModelName을 포함한 정보를 표시하도록 이벤트 핸들러를 구현합니다.

csharp
코드 복사
private void ChartControl_CustomDrawCrosshair(object sender, CustomDrawCrosshairEventArgs e)
{
    foreach (var group in e.CrosshairElementGroups)
    {
        foreach (var element in group.CrosshairElements)
        {
            if (element.SeriesPoint != null)
            {
                // SeriesPoint의 Tag에서 DataPoint 객체 가져오기
                var dataPoint = element.SeriesPoint.Tag as DataPoint;

                if (dataPoint != null)
                {
                    // 커스텀 레이블 텍스트 설정
                    element.LabelElement.Text = $"Timestamp: {dataPoint.Timestamp:yy-MM-dd HH:mm:ss}\n" +
                                                $"Value: {dataPoint.Value:F2}\n" +
                                                $"Model Name: {dataPoint.ModelName}";
                }
            }
        }
    }
}
4. 전체 코드 예제
위의 내용을 종합하여, 차트를 초기화하고 데이터를 바인딩하며, 마우스 오버 시 ModelName을 포함한 정보를 표시하는 전체 코드는 다음과 같습니다.

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Media;

public class DataPoint
{
    public DateTime Timestamp { get; set; }
    public double Value { get; set; }
    public string ModelName { get; set; }
}

public partial class MainWindow
{
    public MainWindow()
    {
        InitializeComponent();
        InitializeChart(GetDataPoints());
    }

    private List<DataPoint> GetDataPoints()
    {
        return new List<DataPoint>
        {
            new DataPoint { Timestamp = DateTime.Now.AddMinutes(-2), Value = 10, ModelName = "ModelA" },
            new DataPoint { Timestamp = DateTime.Now.AddMinutes(-1), Value = 20, ModelName = "ModelB" },
            new DataPoint { Timestamp = DateTime.Now, Value = 15, ModelName = "ModelC" }
        };
    }

    public void InitializeChart(List<DataPoint> dataPoints)
    {
        // ChartControl 인스턴스 생성
        ChartControl chartControl = new ChartControl();

        // XYDiagram2D 설정
        XYDiagram2D diagram = new XYDiagram2D();
        chartControl.Diagram = diagram;

        // LineSeries2D 생성 및 설정
        LineSeries2D series = new LineSeries2D
        {
            DisplayName = "Series1",
            ArgumentDataMember = "Timestamp",
            ValueDataMember = "Value",
            DataSource = dataPoints,
            MarkerVisible = true,
            CrosshairEnabled = true
        };

        // 각 데이터 포인트의 Tag에 해당 DataPoint 객체 저장
        foreach (SeriesPoint point in series.Points)
        {
            var dataPoint = dataPoints.FirstOrDefault(dp => dp.Timestamp == (DateTime)point.Argument && dp.Value == point.Value);
            if (dataPoint != null)
            {
                point.Tag = dataPoint;
            }
        }

        // 시리즈를 다이어그램에 추가
        diagram.Series.Add(series);

        // Crosshair 옵션 설정
        chartControl.CrosshairOptions.ShowArgumentLabels = true;
        chartControl.CrosshairOptions.ShowArgumentLine = true;
        chartControl.CrosshairOptions.ShowValueLabels = true;
        chartControl.CrosshairOptions.ShowValueLine = true;

        // CustomDrawCrosshair 이벤트 핸들러 등록
        chartControl.CustomDrawCrosshair += ChartControl_CustomDrawCrosshair;

        // ChartControl을 윈도우의 콘텐츠로 설정
        this.Content = chartControl;
    }

    private void ChartControl_CustomDrawCrosshair(object sender, CustomDrawCrosshairEventArgs e)
    {
        foreach (var group in e.CrosshairElementGroups)
        {
            foreach (var element in group.CrosshairElements)
            {
                if (element.SeriesPoint != null)
                {
                    // SeriesPoint의 Tag에서 DataPoint 객체 가져오기
                    var dataPoint = element.SeriesPoint.Tag as DataPoint;

                    if (dataPoint != null)
                    {
                        // 커스텀 레이블 텍스트 설정
                        element.LabelElement.Text = $"Timestamp: {dataPoint.Timestamp:yy
::contentReference[oaicite:0]{index=0}
 





나의 말:
뭐이리 말이많니? 결국 displayname에 내가 지금 현재축의 라인명을 어떻게 모델명을 어떻게 결합해서 넣냐이건데 코드몰리??????
ChatGPT의 말:
ChatGPT
아, 간단하게 요약해서 설명드리겠습니다. 현재 축의 라인 이름(LineName)과 모델 이름(ModelName)을 DisplayName에 넣는 방법은 아래와 같이 구현할 수 있습니다.

구현 코드
csharp
코드 복사
private void InitializeLineChart(List<DataPoint> data)
{
    var diagram = new XYDiagram2D();

    // L 모델 데이터 필터링
    var lData = data.Where(d => d.ModelName.EndsWith("L")).ToList();

    for (int i = 1; i <= 5; i++)
    {
        // 시리즈 생성
        var series = new LineSeries2D
        {
            DataSource = lData,                 // 필터링된 데이터 사용
            ArgumentDataMember = "Timestamp",  // X축 데이터
            ValueDataMember = $"MP{i}",        // Y축 데이터
            MarkerVisible = true,              // 마커 표시
            CrosshairEnabled = true            // Crosshair 활성화
        };

        // DisplayName에 라인명과 모델명 설정
        if (lData.Count > 0)
        {
            series.DisplayName = $"Line: {lData.First().LineName} | Model: {lData.First().ModelName} | MP{i}";
        }

        // 시리즈 추가
        diagram.Series.Add(series);
    }

    // 차트에 다이어그램 설정
    LineChart.Diagram = diagram;
}
코드 설명
lData 필터링:

data 리스트에서 ModelName이 "L"로 끝나는 데이터를 필터링.
for 루프:

MP1~MP5 시리즈를 생성하면서 각 시리즈의 DisplayName에 라인명(LineName)과 모델명(ModelName)을 포함.
DisplayName 설정:

필터링된 데이터의 첫 번째 항목(lData.First())의 LineName과 ModelName 값을 가져옵니다.
결과적으로 각 시리즈의 이름은 다음과 같이 표시됩니다:
yaml
코드 복사
Line: Line1 | Model: ModelL1 | MP1
다이어그램에 추가:

생성된 LineSeries2D를 다이어그램에 추가합니다.
결과
각 시리즈의 DisplayName은 해당 데이터의 LineName, ModelName, 그리고 MP1~MP5를 조합한 이름으로 표시됩니다.
예를 들어:
yaml
코드 복사
Line: Line1 | Model: ModelL1 | MP1
Line: Line1 | Model: ModelL1 | MP2
Line: Line1 | Model: ModelL1 | MP3
추가적인 상황
동적으로 X축 위치 기반으로 설정하려면 Crosshair 이벤트를 사용하여 커스터마이즈 가능합니다.