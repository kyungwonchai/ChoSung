import fitz  # PyMuPDF 라이브러리
import os

def convert_color(color_int):
    """
    PyMuPDF에서 사용하는 정수형 색상 값을 RGB 튜플로 변환합니다.
    색상 값은 sRGB로 인코딩되어 있습니다.
    """
    if color_int is None:
        return (0, 0, 0)  # 기본값으로 검은색 반환
    # >> 비트 연산자를 사용하여 각 색상 채널(R, G, B) 값을 추출합니다.
    r = (color_int >> 16) & 0xFF
    g = (color_int >> 8) & 0xFF
    b = color_int & 0xFF
    return (r, g, b)

def extract_detailed_text_info(pdf_path):
    """
    PDF 파일에서 텍스트와 함께 위치, 크기, 색상 정보를 추출합니다.

    Args:
        pdf_path (str): 분석할 PDF 파일의 경로

    Returns:
        list: 페이지별로 텍스트 상세 정보가 담긴 딕셔너리 리스트
    """
    # PDF 파일이 존재하는지 확인합니다.
    if not os.path.exists(pdf_path):
        print(f"오류: '{pdf_path}' 파일을 찾을 수 없습니다.")
        return []

    try:
        doc = fitz.open(pdf_path)
    except Exception as e:
        print(f"오류: PDF 파일을 여는 중 문제가 발생했습니다: {e}")
        return []
        
    all_pages_data = []

    # 각 페이지를 순회합니다.
    for page_num, page in enumerate(doc):
        page_data = {
            "page_number": page_num + 1,
            "text_spans": []
        }
        
        # 'dict' 또는 'rawdict' 옵션을 사용하여 텍스트 블록의 상세 정보를 추출합니다.
        # 'dict'는 더 정제된 정보를 제공합니다.
        blocks = page.get_text("dict")["blocks"]
        
        # 텍스트 블록 -> 라인 -> 스팬 순으로 순회합니다.
        for block in blocks:
            if "lines" in block:
                for line in block["lines"]:
                    for span in line["spans"]:
                        # 각 스팬에서 필요한 정보를 추출합니다.
                        text = span["text"]
                        font_size = round(span["size"], 2)
                        color_rgb = convert_color(span["color"])
                        bbox = tuple(round(coord, 2) for coord in span["bbox"]) # (x0, y0, x1, y1)

                        span_info = {
                            "text": text,
                            "font_size": font_size,
                            "color_rgb": color_rgb,
                            "position_bbox": bbox
                        }
                        page_data["text_spans"].append(span_info)
        
        all_pages_data.append(page_data)
        
    doc.close()
    return all_pages_data

# --- 메인 실행 부분 ---
if __name__ == "__main__":
    # 여기에 분석하고 싶은 PDF 파일의 경로를 입력하세요.
    # 예: "C:\\Users\\YourUser\\Documents\\report.pdf"
    # 아래 예제에서는 'sample.pdf'라는 이름의 파일이 코드와 같은 폴더에 있다고 가정합니다.
    pdf_file_path = "sample.pdf"

    # PDF 파일이 없을 경우, 테스트용으로 간단한 PDF를 생성합니다.
    if not os.path.exists(pdf_file_path):
        print(f"'{pdf_file_path}' 파일이 없어 테스트용 파일을 생성합니다.")
        doc = fitz.open()
        page = doc.new_page()
        page.insert_text((50, 100), "이것은 검은색 일반 텍스트입니다.", fontsize=12, color=(0,0,0))
        page.insert_text((50, 150), "이것은 빨간색 제목입니다.", fontsize=18, color=(1,0,0))
        page.insert_text((50, 200), "이것은 파란색 작은 텍스트입니다.", fontsize=9, color=(0,0,1))
        doc.save(pdf_file_path)
        doc.close()
        print("테스트용 'sample.pdf' 파일 생성 완료.")


    # 함수를 호출하여 PDF 정보를 추출합니다.
    detailed_info = extract_detailed_text_info(pdf_file_path)

    if detailed_info:
        print(f"\n--- '{pdf_file_path}' 파일 분석 결과 ---")
        # 추출된 정보를 보기 좋게 출력합니다.
        for page_info in detailed_info:
            print(f"\n[ Page {page_info['page_number']} ]")
            if not page_info['text_spans']:
                print("  (페이지에서 텍스트를 찾을 수 없습니다)")
                continue
            
            for i, span in enumerate(page_info['text_spans']):
                print(f"  - Span {i+1}:")
                print(f"    - 글자    : '{span['text']}'")
                print(f"    - 크기    : {span['font_size']:.2f} pt")
                print(f"    - 색상(RGB): {span['color_rgb']}")
                print(f"    - 위치(bbox): {span['position_bbox']}")
    else:
        print("PDF 파일에서 정보를 추출하지 못했습니다.")
