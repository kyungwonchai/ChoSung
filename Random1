저, 버튼을 정의하고, ViewModel의 Command와 연결합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d"
        Title="MainWindow" Height="200" Width="300">
    <Grid>
        <Button Content="Open Browser" 
                Command="{Binding OpenBrowserCommand}" 
                Width="150" Height="40" 
                HorizontalAlignment="Center" 
                VerticalAlignment="Center"/>
    </Grid>
</Window>
Command="{Binding OpenBrowserCommand}"를 통해 ViewModel에 정의된 Command를 바인딩합니다.
2. MainViewModel.cs
이제 ViewModel에서 OpenBrowserCommand를 정의합니다. 버튼을 클릭했을 때 기본 웹 브라우저로 URL을 여는 로직을 구현합니다.

csharp
코드 복사
using System;
using System.Diagnostics;
using System.Windows.Input;

namespace WpfApp
{
    public class MainViewModel
    {
        public ICommand OpenBrowserCommand { get; }

        public MainViewModel()
        {
            // ICommand를 초기화하고 Execute 메서드로 브라우저를 여는 메서드를 바인딩합니다.
            OpenBrowserCommand = new RelayCommand(OpenBrowser);
        }

        private void OpenBrowser()
        {
            try
            {
                // 기본 웹 브라우저로 URL을 엽니다.
                Process.Start(new ProcessStartInfo
                {
                    FileName = "http://10.222.222.222:8888",
                    UseShellExecute = true
                });
            }
            catch (Exception ex)
            {
                // 예외 발생 시 로그를 남기거나 사용자에게 알림을 표시합니다.
                Console.WriteLine($"Error opening browser: {ex.Message}");
            }
        }
    }

    public class RelayCommand : ICommand
    {
        private readonly Action _execute;
        private readonly Func<bool> _canExecute;

        public event EventHandler CanExecuteChanged;

        public RelayCommand(Action execute, Func<bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter)
        {
            return _canExecute == null || _canExecute();
        }

        public void Execute(object parameter)
        {
            _execute();
        }

        public void RaiseCanExecuteChanged()
        {
            CanExecuteChanged?.Invoke(this, EventArgs.Empty);
        }
    }
}
코드 설명
OpenBrowserCommand: RelayCommand를 사용하여 버튼 클릭 시 실행될 Command를 정의했습니다.
OpenBrowser 메서드: 기본 웹 브라우저로 지정된 URL을 여는 로직입니다. Process.Start를 사용하여 URL을 엽니다.
RelayCommand 클래스: ICommand를 구현한 클래스입니다. 이 클래스를 사용하여 MVVM 패턴에서 버튼과 Command를 연결하고 동작을 정의할 수 있습니다.
3. MainWindow.xaml.cs
ViewModel을 View에 DataContext로 설정합니다.

csharp
코드 복사
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            DataContext = new MainViewModel();
        }
    }
}