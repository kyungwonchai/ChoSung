했습니다. ErrorConverter를 사용하지 않고 MVVM 패턴에서 Result 값을 문자열로 직접 처리하도록 수정하겠습니다. 아래는 CommandItem 클래스에서 Result를 문자열로 변환하는 방법을 추가하여 처리하는 방식입니다.

CommandItem 클래스 수정
csharp
코드 복사
public class CommandItem
{
    public string CommandText { get; set; } // 명령 텍스트
    public string Status { get; set; } // 명령 상태 (Pending, Processing, Completed, Failed 등)
    public int RetryCount { get; set; } // 재시도 횟수
    public int MaxRetryLimit { get; set; } // 최대 재시도 횟수
    public int ResponseTime { get; set; } // 응답 시간
    public string CommandTime { get; set; } // 명령이 추가된 시간 (yyMMdd HH:mm:ss.fff)
    public string Output { get; set; } // 명령의 결과 또는 응답

    // 명령의 결과를 문자열로 처리
    private int _result;
    public int Result
    {
        get => _result;
        set
        {
            _result = value;
            ResultText = _result == 0 ? "Error" : "OK"; // 0이면 "Error", 1이면 "OK"로 변환
        }
    }

    // 에러 상태를 텍스트로 저장
    public string ResultText { get; private set; } // 에러 상태 텍스트
}
DataGrid 수정 사항
이제 ResultText를 DataGrid에서 직접 바인딩하여 에러 상태를 문자열로 표시할 수 있습니다. Result를 문자열로 변환했기 때문에 별도의 컨버터는 필요 없습니다.

xml
코드 복사
<DataGrid Grid.Row="0" Grid.Column="0" ItemsSource="{Binding CommandQueue.RemainingCommands}" AutoGenerateColumns="False" Margin="10">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Command" Binding="{Binding CommandText}" Width="200"/>
        <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="100"/>
        <DataGridTextColumn Header="Retry Count" Binding="{Binding RetryCount}" Width="100"/>
        <DataGridTextColumn Header="Response Time" Binding="{Binding ResponseTime}" Width="100"/>
        <DataGridTextColumn Header="Error Status" Binding="{Binding ResultText}" Width="100"/> <!-- Error 상태를 문자열로 표시 -->
        <DataGridTextColumn Header="Time" Binding="{Binding CommandTime}" Width="150"/>
    </DataGrid.Columns>
    <DataGrid.RowStyle>
        <Style TargetType="DataGridRow">
            <Style.Triggers>
                <DataTrigger Binding="{Binding ResultText}" Value="Error"> <!-- 에러 상태인 경우 -->
                    <Setter Property="Background" Value="Yellow"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </DataGrid.RowStyle>
</DataGrid>
설명
CommandItem 클래스에서 ResultText를 추가: Result 값이 변경될 때마다 ResultText가 자동으로 업데이트되어, 값에 따라 "Error" 또는 "OK"로 변환됩니다.

DataGrid에서 ResultText를 바인딩: DataGrid의 Error Status 컬럼에서 ResultText를 바인딩하여 "Error" 또는 "OK" 상태를 직접 표시합니다.

배경색 처리: 에러 상태인 경우 (ResultText == "Error") DataGridRow의 배경을 노란색으로 설정합니다.

이제 컨버터 없이 명령의 결과 상태를 문자열로 처리하여 UI에