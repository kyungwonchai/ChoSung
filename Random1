네, 우분투(리눅스)에서 네트워크 공유 폴더를 로컬 디렉터리처럼 연결하여 사용하는 것을 **'마운트(Mount)'**라고 합니다. /mnt 디렉터리는 바로 이런 용도를 위해 존재합니다.

이렇게 마운트하면, 터미널(CLI)에서 cd, ls, cp 같은 명령어로 공유 폴더에 접근하거나, 스크립트에서 로컬 경로처럼 사용하는 등 매우 편리하게 활용할 수 있습니다.

윈도우 공유 폴더나 NAS를 우분투에 마운트하는 가장 표준적인 방법을 단계별로, 처음부터 끝까지 알려드리겠습니다.

1단계: 필수 패키지 설치 (cifs-utils)
가장 먼저, 윈도우 네트워크 공유 프로토콜(SMB/CIFS)을 사용하기 위한 도구를 설치해야 합니다.

터미널을 열고 아래 명령어를 순서대로 입력하세요.

Bash

# 패키지 목록 업데이트
sudo apt update

# cifs-utils 설치
sudo apt install cifs-utils
2단계: 마운트할 로컬 디렉터리 생성
네트워크 폴더를 연결할 '접점'이 될 로컬 디렉터리를 만듭니다. 보통 /mnt 디렉터리 하위에 만드는 것이 표준입니다. 여기서는 nas라는 이름으로 만들겠습니다.

Bash

sudo mkdir /mnt/nas
(다른 이름으로 하셔도 상관없습니다. 예: /mnt/share)

3단계: 일회성으로 마운트하기 (테스트용)
부팅하면 연결이 해제되는 임시 마운트입니다. 설정이 올바른지 테스트하기에 가장 좋은 방법입니다.

서버 IP: 192.168.0.100

공유 폴더명: data

사용자 ID: myuser

비밀번호: mypassword1234

위 정보를 예시로 아래 명령어를 실행합니다. < > 안의 내용은 본인의 환경에 맞게 수정하세요.

Bash

sudo mount -t cifs -o username=<사용자명>,password=<비밀번호>,uid=$(id -u),gid=$(id -g),iocharset=utf8 //<서버_IP>/<공유폴더명> /mnt/nas
예시:

Bash

sudo mount -t cifs -o username=myuser,password=mypassword1234,uid=$(id -u),gid=$(id -g),iocharset=utf8 //192.168.0.100/data /mnt/nas
명령어 실행 후 아무 메시지가 뜨지 않으면 성공입니다. df -h 명령어로 확인하거나, ls -l /mnt/nas 명령어로 공유 폴더의 파일 목록이 보이는지 확인해보세요.

핵심 옵션 설명:

-t cifs: 파일 시스템 타입을 CIFS로 지정합니다.

username, password: 공유 폴더 접속 계정 정보입니다.

uid=$(id -u),gid=$(id -g): (매우 중요) 마운트된 폴더와 파일의 소유자를 현재 로그인한 사용자로 설정하여, 읽고 쓰는 데 필요한 권한 문제를 해결해줍니다.

iocharset=utf8: (한글 파일명 필수) 파일 이름이 한글일 경우 깨지지 않도록 해줍니다.

4. 부팅 시 자동으로 마운트하기 (영구 설정)
매번 부팅할 때마다 자동으로 공유 폴더를 마운트하려면 /etc/fstab 파일을 수정해야 합니다.

⚠️ 주의: /etc/fstab 파일은 시스템의 핵심 파일이므로, 수정 전 반드시 백업하세요.
Bash

sudo cp /etc/fstab /etc/fstab.bak
4-1. 보안을 위한 자격 증명 파일 생성
보안상 /etc/fstab에 비밀번호를 직접 쓰는 것은 매우 위험합니다. 대신, 접속 정보를 담은 별도의 파일을 만들고 루트(root) 사용자만 읽을 수 있도록 권한을 설정합니다.

Bash

# 나노 편집기로 credentials 라는 새 파일을 엽니다.
sudo nano /etc/samba/credentials
열린 편집기에 아래와 같이 내용을 입력하고 저장(Ctrl+X -> Y -> Enter)합니다.

username=<사용자명>
password=<비밀번호>
이제 이 파일은 루트만 읽고 쓸 수 있도록 권한을 변경합니다.

Bash

sudo chmod 600 /etc/samba/credentials
4-2. /etc/fstab 파일 수정
이제 /etc/fstab 파일을 열어 맨 아래에 마운트 정보를 추가합니다.

Bash

sudo nano /etc/fstab
열린 편집기의 가장 마지막 줄에 아래 내용을 추가합니다. 반드시 한 줄로 입력해야 합니다.

# //<서버_IP>/<공유폴더명>  <마운트_디렉터리>  <파일시스템>  <옵션>  <덤프> <체크>
//<서버_IP>/<공유폴더명> /mnt/nas cifs credentials=/etc/samba/credentials,uid=1000,gid=1000,iocharset=utf8,_netdev 0 0
예시:

//192.168.0.100/data /mnt/nas cifs credentials=/etc/samba/credentials,uid=1000,gid=1000,iocharset=utf8,_netdev 0 0
내용을 추가한 후 저장(Ctrl+X -> Y -> Enter)합니다.

핵심 옵션 설명:

credentials=/etc/samba/credentials: 방금 만든 자격 증명 파일을 사용하라고 알려줍니다.

uid=1000,gid=1000: 현재 사용자의 ID를 직접 지정합니다. 터미널에 id 라고 입력하면 나오는 uid와 gid 값을 확인하여 적어주세요. (보통 첫 사용자는 1000입니다.)

_netdev: (매우 중요) 이 옵션은 "네트워크가 준비된 후에 마운트를 시도하라"는 의미입니다. 이 옵션이 없으면 부팅 시 네트워크가 연결되기도 전에 마운트를 시도해서 실패할 수 있습니다.

4-3. 마운트 테스트 및 적용
재부팅 없이 /etc/fstab에 추가한 설정을 바로 적용하고 테스트하려면 아래 명령어를 실행합니다.

Bash

sudo mount -a
오류가 없다면 성공입니다. df -h 명령어로 마운트가 잘 되었는지 다시 확인해보세요. 이제부터 우분투를 재부팅해도 /mnt/nas 디렉터리는 항상 공유 폴더에 연결되어 있을 겁니다.

5단계: 마운트 해제하기 (Unmount)
연결을 해제하고 싶을 때는 아래 명령어를 사용합니다.

Bash

sudo umount /mnt/nas
(단, /etc/fstab에 등록된 상태라면 재부팅 시 다시 마운트됩니다.)

우분투에서 python만든거 실행할건데 이걸 2분마다 실행하게하고싶어 반복적으로 예약? 이거 젤 깔끔한게 뭐고 pm2 뭐이런건안대나 ㅠㅠ





생각하는 과정 표시
형님, 아주 좋은 질문입니다. 파이썬 스크립트를 2분마다 반복적으로 실행하는 예약 작업은 우분투(리눅스) 시스템 관리의 핵심 중 하나입니다.

pm2를 언급하신 걸 보니 이미 많이 알아보셨네요. 하지만 형님이 원하시는 가장 깔끔하고, 표준적이며, 안정적인 방법은 단연코 Cron (크론) 입니다.

pm2가 안 좋은 것은 아니지만, 두 도구의 용도가 약간 다릅니다. 제가 왜 Cron을 추천하는지와 두 가지 방법을 모두 알려드릴게요.

결론: 왜 Cron이 가장 깔끔한 방법인가?
구분	Cron (크론)	PM2
핵심 역할	시간 기반 작업 스케줄러	프로세스 관리자
설명	"매일 새벽 2시에 백업해라", "2분마다 이 스크립트를 실행해라" 처럼 정해진 시간에 특정 작업을 실행하는 데 특화된, 우분투의 기본 내장 기능입니다.	"이 프로그램이 항상 켜져 있게 해라", "오류로 꺼지면 즉시 재시작해라" 처럼 프로그램을 항상 살아있게 관리하는 데 특화된 도구입니다.
추천 용도	정기적인 스크립트 실행, 데이터 백업, 로그 정리 등	24시간 계속 실행되어야 하는 서버 프로그램 (웹 서버, API 서버, 챗봇 등)
비유	정확한 시간에 울리는 알람 시계	심장이 멈추면 전기 충격을 주는 심장 제세동기
형님의 요구사항인 "2분마다 실행"은 Cron의 가장 대표적인 사용 사례입니다. pm2로도 가능은 하지만, 이는 마치 닭 잡는 데 소 잡는 칼을 쓰는 것과 같아서, 시스템에 불필요한 부담을 주고 관리가 더 복잡해질 수 있습니다.

따라서 Cron을 사용하시는 것이 100% 정답입니다.

방법 1: Cron으로 2분마다 실행하기 (강력 추천)
가장 표준적이고 깔끔한 방법입니다.

1단계: Crontab 편집기 열기
터미널에 아래 명령어를 입력합니다. 처음 실행한다면 어떤 편집기(nano, vim 등)를 사용할지 물어볼 수 있는데, 가장 사용하기 쉬운 nano (보통 1번)를 선택하고 엔터를 누르세요.

Bash

crontab -e
2단계: 예약 작업 명령어 추가
편집기가 열리면, 파일의 가장 마지막 줄에 아래와 같은 형식으로 명령어를 추가합니다.

# 2분마다 파이썬 스크립트를 실행
*/2 * * * * /usr/bin/python3 /home/myuser/project/my_script.py
*/2 * * * *: 이 부분이 바로 **"2분마다"**를 의미하는 크론의 시간 표현식입니다.

/usr/bin/python3: (매우 중요) python3 명령어의 전체 경로입니다. which python3 명령어로 내 시스템의 정확한 경로를 확인하고 적어주세요. 크론은 전체 경로를 적어주는 것이 가장 안정적입니다.

/home/myuser/project/my_script.py: (매우 중요) 실행할 파이썬 스크립트의 전체 경로입니다. pwd 명령어로 현재 위치를 확인하는 등, 정확한 전체 경로를 꼭 적어주셔야 합니다.

3. 저장하고 나오기
nano 편집기 기준으로, Ctrl + X를 누르고, Y를 누른 다음, Enter를 누르면 저장되고 편집기가 종료됩니다. "installing new crontab" 이라는 메시지가 나오면 성공입니다.

이제 시스템은 2분마다 정확하게 형님의 파이썬 스크립트를 실행할 것입니다.

(참고) 방법 2: pm2로 실행하기
pm2는 원래 시간 기반 스케줄러가 아니지만, cron과 유사한 기능을 제공합니다. 만약 형님의 스크립트가 24시간 실행되어야 하는 서버인데, 추가로 2분마다 특정 동작을 해야 하는 복잡한 경우라면 pm2가 더 나을 수도 있습니다.

1단계: pm2 설치 (Node.js 필요)
Bash

sudo apt install nodejs npm
sudo npm install -g pm2
2단계: pm2로 스크립트 실행 (Cron 모드)
--cron "*/2 * * * *" 옵션을 추가하여 실행합니다.

Bash

pm2 start my_script.py --name "MyPythonJob" --interpreter python3 --cron "*/2 * * * *" --no-autorestart
--cron "*/2 * * * *": 2분마다 재시작하라는 의미입니다.

--no-autorestart: 스크립트가 정상적으로 끝나면 자동으로 재시작하지 않도록 설정합니다. 이 옵션이 없으면 pm2가 계속해서 스크립트를 되살리려고 시도합니다.

pm2 list로 상태를 확인하고, pm2 logs MyPythonJob으로 로그를 볼 수 있습니다. 하지만 보시다시피, 단순한 작업을 위해 추가로 설치하고 관리해야 할 것이 많습니다.