을 다크 계열 그라데이션으로 꾸미고, 검색 기능을 입력할 때마다 자동으로 작동하도록 구현한 예제 코드를 수정해드리겠습니다. 아래는 index.html과 JavaScript, CSS를 사용한 개선된 예제입니다.

1. app.py 수정 (코드는 동일)
app.py의 코드는 변경할 필요가 없습니다. 하지만 자동 검색 기능을 위해, JavaScript와 CSS를 추가해 전체 화면 스타일을 적용할 것입니다.

2. HTML 템플릿 수정 (templates/index.html)
아래는 수정된 index.html 템플릿입니다:

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Data</title>
    <style>
        /* 전체 화면 다크 계열 그라데이션 배경 */
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background: linear-gradient(to bottom, #2e0057, #000000);
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
        }
        /* 검색 입력 필드 스타일 */
        input[type="text"] {
            padding: 10px;
            font-size: 16px;
            width: 300px;
            border: none;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        /* 테이블 스타일 */
        table {
            width: 80%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        th, td {
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #444444;
        }
        th {
            background-color: #3e3e3e;
        }
        tr:hover {
            background-color: #444444;
        }
        /* 텍스트 링크 스타일 */
        a {
            color: #9d7df0;
            text-decoration: none;
        }
        a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <h1>File Data</h1>
    <input type="text" id="search" placeholder="Search description">
    <table>
        <thead>
            <tr>
                <th>Description</th>
                <th>Link</th>
            </tr>
        </thead>
        <tbody id="data-table">
            {% for item in data %}
            <tr>
                <td>{{ item.description }}</td>
                <td><a href="{{ item.link }}" target="_blank">{{ item.link }}</a></td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <script>
        // 검색 입력 시 자동으로 필터링하는 JavaScript
        document.getElementById('search').addEventListener('input', function() {
            const searchQuery = this.value.toLowerCase();
            const rows = document.querySelectorAll('#data-table tr');
            
            rows.forEach(row => {
                const description = row.querySelector('td').textContent.toLowerCase();
                if (description.includes(searchQuery)) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>
설명
배경 스타일:

body에 그라데이션을 적용하여 보라색(#2e0057)에서 검정(#000000)으로 변하는 배경을 설정했습니다.
검색 기능:

input[type="text"]는 검색 입력 필드를 꾸미기 위한 스타일로, 부드럽고 심플한 디자인을 적용했습니다.
테이블 및 텍스트:

table과 th, td 요소는 다크 테마에 맞춰 깔끔하게 꾸며졌습니다. 테이블 행은 마우스 오버 시 살짝 밝아집니다.
링크는 보라색 계열(#9d7df0)로 설정하여 강조하고, 마우스 오버 시 밑줄이 표시되도록 했습니다.
JavaScript 검색 기능:

input 요소에 input 이벤트 리스너를 추가하여 사용자가 입력할 때마다 자동으로 테이블을 필터링합니다.
검색 입력과 각 행의 설명 텍스트를 비교하여, 일치하는 항목만 표시하고 일치하지 않는 항목은 숨깁니다.