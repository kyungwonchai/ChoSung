아래는 WPF 순수 기능으로 EDB 데이터베이스에서 **그룹(Group)**과 라인(Line) 데이터를 가져와 TreeView에 계층적으로 표시하는 코드입니다. 그룹에는 체크박스가 있고, 선택하면 하위 라인도 함께 선택되도록 구현했습니다.

XAML 코드
xml
코드 복사
<Window x:Class="TreeViewCheckboxExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="TreeView with Checkboxes" Height="600" Width="400">
    <Grid>
        <TreeView x:Name="treeView" ItemsSource="{Binding Groups}" Margin="10">
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Lines}">
                    <StackPanel Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding IsChecked, Mode=TwoWay}" 
                                  Checked="CheckBox_Checked" Unchecked="CheckBox_Unchecked" />
                        <TextBlock Text="{Binding Name}" Margin="5,0,0,0" />
                    </StackPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
        </TreeView>
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeViewCheckboxExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Group> Groups { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // EDB 데이터베이스에서 데이터 로드
            LoadDataFromDatabase();

            // TreeView에 데이터 바인딩
            treeView.ItemsSource = Groups;
        }

        private void LoadDataFromDatabase()
        {
            Groups = new ObservableCollection<Group>();

            // EDB 연결 문자열
            string connectionString = "YourEDBConnectionStringHere";
            string query = "SELECT GroupName, LineName FROM LineTable ORDER BY GroupName, LineName";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        string groupName = reader.GetString(0);
                        string lineName = reader.GetString(1);

                        // 그룹 찾기 또는 새로 추가
                        var group = Groups.FirstOrDefault(g => g.Name == groupName);
                        if (group == null)
                        {
                            group = new Group { Name = groupName };
                            Groups.Add(group);
                        }

                        // 라인 추가
                        group.Lines.Add(new Line { Name = lineName });
                    }
                }
            }
        }

        private void CheckBox_Checked(object sender, RoutedEventArgs e)
        {
            if (treeView.SelectedItem is Group group)
            {
                SetChildrenCheckState(group, true);
            }
            else if (treeView.SelectedItem is Line line)
            {
                var parentGroup = Groups.FirstOrDefault(g => g.Lines.Contains(line));
                UpdateParentCheckState(parentGroup);
            }
        }

        private void CheckBox_Unchecked(object sender, RoutedEventArgs e)
        {
            if (treeView.SelectedItem is Group group)
            {
                SetChildrenCheckState(group, false);
            }
            else if (treeView.SelectedItem is Line line)
            {
                var parentGroup = Groups.FirstOrDefault(g => g.Lines.Contains(line));
                UpdateParentCheckState(parentGroup);
            }
        }

        private void SetChildrenCheckState(Group group, bool isChecked)
        {
            foreach (var line in group.Lines)
            {
                line.IsChecked = isChecked;
            }
        }

        private void UpdateParentCheckState(Group group)
        {
            if (group != null)
            {
                group.IsChecked = group.Lines.All(l => l.IsChecked);
            }
        }
    }

    public class Group : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }
        public ObservableCollection<Line> Lines { get; set; } = new ObservableCollection<Line>();

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class Line : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
SQL 테이블
LineTable 테이블 예제:

sql
코드 복사
CREATE TABLE LineTable (
    GroupName NVARCHAR(100),  -- 그룹 이름
    LineName NVARCHAR(100)    -- 라인 이름
);

INSERT INTO LineTable (GroupName, LineName)
VALUES 
    ('Group A', 'Line 1.1'),
    ('Group A', 'Line 1.2'),
    ('Group B', 'Line 2.1'),
    ('Group B', 'Line 2.2');
코드 설명
EDB 데이터 로드:

LoadDataFromDatabase() 메서드를 통해 GroupName과 LineName을 가져옵니다.
그룹과 라인 데이터를 계층 구조로 만들어 Groups에 추가합니다.
TreeView 계층 구조:

HierarchicalDataTemplate을 사용하여 그룹 및 라인 구조를 표시합니다.
각 항목에 체크박스를 추가하고, 체크 상태를 IsChecked 속성과 바인딩합니다.
체크박스 동기화:

그룹 체크박스를 선택하면 하위 라인도 선택되도록 구현합니다.
라인 체크 상태에 따라 그룹 체크박스 상태를 업데이트합니다.
INotifyPropertyChanged:

**Group**과 Line 클래스에서 체크박스 상태 변경 시 UI에 반영됩니다.
결과
TreeView에 그룹과 라인 데이터를 계층적으로 표시합니다.
체크박스 동기화:
그룹 체크박스를 선택하면 하위 라인이 모두 선택됩니다.