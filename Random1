// RibbonControl의 컨텍스트 메뉴를 열 때 발생하는 이벤트 핸들러
private void ribbonControl_ShowCustomizationMenu(object sender, DevExpress.XtraBars.Ribbon.RibbonCustomizationMenuEventArgs e)
{
    // 링크가 null이면 리턴 (아무 작업도 하지 않음)
    if (e.Link == null) return;

    // 클릭된 메뉴 항목이 MyMenu에 속한 항목인지 확인
    if (myMenuGroup != null && myMenuGroup.ItemLinks.Contains(e.Link))
    {
        // MyMenu 항목이면 "MyMenu에서 삭제" 명령 추가
        BarItemLink menuRemoveFromMyMenu = e.CustomizationMenu.ItemLinks
            .Where(link => link.Caption == "MyMenu에서 삭제").FirstOrDefault();

        // "MyMenu에서 삭제" 명령이 없으면 추가
        if (menuRemoveFromMyMenu == null)
        {
            menuRemoveFromMyMenu = e.CustomizationMenu.AddItem(GetRemoveFromMyMenuCommand(e.Link));
            menuRemoveFromMyMenu.BeginGroup = true;
        }
    }
    else
    {
        // MyMenu 외의 항목인 경우 "MyMenu에 추가" 명령 추가
        BarItemLink menuAddToMyMenu = e.CustomizationMenu.ItemLinks
            .Where(link => link.Caption == "MyMenu에 추가").FirstOrDefault();

        // "MyMenu에 추가" 명령이 없으면 추가
        if (menuAddToMyMenu == null)
        {
            menuAddToMyMenu = e.CustomizationMenu.AddItem(GetAddToMyMenuCommand());
            menuAddToMyMenu.BeginGroup = true;
        }
    }
}

// "MyMenu에 추가" 명령을 정의하고 반환하는 메서드
BarItem biAddToMyMenu;

BarItem GetAddToMyMenuCommand()
{
    // 이미 "MyMenu에 추가" 명령이 생성되어 있다면 반환
    if (biAddToMyMenu != null)
        return biAddToMyMenu;

    // 새 BarButtonItem("MyMenu에 추가") 생성
    biAddToMyMenu = new BarButtonItem();
    biAddToMyMenu.Caption = "MyMenu에 추가"; // 버튼 제목 설정

    // "MyMenu에 추가" 명령이 클릭되었을 때 호출되는 이벤트 핸들러 등록
    biAddToMyMenu.ItemClick += new ItemClickEventHandler(biAddToMyMenu_ItemClick);

    // 리본 컨트롤에 명령 추가
    ribbonControl1.Items.Add(biAddToMyMenu);

    return biAddToMyMenu;
}

// "MyMenu에 추가" 명령 클릭 시 호출되는 이벤트 핸들러
void biAddToMyMenu_ItemClick(object sender, ItemClickEventArgs e)
{
    // 클릭된 항목을 BarButtonItem으로 변환
    BarButtonItem clickedItem = e.Item as BarButtonItem;

    // 클릭된 항목이 null이 아니면 MyMenu에 추가
    if (clickedItem != null && myMenuGroup != null)
    {
        // 클릭된 항목을 MyMenuGroup에 추가
        BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, clickedItem.Caption);
        newMenuItem.ItemClick += MyMenuItem_ItemClick;

        // MyMenuGroup에 추가
        myMenuGroup.ItemLinks.Add(newMenuItem);

        // MyMenu 항목 저장
        SaveMyMenuItems();
    }
}

// "MyMenu에서 삭제" 명령을 정의하고 반환하는 메서드
BarItem biRemoveFromMyMenu;

BarItem GetRemoveFromMyMenuCommand(BarItemLink linkToRemove)
{
    // 이미 "MyMenu에서 삭제" 명령이 생성되어 있다면 반환
    if (biRemoveFromMyMenu != null)
        return biRemoveFromMyMenu;

    // 새 BarButtonItem("MyMenu에서 삭제") 생성
    biRemoveFromMyMenu = new BarButtonItem();
    biRemoveFromMyMenu.Caption = "MyMenu에서 삭제"; // 버튼 제목 설정

    // "MyMenu에서 삭제" 명령이 클릭되었을 때 호출되는 이벤트 핸들러 등록
    biRemoveFromMyMenu.ItemClick += (sender, e) =>
    {
        // MyMenuGroup에서 해당 항목 삭제
        myMenuGroup.ItemLinks.Remove(linkToRemove);

        // MyMenu 항목 저장
        SaveMyMenuItems();
    };

    // 리본 컨트롤에 명령 추가
    ribbonControl1.Items.Add(biRemoveFromMyMenu);

    return biRemoveFromMyMenu;
}

// MyMenu 항목 클릭 처리 이벤트 핸들러
void MyMenuItem_ItemClick(object sender, ItemClickEventArgs e)
{
    BarButtonItem clickedItem = e.Item as BarButtonItem;
    if (clickedItem != null)
    {
        MessageBox.Show($"'{clickedItem.Caption}' 명령이 클릭되었습니다!", "MyMenu 항목");
    }
}

// MyMenu 항목을 JSON 파일로 저장하는 메서드
private void SaveMyMenuItems()
{
    if (myMenuGroup == null) return;

    List<string> menuItems = new List<string>();
    foreach (BarItemLink item in myMenuGroup.ItemLinks)
    {
        menuItems.Add(item.Caption);
    }

    // JSON 형식으로 MyMenu 항목 저장
    string json = JsonConvert.SerializeObject(menuItems);
    File.WriteAllText("MyMenuState.json", json);
}

// MyMenu 항목을 JSON 파일에서 불러오는 메서드
private void LoadMyMenuItems()
{
    // 저장된 MyMenu 상태가 있는지 확인
    if (File.Exists("MyMenuState.json"))
    {
        // JSON 파일에서 MyMenu 항목을 불러옴
        string json = File.ReadAllText("MyMenuState.json");
        List<string> menuItems = JsonConvert.DeserializeObject<List<string>>(json);

        // 각 항목을 MyMenuGroup에 추가
        foreach (string caption in menuItems)
        {
            BarButtonItem newMenuItem = new BarButtonItem(ribbonControl1.Manager, caption);
            newMenuItem.ItemClick += MyMenuItem_ItemClick;
            myMenuGroup.ItemLinks.Add(newMenuItem);
        }
    }
}

// 폼 로드 시 MyMenu 항목 불러오기
private void MainForm_Load(object sender, EventArgs e)
{
    InitializeMyMenu(); // MyMenuGroup 초기화
    LoadMyMenuItems();  // MyMenu 항목 로드
}

// MyMenuGroup 및 페이지 초기화
private void InitializeMyMenu()
{
    if (myMenuGroup == null)
    {
        // MyMenu 페이지가 없으면 생성
        RibbonPage myMenuPage = ribbonControl1.Pages.FirstOrDefault(p => p.Text == "MyMenu");
        if (myMenuPage == null)
        {
            myMenuPage = new RibbonPage("MyMenu");
            ribbonControl1.Pages.Add(myMenuPage);
        }

        // MyMenuGroup 생성
        myMenuGroup = new RibbonPageGroup("MyMenu Group");
        myMenuPage.Groups.Add(myMenuGroup);
    }
}
