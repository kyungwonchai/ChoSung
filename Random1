아래는 C# WinForms와 OpenCV를 활용하여 해당 작업을 수행하는 코드입니다. OpenCV는 이미지 처리와 관련된 작업을 간단히 처리할 수 있으므로 OpenCvSharp 라이브러리를 사용합니다.

Visual Studio에서 NuGet Package Manager를 열어 OpenCvSharp4와 OpenCvSharp4.Windows를 설치하세요.

WinForms 프로젝트에 다음 코드를 작성하세요:

코드
csharp
코드 복사
using OpenCvSharp;
using System;
using System.Drawing;
using System.Linq;
using System.Threading;
using System.Windows.Forms;

public partial class MainForm : Form
{
    private int clickAttempts = 10; // 최대 클릭 시도 횟수
    private string imagePath = "image_path.png"; // 이미지 파일 경로

    public MainForm()
    {
        InitializeComponent();
    }

    private void StartProcess()
    {
        for (int attempt = 0; attempt < clickAttempts; attempt++)
        {
            using (var image = new Mat(imagePath, ImreadModes.Color))
            {
                // 900,200의 RGB 값 확인
                var rgbValue = GetPixelRgb(image, 900, 200);
                if (rgbValue.All(c => c > 30))
                {
                    Console.WriteLine("조건 위배: (900,200) 픽셀이 어두운 색상이 아님");
                    break;
                }

                // 흰색 사각형 탐지
                var topRight = DetectWhiteRectangle(image);
                if (topRight == null)
                {
                    Console.WriteLine("흰색 사각형을 찾지 못했습니다.");
                    break;
                }

                // 우측 상단 좌표에서 (x - 15, y - 15) 계산
                var targetX = topRight.Value.X - 15;
                var targetY = topRight.Value.Y - 15;

                // 클릭 동작
                Close(targetX, targetY);
                Console.WriteLine($"클릭: ({targetX}, {targetY})");

                // 5초 대기
                Thread.Sleep(5000);
            }
        }
    }

    private int[] GetPixelRgb(Mat image, int x, int y)
    {
        var pixel = image.At<Vec3b>(y, x); // OpenCV는 (y, x) 좌표 순서를 사용
        return new[] { pixel[2], pixel[1], pixel[0] }; // BGR -> RGB
    }

    private Point? DetectWhiteRectangle(Mat image)
    {
        // 흰색 범위 탐지 (BGR: 255,255,255)
        var lowerBound = new Scalar(250, 250, 250); // 거의 흰색
        var upperBound = new Scalar(255, 255, 255);
        var mask = new Mat();
        Cv2.InRange(image, lowerBound, upperBound, mask);

        // 컨투어 탐지
        var contours = Cv2.FindContoursAsArray(mask, RetrievalModes.External, ContourApproximationModes.ApproxSimple);
        if (contours.Length == 0)
            return null;

        // 사각형 크기 계산 및 가장 우측 상단 부분 확인
        var largestContour = contours.OrderByDescending(Cv2.ContourArea).FirstOrDefault();
        var rect = Cv2.BoundingRect(largestContour);
        var topRight = new Point(rect.Right, rect.Top);

        return topRight;
    }

    private void Close(int x, int y)
    {
        // 제공된 닫기 함수를 호출합니다.
        Console.WriteLine($"Close 호출: ({x}, {y})");
    }

    private void buttonStart_Click(object sender, EventArgs e)
    {
        StartProcess();
    }
}
주요 로직 설명
픽셀 검사: GetPixelRgb 함수로 (900, 200) 픽셀의 RGB 값을 가져와 어두운 조건인지 확인합니다.
흰색 사각형 탐지: DetectWhiteRectangle 함수에서 흰색 범위를 마스크로 처리하고 가장 큰 사각형의 우측 상단 좌표를 반환합니다.
클릭 좌표 계산: 흰색 사각형 우측 상단 좌표에서 (x - 15, y - 15)를 계산합니다.
반복 동작: 조건에 따라 클릭을 시도하며, 5초 간격으로 최대 10번 반복합니다. 조건 위배 시 중단합니다.
주의
imagePath는 검사할 이미지 경로로 교체하세요.