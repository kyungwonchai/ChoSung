법을 정확하게 구현하겠습니다. 기본적인 아이디어는 삭제 버튼을 각 행에 추가하고, 해당 버튼을 클릭했을 때 그 행을 DataTable에서 삭제하고 GridControl에 반영하는 것입니다.

먼저, XAML 파일에서 GridControl과 삭제 버튼을 포함한 열을 설정합니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew"
                         AllowEditing="True">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Column1" Header="Column1"/>
                <dxg:GridColumn FieldName="Column2" Header="Column2"/>
                <!-- 필요한 다른 컬럼들 추가 -->
                <dxg:GridColumn Header="Delete">
                    <dxg:GridColumn.CellTemplate>
                        <DataTemplate>
                            <Button Content="Delete" Click="DeleteRow_Click" Tag="{Binding}">
                            </Button>
                        </DataTemplate>
                    </dxg:GridColumn.CellTemplate>
                </dxg:GridColumn>
            </dxg:GridControl.Columns>
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" NewItemRowPosition="Top"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
다음으로, C# 코드에서 데이터를 로드하고 삭제 기능을 구현합니다:

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public DataTable DataTable { get; set; }
        private SqlDataAdapter dataAdapter;
        private SqlConnection connection;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            // 데이터베이스 연결 문자열을 설정합니다.
            string connectionString = "your_connection_string_here";

            // SQL 쿼리를 설정합니다.
            string query = "SELECT * FROM YourTable";

            // 연결을 초기화합니다.
            connection = new SqlConnection(connectionString);

            // DataAdapter와 DataTable을 초기화합니다.
            dataAdapter = new SqlDataAdapter(query, connection);
            DataTable = new DataTable();

            // DataAdapter를 사용하여 DataTable을 채웁니다.
            dataAdapter.Fill(DataTable);

            // InsertCommand와 DeleteCommand 설정
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(dataAdapter);
            dataAdapter.InsertCommand = commandBuilder.GetInsertCommand();
            dataAdapter.DeleteCommand = commandBuilder.GetDeleteCommand();

            // GridControl에 DataTable을 바인딩합니다.
            gridControl.ItemsSource = DataTable.DefaultView;
        }

        private void DeleteRow_Click(object sender, RoutedEventArgs e)
        {
            // 버튼의 DataContext를 DataRowView로 변환합니다.
            if (sender is Button button && button.Tag is DataRowView rowView)
            {
                // 행을 삭제합니다.
                rowView.Row.Delete();

                // 데이터베이스에 변경 사항을 업데이트합니다.
                SqlCommandBuilder commandBuilder = new SqlCommandBuilder(dataAdapter);
                dataAdapter.Update(DataTable);
            }
        }
    }
}
위 코드에서 중요한 부분은 DeleteRow_Click 메서드에서 SqlCommandBuilder를 사용하여 DeleteCommand를 재설정하고 dataAdapter.Update(DataTable)을 호출하여 데이터베이스에 변경 사항을 반영하는 것입니다.

만약 여전히 행이 삭제되지 않는다면, 다음 사항들을 확인해야 합니다:

connectionString이 올바르게 초기화되었는지 확인합니다.
데이터베이스 테이블의 기본 키가 설정되어 있는지 확인합니다. 기본 키가 없으면 SqlCommandBuilder가 올바르게 DeleteCommand를 생성할 수 없습니다.
dataAdapter.Update(DataTable) 호출 후 예외가 발생하는지 확인합니다. 필요한 경우 예외 처리를 추가하여 오류를 확인합니다.
다시 시도해보고 문제가 발생할 경우 어떤 오류 메시지가 나오는지 알려주시면 더 구체적으로 도움을 드릴 수 있습니다.