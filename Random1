import java.util.List;
import java.util.Map;
import java.util.Queue;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.UUID;

// ============================================================
// == 실행을 위한 메인 클래스
// ============================================================
public class TrackingSystemRunner {

    // 애플리케이션의 시작점(Entry Point)
    public static void main(String[] args) {
        System.out.println("====== 수배자 추적 시스템 시뮬레이션 시작 ======");

        // --- 시나리오 1: 실시간 추적 요청 ---
        System.out.println("\n--- 시나리오 1: 실시간 추적 요청 처리 ---");
        
        // 1. DI 컨테이너 역할: '실시간' 시나리오에 필요한 의존성 객체들을 생성
        I영상소스제공_App realTimeCctvGw = new CctvGateway();
        I비동기이벤트발행_App realTimeMqGw = new MqGateway();
        I명령팩토리 realTimeFactory = new 실시간추적명령팩토리(realTimeCctvGw, realTimeMqGw);
        커맨드실행기 realTimeInvoker = new 커맨드실행기();
        
        // 2. '실시간' 팩토리를 서비스에 '주입'하여 생성
        I추적오케스트레이션 realTimeService = new TrackingOrchestrationService(realTimeFactory, realTimeInvoker);

        // 3. 실시간 추적 요청 실행
        추적요청DTO realTimeRequest = new 추적요청DTO("S-001", "강남역 일대", "officerA");
        realTimeService.추적요청처리(realTimeRequest);

        System.out.println("\n--------------------------------------------");

        // --- 시나리오 2: 저장된 영상 배치 분석 요청 ---
        System.out.println("\n--- 시나리오 2: 저장된 영상 배치 분석 요청 처리 ---");
        
        // 1. DI 컨테이너 역할: '배치' 시나리오에 필요한 의존성 객체들을 생성
        I저장된영상소스_App batchStorageGw = new StorageGateway(); // CCTV GW 대신 스토리지 GW 사용
        I비동기이벤트발행_App batchMqGw = new MqGateway(); // 메시지큐 GW는 동일하게 사용
        I명령팩토리 batchFactory = new 배치분석명령팩토리(batchStorageGw, batchMqGw); // '배치 분석' 팩토리 사용
        커맨드실행기 batchInvoker = new 커맨드실행기();

        // 2. '배치 분석' 팩토리를 똑같은 서비스 클래스에 '주입'하여 생성
        I추적오케스트레이션 batchService = new TrackingOrchestrationService(batchFactory, batchInvoker);

        // 3. 배치 분석 요청 실행 (추적요청처리 메서드는 그대로 호출)
        추적요청DTO batchRequest = new 추적요청DTO("S-002", "/videos/archive-01.mp4", "officerB");
        batchService.추적요청처리(batchRequest);

        System.out.println("\n====== 시뮬레이션 종료 ======");
    }
}


// ============================================================
// == 공통 DTO (Data Transfer Objects)
// ============================================================
record 추적요청DTO(String suspectId, String area, String requestedBy) {}
class 분석데이터 {}
class EventData {}
class AnalysisResult {}


// ============================================================
// == Node 2: 추적 및 관리 서비스 노드 (App Server)
// ============================================================

// --- Service (Business Logic Layer) ---
interface I추적오케스트레이션 {
    CompletableFuture<String> 추적요청처리(추적요청DTO 요청);
}

class TrackingOrchestrationService implements I추적오케스트레이션 {
    private final I명령팩토리 _commandFactory;
    private final 커맨드실행기 _commandInvoker;

    public TrackingOrchestrationService(I명령팩토리 commandFactory, 커맨드실행기 commandInvoker) {
        this._commandFactory = commandFactory;
        this._commandInvoker = commandInvoker;
    }

    @Override
    public CompletableFuture<String> 추적요청처리(추적요청DTO 요청) {
        String 작업ID = "job-" + UUID.randomUUID().toString().substring(0, 8);
        System.out.println(작업ID + ": [" + 요청.area() + "]에 대한 요청 처리 시작...");

        I명령 영상요청 = _commandFactory.영상요청명령생성(요청.area());
        I명령 AI분석요청 = _commandFactory.AI분석요청명령생성(new 분석데이터());

        _commandInvoker.커맨드추가및실행(영상요청);
        _commandInvoker.커맨드추가및실행(AI분석요청);
        
        System.out.println(작업ID + ": 관련 명령들이 실행기에 전달됨.");
        return CompletableFuture.completedFuture(작업ID);
    }
}

// --- Command & Factory Pattern ---
interface I명령 {
    String get작업ID();
    CompletableFuture<Void> 실행하기();
}

class 커맨드실행기 { // Invoker
    private final Queue<I명령> _commandQueue = new ConcurrentLinkedQueue<>();
    public void 커맨드추가및실행(I명령 명령) {
        _commandQueue.add(명령);
        명령.실행하기();
    }
}

class 영상요청명령 implements I명령 { // ConcreteCommand
    private final I영상소스제공_App _receiver;
    private final String _area;
    private final String 작업ID = "cmd-realtime-video-" + UUID.randomUUID().toString().substring(0, 4);

    public 영상요청명령(I영상소스제공_App receiver, String area) { this._receiver = receiver; this._area = area; }
    @Override public CompletableFuture<Void> 실행하기() {
        return CompletableFuture.runAsync(() -> {
            System.out.println("  > " + get작업ID() + ": " + _area + " 실시간 영상 소스 요청 실행");
            _receiver.requestStream(_area);
        });
    }
    @Override public String get작업ID() { return 작업ID; }
}

class AI분석요청명령 implements I명령 { // ConcreteCommand
    private final I비동기이벤트발행_App _receiver;
    private final 분석데이터 _analysisData;
    private final String 작업ID = "cmd-realtime-ai-" + UUID.randomUUID().toString().substring(0, 4);

    public AI분석요청명령(I비동기이벤트발행_App receiver, 분석데이터 d) { this._receiver = receiver; this._analysisData = d; }
    @Override public CompletableFuture<Void> 실행하기() {
        return CompletableFuture.runAsync(() -> {
            System.out.println("  > " + get작업ID() + ": 실시간 AI 분석 요청 발행 실행");
            _receiver.publishAnalysisRequest(_analysisData);
        });
    }
    @Override public String get작업ID() { return 작업ID; }
}

// --- <<새로 추가된 명령 구현체들>> ---
class 저장된영상요청명령 implements I명령 {
    private final I저장된영상소스_App _receiver;
    private final String _filePath;
    private final String 작업ID = "cmd-batch-video-" + UUID.randomUUID().toString().substring(0, 4);

    public 저장된영상요청명령(I저장된영상소스_App receiver, String filePath) { this._receiver = receiver; this._filePath = filePath; }
    @Override public CompletableFuture<Void> 실행하기() {
        return CompletableFuture.runAsync(() -> {
            System.out.println("  > " + get작업ID() + ": " + _filePath + " 파일 영상 소스 요청 실행");
            _receiver.requestFile(_filePath);
        });
    }
    @Override public String get작업ID() { return 작업ID; }
}

class 고급AI분석요청명령 implements I명령 {
    private final I비동기이벤트발행_App _receiver;
    private final 분석데이터 _analysisData;
    private final String 작업ID = "cmd-batch-ai-" + UUID.randomUUID().toString().substring(0, 4);
    
    public 고급AI분석요청명령(I비동기이벤트발행_App receiver, 분석데이터 d) { this._receiver = receiver; this._analysisData = d; }
    @Override public CompletableFuture<Void> 실행하기() {
        return CompletableFuture.runAsync(() -> {
             System.out.println("  > " + get작업ID() + ": 고오급 AI 분석 요청 발행 실행");
            _receiver.publishAnalysisRequest(_analysisData);
        });
    }
    @Override public String get작업ID() { return 작업ID; }
}


interface I명령팩토리 { // AbstractFactory
    I명령 영상요청명령생성(String 지역또는경로);
    I명령 AI분석요청명령생성(분석데이터 데이터);
}

class 실시간추적명령팩토리 implements I명령팩토리 { // ConcreteFactory 1
    private final I영상소스제공_App _videoProvider;
    private final I비동기이벤트발행_App _eventPublisher;

    public 실시간추적명령팩토리(I영상소스제공_App v, I비동기이벤트발행_App e) { this._videoProvider = v; this._eventPublisher = e; }
    @Override public I명령 영상요청명령생성(String 지역) { return new 영상요청명령(_videoProvider, 지역); }
    @Override public I명령 AI분석요청명령생성(분석데이터 데이터) { return new AI분석요청명령(_eventPublisher, 데이터); }
}

// --- <<새로 추가된 팩토리 구현체>> ---
class 배치분석명령팩토리 implements I명령팩토리 { // ConcreteFactory 2
    private final I저장된영상소스_App _storageProvider;
    private final I비동기이벤트발행_App _eventPublisher;

    public 배치분석명령팩토리(I저장된영상소스_App s, I비동기이벤트발행_App e) { this._storageProvider = s; this._eventPublisher = e; }
    @Override public I명령 영상요청명령생성(String 지역또는경로) { return new 저장된영상요청명령(_storageProvider, 지역또는경로); }
    @Override public I명령 AI분석요청명령생성(분석데이터 데이터) { return new 고급AI분석요청명령(_eventPublisher, 데이터); }
}


// --- Gateways (Infrastructure Layer) ---
interface I영상소스제공_App { void requestStream(String area); }
interface I비동기이벤트발행_App { void publishAnalysisRequest(분석데이터 data); }
interface I저장된영상소스_App { void requestFile(String filePath); } // 새로운 게이트웨이 인터페이스

class CctvGateway implements I영상소스제공_App {
    @Override public void requestStream(String area) {
        System.out.println("    - [CctvGateway] " + area + "의 CCTV 플랫폼에 영상 스트림 요청 전송");
    }
}

class MqGateway implements I비동기이벤트발행_App {
    @Override public void publishAnalysisRequest(분석데이터 data) {
        System.out.println("    - [MqGateway] Analysis_Tasks 토픽으로 AI 분석 작업 메시지 발행");
    }
}

class StorageGateway implements I저장된영상소스_App { // 새로운 게이트웨이 구현체
    @Override public void requestFile(String filePath) {
        System.out.println("    - [StorageGateway] " + filePath + " 경로의 저장된 영상 파일 요청");
    }
}