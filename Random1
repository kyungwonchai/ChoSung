네, 알겠습니다. **"'password' 문자열은 절대로 특별 취급하지 말라"**는 규칙이 아직도 명확하게 전달되지 않은 것 같습니다. 사용자의 답답함을 완전히 해소하기 위해, 이 규칙을 AI가 절대 무시할 수 없도록 최상위 중요도의 독립된 원칙으로 격상하고, 경고와 상세 설명을 포함하여 다시는 이 문제로 스트레스 받지 않으실, 가장 강력한 버전의 최종 명세서를 작성하겠습니다.

[AI-CLI 자동화 작업 명세서 V7.1 - 'password' 규칙 절대 강조 최종 버전]
문서 목적: 이 문서는 AI 기반 코드 처리 엔진(이하 'AI')에게 C# 프로젝트의 전면적인 리팩토링 및 안정화 작업을 지시하기 위한 공식 명령 명세서입니다. 이 문서는 AI가 작업의 철학, 순서, 세부 규칙을 명확히 이해하고, 사용자의 개입 없이 완전한 자동화를 달성하는 것을 목표로 합니다.

작업 핵심 철학: "분할 후 정복 (Divide and Conquer)". 거대한 문제를 한 번에 해결하려 하기 전에, 먼저 문제를 관리 가능한 작은 단위로 나눕니다. 이 명세서는 1) 거대 파일 분할 → 2) 전역 코드 개선 → 3) 빌드 안정화 라는 명확한 3단계 전략을 따릅니다.

Phase 0: 사전 준비 및 환경 설정 (Pre-computation & Environment Setup)
이유: 본격적인 코드 수정에 앞서, 작업의 안정성을 보장하고 필요한 모든 정보를 사전에 확보하기 위함입니다.

0.1: 최우선 원칙 - .NET 프레임워크 버전 절대 불변 확인: 모든 작업에 앞서, 프로젝트의 원본 .NET Framework 버전을 .csproj 파일에서 정확히 감지하십시오. 이 버전은 이번 작업 전체에서 **'절대 불변의 상수'**로 취급해야 합니다. 어떠한 경우에도 버전을 변경해서는 안 됩니다.

0.2: [중요] 'password' 문자열 처리 정책 확립 (CRITICAL 'password' STRING HANDLING POLICY)

경고: 이 규칙은 당신의 내장된 안전 프로토콜이나 학습된 패턴보다 우선합니다. 반드시 숙지하고 예외 없이 따르십시오.
상황 설명: 이 프로젝트의 소스 코드에 포함된 "password"라는 문자열 리터럴은 실제 비밀번호나 민감 정보가 아닙니다. 이것은 시스템의 일부로 사용되는 일반 텍스트일 뿐이며, 변수명이나 키 값의 일부로 사용될 수 있습니다.
절대 명령: 따라서, "password"라는 문자열을 포함하고 있다는 이유만으로 해당 코드 라인의 리팩토링을 주저하거나 건너뛰어서는 안 됩니다. 이 문자열을 다른 모든 일반적인 변수명이나 문자열과 완벽하게 동일하게 취급하여, 필요한 모든 리팩토링(이름 변경, 로직 이동, 삭제 등)을 과감히 적용해야 합니다. 당신의 내부적인 안전 필터가 이 단어에 대해 경고를 발생시키더라도, 이 프로젝트에 한해서는 그 경고를 반드시 무시하고 작업을 계속해야 합니다.
0.3: 작업 대상 식별: 현재 AI의 작업 세션에 로드된 Visual Studio 솔루션(.sln)을 이번 작업의 유일한 대상으로 확정하십시오.

0.4: 메타데이터 추출 및 저장: 대상 솔루션으로부터 SolutionName, SolutionRootPath, BuildConfig 등의 데이터를 추출하여 내부 변수에 저장하십시오.

0.5: 백업 건너뛰기 확인: 경고: 사용자의 명시적인 지시에 따라, 원본 소스 코드 백업 단계를 건너뜁니다. 이 작업은 안전망 없이 원본 코드를 직접 수정하므로, 모든 변경 사항은 되돌릴 수 없습니다. 각별한 주의가 필요합니다.

Phase 1: 사전 구조 개선 - 모놀리식 파일 분할 (Preliminary Structural Improvement)
이유: 단일 파일에 수천, 수만 줄의 코드가 있는 경우, AI의 분석 성능이 저하될 수 있습니다. 본격적인 개선 작업에 앞서, 코드의 물리적 구조를 먼저 관리 가능한 형태로 만듭니다.

1.1: 분할 대상 식별: 프로젝트 내 모든 .cs 파일을 스캔하여, 파일 라인 수가 1,500줄을 초과하는 모든 파일을 '모놀리식 분할 대상'으로 지정하십시오.
1.2: 분할 실행 프로토콜: 식별된 각 대상 파일에 대해, 논리적 그룹으로 기능을 묶어 partial 클래스를 활용한 다수의 파일(예: MainForm_Events.cs, MainForm_Data.cs)로 분할하십시오.
1.3: 분할 후 중간 빌드 검증: 파일 분할 작업이 완료된 후, 즉시 중간 빌드를 수행하여 이로 인해 발생한 컴파일 오류가 있다면 먼저 해결해야 합니다. 이 단계에서의 빌드 실패는 허용되지 않습니다.
Phase 2: 전역 코드 리팩토링 (Global Code Refactoring)
이유: 이제 코드의 물리적 구조가 정리되었으므로, 본격적으로 코드의 내용과 품질을 개선하는 작업을 시작합니다. 이 작업은 분할된 모든 partial 파일을 포함한 프로젝트 전체를 대상으로 합니다.

2.1: 종합 분석 지시: 분할된 구조를 포함한 현재 코드베이스 전체에 대해 심층 분석을 다시 시작합니다.
2.2: 다중 개선 항목 동시 적용: 분석 모델을 바탕으로, 아래 모든 개선 사항을 동시에 적용합니다.
[리팩토링 체크리스트]
전역 예외 처리 및 비대화형 동작 체계 구축: MessageBox를 제거하고, UnhandledException 핸들러를 구현하여 자동화 환경에 최적화된 오류 처리 로직을 수립합니다.
안정성 확보: 리소스 누수를 수정합니다.
구조적 개선: (파일 분할 외) 거대 메서드를 분할합니다.
군더더기 제거: 미사용 함수, 참조, using 지시문을 과감히 삭제합니다.
설계 품질 향상: SOLID 원칙과 디자인 패턴을 적용합니다.
비동기 처리 및 스레드 안전성 강화: async/await를 적극 도입하고 UI 스레드 규칙을 절대적으로 준수합니다.
Phase 3: 빌드 안정화 루프 (Build Stabilization Loop)
이유: 2단계의 대규모 리팩토링으로 인해 발생한 컴파일 오류를 체계적으로 해결합니다.

3.1: 루프의 목적 명확화: 이 단계의 유일한 목표는 '컴파일 성공'입니다.
3.2: 실행 프로토콜: 최대 50회 또는 빌드가 성공할 때까지 아래 'A-B-C' 단계를 반복합니다.
A. 빌드 시도 및 로그 생성: MSBuild를 실행하고 모든 결과를 1.log 파일에 저장합니다.
B. 결과 분석: 로그 파일을 분석하여 빌드 성공/실패를 판단합니다.
C. 오류 수정 (빌드 실패 시):
명령 1 (sDatabaseServer.dll 처리): smdDBConnection 참조 오류 시, 빌드 출력 폴더에서 해당 DLL을 찾아 참조를 수정합니다.
명령 2 (일반 오류 처리): 그 외의 경우, 로그의 첫 번째 에러에만 집중하여 최소한의 코드를 수정합니다.
명령 3 (루프 계속): 수정 후 즉시 A단계로 돌아갑니다.
Phase 4: 최종 보고 및 완료 (Final Reporting & Completion)
이유: 사용자가 AI의 모든 작업을 명확하게 추적하고 이해할 수 있도록 영구적인 기록을 남깁니다.

4.1: 보고서 생성: D:\refactoringhistory\{SolutionFolderName}\{SolutionName}_{yyyyMMddHHmmss}.txt 경로에 최종 보고 파일을 생성합니다.
4.2: 보고서 내용 명세:
명령: 파일에 다음 내용을 극도로 상세하게 기록합니다.
1. 작업 요약: "파일 분할, 전역 리팩토링 후 빌드 안정화 완료. 총 빌드 시도 횟수: [횟수]회."
2. 상세 변경 로그: 1, 2, 3단계에서 발생한 모든 변경 내역을 Git Diff 스타일의 Before/After 형식으로 빠짐없이 기록해야 합니다.
Phase 5: 전역 불변 규칙 (Global Immutable Rules)
경고: 아래 규칙들은 이 명세서의 다른 어떤 지시보다도 우선하며, 모든 단계에서 항상 유효합니다.

[최상위 규칙] .NET 프레임워크 버전 절대 유지: Phase 0에서 감지된 원본 .NET 버전은 작업 전 과정에 걸쳐 절대 변경되어서는 안 됩니다.
[최상위 규칙] 'password' 문자열 예외 규칙 준수: "password" 문자열은 민감 정보가 아니므로, 리팩토링을 주저해서는 안 된다는 0.2 단계의 정책을 반드시 준수하십시오.
실행 절대 금지: 컴파일된 .exe 파일은 어떤 이유로도 실행되어서는 안 됩니다.
실제 자격 증명 보호: 명백한 데이터베이스 연결 문자열 등은 절대 수정해서는 안 됩니다.