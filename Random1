import pandas as pd
from langchain_core.documents import Document

# 1. 사용자가 보여준 엑셀 데이터를 DataFrame으로 준비
# 실제로는 pd.read_excel("파일명.xlsx") 등으로 불러옵니다.
data = {
    'Part Name': ['D-A01-S01110', 'D-A01-S01141'],
    'Physical Class': ['Leaded Component', 'Leaded Component'],
    'Functional Class': ['Diode (gull-wing)', 'Diode (gull-wing)'],
    'L': [1.6, 1.4],
    'W': [0.625, 0.675],
    'T': [0.625, 0.675],
    'Supply Type': ['DS-T0804-S', 'DS-T0802-S'],
    'Supply Kind': ['Tape and Reel', 'Tape and Reel'],
    'Tape Kind': ['Embossed', 'Embossed'],
    'Tape Width': [8, 8],
    'Tape Pitch': [4, 2],
    'Reel Size': ['4:Small (180mm)', '2:Small (180mm)'],
    'Part Count': [5000, 8000],
    'Supply Direction': [0, 0],
    'Pickup Front Setting': ['Part Empty Stop', 'Part Empty Stop']
    # ... 나머지 컬럼들도 동일하게 추가
}
df = pd.DataFrame(data)

# 2. Document 객체로 변환 (전략 적용)
documents = []
for _, row in df.iterrows():
    # === 그룹 1: 의미 기반 검색을 위한 page_content 생성 ===
    # 사용자가 검색할 만한 키워드를 조합해 설명문으로 만듭니다.
    page_content = f"부품명 {row['Part Name']}은 {row['Physical Class']}이며, 기능은 {row['Functional Class']}입니다."
    
    # === 그룹 2: 정확한 조회를 위한 metadata 생성 ===
    # 나머지 모든 컬럼 정보를 그대로 metadata에 저장합니다.
    # to_dict() 함수를 사용하면 모든 컬럼을 한번에 dict로 바꿀 수 있어 편리합니다.
    metadata = row.to_dict()
    
    documents.append(Document(page_content=page_content, metadata=metadata))

# 변환된 결과 확인
for doc in documents:
    print("--- 변환된 Document ---")
    print(f"?? Page Content (벡터 변환 대상): {doc.page_content}")
    print(f"?? Metadata (정보 조회용): {doc.metadata}")