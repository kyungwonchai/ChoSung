래는 DevExpress WPF GridControl에서 Timediff 값이 60 이하인 경우 행의 배경색을 노란색, 텍스트 색상을 검정으로 설정하기 위해 IValueConverter를 사용하는 방법입니다.

1. MSSQL 쿼리 작성
먼저, 데이터를 가져오기 위해 Timediff 값을 계산하는 SQL 쿼리를 작성합니다.

sql
코드 복사
SELECT 
    Id,
    IP,
    ReceivedMessage,
    Time1,
    LogType,
    DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0 -- 과거 데이터만 조회
ORDER BY Id DESC;
2. XAML 코드
GridControl과 TableView에 스타일을 설정하고, RowStyle에서 IValueConverter를 활용합니다.

xaml
코드 복사
<dxg:GridControl Name="gridControl1" AutoGenerateColumns="False">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Id" Header="Id" />
        <dxg:GridColumn FieldName="IP" Header="IP" />
        <dxg:GridColumn FieldName="ReceivedMessage" Header="ReceivedMessage" />
        <dxg:GridColumn FieldName="Time1" Header="Time1" DisplayFormat="G" />
        <dxg:GridColumn FieldName="LogType" Header="LogType" />
        <dxg:GridColumn FieldName="Timediff" Header="Time Difference (Minutes)" />
    </dxg:GridControl.Columns>
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True" ShowGroupPanel="False">
            <dxg:TableView.RowStyle>
                <Style TargetType="dxg:GridRowContent">
                    <Setter Property="Background" 
                            Value="{Binding Timediff, Converter={StaticResource TimediffToBackgroundConverter}}" />
                    <Setter Property="Foreground" 
                            Value="{Binding Timediff, Converter={StaticResource TimediffToForegroundConverter}}" />
                </Style>
            </dxg:TableView.RowStyle>
        </dxg:TableView>
    </dxg:GridControl.View>
</dxg:GridControl>
3. C# 코드 - IValueConverter 구현
3.1 배경색 변경용 TimediffToBackgroundConverter
Timediff 값에 따라 배경색을 설정합니다.

csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

public class TimediffToBackgroundConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int timediff)
        {
            return timediff <= 60 ? Brushes.Yellow : Brushes.White; // 60 이하 노란색, 그 외 흰색
        }
        return Brushes.White;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
3.2 텍스트 색상 변경용 TimediffToForegroundConverter
Timediff 값에 따라 텍스트 색상을 설정합니다.

csharp
코드 복사
public class TimediffToForegroundConverter : IValueConverter
{
    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
    {
        if (value is int timediff)
        {
            return timediff <= 60 ? Brushes.Black : Brushes.Gray; // 60 이하 검정색, 그 외 회색
        }
        return Brushes.Gray;
    }

    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
    {
        throw new NotImplementedException();
    }
}
4. App.xaml에 리소스 등록
위에서 작성한 두 개의 Converter를 WPF 리소스로 등록합니다.

xaml
코드 복사
<Application x:Class="YourNamespace.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:YourNamespace"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <local:TimediffToBackgroundConverter x:Key="TimediffToBackgroundConverter" />
        <local:TimediffToForegroundConverter x:Key="TimediffToForegroundConverter" />
    </Application.Resources>
</Application>
5. 데이터 모델 정의
Timediff 값을 포함한 데이터 모델을 정의합니다.

csharp
코드 복사
public class LogMessage
{
    public int Id { get; set; }
    public string IP { get; set; }
    public string ReceivedMessage { get; set; }
    public DateTime Time1 { get; set; }
    public string LogType { get; set; }
    public int Timediff { get; set; } // 시간 차이 (분 단위)
}
6. 데이터 가져오기
SQL 쿼리를 실행하여 데이터를 가져오고, Timediff 값을 포함한 리스트를 반환합니다.

csharp
코드 복사
private List<LogMessage> GetDataFromDatabase()
{
    List<LogMessage> logMessages = new List<LogMessage>();

    string connectionString = "Server=your_server;Database=SMD_ACR_ROUTER;User Id=your_username;Password=your_password;";

    using (SqlConnection connection = new SqlConnection(connectionString))
    {
        string query = @"
            SELECT 
                Id,
                IP,
                ReceivedMessage,
                Time1,
                LogType,
                DATEDIFF(MINUTE, Time1, GETDATE()) AS Timediff
            FROM [SMD_ACR_ROUTER].[dbo].[LogMessages]
            WHERE DATEDIFF(MINUTE, Time1, GETDATE()) >= 0
            ORDER BY Id DESC;";
        
        SqlCommand command = new SqlCommand(query, connection);
        connection.Open();
        SqlDataReader reader = command.ExecuteReader();

        while (reader.Read())
        {
            logMessages.Add(new LogMessage
            {
                Id = reader.GetInt32(0),
                IP = reader.GetString(1),
                ReceivedMessage = reader.GetString(2),
                Time1 = reader.GetDateTime(3),
                LogType = reader.GetString(4),
                Timediff = reader.GetInt32(5)
            });
        }
    }

    return logMessages;
}
7. 데이터 새로고침
10초마다 데이터를 새로고침하여 최신 상태를 유지합니다.

csharp
코드 복사
DispatcherTimer refreshTimer = new DispatcherTimer();

public MainWindow()
{
    InitializeComponent();

    // 타이머 설정
    refreshTimer.Interval = TimeSpan.FromSeconds(10);
    refreshTimer.Tick += (s, e) => RefreshData();
    refreshTimer.Start();

    // 초기 데이터 로드
    RefreshData();
}

private void RefreshData()
{
    gridControl1.ItemsSource = GetDataFromDatabase();
}
최종 결과
조건부 스타일:

Timediff 값이 60 이하인 행은 배경색이 노란색, 텍스트 색상이 검정색으로 표시됩니다.
Timediff 값이 60을 초과하는 행은 기본 스타일(흰 배경, 회색 텍스트)로 표시됩니다.
자동 새로고침:
