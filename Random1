글 깨짐 문제를 해결하려면, 파일 입출력 시 UTF-8 인코딩에 BOM(Byte Order Mark)을 추가해야 합니다. Python의 csv 모듈은 기본적으로 BOM 없이 UTF-8로 저장하기 때문에 Excel 등에서 열 때 한글이 깨질 수 있습니다.

이를 해결하기 위해 io 모듈의 TextIOWrapper를 사용하여 UTF-8 BOM으로 CSV 파일을 저장하도록 수정했습니다.

수정된 Python 코드 (UTF-8 BOM 추가)
python
코드 복사
import csv
import io

def extract_bar_button_details(input_file, output_file):
    """
    XtraBars.BarButtonItem 버튼의 변수 이름을 추출한 뒤,
    각 버튼 변수의 속성을 완전 탐색하여 데이터를 CSV로 저장하는 함수.
    """
    # 버튼 변수 이름 저장 리스트
    button_names = []
    # 결과 데이터를 저장할 리스트
    button_data = []

    try:
        # 입력 파일 읽기
        with open(input_file, 'r', encoding='utf-8') as file:
            lines = file.readlines()

        # 1. 버튼 변수 이름 추출
        for line in lines:
            stripped_line = line.strip()
            # XtraBars.BarButtonItem 선언 확인
            if "XtraBars.BarButtonItem" in stripped_line and "=" in stripped_line:
                # 변수 이름 추출
                button_name = stripped_line.split('=')[0].strip()
                button_names.append(button_name)

        # 2. 각 버튼 변수에 대해 완전 탐색 수행
        for button_name in button_names:
            # 버튼 속성 초기화
            button_details = {
                "button_name": button_name,
                "caption": None,
                "id": None,
                "image": None,
                "large_image": None,
                "font": None,
                "use_font": None,
                "name": None,
                "item_click": None
            }

            for line in lines:
                stripped_line = line.strip()
                # 현재 버튼의 속성을 탐지
                if f"{button_name}.Caption" in stripped_line and "=" in stripped_line:
                    button_details["caption"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.Id" in stripped_line and "=" in stripped_line:
                    button_details["id"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ImageOptions.Image" in stripped_line and "=" in stripped_line:
                    button_details["image"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ImageOptions.LargeImage" in stripped_line and "=" in stripped_line:
                    button_details["large_image"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemAppearance.Normal.Font" in stripped_line and "=" in stripped_line:
                    button_details["font"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemAppearance.Normal.Options.UseFont" in stripped_line and "=" in stripped_line:
                    button_details["use_font"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.Name" in stripped_line and "=" in stripped_line:
                    button_details["name"] = stripped_line.split('=')[1].strip().strip('"')
                elif f"{button_name}.ItemClick" in stripped_line and "=" in stripped_line:
                    button_details["item_click"] = stripped_line.split('=')[1].strip().strip('"')

            # 버튼 데이터를 리스트에 추가
            button_data.append(button_details)

        # 3. CSV 파일로 저장 (UTF-8 with BOM)
        with open(output_file, 'w', newline='', encoding='utf-8-sig') as csvfile:
            csvwriter = csv.writer(csvfile)
            # CSV 헤더 작성
            csvwriter.writerow([
                'Button Variable Name', 'Caption', 'Id', 'Image',
                'Large Image', 'Font', 'Use Font', 'Name', 'Item Click'
            ])
            # 데이터 작성
            for button in button_data:
                csvwriter.writerow([
                    button.get("button_name", ""),
                    button.get("caption", ""),
                    button.get("id", ""),
                    button.get("image", ""),
                    button.get("large_image", ""),
                    button.get("font", ""),
                    button.get("use_font", ""),
                    button.get("name", ""),
                    button.get("item_click", "")
                ])

        print(f"버튼 데이터를 {output_file} 파일에 성공적으로 저장했습니다.")

    except Exception as e:
        # 오류 발생 시 출력
        print(f"오류 발생: {e}")

# 실행
input_path = r"C:\agent\txt1.txt"  # 디자이너 파일 경로
output_path = r"C:\agent\bar_button_data.csv"  # 출력 CSV 경로
extract_bar_button_details(input_path, output_path)
주요 변경점