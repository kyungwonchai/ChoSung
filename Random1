네, 알겠습니다. 한글 버전 DataSpell 환경을 기준으로 3단계: 주피터 노트북 생성 및 코드 작성 부분을 다시 자세히 설명해 드리겠습니다.

## 3단계: 주피터 노트북 생성 및 코드 작성
이제 실제 데이터 분석 작업을 진행할 노트북 파일을 만들고, MS SQL Server에 접속해서 데이터를 가져와 표와 차트로 만드는 코드를 작성해 보겠습니다.

1. 새 주피터 노트북 파일 만들기
DataSpell 왼쪽의 탐색기 패널(프로젝트 폴더가 보이는 곳)에서 마우스 오른쪽 버튼을 클릭합니다.

나타나는 메뉴에서 새로 만들기 > Jupyter Notebook 을 선택합니다.

파일 이름을 mssql_analysis.ipynb 와 같이 입력하고 엔터를 칩니다.

2. 코드 작성 및 실행
새로 만들어진 노트북의 회색 상자(셀, Cell)에 아래 코드들을 순서대로 붙여넣고, 각 셀마다 Shift + Enter 키를 누르거나 셀 왼쪽의 녹색 실행(▶) 버튼을 눌러 실행하세요.

코드 셀 1: 필수 라이브러리 불러오기
가장 먼저 데이터 분석에 필요한 도구(라이브러리)들을 불러오는 코드입니다.

Python

# 데이터베이스 연결, 데이터 처리, 차트 그리기에 필요한 라이브러리를 불러옵니다.
import pyodbc
import pandas as pd
import matplotlib.pyplot as plt

# 차트에 한글을 표시하기 위한 라이브러리 설정입니다.
import platform
from matplotlib import font_manager, rc

print("? 라이브러리 로드 완료!")
코드 셀 2: MS SQL Server 연결 정보 입력
데이터가 있는 다른 PC의 MS SQL Server에 접속하기 위한 정보를 입력하는 부분입니다. '따옴표' 안의 내용을 사용자 본인의 정보로 정확하게 수정해야 합니다.

Python

# -------------------- [?? 사용자 정보 입력 부분 ??] --------------------
SERVER_IP = '192.168.0.100'  # 데이터를 가져올 PC의 IP 주소
DB_NAME = 'MyDatabase'      # 접속할 데이터베이스 이름
USER_ID = 'sa'              # SQL Server 접속 아이디
PASSWORD = 'YourPassword123'  # 접속 비밀번호
# --------------------------------------------------------------------

# 위 정보를 바탕으로 데이터베이스에 연결을 시도합니다.
try:
    connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={SERVER_IP};DATABASE={DB_NAME};UID={USER_ID};PWD={PASSWORD}'
    conn = pyodbc.connect(connection_string)
    print("? 데이터베이스 연결 성공!")
except Exception as e:
    print(f"? 연결 실패: {e}")
코드 셀 3: 데이터 가져와서 '표'로 확인하기
SQL 쿼리문을 이용해 원하는 데이터를 가져와서 보기 좋은 표(DataFrame) 형태로 출력합니다.

Python

# 실행할 SQL 쿼리문입니다. 'YourTableName'을 실제 테이블 이름으로 바꾸세요.
sql_query = "SELECT TOP 100 * FROM YourTableName"

# SQL 쿼리를 실행하고, 결과를 pandas의 DataFrame(표) 형식으로 가져옵니다.
df = pd.read_sql(sql_query, conn)

# df 라고만 입력하면 노트북에 결과 표가 예쁘게 출력됩니다.
df
이 셀을 실행하면, 아래와 같이 데이터가 깔끔한 표 형태로 나타납니다.

코드 셀 4: 데이터를 '차트'로 그리기
앞서 가져온 표 데이터를 이용해 시각적인 차트를 그립니다. 차트의 한글 제목이 깨지지 않도록 설정하는 코드가 포함되어 있습니다.

Python

# Windows 환경에서 차트의 한글이 깨지지 않도록 '맑은 고딕' 폰트를 설정합니다.
if platform.system() == 'Windows':
    path = "c:/Windows/Fonts/malgun.ttf"
    font_name = font_manager.FontProperties(fname=path).get_name()
    rc('font', family=font_name)

# --- 차트 그리기 예제 ---
# 'Sales' 라는 이름의 열(컬럼)이 있다면 막대 그래프를 그립니다.
if 'Sales' in df.columns:
    plt.figure(figsize=(10, 6)) # 차트 크기 조절
    df['Sales'].plot(kind='bar', title='매출 현황')
    plt.ylabel('매출액')
    plt.show() # 차트 보여주기

# 'Sales' 열이 없다면, 숫자 데이터 중 첫 번째 열로 분포도(히스토그램)를 그립니다.
else:
    numeric_cols = df.select_dtypes(include='number').columns
    if len(numeric_cols) > 0:
        column_to_plot = numeric_cols[0]
        plt.figure(figsize=(10, 6))
        df[column_to_plot].hist()
        plt.title(f'[{column_to_plot}] 데이터 분포')
        plt.show()
    else:
        print("차트를 그릴만한 숫자 데이터가 없습니다.")

# 모든 작업이 끝났으므로 데이터베이스 연결을 안전하게 닫습니다.
conn.close()
print("데이터베이스 연결을 종료했습니다.")