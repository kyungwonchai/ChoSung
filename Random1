Diagnostics.Process 클래스를 사용할 수 있습니다. 이를 이용해 Python 스크립트에 엑셀 파일을 파라미터로 전달하고, 실행 결과나 에러를 받아 WPF에 표시할 수 있습니다.
C# 코드 (WPF)

csharp

using System.Diagnostics;
using Microsoft.Win32;

// 버튼 클릭 이벤트 핸들러
private void Button_Click(object sender, RoutedEventArgs e)
{
    OpenFileDialog openFileDialog = new OpenFileDialog();
    openFileDialog.Filter = "Excel Files|*.xlsx";
    if (openFileDialog.ShowDialog() == true)
    {
        string excelFilePath = openFileDialog.FileName;
        RunPythonScript(excelFilePath);
    }
}

private void RunPythonScript(string excelFilePath)
{
    ProcessStartInfo start = new ProcessStartInfo();
    start.FileName = "python";
    start.Arguments = $"your_script.py \"{excelFilePath}\"";
    start.RedirectStandardOutput = true;
    start.RedirectStandardError = true;
    start.UseShellExecute = false;
    start.CreateNoWindow = true;

    using (Process process = new Process { StartInfo = start })
    {
        process.Start();
        string output = process.StandardOutput.ReadToEnd();
        string error = process.StandardError.ReadToEnd();
        process.WaitForExit();

        if (!string.IsNullOrEmpty(error))
        {
            // WPF에 에러 표시
        }
        else
        {
            // WPF에 성공 메시지 표시
        }
    }
}

Python 코드

python

import sys

def main(excel_file_path):
    # DB 업로드 로직
    pass

if __name__ == '__main__':
    excel_file_path = sys.argv[1]
    main(excel_file_path)

이렇게 하면 C#에서 버튼을 누르면 OpenFileDialog가 뜨고, 사용자가 선택한 엑셀 파일 경로를 Python 스크립트로 전달합니다. 스크립트 실행 결과를 StandardOutput과 StandardError를 통해 가져와 WPF에 표시할 수 있습니다.

에러 처리나 결과 표시는 WPF에서 추가로 구현해주시면 됩니다.
