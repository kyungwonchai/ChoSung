PF DevExpress RichEditControl로 메모 관리 프로그램 만들기

1. 프로젝트 설정

WPF Application 프로젝트 생성.
NuGet을 통해 DevExpress.Wpf.RichEdit 라이브러리를 설치.
bash
Copy code
Install-Package DevExpress.Wpf.RichEdit -Version 22.2
2. UI 설계 (MainWindow.xaml)

xml
Copy code
<Window x:Class="MemoManagementApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/richedit"
        xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/richtext"
        Title="Memo Management" Height="600" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        
        <!-- 담당자별 버튼 -->
        <ComboBox x:Name="CmbManagers" Grid.Row="0" Margin="10" Width="200" SelectionChanged="CmbManagers_SelectionChanged"/>

        <!-- RichEditControl (메모 편집기) -->
        <dxe:RichEditControl x:Name="MemoEditor" Grid.Row="1" Margin="10">
            <dxe:RichEditControl.Options>
                <dxe:RichEditControlOptions>
                    <dxr:DocumentCapabilitiesOptions Layout="ReadOnly" />
                </dxe:RichEditControlOptions>
            </dxe:RichEditControl.Options>
        </dxe:RichEditControl>

        <!-- 저장 버튼 -->
        <Button x:Name="BtnSave" Grid.Row="2" Content="Save" Margin="10" Width="100" Click="BtnSave_Click" IsEnabled="False"/>
    </Grid>
</Window>
3. 코드 비하인드 (MainWindow.xaml.cs)

csharp
Copy code
using DevExpress.XtraRichEdit;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

namespace MemoManagementApp {
    public partial class MainWindow : Window {
        private readonly string connectionString = "YOUR_CONNECTION_STRING";
        private Dictionary<string, int> managerIds;
        private bool hasEditPermission = false;

        public MainWindow() {
            InitializeComponent();
            LoadManagers();
        }

        private void LoadManagers() {
            managerIds = new Dictionary<string, int>();
            using (SqlConnection conn = new SqlConnection(connectionString)) {
                conn.Open();
                string query = "SELECT ManagerID, ManagerName FROM Managers";
                SqlCommand cmd = new SqlCommand(query, conn);
                SqlDataReader reader = cmd.ExecuteReader();

                while (reader.Read()) {
                    managerIds[reader["ManagerName"].ToString()] = (int)reader["ManagerID"];
                }
            }

            CmbManagers.ItemsSource = managerIds.Keys;
        }

        private void LoadMemo(int managerId) {
            using (SqlConnection conn = new SqlConnection(connectionString)) {
                conn.Open();
                string query = "SELECT MemoContent, EditPermission FROM Memos WHERE ManagerID = @ManagerID";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@ManagerID", managerId);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read()) {
                    MemoEditor.LoadDocument(reader["MemoContent"] as byte[], DocumentFormat.OpenXml);
                    hasEditPermission = (bool)reader["EditPermission"];
                } else {
                    MemoEditor.CreateNewDocument();
                    hasEditPermission = false;
                }
            }

            UpdateEditPermissions();
        }

        private void UpdateEditPermissions() {
            MemoEditor.ReadOnly = !hasEditPermission;
            BtnSave.IsEnabled = hasEditPermission;
        }

        private void CmbManagers_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e) {
            if (CmbManagers.SelectedItem != null) {
                int managerId = managerIds[CmbManagers.SelectedItem.ToString()];
                LoadMemo(managerId);
            }
        }

        private void BtnSave_Click(object sender, RoutedEventArgs e) {
            if (CmbManagers.SelectedItem != null) {
                int managerId = managerIds[CmbManagers.SelectedItem.ToString()];
                SaveMemo(managerId);
            }
        }

        private void SaveMemo(int managerId) {
            byte[] memoContent;
            using (System.IO.MemoryStream stream = new System.IO.MemoryStream()) {
                MemoEditor.SaveDocument(stream, DocumentFormat.OpenXml);
                memoContent = stream.ToArray();
            }

            using (SqlConnection conn = new SqlConnection(connectionString)) {
                conn.Open();
                string query = "IF EXISTS (SELECT * FROM Memos WHERE ManagerID = @ManagerID) " +
                               "UPDATE Memos SET MemoContent = @MemoContent WHERE ManagerID = @ManagerID " +
                               "ELSE INSERT INTO Memos (ManagerID, MemoContent, EditPermission) VALUES (@ManagerID, @MemoContent, @EditPermission)";
                SqlCommand cmd = new SqlCommand(query, conn);
                cmd.Parameters.AddWithValue("@ManagerID", managerId);
                cmd.Parameters.AddWithValue("@MemoContent", memoContent);
                cmd.Parameters.AddWithValue("@EditPermission", hasEditPermission);
                cmd.ExecuteNonQuery();
            }

            MessageBox.Show("Memo saved successfully.", "Information", MessageBoxButton.OK, MessageBoxImage.Information);
        }
    }
}
4. 데이터베이스 테이블 구성

Managers 테이블
sql
Copy code
CREATE TABLE Managers (
    ManagerID INT PRIMARY KEY IDENTITY,
    ManagerName NVARCHAR(100)
);
Memos 테이블
sql
Copy code
CREATE TABLE Memos (
    ManagerID INT FOREIGN KEY REFERENCES Managers(ManagerID),
    MemoContent VARBINARY(MAX),
    EditPermission BIT
);
5. 추가 고려 사항

권한 관리: 특정 사용자만 편집할 수 있는 기능 구현을 위해 로그인 시스템을 추가하거나 사용자별 권한 관리를 설정할 수 있습니다.
RichEditControl 문서 레이아웃 설정: 문서의 여백을 최소화하기 위해 문서의 페이지 레이아웃을 설정할 수 있습니다.
csharp
Copy code
private void SetDocumentMargins() {
    var section = MemoEditor.Document.Sections[0];
    section.Page.Margins.Left = 10;
    section.Page.Margins.Right = 10;
    section.Page.Margins.Top = 10;
    section.Page.Margins.Bottom = 10;
}
6. 최종 문서 여백 설정 추가

MainWindow 생성자 또는 LoadMemo 함수에서 SetDocumentMargins() 호출.
csharp
Copy code
private void LoadMemo(int managerId) {
    using (SqlConnection conn = new SqlConnection(connectionString)) {
        conn.Open();
        string query = "SELECT MemoContent, EditPermission FROM Memos WHERE ManagerID = @ManagerID";
        SqlCommand cmd = new SqlCommand(query, conn);
        cmd.Parameters.AddWithValue("@ManagerID", managerId);
        SqlDataReader reader = cmd.ExecuteReader();

        if (reader.Read()) {
            MemoEditor.LoadDocument(reader["MemoContent"] as byte[], DocumentFormat.OpenXml);
            hasEditPermission = (bool)reader["EditPermission"];
        } else {
            MemoEditor.CreateNewDocument();
            hasEditPermission = false;
        }
    }

    UpdateEditPermissions();
    SetDocumentMargins();
}
이렇게 하면 특정 담당자별 메모를 편집 및 관리할 수 있는 프로그램을 WPF DevExpress RichEditControl을 활용하여 구축할 수 있습니다.