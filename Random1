래는 MySQL 5.7과 호환되는 JDBC 드라이버 연결을 위한 코드와 URL 예제, 그리고 예외 발생 시 로그를 출력하는 코드를 포함한 예제입니다.

1. MySQL 5.7을 위한 JDBC URL 예제
MySQL 데이터베이스에 연결하기 위한 기본적인 URL 예제는 다음과 같습니다:

kotlin
코드 복사
val mySqlUrl = "jdbc:mysql://<MYSQL_SERVER>:3306/<MYSQL_DATABASE>?useSSL=false&serverTimezone=UTC"
위에서 <MYSQL_SERVER>와 <MYSQL_DATABASE>는 실제 서버 주소와 데이터베이스 이름으로 교체해 주어야 합니다.

2. Class.forName과 JDBC 연결 코드 예제
다음은 MySQL 5.7을 사용한 실제 연결 코드와 예외 처리 코드입니다.

kotlin
코드 복사
private suspend fun checkModelInMySQL(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        var connection: Connection? = null
        var preparedStatement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null
        try {
            // 최신 MySQL JDBC 드라이버 로드
            Class.forName("com.mysql.cj.jdbc.Driver")

            // 데이터베이스 연결
            val mySqlUrl = "jdbc:mysql://<MYSQL_SERVER>:3306/<MYSQL_DATABASE>?useSSL=false&serverTimezone=UTC"
            connection = DriverManager.getConnection(mySqlUrl, mySqlUser, mySqlPassword)

            // 쿼리 실행
            val query = "SELECT district, at, modelnumber FROM smd.management_mobile_mainseet WHERE modelnumber = ?"
            preparedStatement = connection.prepareStatement(query)
            preparedStatement.setString(1, qrCode)
            
            resultSet = preparedStatement.executeQuery()

            // 결과 처리
            if (resultSet.next()) {
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val modelnumber = resultSet.getString("modelnumber")
                result = "District: $district, At: $at, Model: $modelnumber"
            }
        } catch (e: Exception) {
            // 로그로 예외 출력
            e.printStackTrace()
            // 로그 추가
            Log.e("MySQLConnection", "Error connecting to MySQL: ${e.message}")
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                connection?.close()
            } catch (e: Exception) {
                e.printStackTrace()
                Log.e("MySQLConnection", "Error closing MySQL resources: ${e.message}")
            }
        }
        result
    }
}
3. 주요 사항:
Class.forName 사용:

Class.forName("com.mysql.cj.jdbc.Driver")를 사용하여 MySQL JDBC 드라이버를 명시적으로 로드합니다.
JDBC URL:

"jdbc:mysql://<MYSQL_SERVER>:3306/<MYSQL_DATABASE>?useSSL=false&serverTimezone=UTC" 형식의 URL을 사용합니다. <MYSQL_SERVER>를 실제 서버 주소로, <MYSQL_DATABASE>를 실제 데이터베이스 이름으로 변경하세요.
useSSL=false는 SSL을 사용하지 않는 설정이며, serverTimezone=UTC는 시간대 문제를 해결하기 위한 설정입니다.
에러 메시지 로그 출력:

catch 블록에서 e.printStackTrace()를 사용하여 스택 트레이스를 출력합니다.
Log.e("MySQLConnection", "Error connecting to MySQL: ${e.message}")로 에러 메시지를 로그에 기록합니다.
MySQL 5.7 호환:

위 코드는 MySQL 5.7에서 작동하도록 작성되었습니다.
예외 처리 및 디버깅:
e.printStackTrace(): 예외가 발생하면 콘솔에 스택 트레이스를 출력합니다.
Log.e: Android 로그 시스템에 예외 메시지를 기록합니다.
이 코드로 MySQL에 연결하고 쿼리를 실행하는 중에 발생하는 모든 예외를 처리할 수 있습니다. 만약 여전히 연결에 문제가 발생한다면, 데이터베이스 서버 주소, 포트, 데이터베이스 이름, 사용자 이름, 비밀번호 등이 정확한지 확인해보