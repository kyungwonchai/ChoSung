네, 사용자께서 에러 발생 가능성을 인지하시고 나머지 UI 관련 코드를 요청하셨습니다.
이전 답변에서는 LoginViewModel.cs와 MainViewModel.cs의 기본 구조까지 제공했습니다.

이제 다음 순서대로 나머지 UI 파일들을 제공하겠습니다:

Views/LoginWindow.xaml (이미 이전 답변에 XAML 일부 제공, 완성형으로)
Views/LoginWindow.xaml.cs (ViewModel 연결 및 창 닫기 로직)
ViewModels/AgentConfigViewModel.cs: Agent 추가/수정 창의 로직.
Views/AgentConfigWindow.xaml: Agent 추가/수정 창 XAML.
Views/AgentConfigWindow.xaml.cs: Agent 추가/수정 창 코드 비하인드.
Views/MainWindow.xaml (이전 답변에 XAML 일부 제공, 완성형으로).
Views/MainWindow.xaml.cs (ViewModel 연결 및 창 닫기 시 정리 로직).
App.xaml.cs: 애플리케이션 시작 로직, 서비스 초기화, 로그인 창 표시, 메인 창으로 전환.
App.config 파일 예시 (DB 연결 문자열, Broker 주소 설정 포함).
이번 답변에서는 **로그인 창(LoginWindow.xaml, LoginWindow.xaml.cs)**과 Agent 설정 창(AgentConfigViewModel.cs, AgentConfigWindow.xaml, AgentConfigWindow.xaml.cs) 코드를 먼저 제공하겠습니다. MainWindow와 App.xaml.cs는 양이 많으므로 다음 답변에서 이어서 드리겠습니다.

AgentConfigViewModel.cs 주요 기능:

새로운 Agent 정보 또는 기존 Agent 정보를 받아와서 UI에 바인딩.
유효성 검사.
저장 명령 (ICommand) - DatabaseService를 통해 DB에 추가 또는 업데이트.
창 닫기.
AgentConfigWindow.xaml 주요 구성:

Agent 이름, Agent ID(IP), 설명, 제어 타입(Direct/Gatewayed), IP, Port, 게이트웨이 IP, 게이트웨이 Port 등 입력 필드.
저장, 취소 버튼.
MVVM 헬퍼 클래스(ObservableObject, RelayCommand)와 BooleanToVisibilityConverter는 이전 답변에서 제공한 것을 사용한다고 가정합니다. Models 폴더의 클래스들도 이전 답변의 내용을 사용합니다.

그럼 코드 제공을 시작하겠습니다.

네, 알겠습니다. 에러가 발생하더라도 일단 전체 코드를 다 붙여넣고 한 번에 점검하시는 것이 더 효율적일 수 있습니다.

이전에 LoginViewModel.cs와 MainViewModel.cs의 기본 구조까지 드렸습니다. 이제 로그인 창의 XAML 및 코드 비하인드, 그리고 Agent 설정을 위한 새 창(XAML, 코드 비하인드, ViewModel), 그 다음 메인 창의 XAML 및 코드 비하인드, 마지막으로 App.xaml.cs 순서로 드리겠습니다.

7. Views/LoginWindow.xaml (로그인 창 XAML - 완성)

이전 답변에서 일부 제공되었지만, 완전한 형태로 다시 드립니다.

XML

<Window x:Class="MGSPMonitorControl.Views.LoginWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl.Views" 
        xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        mc:Ignorable="d"
        Title="Login - MGSP Monitor Control" Height="380" Width="420"
        WindowStartupLocation="CenterScreen" ResizeMode="NoResize" ShowInTaskbar="True"
        FocusManager.FocusedElement="{Binding ElementName=UsernameTextBox}"
        d:DataContext="{d:DesignInstance Type=viewmodels:LoginViewModel, IsDesignTimeCreatable=False}">
    <Window.Resources>
        <local:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    </Window.Resources>
    <Grid Margin="25">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="MGSP Monitor Control" FontSize="22" FontWeight="Bold" HorizontalAlignment="Center" Margin="0,0,0,25"/>

        <TextBlock Grid.Row="1" Text="Username:" Margin="0,5,0,2"/>
        <TextBox Grid.Row="2" x:Name="UsernameTextBox" 
                 Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}" 
                 Height="30" Margin="0,0,0,10" VerticalContentAlignment="Center" FontSize="14"/>

        <TextBlock Grid.Row="3" Text="Password:" Margin="0,5,0,2"/>
        <PasswordBox Grid.Row="4" x:Name="PasswordBoxControl" Height="30" Margin="0,0,0,20" VerticalContentAlignment="Center" FontSize="14" />

        <Button Grid.Row="5" Content="Login" 
                Command="{Binding LoginCommand}" 
                CommandParameter="{Binding ElementName=PasswordBoxControl}" 
                IsDefault="True" Height="35" Width="120" 
                HorizontalAlignment="Center" Margin="0,0,0,10" 
                IsEnabled="{Binding !IsLoggingIn}" FontSize="14" FontWeight="SemiBold"/>
        
        <StackPanel Grid.Row="6" Orientation="Vertical" HorizontalAlignment="Center">
            <TextBlock Text="{Binding ErrorMessage}" Foreground="Red" TextWrapping="Wrap" MaxWidth="300" Margin="0,5,0,0"/>
            <TextBlock Visibility="{Binding IsLoggingIn, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="0,5,0,0">
                <Run Text="Logging in... Please wait."/>
            </TextBlock>
        </StackPanel>
    </Grid>
</Window>
8. Views/LoginWindow.xaml.cs (로그인 창 코드 비하인드 - 수정됨)

ViewModel을 주입받고, 로그인 성공 시 DialogResult를 설정합니다.

C#

// MGSPMonitorControl/Views/LoginWindow.xaml.cs
using System.Windows;
using MGSPMonitorControl.ViewModels; // LoginViewModel
using MGSPMonitorControl.Models;    // UserSession

namespace MGSPMonitorControl.Views
{
    public partial class LoginWindow : Window
    {
        private LoginViewModel _viewModel;

        public UserSession AuthenticatedUserSession { get; private set; }

        // 생성자에서 ViewModel을 직접 만들지 않고, App.xaml.cs에서 주입받도록 변경
        public LoginWindow(LoginViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel; // DataContext 설정

            // ViewModel의 로그인 성공 이벤트 구독
            _viewModel.LoginSuccess += OnLoginSuccess;
        }

        private void OnLoginSuccess(UserSession userSession)
        {
            AuthenticatedUserSession = userSession;
            DialogResult = true; // 모달 다이얼로그의 결과 설정
            // Close(); // DialogResult = true로 설정하면 자동으로 닫힘 (ShowDialog() 호출 시)
        }

        // 창이 닫힐 때 이벤트 구독 해제 (메모리 누수 방지)
        protected override void OnClosed(System.EventArgs e)
        {
            if (_viewModel != null)
            {
                _viewModel.LoginSuccess -= OnLoginSuccess;
            }
            base.OnClosed(e);
        }
    }
}
9. ViewModels/AgentConfigViewModel.cs (Agent 추가/수정 창 ViewModel)

C#

// MGSPMonitorControl/ViewModels/AgentConfigViewModel.cs
using System;
using System.Collections.ObjectModel; // ObservableCollection
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;

namespace MGSPMonitorControl.ViewModels
{
    public class AgentConfigViewModel : ObservableObject
    {
        private readonly IDatabaseService _databaseService;
        private readonly int _currentUserId; // 수정한 사용자 ID 기록용
        private ManagedAgentDisplay _agentToConfigure;
        private bool _isEditMode;

        public ManagedAgentDisplay Agent
        {
            get => _agentToConfigure;
            set => SetProperty(ref _agentToConfigure, value);
        }

        private string _windowTitle;
        public string WindowTitle
        {
            get => _windowTitle;
            set => SetProperty(ref _windowTitle, value);
        }

        private string _errorMessage;
        public string ErrorMessage
        {
            get => _errorMessage;
            set => SetProperty(ref _errorMessage, value);
        }
        
        public ObservableCollection<string> ControlTypes { get; } = new ObservableCollection<string> { "Direct", "Gatewayed" };

        public ICommand SaveCommand { get; }
        // CancelCommand는 View에서 Window.Close()로 처리 가능

        // 새 Agent 추가용 생성자
        public AgentConfigViewModel(IDatabaseService databaseService, int currentUserId)
        {
            _databaseService = databaseService;
            _currentUserId = currentUserId;
            _isEditMode = false;
            WindowTitle = "Add New Agent";
            Agent = new ManagedAgentDisplay 
            { 
                AgentGuid = Guid.NewGuid(), // 새 Guid 할당
                IsEnabled = true,
                ControlType = "Direct", // 기본값
                PrimaryPort = 4099, // Agent 기본 리슨 포트 예시 (DB 스키마에는 Agent 리슨포트 저장 안함. UI가 명령 시 함께 전달)
                                    // 이 PrimaryPort는 UI가 Broker에게 "이 Agent의 이 포트로 접속해"라고 알려줄 정보.
                                    // Agent 프로그램 자체는 AppConstants.AgentListenPort (예: 4099)에서 항상 리슨.
                GatewayAgentPort = AppConstants.AgentListenPortForGatewayTarget // 만약 게이트웨이 타겟 포트도 고정이라면
            }; 
            SaveCommand = new RelayCommand(async () => await ExecuteSaveAsync(), CanExecuteSave);
        }

        // 기존 Agent 수정용 생성자
        public AgentConfigViewModel(IDatabaseService databaseService, int currentUserId, ManagedAgentDisplay agentToEdit)
        {
            _databaseService = databaseService;
            _currentUserId = currentUserId;
            _isEditMode = true;
            WindowTitle = $"Edit Agent - {agentToEdit.AgentName}";
            // 원본을 직접 수정하지 않도록 복사본 사용 (선택적이지만 권장)
            Agent = new ManagedAgentDisplay 
            {
                AgentGuid = agentToEdit.AgentGuid,
                AgentIdProvidedByApp = agentToEdit.AgentIdProvidedByApp,
                AgentName = agentToEdit.AgentName,
                Description = agentToEdit.Description,
                ControlType = agentToEdit.ControlType,
                PrimaryIpAddress = agentToEdit.PrimaryIpAddress,
                PrimaryPort = agentToEdit.PrimaryPort, // DB에 저장된 포트
                GatewayAgentIpAddress = agentToEdit.GatewayAgentIpAddress, // DB에 저장된 게이트웨이 Agent의 IP(또는 ID)
                GatewayAgentPort = agentToEdit.GatewayAgentPort, // DB에 저장된 게이트웨이 Agent의 포트
                IsEnabled = agentToEdit.IsEnabled
            };
            SaveCommand = new RelayCommand(async () => await ExecuteSaveAsync(), CanExecuteSave);
        }

        private bool CanExecuteSave()
        {
            // 필수 필드 유효성 검사
            return !string.IsNullOrWhiteSpace(Agent.AgentIdProvidedByApp) &&
                   !string.IsNullOrWhiteSpace(Agent.AgentName) &&
                   !string.IsNullOrWhiteSpace(Agent.ControlType) &&
                   !string.IsNullOrWhiteSpace(Agent.PrimaryIpAddress) &&
                   Agent.PrimaryPort > 0 && Agent.PrimaryPort <= 65535 &&
                   (Agent.ControlType != "Gatewayed" || 
                    (!string.IsNullOrWhiteSpace(Agent.GatewayAgentIpAddress) && Agent.GatewayAgentPort.HasValue && Agent.GatewayAgentPort > 0 && Agent.GatewayAgentPort <= 65535));
        }

        private async Task ExecuteSaveAsync()
        {
            ErrorMessage = string.Empty;
            if (!CanExecuteSave()) // 추가 유효성 검사
            {
                ErrorMessage = "Please fill in all required fields correctly.";
                // 더 상세한 유효성 검사 메시지 제공 가능
                if (string.IsNullOrWhiteSpace(Agent.AgentIdProvidedByApp)) ErrorMessage += "\n- Agent ID (IP) is required.";
                if (string.IsNullOrWhiteSpace(Agent.AgentName)) ErrorMessage += "\n- Agent Name is required.";
                // ...
                return;
            }

            try
            {
                bool success;
                if (_isEditMode)
                {
                    success = await _databaseService.UpdateManagedAgentAsync(Agent, _currentUserId);
                }
                else
                {
                    // 새 Agent 추가 시, 동일한 AgentIdProvidedByApp (IP)가 이미 있는지 확인 (선택적)
                    // var existingAgent = await _databaseService.GetManagedAgentByProvidedIdAsync(Agent.AgentIdProvidedByApp);
                    // if (existingAgent != null)
                    // {
                    //     ErrorMessage = $"An agent with ID (IP) '{Agent.AgentIdProvidedByApp}' already exists.";
                    //     return;
                    // }
                    success = await _databaseService.AddManagedAgentAsync(Agent, _currentUserId);
                }

                if (success)
                {
                    // 저장 성공 시 창을 닫도록 View에 알림 (DialogResult 사용)
                    RaiseSaveSuccess();
                }
                else
                {
                    ErrorMessage = "Failed to save agent information to the database.";
                }
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error saving agent: {ex.Message}";
                // 로깅 서비스가 있다면 로깅
                Console.WriteLine($"[ErrorSaveAgent] {ex.ToString()}");
            }
        }

        // 창을 닫도록 View에 알리는 이벤트 (View에서 구독)
        public event Action SaveSuccess;
        private void RaiseSaveSuccess() => SaveSuccess?.Invoke();


        // 예시: Agent Listen Port 상수화 (실제 Agent 프로그램과 일치해야 함)
        // Agent 프로그램의 AppConstants.AgentListenPort 와 동일한 값 사용
        public static class AppConstants 
        {
            public const int AgentListenPortForDirectOrFinalTarget = 4099;
            public const int AgentListenPortForGatewayTarget = 4099; // 게이트웨이가 최종 Agent에게 접속할 때도 동일 포트 사용 가정
        }
    }
}
10. Views/AgentConfigWindow.xaml (Agent 추가/수정 창 XAML)

XML

<Window x:Class="MGSPMonitorControl.Views.AgentConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:MGSPMonitorControl.Views"
        xmlns:viewmodels="clr-namespace:MGSPMonitorControl.ViewModels"
        mc:Ignorable="d"
        Title="{Binding WindowTitle}" Height="550" Width="450"
        WindowStartupLocation="CenterOwner" ResizeMode="NoResize" ShowInTaskbar="False"
        d:DataContext="{d:DesignInstance Type=viewmodels:AgentConfigViewModel, IsDesignTimeCreatable=False}">
    <Grid Margin="15">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/> <RowDefinition Height="*"/>    <RowDefinition Height="Auto"/> </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="{Binding WindowTitle}" FontSize="18" FontWeight="Bold" Margin="0,0,0,15"/>

        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <StackPanel>
                <TextBlock Text="Agent Name (*):"/>
                <TextBox Text="{Binding Agent.AgentName, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>

                <TextBlock Text="Agent ID (Provided by Agent - e.g., IP Address) (*):"/>
                <TextBox Text="{Binding Agent.AgentIdProvidedByApp, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>

                <TextBlock Text="Description:"/>
                <TextBox Text="{Binding Agent.Description, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10" Height="60" TextWrapping="Wrap" AcceptsReturn="True" VerticalScrollBarVisibility="Auto"/>

                <TextBlock Text="Control Type (*):"/>
                <ComboBox ItemsSource="{Binding ControlTypes}" SelectedItem="{Binding Agent.ControlType, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>

                <TextBlock Text="Primary IP Address (*):"/>
                <TextBox Text="{Binding Agent.PrimaryIpAddress, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>
                
                <TextBlock Text="Primary Port (*):"/>
                <TextBox Text="{Binding Agent.PrimaryPort, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>

                <StackPanel Visibility="{Binding Agent.ControlType, Converter={StaticResource StringToVisibilityConverter}, ConverterParameter=Gatewayed}">
                    <TextBlock Text="Gateway Agent IP Address (or ID) (*):" FontWeight="SemiBold" Margin="0,10,0,0"/>
                    <TextBox Text="{Binding Agent.GatewayAgentIpAddress, UpdateSourceTrigger=PropertyChanged}" Margin="0,2,0,10"/>
                    
                    <TextBlock Text="Gateway Agent Port (*):" FontWeight="SemiBold"/>
                    <TextBox Text="{Binding Agent.GatewayAgentPort, UpdateSourceTrigger=PropertyChanged, TargetNullValue=''}" Margin="0,2,0,10"/>
                </StackPanel>

                <CheckBox IsChecked="{Binding Agent.IsEnabled}" Content="Enable this Agent Configuration" Margin="0,10,0,0"/>
            </StackPanel>
        </ScrollViewer>
        
        <StackPanel Grid.Row="2" Orientation="Vertical" Margin="0,15,0,0">
            <TextBlock Text="{Binding ErrorMessage}" Foreground="Red" TextWrapping="Wrap" Margin="0,0,0,5"/>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                <Button Content="Save" Command="{Binding SaveCommand}" IsDefault="True" Width="80" Height="28" Margin="0,0,10,0"/>
                <Button Content="Cancel" IsCancel="True" Width="80" Height="28" Click="CancelButton_Click"/>
            </StackPanel>
        </StackPanel>
    </Grid>
    <Window.Resources>
        <local:StringToVisibilityConverter x:Key="StringToVisibilityConverter"/>
    </Window.Resources>
</Window>
10.1.1. Views/StringToVisibilityConverter.cs (또는 Converters/ 폴더)

C#

// MGSPMonitorControl/Views/StringToVisibilityConverter.cs
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace MGSPMonitorControl.Views // 또는 Converters 네임스페이스
{
    public class StringToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            string stringValue = value as string;
            string parameterString = parameter as string;

            if (stringValue != null && parameterString != null && stringValue.Equals(parameterString, StringComparison.OrdinalIgnoreCase))
            {
                return Visibility.Visible;
            }
            return Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException(); // 사용 안 함
        }
    }
}
11. Views/AgentConfigWindow.xaml.cs (Agent 추가/수정 창 코드 비하인드)

C#

// MGSPMonitorControl/Views/AgentConfigWindow.xaml.cs
using System.Windows;
using MGSPMonitorControl.ViewModels;

namespace MGSPMonitorControl.Views
{
    public partial class AgentConfigWindow : Window
    {
        private AgentConfigViewModel _viewModel;

        public AgentConfigWindow(AgentConfigViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;

            _viewModel.SaveSuccess += OnSaveSuccess;
        }

        private void OnSaveSuccess()
        {
            DialogResult = true; // 저장 성공 시 true 반환하고 창 닫기
            // Close(); // DialogResult = true로 설정하면 ShowDialog() 호출 시 자동으로 닫힘
        }

        private void CancelButton_Click(object sender, RoutedEventArgs e)
        {
            DialogResult = false; // 취소 시 false 반환
            // Close(); // IsCancel="True"로 설정하면 자동으로 닫힐 수 있음
        }
        
        protected override void OnClosed(System.EventArgs e)
        {
            if (_viewModel != null)
            {
                _viewModel.SaveSuccess -= OnSaveSuccess;
            }
            base.OnClosed(e);
        }
    }
}
여기까지 로그인 창과 Agent 설정 창 관련 코드였습니다. AgentConfigViewModel의 AppConstants 내부 클래스는 임시로 넣은 것이며, 실제 Agent 프로그램의 리슨 포트와 일치하는 값을 사용해야 합니다. DB 스키마에는 Agent의 리슨 포트를 저장하는 컬럼이 없었으므로, UI가 명령 시 Broker에게 "이 Agent의 이 포트로 접속해"라고 알려주는 방식(DB의 ManagedAgents.PrimaryPort)과, Agent 프로그램 자체가 항상 고정된 포트(예: 4099)에서 리슨하는 방식이 혼용될 수 있습니다. 이 부분은 프로토콜 정의 시 명확히 해야 합니다. (현재는 UI가 DB에 PrimaryPort를 저장하고, Broker가 Agent에게 접속할 때 이 포트를 사용한다고 가정. Agent는 그 포트에서 리슨.)