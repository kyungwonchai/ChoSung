import streamlit as st
import pymssql
import pandas as pd

# DB 접속 설정
DB_CONFIG = {
    "server": "your_server",
    "user": "your_user",
    "password": "your_password",
    "database": "your_database"
}

# 라인 리스트 가져오기
def get_lines():
    conn = pymssql.connect(**DB_CONFIG)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT line1 FROM ExcelData ORDER BY line1")
    lines = [row[0] for row in cursor.fetchall()]
    conn.close()
    return lines

# 선택된 라인의 데이터 가져오기 (최신 모델별 최소값)
def get_latest_data_by_line(line1):
    conn = pymssql.connect(**DB_CONFIG)
    cursor = conn.cursor(as_dict=True)
    cursor.execute("EXEC Get_Ct_Min_By_Line_LatestModels %s", (line1,))
    row = cursor.fetchone()
    conn.close()
    return row

# 테이블 생성 함수
def make_ct_table(title, prefix_b, prefix_t, prefix_a, row):
    headers = ["MC1", "MC2", "MC3", "MC4", "MC5", "MC6", "MC7", "MC8"]

    data = [
        [round(row[f"{prefix_b}_{i}"], 2) for i in range(1, 9)],
        [round(row[f"{prefix_t}_{i}"], 2) for i in range(1, 9)],
        [round(row[f"{prefix_a}_{i}"], 2) for i in range(1, 9)]
    ]
    df = pd.DataFrame(data, columns=headers)
    df.insert(0, "구분", [prefix_b, prefix_t, prefix_a])

    # ACT 행에서 가장 큰 값을 노란 배경으로 강조
    def highlight_max_act_row(r):
        if r.name != 2:
            return [''] * len(r)
        else:
            max_val = max(r[1:])  # 구분은 제외
            return ['background-color: yellow' if v == max_val else '' for v in r]

    styled_df = df.style.apply(highlight_max_act_row, axis=1).format("{:.2f}")
    st.subheader(title)
    st.dataframe(styled_df, use_container_width=True)

# Streamlit 시작
st.title("라인별 CT 데이터 조회")

# 좌측 라인 선택
lines = get_lines()
selected_line = st.sidebar.selectbox("라인 선택", lines)

# 새로고침 버튼
if st.sidebar.button("새로고침"):
    st.session_state["refresh"] = True

# 데이터 불러오기
if selected_line:
    if "refresh" not in st.session_state or st.session_state["refresh"]:
        row = get_latest_data_by_line(selected_line)
        if row:
            st.markdown(f"**모델명:** {row['model1']} &nbsp;&nbsp; **시간:** {row['time1']}")
            make_ct_table("CT1", "BCT1", "TCT1", "ACT1", row)
            make_ct_table("CT2", "BCT2", "TCT2", "ACT2", row)
            make_ct_table("CT2Best", "BCT2BEST", "TCT2BEST", "ACT2BEST", row)

            # 설명 추가
            st.markdown("""
                <hr>
                <p style="font-size:16px">
                <b><span style="color:orange">※ ACT</span>는 실제 사이클 시간이며 평균값 기준입니다.</b><br>
                <b><span style="color:deepskyblue">※ BCT</span>는 Bottom 작업 기준 CT입니다.</b><br>
                <b><span style="color:deepskyblue">※ TCT</span>는 Top 작업 기준 CT입니다.</b><br>
                <b><span style="color:orange">※ 값이 0이면 데이터가 없음을 의미합니다.</span>
                </b></p>
            """, unsafe_allow_html=True)
        else:
            st.warning("선택한 라인의 데이터가 없습니다.")

    # 새로고침 플래그 초기화
    st.session_state["refresh"] = False