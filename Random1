가장 빠른 해결책: 실행 스크립트 수정
crontab에 등록할 명령어를 아래와 같이 바꿔보세요. 핵심은 스크립트가 있는 폴더로 먼저 이동(cd)한 뒤, 절대 경로로 파이썬을 지정하여 실행하는 것입니다.

Bash

# crontab -e 로 열어서 수정

# 👎 기존 방식 (문제가 될 수 있음)
# * * * * * python3 /home/user/my_project/main.py

# 👍 추천 방식
# 1. 스크립트가 있는 디렉토리로 이동 (cd)
# 2. 가상환경을 사용한다면 가상환경의 python을 절대경로로 지정
# 3. 실행할 스크립트 파일 지정
# 4. 로그(log)를 파일로 남겨서 에러 확인
* * * * * cd /home/user/my_project && /home/user/my_project/venv/bin/python main.py >> /home/user/my_project/cron.log 2>&1
cd /home/user/my_project: 스크립트가 있는 폴더로 먼저 이동합니다. 이렇게 하면 스크립트 안에서 사용하는 상대 경로 (./data.csv, config.json 등)가 모두 정상적으로 동작합니다.

/home/user/my_project/venv/bin/python: 시스템의 python이 아닌, 내 프로젝트의 가상환경에 설치된 python을 절대 경로로 명확히 지정해주는 것입니다. (가상환경을 안 쓴다면 /usr/bin/python3 와 같이 시스템 파이썬의 절대 경로를 지정)

>> /home/user/my_project/cron.log 2>&1: 실행 결과(stdout)와 에러(stderr)를 모두 cron.log 파일에 기록합니다. 이 부분이 정말 중요합니다. 이 로그 파일을 보면 왜 스크립트가 실패하는지 정확한 원인을 알 수 있습니다.

🤔 왜 이런 문제가 발생할까요? (상세 원인)
cron은 우리가 사용하는 일반 터미널과 환경이 달라서 아래와 같은 문제들이 발생합니다.

1. 실행 경로 (Working Directory) 문제
터미널: cd /home/user/my_project로 이동 후 python main.py를 실행하면, 현재 위치는 /home/user/my_project 입니다. 스크립트가 open('config.json') 같은 코드를 실행하면 이 폴더 안에서 파일을 찾습니다.

Crontab: cron은 스크립트를 실행할 때 기본적으로 사용자의 홈 디렉토리 (/home/user)에서 명령을 실행합니다. 그래서 main.py는 실행되지만, main.py가 필요로 하는 다른 파일(config.json 등)을 현재 위치에서 찾지 못해 FileNotFoundError가 발생합니다.

2. 파이썬 인터프리터 및 라이브러리 경로 문제
터미널: 우리는 보통 source venv/bin/activate 같은 명령으로 가상환경을 활성화합니다. 이 상태에서는 python 명령어가 가상환경의 파이썬을 가리키고, pip로 설치한 라이브러리(pandas, requests 등)도 잘 찾아집니다.

Crontab: cron은 가상환경이 활성화되지 않은 상태입니다. 그래서 python이라고만 쓰면 시스템에 기본으로 설치된 파이썬(usr/bin/python3)을 사용하게 됩니다. 이 시스템 파이썬에는 내 프로젝트에 필요한 라이브러리들이 설치되어 있지 않아서 ModuleNotFoundError가 발생합니다.

3. 환경 변수(Environment Variables) 문제
터미널: 터미널을 열면 .bashrc나 .zshrc 같은 셸 설정 파일이 실행되면서 PATH를 비롯한 수많은 환경 변수들이 설정됩니다.

Crontab: cron은 이런 셸 설정 파일을 읽지 않고 아주 최소한의 환경 변수만 가진 상태로 실행됩니다. 따라서 PATH에 등록된 경로가 달라 특정 명령어나 프로그램을 찾지 못하는 경우도 있습니다.

🛠️ 문제 해결을 위한 체크리스트
위의 방법으로 해결이 안 된다면, 아래 순서대로 점검해보세요.

로그 파일 확인은 필수!

가장 먼저 할 일입니다. crontab 명령어 뒤에 >> /home/user/cron.log 2>&1를 붙여서 어떤 에러 메시지가 출력되는지 확인하세요. 대부분의 문제는 로그에 답이 있습니다.

모든 경로를 절대 경로로 사용하기

Crontab에서: 파이썬 인터프리터와 실행할 스크립트 파일 경로를 모두 /home/user/... 와 같은 절대 경로로 지정하세요.

Python 스크립트 내부에서: 파일을 읽고 쓰는 등의 작업을 할 때 상대 경로 대신 절대 경로를 사용하는 것이 가장 안전합니다. 아래 코드를 스크립트 상단에 추가하면 스크립트 파일의 위치를 기준으로 절대 경로를 만들 수 있습니다.

Python

import os

# 스크립트 파일이 위치한 디렉토리의 절대 경로
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# 예시: config.json 파일의 절대 경로
config_path = os.path.join(BASE_DIR, 'config.json')

# 이제 config_path를 사용해 파일을 엽니다.
with open(config_path, 'r') as f:
    # ...
쉘 스크립트(Shell Script)로 한번 감싸기

crontab에서 직접 복잡한 명령을 실행하는 대신, 실행 과정을 담은 쉘 스크립트 파일을 만들고 cron이 그 파일을 실행하게 하면 관리가 편합니다.

run_my_project.sh

Bash

#!/bin/bash

# 스크립트가 있는 디렉토리로 이동
cd /home/user/my_project || exit

# 가상환경 활성화 (필요한 경우)
source /home/user/my_project/venv/bin/activate

# 파이썬 스크립트 실행
/home/user/my_project/venv/bin/python main.py

echo "스크립트 실행 완료: $(date)"
위와 같이 run_my_project.sh 파일을 만든 뒤, chmod +x run_my_project.sh 명령으로 실행 권한을 줍니다.

그리고 crontab에는 이 쉘 스크립트만 등록하면 됩니다.

crontab -e

Bash
