버튼을 찾으려면, OpenCvSharp를 활용하면 됩니다. 블루 계열의 버튼을 찾기 위해, RGB가 아닌 HSV 색공간에서 특정 범위의 색상을 필터링하는 것이 일반적입니다.

아래는 OpenCvSharp를 사용하여 블루 색상의 버튼을 찾고 좌표를 출력하는 예제입니다.

1. 설치 (NuGet)
먼저 OpenCvSharp4 및 OpenCvSharp4.Windows를 NuGet 패키지로 설치해야 합니다.

mathematica
코드 복사
Install-Package OpenCvSharp4
Install-Package OpenCvSharp4.Windows
2. C# 코드 (스크린샷에서 블루 버튼 탐색)
csharp
코드 복사
using OpenCvSharp;
using OpenCvSharp.Extensions;
using System;
using System.Drawing;
using System.Windows.Forms;

class Program
{
    static void Main()
    {
        // 화면 캡처
        Bitmap screenshot = CaptureScreen();
        
        // OpenCvSharp의 Mat로 변환
        Mat image = BitmapConverter.ToMat(screenshot);

        // 이미지에서 블루 버튼 찾기
        FindBlueButtons(image);
    }

    static Bitmap CaptureScreen()
    {
        // 화면 크기 가져오기
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);

        using (Graphics g = Graphics.FromImage(bitmap))
        {
            g.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size);
        }

        return bitmap;
    }

    static void FindBlueButtons(Mat image)
    {
        // BGR을 HSV로 변환
        Mat hsv = new Mat();
        Cv2.CvtColor(image, hsv, ColorConversionCodes.BGR2HSV);

        // 블루 계열의 범위 설정 (Hue 값 기준)
        Scalar lowerBlue = new Scalar(100, 100, 100); // 파란색 최소 HSV (조정 가능)
        Scalar upperBlue = new Scalar(130, 255, 255); // 파란색 최대 HSV

        // 마스크 생성
        Mat mask = new Mat();
        Cv2.InRange(hsv, lowerBlue, upperBlue, mask);

        // 잡음 제거를 위한 모폴로지 연산 (팽창, 침식)
        Cv2.MorphologyEx(mask, mask, MorphTypes.Open, Cv2.GetStructuringElement(MorphShapes.Rect, new Size(3, 3)));

        // 윤곽선 찾기
        Cv2.FindContours(mask, out Point[][] contours, out _, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

        foreach (var contour in contours)
        {
            Rect rect = Cv2.BoundingRect(contour);

            // 특정 크기 조건 (너비 100~200 사이)
            if (rect.Width > 100 && rect.Width < 200 && rect.Height > 30)
            {
                Console.WriteLine($"파란색 버튼 발견! 좌표: {rect.X}, {rect.Y}, 크기: {rect.Width}x{rect.Height}");
                Cv2.Rectangle(image, rect, new Scalar(0, 255, 0), 2); // 화면에 초록색 사각형 표시
            }
        }

        // 결과 출력
        Cv2.ImShow("Detected Blue Buttons", image);
        Cv2.WaitKey(0);
        Cv2.DestroyAllWindows();
    }
}
3. 코드 설명
화면 캡처 (CaptureScreen 함수)

Graphics.CopyFromScreen을 사용하여 현재 화면을 캡처한 후 Bitmap 객체로 저장합니다.
BitmapConverter.ToMat()을 통해 OpenCV의 Mat 형식으로 변환합니다.
블루 버튼 찾기 (FindBlueButtons 함수)

캡처한 이미지를 BGR → HSV 변환
블루 계열의 HSV 범위를 설정하여 필터링
노이즈 제거 (Morphology 연산)
윤곽선 탐색을 통해 버튼 모양 감지
특정 크기 조건 (너비 100~200)을 만족하는 버튼의 좌표를 출력
결과 표시

찾은 버튼 주변에 초록색 사각형을 그려서 결과를 시각적으로 확인할 수 있습니다.
4. 실행 예시
화면에서 블루 색상의 버튼이 감지되면 다음과 같은 좌표를 출력합니다.
코드 복사
파란색 버튼 발견! 좌표: 340, 220, 크기: 120x50
파란색 버튼 발견! 좌표: 540, 320, 크기: 180x60
감지된 버튼 주위에 초록색 사각형이 그려지고 Cv2.ImShow를 통해 결과를 확인할 수 있습니다.
5. 추가 개선 가능 요소
✅ HSV 값 조정 → 블루 계열 버튼을 더 정확하게 탐색
✅ 클릭 이벤트 추가 → 버튼 위치를 찾은 후 MouseClick 이벤트로 클릭 가능
✅ 특정 앱에서 버튼 찾기 → Process.MainWindowHandle을 사용하여 특정 앱 캡처