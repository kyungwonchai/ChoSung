각 위치에서 "sh"를 입력하는 코드입니다.

csharp

using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace AutoInputExample
{
    public partial class MainForm : Form
    {
        private const int WH_KEYBOARD_LL = 13;
        private const int WH_MOUSE_LL = 14;
        private const int WM_KEYDOWN = 0x0100;
        private const int WM_LBUTTONDOWN = 0x0201;
        private const int VK_OEM_6 = 0xDD;   // VK_OEM_6 = ']' key code
        private const int VK_0 = 0x30;       // VK_0 = '0' key code
        private const int VK_9 = 0x39;       // VK_9 = '9' key code
        private const int VK_S = 0x53;       // VK_S = 'S' key code
        private const int VK_H = 0x48;       // VK_H = 'H' key code

        private IntPtr keyboardHookId = IntPtr.Zero;
        private IntPtr mouseHookId = IntPtr.Zero;
        private bool isRunning = false; // 동작 중 여부를 나타내는 플래그

        public MainForm()
        {
            InitializeComponent();
            keyboardHookId = SetHook(KeyboardHookCallback, WH_KEYBOARD_LL); // Keyboard Hook 등록
            mouseHookId = SetHook(MouseHookCallback, WH_MOUSE_LL); // Mouse Hook 등록
            Application.ApplicationExit += Application_ApplicationExit; // 애플리케이션 종료 시 후크 해제
        }

        private void Application_ApplicationExit(object sender, EventArgs e)
        {
            UnhookWindowsHookEx(keyboardHookId); // Keyboard Hook 해제
            UnhookWindowsHookEx(mouseHookId); // Mouse Hook 해제
        }

        private IntPtr SetHook(HookProc proc, int hookType)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                return SetWindowsHookEx(hookType, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        private IntPtr KeyboardHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0 && wParam == (IntPtr)WM_KEYDOWN)
            {
                int vkCode = Marshal.ReadInt32(lParam);
                if (vkCode == VK_OEM_6) // ']' 키를 눌렀을 때
                {
                    isRunning = false; // 동작 종료
                }
                else if (vkCode == VK_OEM_3 && !isRunning) // '(' 키를 눌렀을 때 동작 중이 아닌 경우
                {
                    isRunning = true; // 동작 시작
                    PerformMouseActions(); // 마우스 동작 수행
                    isRunning = false; // 동작 종료
                }
            }
            return CallNextHookEx(IntPtr.Zero, nCode, wParam, lParam);
        }

        private IntPtr MouseHookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            // 마우스 이벤트 처리는 필요하지 않으므로 핸들링하지 않고 다음 후크로 전달
            return CallNextHookEx(IntPtr.Zero, nCode

User
이어서
ChatGPT

csharp

            , wParam, lParam);
        }

        private void PerformMouseActions()
        {
            int startX = 100; // 시작 X 위치
            int startY = 100; // 시작 Y 위치
            int endX = Screen.PrimaryScreen.Bounds.Width; // 화면의 가로 길이
            int endY = Screen.PrimaryScreen.Bounds.Height - 500; // 화면의 세로 길이 - 500

            int stepX = 200; // X 좌표 증가 간격
            int stepY = 200; // Y 좌표 증가 간격

            for (int x = startX; x <= endX; x += stepX)
            {
                for (int y = startY; y <= endY; y += stepY)
                {
                    // 마우스 이동
                    Cursor.Position = new Point(x, y);
                    Thread.Sleep(200); // 0.2초 대기

                    // 마우스 클릭
                    MouseClick();

                    // "sh" 입력
                    SendKeys.Send("sh");

                    Thread.Sleep(200); // 0.2초 대기
                }
            }
        }

        private void MouseClick()
        {
            mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, UIntPtr.Zero);
            Thread.Sleep(100); // 0.1초 대기
            mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, UIntPtr.Zero);
        }

        #region Win32 API Definitions

        private delegate IntPtr HookProc(int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, HookProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        [DllImport("user32.dll")]
        private static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, UIntPtr dwExtraInfo);

        private const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
        private const uint MOUSEEVENTF_LEFTUP = 0x0004;

        #endregion
    }
}

위의 코드에서 PerformMouseActions() 메서드는 마우스를 이동하고 클릭하는 동작을 수행하며, "sh"를 입력하는 동작을 수행합니다. 시작 위치부터 화면의 끝까지 X 좌표를 200씩 증가시