_model.py 라는 파일을 만들어 다음과 같은 코드를 넣습니다:

python
Copy code
import pyodbc
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
import joblib

# 데이터 불러오기
connection = pyodbc.connect("DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password")
query = "SELECT [업체 PN] FROM PLM부품"
data = pd.read_sql(query, connection)

# 모델 학습
vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(data['업체 PN'])

# 모델 저장
joblib.dump(vectorizer, 'vectorizer.pkl')
joblib.dump(tfidf_matrix, 'tfidf_matrix.pkl')
이 스크립트를 실행하면, 현재 디렉토리에 'vectorizer.pkl'과 'tfidf_matrix.pkl' 두 개의 파일이 생성됩니다.

함수를 이용해 예측하는 파이썬 스크립트 만들기
다음으로, 예측을 수행하는 별도의 파이썬 스크립트를 만듭니다. 이 스크립트는 C# 애플리케이션에서 호출될 것입니다.
predict.py 라는 파일을 만들고 다음 코드를 넣습니다:

python
Copy code
import joblib
from sklearn.metrics.pairwise import linear_kernel
import pandas as pd

# 모델 불러오기
vectorizer = joblib.load('vectorizer.pkl')
tfidf_matrix = joblib.load('tfidf_matrix.pkl')

# 함수 정의
def get_similarity(input_text):
    input_vectorized = vectorizer.transform([input_text])
    cosine_similarities = linear_kernel(input_vectorized, tfidf_matrix).flatten()
    
    # 유사도가 높은 순으로 정렬
    related_indices = cosine_similarities.argsort()[:-6:-1]
    
    # 결과 리스트 초기화
    similar_items = []
    
    # 데이터 불러오기를 여기서도 수행해야 함.
    connection = pyodbc.connect("DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password")
    query = "SELECT [업체 PN] FROM PLM부품"
    data = pd.read_sql(query, connection)
    
    for index in related




User
이어주세요
ChatGPT
I apologize for the cutoff. Here is the continuation of the code:

python
Copy code
    for index in related_indices:
        similar_items.append(data['업체 PN'].iloc[index])
    
    return similar_items
C#에서 파이썬 스크립트 사용하기
이제 C# 애플리케이션에서 파이썬 스크립트를 사용할 준비가 되었습니다. Visual Studio 프로젝트에 IronPython을 추가하세요. NuGet 패키지 관리자를 사용하여 IronPython을 설치할 수 있습니다.
그리고 C# 코드에서 파이썬 스크립트를 호출하세요. 아래는 예시 코드입니다:

csharp
Copy code
using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
using System.Collections.Generic;

...

private void SearchButton_Click(object sender, EventArgs e)
{
    ScriptEngine engine = Python.CreateEngine();
    ScriptScope scope = engine.CreateScope();
    engine.ExecuteFile("path_to_predict.py", scope);
    dynamic getSimilarity = scope.GetVariable("get_similarity");

    string userInput = inputTextBox.Text;
    List<string> similarItems = getSimilarity(userInput);

    resultsListBox.Items.Clear();
    foreach(var item in similarItems)
    {
        resultsListBox.Items.Add(item);
    }
}
이 코드는 C# 애플리케이션의 검색 버튼 클릭 이벤트 핸들러로 작동합니다. 사용자가 텍스트를 입력하고 검색 버튼을 누르면, 파이썬 함수가 호출되어 유사한 항목들을 찾고, 그 결과가 리스트 박스에 표시됩니다.

주의사항:

path_to_predict.py를 실제 predict.py 파일의 경로로 바꾸세요.
이 코드 예시는 간단한 데모를 위한 것으로, 에러 처리 등이 포함되지 않았습니다. 실제 프로덕션 코드에서는 적절한 예외 처리를 추가하세요.
데이터베이스 연결 정보 (서버 이름, 사용자 이름, 비밀번호 등)를 코드에 직접 적지 말고, 보안을 위해 별도의 설정 파일이나 환경 변수를 사용하는 것이 좋습니다.