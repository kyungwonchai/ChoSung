는 가장 간단한 방법은 데이터 바인딩을 이용하는 것입니다. ObservableCollection을 사용하여 셀의 잠금 상태가 변경될 때 UI가 자동으로 갱신되도록 할 수 있습니다.

다음은 CellInfo 클래스를 INotifyPropertyChanged 인터페이스를 구현하도록 수정한 예입니다.

csharp

public class CellInfo : INotifyPropertyChanged
{
    public int Row { get; set; }
    public int Column { get; set; }

    private bool isLocked;
    public bool IsLocked
    {
        get { return isLocked; }
        set
        {
            if (isLocked != value)
            {
                isLocked = value;
                OnPropertyChanged("IsLocked");
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

ObservableCollection을 사용하여 cellInfos 리스트를 선언합니다.

csharp

public ObservableCollection<CellInfo> cellInfos = new ObservableCollection<CellInfo>();

이제 UI를 갱신하는 부분은 PropertyChanged 이벤트를 통해 자동으로 처리됩니다. 따라서 LockAndColorCell과 UnlockAndResetCell 함수에서는 IsLocked 상태를 변경하기만 하면 됩니다.

이러한 방식을 사용하면, IsLocked 프로퍼티의 변경이 자동으로 UI에 반영