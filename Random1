using DevExpress.Spreadsheet;
using DevExpress.Xpf.Spreadsheet;

// SpreadsheetControl을 생성합니다.
SpreadsheetControl spreadsheet = new SpreadsheetControl();
spreadsheet.LoadDocument("yourFile.xlsx");

// 엑셀 워크시트를 선택합니다.
Worksheet worksheet = spreadsheet.Document.Worksheets[0];

// 컬럼 B의 31행부터 값을 확인합니다.
for (int rowIndex = 30; rowIndex < worksheet.Rows.LastUsedIndex; rowIndex++) {
    string valueB = worksheet.Cells[rowIndex, 1].Value.ToString();
    int mergeStartRow = rowIndex;

    // 같은 값이 있는지 확인
    while (rowIndex < worksheet.Rows.LastUsedIndex && worksheet.Cells[rowIndex + 1, 1].Value.ToString() == valueB) {
        rowIndex++;
    }

    // 같은 값이 있는 행을 병합합니다.
    if (rowIndex > mergeStartRow) {
        worksheet.MergeCells(worksheet.Range.FromLTRB(1, mergeStartRow, 1, rowIndex));
    }
}

// B와 D가 동일할 때 C, D, F열 병합
for (int rowIndex = 30; rowIndex < worksheet.Rows.LastUsedIndex; rowIndex++) {
    string valueB = worksheet.Cells[rowIndex, 1].Value.ToString();
    string valueD = worksheet.Cells[rowIndex, 3].Value.ToString();
    int mergeStartRow = rowIndex;

    // 같은 값이 있는지 확인
    while (rowIndex < worksheet.Rows.LastUsedIndex && 
           worksheet.Cells[rowIndex + 1, 1].Value.ToString() == valueB &&
           worksheet.Cells[rowIndex + 1, 3].Value.ToString() == valueD) {
        rowIndex++;
    }

    // 같은 값이 있는 행을 병합합니다.
    if (rowIndex > mergeStartRow) {
        worksheet.MergeCells(worksheet.Range.FromLTRB(2, mergeStartRow, 2, rowIndex)); // C열 병합
        worksheet.MergeCells(worksheet.Range.FromLTRB(3, mergeStartRow, 3, rowIndex)); // D열 병합
        worksheet.MergeCells(worksheet.Range.FromLTRB(5, mergeStartRow, 5, rowIndex)); // F열 병합
    }
}

// 변경된 내용을 저장합니다.
spreadsheet.SaveDocument("yourFile.xlsx");
