     허브를 사용하여 셀이 편집 중임을 모든 클라이언트에 알립니다.
    클라이언트는 이 정보를 받아 그 셀을 잠금 상태로 변경하고, 색상을 변경합니다.

SignalR 허브 (서버 코드)

csharp

public class CellEditingHub : Hub
{
    public async Task LockCell(int row, int column)
    {
        await Clients.Others.SendAsync("LockCell", row, column);
    }

    public async Task UnlockCell(int row, int column)
    {
        await Clients.Others.SendAsync("UnlockCell", row, column);
    }
}

WPF 클라이언트 코드 (C#)

csharp

public MainWindow()
{
    InitializeComponent();
    InitializeSignalR();
}

private async void InitializeSignalR()
{
    hubConnection = new HubConnectionBuilder()
        .WithUrl("http://localhost:5000/celleditinghub")
        .Build();

    hubConnection.On<int, int>("LockCell", (row, column) =>
    {
        // 셀 잠금과 색상 변경 로직
        LockAndColorCell(row, column);
    });

    hubConnection.On<int, int>("UnlockCell", (row, column) =>
    {
        // 셀 잠금 해제와 색상 원복 로직
        UnlockAndResetCell(row, column);
    });

    await hubConnection.StartAsync();
}

private void LockAndColorCell(int row, int column)
{
    // DevExpress GridControl 셀을 잠그고 색상을 변경하는 코드
}

private void UnlockAndResetCell(int row, int column)
{
    // DevExpress GridControl 셀 잠금을 해제하고 색상을 원래대로 돌리는 코드
}

private async void GridControl_CellBeginEdit(object sender, DevExpress.Xpf.Grid.GridCellValidationEventArgs e)
{
    await hubConnection.SendAsync("LockCell", e.RowHandle, e.Column.VisibleIndex);
}

private async void GridControl_CellEndEdit(object sender, DevExpress.Xpf.Grid.GridCellValidationEventArgs e)
{
    await hubConnection.SendAsync("UnlockCell", e.RowHandle, e.Column.VisibleIndex);
}

이 예제는 간단한 설명을 위한 것이므로, 실제 프로젝트에 적용하기 전에 더 많은 예외 처리와 세부 구현이 필요할 수 있습니다.