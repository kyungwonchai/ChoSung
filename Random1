using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Windows.Forms;

public partial class MainForm : Form
{
    // Windows API 함수를 가져옵니다.
    [DllImport("user32.dll")]
    static extern bool SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int X, int Y, int cx, int cy, uint uFlags);

    // 항상 바탕화면 위에 있도록 지정하는 데 필요한 핸들을 가져옵니다.
    static readonly IntPtr HWND_BOTTOM = new IntPtr(1);

    // 플래그 설정을 위한 상수들
    const UInt32 SWP_NOSIZE = 0x0001;
    const UInt32 SWP_NOACTIVATE = 0x0010;

    // 드래그를 위한 필드
    private bool _dragging = false;
    private Point _startPoint = new Point(0, 0);

    public MainForm()
    {
        InitializeComponent();

        this.FormBorderStyle = FormBorderStyle.None; // 테두리 제거
        this.Opacity = 0.8; // 80% 투명도 설정

        // 위치 데이터를 저장할 폴더 및 파일의 경로
        string path = @"c:\winpos";

        // 폴더가 없으면 생성
        if (!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }

        // 이전 위치를 로드
        string filePath = Path.Combine(path, "posdata.txt");
        if (File.Exists(filePath))
        {
            string[] lines = File.ReadAllLines(filePath);
            this.Location = new Point(int.Parse(lines[0]), int.Parse(lines[1]));
        }
    }

    // Form에 마우스 다운 이벤트 핸들러를 추가
    private void MainForm_MouseDown(object sender, MouseEventArgs e)
    {
        _dragging = true;  // 드래그 시작
        _startPoint = new Point(e.X, e.Y);
    }

    // Form에 마우스 업 이벤트 핸들러를 추가
    private void MainForm_MouseUp(object sender, MouseEventArgs e)
    {
        _dragging = false;  // 드래그 종료

        // 위치 데이터를 저장할 폴더 및 파일의 경로
        string path = @"c:\winpos";
        string filePath = Path.Combine(path, "posdata.txt");

        // 현재 위치를 저장
        File.WriteAllLines(filePath, new string[] { this.Location.X.ToString(), this.Location.Y.ToString() });
    }

    // Form에 마우스 이동 이벤트 핸들러를 추가
    private void MainForm_MouseMove(object sender, MouseEventArgs e)
    {
        if (_dragging)
        {
            Point p = PointToScreen(e.Location);
            this.Location = new Point(p.X - this._startPoint.X, p.Y - this._startPoint.Y);
        }
    }

    // Lock 버튼 클릭 이벤트
    private void btnLock_Click(object sender, EventArgs e)
    {
        // 버튼의 Text를 확인해서 현재 상태를 결정합니다.
        if (btnLock.Text == "Lock")
        {
            // Lock 상태로 바꿉니다.
            btnLock.Text = "Unlock";
            
            // 이제 모든 컨트롤을 비활성화합니다. 해제 버튼만 제외하고.
            foreach (Control control in this.Controls)
            {
                if (control != btnLock)
                    control.Enabled = false;
            }

            // 항상 바탕화면 위에 있도록 설정합니다.
            SetWindowPos(this.Handle, HWND_BOTTOM, 0, 0, 0, 0, SWP_NOSIZE | SWP_NOACTIVATE);
        }
        else
        {
            // Unlock 상태로 바꿉니다.
            btnLock.Text = "Lock";
            
            // 모든 컨트롤을 다시 활성화합니다.
            foreach (Control control in this.Controls)
            {
                control.Enabled = true;
            }
        }
    }
}
