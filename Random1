수정된 fetchData 함수
javascript
코드 복사
function fetchData() {
    console.log("Fetching data from the server..."); // 요청 시작 로그
    fetch('/logsensors-data')
        .then(response => {
            console.log("Response status:", response.status); // 응답 상태 로그
            if (!response.ok) {
                throw new Error('Network response was not ok ' + response.statusText);
            }
            return response.json();
        })
        .then(data => {
            console.log("Data received from server:", data); // 수신 데이터 확인
            updateTable(data);
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
}
수정된 updateTable 함수
이 함수는 요소가 존재하는지 확인하고, 없는 경우 콘솔에 명확하게 오류를 출력하도록 합니다.

javascript
코드 복사
function updateTable(data) {
    console.log("Updating table with new data:", data); // 디버깅 로그 추가
    data.forEach(item => {
        const ip = item.ip;
        let sensorRow = document.querySelector(`[data-ip="${ip}"]`);
        
        if (!sensorRow) {
            console.error(`Row for IP ${ip} not found. Make sure the row exists in the HTML.`);
            return; // 요소가 없으면 다음 항목으로 넘어갑니다.
        }

        const circleContainer = sensorRow.querySelector('.circle-container');
        if (!circleContainer) {
            console.error(`Circle container for IP ${ip} not found.`);
            return; // 요소가 없으면 다음 항목으로 넘어갑니다.
        }

        circleContainer.innerHTML = ''; // 기존 도형 제거

        item.sensor1.split('').forEach((value, index) => {
            const circle = document.createElement('span');
            circle.className = `circle ${value === '1' ? 'red' : 'green'}`;
            circleContainer.appendChild(circle);

            // 두 번째 센서 추적
            if (index === 1) {
                circle.classList.add('second-sensor');
                trackSecondSensor(ip, value === '1' ? 'red' : 'green');
            }
        });

        // 시간 정보 갱신
        const timeCell = sensorRow.querySelector('.time-cell');
        if (timeCell) {
            timeCell.textContent = item.time1;
        } else {
            console.error(`Time cell for IP ${ip} not found.`);
        }
    });
}
확인 사항
HTML 구조와 JavaScript 일치 여부:

HTML 파일에서 각 요소가 올바르게 설정되었는지 확인합니다. 예를 들어, class="circle-container", class="time-cell" 등이 정확히 설정되었는지 봅니다.
data-ip 속성을 설정해 JavaScript가 해당 속성으로 요소를 찾을 수 있게 합니다.
요소가 없을 때의 처리:

요소를 찾지 못했을 때(null일 때) 에러 메시지를 콘솔에 명확히 출력하도록 수정했습니다. 이를 통해 어떤 부분에서 문제가 발생했는지 쉽게 확인할 수 있습니다.
브라우저 콘솔에서 에러 확인:

브라우저 콘솔을 열고, fetchData 함수가 호출될 때 나타나는 로그와 에러 메시지를 확인하여 디버깅합니다.
이 수정 사항들을 반영하면 fetchData 함수에서 발생하는 오류가 개선될 것이며, 브라우저 콘솔에서 문제가 정확히 어디에 있는지 파악할 수 있을 것