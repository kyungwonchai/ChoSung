penCV를 활용하여 지정된 화면 영역에서 특정 색상 조건을 만족하는 직사각형을 찾아, 해당 영역의 특정 지점을 클릭하고 키보드 입력을 자동화하는 C# 코드를 작성할 수 있습니다. 이를 위해 OpenCvSharp4 라이브러리를 사용하여 OpenCV 기능을 C#에서 활용하고, 마우스 및 키보드 입력 시뮬레이션을 위해 Windows API를 사용할 수 있습니다.

주의: 이러한 자동화 작업은 타사 애플리케이션과의 상호 작용을 포함하므로, 대상 애플리케이션의 이용 약관을 준수해야 합니다.

구현 단계:

스크린샷 캡처: 화면의 지정된 영역을 캡처합니다.
이미지 처리: 캡처한 이미지에서 픽셀 색상을 분석하여 조건에 맞는 직사각형을 찾습니다.
마우스 및 키보드 입력 시뮬레이션: 찾은 영역의 특정 지점을 클릭하고, 키보드 입력을 자동화합니다.
필요한 패키지 설치:

NuGet 패키지 관리자에서 OpenCvSharp4와 OpenCvSharp4.Windows 패키지를 설치합니다.

필요한 네임스페이스 및 DLL 임포트:

csharp
코드 복사
using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Threading.Tasks;
using System.Windows.Forms;
using OpenCvSharp;
using OpenCvSharp.Extensions;
WinAPI 함수 선언:

csharp
코드 복사
[DllImport("user32.dll")]
static extern bool SetCursorPos(int X, int Y);

[DllImport("user32.dll")]
static extern void mouse_event(uint dwFlags, uint dx, uint dy, uint dwData, int dwExtraInfo);

[DllImport("user32.dll")]
static extern IntPtr GetDC(IntPtr hWnd);

[DllImport("gdi32.dll")]
static extern uint GetPixel(IntPtr hdc, int nXPos, int nYPos);

[DllImport("user32.dll")]
static extern int ReleaseDC(IntPtr hWnd, IntPtr hDC);

const uint MOUSEEVENTF_LEFTDOWN = 0x0002;
const uint MOUSEEVENTF_LEFTUP = 0x0004;
주요 함수 구현:

csharp
코드 복사
private async Task PerformAutomationAsync()
{
    // 지정된 영역의 좌표 및 크기
    int startX = 1200;
    int endX = 1500;
    int startY = 500;
    int endY = 600;

    // 스크린샷 캡처
    Bitmap screenshot = CaptureScreen(startX, startY, endX - startX, endY - startY);
    Mat src = BitmapConverter.ToMat(screenshot);

    // BGR 색상 범위 설정
    Scalar lower = new Scalar(50, 50, 150); // BGR에서 B:150, G:50, R:50
    Scalar upper = new Scalar(200, 120, 50); // BGR에서 B:200, G:120, R:50

    // 색상 범위에 해당하는 마스크 생성
    Mat mask = new Mat();
    Cv2.InRange(src, lower, upper, mask);

    // 마스크에서 윤곽선 찾기
    Cv2.FindContours(mask, out Point[][] contours, out HierarchyIndex[] hierarchy, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

    foreach (var contour in contours)
    {
        // 윤곽선의 외접 사각형 구하기
        Rect rect = Cv2.BoundingRect(contour);

        // 사각형의 크기 조건 확인
        if (rect.Width >= 200 && rect.Height >= 30)
        {
            // 조건에 맞는 사각형을 찾았을 때
            int clickX = startX + rect.X + rect.Width / 2;
            int clickY = startY + rect.Y - 157;

            // 마우스 클릭 시뮬레이션
            SetCursorPos(clickX, clickY);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, (uint)clickX, (uint)clickY, 0, 0);

            // 키보드 입력 시뮬레이션
            await Task.Delay(100); // 약간의 지연을 추가하여 안정성 확보
            SendKeys.SendWait("kkkkbbbbb");
            await Task.Delay(100);
            SendKeys.SendWait("{TAB}");
            await Task.Delay(100);
            SendKeys.SendWait("aaaaabbbb");

            // 파란 버튼의 중앙을 클릭 (예: 직사각형의 중앙)
            await Task.Delay(100);
            SetCursorPos(clickX, startY + rect.Y + rect.Height / 2);
            mouse_event(MOUSEEVENTF_LEFTDOWN | MOUSEEVENTF_LEFTUP, (uint)clickX, (uint)(startY + rect.Y + rect.Height / 2), 0, 0);

            return;
        }
    }

    MessageBox.Show("조건에 맞는 직사각형을 찾을 수 없습니다.");
}

private Bitmap CaptureScreen(int x, int y, int width, int height)
{
    Bitmap bmp = new Bitmap(width, height);
    using (Graphics g = Graphics.FromImage(bmp))
    {
        g.CopyFromScreen(x, y, 0, 0, new System.Drawing.Size(width, height), CopyPixelOperation.SourceCopy);
    }
    return bmp;
}
코드 설명:

스크린샷 캡처: CaptureScreen 메서드를 사용하여 지정된 화면 영역의 스크린샷을 캡처합니다.
이미지 변환: 캡처한 스크린샷을 OpenCvSharp의 Mat 객체로 변환합니다.
색상 범위 설정: BGR 색상 공간에서 지정된 범위의 색상을 나타내는 Scalar 객체를 생성합니다.
마스크 생성: Cv2.InRange 함수를 사용하여 지정된 색상 범위에 해당하는 마스크를 생성합니다.
윤곽선 찾기: Cv2.FindContours 함수를 사용하여 마스크에서 윤곽선을 찾습니다.
조건에 맞는 사각형 찾기: 각 윤곽선에 대해 외접 사각형을 구하고,

출처





나의 말:
마스킹 저거 뭔데 씨발 비지알?  R이 어디고 알지비 순이야 뭐야 괄호안꺼 어찌보고 어찌이해하는거야 씨발아
ChatGPT의 말:
ChatGPT
OpenCV에서 이미지를 다룰 때, 색상 순서에 대한 이해가 중요합니다. OpenCV는 기본적으로 BGR(Blue, Green, Red) 순서를 사용합니다. 따라서, 색상 값을 지정할 때도 BGR 순서로 입력해야 합니다.

예를 들어, 파란색은 BGR로 [255, 0, 0]으로 표현됩니다. 이러한 순서 때문에, OpenCV에서 색상 범위를 지정할 때도 BGR 순서를 사용해야 합니다.

또한, OpenCV에서 색상 범위를 지정할 때는 HSV 색공간을 사용하는 것이 일반적입니다. HSV는 색상(Hue), 채도(Saturation), 명도(Value)를 나타내며, 색상 추출에 더 적합합니다. HSV 색공간에서 색상(H)은 0179, 채도(S)와 명도(V)는 0255 범위를 가집니다.

따라서, 특정 색상을 추출하기 위해서는 이미지를 BGR에서 HSV로 변환한 후, cv2.inRange() 함수를 사용하여 원하는 색상 범위를 마스킹할 수 있습니다.