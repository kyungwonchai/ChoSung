. CONTROL_AF_REGIONS 설정을 통한 초점 영역 조정
카메라 센서의 특정 영역에 초점을 맞추기 위해 CONTROL_AF_REGIONS를 설정하는 방법을 더 상세히 설명하겠습니다. 이 방법은 MeteringRectangle을 사용하여 포커스 영역을 설정하고, 해당 영역에 대해 자동 초점을 수행합니다.

예제 코드: 초점 영역 설정
kotlin
코드 복사
import android.graphics.Rect
import android.hardware.camera2.CaptureRequest
import android.hardware.camera2.params.MeteringRectangle
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.content.ContextCompat

class MainActivity : ComponentActivity() {

    private lateinit var previewView: PreviewView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        previewView = findViewById(R.id.previewView)

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val preview = Preview.Builder().build()

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            // Camera2Interop을 사용하여 추가 설정 적용
            val camera2Interop = Camera2Interop.Extender(preview)

            // 포커싱 영역을 설정하기 위해 사용될 Rect (중앙에 20% 영역을 설정하는 예시)
            val sensorArraySize = cameraProvider.getAvailableCameraInfos()[0]
                .cameraControl.cameraInfo.sensorInfo.pixelArraySize

            // 중앙 영역을 계산 (전체의 20% 크기)
            val focusArea = Rect(
                (sensorArraySize.width * 0.4).toInt(),
                (sensorArraySize.height * 0.4).toInt(),
                (sensorArraySize.width * 0.6).toInt(),
                (sensorArraySize.height * 0.6).toInt()
            )

            // 초점 영역을 MeteringRectangle로 설정
            val meteringRectangle = MeteringRectangle(focusArea, MeteringRectangle.METERING_WEIGHT_MAX)
            
            camera2Interop.setCaptureRequestOption(
                CaptureRequest.CONTROL_AF_REGIONS,
                arrayOf(meteringRectangle)
            )

            // 오토포커스 모드 설정
            camera2Interop.setCaptureRequestOption(
                CaptureRequest.CONTROL_AF_MODE,
                CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
            )

            try {
                cameraProvider.unbindAll()
                val camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )
                preview.setSurfaceProvider(previewView.surfaceProvider)

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA
        )
    }
}
코드 설명:
Sensor Array Size:

카메라 센서의 전체 크기를 가져오기 위해 cameraInfo.sensorInfo.pixelArraySize를 사용합니다.
이 값은 카메라 센서의 전체 이미지 크기를 나타내며, 초점 영역을 설정할 때 기준으로 사용됩니다.
포커스 영역 (Rect):

중앙 영역에 초점을 맞추기 위해 전체 이미지의 20% 크기(중앙에 위치한)를 사용하여 Rect 객체를 생성합니다.
이 Rect 객체는 포커스 영역을 정의하는 데 사용됩니다.
MeteringRectangle:

MeteringRectangle은 Rect와 가중치(MeteringRectangle.METERING_WEIGHT_MAX)를 사용해 초점 영역을 지정합니다.
가중치 값은 초점 영역의 우선순위를 결정하며, 최대값을 사용하면 해당 영역에 우선적으로 초점을 맞춥니다.
Camera2Interop 설정:

Camera2Interop.Extender를 사용해 CaptureRequest.CONTROL_AF_REGIONS를 설정하고, MeteringRectangle 배열을 전달하여 초점 영역을 지정합니다.
CaptureRequest.CONTROL_AF_MODE를 CONTROL_AF_MODE_CONTINUOUS_PICTURE로 설정하여, 지속적인 자동 초점을 활성화합니다.
다른 설정 조합:
CONTROL_AF_MODE는 한 번에 하나의 모드만 지정할 수 있습니다. 그러나 CONTROL_AF_REGIONS와 CONTROL_AE_REGIONS(노출 영역)를 조합하여 더 세밀한 제어를 할 수 있습니다.
kotlin
코드 복사
// 예시: AF 및 AE 영역을 동시에 설정
camera2Interop.setCaptureRequestOption(
    CaptureRequest.CONTROL_AF_REGIONS,
    arrayOf(meteringRectangle)
)

camera2Interop.setCaptureRequestOption(
    CaptureRequest.CONTROL_AE_REGIONS,
    arrayOf(meteringRectangle)
)
결론:
AF 영역 설정: 초점 영역을 명확하게 지정함으로써, 카메라가 초점을 더 빠르게 잡을 수 있습니다.
포커스 최적화: CONTROL_AF_TRIGGER와 CONTROL_AF_REGIONS를 적절히 사용하여 포커싱 속도를 최적화할 수 있습니다.
이 코드와 설명을 통해 포커스 영역을 더 세밀하게 제어할 수 있습니다. 추가적