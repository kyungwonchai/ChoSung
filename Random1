송합니다. 이전 코드에서 정보를 조회하는 부분을 잘못 처리했습니다. 아래는 smd.management_mobile_mainseet 테이블에서 정보를 가져오는 로직을 포함하여 다시 작성한 전체 함수입니다.

수정된 checkAndInsertModel 함수
kotlin
코드 복사
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException
import java.sql.Timestamp
import java.time.LocalDateTime
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

private var isExecuting = false

suspend fun checkAndInsertModel(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        if (isExecuting) {
            return@withContext null
        }

        isExecuting = true
        var mssqlConnection: Connection? = null
        var mysqlConnection: Connection? = null
        var preparedStatement: java.sql.PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null

        try {
            // QR 코드를 ^로 분리
            val parts = qrCode.split("^")
            val firstPart = parts[0]
            val secondPart = parts.getOrNull(1)

            if (secondPart == null) {
                result = "QR code format is invalid. No second part found."
                return@withContext result
            }

            // MSSQL 데이터베이스 연결
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")
            mssqlConnection = DriverManager.getConnection(
                "jdbc:sqlserver://your_mssql_server:1433;databaseName=your_database_name;user=your_username;password=your_password;"
            )

            // 첫 번째 값을 MSSQL의 QRCodeData 테이블에서 조회
            val mssqlQuery = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = ?"
            preparedStatement = mssqlConnection.prepareStatement(mssqlQuery)
            preparedStatement.setString(1, firstPart)

            resultSet = preparedStatement.executeQuery()

            if (resultSet.next() && resultSet.getInt(1) > 0) {
                // 첫 번째 값이 존재할 때 MySQL에 두 번째 값을 삽입

                // MySQL 데이터베이스 연결
                Class.forName("com.mysql.cj.jdbc.Driver")
                mysqlConnection = DriverManager.getConnection(
                    "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC",
                    "abc", "1233445"
                )

                // mainsheet에서 데이터를 가져옴
                val mainSheetQuery = """
                    SELECT depart, part, floor, district, at, model, modelnumber 
                    FROM smd.management_mobile_mainseet 
                    WHERE modelnumber = ?
                """.trimIndent()
                preparedStatement = mysqlConnection.prepareStatement(mainSheetQuery)
                preparedStatement.setString(1, secondPart)
                resultSet = preparedStatement.executeQuery()

                if (resultSet.next()) {
                    val depart = resultSet.getString("depart")
                    val part = resultSet.getString("part")
                    val floor = resultSet.getString("floor")
                    val district = resultSet.getString("district")
                    val at = resultSet.getString("at")
                    val model = resultSet.getString("model")
                    val modelnumber = resultSet.getString("modelnumber")

                    // 최근 10분 이내에 해당 modelnumber로 체크된 기록이 있는지 확인 (DB 시간 기준)
                    val checkQuery = """
                        SELECT COUNT(*) as count FROM smd.management_mobile_checksheet 
                        WHERE modelnumber = ? AND check_time > (NOW() - INTERVAL 10 MINUTE)
                    """.trimIndent()
                    preparedStatement = mysqlConnection.prepareStatement(checkQuery)
                    preparedStatement.setString(1, modelnumber)

                    val countResultSet = preparedStatement.executeQuery()

                    var shouldInsert = true

                    if (countResultSet.next()) {
                        val count = countResultSet.getInt("count")
                        if (count > 0) {
                            shouldInsert = false
                        }
                    }

                    if (shouldInsert) {
                        val insertQuery = """
                            INSERT INTO smd.management_mobile_checksheet 
                            (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                            VALUES (?, ?, ?, ?, ?, ?, ?, '00000000', 'mobile', '00000000', NOW())
                        """.trimIndent()

                        preparedStatement = mysqlConnection.prepareStatement(insertQuery)
                        preparedStatement.setString(1, depart)
                        preparedStatement.setString(2, part)
                        preparedStatement.setString(3, floor)
                        preparedStatement.setString(4, district)
                        preparedStatement.setString(5, at)
                        preparedStatement.setString(6, model)
                        preparedStatement.setString(7, modelnumber)

                        preparedStatement.executeUpdate()
                        result = "New record inserted for modelnumber: $modelnumber"
                    } else {
                        result = "No insertion needed, recent check_time is within 10 minutes"
                    }
                } else {
                    result = "No record found in mainsheet for modelnumber: $secondPart"
                }
            } else {
                result = "First part of QR code not found in MSSQL"
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            result = "SQL error: ${e.message}"
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            result = "JDBC Driver not found: ${e.message}"
        } catch (e: Exception) {
            e.printStackTrace()
            result = "Unexpected error: ${e.message}"
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                mssqlConnection?.close()
                mysqlConnection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
            isExecuting = false // 작업 완료 후 플래그를 다시 false로 설정
        }

        return@withContext result
    }
}
주요 변경 사항:
MSSQL에서 조회된 값이 존재하는지 확인 후:

firstPart를 MSSQL의 QRCodeData 테이블에서 확인한 다음, 해당 값이 존재할 때 MySQL에 접근합니다.
MySQL에서 데이터 조회:

MySQL의 mainsheet 테이블에서 필요한 정보를 조회하고, 이를 checksheet 테이블에 삽입하는 코드입니다.
모든 관련 정보를 조회:

depart, part, floor, district, at, model, modelnumber 정보를 가져오고, 이를 바탕으로 checksheet 테이블에 삽입합니다.
삽입 조건:

최근 10분 내에 동일한 modelnumber에 대한 기록이 존재하지 않을 때만 새 레코드를 삽입합니다.
결론
이 코드가 요청하신 대로 MSSQL에서 QR 코드의 첫 번째 값을 확인하고, MySQL에서 두 번째 값을 적절히 처리하는 방법을 구현합니다. 더 이상 수정할 필요가 없도록 모든 관련 정보를 포함시켰습니다. 추가적인 질문이 있으면 언제든지 말씀해 주