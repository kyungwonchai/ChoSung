자가 버튼 캡션명을 바꿔도 즐겨찾기 기능이 동작하도록 구현하기
버튼 캡션은 개발자가 언제든 변경할 수 있으므로, 즐겨찾기 기능을 캡션 대신 **고유 ID(Tag)**를 기준으로 동작하게 해야 합니다. 이 방식에서는 버튼의 Tag 속성을 기준으로 버튼을 식별하며, 캡션이 변경되어도 즐겨찾기 상태와 기능이 유지됩니다.

구현 변경 사항
1. FavoriteManager 클래스 수정
기존과 동일하게 JSON 파일에 Tag 값을 기준으로 즐겨찾기를 저장합니다.
csharp
코드 복사
using System.Collections.Generic;
using System.IO;
using System.Text.Json;

public class FavoriteManager
{
    private const string FilePath = @"C:\Users\<사용자>\AppData\Local\MyRibbonApp\favorites.json";

    public List<string> Favorites { get; private set; }

    public FavoriteManager()
    {
        Favorites = LoadFavorites();
    }

    public void AddToFavorites(string buttonId)
    {
        if (!Favorites.Contains(buttonId))
        {
            Favorites.Add(buttonId);
            SaveFavorites();
        }
    }

    public void RemoveFromFavorites(string buttonId)
    {
        if (Favorites.Contains(buttonId))
        {
            Favorites.Remove(buttonId);
            SaveFavorites();
        }
    }

    private List<string> LoadFavorites()
    {
        if (File.Exists(FilePath))
        {
            string json = File.ReadAllText(FilePath);
            return JsonSerializer.Deserialize<List<string>>(json) ?? new List<string>();
        }
        return new List<string>();
    }

    private void SaveFavorites()
    {
        Directory.CreateDirectory(Path.GetDirectoryName(FilePath));
        string json = JsonSerializer.Serialize(Favorites);
        File.WriteAllText(FilePath, json);
    }
}
2. MainForm 코드 수정
버튼 식별은 Tag를 기준으로 수행합니다.
Caption(캡션)은 언제든 변경 가능하며, 기능에는 영향을 주지 않습니다.
csharp
코드 복사
using DevExpress.XtraBars;
using DevExpress.XtraBars.Ribbon;
using DevExpress.XtraEditors;
using System;
using System.Linq;
using System.Windows.Forms;

public partial class MainForm : RibbonForm
{
    private FavoriteManager _favoriteManager;
    private RibbonPageGroup _favoritesGroup;
    private TextEdit _searchBox;
    private ListBoxControl _searchResults;

    public MainForm()
    {
        InitializeComponent();

        // 즐겨찾기 매니저 초기화
        _favoriteManager = new FavoriteManager();

        // UI 요소 초기화
        InitializeSearchPanel();
        CreateFavoritesGroup();

        // 즐겨찾기 버튼 로드
        RefreshFavorites();
    }

    private void InitializeSearchPanel()
    {
        // 검색 입력창 생성
        _searchBox = new TextEdit
        {
            PlaceholderText = "Search buttons...",
            Dock = DockStyle.Top
        };
        _searchBox.EditValueChanged += SearchBox_EditValueChanged;
        Controls.Add(_searchBox);

        // 검색 결과 표시 창 생성
        _searchResults = new ListBoxControl
        {
            Dock = DockStyle.Fill
        };
        _searchResults.DoubleClick += SearchResults_DoubleClick;
        Controls.Add(_searchResults);
    }

    private void SearchBox_EditValueChanged(object sender, EventArgs e)
    {
        string query = _searchBox.Text.ToLower();

        // 버튼 검색 (캡션 기준)
        var results = ribbonPageGroup1.ItemLinks
            .Select(link => link.Item as BarButtonItem)
            .Where(button => button != null && button.Caption.ToLower().Contains(query))
            .ToList();

        // 검색 결과 표시
        _searchResults.Items.Clear();
        foreach (var button in results)
        {
            _searchResults.Items.Add(new
            {
                Button = button,
                DisplayText = $"{button.Caption} {(IsFavorite(button) ? "[★]" : "")}"
            });
        }
    }

    private void SearchResults_DoubleClick(object sender, EventArgs e)
    {
        if (_searchResults.SelectedItem == null) return;

        dynamic selectedItem = _searchResults.SelectedItem;
        BarButtonItem button = selectedItem.Button;

        // 즐겨찾기 추가/제거 토글
        if (IsFavorite(button))
        {
            _favoriteManager.RemoveFromFavorites(button.Tag.ToString());
        }
        else
        {
            _favoriteManager.AddToFavorites(button.Tag.ToString());
        }

        RefreshFavorites();
        SearchBox_EditValueChanged(null, null); // 검색 결과 업데이트
    }

    private void CreateFavoritesGroup()
    {
        // Favorites 그룹 생성
        _favoritesGroup = new RibbonPageGroup("Favorites");
        ribbonPage1.Groups.Add(_favoritesGroup);
    }

    private void RefreshFavorites()
    {
        // 즐겨찾기 그룹 초기화
        _favoritesGroup.ItemLinks.Clear();

        foreach (var buttonId in _favoriteManager.Favorites)
        {
            var button = ribbonPageGroup1.ItemLinks
                .Select(link => link.Item as BarButtonItem)
                .FirstOrDefault(b => b?.Tag.ToString() == buttonId);

            if (button != null)
            {
                _favoritesGroup.ItemLinks.Add(button);
            }
        }
    }

    private bool IsFavorite(BarButtonItem button)
    {
        return _favoriteManager.Favorites.Contains(button.Tag.ToString());
    }
}
3. 기존 버튼의 Tag 설정
Tag 속성은 버튼의 고유 ID 역할을 하며, 이를 기준으로 검색과 즐겨찾기 기능이 동작합니다. 개발자가 Caption(캡션)을 변경해도 Tag 값은 변경하지 않도록 고정합니다.

csharp
코드 복사
private void InitializeComponent()
{
    this.ribbonControl1 = new DevExpress.XtraBars.Ribbon.RibbonControl();
    this.ribbonPage1 = new DevExpress.XtraBars.Ribbon.RibbonPage();
    this.ribbonPageGroup1 = new DevExpress.XtraBars.Ribbon.RibbonPageGroup();

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).BeginInit();
    this.SuspendLayout();

    // ribbonControl1
    this.ribbonControl1.Pages.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPage[] {
        this.ribbonPage1});
    this.ribbonControl1.Location = new System.Drawing.Point(0, 0);
    this.ribbonControl1.Size = new System.Drawing.Size(800, 150);
    this.ribbonControl1.Name = "ribbonControl1";

    // ribbonPage1
    this.ribbonPage1.Groups.AddRange(new DevExpress.XtraBars.Ribbon.RibbonPageGroup[] {
        this.ribbonPageGroup1});
    this.ribbonPage1.Text = "Main";

    // ribbonPageGroup1
    this.ribbonPageGroup1.Text = "Commands";

    // 예제 버튼 추가
    var button1 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Original Caption 1",
        Tag = "btn1" // 고유 ID
    };
    var button2 = new DevExpress.XtraBars.BarButtonItem
    {
        Caption = "Original Caption 2",
        Tag = "btn2" // 고유 ID
    };
    this.ribbonPageGroup1.ItemLinks.Add(button1);
    this.ribbonPageGroup1.ItemLinks.Add(button2);

    // MainForm
    this.ClientSize = new System.Drawing.Size(800, 450);
    this.Controls.Add(this.ribbonControl1);
    this.Name = "MainForm";
    this.Text = "Ribbon Form with Search and Favorites";

    ((System.ComponentModel.ISupportInitialize)(this.ribbonControl1)).EndInit();
    this.ResumeLayout(false);
    this.PerformLayout();
}
결과
Tag를 기준으로 식별:

즐겨찾기 기능은 Tag(고유 ID)를 기준으로 동작.
Caption이 변경되어도 기능에는 영향이 없음.
캡션 변경 지원:

개발자가 버튼의 Caption을 자유롭게 변경 가능.
Caption 변경 후에도 버튼은 정상적으로 검색 및 즐겨찾기 관리 가능.
즐겨찾기 상태 유지:

JSON 파일에는 Tag 값만 저장하므로, 캡션 변경 시에도 즐겨찾기 상태가 유지.
장점
유연성: 캡션이 변경되어도 시스템이 안정적으로 동작.
확장성: 새로운 버튼 추가 시에도 Tag만 고유하게 설정하면 기능 확장 가능.