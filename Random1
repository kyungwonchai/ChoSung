도우에서 체크박스 상태를 실시간으로 데이터로 반영하고, 별도의 "적용" 버튼을 통해 최종적으로 변경사항을 메인 윈도우의 GridControl에 반영하는 기능을 구현하겠습니다.

먼저, 설정 윈도우의 XAML을 업데이트하여 "적용" 버튼을 추가합니다(ColumnOrderingWindow.xaml):

xml
Copy code
<Window x:Class="ColumnOrderingWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Column Order" Height="300" Width="200">
    <StackPanel>
        <Button Content="Apply Changes" Click="ApplyChanges_Click" Margin="5"/>
        <ListBox x:Name="ListBoxColumns" AllowDrop="True" PreviewMouseMove="ListBoxColumns_PreviewMouseMove" Drop="ListBoxColumns_Drop">
            <ListBox.ItemTemplate>
                <DataTemplate>
                    <StackPanel Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding IsVisible}" Content="{Binding Header}" Checked="CheckBox_Checked" Unchecked="CheckBox_Checked"/>
                    </StackPanel>
                </DataTemplate>
            </ListBox.ItemTemplate>
        </ListBox>
    </StackPanel>
</Window>
설정 윈도우의 코드 비하인드에 ApplyChanges_Click 이벤트 핸들러와 CheckBox_Checked 이벤트 핸들러를 추가합니다(ColumnOrderingWindow.xaml.cs):

csharp
Copy code
public partial class ColumnOrderingWindow : Window
{
    public ObservableCollection<ColumnInfo> ColumnsInfo { get; set; }
    public Action<IEnumerable<ColumnInfo>> OnApplyChanges { get; set; }

    public ColumnOrderingWindow(IEnumerable<ColumnInfo> columns, Action<IEnumerable<ColumnInfo>> onApplyChanges)
    {
        InitializeComponent();
        ColumnsInfo = new ObservableCollection<ColumnInfo>(columns);
        ListBoxColumns.ItemsSource = ColumnsInfo;
        OnApplyChanges = onApplyChanges;
    }

    private void ApplyChanges_Click(object sender, RoutedEventArgs e)
    {
        // '적용' 버튼을 클릭하면 메인 윈도우의 OnApplyChanges 액션을 호출합니다.
        OnApplyChanges?.Invoke(ColumnsInfo);
        this.Close(); // 설정 윈도우를 닫습니다.
    }

    private void CheckBox_Checked(object sender, RoutedEventArgs e)
    {
        // CheckBox의 상태가 변경될 때마다 ColumnInfo의 IsVisible 속성을 업데이트합니다.
        // 이는 ObservableCollection이므로 UI에 자동으로 반영됩니다.
    }
}
메인 윈도우에서 설정 윈도우를 생성하고 OnApplyChanges 액션을 설정합니다(MainWindow.xaml.cs):

csharp
Copy code
private void OpenColumnOrderingWindow_Click(object sender, RoutedEventArgs e)
{
    var columnsInfo = gridControl1.Columns
        .Select(c => new ColumnInfo
        {
            Header = c.Header.ToString(),
            IsVisible = c.Visible,
            DisplayIndex = c.VisibleIndex
        })
        .OrderBy(c => c.DisplayIndex).ToList();

    // 설정 윈도우를 열고, OnApplyChanges 액션을 설정합니다.
    var columnOrderingWindow = new ColumnOrderingWindow(columnsInfo, ApplyChangesToGridControl);
    columnOrderingWindow.ShowDialog();
}

// 변경 사항을 메인 윈도우의 GridControl에 적용하는 메서드입니다.
private void ApplyChangesToGridControl(IEnumerable<ColumnInfo> columnsInfo)
{
    foreach (var colInfo in columnsInfo)
    {
        var column = gridControl1.Columns.FirstOrDefault(c => c.Header.ToString() == colInfo.Header);
        if (column != null)
        {
            column.Visible = colInfo.IsVisible;
            column.VisibleIndex = columnsInfo.ToList().IndexOf(colInfo);
        }
    }
}
이제 설정 윈도우에서 체크박스를 체크하거나 순서를 변경하고 "적용" 버튼을 클릭하면 메인 윈도우의 GridControl에 반영됩니다. OnApplyChanges 액션을 통해 설정 윈도우에서의 변경 사항을 메인 윈도우에 전달하고 GridControl을 업데이트합니다.





