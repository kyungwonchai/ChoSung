const express = require('express');
const sql = require('mssql');

const app = express();
app.use(express.json());

// --- API 키 및 검사 미들웨어 (기존과 동일) ---
const SECRET_API_KEY = "LightMeter-Secret-Key-1234";

const apiKeyMiddleware = (req, res, next) => {
    const apiKey = req.get('x-api-key');
    if (!apiKey || apiKey !== SECRET_API_KEY) {
        return res.status(401).send('Unauthorized');
    }
    next();
};

// --- 1. [수정] DB 연결 풀(Connection Pool) 설정 ---
const dbConfig = {
    user: '사용자ID',
    password: '비밀번호',
    server: '내서버IP',
    database: '데이터베이스이름',
    pool: {
        max: 10, // 풀에 생성할 최대 연결 수
        min: 0,  // 풀에 유지할 최소 연결 수
        idleTimeoutMillis: 30000 // 연결이 유휴 상태일 때 유지 시간 (밀리초)
    },
    options: {
        encrypt: false,
        trustServerCertificate: true
    }
};

// --- 2. [추가] 서버 시작과 동시에 DB 연결 풀 생성 및 연결 ---
// 앱 전체에서 재사용할 수 있도록 poolPromise를 전역적으로 생성합니다.
const poolPromise = new sql.ConnectionPool(dbConfig)
    .connect()
    .then(pool => {
        console.log('? DB 연결 풀 생성 완료');
        return pool;
    })
    .catch(err => console.error('DB 연결 풀 생성 실패', err));


// --- 3. [수정] 모든 요청 핸들러에서 연결 풀을 사용하도록 변경 ---

// 실시간 로그 처리
app.post('/log', apiKeyMiddleware, async (req, res) => {
    const { deviceId, lux } = req.body;
    if (deviceId === undefined || lux === undefined) {
        return res.status(400).send('값이 없습니다.');
    }

    try {
        const pool = await poolPromise; // 생성된 연결 풀을 가져옴
        await pool.request() // 풀에서 연결을 빌려와 요청 실행
            .input('DeviceId', sql.VarChar, deviceId)
            .input('LuxValue', sql.Float, lux)
            // 실제 DB 테이블 구조에 맞게 쿼리 수정
            .query('INSERT INTO LightLog (DeviceId, LuxValue) VALUES (@DeviceId, @LuxValue)');
        
        // console.log(`[실시간] 데이터 저장 성공: ${deviceId} - ${lux} lux`); // 너무 자주 찍히므로 주석 처리 권장
        res.status(200).send('실시간 데이터 저장 성공');
    } catch (err) {
        console.error('DB 오류 (실시간):', err);
        res.status(500).send('서버 오류 발생');
    }
    // finally 블록과 sql.close()를 제거하여 연결을 계속 유지합니다.
});

// 1분 평균 로그 처리
app.post('/log1min', apiKeyMiddleware, async (req, res) => {
    const { deviceId, avgLux } = req.body;
    if (deviceId === undefined || avgLux === undefined) {
        return res.status(400).send('값이 없습니다.');
    }

    try {
        const pool = await poolPromise; // 생성된 연결 풀을 가져옴
        await pool.request() // 풀에서 연결을 빌려와 요청 실행
            .input('DeviceId', sql.VarChar, deviceId)
            .input('AvgLuxValue', sql.Float, avgLux)
            // 실제 DB 테이블 구조에 맞게 쿼리 수정
            .query('INSERT INTO YourMinuteLogTable (DeviceId, AvgLuxValue) VALUES (@DeviceId, @AvgLuxValue)');
        
        console.log(`[1분 평균] 데이터 저장 성공: ${deviceId} - ${avgLux} lux`);
        res.status(200).send('1분 평균 데이터 저장 성공');
    } catch (err) {
        console.error('DB 오류 (1분):', err);
        res.status(500).send('서버 오류 발생');
    }
});


const PORT = 3000;
app.listen(PORT, () => {
    console.log(`API 서버가 ${PORT}번 포트에서 실행 중입니다.`);
});