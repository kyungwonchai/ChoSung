래는 드라이브가 Y:\, X:\, Z:\ 중 하나일 수 있으며, 드라이브가 없으면 넘어가고, 처음 발견되는 드라이브를 처리하는 코드를 포함한 WPF C# 코드입니다. Path.GetRelativePath 대신 다른 방식으로 상대 경로를 처리하여 빨간 줄 문제도 해결했습니다.

수정된 C# 코드
csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Timers;
using System.Windows;

namespace CrbFileMonitor
{
    public partial class MainWindow : Window
    {
        private readonly string[] PossibleDrives = { @"Y:\", @"X:\", @"Z:\" }; // 검색할 드라이브 목록
        private const string DestinationDirectory = @"C:\MountCrbShare"; // 복사 대상 디렉토리
        private Timer _timer;
        private readonly object _logLock = new object(); // 로그 동기화용 Lock

        public MainWindow()
        {
            InitializeComponent();
            InitializeFileMonitor();
        }

        /// <summary>
        /// 파일 모니터링 초기화
        /// </summary>
        private void InitializeFileMonitor()
        {
            // 대상 폴더가 없으면 생성
            if (!Directory.Exists(DestinationDirectory))
            {
                Directory.CreateDirectory(DestinationDirectory);
                AddLog($"폴더 생성: {DestinationDirectory}");
            }

            // 타이머 설정 (1분 주기)
            _timer = new Timer(60000); // 60,000ms = 1분
            _timer.Elapsed += async (sender, e) => await MonitorFilesAsync();
            _timer.Start();

            AddLog("CRB 파일 모니터링 시작.");
        }

        /// <summary>
        /// 사용 가능한 첫 번째 드라이브 검색
        /// </summary>
        /// <returns>첫 번째 발견된 드라이브 경로 또는 null</returns>
        private string GetAvailableDrive()
        {
            foreach (var drive in PossibleDrives)
            {
                if (Directory.Exists(drive))
                {
                    return drive;
                }
            }
            return null; // 사용 가능한 드라이브 없음
        }

        /// <summary>
        /// 파일 검색 및 복사
        /// </summary>
        private async Task MonitorFilesAsync()
        {
            string sourceDirectory = GetAvailableDrive();

            if (sourceDirectory == null)
            {
                AddLog("사용 가능한 드라이브가 없습니다. 작업을 건너뜁니다.");
                return;
            }

            try
            {
                // 사용 가능한 드라이브에서 .crb 파일 검색 (하위 폴더 포함)
                string[] crbFiles = Directory.GetFiles(sourceDirectory, "*.crb", SearchOption.AllDirectories);

                foreach (var file in crbFiles)
                {
                    FileInfo fileInfo = new FileInfo(file);

                    // 파일명 생성: 마지막 쓰기 시간 + 기존 파일명
                    string formattedTime = fileInfo.LastWriteTime.ToString("yyyyMMddHHmmss");

                    // 상대 경로 계산
                    string relativePath = fileInfo.DirectoryName.Replace(sourceDirectory, "").TrimStart(Path.DirectorySeparatorChar);
                    string destinationFolder = Path.Combine(DestinationDirectory, relativePath);

                    // 대상 폴더가 없으면 생성
                    if (!Directory.Exists(destinationFolder))
                    {
                        Directory.CreateDirectory(destinationFolder);
                        AddLog($"폴더 생성: {destinationFolder}");
                    }

                    // 파일 복사
                    string destinationPath = Path.Combine(destinationFolder, $"{formattedTime}_{fileInfo.Name}");
                    await Task.Run(() => File.Copy(file, destinationPath, true));

                    AddLog($"파일 복사 완료: {destinationPath}");
                }

                if (crbFiles.Length == 0)
                {
                    AddLog("새로운 .crb 파일이 없습니다.");
                }
            }
            catch (Exception ex)
            {
                AddLog($"에러 발생: {ex.Message}");
            }
        }

        /// <summary>
        /// 로그 추가 (ListBox에 출력)
        /// </summary>
        /// <param name="message">로그 메시지</param>
        private void AddLog(string message)
        {
            string logEntry = $"[{DateTime.Now:yyyyMMdd HHmmss}] {message}";

            Dispatcher.Invoke(() =>
            {
                lock (_logLock)
                {
                    if (LogListBox.Items.Count >= 50)
                    {
                        LogListBox.Items.RemoveAt(0); // 오래된 로그 제거
                    }

                    LogListBox.Items.Add(logEntry); // 새 로그 추가
                }
            });
        }
    }
}
변경 사항
드라이브 검색

PossibleDrives 배열(Y:\, X:\, Z:\)을 순차적으로 확인하여 첫 번째로 존재하는 드라이브를 선택합니다.
드라이브가 없으면 로그에 남기고 작업을 건너뜁니다.
상대 경로 계산

Path.GetRelativePath 대신 fileInfo.DirectoryName.Replace(sourceDirectory, "")를 사용하여 상대 경로를 계산했습니다.
윈도우 파일 경로 구분자인 \를 유지합니다.
대상 폴더 생성

상대 경로에 따라 필요한 경우 폴더를 동적으로 생성합니다.
타이머

1분마다 .crb 파일을 검색하고 복사 작업을 실행합니다.
로그 예시
csharp
코드 복사
[20250116 150101] CRB 파일 모니터링 시작.
[20250116 150201] 폴더 생성: C:\MountCrbShare\Folder1
[20250116 150202] 파일 복사 완료: C:\MountCrbShare\Folder1\20250116150201_File1.crb
[20250116 150301] 새로운 .crb 파일이 없습니다.
코드 동작 요약
프로그램이 실행되면 Y:\, X:\, Z:\ 중 첫 번째로 발견된 드라이브를 사용합니다.
드라이브가 없으면 로그를 남기고 작업을 건너뜁니다.
.crb 파일을 하위 폴더까지 검색하고, 마지막 쓰기 시간을 기반으로 이름을 변경해 복사합니다.