는 WPF DevExpress 22.2를 사용하여, ipname별 최근 100개의 데이터를 가져와 표준편차를 계산하고, 막대 그래프로 나타내는 전체 코드입니다. 이 코드는 데이터를 MSSQL에서 가져오고, 차트 컨트롤에 표준편차를 표시합니다.

1. MSSQL 테이블 예시
SQL 데이터베이스에서 데이터를 가져오는 쿼리는 다음과 같습니다:

sql
코드 복사
SELECT TOP 100 ipname, InspectionTime, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
FROM YourTable
WHERE ipname = @ipname
ORDER BY InspectionTime DESC;
2. XAML (DevExpress ChartControl)
XAML 파일에서 차트를 추가합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Standard Deviation Chart" Height="600" Width="800">
    <Grid>
        <dxc:ChartControl x:Name="chartControl" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <dxc:XYDiagram2D>
                <dxc:XYDiagram2D.AxisX>
                    <dxc:AxisX2D Title="IP Name" VisibleInPanes="true" />
                </dxc:XYDiagram2D.AxisX>
                <dxc:XYDiagram2D.AxisY>
                    <dxc:AxisY2D Title="Standard Deviation" VisibleInPanes="true" />
                </dxc:XYDiagram2D.AxisY>
                <dxc:BarSideBySideSeries2D DisplayName="Standard Deviation"
                                           DataSource="{Binding Data}"
                                           ArgumentDataMember="IpName"
                                           ValueDataMember="StdDev">
                </dxc:BarSideBySideSeries2D>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
    </Grid>
</Window>
3. MainWindow.xaml.cs
아래는 SqlConnection을 사용하여 데이터를 가져오고 표준편차를 계산하여 그래프에 바인딩하는 코드입니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<ChartData> Data { get; set; } = new ObservableCollection<ChartData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            LoadChartData();
        }

        private async void LoadChartData()
        {
            try
            {
                var connectionString = "YourConnectionString"; // 데이터베이스 연결 문자열
                var ipNames = new[] { "IP1", "IP2", "IP3" }; // IP 목록 (필요 시 동적으로 변경)

                foreach (var ipName in ipNames)
                {
                    var dataPoints = await GetDataAsync(connectionString, ipName);
                    if (dataPoints.Any())
                    {
                        var stdDev = CalculateStandardDeviation(dataPoints);
                        Data.Add(new ChartData { IpName = ipName, StdDev = stdDev });
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private async Task<double[]> GetDataAsync(string connectionString, string ipName)
        {
            var values = new ObservableCollection<double>();

            using (var connection = new SqlConnection(connectionString))
            {
                await connection.OpenAsync();

                using (var command = new SqlCommand(
                    @"SELECT TOP 100 MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                      FROM YourTable
                      WHERE ipname = @ipname
                      ORDER BY InspectionTime DESC", connection))
                {
                    command.Parameters.AddWithValue("@ipname", ipName);

                    using (var reader = await command.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            // 각 MP 데이터의 평균 계산
                            var mpData = new[]
                            {
                                reader.GetDouble(0),
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4)
                            };
                            values.Add(mpData.Average());
                        }
                    }
                }
            }

            return values.ToArray();
        }

        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    public class ChartData
    {
        public string IpName { get; set; }
        public double StdDev { get; set; }
    }
}
4. 주요 설명
표준편차 계산: 각 MP1DATA ~ MP5DATA의 평균값을 계산한 후 표준편차를 구합니다.
DevExpress 차트 컨트롤: ChartControl에서 데이터 소스는 ObservableCollection으로 설정되어 실시간 바인딩이 가능합니다.
비동기 데이터 로드: GetDataAsync는 SQL 데이터를 비동기로 가져와 성능을 최적화합니다.