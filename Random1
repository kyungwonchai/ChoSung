래는 좌측 리스트박스를 항상 펼쳐진 상태로 유지하고, 날짜 변수에서 시간까지 선택할 수 있도록 하며 기본 시간은 항상 08:00으로 설정한 수정된 코드를 제공합니다.

수정된 XAML 코드
xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        xmlns:local="clr-namespace:LineDataViewer"
        Title="Line Data Viewer" Height="600" Width="900">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="250" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- 좌측 컨트롤 -->
        <StackPanel Grid.Column="0" Margin="10">
            <TextBlock Text="라인 목록" FontWeight="Bold" Margin="0,0,0,10" />
            <TreeView x:Name="LineTreeView" Margin="0,0,0,10" IsExpanded="True" />

            <TextBlock Text="날짜 검색" FontWeight="Bold" Margin="0,20,0,10" />
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="시작:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dx:DateEdit x:Name="StartDatePicker" EditValueChanged="OnStartDateChanged" 
                             EditValue="{Binding StartDate, Mode=TwoWay}" DisplayFormat="g" />
            </StackPanel>
            <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
                <TextBlock Text="종료:" VerticalAlignment="Center" Margin="0,0,5,0" />
                <dx:DateEdit x:Name="EndDatePicker" EditValueChanged="OnEndDateChanged" 
                             EditValue="{Binding EndDate, Mode=TwoWay}" DisplayFormat="g" />
            </StackPanel>

            <CheckBox x:Name="AutoRefreshCheckBox" Content="자동 갱신" Margin="0,20,0,10" />
            <Button x:Name="SearchButton" Content="조회" Click="SearchButton_Click" Width="200" />
        </StackPanel>

        <!-- 차트 영역 -->
        <dxc:ChartControl x:Name="LineChart" Grid.Column="1" Margin="10">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.WholeRange>
                                <dxc:Range MinValue="-1" MaxValue="1" />
                            </dxc:AxisY2D.WholeRange>
                            <dxc:AxisY2D.ConstantLines>
                                <dxc:ConstantLine Value="0.6" Brush="Green">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Upper Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                                <dxc:ConstantLine Value="-0.6" Brush="Red">
                                    <dxc:ConstantLine.Title>
                                        <dxc:ConstantLineTitle Content="Lower Limit" Visibility="Visible" />
                                    </dxc:ConstantLine.Title>
                                    <dxc:ConstantLine.LineStyle>
                                        <dxc:LineStyle Thickness="1" DashStyle="Dash" />
                                    </dxc:ConstantLine.LineStyle>
                                </dxc:ConstantLine>
                            </dxc:AxisY2D.ConstantLines>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D>
                </dxc:ChartControl.Diagram>
            </dxc:ChartControl>
        </Grid>
    </Window>
수정된 C# 코드
날짜 기본값을 08:00으로 설정 및 시간 선택 처리
날짜 변수에서 시간까지 설정하도록 DateTime의 기본 시간을 08:00으로 설정했습니다.
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private DateTime startDate;
        private DateTime endDate;
        private List<LineGroup> lineGroups;

        public MainWindow()
        {
            InitializeComponent();
            InitializeDates();
            LoadLineData();
        }

        private void InitializeDates()
        {
            // 기본 날짜를 오늘 날짜 08:00으로 설정
            startDate = DateTime.Now.Date.AddHours(8);
            endDate = DateTime.Now.Date.AddHours(8);
            StartDatePicker.EditValue = startDate;
            EndDatePicker.EditValue = endDate;
        }

        private void LoadLineData()
        {
            lineGroups = new List<LineGroup>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = "SELECT LineGroup, LineName, Sort FROM LineTable ORDER BY Sort";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        var groupName = reader.GetString(0);
                        var lineName = reader.GetString(1);

                        var group = lineGroups.FirstOrDefault(g => g.GroupName == groupName);
                        if (group == null)
                        {
                            group = new LineGroup { GroupName = groupName, Lines = new List<LineInfo>() };
                            lineGroups.Add(group);
                        }

                        group.Lines.Add(new LineInfo
                        {
                            LineName = lineName,
                            IsChecked = true
                        });
                    }
                }
            }

            LineTreeView.ItemsSource = lineGroups;
        }

        private void OnStartDateChanged(object sender, RoutedEventArgs e)
        {
            if (StartDatePicker.EditValue is DateTime selectedDate)
            {
                startDate = selectedDate;
                Console.WriteLine($"시작 날짜 변경: {startDate}");
            }
        }

        private void OnEndDateChanged(object sender, RoutedEventArgs e)
        {
            if (EndDatePicker.EditValue is DateTime selectedDate)
            {
                endDate = selectedDate;
                Console.WriteLine($"종료 날짜 변경: {endDate}");
            }
        }

        private void SearchButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedLines = lineGroups
                .SelectMany(g => g.Lines)
                .Where(line => line.IsChecked)
                .Select(line => line.LineName)
                .ToList();

            if (!selectedLines.Any())
            {
                MessageBox.Show("라인을 선택해주세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            LoadChartData(selectedLines, startDate, endDate);
        }

        private void LoadChartData(List<string> selectedLines, DateTime startDate, DateTime endDate)
        {
            Console.WriteLine($"조회: 라인={string.Join(",", selectedLines)}, 날짜={startDate} ~ {endDate}");
        }
    }

    public class LineGroup
    {
        public string GroupName { get; set; }
        public List<LineInfo> Lines { get; set; }
        public bool IsChecked
        {
            get => Lines.All(line => line.IsChecked);
            set
            {
                foreach (var line in Lines)
                {
                    line.IsChecked = value;
                }
            }
        }
    }

    public class LineInfo
    {
        public string LineName { get; set; }
        public bool IsChecked { get; set; }
    }
}
주요 변경 사항
날짜와 시간 설정:

날짜 선택 컨트롤에 시간을 포함하도록 설정(EditValue와 DisplayFormat="g" 사용).
기본값은 오늘 날짜의 08:00으로 설정.
TreeView 항상 펼침:

TreeView의 그룹 노드(LineGroup)를 접지 않고 항상 펼쳐진 상태로 유지(IsExpanded="True").
이벤트 연동:

날짜 변경 시 이벤트(OnStartDateChanged, OnEndDateChanged)를 통해 변경된 날짜 값을 startDate와 endDate 변수에 업데이트.
라인 데이터 로드: