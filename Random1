Express의 GridControl과 SpreadsheetControl을 사용하여 데이터를 엑셀로 내보내는 코드 예제를 제공합니다. 이 예제에서는 SpreadsheetControl을 통해 Excel의 상위 셀에 값을 추가하고, 그 아래에 GridControl의 내용을 합쳐서 내보냅니다.

코드 예제:
XAML (MainWindow.xaml)

xaml
Copy code
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:WpfApp"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxsps="http://schemas.devexpress.com/winfx/2008/xaml/spreadsheet"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <dxg:GridControl x:Name="gridControl" Grid.Row="0">
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="ID" Header="ID"/>
                <dxg:GridColumn FieldName="Name" Header="Name"/>
                <dxg:GridColumn FieldName="Country" Header="Country"/>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
        <Button Grid.Row="1" Content="Export to Excel" Click="ExportToExcel_Click"/>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)

csharp
Copy code
using DevExpress.Spreadsheet;
using DevExpress.Spreadsheet.Export;
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Data;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // Sample data for GridControl
            gridControl.ItemsSource = new List<Record>
            {
                new Record { ID = 1, Name = "John Doe", Country = "USA" },
                new Record { ID = 2, Name = "Jane Smith", Country = "UK" },
                new Record { ID = 3, Name = "Pierre Dupont", Country = "France" }
            };
        }

        private void ExportToExcel_Click(object sender, RoutedEventArgs e)
        {
            // Create a new spreadsheet document
            Workbook workbook = new Workbook();
            Worksheet worksheet = workbook.Worksheets[0];

            // Add a title row in the first cells
            worksheet.Cells["A1"].Value = "Custom Title";
            worksheet.Cells["A2"].Value = "Report Date: " + DateTime.Now.ToShortDateString();
            worksheet.Cells["A3"].Value = "Generated by: User";
            worksheet.Cells["A4"].Value = "";

            // Export GridControl data to DataTable
            DataTable gridData = ((TableView)gridControl.View).CreateExportTable();
            
            // Export GridControl data to Excel starting from row 5
            worksheet.Import(gridData, false, 4, 0);

            // Adjust column width to fit content
            worksheet.Columns.AutoFit(0, gridData.Columns.Count - 1);

            // Save the spreadsheet to a file
            string filePath = "ExportedGridData.xlsx";
            workbook.SaveDocument(filePath, DocumentFormat.OpenXml);

            MessageBox.Show($"Exported to {filePath}", "Export Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        // Sample record class for demonstration
        public class Record
        {
            public int ID { get; set; }
            public string Name { get; set; }
            public string Country { get; set; }
        }
    }
}
주요 포인트:
SpreadsheetControl과 GridControl 사용:
Workbook 및 Worksheet 객체를 사용하여 SpreadsheetControl에서 데이터를 조작합니다.
GridControl의 데이터를 DataTable로 내보낸 후, worksheet.Import로 엑셀 파일에 추가합니다.
타이틀 등 추가:
worksheet.Cells를 통해 엑셀의 셀에 원하는 내용을 추가하고, 그 아래에 GridControl 데이터를 넣습니다.
열 자동 맞춤 설정:
worksheet.Columns.AutoFit을 사용하여 열 너비를 자동으로 조정합니다.
필요한 패키지:
DevExpress WPF Controls (DevExpress.Xpf.Grid)
DevExpress Spreadsheet Controls (DevExpress.Spreadsheet)
필요한 NuGet 패키지가 없을 경우 DevExpress 설치 또는 NuGet 패키지 관리자에