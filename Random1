
WakeLock을 사용하면서 동시에 현재 Activity의 Window에 플래그를 설정하여 화면이 꺼졌을 때 강제로 켜지도록 합니다.

kotlin
코드 복사
import android.view.WindowManager
import android.os.PowerManager

private fun wakeUpScreen() {
    val powerManager = getSystemService(Context.POWER_SERVICE) as PowerManager
    val isScreenOn = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
        powerManager.isInteractive
    } else {
        @Suppress("DEPRECATION")
        powerManager.isScreenOn
    }

    if (!isScreenOn) {
        val wakeLock = powerManager.newWakeLock(
            PowerManager.SCREEN_BRIGHT_WAKE_LOCK or PowerManager.ACQUIRE_CAUSES_WAKEUP,
            "RouterACRAlarm::WakeLockTag"
        )
        wakeLock.acquire(3000) // 3초 동안 화면을 켜짐 상태로 유지

        // 현재 Activity의 Window에 플래그 설정
        window.addFlags(
            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON or
            WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON or
            WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
        )
    }
}
설명
PowerManager.SCREEN_BRIGHT_WAKE_LOCK:

이 플래그는 화면을 켜는 데 사용되며, ACQUIRE_CAUSES_WAKEUP과 함께 화면이 꺼진 상태에서 깨울 수 있습니다.
WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON:

이 플래그는 화면을 자동으로 켤 수 있도록 합니다. Activity의 Window에 추가하여 화면이 꺼진 상태에서도 깨울 수 있습니다.
WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD:

잠금 화면이 활성화된 경우에도 화면이 켜지도록 합니다. 이 플래그를 사용하면 잠금 화면이 해제된 상태로 알림을 표시할 수 있습니다.
WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON:

이 플래그는 화면이 자동으로 꺼지지 않도록 유지합니다.
방법 2: PARTIAL_WAKE_LOCK 사용
FULL_WAKE_LOCK과 같은 방식은 최신 Android 버전에서 제대로 동작하지 않을 수 있습니다. 이 경우, PARTIAL_WAKE_LOCK과 Window 플래그를 조합하여 화면을 켜는 방식을 사용할 수 있습니다.

추가 주의 사항
AndroidManifest.xml 권한 추가:
WAKE_LOCK 권한을 반드시 추가해야 합니다.
xml
코드 복사
<uses-permission android:name="android.permission.WAKE_LOCK"/>