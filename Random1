, 알겠습니다. 솔루션 이름과 서비스 이름을 요청하신 대로 **TimestampNPM**과 **TimestampNPMUpdaterService**로 변경하여, 프로젝트 생성부터 최종 실행까지 필요한 모든 코드와 설정을 단 하나의 누락도 없이 다시 제공해 드리겠습니다.

아래 순서대로만 따라 하시면 됩니다.

## 1단계: 프로젝트 생성 (새 이름 적용)
Visual Studio를 열고 **'새 프로젝트 만들기'**를 선택합니다.

**'빈 솔루션'**을 찾아 선택하고, 솔루션 이름을 **TimestampNPM**으로 지정하여 만듭니다.

만들어진 빈 솔루션의 솔루션 탐색기에서 솔루션 마우스 오른쪽 클릭 -> 추가 -> 새 프로젝트를 선택합니다.

**'Windows 서비스(.NET Framework)'**를 추가합니다.

프로젝트 이름: TimestampNPMUpdaterService

다시 솔루션 마우스 오른쪽 클릭 -> 추가 -> 새 프로젝트를 선택합니다.

**'WPF 앱(.NET Framework)'**을 추가합니다.

프로젝트 이름: TimestampNPMViewer (WPF 앱 이름도 통일성 있게 변경)

## 2단계: NuGet 패키지 설치
**'도구' -> 'NuGet 패키지 관리자' -> '패키지 관리자 콘솔'**을 엽니다.

서비스 프로젝트에 아래 5개 명령어를 실행합니다.

PowerShell

Install-Package Microsoft.AspNet.SignalR.Core -ProjectName TimestampNPMUpdaterService
Install-Package Microsoft.AspNet.SignalR.SelfHost -ProjectName TimestampNPMUpdaterService
Install-Package Microsoft.Owin.Host.HttpListener -ProjectName TimestampNPMUpdaterService
Install-Package Microsoft.Owin.Hosting -ProjectName TimestampNPMUpdaterService
Install-Package Owin -ProjectName TimestampNPMUpdaterService
WPF 프로젝트에 아래 1개 명령어를 실행합니다.

PowerShell

Install-Package Microsoft.AspNet.SignalR.Client -ProjectName TimestampNPMViewer
## 3단계: 데이터베이스 스크립트 (제약 조건 없음)
**SQL Server Management Studio (SSMS)**에서 아래 쿼리를 한 번에 실행하세요.

SQL

-- ======================================================================
-- 1. 기존 테이블이 있다면 깨끗하게 삭제
-- ======================================================================
IF OBJECT_ID('MachineData', 'U') IS NOT NULL DROP TABLE MachineData;
GO
IF OBJECT_ID('LineTable', 'U') IS NOT NULL DROP TABLE LineTable;
GO
IF OBJECT_ID('SystemConfiguration', 'U') IS NOT NULL DROP TABLE SystemConfiguration;
GO
PRINT '1. 기존 테이블 삭제 완료.';

-- ======================================================================
-- 2. 제약 조건 없이 테이블 새로 생성
-- ======================================================================
CREATE TABLE SystemConfiguration (
    CollectorIP VARCHAR(50) PRIMARY KEY,
    LineName VARCHAR(100) NOT NULL,
    TargetIP VARCHAR(50) NOT NULL
);
GO
PRINT '2-1. SystemConfiguration 테이블 생성 완료.';

CREATE TABLE LineTable (
    IPAddress VARCHAR(50) PRIMARY KEY,
    LineName VARCHAR(100) NOT NULL
);
GO
PRINT '2-2. LineTable 테이블 생성 완료.';

CREATE TABLE MachineData (
    LineName VARCHAR(100) PRIMARY KEY,
    mc1 BIGINT NULL, mc2 BIGINT NULL, mc3 BIGINT NULL, mc4 BIGINT NULL, mc5 BIGINT NULL,
    mc6 BIGINT NULL, mc7 BIGINT NULL, mc8 BIGINT NULL, mc9 BIGINT NULL, mc10 BIGINT NULL,
    mc11 BIGINT NULL, mc12 BIGINT NULL, mc13 BIGINT NULL, mc14 BIGINT NULL, mc15 BIGINT NULL,
    LastUpdated DATETIME DEFAULT GETDATE()
);
GO
PRINT '2-3. MachineData 테이블 생성 완료.';

-- ======================================================================
-- 3. 테스트용 샘플 데이터 입력 (IP와 이름을 자유롭게 편집하세요)
-- ======================================================================
INSERT INTO SystemConfiguration (CollectorIP, LineName, TargetIP)
VALUES ('192.168.1.10', 'LINE_A', '192.168.1.200');
GO
INSERT INTO LineTable (IPAddress, LineName)
VALUES ('192.168.1.10', 'LINE_A');
GO
INSERT INTO MachineData (LineName)
VALUES ('LINE_A');
GO
PRINT '3. 샘플 데이터 입력 완료.';
PRINT '모든 DB 설정이 성공적으로 완료되었습니다.';
## 4단계: Windows 서비스 전체 코드 (TimestampNPMUpdaterService)
App.config
XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <connectionStrings>
        <add name="DBContext" 
             connectionString="Server=YOUR_DB_SERVER;Database=YOUR_DB_NAME;User Id=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;" 
             providerName="System.Data.SqlClient"/>
    </connectionStrings>
    <appSettings>
        <add key="SignalRUrl" value="http://localhost:8313"/>
    </appSettings>
</configuration>
Startup.cs (새 클래스 파일)
C#

using Microsoft.Owin.Cors;
using Owin;

namespace TimestampNPMUpdaterService
{
    public class Startup
    {
        public void Configuration(IAppBuilder app)
        {
            app.UseCors(CorsOptions.AllowAll);
            app.MapSignalR();
        }
    }
}
MachineDataHub.cs (새 클래스 파일)
C#

using Microsoft.AspNet.SignalR;
using System.Threading.Tasks;

namespace TimestampNPMUpdaterService
{
    public class MachineDataHub : Hub
    {
        public Task Subscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Add(Context.ConnectionId, groupName);
        }

        public Task Unsubscribe(string lineName, string machineName)
        {
            string groupName = $"{lineName}-{machineName}";
            return Groups.Remove(Context.ConnectionId, groupName);
        }
    }
}
Service1.cs -> TimestampService.cs로 이름 변경 후 아래 코드로 전체 대체
C#

using Microsoft.AspNet.SignalR;
using Microsoft.Owin.Hosting;
using System;
using System.Configuration;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.ServiceProcess;
using System.Timers;

namespace TimestampNPMUpdaterService // 네임스페이스 변경
{
    public partial class TimestampService : ServiceBase
    {
        private System.Timers.Timer _timer;
        private string _myLineName;
        private string _targetSystemIp;
        private string _connectionString;
        private IDisposable _signalR;

        public TimestampService()
        {
            InitializeComponent();
            this.ServiceName = "TimestampNPMUpdaterService"; // 서비스 이름 변경
        }

        protected override void OnStart(string[] args)
        {
            try
            {
                _connectionString = ConfigurationManager.ConnectionStrings["DBContext"].ConnectionString;

                if (!GetMyConfiguration())
                {
                    this.Stop();
                    return;
                }
                
                string signalRUrl = ConfigurationManager.AppSettings["SignalRUrl"];
                _signalR = WebApp.Start<Startup>(url: signalRUrl);
                WriteLog($"SignalR host started at {signalRUrl}");

                EnsureMachineDataRowExists();
                WriteLog($"서비스가 '{_myLineName}' 라인 (대상: {_targetSystemIp}) 담당으로 시작됩니다.");

                _timer = new System.Timers.Timer(30 * 1000);
                _timer.Elapsed += OnTimerElapsed;
                _timer.AutoReset = true;
                _timer.Start();

                OnTimerElapsed(null, null);
            }
            catch (Exception ex)
            {
                WriteLog($"서비스 시작 중 심각한 오류 발생: {ex.Message}\n{ex.StackTrace}", true);
                throw;
            }
        }

        private bool GetMyConfiguration()
        {
            string localIp = GetLocalIPAddress();
            try
            {
                using (var connection = new SqlConnection(_connectionString))
                {
                    connection.Open();
                    string query = "SELECT LineName, TargetIP FROM SystemConfiguration WHERE CollectorIP = @CollectorIP";
                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@CollectorIP", localIp);
                        using (var reader = command.ExecuteReader())
                        {
                            if (reader.Read())
                            {
                                _myLineName = reader["LineName"].ToString();
                                _targetSystemIp = reader["TargetIP"].ToString();
                                WriteLog($"DB 설정 조회 성공: CollectorIP={localIp}, LineName={_myLineName}, TargetIP={_targetSystemIp}");
                                return true;
                            }
                            else
                            {
                                WriteLog($"DB의 SystemConfiguration 테이블에 이 PC의 IP({localIp})에 대한 설정이 없습니다.", true);
                                return false;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                WriteLog($"DB에서 설정을 가져오는 중 오류 발생: {ex.Message}", true);
                return false;
            }
        }
        
        // (이하 다른 모든 코드는 이전과 동일)
        #region Unchanged Code
        private void OnTimerElapsed(object sender, ElapsedEventArgs e) { for (int i = 1; i <= 15; i++) { string machineName = $"mc{i}"; long? timestamp = FindLatestTimestampForMachine(_targetSystemIp, i); UpdateDatabaseAndNotify(machineName, timestamp); } }
        protected override void OnStop() { _timer?.Stop(); _timer?.Dispose(); _signalR?.Dispose(); WriteLog("서비스가 중지되었습니다."); }
        private void UpdateDatabaseAndNotify(string machineName, long? timestamp) { try { using (var connection = new SqlConnection(_connectionString)) { string query = $"UPDATE MachineData SET {machineName} = @Timestamp, LastUpdated = GETDATE() WHERE LineName = @LineName"; using (var command = new SqlCommand(query, connection)) { command.Parameters.AddWithValue("@Timestamp", (object)timestamp ?? DBNull.Value); command.Parameters.AddWithValue("@LineName", _myLineName); connection.Open(); command.ExecuteNonQuery(); } } var hubContext = GlobalHost.ConnectionManager.GetHubContext<MachineDataHub>(); string groupName = $"{_myLineName}-{machineName}"; hubContext.Clients.Group(groupName).ReceiveUpdate(machineName, timestamp); } catch (Exception ex) { WriteLog($"DB 업데이트 및 알림 오류 ({machineName}): {ex.Message}", true); } }
        private void WriteLog(string message, bool isError = false) { EventLog.WriteEntry(this.ServiceName, message, isError ? EventLogEntryType.Error : EventLogEntryType.Information); }
        private long? FindLatestTimestampForMachine(string targetIp, int machineNumber) { try { var machinePath = new DirectoryInfo($"\\\\{targetIp}\\othersystem\\proviewer\\data\\machine{machineNumber}"); if (!machinePath.Exists) return null; var latestLaneDir = machinePath.EnumerateDirectories("Lane*", SearchOption.AllDirectories).OrderByDescending(d => d.LastWriteTimeUtc).FirstOrDefault(); return latestLaneDir != null ? (long?)new DateTimeOffset(latestLaneDir.LastWriteTimeUtc).ToUnixTimeSeconds() : null; } catch { return null; } }
        private void EnsureMachineDataRowExists() { using (var conn = new SqlConnection(_connectionString)) { conn.Open(); var cmd = new SqlCommand("IF NOT EXISTS (SELECT 1 FROM MachineData WHERE LineName = @LineName) INSERT INTO MachineData (LineName) VALUES (@LineName)", conn); cmd.Parameters.AddWithValue("@LineName", _myLineName); cmd.ExecuteNonQuery(); } }
        private string GetLocalIPAddress() { var host = Dns.GetHostEntry(Dns.GetHostName()); foreach (var ip in host.AddressList) { if (ip.AddressFamily == AddressFamily.InterNetwork) return ip.ToString(); } return "127.0.0.1"; }
        #endregion
    }
}
ProjectInstaller.cs (설치 관리자)
TimestampService.cs를 디자인 보기로 열고, **마우스 오른쪽 클릭 -> '설치 관리자 추가'**를 선택합니다.

생성된 ProjectInstaller.cs 파일의 코드를 아래 내용으로 전체 교체합니다.

C#

using System.ComponentModel;
using System.Configuration.Install;
using System.ServiceProcess;

namespace TimestampNPMUpdaterService // 네임스페이스 변경
{
    [RunInstaller(true)]
    public partial class ProjectInstaller : System.Configuration.Install.Installer
    {
        private ServiceProcessInstaller serviceProcessInstaller1;
        private ServiceInstaller serviceInstaller1;

        public ProjectInstaller()
        {
            InitializeComponent();

            this.serviceProcessInstaller1 = new ServiceProcessInstaller();
            this.serviceInstaller1 = new ServiceInstaller();
            
            this.serviceProcessInstaller1.Account = ServiceAccount.LocalSystem;
            
            this.serviceInstaller1.Description = "NPM Timestamp Updater and Notifier";
            this.serviceInstaller1.DisplayName = "Timestamp NPM Updater Service"; // 표시 이름 변경
            this.serviceInstaller1.ServiceName = "TimestampNPMUpdaterService";   // 서비스 이름 변경
            this.serviceInstaller1.StartType = ServiceStartMode.Automatic;
            
            this.Installers.AddRange(new System.Configuration.Install.Installer[] {
                this.serviceProcessInstaller1,
                this.serviceInstaller1
            });
        }
    }
}
## 5단계: WPF 앱 전체 코드 (TimestampNPMViewer)
App.config
XML

<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.7.2" />
    </startup>
    <appSettings>
        <add key="SignalRUrl" value="http://localhost:8313"/>
    </appSettings>
</configuration>
MachineInfo.cs (새 클래스 파일)
C#

using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace TimestampNPMViewer // 네임스페이스 변경
{
    public class MachineInfo : INotifyPropertyChanged
    {
        public string MachineName { get; set; }
        private bool _isSubscribed;
        public bool IsSubscribed { get => _isSubscribed; set { _isSubscribed = value; OnPropertyChanged(); } }
        private string _lastUpdated;
        public string LastUpdated { get => _lastUpdated; set { _lastUpdated = value; OnPropertyChanged(); } }
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
MainViewModel.cs (새 클래스 파일)
C#

using Microsoft.AspNet.SignalR.Client;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Configuration;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;

namespace TimestampNPMViewer // 네임스페이스 변경
{
    public class MainViewModel : INotifyPropertyChanged, IDisposable
    {
        private HubConnection _hubConnection;
        private IHubProxy _hubProxy;
        public ObservableCollection<MachineInfo> Machines { get; set; }
        private string _lineNameToWatch = "LINE_A";
        private string _connectionStatus = "Connecting...";
        public string ConnectionStatus { get => _connectionStatus; set { _connectionStatus = value; OnPropertyChanged(); } }

        public MainViewModel()
        {
            Machines = new ObservableCollection<MachineInfo>();
            for (int i = 1; i <= 15; i++)
            {
                var machineInfo = new MachineInfo { MachineName = $"mc{i}", LastUpdated = "N/A" };
                machineInfo.PropertyChanged += OnMachineSubscriptionChanged;
                Machines.Add(machineInfo);
            }
            ConnectToServerAsync();
        }

        private async void ConnectToServerAsync()
        {
            string url = ConfigurationManager.AppSettings["SignalRUrl"];
            _hubConnection = new HubConnection(url);
            _hubProxy = _hubConnection.CreateHubProxy("MachineDataHub");

            _hubProxy.On<string, long?>("ReceiveUpdate", (machineName, timestamp) =>
            {
                Application.Current.Dispatcher.Invoke(() =>
                {
                    var targetMachine = Machines.FirstOrDefault(m => m.MachineName == machineName);
                    if (targetMachine != null)
                    {
                        targetMachine.LastUpdated = timestamp.HasValue ?
                            DateTimeOffset.FromUnixTimeSeconds(timestamp.Value).LocalDateTime.ToString("HH:mm:ss")
                            : "No Data";
                    }
                });
            });

            try
            {
                await _hubConnection.Start();
                ConnectionStatus = "Connected";
            }
            catch (Exception) { ConnectionStatus = "Connection Failed"; }
        }

        private async void OnMachineSubscriptionChanged(object sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(MachineInfo.IsSubscribed) && _hubConnection.State == ConnectionState.Connected)
            {
                var machine = sender as MachineInfo;
                if (machine.IsSubscribed) { await _hubProxy.Invoke("Subscribe", _lineNameToWatch, machine.MachineName); }
                else { await _hubProxy.Invoke("Unsubscribe", _lineNameToWatch, machine.MachineName); }
            }
        }

        public void Dispose() => _hubConnection?.Dispose();
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string name = null) => PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
MainWindow.xaml
XML

<Window x:Class="TimestampNPMViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:TimestampNPMViewer"
        Title="Timestamp NPM Viewer" Height="550" Width="400">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <StackPanel Orientation="Horizontal" Margin="0,0,0,10">
            <TextBlock Text="Line to Watch: " VerticalAlignment="Center"/>
            <TextBox Text="LINE_A" Width="150" VerticalAlignment="Center" IsReadOnly="True"/>
        </StackPanel>
        <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding Machines}">
                <ItemsControl.ItemsPanel><ItemsPanelTemplate><UniformGrid Columns="1"/></ItemsPanelTemplate></ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <Border BorderBrush="LightGray" BorderThickness="1" Padding="8" Margin="0,2">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/><ColumnDefinition Width="*"/><ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <CheckBox IsChecked="{Binding IsSubscribed, Mode=TwoWay}" VerticalAlignment="Center"/>
                                <TextBlock Grid.Column="1" Text="{Binding MachineName}" FontWeight="Bold" Margin="10,0" VerticalAlignment="Center" FontSize="14"/>
                                <TextBlock Grid.Column="2" Text="{Binding LastUpdated}" Foreground="DarkSlateBlue" VerticalAlignment="Center" FontSize="14" MinWidth="80" TextAlignment="Right"/>
                            </Grid>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
        <StatusBar Grid.Row="2" Margin="0,5,0,0">
            <StatusBarItem><TextBlock Text="{Binding ConnectionStatus}"/></StatusBarItem>
        </StatusBar>
    </Grid>
</Window>
MainWindow.xaml.cs
C#

using System.Windows;

namespace TimestampNPMViewer // 네임스페이스 변경
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.Closing += (s, e) => (this.DataContext as MainViewModel)?.Dispose();
        }
    }
}
## 6단계: 빌드 및 최종 실행 (새 이름 적용)
솔루션 전체를 빌드합니다 (F6 또는 Ctrl+Shift+B).

관리자 권한으로 명령 프롬프트(CMD)를 실행하고 아래 명령어를 입력하여 서비스 포트 사용 권한을 줍니다.

DOS

netsh http add urlacl url=http://*:8313/ user="NT AUTHORITY\SYSTEM"
Visual Studio 개발자 명령 프롬프트를 관리자 권한으로 실행합니다.

서비스 프로젝트의 빌드 경로로 이동합니다.

DOS

cd C:\path\to\your\solution\TimestampNPM\TimestampNPMUpdaterService\bin\Debug
서비스를 설치하고 시작합니다. (새 서비스 이름으로 실행)

DOS

InstallUtil.exe TimestampNPMUpdaterService.exe