알겠습니다. 정말 답답하시겠네요. 오류가 발생하는 상황을 자세히 설명해주셔서 감사합니다.

"빨간색"으로 표시되는 것은 안드로이드 스튜디오가 해당 코드(라이브러리)를 찾지 못했다는 의미입니다. Gradle 동기화를 하셨음에도 이런 문제가 발생하는 가장 큰 이유는 라이브러리를 다운로드할 인터넷 주소(저장소)가 설정되지 않았기 때문입니다.

특히 com.github... 라이브러리는 일반 저장소에 없어서 별도의 주소를 꼭 추가해야 합니다.

아래 순서대로 정확하게 따라 해 보세요. 거의 모든 경우에 이 방법으로 해결됩니다.

## 해결 단계 1: 라이브러리 저장소 주소 추가 (settings.gradle.kts)
이게 가장 중요한 부분입니다. 프로젝트 최상위 폴더에 있는 settings.gradle.kts 파일을 열고 아래 내용으로 전체를 덮어쓰세요.

경로: [프로젝트 폴더]/settings.gradle.kts

Kotlin

pluginManagement {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        // PDF 뷰어 라이브러리를 다운로드하기 위한 주소입니다. (필수)
        maven { url = uri("https://jitpack.io") }
    }
}
rootProject.name = "ReelListViewer"
include(":app")
## 해결 단계 2: Gradle 다시 동기화 (매우 중요)
settings.gradle.kts 파일을 수정했으니, 이제 프로젝트에 변경 사항을 적용해야 합니다.

안드로이드 스튜디오 메뉴에서 [File] -> [Sync Project with Gradle Files] 를 클릭합니다.

화면 하단에 진행률 표시줄이 나타나며 동기화가 진행됩니다. 인터넷 환경에 따라 몇 분 정도 걸릴 수 있습니다. 완전히 끝날 때까지 기다려주세요.

이 과정이 성공적으로 끝나면, com.github, NtlmPasswordAuthenticator, SmbFile 등에 있던 빨간색 밑줄이 모두 사라져야 합니다.

## 해결 단계 3: 코드 최종 확인
만약 그래도 문제가 남아있다면, 아래 최종 코드로 각 파일을 다시 한번 덮어쓰기 해주세요. 위 Gradle 설정이 완료되었다면 이제는 오류가 없어야 합니다.

app/build.gradle.kts
경로: [프로젝트 폴더]/app/build.gradle.kts

Kotlin

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "com.sec.reellistviewer"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.sec.reellistviewer"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")

    // PDF 뷰어 라이브러리
    implementation("com.github.barteksc:android-pdf-viewer:3.2.0-beta.1")
    // 네트워크 공유 폴더(SMB) 접근을 위한 라이브러리
    implementation("org.smbj:jcifs-ng:2.1.10")
    // 코틀린 코루틴 (비동기 네트워크 작업을 위함)
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.7.0")
}
MainActivity.kt
경로: [프로젝트 폴더]/app/src/main/java/com/sec/reellistviewer/MainActivity.kt

Kotlin

package com.sec.reellistviewer

import android.os.Bundle
import android.util.Log
import android.view.View
import android.widget.Button
import android.widget.LinearLayout
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import com.github.barteksc.pdfviewer.util.FitPolicy
import com.sec.reellistviewer.databinding.ActivityMainBinding
import jcifs.smb.NtlmPasswordAuthenticator
import jcifs.smb.SmbFile
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream

class MainActivity : AppCompatActivity() {

    private lateinit var binding: ActivityMainBinding

    // --- 공유 폴더 설정 (중요: 이 부분을 실제 환경에 맞게 수정하세요) ---
    private val smbDomain = "" // 윈도우 도메인 (없으면 비워두세요)
    private val smbUsername = "Your_Username" // 공유 폴더 접속 아이디
    private val smbPassword = "Your_Password" // 공유 폴더 접속 비밀번호
    private val smbIpAddress = "192.168.0.100" // 공유 폴더 서버의 IP 주소
    private val sharedFolderName = "SharedDocs" // 공유 폴더 이름
    private val pdfFileName = "document.pdf" // 열고자 하는 PDF 파일 이름
    // --- 설정 끝 ---

    private val totalPageCount = 16

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        createPageNavigationButtons()
        loadPdfFromSharedFolder()
    }

    private fun loadPdfFromSharedFolder() {
        binding.progressBar.visibility = View.VISIBLE
        binding.pdfView.visibility = View.GONE

        lifecycleScope.launch {
            val localFile = downloadSmbFile()
            if (localFile != null) {
                displayPdfFromFile(localFile)
            } else {
                binding.progressBar.visibility = View.GONE
                Toast.makeText(this@MainActivity, "PDF 파일을 불러오는데 실패했습니다.", Toast.LENGTH_LONG).show()
            }
        }
    }

    private suspend fun downloadSmbFile(): File? = withContext(Dispatchers.IO) {
        try {
            val smbUrl = "smb://$smbIpAddress/$sharedFolderName/$pdfFileName"
            val auth = NtlmPasswordAuthenticator(smbDomain, smbUsername, smbPassword)
            val smbFile = SmbFile(smbUrl, auth)
            val localFile = File(cacheDir, pdfFileName)
            
            smbFile.inputStream.use { input ->
                FileOutputStream(localFile).use { output ->
                    input.copyTo(output)
                }
            }
            Log.d("SmbTest", "파일 다운로드 성공: ${localFile.path}")
            return@withContext localFile

        } catch (e: Exception) {
            Log.e("SmbTest", "SMB 파일 접근 오류", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(applicationContext, "오류: ${e.message}", Toast.LENGTH_LONG).show()
            }
            return@withContext null
        }
    }

    private fun displayPdfFromFile(file: File) {
        binding.progressBar.visibility = View.GONE
        binding.pdfView.visibility = View.VISIBLE

        binding.pdfView.fromFile(file)
            .enableSwipe(true)
            .swipeHorizontal(false)
            .enableDoubletap(true)
            .defaultPage(0)
            .pageFitPolicy(FitPolicy.WIDTH)
            .load()
    }

    private fun createPageNavigationButtons() {
        for (i in 1..totalPageCount) {
            val pageButton = Button(this).apply {
                text = i.toString()
                layoutParams = LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.WRAP_CONTENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                )
                setOnClickListener {
                    binding.pdfView.jumpTo(i - 1, true)
                }
            }
            binding.pageButtonContainer.addView(pageButton)
        }
    }
}





동영상
