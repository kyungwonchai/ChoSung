죄송합니다. 말씀하신 요구사항을 좀 더 정확히 반영하여, PO_NO 값에 따라 번갈아가며 행의 배경색을 변경하고, 시퀀스 컬럼만 시퀀스 값에 따라 색상이 변경되도록 코드를 수정하겠습니다.

목표:
PO_NO 값에 따라 행의 배경색을 번갈아 적용합니다.
시퀀스 값에 따라 특정 컬럼만 색상이 적용됩니다.
배경색 변경은 XAML이 아닌 코드 비하인드에서 처리하여 좀 더 유연하게 구현합니다.
XAML 파일 (시퀀스 컬럼 색상 적용)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <DataGrid Name="TaskDataGrid" ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" CanUserSortColumns="False" Margin="10">
            <DataGrid.Columns>
                <!-- PO_NO 컬럼 -->
                <DataGridTextColumn Header="PO NO" Binding="{Binding PO_NO}" Width="*" />
                
                <!-- SequenceFlag 컬럼 (컬럼 색상만 변경) -->
                <DataGridTextColumn Header="Sequence">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock">
                            <Style.Triggers>
                                <!-- 시퀀스 플래그에 따른 배경색 변경 -->
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="1">
                                    <Setter Property="Background" Value="Yellow" /> <!-- 노란색 -->
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="2">
                                    <Setter Property="Background" Value="SkyBlue" /> <!-- 하늘색 -->
                                </DataTrigger>
                                <DataTrigger Binding="{Binding SequenceFlag}" Value="3">
                                    <Setter Property="Background" Value="LightGreen" /> <!-- 녹색 -->
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.Binding>
                        <Binding Path="SequenceFlag" />
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                
                <!-- Function Status 컬럼 (시퀀스에 따른 도형 색상 표시) -->
                <DataGridTemplateColumn Header="Function Status">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <!-- 함수 상태를 표시하는 ItemsControl -->
                            <ItemsControl ItemsSource="{Binding FunctionStatusList}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel Orientation="Horizontal">
                                            <!-- 함수 상태를 표시하는 도형 -->
                                            <Ellipse Width="30" Height="30" Fill="{Binding StatusColor}" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</Window>
코드 비하인드 (PO_NO에 따른 행 배경색 변경)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<TaskModel> TaskList { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            TaskList = new ObservableCollection<TaskModel>
            {
                new TaskModel { PO_NO = "12345", SequenceFlag = 1 },
                new TaskModel { PO_NO = "12345", SequenceFlag = 2 },
                new TaskModel { PO_NO = "12346", SequenceFlag = 1 },
                new TaskModel { PO_NO = "12346", SequenceFlag = 3 },
            };

            TaskDataGrid.Loaded += TaskDataGrid_Loaded;
            DataContext = this;
        }

        private void TaskDataGrid_Loaded(object sender, RoutedEventArgs e)
        {
            // PO_NO에 따른 배경색을 번갈아가며 설정하는 로직
            string previousPO = null;
            bool toggle = false;

            foreach (var item in TaskDataGrid.Items)
            {
                var row = (DataGridRow)TaskDataGrid.ItemContainerGenerator.ContainerFromItem(item);
                if (row != null)
                {
                    var task = item as TaskModel;
                    if (task.PO_NO != previousPO)
                    {
                        toggle = !toggle; // PO_NO가 달라질 때마다 토글
                    }

                    // 번갈아가며 두 가지 색상 적용 (빨간색과 흰색)
                    row.Background = toggle ? new SolidColorBrush(Color.FromRgb(255, 255, 0)) : new SolidColorBrush(Colors.White);
                    previousPO = task.PO_NO;
                }
            }
        }
    }

    public class TaskModel
    {
        public string PO_NO { get; set; }
        public int SequenceFlag { get; set; }
        public ObservableCollection<Brush> FunctionStatusList { get; set; } = new ObservableCollection<Brush>();
    }
}
주요 사항:
XAML에서 시퀀스 컬럼 색상 적용:

SequenceFlag 값에 따라 해당 컬럼에만 배경색이 적용됩니다.
시퀀스 값이 1이면 노란색, 2이면 하늘색, 3이면 녹색으로 설정됩니다.
코드 비하인드에서 PO_NO 값에 따른 배경색 변경:

PO_NO 값이 바뀔 때마다 배경색을 번갈아가며 설정합니다.
같은 PO_NO 값은 동일한 배경색을 적용하며, PO_NO 값이 달라질 때마다 배경색을 토글합니다.
추가 설명:
PO_NO 값에 따라 행의 배경색을 **빨간색(#FFFF00)**과 기본색(흰색)으로 번갈아가며 적용했습니다.
시퀀스 컬럼만 배경색이 변경되며, 나머지 부분은 PO_NO 값에 따라 색상이 달라집니다.
이렇게 하면 PO_NO 값에 따라 행 배경색이 적용되고, 시퀀스 컬럼만 해당 색상을 사용해 변경할 수 있습니다