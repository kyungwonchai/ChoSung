press WPF GridControl의 행에 있는 "복사" 버튼을 클릭하면 해당 행의 데이터를 복사하여, 다른 곳에 "붙여넣기" 버튼을 누르면 MS SQL Server 2014 데이터베이스에 새로운 행으로 추가하는 기능을 구현하려면 다음 단계를 따라야 합니다:

복사 버튼 이벤트 핸들러 작성: 행의 모든 데이터를 캡처하여 임시 저장소(예: 클래스 변수 또는 Clipboard)에 저장합니다.
붙여넣기 버튼 이벤트 핸들러 작성: 저장된 데이터를 MS SQL Server 2014 데이터베이스에 새로운 행으로 추가합니다.
1. 복사 버튼 이벤트 핸들러
각 행의 "복사" 버튼에 대한 Click 이벤트를 추가합니다. 예를 들어, CopyRowData 메서드를 만들어 해당 행의 데이터를 캡처합니다.

csharp
Copy code
private YourRowType _copiedRowData; // 임시 저장소로 사용할 필드

private void CopyRowData(object sender, RoutedEventArgs e)
{
    var button = sender as Button;
    if (button == null) return;

    var rowHandle = gridControl.View.GetRowHandleByTreeElement(button);
    _copiedRowData = gridControl.GetRow(rowHandle) as YourRowType;

    if (_copiedRowData != null)
    {
        // 필요한 경우 Clipboard에 데이터 저장
        // Clipboard.SetText(_copiedRowData.ToString());
    }
}
2. 붙여넣기 버튼 이벤트 핸들러
"붙여넣기" 버튼의 이벤트 핸들러에서는 _copiedRowData에 저장된 데이터를 사용하여 MS SQL Server 2014 데이터베이스에 새 행을 추가합니다. ADO.NET 또는 Entity Framework를 사용할 수 있습니다. 예를 들어, ADO.NET을 사용하는 경우:

csharp
Copy code
private void PasteRowData(object sender, RoutedEventArgs e)
{
    if (_copiedRowData == null) return;

    using (SqlConnection conn = new SqlConnection("YourConnectionString"))
    {
        conn.Open();
        using (SqlCommand cmd = conn.CreateCommand())
        {
            cmd.CommandText = "INSERT INTO YourTable (Column1, Column2, ...) VALUES (@Value1, @Value2, ...)";
            cmd.Parameters.AddWithValue("@Value1", _copiedRowData.Column1);
            cmd.Parameters.AddWithValue("@Value2", _copiedRowData.Column2);
            // 나머지 컬럼에 대한 매개변수 추가

            cmd.ExecuteNonQuery();
        }
    }

    // 필요한 경우 UI 업데이트
}
여기서 YourRowType은 행 데이터를 나타내는 클래스이며, YourConnectionString과 YourTable은 각각 데이터베이스 연결 문자열과 테이블 이름입니다.

추가 고려 사항
보안: 사용자 입력을 직접 SQL 문에 삽입하지 말고, 항상 매개변수화된 쿼리를 사용하세요.
예외 처리: 데이터베이스 작업 중 발생할 수 있는 예외를 처리하세요.
데이터 무결성: 중복 데이터 삽입을 피하기 위한 로직을 고려하세요.
UI 반응성: 데이터베이스 작업을 비동기적으로 처리하여 UI가 멈추지 않도록 하세