using System;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace SocketServerApp
{
    public class SocketServer
    {
        private readonly Action<string> _onMessageReceived; // 메시지 수신 시 호출할 액션
        private readonly Action _onClientConnected; // 클라이언트 연결 시 호출될 액션
        private readonly Action _onClientDisconnected; // 클라이언트 연결 해제 시 호출될 액션
        private TcpListener _listener;
        private const int Port = 2400; // 서버 포트 번호
        private bool _isServerRunning = false; // 서버가 실행 중인지 여부

        public SocketServer(Action<string> onMessageReceived, Action onClientConnected, Action onClientDisconnected)
        {
            _onMessageReceived = onMessageReceived;
            _onClientConnected = onClientConnected;
            _onClientDisconnected = onClientDisconnected;
        }

        // 소켓 서버를 비동기적으로 시작하는 메서드
        public async Task StartServerAsync()
        {
            if (_isServerRunning) return; // 서버가 이미 실행 중이라면 다시 시작하지 않음

            _listener = new TcpListener(IPAddress.Any, Port); // 모든 IP에서 수신
            _listener.Start(); // 서버 시작
            _isServerRunning = true; // 서버 실행 중으로 표시
            Console.WriteLine("서버 시작됨.");

            while (_isServerRunning)
            {
                try
                {
                    // 클라이언트 연결 대기 (재시작 시 서버가 실행 중인 경우에만 연결 대기)
                    TcpClient client = await _listener.AcceptTcpClientAsync();
                    _onClientConnected?.Invoke(); // 클라이언트 연결 이벤트 발생
                    _ = Task.Run(() => HandleClientAsync(client)); // 비동기 클라이언트 처리
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"서버 수신 중 에러: {ex.Message}");
                    break;
                }
            }
        }

        // 서버를 중지하는 메서드
        public void StopServer()
        {
            if (!_isServerRunning) return; // 서버가 실행 중이지 않으면 종료하지 않음

            _isServerRunning = false; // 서버 중지 상태로 변경
            _listener?.Stop(); // TcpListener 중지
            Console.WriteLine("서버 중지됨.");
        }

        // 클라이언트로부터 메시지를 수신하고 응답을 보내는 메서드
        private async Task HandleClientAsync(TcpClient client)
        {
            NetworkStream stream = client.GetStream(); // 클라이언트와의 통신 스트림
            byte[] buffer = new byte[1024]; // 수신할 데이터를 담을 버퍼

            try
            {
                int bytesRead = await stream.ReadAsync(buffer, 0, buffer.Length); // 메시지 수신
                if (bytesRead > 0)
                {
                    string receivedMessage = Encoding.ASCII.GetString(buffer, 0, bytesRead).Trim('\x02', '\x03'); // STX, ETX 제거 후 메시지 변환
                    _onMessageReceived?.Invoke($"수신됨: {receivedMessage}"); // 메시지 수신 후 ViewModel로 전달

                    // 클라이언트로 응답 보내기
                    string responseMessage = "\x02OK\x03"; // 기본 응답은 OK
                    byte[] responseBytes = Encoding.ASCII.GetBytes(responseMessage); // 응답을 바이트 배열로 변환
                    await stream.WriteAsync(responseBytes, 0, responseBytes.Length); // 응답 전송
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"클라이언트 처리 중 에러: {ex.Message}");
            }
            finally
            {
                _onClientDisconnected?.Invoke(); // 클라이언트 연결 해제 이벤트 발생
                client.Close(); // 클라이언트 연결 종료
            }
        }
    }
}
