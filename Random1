는 WPF 애플리케이션을 작성하여 COM 포트를 설정하고, 스캐너와의 상호작용을 관리하는 간단한 예제입니다. 이 예제에서는 사용자가 COM 포트를 선택하고, 해당 포트에 데이터를 전송하거나 읽을 수 있는 기능을 제공합니다.

1. XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="ComPortScanner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM Port Scanner" Height="350" Width="525">
    <Grid>
        <ComboBox Name="ComPortComboBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="200" Margin="10,10,0,0"/>
        <Button Content="Refresh Ports" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="220,10,0,0" Click="RefreshPorts_Click"/>
        <Button Content="Open Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="330,10,0,0" Click="OpenPort_Click"/>
        <Button Content="Close Port" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,10,0,0" Click="ClosePort_Click"/>
        <TextBox Name="DataTextBox" HorizontalAlignment="Left" VerticalAlignment="Top" Width="420" Height="100" Margin="10,50,0,0"/>
        <Button Content="Send Data" HorizontalAlignment="Left" VerticalAlignment="Top" Width="100" Margin="440,50,0,0" Click="SendData_Click"/>
        <TextBlock Name="StatusTextBlock" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="10,160,0,0" Width="500" Height="50" Text="Status: Not Connected"/>
    </Grid>
</Window>
2. C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Linq;
using System.Windows;

namespace ComPortScanner
{
    public partial class MainWindow : Window
    {
        private SerialPort _serialPort;

        public MainWindow()
        {
            InitializeComponent();
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            ComPortComboBox.ItemsSource = SerialPort.GetPortNames();
            if (ComPortComboBox.Items.Count > 0)
            {
                ComPortComboBox.SelectedIndex = 0;
            }
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void OpenPort_Click(object sender, RoutedEventArgs e)
        {
            if (ComPortComboBox.SelectedItem == null)
            {
                MessageBox.Show("Please select a COM port.");
                return;
            }

            string selectedPort = ComPortComboBox.SelectedItem.ToString();

            try
            {
                _serialPort = new SerialPort(selectedPort, 9600, Parity.None, 8, StopBits.One);
                _serialPort.Open();
                StatusTextBlock.Text = $"Status: Connected to {selectedPort}";
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Failed to open port {selectedPort}: {ex.Message}");
            }
        }

        private void ClosePort_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                _serialPort.Close();
                StatusTextBlock.Text = "Status: Port Closed";
            }
        }

        private void SendData_Click(object sender, RoutedEventArgs e)
        {
            if (_serialPort != null && _serialPort.IsOpen)
            {
                try
                {
                    string data = DataTextBox.Text;
                    _serialPort.WriteLine(data);
                    StatusTextBlock.Text = $"Status: Data Sent - {data}";
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to send data: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("Port is not open. Please open a COM port first.");
            }
        }
    }
}
3. 코드 설명
XAML (UI 구성)
ComboBox (ComPortComboBox): 사용 가능한 COM 포트들을 보여주고 선택할 수 있는 UI 요소입니다.
Button (Refresh Ports): 클릭 시 현재 사용 가능한 COM 포트를 새로고침하여 ComboBox에 표시합니다.
Button (Open Port): 선택된 COM 포트를 열어 데이터를 주고받을 수 있게 합니다.
Button (Close Port): 현재 열려있는 COM 포트를 닫습니다.
TextBox (DataTextBox): 사용자가 전송할 데이터를 입력할 수 있는 영역입니다.
TextBlock (StatusTextBlock): 현재 연결 상태와 데이터 전송 상태를 표시합니다.
C# (MainWindow.xaml.cs)
RefreshPorts(): 현재 시스템에 연결된 COM 포트 목록을 가져와 ComboBox에 표시합니다.
OpenPort_Click(): 사용자가 선택한 COM 포트를 열고, 성공 시 상태를 업데이트합니다.
ClosePort_Click(): 현재 열려있는 COM 포트를 닫습니다.
SendData_Click(): 사용자가 입력한 데이터를 현재 열린 COM 포트로 전송합니다.
사용 방법
COM 포트 선택: 프로그램을 실행한 후, Refresh Ports 버튼을 클릭하여 현재 사용 가능한 COM 포트를 업데이트하고, 사용할 포트를 선택합니다.
포트 열기: Open Port 버튼을 클릭하여 선택한 COM 포트를 엽니다. 연결 상태가 Status: Connected로 업데이트됩니다.
데이터 전송: DataTextBox에 데이터를 입력하고, Send Data 버튼을 클릭하여 데이터를 전송합니다.
포트 닫기: 더 이상 포트를 사용할 필요가 없으면 Close Port 버튼을 클릭하여 포트를 닫습니다.
이 WPF 애플리케이션은 사용자가 쉽게 COM 포트를 제어하고 데이터를 전송할 수 있도록 돕습니다. 추가적인 질문이나 기능 확장이 필요하면 언제든지 말씀해 주세요!