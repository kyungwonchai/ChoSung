했습니다. 파일 시간 및 모델별로 CT 값이 기록되어 있으며, CT 값이 갑자기 증가하는 경우를 감지하고 최초 증가 시점부터 그룹 정보와 파일 시간을 기록하는 코드를 제공하겠습니다.

python
Copy code
import pymssql
import pandas as pd
from datetime import datetime

# MSSQL 연결 정보 설정 (포트 지정 포함)
server = 'your_server'
port = 'your_port'
database = 'your_database'
username = 'your_username'
password = 'your_password'

# MSSQL 서버에 연결
conn = pymssql.connect(server=server, port=port, user=username, password=password, database=database)

# CT값 증가를 감지하기 위한 변수 초기화
previous_ct = None
threshold = 0.5  # CT 값 증가 임계값 설정
anomaly_count = 0

# 데이터 모니터링 루프
while True:
    # 파일 시간, 모델, CT 값을 조회하는 SQL 쿼리 작성
    sql_query = "SELECT FileCreateTime, Model, CT FROM YourTable WHERE YourConditions ORDER BY FileCreateTime"
    
    # 데이터베이스에서 데이터를 가져옵니다.
    df = pd.read_sql_query(sql_query, conn)
    
    for index, row in df.iterrows():
        file_time = row['FileCreateTime']
        model = row['Model']
        ct = row['CT']
        
        # CT 값이 증가하는지 확인
        if previous_ct is not None and ct - previous_ct > threshold:
            anomaly_count += 1
            if anomaly_count == 1:
                # 최초로 CT 값이 증가한 경우
                print(f"CT 값 증가 감지 - 파일 시간: {file_time}, 모델: {model}, 최초 감지 시간: {datetime.now()}")
        
        # 여러 번 이상 현상이 감지된 경우 최초 감지 시점으로부터 몇 번째 이상인지 기록
        if anomaly_count > 1:
            print(f"{anomaly_count - 1}번째 이상 현상 - 파일 시간: {file_time}, 모델: {model}, 최초 감지 시간: {datetime.now()}")
        
        previous_ct = ct  # 이전 CT 값 업데이트
        
    # 일정 시간 간격으로 실행하려면 sleep 함수를 사용합니다.
    # 예: 5분마다 실행
    time.sleep(300)
이 코드는 CT 값의 증가를 감지하고, 최초 증가 시점부터 그룹 정보와 파일 시간을 기록합니다. 여러 번 이상 현상이 감지된 경우 최초 감지 시점으로부터 몇 번째 이상인지를 출력합니다. 코드 내부의 YourTable 및 YourConditions를 실제 데이터베이스 테이블 및 조건으로 대체하세요. 이상 현상이 감지되면 원하는 방식으로 로그를 작성하고 MSSQL에 업데