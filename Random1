using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using RouterMiddleACR.Models;

namespace RouterMiddleACR.Controls
{
    public partial class StatusIndicatorControl : UserControl
    {
        public StatusIndicatorControl()
        {
            InitializeComponent();
        }

        // Status 속성 정의 (DependencyProperty)
        // 서비스의 현재 상태를 나타내는 속성으로, 상태에 따라 램프 색상이 바뀜
        public static readonly DependencyProperty StatusProperty =
            DependencyProperty.Register("Status", typeof(ServiceStatusType), typeof(StatusIndicatorControl), new PropertyMetadata(ServiceStatusType.Unknown, OnStatusChanged));

        // StatusName 속성 정의 (DependencyProperty)
        // 서비스의 이름을 나타내는 속성으로, 컨트롤에 바인딩하여 이름을 표시함
        public static readonly DependencyProperty StatusNameProperty =
            DependencyProperty.Register("StatusName", typeof(string), typeof(StatusIndicatorControl), new PropertyMetadata("Unknown"));

        // StatusDescription 속성 정의 (DependencyProperty)
        // 서비스의 상태 설명을 나타내는 속성으로, 컨트롤에 바인딩하여 상태 설명을 표시함
        public static readonly DependencyProperty StatusDescriptionProperty =
            DependencyProperty.Register("StatusDescription", typeof(string), typeof(StatusIndicatorControl), new PropertyMetadata(string.Empty));

        // Status 속성의 값이 변경될 때 호출되는 콜백 메서드
        // 새로운 상태 값에 따라 램프의 색상을 변경함
        private static void OnStatusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var control = d as StatusIndicatorControl;
            if (control != null)
            {
                // 새 상태 값에 따라 램프의 색상을 업데이트
                control.IndicatorEllipse.Fill = control.GetBrushForStatus((ServiceStatusType)e.NewValue);
            }
        }

        // 상태에 따라 적절한 색상을 반환하는 메서드
        // 각 상태는 특정 색상과 매핑됨
        private Brush GetBrushForStatus(ServiceStatusType status)
        {
            switch (status)
            {
                case ServiceStatusType.Running:
                    return Brushes.Green; // 서비스가 실행 중일 때 초록색
                case ServiceStatusType.Stopped:
                    return Brushes.Red; // 서비스가 중지된 상태일 때 빨간색
                case ServiceStatusType.Paused:
                    return Brushes.Yellow; // 서비스가 일시 중지된 상태일 때 노란색
                case ServiceStatusType.Error:
                    return Brushes.DarkRed; // 서비스에 오류가 발생했을 때 진한 빨간색
                case ServiceStatusType.Restarting:
                    return Brushes.Orange; // 서비스가 재시작 중일 때 주황색
                default:
                    return Brushes.Gray; // 알 수 없는 상태일 때 회색
            }
        }

        // Status 속성 (서비스의 상태)
        public ServiceStatusType Status
        {
            get => (ServiceStatusType)GetValue(StatusProperty);
            set => SetValue(StatusProperty, value);
        }

        // StatusName 속성 (서비스의 이름)
        public string StatusName
        {
            get => (string)GetValue(StatusNameProperty);
            set => SetValue(StatusNameProperty, value);
        }

        // StatusDescription 속성 (서비스의 상태 설명)
        public string StatusDescription
        {
            get => (string)GetValue(StatusDescriptionProperty);
            set => SetValue(StatusDescriptionProperty, value);
        }
    }
}
