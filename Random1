
import React, { useState } from 'react';
import CodeBlock from './CodeBlock';
import PdfDownloadButton from './PdfDownloadButton';

const pythonExample = `
import requests
import json
import os

# API 서버의 URL은 외부 설정에서 관리하는 것을 권장합니다.
API_SERVER_URL = os.getenv("API_SERVER_URL", "http://192.168.0.100:3000/api/v1/locate")
# API 키는 보안을 위해 반드시 환경 변수 또는 보안 저장소에서 불러와야 합니다.
SECRET_API_KEY = os.getenv("MES_API_KEY", "your-default-secret-key")

def trigger_led(barcode: str):
    """지정된 바코드에 해당하는 LED 점등을 API 서버에 요청합니다."""
    
    headers = {
        'Content-Type': 'application/json',
        'X-API-KEY': SECRET_API_KEY  # 인증을 위한 API 키를 헤더에 포함
    }

    payload = {
        "barcode": barcode
    }

    try:
        # 5초의 타임아웃을 설정하여 무한 대기 방지
        response = requests.post(API_SERVER_URL, headers=headers, data=json.dumps(payload), timeout=5)

        # 응답 상태 코드에 따른 처리
        if response.status_code == 202:
            print(f"SUCCESS [Barcode: {barcode}]: Request accepted by server. Details: {response.json()}")
            return True
        elif response.status_code == 401:
            print(f"ERROR [Barcode: {barcode}]: Authentication failed. Check your API Key.")
            return False
        else:
            print(f"UNEXPECTED_ERROR [Barcode: {barcode}]: Status {response.status_code}, Response: {response.text}")
            return False

    except requests.exceptions.Timeout:
        print(f"ERROR [Barcode: {barcode}]: Request timed out. API server is not responding.")
        return False
    except requests.exceptions.RequestException as e:
        print(f"FATAL_ERROR [Barcode: {barcode}]: An error occurred: {e}")
        return False

if __name__ == '__main__':
    if not SECRET_API_KEY or SECRET_API_KEY == "your-default-secret-key":
        print("WARNING: Using default or missing API Key. Set the MES_API_KEY environment variable.")
    
    barcode_to_find = "MMF10A01B11" 
    trigger_led(barcode_to_find)
`;

const csharpExample = `
// C# Example using HttpClient (requires .NET 5+ for modern features)
using System;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

public class MaskRackApiClient
{
    private static readonly HttpClient client = new HttpClient();

    // API 서버의 URL과 시크릿 키는 appsettings.json 등 외부 설정에서 불러오는 것을 강력히 권장합니다.
    private static readonly string ApiServerUrl = Environment.GetEnvironmentVariable("API_SERVER_URL") ?? "http://192.168.0.100:3000/api/v1/locate";
    private static readonly string SecretApiKey = Environment.GetEnvironmentVariable("MES_API_KEY") ?? "your-default-secret-key";

    public static async Task<bool> TriggerLedAsync(string barcode)
    {
        Console.WriteLine($"[C#] Attempting to trigger LED for barcode: {barcode}");
        
        client.Timeout = TimeSpan.FromSeconds(5);

        var request = new HttpRequestMessage(HttpMethod.Post, ApiServerUrl);
        request.Headers.Add("X-API-KEY", SecretApiKey);

        var payload = new { barcode = barcode };
        request.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, "application/json");

        try
        {
            HttpResponseMessage response = await client.SendAsync(request);
            string responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode) // 2xx 상태 코드 (202 Accepted 포함)
            {
                Console.WriteLine($"SUCCESS: Request for {barcode} accepted. Status: {response.StatusCode}, Response: {responseBody}");
                return true;
            }
            else
            {
                Console.WriteLine($"ERROR: Failed for {barcode}. Status: {response.StatusCode}, Response: {responseBody}");
                return false;
            }
        }
        catch (TaskCanceledException ex) when (ex.InnerException is TimeoutException) // Timeout
        {
            Console.WriteLine($"ERROR: Request for {barcode} timed out.");
            return false;
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"FATAL_ERROR: HTTP request error for {barcode}. {ex.Message}");
            return false;
        }
    }

    public static async Task Main(string[] args)
    {
        if (string.IsNullOrEmpty(SecretApiKey) || SecretApiKey == "your-default-secret-key")
        {
             Console.WriteLine("WARNING: Using default or missing API Key. Set the MES_API_KEY environment variable.");
        }
        await TriggerLedAsync("MMF10A01B11");
    }
}
`;

const javaExample = `
// Java 11+ Example using java.net.http.HttpClient
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

public class MaskRackApiClient {

    // API 서버의 URL과 시크릿 키는 properties 파일이나 환경 변수에서 불러오는 것을 강력히 권장합니다.
    private static final String API_SERVER_URL = System.getenv().getOrDefault("API_SERVER_URL", "http://192.168.0.100:3000/api/v1/locate");
    private static final String SECRET_API_KEY = System.getenv().getOrDefault("MES_API_KEY", "your-default-secret-key");

    public static boolean triggerLed(String barcode) {
        HttpClient client = HttpClient.newBuilder()
                .connectTimeout(Duration.ofSeconds(5))
                .build();

        String payload = String.format("{\\"barcode\\":\\"%s\\"}", barcode);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(API_SERVER_URL))
                .timeout(Duration.ofSeconds(5))
                .header("Content-Type", "application/json")
                .header("X-API-KEY", SECRET_API_KEY) // 인증 헤더 추가
                .POST(HttpRequest.BodyPublishers.ofString(payload))
                .build();
        try {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

            if (response.statusCode() == 202) { // 202 Accepted가 성공적인 접수를 의미
                System.out.println("SUCCESS: Request for " + barcode + " accepted. Body: " + response.body());
                return true;
            } else {
                System.err.println("ERROR: Failed for " + barcode + ". Status: " + response.statusCode() + ", Body: " + response.body());
                return false;
            }
        } catch (java.net.http.HttpTimeoutException e) {
            System.err.println("ERROR: Request timed out for barcode: " + barcode);
            return false;
        } catch (Exception e) {
            System.err.println("FATAL_ERROR: An exception occurred for barcode " + barcode + ": " + e.getMessage());
            return false;
        }
    }

    public static void main(String[] args) {
        if (SECRET_API_KEY == null || SECRET_API_KEY.equals("your-default-secret-key")) {
            System.out.println("WARNING: Using default or missing API Key. Set the MES_API_KEY environment variable.");
        }
        triggerLed("MMF10A01B11");
    }
}
`;

const javascriptExample = `
// JavaScript (Node.js) Example using fetch (Node.js v18+ recommended)

// API 서버의 URL과 시크릿 키는 환경 변수나 보안 설정 파일에서 불러오는 것이 안전합니다.
const API_SERVER_URL = process.env.API_SERVER_URL || 'http://192.168.0.100:3000/api/v1/locate';
const SECRET_API_KEY = process.env.MES_API_KEY || 'your-default-secret-key';

async function triggerLed(barcode) {
    console.log(\`[JS] Attempting to trigger LED for barcode: \${barcode}\`);
    
    // 5초 타임아웃을 위한 AbortController 설정
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort('Request timed out'), 5000);

    try {
        const response = await fetch(API_SERVER_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': SECRET_API_KEY // 인증 헤더
            },
            body: JSON.stringify({ barcode }),
            signal: controller.signal // 타임아웃 컨트롤러 연결
        });

        clearTimeout(timeoutId);

        const responseData = await response.json();

        if (response.ok) { // 2xx 응답 코드를 확인 (202 포함)
            console.log(\`SUCCESS: Request for \${barcode} accepted. Server response:\`, responseData);
            return true;
        } else {
            console.error(\`ERROR: Failed for \${barcode}. Status: \${response.status}\`, responseData);
            return false;
        }
    } catch (error) {
        console.error(\`FATAL_ERROR: An error occurred for barcode \${barcode}: \${error.message}\`);
        return false;
    }
}

// 실행 예시
(async () => {
    if (!SECRET_API_KEY || SECRET_API_KEY === 'your-default-secret-key') {
      console.warn('WARNING: Using default or missing API Key. Set the MES_API_KEY environment variable.');
    }
    await triggerLed("MMF10A01B11");
})();
`;

const codeExamples = {
    Python: { lang: 'python', code: pythonExample },
    'C#': { lang: 'csharp', code: csharpExample },
    Java: { lang: 'java', code: javaExample },
    JavaScript: { lang: 'javascript', code: javascriptExample },
};

type Language = keyof typeof codeExamples;


const MESGuide: React.FC = () => {
    const viewId = 'mes-guide-view';
    const fileName = "MES_API_Integration_Guide.pdf";
    const [activeLang, setActiveLang] = useState<Language>('Python');


    const TabButton: React.FC<{lang: Language}> = ({ lang }) => {
        const isActive = activeLang === lang;
        const baseClasses = 'px-4 py-2 text-sm font-medium transition-colors duration-200 rounded-t-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-orange-500';
        const activeClasses = 'bg-gray-800 text-white';
        const inactiveClasses = 'bg-gray-700/50 text-gray-400 hover:bg-gray-700';

        return (
            <button onClick={() => setActiveLang(lang)} className={`${baseClasses} ${isActive ? activeClasses : inactiveClasses}`}>
                {lang}
            </button>
        )
    }

    return (
        <div id={viewId} className="text-gray-300 leading-relaxed">
            <div className="flex justify-between items-start mb-2">
                <div>
                    <h1 className="text-3xl font-bold text-white mb-2">MES 연동 정의서 (v1.1)</h1>
                    <p className="text-lg text-orange-400 mb-6">
                        MES에서 바코드 정보를 API 서버로 전송하여 특정 위치의 LED를 점등시키는 방법에 대한 기술 명세입니다.
                    </p>
                </div>
                 <PdfDownloadButton viewId={viewId} fileName={fileName} />
            </div>

            <div className="space-y-12">
                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">1. 개요</h2>
                    <p>MES는 작업자가 자재 출고를 위해 바코드를 스캔하는 시점에, 본 문서에 정의된 API를 호출하여 해당 자재의 물리적 위치에 설치된 LED를 점등시키는 역할을 합니다. 이를 통해 작업자는 시각적 안내를 받아 자재를 빠르고 정확하게 찾을 수 있습니다.</p>
                </section>

                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">2. API 엔드포인트</h2>
                    <p>LED 점등을 요청하기 위한 유일한 API 엔드포인트입니다.</p>
                    <div className="bg-gray-800/50 p-4 rounded-lg border border-gray-700 mt-4">
                        <code className="text-lg font-mono">
                            <span className="font-bold text-green-400 mr-4">POST</span>
                            <span className="text-cyan-400">/api/v1/locate</span>
                        </code>
                    </div>
                </section>
                
                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">3. 인증 (Authentication)</h2>
                    <p>API 서버는 허가되지 않은 시스템의 접근을 막기 위해 API 키 기반의 인증을 사용합니다. 모든 요청에는 반드시 API 키를 포함해야 합니다.</p>
                     <div className="bg-red-900/50 border border-red-700 text-red-200 p-4 rounded-lg mt-4">
                        <strong className="font-bold text-xl">API 키는 HTTP 헤더를 통해 전송해야 합니다.</strong>
                        <ul className="list-disc list-inside mt-2">
                            <li>헤더 이름: <code className="bg-gray-700 px-1 rounded">X-API-KEY</code></li>
                            <li>헤더 값: 사전에 발급받은 Secret Key</li>
                        </ul>
                        <p className="mt-2">이 헤더가 누락되거나 키 값이 유효하지 않을 경우, 서버는 <code className="bg-gray-700 px-1 rounded">401 Unauthorized</code> 오류를 반환합니다.</p>
                    </div>
                </section>
                
                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">4. 요청 명세 (Request Specification)</h2>
                    <h3 className="text-xl font-semibold text-white mt-4 mb-2">HTTP Headers</h3>
                    <div className="overflow-x-auto">
                        <table className="w-full text-left border-collapse">
                            <thead className="bg-gray-800/50 border-b-2 border-gray-600">
                                <tr>
                                    <th className="p-3 text-sm font-semibold tracking-wide">Header</th>
                                    <th className="p-3 text-sm font-semibold tracking-wide">Value</th>
                                    <th className="p-3 text-sm font-semibold tracking-wide">필수 여부</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-700">
                                <tr>
                                    <td className="p-3"><code className="bg-gray-700 px-1 rounded">Content-Type</code></td>
                                    <td className="p-3"><code className="bg-gray-700 px-1 rounded">application/json</code></td>
                                    <td className="p-3"><span className="text-green-400 font-bold">필수</span></td>
                                </tr>
                                <tr>
                                    <td className="p-3"><code className="bg-gray-700 px-1 rounded">X-API-KEY</code></td>
                                    <td className="p-3">발급받은 API Secret Key</td>
                                    <td className="p-3"><span className="text-red-400 font-bold">필수</span></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <h3 className="text-xl font-semibold text-white mt-6 mb-2">HTTP Body (Payload)</h3>
                    <p className="mb-2">JSON 형식으로, 점등시킬 위치에 해당하는 바코드 정보를 포함해야 합니다.</p>
                    <CodeBlock code={`{\n  "barcode": "MMF10A01B11"\n}`} language="json" />
                </section>
                
                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">5. 응답 명세 (Response Specification)</h2>
                    <p>API 서버는 요청 처리 결과에 따라 다른 HTTP 상태 코드를 반환합니다. MES는 이 상태 코드를 기반으로 요청 성공 여부를 판단하고 로그를 기록해야 합니다.</p>
                    <div className="overflow-x-auto mt-4">
                        <table className="w-full text-left border-collapse">
                            <thead className="bg-gray-800/50 border-b-2 border-gray-600">
                                <tr>
                                    <th className="p-3 text-sm font-semibold tracking-wide">Status Code</th>
                                    <th className="p-3 text-sm font-semibold tracking-wide">의미</th>
                                    <th className="p-3 text-sm font-semibold tracking-wide">Body 예시</th>
                                </tr>
                            </thead>
                            <tbody className="divide-y divide-gray-700">
                                <tr className="bg-green-900/20">
                                    <td className="p-3 align-top font-bold text-green-400">202 Accepted</td>
                                    <td className="p-3 align-top">요청이 성공적으로 수락되어 백그라운드 처리가 시작됨</td>
                                    <td className="p-3 align-top"><code className="text-xs">{"{ status: 'Request accepted...', location: {...} }"}</code></td>
                                </tr>
                                <tr>
                                    <td className="p-3 align-top font-bold text-yellow-400">202 Accepted</td>
                                    <td className="p-3 align-top">요청은 정상이나, 서버에 해당 바코드 정보가 없는 경우</td>
                                    <td className="p-3 align-top"><code className="text-xs">{"{ status: '...barcode not found.' }"}</code></td>
                                </tr>
                                 <tr className="bg-red-900/20">
                                    <td className="p-3 align-top font-bold text-red-400">401 Unauthorized</td>
                                    <td className="p-3 align-top">인증 실패 (API 키 누락 또는 오류)</td>
                                    <td className="p-3 align-top"><code className="text-xs">{"{ error: 'Unauthorized...' }"}</code></td>
                                </tr>
                                 <tr>
                                    <td className="p-3 align-top font-bold text-red-400">400 Bad Request</td>
                                    <td className="p-3 align-top">요청 형식 오류 (예: JSON body에 barcode 필드가 없음)</td>
                                    <td className="p-3 align-top"><code className="text-xs">{"{ error: 'Barcode is required' }"}</code></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>

                <section>
                    <h2 className="text-2xl font-semibold text-white border-b border-gray-600 pb-2 mb-4">6. 연동 예제 코드</h2>
                     <p className="mb-4">주요 개발 언어별 연동 예제입니다. 각 예제는 <strong className="text-yellow-400">API 키 보안, 타임아웃, 예외 처리</strong> 등 안정적인 운영을 위한 모범 사례를 포함하고 있습니다.</p>
                    
                    <div className="bg-yellow-900/50 border border-yellow-700 text-yellow-200 p-4 rounded-lg mb-6">
                        <strong className="font-bold">보안 필수사항:</strong> API 키는 비밀번호와 같습니다. 소스 코드에 직접 하드코딩하지 말고, <strong className="text-white">환경 변수(Environment Variable)나 보안 설정 파일</strong>을 통해 안전하게 관리하는 것을 강력히 권장합니다.
                    </div>

                    <div className="flex border-b border-gray-700">
                        {(Object.keys(codeExamples) as Language[]).map(lang => <TabButton key={lang} lang={lang} />)}
                    </div>
                    
                    <div className="bg-gray-900/50 rounded-b-lg overflow-hidden">
                       <CodeBlock 
                          key={activeLang} 
                          code={codeExamples[activeLang].code} 
                          language={codeExamples[activeLang].lang} 
                        />
                    </div>
                </section>
            </div>
        </div>
    );
};
