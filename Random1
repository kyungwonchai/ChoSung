using UnityEngine;
using UnityEditor; // Editor 스크립팅 필수
using UnityEngine.SceneManagement; // Scene 관리
using UnityEditor.SceneManagement; // Editor Scene 관리

public class SimulationSceneSetupTool
{
    // --- Prefab 경로 설정 ---
    // 실제 프로젝트의 PCB Prefab 경로로 수정하세요.
    private const string PcbPrefabPath = "Assets/Prefabs/PCB_Prefab.prefab";

    [MenuItem("Simulation Tools/Setup Full Simulation Scene (with Visuals)")]
    private static void SetupFullSceneWithVisuals()
    {
        Debug.Log("Starting full simulation scene setup with visuals...");

        // --- 0. 기존 객체 정리 (선택 사항) ---
        // 필요하다면 실행 전에 씬을 초기화하거나 특정 객체를 삭제하는 로직 추가 가능
        // 예: CleanUpExistingObjects();

        // --- 1. Prefab 로드 ---
        GameObject pcbPrefab = AssetDatabase.LoadAssetAtPath<GameObject>(PcbPrefabPath);
        if (pcbPrefab == null)
        {
            Debug.LogError($"PCB Prefab not found at path: {PcbPrefabPath}. Please create the prefab first.");
            return;
        }
        // Prefab에 PCBController가 있는지 간단히 확인 (더 확실한 방법도 있음)
        if(pcbPrefab.GetComponent<PCBController>() == null)
        {
             Debug.LogError($"PCB Prefab at '{PcbPrefabPath}' does not have PCBController script attached!");
             return;
        }


        // --- 2. 기본 구조 및 환경 생성 ---
        GameObject environmentParent = FindOrCreateGameObject("Environment");
        GameObject floor = FindOrCreateGameObject("Environment/Floor");
        if (floor.GetComponent<Plane>() == null) // Plane 컴포넌트 없으면 추가
        {
            MeshFilter mf = floor.GetComponent<MeshFilter>();
            MeshRenderer mr = floor.GetComponent<MeshRenderer>();
            Collider col = floor.GetComponent<Collider>();
            if(mf) Object.DestroyImmediate(mf); // 기존 메쉬 관련 컴포넌트 제거
            if(mr) Object.DestroyImmediate(mr);
            if(col) Object.DestroyImmediate(col);

            // Plane 생성기로 대체 (주의: 에디터 전용 함수 아님, 하지만 간단히 사용)
            GameObject planePrim = GameObject.CreatePrimitive(PrimitiveType.Plane);
            floor.AddComponent<MeshFilter>().sharedMesh = planePrim.GetComponent<MeshFilter>().sharedMesh;
            floor.AddComponent<MeshRenderer>().sharedMaterial = planePrim.GetComponent<MeshRenderer>().sharedMaterial;
            floor.AddComponent<MeshCollider>().sharedMesh = planePrim.GetComponent<MeshFilter>().sharedMesh; // Collider도 추가
            Object.DestroyImmediate(planePrim); // 임시 Plane 제거
        }
        floor.transform.SetParent(environmentParent.transform);
        floor.transform.localScale = new Vector3(5, 1, 5); // 바닥 크기 설정 (예시)


        GameObject printersParent = FindOrCreateGameObject("Printers");
        GameObject shuttleSystemParent = FindOrCreateGameObject("ShuttleSystem");
        GameObject inputSystemParent = FindOrCreateGameObject("InputSystem");
        GameObject exitSystemParent = FindOrCreateGameObject("ExitSystem");

        // --- 3. 프린터 생성 및 설정 (시각적 요소 포함) ---
        PrinterController frontPrinter = SetupPrinter("FrontPrinter", printersParent.transform, new Vector3(-3, 0, 0));
        PrinterController rearPrinter = SetupPrinter("RearPrinter", printersParent.transform, new Vector3(3, 0, 0));

        // --- 4. 셔틀 생성 및 설정 (시각적 요소 포함) ---
        ShuttleController shuttle = SetupShuttle("ShuttleConveyor", shuttleSystemParent.transform, Vector3.zero);
        GameObject exitPoint = FindOrCreateGameObject("ExitPoint", null, exitSystemParent.transform);
        exitPoint.transform.position = new Vector3(0, 0, 10); // ExitPoint 위치 설정 (예시)

        // --- 5. Input Trigger 생성 및 설정 ---
        SetupInputTrigger("InputTrigger_Front", inputSystemParent.transform, pcbPrefab, frontPrinter);
        SetupInputTrigger("InputTrigger_Rear", inputSystemParent.transform, pcbPrefab, rearPrinter);

        // --- 6. 최종 참조 연결 ---
        shuttle.frontPrinter = frontPrinter;
        shuttle.rearPrinter = rearPrinter;
        shuttle.frontPickupLocation = frontPrinter.outputBufferPoint; // 프린터의 OutputBufferPoint Transform 연결
        shuttle.rearPickupLocation = rearPrinter.outputBufferPoint;   // 프린터의 OutputBufferPoint Transform 연결
        shuttle.exitPoint = exitPoint.transform;                    // ExitPoint Transform 연결

        Debug.Log("Full simulation scene setup complete!");

        // Scene이 변경되었음을 Unity에 알림
        EditorSceneManager.MarkSceneDirty(SceneManager.GetActiveScene());
    }

    // --- Helper 함수들 ---

    // GameObject 찾거나 새로 생성 (컴포넌트 추가 옵션)
    private static GameObject FindOrCreateGameObject(string path, System.Type componentToAdd = null, Transform parent = null)
    {
        GameObject go = GameObject.Find(path);
        if (go == null)
        {
            string[] names = path.Split('/');
            GameObject currentParentObj = (parent != null) ? parent.gameObject : null;
            Transform currentParentT = parent;

            for (int i = 0; i < names.Length; i++)
            {
                string currentName = names[i];
                Transform childT = (currentParentT != null) ? currentParentT.Find(currentName) : GameObject.Find("/" + currentName)?.transform; // 루트 객체 검색 추가

                 // 루트 객체인데 부모가 지정된 경우, 부모 아래에서 찾거나 생성
                 if(i == 0 && parent != null && currentParentT == null) {
                     GameObject rootGo = GameObject.Find(currentName);
                     if(rootGo == null) {
                         go = new GameObject(currentName);
                         go.transform.SetParent(parent);
                     } else {
                         go = rootGo;
                         // 이미 존재하는데 부모가 다르면 부모 변경 (선택적)
                         if(go.transform.parent != parent) go.transform.SetParent(parent);
                     }

                 } else if (childT == null) // 자식 또는 루트(부모 없을 시) 검색 실패 시 생성
                 {
                    go = new GameObject(currentName);
                    if (currentParentT != null)
                    {
                        go.transform.SetParent(currentParentT);
                    }
                 }
                 else
                 {
                    go = childT.gameObject;
                 }
                currentParentT = go.transform; // 다음 레벨의 부모 설정
                currentParentObj = go; // 현재 작업 객체 설정
            }
        }

        // 최종 객체에 요청된 컴포넌트가 없으면 추가
        if (go != null && componentToAdd != null && go.GetComponent(componentToAdd) == null)
        {
            go.AddComponent(componentToAdd);
        }
        return go;
    }


    // 프린터 설정 Helper
    private static PrinterController SetupPrinter(string name, Transform parent, Vector3 position)
    {
        // 루트 GameObject 생성 및 PrinterController 추가
        GameObject printerGO = FindOrCreateGameObject(name, typeof(PrinterController), parent);
        printerGO.transform.position = position; // 위치 설정
        PrinterController controller = printerGO.GetComponent<PrinterController>();

        // 내부 위치 포인트 생성 및 연결
        controller.inputPoint = FindOrCreateGameObject($"{name}/InputPoint", null, printerGO.transform).transform;
        controller.processingPoint = FindOrCreateGameObject($"{name}/ProcessingPoint", null, printerGO.transform).transform;
        controller.outputBufferPoint = FindOrCreateGameObject($"{name}/OutputBufferPoint", null, printerGO.transform).transform;

        // 위치 포인트들의 로컬 위치 설정 (예시)
        controller.inputPoint.localPosition = new Vector3(0, 0, -1.0f);
        controller.processingPoint.localPosition = Vector3.zero;
        controller.outputBufferPoint.localPosition = new Vector3(0, 0, 1.0f);

        // 시각적 요소 (Cube) 생성 및 설정
        GameObject visual = FindOrCreateGameObject($"{name}/Visual");
        if (visual.GetComponent<MeshFilter>() == null) // 시각적 요소가 없으면 새로 생성
        {
             GameObject cubePrim = GameObject.CreatePrimitive(PrimitiveType.Cube);
             visual.AddComponent<MeshFilter>().sharedMesh = cubePrim.GetComponent<MeshFilter>().sharedMesh;
             visual.AddComponent<MeshRenderer>().sharedMaterial = cubePrim.GetComponent<MeshRenderer>().sharedMaterial;
             Object.DestroyImmediate(cubePrim); // 임시 프리미티브 제거
        }
        visual.transform.SetParent(printerGO.transform);
        visual.name = "Visual";
        visual.transform.localPosition = new Vector3(0, -0.2f, 0); // 시각적 요소 위치 살짝 조정
        visual.transform.localScale = new Vector3(1.5f, 0.6f, 2.5f); // 시각적 요소 크기 조정
        // 기본 Collider 제거 (필요 없으면)
        Collider col = visual.GetComponent<Collider>();
        if(col != null) Object.DestroyImmediate(col);


        // 기본 파라미터 설정 (필요시)
        // controller.printingTime = 2.0f;
        // controller.shortCleanCycle = 3;

        return controller;
    }

    // 셔틀 설정 Helper
    private static ShuttleController SetupShuttle(string name, Transform parent, Vector3 position)
    {
        GameObject shuttleGO = FindOrCreateGameObject(name, typeof(ShuttleController), parent);
        shuttleGO.transform.position = position;
        ShuttleController controller = shuttleGO.GetComponent<ShuttleController>();

        // 셔틀 픽업 포인트 생성 및 연결
        controller.shuttlePickupPoint = FindOrCreateGameObject($"{name}/PickupPoint", null, shuttleGO.transform).transform;
        controller.shuttlePickupPoint.localPosition = new Vector3(0, 0.2f, 0); // PCB가 놓일 위치 살짝 위로

        // 시각적 요소 (Cube) 생성 및 설정
        GameObject visual = FindOrCreateGameObject($"{name}/Visual");
         if (visual.GetComponent<MeshFilter>() == null)
        {
             GameObject cubePrim = GameObject.CreatePrimitive(PrimitiveType.Cube);
             visual.AddComponent<MeshFilter>().sharedMesh = cubePrim.GetComponent<MeshFilter>().sharedMesh;
             visual.AddComponent<MeshRenderer>().sharedMaterial = cubePrim.GetComponent<MeshRenderer>().sharedMaterial;
             Object.DestroyImmediate(cubePrim);
        }
        visual.transform.SetParent(shuttleGO.transform);
        visual.name = "Visual";
        visual.transform.localPosition = Vector3.zero;
        visual.transform.localScale = new Vector3(1.8f, 0.2f, 0.5f); // 셔틀 모양 크기 조정
        Collider col = visual.GetComponent<Collider>();
        if(col != null) Object.DestroyImmediate(col);

        // 기본 파라미터 설정 (필요시)
        // controller.moveSpeed = 5.0f;

        return controller;
    }

    // Input Trigger 설정 Helper
    private static void SetupInputTrigger(string name, Transform parent, GameObject pcbPrefab, PrinterController targetPrinter)
    {
        GameObject triggerGO = FindOrCreateGameObject(name, typeof(InputTrigger), parent);
        InputTrigger trigger = triggerGO.GetComponent<InputTrigger>();

        trigger.pcbPrefab = pcbPrefab; // Prefab 참조 연결
        trigger.targetPrinter = targetPrinter; // 타겟 프린터 참조 연결

        // 위치 설정 (타겟 프린터 InputPoint 앞쪽 - 예시)
        if (targetPrinter != null && targetPrinter.inputPoint != null)
        {
            triggerGO.transform.position = targetPrinter.inputPoint.position + Vector3.back * 2.5f; // 예시 위치
        }

         // Input Trigger는 시각적 요소 불필요
    }
}