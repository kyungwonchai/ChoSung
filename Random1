말 죄송합니다. 이번에는 파일 감지와 날짜(연월일시분초) 정렬을 포함한 FileProcessor의 전체 코드를 정확하게 제공하겠습니다. 파일 이름에서 날짜 정보를 추출하여 날짜 순으로 정렬하는 기능을 구현하고, 새로운 파일만을 감지하여 처리하도록 하겠습니다.

FileProcessor.cs (수정된 전체 코드)
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

/// <summary>
/// FileProcessor는 지정된 폴더에서 로그 파일을 감지하고, 새로운 파일이 있을 때 LogEntry로 변환하여 처리합니다.
/// 날짜 정보를 추출하여 파일을 정렬하고, 새로 추가된 파일만 처리합니다.
/// </summary>
public class FileProcessor
{
    private readonly string _logDirectory; // 로그 파일 경로
    private Action<LogEntry> _onFileDetected; // 파일이 감지되었을 때 호출될 콜백
    private DateTime _lastProcessedFileDateTime = DateTime.MinValue; // 마지막으로 처리된 파일의 시간

    public FileProcessor(string logDirectory, Action<LogEntry> onFileDetected)
    {
        _logDirectory = logDirectory;
        _onFileDetected = onFileDetected;
    }

    /// <summary>
    /// 5초마다 폴더를 확인하고 새로운 파일이 있으면 날짜 순으로 정렬 후 처리합니다.
    /// </summary>
    public async void StartProcessing()
    {
        while (true)
        {
            // 지정된 디렉토리에서 모든 파일을 가져옵니다.
            var files = Directory.GetFiles(_logDirectory, "*.txt");

            // 파일 이름에서 날짜를 추출하고 날짜 순으로 정렬합니다.
            var sortedFiles = files
                .Where(f => TryExtractDateTimeFromFileName(f, out _))
                .OrderBy(f => ExtractDateTimeFromFileName(f))
                .ToList();

            // 새로운 파일이 있는지 확인하고 처리
            foreach (var file in sortedFiles)
            {
                DateTime fileDateTime = ExtractDateTimeFromFileName(file);

                // 새로 추가된 파일만 처리 (마지막으로 처리된 파일 이후의 파일)
                if (fileDateTime > _lastProcessedFileDateTime)
                {
                    var logEntry = ParseLogFile(file);
                    _onFileDetected?.Invoke(logEntry); // 새로운 로그 엔트리를 콜백에 전달
                    _lastProcessedFileDateTime = fileDateTime; // 마지막 처리 시간 업데이트
                }
            }

            await Task.Delay(5000); // 5초마다 폴더를 확인
        }
    }

    /// <summary>
    /// 파일 이름에서 날짜 정보를 추출하여 DateTime으로 변환합니다.
    /// 파일명 형식은 "W_test_yyyyMMddHHmmss.txt" 형식으로 가정합니다.
    /// </summary>
    private DateTime ExtractDateTimeFromFileName(string fileName)
    {
        var baseFileName = Path.GetFileNameWithoutExtension(fileName); // 확장자를 제외한 파일 이름만 가져옴
        var dateTimePart = baseFileName.Split('_')[1]; // 파일명에서 날짜 부분 추출

        // "yyyyMMddHHmmss" 형식을 DateTime으로 변환
        DateTime.TryParseExact(dateTimePart, "yyyyMMddHHmmss", null, System.Globalization.DateTimeStyles.None, out DateTime fileDateTime);
        return fileDateTime;
    }

    /// <summary>
    /// 파일 이름에서 날짜 정보를 추출할 수 있는지 확인합니다.
    /// </summary>
    private bool TryExtractDateTimeFromFileName(string fileName, out DateTime fileDateTime)
    {
        var baseFileName = Path.GetFileNameWithoutExtension(fileName);
        var dateTimePart = baseFileName.Split('_')[1];

        // 날짜 형식이 올바른지 검증
        return DateTime.TryParseExact(dateTimePart, "yyyyMMddHHmmss", null, System.Globalization.DateTimeStyles.None, out fileDateTime);
    }

    /// <summary>
    /// 로그 파일을 읽어서 LogEntry 객체로 변환합니다.
    /// </summary>
    private LogEntry ParseLogFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);
        return new LogEntry
        {
            PO_NO = lines[0],
            MAG_NO = lines[1],
            BASIC_MODEL = lines[2],
            MODEL_CODE = lines[3],
            PO_PLAN_QTY = int.Parse(lines[4]),
            PO_PROD_QTY = int.Parse(lines[5]),
            MAG_QTY = int.Parse(lines[6]),
            SequenceFlag = int.Parse(lines[7])
        };
    }
}
주요 수정 내용:
날짜 정보 추출 및 정렬:

파일 이름에서 날짜 정보를 추출하여 **DateTime**으로 변환한 후, 이를 오름차순으로 정렬합니다.
파일명 형식은 **W_test_yyyyMMddHHmmss.txt**로 가정합니다. (yyyyMMddHHmmss는 연월일시분초 형식입니다).
새로운 파일 감지:

이전에 처리된 마지막 파일의 날짜 **_lastProcessedFileDateTime**을 저장하여, 그 이후에 생성된 새로운 파일만 감지하여 처리합니다.
5초마다 파일 감지:

5초마다 폴더를 스캔하며, 새로 감지된 파일만 작업 큐로 넘겨 **LogEntry**로 변환합니다.
전체 파일 설명:
FileProcessor:
폴더 감지 및 파일 처리를 담당합니다.
날짜 정보를 기준으로 파일을 정렬하고, 마지막으로 처리된 파일 이후의 새로운 파일만 처리합니다.
이제 이 코드를 기반으로 새로운 로그 파일을 감지하고 처리하는 시스템이 정상적으로 동작할 것입니다.

추가 수정 사항이나 더 필요한 사항