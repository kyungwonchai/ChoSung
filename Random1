아, 제가 완전히 잘못 이해했습니다. 정말 죄송합니다. alias 를 설명한 게 큰 실수였습니다.

지금 말씀하신 상황, 즉 각각 다른 포트에서 이미 실행되고 있는 독립적인 웹 서비스들을 Nginx로 묶는 것이라면, alias는 전혀 필요 없습니다. 100% proxy_pass 만 사용하는 것이 맞습니다.

제가 제대로 이해한 지금 상황에 맞춰, 처음부터 다시 설명해 드리겠습니다.

## 목표: URL 경로에 따라 각 포트로 요청을 정확히 '토스'하기
Nginx의 역할은 '교통정리'입니다.

http://10.222.111.222/programs 로 온 손님은 👉 8101번 포트 서비스로 안내

http://10.222.111.222/monitor 로 온 손님은 👉 8921번 포트 서비스로 안내

이 작업은 proxy_pass만으로 아주 간단하게 할 수 있습니다.

## 올바른 Nginx 설정 (your-project.conf)
이 설정 파일 하나면 모든 게 끝납니다. alias는 없습니다.

Nginx

server {
    listen 80;
    server_name 10.222.111.222;

    # 1. 메인 페이지 (http://10.222.111.222/)
    # 여기는 실제 파일이 있는 폴더를 가리키므로 'root'를 사용합니다.
    location / {
        root /var/www/main-portal; # 메인 index.html이 있는 폴더
        index index.html;
    }

    # 2. 첫 번째 서비스 ('/programs' 경로 -> 8101 포트)
    location /programs/ {
        # 'http://127.0.0.1:8101/' 로 모든 요청을 넘겨줍니다.
        # 맨 뒤에 '/'를 붙이면, Nginx가 '/programs/' 부분을 떼고
        # 순수한 경로만 8101 앱으로 전달합니다. (예: /programs/login -> /login)
        proxy_pass http://127.0.0.1:8101/;

        # 아래 헤더 설정은 필수입니다. 백엔드 앱이 클라이언트 정보를 알 수 있게 합니다.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 3. 두 번째 서비스 ('/monitor' 경로 -> 8921 포트)
    location /monitor/ {
        # 위와 동일하게, 8921번 포트로 실행 중인 서비스로 요청을 넘깁니다.
        proxy_pass http://127.0.0.1:8921/;

        # 필수 헤더 설정
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # 모니터링 툴은 실시간 통신(웹소켓)을 쓸 수 있으니 아래 설정도 추가합니다.
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
## 왜 alias는 틀렸고, 이게 맞는가?
proxy_pass (정답): 실행 중인 프로그램 (포트 O) 에게 요청을 중계할 때 사용합니다. 지금 사용자님 상황에 100% 해당합니다.

alias (오답): 단순 파일 폴더 (포트 X) 와 URL을 연결할 때 사용합니다. 제가 완전히 잘못 짚었습니다.

## 해야 할 일
위 설정 내용을 /etc/nginx/sites-available/your-project.conf 와 같은 파일에 복사하고 저장합니다.

sudo ln -s /etc/nginx/sites-available/your-project.conf /etc/nginx/sites-enabled/ 명령어로 설정을 활성화합니다.

sudo nginx -t 로 문법 오류가 없는지 확인합니다.

sudo systemctl reload nginx 로 설정을 적용합니다.

이렇게 하면 Nginx는 각 앱의 내부 경로가 어떻게 생겼는지 전혀 신경 쓰지 않고, 그저 정해진 URL 경로에 따라 올바른 포트로 요청을 '토스'해주는 역할만 완벽하게 수행할 겁니다.