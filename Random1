using System;
using System.IO;
using System.IO.Pipes;
using System.Threading;
using System.Threading.Tasks;

namespace RouterMiddleACRService
{
    public class LogService
    {
        private static LogService _instance;
        private readonly string _logDirectory;
        private readonly string _pipeName = "RouterMiddleACRLogPipe";
        private NamedPipeServerStream _pipeServer;
        private StreamWriter _pipeWriter;
        private CancellationTokenSource _cancellationTokenSource;

        public static LogService Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new LogService();
                }
                return _instance;
            }
        }

        private LogService()
        {
            _logDirectory = Path.Combine("C:\\Logs", "RouterMiddleACRService", DateTime.Now.ToString("yyyyMM"));
            Directory.CreateDirectory(_logDirectory);
        }

        public void Start()
        {
            _cancellationTokenSource = new CancellationTokenSource();
            Task.Run(() => ManagePipeServer(_cancellationTokenSource.Token));
        }

        public void Stop()
        {
            try
            {
                _cancellationTokenSource.Cancel();
                Task.Delay(1000).Wait();
                ClosePipe();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error stopping service: {ex.Message}");
            }
        }

        public void LogMessage(string message)
        {
            try
            {
                string logFilePath = Path.Combine(_logDirectory, $"{DateTime.Now:yyyyMMdd}_ServiceLog.txt");
                string logEntry = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

                File.AppendAllText(logFilePath, logEntry + Environment.NewLine);

                if (_pipeWriter != null)
                {
                    _pipeWriter.WriteLine(logEntry);
                    _pipeWriter.Flush();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error logging message: {ex.Message}");
            }
        }

        private void ClosePipe()
        {
            try
            {
                _pipeWriter?.Dispose();
                _pipeServer?.Dispose();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error closing pipe: {ex.Message}");
            }
            finally
            {
                _pipeWriter = null;
                _pipeServer = null;
            }
        }

        private async Task ManagePipeServer(CancellationToken cancellationToken)
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                try
                {
                    await StartPipeServer(cancellationToken);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error in pipe server: {ex.Message}");
                    ClosePipe(); // 예외 발생 시에만 파이프를 닫음
                }

                await Task.Delay(5000, cancellationToken); // 5초 후 재시도
            }
        }

        private async Task StartPipeServer(CancellationToken cancellationToken)
        {
            try
            {
                _pipeServer = new NamedPipeServerStream(_pipeName, PipeDirection.Out, 1, PipeTransmissionMode.Message, PipeOptions.Asynchronous);
                Console.WriteLine("Waiting for client connection...");

                // 연결 대기, 타임아웃 설정
                using (var connectCts = new CancellationTokenSource(TimeSpan.FromSeconds(10)))
                using (var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(connectCts.Token, cancellationToken))
                {
                    await _pipeServer.WaitForConnectionAsync(linkedCts.Token);
                }

                Console.WriteLine("Client connected to pipe.");

                using (_pipeWriter = new StreamWriter(_pipeServer) { AutoFlush = true })
                {
                    while (!cancellationToken.IsCancellationRequested && _pipeServer.IsConnected)
                    {
                        await Task.Delay(1000, cancellationToken);
                    }
                }
            }
            catch (OperationCanceledException)
            {
                Console.WriteLine("Pipe server operation canceled or timed out.");
                ClosePipe(); // 타임아웃이나 취소 발생 시 파이프 닫기
            }
            catch (IOException ex)
            {
                Console.WriteLine($"Pipe IO error: {ex.Message}");
                ClosePipe(); // IO 예외 발생 시 파이프 닫기
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Pipe server error: {ex.Message}");
                ClosePipe(); // 기타 예외 발생 시 파이프 닫기
            }
        }
    }
}
