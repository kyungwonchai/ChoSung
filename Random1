using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;

namespace YourNamespace
{
    public partial class YourWindow : Window
    {
        // 각 버튼의 이벤트 핸들러 목록을 저장하는 딕셔너리
        private Dictionary<Button, HashSet<Delegate>> buttonHandlers = new Dictionary<Button, HashSet<Delegate>>();

        public YourWindow()
        {
            InitializeComponent();
            // 버튼을 딕셔너리에 추가
            buttonHandlers.Add(ButtonA, new HashSet<Delegate>());
            buttonHandlers.Add(ButtonB, new HashSet<Delegate>());
            // ... (다른 버튼들도 추가)
        }

        private void AddHandler(Button button, RoutedEventHandler handler)
        {
            var handlers = buttonHandlers[button];
            if (!handlers.Contains(handler))
            {
                button.Click += handler;
                handlers.Add(handler);
            }
        }

        private void RemoveHandler(Button button, RoutedEventHandler handler)
        {
            if (buttonHandlers[button].Contains(handler))
            {
                button.Click -= handler;
                buttonHandlers[button].Remove(handler);
            }
        }

        private void FunctionA(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("FunctionA Called");
        }

        private void FunctionB(object sender, RoutedEventArgs e)
        {
            MessageBox.Show("FunctionB Called");
        }

        private void OtherMethod()
        {
            // 이벤트 핸들러를 추가하거나 제거
            AddHandler(ButtonA, FunctionA);
            AddHandler(ButtonB, FunctionB);
            AddHandler(ButtonA, FunctionA);  // FunctionA는 이미 ButtonA에 추가되었으므로 무시됩니다.
            RemoveHandler(ButtonB, FunctionB);
        }
    }
}
