iewModel.cs (전체 코드)

이 버전은 생성자에서 IDatabaseService와 IBrokerClientService가 null로 전달되어도 예외를 발생시키지 않고, 내부에서 해당 서비스 사용 시 null 체크를 하도록 수정되었습니다.

C#

// MGSPMonitorControl/ViewModels/MainViewModel.cs
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Security;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using MGSPMonitorControl.Models;
using MGSPMonitorControl.Services;
using MGSPMonitorControl.Views;
using MonitorControl.SharedModels; // 공용 네임스페이스
using Newtonsoft.Json;

namespace MGSPMonitorControl.ViewModels
{
    // ApplicationMode Enum은 이전 답변과 동일하게 유지
    public enum ApplicationMode { Basic, User, Admin }

    public class MainViewModel : ObservableObject
    {
        // --- 비밀번호 (하드코딩 - 실제로는 안전하게 관리) ---
        private const string UserModePassword = "user123";
        private const string AdminModePassword = "admin123";
        // --- ---

        private readonly IDatabaseService _databaseService; // 이제 null일 수 있음 (테스트 단계)
        private readonly IBrokerClientService _brokerClientService; // 이제 null일 수 있음 (테스트 단계)

        public ObservableCollection<ManagedAgentDisplay> Agents { get; }
        public ObservableCollection<string> UiActionLogs { get; }
        public BrokerStatusDisplay BrokerStatus { get; set; } = new BrokerStatusDisplay();

        private ManagedAgentDisplay _selectedAgent;
        public ManagedAgentDisplay SelectedAgent
        {
            get => _selectedAgent;
            set { if (SetProperty(ref _selectedAgent, value)) RefreshAllCommandStates(); }
        }
        
        private string _brokerConnectionStatus = "Broker Not Initialized"; // 초기 상태 변경
        public string BrokerConnectionStatus 
        {
            get => _brokerConnectionStatus;
            set { if (SetProperty(ref _brokerConnectionStatus, value)) RefreshAllCommandStates(); }
        }

        private ApplicationMode _currentMode = ApplicationMode.Basic;
        public ApplicationMode CurrentMode
        {
            get => _currentMode;
            private set 
            { 
                if (SetProperty(ref _currentMode, value))
                {
                    OnPropertyChanged(nameof(CanManageAgents));
                    OnPropertyChanged(nameof(CanControlPower));
                    OnPropertyChanged(nameof(CurrentModeDisplay));
                    RefreshAllCommandStates();
                    AddUiLog($"Application mode changed to: {CurrentMode}");
                }
            }
        }
        public string CurrentModeDisplay => $"Current Mode: {CurrentMode}";
        public bool CanManageAgents => CurrentMode == ApplicationMode.Admin;
        public bool CanControlPower => CurrentMode == ApplicationMode.Admin || CurrentMode == ApplicationMode.User;
        public string UiUserIdentifier => $"{Environment.UserName}@{Environment.MachineName}";

        public ICommand LoadAgentsCommand { get; }
        public RelayCommand<PasswordBox> ApplyModeCommand { get; }
        public ICommand LogoutCommand { get; }
        public ICommand AddAgentCommand { get; }
        public ICommand EditAgentCommand { get; }
        public ICommand DeleteAgentCommand { get; }
        public ICommand MonitorOnCommand { get; }
        public ICommand MonitorOffCommand { get; }
        public ICommand PingAgentCommand { get; }
        public ICommand RequestBrokerStatusCommand { get; }
        public ICommand ConnectToBrokerCommand { get; }
        public ICommand DisconnectFromBrokerCommand { get; }
        public ICommand ClearUiLogsCommand { get; }

        // 생성자 수정: 서비스가 null이어도 예외를 던지지 않도록 변경
        public MainViewModel(IDatabaseService databaseService, IBrokerClientService brokerClientService)
        {
            // _databaseService = databaseService ?? throw new ArgumentNullException(nameof(databaseService)); // 이전 코드
            // _brokerClientService = brokerClientService ?? throw new ArgumentNullException(nameof(brokerClientService)); // 이전 코드
            _databaseService = databaseService; // null 허용 (App.xaml.cs에서 null 전달 시)
            _brokerClientService = brokerClientService; // null 허용

            Agents = new ObservableCollection<ManagedAgentDisplay>();
            UiActionLogs = new ObservableCollection<string>();

            AddUiLog($"Application started. Initial mode: {CurrentMode}. UI User: {UiUserIdentifier}");
            if (_databaseService == null) AddUiLog("[WARNING] DatabaseService is not initialized. DB functions will be unavailable.");
            if (_brokerClientService == null) AddUiLog("[WARNING] BrokerClientService is not initialized. Broker communication will be unavailable.");


            if (_brokerClientService != null) // 서비스가 null이 아닐 때만 이벤트 구독
            {
                _brokerClientService.Connected += OnBrokerConnected;
                _brokerClientService.Disconnected += OnBrokerDisconnected;
                _brokerClientService.MessageReceived += OnBrokerMessageReceived;
            }

            // Commands 초기화 (CanExecute 조건에서 서비스 null 체크 추가)
            LoadAgentsCommand = new RelayCommand(async () => await ExecuteLoadAgentsAsync(), () => _databaseService != null);
            ApplyModeCommand = new RelayCommand<PasswordBox>(ExecuteApplyMode, (pBox) => pBox != null );
            LogoutCommand = new RelayCommand(ExecuteLogout, () => CurrentMode != ApplicationMode.Basic);

            AddAgentCommand = new RelayCommand(ExecuteAddAgent, () => CanManageAgents && _databaseService != null);
            EditAgentCommand = new RelayCommand(ExecuteEditAgent, () => SelectedAgent != null && CanManageAgents && _databaseService != null);
            DeleteAgentCommand = new RelayCommand(async () => await ExecuteDeleteAgentAsync(), () => SelectedAgent != null && CanManageAgents && _databaseService != null);
            
            MonitorOnCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOn"), 
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && _brokerClientService != null && _brokerClientService.IsConnected);
            MonitorOffCommand = new RelayCommand(async () => await ExecuteMonitorControlAsync("TurnMonitorOff"), 
                                               () => SelectedAgent != null && SelectedAgent.IsOnline && CanControlPower && _brokerClientService != null && _brokerClientService.IsConnected);
            PingAgentCommand = new RelayCommand(async () => await ExecutePingAgentAsync(), 
                                              () => SelectedAgent != null && SelectedAgent.IsOnline && _brokerClientService != null && _brokerClientService.IsConnected);

            RequestBrokerStatusCommand = new RelayCommand(async () => await ExecuteRequestBrokerStatusAsync(), () => _brokerClientService != null && _brokerClientService.IsConnected);
            ConnectToBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.ConnectAsync(); }, () => _brokerClientService != null && !_brokerClientService.IsConnected);
            DisconnectFromBrokerCommand = new RelayCommand(async () => { if (_brokerClientService != null) await _brokerClientService.DisconnectAsync(); }, () => _brokerClientService != null && _brokerClientService.IsConnected);
            ClearUiLogsCommand = new RelayCommand(() => UiActionLogs.Clear());

            // 초기 데이터 로드 및 Broker 연결 시도 (서비스가 null이 아닐 경우)
            if (_databaseService != null)
            {
                Task.Run(async () => { await ExecuteLoadAgentsAsync(); });
            }
            if (_brokerClientService != null && !_brokerClientService.IsConnected)
            {
                 Task.Run(async () => { await _brokerClientService.ConnectAsync(); });
            }
        }

        private void RefreshAllCommandStates()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                (LoadAgentsCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ApplyModeCommand as RelayCommand<PasswordBox>)?.RaiseCanExecuteChanged();
                (LogoutCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (AddAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (EditAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DeleteAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOnCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (MonitorOffCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (PingAgentCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (RequestBrokerStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (ConnectToBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
                (DisconnectFromBrokerCommand as RelayCommand)?.RaiseCanExecuteChanged();
            });
        }

        private void AddUiLog(string message)
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                string logEntry = $"[{DateTime.Now:HH:mm:ss.fff}] {message}";
                UiActionLogs.Insert(0, logEntry);
                if (UiActionLogs.Count > 200) UiActionLogs.RemoveAt(UiActionLogs.Count - 1);
            });
        }

        private void ExecuteApplyMode(PasswordBox passwordBox) 
        {
            if (passwordBox == null) return;
            string enteredPassword = passwordBox.Password; 
            passwordBox.Clear(); 

            if (enteredPassword == AdminModePassword) CurrentMode = ApplicationMode.Admin;
            else if (enteredPassword == UserModePassword) CurrentMode = ApplicationMode.User;
            else { AddUiLog("[WARNING] Invalid password. Mode unchanged."); MessageBox.Show("Invalid password.", "Access Denied", MessageBoxButton.OK, MessageBoxImage.Warning); }
        }
        private void ExecuteLogout() { CurrentMode = ApplicationMode.Basic; }

        private async Task ExecuteLoadAgentsAsync()
        {
            if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available for loading agents."); return; }
            AddUiLog("Loading managed agent configurations from database...");
            // ... (나머지 로직은 이전 답변과 동일, 단 _databaseService null 체크 후 호출) ...
            try
            {
                var dbAgents = await _databaseService.GetManagedAgentsAsync();
                Application.Current.Dispatcher.Invoke(() =>
                {
                    Agents.Clear();
                    foreach (var agent in dbAgents.OrderBy(a=>a.AgentName)) Agents.Add(agent);
                    SelectedAgent = null; 
                });
                AddUiLog($"Loaded {dbAgents.Count} agent configurations from DB.");
                if(_brokerClientService != null && _brokerClientService.IsConnected)
                {
                    string uiIdentifier = UiUserIdentifier;
                    await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                }
                RefreshAllCommandStates();
            }
            catch (Exception ex) { /* ... */ }
        }

        private async void ExecuteAddAgent() // async void이지만 UI 이벤트 핸들러에서 호출될 것이므로 괜찮음
        {
            if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available for Add Agent."); return; }
            AddUiLog("Opening 'Add New Agent' window...");
            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + "Mode");
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm); 
            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' configuration saved. Refreshing list.");
                await ExecuteLoadAgentsAsync(); // ShowDialog 후이므로 await 사용 가능
            }
            else { AddUiLog("'Add New Agent' window cancelled."); }
        }

        private async void ExecuteEditAgent()
        {
            if (SelectedAgent == null || _databaseService == null) { /* ... */ return; }
            AddUiLog($"Opening 'Edit Agent' window for: {SelectedAgent.AgentName} (AppID: {SelectedAgent.AgentIdProvidedByApp})");
            ManagedAgentDisplay agentToEditInDb = null;
            try { agentToEditInDb = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid); }
            catch (Exception ex) { /* ... */ return; }
            if(agentToEditInDb == null) { /* ... */ await ExecuteLoadAgentsAsync(); return; }
            var agentConfigVm = new AgentConfigViewModel(_databaseService, CurrentMode.ToString() + "Mode", agentToEditInDb);
            var agentConfigWindow = new AgentConfigWindow(agentConfigVm);
            if (agentConfigWindow.ShowDialog() == true)
            {
                AddUiLog($"Agent '{agentConfigVm.Agent.AgentName}' configuration updated. Refreshing list.");
                await ExecuteLoadAgentsAsync();
            }
            else { AddUiLog("'Edit Agent' window cancelled."); }
        }

        private async Task ExecuteDeleteAgentAsync()
        {
            if (SelectedAgent == null || _databaseService == null) { /* ... */ return; }
            // ... (이전 DatabaseService.DeleteManagedAgentAsync 호출 로직과 동일) ...
        }

        private async Task ExecuteMonitorControlAsync(string actionType)
        {
            if (SelectedAgent == null || _databaseService == null || _brokerClientService == null) { /* ... */ return; }
            // ... (이전 DatabaseService.LogControlActionAsync 및 _brokerClientService.SendMessageAsync 호출 로직과 동일) ...
            // 로그 엔트리의 RequesterInfo도 CurrentMode 기반으로.
            string correlationId = Guid.NewGuid().ToString();
            Guid correlationIdGuid = Guid.Parse(correlationId);
            // ... (DB에서 currentAgentConfig 로드) ...
            ManagedAgentDisplay currentAgentConfig = await _databaseService.GetManagedAgentByGuidAsync(SelectedAgent.AgentGuid);
            if (currentAgentConfig == null) { /* ... */ return; }

            var payload = new UiControlAgentPayload { /* ... */ }; // 이전과 동일
            var message = new BrokerMessage { /* ... */ SourceId = UiUserIdentifier }; // 이전과 동일

            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = currentAgentConfig.AgentGuid,
                CorrelationId = correlationIdGuid,
                ActionType = actionType,
                RequesterInfo = $"{CurrentMode} Mode ({UiUserIdentifier})",
                RequestTimestamp = DateTime.UtcNow,
                FinalStatus = "SentToBroker",
                ResultMessage = $"Command (CorrID: {correlationId}) sent to broker."
            };
            try { await _databaseService.LogControlActionAsync(logEntry); /* ... */ } catch { /* ... */ }
            await _brokerClientService.SendMessageAsync(message);
        }
        
        private async Task ExecutePingAgentAsync() 
        {
            if (SelectedAgent == null || _brokerClientService == null || _databaseService == null) { /* ... */ return; }
            // ... (ExecuteMonitorControlAsync와 유사하게 수정, SourceId, RequesterInfo 등) ...
        }

        private async Task ExecuteRequestBrokerStatusAsync() 
        {
            if (_brokerClientService == null) { AddUiLog("[ERROR] BrokerClientService not available."); return; }
            AddUiLog("Requesting broker status and logs...");
            var message = new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = UiUserIdentifier };
            await _brokerClientService.SendMessageAsync(message);
        }

        #region Broker Event Handlers
        private void OnBrokerConnected()
        {
            Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Connected";
                AddUiLog("Successfully connected to Broker Service.");
                RefreshAllCommandStates();
            });
            if (_brokerClientService == null) return; // 방어 코드
            Task.Run(async () => {
                string uiIdentifier = UiUserIdentifier;
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiClientHello, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetInitialAgentList, SourceId = uiIdentifier });
                await _brokerClientService.SendMessageAsync(new BrokerMessage { Type = MessageType.UiRequest_GetBrokerStatus, SourceId = uiIdentifier });
            });
        }

        private void OnBrokerDisconnected()
        {
             Application.Current.Dispatcher.Invoke(() => {
                BrokerConnectionStatus = "Disconnected";
                AddUiLog("Disconnected from Broker Service.");
                foreach(var agent in Agents) { agent.IsOnline = false; agent.CurrentMonitorStatus = "Offline (Broker D/C)"; }
                RefreshAllCommandStates();
             });
        }

        private void OnBrokerMessageReceived(BrokerMessage message) 
        {
            if (_databaseService == null) { AddUiLog("[ERROR] DatabaseService not available to process broker message."); return; }
            // ... (이전 답변의 OnBrokerMessageReceived 로직과 거의 동일하게 유지하되,
            //      UpdateControlActionLogAsync 호출 시 requesterInfo에 CurrentMode.ToString() + " Mode" 전달) ...
             Application.Current.Dispatcher.Invoke(() =>
            {
                try
                {
                    switch (message.Type)
                    {
                        case MessageType.BrokerToUi_ForwardAgentCommandResult:
                            var cmdResultPayload = JsonConvert.DeserializeObject<AgentCommandResultPayload>(message.Payload);
                            if (cmdResultPayload != null && !string.IsNullOrEmpty(message.SourceId))
                            {
                                // ... (UI 업데이트 로직) ...
                                Guid correlationGuid = Guid.TryParse(message.CorrelationId, out var parsedGuid) ? parsedGuid : Guid.Empty;
                                UpdateControlActionLogAsync(correlationGuid, message.SourceId, cmdResultPayload.Success, cmdResultPayload.Message, cmdResultPayload.CurrentMonitorStatus, DateTime.UtcNow, 
                                    null, 
                                    $"{CurrentMode} Mode ({UiUserIdentifier})").ConfigureAwait(false);
                            }
                            break;
                        case MessageType.BrokerToUi_CommandDispatchFailed:
                             var dispatchFailPayload = JsonConvert.DeserializeObject<dynamic>(message.Payload);
                             string reason = dispatchFailPayload?.Message ?? "Unknown dispatch error";
                             string failedTargetAgentId = message.TargetId ?? message.SourceId; 
                             AddUiLog($"[ERROR] Broker dispatch fail [{message.CorrelationId}] for Agent [{failedTargetAgentId}]: {reason}");
                             Guid correlationGuidFail = Guid.TryParse(message.CorrelationId, out var parsedGuidFail) ? parsedGuidFail : Guid.Empty;
                             UpdateControlActionLogAsync(correlationGuidFail, failedTargetAgentId, false, $"Broker Dispatch Failed: {reason}", null, DateTime.UtcNow, 
                                 "FailureAtBroker", 
                                 $"{CurrentMode} Mode ({UiUserIdentifier})").ConfigureAwait(false);
                            break;
                        // --- 나머지 case 문들 (BrokerToUi_InitialAgentList 등) 이전과 동일 ---
                         case MessageType.BrokerToUi_InitialAgentList:
                            var agentListPayload = JsonConvert.DeserializeObject<List<LiveAgentInfoForUi>>(message.Payload);
                            if (agentListPayload != null) { UpdateAgentListFromBroker(agentListPayload, true); AddUiLog($"Rcvd initial list of {agentListPayload.Count} live agents."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated:
                        case MessageType.BrokerToUi_BroadcastAgentStatus:
                            var liveAgentInfo = JsonConvert.DeserializeObject<LiveAgentInfoForUi>(message.Payload);
                            if (liveAgentInfo != null) { UpdateSingleAgentStatus(liveAgentInfo); if(message.Type == MessageType.BrokerToUi_BroadcastAgentRegisteredOrUpdated) AddUiLog($"Agent '{liveAgentInfo.AgentIdProvidedByApp}' registered/updated."); }
                            break;
                        case MessageType.BrokerToUi_BroadcastAgentDisconnected:
                            string disconnectedAgentId = message.SourceId; 
                            var agentToMarkOffline = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == disconnectedAgentId);
                            if (agentToMarkOffline != null) { agentToMarkOffline.IsOnline = false; agentToMarkOffline.CurrentMonitorStatus = "Offline (Disconnected)"; agentToMarkOffline.LastStatusMessageFromAgent = "Disconnected"; AddUiLog($"Agent disconnected: {disconnectedAgentId}"); RefreshAllCommandStates(); }
                            break;
                        case MessageType.BrokerToUi_SendBrokerStatus:
                            var brokerStatusPayload = JsonConvert.DeserializeObject<BrokerStatusInfoPayload>(message.Payload);
                            if (brokerStatusPayload != null) { BrokerStatus.UpdateFromServerPayload(brokerStatusPayload); AddUiLog("Broker status and logs updated."); }
                            break;
                        default: AddUiLog($"Rcvd unhandled msg type '{message.Type}' from Broker. Src: {message.SourceId}"); break;
                    }
                }
                // ... (catch 블록) ...
            });
        }
        
        // UpdateControlActionLogAsync 메서드 시그니처 수정 (correlationId Guid로, requesterInfo string으로)
        private async Task UpdateControlActionLogAsync(Guid correlationId, string agentIdProvidedByApp, 
                                                    bool success, string resultMessage, string finalMonitorStatus, 
                                                    DateTime completedTimestamp, string finalStatusOverride = null, 
                                                    string requesterInfo = null) // requesterInfo 파라미터 추가
        {
            if (_databaseService == null) { AddUiLog("[DB LOG ERROR] DatabaseService not available."); return; }
            // ... (이전 답변의 로직과 동일, logEntry.RequesterInfo = requesterInfo ?? ... 사용) ...
            var agentConfig = Agents.FirstOrDefault(a => a.AgentIdProvidedByApp == agentIdProvidedByApp);
            if (agentConfig == null) { /* ... */ return; }
            string originalActionType = "ControlAction_Unknown"; // TODO: CorrelationId로 원래 ActionType 찾기
            var logEntry = new ControlActionLogEntry
            {
                AgentGuid = agentConfig.AgentGuid,
                CorrelationId = correlationId,
                ActionType = originalActionType, 
                RequestTimestamp = DateTime.UtcNow.AddSeconds(-30), // TODO: 원래 요청 시간 필요
                ExecutionCompletedTimestamp = completedTimestamp,
                FinalStatus = finalStatusOverride ?? (success ? "Success" : "FailureAtAgent"),
                ResultMessage = resultMessage,
                RequesterInfo = requesterInfo ?? $"{CurrentMode} Mode ({UiUserIdentifier})"
            };
            // ... (DB 로깅) ...
             try { await _databaseService.LogControlActionAsync(logEntry); }
             catch (Exception ex) { AddUiLog($"[DB ERROR] Failed to log final status for {agentConfig.AgentName}: {ex.Message}"); }

        }
        
        private void UpdateAgentListFromBroker(List<LiveAgentInfoForUi> liveAgents, bool isInitialLoad) 
        { /* 이전 답변과 동일 */ RefreshAllCommandStates(); }
        private void UpdateSingleAgentStatus(LiveAgentInfoForUi liveInfo) 
        { /* 이전 답변과 동일, 필요시 RefreshAllCommandStates() 호출 */ }

        #endregion

        public void Cleanup() 
        {
            AddUiLog("MainViewModel cleaning up resources...");
            if (_brokerClientService != null)
            {
                _brokerClientService.Connected -= OnBrokerConnected;
                _brokerClientService.Disconnected -= OnBrokerDisconnected;
                _brokerClientService.MessageReceived -= OnBrokerMessageReceived;
                try { Task.Run(async () => await _brokerClientService.DisconnectAsync()).Wait(TimeSpan.FromMilliseconds(500));  } catch { /* ignore */ }
                (_brokerClientService as IDisposable)?.Dispose();
            }
            AddUiLog("MainViewModel cleanup finished.");
        }
    }
}
MainViewModel.cs 주요 변경점 (요약):

생성자 수정: IDatabaseService와 IBrokerClientService 파라미터가 null이어도 예외를 던지지 않고, 내부에서 해당 서비스 사용 시 null 체크를 하도록 변경했습니다. 이렇게 하면 App.xaml.cs에서 UI 테스트를 위해 서비스 없이 MainViewModel을 생성해도 일단 UI가 뜨는 것을 목표로 할 수 있습니다.
커맨드 CanExecute 조건 수정: 서비스가 null일 경우를 고려하여 커맨드의 실행 가능 조건을 수정했습니다.
메서드 내 서비스 사용 시 null 체크: ExecuteLoadAgentsAsync, ExecuteMonitorControlAsync 등 서비스 객체를 사용하는 모든 메서드 시작 부분에 해당 서비스가 null이 아닌지 확인하는 방어 코드를 추가했습니다. (실제로는 생성자에서 null을 받지 않도록 하는 것이 더 좋지만, UI 띄우기 테스트를 위해 임시 허용)
사용자님께 다시 한번 부탁드립니다.

위 수정된 MainViewModel.cs 코드를 프로젝트에 적용합니다.
App.xaml.cs에서 MainViewModel 생성 시 여전히 null 서비스들을 전달하는지 확인합니다. (이전 "극도로 단순화된 App.xaml.cs"를 사용 중이시라면)
만약 App.config 문제가 해결되었다면, App.xaml.cs에서 new DatabaseService()와 new BrokerClientService()를 정상적으로 생성하여 MainViewModel에 전달해야 합니다.
가장 중요한 것은 App.xaml.cs의 InitializeAndRunApplication 메서드 내에서 예외 없이 모든 서비스가 성공적으로 초기화되고, 그 초기화된 서비스 객체들이 MainViewModel 생성자로 올바르게 전달되는 것입니다.

만약 App.config는 확실히 문제가 없다고 판단되시면, 이제 DatabaseService나 BrokerClientService의 생성자 내부에서 어떤 오류가 발생하는지 (예: 특정 설정값 누락, 내부 초기화 로직 오류 등) 확인해야 합니다. 이를 위해서는 각 서비스 생성자 내부에 단계별 로그를 추가하여 디버깅하는 것이 좋습니다.