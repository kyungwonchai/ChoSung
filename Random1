d drop 기능 구현에 있어서 sender를 ListBoxItem으로 캐스팅하는 것은 적절하지 않습니다. sender는 이벤트를 발생시킨 컨트롤이므로, 이 경우에는 ListBox입니다. 드래그 앤 드롭 동작을 수행할 때는 e.OriginalSource를 사용하여 실제로 드래그된 아이템을 찾아야 합니다.

수정된 ListBoxColumns_Drop 이벤트 처리기는 다음과 같이 변경할 수 있습니다:

csharp
Copy code
private void ListBoxColumns_Drop(object sender, DragEventArgs e)
{
    // 드래그된 데이터를 가져옵니다.
    ColumnInfo droppedData = e.Data.GetData(typeof(ColumnInfo)) as ColumnInfo;
    if (droppedData == null)
    {
        return;
    }

    // 드롭 대상을 찾기 위해 마우스 위치에서 가장 가까운 ListBoxItem을 찾습니다.
    var listBoxItem = FindAncestor<ListBoxItem>((DependencyObject)e.OriginalSource);
    if (listBoxItem == null)
    {
        return;
    }

    // 대상 ColumnInfo 객체를 찾습니다.
    ColumnInfo target = listBoxItem.DataContext as ColumnInfo;
    if (target == null || target == droppedData)
    {
        return;
    }

    // 드롭된 데이터와 대상 데이터의 인덱스를 가져옵니다.
    int removedIdx = ListBoxColumns.Items.IndexOf(droppedData);
    int targetIdx = ListBoxColumns.Items.IndexOf(target);

    // 드래그된 아이템을 새 위치에 삽입합니다.
    ColumnsInfo.Remove(droppedData);
    ColumnsInfo.Insert(targetIdx, droppedData);
}
ListBoxColumns_PreviewMouseMove 이벤트 처리기에 대해서도 수정이 필요합니다:

csharp
Copy code
private void ListBoxColumns_PreviewMouseMove(object sender, MouseEventArgs e)
{
    // 마우스를 움직일 때 드래그를 시작합니다.
    if (e.LeftButton == MouseButtonState.Pressed)
    {
        var listBoxItem = FindAncestor<ListBoxItem>((DependencyObject)e.OriginalSource);
        if (listBoxItem != null)
        {
            ColumnInfo draggedData = (ColumnInfo)listBoxItem.DataContext;
            DragDrop.DoDragDrop(listBoxItem, draggedData, DragDropEffects.Move);
        }
    }
}
CheckBox_Checked 이벤트 처리기에서는 설정 창이 닫히면 변경 사항을 반영하도록 로직을 구현해야 합니다. 변경 사항을 즉시 반영하려면 CheckBox의 Checked 및 Unchecked 이벤트에서 적절한 로직을 호출해야 합니다.

csharp
Copy code
private void CheckBox_Checked_Unchecked(object sender, RoutedEventArgs e)
{
    // CheckBox의 상태가 변경되면 호출할 로직
    FunctionA();
}
FunctionA는 컬럼의 순서와 가시성 상태에 따라 메인 윈도우의 GridControl을 업데이트하는 메서드입니다. 이 메서드는 설정 윈도우가 아닌 메인 윈도우에 있어야 하며, 설정 윈도우에서는 메인 윈도우의 FunctionA를 호출할 수 있는 방법을 제공해야 합니다. 예를 들어, 메인 윈도우의 참조를 설정 윈도우에 전달하고, 설정 윈도우에서는 해당 참조를 사용하여 메인 윈도우의 메서드를 호출할 수 있습니다.

csharp
Copy code
public void FunctionA()
{
    // 설정 윈도우에서 변경된 컬럼 정보를 메인 윈도우의 GridControl에 반영하는 로직
}
이렇게 수정하면, 설정 윈도우에서 목록을 드래그 앤 드롭으로 순서를 변경하거나 체크박스를 클릭할 때마다 즉시 메인 윈도우에 반영됩니