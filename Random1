겠습니다. 요청하신 TaskQueue, TaskModel, 그리고 MainViewModel 세 가지 파일의 전체 코드를 주석 포함하여 드리겠습니다. 아래는 각 파일의 코드입니다.

1. TaskQueue.cs
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하며, 작업이 완료되면 다음 작업을 실행합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false;  // 현재 작업이 실행 중인지 여부

    /// <summary>
    /// 작업 큐에 새로운 작업을 추가하고, 현재 작업이 실행 중이 아니면 즉시 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);  // 작업을 큐에 추가

        // 현재 작업이 실행 중이 아니면 즉시 실행
        if (!_isRunning)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 작업 큐의 다음 작업을 실행하는 메서드.
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0)
        {
            _isRunning = false;  // 작업이 완료되었으면 실행 중 상태 해제
            return;
        }

        _isRunning = true;  // 현재 작업 실행 중

        var task = _tasks.Dequeue();  // 큐에서 작업을 가져와 실행
        await task();  // 비동기 작업 실행

        _isRunning = false;  // 작업 완료 후 실행 중 상태 해제
        RunNextTask();  // 다음 작업 실행
    }

    /// <summary>
    /// 모든 작업을 취소하고 작업 큐를 초기화합니다.
    /// </summary>
    public void ClearQueue()
    {
        _tasks.Clear();
        _isRunning = false;
    }
}
2. TaskModel.cs
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.Threading.Tasks;
using System.Windows.Input;
using System.Windows.Media;

/// <summary>
/// TaskModel은 각 작업의 상태를 관리하며, 시퀀스에 따라 함수들을 실행합니다.
/// 작업이 완료되면 상태를 변경하고, 도형 색상을 업데이트합니다.
/// </summary>
public class TaskModel : ViewModelBase
{
    public string MAG_NO { get; set; }
    public string PO_NO { get; set; }

    // 함수와 도형 상태를 한 곳에서 관리
    public ObservableCollection<FunctionStatus> FunctionStatusList { get; set; }

    public string Status { get; set; }
    public ICommand ResumeCommand { get; }

    private TaskQueue _taskQueue;

    public TaskModel(LogEntry logEntry, TaskQueue taskQueue)
    {
        MAG_NO = logEntry.MAG_NO;
        PO_NO = logEntry.PO_NO;
        _taskQueue = taskQueue;

        // 함수 상태 초기화
        FunctionStatusList = new ObservableCollection<FunctionStatus>();

        Status = "Pending";  // 처음엔 대기 상태
        ResumeCommand = new RelayCommand(ResumeTask);

        // 함수 추가 (예시로 3개의 함수)
        AddFunction("Task A", ExecuteTaskA, Brushes.Gray);
        AddFunction("Task B", ExecuteTaskB, Brushes.Gray);
        AddFunction("Task C", ExecuteTaskC, Brushes.Gray);
    }

    /// <summary>
    /// 함수 이름, 작업, 도형 색상을 함께 관리
    /// </summary>
    public void AddFunction(string functionName, Func<Task> task, Brush initialColor)
    {
        var functionStatus = new FunctionStatus(functionName, task, initialColor);
        FunctionStatusList.Add(functionStatus);  // 도형과 상태를 함께 관리
    }

    /// <summary>
    /// 특정 행부터 작업을 재개하는 함수 (Resume 버튼 클릭 시 호출)
    /// </summary>
    public async void ResumeTask()
    {
        Status = "Running";  // 상태를 Running으로 변경
        _taskQueue.EnqueueTask(async () => await ExecuteTaskSequence());  // 작업을 큐에 등록
    }

    /// <summary>
    /// 전체 작업 시퀀스를 실행
    /// </summary>
    public async Task ExecuteTaskSequence()
    {
        foreach (var functionStatus in FunctionStatusList)
        {
            functionStatus.UpdateStatus(Brushes.SkyBlue);  // 실행 중
            await functionStatus.Task();  // 비동기 작업 실행
            functionStatus.UpdateStatus(Brushes.Green);  // 완료됨
        }
        Status = "Completed";  // 전체 작업 완료
    }

    // Task A 실행
    private async Task ExecuteTaskA()
    {
        await Task.Delay(1000);  // 1초 대기 (작업 시뮬레이션)
    }

    // Task B 실행
    private async Task ExecuteTaskB()
    {
        await Task.Delay(1000);
    }

    // Task C 실행
    private async Task ExecuteTaskC()
    {
        await Task.Delay(1000);
    }
}

/// <summary>
/// FunctionStatus는 각 함수의 상태와 이름을 관리하는 클래스입니다.
/// </summary>
public class FunctionStatus : ViewModelBase
{
    public string FunctionName { get; set; }
    public Func<Task> Task { get; set; }
    public Brush StatusColor { get; set; }

    public FunctionStatus(string functionName, Func<Task> task, Brush statusColor)
    {
        FunctionName = functionName;
        Task = task;
        StatusColor = statusColor;
    }

    /// <summary>
    /// 도형의 색상을 업데이트하여 상태를 나타냅니다.
    /// </summary>
    public void UpdateStatus(Brush newColor)
    {
        StatusColor = newColor;
        OnPropertyChanged(nameof(StatusColor));  // UI 업데이트
    }
}
3. MainViewModel.cs
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;
using System.Windows;

public class MainViewModel : ViewModelBase
{
    // 작업 목록을 저장하는 ObservableCollection
    public ObservableCollection<TaskModel> TaskList { get; set; }

    // 파일 처리기(FileProcessor) 인스턴스 (새 파일을 감지하여 작업 큐에 추가)
    private FileProcessor _fileProcessor;

    // 작업을 순차적으로 실행하는 TaskQueue
    private TaskQueue _taskQueue;

    // 명령어: 모든 작업 일시정지
    public ICommand PauseAllCommand { get; }

    // 명령어: 모든 작업 재개
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        TaskList = new ObservableCollection<TaskModel>();

        // 작업 큐 초기화
        _taskQueue = new TaskQueue();

        // 파일 프로세서를 초기화하고 파일 감지 처리
        _fileProcessor = new FileProcessor(@"C:\PROD_FILE_LOG", OnLogEntryDetected);
        _fileProcessor.StartProcessing(); // 파일 감지 시작

        // 명령어 설정
        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);
    }

    /// <summary>
    /// 새로운 로그 파일이 감지되었을 때 호출됩니다.
    /// LogEntry 데이터를 기반으로 TaskModel을 생성하고 작업 큐에 추가합니다.
    /// </summary>
    private void OnLogEntryDetected(LogEntry logEntry)
    {
        Application.Current.Dispatcher.Invoke(() =>
        {
            var task = new TaskModel(logEntry, _taskQueue);
            TaskList.Add(task);  // UI 스레드에서 작업 목록에 추가

            // 첫 번째 작업이 추가되면 자동으로 실행
            if (TaskList.Count == 1)
            {
                task.ResumeTask();
            }
        });
    }

    /// <summary>
    /// 모든 작업을 일시정지합니다.
    /// </summary>
    private void PauseAllTasks()
    {
        foreach (var task in TaskList)
        {
            task.Status = "Paused";
        }
        _taskQueue.ClearQueue();  // 작업 큐 비우기
    }

    /// <summary>
    /// 모든 작업을 재개합니다.
    /// </summary>
    private void ResumeAllTasks()
    {
        foreach (var task in TaskList)
        {
            task.ResumeTask();  // 각 작업 재개
        }
    }
}
설명:
TaskQueue.cs:

각 작업을 순차적으로 실행하며, 완료되면 다음 작업을 실행합니다.
작업을 모두 비우거나, 실행 중인 작업이 없을 때 다음 작업을 시작합니다.
TaskModel.cs:

각 작업의 상태와 도형 상태를 관리하며, 비동기 작업을 실행합니다.
FunctionStatus 클래스는 각 함수의 이름과 상태를 관리합니다.
MainViewModel.cs:

파일을 감지하고 작업을 추가하며, 각 작업을 실행하는 역할을 합니다.
모든 작업을 일시정지하거나 재개할 수 있는 기능을 제공합니다.
이 코드가 요구하신 내용을 반영한 최종 코드입니다. 각 파일에 대한 전체적인 구조를 담고 있으니, 수정할 부분이 있으면 말씀해 주시면 추가로 도와드리겠습니