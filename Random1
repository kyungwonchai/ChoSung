, 죄송합니다. 요청하신 로그 삭제 기능이 누락되었군요.

이중 실행 방지와 오래된 로그 파일 삭제 기능이 모두 포함된 App.xaml.cs 전체 코드를 다시 정리해서 드리겠습니다. 이 코드로 교체하시면 두 기능 모두 정상적으로, 그리고 조용히 동작합니다.

App.xaml.cs 최종 버전 (이중 실행 방지 + 로그 삭제 포함)
C#

// 필요한 using 문들입니다.
using System;
using System.Configuration; // App.config 설정을 읽기 위해 추가
using System.IO;            // 파일 및 디렉토리 작업을 위해 추가
using System.Linq;          // Linq 쿼리를 사용하기 위해 추가
using System.Threading;     // Mutex를 사용하기 위해 추가
using System.Windows;

// 사용자님의 프로젝트 네임스페이스입니다.
namespace SAgentM.App 
{
    /// <summary>
    /// App.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class App : Application
    {
        // 이중 실행 방지를 위한 Mutex 변수
        private Mutex _mutex;
        private const string MutexName = "Global\\SAgentMApp_Mutex_UniqueId_20250526";

        /// <summary>
        /// 애플리케이션 시작 지점입니다.
        /// </summary>
        protected override void OnStartup(StartupEventArgs e)
        {
            // --- ▼ 1. 이중 실행 방지 (가장 먼저 수행) ▼ ---
            bool createdNew;
            _mutex = new Mutex(true, MutexName, out createdNew);

            if (!createdNew)
            {
                // 이미 실행 중인 경우, 메시지 박스를 표시하고 조용히 종료합니다.
                MessageBox.Show("SAgentM 에이전트가 이미 실행 중입니다.", "실행 확인", MessageBoxButton.OK, MessageBoxImage.Information);
                Application.Current.Shutdown();
                return; // 시작 프로세스를 중단합니다.
            }

            // --- ▼ 2. 오래된 로그 파일 삭제 (조용히 수행) ▼ ---
            try
            {
                // App.config에서 로그 경로 설정 가져오기 (없으면 기본값 사용)
                string logFilePattern = ConfigurationManager.AppSettings["LogFilePath"] ?? "Logs_SAgentM\\SAgentM_App_.log";
                string baseDir = AppDomain.CurrentDomain.BaseDirectory;
                string fullLogPathPattern = Path.Combine(baseDir, logFilePattern);
                string logDirectory = Path.GetDirectoryName(fullLogPathPattern);

                if (!string.IsNullOrEmpty(logDirectory) && Directory.Exists(logDirectory))
                {
                    int daysToKeep = 3; // 3일보다 오래된 로그를 삭제합니다.
                    DateTime cutoffDate = DateTime.Now.Date.AddDays(-daysToKeep);
                    string fileNameWithoutDate = Path.GetFileNameWithoutExtension(logFilePattern).TrimEnd('_');
                    string fileExtension = Path.GetExtension(logFilePattern);
                    string searchPattern = $"{fileNameWithoutDate}_*{fileExtension}";

                    // 로그 디렉토리에서 패턴에 맞는 모든 파일을 가져옵니다.
                    var logFiles = Directory.GetFiles(logDirectory, searchPattern)
                                            .Select(filePath => new FileInfo(filePath))
                                            .ToList();

                    foreach (var logFile in logFiles)
                    {
                        // 파일 이름에서 날짜 부분을 추출합니다. (예: SAgentM_App_20250523.log -> 20250523)
                        string datePart = logFile.Name.Replace(fileNameWithoutDate + "_", "").Replace(fileExtension, "");
                        if (DateTime.TryParseExact(datePart, "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture, System.Globalization.DateTimeStyles.None, out DateTime fileDate))
                        {
                            // 파일 날짜가 보관 기간보다 오래되었으면 삭제합니다.
                            if (fileDate.Date < cutoffDate)
                            {
                                try { logFile.Delete(); }
                                catch { /* 파일 삭제 실패 시 오류를 무시하고 계속 진행 */ }
                            }
                        }
                    }
                }
            }
            catch
            {
                // 로그 삭제 과정에서 어떤 오류가 발생하든 앱 시작에 영향을 주지 않도록 무시합니다.
            }

            // --- ▼ 3. 모든 사전 작업 완료 후, 기본 앱 초기화 수행 ▼ ---
            base.OnStartup(e);

            // 여기에 기존의 메인 윈도우 생성 및 표시 코드를 유지하시면 됩니다.
            // 예: 
            // MainWindow mainWindow = new MainWindow();
            // mainWindow.Show();
        }

        /// <summary>
        /// 애플리케이션 종료 지점입니다.
        /// </summary>
        protected override void OnExit(ExitEventArgs e)
        {
            // 앱이 종료될 때 사용하던 Mutex를 반드시 해제합니다.
            _mutex?.ReleaseMutex();
            _mutex?.Close();

            base.OnExit(e);