이제 요구하신 대로 BaudRate는 고정으로 두고, 포트 설정만 2개까지 저장하는 방식으로 수정하겠습니다. 그리고 설정창을 열었을 때 이전에 저장된 설정이 ComboBox에 자동으로 표시되도록 하겠습니다.

1. App.config (COM 포트 설정을 저장)
App.config는 이전 설정과 같이 사용합니다. 여기에서는 두 개의 포트만 저장합니다.

xml
코드 복사
<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <appSettings>
    <!-- COM 포트 설정 -->
    <add key="ComPort1" value="COM3"/>
    <add key="ComPort2" value="COM4"/>
    <add key="BaudRate" value="9600"/>
  </appSettings>
</configuration>
2. Settings.cs (COM 포트 설정을 저장할 클래스)
이 클래스는 두 개의 포트 이름을 저장할 수 있도록 수정됩니다.

csharp
코드 복사
public class Settings
{
    public string Port1Name { get; set; }  // 첫 번째 포트 이름
    public string Port2Name { get; set; }  // 두 번째 포트 이름
    public int BaudRate { get; set; } = 9600;  // 고정된 BaudRate
}
3. SettingsManager.cs (설정 저장 및 불러오기 클래스)
설정 저장 시 두 개의 COM 포트를 저장하도록 변경합니다.

csharp
코드 복사
using System;
using System.Configuration;

public static class SettingsManager
{
    // App.config에서 COM 포트 설정을 불러오는 함수
    public static Settings LoadSettings()
    {
        try
        {
            // App.config에서 두 개의 포트 이름과 BaudRate를 불러옴
            string port1Name = ConfigurationManager.AppSettings["ComPort1"];
            string port2Name = ConfigurationManager.AppSettings["ComPort2"];
            string baudRateString = ConfigurationManager.AppSettings["BaudRate"];
            int baudRate = int.Parse(baudRateString);

            return new Settings
            {
                Port1Name = port1Name,
                Port2Name = port2Name,
                BaudRate = baudRate
            };
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 불러오기 실패: {ex.Message}");
            return null;
        }
    }

    // App.config에 COM 포트 설정을 저장하는 함수
    public static void SaveSettings(Settings settings)
    {
        try
        {
            // 현재 설정 파일을 열어 설정을 변경
            var config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);

            // 설정 값을 수정
            config.AppSettings.Settings["ComPort1"].Value = settings.Port1Name;
            config.AppSettings.Settings["ComPort2"].Value = settings.Port2Name;
            config.AppSettings.Settings["BaudRate"].Value = settings.BaudRate.ToString();

            // 변경된 설정을 저장
            config.Save(ConfigurationSaveMode.Modified);
            ConfigurationManager.RefreshSection("appSettings");

            msgvs.Instance.LogT5($"설정 저장 완료: {settings.Port1Name}, {settings.Port2Name}, BaudRate {settings.BaudRate}");
        }
        catch (Exception ex)
        {
            msgvs.Instance.LogT5($"설정 저장 실패: {ex.Message}");
        }
    }
}
4. ComPortConfigWindow.xaml.cs (설정 창에서 이전 설정 표시 및 저장)
COM 포트 설정 창에서 이전 설정 값을 ComboBox에 표시하고, 두 개의 포트를 저장할 수 있도록 수정된 코드입니다.

ComPortConfigWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;

public partial class ComPortConfigWindow : Window
{
    public string SelectedPortName { get; private set; } // 선택한 포트 이름
    public int SelectedBaudRate { get; private set; } = 9600; // BaudRate는 고정값

    private Settings _currentSettings;

    public ComPortConfigWindow()
    {
        InitializeComponent();
        LoadAvailablePorts();
        LoadCurrentSettings();
    }

    // 사용 가능한 COM 포트를 불러오는 함수
    private void LoadAvailablePorts()
    {
        var ports = SerialPort.GetPortNames();
        PortComboBox.ItemsSource = ports;

        if (ports.Length > 0)
        {
            PortComboBox.SelectedIndex = 0; // 기본값 설정
        }
    }

    // 이전에 저장된 포트 설정을 불러와서 ComboBox에 적용
    private void LoadCurrentSettings()
    {
        _currentSettings = SettingsManager.LoadSettings();

        if (_currentSettings != null)
        {
            // 첫 번째 포트와 두 번째 포트를 ComboBox에 설정
            PortComboBox1.Text = _currentSettings.Port1Name;
            PortComboBox2.Text = _currentSettings.Port2Name;

            // BaudRate는 고정값이므로 ComboBox 설정 불필요
        }
    }

    // 설정 버튼 클릭 시 처리
    private void OnSetButtonClick(object sender, RoutedEventArgs e)
    {
        if (!string.IsNullOrEmpty(PortComboBox1.Text) && !string.IsNullOrEmpty(PortComboBox2.Text))
        {
            // 사용자가 선택한 포트 저장
            SelectedPortName = PortComboBox1.SelectedItem.ToString();
            SelectedBaudRate = _currentSettings.BaudRate;

            // 설정값 저장
            _currentSettings.Port1Name = PortComboBox1.SelectedItem.ToString();
            _currentSettings.Port2Name = PortComboBox2.SelectedItem.ToString();
            SettingsManager.SaveSettings(_currentSettings);

            this.DialogResult = true;
            this.Close();
        }
        else
        {
            MessageBox.Show("두 개의 COM 포트를 선택해주세요.");
        }
    }
}
ComPortConfigWindow.xaml
xml
코드 복사
<Window x:Class="YourNamespace.ComPortConfigWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="COM 포트 설정" Height="200" Width="400">
    <Grid>
        <!-- 첫 번째 COM 포트를 선택하는 ComboBox -->
        <ComboBox x:Name="PortComboBox1" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Margin="10" />
        <!-- 두 번째 COM 포트를 선택하는 ComboBox -->
        <ComboBox x:Name="PortComboBox2" HorizontalAlignment="Left" VerticalAlignment="Top" Width="120" Margin="10,50,0,0" />
        <!-- BaudRate는 고정이므로 별도의 선택 없이 하드코딩됨 -->
        <Button Content="설정" HorizontalAlignment="Right" VerticalAlignment="Bottom" Width="100" Height="30" Click="OnSetButtonClick"/>
    </Grid>
</Window>
5. MainViewModel.cs (COM 포트 설정 불러오기 및 적용)
이제 COM 포트 설정을 불러오고, 설정창에서 사용자가 설정을 완료하면 이를 저장하도록 수정된 코드입니다.

csharp
코드 복사
public class MainViewModel : ViewModelBase
{
    private ComPortMergeOI _comPort;
    private bool _isComPortConfigured = false;

    public ICommand OpenConfigCommand { get; set; }

    public MainViewModel()
    {
        OpenConfigCommand = new RelayCommand(OpenConfigWindow);

        // 프로그램 시작 시 설정을 불러옴
        LoadComPortSettings();
    }

    // App.config에서 COM 포트 설정을 불러오는 함수
    private void LoadComPortSettings()
    {
        var settings = SettingsManager.LoadSettings();

        if (settings != null)
        {
            try
            {
                // ComPortMergeOI 인스턴스 생성 및 포트 열기
                _comPort = new ComPortMergeOI(settings.Port1Name, settings.BaudRate);
                _comPort.OpenPort();
                _isComPortConfigured = true;
                msgvs.Instance.LogT5($"COM 포트 {settings.Port1Name} 열림");
            }
            catch (Exception ex)
            {
                msgvs.Instance.LogT5($"포트 열기 오류: {ex.Message}");
                OpenConfigWindow(); // 설정된 포트가 잘못되었을 경우 설정창을 띄움
            }
        }
        else
        {
            msgvs.Instance.LogT5("COM 포트 설정이 없습니다.");
            OpenConfigWindow(); // 설정이 없을 경우 설정창을 띄움
        }
    }

    // 설정창을 열고 설정을 저장하는 함수
    private void OpenConfigWindow()
    {
        var configWindow = new ComPortConfigWindow(); // 설정창 인스턴스
        if (configWindow.ShowDialog() == true)
        {
            string portName = configWindow.SelectedPortName;
            int baudRate = configWindow.SelectedBaudRate;

            _comPort = new ComPortMergeOI(portName, baudRate);
            _comPort.OpenPort();
            _isComPortConfigured = true;

            msgvs.Instance.LogT5($"COM 포트 {portName} 설정 및 저장 완료");
        }
    }
}
설명:
설정 저장 및 불러오기: 이제 두 개의 포트만 저장하며, 프로그램 실행 시 해당 포트를 불러옵니다. BaudRate는 고정