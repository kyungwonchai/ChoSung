는 요청하신 모든 에러를 캐치하고, 일부 에러는 넘기되 치명적인 에러 발생 시 Application.Exit()로 프로그램 종료하도록 수정된 전체 코드입니다.

수정 내용
전역 예외 처리 추가:

AppDomain.CurrentDomain.UnhandledException와 TaskScheduler.UnobservedTaskException 이벤트를 활용하여 처리되지 않은 예외를 전역적으로 캐치.
치명적인 에러일 경우 Application.Current.Shutdown()으로 프로그램 종료.
에러 발생 시 로그 추가:

발생한 에러는 리스트박스(StatusListBox)와 디버그 창에 기록.
try-catch로 에러 처리:

모든 주요 작업(StartProcessingAsync, GetNewRows, UploadToDatabaseAsync)에 try-catch를 추가하여 예외를 캐치.
전체 코드 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace RouterVisionInspGather
{
    public partial class MainWindow : Window
    {
        private readonly List<string> _ipAddresses; // DB에서 가져온 IP 리스트
        private readonly Dictionary<string, DateTime> _lastUploadedTimes = new Dictionary<string, DateTime>(); // IP별 마지막 업로드 시간
        private bool _isRunning = false; // 현재 작업 실행 상태 플래그

        public MainWindow()
        {
            InitializeComponent();

            // 전역 예외 처리 등록
            AppDomain.CurrentDomain.UnhandledException += OnUnhandledException;
            TaskScheduler.UnobservedTaskException += OnUnobservedTaskException;

            try
            {
                // DB에서 IP 리스트와 마지막 업로드 시간 초기화
                _ipAddresses = GetIpAddressesFromDatabase();
                AddLog($"가져온 IP 목록: {string.Join(", ", _ipAddresses)}");

                InitializeLastUploadedTimes();
                AddLog("IP별 마지막 업로드 시간 초기화 완료.");

                // 프로그램 시작 시 작업 반복 실행
                _ = StartProcessingLoopAsync();
            }
            catch (Exception ex)
            {
                HandleCriticalError(ex, "초기화 중 치명적인 에러 발생");
            }
        }

        /// <summary>
        /// 작업을 1분 간격으로 반복 실행
        /// </summary>
        private async Task StartProcessingLoopAsync()
        {
            while (true) // 무한 반복
            {
                if (!_isRunning)
                {
                    _isRunning = true;

                    try
                    {
                        await StartProcessingAsync(); // 작업 실행
                    }
                    catch (Exception ex)
                    {
                        AddLog($"작업 중 에러 발생: {ex.Message}");
                    }
                    finally
                    {
                        _isRunning = false;
                    }
                }

                // 1분 대기
                await Task.Delay(60000);
            }
        }

        /// <summary>
        /// 모든 IP에 대해 파일 처리 작업 시작
        /// </summary>
        private async Task StartProcessingAsync()
        {
            foreach (var ip in _ipAddresses)
            {
                AddLog($"IP {ip} 처리 중...");

                try
                {
                    // 해당 IP에 대한 마지막 업로드 시간 가져오기
                    var lastUploadedTime = _lastUploadedTimes[ip];

                    // 파일 처리
                    var processor = new FileProcessor(lastUploadedTime, ip);
                    var newRows = processor.GetNewRows($@"\\{ip}\Result");

                    if (newRows.Any())
                    {
                        var uploader = new DatabaseUploader();
                        await uploader.UploadToDatabaseAsync(newRows);

                        AddLog($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");

                        // 마지막 업로드 시간 갱신
                        _lastUploadedTimes[ip] = newRows.Max(row => (DateTime)row["InspectionTime"]);
                    }
                    else
                    {
                        AddLog($"IP {ip}: 새로운 데이터 없음.");
                    }
                }
                catch (Exception ex)
                {
                    AddLog($"IP {ip} 처리 중 에러 발생: {ex.Message}");
                }
            }
        }

        /// <summary>
        /// DB에서 IP 리스트를 가져오는 함수
        /// </summary>
        private List<string> GetIpAddressesFromDatabase()
        {
            try
            {
                const string query = "SELECT DISTINCT IPAddress FROM IpTable"; // IP 저장 테이블
                var ipList = new List<string>();

                using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
                {
                    connection.Open();
                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            ipList.Add(reader.GetString(0)); // 첫 번째 열에서 IP 주소 가져오기
                        }
                    }
                }

                return ipList;
            }
            catch (Exception ex)
            {
                HandleCriticalError(ex, "DB에서 IP 리스트를 가져오는 중 치명적인 에러 발생");
                return new List<string>();
            }
        }

        /// <summary>
        /// DB에서 IP별로 마지막 업로드된 InspectionTime 초기화
        /// </summary>
        private void InitializeLastUploadedTimes()
        {
            try
            {
                const string query = "SELECT IPAddress, MAX(InspectionTime) AS LastInspectionTime FROM YourTable GROUP BY IPAddress";

                using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
                {
                    connection.Open();
                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var ipAddress = reader.GetString(0);
                            var lastTime = reader.IsDBNull(1) ? DateTime.Now.AddYears(-1) : reader.GetDateTime(1);
                            _lastUploadedTimes[ipAddress] = lastTime;
                        }
                    }
                }

                // 없는 IP는 기본값으로 1년 전 시간 추가
                foreach (var ip in _ipAddresses)
                {
                    if (!_lastUploadedTimes.ContainsKey(ip))
                    {
                        _lastUploadedTimes[ip] = DateTime.Now.AddYears(-1);
                    }
                }
            }
            catch (Exception ex)
            {
                HandleCriticalError(ex, "IP별 마지막 업로드 시간을 초기화하는 중 치명적인 에러 발생");
            }
        }

        /// <summary>
        /// 리스트박스에 로그를 추가하고, 50개까지만 유지합니다.
        /// </summary>
        private void AddLog(string message)
        {
            string log = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}";

            Application.Current.Dispatcher.Invoke(() =>
            {
                // 리스트박스에 로그 추가
                StatusListBox.Items.Add(log);

                // 리스트박스 항목이 50개를 초과하면 오래된 항목 삭제
                while (StatusListBox.Items.Count > 50)
                {
                    StatusListBox.Items.RemoveAt(0); // 가장 오래된 항목 삭제
                }
            });

            // 디버그 출력
            Debug.WriteLine(log);
        }

        /// <summary>
        /// 치명적인 에러 처리
        /// </summary>
        private void HandleCriticalError(Exception ex, string contextMessage)
        {
            AddLog($"치명적인 에러 발생: {contextMessage}");
            AddLog($"에러 메시지: {ex.Message}");
            AddLog("프로그램을 종료합니다.");
            Debug.WriteLine($"Unhandled Exception: {ex}");

            // 프로그램 종료
            Application.Current.Shutdown();
        }

        /// <summary>
        /// 전역 예외 처리 - UnhandledException
        /// </summary>
        private void OnUnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            if (e.ExceptionObject is Exception ex)
            {
                HandleCriticalError(ex, "UnhandledException 발생");
            }
        }

        /// <summary>
        /// 전역 예외 처리 - UnobservedTaskException
        /// </summary>
        private void OnUnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e)
        {
            e.SetObserved(); // 예외를 처리했다고 표시
            HandleCriticalError(e.Exception, "UnobservedTaskException 발생");
        }
    }
}
변경 내용 요약
전역 예외 처리:

OnUnhandledException 및 OnUnobservedTaskException 이벤트를 통해 치명적인 에러를 캐치.
치명적인 에러 처리:

HandleCriticalError 메서드로 치명적인 에러 발생 시 로그를 남기고 프로그램 종료.
리스트박스 항목 제한:

AddLog에서 리스트박스 항목 수를 50개로 제한.
모든 주요 작업 try-catch 추가:

각 메서드에서 예외를 캐치하고 로그를 남기거나 치명적인 에러 처리.
결과
정상 동작
작업 진행 중 발생하는 경미한 에러는 리스트박스와 디버그 창에 기록되며 프로그램은 계속 실행.
치명적인 에러 발생 시