using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";
        private static readonly string systemId = "시스템 아이디";
        private static readonly string accessToken = "토큰 값";

        public static async Task<(string, string)> SendMail(string userId, string recipient, string subject, string body, string senderEmailAddress, List<string> recipientEmailAddresses, string attachmentPath)
        {
            if (string.IsNullOrEmpty(recipient) || string.IsNullOrEmpty(subject) || string.IsNullOrEmpty(body))
            {
                Console.WriteLine("Some required values are missing. Please provide recipient, subject, and body.");
                return (null, null);
            }

            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var formDataContent = new MultipartFormDataContent();

            // 수신자 이메일 주소 추가
            formDataContent.Add(new StringContent(recipient), "to");

            // 이메일 제목 추가
            formDataContent.Add(new StringContent(subject), "subject");

            // 이메일 내용 추가
            formDataContent.Add(new StringContent(body), "body");

            // 발신인 이메일 주소 추가
            formDataContent.Add(new StringContent(senderEmailAddress), "sender.emailAddress");
            formDataContent.Add(new StringContent("TO"), "sender.recipientType");

            // 수신자 목록 추가
            foreach (var recipientEmail in recipientEmailAddresses)
            {
                formDataContent.Add(new StringContent(recipientEmail), "recipients[].emailAddress");
                formDataContent.Add(new StringContent("TO"), "recipients[].recipientType");
            }

            // 첨부 파일 추가
            if (!string.IsNullOrEmpty(attachmentPath))
            {
                byte[] fileBytes = System.IO.File.ReadAllBytes(attachmentPath);
                var fileContent = new ByteArrayContent(fileBytes);
                formDataContent.Add(fileContent, "attachment", "attachment.pdf");
            }

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var response = await client.PostAsync(requestUrl, formDataContent);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;
                string sendResult = result.result;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");
                Console.WriteLine($"전송 결과: {sendResult}");

                return (mailId, sendResult);
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string errorCode = result.errorCode;
                string errorMessage = result.errorMessage;

                Console.WriteLine("메일 발송에 실패하였습니다.");
                Console.WriteLine($"에러 코드: {errorCode}");
                Console.WriteLine($"에러 메시지: {errorMessage}");

                return (null, null);
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;
       
