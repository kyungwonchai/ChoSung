 문제는 TableView_CellValueChanged 이벤트가 발생할 때 바로 이전 셀의 값이 데이터베이스에 반영되지 않는 것과 관련이 있습니다. TableView_CellValueChanged 이벤트는 현재 셀의 값이 변경될 때 발생하므로, 이전 셀의 변경 사항이 반영되지 않는 경우가 발생할 수 있습니다.

이를 해결하기 위해서는 RowUpdated 이벤트를 사용하여 데이터베이스에 변경 사항을 즉시 반영할 수 있습니다. 이를 위해 DevExpress의 GridControl과 TableView에서 제공하는 기능을 활용하겠습니다.

1. XAML 설정
XAML 파일은 변경할 필요가 없습니다. 기존의 설정을 그대로 사용합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <TextBox Name="g_searchTextBox1" Width="200" Margin="10" VerticalAlignment="Top" HorizontalAlignment="Left"/>
        <Button Name="g_loadButton1" Content="Load Data" Width="100" Height="30" Margin="220,10,0,0" VerticalAlignment="Top" HorizontalAlignment="Left" Click="LoadButton_Click"/>
        <dxg:GridControl Name="g_gridControl1" AutoGenerateColumns="AddNew" ItemsSource="{Binding}">
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True" CellValueChanged="TableView_CellValueChanged"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
    </Grid>
</Window>
2. C# 코드 설정
C# 코드를 수정하여 RowUpdated 이벤트를 사용하도록 하겠습니다.

csharp
코드 복사
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows;
using System.Windows.Controls;
using DevExpress.Xpf.Grid;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DataTable g_dataTable1;
        private SqlDataAdapter g_dataAdapter1;
        private SqlCommandBuilder g_commandBuilder1;
        private string g_connectionString1 = "your_connection_string_here";
        private string g_selectQuery1 = "SELECT * FROM Table_UFS_DRAM";

        public MainWindow()
        {
            InitializeComponent();
            g_searchTextBox1.TextChanged += SearchTextBox_TextChanged;
        }

        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            LoadData();
        }

        private void LoadData()
        {
            using (SqlConnection g_connection1 = new SqlConnection(g_connectionString1))
            {
                g_dataAdapter1 = new SqlDataAdapter(g_selectQuery1, g_connection1);
                g_commandBuilder1 = new SqlCommandBuilder(g_dataAdapter1);

                g_dataTable1 = new DataTable();
                g_dataAdapter1.Fill(g_dataTable1);

                // 명령을 명시적으로 설정
                g_dataAdapter1.UpdateCommand = g_commandBuilder1.GetUpdateCommand();
                g_dataAdapter1.InsertCommand = g_commandBuilder1.GetInsertCommand();
                g_dataAdapter1.DeleteCommand = g_commandBuilder1.GetDeleteCommand();

                g_gridControl1.ItemsSource = g_dataTable1.DefaultView;
            }
        }

        private void TableView_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            UpdateDatabase();
        }

        private void UpdateDatabase()
        {
            try
            {
                using (SqlConnection g_connection1 = new SqlConnection(g_connectionString1))
                {
                    g_dataAdapter1.UpdateCommand.Connection = g_connection1;
                    g_dataAdapter1.InsertCommand.Connection = g_connection1;
                    g_dataAdapter1.DeleteCommand.Connection = g_connection1;

                    g_connection1.Open();
                    g_dataAdapter1.Update(g_dataTable1);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error updating database: " + ex.Message);
            }
        }

        private void SearchTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            if (g_dataTable1 != null)
            {
                string g_filter1 = g_searchTextBox1.Text;
                (g_gridControl1.ItemsSource as DataView).RowFilter = $"ColumnName LIKE '%{g_filter1}%'";
            }
        }

        private void TableView_RowUpdated(object sender, RowEventArgs e)
        {
            UpdateDatabase();
        }
    }
}
주요 변경 사항
TableView_RowUpdated 이벤트 핸들러를 추가하여 각 행이 업데이트될 때마다 UpdateDatabase 메서드를 호출합니다.
InitializeComponent()에서 TableView.RowUpdated 이벤트를 연결합니다.
초기화 코드
csharp
코드 복사
public MainWindow()
{
    InitializeComponent();
    g_searchTextBox1.TextChanged += SearchTextBox_TextChanged;
    (g_gridControl1.View as TableView).RowUpdated += TableView_RowUpdated;
}
이 변경 사항을 통해 셀의 값을 변경하고 다른 셀로 이동할 때마다 즉시 데이터베이스에 변경 사항이 반영됩니다. 이렇게 하면 사용자가 셀을 수정할 때마다 이전 셀의 값이 제대로 업데이트되는지 확인할 수 있습니다.