네, 알겠습니다. 구서버의 여러 서비스를 신서버로 옮기면서, 도커와 Nginx를 사용해 깔끔한 구조를 만드는 전체 과정을 처음부터 끝까지 상세하게 안내해 드리겠습니다.

이 가이드는 apt update만 완료된 깨끗한 Ubuntu 서버를 기준으로 합니다.

최종 목표:

http://서버IP/monitor → 리액트 모니터링 앱 표시

http://서버IP/smd → 리액트 SMD 앱 표시

SMD 앱 내부에서 /api/로 요청 → 플라스크 API 서버와 통신

1단계: 기본 환경 설치 (Docker & Docker Compose)
새 서버에 접속해서 가장 먼저 도커와 도커 컴포즈를 설치합니다.

1. 도커 설치
아래 명령어를 순서대로 터미널에 입력하세요.

Bash

# 1. 필요 패키지 설치
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

# 2. 도커 공식 GPG 키 추가
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# 3. 도커 저장소 설정
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

# 4. 도커 엔진 설치
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io
2. sudo 없이 docker 명령어 사용 설정
Bash

sudo usermod -aG docker ${USER}
?? 중요: 위 명령어 실행 후, SSH 접속을 완전히 끊었다가 다시 접속해야 적용됩니다.

3. 도커 컴포즈(Docker Compose) 설치
최신 버전의 도커는 플러그인 형태로 컴포즈를 설치합니다.

Bash

sudo apt-get install -y docker-compose-plugin
4. 설치 확인
아래 두 명령어를 실행해서 버전 정보가 잘 나오면 성공입니다.

Bash

docker --version
docker compose version
2단계: 새 서버에 프로젝트 구조 만들기
모든 프로젝트를 관리할 최상위 폴더와 그 안에 3개의 하위 폴더를 만듭니다.

project-monitor: 간단한 리액트 앱용

project-smd: 리액트 + 플라스크 API 앱용

nginx-proxy: 모든 트래픽을 분배할 Nginx용

Bash

# 홈 디렉터리로 이동
cd ~

# 전체 프로젝트 폴더 생성
mkdir docker-projects
cd docker-projects

# 각 프로젝트 및 Nginx 폴더 생성
mkdir project-monitor project-smd nginx-proxy
이 단계가 끝나면 폴더 구조는 아래와 같습니다.

/home/your_user/docker-projects/
├── project-monitor/
├── project-smd/
└── nginx-proxy/
3단계: 앱 #1 마이그레이션 (project-monitor)
단순한 리액트 앱(모니터링 앱)을 먼저 옮깁니다.

구서버에서 project-monitor의 리액트 소스 코드를 ~/docker-projects/project-monitor/ 폴더로 복사해옵니다.

~/docker-projects/project-monitor/ 폴더 안에 아래 두 파일을 생성합니다.

Dockerfile

Dockerfile

# 빌드 스테이지
FROM node:18 as builder
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install
COPY . .
RUN yarn build

# 서비스 스테이지
FROM nginx:stable-alpine
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
docker-compose.yml

YAML

version: '3.8'

services:
  web:
    build: .
    restart: always
    # ports: ... <- 이 부분은 없습니다. Nginx가 모든 접속을 처리하므로 직접 포트를 노출하지 않습니다.
4단계: 앱 #2 마이그레이션 (project-smd with API)
리액트 프론트엔드와 플라스크 백엔드(API)로 구성된 앱을 옮깁니다.

project-smd 폴더 안에 frontend와 backend 폴더를 만듭니다.

구서버의 리액트 코드를 frontend 폴더로, 플라스크 코드를 backend 폴더로 각각 복사합니다.

각 위치에 필요한 Dockerfile과 최상위 docker-compose.yml을 생성합니다.

backend/Dockerfile

Dockerfile

FROM python:3.9-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "app:app"]
frontend/Dockerfile

Dockerfile

# 내용은 project-monitor의 Dockerfile과 동일합니다.
FROM node:18 as builder
WORKDIR /app
COPY package.json yarn.lock ./
RUN yarn install
COPY . .
RUN yarn build

FROM nginx:stable-alpine
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
docker-compose.yml (project-smd 폴더 최상위)

YAML

version: '3.8'

services:
  frontend:
    build: ./frontend
    restart: always

  backend:
    build: ./backend
    restart: always
여기도 ports 설정이 없습니다. 모든 통신은 Nginx를 통해 이루어집니다.

5단계: Nginx 리버스 프록시 설정 (가장 중요)
이제 외부 접속(80번 포트)을 받아 각 앱으로 요청을 분배해 줄 Nginx 프록시를 설정합니다.

~/docker-projects/nginx-proxy/ 폴더로 이동합니다.

아래 두 파일을 생성합니다.

nginx.conf (Nginx 설정 파일)

Nginx

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    server {
        listen 80;

        # 1. /monitor 로 오는 요청은 project-monitor 의 web 서비스로 전달
        location /monitor/ {
            proxy_pass http://project-monitor-web-1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 2. /smd 로 오는 요청은 project-smd 의 frontend 서비스로 전달
        location /smd/ {
            proxy_pass http://project-smd-frontend-1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # 3. /api 로 오는 요청은 project-smd 의 backend 서비스로 전달
        location /api/ {
            proxy_pass http://project-smd-backend-1:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
proxy_pass 주소의 규칙: http://{프로젝트폴더명}-{서비스명}-{숫자} 형식입니다. 이 이름은 docker ps 명령어로 확인 가능합니다.

docker-compose.yml

YAML

version: '3.8'

services:
  nginx-proxy:
    image: nginx:latest
    restart: always
    ports:
      - "80:80" # 서버의 80번 포트를 이 Nginx 컨테이너에 연결 (유일한 외부 노출)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro # 우리가 만든 설정 파일을 컨테이너에 적용
      - /var/run/docker.sock:/tmp/docker.sock:ro # 컨테이너가 다른 컨테이너를 찾을 수 있게 함
6단계: 전체 서비스 실행 및 최종 확인
이제 준비된 모든 프로젝트를 순서대로 실행합니다.

Bash

# 1. 모니터 앱 실행
cd ~/docker-projects/project-monitor
docker compose up -d

# 2. SMD 앱 (프론트+백엔드) 실행
cd ../project-smd
docker compose up -d

# 3. Nginx 프록시 실행
cd ../nginx-proxy
docker compose up -d
최종 확인:

웹 브라우저에서 http://신서버IP/monitor 로 접속 → 모니터링 앱이 보여야 합니다.

웹 브라우저에서 http://신서버IP/smd 로 접속 → SMD 앱이 보여야 합니다.

SMD 앱의 기능(로그인 등)을 사용했을 때, 개발자 도구(F12)의 네트워크 탭을 보면 /api/... 요청이 정상적으로 처리되는 것을 볼 수 있습니다.

이제 신서버는 80번 포트 하나만 열어두고 Nginx가 모든 요청을 깔끔하게 분배하는 구조가 완성되었습니다. 앞으로 새로운 앱을 추가할 때도 nginx.conf에 location 블록 하나만 추가해주면 됩니다