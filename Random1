로 GridControl의 밴드 순서를 설정하는 방법은 다음과 같습니다. 아래의 코드는 설정 윈도우에서 변경 사항을 적용하고, 메인 윈도우의 GridControl에 대해 해당 밴드 순서를 업데이트합니다.

먼저, ColumnInfo 클래스에 DisplayIndex를 포함시키고, 이를 기준으로 정렬할 수 있도록 합니다.

csharp
Copy code
public class ColumnInfo
{
    public string XName { get; set; }
    public bool IsVisible { get; set; }
    public int DisplayIndex { get; set; }
}
설정 윈도우에서 "적용" 버튼을 누르면, ColumnsInfo 컬렉션을 DisplayIndex 순서대로 정렬하고, 이 정보를 메인 윈도우로 전달하여 GridControl의 밴드 순서를 설정합니다.

설정 윈도우의 "적용" 버튼 클릭 이벤트 핸들러
csharp
Copy code
private void ApplyChanges_Click(object sender, RoutedEventArgs e)
{
    var orderedColumnsInfo = ColumnsInfo.OrderBy(c => c.DisplayIndex).ToList();
    // 이제 orderedColumnsInfo를 사용하여 GridControl의 밴드 순서를 설정합니다.
    // 이 부분은 실제 GridControl의 밴드 순서를 변경하는 로직을 포함해야 합니다.
    ApplyBandOrderToGridControl(orderedColumnsInfo);
    this.Close();
}

private void ApplyBandOrderToGridControl(List<ColumnInfo> orderedColumnsInfo)
{
    // 메인 윈도우의 GridControl 참조를 가져와야 합니다.
    // 예를 들어, 메인 윈도우에서 이 설정 윈도우에 GridControl을 전달했다고 가정합니다.
    foreach (var colInfo in orderedColumnsInfo)
    {
        var band = mainGridControl.Bands.FirstOrDefault(b => b.Name == colInfo.XName);
        if (band != null)
        {
            band.Visible = colInfo.IsVisible;
            // 밴드의 순서를 설정하는 속성이 DevExpress에서는 VisibleIndex입니다.
            band.VisibleIndex = colInfo.DisplayIndex;
        }
    }
}
위 코드에서 mainGridControl은 메인 윈도우의 GridControl 인스턴스를 참조하는 변수입니다. 실제 구현에서는 이 변수를 설정 윈도우로 전달하거나, 설정 윈도우가 메인 윈도우의 GridControl에 접근할 수 있는 다른 방법을 사용해야 합니다.

이렇게 하면 설정 윈도우에서 사용자가 순서를 변경하고 체크박스를 체크한 상태를 바탕으로 메인 윈도우의 GridControl 밴드 순서를 조정할 수 있습니다.





