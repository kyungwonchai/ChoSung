송합니다. 요청하신 내용에 맞추어 전체 솔루션의 수정된 파일들을 제공하겠습니다. 아래는 각 파일의 전체 코드로, 이전 코드에 대한 수정 사항이 모두 반영된 것입니다.

1. PortConfigControl.xaml.cs (수정된 전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using System.Windows.Controls;

namespace ScanValueTrans
{
    public partial class PortConfigControl : UserControl
    {
        public int PortIndex { get; set; }

        private SerialPortManager serialPortManager;
        private SettingsManager settingsManager;

        public PortConfigControl()
        {
            InitializeComponent();
            serialPortManager = SerialPortManager.Instance;
            settingsManager = SettingsManager.Instance;
        }

        public void LoadPortSettings(int index)
        {
            PortIndex = index;
            string lastUsedPort = settingsManager.GetSetting($"TargetPort{PortIndex}");

            if (!string.IsNullOrEmpty(lastUsedPort))
            {
                TargetPortComboBox.SelectedItem = lastUsedPort;
                AddTargetPort(lastUsedPort);
            }
        }

        public void RefreshPortList(string[] portNames)
        {
            TargetPortComboBox.ItemsSource = portNames;
            if (TargetPortComboBox.SelectedItem != null)
            {
                string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                if (!Array.Exists(portNames, port => port == selectedPort))
                {
                    TargetPortComboBox.SelectedItem = null;
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                }
            }
        }

        private void AddTargetPort(string portName)
        {
            try
            {
                string baudRate = "9600"; // 기본값으로 9600을 사용
                string parity = "None";
                string dataBits = "8";
                string stopBits = "One";

                serialPortManager.AddTargetPort(portName, int.Parse(baudRate),
                                                (Parity)Enum.Parse(typeof(Parity), parity),
                                                int.Parse(dataBits),
                                                (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                if (serialPortManager.IsPortOpen(portName))
                {
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Blue;
                    LogMessage($"타겟 포트 {portName}가 정상적으로 열렸습니다.");
                }
                else
                {
                    TargetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                    LogMessage($"타겟 포트 {portName}를 열 수 없습니다.");
                }

                settingsManager.SaveSetting($"TargetPort{PortIndex}", portName);
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (TargetPortComboBox.SelectedItem != null)
            {
                string selectedPort = TargetPortComboBox.SelectedItem.ToString();
                AddTargetPort(selectedPort);
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                ((MainWindow)Application.Current.MainWindow).LogListBox.Items.Add($"{timestamp} - {message}");

                if (((MainWindow)Application.Current.MainWindow).LogListBox.Items.Count > 100)
                {
                    ((MainWindow)Application.Current.MainWindow).LogListBox.Items.RemoveAt(0);
                }
            });
        }
    }
}
2. MainWindow.xaml.cs (수정된 전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                settingsManager = SettingsManager.Instance;

                socketServer = SocketServer.Instance;
                if (socketServer == null)
                {
                    throw new InvalidOperationException("소켓 서버 인스턴스를 초기화할 수 없습니다.");
                }
                socketServer.DataReceived += OnSocketDataReceived;

                serialPortManager = SerialPortManager.Instance;

                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                InitializePortSettings();
                LoadLastUsedPorts();

                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                if (!string.IsNullOrEmpty(ipAddress) && !string.IsNullOrEmpty(port))
                {
                    string qrContent = $"{ipAddress}:{port}";
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                    QrCodeImage.Source = qrCodeImage;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue;
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }
                else
                {
                    LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedPort = PortComboBox.SelectedItem?.ToString() ?? "20000";

                if (int.TryParse(selectedPort, out int portNumber))
                {
                    if (socketServer != null)
                    {
                        socketServer.Start(portNumber);
                        settingsManager.SaveSetting("Port", selectedPort);
                    }
                    else
                    {
                        LogMessage("소켓 서버 인스턴스가 초기화되지 않았습니다.");
                    }
                }
                else
                {
                    LogMessage($"포트 번호가 유효하지 않습니다: {selectedPort}");
                }

                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저가 초기화되지 않았습니다.");
                }

                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    serialPortManager.CloseScannerPort();
                }

                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate),
                    (Parity)Enum.Parse(typeof(Parity), parity),
                    int.Parse(dataBits),
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                serialPortManager.ScannerPort.DataReceived += ScannerPort_DataReceived;

                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {portName} 접근 권한이 없습니다: {ex.Message}");
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {portName}에서 I/O 오류 발생: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    string data = serialPortManager.ScannerPort.ReadExisting();

                    foreach (var targetPort in serialPortManager.TargetPorts)
                    {
                        if (targetPort != null && targetPort.IsOpen)
                        {
                            targetPort.Write(data);
                            LogMessage($"스캐너에서 받은 데이터를 타겟 포트 {targetPort.PortName}로 전송: {data}");
                        }
                    }

                    Dispatcher.Invoke(() => LogMessage($"스캐너 포트에서 받은 데이터: {data}"));
                }
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"스캐너 포트 데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                string[] portNames = SerialPort.GetPortNames();

                ScannerPortComboBox.ItemsSource = portNames;

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
요약
PortConfigControl.xaml.cs: 타겟 포트 설정을 처리하는 컨트롤로, 포트의 사용 가능 여부에 따라 콤보박스의 글씨 색상이 파란색(정상) 또는 빨간색(사용 불가)으로 변경됩니다.

MainWindow.xaml.cs: 메인 윈도우의 초기화 및 전체적인 프로그램 흐름을 제어합니다. 스캐너에서 수신한 데이터를 타겟 포트로 전송하고, 로그를 기록하며, 포트 상태를 갱신합니다.

이제 수정된 파일을 모두 제공하였으며, 이전 요구 사항에 맞게 수정되었습니다. 추가적인 문제가 발생하거나 도움이 필요하시면 언제든지 말씀해 주