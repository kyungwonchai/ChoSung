# 디버깅 로그가 추가된 RackSystemManager.cs
Scripts 폴더의 RackSystemManager.cs 파일 내용을 아래 코드로 완전히 덮어쓰고 저장하세요.

C#

using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;

public class RackSystemManager : MonoBehaviour
{
    public Transform rackContainer;
    public Material defaultLampMaterial;
    public Material litLampMaterial;
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    private Coroutine lastAnimationCoroutine;
    private GameObject lastMovedMask;
    private Renderer lastLitLamp;
    private Vector3 lastMaskOriginalLocalPosition;
    private string currentActiveBarcode = "";

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        foreach (Transform rackParent in rackContainer)
        {
            string rackName = rackParent.name;
            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name;
                string globalKey = $"{rackName}_{localName}";
                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                    {
                        lampRenderers.Add(globalKey, rend);
                        // ★★★ 초기화 시 기본 머티리얼이 제대로 적용되는지 로그 추가 ★★★
                        if (defaultLampMaterial != null)
                        {
                            rend.material = defaultLampMaterial;
                        }
                        else
                        {
                             Debug.LogWarning($"[초기화] {globalKey} 램프 등록. (Default 머티리얼이 연결되지 않음)");
                        }
                    }
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                        maskObjects.Add(globalKey, rend.gameObject);
                }
            }
        }
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    public void ProcessBarcode(string barcode)
    {
        if (barcode == currentActiveBarcode) return;
        ResetPreviousSlot();
        if (string.IsNullOrEmpty(barcode) || barcode.Length != 11 || !barcode.StartsWith("MMF10")) return;

        string rackID = barcode.Substring(5, 3);
        string floor = barcode.Substring(8, 1);
        string slotNum = barcode.Substring(9, 2);
        
        string lampKey = $"{rackID}_Lamp_{floor}{slotNum}";
        string maskKey = $"{rackID}_Mask_{floor}{slotNum}";
        
        // ★★★ 램프를 켜기 전, 필요한 정보가 있는지 확인하는 로그 추가 ★★★
        if (litLampMaterial == null)
        {
            Debug.LogError("[ProcessBarcode] 'Lit Lamp Material'이 Inspector에 연결되지 않았습니다! 램프를 켤 수 없습니다.");
        }
        
        if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
        {
            // ★★★ 머티리얼을 교체하는 순간과 그 결과를 로그로 출력 ★★★
            Debug.Log($"[성공] {lampKey} 램프를 찾았습니다. '{litLampMaterial.name}' 머티리얼로 변경을 시도합니다.");
            targetLampRenderer.material = litLampMaterial;
            lastLitLamp = targetLampRenderer;
            Debug.Log($"[완료] {lampKey} 램프의 머티리얼이 '{targetLampRenderer.material.name}'(으)로 변경되었습니다.");
        }
        
        if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
        {
            lastMovedMask = targetMask;
            lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
            lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
        }
        currentActiveBarcode = barcode;
    }
    
    #region Helper Functions 
    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            // ★★★ 램프를 다시 끌 때 로그 추가 ★★★
            Debug.Log($"[리셋] {lastLitLamp.name} 램프를 기본 머티리얼({defaultLampMaterial.name})로 되돌립니다.");
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
        currentActiveBarcode = "";
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;
        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 
        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }
        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;
        if (rb != null) rb.isKinematic = false;
    }
    
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessBarcode(text.ToUpper());
        }
    }
    #endregion
}
## 콘솔 로그 확인 방법
위 코드로 교체한 뒤 게임을 실행하고, Console 창을 확인합니다.

바코드를 입력했을 때, 아래와 같은 로그들이 순서대로 나타나는지 확인하세요:

[성공] A01_Lamp_A01 램프를 찾았습니다. 'LitLampMaterial' 머티리얼로 변경을 시도합니다.

[완료] A01_Lamp_A01 램프의 머티리얼이 'LitLampMaterial'(으)로 변경되었습니다.

문제 해결
만약 'Lit Lamp Material이 연결되지 않았습니다!' 에러가 뜬다면:
RackSystemManager의 Inspector 창에 Lit Lamp Material 슬롯을 연결해야 합니다.
