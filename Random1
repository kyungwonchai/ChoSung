이콘의 '종료' 메뉴를 통해서만 프로그램이 완전히 종료될 때 설정이 저장되도록 되어 있었습니다. 이 때문에 다른 방식으로 창을 닫거나 PC가 갑자기 꺼지는 경우에는 설정이 저장되지 않는 문제가 있었습니다.

사용자님의 의견을 적극 반영하여, 설정이 언제 저장되는지 명확히 하고, 더 확실하게 저장되도록 로직을 개선하겠습니다.

주요 변경 사항
"설정 저장" 버튼 추가: 사용자가 원할 때 언제든지 설정을 즉시 저장할 수 있도록 UI에 명시적인 "설정 저장" 버튼을 추가합니다.
'잠금' 시 자동 저장: '수정' 모드에서 설정을 변경하고 '잠금' 버튼을 누를 때, 변경된 내용이 바로 설정 파일에 저장되도록 합니다.
기존 '종료 시 저장' 유지: 트레이 아이콘의 '종료' 메뉴를 통해 프로그램을 정상 종료할 때도 여전히 설정을 저장하여 만일의 경우를 대비합니다.
이제 설정이 저장되지 않는 문제는 확실히 해결될 것입니다.

## 1. UI 변경 (MainWindow.xaml)
'설정 저장' 버튼을 추가합니다. 아래 코드로 MainWindow.xaml 파일 전체를 교체하세요. (주로 GroupBox 안에 버튼이 추가되었습니다.)

XML

<Window x:Class="funcenvget.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:tb="http://www.hardcodet.net/taskbar"
        mc:Ignorable="d"
        Title="실시간 데이터 로거 v3.2 (설정 저장 개선)" Height="580" Width="520" ResizeMode="CanMinimize"
        Loaded="Window_Loaded" Closing="Window_Closing">
    <Grid>
        <tb:TaskbarIcon x:Name="MyNotifyIcon"
                        IconSource="/icon.ico"
                        ToolTipText="실시간 데이터 로거"
                        TrayMouseDoubleClick="MyNotifyIcon_TrayMouseDoubleClick">
            <tb:TaskbarIcon.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="열기" Click="MenuOpen_Click" FontWeight="Bold"/>
                    <MenuItem Header="종료" Click="MenuExit_Click"/>
                </ContextMenu>
            </tb:TaskbarIcon.ContextMenu>
        </tb:TaskbarIcon>

        <Grid Margin="15">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <GroupBox Header="캡처 및 장비 설정" Grid.Row="0" FontWeight="Bold">
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/> 
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Label Content="PC 이름:" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtPcName" Grid.Row="0" Grid.Column="1" Margin="5" MaxLength="10" IsReadOnly="True"/>

                    <Label Content="탐색 방법:" Grid.Row="1" Grid.Column="0" VerticalAlignment="Center"/>
                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center" Margin="5,0,5,0">
                        <RadioButton x:Name="rbFindByTitle" Content="창 제목" IsChecked="True" Checked="SearchMethod_Changed"/>
                        <RadioButton x:Name="rbFindByProcess" Content="프로세스 이름" Margin="15,0,0,0" Checked="SearchMethod_Changed"/>
                    </StackPanel>
                    
                    <Button x:Name="btnToggleEdit" Content="수정" Grid.Row="0" Grid.RowSpan="2" Grid.Column="2" Margin="5" Padding="15,5" Click="btnToggleEdit_Click"/>

                    <Label x:Name="lblTarget" Content="대상 창 제목:" Grid.Row="2" Grid.Column="0" VerticalAlignment="Center"/>
                    <TextBox x:Name="txtTarget" Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="5" IsReadOnly="True"/>

                    <Label Content="캡처 영역 (X, Y):" Grid.Row="3" Grid.Column="0" VerticalAlignment="Center"/>
                    <StackPanel Grid.Row="3" Grid.Column="1" Orientation="Horizontal">
                        <TextBox x:Name="txtX" Width="80" Margin="5" IsReadOnly="True"/>
                        <TextBox x:Name="txtY" Width="80" Margin="5" IsReadOnly="True"/>
                    </StackPanel>

                    <Label Content="캡처 크기 (W, H):" Grid.Row="4" Grid.Column="0" VerticalAlignment="Center"/>
                    <StackPanel Grid.Row="4" Grid.Column="1" Orientation="Horizontal">
                        <TextBox x:Name="txtWidth" Width="80" Margin="5" IsReadOnly="True"/>
                        <TextBox x:Name="txtHeight" Width="80" Margin="5" IsReadOnly="True"/>
                    </StackPanel>

                    <Button x:Name="btnSelectArea" Content="영역 설정" Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" Margin="5" Padding="5" Click="btnSelectArea_Click"/>
                    
                    <Button x:Name="btnSaveSettings" Content="설정 저장" Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="3" Margin="5,10,5,5" Padding="5" Click="btnSaveSettings_Click" Background="#FF2D8A68" Foreground="White"/>
                </Grid>
            </GroupBox>

            <Button x:Name="btnStart" Content="로깅 시작" Grid.Row="1" Margin="5,15,5,5" Padding="5" FontWeight="Bold" Background="#FF4E76D8" Foreground="White" Click="btnStart_Click"/>
            <Border Grid.Row="2" BorderBrush="Gray" BorderThickness="1" Margin="5">
                <Image x:Name="imgPreview" Stretch="Uniform"/>
            </Border>
            <StatusBar Grid.Row="3">
                <StatusBarItem>
                    <TextBlock x:Name="lblStatus" Text="상태: 대기 중" TextWrapping="Wrap"/>
                </StatusBarItem>
            </StatusBar>
        </Grid>
    </Grid>
</Window>
## 2. C# 코드 수정 (MainWindow.xaml.cs)
새로운 '설정 저장' 버튼의 이벤트 핸들러를 만들고, '잠금' 버튼 클릭 시 및 프로그램 종료 시에도 설정을 저장하는 로직을 강화합니다.

아래 코드로 MainWindow.xaml.cs 파일 전체를 교체하세요.

```csharp
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
public partial class MainWindow : Wpf.Window
{
// P/Invoke 및 전역 변수 (이전과 동일)
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
[DllImport("user32.dll")]
[return: MarshalAs(UnmanagedType.Bool)]
private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
[DllImport("user32.dll")]
private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
[return: MarshalAs(UnmanagedType.Bool)]
private static extern bool IsIconic(IntPtr hWnd);
[StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

    private Wpf.Threading.DispatcherTimer timer;
    private Wpf.Threading.DispatcherTimer searchTimer;
    private TesseractEngine _ocrEngine;
    private bool isLocked = true;
    private readonly string agentBasePath = @"C:\Agent\funcenvget";
    private readonly string logFolderPath;
    private readonly string traceLogPath;
    private string previewImagePath;
    private bool isExiting = false;

    private TesseractEngine OcrEngine { get { /* 이전과 동일 */ } }

    public MainWindow()
    {
        logFolderPath = Path.Combine(agentBasePath, "logs");
        traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
        InitializeComponent();
        InitializeApp();
    }

    private void LogTrace(string message) { /* 이전과 동일 */ }
    protected override void OnContentRendered(EventArgs e) { /* 이전과 동일 */ }
    private void InitializeApp() { /* 이전과 동일 */ }
    private void SearchTimer_Tick(object sender, EventArgs e) { /* 이전과 동일 */ }
    private void CheckRequiredFiles() { /* 이전과 동일 */ }
    private void Window_Loaded(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    private void AttemptAutoStart() { /* 이전과 동일 */ }

    // 설정을 저장하는 공통 메소드
    private void SaveApplicationSettings()
    {
        LogTrace("SaveApplicationSettings: 설정 저장 시작.");
        Settings.Default.WindowTitle = txtTarget.Text;
        Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
        Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
        Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
        Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
        Settings.Default.PcName = txtPcName.Text;
        Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
        Settings.Default.Save();
        LogTrace("SaveApplicationSettings: 설정 저장 완료.");
    }

    // "설정 저장" 버튼 클릭 이벤트 핸들러
    private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
    {
        SaveApplicationSettings();
        lblStatus.Text = $"상태: {DateTime.Now:T} - 설정이 저장되었습니다.";
        MessageBox.Show("설정이 저장되었습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
    }

    private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
    {
        if (timer.IsEnabled || searchTimer.IsEnabled)
        {
            MessageBox.Show("로깅 또는 대상 탐색이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
            return;
        }
        isLocked = !isLocked;
        UpdateLockState(isLocked);
        LogTrace($"btnToggleEdit_Click: 잠금 상태 변경 -> {isLocked}");

        // 수정 완료 후 '잠금' 상태로 변경 시 자동 저장
        if (isLocked)
        {
            SaveApplicationSettings();
            lblStatus.Text = $"상태: {DateTime.Now:T} - 변경된 설정이 저장되었습니다.";
        }
    }

    private void UpdateLockState(bool lockState) { /* 이전과 동일, 단 btnSaveSettings.IsEnabled = !lockState; 추가 가능 */ }
    private void btnStart_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    private void SearchMethod_Changed(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    private IntPtr GetTargetWindowHandle() { /* 이전과 동일 */ }
    private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    private void MenuOpen_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    
    private void MenuExit_Click(object sender, RoutedEventArgs e) 
    { 
        LogTrace("MenuExit_Click: 프로그램 종료 시작.");
        isExiting = true; 
        this.Close(); // OnClosing 이벤트를 정상적으로 발생시켜 저장 로직 실행
    }

    protected override void OnClosing(CancelEventArgs e)
    {
        if (!isExiting)
        {
            e.Cancel = true;
            this.Hide();
            LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
        }
        else
        {
            LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
            SaveApplicationSettings(); // 통합된 저장 메소드 호출
            
            LogTrace("Window OnClosing: 설정 저장 완료 (OnClosing 내부).");
            MyNotifyIcon.Dispose();
            LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
            _ocrEngine?.Dispose();
            LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
        }
        base.OnClosing(e);
    }

    private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }
    private void PerformLogging() { /* 이전과 동일 */ }
    private void ProcessOcrResult(string rawText) { /* 이전과 동일 */ }
    private void UploadToDatabase(decimal temp, decimal humid) { /* 이전과 동일 */ }
    private void btnSelectArea_Click(object sender, RoutedEventArgs e) { /* 이전과 동일 */ }
    private void UpdatePreviewImage() { /* 이전과 동일 */ }
    private Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap) { /* 이전과 동일 */ }
}
}


**[참고]** 코드가 너무 길어 `/* 이전과 동일 */`로 표시된 부분은 바로 이전 답변의 코드를 그대로 사용하시면 됩니다. **만약을 위해 모든 코드가 포함된 전체 버전을 아래에 다시 첨부합니다.**

\<details\>
\<summary\>\<b\>[클릭] 생략된 부분 포함된 MainWindow.xaml.cs 최종 전체 코드\</b\>\</summary\>

```csharp
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private readonly string logFolderPath;
        private readonly string traceLogPath;
        private string previewImagePath;
        private bool isExiting = false;

        private TesseractEngine OcrEngine
        {
            get
            {
                if (_ocrEngine == null)
                {
                    string exePath = AppDomain.CurrentDomain.BaseDirectory;
                    string tessDataPath = Path.Combine(exePath, "tessdata");
                    _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default);
                    _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-");
                }
                return _ocrEngine;
            }
        }
        
        public MainWindow()
        {
            logFolderPath = Path.Combine(agentBasePath, "logs");
            traceLogPath = Path.Combine(logFolderPath, "trace_log.txt");
            InitializeComponent();
            InitializeApp();
        }

        private void LogTrace(string message)
        {
            try
            {
                Directory.CreateDirectory(logFolderPath);
                string logMessage = $"{DateTime.Now:yyyy-MM-dd HH:mm:ss.fff} - {message}\r\n";
                File.AppendAllText(traceLogPath, logMessage);
            }
            catch { }
        }

        protected override void OnContentRendered(EventArgs e)
        {
            base.OnContentRendered(e);
            this.Hide();
        }

        private void InitializeApp()
        {
            LogTrace("Application Initializing...");
            CheckRequiredFiles();
            timer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromSeconds(10) };
            timer.Tick += Timer_Tick;
            searchTimer = new Wpf.Threading.DispatcherTimer { Interval = TimeSpan.FromMinutes(1) };
            searchTimer.Tick += SearchTimer_Tick;
            Directory.CreateDirectory(agentBasePath);
            previewImagePath = Path.Combine(agentBasePath, "preview_capture.png");
            LogTrace("Application Initialized.");
        }
        
        private void SearchTimer_Tick(object sender, EventArgs e)
        {
            LogTrace("SearchTimer Tick: 재탐색 시작...");
            lblStatus.Text = "대상 창/프로세스를 찾는 중... (1분마다 재시도)";
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd != IntPtr.Zero)
            {
                LogTrace("SearchTimer Tick: 대상 발견!");
                searchTimer.Stop();
                lblStatus.Text = "대상 발견! 자동 로깅을 시작합니다.";
                if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
            }
            else
            {
                LogTrace("SearchTimer Tick: 대상 찾기 실패.");
            }
        }

        private void CheckRequiredFiles()
        {
            string exePath = AppDomain.CurrentDomain.BaseDirectory;
            string[] requiredFiles = { "tesseract53.dll", "leptonica-1.83.1.dll" }; 
            foreach (var file in requiredFiles)
            {
                if (!File.Exists(Path.Combine(exePath, file)))
                {
                    LogTrace($"CheckRequiredFiles: 필수 파일 없음 - {file}");
                    MessageBox.Show($"실행에 필수적인 파일이 없습니다: {file}\n\nClickOnce 게시 설정에서 모든 관련 파일이 '포함(Include)'되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    Application.Current.Shutdown();
                    return;
                }
            }
            if (!Directory.Exists(Path.Combine(exePath, "tessdata")))
            {
                LogTrace("CheckRequiredFiles: tessdata 폴더 없음.");
                MessageBox.Show("tessdata 폴더를 찾을 수 없습니다.\n\nClickOnce 게시 설정에서 tessdata 폴더와 그 안의 파일들이 포함되었는지 확인하세요.", "실행 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                Application.Current.Shutdown();
                return;
            }
            LogTrace("CheckRequiredFiles: 모든 필수 파일 확인 완료.");
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            LogTrace("Window_Loaded: 설정 로드 시작.");
            txtTarget.Text = Settings.Default.WindowTitle;
            txtX.Text = Settings.Default.CaptureX.ToString();
            txtY.Text = Settings.Default.CaptureY.ToString();
            txtWidth.Text = Settings.Default.CaptureWidth.ToString();
            txtHeight.Text = Settings.Default.CaptureHeight.ToString();
            txtPcName.Text = Settings.Default.PcName;

            if (Settings.Default.SearchByProcessName)
            {
                rbFindByProcess.IsChecked = true;
            }
            else
            {
                rbFindByTitle.IsChecked = true;
            }
            SearchMethod_Changed(null, null); 

            if (File.Exists(previewImagePath))
            {
                try
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 시도 - {previewImagePath}");
                    var preview = new Wpf.Media.Imaging.BitmapImage();
                    preview.BeginInit();
                    using (var stream = new FileStream(previewImagePath, FileMode.Open, FileAccess.Read, FileShare.Read))
                    {
                        preview.StreamSource = stream;
                        preview.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                        preview.EndInit();
                    }
                    imgPreview.Source = preview;
                    LogTrace("Window_Loaded: 미리보기 이미지 로드 성공.");
                }
                catch (Exception ex)
                {
                    LogTrace($"Window_Loaded: 미리보기 이미지 로드 실패 - {ex.Message}");
                }
            }
            else { LogTrace("Window_Loaded: 미리보기 이미지 파일 없음."); }
            UpdateLockState(true);
            LogTrace("Window_Loaded: 설정 로드 완료, 자동 시작 시도.");
            AttemptAutoStart();
        }

        private void AttemptAutoStart()
        {
            if (!string.IsNullOrWhiteSpace(txtPcName.Text) && !string.IsNullOrWhiteSpace(txtTarget.Text))
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 충족. 대상 검색 시도.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd != IntPtr.Zero)
                {
                    LogTrace("AttemptAutoStart: 대상 즉시 발견. 로깅 시작.");
                    if (!timer.IsEnabled) { btnStart_Click(this, new RoutedEventArgs()); }
                }
                else
                {
                    LogTrace("AttemptAutoStart: 대상 찾기 실패. 재탐색 타이머 시작.");
                    lblStatus.Text = "대상을 찾을 수 없어, 1분마다 재검색을 시작합니다.";
                    searchTimer.Start();
                }
            }
            else
            {
                LogTrace("AttemptAutoStart: 자동 시작 조건 미충족 (PC 이름 또는 대상 정보 부족).");
            }
        }
        
        private void SaveApplicationSettings()
        {
            LogTrace("SaveApplicationSettings: 설정 저장 시작.");
            Settings.Default.WindowTitle = txtTarget.Text;
            Settings.Default.CaptureX = int.TryParse(txtX.Text, out int x) ? x : 0;
            Settings.Default.CaptureY = int.TryParse(txtY.Text, out int y) ? y : 0;
            Settings.Default.CaptureWidth = int.TryParse(txtWidth.Text, out int w) ? w : 0;
            Settings.Default.CaptureHeight = int.TryParse(txtHeight.Text, out int h) ? h : 0;
            Settings.Default.PcName = txtPcName.Text;
            Settings.Default.SearchByProcessName = rbFindByProcess.IsChecked == true;
            Settings.Default.Save();
            LogTrace("SaveApplicationSettings: 설정 저장 완료.");
        }

        private void btnSaveSettings_Click(object sender, RoutedEventArgs e)
        {
            SaveApplicationSettings();
            lblStatus.Text = $"상태: {DateTime.Now:T} - 설정이 저장되었습니다.";
            MessageBox.Show("설정이 저장되었습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnToggleEdit_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled)
            {
                MessageBox.Show("로깅 또는 대상 탐색이 실행 중일 때는 설정을 수정할 수 없습니다.", "알림", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }
            isLocked = !isLocked;
            UpdateLockState(isLocked);
            LogTrace($"btnToggleEdit_Click: 잠금 상태 변경 -> {isLocked}");

            if (isLocked)
            {
                SaveApplicationSettings();
                lblStatus.Text = $"상태: {DateTime.Now:T} - 변경된 설정이 저장되었습니다.";
            }
        }

        private void UpdateLockState(bool lockState)
        {
            isLocked = lockState;
            txtPcName.IsReadOnly = isLocked;
            txtTarget.IsReadOnly = isLocked;
            rbFindByTitle.IsEnabled = !isLocked;
            rbFindByProcess.IsEnabled = !isLocked;
            btnSelectArea.IsEnabled = !isLocked;
            btnSaveSettings.IsEnabled = !isLocked; // 수정 모드일 때만 설정 저장 버튼 활성화

            if (isLocked)
            {
                btnToggleEdit.Content = "수정";
                txtPcName.Background = Wpf.Media.Brushes.LightGray;
                txtTarget.Background = Wpf.Media.Brushes.LightGray;
            }
            else
            {
                btnToggleEdit.Content = "잠금";
                txtPcName.Background = Wpf.Media.Brushes.White;
                txtTarget.Background = Wpf.Media.Brushes.White;
            }
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (timer.IsEnabled || searchTimer.IsEnabled)
            {
                LogTrace("btnStart_Click: 로깅/탐색 중지 요청.");
                timer.Stop();
                searchTimer.Stop();
                btnStart.Content = "로깅 시작";
                lblStatus.Text = "상태: 모든 작업이 중지되었습니다.";
            }
            else
            {
                LogTrace("btnStart_Click: 로깅 시작 요청.");
                searchTimer.Stop(); 
                if (!isLocked) { LogTrace("btnStart_Click: 시작 실패 - 잠금 상태 아님."); MessageBox.Show("설정을 먼저 '잠금' 상태로 변경해주세요.", "알림", MessageBoxButton.OK, MessageBoxImage.Information); return; }
                if (string.IsNullOrWhiteSpace(txtPcName.Text) || string.IsNullOrWhiteSpace(txtTarget.Text)) { LogTrace("btnStart_Click: 시작 실패 - PC이름 또는 대상 정보 부족."); MessageBox.Show("PC이름과 대상(창 제목/프로세스 이름)을 모두 설정해야 합니다.", "입력 오류", MessageBoxButton.OK, MessageBoxImage.Error); return; }
                if (GetTargetWindowHandle() == IntPtr.Zero) { LogTrace("btnStart_Click: 시작 실패 - 대상 찾을 수 없음."); lblStatus.Text = "상태: 오류! 대상을 찾을 수 없어 시작할 수 없습니다."; return; }
                
                LogTrace("btnStart_Click: 로깅 시작됨.");
                timer.Start();
                btnStart.Content = "로깅 중지";
                lblStatus.Text = "상태: 로깅 시작됨...";
            }
        }
        
        private void SearchMethod_Changed(object sender, RoutedEventArgs e)
        {
            if (lblTarget == null || txtTarget == null) return;
            if (rbFindByTitle.IsChecked == true) { lblTarget.Content = "대상 창 제목:"; txtTarget.ToolTip = "찾으려는 프로그램의 전체 창 제목을 입력하세요."; }
            else { lblTarget.Content = "프로세스 이름:"; txtTarget.ToolTip = "작업 관리자의 '세부 정보' 탭에 있는 프로세스 이름을 입력하세요 (예: notepad)"; }
            LogTrace($"SearchMethod_Changed: 탐색 방법 변경됨 - { (rbFindByTitle.IsChecked == true ? "창 제목" : "프로세스 이름") }");
        }
        
        private IntPtr GetTargetWindowHandle()
        {
            string target = txtTarget.Text;
            if (string.IsNullOrWhiteSpace(target)) return IntPtr.Zero;
            if (rbFindByTitle.IsChecked == true) { return FindWindow(null, target); }
            else
            {
                string processName = target.EndsWith(".exe", StringComparison.OrdinalIgnoreCase) ? Path.GetFileNameWithoutExtension(target) : target;
                Process[] processes = Process.GetProcessesByName(processName);
                if (processes.Length == 0) return IntPtr.Zero;
                var targetProcess = processes.FirstOrDefault(p => p.MainWindowHandle != IntPtr.Zero);
                return targetProcess?.MainWindowHandle ?? IntPtr.Zero;
            }
        }

        private void MyNotifyIcon_TrayMouseDoubleClick(object sender, RoutedEventArgs e) { LogTrace("MyNotifyIcon_TrayMouseDoubleClick: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuOpen_Click(object sender, RoutedEventArgs e) { LogTrace("MenuOpen_Click: 창 보이기."); this.Show(); this.WindowState = WindowState.Normal; this.Activate(); }
        private void MenuExit_Click(object sender, RoutedEventArgs e) { LogTrace("MenuExit_Click: 프로그램 종료 시작."); isExiting = true; this.Close(); }

        protected override void OnClosing(CancelEventArgs e)
        {
            if (!isExiting)
            {
                e.Cancel = true;
                this.Hide();
                LogTrace("Window OnClosing: 창 숨기기로 전환됨 (X 버튼).");
            }
            else
            {
                LogTrace("Window OnClosing: 실제 종료 진행. 설정 저장 및 리소스 정리 시작.");
                SaveApplicationSettings(); // 설정 저장 호출
                LogTrace("Window OnClosing: 설정 저장 완료 (OnClosing 내부).");
                MyNotifyIcon.Dispose();
                LogTrace("Window OnClosing: NotifyIcon 정리 완료.");
                _ocrEngine?.Dispose();
                LogTrace("Window OnClosing: OCR 엔진 정리 완료.");
            }
            base.OnClosing(e);
        }

        private void Timer_Tick(object sender, EventArgs e) { PerformLogging(); }

        private void PerformLogging()
        {
            Gdi.Rectangle cropArea = Gdi.Rectangle.Empty;
            Gdi.Size bmpSize = Gdi.Size.Empty;
            try
            {
                LogTrace("===== PerformLogging 시작 =====");
                LogTrace("1. 대상 핸들 가져오기 시작...");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero)
                {
                    LogTrace("1-1. 대상 핸들 없음. 재탐색 시도...");
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    if (!searchTimer.IsEnabled) { timer.Stop(); searchTimer.Start(); lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다."; }
                    return;
                }
                LogTrace($"1-1. 대상 핸들 찾음: {hWnd}");
                LogTrace("2. 최소화 상태 확인 시작...");
                if (IsIconic(hWnd)) { LogTrace("2-1. 최소화됨. 작업 건너뜀."); lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }
                LogTrace("2-1. 최소화되지 않음.");
                LogTrace("3. 창 크기 가져오기 시작...");
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"3-1. 유효하지 않은 창 크기({width}x{height}). 작업 건너뜀."); lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다."; return; }
                LogTrace($"3-1. 창 크기 확인: {width}x{height}");
                bmpSize = new Gdi.Size(width, height);
                LogTrace("4. 비트맵 객체 생성 시작...");
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    LogTrace("4-1. 비트맵 객체 생성 완료.");
                    LogTrace("5. 그래픽 컨텍스트 생성 및 PrintWindow 호출 시작...");
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        LogTrace($"5-0. HDC 얻음: {hdc}. PrintWindow 호출.");
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                        LogTrace($"5-0. HDC 해제.");
                    }
                    LogTrace("5-1. PrintWindow 완료.");
                    cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        LogTrace($"6. 오류! 캡처 영역이 창 크기를 벗어남. bmp=({bmp.Width}x{bmp.Height}), crop=({cropArea.X},{cropArea.Y} {cropArea.Width}x{cropArea.Height}). 로깅 중지.");
                        timer.Stop(); btnStart.Content = "로깅 시작"; lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }
                    LogTrace($"6. 이미지 자르기(Clone) 시작... [원본크기: {bmp.Width}x{bmp.Height}, 영역: {cropArea}]");
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        LogTrace("6-1. 이미지 자르기 완료.");
                        LogTrace("7. OCR 처리 시작...");
                        using (var page = OcrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            LogTrace($"7-1. OCR 처리 완료. 인식된 텍스트: '{rawText}'");
                            if (!string.IsNullOrWhiteSpace(rawText)) { ProcessOcrResult(rawText); } else { lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다."; }
                        }
                    }
                }
                LogTrace("===== PerformLogging 성공적으로 완료 =====");
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! PerformLogging에서 예외 발생 !!!!!\n{ex}");
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                btnStart.Content = "로깅 시작";
                var sb = new StringBuilder();
                sb.AppendLine("캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.");
                sb.AppendLine("==============================================");
                sb.AppendLine($"[진단 정보]");
                sb.AppendLine($"전체 창 크기: {bmpSize.Width} x {bmpSize.Height}");
                sb.AppendLine($"잘라낼 영역 (X,Y,W,H): {cropArea.X}, {cropArea.Y}, {cropArea.Width}, {cropArea.Height}");
                sb.AppendLine("==============================================");
                Exception currentEx = ex;
                int indentLevel = 0;
                while (currentEx != null)
                {
                    sb.AppendLine($"\n[오류 레벨 {indentLevel}] {(indentLevel == 1 ? "(진짜 원인일 가능성이 높음)" : "")}");
                    sb.AppendLine($"  - 오류 유형: {currentEx.GetType().Name}");
                    sb.AppendLine($"  - 메시지: {currentEx.Message}");
                    sb.AppendLine($"  - 스택 트레이스:\n{currentEx.StackTrace}");
                    currentEx = currentEx.InnerException;
                    indentLevel++;
                }
                MessageBox.Show(sb.ToString(), "캡처 상세 오류 보고", MessageBoxButton.OK, MessageBoxImage.Error);
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        private void ProcessOcrResult(string rawText) 
        {
            LogTrace($"ProcessOcrResult: 원본 텍스트='{rawText}'");
            string processedText = rawText.Replace("-", "");
            string[] parts = processedText.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length != 2) { LogTrace($"ProcessOcrResult: 값 분리 오류, {parts.Length}개 분리됨."); lblStatus.Text = $"상태: 값 분리 오류 (인식된 값 {parts.Length}개)"; return; }
            if (decimal.TryParse(parts[0], out decimal val1) && decimal.TryParse(parts[1], out decimal val2))
            {
                decimal temp = Math.Truncate(val1 * 10) / 10m;
                decimal humid = Math.Truncate(val2 * 10) / 10m;
                LogTrace($"ProcessOcrResult: 숫자 변환 성공. temp={temp}, humid={humid}. DB 업로드 시작.");
                UploadToDatabase(temp, humid);
            }
            else { LogTrace($"ProcessOcrResult: 숫자 변환 실패. parts[0]='{parts[0]}', parts[1]='{parts[1]}'"); lblStatus.Text = $"상태: 숫자 변환 오류 ({parts[0]},{parts[1]})"; }
        }

        private void UploadToDatabase(decimal temp, decimal humid)
        {
            string pcName = txtPcName.Text;
            if (string.IsNullOrWhiteSpace(pcName)) { LogTrace("UploadToDatabase: PC 이름 없음. 건너뜀."); lblStatus.Text = "상태: PC 이름이 비어있어 DB 작업을 건너뜁니다."; return; }
            string connectionString = "Server=127.0.0.1;Port=3306;Database=smd;Uid=root;Pwd=password;";
            MySqlConnection conn = null;
            MySqlTransaction trans = null;
            int rowsAffected = 0;
            try
            {
                LogTrace($"UploadToDatabase: DB 연결 시도. PC={pcName}, T={temp}, H={humid}");
                conn = new MySqlConnection(connectionString);
                conn.Open();
                LogTrace("UploadToDatabase: DB 연결 성공. 트랜잭션 시작.");
                trans = conn.BeginTransaction();
                using (MySqlCommand cmd = new MySqlCommand())
                {
                    cmd.Connection = conn;
                    cmd.Transaction = trans;
                    cmd.CommandText = "UPDATE smd.repair_func_now SET temp1 = @temp1, humid1 = @humid1, stdtime = NOW() WHERE line = @line;";
                    cmd.Parameters.AddWithValue("@line", pcName);
                    cmd.Parameters.AddWithValue("@temp1", temp);
                    cmd.Parameters.AddWithValue("@humid1", humid);
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 실행.");
                    rowsAffected = cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_now UPDATE 완료. 영향받은 행: {rowsAffected}");
                    cmd.CommandText = "INSERT INTO smd.repair_func_new_log (line, temp1, humid1, stdtime) VALUES (@line, @temp1, @humid1, NOW());";
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 실행.");
                    cmd.ExecuteNonQuery();
                    LogTrace($"UploadToDatabase: repair_func_new_log INSERT 완료.");
                }
                trans.Commit();
                LogTrace("UploadToDatabase: 트랜잭션 커밋 성공.");
                if (rowsAffected > 0) { lblStatus.Text = $"상태: {DateTime.Now:T} - DB 업데이트 성공!"; }
                else { lblStatus.Text = $"상태: {DateTime.Now:T} - 로그 기록 완료 (now 테이블에 해당 PC 없음)"; }
            }
            catch (Exception ex)
            {
                LogTrace($"!!!!! UploadToDatabase에서 예외 발생 !!!!!\n{ex}");
                try { trans?.Rollback(); LogTrace("UploadToDatabase: 예외 발생으로 트랜잭션 롤백 시도."); } catch (Exception exRollback) { LogTrace($"UploadToDatabase: 트랜잭션 롤백 중 예외 발생: {exRollback.Message}"); }
                lblStatus.Text = $"상태: DB 오류! {ex.Message}";
            }
            finally
            {
                conn?.Close();
                LogTrace("UploadToDatabase: DB 연결 종료.");
            }
        }
        
        private void btnSelectArea_Click(object sender, RoutedEventArgs e)
        {
            IntPtr hWnd = GetTargetWindowHandle();
            if (hWnd == IntPtr.Zero) { MessageBox.Show("먼저 유효한 '대상 창/프로세스 이름'을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } // 메시지 수정
            this.Visibility = Visibility.Hidden;
            System.Threading.Thread.Sleep(200);
            var selectionWindow = new SelectionWindow();
            selectionWindow.Activate();
            if (selectionWindow.ShowDialog() == true)
            {
                Wpf.Rect screenRect = selectionWindow.SelectedArea;
                GetWindowRect(hWnd, out RECT windowRect);
                int relativeX = (int)screenRect.X - windowRect.Left;
                int relativeY = (int)screenRect.Y - windowRect.Top;
                relativeX = Math.Max(0, relativeX);
                relativeY = Math.Max(0, relativeY);
                txtX.Text = relativeX.ToString();
                txtY.Text = relativeY.ToString();
                txtWidth.Text = ((int)screenRect.Width).ToString();
                txtHeight.Text = ((int)screenRect.Height).ToString();
                LogTrace($"btnSelectArea_Click: 새 영역 설정 - X={txtX.Text}, Y={txtY.Text}, W={txtWidth.Text}, H={txtHeight.Text}");
                UpdatePreviewImage();
            }
            this.Visibility = Visibility.Visible;
            this.Activate();
        }

        private void UpdatePreviewImage()
        {
            try
            {
                LogTrace("UpdatePreviewImage: 미리보기 업데이트 시작.");
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero) { LogTrace("UpdatePreviewImage: 대상 핸들 없음."); return; }
                if (IsIconic(hWnd)) { LogTrace("UpdatePreviewImage: 대상 최소화됨."); MessageBox.Show("대상 창이 최소화되어 있어 미리보기를 생성할 수 없습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); imgPreview.Source = null; return; }
                GetWindowRect(hWnd, out RECT rect);
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0) { LogTrace($"UpdatePreviewImage: 유효하지 않은 창 크기({width}x{height})."); return; }
                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp)) { IntPtr hdc = g.GetHdc(); PrintWindow(hWnd, hdc, 2); g.ReleaseHdc(hdc); }
                    var cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));
                    if (cropArea.Width <= 0 || cropArea.Height <= 0) { LogTrace($"UpdatePreviewImage: 유효하지 않은 자르기 영역({cropArea.Width}x{cropArea.Height})."); return; }
                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat)) 
                    { 
                        imgPreview.Source = BitmapToImageSource(croppedBmp); 
                        croppedBmp.Save(previewImagePath, Gdi.Imaging.ImageFormat.Png); 
                        LogTrace($"UpdatePreviewImage: 미리보기 이미지 저장 완료 - {previewImagePath}");
                    }
                }
            }
            catch (Exception ex) { LogTrace($"!!!!! UpdatePreviewImage에서 예외 발생 !!!!!\n{ex}");}
        }

        Wpf.Media.Imaging.BitmapImage BitmapToImageSource(Gdi.Bitmap bitmap)
        {
            using (MemoryStream memory = new MemoryStream())
            {
                bitmap.Save(memory, Gdi.Imaging.ImageFormat.Png);
                memory.Position = 0;
                var bitmapimage = new Wpf.Media.Imaging.BitmapImage();
                bitmapimage.BeginInit();
                bitmapimage.StreamSource = memory;
                bitmapimage.CacheOption = Wpf.Media.Imaging.BitmapCacheOption.OnLoad;
                bitmapimage.EndInit();
                return bitmapimage;
            }
        }
    }
}

&lt;/details>