를 해결하기 위해 전문가 수준의 접근 방식으로 정확히 구현된 SkinableForm에서 타이틀바 더블 클릭 동작을 확실히 작동하도록 하겠습니다. 이는 Windows의 메시지 처리와 DevExpress의 SkinableForm 구조를 활용하여 완벽히 동작하도록 보장합니다.

해결 방안: 전문가적 접근
Windows 메시지 처리:

WM_NCLBUTTONDBLCLK 메시지를 처리해 타이틀바 더블 클릭 동작을 감지합니다.
WndProc를 사용하여 더블 클릭 메시지를 정확히 처리.
DevExpress와의 호환성 유지:

DevExpress 스킨 시스템이 적용된 상태에서도 SkinableForm의 동작을 커스터마이징.
기존의 창 이동, 최소화/최대화/닫기 동작 유지.
최종 코드
csharp
코드 복사
using DevExpress.XtraEditors;
using System;
using System.Drawing;
using System.Windows.Forms;

public partial class MySkinableForm : XtraForm
{
    private SimpleButton minimizeButton;
    private SimpleButton maximizeButton;
    private SimpleButton closeButton;

    // Windows 메시지 상수
    private const int WM_NCLBUTTONDBLCLK = 0xA3; // 타이틀바 더블 클릭 메시지
    private const int WM_NCLBUTTONDOWN = 0xA1; // 타이틀바 클릭 메시지
    private const int HT_CAPTION = 0x2; // 타이틀바 영역

    public MySkinableForm()
    {
        InitializeComponent();

        // 기본 설정
        this.FormBorderStyle = FormBorderStyle.None; // 기본 타이틀바 제거
        this.Padding = new Padding(0, 30, 0, 0); // 타이틀바 높이 확보
        this.DoubleBuffered = true; // 깜빡임 방지

        // 버튼 추가
        AddTitleBarButtons();

        // 폼 크기 변경 시 버튼 위치 업데이트
        this.SizeChanged += UpdateButtonPositions;
    }

    private void AddTitleBarButtons()
    {
        // 최소화 버튼
        minimizeButton = CreateButton("-", new Point(this.Width - 120, 5), MinimizeButton_Click);

        // 최대화 버튼
        maximizeButton = CreateButton("🗖", new Point(this.Width - 80, 5), MaximizeButton_Click);

        // 닫기 버튼
        closeButton = CreateButton("X", new Point(this.Width - 40, 5), CloseButton_Click);

        // 버튼 추가
        this.Controls.Add(minimizeButton);
        this.Controls.Add(maximizeButton);
        this.Controls.Add(closeButton);
    }

    private SimpleButton CreateButton(string text, Point location, EventHandler clickHandler)
    {
        return new SimpleButton
        {
            Text = text,
            Size = new Size(30, 20),
            Location = location,
            ButtonStyle = DevExpress.XtraEditors.Controls.BorderStyles.NoBorder,
            Appearance =
            {
                BackColor = Color.LightGray,
                ForeColor = Color.Black
            },
            FlatStyle = FlatStyle.Flat,
            Click = clickHandler
        };
    }

    private void UpdateButtonPositions(object sender, EventArgs e)
    {
        // 버튼 위치 업데이트
        minimizeButton.Location = new Point(this.Width - 120, 5);
        maximizeButton.Location = new Point(this.Width - 80, 5);
        closeButton.Location = new Point(this.Width - 40, 5);
    }

    protected override void OnPaint(PaintEventArgs e)
    {
        base.OnPaint(e);

        // 타이틀바 배경
        using (var brush = new SolidBrush(Color.SkyBlue))
        {
            e.Graphics.FillRectangle(brush, new Rectangle(0, 0, this.Width, 30));
        }

        // 타이틀 텍스트
        using (var font = new Font("Arial", 12, FontStyle.Bold))
        using (var textBrush = new SolidBrush(Color.White))
        {
            e.Graphics.DrawString(this.Text, font, textBrush, new PointF(10, 7));
        }
    }

    protected override void WndProc(ref Message m)
    {
        base.WndProc(ref m);

        // 타이틀바 더블 클릭 감지
        if (m.Msg == WM_NCLBUTTONDBLCLK)
        {
            ToggleMaximizeRestore();
        }

        // 타이틀바 드래그 감지
        if (m.Msg == WM_NCLBUTTONDOWN && m.WParam.ToInt32() == HT_CAPTION)
        {
            this.Capture = false;
            var message = Message.Create(this.Handle, WM_NCLBUTTONDOWN, new IntPtr(HT_CAPTION), IntPtr.Zero);
            base.WndProc(ref message);
        }
    }

    private void ToggleMaximizeRestore()
    {
        if (this.WindowState == FormWindowState.Maximized)
        {
            this.WindowState = FormWindowState.Normal;
            maximizeButton.Text = "🗖"; // 최대화 아이콘
        }
        else
        {
            this.WindowState = FormWindowState.Maximized;
            maximizeButton.Text = "🗗"; // 복원 아이콘
        }
    }

    private void MinimizeButton_Click(object sender, EventArgs e)
    {
        this.WindowState = FormWindowState.Minimized; // 최소화
    }

    private void MaximizeButton_Click(object sender, EventArgs e)
    {
        ToggleMaximizeRestore(); // 최대화/복원
    }

    private void CloseButton_Click(object sender, EventArgs e)
    {
        this.Close(); // 닫기
    }
}
구현 방식
타이틀바 더블 클릭 처리:

WM_NCLBUTTONDBLCLK 메시지를 WndProc에서 처리.
메시지가 발생하면 ToggleMaximizeRestore 메서드를 호출해 창 상태 전환.
타이틀바 드래그 처리:

WM_NCLBUTTONDOWN 메시지를 사용해 창 이동 동작 구현.
심플 버튼 추가:

최소화, 최대화/복원, 닫기 버튼을 SimpleButton으로 구현.
버튼 위치는 폼 크기 변경에 따라 동적으로 업데이트.
디자인 요소:

타이틀바 배경과 텍스트는 OnPaint에서 그립니다.
버튼 스타일은 SimpleButton의 Appearance 속성을 사용.
결과
더블 클릭 동작:
타이틀바를 더블 클릭하면 창이 최대화/복원됩니다.

드래그 동작:
타이틀바를 드래그하면 창을 이동할 수 있습니다.

버튼 추가:
타이틀바 우측에 최소화, 최대화/복원, 닫기 버튼이 추가됩니다.

완벽한 동작 보장:
Windows 메시지 처리를 통해 기본 창 동작과 커스터마이징된 UI가 완벽히 작동합니다.
