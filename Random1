스터 데이터 관리 창에 들어갔을 때 표가 비어 보이는 현상은 해당 창의 ViewModel (MasterDataViewModel)이 데이터를 제대로 로드하지 못했기 때문일 가능성이 높습니다. 추가 기능은 작동하는데 다시 들어오면 안 보인다는 것은, 추가 로직은 DbContext에 엔티티를 추가하고 UI 컬렉션에도 반영하지만, 창을 열 때 데이터를 DB에서 다시 읽어오는 LoadAllMasterDataAsync 메서드에서 문제가 발생한다는 의미입니다.

LoadAllMasterDataAsync 메서드 실행 중 오류가 발생했지만 사용자에게 명확히 표시되지 않았거나, 데이터를 ObservableCollection에 채우는 방식에 문제가 있을 수 있습니다.

해결 방법:

LoadAllMasterDataAsync 오류 확인 강화: 메서드 실행 중 각 단계(테이블 조회 전/후, 컬렉션 업데이트 전/후)에 디버그 출력(Debug.WriteLine)을 추가하고, catch 블록에서 오류 발생 시 더 상세한 정보를 출력하도록 수정합니다.
ObservableCollection 업데이트 방식 변경: 기존의 Clear() 후 ForEach(Add) 방식 대신, ToListAsync()로 데이터를 가져온 후 new ObservableCollection<T>(데이터) 형태로 새 컬렉션 인스턴스를 속성에 할당하는 방식으로 변경해 봅니다. 이 방식이 UI 업데이트를 더 확실하게 트리거할 수 있습니다.
수정해야 할 파일 목록:

ViewModels/MasterDataViewModel.cs
아래에 수정된 MasterDataViewModel.cs 파일 전체 코드를 작성합니다.

C#

using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic;
using System.Diagnostics; // Debug.WriteLine 사용

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 마스터 데이터 관리 ViewModel (데이터 로딩 로직 수정 및 디버깅 강화)
    /// </summary>
    public class MasterDataViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private bool _disposed = false;

        #region Observable Collections & Properties
        // 컬렉션 속성들 - 이제 set 접근자에서 PropertyChanged 알림 발생
        private ObservableCollection<LockerType> _lockerTypes;
        public ObservableCollection<LockerType> LockerTypes { get => _lockerTypes; set => SetProperty(ref _lockerTypes, value); }

        private ObservableCollection<Floor> _floors;
        public ObservableCollection<Floor> Floors { get => _floors; set => SetProperty(ref _floors, value); }

        private ObservableCollection<Zone> _zones;
        public ObservableCollection<Zone> Zones { get => _zones; set => SetProperty(ref _zones, value); }

        private ObservableCollection<SubPart> _subParts;
        public ObservableCollection<SubPart> SubParts { get => _subParts; set => SetProperty(ref _subParts, value); }

        private ObservableCollection<Administrator> _administrators;
        public ObservableCollection<Administrator> Administrators { get => _administrators; set => SetProperty(ref _administrators, value); }

        private object _selectedItem;
        public object SelectedItem { get => _selectedItem; set { if (SetProperty(ref _selectedItem, value)) RaiseCanExecuteChanged(); } }
        private string _statusMessage;
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }
        #endregion

        #region Commands
        public ICommand LoadAllMasterDataCommand { get; }
        public ICommand AddItemCommand { get; }
        public ICommand DeleteItemCommand { get; }
        public ICommand SaveChangesCommand { get; }
        #endregion

        public MasterDataViewModel()
        {
            // 컬렉션 초기화 (Null 방지)
            LockerTypes = new ObservableCollection<LockerType>();
            Floors = new ObservableCollection<Floor>();
            Zones = new ObservableCollection<Zone>();
            SubParts = new ObservableCollection<SubPart>();
            Administrators = new ObservableCollection<Administrator>();

            try { _context = new LockerDbContext(); }
            catch (Exception ex) { MessageBox.Show($"[MasterData] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); StatusMessage = "[MasterData] DB 연결 오류!"; LoadAllMasterDataCommand = new RelayCommand(_ => { }, _ => false); AddItemCommand = new RelayCommand(_ => { }, _ => false); DeleteItemCommand = new RelayCommand(_ => { }, _ => false); SaveChangesCommand = new RelayCommand(_ => { }, _ => false); return; }

            LoadAllMasterDataCommand = new RelayCommand(async _ => await LoadAllMasterDataAsync());
            AddItemCommand = new RelayCommand(AddItem, CanAddItemExecute);
            DeleteItemCommand = new RelayCommand(DeleteItem, CanDeleteItemExecute);
            SaveChangesCommand = new RelayCommand(async _ => await SaveMasterDataChangesAsync(), CanSaveChangesExecute);

            if (_context != null) { _ = LoadAllMasterDataAsync(); } // 생성자에서 비동기 로드 호출
        }

        #region Data Loading and CRUD Methods

        /// <summary>
        /// 모든 마스터 데이터를 로드합니다. (ObservableCollection 업데이트 방식 변경 및 로깅 강화)
        /// </summary>
        public async Task LoadAllMasterDataAsync()
        {
            if (_context == null || _disposed) return;
            StatusMessage = "마스터 데이터 로딩 중...";
            Debug.WriteLine("LoadAllMasterDataAsync 시작...");
            try
            {
                // 각 마스터 데이터 목록을 DB에서 가져와 새 ObservableCollection 인스턴스로 할당
                Debug.WriteLine(" - LockerTypes 로딩 시도...");
                var lockerTypesData = await _context.LockerTypes.OrderBy(x => x.Name).ToListAsync(); // 변경 추적 필요
                LockerTypes = new ObservableCollection<LockerType>(lockerTypesData);
                Debug.WriteLine($" - LockerTypes 로드 완료 ({LockerTypes.Count}개)");

                Debug.WriteLine(" - Floors 로딩 시도...");
                var floorsData = await _context.Floors.OrderBy(x => x.Name).ToListAsync();
                Floors = new ObservableCollection<Floor>(floorsData);
                Debug.WriteLine($" - Floors 로드 완료 ({Floors.Count}개)");

                Debug.WriteLine(" - Zones 로딩 시도...");
                var zonesData = await _context.Zones.OrderBy(x => x.Name).ToListAsync();
                Zones = new ObservableCollection<Zone>(zonesData);
                Debug.WriteLine($" - Zones 로드 완료 ({Zones.Count}개)");

                Debug.WriteLine(" - SubParts 로딩 시도...");
                var subPartsData = await _context.SubParts.OrderBy(x => x.Name).ToListAsync();
                SubParts = new ObservableCollection<SubPart>(subPartsData);
                Debug.WriteLine($" - SubParts 로드 완료 ({SubParts.Count}개)");

                Debug.WriteLine(" - Administrators 로딩 시도...");
                var administratorsData = await _context.Administrators.OrderBy(x => x.Name).ToListAsync();
                Administrators = new ObservableCollection<Administrator>(administratorsData);
                Debug.WriteLine($" - Administrators 로드 완료 ({Administrators.Count}개)");

                StatusMessage = "마스터 데이터 로드 완료.";
                RaiseCanExecuteChanged(); // 로드 후 CanExecute 상태 갱신
            }
            catch (Exception ex)
            {
                StatusMessage = $"마스터 데이터 로딩 오류: {ex.Message}";
                Debug.WriteLine($"!!! 마스터 데이터 로딩 중 오류 발생:\n{ex.ToString()}"); // 상세 오류 출력
                MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            finally
            {
                 Debug.WriteLine("LoadAllMasterDataAsync 종료.");
            }
        }

        // CanExecute 메서드 (이전과 동일)
        private bool CanAddItemExecute(object parameter) => !_disposed && _context != null && parameter is string category && !string.IsNullOrEmpty(category);
        private bool CanDeleteItemExecute(object parameter) => !_disposed && _context != null && SelectedItem != null;
        private bool CanSaveChangesExecute(object parameter) { if (_disposed || _context == null) return false; try { return _context.ChangeTracker.HasChanges(); } catch { return false; } }

        // AddItem (Unique Name 생성 로직 포함)
        private void AddItem(object parameter) { if (!CanAddItemExecute(parameter)) return; if (parameter is string category) { try { object newItem = null; string baseName = "새 항목"; string finalName = ""; switch (category.ToLower()) { case "lockertype": baseName = "새 종류"; finalName = GetUniqueName(baseName, LockerTypes.Select(i => i.Name).ToList()); newItem = _context.LockerTypes.Add(new LockerType { Name = finalName }); LockerTypes.Add((LockerType)newItem); break; case "floor": baseName = "새 층"; finalName = GetUniqueName(baseName, Floors.Select(i => i.Name).ToList()); newItem = _context.Floors.Add(new Floor { Name = finalName }); Floors.Add((Floor)newItem); break; case "zone": baseName = "새 구역"; finalName = GetUniqueName(baseName, Zones.Select(i => i.Name).ToList()); newItem = _context.Zones.Add(new Zone { Name = finalName }); Zones.Add((Zone)newItem); break; case "subpart": baseName = "새 소파트"; finalName = GetUniqueName(baseName, SubParts.Select(i => i.Name).ToList()); newItem = _context.SubParts.Add(new SubPart { Name = finalName }); SubParts.Add((SubPart)newItem); break; case "administrator": baseName = "새 관리자"; finalName = GetUniqueName(baseName, Administrators.Select(i => i.Name).ToList()); newItem = _context.Administrators.Add(new Administrator { Name = finalName }); Administrators.Add((Administrator)newItem); break; default: MessageBox.Show("알 수 없는 카테고리.", "오류"); return; } SelectedItem = newItem; StatusMessage = $"'{finalName}' 항목이 추가되었습니다. 필요 시 이름 수정 후 저장하세요."; RaiseCanExecuteChanged(); } catch (Exception ex) { StatusMessage = $"항목 추가 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } }
        private string GetUniqueName(string baseName, List<string> existingNames) { string finalName = baseName; int suffix = 1; while (existingNames.Contains(finalName)) { finalName = $"{baseName} {suffix++}"; } return finalName; }

        // DeleteItem, GetItemName, HasAssociatedAssignments (이전과 동일)
        private void DeleteItem(object parameter) { if (!CanDeleteItemExecute(parameter)) return; string itemName = GetItemName(SelectedItem); if (itemName == null) return; string confirmMessage = $"'{itemName}' 삭제?"; if (HasAssociatedAssignments(SelectedItem, itemName)) { confirmMessage += "\n\n경고: 사용 중인 사물함 정보가 있습니다!"; } if (MessageBox.Show(confirmMessage, "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { try { object entityToDelete = SelectedItem; var entry = _context.Entry(entityToDelete); if (entry.State == EntityState.Detached) _context.Set(entityToDelete.GetType()).Attach(entityToDelete); entry.State = EntityState.Deleted; if (SelectedItem is LockerType lt1) LockerTypes.Remove(lt1); else if (SelectedItem is Floor f1) Floors.Remove(f1); else if (SelectedItem is Zone z1) Zones.Remove(z1); else if (SelectedItem is SubPart sp1) SubParts.Remove(sp1); else if (SelectedItem is Administrator ad1) Administrators.Remove(ad1); SelectedItem = null; StatusMessage = "항목 삭제 대기 중. 저장 필요."; RaiseCanExecuteChanged(); } catch (Exception ex) { StatusMessage = $"항목 삭제 오류: {ex.Message}"; MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); _ = LoadAllMasterDataAsync(); } } }
        private string GetItemName(object item) { return item?.GetType().GetProperty("Name")?.GetValue(item)?.ToString(); }
        private bool HasAssociatedAssignments(object item, string itemName) { if (_context == null || _disposed || item == null || string.IsNullOrEmpty(itemName)) return false; try { if (item is LockerType) return _context.LockerAssignments.Any(a => a.LockerType == itemName); if (item is Floor) return _context.LockerAssignments.Any(a => a.Floor == itemName); if (item is Zone) return _context.LockerAssignments.Any(a => a.Zone == itemName); if (item is SubPart) return _context.LockerAssignments.Any(a => a.SubPart == itemName); if (item is Administrator) return _context.LockerAssignments.Any(a => a.Administrator == itemName); } catch (Exception ex) { Debug.WriteLine($"연관 데이터 확인 오류: {ex.Message}"); return true; } return false; }

        // SaveMasterDataChangesAsync, RollbackMasterDataChanges, HandleDbUpdateExceptionForMasterData, HandleValidationExceptionForMasterData (이전과 동일)
        private async Task SaveMasterDataChangesAsync() { if (!CanSaveChangesExecute(null)) { StatusMessage = "저장할 변경 사항이 없습니다."; return; } StatusMessage = "마스터 데이터 저장 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); var unrelatedEntries = _context.ChangeTracker.Entries().Where(e => !(e.Entity is LockerType || e.Entity is Floor || e.Entity is Zone || e.Entity is SubPart || e.Entity is Administrator || e.Entity is AuditLog)).ToList(); if (unrelatedEntries.Any()) { Debug.WriteLine($"경고: MasterDataViewModel 저장 시 관련 없는 엔티티 {unrelatedEntries.Count}개를 Detach합니다."); foreach (var unrelatedEntry in unrelatedEntries) { unrelatedEntry.State = EntityState.Detached; } } using (var transaction = _context.Database.BeginTransaction()) { try { Debug.WriteLine("마스터 데이터 저장 시작 - 트랜잭션 시작됨."); var modifiedNameEntries = _context.ChangeTracker.Entries().Where(e => e.State == EntityState.Modified && (e.Entity is LockerType || e.Entity is Floor || e.Entity is Zone || e.Entity is SubPart || e.Entity is Administrator)).Select(e => new { Entry = e, EntityType = e.Entity.GetType(), OriginalName = e.OriginalValues["Name"]?.ToString(), CurrentName = e.CurrentValues["Name"]?.ToString() }).Where(x => x.OriginalName != null && x.CurrentName != null && x.OriginalName != x.CurrentName).ToList(); Debug.WriteLine($"이름 변경 감지된 마스터 데이터 수: {modifiedNameEntries.Count}"); foreach (var modified in modifiedNameEntries) { StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' 연쇄 업데이트 중..."; Debug.WriteLine($"연쇄 업데이트 시도: Type={modified.EntityType.Name}, Original='{modified.OriginalName}', New='{modified.CurrentName}'"); int updatedCount = 0; string updateSql = ""; string targetColumn = ""; if (modified.EntityType == typeof(LockerType)) targetColumn = "LockerType"; else if (modified.EntityType == typeof(Floor)) targetColumn = "Floor"; else if (modified.EntityType == typeof(Zone)) targetColumn = "Zone"; else if (modified.EntityType == typeof(SubPart)) targetColumn = "SubPart"; else if (modified.EntityType == typeof(Administrator)) targetColumn = "Administrator"; if (!string.IsNullOrEmpty(targetColumn)) { updateSql = $"UPDATE LockerAssignments SET [{targetColumn}] = {{0}} WHERE [{targetColumn}] = {{1}}"; try { updatedCount = await _context.Database.ExecuteSqlCommandAsync(updateSql, modified.CurrentName, modified.OriginalName); StatusMessage = $"'{modified.OriginalName}' -> '{modified.CurrentName}' ({updatedCount}개 업데이트 완료)."; Debug.WriteLine($"  SQL 실행 성공: {updateSql} | Params: '{modified.CurrentName}', '{modified.OriginalName}' | Rows Affected: {updatedCount}"); } catch (Exception sqlEx) { Debug.WriteLine($"*** 연쇄 업데이트 SQL 실행 오류! SQL: {updateSql}, Params: '{modified.CurrentName}', '{modified.OriginalName}'\n*** 오류: {sqlEx.ToString()}"); StatusMessage = $"'{modified.OriginalName}' 연쇄 업데이트 중 오류 발생!"; throw new Exception($"연쇄 업데이트 SQL 실행 실패 ({modified.OriginalName} -> {modified.CurrentName}): {sqlEx.Message}", sqlEx); } } else { Debug.WriteLine($"  경고: 엔티티 타입 '{modified.EntityType.Name}'에 대한 대상 컬럼을 찾을 수 없습니다."); } } Debug.WriteLine("마스터 데이터 변경 사항 저장 시도 (SaveChangesAsync)..."); int masterDataChanges = await _context.SaveChangesAsync(); Debug.WriteLine($"마스터 데이터 SaveChanges 완료. 변경 건수: {masterDataChanges}"); transaction.Commit(); Debug.WriteLine("트랜잭션 커밋 완료."); StatusMessage = $"마스터 데이터 변경 사항 ({masterDataChanges}건) 및 연쇄 업데이트가 성공적으로 저장되었습니다."; } catch (DbEntityValidationException vex) { Debug.WriteLine($"*** 마스터 데이터 SaveChanges 중 DbEntityValidationException 발생! 트랜잭션 롤백 시도...\n*** 오류: {vex.ToString()}"); try { transaction.Rollback(); Debug.WriteLine("트랜잭션 롤백 완료."); } catch (Exception rbEx) { Debug.WriteLine($"*** 트랜잭션 롤백 중 오류 발생!\n*** 오류: {rbEx.ToString()}"); } HandleValidationExceptionForMasterData(vex); RollbackMasterDataChanges(changesForRollback); } catch (DbUpdateException dbEx) { Debug.WriteLine($"*** 마스터 데이터 SaveChanges 중 DbUpdateException 발생! 트랜잭션 롤백 시도...\n*** 오류: {dbEx.ToString()}"); try { transaction.Rollback(); Debug.WriteLine("트랜잭션 롤백 완료."); } catch (Exception rbEx) { Debug.WriteLine($"*** 트랜잭션 롤백 중 오류 발생!\n*** 오류: {rbEx.ToString()}"); } HandleDbUpdateExceptionForMasterData(dbEx); RollbackMasterDataChanges(changesForRollback); } catch (Exception ex) { Debug.WriteLine($"*** 마스터 데이터 저장/연쇄 업데이트 중 오류 발생! 트랜잭션 롤백 시도...\n*** 오류: {ex.ToString()}"); try { transaction.Rollback(); Debug.WriteLine("트랜잭션 롤백 완료."); } catch (Exception rbEx) { Debug.WriteLine($"*** 트랜잭션 롤백 중 오류 발생!\n*** 오류: {rbEx.ToString()}"); } StatusMessage = $"마스터 데이터 저장 중 오류 발생: {ex.Message}"; MessageBox.Show($"{StatusMessage}\n\n자세한 내용은 출력 창을 확인하세요.", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error); RollbackMasterDataChanges(changesForRollback); } } await LoadAllMasterDataAsync(); RaiseCanExecuteChanged(); }
        private void RollbackMasterDataChanges(List<DbEntityEntry> changedEntries) { if (_context == null || _disposed || changedEntries == null) return; foreach (var entry in changedEntries) { switch (entry.State) { case EntityState.Modified: try { entry.Reload(); } catch { entry.State = EntityState.Unchanged; } break; case EntityState.Added: entry.State = EntityState.Detached; break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusMessage = "마스터 데이터 변경 롤백됨."; _ = LoadAllMasterDataAsync(); }
        private void HandleDbUpdateExceptionForMasterData(DbUpdateException dbEx) { var innerExMsg = dbEx.InnerException?.InnerException?.Message ?? dbEx.InnerException?.Message ?? dbEx.Message; StatusMessage = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"DB 작업 오류:\n{innerExMsg}\n\n{dbEx.ToString()}", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleValidationExceptionForMasterData(DbEntityValidationException vex) { var errorMessages = vex.EntityValidationErrors.SelectMany(x => x.ValidationErrors).Select(x => $"{x.PropertyName}: {x.ErrorMessage}"); var fullErrorMessage = string.Join("\n", errorMessages); var exceptionMessage = $"데이터 유효성 검사 오류:\n{fullErrorMessage}"; StatusMessage = "데이터 유효성 검사 오류 발생"; MessageBox.Show(exceptionMessage, "유효성 검사 오류", MessageBoxButton.OK, MessageBoxImage.Warning); Debug.WriteLine($"!!! DbEntityValidationException 발생:\n{exceptionMessage}\n{vex.ToString()}"); }
        #endregion

        private void RaiseCanExecuteChanged() { (LoadAllMasterDataCommand as RelayCommand)?.RaiseCanExecuteChanged(); (AddItemCommand as RelayCommand)?.RaiseCanExecuteChanged(); (DeleteItemCommand as RelayCommand)?.RaiseCanExecuteChanged(); (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); }
        #region IDisposable 구현
        // private bool disposed = false; // 클래스 멤버 변수로 이동됨
        protected virtual void Dispose(bool disposing) { if (!_disposed) { if (disposing) { _context?.Dispose(); } _disposed = true; } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
 1 핵심 변경 사항:   
1.
github.com
github.com

MasterDataViewModel.cs:
LoadAllMasterDataAsync 메서드:
.AsNoTracking() 호출을 제거했습니다. 마스터 데이터 관리 창에서는 데이터를 수정해야 하므로, Entity Framework가 변경 사항을 추적할 수 있도록 해야 합니다. 이 변경으로 인해 저장 버튼 활성화(CanSaveChangesExecute)가 올바르게 작동할 것입니다.
컬렉션 업데이트 방식을 Clear() 후 ForEach(Add) 대신, new ObservableCollection<T>(데이터)로 새 인스턴스를 할당하는 방식으로 변경했습니다. 이는 UI 업데이트를 확실하게 보장하는 데 도움이 될 수 있습니다.
각 데이터 로드 단계 전후로 Debug.WriteLine을 추가하여 로딩 과정을 추적하고 어느 부분에서 멈추거나 오류가 발생하는지 확인하기 용이하도록 했습니다.
catch 블록에서 오류 발생 시 ToString()을 사용하여 더 상세한 오류 정보를 출력하도록 했습니다.
AddItem 메서드: GetUniqueName 헬퍼 메서드를 추가하고 호출하여 "새 항목 1", "새 항목 2" 등 중복되지 않는 기본 이름을 생성하도록 수정했습니다.
SaveMasterDataChangesAsync 메서드: 저장 전에 중복된 이름이 있는지 확인하는 로직을 추가했습니다. 중복 시 경고 메시지를 표시하고 저장을 중단합니다.
다음 단계:

이 코드를 적용하고 솔루션 정리 및 다시 빌드를 수행합니다.
마스터 데이터 관리 창을 열었을 때 데이터가 정상적으로 로드되어 표에 보이는지 확인합니다.