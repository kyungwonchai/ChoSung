네, 바로 Confluence에 등록하실 수 있도록 Git 주요 명령어와 사용법을 정리한 HTML 파일을 작성해 드리겠습니다.

아래 내용을 복사하여 .html 확장자로 저장하신 후 Confluence의 'HTML 삽입' 기능을 이용해 붙여넣기 하시면 됩니다.

HTML

<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <title>Git Command Reference</title>
    <style>
        body {
            font-family: sans-serif;
            line-height: 1.6;
            color: #333;
        }
        h1, h2 {
            border-bottom: 2px solid #eaecef;
            padding-bottom: 0.3em;
        }
        h1 {
            color: #1D2129;
        }
        h2 {
            color: #4267B2;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1em;
            border: 1px solid #ddd;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        code {
            background-color: #eee;
            padding: 0.2em 0.4em;
            margin: 0;
            font-size: 85%;
            border-radius: 3px;
            font-family: "SFMono-Regular", Consolas, "Liberation Mono", Menlo, Courier, monospace;
        }
        .description {
            margin-top: 5px;
            font-size: 0.9em;
            color: #555;
        }
    </style>
</head>
<body>

    <h1>Git 주요 명령어 가이드 📘</h1>
    <p>Git 사용 시 자주 쓰이는 필수 명령어들을 정리한 문서입니다. Confluence에 바로 등록하여 팀원들과 공유하세요.</p>

    <h2>저장소 설정 및 생성 (Repository Setup)</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git init</code></td>
                <td>
                    <code>git init</code>
                    <div class="description">현재 디렉토리를 Git 저장소로 초기화합니다. <code>.git</code> 디렉토리가 생성됩니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git clone</code></td>
                <td>
                    <code>git clone [저장소_URL]</code>
                    <div class="description">원격 저장소(Remote Repository)를 로컬 환경으로 복제합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git config</code></td>
                <td>
                    <code>git config --global user.name "[이름]"</code><br>
                    <code>git config --global user.email "[이메일]"</code>
                    <div class="description">Git 사용자의 이름과 이메일 정보를 설정합니다. 최초 설정 시 <code>--global</code> 옵션으로 전역 설정을 해두는 것이 편리합니다.</div>
                </td>
            </tr>
        </tbody>
    </table>

    <h2>변경사항 저장 (Staging & Committing) 💾</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git status</code></td>
                <td>
                    <code>git status</code>
                    <div class="description">저장소의 현재 상태를 확인합니다. 변경된 파일, 스테이징된 파일, 추적하지 않는 파일 목록을 보여줍니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git add</code></td>
                <td>
                    <code>git add [파일명]</code><br>
                    <code>git add .</code>
                    <div class="description">작업 디렉토리의 변경사항을 스테이징 영역(Staging Area)으로 추가합니다. <code>.</code>은 모든 변경사항을 의미합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git commit</code></td>
                <td>
                    <code>git commit -m "[커밋_메시지]"</code>
                    <div class="description">스테이징 영역에 있는 변경사항들을 저장소 이력(History)에 확정적으로 기록(커밋)합니다.</div>
                </td>
            </tr>
             <tr>
                <td><code>git rm</code></td>
                <td>
                    <code>git rm [파일명]</code>
                    <div class="description">Git 저장소에서 파일을 삭제하고, 해당 삭제 내역을 스테이징합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git mv</code></td>
                <td>
                    <code>git mv [기존_파일명] [새_파일명]</code>
                    <div class="description">파일 이름을 변경하거나 파일을 이동시키고, 해당 내역을 스테이징합니다.</div>
                </td>
            </tr>
        </tbody>
    </table>

    <h2>브랜치 작업 (Branching & Merging) 🌿</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git branch</code></td>
                <td>
                    <code>git branch</code><br>
                    <code>git branch [브랜치명]</code>
                    <div class="description">브랜치 목록을 확인하거나, 새로운 브랜치를 생성합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git checkout</code></td>
                <td>
                    <code>git checkout [브랜치명]</code><br>
                    <code>git checkout -b [새_브랜치명]</code>
                    <div class="description">다른 브랜치로 전환(HEAD 이동)하거나, <code>-b</code> 옵션으로 브랜치 생성과 동시에 전환합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git switch</code></td>
                <td>
                    <code>git switch [브랜치명]</code><br>
                    <code>git switch -c [새_브랜치명]</code>
                    <div class="description"><code>checkout</code>의 브랜치 전환 기능을 분리한 최신 명령어입니다. 사용을 권장합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git merge</code></td>
                <td>
                    <code>git merge [병합할_브랜치명]</code>
                    <div class="description">현재 브랜치에 다른 브랜치의 변경 이력을 병합합니다.</div>
                </td>
            </tr>
             <tr>
                <td><code>git rebase</code></td>
                <td>
                    <code>git rebase [기준_브랜치명]</code>
                    <div class="description">현재 브랜치의 베이스(시작점)를 다른 브랜치의 최신 커밋으로 재배치하여 이력을 깔끔하게 만듭니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git branch -d</code></td>
                <td>
                    <code>git branch -d [삭제할_브랜치명]</code>
                    <div class="description">병합이 완료된 브랜치를 삭제합니다. (<code>-D</code>는 강제 삭제)</div>
                </td>
            </tr>
        </tbody>
    </table>
    
    <h2>원격 저장소 연동 (Remote) ☁️</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git remote</code></td>
                <td>
                    <code>git remote -v</code><br>
                    <code>git remote add [이름] [URL]</code>
                    <div class="description">연결된 원격 저장소 목록을 확인하거나, 새로운 원격 저장소를 추가합니다. 보통 <code>origin</code>이라는 이름을 사용합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git push</code></td>
                <td>
                    <code>git push [원격저장소명] [브랜치명]</code>
                    <div class="description">로컬 저장소의 커밋 이력을 원격 저장소로 업로드합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git pull</code></td>
                <td>
                    <code>git pull [원격저장소명] [브랜치명]</code>
                    <div class="description">원격 저장소의 최신 이력을 가져와(fetch) 로컬 브랜치에 병합(merge)합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git fetch</code></td>
                <td>
                    <code>git fetch [원격저장소명]</code>
                    <div class="description">원격 저장소의 최신 이력을 로컬로 가져오기만 합니다. 병합은 수동으로 해야 합니다.</div>
                </td>
            </tr>
        </tbody>
    </table>

    <h2>이력 조회 및 되돌리기 (History & Revert) ⏪</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git log</code></td>
                <td>
                    <code>git log</code><br>
                    <code>git log --oneline --graph --all</code>
                    <div class="description">커밋 이력을 시간순으로 보여줍니다. 다양한 옵션으로 출력을 꾸밀 수 있습니다.</div>
                </td>
            </tr>
             <tr>
                <td><code>git diff</code></td>
                <td>
                    <code>git diff</code><br>
                    <code>git diff [커밋1] [커밋2]</code>
                    <div class="description">작업 디렉토리의 변경 내용이나 커밋 간의 차이점을 보여줍니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git reset</code></td>
                <td>
                    <code>git reset --hard [커밋_해시]</code><br>
                    <code>git reset --soft [커밋_해시]</code><br>
                    <code>git reset --mixed [커밋_해시]</code>
                    <div class="description">지정한 커밋 시점으로 프로젝트 상태를 되돌립니다. 옵션에 따라 되돌리는 범위가 다릅니다. (<code>--hard</code>: 작업내용 완전삭제, <code>--soft</code>: 작업내용 유지, 스테이징도 유지, <code>--mixed</code>(기본값): 작업내용 유지, 스테이징은 취소)</div>
                </td>
            </tr>
            <tr>
                <td><code>git revert</code></td>
                <td>
                    <code>git revert [커밋_해시]</code>
                    <div class="description">특정 커밋에서 이루어진 변경사항을 취소하는 새로운 커밋을 생성합니다. 안전하게 이력을 되돌릴 때 사용합니다.</div>
            </tr>
            <tr>
                <td><code>git restore</code></td>
                <td>
                    <code>git restore [파일명]</code><br>
                    <code>git restore --source [커밋_해시] [파일명]</code>
                    <div class="description">작업 디렉토리의 파일을 특정 상태로 복원합니다. 스테이징 취소 시에도 사용됩니다. (<code>git restore --staged [파일명]</code>)</div>
                </td>
            </tr>
        </tbody>
    </table>

    <h2>임시 저장 (Stash) 📦</h2>
    <table>
        <thead>
            <tr>
                <th>명령어</th>
                <th>주요 사용법 및 설명</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><code>git stash</code></td>
                <td>
                    <code>git stash</code> 또는 <code>git stash save "[메시지]"</code>
                    <div class="description">커밋하지 않은 변경사항을 임시로 저장하고 작업 디렉토리를 깨끗하게 만듭니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git stash list</code></td>
                <td>
                    <code>git stash list</code>
                    <div class="description">임시 저장된 목록(스택)을 확인합니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git stash apply</code></td>
                <td>
                    <code>git stash apply</code>
                    <div class="description">임시 저장된 변경사항을 현재 브랜치에 적용합니다. 스택에는 내용이 그대로 남아있습니다.</div>
                </td>
            </tr>
            <tr>
                <td><code>git stash pop</code></td>
                <td>
                    <code>git stash pop</code>
                    <div class="description">임시 저장된 변경사항을 적용하고, 스택에서 해당 내역을 삭제합니다.</div>
                </td>
            </tr>
             <tr>
                <td><code>git stash drop</code></td>
                <td>
                    <code>git stash drop</code>
                    <div class="description">가장 최근의 임시 저장 내역을 삭제합니다.</div>
                </td>
            </tr>
        </tbody>
    </table>
