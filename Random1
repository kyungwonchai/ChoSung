using UnityEngine;
using UnityEngine.UI;
using System.Collections;
using System.Collections.Generic;
using System.Text;

public class RackSystemManager : MonoBehaviour
{
    public Transform rackContainer;
    public Material defaultLampMaterial;
    public Material litLampMaterial;
    public float animationDuration = 0.5f;
    public float slideOutDistance = 0.4f;

    private Dictionary<string, GameObject> maskObjects = new Dictionary<string, GameObject>();
    private Dictionary<string, Renderer> lampRenderers = new Dictionary<string, Renderer>();
    private Dictionary<string, string> cleanToMessyRackNameMap = new Dictionary<string, string>();

    void Start()
    {
        InitializeAllRacks();
    }

    void InitializeAllRacks()
    {
        Debug.Log("랙 시스템 초기화를 시작합니다...");
        if (rackContainer == null) { Debug.LogError("Rack Container가 연결되지 않았습니다!"); return; }

        int rackCounterA = 1;
        int rackCounterB = 1;

        // ★★★ 요청하신 디버깅 기능 1: 번역 맵 생성 과정 출력 ★★★
        Debug.Log("--- 생성된 번역 맵 (깨끗한 ID -> Hierarchy 실제 이름) ---");

        foreach (Transform rackParent in rackContainer)
        {
            string messyRackName = rackParent.name;
            string cleanRackID;

            if (messyRackName.StartsWith("A"))
            {
                cleanRackID = $"A_{rackCounterA:02d}";
                rackCounterA++;
            }
            else if (messyRackName.StartsWith("B"))
            {
                cleanRackID = $"B_{rackCounterB:02d}";
                rackCounterB++;
            }
            else
            {
                continue;
            }

            if (!cleanToMessyRackNameMap.ContainsKey(cleanRackID))
            {
                cleanToMessyRackNameMap.Add(cleanRackID, messyRackName);
                // 어떤 실제 이름이 어떤 깨끗한 ID로 매핑되었는지 콘솔에 출력
                Debug.Log($"매핑: '{messyRackName}'  ->  '{cleanRackID}'");
            }
            
            Renderer[] childRenderers = rackParent.GetComponentsInChildren<Renderer>(true);
            foreach(Renderer rend in childRenderers)
            {
                string localName = rend.name;
                string globalKey = $"{messyRackName}_{localName}";

                if (localName.StartsWith("Lamp_"))
                {
                    if (!lampRenderers.ContainsKey(globalKey))
                        lampRenderers.Add(globalKey, rend);
                }
                else if (localName.StartsWith("Mask_"))
                {
                     if (!maskObjects.ContainsKey(globalKey))
                        maskObjects.Add(globalKey, rend.gameObject);
                }
            }
        }
        
        Debug.Log($"초기화 완료: {lampRenderers.Count}개의 램프, {maskObjects.Count}개의 마스크가 등록되었습니다.");
    }

    public void ProcessBarcode(string cleanBarcode)
    {
        ResetPreviousSlot();

        if (string.IsNullOrEmpty(cleanBarcode) || cleanBarcode.Length != 11 || !cleanBarcode.StartsWith("MMF10"))
        {
            Debug.LogError($"잘못된 바코드 형식입니다: {cleanBarcode}. (11자리, 예: MMF10A12C05)");
            return;
        }

        string row = cleanBarcode.Substring(5, 1);
        string rackNum = cleanBarcode.Substring(6, 2);
        string floor = cleanBarcode.Substring(8, 1);
        string slotNum = cleanBarcode.Substring(9, 2);
        string cleanRackID = $"{row}_{rackNum}";

        // ★★★ 요청하신 디버깅 기능 2: 바코드 -> 실제 주소 변환 과정 출력 ★★★
        Debug.Log($"--- 입력된 바코드 '{cleanBarcode}' 해석 과정 ---");
        Debug.Log($"1. 깨끗한 랙 ID 생성: '{cleanRackID}'");

        if (cleanToMessyRackNameMap.TryGetValue(cleanRackID, out string messyRackName))
        {
            Debug.Log($"2. 번역 맵에서 '{cleanRackID}'에 해당하는 실제 랙 이름 '{messyRackName}'을 찾았습니다.");
            
            string lampKey = $"{messyRackName}_Lamp_{floor}{slotNum}";
            string maskKey = $"{messyRackName}_Mask_{floor}{slotNum}";
            
            Debug.Log($"3. 최종 검색할 실제 주소: '{maskKey}'");

            if (lampRenderers.TryGetValue(lampKey, out Renderer targetLampRenderer))
            {
                if (litLampMaterial != null) targetLampRenderer.material = litLampMaterial;
                lastLitLamp = targetLampRenderer;
            }
            else { Debug.LogWarning($"경고: {lampKey} 이름의 램프를 찾지 못했습니다."); }

            if (maskObjects.TryGetValue(maskKey, out GameObject targetMask))
            {
                lastMovedMask = targetMask;
                lastMaskOriginalLocalPosition = targetMask.transform.localPosition;
                lastAnimationCoroutine = StartCoroutine(AnimateMask(targetMask, true));
            }
            else { Debug.LogWarning($"경고: {maskKey} 이름의 마스크를 찾지 못했습니다."); }
        }
        else
        {
            Debug.LogError($"오류: 입력한 바코드의 랙 ID '{cleanRackID}'에 해당하는 랙이 번역 맵에 없습니다.");
        }
    }

    void ResetPreviousSlot()
    {
        if (lastAnimationCoroutine != null) StopCoroutine(lastAnimationCoroutine);
        if (lastLitLamp != null && defaultLampMaterial != null)
        {
            lastLitLamp.material = defaultLampMaterial;
            lastLitLamp = null;
        }
        if (lastMovedMask != null)
        {
            StartCoroutine(AnimateMask(lastMovedMask, false));
            lastMovedMask = null;
        }
    }

    IEnumerator AnimateMask(GameObject mask, bool isSlidingOut)
    {
        Rigidbody rb = mask.GetComponent<Rigidbody>();
        if (rb != null) rb.isKinematic = true;
        Vector3 startPosition = mask.transform.localPosition;
        Vector3 endPosition;
        Vector3 slideDirection = Vector3.up; 
        if (isSlidingOut) { endPosition = startPosition + slideDirection * slideOutDistance; }
        else { endPosition = lastMaskOriginalLocalPosition; }
        float timeElapsed = 0;
        while (timeElapsed < animationDuration)
        {
            mask.transform.localPosition = Vector3.Lerp(startPosition, endPosition, timeElapsed / animationDuration);
            timeElapsed += Time.deltaTime;
            yield return null;
        }
        mask.transform.localPosition = endPosition;
        if (rb != null) rb.isKinematic = false;
    }
    
    public void OnInputSubmit(string text)
    {
        if (!string.IsNullOrEmpty(text))
        {
            ProcessBarcode(text.ToUpper());
        }
    }
}