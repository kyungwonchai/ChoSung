상관관계 분석과 관련성 판단
첫째 값(타겟)과 나머지 3개의 값(독립 변수) 간의 상관관계를 파악하는 것은 데이터에서 변수 간의 관련성을 확인하는 데 중요한 단계입니다.

1. 상관계수(Correlation Coefficient)
상관관계는 두 변수 간의 선형 관계를 나타내며, -1에서 1 사이의 값을 가집니다.

1에 가까움: 강한 양의 상관관계 (하나가 증가하면 다른 하나도 증가)
0에 가까움: 거의 상관관계 없음
-1에 가까움: 강한 음의 상관관계 (하나가 증가하면 다른 하나는 감소)
파이썬에서 상관계수 계산:
python
코드 복사
import pandas as pd

# 예제 데이터프레임
data = pd.DataFrame({
    'target': [0.1, -0.2, 0.3, 0.4, -0.1],
    'feature1': [0.2, -0.1, 0.35, 0.5, -0.05],
    'feature2': [0.05, -0.3, 0.25, 0.3, -0.15],
    'feature3': [-0.1, 0.2, 0.4, -0.3, 0.1],
})

# 상관계수 계산
correlation_matrix = data.corr()
print(correlation_matrix)
결과로 출력되는 상관 행렬을 통해 target과 다른 변수들 간의 상관관계를 확인할 수 있습니다.

2. 피어슨 상관계수(Pearson Correlation)
기본적으로 위의 corr() 함수는 피어슨 상관계수를 사용합니다. 이는 두 변수 간의 선형 관계를 측정하며, 정규성을 가정합니다.

피어슨 상관계수 공식:
𝑟
=
∑
(
𝑥
𝑖
−
𝑥
ˉ
)
(
𝑦
𝑖
−
𝑦
ˉ
)
∑
(
𝑥
𝑖
−
𝑥
ˉ
)
2
∑
(
𝑦
𝑖
−
𝑦
ˉ
)
2
r= 
∑(x 
i
​
 − 
x
ˉ
 ) 
2
 
​
  
∑(y 
i
​
 − 
y
ˉ
​
 ) 
2
 
​
 
∑(x 
i
​
 − 
x
ˉ
 )(y 
i
​
 − 
y
ˉ
​
 )
​
 
제약: 선형 관계를 가정하므로, 비선형 관계에서는 정확하지 않을 수 있습니다.
3. 스피어만 상관계수(Spearman Rank Correlation)
데이터가 정규 분포를 따르지 않거나, 비선형 관계가 의심될 경우, 스피어만 상관계수를 사용합니다.

데이터 값을 **순위(rank)**로 변환한 후, 피어슨 상관계수를 계산합니다.
스피어만 상관계수 공식:
𝜌
=
1
−
6
∑
𝑑
𝑖
2
𝑛
(
𝑛
2
−
1
)
ρ=1− 
n(n 
2
 −1)
6∑d 
i
2
​
 
​
 
여기서 
𝑑
𝑖
d 
i
​
 는 각 데이터 점의 순위 차이입니다.
스피어만 상관계수 계산:
python
코드 복사
correlation_spearman = data.corr(method='spearman')
print(correlation_spearman)
예측 정확도 평가
모델의 예측 정확도를 평가하고, 특정 오차가 설비 고장을 나타내는지 확인하려면 다음 지표를 활용할 수 있습니다.

1. 평균 제곱 오차(MSE, Mean Squared Error)
𝑀
𝑆
𝐸
=
1
𝑛
∑
𝑖
=
1
𝑛
(
𝑦
𝑖
−
𝑦
^
𝑖
)
2
MSE= 
n
1
​
  
i=1
∑
n
​
 (y 
i
​
 − 
y
^
​
  
i
​
 ) 
2
 
오차 제곱의 평균을 계산합니다.
값이 클수록 모델의 예측이 실제 값과 많이 벗어난 것을 의미합니다.
MSE 계산 코드:
python
코드 복사
from sklearn.metrics import mean_squared_error

# 예측 값과 실제 값
y_true = [0.1, -0.2, 0.3, 0.4, -0.1]
y_pred = [0.15, -0.1, 0.28, 0.35, -0.05]

mse = mean_squared_error(y_true, y_pred)
print(f"MSE: {mse}")
2. 평균 절대 오차(MAE, Mean Absolute Error)
𝑀
𝐴
𝐸
=
1
𝑛
∑
𝑖
=
1
𝑛
∣
𝑦
𝑖
−
𝑦
^
𝑖
∣
MAE= 
n
1
​
  
i=1
∑
n
​
 ∣y 
i
​
 − 
y
^
​
  
i
​
 ∣
오차의 절대값 평균으로 계산합니다.
오차의 크기를 직관적으로 이해할 수 있습니다.
MAE 계산 코드:
python
코드 복사
from sklearn.metrics import mean_absolute_error

mae = mean_absolute_error(y_true, y_pred)
print(f"MAE: {mae}")
3. R² 결정 계수
𝑅
2
=
1
−
∑
(
𝑦
𝑖
−
𝑦
^
𝑖
)
2
∑
(
𝑦
𝑖
−
𝑦
ˉ
)
2
R 
2
 =1− 
∑(y 
i
​
 − 
y
ˉ
​
 ) 
2
 
∑(y 
i
​
 − 
y
^
​
  
i
​
 ) 
2
 
​
 
모델이 데이터를 얼마나 잘 설명하는지를 나타냅니다.
1에 가까울수록 예측이 정확함을 의미합니다.
R² 계산 코드:
python
코드 복사
from sklearn.metrics import r2_score

r2 = r2_score(y_true, y_pred)
print(f"R²: {r2}")
오차를 이용한 설비 고장 감지
1. 오차 임계값 설정
MSE, MAE, R² 등의 지표를 기반으로 오차가 특정 임계값 이상일 때 설비 고장으로 간주합니다.
예를 들어, 예측 값이 실제 값과 20% 이상 차이나면 고장으로 간주할 수 있습니다.
고장 감지 코드:
python
코드 복사
threshold = 0.2  # 임계값 (20%)
anomalies = []

for true, pred in zip(y_true, y_pred):
    error = abs(true - pred)
    if error > threshold:
        anomalies.append((true, pred, error))

print("Detected anomalies:", anomalies)
2. 추가적인 지표 - 잔차 분석
잔차(residual)는 실제 값과 예측 값 간의 차이로, 이를 시각화하여 고장을 탐지할 수 있습니다.
잔차 플롯:
python
코드 복사
import matplotlib.pyplot as plt

residuals = [true - pred for true, pred in zip(y_true, y_pred)]

plt.scatter(range(len(residuals)), residuals)
plt.axhline(y=threshold, color='r', linestyle='--')
plt.axhline(y=-threshold, color='r', linestyle='--')
plt.title("Residual Plot")
plt.xlabel("Index")
plt.ylabel("Residuals")
plt.show()
결론
상관관계 분석:

pandas.DataFrame.corr()로 상관계수를 계산하여 변수 간의 관련성을 분석합니다.
데이터가 비선형이면 스피어만 상관계수를 활용하세요.
예측 정확도와 고장 감지:

MSE, MAE, R² 등의 지표로 모델 성능을 평가합니다.
특정 오차가 임계값을 초과하면 이를 설비 고장으로 간주하세요.
시각화와 실시간 알림:
