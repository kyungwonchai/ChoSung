// FILE_ID: ViewModels/MainViewModel_20250410163000
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using LockerManagementApp.Views;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Configuration;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Data.Entity.Validation;
using System.Data.SqlClient;
using System.Data.Entity.Core;
using System.Linq;
using System.Security;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Runtime.InteropServices;
using System.IO;
using System.Text;
using System.Windows.Threading;
using System.Diagnostics;

namespace LockerManagementApp.ViewModels
{
    public class MainViewModel : ViewModelBase, IDisposable
    {
        private LockerDbContext _context;
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment;
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A";
        private SecureString _masterPasswordInput;
        private SecureString _normalPasswordInput;
        private bool _isMasterModeEnabled = false;
        private bool _isNormalModeEnabled = false;
        private ObservableCollection<LockerType> _allLockerTypes;
        private ObservableCollection<Floor> _allFloors;
        private ObservableCollection<Zone> _allZones;
        private ObservableCollection<SubPart> _allSubParts;
        private ObservableCollection<Administrator> _allAdministrators;
        public LogViewModel LogVM { get; private set; }
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;
        private object _selectedCellValue;
        private string _selectedCellColumnFieldName;
        private DispatcherTimer _reAuthTimer;

        #region Public Properties
        public ObservableCollection<LockerAssignment> LockerAssignments { get => _lockerAssignments; set => SetProperty(ref _lockerAssignments, value); }
        public LockerAssignment SelectedAssignment { get => _selectedAssignment; set => SetProperty(ref _selectedAssignment, value); }
        public string StatusBarText { get => _statusBarText; set => SetProperty(ref _statusBarText, value); }
        public SecureString MasterPasswordInput { get => _masterPasswordInput; set => SetProperty(ref _masterPasswordInput, value); }
        public SecureString NormalPasswordInput { get => _normalPasswordInput; set => SetProperty(ref _normalPasswordInput, value); }
        public bool IsMasterModeEnabled { get => _isMasterModeEnabled; set { if (SetProperty(ref _isMasterModeEnabled, value)) OnPropertyChanged(nameof(IsEditModeEnabled)); } }
        public bool IsNormalModeEnabled { get => _isNormalModeEnabled; set { if (SetProperty(ref _isNormalModeEnabled, value)) OnPropertyChanged(nameof(IsEditModeEnabled)); } }
        public bool IsEditModeEnabled => IsMasterModeEnabled || IsNormalModeEnabled;
        public ObservableCollection<LockerType> AllLockerTypes { get => _allLockerTypes; set => SetProperty(ref _allLockerTypes, value); }
        public ObservableCollection<Floor> AllFloors { get => _allFloors; set => SetProperty(ref _allFloors, value); }
        public ObservableCollection<Zone> AllZones { get => _allZones; set => SetProperty(ref _allZones, value); }
        public ObservableCollection<SubPart> AllSubParts { get => _allSubParts; set => SetProperty(ref _allSubParts, value); }
        public ObservableCollection<Administrator> AllAdministrators { get => _allAdministrators; set => SetProperty(ref _allAdministrators, value); }
        public object SelectedCellValue { get => _selectedCellValue; private set => SetProperty(ref _selectedCellValue, value); }
        public string SelectedCellColumnFieldName { get => _selectedCellColumnFieldName; private set => SetProperty(ref _selectedCellColumnFieldName, value); }
        #endregion

        #region Commands
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand CheckMasterPasswordCommand { get; }
        public ICommand CheckNormalPasswordCommand { get; }
        public ICommand RefreshMasterDataCommand { get; }
        public ICommand OpenMasterDataWindowCommand { get; }
        public ICommand OpenLogWindowCommand { get; }
        public ICommand OpenPasswordChangeWindowCommand { get; }
        #endregion

        public MainViewModel()
        {
            try { _context = new LockerDbContext(); } catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusBarText = "DB 연결 오류!"; return; }
            _lockerAssignments = new ObservableCollection<LockerAssignment>(); _allLockerTypes = new ObservableCollection<LockerType>(); _allFloors = new ObservableCollection<Floor>(); _allZones = new ObservableCollection<Zone>(); _allSubParts = new ObservableCollection<SubPart>(); _allAdministrators = new ObservableCollection<Administrator>();
            try { LogVM = new LogViewModel(); } catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"LogViewModel 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 LogViewModel 생성 오류 무시됨: {ex.Message}"); }
            LoadDataCommand = new RelayCommand(async _ => await LoadInitialDataAsync(), CanExecuteCommand); SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync(), CanSaveChangesExecute); AddNewCommand = new RelayCommand(AddNewLocker, CanExecuteCommand); DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), CanDeleteExecute); CheckMasterPasswordCommand = new RelayCommand(async _ => await CheckMasterPassword(_), CanExecuteCommand); CheckNormalPasswordCommand = new RelayCommand(async _ => await CheckNormalPassword(_), CanExecuteCommand); RefreshMasterDataCommand = new RelayCommand(async _ => await LoadMasterDataAsync(), CanExecuteCommand); OpenMasterDataWindowCommand = new RelayCommand(OpenMasterDataWindow, _ => CanExecuteCommand(_) && IsMasterModeEnabled); OpenLogWindowCommand = new RelayCommand(OpenLogWindow, CanExecuteCommand); OpenPasswordChangeWindowCommand = new RelayCommand(OpenPasswordChangeWindow, _ => CanExecuteCommand(_) && IsMasterModeEnabled);
            if (_context != null) { _ = LoadInitialDataAsync(); }
            SetupReAuthTimer();
        }

        private bool CanExecuteCommand(object parameter) => !_disposed;
        private bool CanSaveChangesExecute(object parameter) { if (_disposed || _context == null) return false; try { bool hasChanges = _context.ChangeTracker.HasChanges(); Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] CanSaveChangesExecute 호출됨: HasChanges={hasChanges}"); return hasChanges; } catch(Exception ex) { Debug.WriteLine($"!!! CanSaveChangesExecute 확인 중 오류: {ex.Message}"); return false; } }
        private bool CanDeleteExecute(object parameter) => !_disposed && SelectedAssignment != null;

        private async Task LoadInitialDataAsync() { if (!CanExecuteCommand(null) || _cts.IsCancellationRequested) return; await LoadMasterDataAsync(); if (!CanExecuteCommand(null) || _cts.IsCancellationRequested) return; await LoadAssignmentsAsync(); }
        private async Task LoadAssignmentsAsync() { if (!CanExecuteCommand(null) || _context == null || _cts.IsCancellationRequested) return; StatusBarText = "사물함 목록 로딩 중..."; List<LockerAssignment> assignments = null; try { var trackedAssignments = _context.ChangeTracker.Entries<LockerAssignment>().ToList(); if (trackedAssignments.Any()) { foreach (var entry in trackedAssignments) entry.State = EntityState.Detached; } if (!CanExecuteCommand(null) || _cts.IsCancellationRequested) return; assignments = await _context.LockerAssignments.OrderBy(l => l.Floor).ThenBy(l => l.Zone).ThenBy(l => l.SpecificLocation).ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) { Debug.WriteLine("LoadAssignmentsAsync 작업 취소됨 (await 이후)."); return; } Application.Current.Dispatcher.Invoke(() => { if (_cts.IsCancellationRequested || _disposed || Application.Current == null) return; LockerAssignments = new ObservableCollection<LockerAssignment>(assignments); StatusBarText = $"총 {LockerAssignments.Count}개 로드 완료."; (DeleteCommand as RelayCommand)?.RaiseCanExecuteChanged(); (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); }); } catch (OperationCanceledException) { Debug.WriteLine("LoadAssignmentsAsync 작업 취소됨."); if (!_disposed) StatusBarText = "사물함 목록 로딩 취소됨."; } catch (ObjectDisposedException) { Debug.WriteLine("LoadAssignmentsAsync 실행 중 DbContext Dispose됨."); if (!_disposed) StatusBarText = "사물함 목록 로딩 오류 (컨텍스트 해제됨)."; } catch (Exception ex) { if (CanExecuteCommand(null) && !_cts.IsCancellationRequested) HandleGenericException("사물함 목록 로딩", ex); } }
        private async Task LoadMasterDataAsync() { if (!CanExecuteCommand(null) || _cts.IsCancellationRequested) return; StatusBarText = "마스터 데이터(콤보박스용) 로딩 중..."; LockerDbContext tempContext = null; try { using (tempContext = new LockerDbContext()) { var types = await tempContext.LockerTypes.OrderBy(t => t.Name).AsNoTracking().ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) return; var floors = await tempContext.Floors.OrderBy(f => f.Name).AsNoTracking().ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) return; var zones = await tempContext.Zones.OrderBy(z => z.Name).AsNoTracking().ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) return; var subParts = await tempContext.SubParts.OrderBy(p => p.Name).AsNoTracking().ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) return; var administrators = await tempContext.Administrators.OrderBy(a => a.Name).AsNoTracking().ToListAsync(_cts.Token); if (_cts.IsCancellationRequested || _disposed) return; Application.Current.Dispatcher.Invoke(() => { if (_cts.IsCancellationRequested || _disposed || Application.Current == null) return; AllLockerTypes = new ObservableCollection<LockerType>(types); AllFloors = new ObservableCollection<Floor>(floors); AllZones = new ObservableCollection<Zone>(zones); AllSubParts = new ObservableCollection<SubPart>(subParts); AllAdministrators = new ObservableCollection<Administrator>(administrators); if (!_cts.IsCancellationRequested && !_disposed) StatusBarText = "마스터 데이터(콤보박스용) 로드 완료."; }); } } catch (OperationCanceledException) { Debug.WriteLine("LoadMasterDataAsync 작업 취소됨."); if (!_disposed) StatusBarText = "마스터 데이터 로딩 취소됨."; } catch (ObjectDisposedException) { Debug.WriteLine("LoadMasterDataAsync 실행 중 DbContext Dispose됨."); if (!_disposed) StatusBarText = "마스터 데이터 로딩 오류 (컨텍스트 해제됨)."; } catch (Exception ex) { if (CanExecuteCommand(null) && !_cts.IsCancellationRequested) HandleGenericException("마스터 데이터 로딩", ex); } }
        private async Task CheckMasterPassword(object parameter) { if (!CanExecuteCommand(parameter)) return; try { var masterKeySetting = await _context.AppSettings.AsNoTracking().FirstOrDefaultAsync(s => s.SettingKey == "MasterKey", _cts.Token); if (_cts.IsCancellationRequested || _disposed) return; if (masterKeySetting == null || string.IsNullOrEmpty(masterKeySetting.SettingValue)) { MessageBox.Show("데이터베이스에 마스터 키(MasterKey) 설정 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(MasterPasswordInput); if (plainPassword == masterKeySetting.SettingValue) { IsMasterModeEnabled = true; IsNormalModeEnabled = false; StatusBarText = "마스터 모드 활성화."; MessageBox.Show("마스터 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsMasterModeEnabled = false; MessageBox.Show("마스터 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (OperationCanceledException) { Debug.WriteLine("CheckMasterPassword 작업 취소됨."); } catch (Exception ex) { HandleGenericException("마스터 키 확인", ex); IsMasterModeEnabled = false; } }
        private async Task CheckNormalPassword(object parameter) { if (!CanExecuteCommand(parameter)) return; try { var normalKeySetting = await _context.AppSettings.AsNoTracking().FirstOrDefaultAsync(s => s.SettingKey == "NormalKey", _cts.Token); if (_cts.IsCancellationRequested || _disposed) return; if (normalKeySetting == null || string.IsNullOrEmpty(normalKeySetting.SettingValue)) { MessageBox.Show("데이터베이스에 일반 키(NormalKey) 설정 없음.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning); return; } string plainPassword = ConvertToUnsecureString(NormalPasswordInput); if (plainPassword == normalKeySetting.SettingValue) { IsNormalModeEnabled = true; IsMasterModeEnabled = false; StatusBarText = "일반 편집 모드 활성화."; MessageBox.Show("일반 키 확인 완료.", "성공", MessageBoxButton.OK, MessageBoxImage.Information); } else { IsNormalModeEnabled = false; MessageBox.Show("일반 키가 일치하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error); } } catch (OperationCanceledException) { Debug.WriteLine("CheckNormalPassword 작업 취소됨."); } catch (Exception ex) { HandleGenericException("일반 키 확인", ex); IsNormalModeEnabled = false; } }
        private void OpenMasterDataWindow(object parameter) { if (!CanOpenMasterDataWindow(parameter)) return; if (!BackupDataToCsv()) { if (MessageBox.Show("데이터 백업 실패. 계속 진행하시겠습니까?", "백업 실패", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.No) return; } try { using (var masterDataVM = new MasterDataViewModel()) { var masterDataWindow = new MasterDataWindow { DataContext = masterDataVM, Owner = Application.Current.MainWindow }; masterDataWindow.ShowDialog(); _ = LoadMasterDataAsync(); _ = LoadAssignmentsAsync(); } } catch (Exception ex) { if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"마스터 데이터 관리 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 마스터 데이터 관리 창 열기 오류 무시됨: {ex.Message}"); } }
        private void OpenLogWindow(object parameter) { if (!CanExecuteCommand(parameter)) return; try { using (var logVM = new LogViewModel()) { var logWindow = new LogWindow { DataContext = logVM, Owner = Application.Current.MainWindow }; logWindow.ShowDialog(); } } catch (Exception ex) { if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"로그 보기 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 로그 보기 창 열기 오류 무시됨: {ex.Message}"); } }
        private void OpenPasswordChangeWindow(object parameter) { if (!CanOpenPasswordChangeWindow(parameter)) return; try { PasswordChangeWindow passwordChangeWindow = null; PasswordChangeViewModel passwordChangeVM = null; bool? dialogResult = null; try { passwordChangeVM = new PasswordChangeViewModel(); passwordChangeWindow = new PasswordChangeWindow { DataContext = passwordChangeVM, Owner = Application.Current.MainWindow }; dialogResult = passwordChangeWindow.ShowDialog(); } finally { passwordChangeVM?.Dispose(); } if (dialogResult == true) { StatusBarText = "비밀번호 변경 완료. 다시 로그인하세요."; IsMasterModeEnabled = false; IsNormalModeEnabled = false; MasterPasswordInput = new SecureString(); NormalPasswordInput = new SecureString(); OnPropertyChanged(nameof(MasterPasswordInput)); OnPropertyChanged(nameof(NormalPasswordInput)); } } catch (Exception ex) { if (!App.IsShuttingDown && !_disposed) MessageBox.Show($"비밀번호 변경 창 열기 오류:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 비밀번호 변경 창 열기 오류 무시됨: {ex.Message}"); } }
        private bool CanOpenPasswordChangeWindow(object parameter) => CanExecuteCommand(parameter) && IsMasterModeEnabled;

        #region CRUD 및 기타 메서드
        private async Task SaveChangesAsync() { if (!CanSaveChangesExecute(null)) { StatusBarText = "저장할 변경 사항이 없습니다."; return; } StatusBarText = "변경 사항 저장 중..."; Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainViewModel SaveChangesAsync 시작: HasChanges={_context.ChangeTracker.HasChanges()}"); foreach(var entry in _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged && e.State != EntityState.Detached)) { Debug.WriteLine($"  - 추적된 엔티티 (MainVM): {entry.Entity.GetType().Name}, 상태: {entry.State}"); } List<DbEntityEntry> allChangedEntriesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var changedLockerEntries = _context.ChangeTracker.Entries<LockerAssignment>().Where(e => e.State == EntityState.Added || e.State == EntityState.Modified).ToList(); var allItemsToCheck = LockerAssignments.ToList(); var duplicates = allItemsToCheck.GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation }).Where(g => g.Count() > 1).Select(g => g.Key); if (duplicates.Any()) { MessageBox.Show($"저장 불가: 중복 위치 발견 - {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "오류", MessageBoxButton.OK, MessageBoxImage.Warning); RollbackChanges(allChangedEntriesForRollback); return; } foreach(var entry in changedLockerEntries) { entry.Entity.Administrator = _currentAdmin; } Debug.WriteLine($"  -> MainVM _context.SaveChangesAsync 호출 시도..."); int changedCount = await _context.SaveChangesAsync(_cts.Token); Debug.WriteLine($"  -> MainVM _context.SaveChangesAsync 완료. 결과 = {changedCount}"); StatusBarText = $"성공적으로 {changedCount}개 저장됨."; (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); } catch (OperationCanceledException) { Debug.WriteLine("SaveChangesAsync 작업 취소됨."); StatusBarText = "저장 작업 취소됨."; RollbackChanges(allChangedEntriesForRollback); } catch (DbEntityValidationException vex) { HandleValidationException(vex); RollbackChanges(allChangedEntriesForRollback); } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(allChangedEntriesForRollback); } catch (Exception ex) { if (CanExecuteCommand(null) && !_cts.IsCancellationRequested) HandleGenericException("저장", ex); RollbackChanges(allChangedEntriesForRollback); } finally { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] MainViewModel SaveChangesAsync 종료."); } }
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) { if (_context == null || _disposed || changedEntries == null) return; foreach (var entry in changedEntries.ToList()) { switch (entry.State) { case EntityState.Modified: try { entry.Reload(); } catch { entry.State = EntityState.Unchanged; } break; case EntityState.Added: entry.State = EntityState.Detached; if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity)) LockerAssignments.Remove(addedEntity); break; case EntityState.Deleted: entry.State = EntityState.Unchanged; break; } } StatusBarText = "변경 롤백됨."; (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); }

        private void AddNewLocker(object parameter)
        {
            if (!CanExecuteCommand(parameter)) return;
            if (MessageBox.Show("새로운 사물함 정보를 추가하시겠습니까?", "새 사물함 추가", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No) return;

            var newAssignment = new LockerAssignment {
                LockerType = AllLockerTypes.FirstOrDefault()?.Name ?? "개인사물함",
                Floor = AllFloors.FirstOrDefault()?.Name ?? "1",
                Zone = AllZones.FirstOrDefault()?.Name ?? "A",
                // *** 수정: SpecificLocation 기본값을 0으로 설정 ***
                SpecificLocation = 0,
                Administrator = _currentAdmin,
                LastUpdated = DateTime.Now
            };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함 추가됨. 저장 필요.";
            try { var entryState = _context.Entry(newAssignment).State; bool hasChangesNow = _context.ChangeTracker.HasChanges(); Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] AddNewLocker 완료: 새 엔티티 상태 = {entryState}, HasChanges = {hasChangesNow}"); if (entryState != EntityState.Added || !hasChangesNow) { Debug.WriteLine("!!! 경고: AddNewLocker 후 엔티티 상태가 Added가 아니거나 HasChanges가 false입니다."); } } catch (Exception ex) { Debug.WriteLine($"!!! AddNewLocker 상태 확인 중 오류: {ex.Message}"); }
            (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged();
        }

        private async Task DeleteSelectedAsync() { if (!CanDeleteExecute(null)) return; if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 삭제?", "확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes) { StatusBarText = "삭제 중..."; List<DbEntityEntry> changesForRollback = _context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList(); try { var assignmentToDelete = SelectedAssignment; var entry = _context.Entry(assignmentToDelete); if (entry.State == EntityState.Detached) { _context.LockerAssignments.Attach(assignmentToDelete); } _context.LockerAssignments.Remove(assignmentToDelete); Debug.WriteLine($"  -> MainVM _context.SaveChangesAsync 호출 시도 (삭제)..."); int changedCount = await _context.SaveChangesAsync(_cts.Token); Debug.WriteLine($"  -> MainVM _context.SaveChangesAsync 완료 (삭제). 결과 = {changedCount}"); LockerAssignments.Remove(assignmentToDelete); SelectedAssignment = null; StatusBarText = $"성공적으로 {changedCount}개 삭제됨."; (SaveChangesCommand as RelayCommand)?.RaiseCanExecuteChanged(); } catch (OperationCanceledException) { Debug.WriteLine("DeleteSelectedAsync 작업 취소됨."); StatusBarText = "삭제 작업 취소됨."; RollbackChanges(changesForRollback); } catch (DbUpdateException dbEx) { HandleDbUpdateException(dbEx); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } catch (Exception ex) { if (CanExecuteCommand(null) && !_cts.IsCancellationRequested) HandleGenericException("삭제", ex); RollbackChanges(changesForRollback); await LoadAssignmentsAsync(); } } }
        // ClearSelectedAssignment 메서드 제거됨
        #endregion

        #region Backup Logic (CSV)
        private bool BackupDataToCsv() { string backupDir = @"C:\agent"; string fileName = $"LockerBackup_{DateTime.Now:yyyyMMdd_HHmmss}.csv"; string filePath = Path.Combine(backupDir, fileName); StatusBarText = "데이터 백업 시작..."; try { Directory.CreateDirectory(backupDir); using (var backupContext = new LockerDbContext()) using (var writer = new StreamWriter(filePath, false, Encoding.UTF8)) { WriteTableToCsv<LockerType>(backupContext, writer); WriteTableToCsv<Floor>(backupContext, writer); WriteTableToCsv<Zone>(backupContext, writer); WriteTableToCsv<SubPart>(backupContext, writer); WriteTableToCsv<Administrator>(backupContext, writer); WriteTableToCsv<LockerAssignment>(backupContext, writer); WriteTableToCsv<AuditLog>(backupContext, writer); } StatusBarText = $"데이터 백업 완료: {filePath}"; if (!_disposed && !App.IsShuttingDown) MessageBox.Show($"데이터가 다음 위치에 백업되었습니다:\n{filePath}", "백업 완료", MessageBoxButton.OK, MessageBoxImage.Information); return true; } catch (Exception ex) { StatusBarText = $"데이터 백업 실패: {ex.Message}"; if (!_disposed && !App.IsShuttingDown) MessageBox.Show($"데이터 백업 중 오류가 발생했습니다:\n{ex.ToString()}", "백업 오류", MessageBoxButton.OK, MessageBoxImage.Error); return false; } }
        private void WriteTableToCsv<T>(LockerDbContext context, StreamWriter writer) where T : class { var dbSet = context.Set<T>(); var entityType = typeof(T); var properties = entityType.GetProperties().Where(p => p.GetGetMethod().IsVirtual == false).ToList(); writer.WriteLine($"--- Table: {entityType.Name} ---"); writer.WriteLine(string.Join(",", properties.Select(p => EscapeCsvValue(p.Name)))); foreach (var entity in dbSet.AsNoTracking()) { var values = properties.Select(p => EscapeCsvValue(p.GetValue(entity)?.ToString() ?? "")); writer.WriteLine(string.Join(",", values)); } writer.WriteLine(); writer.WriteLine(); }
        private string EscapeCsvValue(string value) { if (string.IsNullOrEmpty(value)) return ""; if (value.Contains(",") || value.Contains("\"") || value.Contains("\r") || value.Contains("\n")) { return $"\"{value.Replace("\"", "\"\"")}\""; } return value; }
        #endregion

        #region Highlight Logic
        public EntityState GetEntityState(object entity) { if (_context == null || _disposed || entity == null) return EntityState.Detached; try { return _context.Entry(entity).State; } catch (Exception ex) { Debug.WriteLine($"GetEntityState 오류: {ex.Message}"); return EntityState.Detached; } }
        public void UpdateHighlightInfo(string fieldName, LockerAssignment currentItem) { var targetColumns = new List<string> { "LockerType", "Floor", "Zone", "SubPart", "Administrator" }; if (currentItem != null && fieldName != null && targetColumns.Contains(fieldName)) { var propertyInfo = typeof(LockerAssignment).GetProperty(fieldName); if (propertyInfo != null) { SelectedCellValue = propertyInfo.GetValue(currentItem); SelectedCellColumnFieldName = fieldName; } else { ClearHighlightInfo(); } } else { ClearHighlightInfo(); } }
        private void ClearHighlightInfo() { SelectedCellValue = null; SelectedCellColumnFieldName = null; }
        #endregion

        #region Timer Logic for Re-Authentication
        private void SetupReAuthTimer() { _reAuthTimer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(81) }; _reAuthTimer.Tick += Timer_Tick; _reAuthTimer.Start(); Debug.WriteLine("재인증 타이머 시작됨 (81초 간격)."); }
        private void Timer_Tick(object sender, EventArgs e) { if (IsMasterModeEnabled || IsNormalModeEnabled) { Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] 재인증 타이머 발생. 편집 모드를 비활성화합니다."); IsMasterModeEnabled = false; IsNormalModeEnabled = false; StatusBarText = "보안을 위해 재인증이 필요합니다."; } }
        #endregion

        #region Helper Methods
        private void HandleGenericException(string operation, Exception ex) { if (App.IsShuttingDown || _disposed) { Debug.WriteLine($"종료 중 {operation} 오류 무시됨: {ex.Message}"); return; } StatusBarText = $"{operation} 오류: {ex.Message}"; MessageBox.Show($"{operation} 중 오류 발생:\n{ex.ToString()}", "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
        private void HandleDbUpdateException(DbUpdateException dbEx) { if (App.IsShuttingDown || _disposed) { Debug.WriteLine($"종료 중 DB 업데이트 오류 무시됨: {dbEx.Message}"); return; } Exception innerMostException = dbEx; while (innerMostException.InnerException != null) innerMostException = innerMostException.InnerException; string innerExMsg = innerMostException.Message; var validationErrors = dbEx.Entries.SelectMany(e => e.GetValidationResult().ValidationErrors); string validationErrorMsg = ""; if (validationErrors.Any()) validationErrorMsg = "\n\n유효성 검사 오류:\n" + string.Join("\n", validationErrors.Select(err => $" - {err.PropertyName}: {err.ErrorMessage}")); StatusBarText = $"DB 업데이트 오류: {innerExMsg}"; MessageBox.Show($"데이터베이스 작업 중 오류가 발생했습니다:\n{innerExMsg}{validationErrorMsg}\n\n(전체 오류: {dbEx.ToString()})", "DB 오류", MessageBoxButton.OK, MessageBoxImage.Error); try { foreach(var entry in dbEx.Entries) { entry.Reload(); } } catch { /* Reload 실패 무시 */ } }
        private void HandleValidationException(DbEntityValidationException vex) { if (App.IsShuttingDown || _disposed) { Debug.WriteLine($"종료 중 유효성 검사 오류 무시됨: {vex.Message}"); return; } var errorMessages = vex.EntityValidationErrors.SelectMany(x => x.ValidationErrors).Select(x => $"{x.PropertyName}: {x.ErrorMessage}"); var fullErrorMessage = string.Join("\n", errorMessages); var exceptionMessage = $"데이터 유효성 검사 오류:\n{fullErrorMessage}"; StatusBarText = "데이터 유효성 검사 오류 발생"; MessageBox.Show(exceptionMessage, "유효성 검사 오류", MessageBoxButton.OK, MessageBoxImage.Warning); Debug.WriteLine($"!!! DbEntityValidationException 발생:\n{exceptionMessage}\n{vex.ToString()}"); }
        private string ConvertToUnsecureString(SecureString securePassword) { if (securePassword == null) return string.Empty; IntPtr ptr = IntPtr.Zero; try { ptr = Marshal.SecureStringToGlobalAllocUnicode(securePassword); return Marshal.PtrToStringUni(ptr); } finally { Marshal.ZeroFreeGlobalAllocUnicode(ptr); } }
        #endregion

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("MainViewModel Dispose 시작..."); _reAuthTimer?.Stop(); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! MainVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! MainVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! MainViewModel DbContext Dispose 오류: {ex.Message}"); } try { LogVM?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! LogViewModel Dispose 오류: {ex.Message}"); } Debug.WriteLine("MainViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }