6. 고급 활용: RAG와 AI 워크플로우
지금까지 단일 프롬프트를 최적화하는 방법을 배웠습니다. 이제 한 걸음 더 나아가, LLM을 외부 데이터 및 다른 컴포넌트(Tool)와 결합하여 복잡하고 현실적인 문제를 해결하는 'AI 시스템'을 구축하는 방법을 살펴보겠습니다.

Retrieval-Augmented Generation (RAG)
LLM의 한계를 극복하는 방법
LLM은 놀랍지만, 몇 가지 명확한 한계가 있습니다. 특정 시점까지만의 데이터를 학습했기 때문에 최신 정보를 모르고(Knowledge Cutoff), 학습하지 않은 사내 기밀 정보에 대해서는 답변할 수 없으며, 때로는 사실이 아닌 정보를 그럴듯하게 지어내기도 합니다(Hallucination). RAG는 이러한 한계를 극복하기 위한 강력한 아키텍처입니다.

RAG의 핵심 아이디어: LLM이 답변을 생성하기 전에, 질문과 관련된 정확한 정보를 외부 데이터 소스(예: 회사 내부 문서, 최신 뉴스 기사)에서 '검색(Retrieve)'하여 프롬프트에 '증강(Augment)'하는 것입니다.
RAG의 작동 원리
RAG는 크게 두 단계로 나뉩니다. 첫 번째는 데이터를 준비하고 검색 가능하게 만드는 '인덱싱(Indexing)' 단계, 두 번째는 사용자의 질문에 답변하는 '검색 및 생성(Retrieval & Generation)' 단계입니다.

1단계: 데이터 준비 및 인덱싱 (오프라인)
??
원본 문서 (Documents)
회사 내부 규정, 제품 매뉴얼, 고객 지원 가이드 등 PDF, TXT, HTML 파일들.

??
파서 (Parser) & 청킹 (Chunking)
문서를 의미 있는 작은 단위(Chunk)로 자릅니다. 너무 크면 검색 효율이 떨어지고, 너무 작으면 맥락을 잃습니다.

??
임베딩 모델 (Embedding Model)
각 텍스트 청크를 수치적인 벡터(Vector)로 변환합니다. 의미가 비슷한 텍스트는 벡터 공간에서 가까운 위치에 있게 됩니다.

???
벡터 DB (Vector Database)
변환된 벡터들을 저장하고, 빠르게 검색할 수 있도록 인덱싱합니다. (예: FAISS, Quadrant, Pinecone)

2단계: 검색 및 답변 생성 (온라인)
?
사용자 질문 (User Query)
"우리 회사 연차 규정이 어떻게 되나요?"

??
임베딩 모델 (Embedding Model)
사용자의 질문도 동일한 임베딩 모델을 사용해 벡터로 변환합니다.

??
벡터 검색 (Vector Search)
질문 벡터와 가장 유사한(가까운) 문서 청크 벡터들을 벡터 DB에서 검색합니다.

??
프롬프트 구성 (Prompt Augmentation)
검색된 문서 청크(Context)와 원본 질문을 조합하여 LLM에게 전달할 최종 프롬프트를 만듭니다.

??
LLM 답변 생성 (LLM Generation)
LLM은 주어진 컨텍스트를 기반으로 질문에 대한 정확한 답변을 생성합니다.

사내 문서 기반 Q&A 챗봇
System Message
당신은 제공된 '컨텍스트'를 기반으로만 질문에 답변하는 AI 비서입니다. 컨텍스트에 답변이 없으면, '제공된 정보 내에서는 답변을 찾을 수 없습니다.'라고 솔직하게 말하세요.
User Prompt
[컨텍스트]
문서명: "TechNova 연차 사용 규정.pdf"
내용:
- 모든 정규직 직원은 연 15일의 유급 휴가를 부여받습니다.
- 입사 1년 미만 직원은 월 1일의 유급 휴가가 발생합니다.
- 연차 사용 시 최소 3일 전 그룹웨어에 신청해야 합니다. 병가 등 긴급 상황은 예외입니다.

[사용자 질문]
제가 입사한 지 6개월 됐는데, 연차를 며칠 쓸 수 있나요? 그리고 연차는 언제까지 신청해야 하나요?
AI Output
입사 6개월차이시라면 총 6일의 유급 휴가를 사용하실 수 있습니다. 연차는 사용하시기 최소 3일 전까지 그룹웨어를 통해 신청하셔야 합니다.
AI 워크플로우: 컴포넌트 조합하기
실제 비즈니스 로직은 단일 RAG나 LLM 호출로 끝나지 않는 경우가 많습니다. 여러 컴포넌트를 파이프라인처럼 연결하여 'AI 워크플로우' 또는 'AI 에이전트'를 구성해야 합니다. 사용자의 의도를 파악하고, 조건에 따라 분기하며, 외부 도구(API)를 사용하는 등 더 동적인 상호작용이 가능해집니다.

워크플로우의 구성 요소 예시
파서 (Parser): 사용자 입력에서 이메일, 주문 번호 등 특정 정보를 추출합니다.
조건 (Condition): 텍스트가 특정 키워드를 포함하는지, 특정 형식인지 등을 판단하여 `True/False`를 반환하고, 다음 행동을 결정합니다.
LLM 호출: 특정 프롬프트를 실행하여 텍스트를 생성, 요약, 분류합니다.
RAG (Vector Search): 지식 베이스에서 관련 정보를 검색합니다.
외부 도구 (Tool): 외부 API를 호출하여 데이터베이스를 조회하거나, 다른 시스템과 연동합니다.
스마트 고객 지원 워크플로우 예시
사용자 문의의 종류에 따라 최적의 답변 방식을 동적으로 결정하는 워크플로우입니다.

??
1. 사용자 문의 접수
사용자가 "제품 환불 규정이 어떻게 되나요?" 라고 질문합니다.

??
2. 조건 분기 (Condition)
문의 내용에 '환불', '반품', '규정'과 같은 키워드가 포함되어 있는지 확인합니다. 

- 포함 (True) ?? RAG 경로로 이동
- 미포함 (False) ?? 일반 대화 경로로 이동

??
3. RAG 실행 (환불 정책 검색)
조건이 True이므로, 벡터 DB에서 '환불 규정'과 관련된 문서를 검색합니다.

??
4. RAG 기반 답변 생성
검색된 환불 규정 문서를 컨텍스트로 사용하여, LLM이 사용자에게 정확한 절차를 안내하는 답변을 생성합니다.

만약 사용자가 "오늘 날씨 어때?" 와 같이 일반적인 질문을 했다면, 조건 분기에서 False가 되어 RAG를 실행하지 않고 LLM이 일반적인 지식으로 답변했을 것입니다. 이처럼 워크플로우를 통해 불필요한 검색이나 API 호출을 줄여 비용을 절감하고 응답 속도를 높일 수 있습니다.