아래는 PLC 시뮬레이터와 관련된 MainWindow.xaml.cs 파일의 코드입니다. 기존의 기능에 더해 COM 포트를 통해 PLC 시뮬레이터와 통신하는 부분을 수정하였고, 디버깅과 로깅을 위한 코드도 추가했습니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Windows;
using PLCPanaSimul.Services;
using System.Threading.Tasks;

namespace PLCPanaSimul
{
    public partial class MainWindow : Window
    {
        private PLCSimulator _plcSimulator;
        private ComPortManager _comPortManager;

        public MainWindow()
        {
            InitializeComponent();

            // COM 포트를 통해 PLC 시뮬레이터 초기화
            _plcSimulator = new PLCSimulator(LogMessage, "COM3"); // COM3 포트 사용 예시
            _plcSimulator.StartCheckingMemory();

            // 시뮬레이터와 통신할 시리얼 포트 설정
            _comPortManager = new ComPortManager("COM3", ProcessReceivedData);
            _comPortManager.OpenPort();
        }

        // PLC 시뮬레이터로부터 수신된 데이터를 처리하는 메서드
        private void ProcessReceivedData(string data)
        {
            LogMessage($"PLC 시뮬레이터로부터 수신: {data}");

            // 수신된 데이터에 따라 시뮬레이터가 동작하도록 처리
            _plcSimulator.ProcessReceivedData(data);
        }

        // 로그 메시지를 UI에 출력하는 메서드
        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                // ListBox 또는 TextBlock을 사용하여 로그를 출력
                // 예시로 ListBox에 로그 메시지 추가
                LogListBox.Items.Add(message);
                LogListBox.ScrollIntoView(LogListBox.Items[LogListBox.Items.Count - 1]);
            });
        }

        // 윈도우 닫기 시 포트 닫기
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            _comPortManager.ClosePort();
        }
    }

    // COM 포트 관리를 위한 클래스 (기존과 동일하게 사용)
    public class ComPortManager
    {
        private SerialPort _serialPort;
        private Action<string> _dataReceivedCallback;

        public ComPortManager(string portName, Action<string> dataReceivedCallback)
        {
            _serialPort = new SerialPort(portName, 9600, Parity.None, 8, StopBits.One);
            _serialPort.DataReceived += SerialPort_DataReceived;
            _dataReceivedCallback = dataReceivedCallback;
        }

        public void OpenPort()
        {
            if (!_serialPort.IsOpen)
            {
                _serialPort.Open();
            }
        }

        public void ClosePort()
        {
            if (_serialPort.IsOpen)
            {
                _serialPort.Close();
            }
        }

        private void SerialPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            string data = _serialPort.ReadExisting();
            _dataReceivedCallback?.Invoke(data);
        }
    }
}
주요 수정 내용과 설명
PLC 시뮬레이터 초기화:

PLCSimulator 객체를 초기화할 때 COM 포트를 지정해 줍니다. 예시에서는 COM3 포트를 사용하도록 설정했습니다.
PLCSimulator의 StartCheckingMemory 메서드를 호출하여 주기적으로 메모리 값을 확인하는 작업을 시작합니다.
COM 포트 매니저 설정:

ComPortManager 클래스는 시리얼 포트를 관리하며, 포트에서 수신된 데이터를 처리하는 기능을 갖추고 있습니다.
포트가 열리고 닫히는 경우와 데이터가 수신될 때의 이벤트를 처리합니다.
로그 메시지 출력:

LogMessage 메서드는 로그 메시지를 UI의 ListBox에 추가하며, 스크롤을 항상 최신 메시지에 맞춥니다.
데이터 수신 처리:

ProcessReceivedData 메서드는 PLC 시뮬레이터로부터 수신된 데이터를 처리하고, 해당 데이터에 따라 시뮬레이터가 동작하도록 합니다.
포트 열기와 닫기:

윈도우가 닫힐 때(Window_Closing 이벤트) COM 포트를 닫아줍니다.
사용 방법
PLC 시뮬레이터 실행: 프로그램을 실행하면 PLC 시뮬레이터와 COM 포트 매니저가 초기화되고, COM 포트가 열립니다.
데이터 수신 및 처리: PLC 시뮬레이터는 수신된 데이터를 처리하고, 이에 따라 필요한 작업을 수행합니다.
로그 확인: UI에 로그 메시지가 출력되며, PLC 시뮬레이터의 동작 상태를 실시간으로 확인할 수 있습니다.
이 코드를 사용하여 PLC 시뮬레이터가 COM 포트를 통해 상대 장비와 통신하고, 데이터를 처리하며, UI에 로그를 출력하는 과정을 확인