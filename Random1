inViewModel 인스턴스를 직접 전달하지 않고, 이벤트를 통해 에러 메시지를 전달하는 구조로 변경하겠습니다. 이를 위해 SampleErrorTrigger 클래스는 MainViewModel을 알 필요 없이, 이벤트를 통해 메시지를 넘겨받아 처리할 수 있습니다.

1. MainViewModel에 이벤트 등록
먼저 MainViewModel에서 에러 메시지를 처리할 수 있도록 이벤트 핸들러를 추가합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        public event Action<string> ErrorTriggered; // 에러 메시지 이벤트

        private int _progress;
        private Timer _mainTimer; // 5초 타이머
        private Timer _delayTimer; // 3초 지연 타이머
        private bool _isWarningVisible;
        private WarningWindow _warningWindow; // 경고창 인스턴스 저장
        private ObservableCollection<ErrorMessage> _errorMessages; // 에러 메시지 목록

        public int Progress
        {
            get => _progress;
            set
            {
                if (_progress != value)
                {
                    _progress = value;
                    OnPropertyChanged();

                    if (_progress >= 1 && !_isWarningVisible)
                    {
                        StartDelayTimer();
                    }
                    else if (_progress == 0)
                    {
                        CloseWarningWindow();
                    }
                }
            }
        }

        public MainViewModel()
        {
            _mainTimer = new Timer(5000);
            _mainTimer.Elapsed += MainTimerElapsed;

            _delayTimer = new Timer(3000);
            _delayTimer.Elapsed += DelayTimerElapsed;
            _delayTimer.AutoReset = false;

            _errorMessages = new ObservableCollection<ErrorMessage>();

            // 이벤트를 통해 에러 메시지를 받으면 처리
            ErrorTriggered += AddErrorMessage;
        }

        private void StartDelayTimer()
        {
            if (_progress >= 1)
            {
                _delayTimer.Start();
            }
        }

        private void DelayTimerElapsed(object sender, ElapsedEventArgs e)
        {
            if (_progress >= 1 && !_isWarningVisible)
            {
                ShowWarningWindow();
            }
        }

        private void ShowWarningWindow()
        {
            if (_isWarningVisible) return;

            Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindow = new WarningWindow(_errorMessages);
                _warningWindow.Topmost = true;
                _warningWindow.Show();

                _warningWindow.Closed += (sender, e) =>
                {
                    _isWarningVisible = false;
                    _mainTimer.Start();
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                _isWarningVisible = true;
                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindow != null)
                {
                    _warningWindow.Close();
                    _warningWindow = null;
                    _mainTimer.Stop();
                    _isWarningVisible = false;
                    _errorMessages.Clear();
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        private void MainTimerElapsed(object sender, ElapsedEventArgs e)
        {
            _mainTimer.Stop();
            if (_progress >= 1)
            {
                ShowWarningWindow();
            }
        }

        // 외부 이벤트에서 전달된 에러 메시지를 추가
        public void AddErrorMessage(string message)
        {
            if (_errorMessages.Any(m => m.Content == message)) return;

            Color color = _errorMessages.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessages.Add(new ErrorMessage(message, new SolidColorBrush(color)));

            if (_isWarningVisible && _warningWindow != null)
            {
                _warningWindow.UpdateMessages(_errorMessages);
            }
            else
            {
                ShowWarningWindow();
            }

            Debug.WriteLine($"[DEBUG] Error added: {message}");
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessage
    {
        public string Content { get; }
        public SolidColorBrush Color { get; }

        public ErrorMessage(string content, SolidColorBrush color)
        {
            Content = content;
            Color = color;
        }
    }
}
ErrorTriggered 이벤트를 추가했습니다. 외부 클래스에서 이 이벤트를 구독하고 에러 메시지를 전달할 수 있습니다.
AddErrorMessage 메서드는 ErrorTriggered 이벤트가 발생할 때 호출되며, 에러 메시지를 추가합니다.
2. 외부 클래스에서 이벤트로 에러 메시지 발동
SampleErrorTrigger 클래스는 MainViewModel을 알 필요 없이, ErrorTriggered 이벤트를 통해 메시지를 발동시킵니다.

csharp
코드 복사
namespace YourNamespace
{
    public class SampleErrorTrigger
    {
        public event Action<string> OnError; // 에러 메시지 이벤트

        public void TriggerError()
        {
            OnError?.Invoke("Critical Error!\nSystem temperature too high.\nImmediate cooling required.");
            OnError?.Invoke("Warning!\nNetwork connection lost.\nAttempting to reconnect...");
        }
    }
}
OnError 이벤트를 통해 에러 메시지를 발동합니다.
TriggerError 메서드가 호출되면 OnError 이벤트를 통해 메시지를 전달합니다.
3. MainWindow에서 이벤트 연결
MainWindow에서 SampleErrorTrigger와 MainViewModel을 연결하여, OnError 이벤트가 발생하면 MainViewModel의 ErrorTriggered 이벤트를 호출하도록 설정합니다.

csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private SampleErrorTrigger _errorTrigger;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            _errorTrigger = new SampleErrorTrigger();
            _errorTrigger.OnError += _viewModel.ErrorTriggered; // 이벤트 연결
        }

        private void OnAddErrorMessageClicked(object sender, RoutedEventArgs e)
        {
            _errorTrigger.TriggerError();
        }
    }
}
SampleErrorTrigger의 OnError 이벤트를 MainViewModel의 ErrorTriggered 이벤트에 연결하여 에러 메시지를 전달합니다.
OnAddErrorMessageClicked 이벤트 핸들러에서 TriggerError 메서드를 호출하여 테스트할 수 있습니다.
이제 MainViewModel의 인스턴스를 전달하지 않고도, 외부 클래스에서 OnError 이벤트를 통해 에러 메시지를 발동할 수 있습니다. SampleErrorTrigger에서 OnError 이벤트가 발생할 때마다 MainViewModel에서 메시지를 받아 팝업 창을 