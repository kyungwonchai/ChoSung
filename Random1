
python
Copy code
# 'Age' 열의 값이 30보다 크면 'Old' 아니면 'Young'으로 표시
df['Age'].apply(lambda x: 'Old' if x > 30 else 'Young')
각 행에 대한 복잡한 계산:

python
Copy code
# 행마다 평균을 계산하고, 이를 새로운 열에 저장
df['mean'] = df.apply(lambda row: np.mean(row), axis=1)
문자열 처리:

python
Copy code
# 문자열 열에서 특정 단어를 다른 단어로 대체
df['Text'].apply(lambda x: x.replace('old', 'new'))
데이터 정규화:

python
Copy code
# 열의 데이터를 정규화 (0과 1 사이의 값으로 변환)
df.apply(lambda x: (x - x.min()) / (x.max() - x.min()))
리스트 또는 딕셔너리 반환:

python
Copy code
# 각 행에서 최대값과 최소값을 리스트로 반환
df.apply(lambda x: [x.max(), x.min()], axis=1)
여러 조건을 사용한 복잡한 로직:

python
Copy code
# 나이와 성별에 따라 카테고리 할당
df.apply(lambda x: 'Category1' if x['Age'] > 30 and x['Gender'] == 'Male' else 'Category2', axis=1)
apply 메서드는 이처럼 데이터프레임의 행이나 열에 대해 매우 유연하게 함수를 적용할 수 있어 다양한 데이터 처리 작업에 적용됩니다. 람다 표현식을 사용하면 한 줄로 간단하게 코드를 작성할 수 있지만, 더 복잡한 함수를 정의하여 사용할 수도 있습니다. 주요 포인트는 apply의 유연성과 다양한 활용 방법입니다.