당 오류는 자바 버전 불일치 문제로, 아주 명확한 원인을 가지고 있습니다.

쉽게 말해, "실행하려는 자바(JVM) 버전이, 코드를 만들 때(컴파일) 사용된 자바 버전보다 낮아서 실행할 수 없다" 는 의미입니다.

## 오류의 의미 🧐
class file major version: 모든 자바 .class 파일에는 어떤 버전의 자바 컴파일러로 만들어졌는지를 나타내는 '버전 번호표'가 붙어있습니다.

version 68: 이 번호표는 특정 자바 버전을 가리킵니다.

Major Version 61 = Java 17 (현재 안드로이드 개발의 표준)

Major Version 65 = Java 21

...

Major Version 68 = Java 24

따라서 Unsupported class file major version 68 오류의 정확한 뜻은 다음과 같습니다.

"당신이 Gradle 동기화에 사용하고 있는 JDK (예: Java 17)는, Java 24 버전으로 만들어진 클래스 파일을 이해하고 실행할 수 없습니다."

자바는 하위 호환성(높은 버전의 자바는 낮은 버전의 코드를 실행 가능)은 좋지만, 상위 호환성(낮은 버전의 자바가 높은 버전의 코드를 실행)은 보장하지 않기 때문에 이 오류가 발생합니다.

## 주요 원인
이 문제는 보통 사용자가 직접 작성한 코드 때문이 아닙니다. Gradle이 동기화 과정에서 인터넷을 통해 다운로드하는 외부 라이브러리 또는 Gradle 플러그인 중 하나가 매우 최신 버전의 JDK(Java 24)로 빌드된 경우 발생합니다.

즉, 내가 설정한 개발 환경(JDK 17)은 표준인데, 어떤 라이브러리 개발자가 너무 앞서가서 아직 정식으로 사용되지도 않는 JDK 24로 라이브러리를 만들어 배포한 것입니다.

## 해결 방법
가장 안정적이고 권장되는 방법은 문제를 일으키는 라이브러리의 버전을 낮추는 것입니다. 개발 환경 전체를 불안정한 최신 JDK로 올리는 것은 위험합니다.

✅ 1단계: 문제의 라이브러리 찾기
안드로이드 스튜디오의 Build 탭에서 오류 로그를 자세히 살펴보세요. 보통 오류 메시지 주변에 어떤 라이브러리나 플러그인에서 문제가 발생했는지 단서가 있습니다.

최근 build.gradle.kts (또는 build.gradle) 파일에 추가했거나 버전을 올린 라이브러리가 있다면, 그것이 원인일 확률이 매우 높습니다.

✅ 2단계: 라이브러리 버전 다운그레이드
프로젝트의 build.gradle.kts (또는 build.gradle) 파일을 엽니다.

dependencies { ... } 블록 안에서 의심되는 라이브러리를 찾습니다.

Kotlin

// 예시: com.some.library:core:1.5.0-alpha01 버전이 문제를 일으킨다고 가정
implementation("com.some.library:core:1.5.0-alpha01") 
해당 라이브러리의 버전을 더 낮고 안정적인 이전 버전으로 수정합니다. 보통 -alpha, -beta, -rc 등이 붙지 않은 정식 버전을 사용하는 것이 좋습니다.

Kotlin

// 안정적인 이전 버전으로 수정
implementation("com.some.library:core:1.4.0") 
파일을 수정한 뒤 오른쪽 위에 나타나는 **Sync Now**를 클릭하여 Gradle을 다시 동기화합니다.

🚨 비권장 방법: Gradle JDK 버전 올리기
이론적으로는 Gradle이 사용하는 JDK 버전을 Java 24로 올리면 오류가 사라질 수 있습니다. 하지만 이 방법은 안드로이드 Gradle 플러그인(AGP)이나 다른 라이브러리와의 호환성 문제를 일으킬 수 있으므로 절대 권장하지 않습니다.

안드로이드 개발은 Google이 공식적으로 권장하고 지원하는 JDK 버전을 사용하는 것이 가장 안정적입니다. (현재는 JDK 17이 표준입니다.)