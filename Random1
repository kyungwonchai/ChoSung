며, 토큰을 누락하지 않고 multipart/form-data를 사용하여 요청을 보내는 최종 코드를 아래에 제공합니다.

csharp

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";
        private static readonly string systemId = "시스템 아이디";
        private static readonly string accessToken = "토큰 값";

        public static async Task<(string, string)> SendMail(string userId, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
        {
            if (string.IsNullOrEmpty(subject) || string.IsNullOrEmpty(contents))
            {
                Console.WriteLine("Some required values are missing. Please provide both subject and contents.");
                return (null, null);
            }

            client.DefaultRequestHeaders.Clear();
            client.DefaultRequestHeaders.Add("System-ID", systemId);
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

            var formDataContent = new MultipartFormDataContent();
            formDataContent.Headers.ContentType = MediaTypeHeaderValue.Parse("multipart/form-data");

            var requestData = new
            {
                subject,
                contents,
                sender = new
                {
                    emailAddress = senderEmailAddress,
                    recipientType = "TO"
                },
                recipients = new[]
                {
                    new
                    {
                        emailAddress = recipientEmailAddress,
                        recipientType = "TO"
                    }
                }
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);
            var mailContent = new StringContent(jsonPayload);
            mailContent.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
            formDataContent.Add(mailContent, "mail");

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var response = await client.PostAsync(requestUrl, formDataContent);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;
                string sendResult = result.result;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");
                Console.WriteLine($"전송 결과: {sendResult}");

                return (mailId, sendResult);
            }
            else
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string errorCode = result.errorCode;
                string errorMessage = result.errorMessage;

                Console.WriteLine("메일 발송에 실패하였습니다.");
                Console.WriteLine($"에러 코드: {errorCode}");
                Console.WriteLine($"에러 메시지: {errorMessage}");

                return (null, null);
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;
        private string sendResult;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string userId = "사용자 ID";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "보내는 이메일 주소";
            string recipientEmailAddress = "받는 이메일 주소";

            (mailId, sendResult) = await MailSender.SendMail(userId, subject, contents, senderEmailAddress, recipient

User
이어서
ChatGPT

string recipientEmailAddress = "받는 이메일 주소";

(mailId, sendResult) = await MailSender.SendMail(userId, subject, contents, senderEmailAddress, recipientEmailAddress);
}
}
}

go


위의 코드에서 `btnSendMail_Click` 이벤트 핸들러를 통해 메일을 전송하는 동작을 수행할 수 있습니다. 이 코드는 multipart/form-data를 사용하여 요청을 보냅니다. 메일의 제목, 내용, 발신자 이메일 주소, 수신자 이메일 주소를 매개변수로 전달하고, 해당 정보를 기반으로 API 요청을 생성합니다.

요청이 성공적으로 처리되면, 메일 ID와 전송 결과를 출력하고 `(mailId, sendResult)` 튜플로 반환됩니다. 요청이 실패한 경우에는 에러 코드와 에러 메시지를 출력하고 `(null, null)` 튜플로 반환됩니다.

이 코드를 실행하여 메일을 전송하고,