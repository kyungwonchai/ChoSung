LogType을 문자열 대신 열거형(enum)으로 정의하면 코드의 가독성을 높이고, 실수로 인해 발생할 수 있는 오류를 줄일 수 있습니다. 열거형을 사용하면 허용된 값만 사용할 수 있어 컴파일 시점에 오류를 발견할 수 있으며, 코드의 의미를 더욱 명확하게 전달할 수 있습니다.

열거형 LogType 정의
먼저, 문자열 대신 사용할 열거형 LogType을 정의합니다. 이 열거형은 각기 다른 로그 유형을 표현합니다.

csharp
코드 복사
// LogType 열거형 정의
public enum LogType
{
    General,    // 일반 로그
    Service,    // 서비스 관련 로그
    System,     // 시스템 로그
    Error,      // 오류 로그
    User        // 사용자 관련 로그
}
수정된 MainWindow.xaml.cs
MainWindow.xaml.cs 파일에서 LogType 열거형을 사용하여 코드를 수정합니다.

csharp
코드 복사
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private readonly MainViewModel _viewModel;
        private readonly DispatcherTimer _blinkTimer;
        private TabItem _blinkingTab;
        private bool _isBlinking;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            _viewModel.OnLogAdded += OnLogAdded; // ViewModel의 로그 추가 이벤트 등록

            _blinkTimer = new DispatcherTimer();
            _blinkTimer.Interval = TimeSpan.FromMilliseconds(500); // 500ms 간격으로 깜박임
            _blinkTimer.Tick += (s, e) => BlinkTabHeader();
        }

        // 탭 헤더 깜박이기
        private void BlinkTabHeader()
        {
            if (_blinkingTab != null)
            {
                _blinkingTab.Foreground = _isBlinking ? Brushes.Orange : Brushes.Yellow;
                _isBlinking = !_isBlinking;
            }
        }

        // 탭 선택 변경 시 호출되는 이벤트 핸들러
        private void LogTabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_blinkingTab != null)
            {
                _blinkingTab.Foreground = Brushes.Black; // 기본 색으로 되돌림
                _blinkTimer.Stop();
                _blinkingTab = null;
            }
        }

        // 로그가 추가될 때 호출되는 이벤트 핸들러
        private void OnLogAdded(LogType logType)
        {
            if (!IsCurrentTab(logType))
            {
                StartBlinkingTab(logType);
            }
        }

        // 현재 선택된 탭이 로그 유형과 일치하는지 확인
        private bool IsCurrentTab(LogType logType)
        {
            switch (logType)
            {
                case LogType.General:
                    return LogTabControl.SelectedItem == GeneralLogsTab;
                case LogType.Service:
                    return LogTabControl.SelectedItem == ServiceLogsTab;
                case LogType.System:
                    return LogTabControl.SelectedItem == SystemLogsTab;
                case LogType.Error:
                    return LogTabControl.SelectedItem == ErrorLogsTab;
                case LogType.User:
                    return LogTabControl.SelectedItem == UserLogsTab;
                default:
                    return false;
            }
        }

        // 해당 로그 유형의 탭 헤더 깜박이기 시작
        private void StartBlinkingTab(LogType logType)
        {
            switch (logType)
            {
                case LogType.General:
                    _blinkingTab = GeneralLogsTab;
                    break;
                case LogType.Service:
                    _blinkingTab = ServiceLogsTab;
                    break;
                case LogType.System:
                    _blinkingTab = SystemLogsTab;
                    break;
                case LogType.Error:
                    _blinkingTab = ErrorLogsTab;
                    break;
                case LogType.User:
                    _blinkingTab = UserLogsTab;
                    break;
                default:
                    _blinkingTab = null;
                    break;
            }

            if (_blinkingTab != null)
            {
                _blinkTimer.Start();
            }
        }
    }
}
수정된 MainViewModel.cs
MainViewModel.cs 파일에서도 LogType 열거형을 사용하여 코드를 수정합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Threading;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private readonly ServiceControllerHelper _serviceControllerHelper;

        // 로그 컬렉션 정의
        public ObservableCollection<string> GeneralLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ServiceLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> SystemLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ErrorLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> UserLogs { get; } = new ObservableCollection<string>();

        public event Action<LogType> OnLogAdded; // 로그가 추가될 때 이벤트

        private const int MaxLogCount = 50; // 최대 로그 개수

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper();
            _serviceControllerHelper.OnGeneralLogMessage += message => LogGeneralMessage(message);
            _serviceControllerHelper.OnServiceLogMessage += message => LogServiceMessage(message);
            _serviceControllerHelper.OnSystemLogMessage += message => LogSystemMessage(message);
            _serviceControllerHelper.OnErrorLogMessage += message => LogErrorMessage(message);
            _serviceControllerHelper.OnUserLogMessage += message => LogUserMessage(message);
        }

        // 일반 로그 메시지를 추가하는 메서드
        private void LogGeneralMessage(string message)
        {
            AddLog(GeneralLogs, message, LogType.General);
        }

        // 서비스 로그 메시지를 추가하는 메서드
        private void LogServiceMessage(string message)
        {
            AddLog(ServiceLogs, message, LogType.Service);
        }

        // 시스템 로그 메시지를 추가하는 메서드
        private void LogSystemMessage(string message)
        {
            AddLog(SystemLogs, message, LogType.System);
        }

        // 에러 로그 메시지를 추가하는 메서드
        private void LogErrorMessage(string message)
        {
            AddLog(ErrorLogs, message, LogType.Error);
        }

        // 사용자 로그 메시지를 추가하는 메서드
        private void LogUserMessage(string message)
        {
            AddLog(UserLogs, message, LogType.User);
        }

        // 로그를 추가하고 최대 개수를 초과하면 오래된 로그를 삭제하는 메서드
        private void AddLog(ObservableCollection<string> logCollection, string message, LogType logType)
        {
            App.Current.Dispatcher.Invoke(() =>
            {
                logCollection.Add(message);
                if (logCollection.Count > MaxLogCount)
                {
                    logCollection.RemoveAt(0); // 가장 오래된 로그 삭제
                }

                if (OnLogAdded != null)
                {
                    OnLogAdded(logType); // 로그가 추가될 때 이벤트 호출
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
코드 설명
LogType 열거형: 문자열 대신 LogType 열거형을 사용하여 코드에서 로그 유형을 정의했습니다. 이를 통해 코드의 가독성을 높이고, 실수를 줄일 수 있습니다.

MainWindow.xaml.cs:

IsCurrentTab 메서드: 열거형 LogType을 사용하여 현재 선택된 탭이 로그 유형과 일치하는지 확인합니다.
StartBlinkingTab 메서드: 열거형 LogType을 사용하여 깜박일 탭을 설정합니다.
MainViewModel.cs:

OnLogAdded 이벤트: LogType 열거형을 사용하여 로그가 추가될 때 이벤트를 호출합니다.
AddLog 메서드: 열거형 LogType을 사용하여 로그를 추가하고 최대 개수를 초과하면 오래된 로그를 삭제합니다.
요약
열거형 사용: 문자열 대신 LogType 열거형을 사용하여 코드의 가독성과 안전성을 높였습니다.
로그 관리: 열거형을 사용하여 각 로그 유형을 명확하게 관리하고, 필요에 따라 탭 헤더를 깜박이도록 설정했습니다.
최대 로그 개수 관리: 로그가 추가될 때마다 최대 50개의 로그만 유지하도록 관리하여 메모리 사용을 최적화합니다.