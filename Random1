<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 90%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            justify-content: center;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
        .gray {
            background-color: gray;
        }
        .circle.active {
            transform: scale(1.5);
        }
        #sensorInfo {
            margin: 20px;
            padding: 10px;
            width: 300px;
            font-size: 16px;
            text-align: center;
            background-color: #444444;
            color: #ffffff;
            border-radius: 5px;
        }
        .highlighted-orange {
            background-color: orange;
        }
    </style>
    <script>
        const sensorNames = {{ sensor_names | tojson }};
        let sensorActivationTimes = {};

        function fetchData() {
            fetch('/logsensors-data')
                .then(response => response.json())
                .then(data => {
                    updateTable(data);
                })
                .catch(error => console.error('Error fetching data:', error));
        }

        function updateTable(data) {
            const tbody = document.querySelector('tbody');
            tbody.innerHTML = '';

            data.forEach(item => {
                const row = document.createElement('tr');
                row.setAttribute('data-ip', item.ip);

                row.innerHTML = `
                    <td>${item.ip}</td>
                    <td>
                        <div class="circle-container" data-sensor1="${item.sensor1}">
                            ${item.sensor1.split('').map((value, index) => {
                                return `<span class="circle ${value === '1' ? 'red' : 'green'}" data-ip="${item.ip}" data-index="${index}"></span>`;
                            }).join('')}
                        </div>
                    </td>
                    <td>${formatDate(item.time1)}</td>
                    <td>${item.line}</td>
                    <td class="duration-cell" data-ip="${item.ip}">Not active</td>
                `;

                tbody.appendChild(row);

                // Time 컬럼 기준으로 도형 회색 처리
                checkTimeDifference(item.time1, row);

                const secondSensor = row.querySelector('.circle-container .circle[data-index="1"]');
                if (secondSensor && secondSensor.classList.contains('red')) {
                    updateDuration(item.ip, row);
                } else {
                    resetDuration(item.ip, row);
                }
            });

            attachClickHandlers();
        }

        function checkTimeDifference(timeString, row) {
            // 서버에서 받은 시간을 UTC로 간주하고 -9시간 해서 로컬 시간으로 조정
            const utcDate = new Date(timeString);
            const adjustedDate = new Date(utcDate.getTime() - (9 * 60 * 60 * 1000));
            const currentTime = new Date();
            const timeDifference = Math.floor((currentTime - adjustedDate) / 1000);

            if (timeDifference > 30) {
                const circles = row.querySelectorAll('.circle');
                circles.forEach(circle => {
                    circle.classList.remove('red', 'green');
                    circle.classList.add('gray');
                });
            } else {
                const sensor1 = row.querySelector('.circle-container').dataset.sensor1;
                const circles = row.querySelectorAll('.circle');
                sensor1.split('').forEach((value, index) => {
                    const circle = circles[index];
                    if (circle) {
                        circle.className = 'circle ' + (value === '1' ? 'red' : 'green');
                    }
                });
            }
        }

        function updateDuration(ip, row) {
            if (!sensorActivationTimes[ip]) {
                sensorActivationTimes[ip] = new Date();
            }

            const durationCell = row.querySelector(`.duration-cell[data-ip="${ip}"]`);
            if (durationCell) {
                const currentTime = new Date();
                const startTime = sensorActivationTimes[ip];
                const duration = Math.floor((currentTime - startTime) / 1000);
                durationCell.textContent = `${duration} seconds`;

                if (duration >= 120) {
                    row.classList.add('highlighted-orange');
                } else {
                    row.classList.remove('highlighted-orange');
                }
            }
        }

        function resetDuration(ip, row) {
            sensorActivationTimes[ip] = null;
            const durationCell = row.querySelector(`.duration-cell[data-ip="${ip}"]`);
            if (durationCell) {
                durationCell.textContent = 'Not active';
            }
            row.classList.remove('highlighted-orange');
        }

        function attachClickHandlers() {
            const circles = document.querySelectorAll('.circle');
            circles.forEach(circle => {
                circle.addEventListener('click', event => {
                    circles.forEach(c => c.classList.remove('active'));
                    event.target.classList.add('active');

                    const ip = event.target.getAttribute('data-ip');
                    const index = event.target.getAttribute('data-index');
                    const sensorName = sensorNames[index] || 'Unknown Sensor';
                    document.getElementById('sensorInfo').value = `IP: ${ip}, ${sensorName} (Position: ${index})`;
                });
            });
        }

        function formatDate(dateString) {
            // 서버에서 받은 시간을 UTC로 간주하고 -9시간을 적용해 한국 시간으로 조정
            const utcDate = new Date(dateString);
            const localDate = new Date(utcDate.getTime() - (9 * 60 * 60 * 1000));

            if (isNaN(localDate.getTime())) {
                console.error("Invalid date received from the server:", dateString);
                return "Invalid date";
            }

            const yy = String(localDate.getFullYear()).slice(-2);
            const MM = String(localDate.getMonth() + 1).padStart(2, '0');
            const dd = String(localDate.getDate()).padStart(2, '0');
            const HH = String(localDate.getHours()).padStart(2, '0');
            const mm = String(localDate.getMinutes()).padStart(2, '0');
            const ss = String(localDate.getSeconds()).padStart(2, '0');
            const fff = String(localDate.getMilliseconds()).padStart(3, '0');
            return `${yy}-${MM}-${dd} ${HH}:${mm}:${ss}.${fff}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetchData();
            setInterval(fetchData, 3000);
        });
    </script>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <input type="text" id="sensorInfo" placeholder="Click a sensor to see its details" readonly>
    <table>
        <thead>
            <tr>
                <th>IP</th>
                <th>Sensors</th>
                <th>Time</th>
                <th>Line</th>
                <th>Duration (2nd Sensor)</th>
            </tr>
        </thead>
        <tbody>
            <!-- 데이터가 여기에 추가될 것입니다 -->
        </tbody>
    </table>
</body>
</html>
