죄송합니다. 잘못 이해하고 구현했습니다. 요청하신 대로 카메라 미리보기 화면의 외곽 테두리만 두께 10px로 설정하도록 코드를 수정하겠습니다.

1. XML 레이아웃 (activity_main.xml)
아래 XML 레이아웃에서는 카메라 미리보기 화면의 외측에 두께 10px의 테두리를 추가합니다.

xml
코드 복사
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- IP 주소와 기기 ID 표시 -->
    <TextView
        android:id="@+id/device_info"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Device Info"
        android:textSize="16sp"
        android:textColor="#000000"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:padding="16dp" />

    <!-- 카메라 미리보기 (테두리를 위한 Layout 포함) -->
    <RelativeLayout
        android:id="@+id/camera_container"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:layout_below="@id/device_info"
        android:padding="10px"> <!-- 10px 두께의 테두리를 위한 패딩 -->

        <!-- 카메라 미리보기 -->
        <androidx.camera.view.PreviewView
            android:id="@+id/viewFinder"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:background="#FFA500" /> <!-- 기본 주황색 테두리 -->
    </RelativeLayout>

    <!-- 인식된 텍스트를 보여줄 영역 -->
    <TextView
        android:id="@+id/text_view_result"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        android:text="Scan Result"
        android:textSize="18sp"
        android:textColor="#FFFFFF"
        android:background="#000000"
        android:padding="16dp" />
</RelativeLayout>
2. Kotlin 코드 (MainActivity.kt)
카메라 미리보기의 외측 테두리를 변경하도록 수정된 Kotlin 코드입니다.

kotlin
코드 복사
package com.dxmxsmd.mobilechecker

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.net.wifi.WifiManager
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.provider.Settings
import android.util.Log
import android.widget.RelativeLayout
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.camera.core.*
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import androidx.camera.camera2.interop.Camera2Interop
import androidx.camera.camera2.interop.ExperimentalCamera2Interop
import com.google.mlkit.vision.barcode.BarcodeScanner
import com.google.mlkit.vision.barcode.BarcodeScanning
import com.google.mlkit.vision.common.InputImage
import java.net.InetAddress
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.Statement
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

class MainActivity : ComponentActivity() {

    private lateinit var viewFinder: PreviewView
    private lateinit var cameraContainer: RelativeLayout
    private lateinit var deviceInfo: TextView
    private lateinit var cameraExecutor: ExecutorService
    private lateinit var handler: Handler

    private lateinit var deviceIp: String
    private lateinit var deviceId: String

    // MSSQL 연결 정보
    private val dbUrl = "jdbc:sqlserver://<SERVER>:<PORT>;databaseName=<DATABASE>"
    private val dbUser = "<USERNAME>"
    private val dbPassword = "<PASSWORD>"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        viewFinder = findViewById(R.id.viewFinder)
        cameraContainer = findViewById(R.id.camera_container)
        deviceInfo = findViewById(R.id.device_info)

        // 기기 IP 주소와 ID 가져오기
        deviceIp = getDeviceIpAddress()
        deviceId = Settings.Secure.getString(contentResolver, Settings.Secure.ANDROID_ID)

        // IP 주소와 기기 ID 표시
        deviceInfo.text = "IP: $deviceIp\nID: $deviceId"

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }

        cameraExecutor = Executors.newSingleThreadExecutor()
        handler = Handler(Looper.getMainLooper())
    }

    @OptIn(ExperimentalCamera2Interop::class)
    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)

        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val previewBuilder = Preview.Builder()

            // Camera2Interop을 사용하여 연속 자동 초점 모드 설정
            val camera2Interop = Camera2Interop.Extender(previewBuilder)
            camera2Interop.setCaptureRequestOption(
                android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE,
                android.hardware.camera2.CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE
            )

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(viewFinder.surfaceProvider)
            }

            val barcodeScanner = BarcodeScanning.getClient()

            val imageAnalysis = ImageAnalysis.Builder()
                .setTargetAspectRatio(AspectRatio.RATIO_16_9) // 장치의 최대 해상도 사용
                .setBackpressureStrategy(ImageAnalysis.STRATEGY_KEEP_ONLY_LATEST)
                .setTargetRotation(viewFinder.display.rotation) // 디스플레이 회전에 맞춤
                .build()
                .also {
                    it.setAnalyzer(cameraExecutor, { imageProxy ->
                        processImageProxy(barcodeScanner, imageProxy)
                    })
                }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview, imageAnalysis
                )

            } catch (exc: Exception) {
                Log.e(TAG, "Use case binding failed", exc)
            }

        }, ContextCompat.getMainExecutor(this))
    }

    private fun processImageProxy(barcodeScanner: BarcodeScanner, imageProxy: ImageProxy) {
        val mediaImage = imageProxy.image
        if (mediaImage != null) {
            val image = InputImage.fromMediaImage(mediaImage, imageProxy.imageInfo.rotationDegrees)
            barcodeScanner.process(image)
                .addOnSuccessListener { barcodes ->
                    for (barcode in barcodes) {
                        val rawValue = barcode.rawValue
                        findViewById<TextView>(R.id.text_view_result).text = rawValue

                        if (isQrCodeInDatabase(rawValue)) {
                            // QR 코드가 DB에 존재할 경우 테두리를 녹색으로 변경
                            runOnUiThread {
                                cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_green_light))
                            }
                            // 5분 후에 다시 주황색으로 변경
                            handler.postDelayed({
                                runOnUiThread {
                                    cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_orange_light))
                                }
                            }, TimeUnit.MINUTES.toMillis(5))
                        } else {
                            // QR 코드가 DB에 존재하지 않을 경우 주황색 테두리 유지
                            runOnUiThread {
                                cameraContainer.setBackgroundColor(ContextCompat.getColor(this, android.R.color.holo_orange_light))
                            }
                        }
                    }
                }
                .addOnFailureListener {
                    // Handle failure
                }
                .addOnCompleteListener {
                    imageProxy.close()
                }
        }
    }

    private fun isQrCodeInDatabase(qrCode: String): Boolean {
        var connection: Connection? = null
        var statement: Statement? = null
        var resultSet: ResultSet? = null
        return try {
            // JDBC 드라이버 로드
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver")

            // 데이터베이스 연결
            connection = DriverManager.getConnection(dbUrl, dbUser, dbPassword)

            // 쿼리 실행
            statement = connection.createStatement()
            val query = "SELECT COUNT(*) FROM QRCodeData WHERE QRCode = '$qrCode'"
            resultSet = statement.executeQuery(query)

            // 결과 처리
            if (resultSet.next()) {
                resultSet.getInt(1) > 0
            } else {
                false
            }
        } catch (e: Exception) {
            e.printStackTrace()
            false
        } finally {
            try {
                resultSet?.close()
                statement?.close()
                connection?.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }
    }

    private fun getDeviceIpAddress(): String {
        try {
            val wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
            val ipAddress = wifiManager.connectionInfo.ipAddress
            return InetAddress.getByAddress(
                byteArrayOf(
                    (ipAddress and 0xff).toByte(),
                    (ipAddress shr 8 and 0xff).toByte(),
                    (ipAddress shr 16 and 0xff).toByte(),
                    (ipAddress shr 24 and 0xff).toByte()
                )
            ).hostAddress ?: "IP not found"
        } catch (ex: Exception) {
            return "IP not found"
        }
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
        handler.removeCallbacksAndMessages(null) // 모든 핸들러 작업 중지
    }

    companion object {
        private const val TAG = "CameraXApp"
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(Manifest.permission.CAMERA)
    }
}
주요 변경 사항:
외곽 테두리 설정:

RelativeLayout을 추가하고 padding="10px"을 설정하여 미리보기 화면 주변에 10px 두께의 테두리를 설정했습니다. 테두리는 초기 상태에서 주황색으로 설정됩니다.
테두리 색상 변경:

QR 코드가 DB에 존재하면 cameraContainer의 배경색을 녹색으로 변경하고, 5분 후에 다시 주황색으로 변경합니다.
이 코드로 카메라 미리보기 화면의 외곽에 10px 두께의 테두리가 생기며, QR 코드가 DB에 존재하는 경우 테두리 색상이 변경됩니