dColumnData 이벤트는 바인딩되지 않은 열의 데이터를 관리하기 위해 사용되는데, 이것이 줄이 그어져 있다는 것은 사용되지 않거나 올바르게 구성되지 않았을 수 있습니다. 그리고 UnboundType 속성은 바인딩되지 않은 열의 데이터 타입을 지정하는데 사용됩니다. CRXRF0011은 DevExpress의 오류 코드 같은데, 정확한 상황을 보지 못해서 확실히 말씀드리기 어렵습니다.

대신, DevExpress GridControl에서 버튼 클릭 이벤트를 처리하는 일반적인 방법은 CellTemplate을 사용하여 버튼을 열에 추가하고, 버튼의 Command를 바인딩하여 처리하는 것입니다. 아래 코드는 이 방법을 사용하여 각 행에 '적용' 버튼을 추가하고, 버튼 클릭 이벤트를 처리하는 방법을 보여줍니다.

csharp
Copy code
// XAML 코드
<dxg:GridControl x:Name="gridControl" AutoGenerateColumns="None">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="sortname" Header="이름" />
        <dxg:GridColumn FieldName="makeby" Header="등록자" />
        <dxg:GridColumn Header="적용">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <Button Content="적용" Click="ApplyButton_Click"/>
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>
</dxg:GridControl>

// Code-behind C# 코드
private void ApplyButton_Click(object sender, RoutedEventArgs e)
{
    Button applyButton = sender as Button;
    var row = gridControl.GetRow(gridControl.View.FocusedRowHandle);
    if (row is YourDataType dataRow)
    {
        string sortName = dataRow.sortname; // YourDataType 클래스에서 'sortname' 필드에 접근
        // 이제 sortName을 사용하여 필요한 작업을 수행하세요.
        Debug.WriteLine(sortName);
    }
}
이 코드는 '적용' 버튼이 포함된 셀 템플릿을 가진 열을 추가합니다. 사용자가 버튼을 클릭하면, ApplyButton_Click 메서드가 호출되고, 현재 선택된 행의 sortname 값을 디버그 창에 출력합니다.

YourDataType은 그리드에 바인딩된 데이터 타입으로, 실제 사용하는 클래스 이름으로 대체해야 합니다. 그리드에 바인딩하는 데이터의 구조에