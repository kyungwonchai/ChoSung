로 생략합니다.
클라이언트 - WPF DevExpress GridControl

XAML

xaml

<Grid>
    <dxg:GridControl Name="gridControl">
        <!-- ... -->
    </dxg:GridControl>
    <Button Content="DB 업데이트" Click="UpdateButton_Click"/>
</Grid>

C# - MainWindow.xaml.cs

csharp

private HubConnection connection;
private int lockedRowHandle = -1; // 현재 lock된 행을 저장

public MainWindow()
{
    InitializeComponent();
    InitializeSignalR();
}

// SignalR 초기화 코드는 이전과 동일

private async void tableView_ShowingEditor(object sender, ShowingEditorEventArgs e)
{
    if (lockedRowHandle != -1 && lockedRowHandle != e.RowHandle)
    {
        e.Cancel = true; // 다른 행이 lock된 상태면 편집 불가
        return;
    }

    lockedRowHandle = e.RowHandle;
    await connection.SendAsync("LockRow", lockedRowHandle);
}

private async void UpdateButton_Click(object sender, RoutedEventArgs e)
{
    if (lockedRowHandle == -1)
    {
        return; // lock된 행이 없으면 업데이트 취소
    }

    // DB 업데이트 로직
    // ...

    // DB 업데이트가 완료되면 lock 해제
    await connection.SendAsync("UnlockRow", lockedRowHandle);
    lockedRowHandle = -1; // lock 해제 후 초기화
}

이 예제에서는 tableView_ShowingEditor 이벤트에서 편집을 시작할 때 lock을 걸고, "DB 업데이트" 버튼(UpdateButton_Click)을 클릭하여 DB 업데이트가 완료되면 lock을 풉니다.

행에 lock을 걸면 lockedRowHandle 변수에 현재 lock된 행의 handle 값을 저장합니다. 이 값을 기준으로 다른 행에서의 편집을 제한합니다.

"DB 업데이트" 버튼을 누르면 DB 업데이트 로직을 실행한 후, lock을 해제합니다. 이