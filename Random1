owViewModel에 새로운 생성자 파라미터를 추가해서 함수 이름과 명령어 문자열을 함께 받도록 변경하고, 이를 이용해 f_waitResponse 함수를 호출할 때 각각을 사용할 수 있도록 수정하겠습니다.

수정된 코드
Model: PLC 서비스 (변경 없음)

csharp
코드 복사
public class PLCService
{
    public async Task<string> SendCommandAsync(string functionName, string command)
    {
        // PLC 함수 호출
        return await _comPortPLC.SendCommandAndWaitForResponseAsync($"{functionName} {command}");
    }
}
RowViewModel: functionName과 command 두 개의 값을 받도록 업데이트

csharp
코드 복사
public class RowViewModel : INotifyPropertyChanged
{
    private readonly PLCService _plcService;
    private string _functionName;
    private string _command;
    private string _result;

    public string FunctionName
    {
        get => _functionName;
        set { _functionName = value; OnPropertyChanged(nameof(FunctionName)); }
    }

    public string Command
    {
        get => _command;
        set { _command = value; OnPropertyChanged(nameof(Command)); }
    }

    public string Result
    {
        get => _result;
        set { _result = value; OnPropertyChanged(nameof(Result)); }
    }

    public ICommand SendCommandCommand { get; }

    public RowViewModel(PLCService plcService, string functionName, string command)
    {
        _plcService = plcService;
        _functionName = functionName;
        _command = command;
        SendCommandCommand = new RelayCommand(async () => await SendCommand());
    }

    private async Task SendCommand()
    {
        Result = await _plcService.SendCommandAsync(FunctionName, Command);
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}
MainViewModel: functionName과 command를 각각 넘겨주도록 업데이트

csharp
코드 복사
public class MainViewModel
{
    public ObservableCollection<RowViewModel> Rows { get; }

    public MainViewModel()
    {
        var plcService = new PLCService();
        Rows = new ObservableCollection<RowViewModel>
        {
            new RowViewModel(plcService, "Function1", "Command1"),
            new RowViewModel(plcService, "Function2", "Command2")
            // 추가 행 설정
        };
    }
}
View (XAML): DataGrid에 FunctionName 열 추가

xml
코드 복사
<DataGrid ItemsSource="{Binding Rows}">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Function Name" Binding="{Binding FunctionName}" />
        <DataGridTextColumn Header="Command" Binding="{Binding Command}" />
        <DataGridTextColumn Header="Result" Binding="{Binding Result}" />
        <DataGridTemplateColumn Header="Send">
            <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                    <Button Content="보내기" Command="{Binding SendCommandCommand}" />
                </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
        </DataGridTemplateColumn>
    </DataGrid.Columns>
</DataGrid>
이제 RowViewModel에 FunctionName과 Command를 각각 입력할 수 있으며, SendCommand 명령을 실행하면 PLCService의 SendComman