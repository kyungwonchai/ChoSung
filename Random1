private async void btnStart_Click(object sender, RoutedEventArgs e)
{
    string folderPath = txtFolderPath.Text;
    string fileExtension = cmbFileExtension.Text;
    string driveName = txtFolderPath.Text.Split('\\').FirstOrDefault() + "\\";

    if (string.IsNullOrEmpty(folderPath) || folderPath == "폴더 경로 입력" ||
        string.IsNullOrEmpty(fileExtension))
    {
        System.Windows.Forms.MessageBox.Show("모든 입력값을 제공해주세요.");
        return;
    }

    try
    {
        Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 중..."; });

        _trainingData = await Task.Run(() => CollectInitialFileData(folderPath, fileExtension));
        if (_trainingData.Count < MinimumSampleSize)
        {
            System.Windows.Forms.MessageBox.Show($"학습 모델을 훈련시키기에 샘플이 충분하지 않습니다. 최소 샘플 수: {MinimumSampleSize}");
            Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: 샘플 부족"; });
            return;
        }

        _mlModelBuilder.TrainModel(_trainingData);

        Dispatcher.Invoke(() =>
        {
            dataGridTrainingData.ItemsSource = _trainingData;
            txtTrainingStatus.Text = "학습 완료";
            txtCurrentPatterns.Text = string.Join(", ", _mlModelBuilder.GetRegexPatterns().Select(p => p.ToString()));
        });

        await Task.Run(() => MonitorAndDisplayFilesToDelete(folderPath, fileExtension, driveName));
    }
    catch (Exception ex)
    {
        _logger.LogError("모델 훈련 실패: " + ex.Message);
        Dispatcher.Invoke(() => { txtTrainingStatus.Text = "학습 실패: " + ex.Message); });
    }
}

private async Task MonitorAndDisplayFilesToDelete(string folderPath, string fileExtension, string driveName)
{
    while (true)
    {
        try
        {
            long freeSpace = await Task.Run(() => _fileCleaner.GetDriveFreeSpace(driveName));
            List<FileInfo> filesToDelete = await Task.Run(() => _fileCleaner.GetFilesToDelete(folderPath, fileExtension));

            Dispatcher.Invoke(() => DisplayFilesToDelete(filesToDelete));

            //await _fileCleaner.DeleteFilesAsync(filesToDelete); // 실제 삭제 코드 (주석 처리)

            await Task.Run(() => _fileCleaner.UpdateFolderStatistics(folderPath, fileExtension));
            await Task.Delay(TimeSpan.FromMinutes(10)); // 10분마다 체크
        }
        catch (Exception ex)
        {
            _logger.LogError("모니터링 중 오류 발생: " + ex.Message);
        }
    }
}

private void DisplayFilesToDelete(List<FileInfo> filesToDelete)
{
    Dispatcher.Invoke(() =>
    {
        lstPriorityFiles.Items.Clear();
        foreach (var file in filesToDelete)
        {
            lstPriorityFiles.Items.Add($"{file.FullName} (생성 시간: {file.CreationTime})");
        }
        dataGridTrainingResults.ItemsSource = filesToDelete.Select(f => new { f.Name, f.CreationTime });
    });
}
