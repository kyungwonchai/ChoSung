using System.Windows;

namespace LockerManagementApp
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        // Optional: Global Exception Handling
        // protected override void OnStartup(StartupEventArgs e)
        // {
        //     base.OnStartup(e);
        //     SetupExceptionHandling();
        // }

        // private void SetupExceptionHandling()
        // {
        //     AppDomain.CurrentDomain.UnhandledException += (s, e) =>
        //         LogUnhandledException((Exception)e.ExceptionObject, "AppDomain.CurrentDomain.UnhandledException");

        //     DispatcherUnhandledException += (s, e) =>
        //     {
        //         LogUnhandledException(e.Exception, "Application.Current.DispatcherUnhandledException");
        //         e.Handled = true; // Prevent application crash
        //     };

        //     TaskScheduler.UnobservedTaskException += (s, e) =>
        //     {
        //         LogUnhandledException(e.Exception, "TaskScheduler.UnobservedTaskException");
        //         e.SetObserved(); // Mark as handled
        //     };
        // }

        // private void LogUnhandledException(Exception exception, string source)
        // {
        //      // Log the exception details (to file, event log, etc.)
        //      MessageBox.Show($"An unhandled exception occurred ({source}):\n{exception.Message}", "Application Error", MessageBoxButton.OK, MessageBoxImage.Error);
        //      // Consider more robust logging and potentially shutting down gracefully
        // }
    }