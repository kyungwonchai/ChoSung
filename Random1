WPF DevExpress GridControl에서 DataAdapter로 연결된 데이터를 사용하여 행 추가 기능을 구현하려면, 다음과 같은 단계를 따를 수 있습니다. 여기서는 GridControl을 사용하여 DataTable에 행을 추가하는 방법을 보여줍니다.

먼저, XAML 파일에서 GridControl을 설정합니다:

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew">
            <dxg:GridControl.View>
                <dxg:TableView AutoWidth="True"/>
            </dxg:GridControl.View>
        </dxg:GridControl>
        <Button Content="Add Row" HorizontalAlignment="Left" VerticalAlignment="Bottom" Click="AddRow_Click"/>
    </Grid>
</Window>
다음으로, C# 코드에서 DataTable을 DataAdapter로 채우고 GridControl에 바인딩합니다. 또한, 버튼 클릭 이벤트를 통해 새로운 행을 추가하는 기능을 구현합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Data;
using System.Data.SqlClient;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private DataTable dataTable;
        private SqlDataAdapter dataAdapter;
        private SqlConnection connection;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
        }

        private void LoadData()
        {
            // 데이터베이스 연결 문자열을 설정합니다.
            string connectionString = "your_connection_string_here";

            // SQL 쿼리를 설정합니다.
            string query = "SELECT * FROM YourTable";

            // 연결을 초기화합니다.
            connection = new SqlConnection(connectionString);

            // DataAdapter와 DataTable을 초기화합니다.
            dataAdapter = new SqlDataAdapter(query, connection);
            dataTable = new DataTable();

            // DataAdapter를 사용하여 DataTable을 채웁니다.
            dataAdapter.Fill(dataTable);

            // GridControl에 DataTable을 바인딩합니다.
            gridControl.ItemsSource = dataTable.DefaultView;
        }

        private void AddRow_Click(object sender, RoutedEventArgs e)
        {
            // DataTable에 새로운 행을 추가합니다.
            DataRow newRow = dataTable.NewRow();

            // 필요한 초기값을 설정합니다. 예를 들어, 첫 번째 열에 초기값을 설정합니다.
            newRow[0] = "NewValue";

            // DataTable에 행을 추가합니다.
            dataTable.Rows.Add(newRow);

            // 데이터베이스에 변경사항을 저장하려면 SqlCommandBuilder를 사용하여 UpdateCommand를 생성하고 업데이트합니다.
            SqlCommandBuilder commandBuilder = new SqlCommandBuilder(dataAdapter);
            dataAdapter.Update(dataTable);
        }
    }
}
이 코드는