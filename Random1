송합니다. LoadScatterChartData 함수는 산점도(Scatter Chart)를 표시하기 위해 필요하지만, 이전 코드에서는 호출되지 않았습니다. 아래는 DetailChart_MouseDown에서 올바르게 호출되도록 수정한 코드입니다.

수정된 DetailChart_MouseDown 이벤트
이벤트에서 클릭된 SeriesPoint의 데이터 멤버를 확인하고, 해당 데이터로 산점도를 업데이트합니다.

csharp
코드 복사
private void DetailChart_MouseDown(object sender, MouseButtonEventArgs e)
{
    var hitInfo = DetailChart.Diagram.CalcHitInfo(e.GetPosition(DetailChart));
    if (hitInfo.InSeries) // 클릭된 위치가 시리즈인지 확인
    {
        var seriesPoint = hitInfo.SeriesPoint;
        if (seriesPoint != null)
        {
            var selectedSeries = hitInfo.SeriesPoint.Series;
            var selectedDataMember = selectedSeries.ValueDataMember; // 클릭된 시리즈의 데이터 멤버 가져오기
            LoadScatterChartData(selectedDataMember); // 산점도 업데이트 함수 호출
        }
    }
}
LoadScatterChartData 함수
selectedDataMember를 기반으로 DetailChartData에서 해당 데이터만 추출하여 ScatterChartData를 업데이트합니다.

csharp
코드 복사
private void LoadScatterChartData(string dataMember)
{
    ScatterChartData.Clear(); // 기존 산점도 데이터 초기화

    // DetailChartData에서 선택된 데이터 멤버의 값만 추출
    foreach (var detail in DetailChartData)
    {
        ScatterChartData.Add(new ScatterData
        {
            Timestamp = detail.Timestamp,
            Value = (double)detail.GetType().GetProperty(dataMember).GetValue(detail)
        });
    }
}
Scatter Chart 데이터 표시
ScatterChart는 ScatterChartData를 데이터 소스로 사용하며, LoadScatterChartData 함수 호출 후 자동으로 업데이트됩니다.

전체 C# 코드
아래는 수정된 전체 C# 코드입니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using System.Windows.Input;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<LineData> MainChartData { get; set; } = new ObservableCollection<LineData>();
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();
        public ObservableCollection<ScatterData> ScatterChartData { get; set; } = new ObservableCollection<ScatterData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            LoadMainChartData();
        }

        private void LoadMainChartData()
        {
            try
            {
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0);
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            var stdDev = CalculateStandardDeviation(mpData);

                            MainChartData.Add(new LineData { LineName = lineName, StdDev = stdDev });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void MainChart_MouseDown(object sender, MouseButtonEventArgs e)
        {
            var hitInfo = MainChart.Diagram.CalcHitInfo(e.GetPosition(MainChart));
            if (hitInfo.InSeries)
            {
                var seriesPoint = hitInfo.SeriesPoint;
                if (seriesPoint != null)
                {
                    var selectedLineName = seriesPoint.Argument.ToString();
                    LoadDetailChartData(selectedLineName);
                }
            }
        }

        private void DetailChart_MouseDown(object sender, MouseButtonEventArgs e)
        {
            var hitInfo = DetailChart.Diagram.CalcHitInfo(e.GetPosition(DetailChart));
            if (hitInfo.InSeries)
            {
                var seriesPoint = hitInfo.SeriesPoint;
                if (seriesPoint != null)
                {
                    var selectedSeries = hitInfo.SeriesPoint.Series;
                    var selectedDataMember = selectedSeries.ValueDataMember;
                    LoadScatterChartData(selectedDataMember);
                }
            }
        }

        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear();
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM View_InspectionResult
                                  WHERE LineName = @lineName
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                DetailChartData.Add(new DetailData
                                {
                                    Timestamp = reader.GetDateTime(0),
                                    MP1 = reader.GetDouble(1),
                                    MP2 = reader.GetDouble(2),
                                    MP3 = reader.GetDouble(3),
                                    MP4 = reader.GetDouble(4),
                                    MP5 = reader.GetDouble(5)
                                });
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void LoadScatterChartData(string dataMember)
        {
            ScatterChartData.Clear();

            foreach (var detail in DetailChartData)
            {
                ScatterChartData.Add(new ScatterData
                {
                    Timestamp = detail.Timestamp,
                    Value = (double)detail.GetType().GetProperty(dataMember).GetValue(detail)
                });
            }
        }

        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    public class LineData
    {
        public string LineName { get; set; }
        public double StdDev { get; set; }
    }

    public class DetailData
    {
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class ScatterData
    {
        public DateTime Timestamp { get; set; }
        public double Value { get; set; }
    }
}
주요 변경사항
DetailChart_MouseDown에서 LoadScatterChartData 호출: 클릭된 시리즈의 데이터 멤버를 가져와 산점도를 업데이트합니다.