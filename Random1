전달하고, 그 GridControl의 밴드 순서를 변경하는 과정을 구현하기 위해서는 다음과 같이 할 수 있습니다.

메인 윈도우에서 설정 윈도우에 GridControl 전달
메인 윈도우에 GridControl을 설정 윈도우로 전달하기 위해 ColumnOrderingWindow의 생성자를 수정하고, 메인 윈도우에서 이를 호출할 때 GridControl의 참조를 전달해야 합니다.

ColumnOrderingWindow 생성자 수정
csharp
Copy code
// ColumnOrderingWindow.xaml.cs 내에 있는 ColumnOrderingWindow 클래스
public partial class ColumnOrderingWindow : Window
{
    public ObservableCollection<ColumnInfo> ColumnsInfo { get; set; }
    private GridControl mainGridControl;  // 메인 윈도우의 GridControl 참조를 보관할 필드

    // 생성자에 GridControl의 참조를 추가합니다.
    public ColumnOrderingWindow(IEnumerable<ColumnInfo> columns, GridControl gridControl)
    {
        InitializeComponent();
        ColumnsInfo = new ObservableCollection<ColumnInfo>(columns);
        ListBoxColumns.ItemsSource = ColumnsInfo;
        mainGridControl = gridControl;  // GridControl 참조를 필드에 저장
    }

    // ApplyChanges_Click 이벤트 핸들러에서 mainGridControl을 사용하는 코드는 동일합니다.
}
메인 윈도우에서 설정 윈도우 호출
csharp
Copy code
// MainWindow.xaml.cs 내에 있는 MainWindow 클래스
private void OpenColumnOrderingWindow_Click(object sender, RoutedEventArgs e)
{
    var columnsInfo = mainGridControl.Columns
        .Select((c, index) => new ColumnInfo
        {
            XName = c.Name,
            IsVisible = c.Visible,
            DisplayIndex = index
        })
        .OrderBy(c => c.DisplayIndex)
        .ToList();

    // 설정 윈도우 생성 시, mainGridControl 참조를 전달합니다.
    var columnOrderingWindow = new ColumnOrderingWindow(columnsInfo, mainGridControl);
    columnOrderingWindow.ShowDialog();
}
위의 코드에서 mainGridControl은 메인 윈도우의 GridControl을 참조하는 변수입니다. mainGridControl.Columns는 GridControl의 컬럼 또는 밴드 목록을 나타냅니다. 이 예제에서는 GridControl에 직접 밴드가 있는 것으로 가정하고 있습니다. 실제 코드에서는 GridControl.Bands를 사용해야 할 수도 있습니다.

이제 ColumnOrderingWindow 설정 윈도우는 mainGridControl 참조를 가지고 있으며, 사용자가 "Apply Changes" 버튼을 클릭할 때 메인 윈도우의 GridControl에 대한 변경 사항을 적용할 수 있습니다.





