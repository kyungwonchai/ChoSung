아래는 MEWTOCOL 프로토콜을 사용해 응답 문자열에서 데이터를 추출하는 몇 가지 방식으로 구현한 코드입니다. 각 방법은 응답 형식에 따라 파싱하는 로직이 달라질 수 있습니다. 세 가지 예시를 제공하니, 원하는 방식으로 선택해 사용할 수 있습니다.

1. 간단한 데이터 추출 방식 (정규식 사용)
이 방식은 정규식을 사용해 응답 문자열에서 특정 패턴을 찾아 값을 추출하는 방식입니다.

csharp
코드 복사
using System;
using System.Text.RegularExpressions;

private string ParseResponse(string response)
{
    // 예시 응답: %01$RDD0011223344
    string pattern = @"%01\$RDD(?<data>\d+)";
    Match match = Regex.Match(response, pattern);
    
    if (match.Success)
    {
        // "data" 그룹에서 데이터를 추출
        return match.Groups["data"].Value;
    }
    
    return "Invalid Response";
}
2. 응답 문자열에서 고정된 위치의 값을 추출
이 방식은 응답 문자열에서 특정 위치에 있는 값을 고정적으로 추출하는 방식입니다. MEWTOCOL 응답 형식이 고정된 포맷을 따른다면 이 방식이 유용합니다.

csharp
코드 복사
private string ParseResponse(string response)
{
    // 예시 응답: %01$RDD0011223344
    if (response.StartsWith("%01$RDD"))
    {
        // 응답에서 데이터 부분만 추출 (인덱스 7번 이후의 값 추출)
        string data = response.Substring(7);
        return data;
    }

    return "Invalid Response";
}
3. 응답 검증 및 BCC 체크 방식
이 방식은 응답의 BCC (Block Check Code)를 검증하여 데이터의 무결성을 확인한 후 데이터를 추출합니다.

csharp
코드 복사
private string ParseResponse(string response)
{
    // 예시 응답: %01$RDD0011223344AB
    // 응답의 마지막 2자리가 BCC 값이라고 가정

    if (response.Length < 14)
    {
        return "Invalid Response Length";
    }

    // BCC 체크: 응답의 마지막 2자리
    string bcc = response.Substring(response.Length - 2);
    string responseWithoutBCC = response.Substring(0, response.Length - 2);

    if (!VerifyBCC(responseWithoutBCC, bcc))
    {
        return "BCC Check Failed";
    }

    // 응답에서 데이터 부분 추출
    string data = response.Substring(7, 8); // 예시로 데이터가 8자리라고 가정
    return data;
}

private bool VerifyBCC(string message, string bcc)
{
    // BCC 검증 로직 (간단한 XOR 방식)
    int calculatedBCC = 0;
    foreach (char c in message)
    {
        calculatedBCC ^= c;
    }

    string calculatedBCCHex = calculatedBCC.ToString("X2");
    return calculatedBCCHex.Equals(bcc, StringComparison.OrdinalIgnoreCase);
}
4. 전체 응답을 분리하여 필요한 부분만 추출 (복합 데이터 처리)
이 방식은 응답이 여러 레지스터 값을 포함하고 있는 경우, 데이터를 여러 부분으로 나누어 각각 처리하는 방식입니다.

csharp
코드 복사
private string ParseResponse(string response)
{
    // 예시 응답: %01$RDD001122334455667788
    if (response.StartsWith("%01$RDD"))
    {
        // 데이터를 4자리씩 잘라서 여러 값을 읽는다고 가정
        string r520 = response.Substring(7, 4);
        string r521 = response.Substring(11, 4);
        string r522 = response.Substring(15, 4);
        string r523 = response.Substring(19, 4);
        string r524 = response.Substring(23, 4);

        return $"R520: {r520}, R521: {r521}, R522: {r522}, R523: {r523}, R524: {r524}";
    }

    return "Invalid Response";
}
각 방식을 설명:
정규식 사용 방식:

응답의 구조가 복잡하거나, 일정 패턴을 유지하는 경우 사용할 수 있는 유연한 방식입니다.
특정 데이터 구조를 쉽게 추출할 수 있습니다.
고정된 위치 추출 방식:

응답 문자열의 길이가 고정된 경우 매우 간단하게 데이터를 추출할 수 있습니다.
특정 위치의 값을 직접적으로 추출하는 방식으로, 구조가 단순할 때 적합합니다.
BCC 검증 방식:

데이터 무결성을 보장하고자 할 때 사용하는 방식입니다.
MEWTOCOL에서 사용하는 BCC 검증을 통해 전송 데이터가 오류 없이 도착했는지 확인할 수 있습니다.
복합 데이터 처리 방식:

응답이 여러 레지스터 값을 포함하고 있을 때, 데이터를 나누어 각각 처리하는 방식입니다.
R520 ~ R524와 같이 연속된 데이터를 한 번에 읽어오는 경우 적합합니다.
요약
위에 제공된 네 가지 방식 중 필요한 방식에 따라 ParseResponse 함수를 선택하여 사용하세요. BCC 검증이 필요하면 세 번째 방법을, 복수 레지스터 값을 한 번에 처리해야 하면 네 번째 방법을 사용하는 것이 적합합니다.