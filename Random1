C#에서 윈도우 서비스를 사용하여 특정 프로세스가 꺼져 있는지 1분마다 체크하고, 30분간 꺼져 있으면 해당 프로세스를 실행하는 기능을 구현할 수 있습니다. 윈도우 서비스는 백그라운드에서 실행되는 프로그램으로, 시스템 부팅 시 자동으로 시작할 수 있어 지속적으로 프로세스를 모니터링하는 데 적합합니다.

아래는 윈도우 서비스로 구현하는 방법에 대한 단계별 설명과 코드 예제입니다.

1. 프로젝트 생성
Visual Studio를 열고, 새 프로젝트를 만듭니다.
Windows Service (.NET Framework) 템플릿을 선택합니다.
프로젝트에 적절한 이름을 지정하고 확인을 클릭합니다.
2. 서비스 클래스 작성
기본적으로 생성된 Service1 클래스를 수정하여 요구 사항에 맞게 구현합니다.

Service1.cs
csharp
코드 복사
using System;
using System.Diagnostics;
using System.ServiceProcess;
using System.Timers;

namespace ProcessMonitorService
{
    public partial class Service1 : ServiceBase
    {
        private string processName = "notepad"; // 확인할 프로세스 이름
        private int checkInterval = 60000; // 체크 주기 (1분)
        private int totalCheckDuration = 1800000; // 총 체크 시간 (30분)
        private int elapsedDuration = 0; // 프로세스가 꺼져있는 누적 시간

        private Timer checkTimer; // 프로세스 체크 타이머

        public Service1()
        {
            InitializeComponent();
        }

        protected override void OnStart(string[] args)
        {
            // 타이머 설정
            checkTimer = new Timer(checkInterval);
            checkTimer.Elapsed += CheckProcess;
            checkTimer.AutoReset = true;
            checkTimer.Enabled = true;

            EventLog.WriteEntry("ProcessMonitorService", "서비스가 시작되었습니다.");
        }

        protected override void OnStop()
        {
            // 서비스 중지 시 타이머 해제
            checkTimer.Stop();
            checkTimer.Dispose();
            EventLog.WriteEntry("ProcessMonitorService", "서비스가 중지되었습니다.");
        }

        private void CheckProcess(object sender, ElapsedEventArgs e)
        {
            // 프로세스가 실행 중인지 확인
            bool isRunning = IsProcessRunning(processName);

            if (!isRunning)
            {
                // 프로세스가 실행 중이 아니라면 누적 시간 증가
                elapsedDuration += checkInterval;
                EventLog.WriteEntry("ProcessMonitorService", $"{processName} 프로세스가 실행 중이지 않습니다. 누적 시간: {elapsedDuration / 60000}분");

                // 누적 시간이 설정된 시간 이상이면 프로세스 실행
                if (elapsedDuration >= totalCheckDuration)
                {
                    StartProcess(processName);
                    elapsedDuration = 0; // 누적 시간 초기화
                }
            }
            else
            {
                // 프로세스가 실행 중이면 누적 시간 초기화
                EventLog.WriteEntry("ProcessMonitorService", $"{processName} 프로세스가 실행 중입니다. 누적 시간 초기화.");
                elapsedDuration = 0;
            }
        }

        private bool IsProcessRunning(string processName)
        {
            // 현재 실행 중인 모든 프로세스를 확인하여 해당 프로세스 이름이 있는지 검사
            Process[] processes = Process.GetProcessesByName(processName);
            return processes.Length > 0;
        }

        private void StartProcess(string processName)
        {
            try
            {
                // 프로세스 실행
                Process.Start(processName);
                EventLog.WriteEntry("ProcessMonitorService", $"{processName} 프로세스를 실행했습니다.");
            }
            catch (Exception ex)
            {
                EventLog.WriteEntry("ProcessMonitorService", $"프로세스를 실행하는 동안 오류가 발생했습니다: {ex.Message}", EventLogEntryType.Error);
            }
        }
    }
}
3. 서비스 설치 설정
서비스를 설치하고 관리하려면 InstallUtil.exe를 사용하거나, Visual Studio에서 제공하는 설치 프로그램 프로젝트를 사용할 수 있습니다. 여기서는 서비스 설치를 위한 설정을 추가하는 방법을 설명합니다.

Service1.Designer.cs
디자이너 파일에서 서비스에 필요한 컴포넌트를 추가합니다.

csharp
코드 복사
namespace ProcessMonitorService
{
    partial class Service1
    {
        private System.ComponentModel.IContainer components = null;

        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        private void InitializeComponent()
        {
            components = new System.ComponentModel.Container();
            this.ServiceName = "ProcessMonitorService";
        }
    }
}
Project Installer 추가
Solution Explorer에서 Service1.cs 파일을 열고, 디자인 모드로 전환합니다.
디자인 화면에서 마우스 오른쪽 버튼을 클릭하고 추가 > 설치 프로그램을 선택합니다.
자동으로 ProjectInstaller 클래스가 생성됩니다.
ProjectInstaller의 디자인 화면에서 ServiceProcessInstaller와 ServiceInstaller를 추가합니다.
ServiceProcessInstaller의 Account 속성을 LocalSystem으로 설정합니다.
ServiceInstaller의 ServiceName 속성을 ProcessMonitorService로 설정합니다.
StartType 속성을 Automatic으로 설정하여 시스템 시작 시 서비스가 자동으로 시작되도록 합니다.
4. 서비스 빌드 및 설치
프로젝트를 빌드하여 실행 파일을 생성합니다.
관리자 권한으로 명령 프롬프트를 열고, InstallUtil.exe를 사용하여 서비스를 설치합니다. 예를 들어:
bash
코드 복사
InstallUtil.exe "C:\YourProjectPath\bin\Debug\ProcessMonitorService.exe"
서비스 관리 도구 (services.msc)를 사용하여 서비스를 시작하고 관리할 수 있습니다.
5. 서비스 테스트 및 배포
서비스가 정상적으로 작동하는지 확인하려면 services.msc에서 해당 서비스를 찾고, 시작 및 중지를 반복해보며 로그가 예상대로 작성되는지 확인합니다.

이 코드와 설정을 사용하여 윈도우 서비스를 작성하면 특정 프로세스가 꺼져 있는지를 주기적으로 체크하고, 꺼진 경우 설정한 시간 후에 프로세스를 다시 실행하는 기능을 구현할 수 있습니