 서비스를 죽지 않게 만드는 방법 (PM2처럼 만들기)
PM2처럼 서비스를 안정적으로, 죽지 않게 만들려면 systemd 서비스 파일에 아래와 같은 **"안전장치"**들을 명확하게 추가해주어야 합니다.

아래는 거의 모든 문제를 해결해주는 "강화된 서비스 파일" 예시입니다. 이 내용을 /etc/systemd/system/myapp.service 파일에 적용해 보세요.

Ini, TOML

[Unit]
Description=My Bulletproof Python Application
# (안전장치 1) 네트워크가 완전히 준비된 후에 서비스를 시작합니다.
After=network-online.target
Wants=network-online.target

[Service]
# (안전장치 2) 실행할 프로그램의 "전체 경로"를 명확하게 적어줍니다.
ExecStart=/usr/bin/python3 /home/pi/my_project/main.py --mode production

# (안전장치 3) 작업 디렉토리를 명확하게 지정합니다.
# 이렇게 해야 프로그램이 설정 파일 등을 제대로 찾을 수 있습니다.
WorkingDirectory=/home/pi/my_project

# (안전장치 4) 어떤 이유로든 서비스가 실패하면, 10초 후에 항상 다시 시작합니다.
# 10초의 지연 시간은, 문제가 생겼을 때 1초에 수십 번씩 재시작하는 것을 막아줍니다.
Restart=always
RestartSec=10

# (안전장치 5) 이 서비스를 실행할 사용자를 명확하게 지정합니다.
# 이렇게 해야 파일 접근 권한 등의 문제가 발생하지 않습니다.
User=pi

# (안전장치 6) 워치독을 설정하여, 프로그램이 완전히 '먹통'이 되면 강제 재부팅합니다.
WatchdogSec=60

[Install]
WantedBy=multi-user.target
## 가장 중요한 것: "왜 죽었는지" 원인을 찾는 방법
서비스가 죽었을 때 가장 중요한 것은 "왜?"를 아는 것입니다. systemd는 모든 기록을 journalctl이라는 로그 시스템에 남깁니다.

우분투 터미널에서 아래 명령어를 사용해 보세요.

서비스의 현재 상태와 마지막 로그 몇 줄 보기:

Bash

sudo systemctl status myapp.service
서비스의 실시간 로그 계속 지켜보기 (가장 유용!):

Bash
