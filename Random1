제를 해결하기 위해 다음과 같은 작업을 수행하겠습니다:

포트 설정 저장: 스캐너 포트와 소켓 통신 포트 설정을 저장하고, 프로그램이 실행될 때 이를 불러올 수 있도록 구현하겠습니다.

포트 액세스 에러 해결: COM12와 같은 포트 선택 시 "액세스 디나이드" 오류가 발생하는 문제를 해결하겠습니다. 이 문제는 일반적으로 해당 포트가 이미 다른 프로세스에서 사용 중일 때 발생합니다. 이를 처리하기 위해 포트 선택 시 예외 처리를 추가하겠습니다.

타겟 포트의 멀티 설정: 최대 5개의 타겟 포트를 멀티로 설정할 수 있도록 하겠습니다.

수정된 MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Linq;
using System.Net;
using System.Windows;
using System.Windows.Controls;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;
        private SocketServer socketServer;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            settingsManager = SettingsManager.Instance;
            serialPortManager = SerialPortManager.Instance;
            socketServer = SocketServer.Instance;

            // IP 주소 표시 및 QR 코드 생성
            string ipAddress = GetLocalIPAddress();
            IpAddressTextBlock.Text = ipAddress;

            // 이전에 설정된 포트 값 불러오기
            LoadSavedSettings();

            // 포트 목록 새로고침
            RefreshPorts();

            // 소켓 서버 시작 (이전에 저장된 포트 값으로)
            string savedPort = settingsManager.GetSetting("Port");
            if (!string.IsNullOrEmpty(savedPort))
            {
                StartSocketServer(int.Parse(savedPort));
            }
        }

        private void LoadSavedSettings()
        {
            // 스캐너 포트 설정 로드
            ScannerPortComboBox.SelectedItem = settingsManager.GetSetting("ScannerPort");
            ScannerBaudRateComboBox.SelectedItem = settingsManager.GetSetting("ScannerBaudRate");
            ScannerParityComboBox.SelectedItem = settingsManager.GetSetting("ScannerParity");
            ScannerDataBitsComboBox.SelectedItem = settingsManager.GetSetting("ScannerDataBits");
            ScannerStopBitsComboBox.SelectedItem = settingsManager.GetSetting("ScannerStopBits");

            // 타겟 포트 설정 로드
            for (int i = 0; i < 5; i++)
            {
                var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                portControl?.LoadPortSettings(i + 1);
            }
        }

        private void SaveSettings()
        {
            // 스캐너 포트 설정 저장
            settingsManager.SaveSetting("ScannerPort", ScannerPortComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerBaudRate", ScannerBaudRateComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerParity", ScannerParityComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerDataBits", ScannerDataBitsComboBox.SelectedItem?.ToString());
            settingsManager.SaveSetting("ScannerStopBits", ScannerStopBitsComboBox.SelectedItem?.ToString());

            // 타겟 포트 설정 저장 (PortConfigControl에서 이미 개별적으로 저장됨)
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                // 사용 가능한 포트 이름 가져오기
                string[] portNames = SerialPort.GetPortNames();

                // 스캐너 포트 콤보박스 갱신
                ScannerPortComboBox.ItemsSource = portNames;

                // 타겟 포트 콤보박스 갱신
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    portControl?.RefreshPortList(portNames);
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            string localIP = "127.0.0.1"; // 기본 IP 설정

            try
            {
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                        break;
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
            }

            return localIP;
        }

        private void StartSocketServer(int port)
        {
            try
            {
                socketServer.Start(port);
                settingsManager.SaveSetting("Port", port.ToString());
                GenerateQRCode(IpAddressTextBlock.Text, port.ToString());
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 서버 시작 중 오류 발생: {ex.Message}");
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                string qrContent = $"{ipAddress}:{port}";
                var qrCodeImage = new QRCodeGenerator().GenerateQRCode(qrContent);
                QrCodeImage.Source = qrCodeImage;
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem == null) return;

                string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                serialPortManager.OpenScannerPort(selectedPort, int.Parse(baudRate), 
                    (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), 
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                LogMessage($"스캐너 포트 {selectedPort}가 설정되었습니다.");
                SaveSettings();
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {ScannerPortComboBox.SelectedItem} 접근 권한이 없습니다: {ex.Message}");
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {ScannerPortComboBox.SelectedItem}에서 I/O 오류 발생: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
            }
        }
    }
}
주요 변경 사항 및 설명
포트 설정 저장 및 불러오기:

LoadSavedSettings() 메서드를 통해 프로그램 실행 시 이전에 저장된 스캐너 포트 및 타겟 포트 설정을 불러옵니다.
SaveSettings() 메서드는 스캐너 포트 설정이 변경될 때마다 이를 자동으로 저장합니다.
포트 액세스 예외 처리:

UnauthorizedAccessException, IOException, ArgumentException 등의 예외를 처리하여 포트 액세스 시 발생할 수 있는 오류에 대비했습니다.
타겟 포트 멀티 설정:

최대 5개의 타겟 포트를 설정할 수 있으며, 각 타겟 포트는 PortConfigControl 내에서 관리됩니다. 이 설정은 프로그램 실행 시 자동으로 저장됩니다.
COM12 오류 해결:

포트 접근 시 예외 처리를 추가하여, 이미 사용 중인 포트에 접근하려고 할 때 발생하는 오류를 로그에 기록하고 사용자에게 알려줍니다.
이제 요청하신 기능이 제대로 동작할 것입니다. 추가적인 수정이나 요청이 필요하면 언제든지 