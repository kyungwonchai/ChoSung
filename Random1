의 Flask 애플리케이션에 새로운 라우트를 추가하여 /ipchk 경로로 접속했을 때 방화벽 상태 페이지가 표시되도록 구현하려면, 아래의 코드를 사용하면 됩니다.

기존 Flask 애플리케이션에 추가
아래 코드를 복사하여 Flask 애플리케이션에 추가하세요:

python
코드 복사
from flask import Flask, render_template
import socket

app = Flask(__name__)

# 포트 상태를 확인하는 함수
def check_port(ip, port):
    try:
        with socket.create_connection((ip, port), timeout=2):
            return True
    except Exception:
        return False

# 새로운 라우트 추가
@app.route('/ipchk')
def check_firewall():
    ip = "10.10.100.11"
    ports = [80, 443]
    results = {}

    # 포트 상태 검사
    for port in ports:
        results[port] = check_port(ip, port)

    # HTML 페이지 렌더링
    return render_template('status.html', results=results, ip=ip)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
templates/status.html 파일 생성
위 코드에서 status.html 템플릿 파일이 필요하므로 templates 폴더를 만들고 아래 내용을 작성하세요:

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Firewall Status</title>
</head>
<body>
    <h1>Firewall Status for {{ ip }}</h1>
    <table border="1">
        <tr>
            <th>Port</th>
            <th>Status</th>
        </tr>
        {% for port, status in results.items() %}
        <tr>
            <td>{{ port }}</td>
            <td>{{ "Open" if status else "Closed" }}</td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>
Flask 애플리케이션 실행
애플리케이션을 실행한 후, 브라우저에서 다음 경로에 접속하면 결과를 확인할 수 있습니다:

arduino
코드 복사
http://<Flask_서버_IP>:5000/ipchk
기존 애플리케이션에 통합 시 주의할 점
템플릿 디렉토리: templates 폴더가 이미 존재한다면, 충돌하지 않도록 확인하세요.
포트 및 IP 수정: ip와 ports 리스트는 필요에 따라 수정 가능합니다.