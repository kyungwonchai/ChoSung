이터를 가져올 때 컬럼 위치가 다르게 보이는 문제는 엑셀의 데이터 범위를 잘못 참조하거나, 엑셀 파일 자체에 빈 행이나 열이 있어서 발생할 수 있습니다. 사용자가 지정한 특정 컬럼 위치를 정확하게 반영하기 위해서는 범위를 명확하게 지정하는 것이 중요합니다.

다음은 지정한 컬럼(i부터 0~7까지)을 정확히 가져와 출력하는 코드 예제입니다. 이 예제는 Microsoft.Office.Interop.Excel을 사용하여 특정 범위의 데이터를 가져옵니다.

코드 예제
csharp
코드 복사
using System;
using System.Windows.Forms;
using Excel = Microsoft.Office.Interop.Excel;

public partial class Form1 : Form
{
    public Form1()
    {
        InitializeComponent();

        // 버튼을 추가하여 엑셀 파일 열기 대화 상자를 표시합니다.
        Button button = new Button();
        button.Text = "엑셀 파일 열기";
        button.Dock = DockStyle.Top;
        button.Click += Button_Click;
        this.Controls.Add(button);
    }

    // 버튼 클릭 이벤트 핸들러
    private void Button_Click(object sender, EventArgs e)
    {
        OpenFileDialog openFileDialog = new OpenFileDialog
        {
            Filter = "Excel 파일 (*.xlsx)|*.xlsx|All files (*.*)|*.*",
            Title = "엑셀 파일 선택"
        };

        if (openFileDialog.ShowDialog() == DialogResult.OK)
        {
            string filePath = openFileDialog.FileName;
            ReadExcelFile(filePath);
        }
    }

    private void ReadExcelFile(string filePath)
    {
        Excel.Application excelApp = new Excel.Application();
        Excel.Workbook workbook = excelApp.Workbooks.Open(filePath);
        Excel._Worksheet worksheet = workbook.Sheets[1];
        Excel.Range range = worksheet.UsedRange;

        // 1행부터 7행까지 데이터 읽기
        int startRow = 2; // 2행부터 시작
        int startColumn = 9; // 'I' 컬럼 (Excel에서는 1부터 시작)
        int endColumn = 16; // 'P' 컬럼 (9 + 7 = 16)

        for (int i = startRow; i <= range.Rows.Count; i++)
        {
            for (int j = startColumn; j <= endColumn; j++)
            {
                // 셀의 값 읽기
                string cellValue = Convert.ToString((range.Cells[i, j] as Excel.Range).Value2);
                Console.Write($"{cellValue}\t");
            }
            Console.WriteLine();
        }

        // 엑셀 파일 닫기
        workbook.Close(false);
        excelApp.Quit();

        // COM 객체 해제
        ReleaseObject(range);
        ReleaseObject(worksheet);
        ReleaseObject(workbook);
        ReleaseObject(excelApp);
    }

    private void ReleaseObject(object obj)
    {
        try
        {
            System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
            obj = null;
        }
        catch (Exception ex)
        {
            obj = null;
            Console.WriteLine($"Exception occurred while releasing object: {ex}");
        }
        finally
        {
            GC.Collect();
        }
    }
}
설명
OpenFileDialog: 엑셀 파일을 선택할 수 있는 파일 열기 대화 상자를 표시합니다.
ReadExcelFile: 선택한 엑셀 파일을 열고, 첫 번째 시트의 데이터를 읽습니다.
범위 지정: startRow를 2로 설정하여 2행부터 시작합니다. startColumn을 9로 설정하여 'I' 컬럼부터 시작하고, endColumn을 16으로 설정하여 'P' 컬럼까지 데이터를 읽습니다. 이 부분은 사용자가 원하는 범위를 수동으로 지정한 것입니다.
데이터 읽기 및 출력: 지정한 범위 내의 각 셀 값을 읽어 콘솔에 출력합니다.
COM 객체 해제: Excel COM 객체를 해제하여 메모리 누수를 방지합니다.
이 코드를 사용하면 지정한 범위의 데이터를 정확하게 읽어올 수 있습니다. 사용자가 원하는 컬럼 위치를 정확히 반영하기 위해 startColumn과 endColumn 값을 적절히 설