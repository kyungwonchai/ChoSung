using UnityEngine;
using UnityEditor;

public class RackLayoutGenerator
{
    // --- 여기서 배치 설정을 수정하세요 ---
    private static readonly int RACK_COUNT_PER_ROW = 12;      // 한 줄(세트)에 배치될 랙의 개수
    private static readonly float RACK_GAP = 0.01f;           // 랙과 랙 사이의 미세한 간격
    private static readonly float AISLE_WIDTH = 4.0f;         // 두 줄의 랙 세트 사이의 복도 넓이
    // ------------------------------------

    [MenuItem("Tools/SMD Rack/Generate Final Layout")]
    private static void GenerateLayout()
    {
        GameObject rackPrefab = Selection.activeObject as GameObject;
        if (rackPrefab == null || PrefabUtility.GetPrefabAssetType(rackPrefab) == PrefabAssetType.NotAPrefab)
        {
            EditorUtility.DisplayDialog("오류", "Project 창에서 랙 '프리팹'을 먼저 선택해주세요.", "확인");
            return;
        }

        string parentName = "Rack_Installations";
        GameObject parentObject = GameObject.Find(parentName);
        if (parentObject == null)
        {
            parentObject = new GameObject(parentName);
        }
        else 
        {
            for (int i = parentObject.transform.childCount - 1; i >= 0; i--)
            {
                GameObject.DestroyImmediate(parentObject.transform.GetChild(i).gameObject);
            }
        }
        
        Bounds totalBounds = new Bounds();
        Renderer[] renderers = rackPrefab.GetComponentsInChildren<Renderer>();
        if(renderers.Length > 0)
        {
            totalBounds = renderers[0].bounds;
            foreach (Renderer renderer in renderers)
            {
                totalBounds.Encapsulate(renderer.bounds);
            }
        }
        float rackWidth = totalBounds.size.x;

        Quaternion standingRotation = Quaternion.Euler(-90, 0, 0);

        // 첫 번째 줄 (A열) 생성
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);
            
            // ★★★ 이름 생성 방식 변경: ToString("D2") 사용 (예: A01, A12) ★★★
            rackInstance.name = "A" + (i + 1).ToString("D2");

            float posX = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(posX, 0, 0);
            rackInstance.transform.rotation = standingRotation * Quaternion.Euler(0, 0, 180);
        }
        
        // 두 번째 줄 (B열) 생성
        for (int i = 0; i < RACK_COUNT_PER_ROW; i++)
        {
            GameObject rackInstance = (GameObject)PrefabUtility.InstantiatePrefab(rackPrefab, parentObject.transform);

            // ★★★ 이름 생성 방식 변경: ToString("D2") 사용 (예: B01, B12) ★★★
            rackInstance.name = "B" + (i + 1).ToString("D2");

            float posX = i * (rackWidth + RACK_GAP);
            rackInstance.transform.position = new Vector3(posX, 0, AISLE_WIDTH);
            rackInstance.transform.rotation = standingRotation * Quaternion.Euler(0, 180, 0);
        }

        EditorUtility.DisplayDialog("완료", "A01~A12, B01~B12 랙 배치가 완료되었습니다.", "확인");
    }
}