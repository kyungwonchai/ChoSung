using System;
using System.IO;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace BackupFileProcessor
{
    public class Program
    {
        private const string connectionString = "Data Source=(local);Initial Catalog=YourDatabaseName;Integrated Security=True"; // Replace with your SQL Server connection string
        private const string logTableName = "TableLog1"; // Replace with your table name in MSSQL2014
        private const string backupFolderPath = @"c:\SmartSEED\BACKUP";

        public static void Main()
        {
            ProcessBackupFolder();
        }

        private static void ProcessBackupFolder()
        {
            if (Directory.Exists(backupFolderPath))
            {
                string[] backupFolders = Directory.GetDirectories(backupFolderPath, "????????");

                foreach (string folderPath in backupFolders)
                {
                    string folderName = Path.GetFileName(folderPath);
                    string d001FolderPath = Path.Combine(folderPath, "D001");

                    if (Directory.Exists(d001FolderPath))
                    {
                        ProcessD001Folder(d001FolderPath, folderName);
                    }
                }
            }
            else
            {
                MessageBox.Show("Backup folder not found.");
            }
        }

        private static void ProcessD001Folder(string d001FolderPath, string parentFolderName)
        {
            string[] subFolders = Directory.GetDirectories(d001FolderPath, "?????.??");

            foreach (string subFolderPath in subFolders)
            {
                string folderName = Path.GetFileName(subFolderPath);
                string fullFolderPath = Path.Combine(d001FolderPath, subFolderPath);

                ProcessFilesInFolder(fullFolderPath, parentFolderName, folderName);
            }
        }

        private static void ProcessFilesInFolder(string folderPath, string parentFolderName, string folderName)
        {
            string[] proFiles = Directory.GetFiles(folderPath, "*.pro");

            foreach (string proFile in proFiles)
            {
                string fileName = Path.GetFileName(proFile);
                DateTime fileTime = File.GetCreationTime(proFile);
                string pcIP = GetLocalIPAddress(); // Make sure to implement the method to retrieve the local IP address

                InsertToDatabase(parentFolderName, folderName, fileName, fileTime, pcIP);
            }
        }

        private static void InsertToDatabase(string parentFolderName, string folderName, string fileName, DateTime fileTime, string pcIP)
        {
            try
            {
                using (SqlConnection connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    string insertQuery = "INSERT INTO " + logTableName + "(parentfoldername, foldername, filename, filetime, pcip) VALUES (@parentfoldername, @foldername, @filename, @filetime, @pcip)";
                    using (SqlCommand command = new SqlCommand(insertQuery, connection))
                    {
                        command.Parameters.AddWithValue("@parentfoldername", parentFolderName);
                        command.Parameters.AddWithValue("@foldername", folderName);
                        command.Parameters.AddWithValue("@filename", fileName);
                        command.Parameters.AddWithValue("@filetime", fileTime);
                        command.Parameters.AddWithValue("@pcip", pcIP);
                        command.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Error occurred while inserting data to the database: " + ex.Message);
            }
        }

        private static string GetLocalIPAddress()
        {
            // Implement the method to retrieve the local IP address
            return "127.0.0.1";
        }
    }
}
