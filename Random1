그룹이 체크되어 있으면 하위 라인 모두가 선택된 것으로 간주하고, 해당 정보를 기반으로 SQL IN 조건을 사용하여 선택된 라인만 조회하는 코드입니다.

SQL 쿼리
선택된 라인의 이름을 IN 조건으로 전달하여 데이터를 조회합니다.

C# 코드
csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeViewCheckboxExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<Group> Groups { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // 예제 데이터 로드
            Groups = new ObservableCollection<Group>
            {
                new Group
                {
                    Name = "Group A",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 1.1", IsChecked = true },
                        new Line { Name = "Line 1.2", IsChecked = true }
                    }
                },
                new Group
                {
                    Name = "Group B",
                    Lines = new ObservableCollection<Line>
                    {
                        new Line { Name = "Line 2.1", IsChecked = false },
                        new Line { Name = "Line 2.2", IsChecked = false }
                    }
                }
            };
        }

        /// <summary>
        /// 선택된 라인을 SQL IN 조건으로 사용하여 조회
        /// </summary>
        public void QuerySelectedLines()
        {
            // 선택된 라인 가져오기
            var selectedLines = Groups
                .Where(group => group.IsChecked || group.Lines.Any(line => line.IsChecked))
                .SelectMany(group => group.Lines.Where(line => group.IsChecked || line.IsChecked))
                .Select(line => line.Name)
                .ToList();

            // 선택된 라인이 없으면 처리 중단
            if (!selectedLines.Any())
            {
                MessageBox.Show("선택된 라인이 없습니다.");
                return;
            }

            // SQL IN 조건 생성
            var inClause = string.Join(", ", selectedLines.Select(name => $"'{name}'"));

            // SQL 쿼리 실행
            string query = $@"
                SELECT *
                FROM YourTable
                WHERE LineName IN ({inClause})";

            ExecuteQuery(query);
        }

        /// <summary>
        /// SQL 쿼리 실행
        /// </summary>
        private void ExecuteQuery(string query)
        {
            string connectionString = "YourConnectionStringHere";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        DataTable resultTable = new DataTable();
                        resultTable.Load(reader);

                        // 조회 결과를 디버그 출력 또는 다른 방식으로 처리
                        MessageBox.Show($"조회된 행 수: {resultTable.Rows.Count}");
                    }
                }
            }
        }
    }

    public class Group : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }
        public ObservableCollection<Line> Lines { get; set; } = new ObservableCollection<Line>();

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class Line : INotifyPropertyChanged
    {
        private bool _isChecked;
        public string Name { get; set; }

        public bool IsChecked
        {
            get => _isChecked;
            set
            {
                if (_isChecked != value)
                {
                    _isChecked = value;
                    OnPropertyChanged(nameof(IsChecked));
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
선택된 라인 필터링:

그룹이 체크된 경우, 해당 그룹의 모든 라인을 선택된 것으로 간주합니다.
각 라인의 IsChecked 상태를 기준으로 필터링합니다.
SQL IN 조건 생성:

선택된 라인의 이름을 문자열 배열로 만들고, IN 조건에 사용할 수 있도록 string.Join(", ")을 사용해 쿼리 문자열로 변환합니다.
SQL 실행:

ExecuteQuery 메서드를 사용하여 생성된 SQL 쿼리를 실행하고, 결과를 데이터 테이블로 로드합니다.
결과 행 수를 메시지로 표시합니다.
결과 예시:

선택된 라인이 Line 1.1과 Line 1.2라면, SQL 쿼리는 아래와 같이 생성됩니다:
sql
코드 복사
SELECT *
FROM YourTable
WHERE LineName IN ('Line 1.1', 'Line 1.2')