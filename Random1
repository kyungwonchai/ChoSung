import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

# ✅ 1. 단백질 데이터 (아미노산 서열 & 탄소 결합 위치)
AminoAcids = [
    {"sequence": "CHHHCHNHHCOOH", "C_pos": 4},
    {"sequence": "HNCNHHNHCHHCHHCHHCHNHHCOOH", "C_pos": 17},
    {"sequence": "HHNCOCHHCHNHHCOOH", "C_pos": 8},
    {"sequence": "HOOCCHHCHNHHCOOH", "C_pos": 7},
    {"sequence": "HSCHHCHNHHCOOH", "C_pos": 5},
    {"sequence": "HHNCOCHHCHHCHNHHCOOH", "C_pos": 11},
    {"sequence": "HOOCCHHCHHCHNHHCOOH", "C_pos": 10},
    {"sequence": "NHHCHHCOOH", "C_pos": 3},
    {"sequence": "NHCHNCHCCHHCHNHHCOOH", "C_pos": 11},
    {"sequence": "CHHHCHHCHCHHHCHNHHCOOH", "C_pos": 13},
    {"sequence": "CHHHCHHHCHCHHCHNHHCOOH", "C_pos": 13},
    {"sequence": "HHNCHHCHHCHHCHHCHNHHCOOH", "C_pos": 15},
    {"sequence": "CHHHSCHHCHHCHNHHCOOH", "C_pos": 11},
    {"sequence": "CHHCHNHHCOOH", "C_pos": 3},
    {"sequence": "NHCHHCHHCHHCHCOOH", "C_pos": 11},
    {"sequence": "HOCHHCHNHHCOOH", "C_pos": 5},
    {"sequence": "CHHHCHOHCHNHHCOOH", "C_pos": 8},
    {"sequence": "NHCHCCHHCHNHHCOOH", "C_pos": 8},
    {"sequence": "HOCHHCHNHHCOOH", "C_pos": 5},
    {"sequence": "CHHHCHHCHCHNHHCOOH", "C_pos": 9}
]

n = len(AminoAcids)  # 아미노산 개수
positions = np.zeros((n, 3))  # 3D 좌표 저장
faces = []  # 면을 저장할 리스트

# ✅ 2. 접는 방향 및 회전 축 설정
directions = np.array([
    [1, 0, 0], [-1, 0, 0],  # X축 이동
    [0, 1, 0], [0, -1, 0],  # Y축 이동
    [0, 0, 1], [0, 0, -1]   # Z축 이동
])

# ✅ 3. 면 단위로 단백질 배치 (초기에는 직선)
for i in range(n):
    base = positions[i]  # 기준점
    faces.append([
        base + [0, 0, 0], base + [1, 0, 0], base + [1, 1, 0], base + [0, 1, 0]
    ])  # 정사각형 면 추가
    if i < n - 1:
        positions[i + 1] = positions[i] + [1, 0, 0]  # 직선형 구조로 초기 배치

# ✅ 4. 3D 공간에서 회전 함수
def rotate_face_90deg(face, axis, center):
    """ 면을 중심점(center) 기준으로 90도 회전 """
    rotated_face = []
    for point in face:
        x, y, z = point - center
        if axis == 'x':
            rotated_face.append(center + np.array([x, -z, y]))  # X축 회전
        elif axis == 'y':
            rotated_face.append(center + np.array([z, y, -x]))  # Y축 회전
        elif axis == 'z':
            rotated_face.append(center + np.array([-y, x, z]))  # Z축 회전
    return np.array(rotated_face)

# ✅ 5. 특정 탄소 결합(B)에서 단백질 접기 적용
def fold_protein(fold_idx, axis='z'):
    """ 특정 탄소 결합을 중심으로 단백질을 접는 함수 """
    center = positions[fold_idx]  # 접힘 중심
    for i in range(fold_idx + 1, n):
        faces[i] = rotate_face_90deg(faces[i], axis, center)

# ✅ 6. 3D 그래프 설정 및 시각화
fig = plt.figure(figsize=(10, 10))
ax = fig.add_subplot(111, projection='3d')
ax.set_title("3D Protein Folding - Surface Representation")

# ✅ 7. 접기 전 면 표시 (파란색)
for face in faces:
    ax.add_collection3d(Poly3DCollection([face], color='blue', alpha=0.5, linewidths=1, edgecolors='k'))

# ✅ 8. 특정 위치에서 단백질 접힘 적용
fold_protein(fold_idx=10, axis='z')

# ✅ 9. 접힌 후 면 표시 (빨간색)
for face in faces:
    ax.add_collection3d(Poly3DCollection([face], color='red', alpha=0.5, linewidths=1, edgecolors='k'))

# ✅ 10. 3D 설정 및 출력
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_xlim([-10, 10])
ax.set_ylim([-10, 10])
ax.set_zlim([-10, 10])
plt.show()