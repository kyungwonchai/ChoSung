루투스 스캐너의 입력을 특정 입력 창에 자동으로 넣는 Android 애플리케이션을 만드는 방법을 단계별로 설명드리겠습니다. 여기서는 Kotlin을 사용하여 예제 애플리케이션을 만들어 보겠습니다.

프로젝트 설정
Android Studio를 열고 새로운 프로젝트를 만듭니다.
프로젝트 이름과 패키지 이름을 지정합니다.
언어로 Kotlin을 선택합니다.
AndroidManifest.xml 설정
블루투스 권한을 추가합니다.

xml
코드 복사
<uses-permission android:name="android.permission.BLUETOOTH"/>
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
activity_main.xml 구성
입력 창을 포함한 기본 UI를 설정합니다.

xml
코드 복사
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/inputField"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:hint="Scan Result Here" />
</LinearLayout>
MainActivity.kt 작성
블루투스 스캐너에서 데이터를 읽고 입력 창에 자동으로 넣는 로직을 구현합니다.

kotlin
코드 복사
package com.example.btscannerapp

import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothSocket
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity
import java.io.IOException
import java.io.InputStream
import java.util.*

class MainActivity : AppCompatActivity() {

    private lateinit var inputField: EditText
    private val bluetoothAdapter: BluetoothAdapter? = BluetoothAdapter.getDefaultAdapter()
    private var bluetoothSocket: BluetoothSocket? = null
    private val handler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        inputField = findViewById(R.id.inputField)

        // 블루투스 연결 설정
        val device: BluetoothDevice? = bluetoothAdapter?.bondedDevices?.find { it.name == "YourScannerDeviceName" }
        device?.let {
            ConnectThread(it).start()
        }
    }

    private inner class ConnectThread(device: BluetoothDevice) : Thread() {
        private val uuid: UUID = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB")

        init {
            try {
                bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid)
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }

        override fun run() {
            bluetoothAdapter?.cancelDiscovery()

            try {
                bluetoothSocket?.connect()
                ManageConnectedSocket(bluetoothSocket!!).start()
            } catch (connectException: IOException) {
                connectException.printStackTrace()
                try {
                    bluetoothSocket?.close()
                } catch (closeException: IOException) {
                    closeException.printStackTrace()
                }
                return
            }
        }
    }

    private inner class ManageConnectedSocket(socket: BluetoothSocket) : Thread() {
        private val inputStream: InputStream = socket.inputStream

        override fun run() {
            val buffer = ByteArray(1024)
            var bytes: Int

            while (true) {
                try {
                    bytes = inputStream.read(buffer)
                    val readMessage = String(buffer, 0, bytes)
                    handler.post {
                        inputField.setText(readMessage)
                    }
                } catch (e: IOException) {
                    e.printStackTrace()
                    break
                }
            }
        }
    }
}
설명
AndroidManifest.xml: 블루투스 권한을 추가하여 애플리케이션이 블루투스를 사용할 수 있도록 합니다.
activity_main.xml: 입력 창을 포함하는 간단한 레이아웃을 정의합니다.
MainActivity.kt:
블루투스 어댑터를 사용하여 연결된 장치에서 특정 이름을 가진 스캐너를 찾습니다.
ConnectThread는 블루투스 장치와의 연결을 설정하고, 연결에 성공하면 ManageConnectedSocket을 시작합니다.
ManageConnectedSocket은 블루투스 소켓에서 데이터를 읽고, 읽은 데이터를 입력 창에 설정합니다.
APK 빌드 및 설치
Android Studio에서 Build > Build Bundle(s) / APK(s) > Build APK(s)를 선택하여 APK를 빌드합니다.
빌드가 완료되면 APK를 디바이스에 설치하여 테스트합니다.
이 예제는 블루투스 스캐너에서 데이터를 자동으로 읽고 입력 창에 설정하는 방법을 보여줍니다. 실제 블루투스 장치와의 호환성을 위해서는 장치의 특정 요구 사항에 따라 코드의 수정이 필요할 수 있습니다.






