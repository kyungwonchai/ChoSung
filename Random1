알겠습니다! 비동기 처리를 없애고, DataFrame의 값이 정확히 어떻게 평가되는지에 대한 오류를 해결하도록 하겠습니다.

먼저, the truth value of a DataFrame is ambiguous 오류는 if 문에서 DataFrame을 직접 비교할 때 발생합니다. 이 오류는 Pandas DataFrame 객체를 그대로 if 문에서 사용하려고 할 때, 그 객체가 True인지 False인지 명확하지 않아서 발생합니다.

1. DataFrame이 비어있는지 확인하기:
DataFrame이 비어있는지 확인하려면 .empty 속성을 사용해야 합니다. .empty는 True를 반환하면 DataFrame이 비어있음을 나타냅니다.

2. 비동기 제거:
비동기 처리를 제거하고 순차적인 코드로 변경하겠습니다. get_data와 같은 비동기 함수는 더 이상 필요하지 않으며, if 문에서 DataFrame의 유효성을 체크하는 부분에서 .empty를 사용하여 오류를 해결할 수 있습니다.

수정된 코드 (비동기 제거 및 DataFrame 유효성 체크):
1. Flask 애플리케이션 (Python)
python
Copy code
from flask import Flask, render_template, request, jsonify
import mymssql
import pandas as pd

app = Flask(__name__)

# 고정된 쿼리들 (내장된 쿼리들)
QUERY1 = "SELECT * FROM table1 WHERE qr_code = ?"
QUERY2 = "SELECT * FROM table2 WHERE qr_code = ?"
QUERY3 = "SELECT * FROM table3 WHERE qr_code = ?"

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query, qr_value):
    """
    SQL Server 데이터베이스에 연결하여 주어진 쿼리와 QR 값을 실행한 후 결과를 반환하는 함수.
    connection_string: 데이터베이스 연결 문자열
    query: 실행할 SQL 쿼리
    qr_value: QR 값으로 쿼리 파라미터 사용
    """
    try:
        # mymssql을 사용하여 데이터베이스 연결
        conn = mymssql.connect(connection_string)
        cursor = conn.cursor()

        # QR 값을 쿼리 파라미터로 전달
        cursor.execute(query, (qr_value,))  # QR 값을 쿼리 파라미터로 전달

        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]

        # 쿼리 결과 가져오기
        rows = cursor.fetchall()

        # 결과가 있으면 데이터를 테이블 형식으로 변환하여 반환
        if len(rows) > 0:
            data = pd.DataFrame(rows, columns=columns)
            return data
        else:
            return pd.DataFrame()  # 빈 DataFrame을 반환
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리, QR 값을 받아 데이터를 조회
def functionA(connection_string, qr_value):
    """
    fetch_data_from_db 함수를 호출하여 데이터를 조회하는 함수.
    여러 데이터베이스와 쿼리에서 동일한 QR 값을 사용하여 결과를 조회
    """
    # 고정된 쿼리들 실행
    data1 = fetch_data_from_db(connection_string, QUERY1, qr_value)
    data2 = fetch_data_from_db(connection_string, QUERY2, qr_value)
    data3 = fetch_data_from_db(connection_string, QUERY3, qr_value)

    # 각 쿼리 결과를 리스트로 반환
    return [data1, data2, data3]

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
def get_data():
    """
    사용자가 입력한 QR 값을 받아 functionA를 실행한 후 결과를 렌더링.
    """
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    qr_value = request.form['qr_value']  # 공용 QR 값
    
    # 함수 A 실행: 여러 개의 쿼리를 순차적으로 실행
    data = functionA(connection_string, qr_value)
    
    # 결과 처리: 데이터가 없으면 "없음" 메시지 출력
    results = []
    for df in data:
        # DataFrame이 비어있는지 체크
        if df.empty:
            results.append("No data")
        else:
            results.append(df.to_html(index=False))  # DataFrame을 HTML 테이블로 변환
    
    return render_template('table.html', results=results)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
2. HTML 템플릿 (입력 폼 - templates/index.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query</title>
</head>
<body>
    <h1>SQL 쿼리 실행</h1>
    <form action="/get_data" method="POST">
        <label for="connection_string">Connection String:</label><br>
        <input type="text" id="connection_string" name="connection_string" required><br><br>

        <label for="qr_value">QR Value:</label><br>
        <input type="text" id="qr_value" name="qr_value" required><br><br>

        <input type="submit" value="Run Queries">
    </form>
</body>
</html>
3. 결과 테이블 (HTML - templates/table.html)
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query Results</title>
</head>
<body>
    <h1>Query Results</h1>

    {% for result in results %}
        {% if result == "No data" %}
            <p>해당 쿼리의 결과가 없습니다.</p>
        {% else %}
            <h2>Results:</h2>
            <div>{{ result|safe }}</div>
        {% endfor %}
    <br>
    <a href="/">다시 실행</a>
</body>
</html>
주요 변경 사항:
빈 DataFrame 처리:

fetch_data_from_db 함수에서 데이터가 없으면 빈 DataFrame()을 반환하도록 변경했습니다.
if df.empty를 사용하여 DataFrame이 비어 있는지 체크하고, 비어 있으면 "No data"를 결과로 추가합니다.
결과 처리:

results 리스트에는 각 쿼리의 결과를 저장합니다. 만약 DataFrame이 비어 있으면 "No data"를 저장하고, 그렇지 않으면 DataFrame.to_html()을 사용해 HTML 테이블로 변환하여 저장합니다.
table.html에서 results를 출력할 때 "No data" 메시지를 표시하거나, HTML로 변환된 DataFrame을 표시합니다.
실행 방법:
필요한 라이브러리 설치:

bash
Copy code
pip install mymssql flask pandas
앱 실행:

bash
Copy code
python app.py
브라우저에서 테스트: 브라우저에서 http://localhost:5000으로 접속하여 QR 값을 입력하고 결과를 확인할 수 있습니다.
