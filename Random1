 코드를 수정하겠습니다.

XAML 수정 사항
레이아웃 개선: Grid 레이아웃을 사용하여 각 요소가 겹치지 않고 정렬되도록 합니다.
여백과 정렬 조정: 각 컨트롤의 여백과 정렬을 적절히 조정하여 깔끔하게 보이도록 합니다.
C# 수정 사항
백업 파일 구조 변경: 백업 파일을 날짜별 폴더에 누적되도록 수정합니다.
아래는 수정된 전체 XAML과 C# 코드입니다.

수정된 XAML 파일 (MainWindow.xaml)
xml
코드 복사
<Window x:Class="LogMonitor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Log Monitor" Height="500" Width="800" Background="Purple">
    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        
        <!-- 로그 파일 선택 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="0" Margin="0,0,0,10">
            <Button Content="Select Log File" Click="SelectLogFile_Click" Margin="5"/>
            <TextBlock Name="LogFilePathTextBlock" VerticalAlignment="Center" Margin="5" Width="500"/>
        </StackPanel>

        <!-- 백업 폴더 선택 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="1" Margin="0,0,0,10">
            <Button Content="Select Backup Folder" Click="SelectBackupFolder_Click" Margin="5"/>
            <TextBlock Name="BackupFolderPathTextBlock" VerticalAlignment="Center" Margin="5" Width="500"/>
        </StackPanel>

        <!-- 설정 및 제어 섹션 -->
        <StackPanel Orientation="Horizontal" Grid.Row="2" Margin="0,0,0,10">
            <TextBlock Text="Max Log Lines:" VerticalAlignment="Center" Margin="5"/>
            <TextBox Name="MaxLinesTextBox" Width="50" TextChanged="MaxLinesTextBox_TextChanged" VerticalAlignment="Center" Margin="5"/>
            <Button Content="Clear Logs" Click="ClearLogs_Click" Margin="5"/>
            <Button Content="Start" Click="StartMonitoring_Click" Margin="5"/>
        </StackPanel>

        <!-- 로그 표시 섹션 -->
        <ListBox Name="LogListBox" Grid.Row="3" Margin="0,10,0,0"/>
    </Grid>
</Window>
수정된 C# 코드 파일 (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace LogMonitor
{
    public partial class MainWindow : Window
    {
        private FileSystemWatcher _fileWatcher;
        private string _logFilePath;
        private string _backupFolderPath;
        private long _lastFilePosition = 0;
        private int _maxLogLines = 1000;
        private readonly List<string> _logLines = new List<string>();
        private bool _isMonitoring = false; // 감시가 시작되었는지 여부를 나타내는 플래그

        private const string ConfigFileName = "config.ini"; // 설정 파일 이름

        public MainWindow()
        {
            InitializeComponent();
            LoadSettings(); // 설정 파일 로드
        }

        // 설정 파일에서 값 로드
        private void LoadSettings()
        {
            if (File.Exists(ConfigFileName))
            {
                var lines = File.ReadAllLines(ConfigFileName);
                foreach (var line in lines)
                {
                    var parts = line.Split('=');
                    if (parts.Length == 2)
                    {
                        var key = parts[0].Trim();
                        var value = parts[1].Trim();
                        if (key == "LogFilePath")
                        {
                            _logFilePath = value;
                            LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                        }
                        else if (key == "BackupFolderPath")
                        {
                            _backupFolderPath = value;
                            BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                        }
                        else if (key == "MaxLogLines")
                        {
                            if (int.TryParse(value, out int maxLines))
                            {
                                _maxLogLines = maxLines;
                            }
                        }
                    }
                }
            }

            MaxLinesTextBox.Text = _maxLogLines.ToString();
        }

        // 설정 파일에 값 저장
        private void SaveSettings()
        {
            var lines = new List<string>
            {
                $"LogFilePath={_logFilePath}",
                $"BackupFolderPath={_backupFolderPath}",
                $"MaxLogLines={_maxLogLines}"
            };

            File.WriteAllLines(ConfigFileName, lines);
        }

        // 로그 파일 변경 감시 시작
        private void StartFileWatcher()
        {
            if (_fileWatcher != null)
            {
                _fileWatcher.Dispose();
            }

            _fileWatcher = new FileSystemWatcher(Path.GetDirectoryName(_logFilePath))
            {
                Filter = Path.GetFileName(_logFilePath),
                NotifyFilter = NotifyFilters.LastWrite
            };

            _fileWatcher.Changed += OnLogFileChanged;
            _fileWatcher.EnableRaisingEvents = true;
        }

        // 로그 파일이 변경되었을 때 호출되는 이벤트 핸들러
        private async void OnLogFileChanged(object sender, FileSystemEventArgs e)
        {
            await ReadNewLinesAsync();
        }

        // 새로운 로그 라인 읽기 (비동기)
        private async Task ReadNewLinesAsync()
        {
            await Dispatcher.InvokeAsync(() =>
            {
                using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    fs.Seek(_lastFilePosition, SeekOrigin.Begin);

                    using (var sr = new StreamReader(fs))
                    {
                        while (!sr.EndOfStream)
                        {
                            var line = sr.ReadLine();
                            _logLines.Add(line);

                            // 시작 버튼 이후 로그 라인만 추가
                            if (_isMonitoring)
                            {
                                LogListBox.Items.Add(line);
                                BackupLogLine(line);
                            }

                            if (_logLines.Count > _maxLogLines)
                            {
                                _logLines.RemoveAt(0);
                                if (_isMonitoring)
                                {
                                    LogListBox.Items.RemoveAt(0);
                                }
                            }
                        }

                        _lastFilePosition = fs.Position;
                    }
                }
            });
        }

        // 로그 파일 선택 버튼 클릭 이벤트 핸들러
        private void SelectLogFile_Click(object sender, RoutedEventArgs e)
        {
            var openFileDialog = new Microsoft.Win32.OpenFileDialog();
            if (openFileDialog.ShowDialog() == true)
            {
                _logFilePath = openFileDialog.FileName;
                LogFilePathTextBlock.Text = _logFilePath; // 로그 파일 경로 표시
                SaveSettings(); // 설정 저장
                DisplayLastThreeLines(); // 마지막 3줄 표시
            }
        }

        // 백업 폴더 선택 버튼 클릭 이벤트 핸들러
        private void SelectBackupFolder_Click(object sender, RoutedEventArgs e)
        {
            var folderDialog = new System.Windows.Forms.FolderBrowserDialog();
            if (folderDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _backupFolderPath = folderDialog.SelectedPath;
                BackupFolderPathTextBlock.Text = _backupFolderPath; // 백업 폴더 경로 표시
                SaveSettings(); // 설정 저장
            }
        }

        // 마지막 3줄 표시
        private void DisplayLastThreeLines()
        {
            if (!File.Exists(_logFilePath))
                return;

            var lines = new List<string>();

            using (var fs = new FileStream(_logFilePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
            {
                fs.Seek(0, SeekOrigin.Begin);

                using (var sr = new StreamReader(fs))
                {
                    while (!sr.EndOfStream)
                    {
                        lines.Add(sr.ReadLine());
                        if (lines.Count > 3)
                        {
                            lines.RemoveAt(0);
                        }
                    }
                }
            }

            LogListBox.Items.Clear();
            LogListBox.Items.Add("최종 3줄:");
            foreach (var line in lines)
            {
                LogListBox.Items.Add(line);
            }

            _lastFilePosition = new FileInfo(_logFilePath).Length;
        }

        // 로그 감시 시작 버튼 클릭 이벤트 핸들러
        private void StartMonitoring_Click(object sender, RoutedEventArgs e)
        {
            if (!string.IsNullOrEmpty(_logFilePath))
            {
                _isMonitoring = true;
                StartFileWatcher();
            }
        }

        // 로그 지우기 버튼 클릭 이벤트 핸들러
        private void ClearLogs_Click(object sender, RoutedEventArgs e)
        {
            LogListBox.Items.Clear();
            _logLines.Clear();
        }

        // 최대 로그 라인 수 텍스트 박스 변경 이벤트 핸들러
        private void MaxLinesTextBox_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            if (int.TryParse(MaxLinesTextBox.Text, out int maxLines))
            {
                _maxLogLines = maxLines;
                SaveSettings(); // 설정 저장
            }
        }

        // 백업 폴더에 로그 라인 저장
        private void BackupLogLine(string line)
        {
            if (string.IsNullOrEmpty(_backupFolderPath))
            {
                return;
            }

            // 날짜별 폴더 생성
            var dateFolder = Path.Combine(_backupFolderPath, DateTime.Now.ToString("yyyyMMdd"));
            if (!Directory.Exists(dateFolder))
            {
                Directory.CreateDirectory(dateFolder);
            }

            var backupFilePath = Path.Combine(dateFolder, $"backup_{DateTime.Now:yyyyMMdd}.log");

            using (var sw = new StreamWriter(backupFilePath, true))
            {
                sw.WriteLine($"[{DateTime.Now:yyyy-MM-dd HH:mm:ss}] {line}");
            }
        }
    }
}
주요 변경 사항:
그리드 레이아웃: Grid 레이아웃을 사용하여 각 UI 요소를 겹치지 않게 배치하였습니다. 각 요소는 고유한 행에 배치되며, 여백을 통해 보기 좋게 정렬했습니다.

백업 파일 구조 변경: BackupLogLine 메서드를 수정하여 백업 파일을 날짜별 폴더에 저장하도록 하였습니다. 이렇게 하면 매일 로그가 별도의 폴더에 누적되어 관리가 용이해집니다.

최종 3줄 표시: 로그 파일을 선택하면 마지막 3줄을 표시하고, 그 이후로는 감지된 새로운 로그만 표시하도록 구현하였습니다.

이제 UI가 겹치지 않고 잘 정렬되며, 백업 파일도 날짜별 폴더에 누적되도록 동작합니다.