겠습니다. MainWindow.xaml 파일에 두 개의 정규식 입력란과 다섯 개의 경로명 입력란을 추가하고, 파일 삭제 시 해당 경로와 정규식을 사용하여 10개 이상의 파일이 일치하는 경우 삭제를 수행하도록 수정하겠습니다.

1. MainWindow.xaml
정규식 입력란과 경로명 입력란 추가
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMD File Cleaner" Height="450" Width="525">
    <Grid>
        <TextBox x:Name="txtFolderPaths" HorizontalAlignment="Left" Height="100" Margin="10,10,0,0" VerticalAlignment="Top" Width="400" TextWrapping="Wrap" AcceptsReturn="True"/>
        <Button x:Name="btnSelectFolders" Content="Apply Folders" HorizontalAlignment="Left" Margin="420,10,0,0" VerticalAlignment="Top" Width="75" Click="btnApplyFolders_Click"/>
        
        <TextBox x:Name="txtRegexPatterns" HorizontalAlignment="Left" Height="50" Margin="10,120,0,0" VerticalAlignment="Top" Width="400" TextWrapping="Wrap" AcceptsReturn="True"/>
        <Button x:Name="btnApplyRegexPatterns" Content="Apply Regex" HorizontalAlignment="Left" Margin="420,120,0,0" VerticalAlignment="Top" Width="75" Click="btnApplyRegexPatterns_Click"/>
        
        <Button x:Name="btnStart" Content="Start" HorizontalAlignment="Left" Margin="10,180,0,0" VerticalAlignment="Top" Width="75" Click="btnStart_Click"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
폴더 경로와 정규식을 저장하고 파일 삭제 시 참조하도록 수정
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Windows;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private FileCleaner _fileCleaner;
        private List<string> _folderPaths = new List<string>();
        private List<Regex> _regexPatterns = new List<Regex>();
        private const string ConfigFilePath = "config.txt";

        public MainWindow()
        {
            InitializeComponent();
            _fileCleaner = new FileCleaner();
            LoadConfig();
        }

        private void btnApplyFolders_Click(object sender, RoutedEventArgs e)
        {
            _folderPaths = txtFolderPaths.Text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries).Take(5).ToList();
            SaveConfig();
            MessageBox.Show("폴더 경로가 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnApplyRegexPatterns_Click(object sender, RoutedEventArgs e)
        {
            var patterns = txtRegexPatterns.Text.Split(new[] { "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries).Take(2).ToList();
            _regexPatterns = patterns.Select(p => new Regex(p)).ToList();
            SaveConfig();
            MessageBox.Show("정규식 패턴이 저장되었습니다.", "정보", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnStart_Click(object sender, RoutedEventArgs e)
        {
            if (_folderPaths.Count == 0 || _regexPatterns.Count == 0)
            {
                MessageBox.Show("폴더와 정규식을 입력하세요.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
                return;
            }

            StartFileDeletion();
        }

        private void StartFileDeletion()
        {
            try
            {
                foreach (var folderPath in _folderPaths)
                {
                    foreach (var regex in _regexPatterns)
                    {
                        var filesToDelete = _fileCleaner.GetFilesToDelete(folderPath, regex);
                        if (filesToDelete.Count >= 10)
                        {
                            _fileCleaner.DeleteFilesAsync(filesToDelete, folderPath).Wait();
                        }
                    }
                }
                MessageBox.Show("파일 삭제 완료.", "완료", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (Exception ex)
            {
                MessageBox.Show("파일 삭제 중 오류 발생: " + ex.Message, "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void SaveConfig()
        {
            var lines = _folderPaths.Concat(_regexPatterns.Select(r => r.ToString())).ToList();
            File.WriteAllLines(ConfigFilePath, lines);
        }

        private void LoadConfig()
        {
            if (File.Exists(ConfigFilePath))
            {
                var lines = File.ReadAllLines(ConfigFilePath).ToList();
                if (lines.Count > 0)
                {
                    _folderPaths = lines.Take(5).ToList();
                    _regexPatterns = lines.Skip(5).Take(2).Select(p => new Regex(p)).ToList();

                    txtFolderPaths.Text = string.Join(Environment.NewLine, _folderPaths);
                    txtRegexPatterns.Text = string.Join(Environment.NewLine, _regexPatterns.Select(r => r.ToString()));
                }
            }
        }
    }
}
3. FileCleaner.cs
정규식과 일치하는 파일을 가져오는 함수 수정
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace SMDFileCleaner
{
    public class FileCleaner
    {
        private const long MinimumFreeSpace = 25L * 1024 * 1024 * 1024; // 25 GB
        private const long MaxFolderSize = 8L * 1024 * 1024 * 1024; // 8 GB
        private readonly string logDirectory;
        private readonly MLModelBuilder mlModelBuilder;
        private readonly Dispatcher dispatcher;
        private readonly Logger logger;
        private readonly Action<long, string> updateFolderStatistics;

        public FileCleaner(string logDirectory, MLModelBuilder mlModelBuilder, Dispatcher dispatcher, Logger logger, Action<long, string> updateFolderStatistics)
        {
            this.logDirectory = logDirectory;
            this.mlModelBuilder = mlModelBuilder;
            this.dispatcher = dispatcher;
            this.logger = logger;
            this.updateFolderStatistics = updateFolderStatistics;
        }

        public long GetDriveFreeSpace(string driveName)
        {
            try
            {
                DriveInfo drive = new DriveInfo(driveName);
                return drive.AvailableFreeSpace;
            }
            catch (Exception ex)
            {
                logger.LogError("Failed to get drive free space: " + ex.Message);
                return 0;
            }
        }

        public List<FileInfo> GetFilesToDelete(string folderPath, Regex regex, bool forceDelete = false)
        {
            try
            {
                var files = GetFiles(folderPath, regex);
                var filesToDelete = files.Where(file => forceDelete || file.CreationTime < DateTime.Now.AddDays(-35)).OrderBy(file => file.CreationTime).ToList();

                dispatcher.Invoke(() =>
                {
                    updateFolderStatistics(files.Sum(f => f.Length), folderPath);
                });

                return filesToDelete;
            }
            catch (Exception ex)
            {
                logger.LogError("Failed to get files to delete: " + ex.Message);
                return new List<FileInfo>();
            }
        }

        private IEnumerable<FileInfo> GetFiles(string folderPath, Regex regex)
        {
            var files = new List<FileInfo>();
            try
            {
                var directory = new DirectoryInfo(folderPath);
                files.AddRange(directory.GetFiles("*", SearchOption.AllDirectories)
                    .Where(f => f.Length > 500 * 1024 && regex.IsMatch(f.FullName))); // 500KB 이상의 파일 중 정규식과 일치하는 파일

            }
            catch (UnauthorizedAccessException ex)
            {
                logger.LogError("Access denied to folder: " + folderPath + " - " + ex.Message);
            }
            return files;
        }

        public async Task DeleteFilesAsync(List<FileInfo> files, string folderPath, bool forceDelete = false)
        {
            long currentFolderSize = files.Sum(f => f.Length);
            long freeSpace = GetDriveFreeSpace(folderPath.Split('\\')[0] + "\\");

            foreach (var file in files)
            {
                if (currentFolderSize <= MaxFolderSize && !forceDelete)
                {
                    logger.LogRecentActivity("현재 폴더 크기가 8GB 이하입니다.");
                    break;
                }

                if (freeSpace > MinimumFreeSpace && !forceDelete)
                {
                    logger.LogRecentActivity($"용량이 {freeSpace / (1024 * 1024 * 1024)} GB 남아서 삭제를 하지 않습니다.");
                    break;
                }

                try
                {
                    file.Delete();
                    currentFolderSize -= file.Length;
                    logger.LogDeletionActivity($"파일 삭제됨: {file.FullName}");
                    await Task.Delay(100); // 파일 삭제 시 딜레이 추가
                }
                catch (Exception ex)
                {
                    logger.LogError("Failed to delete file: " + ex.Message);
                }
            }

            updateFolderStatistics(currentFolderSize, folderPath);
        }

        public void UpdateFolderStatistics(string folderPath, string fileExtension)
        {
            try
            {
                var files = GetFiles(folderPath, new Regex($".*\\.{fileExtension}$"));
                long totalSize = files.Sum(f => f.Length);

                dispatcher.Invoke(() =>
                {
                    updateFolderStatistics(totalSize, folderPath);
                });
            }
            catch (Exception ex)
            {
                logger.LogError("Failed to update folder statistics: " + ex.Message);
            }
        }
    }
}
설명
MainWindow.xaml: 정규식 입력란과 폴더 경로 입력란을 추가하였습니다. 사용자가 최대 두 개의 정규식과 다섯 개의 폴더 경로를 입력할 수 있습니다.
MainWindow.xaml.cs: 사용자가 입력한 폴더 경로와 정규식을 저장하고, 시작 버튼을 누르면 해당 폴더 경로와 정규식을 사용하여 파일을 삭제합니다. 경로와 정규식은 설정 파일에 저장되며, 프로그램 시작 시 불러옵니다.
FileCleaner.cs: 지정된 정규식과 일치하는 파일을 찾고, 10개 이상의 파일이 일치하는 경우 해당 파일들을 삭제합니다.
이제 프로그램은 입력된 폴더 경로와 정규식을 사용하여 파일 삭제를 수행합니다