모를 표시하는 Form 클래스
메모 추가 및 관리를 담당하는 메인 Form 클래스
메모의 위치, 크기 및 내용을 파일에 저장하고 로드하는 기능
다음은 위 기능을 구현한 예제 코드입니다. 코드는 메모를 추가하고, 위치, 크기, 내용을 저장하며, 애플리케이션 시작 시 이전 상태를 복원하는 기능을 포함하고 있습니다.

MemoForm.cs:

csharp
Copy code
using System;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

public class MemoForm : Form
{
    private TextBox textBox;
    private string filePath;

    public MemoForm(string text, string filePath)
    {
        this.filePath = filePath;
        InitializeComponent();
        textBox.Text = text;
    }

    private void InitializeComponent()
    {
        this.textBox = new TextBox();
        this.SuspendLayout();

        // TextBox 설정
        this.textBox.Multiline = true;
        this.textBox.Dock = DockStyle.Fill;
        this.textBox.ScrollBars = ScrollBars.Vertical;

        // MemoForm 설정
        this.Controls.Add(this.textBox);
        this.TopMost = true; // 항상 최상단에 표시
        this.FormBorderStyle = FormBorderStyle.SizableToolWindow;
        this.ShowInTaskbar = false;
        this.Size = new Size(200, 200); // 기본 크기

        // 이벤트 핸들러
        this.FormClosing += MemoForm_FormClosing;
        this.ResumeLayout(false);
    }

    private void MemoForm_FormClosing(object sender, FormClosingEventArgs e)
    {
        SaveMemo(); // 메모 저장
    }

    public void SaveMemo()
    {
        File.WriteAllText(filePath, textBox.Text);
    }
}
MainForm.cs:

csharp
Copy code
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Windows.Forms;

public class MainForm : Form
{
    private List<MemoForm> memos = new List<MemoForm>();
    private Button addButton;

    public MainForm()
    {
        InitializeComponent();
        LoadMemos();
    }

    private void InitializeComponent()
    {
        this.addButton = new Button();
        this.SuspendLayout();

        // addButton 설정
        this.addButton.Text = "+";
        this.addButton.Dock = DockStyle.Bottom;
        this.addButton.Click += AddButton_Click;

        // MainForm 설정
        this.Controls.Add(this.addButton);
        this.Text = "메모 애플리케이션";
        this.ResumeLayout(false);
    }

    private void AddButton_Click(object sender, EventArgs e)
    {
        CreateNewMemo();
    }

    private void CreateNewMemo()
    {
        string memoFilePath = $"Memo_{DateTime.Now.Ticks}.txt"; // 고유한 파일 이름
        MemoForm memo = new MemoForm(string.Empty, memoFilePath);
        memo.Show();
        memos.Add(memo);
    }

    private void LoadMemos()
    {
        // 저장된 메모 파일이 있는 디렉터리
        string memosDirectory = Path.Combine(Application.StartupPath, "Memos");
        Directory.CreateDirectory(memosDirectory); // 디렉터리가 없으면 생성

        foreach (string memoFile in Directory.GetFiles(memosDirectory, "*.txt"))
        {
            string text = File.ReadAllText(memoFile);
            MemoForm memo = new MemoForm(text, memoFile);
            memo.Show();
            memos.Add(memo);
        }
    }
}

[STAThread]
static void Main()
{
    Application.EnableVisualStyles();
    Application.SetCompatibleTextRenderingDefault(false);
    Application.Run(new MainForm());
}
위의 MainForm은 메모를 추가하는 '+' 버튼을 가지며, MemoForm은 텍스트를 입력할 수 있는 텍스트 박스와 최상단에 표시되는 속성을 가집니다. 각 메모는 별도의 텍스트 파일로 저장되며, 애플리케이션 시작 시 로드됩니다.

이 코드를 프로젝트에 통합하고 실행하면 요구사항에 맞는 기능을 가진 메모 애플리케이션을 구현할 수 있습니다. 메모 파일들은 애플리케이션의