엑셀로 데이터를 내보내면서 라인별 현황과 에러값별 현황을 추가 시트에 차트로 그려주는 기능을 구현할 수 있습니다. 이 기능은 Pandas와 openpyxl 라이브러리를 사용하여 엑셀 데이터를 생성하고, openpyxl의 차트 기능을 활용해 시트를 추가하고 차트를 생성합니다.

Flask 서버 코드 수정 (차트 추가)
python
코드 복사
@app.route('/download_excel', methods=['GET'])
def download_excel():
    # 데이터 재생성 (현재 페이지의 데이터만 다운로드)
    conn = get_db_connection()
    query = """
        SELECT 
            linename AS '라인명',
            errN AS '에러번호',
            errValue AS '에러값',
            CONVERT(VARCHAR, Time1, 121) AS '시간'
        FROM View_PLCErrjoin
    """
    df = pd.read_sql(query, conn)
    conn.close()

    # 검색 조건 적용
    search_query = request.args.get("search", "").strip()
    if search_query:
        df = df[
            df["라인명"].str.contains(search_query, case=False, na=False) |
            df["에러번호"].astype(str).str.contains(search_query, case=False, na=False) |
            df["에러값"].astype(str).str.contains(search_query, case=False, na=False)
        ]

    # 페이지네이션 적용
    page = int(request.args.get("page", 1))
    per_page = 20
    df_page = df.iloc[(page - 1) * per_page : page * per_page]

    # 라인별 데이터 준비
    line_counts = df_page['라인명'].value_counts().reset_index()
    line_counts.columns = ['라인명', '발생수']

    # 에러값별 데이터 준비
    errvalue_counts = df_page['에러값'].value_counts().reset_index()
    errvalue_counts.columns = ['에러값', '발생수']

    # 엑셀 파일 생성
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        # 메인 데이터 시트 저장
        df_page.to_excel(writer, index=False, sheet_name='PLCErr')

        # 라인별 현황 저장
        line_counts.to_excel(writer, index=False, sheet_name='라인별 현황')

        # 에러값별 현황 저장
        errvalue_counts.to_excel(writer, index=False, sheet_name='에러값별 현황')

        # Workbook 및 차트 추가
        workbook = writer.book

        # 라인별 현황 차트
        sheet_line = workbook['라인별 현황']
        chart_line = openpyxl.chart.BarChart()
        chart_line.title = "라인별 발생수 현황"
        chart_line.y_axis.title = "발생수"
        chart_line.x_axis.title = "라인명"

        data_line = openpyxl.chart.Reference(sheet_line, min_col=2, min_row=1, max_col=2, max_row=line_counts.shape[0] + 1)
        labels_line = openpyxl.chart.Reference(sheet_line, min_col=1, min_row=2, max_row=line_counts.shape[0] + 1)
        chart_line.add_data(data_line, titles_from_data=True)
        chart_line.set_categories(labels_line)
        chart_line.style = 2
        sheet_line.add_chart(chart_line, "E5")

        # 에러값별 현황 차트
        sheet_errvalue = workbook['에러값별 현황']
        chart_errvalue = openpyxl.chart.BarChart()
        chart_errvalue.title = "에러값별 발생수 현황"
        chart_errvalue.y_axis.title = "발생수"
        chart_errvalue.x_axis.title = "에러값"

        data_errvalue = openpyxl.chart.Reference(sheet_errvalue, min_col=2, min_row=1, max_col=2, max_row=errvalue_counts.shape[0] + 1)
        labels_errvalue = openpyxl.chart.Reference(sheet_errvalue, min_col=1, min_row=2, max_row=errvalue_counts.shape[0] + 1)
        chart_errvalue.add_data(data_errvalue, titles_from_data=True)
        chart_errvalue.set_categories(labels_errvalue)
        chart_errvalue.style = 2
        sheet_errvalue.add_chart(chart_errvalue, "E5")

    # 응답 설정
    response = make_response(output.getvalue())
    response.headers['Content-Disposition'] = 'attachment; filename=PLCErr_with_charts.xlsx'
    response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    return response
주요 변경 사항 설명
라인별 및 에러값별 데이터 준비:

라인명과 에러값 기준으로 발생 수를 계산.
to_excel로 각각 라인별 현황과 에러값별 현황 시트에 저장.
차트 생성:

openpyxl.chart.BarChart를 사용하여 막대 차트를 생성.
Reference를 사용해 데이터 범위와 라벨 범위를 지정.
라인별 현황 차트:

라인명을 X축, 발생수를 Y축으로 설정.
차트를 "E5" 위치에 추가.
에러값별 현황 차트:

에러값을 X축, 발생수를 Y축으로 설정.
차트를 "E5" 위치에 추가.
파일 이름:

다운로드 파일 이름을 PLCErr_with_charts.xlsx로 지정.
테스트
엑셀 파일 다운로드:

엑셀 파일이 정상적으로 다운로드되는지 확인.
차트 확인:

"라인별 현황" 시트와 "에러값별 현황" 시트에 각각 차트가 추가되었는지 확인.
데이터 범위 확인:
