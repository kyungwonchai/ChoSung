// MGSPMonitorControl/Services/BrokerClientService.cs
using System;
using System.Collections.Generic; // List<T> 사용을 위해 추가!
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using MonitorControl.SharedModels; // 공용 MessageContract 사용
using Newtonsoft.Json;
using System.Configuration;

namespace MGSPMonitorControl.Services
{
    public interface IBrokerClientService
    {
        bool IsConnected { get; }
        bool IsAttemptingConnection { get; }
        Task<Tuple<bool, string>> ConnectAsync(bool isManualAttempt = false);
        Task DisconnectAsync(bool initiatedByUser = false);
        Task SendMessageAsync(BrokerMessage message);

        event Action<BrokerMessage> MessageReceived;
        event Action Connected;
        event Action<string> Disconnected;
        event Action<string> ConnectionFailed;
        event Action ConnectingAttempt;
    }

    public class BrokerClientService : IBrokerClientService, IDisposable
    {
        private TcpClient _tcpClient;
        private NetworkStream _networkStream;
        private StreamReader _streamReader;
        private StreamWriter _streamWriter;

        private CancellationTokenSource _mainCts;
        private Task _connectionMaintenanceTask;
        private Task _receiveLoopTask;

        private readonly object _sendLock = new object();
        private readonly object _connectLock = new object();
        private bool _isDisposed = false;
        private volatile bool _isConnectingFlag = false;
        private volatile bool _userRequestedDisconnect = false;

        private readonly string _brokerIp = "127.0.0.1";
        private readonly int _brokerPort = 9001;
        private readonly bool _configValid = false;

        // !!! 누락되었던 필드들 명시적으로 다시 선언 !!!
        private readonly TimeSpan _initialRetryDelay = TimeSpan.FromSeconds(5);
        private readonly TimeSpan _maxRetryDelay = TimeSpan.FromMinutes(1);
        private TimeSpan _currentRetryDelay;
        // !!! 필드 선언 완료 !!!


        public bool IsConnected => !_isDisposed && _tcpClient != null && _tcpClient.Connected &&
                                  _networkStream != null && _streamReader != null && _streamWriter != null;
        public bool IsAttemptingConnection => _isConnectingFlag;


        public event Action<BrokerMessage> MessageReceived;
        public event Action Connected;
        public event Action<string> Disconnected;
        public event Action<string> ConnectionFailed;
        public event Action ConnectingAttempt;

        public BrokerClientService()
        {
            SafeConsoleLog("BrokerClientService: Constructor - Initializing...");
            string brokerAddressSetting = null;
            bool configReadSuccess = false;
            try
            {
                var appSettings = ConfigurationManager.AppSettings;
                brokerAddressSetting = appSettings["BrokerAddress"];
                configReadSuccess = true;
            }
            catch (ConfigurationErrorsException confEx) { SafeConsoleLog($"[CRITICAL_CONFIG_ERROR] App.config load failed: {confEx.Message}. Using defaults."); }
            catch (Exception ex) { SafeConsoleLog($"[ERROR] Reading BrokerAddress from App.config: {ex.Message}. Using defaults."); }

            string addressToParse = (configReadSuccess && !string.IsNullOrWhiteSpace(brokerAddressSetting)) ? brokerAddressSetting : $"{_brokerIp}:{_brokerPort}";
            if (configReadSuccess && string.IsNullOrWhiteSpace(brokerAddressSetting)) SafeConsoleLog($"[CONFIG_WARN] 'BrokerAddress' empty. Using default: {addressToParse}");

            var parts = addressToParse.Split(':');
            if (parts.Length == 2 &&
                IPAddress.TryParse(parts[0].Trim(), out IPAddress ip) &&
                int.TryParse(parts[1].Trim(), System.Globalization.NumberStyles.None, System.Globalization.CultureInfo.InvariantCulture, out int port) &&
                port > 0 && port <= 65535)
            { _brokerIp = ip.ToString(); _brokerPort = port; _configValid = true; SafeConsoleLog($"BrokerClientService: Target Broker configured to {_brokerIp}:{_brokerPort}"); }
            else
            { SafeConsoleLog($"[CONFIG_ERROR] Invalid 'BrokerAddress' format: '{addressToParse}'. Using compiled default: {_brokerIp}:{_brokerPort}."); _configValid = true; }

            _currentRetryDelay = _initialRetryDelay; // 생성자에서 _currentRetryDelay 초기화

            if (!_isDisposed)
            {
                 _mainCts = new CancellationTokenSource();
                 _connectionMaintenanceTask = Task.Run(() => ConnectionMaintenanceLoopAsync(_mainCts.Token), _mainCts.Token);
            }
        }

        private async Task ConnectionMaintenanceLoopAsync(CancellationToken token)
        {
            SafeConsoleLog("BrokerClientService: ConnectionMaintenanceLoopAsync started.");
            while (!token.IsCancellationRequested && !_isDisposed)
            {
                bool performConnectAttempt;
                lock (_connectLock)
                {
                    performConnectAttempt = !IsConnected && !_isConnectingFlag && !_userRequestedDisconnect;
                    if (performConnectAttempt)
                    {
                        _isConnectingFlag = true;
                    }
                }

                if (performConnectAttempt)
                {
                    ConnectingAttempt?.Invoke();
                    SafeConsoleLog($"BrokerClientService: Attempting connection (Retry delay: {_currentRetryDelay.TotalSeconds}s)...");
                    Tuple<bool, string> connectResult = await ConnectInternalAsync(token);

                    lock (_connectLock) { _isConnectingFlag = false; }

                    if (!connectResult.Item1)
                    {
                        ConnectionFailed?.Invoke(connectResult.Item2);
                        if (token.IsCancellationRequested || _isDisposed || _userRequestedDisconnect) break;
                        SafeConsoleLog($"BrokerClientService: Auto-reconnect failed: {connectResult.Item2}. Next attempt in {_currentRetryDelay.TotalSeconds}s...");
                        try
                        {
                            await Task.Delay(_currentRetryDelay, token);
                            // 재시도 간격 증가 (최대치까지)
                            if (_currentRetryDelay < _maxRetryDelay) // _maxRetryDelay 사용
                            {
                                _currentRetryDelay = TimeSpan.FromSeconds(Math.Min(_maxRetryDelay.TotalSeconds, _currentRetryDelay.TotalSeconds * 1.5));
                            }
                        }
                        catch (OperationCanceledException) { break; }
                    }
                    else
                    {
                        _currentRetryDelay = _initialRetryDelay; // _initialRetryDelay 사용 (연결 성공 시)
                    }
                }
                else
                {
                    try { await Task.Delay(TimeSpan.FromSeconds(1), token); } catch (OperationCanceledException) { break; }
                }
            }
            SafeConsoleLog("BrokerClientService: ConnectionMaintenanceLoopAsync ended.");
        }

        public async Task<Tuple<bool, string>> ConnectAsync(bool isManualAttempt = false)
        {
            SafeConsoleLog($"BrokerClientService: ConnectAsync called (Manual: {isManualAttempt}). ConfigValid: {_configValid}, IsConnected: {IsConnected}, IsDisposed: {_isDisposed}");
            if (!_configValid)
            { string errMsg = "Broker configuration invalid (check App.config). Cannot connect."; SafeConsoleLog(errMsg); ConnectionFailed?.Invoke(errMsg); return Tuple.Create(false, errMsg); }
            if (IsConnected) { SafeConsoleLog("Already connected."); return Tuple.Create(true, "Already connected.");}
            if (_isDisposed) { string errMsg = "Service is disposed."; SafeConsoleLog(errMsg); return Tuple.Create(false, errMsg); }

            if (isManualAttempt) _userRequestedDisconnect = false;

            ConnectingAttempt?.Invoke();
            return await ConnectInternalAsync(_mainCts?.Token ?? CancellationToken.None);
        }

        private async Task<Tuple<bool, string>> ConnectInternalAsync(CancellationToken token)
        {
            if (IsConnected) return Tuple.Create(true, "Already connected internally.");
            if (_isDisposed) return Tuple.Create(false, "Object disposed.");

            lock (_connectLock)
            {
                if (_isConnectingFlag && !(Thread.CurrentThread.ManagedThreadId == _connectionMaintenanceTask?.Id && _connectionMaintenanceTask?.IsCompleted == false) )
                {
                     SafeConsoleLog("ConnectInternalAsync: Another connection attempt is in progress or maintenance loop is active.");
                     return Tuple.Create(false, "Internal connection attempt already in progress or maintenance loop active.");
                }
                // _isConnectingFlag는 호출부(ConnectionMaintenanceLoopAsync 또는 ConnectAsync)에서 이미 lock으로 관리됨
                // 여기서는 단순 할당 유지
            }

            string connectResultMessage = "Connection attempt failed.";
            CleanupCurrentConnectionOnly("Preparing for new connection attempt");

            _tcpClient = new TcpClient();
            SafeConsoleLog($"BrokerClientService: New TcpClient. Target: {_brokerIp}:{_brokerPort}");

            try
            {
                if (string.IsNullOrEmpty(_brokerIp)) throw new InvalidOperationException("Broker IP address is not configured or invalid (null/empty).");
                if (token.IsCancellationRequested) throw new OperationCanceledException("Connection attempt cancelled before start by outer token.", token);

                SafeConsoleLog($"BrokerClientService: Attempting _tcpClient.ConnectAsync to {_brokerIp}:{_brokerPort}...");

                using (var connectTimeoutCts = new CancellationTokenSource(TimeSpan.FromSeconds(7)))
                using (var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(token, connectTimeoutCts.Token))
                {
                    try
                    {
                        await _tcpClient.ConnectAsync(_brokerIp, _brokerPort).ConfigureAwait(false);
                        linkedCts.Token.ThrowIfCancellationRequested();
                    }
                    catch (OperationCanceledException) when (connectTimeoutCts.IsCancellationRequested && !token.IsCancellationRequested)
                    {
                        throw new TimeoutException($"Timeout connecting to Broker {_brokerIp}:{_brokerPort} after 7 seconds.");
                    }
                }

                if (_tcpClient.Connected)
                {
                    _networkStream = _tcpClient.GetStream();
                    if (_networkStream == null)
                    {
                        connectResultMessage = "CRITICAL: NetworkStream is null after TcpClient successfully connected.";
                        SafeConsoleLog($"[ERROR] BrokerClientService: {connectResultMessage}");
                        _tcpClient?.Close();
                        return Tuple.Create(false, connectResultMessage);
                    }

                    _streamReader = new StreamReader(_networkStream, Encoding.UTF8);
                    _streamWriter = new StreamWriter(_networkStream, Encoding.UTF8) { AutoFlush = true };

                    connectResultMessage = "Successfully connected. Streams initialized.";
                    SafeConsoleLog($"BrokerClientService: {connectResultMessage}");

                    Connected?.Invoke();

                    if (_receiveLoopTask == null || _receiveLoopTask.IsCompleted)
                    {
                         _receiveLoopTask = Task.Run(() => ReceiveMessagesAsync(token), token);
                    }
                    return Tuple.Create(true, connectResultMessage);
                }
                else throw new SocketException((int)SocketError.NotConnected);
            }
            catch (OperationCanceledException opEx) when (token.IsCancellationRequested) { connectResultMessage = $"Connection operation cancelled by main token: {opEx.Message}"; SafeConsoleLog(connectResultMessage); }
            catch (SocketException sockEx) { connectResultMessage = $"SocketException: {sockEx.Message} (Code: {sockEx.SocketErrorCode}). Broker: {_brokerIp}:{_brokerPort}"; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            catch (TimeoutException timeEx) { connectResultMessage = timeEx.Message; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            catch (InvalidOperationException invOpEx) { connectResultMessage = $"Invalid operation: {invOpEx.Message}"; SafeConsoleLog($"[ERROR] {connectResultMessage}");}
            catch (Exception ex) { connectResultMessage = $"General Connect Error: {ex.ToString()}"; SafeConsoleLog($"[ERROR] {connectResultMessage}"); }
            // finally 블록은 ConnectionMaintenanceLoopAsync에서 _isConnectingFlag를 관리하므로 여기서는 제거

            _tcpClient?.Close();
            _tcpClient = null;

            return Tuple.Create(false, connectResultMessage);
        }

        private async Task ReceiveMessagesAsync(CancellationToken token)
        {
            SafeConsoleLog($"BrokerClientService: ReceiveMessagesAsync loop started for connection {_tcpClient?.Client?.RemoteEndPoint}.");
            try
            {
                while (!token.IsCancellationRequested && IsConnected && _streamReader != null)
                {
                    string messageJson = null;
                    try
                    {
                        var readLineTask = _streamReader.ReadLineAsync();
                        var delayTask = Task.Delay(Timeout.Infinite, token);
                        var completedTask = await Task.WhenAny(readLineTask, delayTask).ConfigureAwait(false);
                        if (completedTask == readLineTask) messageJson = await readLineTask.ConfigureAwait(false);
                        else token.ThrowIfCancellationRequested();
                    }
                    catch (ObjectDisposedException) { SafeConsoleLog("StreamReader disposed in Receive."); break; }
                    catch (IOException) { SafeConsoleLog("IOException in receive (connection lost)."); break; }

                    if (messageJson == null) { SafeConsoleLog("Broker disconnected (ReadLine null)."); break; }
                    if (string.IsNullOrWhiteSpace(messageJson)) continue;

                    try
                    {
                        var message = JsonConvert.DeserializeObject<BrokerMessage>(messageJson);
                        if (message != null) { SafeConsoleLog($"Msg Rcvd: Type={message.Type}"); MessageReceived?.Invoke(message); }
                        else { SafeConsoleLog($"[WARN] Failed to deserialize: {messageJson}"); }
                    }
                    catch (JsonException jsonEx) { SafeConsoleLog($"[ERROR] JSON deserialize error: {jsonEx.Message}. Rcvd: {messageJson}"); }
                }
            }
            catch (OperationCanceledException) { SafeConsoleLog("ReceiveMessagesAsync cancelled."); }
            catch (Exception ex) { if(!token.IsCancellationRequested && !_isDisposed) SafeConsoleLog($"[ERROR] Unexpected error in ReceiveMessagesAsync: {ex.ToString()}"); }
            finally
            {
                SafeConsoleLog("BrokerClientService: ReceiveMessagesAsync loop ended.");
                if (!_isDisposed && !token.IsCancellationRequested && !_userRequestedDisconnect)
                {
                    CleanupCurrentConnectionOnly("Receive loop ended or connection lost");
                    Disconnected?.Invoke("Receive loop ended or connection lost.");
                }
            }
        }

        private void CleanupCurrentConnectionOnly(string reason)
        {
            SafeConsoleLog($"BrokerClientService: Cleaning up CURRENT connection resources. Reason: {reason}");
            lock(_sendLock) { try { _streamWriter?.Dispose(); } catch {} _streamWriter = null; }
            try { _streamReader?.Dispose(); } catch {} _streamReader = null;
            try { _networkStream?.Dispose(); } catch {} _networkStream = null;
            try { _tcpClient?.Close(); } catch {} _tcpClient = null;
            SafeConsoleLog("BrokerClientService: Current connection resources released.");
        }

        public async Task SendMessageAsync(BrokerMessage message)
        {
            if (!IsConnected || _streamWriter == null || _isDisposed || (_mainCts != null && _mainCts.IsCancellationRequested))
            { SafeConsoleLog($"Cannot send. Invalid state. Type: {message.Type}"); return; }

            string messageJson = "";
            try
            {
                messageJson = JsonConvert.SerializeObject(message);
                bool sentSuccessfully = false;
                lock (_sendLock)
                {
                    if (IsConnected && _streamWriter != null && !_isDisposed && (_mainCts == null || !_mainCts.IsCancellationRequested))
                    { _streamWriter.WriteLine(messageJson); sentSuccessfully = true; }
                }
                if (sentSuccessfully) { SafeConsoleLog($"Msg sent: {message.Type}, CorrId: {message.CorrelationId}");}
                else { SafeConsoleLog($"[WARN] Send cancelled/not possible for {message.Type} in lock."); }
            }
            catch (ObjectDisposedException) { SafeConsoleLog($"[WARN] Send {message.Type} on disposed object."); HandleSendErrorInternal("Stream/Writer disposed."); }
            catch (IOException ioEx) { SafeConsoleLog($"[ERROR] IOException sending {message.Type}: {ioEx.Message}"); HandleSendErrorInternal($"IO Error: {ioEx.Message}"); }
            catch (JsonException jsonEx) { SafeConsoleLog($"[ERROR] Error serializing {message.Type}: {jsonEx.Message}."); }
            catch (Exception ex) { SafeConsoleLog($"[ERROR] Error sending {message.Type}: {ex.ToString()}"); HandleSendErrorInternal($"General Send Error: {ex.Message}"); }
        }

        private void HandleSendErrorInternal(string reason)
        {
            if (!_isDisposed) { CleanupCurrentConnectionOnly($"Send Error: {reason}"); Disconnected?.Invoke($"Send failed: {reason}"); }
        }

        public async Task DisconnectAsync(bool initiatedByUser = true)
        {
            SafeConsoleLog($"BrokerClientService: DisconnectAsync called. User: {initiatedByUser}");
            if (_isDisposed) return;
            if (initiatedByUser) _userRequestedDisconnect = true;

            // _mainCts.Cancel()을 여기서 직접 호출하면 자동 재연결 루프가 영구히 멈춤.
            // 사용자가 명시적으로 끊었을 때는 _userRequestedDisconnect 플래그로 자동 재연결을 막음.
            // 현재 연결만 끊고, 메인 루프는 사용자가 다시 Connect를 누르거나 앱 종료 시까지 대기.

            Task currentReceiveLoop = _receiveLoopTask;
            CleanupCurrentConnectionOnly(initiatedByUser ? "User requested disconnect" : "System requested disconnect");
            Disconnected?.Invoke(initiatedByUser ? "User requested disconnect" : "System requested disconnect");

            if (currentReceiveLoop != null && !currentReceiveLoop.IsCompleted) { try { await Task.WhenAny(currentReceiveLoop, Task.Delay(200)); } catch {}}
        }

        public void Dispose()
        {
            if (_isDisposed) return; _isDisposed = true;
            SafeConsoleLog("BrokerClientService: Disposing...");
            _userRequestedDisconnect = true;

            _mainCts?.Cancel();

            Task mainLoop = _connectionMaintenanceTask;
            Task receiveLoop = _receiveLoopTask;

            List<Task> tasksToWait = new List<Task>();
            if (mainLoop != null && !mainLoop.IsCompleted && mainLoop.Status != TaskStatus.Canceled && mainLoop.Status != TaskStatus.Faulted) tasksToWait.Add(mainLoop);
            if (receiveLoop != null && !receiveLoop.IsCompleted && receiveLoop.Status != TaskStatus.Canceled && receiveLoop.Status != TaskStatus.Faulted) tasksToWait.Add(receiveLoop);

            if (tasksToWait.Any())
            {
                SafeConsoleLog($"BrokerClientService: Waiting for {tasksToWait.Count} background task(s) on Dispose...");
                try { Task.WaitAll(tasksToWait.ToArray(), TimeSpan.FromSeconds(1)); }
                catch (AggregateException ae) { foreach(var exLoop in ae.Flatten().InnerExceptions) if(!(exLoop is OperationCanceledException)) SafeConsoleLog($"Error waiting task on dispose: {exLoop.Message}"); }
                catch (OperationCanceledException) { SafeConsoleLog("Tasks cancelled during dispose wait.");}
                catch (Exception ex) { SafeConsoleLog($"Error waiting tasks on dispose: {ex.Message}");}
            }

            CleanupCurrentConnectionOnly("Dispose called"); // 현재 연결 리소스 정리

            _mainCts?.Dispose(); _mainCts = null;

            SafeConsoleLog("BrokerClientService: Disposed.");
            GC.SuppressFinalize(this);
        }
        private void SafeConsoleLog(string message) => Console.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] {message}");
    }
}