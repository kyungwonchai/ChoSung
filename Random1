네, 좋습니다! 이제 제어 UI 프로그램(MGSPMonitorControl)의 전체 코드를 제공해 드리겠습니다.

이 UI 프로그램은 다음 주요 기능을 목표로 합니다:

데이터베이스(MonitorControlDB) 직접 연동:
사용자 인증 및 권한 관리.
제어 대상 Agent 목록 및 각 Agent의 상세 설정(이름, 접속 정보, 제어 방식 - 직접 또는 게이트웨이 경유)을 관리(추가/수정/삭제).
Agent 제어 명령 실행 후 그 결과를 로그로 DB에 기록.
중계 프로그램(MGSPBrokerService)과 TCP 소켓 통신:
중계 프로그램에 클라이언트로 접속.
DB에서 가져온 Agent 제어 정보(대상 IP, 명령 등)를 중계 프로그램으로 전송.
중계 프로그램으로부터 모든 Agent들의 실시간 상태(온라인/오프라인, 모니터 켜짐/꺼짐 등)를 브로드캐스트 받아 UI에 표시.
중계 프로그램으로부터 자신이 요청한 명령의 최종 결과를 수신.
중계 프로그램으로부터 서버 자체의 상태 및 로그를 수신하여 표시.
사용자 인터페이스 (WPF):
로그인 창.
메인 제어판: Agent 목록, 각 Agent의 상세 정보 및 실시간 상태 표시, Agent 추가/수정/삭제 버튼, 모니터 켜기/끄기 버튼, 중계 서버 상태 및 로그 표시 영역.
프로젝트 생성:

Visual Studio에서 새 프로젝트를 만듭니다.
템플릿: "WPF 앱(.NET Framework)"
프로젝트 이름: MGSPMonitorControl
프레임워크: ".NET Framework 4.5"
필요한 NuGet 패키지 설치:

솔루션 탐색기에서 MGSPMonitorControl 프로젝트 마우스 우클릭 -> "NuGet 패키지 관리..." -> "찾아보기" 탭에서 다음 패키지들을 검색하여 설치합니다.

Newtonsoft.Json: 메시지 및 데이터 직렬화/역직렬화.
Install-Package Newtonsoft.Json
(선택적이지만 권장) CommunityToolkit.Mvvm: MVVM 패턴 구현을 용이하게 해주는 라이브러리. 여기서는 기본적인 MVVM 스타일을 따르되, 이 패키지를 필수로 사용하지 않고 INotifyPropertyChanged를 직접 구현하는 방식으로도 설명할 수 있습니다. 일단은 이 패키지를 사용하여 ViewModel을 구성하는 예시를 포함하겠습니다. 만약 사용하지 않으려면 해당 부분 코드를 수동으로 INotifyPropertyChanged 구현으로 변경하면 됩니다.
Install-Package CommunityToolkit.Mvvm
System.Data.SqlClient: MS SQL Server에 직접 연결하기 위한 ADO.NET 프로바이더입니다. .NET Framework에 기본 포함되어 있지만, NuGet으로 명시적으로 관리할 수도 있습니다. 여기서는 기본 참조를 사용한다고 가정합니다. 만약 Entity Framework Core 등을 사용한다면 관련 패키지(Microsoft.EntityFrameworkCore.SqlServer 등)를 설치해야 합니다. 여기서는 ADO.NET 직접 사용 예시를 들겠습니다.
MGSPMonitorControl 코드 구성:

1. Models/ 폴더

1.1. Models/MessageContract.cs (중계 프로그램, Agent와 동일한 파일 사용)
이 파일은 MGSPBrokerService 프로젝트의 Models/MessageContract.cs 와 완전히 동일한 내용이어야 합니다. 메시지 규약이 일치해야 통신이 가능합니다. 이전 답변에서 제공된 MGSPBrokerService의 MessageContract.cs 코드를 그대로 가져와서 이 프로젝트에 추가합니다.

1.2. Models/User.cs

C#

// MGSPMonitorControl/Models/User.cs
namespace MGSPMonitorControl.Models
{
    public class User
    {
        public int UserId { get; set; }
        public string Username { get; set; }
        // PasswordHash, Salt 등은 UI 모델에서 직접 다루기보다 서비스 계층에서 처리
        public bool CanManageAgents { get; set; }
        public bool CanControlPower { get; set; }
        public bool IsActive { get; set; }
    }
}
1.3. Models/ManagedAgent.cs (DB 테이블 매핑 및 UI 바인딩용)

C#

// MGSPMonitorControl/Models/ManagedAgent.cs
using System;
using System.ComponentModel; // INotifyPropertyChanged
using System.Runtime.CompilerServices; // CallerMemberName

namespace MGSPMonitorControl.Models
{
    public class ManagedAgent : INotifyPropertyChanged
    {
        private Guid _agentGuid;
        public Guid AgentGuid { get => _agentGuid; set { _agentGuid = value; OnPropertyChanged(); } }

        private string _agentIdProvidedByApp; // Agent 프로그램이 보고하는 고유 ID
        public string AgentIdProvidedByApp { get => _agentIdProvidedByApp; set { _agentIdProvidedByApp = value; OnPropertyChanged(); } }

        private string _agentName;
        public string AgentName { get => _agentName; set { _agentName = value; OnPropertyChanged(); } }

        private string _description;
        public string Description { get => _description; set { _description = value; OnPropertyChanged(); } }

        private string _controlType = "Direct"; // "Direct" 또는 "Gatewayed"
        public string ControlType { get => _controlType; set { _controlType = value; OnPropertyChanged(); } }

        private string _primaryIpAddress;
        public string PrimaryIpAddress { get => _primaryIpAddress; set { _primaryIpAddress = value; OnPropertyChanged(); } }

        private int _primaryPort;
        public int PrimaryPort { get => _primaryPort; set { _primaryPort = value; OnPropertyChanged(); } }

        private string _gatewayAgentIpAddress;
        public string GatewayAgentIpAddress { get => _gatewayAgentIpAddress; set { _gatewayAgentIpAddress = value; OnPropertyChanged(); } }

        private int? _gatewayAgentPort;
        public int? GatewayAgentPort { get => _gatewayAgentPort; set { _gatewayAgentPort = value; OnPropertyChanged(); } }
        
        private bool _isEnabled = true;
        public bool IsEnabled { get => _isEnabled; set { _isEnabled = value; OnPropertyChanged(); } }

        // --- 실시간 상태 정보 (Broker로부터 수신) ---
        private bool _isOnline; // Broker에 연결되어 있는지
        public bool IsOnline { get => _isOnline; set { _isOnline = value; OnPropertyChanged(); } }

        private string _currentMonitorStatus = "Unknown";
        public string CurrentMonitorStatus { get => _currentMonitorStatus; set { _currentMonitorStatus = value; OnPropertyChanged(); } }

        private DateTime _lastHeartbeatUtc;
        public DateTime LastHeartbeatUtc { get => _lastHeartbeatUtc; set { _lastHeartbeatUtc = value; OnPropertyChanged(); } }
        
        private string _lastStatusMessage; // Agent의 마지막 상태 메시지 (Broker가 전달)
        public string LastStatusMessage { get => _lastStatusMessage; set { _lastStatusMessage = value; OnPropertyChanged(); } }


        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
1.4. Models/ControlActionLog.cs (DB 테이블 매핑용)

C#

// MGSPMonitorControl/Models/ControlActionLog.cs
using System;

namespace MGSPMonitorControl.Models
{
    public class ControlActionLog
    {
        public long LogId { get; set; }
        public Guid AgentGuid { get; set; }
        public string ActionType { get; set; }
        public string ActionParameters { get; set; }
        public int RequestedByUserId { get; set; }
        public DateTime RequestTimestamp { get; set; }
        public DateTime? RelayReceivedTimestamp { get; set; }
        public DateTime? AgentReceivedTimestamp { get; set; }
        public DateTime? ExecutionCompletedTimestamp { get; set; }
        public string FinalStatus { get; set; }
        public string ResultMessage { get; set; }
        public string ExecutedViaGatewayAgentId { get; set; }
    }
}
1.5. Models/ServerStatusInfo.cs (중계 서버 상태 DTO - Broker와 동일 파일 사용)
MGSPBrokerService 프로젝트의 Models/ServerStatusInfo.cs 와 완전히 동일한 내용이어야 합니다. 이전 답변에서 제공된 코드를 가져와 이 프로젝트에 추가합니다.

2. DataAccess/ 폴더 (DB 연동 로직)

2.1. DataAccess/DatabaseService.cs

C#

// MGSPMonitorControl/DataAccess/DatabaseService.cs
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient; // System.Data.SqlClient NuGet 또는 프레임워크 참조
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using MGSPMonitorControl.Models;

namespace MGSPMonitorControl.DataAccess
{
    public class DatabaseService
    {
        // !!! 보안 주의: 연결 문자열은 App.config 또는 다른 보안된 방식으로 관리해야 합니다 !!!
        // 여기서는 예시로 코드 내에 작성. 실제 운영 시에는 반드시 외부 설정으로 빼세요.
        private readonly string _connectionString = "Server=YOUR_DB_SERVER_ADDRESS;Database=MonitorControlDB;User ID=YOUR_DB_USER;Password=YOUR_DB_PASSWORD;";
        // 예: "Server=(localdb)\\MSSQLLocalDB;Database=MonitorControlDB;Integrated Security=True;" (Windows 인증)

        public DatabaseService(string connectionString = null) // 외부에서 연결 문자열 주입 가능
        {
            if (!string.IsNullOrWhiteSpace(connectionString))
            {
                _connectionString = connectionString;
            }
            // TODO: App.config에서 _connectionString을 읽어오도록 수정하는 것이 좋음
            // 예: _connectionString = ConfigurationManager.ConnectionStrings["MonitorControlDB"].ConnectionString;
            // 이를 위해서는 프로젝트에 System.Configuration.dll 참조 추가 및 App.config 파일 설정 필요.
        }

        #region User Management

        // 비밀번호 해싱 (SHA256 예시 - 실제로는 bcrypt, Argon2 등 권장)
        private Tuple<string, string> HashPassword(string password)
        {
            using (var rng = new RNGCryptoServiceProvider())
            {
                byte[] saltBytes = new byte[16];
                rng.GetBytes(saltBytes);
                string salt = Convert.ToBase64String(saltBytes);

                using (var sha256 = SHA256.Create())
                {
                    byte[] passwordBytes = Encoding.UTF8.GetBytes(password + salt);
                    byte[] hashBytes = sha256.ComputeHash(passwordBytes);
                    string hash = Convert.ToBase64String(hashBytes);
                    return Tuple.Create(hash, salt);
                }
            }
        }

        private bool VerifyPassword(string password, string storedHash, string storedSalt)
        {
            using (var sha256 = SHA256.Create())
            {
                byte[] passwordBytes = Encoding.UTF8.GetBytes(password + storedSalt);
                byte[] hashBytes = sha256.ComputeHash(passwordBytes);
                string computedHash = Convert.ToBase64String(hashBytes);
                return computedHash == storedHash;
            }
        }

        public async Task<User> AuthenticateUserAsync(string username, string password)
        {
            User user = null;
            string query = "SELECT UserId, Username, PasswordHash, Salt, CanManageAgents, CanControlPower, IsActive FROM Users WHERE Username = @Username AND IsActive = 1;";

            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@Username", username);
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        string storedHash = reader["PasswordHash"].ToString();
                        string storedSalt = reader["Salt"]?.ToString(); // Nullable

                        if (VerifyPassword(password, storedHash, storedSalt))
                        {
                            user = new User
                            {
                                UserId = (int)reader["UserId"],
                                Username = reader["Username"].ToString(),
                                CanManageAgents = (bool)reader["CanManageAgents"],
                                CanControlPower = (bool)reader["CanControlPower"],
                                IsActive = (bool)reader["IsActive"]
                            };
                            // 마지막 로그인 시간 업데이트 (비동기 백그라운드로 실행 가능)
                            UpdateLastLoginAsync(user.UserId).ConfigureAwait(false);
                        }
                    }
                }
            }
            return user;
        }

        private async Task UpdateLastLoginAsync(int userId)
        {
            string query = "UPDATE Users SET LastLoginDate = GETUTCDATE() WHERE UserId = @UserId;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@UserId", userId);
                await connection.OpenAsync();
                await command.ExecuteNonQueryAsync();
            }
        }

        // (선택적) 사용자 추가/관리 메서드들...
        // public async Task<bool> CreateUserAsync(string username, string password, bool canManage, bool canControl)
        // {
        //     var (hash, salt) = HashPassword(password);
        //     // INSERT 쿼리 실행
        // }


        #endregion

        #region ManagedAgents CRUD

        public async Task<List<ManagedAgent>> GetManagedAgentsAsync()
        {
            var agents = new List<ManagedAgent>();
            string query = @"SELECT AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, 
                                    PrimaryIpAddress, PrimaryPort, GatewayAgentIpAddress, GatewayAgentPort, IsEnabled 
                             FROM ManagedAgents ORDER BY AgentName;";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                await connection.OpenAsync();
                using (var reader = await command.ExecuteReaderAsync())
                {
                    while (await reader.ReadAsync())
                    {
                        agents.Add(new ManagedAgent
                        {
                            AgentGuid = (Guid)reader["AgentGuid"],
                            AgentIdProvidedByApp = reader["AgentIdProvidedByApp"].ToString(),
                            AgentName = reader["AgentName"].ToString(),
                            Description = reader["Description"]?.ToString(),
                            ControlType = reader["ControlType"].ToString(),
                            PrimaryIpAddress = reader["PrimaryIpAddress"].ToString(),
                            PrimaryPort = (int)reader["PrimaryPort"],
                            GatewayAgentIpAddress = reader["GatewayAgentIpAddress"]?.ToString(),
                            GatewayAgentPort = reader["GatewayAgentPort"] as int?,
                            IsEnabled = (bool)reader["IsEnabled"],
                            // 실시간 상태는 Broker로부터 받으므로 여기서는 로드하지 않음
                            IsOnline = false, // 기본값
                            CurrentMonitorStatus = "Unknown" // 기본값
                        });
                    }
                }
            }
            return agents;
        }

        public async Task<bool> AddManagedAgentAsync(ManagedAgent agent, int userId)
        {
            string query = @"INSERT INTO ManagedAgents 
                                (AgentGuid, AgentIdProvidedByApp, AgentName, Description, ControlType, PrimaryIpAddress, PrimaryPort, 
                                 GatewayAgentIpAddress, GatewayAgentPort, IsEnabled, LastModifiedDate, LastModifiedByUserId)
                             VALUES 
                                (@AgentGuid, @AgentIdProvidedByApp, @AgentName, @Description, @ControlType, @PrimaryIpAddress, @PrimaryPort,
                                 @GatewayAgentIpAddress, @GatewayAgentPort, @IsEnabled, GETUTCDATE(), @UserId);";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid == Guid.Empty ? Guid.NewGuid() : agent.AgentGuid);
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@UserId", userId);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> UpdateManagedAgentAsync(ManagedAgent agent, int userId)
        {
            string query = @"UPDATE ManagedAgents SET 
                                AgentIdProvidedByApp = @AgentIdProvidedByApp, AgentName = @AgentName, Description = @Description, 
                                ControlType = @ControlType, PrimaryIpAddress = @PrimaryIpAddress, PrimaryPort = @PrimaryPort,
                                GatewayAgentIpAddress = @GatewayAgentIpAddress, GatewayAgentPort = @GatewayAgentPort, 
                                IsEnabled = @IsEnabled, LastModifiedDate = GETUTCDATE(), LastModifiedByUserId = @UserId
                             WHERE AgentGuid = @AgentGuid;";

            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentIdProvidedByApp", agent.AgentIdProvidedByApp);
                command.Parameters.AddWithValue("@AgentName", agent.AgentName);
                command.Parameters.AddWithValue("@Description", (object)agent.Description ?? DBNull.Value);
                command.Parameters.AddWithValue("@ControlType", agent.ControlType);
                command.Parameters.AddWithValue("@PrimaryIpAddress", agent.PrimaryIpAddress);
                command.Parameters.AddWithValue("@PrimaryPort", agent.PrimaryPort);
                command.Parameters.AddWithValue("@GatewayAgentIpAddress", (object)agent.GatewayAgentIpAddress ?? DBNull.Value);
                command.Parameters.AddWithValue("@GatewayAgentPort", (object)agent.GatewayAgentPort ?? DBNull.Value);
                command.Parameters.AddWithValue("@IsEnabled", agent.IsEnabled);
                command.Parameters.AddWithValue("@UserId", userId);
                command.Parameters.AddWithValue("@AgentGuid", agent.AgentGuid);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        public async Task<bool> DeleteManagedAgentAsync(Guid agentGuid)
        {
            // ControlActionLogs 테이블의 FK 제약조건이 ON DELETE CASCADE로 설정되어 있어야 함.
            // 그렇지 않다면 로그를 먼저 삭제하거나, FK를 수정해야 함.
            string query = "DELETE FROM ManagedAgents WHERE AgentGuid = @AgentGuid;";
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", agentGuid);
                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }

        #endregion

        #region ControlActionLogs

        public async Task<bool> LogControlActionAsync(ControlActionLog logEntry)
        {
            string query = @"INSERT INTO ControlActionLogs 
                                (AgentGuid, ActionType, ActionParameters, RequestedByUserId, RequestTimestamp, 
                                 RelayReceivedTimestamp, AgentReceivedTimestamp, ExecutionCompletedTimestamp, 
                                 FinalStatus, ResultMessage, ExecutedViaGatewayAgentId)
                             VALUES 
                                (@AgentGuid, @ActionType, @ActionParameters, @RequestedByUserId, @RequestTimestamp,
                                 @RelayReceivedTimestamp, @AgentReceivedTimestamp, @ExecutionCompletedTimestamp,
                                 @FinalStatus, @ResultMessage, @ExecutedViaGatewayAgentId);";
            
            using (var connection = new SqlConnection(_connectionString))
            using (var command = new SqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@AgentGuid", logEntry.AgentGuid);
                command.Parameters.AddWithValue("@ActionType", logEntry.ActionType);
                command.Parameters.AddWithValue("@ActionParameters", (object)logEntry.ActionParameters ?? DBNull.Value);
                command.Parameters.AddWithValue("@RequestedByUserId", logEntry.RequestedByUserId);
                command.Parameters.AddWithValue("@RequestTimestamp", logEntry.RequestTimestamp);
                command.Parameters.AddWithValue("@RelayReceivedTimestamp", (object)logEntry.RelayReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@AgentReceivedTimestamp", (object)logEntry.AgentReceivedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutionCompletedTimestamp", (object)logEntry.ExecutionCompletedTimestamp ?? DBNull.Value);
                command.Parameters.AddWithValue("@FinalStatus", logEntry.FinalStatus);
                command.Parameters.AddWithValue("@ResultMessage", (object)logEntry.ResultMessage ?? DBNull.Value);
                command.Parameters.AddWithValue("@ExecutedViaGatewayAgentId", (object)logEntry.ExecutedViaGatewayAgentId ?? DBNull.Value);

                await connection.OpenAsync();
                return await command.ExecuteNonQueryAsync() > 0;
            }
        }
        
        // (선택적) 로그 조회 메서드
        public async Task<List<ControlActionLog>> GetRecentControlLogsAsync(int count = 100)
        {
            var logs = new List<ControlActionLog>();
            // RecentControlLogsView 사용 또는 직접 쿼리
            string query = $"SELECT TOP {count} LogId, AgentGuid, ActionType, RequestedByUserId, RequestTimestamp, FinalStatus, ResultMessage FROM ControlActionLogs ORDER BY RequestTimestamp DESC;";
            // ... 구현 ...
            return logs;
        }


        #endregion
    }
}
DatabaseService.cs 중요 참고 사항:

연결 문자열: 코드 상단의 _connectionString 변수를 실제 DB 서버 환경에 맞게 반드시 수정해야 합니다. 현재는 예시 값으로 되어 있습니다. App.config (또는 appsettings.json - .NET Core의 경우) 파일에 저장하고 읽어오는 것이 훨씬 안전하고 관리하기 좋습니다.
비밀번호 해싱: HashPassword와 VerifyPassword 메서드는 SHA256 기반의 간단한 예시입니다. 실제 운영 환경에서는 bcrypt, scrypt, Argon2와 같은 최신 적응형 해싱 알고리즘을 사용하고, 사용자별로 고유한 솔트(salt)를 적용하는 것이 보안상 매우 중요합니다.
SQL Injection 방지: 모든 쿼리는 파라미터화된 쿼리(@Username, @AgentGuid 등)를 사용하여 SQL Injection 공격을 방지하도록 작성되었습니다.
비동기 처리: 모든 DB 작업은 async/await를 사용하여 비동기적으로 처리되도록 하여 UI의 반응성을 유지합니다.