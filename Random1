evExpress 22.2의 WPF GridControl을 사용하여 특정 행을 선택한 다음, 그 행의 데이터를 기반으로 MS SQL Server 2014에 데이터를 추가하고 테이블을 갱신하는 과정을 구현하기 위해 다음과 같은 단계를 따를 수 있습니다.

행 선택 이벤트 핸들러 설정: 사용자가 행을 선택하면 이를 감지할 수 있는 이벤트 핸들러를 설정합니다.
행 추가 버튼 클릭 이벤트 핸들러: 버튼 클릭 이벤트를 처리하여 선택된 행의 데이터를 읽고 데이터베이스에 추가합니다.
데이터베이스에 데이터 추가: 선택된 데이터를 MS SQL Server에 INSERT 명령을 통해 추가합니다.
GridControl 데이터 갱신: 데이터베이스에 새로운 데이터가 추가된 후, GridControl을 갱신하여 최신 데이터를 반영합니다.
아래는 C#과 WPF, DevExpress GridControl을 사용한 간단한 예제 코드입니다. 이 코드는 DevExpress 22.2, SQL Server 2014, Entity Framework 6 (또는 ADO.NET)을 사용하여 구현할 수 있습니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Data.SqlClient;
using System.Windows;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();
            this.gridControl.ItemsSource = FetchData(); // 데이터베이스에서 데이터를 불러와 바인딩
        }

        private void btnAddRow_Click(object sender, RoutedEventArgs e)
        {
            var selectedRowHandle = this.gridView.GetSelectedRowHandles()[0];
            var selectedRow = this.gridView.GetRow(selectedRowHandle) as DataRow;
            if (selectedRow != null)
            {
                InsertData(selectedRow);
                RefreshGrid();
            }
        }

        private void InsertData(DataRow dataRow)
        {
            string connectionString = "your_connection_string";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                string query = "INSERT INTO YourTable (NameA, NameB, NameC, NameD, Number) VALUES (@NameA, @NameB, @NameC, @NameD, @Number)";
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@NameA", dataRow["NameA"]);
                    command.Parameters.AddWithValue("@NameB", dataRow["NameB"]);
                    command.Parameters.AddWithValue("@NameC", dataRow["NameC"]);
                    command.Parameters.AddWithValue("@NameD", dataRow["NameD"]);
                    command.Parameters.AddWithValue("@Number", dataRow["Number"]);
                    
                    connection.Open();
                    command.ExecuteNonQuery();
                    connection.Close();
                }
            }
        }

        private void RefreshGrid()
        {
            this.gridControl.ItemsSource = FetchData(); // 데이터베이스에서 데이터를 다시 불러와 갱신
        }

        private DataTable FetchData()
        {
            // 데이터베이스에서 데이터를 불러오는 로직 구현
            return new DataTable();
        }
    }
}
주요 고려사항
연결 문자열: connectionString 변수를 올바르게 설정해야 합니다.
테이블 및 컬럼 명: 쿼리에서 YourTable, NameA, NameB 등의 이름을 실제 데이터베이스의 테이블 및 컬럼 이름으로 변경해야 합니다.
예외 처리: 데이터베이스 작업 중 예외가 발생할 수 있으므로 적절한 예외 처리 로직을 추가하는 것이 좋습니다.
데이터 바인딩: FetchData 메소드는 데이터베이스에서 데이터를 불러오는 실제 로직을 구현해야 합니다. Entity Framework나 ADO.NET을 사용할 수 있습니다.
이 코드는 선택된 행의 데이터를 SQL 데이터베이스에 추가하고, 그리드를 갱신하는 기본적인 흐름을 보여줍니다. 실제 사용 시에는 데이터 모델, 연결 설정 등을 자신의 환경에 맞게 조정해야 합니다.