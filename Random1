조로, 먼저 추가된 데이터가 먼저 제거됩니다. 다음은 Queue<string> 타입을 사용하여 값을 추가하고, 먼저 넣은 값을 빼면서 제거하는 WPF 예시 코드입니다.

1. ViewModel (MVVM 패턴 사용)
먼저 ViewModel에서 Queue<string>을 관리하는 코드입니다:

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;

public class MainViewModel : INotifyPropertyChanged
{
    // Queue 정의
    private Queue<string> _stringQueue = new Queue<string>();

    // 화면에 바인딩할 리스트(Queue의 상태를 보여줌)
    private ObservableCollection<string> _queueList = new ObservableCollection<string>();
    public ObservableCollection<string> QueueList
    {
        get { return _queueList; }
        set
        {
            _queueList = value;
            OnPropertyChanged();
        }
    }

    // INotifyPropertyChanged 구현
    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    // Queue에 값을 추가하는 메서드
    public void AddToQueue(string value)
    {
        _stringQueue.Enqueue(value); // Queue에 값 추가
        QueueList.Add(value); // ObservableCollection에 값 추가
    }

    // Queue에서 값을 제거하는 메서드
    public void RemoveFromQueue()
    {
        if (_stringQueue.Count > 0)
        {
            string removedValue = _stringQueue.Dequeue(); // Queue에서 값 제거
            QueueList.Remove(removedValue); // ObservableCollection에서도 값 제거
        }
    }
}
2. XAML (View)
다음은 Queue에 값을 추가하고 제거하는 버튼과 값을 표시하는 리스트의 UI 코드입니다.

xml
코드 복사
<Window x:Class="QueueExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Queue Example" Height="250" Width="400">
    <Grid>
        <StackPanel>
            <!-- Queue 리스트를 보여주는 ListBox -->
            <ListBox ItemsSource="{Binding QueueList}" Height="150" Margin="10" />

            <!-- 텍스트 박스와 값 추가 버튼 -->
            <TextBox x:Name="inputTextBox" Width="200" Height="30" Margin="10" />
            <Button Content="Add to Queue" Width="100" Height="30" 
                    Command="{Binding AddCommand}" 
                    CommandParameter="{Binding Text, ElementName=inputTextBox}" 
                    Margin="10" />

            <!-- 값 제거 버튼 -->
            <Button Content="Remove from Queue" Width="150" Height="30"
                    Command="{Binding RemoveCommand}" Margin="10" />
        </StackPanel>
    </Grid>
</Window>
3. Command 설정 (Optional)
Command를 사용하여 버튼 클릭을 처리하려면 ICommand를 추가할 수 있습니다:

csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private Action<object> execute;
    private Func<object, bool> canExecute;

    public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
    {
        this.execute = execute;
        this.canExecute = canExecute;
    }

    public event EventHandler CanExecuteChanged;

    public bool CanExecute(object parameter)
    {
        return canExecute == null || canExecute(parameter);
    }

    public void Execute(object parameter)
    {
        execute(parameter);
    }
}

public class MainViewModel : INotifyPropertyChanged
{
    // Queue 관련 코드...

    public ICommand AddCommand { get; }
    public ICommand RemoveCommand { get; }

    public MainViewModel()
    {
        AddCommand = new RelayCommand(param => AddToQueue(param as string));
        RemoveCommand = new RelayCommand(param => RemoveFromQueue());
    }

    // 나머지 코드...
}
이 코드는 Queue<string>을 사용하여 값 추가 및 제거 작업을 처리합니다. WPF UI에서 ListBox는 Queue에 들어있는 값을 실시간으로 보여주며, 버튼을 눌러서 값을 추가하거나 제거할 수 있습니다.