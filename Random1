xpress의 GridControl을 사용하여 MS SQL Server 2014에서 두 개의 다른 결과 세트를 반환하는 하나의 저장 프로시저를 사용하여 데이터를 표시하는 것은 꽤 일반적인 시나리오입니다. 이를 위해, 당신은 아래와 같은 단계를 따라야 합니다:

MS SQL Server에서 데이터를 반환하는 저장 프로시저를 작성합니다.
C#에서 이 저장 프로시저를 호출하고 두 개의 결과 세트를 가져옵니다.
이 결과 세트를 각각의 GridControl에 바인딩합니다.
1. 저장 프로시저 작성
sql
Copy code
CREATE PROCEDURE GetTwoResultSets
AS
BEGIN
    -- 첫 번째 결과 세트
    SELECT * FROM Table1;

    -- 두 번째 결과 세트
    SELECT * FROM Table2;
END;
2. C#에서 저장 프로시저 호출
C#에서는 SqlConnection과 SqlCommand를 사용하여 저장 프로시저를 호출할 수 있습니다. SqlDataReader를 사용하여 두 결과 세트를 읽을 수 있습니다.

csharp
Copy code
using System.Data.SqlClient;

// ...

string connectionString = "Your Connection String Here";
using (SqlConnection con = new SqlConnection(connectionString))
{
    using (SqlCommand cmd = new SqlCommand("GetTwoResultSets", con))
    {
        cmd.CommandType = CommandType.StoredProcedure;
        con.Open();
        using (SqlDataReader reader = cmd.ExecuteReader())
        {
            // 첫 번째 결과 세트 읽기
            DataTable dataTable1 = new DataTable();
            dataTable1.Load(reader);

            // 두 번째 결과 세트로 이동
            reader.NextResult();

            // 두 번째 결과 세트 읽기
            DataTable dataTable2 = new DataTable();
            dataTable2.Load(reader);

            // GridControl에 데이터 바인딩
            gridControl1.DataSource = dataTable1;
            gridControl2.DataSource = dataTable2;
        }
    }
}
이 코드는 두 개의 DataTable을 생성하여 각각 첫 번째와 두 번째 결과 세트를 담고, 이를 각각의 GridControl에 바인딩합니다. connectionString 변수는 데이터베이스 연결 정보로 채워야 합니다.

주의 사항
위 코드는 예시일 뿐이며, 실제 구현에서는 데이터베이스 연결 문자열, 테이블 이름, 그리고 필요한 로직에 맞게 수정해야 합니다.
데이터베이스 연결을 항상 안전하게 관리하고, 예외 처리를 적절히 수행하는 것이 중요합니다.
DevExpress의 GridControl 설정에 따라 추가 설정이 필요할 수 있습니다 (예: 컬럼 설정, 레이아웃 설정 등).




