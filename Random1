니다. 아래는 수정된 XAML 및 ViewModel 코드입니다.

1. XAML (View)
xml
코드 복사
<Window x:Class="ComboBoxExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:ComboBoxExample"
        Title="ComboBox MVVM Example" Height="200" Width="300">
    <Window.DataContext>
        <vm:MainViewModel />
    </Window.DataContext>
    <Grid>
        <ComboBox ItemsSource="{Binding EjectOptItems}"
                  DisplayMemberPath="Value"
                  SelectedItem="{Binding SelectedItem, Mode=TwoWay}"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Width="200"/>
    </Grid>
</Window>
2. ViewModel (MainViewModel.cs)
csharp
코드 복사
using System.Collections.Generic;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows;

namespace ComboBoxExample
{
    public class MainViewModel : INotifyPropertyChanged
    {
        // 콤보박스에 바인딩할 아이템 (EjectOptItems로 이름 변경)
        private List<KeyValuePair<string, string>> _ejectOptItems;
        public List<KeyValuePair<string, string>> EjectOptItems
        {
            get => _ejectOptItems;
            set
            {
                _ejectOptItems = value;
                OnPropertyChanged();
            }
        }

        // 선택된 항목
        private KeyValuePair<string, string>? _selectedItem;
        public KeyValuePair<string, string>? SelectedItem
        {
            get => _selectedItem;
            set
            {
                _selectedItem = value;
                OnPropertyChanged();

                // 선택된 항목이 변경되었을 때 메시지 박스를 표시
                if (_selectedItem.HasValue)
                {
                    MessageBox.Show($"Key: {_selectedItem.Value.Key}, Value: {_selectedItem.Value.Value}", "선택된 항목");
                }
            }
        }

        // 생성자
        public MainViewModel()
        {
            // 딕셔너리를 생성하여 EjectOptItems에 바인딩
            EjectOptItems = new List<KeyValuePair<string, string>>
            {
                new KeyValuePair<string, string>("Key1", "Value1"),
                new KeyValuePair<string, string>("Key2", "Value2"),
                new KeyValuePair<string, string>("Key3", "Value3")
            };
        }

        // INotifyPropertyChanged 구현
        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
수정된 사항
변수 이름 변경:

Items를 EjectOptItems로 변경했습니다.
XAML의 ItemsSource와 ViewModel의 속성 이름도 변경되었습니다.
바인딩 경로:

XAML에서 ItemsSource="{Binding Items}"를 ItemsSource="{Binding EjectOptItems}"로 수정했습니다.
나머지 구조 유지:

MVVM 구조는 그대로 유지하며, 이름 변경 외에 로직은 동일합니다.
실행 결과
ComboBox에는 Value1, Value2, Value3가 표시됩니다.