알겠습니다! PLC에서 받은 데이터 중 특정 자리의 숫자만 사용하여 해당 숫자에 해당하는 센서의 상태를 업데이트하는 방식으로 UpdateSensorStates 함수를 수정하겠습니다. 이 경우, 각 숫자를 개별적으로 처리하고, 해당 숫자에 대해 지정된 센서의 상태를 업데이트할 수 있습니다.

함수 설명:
입력: PLC에서 받은 데이터(data) 중 특정 숫자(num)와 해당 숫자가 위치한 인덱스(position)를 받습니다.
처리: 받은 숫자의 4비트 2진수 표현을 상하위를 바꿉니다.
출력: 상하위가 바뀐 2진수에 따라 특정 센서의 상태를 업데이트합니다.
구현 코드:
csharp
코드 복사
public class ComPort : INotifyPropertyChanged
{
    public ObservableCollection<SensorModel> Sensors { get; set; }
    public event PropertyChangedEventHandler PropertyChanged;

    public ComPort()
    {
        Sensors = new ObservableCollection<SensorModel>();
        InitializeSensors();
    }

    private void InitializeSensors()
    {
        // 예: 100개의 센서 초기화
        for (int i = 0; i < 100; i++)
        {
            Sensors.Add(new SensorModel
            {
                SensorName = $"Sensor {i + 1}",
                IsDetected = false
            });
        }
    }

    // 특정 숫자와 해당 숫자의 위치를 받아 센서 상태를 업데이트하는 메서드
    public void UpdateSensorStateByPosition(string data, int position)
    {
        if (position < 0 || position >= data.Length)
        {
            throw new ArgumentOutOfRangeException(nameof(position), "Position is out of the range of the data string.");
        }

        char numChar = data[position];  // 위치에 해당하는 숫자
        if (char.IsDigit(numChar))
        {
            int num = numChar - '0';  // 숫자로 변환
            string binary = Convert.ToString(num, 2).PadLeft(4, '0');  // 4비트 2진수 변환
            binary = SwapBits(binary);  // 상하위 바꿈

            // 센서 상태 업데이트
            for (int i = 0; i < binary.Length; i++)
            {
                bool isDetected = binary[i] == '1';
                int sensorIndex = 4 * position + i;  // 센서 인덱스 계산
                if (sensorIndex < Sensors.Count)
                {
                    Sensors[sensorIndex].IsDetected = isDetected;
                }
            }

            OnPropertyChanged(nameof(Sensors));
        }
    }

    // 상하위 바꾸기 함수
    private string SwapBits(string binary)
    {
        // 첫 2비트와 마지막 2비트 교환
        return binary.Substring(2, 2) + binary.Substring(0, 2);
    }

    protected void OnPropertyChanged(string name)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
상세 설명:
InitializeSensors 메서드: 100개의 센서를 초기화합니다. 실제 센서 수에 따라 조정이 필요합니다.
UpdateSensorStateByPosition 메서드: 지정된 위치의 숫자를 받아 그 숫자를 4비트 2진수로 변환하고, 상하위를 바꾼 후, 해당 2진수에 따라 센서의 상태를 업데이트합니다.
SwapBits 메서드: 4비트 2진수 문자열의 상하위 2비트를 바꿉니다.
사용 예시:
csharp
코드 복사
ComPort comPort = new ComPort();
comPort.UpdateSensorStateByPosition("218400400020", 2);  // "8"의 위치 (0부터 시작)
이 방식은 PLC에서 받은 데이터 중 지정된 위치의 숫자만을 사용하여 센서의 상태를 업데이트합니다. 각 숫자는 그 위치에 따라 특정 센서들에 대응되며, 이를 통해 센서의 상태를 개별적으로 제어할 수 있습니다.