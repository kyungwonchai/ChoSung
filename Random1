기능을 구현하기 위해 프로그램이 이미 실행 중인지 확인하는 로직을 추가하고, 트레이 아이콘 기능을 구현하며, 프로그램을 트레이로 최소화하고, 트레이 아이콘의 우클릭 메뉴를 통해 열기와 닫기 기능을 제공하겠습니다. 또한, 프로그램을 닫을 때 확인 메시지를 표시하고, 확인하면 종료하도록 구현합니다.

먼저 필요한 파일들을 생성하고, 각 파일의 기능을 분리하여 작성하겠습니다.

App.xaml
xml
코드 복사
<Application x:Class="SMDFileCleaner.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml"
             Startup="Application_Startup">
    <Application.Resources>
         
    </Application.Resources>
</Application>
App.xaml.cs
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Windows;

namespace SMDFileCleaner
{
    public partial class App : Application
    {
        private static Mutex mutex = new Mutex(true, "{d36b58f8-f1b5-4c63-a8c7-19a2d3d3f21d}");

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);
            if (!mutex.WaitOne(TimeSpan.Zero, true))
            {
                ActivateRunningInstance();
                Application.Current.Shutdown();
            }
        }

        private void ActivateRunningInstance()
        {
            var currentProcess = Process.GetCurrentProcess();
            var runningProcess = Process.GetProcessesByName(currentProcess.ProcessName)
                .FirstOrDefault(p => p.Id != currentProcess.Id);

            if (runningProcess != null)
            {
                ShowWindow(runningProcess.MainWindowHandle, 1); // 1: Restore the window
                SetForegroundWindow(runningProcess.MainWindowHandle);
            }
        }

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);

        [System.Runtime.InteropServices.DllImport("user32.dll")]
        private static extern bool SetForegroundWindow(IntPtr hWnd);
    }
}
MainWindow.xaml
xml
코드 복사
<Window x:Class="SMDFileCleaner.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="SMDFileCleaner" Height="450" Width="800"
        Closing="Window_Closing">
    <Grid>
        <!-- Your existing UI elements here -->
    </Grid>
</Window>
MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public partial class MainWindow : Window
    {
        private NotifyIcon notifyIcon;

        public MainWindow()
        {
            InitializeComponent();
            InitializeTrayIcon();
        }

        private void InitializeTrayIcon()
        {
            notifyIcon = new NotifyIcon
            {
                Icon = System.Drawing.SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
            };

            notifyIcon.ContextMenuStrip.Items.Add("열기", null, Open_Click);
            notifyIcon.ContextMenuStrip.Items.Add("닫기", null, Close_Click);
            notifyIcon.DoubleClick += Open_Click;
        }

        private void Open_Click(object sender, EventArgs e)
        {
            Show();
            WindowState = WindowState.Normal;
        }

        private void Close_Click(object sender, EventArgs e)
        {
            if (System.Windows.MessageBox.Show("프로그램을 종료하시겠습니까?", "종료 확인", MessageBoxButton.YesNo) == MessageBoxResult.Yes)
            {
                notifyIcon.Dispose();
                Application.Current.Shutdown();
            }
        }

        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            Hide();
            notifyIcon.BalloonTipText = "프로그램이 트레이로 최소화되었습니다.";
            notifyIcon.ShowBalloonTip(3000);
        }

        private void btnExit_Click(object sender, RoutedEventArgs e)
        {
            Close_Click(sender, e);
        }
    }
}
SettingsManager.cs (예시, 변경 없음)
csharp
코드 복사
using System;
using System.IO;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace SMDFileCleaner
{
    [Serializable]
    public class Settings
    {
        public string FolderPath { get; set; }
        public string FileExtension { get; set; }
        public string DriveName { get; set; }
    }

    public class SettingsManager
    {
        private readonly string settingsFilePath;

        public SettingsManager(string settingsDirectory)
        {
            settingsFilePath = Path.Combine(settingsDirectory, "settings.bin");
        }

        public void SaveSettings(Settings settings)
        {
            IFormatter formatter = new BinaryFormatter();
            using (Stream stream = new FileStream(settingsFilePath, FileMode.Create, FileAccess.Write))
            {
                formatter.Serialize(stream, settings);
            }
        }

        public Settings LoadSettings()
        {
            if (!File.Exists(settingsFilePath))
            {
                return null;
            }

            IFormatter formatter = new BinaryFormatter();
            using (Stream stream = new FileStream(settingsFilePath, FileMode.Open, FileAccess.Read))
            {
                return (Settings)formatter.Deserialize(stream);
            }
        }
    }
}
FileCleaner.cs
(변경 없음, 이전 코드 사용)

Logger.cs (예시, 변경 없음)
csharp
코드 복사
using System;
using System.IO;
using System.Windows.Threading;

namespace SMDFileCleaner
{
    public class Logger
    {
        private readonly string logDirectory;
        private readonly Dispatcher dispatcher;
        private readonly Action<string> logRecentActivity;
        private readonly Action<string> logDeletionActivity;

        public Logger(string logDirectory, Dispatcher dispatcher, Action<string> logRecentActivity, Action<string> logDeletionActivity)
        {
            this.logDirectory = logDirectory;
            this.dispatcher = dispatcher;
            this.logRecentActivity = logRecentActivity;
            this.logDeletionActivity = logDeletionActivity;
        }

        public void LogError(string message)
        {
            Log("Error", message);
        }

        public void LogRecentActivity(string message)
        {
            Log("RecentActivity", message);
            dispatcher.Invoke(() => logRecentActivity(message));
        }

        public void LogDeletionActivity(string message)
        {
            Log("DeletionActivity", message);
            dispatcher.Invoke(() => logDeletionActivity(message));
        }

        private void Log(string logType, string message)
        {
            string logFilePath = Path.Combine(logDirectory, $"{logType}_{DateTime.Now:yyyyMMdd}.log");
            Directory.CreateDirectory(logDirectory);

            using (StreamWriter writer = new StreamWriter(logFilePath, true))
            {
                writer.WriteLine($"{DateTime.Now:yyyy-MM-dd HH:mm:ss} - {message}");
            }
        }
    }
}
위의 코드는 다음 기능을 포함합니다:

프로그램이 이미 실행 중인지 확인하고, 이미 실행 중이면 기존 인스턴스를 활성화합니다.
트레이 아이콘을 추가하고, 트레이 아이콘의 우클릭 메뉴를 통해 열기와 닫기 기능을 제공합니다.
프로그램을 닫을 때 확인 메시지를 표시하고, 확인하면 종료합니다.
프로그램을 트레이로 최소화합니다.
프로그램이 닫히지 않고 트레이로 최소화될 때 메시지 박스를 표시합니다.
이제 이 코드를 사용하여 프로그램을 실행하면, 트레이 아