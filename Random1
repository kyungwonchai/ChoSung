전체 코드를 구조화하여 ViewModel에서 에러 메시지 팝업을 관리하고, 외부 클래스에서 이벤트를 발동시켜 메시지를 추가하는 방식으로 구현하겠습니다.

요구 사항을 반영하여 다음과 같은 기능을 구현합니다:

MainViewModel: 에러 메시지를 관리하고, 팝업을 표시하거나 숨기는 로직을 포함합니다. AddErrorMessage와 ClearErrorMessages 메서드를 통해 메시지를 추가 및 초기화할 수 있습니다.
외부 클래스 (SampleErrorTrigger): MainViewModel에 에러 메시지를 추가할 때 호출할 수 있는 클래스로, 이벤트를 통해 에러를 발동시킵니다.
디버그 로그: 팝업을 띄우거나 닫을 때마다 로그를 기록합니다.
MainViewModel (에러 메시지 관리 및 팝업 제어)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;
using System.Windows.Media;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private int _progress;
        private Timer _mainTimer; // 5초 타이머
        private Timer _delayTimer; // 3초 지연 타이머
        private bool _isWarningVisible;
        private WarningWindow _warningWindow; // 경고창 인스턴스 저장
        private ObservableCollection<ErrorMessage> _errorMessages; // 에러 메시지 목록

        public int Progress
        {
            get => _progress;
            set
            {
                if (_progress != value)
                {
                    _progress = value;
                    OnPropertyChanged();

                    // Progress가 1 이상이면 3초 후 창 표시 여부 확인
                    if (_progress >= 1 && !_isWarningVisible)
                    {
                        StartDelayTimer();
                    }
                    // Progress가 0이면 경고창을 닫음
                    else if (_progress == 0)
                    {
                        CloseWarningWindow();
                    }
                }
            }
        }

        public MainViewModel()
        {
            _mainTimer = new Timer(5000); // 5초 타이머 설정
            _mainTimer.Elapsed += MainTimerElapsed;

            _delayTimer = new Timer(3000); // 3초 지연 타이머 설정
            _delayTimer.Elapsed += DelayTimerElapsed;
            _delayTimer.AutoReset = false; // 한 번만 실행되도록 설정

            _errorMessages = new ObservableCollection<ErrorMessage>();
        }

        private void StartDelayTimer()
        {
            if (_progress >= 1)
            {
                _delayTimer.Start();
            }
        }

        private void DelayTimerElapsed(object sender, ElapsedEventArgs e)
        {
            // 3초 후에도 Progress가 1 이상일 경우 경고창 표시
            if (_progress >= 1 && !_isWarningVisible)
            {
                ShowWarningWindow();
            }
        }

        public void AddErrorMessage(string message)
        {
            // 이미 존재하는 메시지인지 확인하여 중복 추가 방지
            if (_errorMessages.Any(m => m.Content == message)) return;

            // 색상 설정: 순서대로 Yellow와 Aqua 번갈아가며 색상을 설정
            Color color = _errorMessages.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessages.Add(new ErrorMessage(message, new SolidColorBrush(color)));

            // 창이 열려 있는 상태면 새 메시지 업데이트
            if (_isWarningVisible && _warningWindow != null)
            {
                _warningWindow.UpdateMessages(_errorMessages);
            }
            else
            {
                ShowWarningWindow();
            }

            Debug.WriteLine($"[DEBUG] Error added: {message}");
        }

        private void ShowWarningWindow()
        {
            if (_isWarningVisible) return;

            Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindow = new WarningWindow(_errorMessages); // 메시지 목록 전달
                _warningWindow.Topmost = true;
                _warningWindow.Show();

                _warningWindow.Closed += (sender, e) =>
                {
                    _isWarningVisible = false;
                    _mainTimer.Start(); // 창을 닫으면 5초 타이머 시작
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                _isWarningVisible = true;
                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindow != null)
                {
                    _warningWindow.Close();
                    _warningWindow = null; // 경고창 인스턴스를 초기화
                    _mainTimer.Stop(); // 창을 닫을 때 타이머 중지
                    _isWarningVisible = false;
                    _errorMessages.Clear(); // 모든 에러 메시지 삭제
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        private void MainTimerElapsed(object sender, ElapsedEventArgs e)
        {
            _mainTimer.Stop();
            if (_progress >= 1)
            {
                ShowWarningWindow();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessage
    {
        public string Content { get; }
        public SolidColorBrush Color { get; }

        public ErrorMessage(string content, SolidColorBrush color)
        {
            Content = content;
            Color = color;
        }
    }
}
AddErrorMessage(string message): 외부 클래스에서 호출하여 에러 메시지를 추가합니다.
디버그 로그: 팝업이 뜨거나 닫힐 때마다 Debug.WriteLine으로 로그를 남깁니다.
WarningWindow.xaml
경고창에서 여러 에러 메시지를 표시할 수 있도록 ItemsControl을 설정합니다.

xml
코드 복사
<Window x:Class="YourNamespace.WarningWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Warning" Height="500" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="#AAFF0000"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen" 
        MouseDown="Window_MouseDown">
    <Grid>
        <ItemsControl ItemsSource="{Binding ErrorMessages}">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Content}"
                               FontSize="15"
                               Foreground="{Binding Color}"
                               TextAlignment="Center"
                               VerticalAlignment="Center"
                               HorizontalAlignment="Center"/>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>
WarningWindow.xaml.cs
에러 메시지들을 받아서 표시할 수 있도록 구현합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows;

namespace YourNamespace
{
    public partial class WarningWindow : Window
    {
        public ObservableCollection<ErrorMessage> ErrorMessages { get; set; } = new ObservableCollection<ErrorMessage>();

        public WarningWindow(ObservableCollection<ErrorMessage> errorMessages)
        {
            InitializeComponent();
            ErrorMessages = errorMessages;
            DataContext = this; // DataContext를 설정하여 바인딩 가능하게 함
        }

        public void UpdateMessages(ObservableCollection<ErrorMessage> errorMessages)
        {
            ErrorMessages.Clear();
            foreach (var message in errorMessages)
            {
                ErrorMessages.Add(message);
            }
        }

        private void Window_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            this.Close(); // 클릭하면 창 닫기
        }
    }
}
외부 클래스에서 이벤트를 통해 에러 메시지 추가
외부 클래스에서 MainViewModel의 AddErrorMessage 메서드를 호출하여 에러 메시지를 추가하는 구조입니다.

csharp
코드 복사
namespace YourNamespace
{
    public class SampleErrorTrigger
    {
        private readonly MainViewModel _viewModel;

        public SampleErrorTrigger(MainViewModel viewModel)
        {
            _viewModel = viewModel;
        }

        public void TriggerError()
        {
            // 예시로 에러 메시지를 추가합니다.
            _viewModel.AddErrorMessage("Critical Error!\nSystem temperature too high.\nImmediate cooling required.");
            _viewModel.AddErrorMessage("Warning!\nNetwork connection lost.\nAttempting to reconnect...");
        }
    }
}
MainWindow에서 에러 트리거 호출
MainWindow에서 외부 클래스 SampleErrorTrigger를 생성하고 호출하여 에러 메시지가 나타나는지 확인합니다.

csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private SampleErrorTrigger _errorTrigger;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;
            _errorTrigger = new SampleErrorTrigger(_viewModel);
        }

        private void OnAddErrorMessageClicked(object sender, RoutedEventArgs e)
        {
            _errorTrigger.TriggerError();
        }
    }
}
이제 MainWindow의 버튼 클릭 시 SampleErrorTrigger에서 MainViewModel의 AddErrorMessage를 호출하여 에러 메시지가 추가되며, 조건에 맞을 경우 경고창이 표시됩니다.










