기서는 MySQL 5.7 데이터베이스와 Kotlin을 이용한 Android 앱을 개발하는 전체적인 과정을 설명하겠습니다. 이 작업은 크게 세 가지 부분으로 나눌 수 있습니다:

데이터베이스 설정 및 쿼리 작성
Android 앱에서 UI 구성
QR 코드 인식을 통한 데이터 삽입 및 색상 표시
1. 데이터베이스 설정 및 쿼리 작성
먼저, 데이터베이스 쪽 설정을 해야 합니다. smd.management_mobile_checksheet 테이블에서 depart와 part를 그룹화한 데이터를 가져오는 쿼리를 작성합니다.

sql
코드 복사
-- depart와 part를 그룹화하여 가져오기
SELECT depart, part FROM smd.management_mobile_checksheet GROUP BY depart, part;
선택한 depart와 part에 따라 district, at, modelnumber, check_time을 가져오는 쿼리입니다.

sql
코드 복사
-- 조건에 맞는 데이터 가져오기
SELECT district, at, modelnumber, check_time 
FROM smd.management_mobile_checksheet 
WHERE depart = ? AND part = ?;
2. Android 앱에서 UI 구성
Gradle 설정
먼저, 필요한 라이브러리를 build.gradle 파일에 추가합니다.

gradle
코드 복사
dependencies {
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'mysql:mysql-connector-java:8.0.26'
}
XML 레이아웃 파일 (activity_main.xml)
xml
코드 복사
<LinearLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <Spinner
        android:id="@+id/spinner_depart_part"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <RecyclerView
        android:id="@+id/recyclerView"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"/>

    <Button
        android:id="@+id/button_scan"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:text="Scan QR Code"/>

</LinearLayout>
Kotlin 코드 (MainActivity.kt)
kotlin
코드 복사
import android.os.Bundle
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.Spinner
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.zxing.integration.android.IntentIntegrator
import java.sql.DriverManager
import java.text.SimpleDateFormat
import java.util.*
import kotlin.collections.ArrayList

class MainActivity : AppCompatActivity() {

    private lateinit var spinner: Spinner
    private lateinit var recyclerView: RecyclerView
    private lateinit var buttonScan: Button
    private lateinit var adapter: DataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        spinner = findViewById(R.id.spinner_depart_part)
        recyclerView = findViewById(R.id.recyclerView)
        buttonScan = findViewById(R.id.button_scan)

        recyclerView.layoutManager = LinearLayoutManager(this)
        adapter = DataAdapter(ArrayList())
        recyclerView.adapter = adapter

        loadDepartPartData()

        buttonScan.setOnClickListener {
            IntentIntegrator(this).initiateScan()
        }
    }

    private fun loadDepartPartData() {
        // 데이터베이스에서 depart와 part를 그룹화하여 가져오는 쿼리 실행
        val url = "jdbc:mysql://your-database-url:3306/your-database"
        val user = "your-username"
        val password = "your-password"
        val connection = DriverManager.getConnection(url, user, password)

        val statement = connection.createStatement()
        val resultSet = statement.executeQuery("SELECT depart, part FROM smd.management_mobile_checksheet GROUP BY depart, part")

        val departPartList = ArrayList<String>()
        while (resultSet.next()) {
            val depart = resultSet.getString("depart")
            val part = resultSet.getString("part")
            departPartList.add("$depart - $part")
        }

        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, departPartList)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        spinner.adapter = adapter
    }

    private fun loadDataBasedOnSelection(depart: String, part: String) {
        // 데이터베이스에서 선택된 depart와 part에 따라 데이터 가져오기
        val url = "jdbc:mysql://your-database-url:3306/your-database"
        val user = "your-username"
        val password = "your-password"
        val connection = DriverManager.getConnection(url, user, password)

        val preparedStatement = connection.prepareStatement(
            "SELECT district, at, modelnumber, check_time FROM smd.management_mobile_checksheet WHERE depart = ? AND part = ?"
        )
        preparedStatement.setString(1, depart)
        preparedStatement.setString(2, part)

        val resultSet = preparedStatement.executeQuery()
        val dataList = ArrayList<Data>()

        while (resultSet.next()) {
            val district = resultSet.getString("district")
            val at = resultSet.getString("at")
            val modelNumber = resultSet.getString("modelnumber")
            val checkTime = resultSet.getString("check_time")
            dataList.add(Data(district, at, modelNumber, checkTime))
        }

        adapter.updateData(dataList)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        val result = IntentIntegrator.parseActivityResult(requestCode, resultCode, data)
        if (result != null) {
            if (result.contents != null) {
                val scannedModelNumber = result.contents
                // 데이터베이스에 데이터 삽입
                val url = "jdbc:mysql://your-database-url:3306/your-database"
                val user = "your-username"
                val password = "your-password"
                val connection = DriverManager.getConnection(url, user, password)

                val currentTime = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())
                val insertStatement = connection.prepareStatement(
                    "INSERT INTO smd.management_mobile_checksheet (modelnumber, check_time) VALUES (?, ?)"
                )
                insertStatement.setString(1, scannedModelNumber)
                insertStatement.setString(2, currentTime)
                insertStatement.executeUpdate()

                // UI 업데이트
                val selectedDepartPart = spinner.selectedItem.toString()
                val (depart, part) = selectedDepartPart.split(" - ")
                loadDataBasedOnSelection(depart, part)
            }
        } else {
            super.onActivityResult(requestCode, resultCode, data)
        }
    }
}
3. 데이터 클래스 및 어댑터
데이터 클래스 (Data.kt)
kotlin
코드 복사
data class Data(
    val district: String,
    val at: String,
    val modelNumber: String,
    val checkTime: String
)
RecyclerView 어댑터 (DataAdapter.kt)
kotlin
코드 복사
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.RecyclerView

class DataAdapter(private var dataList: ArrayList<Data>) : RecyclerView.Adapter<DataAdapter.ViewHolder>() {

    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {
        val district: TextView = view.findViewById(R.id.text_district)
        val at: TextView = view.findViewById(R.id.text_at)
        val modelNumber: TextView = view.findViewById(R.id.text_model_number)
        val checkTime: TextView = view.findViewById(R.id.text_check_time)
    }

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_data, parent, false)
        return ViewHolder(view)
    }

    override fun onBindViewHolder(holder: ViewHolder, position: Int) {
        val data = dataList[position]
        holder.district.text = data.district
        holder.at.text = data.at
        holder.modelNumber.text = data.modelNumber
        holder.checkTime.text = data.checkTime

        // 교대 시간에 따른 색상 변경 로직 추가
        val currentTime = System.currentTimeMillis()
        val checkTime = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).parse(data.checkTime)?.time ?: 0
        if (currentTime - checkTime < 8 * 60 * 60 * 1000) {
            holder.itemView.setBackgroundColor(Color.GREEN)
        } else {
            holder.itemView.setBackgroundColor(Color.WHITE)
        }
    }

    override fun getItemCount(): Int = dataList.size

    fun updateData(newDataList: ArrayList<Data>) {
        dataList = newDataList
        notifyDataSetChanged()
    }
}
이 코드는 기본적인 UI 및 데이터베이스 연동을 포함합니다. 추가적으로 QR 코드 스캔 기능과 교대 시간에 따른 색상 변경 기능을 구현했습니다. 이를 통해 사용자는 특정 교대 시간에 읽은 데이터와 최신 데이터를 쉽게 확인할 수 있습니다. 각 코드 부분을 필요에 따라 수정하여 원하는 기능을 추가할 수 있습니