WPF 애플리케이션에서 마우스 움직임을 감지하고, 움직임이 확인된 상태에서 1시간이 경과되면 파일을 처리하는 방식으로 구현할 수 있습니다. 이 경우 타이머와 마우스 이벤트를 사용하여 사용자가 활동 중인지를 확인하고 작업을 수행할 수 있습니다.

아래는 구현 코드입니다:

1. WPF 프로젝트 코드
MainWindow.xaml
UI는 최소화하여 기본 구조만 제공합니다.

xml
코드 복사
<Window x:Class="MouseActivityChecker.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Mouse Activity Checker" Height="200" Width="400">
    <Grid>
        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" 
                   Text="활성 상태 감지 중..." FontSize="20"/>
    </Grid>
</Window>
MainWindow.xaml.cs
마우스 활동을 감지하고, 1시간마다 파일을 업데이트하는 로직을 포함합니다.

csharp
코드 복사
using System;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;

namespace MouseActivityChecker
{
    public partial class MainWindow : Window
    {
        private DateTime _lastMouseActivity; // 마지막 마우스 활동 시간
        private readonly string _filePath = @"F:\Time\Time.txt"; // 파일 경로
        private DispatcherTimer _activityCheckTimer; // 타이머

        public MainWindow()
        {
            InitializeComponent();
            InitializeActivityChecker();
        }

        private void InitializeActivityChecker()
        {
            // 마지막 마우스 활동 시간 초기화
            _lastMouseActivity = DateTime.Now;

            // 마우스 이벤트 감지
            this.MouseMove += OnMouseMove;

            // 타이머 설정 (1초마다 활동 확인)
            _activityCheckTimer = new DispatcherTimer
            {
                Interval = TimeSpan.FromSeconds(1)
            };
            _activityCheckTimer.Tick += ActivityCheckTimer_Tick;
            _activityCheckTimer.Start();
        }

        private void OnMouseMove(object sender, MouseEventArgs e)
        {
            // 마우스 움직임 감지 시, 마지막 활동 시간 업데이트
            _lastMouseActivity = DateTime.Now;
        }

        private async void ActivityCheckTimer_Tick(object sender, EventArgs e)
        {
            // 마지막 마우스 활동 후 1시간이 경과했는지 확인
            if ((DateTime.Now - _lastMouseActivity).TotalHours >= 1)
            {
                await WriteCurrentTimeAsync(); // 파일 업데이트
                _lastMouseActivity = DateTime.Now; // 활동 시간 리셋
            }
        }

        private async Task WriteCurrentTimeAsync()
        {
            try
            {
                // 폴더 생성
                string directoryPath = Path.GetDirectoryName(_filePath);
                if (!Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }

                // 현재 시간 작성
                string currentTime = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                await File.WriteAllTextAsync(_filePath, currentTime);

                // 로그 출력 (필요 시 UI에 출력 가능)
                Console.WriteLine($"파일 업데이트됨: {currentTime}");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"오류 발생: {ex.Message}", "오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}
2. 주요 로직 설명
마우스 이벤트 감지

MouseMove 이벤트를 사용하여 사용자의 마우스 움직임을 감지하고 마지막 활동 시간을 기록합니다.
타이머로 활동 확인

DispatcherTimer를 1초 간격으로 설정하여 사용자의 활동 상태를 주기적으로 확인합니다.
마우스 활동이 없는 상태에서 1시간이 경과하면 파일에 시간을 기록합니다.
파일 업데이트

지정된 F:\Time\Time.txt 파일에 현재 시간을 기록합니다.
파일의 내용은 항상 최신 시간으로 유지됩니다.
3. 실행 시나리오
프로그램을 실행한 상태에서 사용자가 마우스를 움직이지 않는다면 타이머가 마지막 활동 시간을 기준으로 1시간 경과를 확인합니다.
1시간이 지나면 Time.txt 파일에 최신 시간을 기록합니다.
사용자가 마우스를 움직이면 마지막 활동 시간이 갱신되어 타이머가 다시 초기화됩니다.
4. 참고사항
파일 경로 변경: 필요 시 _filePath 값을 원하는 경로로 변경하세요.