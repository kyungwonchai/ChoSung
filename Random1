POStatus 속성에만 이벤트를 넣고, POStatus가 변경될 때마다 필터링을 적용하도록 간단하게 구현할 수 있습니다. Item 클래스에서 POStatus 속성만 변경 감지를 하고, 변경 시 필터링을 다시 적용하는 방식으로 최적화된 코드를 제공하겠습니다.

최적화된 Item 클래스
Item 클래스는 POStatus 속성에만 INotifyPropertyChanged를 적용하고, POStatus가 변경될 때만 이벤트를 발생시키도록 하겠습니다.

csharp
코드 복사
using System.ComponentModel;

public class Item : INotifyPropertyChanged
{
    private string _poStatus;
    public string POStatus
    {
        get => _poStatus;
        set
        {
            if (_poStatus != value)
            {
                _poStatus = value;
                OnPropertyChanged(nameof(POStatus)); // POStatus 값 변경 시 알림
            }
        }
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
ViewModel 수정
이제 ViewModel에서 POStatus 값이 변경될 때만 필터링이 이루어지도록 설정합니다. Items 컬렉션에 대한 CollectionChanged 이벤트는 더 이상 필요하지 않고, POStatus 속성 변경에만 반응하면 됩니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;

public class MainViewModel : INotifyPropertyChanged
{
    public event PropertyChangedEventHandler PropertyChanged;

    private bool _showHiddenRows;
    public bool ShowHiddenRows
    {
        get => _showHiddenRows;
        set
        {
            _showHiddenRows = value;
            OnPropertyChanged(nameof(ShowHiddenRows));
            FilterItems(); // 체크박스 상태 변경 시 필터링
        }
    }

    public ObservableCollection<Item> Items { get; set; }
    public ObservableCollection<Item> FilteredItems { get; set; }

    public MainViewModel()
    {
        Items = new ObservableCollection<Item>
        {
            new Item { POStatus = "처리중" },
            new Item { POStatus = "이미 처리됨" },
            new Item { POStatus = "대기중" },
            new Item { POStatus = "이미 처리됨" }
        };

        // 각 항목의 POStatus 변경 감지
        foreach (var item in Items)
        {
            item.PropertyChanged += OnItemPropertyChanged;
        }

        // 초기 필터링 적용
        FilteredItems = new ObservableCollection<Item>(Items);
    }

    // 개별 항목의 POStatus 변경 감지
    private void OnItemPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(Item.POStatus))
        {
            // POStatus가 변경되면 필터 다시 적용
            FilterItems();
        }
    }

    // 필터링 로직
    private void FilterItems()
    {
        // 필터 적용 전에 Clear해서 기존 데이터를 비움
        FilteredItems.Clear();

        var filtered = ShowHiddenRows 
            ? Items // 체크박스가 선택된 경우 모든 항목을 표시
            : Items.Where(i => !i.POStatus.Contains("이미")); // "이미" 포함 항목 필터링

        // 필터링된 항목을 FilteredItems에 추가
        foreach (var item in filtered)
        {
            FilteredItems.Add(item);
        }
    }

    protected void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
XAML (동일)
XAML 파일은 수정할 필요가 없으며, 이전과 동일하게 사용합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>
    
    <Grid>
        <StackPanel>
            <!-- 체크박스: 숨겨진 행을 보여주기 -->
            <CheckBox Content="숨겨진 행 보기" 
                      IsChecked="{Binding ShowHiddenRows, Mode=TwoWay}"
                      Margin="10"/>
            
            <!-- DataGrid: POStatus 컬럼 표시 -->
            <DataGrid ItemsSource="{Binding FilteredItems}" AutoGenerateColumns="False" Height="200" Margin="10">
                <DataGrid.Columns>
                    <DataGridTextColumn Header="POStatus" Binding="{Binding POStatus}" />
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
    </Grid>
</Window>
동작 방식
체크박스 체크: 체크박스를 선택하면 POStatus에 "이미"라는 단어가 포함된 항목도 DataGrid에 표시됩니다.
체크박스 해제: 체크박스를 해제하면 "이미"라는 단어가 포함된 항목이 숨겨집니다.
POStatus 값 변경: POStatus 값이 변경되면 자동으로 필터가 적용되어, 즉시 DataGrid가 업데이트됩니다.
핵심 변경 사항
Item 클래스에만 POStatus 변경 감지: POStatus 속성에만 변경 알림을 추가하여, 속성이 변경될 때만 필터가 적용되도록 간소화했습니다.
불필요한 이벤트 제거: CollectionChanged 이벤트 대신 POStatus 속성만 감지하여 불필요한 리소스 낭비를 방지했습니다.
이 방식은 POStatus 값 변경 시에만 필터링을 적용하여 효율적으로 DataGrid를 업데이트할 수 있습니다.