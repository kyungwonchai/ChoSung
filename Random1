구사항을 종합하면, 윈도우 10에서 실행되는 프로그램을 작성해야 하며, 이 프로그램은 다음과 같은 역할을 합니다:

COM Port 관리 및 상태 모니터링

PLC와 연결된 COM 포트를 열고, 지속적으로 상태를 확인합니다.
연결 문제 발생 시 원인을 정확히 로그로 기록합니다. (예: 포트 열기 실패, 데이터 전송 실패 등)
명령 전송 및 중계

사용자가 보낸 명령을 PLC로 중계합니다.
PLC에서 수신한 데이터를 사용자에게 반환합니다.
에러 디버깅 및 로그

데이터 전송/수신 과정에서 문제가 생기면, 어떤 단계에서 문제가 발생했는지 명확히 로그에 기록합니다.
예: "데이터 전송 실패: 포트 연결 끊김", "응답 시간 초과: PLC에서 응답 없음" 등.
유지보수 용이성

COM Port 연결 상태 및 통신 내역을 확인할 수 있는 로그 시스템을 제공.
COM Port 문제 발생 시 재연결 시도 및 상태 복구.
프로그램 설계
아래는 이 요구사항을 구현하기 위한 단계별 설계 및 코드 샘플입니다.

1. 기본 COM 포트 관리
C 언어에서 Windows API를 사용하여 COM 포트를 관리하는 코드를 작성할 수 있습니다.

c
코드 복사
#include <windows.h>
#include <stdio.h>

HANDLE hComm; // COM 포트 핸들

// COM 포트를 초기화하는 함수
int InitializeComPort(const char* portName) {
    hComm = CreateFileA(portName, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL);

    if (hComm == INVALID_HANDLE_VALUE) {
        printf("Error: Unable to open COM port. Code: %d\n", GetLastError());
        return 0;
    }

    // 포트 설정 구성
    DCB dcb = {0};
    dcb.DCBlength = sizeof(dcb);

    if (!GetCommState(hComm, &dcb)) {
        printf("Error: Unable to get COM port state. Code: %d\n", GetLastError());
        CloseHandle(hComm);
        return 0;
    }

    // 통신 설정 (9600 baud rate, no parity, 1 stop bit, 8 data bits)
    dcb.BaudRate = CBR_9600;
    dcb.ByteSize = 8;
    dcb.StopBits = ONESTOPBIT;
    dcb.Parity = NOPARITY;

    if (!SetCommState(hComm, &dcb)) {
        printf("Error: Unable to set COM port state. Code: %d\n", GetLastError());
        CloseHandle(hComm);
        return 0;
    }

    // 타임아웃 설정
    COMMTIMEOUTS timeouts = {0};
    timeouts.ReadIntervalTimeout = 50;
    timeouts.ReadTotalTimeoutConstant = 50;
    timeouts.ReadTotalTimeoutMultiplier = 10;
    timeouts.WriteTotalTimeoutConstant = 50;
    timeouts.WriteTotalTimeoutMultiplier = 10;

    if (!SetCommTimeouts(hComm, &timeouts)) {
        printf("Error: Unable to set COM port timeouts. Code: %d\n", GetLastError());
        CloseHandle(hComm);
        return 0;
    }

    printf("COM port %s successfully initialized.\n", portName);
    return 1;
}
2. 데이터 송수신
PLC로 데이터를 전송하고 응답을 읽는 과정에서 각 단계의 상태를 모니터링합니다.

c
코드 복사
int SendData(const char* data, size_t length) {
    DWORD bytesWritten;
    if (!WriteFile(hComm, data, length, &bytesWritten, NULL)) {
        printf("Error: Data transmission failed. Code: %d\n", GetLastError());
        return 0;
    }
    printf("Data sent successfully: %s\n", data);
    return 1;
}

int ReceiveData(char* buffer, size_t bufferSize) {
    DWORD bytesRead;
    if (!ReadFile(hComm, buffer, bufferSize, &bytesRead, NULL)) {
        printf("Error: Data reception failed. Code: %d\n", GetLastError());
        return 0;
    }
    buffer[bytesRead] = '\0'; // 문자열 끝 추가
    printf("Data received: %s\n", buffer);
    return 1;
}
3. 에러 로깅
각 단계에서 발생한 오류를 명확히 로그로 기록하도록 구현합니다.

c
코드 복사
void LogError(const char* step, const char* details) {
    FILE* logFile = fopen("com_error.log", "a");
    if (logFile) {
        fprintf(logFile, "Error at %s: %s\n", step, details);
        fclose(logFile);
    }
    printf("Logged error: %s - %s\n", step, details);
}
예제 사용:

c
코드 복사
if (!SendData("Command1", strlen("Command1"))) {
    LogError("SendData", "Failed to send command to PLC");
}
4. 연결 상태 모니터링
주기적으로 COM 포트 상태를 확인하고, 문제가 발생하면 재연결 시도.

c
코드 복사
int MonitorConnection() {
    while (1) {
        if (!ClearCommError(hComm, NULL, NULL)) {
            printf("COM port connection lost. Retrying...\n");
            LogError("MonitorConnection", "COM port disconnected");
            CloseHandle(hComm);

            // 재연결 시도
            if (!InitializeComPort("COM3")) {
                Sleep(5000); // 5초 대기 후 재시도
                continue;
            }
        }
        printf("COM port connection stable.\n");
        Sleep(2000); // 2초마다 상태 확인
    }
    return 0;
}
5. 프로그램 실행
c
코드 복사
int main() {
    if (!InitializeComPort("COM3")) {
        printf("Failed to initialize COM port.\n");
        return 1;
    }

    // 연결 상태 모니터링 스레드 시작
    CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)MonitorConnection, NULL, 0, NULL);

    // 명령 전송 테스트
    if (!SendData("TestCommand", strlen("TestCommand"))) {
        LogError("Main", "Failed to send test command");
    }

    char buffer[256];
    if (!ReceiveData(buffer, sizeof(buffer))) {
        LogError("Main", "Failed to receive response");
    }

    // 프로그램 종료
    CloseHandle(hComm);
    return 0;
}
프로그램 동작 설명
COM 포트 초기화: 프로그램 시작 시 지정된 포트를 초기화.
연결 상태 모니터링: COM 포트의 상태를 지속적으로 확인.
명령 송수신: 사용자가 명령을 전송하면 PLC로 전달하고 응답 수신.