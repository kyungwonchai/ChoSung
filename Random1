를 구현하기 위해, MVVM 패턴에서 Progress 값이 변경될 때마다 특정 조건에 따라 경고창을 표시하고, 조건이 충족되지 않으면 자동으로 창이 닫히는 구조를 만듭니다. WPF MVVM 구조와 함께 타이머와 Window 클래스를 사용하여 경고창을 관리할 수 있습니다.

1. MainViewModel 클래스 작성
Progress 값이 변경될 때마다 경고창을 표시하는 로직을 포함합니다. 또한 Progress 값이 1 이상이 되면 경고창을 띄우고, 사용자가 닫더라도 5초 후에 다시 표시되도록 타이머를 설정합니다.

csharp
코드 복사
using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Timers;
using System.Windows;

namespace YourNamespace
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private int _progress;
        private Timer _timer;
        private bool _isWarningVisible;
        
        public int Progress
        {
            get => _progress;
            set
            {
                if (_progress != value)
                {
                    _progress = value;
                    OnPropertyChanged();

                    // Progress가 1 이상이면 경고창을 표시
                    if (_progress >= 1 && !_isWarningVisible)
                    {
                        ShowWarningWindow();
                    }
                    // Progress가 0이면 경고창을 닫음
                    else if (_progress == 0)
                    {
                        CloseWarningWindow();
                    }
                }
            }
        }

        public MainViewModel()
        {
            _timer = new Timer(5000); // 5초 타이머 설정
            _timer.Elapsed += TimerElapsed;
        }

        private void ShowWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                WarningWindow warningWindow = new WarningWindow();
                warningWindow.Topmost = true;
                warningWindow.Show();

                warningWindow.Closed += (sender, e) =>
                {
                    _isWarningVisible = false;
                    _timer.Start(); // 창을 닫으면 타이머 시작
                };

                _isWarningVisible = true;
            });
        }

        private void CloseWarningWindow()
        {
            Application.Current.Dispatcher.Invoke(() =>
            {
                foreach (Window window in Application.Current.Windows)
                {
                    if (window is WarningWindow)
                    {
                        window.Close();
                        _timer.Stop(); // 창을 닫을 때 타이머 중지
                    }
                }
                _isWarningVisible = false;
            });
        }

        private void TimerElapsed(object sender, ElapsedEventArgs e)
        {
            _timer.Stop();
            if (_progress >= 1) // Progress가 여전히 1 이상이면 경고창을 다시 표시
            {
                ShowWarningWindow();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
Progress 프로퍼티에서 값이 변경될 때마다 조건을 검사하여 경고창을 표시하거나 닫습니다.
ShowWarningWindow 메서드는 경고창을 화면 중앙에 표시하고, 닫힌 후 5초 타이머를 시작하여 경고창을 다시 표시할 준비를 합니다.
CloseWarningWindow 메서드는 Progress 값이 0이 될 경우 모든 WarningWindow를 닫고 타이머를 중지합니다.
_timer는 창이 닫힌 후 5초가 지나면 ShowWarningWindow를 다시 호출하여 경고창을 표시합니다.
2. WarningWindow 경고창 작성
경고창을 표시하는 WarningWindow는 반투명, 클릭 불가 및 닫기 버튼을 포함하여 설계할 수 있습니다.

xml
코드 복사
<Window x:Class="YourNamespace.WarningWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Warning" Height="500" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="#AAFF0000"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen" 
        MouseDown="Window_MouseDown">
    <Grid>
        <TextBlock Text="이상 발생! 경고 상태입니다."
                   HorizontalAlignment="Center" VerticalAlignment="Center"
                   FontSize="24" Foreground="White"/>
    </Grid>
</Window>
WindowStyle="None"과 AllowsTransparency="True"를 설정하여 경고창의 테두리와 배경을 제거하고, 투명한 배경을 설정합니다.
Background="#AAFF0000"은 빨간색 반투명 배경을 지정합니다.
MouseDown="Window_MouseDown" 이벤트를 통해 창을 클릭해도 사라지도록 설정합니다.
3. WarningWindow.xaml.cs
경고창을 클릭했을 때 창이 사라지도록 MouseDown 이벤트를 처리합니다.

csharp
코드 복사
using System.Windows;

namespace YourNamespace
{
    public partial class WarningWindow : Window
    {
        public WarningWindow()
        {
            InitializeComponent();
        }

        private void Window_MouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            this.Close(); // 클릭하면 창 닫기
        }
    }
}
4. MainWindow.xaml 설정
MainWindow.xaml에서 ViewModel과 바인딩 설정을 완료합니다.

xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Window.DataContext>
        <local:MainViewModel/>
    </Window.DataContext>

    <Grid>
        <TextBox Text="{Binding Progress, Mode=TwoWay}" 
                 VerticalAlignment="Center" HorizontalAlignment="Center"
                 Width="100" Height="30"/>
    </Grid>
</Window>
TextBox에 Progress 속성을 바인딩하여 값이 변경될 때마다 ViewModel의 로직이 실행되도록 설정합니다.
요약
**MainViewModel**에서 Progress 값이 변경될 때마다 경고창을 표시하거나 닫도록 관리합니다.
**WarningWindow**를 반투명 창으로 만들어 경고 메시지를 표시하고, 창이 닫히면 5초 후에 다시 표시되도록 타이머를 활용합니다.