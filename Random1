해 Flask 템플릿 필터를 제대로 등록하여 사용하도록 수정하겠습니다.

Flask 애플리케이션 코드 (app.py)
python
코드 복사
from flask import Flask, render_template, request
import pymssql
import pandas as pd

app = Flask(__name__)

# MSSQL 데이터베이스 연결 정보
DB_CONFIG = {
    "server": "YOUR_SERVER",
    "database": "YOUR_DATABASE",
    "username": "YOUR_USERNAME",
    "password": "YOUR_PASSWORD"
}

# MSSQL 연결 함수
def get_db_connection():
    return pymssql.connect(
        server=DB_CONFIG['server'],
        user=DB_CONFIG['username'],
        password=DB_CONFIG['password'],
        database=DB_CONFIG['database']
    )

# max 필터 정의
@app.template_filter('max')
def max_filter(value, arg):
    """
    Jinja2에서 사용하는 max 필터.
    두 값 중 더 큰 값을 반환합니다.
    """
    return max(value, arg)

# min 필터 정의
@app.template_filter('min')
def min_filter(value, arg):
    """
    Jinja2에서 사용하는 min 필터.
    두 값 중 더 작은 값을 반환합니다.
    """
    return min(value, arg)

@app.route('/PLCErr', methods=['GET'])
def plcerr():
    conn = get_db_connection()
    query = """
        SELECT 
            linename AS '라인명',
            errN AS '에러번호',
            errValue AS '에러값',
            CONVERT(VARCHAR, Time1, 121) AS '시간'
        FROM View_PLCErrjoin
    """
    df = pd.read_sql(query, conn)
    conn.close()

    # 검색 처리
    search_query = request.args.get("search", "")
    if search_query:
        df = df[
            df["라인명"].str.contains(search_query, case=False, na=False) |
            df["에러번호"].astype(str).str.contains(search_query, case=False, na=False) |
            df["에러값"].astype(str).str.contains(search_query, case=False, na=False)
        ]

    # 라인별 발생 수 데이터 준비
    line_counts = df['라인명'].value_counts().reset_index()
    line_counts.columns = ['라인명', '발생수']

    # 에러번호별 발생 수 데이터 준비
    error_counts = df['에러번호'].value_counts().reset_index()
    error_counts.columns = ['에러번호', '발생수']

    # 페이지네이션 처리
    page = int(request.args.get("page", 1))
    per_page = 20
    total_pages = -(-len(df) // per_page)  # 총 페이지 수
    df_page = df.iloc[(page - 1) * per_page : page * per_page]

    return render_template(
        'plcerr.html',
        data=df_page.to_dict(orient='records'),
        line_counts=line_counts.to_dict(orient='records'),
        error_counts=error_counts.to_dict(orient='records'),
        current_page=page,
        total_pages=total_pages,
        search_query=search_query
    )


if __name__ == '__main__':
    app.run(debug=True)
주요 수정 사항
Flask 템플릿 필터 정의:

Jinja2에서 max와 min을 사용할 수 있도록 Flask 템플릿 필터를 등록했습니다.
@app.template_filter('max') 및 @app.template_filter('min')를 사용해 max와 min 필터를 정의.
max와 min 함수 사용:

Jinja2 템플릿에서 max와 min을 사용할 수 있습니다.
Jinja2 템플릿 (templates/plcerr.html)
html
코드 복사
<div class="pagination">
    {% set start_page = ((current_page - 1) // 10) * 10 + 1 %}
    {% set end_page = total_pages | min(start_page + 9) %}
    {% if start_page > 1 %}
        <button onclick="changePage({{ start_page - 1 }})">◀</button>
    {% endif %}
    {% for page in range(start_page, end_page + 1) %}
        <button 
            onclick="changePage({{ page }})" 
            class="{{ 'active' if page == current_page else '' }}"
        >
            {{ page }}
        </button>
    {% endfor %}
    {% if end_page < total_pages %}
        <button onclick="changePage({{ end_page + 1 }})">▶</button>
    {% endif %}
</div>
확인 사항
필터 등록 확인:

Flask 서버를 재시작한 후, 템플릿에서 min과 max 필터를 사용할 수 있습니다.
Jinja2에서 오류 해결:

템플릿 내 | min 및 | max를 안전하게 사용할 수 있습니다.
테스트:
