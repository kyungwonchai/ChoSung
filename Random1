니다.

csharp

using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;

namespace MailSenderExample
{
    public static class MailSender
    {
        private static readonly HttpClient client = new HttpClient();
        private static readonly string apiUrl = "http://oo/stt/ssc.net/mail/api/v2.0";

        public static async Task<string> SendMail(string systemId, string userId, string subject, string contents, string senderEmailAddress, string recipientEmailAddress)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);

            var requestData = new
            {
                body = new
                {
                    subject,
                    contents,
                    sender = new
                    {
                        emailAddress = senderEmailAddress,
                        recipientType = "TO"
                    },
                    recipients = new[]
                    {
                        new
                        {
                            emailAddress = recipientEmailAddress,
                            recipientType = "TO"
                        }
                    }
                }
            };

            var jsonPayload = Newtonsoft.Json.JsonConvert.SerializeObject(requestData);

            var requestUrl = $"{apiUrl}/mails/send?userId={userId}";

            var content = new StringContent(jsonPayload, Encoding.UTF8, "application/json");
            var response = await client.PostAsync(requestUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var responseContent = await response.Content.ReadAsStringAsync();
                var result = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
                string mailId = result.mailid;

                Console.WriteLine("메일이 성공적으로 발송되었습니다.");
                Console.WriteLine($"메일 ID: {mailId}");

                return mailId;
            }
            else
            {
                Console.WriteLine("메일 발송에 실패하였습니다.");
                return null;
            }
        }

        public static async Task<bool> CancelMail(string systemId, string userId, string mailId)
        {
            client.DefaultRequestHeaders.Add("System-ID", systemId);

            var requestUrl = $"{apiUrl}/mails/{mailId}/cancel?userId={userId}";

            var response = await client.PostAsync(requestUrl, null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("메일 발신 취소가 성공적으로 처리되었습니다.");
                return true;
            }
            else
            {
                Console.WriteLine("메일 발신 취소에 실패하였습니다.");
                return false;
            }
        }
    }

    public partial class MainForm : Form
    {
        private string mailId;

        public MainForm()
        {
            InitializeComponent();
        }

        private async void btnSendMail_Click(object sender, EventArgs e)
        {
            string systemId = "System-ID";
            string userId = "K아이디";
            string subject = "메일 제목";
            string contents = "메일 본문";
            string senderEmailAddress = "sgsg@abc.com";
            string recipientEmailAddress = "knoxposgg@abc.com";

            mailId = await MailSender.SendMail(systemId, userId, subject, contents, senderEmailAddress, recipientEmailAddress);
        }

        private async void btnCancelMail_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrEmpty(mailId

User
이어서
ChatGPT

))
{
string systemId = "System-ID";
string userId = "K아이디";

arduino

            bool cancellationResult = await MailSender.CancelMail(systemId, userId, mailId);

            if (cancellationResult)
            {
                Console.WriteLine("메일 발신이 취소되었습니다.");
            }
            else
            {
                Console.WriteLine("메일 발신 취소에 실패하였습니다.");
            }
        }
    }
}

}

go


위의 코드에서 `SendMail` 메서드와 `CancelMail` 메서드에 `systemId` 매개변수를 추가하였습니다. `systemId`를 `client.DefaultRequestHeaders`에 추가하여 연계시스템 ID를 Header에 포함시켰습니다.

또한, `SendMail` 메서드의 `requestData`에 `contents`를 추가하여 메일 본문을 Body에 포함시켰습니다.

`btnSendMail_Click` 이벤트 핸들러에서 `systemId`와 `userId`를 설정하여 `MailSender.SendMail` 메서드를 호출하고, `btnCancelMail_Click` 이벤트 핸들러에서도 `systemId`와 `userId`를 설정하여 `MailSender.CancelMail` 메서드를 호출하도록 수정하였습니다.

이제 `MainForm`에서 연계시스템 ID와