. DevExpress의 WPF GridControl 내에 새로운 컬럼을 추가하고, 그 컬럼 안에 버튼을 배치하는 작업을 XAML로 수행할 수 있습니다.

다음은 XAML에서 버튼을 포함하는 새 컬럼을 추가하는 예시입니다:

xml
Copy code
<dxg:GridControl x:Name="gridControl">
    <dxg:GridControl.Columns>
        <!-- 기존 컬럼 정의 -->

        <!-- 새로운 컬럼 추가 -->
        <dxg:GridColumn FieldName="Action" UnboundType="Object">
            <dxg:GridColumn.CellTemplate>
                <DataTemplate>
                    <Button Content="Delete" Click="Button_Click"/>
                </DataTemplate>
            </dxg:GridColumn.CellTemplate>
        </dxg:GridColumn>
    </dxg:GridControl.Columns>

    <!-- GridControl의 나머지 부분 -->
</dxg:GridControl>
코드 비하인드에서는 Button_Click 이벤트 핸들러를 구현해야 합니다:

csharp
Copy code
private void Button_Click(object sender, RoutedEventArgs e)
{
    Button button = sender as Button;
    var rowData = button.DataContext as YourRowType; // YourRowType을 실제 데이터 타입으로 대체
    MessageBox.Show(rowData.No1.ToString());
}
이 예시에서 YourRowType은 GridControl에 바인딩된 데이터 모델의 타입으로 교체해야 합니다. 이 방식은 XAML을 사용하여 UI 구성 요소를 더 선언적으로 표현할 수 있어, 코드의 가독성과 유지 관리를 개선하