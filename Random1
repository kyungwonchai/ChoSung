관리하고, 각 센서가 클릭될 때 그 고유명칭을 텍스트 박스에 표시하도록 수정하겠습니다. 이 방식으로 센서와 번호를 매핑하고, 데이터를 효율적으로 관리할 수 있습니다.

1. app.py 수정
센서 고유명칭을 정의하는 딕셔너리를 추가로 정의할 수 있습니다. 여기서 각 센서 번호에 맞는 고유명칭을 딕셔너리로 구성하고, 이 데이터를 템플릿에 전달합니다.

python
코드 복사
from flask import Flask, render_template
import pyodbc

app = Flask(__name__)

# MSSQL 연결 설정
conn_str = (
    r"Driver={SQL Server};"
    r"Server=YOUR_SERVER_NAME;"
    r"Database=YOUR_DATABASE_NAME;"
    r"UID=YOUR_USERNAME;"
    r"PWD=YOUR_PASSWORD;"
)

# 센서 고유명칭 딕셔너리
sensor_names = {
    1: 'Temperature Sensor',
    2: 'Pressure Sensor',
    3: 'Humidity Sensor',
    4: 'Light Sensor',
    5: 'Proximity Sensor',
    6: 'Motion Sensor',
    7: 'Gas Sensor',
    8: 'Water Sensor',
    9: 'Smoke Sensor',
    10: 'Sound Sensor',
    # 더 많은 센서가 있다면 여기에 추가
}

def get_log_sensors():
    data = []
    try:
        with pyodbc.connect(conn_str) as conn:
            cursor = conn.cursor()
            query = "SELECT IP, Sensor1, Time1 FROM LogSensors ORDER BY IP"
            cursor.execute(query)
            rows = cursor.fetchall()
            for row in rows:
                ip = row[0]        # IP 열을 인덱스로 접근
                sensor1 = row[1]   # Sensor1 열을 인덱스로 접근
                time1 = row[2]     # Time1 열을 인덱스로 접근
                data.append({'ip': ip, 'sensor1': sensor1, 'time1': time1})
    except Exception as e:
        print(f"Database connection failed: {e}")
    return data

@app.route('/')
def index():
    return "Welcome to the Flask App!"

@app.route('/logsensors')
def log_sensors():
    data = get_log_sensors()
    return render_template('logsensors.html', data=data, sensor_names=sensor_names)

if __name__ == '__main__':
    app.run(debug=True)
2. HTML 템플릿 수정 (templates/logsensors.html)
템플릿에서는 Flask에서 전달한 sensor_names 딕셔너리를 사용해 각 센서의 고유명칭을 표시합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Log Sensors</title>
    <style>
        body {
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            height: 100vh;
        }
        table {
            border-collapse: collapse;
            width: 80%;
            margin-top: 20px;
        }
        th, td {
            border: 1px solid #444444;
            padding: 8px;
            text-align: center;
        }
        th {
            background-color: #333333;
        }
        .circle-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            justify-content: center;
        }
        .circle {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            cursor: pointer;
        }
        .red {
            background-color: red;
        }
        .green {
            background-color: green;
        }
        #sensorName {
            margin: 20px;
            padding: 10px;
            width: 300px;
            font-size: 16px;
            text-align: center;
        }
    </style>
    <script>
        function showSensorName(sensorName) {
            // 센서 이름을 텍스트 박스에 표시
            document.getElementById('sensorName').value = sensorName;
        }

        // 3초마다 페이지를 새로고침하는 JavaScript 함수
        setInterval(function() {
            location.reload();
        }, 3000);
    </script>
</head>
<body>
    <h1>Log Sensors Data</h1>
    <input type="text" id="sensorName" placeholder="Click a sensor to see its name" readonly>
    <table>
        <thead>
            <tr>
                <th>IP</th>
                <th>Sensors</th>
                <th>Time</th>
            </tr>
        </thead>
        <tbody>
            {% for item in data %}
            <tr>
                <td>{{ item.ip }}</td>
                <td>
                    <div class="circle-container">
                        {% for char in item.sensor1 %}
                        {% set sensor_name = sensor_names.get(loop.index, 'Unknown Sensor') %}
                        <span class="circle {% if char == '1' %}red{% else %}green{% endif %}"
                              onclick="showSensorName('{{ sensor_name }} (Position: {{ loop.index }})')">
                        </span>
                        {% endfor %}
                    </div>
                </td>
                <td>{{ item.time1 }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>
설명
sensor_names 딕셔너리:

각 센서의 번호에 따라 고유한 명칭을 정의했습니다. 예를 들어, 첫 번째 센서는 "Temperature Sensor", 두 번째 센서는 "Pressure Sensor"로 설정됩니다.
템플릿에 이 딕셔너리를 전달하여, 각 센서의 명칭을 조회합니다.
센서 이름과 번호 표시:

템플릿에서 loop.index를 사용하여 센서의 위치(인덱스)를 가져옵니다. 이 인덱스를 sensor_names 딕셔너리에서 키로 사용하여 센서 이름을 찾습니다.
만약 sensor_names에 해당 인덱스가 없으면 기본값 "Unknown Sensor"가 표시됩니다.
클릭 시 센서의 고유명칭과 위치가 함께 텍스트 박스에 표시되도록 구현했습니다.
JavaScript (showSensorName 함수):

각 센서가 클릭될 때마다 showSensorName 함수가 호출되어, 해당 센서의 이름과 위치를 상단의 텍스트 박스에 표시합니다.
실행 방법
Flask 서버를 실행합니다:
bash
코드 복사
python app.py
웹 브라우저에서 http://127.0.0.1:5000/logsensors로 접속하여 센서를 클릭할 때마다 텍스트 박스에 센서의 고유 명칭이 표시되는지 확인합니다.
이제 각 센서가 몇 번째 센서인지와 그에 따른 고유 명칭이 제대로 연계되어, 클릭 시 상단에 표시됩니다.










