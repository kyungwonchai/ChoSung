Okay, here's the updated English translation of your instructions, incorporating the new details and the context about the static-related issue:

Subject: Code Refactoring Instructions: Button Initialization & Docking

Hi [Colleague's Name - or omit if not needed],

Please find the following refactoring tasks:

Refactor Button List Initialization:

In the code I initially provided, the list of buttons (e.g., List<ButtonConfig>) was populated with items at the same time the list field was declared.
Please change this structure. The primary reason for this change is to correctly handle the assignment of instance methods (like those for OnClickAction) and avoid issues related to static contexts that can occur during direct field initialization.
First, only declare the list field (e.g., private List<ButtonConfig> buttonConfigs;).
Then, populate this list (i.e., assign new List<ButtonConfig> { ... } and add the new ButtonConfig { ... } items, including their OnClickAction assignments) inside the class constructor. This ensures that instance members are properly accessible.
Implement Window Docking using DockManager:

The DockManager is already integrated into the project (it was also included in previously shared code).
In the code I sent you today, please implement the functionality to dock newly created windows/forms.
To do this, use a function similar to tabbedview_add. (Please verify the exact function name from our existing codebase, as this is likely our specific function for adding and docking views/tabs).
Reference/Example: For an example of how docking is implemented, you can observe the "Cycle Time History" feature ? it docks when clicked. Please use this as a guide.
The core requirement is to utilize the DockManager. You have the flexibility to adapt the specific coding pattern as you see fit.
Support:

If necessary, you can consult an AI assistant like GPT for help, or you can ask me your questions in the afternoon.