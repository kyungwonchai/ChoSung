래는 끊기지 않은 전체 코드입니다. 이 코드는 상단에 박스 플롯 차트를 유지하고, 하단에 선택된 모델의 데이터를 L과 R의 이중 Y축으로 표시하는 차트로 구현되었습니다.

XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="LineDataViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Line Data Viewer" Height="800" Width="1000">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="2*" />
            <RowDefinition Height="3*" />
        </Grid.RowDefinitions>

        <!-- 상단 박스 플롯 차트 -->
        <dxc:ChartControl x:Name="BoxPlotChart" SelectionChanged="BoxPlotChart_SelectionChanged">
            <dxc:XYDiagram2D>
                <dxc:XYDiagram2D.AxisX>
                    <dxc:AxisX2D Title="모델 이름" />
                </dxc:XYDiagram2D.AxisX>
                <dxc:XYDiagram2D.AxisY>
                    <dxc:AxisY2D Title="값" />
                </dxc:XYDiagram2D.AxisY>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>

        <!-- 하단 이중 Y축 차트 -->
        <dxc:ChartControl x:Name="LineChart" Grid.Row="1">
            <dxc:XYDiagram2D>
                <dxc:XYDiagram2D.AxisX>
                    <dxc:AxisX2D Title="시간" DateTimeScaleOptions="{dxc:ContinuousDateTimeScaleOptions MeasureUnit=Second}" />
                </dxc:XYDiagram2D.AxisX>
                <dxc:XYDiagram2D.AxisY>
                    <dxc:AxisY2D Title="L 값" />
                </dxc:XYDiagram2D.AxisY>
                <dxc:XYDiagram2D.SecondaryAxesY>
                    <dxc:SecondaryAxisY2D x:Name="SecondaryAxisY" Title="R 값" Alignment="Far" />
                </dxc:XYDiagram2D.SecondaryAxesY>
            </dxc:XYDiagram2D>
        </dxc:ChartControl>
    </Grid>
</Window>
C# (MainWindow.xaml.cs)
csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            InitializeBoxPlotChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void InitializeBoxPlotChart()
        {
            var lineGroups = allData.GroupBy(d => d.ModelName);

            foreach (var group in lineGroups)
            {
                var recentData = group.Take(100).ToList();

                var allValues = recentData.SelectMany(d => new[] { d.MP1, d.MP2, d.MP3, d.MP4, d.MP5 }).ToList();
                if (allValues.Count > 0)
                {
                    var series = new BoxPlotSeries2D
                    {
                        DisplayName = group.Key,
                        ArgumentDataMember = "Argument",
                        MinValueDataMember = "Min",
                        Quartile1ValueDataMember = "Quartile1",
                        MedianValueDataMember = "Median",
                        Quartile3ValueDataMember = "Quartile3",
                        MaxValueDataMember = "Max",
                        DataSource = new List<BoxPlotData>
                        {
                            new BoxPlotData
                            {
                                Argument = group.Key,
                                Min = allValues.Min(),
                                Quartile1 = GetPercentile(allValues, 25),
                                Median = GetPercentile(allValues, 50),
                                Quartile3 = GetPercentile(allValues, 75),
                                Max = allValues.Max()
                            }
                        }
                    };
                    series.Tag = group.Key; // 시리즈에 라인 이름을 태그로 저장
                    BoxPlotChart.Diagram.Series.Add(series);
                }
            }
        }

        private void BoxPlotChart_SelectionChanged(object sender, ChartSelectionChangedEventArgs e)
        {
            var selectedSeries = e.SelectedItems.OfType<BoxPlotSeries2D>().FirstOrDefault();
            if (selectedSeries != null)
            {
                var lineName = selectedSeries.Tag.ToString();
                LoadLineData(lineName);
            }
        }

        private void LoadLineData(string lineName)
        {
            var lineData = allData.Where(d => d.ModelName == lineName).Take(500).ToList();
            InitializeLineChart(lineData);
        }

        private void InitializeLineChart(List<DataPoint> data)
        {
            LineChart.Diagram.Series.Clear();

            // L 모델 데이터 시리즈 추가
            var lSeries = new LineSeries2D
            {
                DisplayName = "L 모델 데이터",
                DataSource = data.Where(d => d.ModelName.EndsWith("L")),
                ArgumentDataMember = "Timestamp",
                ValueDataMember = "MP1", // 예시로 MP1 사용
                Tag = "L",
                CheckedInLegend = true
            };
            LineChart.Diagram.Series.Add(lSeries);

            // R 모델 데이터 시리즈 추가
            var rSeries = new LineSeries2D
            {
                DisplayName = "R 모델 데이터",
                DataSource = data.Where(d => d.ModelName.EndsWith("R")),
                ArgumentDataMember = "Timestamp",
                ValueDataMember = "MP1", // 예시로 MP1 사용
                Tag = "R",
                CheckedInLegend = true,
                AxisY = LineChart.Diagram.SecondaryAxesY[0]
            };
            LineChart.Diagram.Series.Add(rSeries);
        }

        private double GetPercentile(List<double> sortedData, double percentile)
        {
            if (sortedData.Count == 0)
                return double.NaN;

            sortedData.Sort();
            double realIndex = percentile / 100.0 * (sortedData.Count - 1);
            int index = (int)realIndex;
            double frac = realIndex - index;

            if (index + 1 < sortedData.Count)
                return sortedData[index] * (1 - frac) + sortedData[index + 1] * frac;
            else
                return sortedData[index];
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }

    public class BoxPlotData
    {
        public string Argument { get; set; }
        public double Min { get; set; }
        public double Quartile1 { get; set; }
        public double Median { get; set; }
        public double Quartile3 { get; set; }
        public double Max { get; set; }
    }