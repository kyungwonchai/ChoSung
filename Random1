설정된 용량만큼 확보되면 삭제를 중지하도록 DeleteFilesAsync 함수를 수정하겠습니다. 필요한 코드만 수정해서 제공하겠습니다.

FileCleaner.cs 내의 특정 함수 코드
DeleteFilesAsync 함수 수정
csharp
코드 복사
public async Task DeleteFilesAsync(List<FileInfo> files, string folderPath, bool forceDelete = false, CancellationToken cancellationToken = default)
{
    long currentFolderSize = files.Sum(f => f.Length);
    long freeSpace = GetDriveFreeSpace(folderPath.Split('\\')[0] + "\\");
    long targetFreeSpace = 20L * 1024 * 1024 * 1024; // 20 GB 확보 목표

    var startTime = DateTime.Now;
    var allowedExtensions = new HashSet<string>(StringComparer.OrdinalIgnoreCase) { ".jpg", ".png", ".bmp" };
    var minimumCreationTime = DateTime.Now.AddDays(-3); // 3일 이전 파일만 삭제

    foreach (var file in files)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            logger.LogRecentActivity("파일 삭제 중지됨.");
            break;
        }

        if (!allowedExtensions.Contains(file.Extension))
        {
            logger.LogRecentActivity($"허용되지 않은 확장자: {file.Extension}. 파일 삭제 안 함: {file.FullName}");
            continue;
        }

        if (file.CreationTime > minimumCreationTime)
        {
            logger.LogRecentActivity($"파일 생성 시간이 3일 이내입니다. 파일 삭제 안 함: {file.FullName}");
            continue;
        }

        if (freeSpace >= targetFreeSpace && !forceDelete)
        {
            logger.LogRecentActivity($"목표 용량 {targetFreeSpace / (1024 * 1024 * 1024)} GB에 도달하여 삭제를 중지합니다.");
            break;
        }

        try
        {
            file.Delete();
            currentFolderSize -= file.Length;
            freeSpace += file.Length; // 파일을 삭제할 때마다 여유 공간을 업데이트
            logger.LogDeletionActivity($"파일 삭제됨: {file.FullName}");

            var elapsed = DateTime.Now - startTime;
            if (elapsed.TotalMinutes < 3)
            {
                await Task.Delay(5000, cancellationToken); // 처음 3분 동안 5초 간격으로 파일 삭제
            }
            else
            {
                await Task.Delay(100, cancellationToken); // 3분 이후에는 100ms 간격으로 파일 삭제
            }
        }
        catch (OperationCanceledException)
        {
            logger.LogRecentActivity("파일 삭제 작업이 취소되었습니다.");
            break;
        }
        catch (Exception ex)
        {
            logger.LogError("Failed to delete file: " + ex.Message);
        }
    }

    updateFolderStatistics(currentFolderSize, folderPath);
}
이제 하드 용량이 부족할 때 목표 용량인 20GB를 확보할 때까지 파일을 삭제하고, 목표 용량에 도달하면 삭제를 중지하도록 수정되었습니다. 이 코드를 사용하여 설정된 용량만큼 확보되면 삭제를 중지할 수 있습니다