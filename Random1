알겠습니다. SocketServer를 재시작할 수 있도록 하고, 포트가 변경될 때 이를 반영하도록 수정한 전체 코드를 제공하겠습니다. 소켓 서버와 메인 윈도우의 C# 파일 전체를 포함해 드리겠습니다.

1. SocketServer.cs
SocketServer 클래스는 싱글톤 패턴으로 관리되며, 포트 변경 시 서버를 재시작할 수 있도록 수정합니다.

csharp
코드 복사
using System;
using System.Net;
using System.Net.Sockets;

namespace ScanValueTrans
{
    public class SocketServer
    {
        private static SocketServer _instance; // 싱글톤 인스턴스
        private TcpListener _tcpListener; // TCP 리스너
        public event EventHandler<SocketDataReceivedEventArgs> DataReceived;

        public static SocketServer Instance
        {
            get
            {
                if (_instance == null)
                {
                    _instance = new SocketServer();
                }
                return _instance;
            }
        }

        private SocketServer()
        {
            // 생성자에서 기본적인 초기화 작업을 수행
        }

        public void Start(int port)
        {
            try
            {
                // 이미 리스너가 시작된 경우 중지
                if (_tcpListener != null)
                {
                    Stop();
                }

                // 새로운 포트로 리스너 시작
                _tcpListener = new TcpListener(IPAddress.Any, port);
                _tcpListener.Start();
                _tcpListener.BeginAcceptTcpClient(new AsyncCallback(AcceptClientCallback), null);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"소켓 서버를 시작할 수 없습니다: {ex.Message}");
            }
        }

        public void Stop()
        {
            try
            {
                if (_tcpListener != null)
                {
                    _tcpListener.Stop();
                    _tcpListener = null;
                }
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"소켓 서버를 중지하는 중 오류 발생: {ex.Message}");
            }
        }

        private void AcceptClientCallback(IAsyncResult ar)
        {
            try
            {
                TcpClient client = _tcpListener.EndAcceptTcpClient(ar);
                NetworkStream stream = client.GetStream();

                byte[] buffer = new byte[1024];
                int bytesRead = stream.Read(buffer, 0, buffer.Length);
                string receivedData = System.Text.Encoding.ASCII.GetString(buffer, 0, bytesRead);

                DataReceived?.Invoke(this, new SocketDataReceivedEventArgs { Data = receivedData });

                client.Close();
                _tcpListener.BeginAcceptTcpClient(new AsyncCallback(AcceptClientCallback), null);
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"클라이언트 연결을 처리하는 중 오류 발생: {ex.Message}");
            }
        }
    }

    public class SocketDataReceivedEventArgs : EventArgs
    {
        public string Data { get; set; }
    }
}
2. MainWindow.xaml.cs
MainWindow의 코드에서 포트 변경 시 소켓 서버를 재시작하고, 에러가 발생하지 않도록 처리한 전체 코드입니다.

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer; // 소켓 서버 인스턴스
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                // 설정 관리 클래스 초기화
                settingsManager = SettingsManager.Instance;

                // 소켓 서버 초기화
                socketServer = SocketServer.Instance; // 싱글톤 인스턴스 초기화
                if (socketServer == null)
                {
                    throw new InvalidOperationException("소켓 서버 인스턴스를 초기화할 수 없습니다.");
                }

                // 소켓 서버 이벤트 핸들러 설정
                socketServer.DataReceived += OnSocketDataReceived;

                // IP 주소 가져오기 및 표시
                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                // 포트 선택 콤보박스 초기화
                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                // 포트 및 설정 불러오기
                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                // 스캐너 및 타겟 포트 설정 초기화
                InitializePortSettings();
                LoadLastUsedPorts();

                // QR 코드 생성
                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                // 포트 목록 갱신
                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedPort = PortComboBox.SelectedItem?.ToString() ?? "20000";

                if (int.TryParse(selectedPort, out int portNumber))
                {
                    if (socketServer != null)
                    {
                        socketServer.Start(portNumber); // 포트 번호 변경 시 소켓 서버 재시작
                        settingsManager.SaveSetting("Port", selectedPort);
                    }
                    else
                    {
                        LogMessage("소켓 서버 인스턴스가 초기화되지 않았습니다.");
                    }
                }
                else
                {
                    LogMessage($"포트 번호가 유효하지 않습니다: {selectedPort}");
                }

                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                if (!string.IsNullOrEmpty(ipAddress) && !string.IsNullOrEmpty(port))
                {
                    string qrContent = $"{ipAddress}:{port}";
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                    // QR 코드를 이미지로 표시
                    QrCodeImage.Source = qrCodeImage;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                // 보드레이트 설정
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                // 패리티 설정
                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                // 데이터 비트 설정
                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                // 스톱 비트 설정
                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue; // 기본값 설정
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                // 스캐너 포트 설정 로드
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                // 저장된 설정이 유효할 때만 로드
                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }

                // 각 보낼 포트에 대해 설정 로드 및 연결
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), (Parity)Enum.Parse(typeof(Parity), parity), int.Parse(dataBits), (StopBits)Enum.Parse(typeof(StopBits), stopBits));
                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem != null)
                {
                    string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                    string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                    string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                    string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                    string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                    OpenScannerPort(selectedPort, baudRate, parity, dataBits, stopBits);

                    // 설정 저장
                    settingsManager.SaveSetting("LastUsedScannerPort", selectedPort);
                    settingsManager.SaveSetting("ScannerBaudRate", baudRate);
                    settingsManager.SaveSetting("ScannerParity", parity);
                    settingsManager.SaveSetting("ScannerDataBits", dataBits);
                    settingsManager.SaveSetting("ScannerStopBits", stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                // COM 포트 목록 갱신
                string[] portNames = SerialPort.GetPortNames();

                // 스캐너 포트 콤보박스 갱신
                ScannerPortComboBox.ItemsSource = portNames;

                // 각 타겟 포트 설정 컨트롤 갱신
                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
주요 변경 사항 요약
SocketServer:

소켓 서버가 이미 실행 중이면 Stop() 메서드를 호출하여 중지하고, 새 포트로 다시 시작할 수 있게 했습니다.
싱글톤 패턴을 통해 인스턴스가 올바르게 초기화되도록 보장합니다.
MainWindow:

포트 변경 시 소켓 서버를 재시작하도록 수정했습니다.
포트가 유효하지 않거나 선택되지 않았을 때 기본값을 사용하도록 했습니다.
프로그램 초기화 시, 소켓 서버 인스턴스가 제대로 초기화되지 않았을 경우 예외를 던지도록 처리했습니다.
이제 이 코드로 프로그램이 제대로 동작할 것이며, 포트 변경 시 소켓 서버가 정상적으로 재시작됩니다. 추가적인 문제가 발생하거나 다른 질문이 있으시면 언제든지 알려주세요!