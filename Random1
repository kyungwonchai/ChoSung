 요구 사항에 따라 파이썬 코드와 MSSQL 스크립트의 예시입니다. 파이썬 코드는 Windows 10에서 실행 가능하며, openpyxl 라이브러리를 사용하여 Excel 파일을 처리합니다. 또한, pyodbc 라이브러리를 사용하여 MSSQL 데이터베이스에 연결하여 데이터를 삽입 또는 업데이트합니다. 이 코드를 실행하기 위해서는 해당 라이브러리를 설치해야 합니다.

PLM고가 테이블 생성 스크립트:
sql
Copy code
CREATE TABLE PLM_Goga (
    PartCodeVendorName VARCHAR(100),
    PartCode VARCHAR(50),
    VendorName VARCHAR(50),
    VendorPN VARCHAR(50),
    ApprovalStatus VARCHAR(50),
    ApprovalDate DATE,
    PartName VARCHAR(100),
    Specification VARCHAR(100)
);
파이썬 코드:
python
Copy code
import os
import pyodbc
from openpyxl import load_workbook

# 엑셀 파일 경로
excel_dir = r'C:\Users\사용자명\Downloads'
excel_file_prefix = 'PartAppSearch'

# MSSQL 연결 정보
server = '서버주소'
database = '데이터베이스명'
username = '사용자명'
password = '비밀번호'

# MSSQL 연결
conn = pyodbc.connect(
    f'DRIVER={{SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'
)
cursor = conn.cursor()

# 엑셀 파일 목록 탐색
for filename in os.listdir(excel_dir):
    if filename.startswith(excel_file_prefix) and filename.endswith('.xlsx'):
        excel_path = os.path.join(excel_dir, filename)
        
        # 엑셀 파일 열기
        wb = load_workbook(filename=excel_path)
        sheet = wb.active

        # 데이터 읽기
        row_num = 4
        while sheet.cell(row=row_num, column=2).value is not None:  # B열 값이 있을 때까지 반복
            part_code = sheet.cell(row=row_num, column=2).value
            vendor_name = sheet.cell(row=row_num, column=3).value
            vendor_pn = sheet.cell(row=row_num, column=4).value
            approval_status = sheet.cell(row=row_num, column=5).value
            approval_date = sheet.cell(row=row_num, column=6).value
            part_name = sheet.cell(row=row_num, column=12).value
            specification = sheet.cell(row=row_num, column=13).value
            
            # 키 생성
            part_code_vendor_name = part_code + vendor_name
            
            # PLM고가 테이블에 데이터 삽입 또는 업데이트
            cursor.execute(
                f"IF EXISTS (SELECT 1 FROM PLM_Goga WHERE PartCodeVendorName = ?) "
                f"UPDATE PLM_Goga SET PartCode = ?, VendorName = ?, VendorPN = ?, "
                f"ApprovalStatus = ?, ApprovalDate = ?, PartName = ?, Specification = ? "
                f"WHERE PartCodeVendorName = ? "
                f"ELSE "
                f"INSERT INTO PLM_Goga (PartCodeVendorName, PartCode,




User
이어서

ChatGPT
VendorName, VendorPN, ApprovalStatus, ApprovalDate, PartName, Specification) "
f"VALUES (?, ?, ?, ?, ?, ?, ?)"
,
part_code, vendor_name, vendor_pn, approval_status, approval_date, part_name, specification,
part_code_vendor_name, part_code, vendor_name, vendor_pn, approval_status, approval_date,
part_name, specification
)
conn.commit()

markdown
Copy code
        row_num += 1
MSSQL 연결 종료
cursor.close()
conn.close()

go
Copy code

위의 파이썬 코드에서 `excel_dir` 변수에는 엑셀 파일이 위치한 디렉토리 경로를 지정해야 합니다. 또한, `server`, `database`, `username`, `password` 변수에는 MSSQL 서버 연결 정보를 입력해야 합니다. 필요에 따라 이를 수정하여 코드를 실행하세요.

위의 파이썬 코드는 `openpyxl` 라이브러리를 사용하여 주어진 조건에 따라 엑셀 파일을 읽고, 데이터를 추출한 후 `pyodbc`를 사용하여 MSSQL 데이터베이스에 연결하여 데이터를 삽입하거나 업데이트합니다. `IF EXISTS` 구문을 사용하여 테이블에 데이터가 이미 존재하는지 여부를 확인한 후, 데이터가 존재하면 업데이트하고, 존재하지 않으면 새로운 데이터로 삽입합니다.

코드 실행 전에 파이썬 환경에서 `openpyxl` 및 `pyodbc` 라이브러리를 설치해야 합니다. 아래의 명령어를 사용하여 설치할 수 있습니다.

```shell
pip install openpyxl pyodbc
또한, MSSQL 서버에 연결하기 위해서는 해당 서버에 대한 연결 정보가 필요합니다. server, database, username, password 변수를 실제 서버 정보로 수정하여 실행해야 합니다.

참고: 위의 코드는 예시로 제공되었으며, 실제 환경에 따라 수정이 필요할 수 있습니다. 데이터베이스 연결 정보, 엑셀 파일 경로 및 구조, PLM고가 테이블 구조 등을 실제 환경에 맞게 수정하여 사용하시기 바랍니다.