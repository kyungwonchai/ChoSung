 및 실제값 비교를 수행하는 수정된 코드입니다. **PRealAandB**를 예측 데이터로 사용하고, 동일한 DB에서 값을 불러옵니다.

2. 예측 및 시각화 코드 (DB에서 PRealAandB를 직접 불러와 예측 수행)
python
코드 복사
# 필요한 라이브러리 임포트
import joblib
import pymssql
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# 데이터베이스에서 데이터를 불러오는 함수
def fetch_data_from_db(proc_name):
    """
    MSSQL 저장 프로시저를 호출하여 데이터를 가져옵니다.
    :param proc_name: 저장 프로시저 이름
    :return: 데이터 (numpy 배열)
    """
    server = "localhost"  # DB 서버 주소
    user = "your_username"  # 사용자 이름
    password = "your_password"  # 비밀번호
    database = "your_database"  # 데이터베이스 이름

    try:
        conn = pymssql.connect(server=server, user=user, password=password, database=database)
        query = f"EXEC {proc_name}"  # 저장 프로시저 실행
        df = pd.read_sql(query, conn)  # 데이터프레임으로 변환
        return df.values  # numpy 배열로 반환
    except Exception as e:
        print(f"Error fetching data: {e}")
        return np.array([])

# 저장된 모델 로드
try:
    model = joblib.load("best_model.pkl")
    print("Best model loaded successfully.")
except Exception as e:
    print(f"Error loading model: {e}")
    exit()

# PRealAandB 데이터 불러오기 (예측용 데이터)
data = fetch_data_from_db("PRealAandB")  # PRealAandB 저장 프로시저 호출
if data.size == 0:
    print("Error: No data fetched from PRealAandB.")
    exit()

# 데이터 준비
pnowab = data[:, :-1]  # 마지막 열 제외 (예측에 사용)
actual = data[:, -1]   # 마지막 열 (실제값)

# 예측 수행
predicted = model.predict(pnowab)

# 시각화: 예측값 vs 실제값
num_features = pnowab.shape[1]
features = [f'Feature_{i+1}' for i in range(num_features)]

# 예측값 선 연결
plt.figure(figsize=(12, 6))
plt.plot(features, predicted, label='Predicted', linestyle='--', marker='o')

# 실제값 점 표시
plt.scatter(features, actual, color='red', label='Actual', zorder=5)

# 오차 표시
for i, (pred, act) in enumerate(zip(predicted, actual)):
    plt.plot([features[i], features[i]], [pred, act], 'k--', alpha=0.7)

# 레이블 및 제목
plt.title("Prediction vs Actual")
plt.xlabel("Features")
plt.ylabel("Values")
plt.legend()
plt.grid()
plt.show()

# 오차 점수 시각화
errors = np.abs(predicted - actual)  # 오차 계산
error_scores = 100 - (errors / np.max(errors) * 100)  # 100점 만점 기준

plt.figure(figsize=(12, 6))
plt.bar(features, error_scores, color='blue', alpha=0.7)
plt.axhline(100, color='green', linestyle='--', label='Max Score (100)')
plt.title("Error Score (100-point scale)")
plt.xlabel("Features")
plt.ylabel("Score")
plt.legend()
plt.ylim(0, 100)
plt.grid()
plt.show()

# 오차 점수 출력
print(f"Error Scores (100-point scale): {error_scores}")
수정된 코드 요약
PRealAandB 데이터를 DB에서 불러오기:

저장 프로시저 PRealAandB를 호출하여 예측 데이터와 실제값 데이터를 가져옵니다.
마지막 열(actual)은 실제값, 나머지 열은 예측에 사용됩니다.
모델 로드:

이전에 저장한 최적 모델(best_model.pkl)을 불러옵니다.
예측 수행:

pnowab로 예측 수행 후, 실제값과 비교합니다.
시각화:

예측값 vs 실제값 비교 차트: 선(예측값)과 점(실제값)을 비교하고, 차이를 선으로 연결합니다.
오차 점수 막대 그래프: 100점 만점 기준으로 각 특징(feature)의 정확도를 시각화합니다.
결과
예측값 vs 실제값 차트:

PRealAandB 데이터를 기반으로 예측값과 실제값의 차이를 시각적으로 보여줍니다.
오차 점수 차트:

각 특징(feature)에 대한 정확도를 100점 만점으로 계산하여 막대 그래프로 표시.
필요 사항
MSSQL 저장 프로시저:

PRealAandB는 예측 및 실제값 데이터를 반환해야 합니다.
형식: 마지막 열은 실제값, 나머지는 예측에 사용될 데이터.
모델 파일:
