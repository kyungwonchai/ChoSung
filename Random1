import bpy
import random

# 기존 객체 삭제
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# 랜덤 색상 생성 함수
def random_color():
    return (random.random(), random.random(), random.random(), 1)

# 도형 생성 함수
def create_shape(shape_type, location):
    if shape_type == 'cube':
        bpy.ops.mesh.primitive_cube_add(location=location)
    elif shape_type == 'sphere':
        bpy.ops.mesh.primitive_uv_sphere_add(location=location)
    elif shape_type == 'cone':
        bpy.ops.mesh.primitive_cone_add(location=location)
    elif shape_type == 'cylinder':
        bpy.ops.mesh.primitive_cylinder_add(location=location)
    elif shape_type == 'torus':
        bpy.ops.mesh.primitive_torus_add(location=location)
    else:
        return None
    return bpy.context.object

# 재질 생성 함수
def create_material(name, color):
    material = bpy.data.materials.new(name=name)
    material.use_nodes = True
    bsdf = material.node_tree.nodes.get('Principled BSDF')
    bsdf.inputs['Base Color'].default_value = color
    bsdf.inputs['Roughness'].default_value = 0.4
    return material

# 평면 생성
bpy.ops.mesh.primitive_plane_add(size=20, location=(0, 0, 0))
plane = bpy.context.object
plane_material = create_material('PlaneMaterial', (0.8, 0.8, 0.8, 1))
plane.data.materials.append(plane_material)

# 도형 생성 및 배치
shapes = ['cube', 'sphere', 'cone', 'cylinder', 'torus']
for i in range(30):
    shape_type = random.choice(shapes)
    x = random.uniform(-8, 8)
    y = random.uniform(-8, 8)
    z = 1
    shape = create_shape(shape_type, (x, y, z))
    if shape:
        material_name = f'Material_{i}'
        color = random_color()
        material = create_material(material_name, color)
        shape.data.materials.append(material)

# 카메라 생성 및 설정
bpy.ops.object.camera_add(location=(0, 0, 15))
camera = bpy.context.object
camera.rotation_euler = (0, 0, 0)
bpy.context.scene.camera = camera

# 골든 아워 조명 설정
# 태양광 추가
bpy.ops.object.light_add(type='SUN', location=(0, 0, 10))
sun = bpy.context.object
sun.data.energy = 5
sun.data.angle = 0.1
sun.rotation_euler = (0.7854, 0, 0.7854)  # 45도 각도로 설정

# 환경 조명 설정
bpy.context.scene.world.use_nodes = True
world_nodes = bpy.context.scene.world.node_tree.nodes
world_links = bpy.context.scene.world.node_tree.links

# 기존 배경 노드 제거
if 'Background' in world_nodes:
    world_nodes.remove(world_nodes['Background'])

# 스카이 텍스처 노드 추가
sky_texture = world_nodes.new(type='ShaderNodeTexSky')
sky_texture.sky_type = 'PREETHAM'
sky_texture.sun_elevation = 0.1  # 낮은 태양 고도 설정
sky_texture.sun_rotation = 0.7854  # 태양 방향 설정
sky_texture.turbidity = 2  # 대기 탁도 설정
sky_texture.ground_albedo = 0.3  # 지면 반사율 설정

# 배경 노드 추가
background = world_nodes.new(type='ShaderNodeBackground')
background.inputs['Strength'].default_value = 1.0

# 월드 출력 노드 가져오기
world_output = world_nodes.get('World Output')

# 노드 연결
world_links.new(sky_texture.outputs['Color'], background.inputs['Color'])
world_links.new(background.outputs['Background'], world_output.inputs['Surface'])

# 렌더링 설정
bpy.context.scene.render.engine = 'CYCLES'
bpy.context.scene.cycles.device = 'GPU'
bpy.context.scene.cycles.samples = 1000  # 고품질 렌더링을 위한 샘플 수 증가
bpy.context.scene.render.resolution_x = 7680  # 8K 해상도
bpy.context.scene.render.resolution_y = 4320
bpy.context.scene.render.film_transparent = True

# Denoising 설정
bpy.context.scene.cycles.use_denoising = True

# 렌더링 실행
bpy.ops.render.render(write_still=True)
