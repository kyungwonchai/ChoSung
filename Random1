위의 코드는 백그라운드에서 QR코드나 바코드를 스캔하고 MSSQL 데이터베이스에 저장하는 기능을 제공하지만, 완전히 백그라운드에서 작동하도록 설정되지 않았습니다. UI가 뜨는 상태에서 카메라를 사용하여 QR코드나 바코드를 스캔하고 결과를 처리하는 방식입니다. 앱을 내리면(백그라운드로 전환하면) 카메라 동작이 멈추게 됩니다.

완전히 백그라운드에서 동작하도록 하려면 다음과 같은 추가 작업이 필요합니다:

Foreground Service 사용: 백그라운드에서 동작하면서도 시스템 자원 제한을 피하기 위해 Foreground Service를 사용해야 합니다.
Camera2 API 사용: Camera2 API를 사용하여 더 세밀하게 카메라 제어를 할 수 있습니다.
BroadcastReceiver 사용: QR코드나 바코드를 스캔하여 데이터베이스에 저장하는 작업을 백그라운드 서비스에서 수행하도록 설정합니다.
1. Foreground Service 설정
1. Foreground Service 클래스를 생성합니다.

QRBarcodeService.kt

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.IBinder
import androidx.core.app.NotificationCompat
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.CompoundBarcodeView
import java.sql.DriverManager

class QRBarcodeService : Service() {

    private lateinit var barcodeView: CompoundBarcodeView

    override fun onCreate() {
        super.onCreate()
        barcodeView = CompoundBarcodeView(this)
        barcodeView.decodeContinuous(object : BarcodeCallback {
            override fun barcodeResult(result: BarcodeResult?) {
                result?.let {
                    val qrCodeData = it.text
                    // MSSQL 데이터베이스에 저장
                    saveToDatabase(qrCodeData)
                }
            }

            override fun possibleResultPoints(resultPoints: MutableList<BarcodeResult>?) {}
        })
        startForegroundService()
    }

    private fun startForegroundService() {
        val channelId = "QRBarcodeServiceChannel"
        val channelName = "QR Barcode Service"
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
        notificationManager.createNotificationChannel(channel)
        val notification: Notification = NotificationCompat.Builder(this, channelId)
            .setContentTitle("QR Barcode Service")
            .setContentText("Scanning for QR codes and barcodes in the background")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .build()
        startForeground(1, notification)
    }

    private fun saveToDatabase(data: String) {
        Thread {
            try {
                // JDBC URL
                val connectionUrl = "jdbc:sqlserver://<SERVER_IP>:<PORT>;databaseName=QRCodeScannerDB;user=<USER>;password=<PASSWORD>"

                // 데이터베이스 연결
                val connection = DriverManager.getConnection(connectionUrl)

                // SQL 쿼리
                val statement = connection.createStatement()
                val sql = "INSERT INTO ScannedData (QRCodeData) VALUES ('$data')"

                // 쿼리 실행
                statement.executeUpdate(sql)

                // 연결 종료
                statement.close()
                connection.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }.start()
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
2. AndroidManifest.xml 파일에 서비스 추가

xml
코드 복사
<service android:name=".QRBarcodeService" />
3. MainActivity.kt에서 Foreground Service 시작

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val serviceIntent = Intent(this, QRBarcodeService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)
    }
}
2. Camera2 API 사용
1. Camera2 API 설정 및 구현은 상당히 복잡하므로 기본적인 Camera2 API 사용 방법을 참고하십시오. 여기서는 Camera2 API를 이용한 카메라 설정과 QR코드 스캐닝을 예시로 다루겠습니다.

QRBarcodeService.kt

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.app.Notification
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.Service
import android.content.Intent
import android.os.IBinder
import androidx.core.app.NotificationCompat
import com.journeyapps.barcodescanner.BarcodeCallback
import com.journeyapps.barcodescanner.BarcodeResult
import com.journeyapps.barcodescanner.CompoundBarcodeView
import java.sql.DriverManager

class QRBarcodeService : Service() {

    private lateinit var barcodeView: CompoundBarcodeView

    override fun onCreate() {
        super.onCreate()
        barcodeView = CompoundBarcodeView(this)
        barcodeView.decodeContinuous(object : BarcodeCallback {
            override fun barcodeResult(result: BarcodeResult?) {
                result?.let {
                    val qrCodeData = it.text
                    // MSSQL 데이터베이스에 저장
                    saveToDatabase(qrCodeData)
                }
            }

            override fun possibleResultPoints(resultPoints: MutableList<BarcodeResult>?) {}
        })
        startForegroundService()
    }

    private fun startForegroundService() {
        val channelId = "QRBarcodeServiceChannel"
        val channelName = "QR Barcode Service"
        val notificationManager = getSystemService(NOTIFICATION_SERVICE) as NotificationManager
        val channel = NotificationChannel(channelId, channelName, NotificationManager.IMPORTANCE_DEFAULT)
        notificationManager.createNotificationChannel(channel)
        val notification: Notification = NotificationCompat.Builder(this, channelId)
            .setContentTitle("QR Barcode Service")
            .setContentText("Scanning for QR codes and barcodes in the background")
            .setSmallIcon(R.drawable.ic_launcher_foreground)
            .build()
        startForeground(1, notification)
    }

    private fun saveToDatabase(data: String) {
        Thread {
            try {
                // JDBC URL
                val connectionUrl = "jdbc:sqlserver://<SERVER_IP>:<PORT>;databaseName=QRCodeScannerDB;user=<USER>;password=<PASSWORD>"

                // 데이터베이스 연결
                val connection = DriverManager.getConnection(connectionUrl)

                // SQL 쿼리
                val statement = connection.createStatement()
                val sql = "INSERT INTO ScannedData (QRCodeData) VALUES ('$data')"

                // 쿼리 실행
                statement.executeUpdate(sql)

                // 연결 종료
                statement.close()
                connection.close()
            } catch (e: Exception) {
                e.printStackTrace()
            }
        }.start()
    }

    override fun onBind(intent: Intent?): IBinder? {
        return null
    }
}
2. AndroidManifest.xml 파일에 서비스 추가

xml
코드 복사
<service android:name=".QRBarcodeService" />
3. MainActivity.kt에서 Foreground Service 시작

kotlin
코드 복사
package com.example.qrbarcodescanner

import android.content.Intent
import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat

class MainActivity : AppCompatActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val serviceIntent = Intent(this, QRBarcodeService::class.java)
        ContextCompat.startForegroundService(this, serviceIntent)
    }
}
결론
위의 코드는 Foreground Service를 사용하여 백그라운드에서 QR코드나 바코드를 스캔하고 MSSQL 데이터베이스에 저장하는 방법을 설명합니다. 앱이 백그라운드에서도 동작하며, 사용자는 앱이 실행 중이라는 알림을 받을 수 있습니다.

이제 전체 애플리케이션이 완성되었으므로, 필요한 경우 추가 테스트를 통해 모든 기능이 올바르게 작동하는지 확인하십시오. 더 궁금한 사항이 있으면 언제든지 질문해 주세요!