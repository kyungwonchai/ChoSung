ontrolFlaskDB 데이터베이스에 아래 쿼리를 실행하여 npmlog 테이블을 생성하세요.

no1: IDENTITY(1,1) 속성을 사용하여 1부터 시작하여 1씩 자동 증가하는 번호 컬럼입니다. PRIMARY KEY로 지정하여 고유성을 보장합니다.
line: 라인 정보를 저장할 컬럼입니다. (예: NVARCHAR(50))
onoff: ON/OFF 상태를 저장할 컬럼입니다. (예: NVARCHAR(10))
datetime1: GETDATE() 함수를 DEFAULT 값으로 설정하여 데이터가 삽입되는 시점의 날짜와 시간이 자동으로 저장됩니다.
SQL

USE SControlFlaskDB;
GO

CREATE TABLE npmlog (
    no1 INT IDENTITY(1,1) PRIMARY KEY,
    line NVARCHAR(50) NOT NULL,
    onoff NVARCHAR(10) NOT NULL,
    datetime1 DATETIME DEFAULT GETDATE()
);
GO
2. C#: 파라미터를 사용한 데이터 삽입 코드
아래는 line과 onoff 값을 파라미터로 받아 npmlog 테이블에 데이터를 추가하는 C# 예제 코드입니다. SqlConnection의 연결 문자열은 사용자의 데이터베이스 환경에 맞게 수정해야 합니다.

주요 특징:

SQL Injection 방지: SqlParameter를 사용하여 악의적인 SQL 공격으로부터 안전합니다.
자동 날짜 입력: 쿼리에는 datetime1 컬럼을 명시적으로 넣지 않아도, 테이블 생성 시 설정한 DEFAULT GETDATE()에 의해 서버의 현재 시간이 자동으로 입력됩니다.
리소스 관리: using 구문을 사용하여 SqlConnection과 SqlCommand 객체가 자동으로 정리되도록 합니다.
C#

using System;
using System.Data.SqlClient;

public class NpmLogger
{
    // 데이터베이스 연결 문자열 (사용자 환경에 맞게 수정)
    private readonly string connectionString = "Server=서버주소;Database=SControlFlaskDB;User Id=사용자ID;Password=비밀번호;";

    /// <summary>
    /// npmlog 테이블에 데이터를 삽입합니다.
    /// </summary>
    /// <param name="line">라인 정보 (예: "LINE-01")</param>
    /// <param name="onoff">상태 정보 (예: "ON" 또는 "OFF")</param>
    public void InsertLog(string line, string onoff)
    {
        // INSERT 쿼리문. no1과 datetime1은 자동으로 들어가므로 line, onoff만 지정합니다.
        string query = "INSERT INTO npmlog (line, onoff) VALUES (@line, @onoff);";

        try
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    // 파라미터 추가
                    command.Parameters.AddWithValue("@line", line);
                    command.Parameters.AddWithValue("@onoff", onoff);

                    // 데이터베이스 연결 및 쿼리 실행
                    connection.Open();
                    int result = command.ExecuteNonQuery();

                    // 실행 결과 확인 (선택 사항)
                    if (result > 0)
                    {
                        Console.WriteLine("데이터가 성공적으로 삽입되었습니다.");
                    }
                    else
                    {
                        Console.WriteLine("데이터 삽입에 실패했습니다.");
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // 예외 처리
            Console.WriteLine($"오류가 발생했습니다: {ex.Message}");
        }
    }
}

// ----- 코드 사용 예제 -----
public class Program
{
    public static void Main(string[] args)
    {
        NpmLogger logger = new NpmLogger();

        // "LINE-A" 라인이 "ON" 되었다는 로그 삽입
        logger.InsertLog("LINE-A", "ON");

        // "LINE-B" 라인이 "OFF" 되었다는 로그 삽입
        logger.InsertLog("LINE-B", "OFF");