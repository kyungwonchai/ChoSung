F 응용 프로그램에서 10MB 크기의 이미지를 MSSQL 데이터베이스에 업로드하고, 다운로드하여 Image 객체에 표시하는 전체 프로세스를 구현하겠습니다. 이 과정은 다음 단계로 구성됩니다:

    이미지 업로드: 데이터베이스에 이미지를 저장합니다.
    이미지 다운로드 및 표시: 데이터베이스에서 이미지를 검색하여 Image 컨트롤에 표시합니다.
    메모리 관리: 사용한 이미지 리소스를 적절히 해제합니다.

1. 이미지 업로드

먼저, 이미지를 데이터베이스에 저장하는 코드입니다. 이 예에서는 ADO.NET을 사용하고 있으며, 데이터베이스 테이블에는 바이너리 데이터를 저장할 수 있는 열이 있다고 가정합니다.

csharp

using System.Data.SqlClient;
using System.IO;

public void UploadImageToDatabase(string imagePath, string connectionString)
{
    byte[] imageData;
    using (FileStream fs = new FileStream(imagePath, FileMode.Open, FileAccess.Read))
    {
        imageData = new byte[fs.Length];
        fs.Read(imageData, 0, (int)fs.Length);
    }

    using (SqlConnection conn = new SqlConnection(connectionString))
    {
        conn.Open();
        using (SqlCommand cmd = new SqlCommand("INSERT INTO Images (ImageData) VALUES (@ImageData)", conn))
        {
            cmd.Parameters.AddWithValue("@ImageData", imageData);
            cmd.ExecuteNonQuery();
        }
    }
}

2. 이미지 다운로드 및 표시

다음으로, 데이터베이스에서 이미지를 검색하여 WPF의 Image 컨트롤에 표시하는 코드입니다.

csharp

using System.Data.SqlClient;
using System.IO;
using System.Windows.Media.Imaging;

public BitmapImage DownloadImageFromDatabase(int imageId, string connectionString)
{
    byte[] imageData;
    using (SqlConnection conn = new SqlConnection(connectionString))
    {
        conn.Open();
        using (SqlCommand cmd = new SqlCommand("SELECT ImageData FROM Images WHERE ImageID = @ImageID", conn))
        {
            cmd.Parameters.AddWithValue("@ImageID", imageId);

            using (SqlDataReader reader = cmd.ExecuteReader())
            {
                if (reader.Read())
                {
                    imageData = (byte[])reader["ImageData"];
                }
                else
                {
                    throw new Exception("Image not found.");
                }
            }
        }
    }

    using (MemoryStream ms = new MemoryStream(imageData))
    {
        BitmapImage image = new BitmapImage();
        image.BeginInit();
        image.CacheOption = BitmapCacheOption.OnLoad;
        image.StreamSource = ms;
        image.EndInit();
        image.Freeze(); // 중요: WPF에서 스레드 안전성 보장

        return image;
    }
}

3. 메모리 관리

이미지 처리 후에는 IDisposable 인터페이스를 사용하여 리소스를 해제하는 것이 중요합니다. BitmapImage와 같은 이미지 객체는 메모리를 많이 사용하므로, 사용 후에 적절히 해제하는 것이 좋습니다. 위의 코드에서 using 문을 사용하여 파일 스트림과 메모리 스트림을 자동으로 해제하고 있습니다.

이 코드를 사용하여 이미지를 데이터베이스에 저장하고, 불러와서 WPF의 Image 컨트롤에 표시할 수 있습니다. 데이터베이스 연결 문자열, 테이블 및 열 이름은 실제 환경에 맞게 수정해야 합니다.