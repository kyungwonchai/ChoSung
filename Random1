이블의 기본 키를 ipname, InspectionTime, ModelName의 조합으로 설정하도록 수정하겠습니다. 이를 반영하여 SQL 테이블 정의와 C# 코드의 INSERT 문을 수정하겠습니다.

테이블 수정
새 테이블 정의
sql
코드 복사
CREATE TABLE YourTable (
    ipname NVARCHAR(50) NOT NULL, -- IP 주소
    InspectionTime DATETIME NOT NULL, -- 검사 시간
    ModelName NVARCHAR(100) NOT NULL, -- 모델 이름
    AlignResult NVARCHAR(100), -- 정렬 결과
    MP1DATA FLOAT, -- MP1 데이터
    MP1RESULT NVARCHAR(100), -- MP1 결과
    MP2DATA FLOAT, -- MP2 데이터
    MP2RESULT NVARCHAR(100), -- MP2 결과
    MP3DATA FLOAT, -- MP3 데이터
    MP3RESULT NVARCHAR(100), -- MP3 결과
    MP4DATA FLOAT, -- MP4 데이터
    MP4RESULT NVARCHAR(100), -- MP4 결과
    MP5DATA FLOAT, -- MP5 데이터
    MP5RESULT NVARCHAR(100), -- MP5 결과
    PRIMARY KEY (ipname, InspectionTime, ModelName) -- 복합 키 설정
);
기존 테이블 수정 (필요 시)
기존 테이블에서 복합 키를 설정하려면 다음 명령을 실행합니다:

sql
코드 복사
ALTER TABLE YourTable DROP CONSTRAINT PK_YourTable; -- 기존 기본 키 제거
ALTER TABLE YourTable ADD PRIMARY KEY (ipname, InspectionTime, ModelName); -- 복합 키 설정
C# 코드 수정
INSERT 문 수정
ipname, InspectionTime, ModelName을 기준으로 데이터의 존재 여부를 확인하도록 수정합니다.

csharp
코드 복사
using (var command = new SqlCommand(
    @"IF NOT EXISTS (SELECT 1 FROM YourTable WHERE ipname = @ipname AND InspectionTime = @InspectionTime AND ModelName = @ModelName)
      INSERT INTO YourTable (ipname, InspectionTime, ModelName, AlignResult, MP1DATA, MP1RESULT, MP2DATA, MP2RESULT, MP3DATA, MP3RESULT, MP4DATA, MP4RESULT, MP5DATA, MP5RESULT)
      VALUES (@ipname, @InspectionTime, @ModelName, @AlignResult, @MP1DATA, @MP1RESULT, @MP2DATA, @MP2RESULT, @MP3DATA, @MP3RESULT, @MP4DATA, @MP4RESULT, @MP5DATA, @MP5RESULT)", connection))
{
    command.Parameters.AddWithValue("@ipname", row["ipname"]);
    command.Parameters.AddWithValue("@InspectionTime", row["InspectionTime"]);
    command.Parameters.AddWithValue("@ModelName", row["ModelName"]);
    command.Parameters.AddWithValue("@AlignResult", row["AlignResult"]);
    command.Parameters.AddWithValue("@MP1DATA", row["MP1DATA"]);
    command.Parameters.AddWithValue("@MP1RESULT", row["MP1RESULT"]);
    command.Parameters.AddWithValue("@MP2DATA", row["MP2DATA"]);
    command.Parameters.AddWithValue("@MP2RESULT", row["MP2RESULT"]);
    command.Parameters.AddWithValue("@MP3DATA", row["MP3DATA"]);
    command.Parameters.AddWithValue("@MP3RESULT", row["MP3RESULT"]);
    command.Parameters.AddWithValue("@MP4DATA", row["MP4DATA"]);
    command.Parameters.AddWithValue("@MP4RESULT", row["MP4RESULT"]);
    command.Parameters.AddWithValue("@MP5DATA", row["MP5DATA"]);
    command.Parameters.AddWithValue("@MP5RESULT", row["MP5RESULT"]);

    await command.ExecuteNonQueryAsync();
}
GetNewRows 함수 (그대로 유지)
예시 데이터
입력된 ipname과 각 행의 InspectionTime, ModelName을 기준으로 처리됩니다.

plaintext
코드 복사
IP: 192.168.1.1
Row: 20250110 10:00:00, ModelA, Good, 123.45, Result1, 67.89, Result2, 45.67, Result3, 89.01, Result4, 12.34, Result5
결과
복합 키 설정:

ipname, InspectionTime, ModelName이 결합된 고유 키.
데이터 중복 삽입 방지.
SQL 조건 수정:

ipname, InspectionTime, ModelName의 조합으로 데이터 존재 여부 확인.
C# 코드 업데이트:
