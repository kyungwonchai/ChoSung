
사용할 라이브러리:

System.Net.NetworkInformation
System.Threading
모니터링 코드:

코드 스니펫
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.NetworkInformation;
using System.Threading;

namespace NetworkIOMonitor
{
    class Program
    {
        static void Main(string[] args)
        {
            // 네트워크 인터페이스 목록 가져오기
            var networkInterfaces = NetworkInterface.GetAllNetworkInterfaces();

            // 각 인터페이스에 대한 I/O 대기큐 정보 표시
            foreach (var networkInterface in networkInterfaces)
            {
                Console.WriteLine("인터페이스 이름: {0}", networkInterface.Name);

                // I/O 대기큐 정보 가져오기
                var queueStats = networkInterface.GetIPStatistics().GetIPv4Statistics().TcpConnectionInformation;

                Console.WriteLine("  현재 대기 중인 연결 수: {0}", queueStats.CurrentConnections);
                Console.WriteLine("  최대 대기 연결 수: {0}", queueStats.MaximumConnections);

                // 1초 간격으로 I/O 대기큐 정보 업데이트
                while (true)
                {
                    Thread.Sleep(1000);

                    // 업데이트된 I/O 대기큐 정보 가져오기
                    queueStats = networkInterface.GetIPStatistics().GetIPv4Statistics().TcpConnectionInformation;

                    Console.WriteLine("  현재 대기 중인 연결 수: {0}", queueStats.CurrentConnections);
                    Console.WriteLine("  최대 대기 연결 수: {0}", queueStats.MaximumConnections);
                }
            }
        }
    }
}
코드를 사용할 때는 주의가 필요합니다. 자세히 알아보기
설명:

System.Net.NetworkInformation 라이브러리를 사용하여 네트워크 인터페이스 목록을 가져옵니다.
각 인터페이스에 대해 GetIPStatistics().GetIPv4Statistics().TcpConnectionInformation 메서드를 사용하여 I/O 대기큐 정보를 가져옵니다.
CurrentConnections 속성은 현재 대기 중인 연결 수를 나타냅니다.
MaximumConnections 속성은 허용되는 최대 대기 연결 수를 나타냅니다.
while 루프를 사용하여 1초 간격으로 I/O 대기큐 정보를 업데이트합니다.
참고:

이 코드는 Windows 7에서만 작동합니다.
다른 운영 체제를 사용하는 경우 해당 운영 체제에 대한 API를 사용해야 합니다.
I/O 대기큐 상태를 모니터링하는 다른 방법도 있습니다.
추가 기능:

특정 임계값을 초과하면 알림을 제공하도록 코드를 수정할 수 있습니다.
I/O 대기큐 상태를 그래프로 표시하도록 코드를 수정할 수 있습니다.