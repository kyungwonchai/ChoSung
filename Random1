이 작업을 수행하기 위해 다음과 같은 웹 애플리케이션을 만들 수 있습니다. Flask를 사용하여 간단한 웹 서버를 만들고, MSSQL 데이터베이스와 연결하여 데이터를 조회하고, Jinja 템플릿을 사용하여 HTML 표로 데이터를 표시합니다. Ajax를 사용하여 새로 고침 기능을 구현할 수 있습니다. Python 내장 모듈과 MSSQL 관련 모듈을 사용합니다.

다음은 단계별 코드 예제입니다.

환경 설정

Flask 설치: pip install flask
MSSQL 관련 모듈 설치: pip install pyodbc
Flask 애플리케이션 코드

python
코드 복사
from flask import Flask, render_template, jsonify
import pyodbc
import datetime

app = Flask(__name__)

# MSSQL 데이터베이스 연결 설정
server = 'YOUR_SERVER'
database = 'YOUR_DATABASE'
username = 'YOUR_USERNAME'
password = 'YOUR_PASSWORD'
connection_string = f'DRIVER={{ODBC Driver 17 for SQL Server}};SERVER={server};DATABASE={database};UID={username};PWD={password}'

def get_data():
    conn = pyodbc.connect(connection_string)
    cursor = conn.cursor()
    query = '''
    SELECT CLine, CMachine, CPCBTEMP, CMASKTEMP, CHUMID, CSORDER, CPAPER, CSOLVENT, CFILETIME
    FROM Table_MaskCleaning2
    '''
    cursor.execute(query)
    rows = cursor.fetchall()
    conn.close()

    data = []
    now = datetime.datetime.now()

    for row in rows:
        CLine, CMachine, CPCBTEMP, CMASKTEMP, CHUMID, CSORDER, CPAPER, CSOLVENT, CFILETIME = row
        diff_minutes = int((now - CFILETIME).total_seconds() / 60)
        data.append({
            'CLine': CLine,
            'CMachine': CMachine,
            'CPCBTEMP': CPCBTEMP,
            'CMASKTEMP': CMASKTEMP,
            'CHUMID': CHUMID,
            'CSORDER': CSORDER,
            'CPAPER': CPAPER,
            'CSOLVENT': CSOLVENT,
            'CFILETIME': CFILETIME,
            'DIFF': diff_minutes
        })

    return data

@app.route('/')
def index():
    data = get_data()
    return render_template('index.html', data=data)

@app.route('/refresh', methods=['GET'])
def refresh():
    data = get_data()
    return jsonify(data)

if __name__ == '__main__':
    app.run(debug=True)
HTML 템플릿 (templates/index.html)
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Table Mask Cleaning</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            border: 1px solid black;
            padding: 8px;
            text-align: left;
        }
        .yellow {
            background-color: yellow;
        }
        .orange {
            background-color: orange;
        }
    </style>
</head>
<body>
    <h1>Table Mask Cleaning</h1>
    <button onclick="refreshData()">Refresh</button>
    <table>
        <thead>
            <tr>
                <th>CLine</th>
                <th>CMachine</th>
                <th>CPCBTEMP</th>
                <th>CMASKTEMP</th>
                <th>CHUMID</th>
                <th>CSORDER</th>
                <th>CPAPER</th>
                <th>CSOLVENT</th>
                <th>CFILETIME</th>
                <th>DIFF</th>
            </tr>
        </thead>
        <tbody id="table-body">
            {% for row in data %}
            <tr class="{{ 'yellow' if row.DIFF > 10 else '' }}{{ 'orange' if row.DIFF > 480 else '' }}">
                <td>{{ row.CLine }}</td>
                <td>{{ row.CMachine }}</td>
                <td>{{ row.CPCBTEMP }}</td>
                <td>{{ row.CMASKTEMP }}</td>
                <td>{{ row.CHUMID }}</td>
                <td>{{ row.CSORDER }}</td>
                <td>{{ row.CPAPER }}</td>
                <td>{{ row.CSOLVENT }}</td>
                <td>{{ row.CFILETIME }}</td>
                <td>{{ row.DIFF }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <script>
        function refreshData() {
            fetch('/refresh')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('table-body');
                    tableBody.innerHTML = '';
                    data.forEach(row => {
                        const tr = document.createElement('tr');
                        tr.className = row.DIFF > 480 ? 'orange' : row.DIFF > 10 ? 'yellow' : '';
                        tr.innerHTML = `
                            <td>${row.CLine}</td>
                            <td>${row.CMachine}</td>
                            <td>${row.CPCBTEMP}</td>
                            <td>${row.CMASKTEMP}</td>
                            <td>${row.CHUMID}</td>
                            <td>${row.CSORDER}</td>
                            <td>${row.CPAPER}</td>
                            <td>${row.CSOLVENT}</td>
                            <td>${row.CFILETIME}</td>
                            <td>${row.DIFF}</td>
                        `;
                        tableBody.appendChild(tr);
                    });
                });
        }
    </script>
</body>
</html>
이 코드는 Flask 웹 서버를 설정하고, MSSQL 데이터베이스에서 데이터를 조회하여 웹 페이지에 표시합니다. 웹 페이지는 데이터를 표로 표시하고, 새로 고침 버튼을 클릭하면 Ajax를 통해 데이터를 갱신합니다. CFILETIME의 차이에 따라 행 색상을 변경합니다.