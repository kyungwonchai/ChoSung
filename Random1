using System;
using System.Collections.Generic;
using System.Threading.Tasks;

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하며, 작업이 완료되면 다음 작업을 실행합니다.
/// </summary>
public class TaskQueue
{
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();
    private bool _isRunning = false; // 현재 작업이 실행 중인지 여부
    private bool _isPaused = false;  // 작업이 일시정지 상태인지 여부

    /// <summary>
    /// 작업 큐에 새로운 작업을 추가하고, 현재 작업이 실행 중이 아니면 즉시 실행합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task)
    {
        _tasks.Enqueue(task);  // 작업을 큐에 추가

        // 현재 작업이 실행 중이 아니고 일시정지가 아니라면 즉시 실행
        if (!_isRunning && !_isPaused)
        {
            RunNextTask(); // 즉시 다음 작업 실행
        }
    }

    /// <summary>
    /// 작업 큐의 다음 작업을 실행하는 메서드.
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0 || _isPaused) // 큐에 작업이 없거나 일시정지 상태라면 리턴
        {
            _isRunning = false;  // 작업이 실행 중이지 않음
            return;
        }

        _isRunning = true; // 현재 작업 실행 중

        var task = _tasks.Dequeue(); // 큐에서 작업을 가져와 실행
        await task(); // 작업 실행 (비동기)

        _isRunning = false; // 작업이 완료되었으므로 실행 중 상태 해제

        // 다음 작업 실행 (재귀 호출)
        if (_tasks.Count > 0) // 큐에 작업이 남아 있을 경우
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    public void Pause()
    {
        _isPaused = true; // 작업 일시정지 상태로 변경
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    public void Resume()
    {
        if (_isPaused)
        {
            _isPaused = false; // 일시정지 해제
            if (!_isRunning)  // 작업이 실행 중이 아니면 다음 작업 실행
            {
                RunNextTask(); // 즉시 다음 작업 실행
            }
        }
    }
}
