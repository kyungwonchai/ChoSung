존에 사용하던 **FileProcessor**와 관련된 파일 처리 방식을 기반으로, 사용자의 새로운 요구 사항을 반영하여 수정한 전체 코드를 드리겠습니다. 새로 작성된 **FileProcessor**는 파일을 감지한 후, 지정된 백업 폴더로 파일을 이동하고, 이동된 파일을 열어 처리하는 기능을 갖추고 있습니다. 3개월 이상 지난 파일은 하루에 한 번씩 삭제되도록 설정되어 있습니다.

수정된 FileProcessor.cs 전체 코드:
csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Timers;

public class FileProcessor
{
    private string _inputDirectory;  // 파일을 감지할 디렉토리
    private string _backupDirectory;  // 백업 디렉토리
    private Timer _cleanupTimer;  // 파일 삭제 타이머

    // 파일이 감지되었을 때 발생하는 이벤트
    public event Action<LogEntry> OnLogEntryDetected;

    public FileProcessor(string inputDirectory)
    {
        _inputDirectory = inputDirectory;
        _backupDirectory = @"C:\MESPRODFILE_Backup";

        // 24시간마다 한 번씩 파일 정리 작업 실행
        _cleanupTimer = new Timer(TimeSpan.FromDays(1).TotalMilliseconds);
        _cleanupTimer.Elapsed += (sender, args) => CleanupOldFiles();
        _cleanupTimer.Start();
    }

    /// <summary>
    /// 파일 감지 작업 시작
    /// </summary>
    public void StartProcessing()
    {
        Task.Run(() => MonitorDirectory());
    }

    /// <summary>
    /// 디렉토리를 감시하여 새로운 파일을 감지
    /// </summary>
    private void MonitorDirectory()
    {
        while (true)
        {
            var files = Directory.GetFiles(_inputDirectory, "*.txt");
            foreach (var file in files)
            {
                // 파일을 백업 폴더로 이동한 후 처리
                var backupFile = MoveFileToBackup(file);
                if (backupFile != null)
                {
                    ProcessFile(backupFile);
                }
            }
            Task.Delay(5000).Wait();  // 5초마다 디렉토리 확인
        }
    }

    /// <summary>
    /// 파일을 백업 폴더로 이동
    /// </summary>
    private string MoveFileToBackup(string filePath)
    {
        try
        {
            // 백업 폴더 경로 생성 (yyyyMMdd 형식)
            string backupSubDirectory = Path.Combine(_backupDirectory, DateTime.Now.ToString("yyyyMMdd"));
            if (!Directory.Exists(backupSubDirectory))
            {
                Directory.CreateDirectory(backupSubDirectory);
            }

            // 백업 파일 경로 설정
            string destinationPath = Path.Combine(backupSubDirectory, Path.GetFileName(filePath));

            // 파일 이동
            File.Move(filePath, destinationPath);

            return destinationPath;  // 이동된 파일 경로 반환
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error moving file to backup: {ex.Message}");
            return null;
        }
    }

    /// <summary>
    /// 이동한 파일을 처리
    /// </summary>
    private void ProcessFile(string filePath)
    {
        try
        {
            // 파일 내용 읽기
            var lines = File.ReadAllLines(filePath);
            var logEntry = ParseLogEntry(lines);

            // 처리 완료 후 이벤트 발생
            OnLogEntryDetected?.Invoke(logEntry);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing file: {ex.Message}");
        }
    }

    /// <summary>
    /// 로그 파일의 내용을 파싱하여 LogEntry 객체로 변환
    /// </summary>
    private LogEntry ParseLogEntry(string[] lines)
    {
        // 로그 엔트리 파싱 로직 구현 (필요에 따라 수정)
        var logEntry = new LogEntry
        {
            MAG_NO = ExtractField(lines, "MAG_NO"),
            MAG_QTY = int.Parse(ExtractField(lines, "MAG_QTY")),
            BASIC_MODEL = ExtractField(lines, "BASIC_MODEL"),
            MODEL_CODE = ExtractField(lines, "MODEL_CODE"),
            PO_NO = ExtractField(lines, "PO_NO"),
            PO_PLAN_QTY = int.Parse(ExtractField(lines, "PO_PLAN_QTY")),
            PO_PROD_QTY = int.Parse(ExtractField(lines, "PO_PROD_QTY")),
            SequenceFlag = DetermineSequenceFlag(ExtractField(lines, "PO_PLAN_QTY"), ExtractField(lines, "PO_PROD_QTY"))
        };
        return logEntry;
    }

    /// <summary>
    /// 로그 파일에서 각 필드를 추출하는 도우미 함수
    /// </summary>
    private string ExtractField(string[] lines, string fieldName)
    {
        var line = lines.FirstOrDefault(l => l.StartsWith(fieldName + "="));
        if (line != null)
        {
            return line.Split('=')[1].Trim();
        }
        return string.Empty;
    }

    /// <summary>
    /// 시퀀스 플래그 결정 (첫 파일: 1, 중간 파일: 2, 마지막 파일: 3)
    /// </summary>
    private int DetermineSequenceFlag(string planQty, string prodQty)
    {
        int plan = int.Parse(planQty);
        int prod = int.Parse(prodQty);
        if (prod == 0) return 1;  // 첫 번째 파일
        if (prod < plan) return 2;  // 중간 파일
        if (prod >= plan) return 3;  // 마지막 파일
        return 0;  // 기본값
    }

    /// <summary>
    /// 3개월 이상 지난 백업 파일을 삭제
    /// </summary>
    private void CleanupOldFiles()
    {
        try
        {
            // 3개월 전 날짜 계산
            DateTime thresholdDate = DateTime.Now.AddMonths(-3);

            var directories = Directory.GetDirectories(_backupDirectory);
            foreach (var directory in directories)
            {
                DateTime directoryDate;
                if (DateTime.TryParseExact(Path.GetFileName(directory), "yyyyMMdd", null, System.Globalization.DateTimeStyles.None, out directoryDate))
                {
                    // 3개월 이상 된 디렉토리 삭제
                    if (directoryDate < thresholdDate)
                    {
                        Directory.Delete(directory, true);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cleaning up old files: {ex.Message}");
        }
    }
}
주요 변경 사항:
파일 감지 및 처리:

파일이 감지되면 먼저 백업 폴더로 이동한 뒤에 처리하는 방식으로 변경되었습니다.
MoveFileToBackup 메서드를 통해 백업 폴더 경로를 C:\MESPRODFILE_Backup\yyyyMMdd 형식으로 설정하고 파일을 옮긴 후, 이동된 파일을 다시 열어 처리합니다.
백업 폴더 구조:

yyyyMMdd 형식의 폴더를 매일 생성하여 백업 파일을 분류하고 보관합니다.
파일 파싱 및 시퀀스 플래그 계산:

ParseLogEntry 메서드를 통해 로그 파일을 파싱하고, MAG_NO, MAG_QTY, BASIC_MODEL, MODEL_CODE, PO_NO, PO_PLAN_QTY, PO_PROD_QTY 필드를 추출합니다.
DetermineSequenceFlag 메서드를 사용하여 시퀀스 플래그를 계산하고, 첫 파일(1), 중간 파일(2), **마지막 파일(3)**로 구분합니다.
3개월 이상 된 파일 삭제:

백업 폴더에 3개월 이상 된 파일을 하루에 한 번 삭제하는 로직이 추가되었습니다.
CleanupOldFiles 메서드를 통해 폴더 내부의 파일 날짜를 확인하고, 3개월이 지나면 자동으로 삭제됩니다.
요약:
이 코드는 사용자 요구사항에 맞추어 파일을 백업 폴더로 이동 후 처리하고, 3개월 동안 파일을 보관하며 일일 주기로 오래된 파일을 삭제하는 기능을 포함하고 있습