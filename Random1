 있는 방식으로 코드를 수정하겠습니다. 통신 클래스에 연결 상태를 저장하는 bool 변수를 추가하고, 이를 통해 연결 상태를 확인하도록 하겠습니다.

PlcCommunication.cs
PlcCommunication.cs

csharp
코드 복사
using System;
using System.IO.Ports;
using RouterFlowSync.Logging;
using RouterFlowSync.ViewModel;
using System.Windows.Media;
using System.Threading;

namespace RouterFlowSync.Communication
{
    public class PlcCommunication
    {
        private SerialPort _serialPort;
        private MainViewModel _viewModel;
        private Timer _reconnectTimer;
        public bool IsConnected { get; private set; } // 연결 상태를 나타내는 속성

        public PlcCommunication(string portName, int baudRate, MainViewModel viewModel)
        {
            _serialPort = new SerialPort(portName, baudRate);
            _viewModel = viewModel;
            IsConnected = false; // 초기 연결 상태는 false
        }

        public void Connect()
        {
            try
            {
                _serialPort.Open();
                IsConnected = true; // 연결 성공 시 true
                Logger.LogInfo("PLC 연결 성공");
            }
            catch (Exception ex)
            {
                IsConnected = false; // 연결 실패 시 false
                Logger.LogError("PLC 연결 실패", ex);
            }
        }

        // 다른 메서드들 ...
    }
}
SocketCommunication.cs
SocketCommunication.cs

csharp
코드 복사
using System;
using System.Net.Sockets;
using RouterFlowSync.Logging;
using RouterFlowSync.ViewModel;
using System.Windows.Media;
using System.Threading;

namespace RouterFlowSync.Communication
{
    public class SocketCommunication
    {
        private TcpClient _client;
        private MainViewModel _viewModel;
        private Timer _reconnectTimer;
        public bool IsConnected { get; private set; } // 연결 상태를 나타내는 속성

        public SocketCommunication(string ipAddress, int port, MainViewModel viewModel)
        {
            _client = new TcpClient();
            _viewModel = viewModel;
            IsConnected = false; // 초기 연결 상태는 false
        }

        public void Connect()
        {
            try
            {
                _client.Connect(ipAddress, port);
                IsConnected = true; // 연결 성공 시 true
                Logger.LogInfo("소켓 연결 성공");
            }
            catch (Exception ex)
            {
                IsConnected = false; // 연결 실패 시 false
                Logger.LogError("소켓 연결 실패", ex);
            }
        }

        // 다른 메서드들 ...
    }
}
VirtualComPortCommunication.cs
VirtualComPortCommunication.cs

csharp
코드 복사
using System;
using System.IO.Ports;
using RouterFlowSync.Logging;
using RouterFlowSync.ViewModel;
using System.Windows.Media;
using System.Threading;

namespace RouterFlowSync.Communication
{
    public class VirtualComPortCommunication
    {
        private SerialPort _serialPort;
        private MainViewModel _viewModel;
        private Timer _reconnectTimer;
        public bool IsConnected { get; private set; } // 연결 상태를 나타내는 속성

        public VirtualComPortCommunication(string portName, int baudRate, MainViewModel viewModel)
        {
            _serialPort = new SerialPort(portName, baudRate);
            _viewModel = viewModel;
            IsConnected = false; // 초기 연결 상태는 false
        }

        public void Connect()
        {
            try
            {
                _serialPort.Open();
                IsConnected = true; // 연결 성공 시 true
                Logger.LogInfo("가상 COM 포트 연결 성공");
            }
            catch (Exception ex)
            {
                IsConnected = false; // 연결 실패 시 false
                Logger.LogError("가상 COM 포트 연결 실패", ex);
            }
        }

        // 다른 메서드들 ...
    }
}
MainWindow.xaml.cs
MainWindow.xaml.cs

csharp
코드 복사
using System;
using System.Windows;
using RouterFlowSync.ViewModel;
using RouterFlowSync.Communication;
using RouterFlowSync.Logging;

namespace RouterFlowSync
{
    public partial class MainWindow : Window
    {
        // MainViewModel 인스턴스
        private MainViewModel _viewModel;
        // 각 통신 클래스 인스턴스
        private PlcCommunication _plcCommunication;
        private SocketCommunication _socketCommunication;
        private VirtualComPortCommunication _virtualComPortCommunication;
        private FileWatcher _fileWatcher;

        // 생성자
        public MainWindow()
        {
            InitializeComponent();
            // ViewModel 초기화 및 DataContext 설정
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            // 각 기능의 통신 클래스 초기화
            _plcCommunication = new PlcCommunication("COM1", 9600, _viewModel);
            _socketCommunication = new SocketCommunication("127.0.0.1", 8080, _viewModel);
            _virtualComPortCommunication = new VirtualComPortCommunication("COM2", 9600, _viewModel);

            // 파일 감시 폴더 설정
            string watchedFolder = @"C:\watchedFolder";
            if (!System.IO.Directory.Exists(watchedFolder))
            {
                // 파일 감시 폴더가 존재하지 않는 경우 로그를 추가하고 상태 색상을 빨간색으로 설정
                _viewModel.AddLog("파일 감시 폴더가 존재하지 않습니다: " + watchedFolder, System.Windows.Media.Brushes.Red);
                _viewModel.FileWatcherStatus.StatusColor = System.Windows.Media.Brushes.Red;
            }
            else
            {
                // 파일 감시 폴더가 존재하는 경우 FileWatcher 인스턴스를 초기화하고 상태 색상을 녹색으로 설정
                _fileWatcher = new FileWatcher(_viewModel, watchedFolder);
                _viewModel.FileWatcherStatus.StatusColor = System.Windows.Media.Brushes.Green;
            }

            // 통신 연결 시도
            _plcCommunication.Connect(); // PLC 통신 연결 시도
            if (!_plcCommunication.IsConnected)
            {
                // PLC 통신 연결 실패 시 로그를 추가하고 상태 색상을 빨간색으로 설정
                _viewModel.AddLog("PLC 통신 연결 실패", System.Windows.Media.Brushes.Red);
                _viewModel.PlcStatus.StatusColor = System.Windows.Media.Brushes.Red;
            }
            else
            {
                // PLC 통신 연결 성공 시 상태 색상을 녹색으로 설정
                _viewModel.PlcStatus.StatusColor = System.Windows.Media.Brushes.Green;
            }

            _socketCommunication.Connect(); // 소켓 통신 연결 시도
            if (!_socketCommunication.IsConnected)
            {
                // 소켓 통신 연결 실패 시 로그를 추가하고 상태 색상을 빨간색으로 설정
                _viewModel.AddLog("소켓 통신 연결 실패", System.Windows.Media.Brushes.Red);
                _viewModel.SocketStatus.StatusColor = System.Windows.Media.Brushes.Red;
            }
            else
            {
                // 소켓 통신 연결 성공 시 상태 색상을 녹색으로 설정
                _viewModel.SocketStatus.StatusColor = System.Windows.Media.Brushes.Green;
            }

            _virtualComPortCommunication.Connect(); // 가상 COM 포트 통신 연결 시도
            if (!_virtualComPortCommunication.IsConnected)
            {
                // 가상 COM 포트 통신 연결 실패 시 로그를 추가하고 상태 색상을 빨간색으로 설정
                _viewModel.AddLog("가상 COM 포트 통신 연결 실패", System.Windows.Media.Brushes.Red);
                _viewModel.ComPortStatus.StatusColor = System.Windows.Media.Brushes.Red;
            }
            else
            {
                // 가상 COM 포트 통신 연결 성공 시 상태 색상을 녹색으로 설정
                _viewModel.ComPortStatus.StatusColor = System.Windows.Media.Brushes.Green;
            }

            // 프로그램 종료 시 이벤트 처리기 등록
            Application.Current.Exit += new ExitEventHandler(OnApplicationExit);
        }

        // 프로그램 종료 시 로그를 기록하는 메서드
        private void OnApplicationExit(object sender, ExitEventArgs e)
        {
            Logger.LogInfo("프로그램이 종료됩니다.");
        }

        // 라디오 버튼 체크 이벤트 처리기
        private void RadioButton_Checked(object sender, RoutedEventArgs e)
        {
            if (_viewModel == null) return;  // 뷰모델이 초기화되지 않았을 경우 예외 처리

            var radioButton = sender as RadioButton;
            string filter = radioButton.Content.ToString();

            // Null 체크 후 Logs 초기화
            if (_viewModel.Logs == null)
            {
                _viewModel.Logs = new System.Collections.ObjectModel.ObservableCollection<RouterFlowSync.ViewModel.LogEntry>();
            }
            else
            {
                _viewModel.Logs.Clear();
            }

            // 선택된 필터에 따라 로그를 필터링
            foreach (var log in Logger.GetLogs())
            {
                if (filter == "전체 로그" ||
                    (filter == "에러 로그" && log.Message.Contains("[ERROR]")) ||
                    (filter == "정보 로그" && log.Message.Contains("[INFO]")))
                {
                    _viewModel.AddLog(log.Message, log.Foreground);
                }
            }
        }
    }
}
이제 각 통신 클래스에 연결 상태를 확인하는 IsConnected 속성을 추가했습니다. 이를 통해 MainWindow.xaml.cs 파일에서 연결 상태를 확인할 수 있습니다. 각 클래스와 파일에 한글 주석을 추가하여 이해하기 쉽