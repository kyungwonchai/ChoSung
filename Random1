도록 구현할 수 있습니다. 이때, 클라이언트는 서버와의 연결 상태를 주기적으로 확인해야 하며, 서버에서 응답이 오지 않거나 연결이 끊어지면 이를 감지해야 합니다.

구현 전략:
서버 연결 상태 체크: 5초마다 서버에 연결이 유지되고 있는지 확인하고, 연결이 끊어지면 재연결 시도.
별도의 상태 체크 로직을 통해 서버에 명령어를 보내기 이전에 연결 상태를 미리 확인.
서버 응답을 기다리지 않고 단순히 연결 여부를 확인할 수 있는 방식으로 구현.
수정된 SocketClientMergeOI.cs (클라이언트 측 연결 상태 체크 및 재연결)
csharp
코드 복사
using System;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public class SocketClientMergeOI
{
    private TcpClient _client; // TCP 클라이언트 객체
    private NetworkStream _stream; // 네트워크 스트림
    private readonly string _ipAddress; // 서버의 IP 주소
    private readonly int _port; // 서버의 포트 번호
    private bool _isConnected; // 서버와의 연결 여부 플래그
    private const int _retryInterval = 3000; // 3초 간격으로 연결 시도
    private const int _checkInterval = 5000; // 5초 간격으로 연결 상태 확인
    private Timer _connectionCheckTimer; // 연결 상태 확인을 위한 타이머

    // 연결 상태가 변경될 때 호출될 이벤트
    public event Action<bool> ConnectionStatusChanged;

    public SocketClientMergeOI(string ipAddress, int port)
    {
        _ipAddress = ipAddress;
        _port = port;
        _client = new TcpClient();
        _isConnected = false;
        StartConnectionAttemptAsync(); // 처음 연결 시도 시작
    }

    // 서버에 연결 시도하는 비동기 함수
    private async void StartConnectionAttemptAsync()
    {
        while (!_isConnected)
        {
            try
            {
                // 서버에 연결 시도
                await _client.ConnectAsync(_ipAddress, _port);
                _isConnected = true; // 연결 성공
                _stream = _client.GetStream(); // 스트림 설정
                ConnectionStatusChanged?.Invoke(true); // 연결 성공 이벤트 호출
                StartReceiving(); // 서버로부터 데이터 수신 시작
                StartConnectionCheck(); // 5초마다 연결 상태 확인 시작
            }
            catch (SocketException)
            {
                // 연결 실패 시 3초 대기 후 다시 연결 시도
                ConnectionStatusChanged?.Invoke(false); // 연결 실패 이벤트 호출
                await Task.Delay(_retryInterval);
            }
        }
    }

    // 서버와의 연결 상태를 5초마다 체크하는 메서드
    private void StartConnectionCheck()
    {
        if (_connectionCheckTimer == null)
        {
            _connectionCheckTimer = new Timer(CheckConnectionStatus, null, 0, _checkInterval);
        }
    }

    // 연결 상태 확인을 위한 메서드
    private void CheckConnectionStatus(object state)
    {
        if (_client != null && !_client.Connected)
        {
            // 연결이 끊어졌으면 재연결 시도
            _isConnected = false;
            ConnectionStatusChanged?.Invoke(false); // 연결 해제 이벤트 호출
            StopConnectionCheck(); // 연결 확인 타이머 중지
            StartConnectionAttemptAsync(); // 재연결 시도
        }
    }

    // 서버로부터 메시지를 수신하는 비동기 함수
    private async void StartReceiving()
    {
        byte[] buffer = new byte[1024]; // 수신할 데이터를 담을 버퍼 생성

        while (_isConnected)
        {
            try
            {
                int bytesRead = await _stream.ReadAsync(buffer, 0, buffer.Length); // 데이터를 비동기적으로 읽음
                if (bytesRead > 0)
                {
                    string receivedMessage = Encoding.ASCII.GetString(buffer, 0, bytesRead); // 수신된 데이터를 문자열로 변환
                    Console.WriteLine($"Received: {receivedMessage}");
                }
            }
            catch (Exception)
            {
                // 서버와의 연결이 끊긴 경우
                _isConnected = false; // 연결 플래그를 false로 설정
                ConnectionStatusChanged?.Invoke(false); // 연결 해제 이벤트 호출
                StopConnectionCheck(); // 연결 확인 타이머 중지
                StartConnectionAttemptAsync(); // 연결 재시도 시작
            }
        }
    }

    // 서버로 메시지를 전송하는 비동기 함수
    public async Task<string> SendAndReceiveMessageAsync(string message)
    {
        if (!_isConnected) // 연결이 되어 있지 않으면
        {
            return "Not connected";
        }

        string fullMessage = $"\x02{message}\x03"; // STX 및 ETX 추가
        byte[] messageBytes = Encoding.ASCII.GetBytes(fullMessage);

        try
        {
            await _stream.WriteAsync(messageBytes, 0, messageBytes.Length); // 메시지 전송
        }
        catch (Exception)
        {
            _isConnected = false; // 연결 문제 발생 시 플래그 변경
            ConnectionStatusChanged?.Invoke(false); // 연결 해제 이벤트 호출
            StopConnectionCheck(); // 연결 확인 타이머 중지
            StartConnectionAttemptAsync(); // 연결 재시도 시작
            return "Send failed. Connection lost.";
        }

        // 서버로부터 응답 대기
        try
        {
            byte[] buffer = new byte[1024];
            int bytesRead = await _stream.ReadAsync(buffer, 0, buffer.Length); // 응답 수신
            if (bytesRead > 0)
            {
                string receivedMessage = Encoding.ASCII.GetString(buffer, 0, bytesRead);
                return receivedMessage;
            }
        }
        catch (Exception)
        {
            _isConnected = false; // 서버와의 연결 끊김 감지
            ConnectionStatusChanged?.Invoke(false); // 연결 해제 이벤트 호출
            StopConnectionCheck(); // 연결 확인 타이머 중지
            StartConnectionAttemptAsync(); // 연결 재시도 시작
        }

        return "No response.";
    }

    // 연결 상태 확인을 중지하는 메서드
    private void StopConnectionCheck()
    {
        _connectionCheckTimer?.Dispose();
        _connectionCheckTimer = null;
    }

    // 연결을 중지하는 함수
    public void StopConnection()
    {
        _isConnected = false;
        _stream?.Close();
        _client?.Close();
        ConnectionStatusChanged?.Invoke(false); // 연결 해제 이벤트 호출
        StopConnectionCheck(); // 연결 상태 확인 타이머 중지
    }
}
주요 변경 사항:
연결 상태 체크 타이머 (_connectionCheckTimer):

서버에 연결된 후 5초마다 연결 상태를 확인합니다. 이때 TcpClient.Connected 속성을 사용하여 서버 연결이 유지되고 있는지 확인합니다.
만약 연결이 끊어졌다면, 즉시 재연결을 시도합니다.
연결 상태 확인 및 재연결:

CheckConnectionStatus 메서드에서 연결 상태를 확인하고, 끊어진 경우 다시 **StartConnectionAttemptAsync**를 호