using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class PlcMutocolCommunication
{
    private SerialPort _serialPort;
    private const int _timeout = 30000; // 30초 타임아웃

    public PlcMutocolCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.DataBits = 8;
        _serialPort.Parity = Parity.None;
        _serialPort.StopBits = StopBits.One;
        _serialPort.ReadTimeout = _timeout;
        _serialPort.WriteTimeout = _timeout;
    }

    public void OpenPort()
    {
        if (!_serialPort.IsOpen)
        {
            _serialPort.Open();
        }
    }

    public void ClosePort()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    private async Task WriteCommandAsync(string command)
    {
        byte[] commandBytes = Encoding.ASCII.GetBytes(command);
        await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
    }

    private async Task<string> ReadResponseAsync()
    {
        byte[] buffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length);
        return Encoding.ASCII.GetString(buffer, 0, bytesRead);
    }

    // 주소를 5자리로 포맷합니다.
    private string FormatAddress(string address)
    {
        if (address.Length == 6 && char.IsLetter(address[0]) && int.TryParse(address.Substring(1), out int numericAddress))
        {
            return $"{address[0]}{numericAddress:D5}";
        }
        return "D00000"; // 잘못된 주소일 경우 기본값
    }

    public async Task<string> SendSimpleAsync(string address, string value, bool waitForResponse)
    {
        string formattedAddress = FormatAddress(address);
        string formattedValue = FormatValue(value);
        string command = $"%01#W{formattedAddress}{formattedValue}0100**";
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "응답 없음 (대기 안 함)";
    }

    // 값 포맷팅은 4자리 숫자로 처리합니다.
    private string FormatValue(string value)
    {
        if (int.TryParse(value, out int numericValue))
        {
            return numericValue.ToString("D4"); // 1 -> 0001
        }
        else
        {
            return "0000"; // 잘못된 값 처리
        }
    }

    // 명령어 생성 함수를 포함하지 않고 있습니다.
}
