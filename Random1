using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System; // IDisposable 사용
using System.Collections.Generic; // List, IEnumerable 사용
using System.Collections.ObjectModel;
using System.Data.Entity; // EF6 네임스페이스 (ToListAsync 등)
using System.Data.Entity.Infrastructure; // DbUpdateException, DbEntityEntry (EF6)
using System.Linq;
using System.Threading.Tasks;
using System.Windows; // MessageBox 사용
using System.Windows.Input;

namespace LockerManagementApp.ViewModels
{
    /// <summary>
    /// 메인 ViewModel 클래스 (.NET Framework 4.8 버전)
    /// DbContext를 직접 생성하고 관리합니다.
    /// </summary>
    public class MainViewModel : ViewModelBase, IDisposable // IDisposable 구현
    {
        private LockerDbContext _context; // DbContext 인스턴스
        private ObservableCollection<LockerAssignment> _lockerAssignments;
        private LockerAssignment _selectedAssignment; // Nullable ? 제거
        private string _statusBarText = "준비 완료";
        private string _currentAdmin = "홍길동A"; // 예시 관리자

        public ObservableCollection<LockerAssignment> LockerAssignments
        {
            get => _lockerAssignments;
            set => SetProperty(ref _lockerAssignments, value);
        }

        public LockerAssignment SelectedAssignment
        {
            get => _selectedAssignment;
            set
            {
                if (SetProperty(ref _selectedAssignment, value))
                {
                    ((RelayCommand)DeleteCommand).RaiseCanExecuteChanged();
                    ((RelayCommand)ClearAssignmentCommand).RaiseCanExecuteChanged();
                }
            }
        }

        public string StatusBarText
        {
            get => _statusBarText;
            set => SetProperty(ref _statusBarText, value);
        }

        // --- Commands ---
        public ICommand LoadDataCommand { get; }
        public ICommand SaveChangesCommand { get; }
        public ICommand AddNewCommand { get; }
        public ICommand DeleteCommand { get; }
        public ICommand ClearAssignmentCommand { get; }

        // --- Predefined Lists ---
        public List<string> LockerTypes { get; } = new List<string> { "개인사물함", "락커", "신발장" };
        public List<string> Floors { get; } = new List<string> { "B1", "1", "2", "3", "4" };
        public List<string> Zones { get; } = new List<string> { "A", "B", "C", "D", "E", "F", "G", "H", "B1", "B2", "B3", "B4", "1F", "2F", "3F", "4F", "기타" };
        public List<string> SubParts { get; } = new List<string> { "Main(시생산)", "MainA", "MainB", "MainC", "MainD", "MainE", "MainF", "MainG", "MainH", "MainI", "MainJ", "MainK", "MainL", "MainM", "MainN", "MainO", "MainP", "MainQ", "MainR", "MainS", "MainT", "MainU", "MainV", "MainW", "MainX", "MainY", "MainZ" };
        public List<string> Administrators { get; } = new List<string> { "홍길동A", "홍길동B", "홍길동C", "홍길동D", "홍길동E", "홍길동F", "홍길동G", "홍길동H", "홍길동I", "홍길동J", "홍길동K", "홍길동L", "홍길동M", "홍길동N", "홍길동O", "홍길동P", "홍길동Q", "홍길동R", "홍길동S", "홍길동T", "홍길동U", "홍길동V", "홍길동W", "홍길동X" };

        /// <summary>
        /// MainViewModel 생성자. DbContext를 직접 생성합니다.
        /// </summary>
        public MainViewModel()
        {
            try
            {
                _context = new LockerDbContext(); // DbContext 직접 생성
            }
            catch (Exception ex)
            {
                 MessageBox.Show($"데이터베이스 컨텍스트 생성 중 오류 발생:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                 StatusBarText = "데이터베이스 연결 오류!";
                 return;
            }

            _lockerAssignments = new ObservableCollection<LockerAssignment>();

            // Command 초기화
            LoadDataCommand = new RelayCommand(async _ => await LoadDataAsync());
            SaveChangesCommand = new RelayCommand(async _ => await SaveChangesAsync());
            AddNewCommand = new RelayCommand(AddNewLocker);
            DeleteCommand = new RelayCommand(async _ => await DeleteSelectedAsync(), _ => SelectedAssignment != null);
            ClearAssignmentCommand = new RelayCommand(ClearSelectedAssignment, _ => SelectedAssignment != null && SelectedAssignment.IsAssigned);

            // 생성 시 데이터 로드
            if (_context != null)
            {
                 _ = LoadDataAsync();
            }
        }

        private async Task LoadDataAsync()
        {
            if (_context == null) return;

            StatusBarText = "데이터 로딩 중...";
            try
            {
                var assignments = await _context.LockerAssignments
                                               .OrderBy(l => l.Floor)
                                               .ThenBy(l => l.Zone)
                                               .ThenBy(l => l.SpecificLocation)
                                               .ToListAsync();
                LockerAssignments = new ObservableCollection<LockerAssignment>(assignments);
                StatusBarText = $"총 {LockerAssignments.Count}개의 레코드를 로드했습니다.";
            }
            catch (Exception ex)
            {
                StatusBarText = $"데이터 로딩 오류: {ex.Message}";
                MessageBox.Show($"데이터베이스 연결 또는 쿼리 실행 중 오류가 발생했습니다:\n{ex.Message}\n\nApp.config의 연결 문자열을 확인하고 데이터베이스 서버가 실행 중인지 확인하세요.", "로드 오류", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private async Task SaveChangesAsync()
        {
             if (_context == null) return;

            StatusBarText = "변경 사항 저장 중...";
            try
            {
                 var changedEntries = _context.ChangeTracker.Entries<LockerAssignment>()
                    .Where(e => e.State == EntityState.Added || e.State == EntityState.Modified);

                 // 중복 검사 로직 (UI 컬렉션 기준)
                 var allItemsToCheck = LockerAssignments.ToList();
                 var duplicates = allItemsToCheck
                    .GroupBy(l => new { l.Floor, l.Zone, l.SpecificLocation })
                    .Where(g => g.Count() > 1)
                    .Select(g => g.Key);

                 if (duplicates.Any())
                 {
                     MessageBox.Show($"저장할 수 없습니다. 중복된 물리적 사물함 위치가 발견되었습니다: {string.Join(", ", duplicates.Select(d => $"{d.Floor}-{d.Zone}-{d.SpecificLocation}"))}", "유효성 검사 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                     StatusBarText = "중복 위치로 인해 저장 실패.";
                     // 변경 사항 롤백 (ToList() 추가)
                     RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList());
                     return;
                 }

                // 관리자 정보 설정
                foreach(var entry in changedEntries)
                {
                    entry.Entity.Administrator = _currentAdmin;
                }

                int changedCount = await _context.SaveChangesAsync();
                StatusBarText = $"성공적으로 {changedCount}개의 변경 사항을 저장했습니다.";
            }
            catch (DbUpdateException dbEx)
            {
                var innerExceptionMessage = dbEx.InnerException?.Message ?? dbEx.Message;
                StatusBarText = $"데이터 저장 오류: {innerExceptionMessage}";
                MessageBox.Show($"데이터베이스에 변경 사항을 저장하는 중 오류가 발생했습니다:\n{innerExceptionMessage}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                // 변경 사항 롤백 (ToList() 추가)
                RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList());
            }
            catch (Exception ex)
            {
                StatusBarText = $"데이터 저장 오류: {ex.Message}";
                MessageBox.Show($"저장 중 예기치 않은 오류가 발생했습니다:\n{ex.Message}", "저장 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                // 변경 사항 롤백 (ToList() 추가)
                RollbackChanges(_context.ChangeTracker.Entries().Where(e => e.State != EntityState.Unchanged).ToList());
            }
        }

        /// <summary>
        /// EF6에서 변경 사항 롤백 (간단 버전)
        /// </summary>
        /// <param name="changedEntries">롤백할 엔티티 목록 (List<DbEntityEntry> 형태 권장)</param>
        private void RollbackChanges(IEnumerable<DbEntityEntry> changedEntries) // 파라미터 타입은 IEnumerable 유지
        {
            if (_context == null) return;

            // ToList()를 호출하여 반복 중 컬렉션 변경 문제를 방지하고,
            // 명시적으로 List 타입으로 변환하여 타입 추론 오류 가능성을 줄입니다.
            // (메서드 내부에서 이미 ToList()를 사용하고 있었으므로, 호출부에서 ToList()를 추가하는 것이 핵심)
            foreach (var entry in changedEntries.ToList())
            {
                switch (entry.State)
                {
                    case EntityState.Modified:
                        // 수정된 경우, 원본 값으로 되돌립니다.
                        entry.CurrentValues.SetValues(entry.OriginalValues);
                        entry.State = EntityState.Unchanged;
                        break;
                    case EntityState.Added:
                        // 추가된 경우, 컨텍스트에서 분리(Detach)합니다.
                        entry.State = EntityState.Detached;
                        // UI 컬렉션(ObservableCollection)에서도 해당 항목을 제거해야 합니다.
                        if (entry.Entity is LockerAssignment addedEntity && LockerAssignments.Contains(addedEntity))
                        {
                            LockerAssignments.Remove(addedEntity);
                        }
                        break;
                    case EntityState.Deleted:
                        // 삭제 표시된 경우, 상태를 Unchanged로 되돌립니다.
                        // (DB에서 실제로 삭제되지 않았으므로)
                        entry.State = EntityState.Unchanged;
                        // 또는 OriginalValues로 복원 후 Unchanged 처리도 가능
                        break;
                }
            }
             StatusBarText = "변경 사항이 롤백되었습니다.";
        }


        private void AddNewLocker(object parameter)
        {
            if (_context == null) return;

            var newAssignment = new LockerAssignment
            {
                LockerType = LockerTypes.FirstOrDefault() ?? "개인사물함",
                Floor = Floors.FirstOrDefault() ?? "1",
                Zone = Zones.FirstOrDefault() ?? "A",
                SpecificLocation = "새 위치-" + Guid.NewGuid().ToString().Substring(0, 4),
                Administrator = _currentAdmin,
                LastUpdated = DateTime.Now
            };
            LockerAssignments.Add(newAssignment);
            _context.LockerAssignments.Add(newAssignment);
            SelectedAssignment = newAssignment;
            StatusBarText = "새 사물함이 추가되었습니다. 세부 정보를 입력하고 '변경 사항 저장'을 클릭하세요.";
        }

        private async Task DeleteSelectedAsync()
        {
             if (_context == null || SelectedAssignment == null) return;

            if (MessageBox.Show($"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 사물함 정보를 정말 삭제하시겠습니까?",
                                "삭제 확인", MessageBoxButton.YesNo, MessageBoxImage.Warning) == MessageBoxResult.Yes)
            {
                StatusBarText = "레코드 삭제 중...";
                try
                {
                    var assignmentToDelete = SelectedAssignment;
                    var entry = _context.Entry(assignmentToDelete);
                    if (entry.State == EntityState.Detached)
                    {
                         _context.LockerAssignments.Attach(assignmentToDelete);
                    }
                     _context.LockerAssignments.Remove(assignmentToDelete);

                    int changedCount = await _context.SaveChangesAsync();

                    LockerAssignments.Remove(assignmentToDelete);
                    SelectedAssignment = null;
                    StatusBarText = $"성공적으로 {changedCount}개의 레코드를 삭제했습니다.";
                }
                 catch (DbUpdateException dbEx)
                {
                    var innerExceptionMessage = dbEx.InnerException?.Message ?? dbEx.Message;
                    StatusBarText = $"데이터 삭제 오류: {innerExceptionMessage}";
                    MessageBox.Show($"데이터베이스에서 레코드를 삭제하는 중 오류가 발생했습니다:\n{innerExceptionMessage}", "삭제 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                    // 오류 발생 시 엔티티 상태 복원 시도
                    if (dbEx.Entries.Any())
                    {
                         _context.Entry(dbEx.Entries.First().Entity).State = EntityState.Unchanged;
                    }
                    await LoadDataAsync();
                }
                catch (Exception ex)
                {
                    StatusBarText = $"데이터 삭제 오류: {ex.Message}";
                     MessageBox.Show($"삭제 중 예기치 않은 오류가 발생했습니다:\n{ex.Message}", "삭제 오류", MessageBoxButton.OK, MessageBoxImage.Error);
                     await LoadDataAsync();
                }
            }
        }

        private void ClearSelectedAssignment(object parameter)
        {
             if (_context == null || SelectedAssignment == null) return;

            SelectedAssignment.UserName = null;
            SelectedAssignment.KnoxId = null;
            SelectedAssignment.SubPart = null;

            _context.Entry(SelectedAssignment).State = EntityState.Modified;
            SelectedAssignment.Administrator = _currentAdmin;

            StatusBarText = $"'{SelectedAssignment.Floor}-{SelectedAssignment.Zone}-{SelectedAssignment.SpecificLocation}' 사물함의 배정을 해제했습니다. 변경 사항을 저장하세요.";
        }


        #region IDisposable 구현
        private bool disposed = false;

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    _context?.Dispose();
                }
                disposed = true;
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
        #endregion
    }