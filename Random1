는 수정된 코드로, DevExpress WPF ChartControl에서 축 제목 설정 및 가시성 문제를 해결한 전체 코드를 제공합니다. DevExpress 22.2 환경에서 테스트된 구성입니다.

XAML (MainWindow.xaml)
xml
코드 복사
<Window x:Class="RouterAlaskaResultViewer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxc="http://schemas.devexpress.com/winfx/2008/xaml/charts"
        Title="Router Alaska Result Viewer" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="2*" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Main Chart: 라인별 표준편차 -->
        <dxc:ChartControl Grid.Row="0" x:Name="MainChart" MouseUp="MainChart_MouseUp">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <!-- X축 설정 -->
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Line Name" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <!-- Y축 설정 -->
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="Standard Deviation" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>

                    <!-- Series -->
                    <dxc:BarSideBySideSeries2D DisplayName="Standard Deviation"
                                               DataSource="{Binding MainChartData}"
                                               ArgumentDataMember="LineName"
                                               ValueDataMember="StdDev">
                    </dxc:BarSideBySideSeries2D>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>

        <!-- Detail Chart: 모델별 MP1~N 차트 -->
        <dxc:ChartControl Grid.Row="1" x:Name="DetailChart">
            <dxc:ChartControl.Diagram>
                <dxc:XYDiagram2D>
                    <!-- X축 설정 -->
                    <dxc:XYDiagram2D.AxisX>
                        <dxc:AxisX2D>
                            <dxc:AxisX2D.Title>
                                <dxc:AxisTitle Content="Timestamp" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisX2D.Title>
                        </dxc:AxisX2D>
                    </dxc:XYDiagram2D.AxisX>

                    <!-- Y축 설정 -->
                    <dxc:XYDiagram2D.AxisY>
                        <dxc:AxisY2D>
                            <dxc:AxisY2D.Title>
                                <dxc:AxisTitle Content="MP Data" Visibility="Visible" Alignment="Center" />
                            </dxc:AxisY2D.Title>
                        </dxc:AxisY2D>
                    </dxc:XYDiagram2D.AxisY>

                    <!-- Series -->
                    <dxc:LineSeries2D DisplayName="MP Data"
                                      DataSource="{Binding DetailChartData}"
                                      ArgumentDataMember="Timestamp"
                                      ValueDataMember="Value">
                    </dxc:LineSeries2D>
                </dxc:XYDiagram2D>
            </dxc:ChartControl.Diagram>
        </dxc:ChartControl>
    </Grid>
</Window>
C# (MainWindow.xaml.cs)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using System.Windows.Input;

namespace RouterAlaskaResultViewer
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<LineData> MainChartData { get; set; } = new ObservableCollection<LineData>();
        public ObservableCollection<DetailData> DetailChartData { get; set; } = new ObservableCollection<DetailData>();

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;
            LoadMainChartData();
        }

        private void LoadMainChartData()
        {
            try
            {
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT LineName, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM YourTable WHERE LineName IS NOT NULL";

                    using (var command = new SqlCommand(query, connection))
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var lineName = reader.GetString(0);
                            var mpData = new[]
                            {
                                reader.GetDouble(1),
                                reader.GetDouble(2),
                                reader.GetDouble(3),
                                reader.GetDouble(4),
                                reader.GetDouble(5)
                            };

                            var stdDev = CalculateStandardDeviation(mpData);
                            MainChartData.Add(new LineData { LineName = lineName, StdDev = stdDev });
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private void MainChart_MouseUp(object sender, MouseButtonEventArgs e)
        {
            var selectedLine = "SelectedLineName"; // 클릭한 라인 이름 (예: "Line1")
            LoadDetailChartData(selectedLine);
        }

        private void LoadDetailChartData(string lineName)
        {
            try
            {
                DetailChartData.Clear();
                var connectionString = "YourConnectionString";
                using (var connection = new SqlConnection(connectionString))
                {
                    connection.Open();
                    var query = @"SELECT Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                                  FROM YourTable
                                  WHERE LineName = @lineName AND (MP1DATA < 99 AND MP2DATA < 99 AND MP3DATA < 99 AND MP4DATA < 99 AND MP5DATA < 99)
                                  ORDER BY Timestamp DESC";

                    using (var command = new SqlCommand(query, connection))
                    {
                        command.Parameters.AddWithValue("@lineName", lineName);

                        using (var reader = command.ExecuteReader())
                        {
                            while (reader.Read())
                            {
                                var timestamp = reader.GetDateTime(0);

                                for (int i = 1; i <= 5; i++) // MP1~MP5
                                {
                                    var value = reader.GetDouble(i);
                                    DetailChartData.Add(new DetailData
                                    {
                                        Timestamp = timestamp,
                                        Value = value,
                                        MPNumber = $"MP{i}"
                                    });
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error: {ex.Message}");
            }
        }

        private double CalculateStandardDeviation(double[] values)
        {
            if (values.Length == 0) return 0;

            var mean = values.Average();
            var variance = values.Select(v => Math.Pow(v - mean, 2)).Average();
            return Math.Sqrt(variance);
        }
    }

    public class LineData
    {
        public string LineName { get; set; }
        public double StdDev { get; set; }
    }

    public class DetailData
    {
        public DateTime Timestamp { get; set; }
        public double Value { get; set; }
        public string MPNumber { get; set; }
    }
}
주요 수정사항
AxisTitle 사용: Title 대신 AxisTitle 객체를 사용하여 축 제목의 가시성 문제 해결.
Visibility="Visible": 축 제목이 기본적으로 보이지 않으므로 명시적으로 가시성을 설정.