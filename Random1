MVVM 패턴에서 RelayCommand를 사용하여 컨트롤 키가 눌린 상태로 버튼이 클릭되었는지 확인하는 방법은 다음과 같습니다. 이를 위해서는 Keyboard.Modifiers 속성을 사용하여 키보드 수정자가 눌려 있는지를 확인할 수 있습니다.

다음은 컨트롤 키가 눌린 상태에서 버튼이 눌렸는지 확인하는 예제 코드입니다.

1. ViewModel (MainViewModel.cs)
csharp
코드 복사
using System;
using System.Windows.Input;

public class MainViewModel
{
    public ICommand ButtonCommand { get; }

    public MainViewModel()
    {
        // RelayCommand 생성, Execute와 CanExecute 정의
        ButtonCommand = new RelayCommand(ExecuteButtonCommand, CanExecuteButtonCommand);
    }

    private void ExecuteButtonCommand(object parameter)
    {
        // 컨트롤 키가 눌린 상태에서 버튼이 클릭된 경우의 처리
        if (Keyboard.Modifiers == ModifierKeys.Control)
        {
            // 컨트롤 키가 눌린 상태
            msgvs.Instance.LogT5("Control key is pressed while button clicked");
        }
        else
        {
            // 컨트롤 키가 눌리지 않음
            msgvs.Instance.LogT5("Control key is not pressed while button clicked");
        }
    }

    private bool CanExecuteButtonCommand(object parameter)
    {
        // 항상 실행 가능하도록 설정
        return true;
    }
}
2. RelayCommand 클래스
RelayCommand 클래스는 ICommand 인터페이스를 구현하는 클래스입니다. MVVM 패턴에서 명령을 쉽게 처리하기 위해 사용됩니다.

csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action<object> _execute;
    private readonly Func<object, bool> _canExecute;

    public RelayCommand(Action<object> execute, Func<object, bool> canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute(parameter);
    }

    public void Execute(object parameter)
    {
        _execute(parameter);
    }

    public event EventHandler CanExecuteChanged
    {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }
}
3. XAML (MainWindow.xaml)
버튼이 클릭될 때 ButtonCommand를 호출하도록 XAML에서 설정합니다.

xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="200" Width="400">
    <Grid>
        <Button Content="Click Me" Command="{Binding ButtonCommand}" Width="100" Height="30"/>
    </Grid>
</Window>
4. MainWindow.xaml.cs
ViewModel을 DataContext로 설정합니다.

csharp
코드 복사
using System.Windows;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
        DataContext = new MainViewModel();
    }
}
설명
Keyboard.Modifiers 속성을 사용하여 현재 눌린 키보드 수정자(컨트롤, 쉬프트, 알트 등)를 확인할 수 있습니다.
ExecuteButtonCommand 메서드에서 컨트롤 키가 눌린 상태를 확인한 후 로그를 출력합니다.
XAML에서 Command 바인딩을 통해 버튼 클릭 시 ViewModel의 명령이 호출되도록 연결합니다.
이 코드는 컨트롤 키가 눌린 상태에서 버튼이 클릭되었는지를 MVVM 패턴으로 처리하는 방법을 보여줍니다