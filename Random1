된 컨버터의 실제 코드와, UI 에러 상태 설정을 담당하는 리스트박스 관련 코드 등을 포함하여 수정된 전체 코드를 제공합니다. 각 코드 파일에는 매 줄마다 상세한 주석과 응용법을 포함하도록 하겠습니다.

1. BoolToBrushConverter.cs
먼저, MainWindow.xaml에서 사용된 BoolToBrushConverter의 실제 코드를 작성합니다. 이 컨버터는 Boolean 값을 Brush로 변환하여 UI에서 상태를 시각적으로 표현하는 데 사용됩니다.

BoolToBrushConverter.cs
csharp
코드 복사
using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace RouterFlowSync.Converters
{
    // Boolean 값을 Brush로 변환하는 클래스입니다.
    public class BoolToBrushConverter : IValueConverter
    {
        // Convert 메서드는 UI에서 사용될 Brush 값을 결정합니다.
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool isRunning) // 입력 값이 bool인지 확인합니다.
            {
                // isRunning이 true면 초록색, 아니면 빨간색 Brush를 반환합니다.
                return isRunning ? Brushes.Green : Brushes.Red;
            }

            // 입력 값이 bool이 아닌 경우, 투명한 Brush를 반환합니다.
            return Brushes.Transparent;
        }

        // ConvertBack 메서드는 사용되지 않으므로 NotImplementedException을 던집니다.
        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
주요 설명 및 응용 방법:
Convert 메서드: Boolean 값을 받아서 true인 경우 초록색, false인 경우 빨간색 브러시를 반환하여 상태를 시각적으로 표시합니다.
ConvertBack 메서드: 이 메서드는 사용되지 않으며, 호출 시 예외를 발생시킵니다.
응용 방법: 이 컨버터는 MainWindow.xaml에서 Ellipse의 Fill 속성에 바인딩되어 UI에서 상태를 시각적으로 표현합니다.
2. MainWindow.xaml 수정
UI에 에러 상태 설정을 담당하는 리스트박스를 추가하고 관련 코드를 포함합니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="RouterFlowSync.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:RouterFlowSync.Converters"
        mc:Ignorable="d"
        Title="RouterFlowSync" Height="600" Width="800">
    <Window.Resources>
        <!-- BoolToBrushConverter를 리소스로 등록합니다. -->
        <local:BoolToBrushConverter x:Key="BoolToBrushConverter"/>
    </Window.Resources>
    <Grid>
        <!-- 탭 컨트롤 영역: 여러 탭을 통해 다양한 기능을 제공합니다. -->
        <TabControl Name="MainTabControl" Margin="10" VerticalAlignment="Top">

            <!-- 첫 번째 탭: 마이야 -->
            <TabItem Header="마이야">
                <!-- StackPanel을 사용하여 탭의 내용을 수직으로 배치합니다. -->
                <StackPanel Margin="10">
                    <!-- 대시보드 제목 -->
                    <TextBlock Text="마이야 - 상태 대시보드" FontSize="20" FontWeight="Bold" HorizontalAlignment="Center" Margin="10"/>
                    
                    <!-- 상태 표시를 위한 Grid 컨테이너 -->
                    <Grid>
                        <!-- Grid의 열 정의: 3개의 열을 균등하게 나눕니다. -->
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!-- 라우터 설비 로그 수집 상태 표시 -->
                        <StackPanel Grid.Column="0" Margin="10" MouseDown="RouterLog_Click">
                            <!-- 전구 형태의 상태 표시 -->
                            <Ellipse Fill="{Binding IsRouterLogRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                            <!-- 라우터 설비 로그 텍스트 -->
                            <TextBlock Text="라우터 설비 로그" FontWeight="Bold"/>
                            <!-- 최근 동작 시간 표시 -->
                            <TextBlock Text="{Binding LastRouterLogTime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                        </StackPanel>

                        <!-- PLC 중계 상태 표시 -->
                        <StackPanel Grid.Column="1" Margin="10" MouseDown="PLCRelay_Click">
                            <!-- 전구 형태의 상태 표시 -->
                            <Ellipse Fill="{Binding IsPLCRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                            <!-- PLC 중계 텍스트 -->
                            <TextBlock Text="PLC 중계" FontWeight="Bold"/>
                            <!-- 최근 동작 시간 표시 -->
                            <TextBlock Text="{Binding LastPLCTime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                        </StackPanel>

                        <!-- 병합 OI 중계 상태 표시 -->
                        <StackPanel Grid.Column="2" Margin="10" MouseDown="OICombine_Click">
                            <!-- 전구 형태의 상태 표시 -->
                            <Ellipse Fill="{Binding IsOIRunning, Converter={StaticResource BoolToBrushConverter}}" Width="50" Height="50" />
                            <!-- 병합 OI 중계 텍스트 -->
                            <TextBlock Text="병합 OI 중계" FontWeight="Bold"/>
                            <!-- 최근 동작 시간 표시 -->
                            <TextBlock Text="{Binding LastOITime, StringFormat='최근 동작 시간: {0:HH:mm:ss}'}"/>
                        </StackPanel>
                    </Grid>

                    <!-- 에러 상태 리스트박스 -->
                    <ListBox Name="ErrorLogListBox" ItemsSource="{Binding ErrorLogs}" MaxHeight="100" Foreground="Red"/>
                </StackPanel>
            </TabItem>

            <!-- 라우터 설비 로그 수집 탭 -->
            <TabItem Header="라우터 설비 로그 수집">
                <!-- StackPanel을 사용하여 탭의 내용을 수직으로 배치합니다. -->
                <StackPanel Margin="10">
                    <!-- 네트워크 경로 텍스트 -->
                    <TextBlock Text="네트워크 경로:" FontWeight="Bold"/>
                    <TextBlock Text="{Binding NetworkPath}" Margin="0,0,0,10"/>
                    <!-- 파일 규칙 텍스트 -->
                    <TextBlock Text="파일 규칙 (정규식):" FontWeight="Bold"/>
                    <TextBlock Text="{Binding FilePattern}" Margin="0,0,0,10"/>
                    <!-- 로그 저장 경로 텍스트 -->
                    <TextBlock Text="로그 저장 경로:" FontWeight="Bold"/>
                    <TextBlock Text="C:\Agent\RouterFlowSync\Log\RouterFiles" Margin="0,0,0,10"/>
                    <!-- 파일 처리 로그 리스트박스 -->
                    <ListBox ItemsSource="{Binding FileProcessingLogs}" MaxHeight="200"/>
                    <!-- 점검 목록 텍스트 -->
                    <TextBlock Text="점검 목록:" FontWeight="Bold" Margin="10,10,0,0"/>
                    <ListBox ItemsSource="{Binding CheckList}" MaxHeight="100"/>
                </StackPanel>
            </TabItem>

            <!-- PLC 중계 탭 -->
            <TabItem Header="PLC 중계">
                <!-- StackPanel을 사용하여 탭의 내용을 수직으로 배치합니다. -->
                <StackPanel Margin="10">
                    <!-- 포트 설정과 관련된 UI 요소들을 여기에 배치 -->
                    <!-- 예: 사용 가능한 포트 선택, 설정 저장 버튼 등 -->
                </StackPanel>
            </TabItem>

            <!-- 병합 OI 중계 탭 -->
            <TabItem Header="병합 OI 중계">
                <!-- StackPanel을 사용하여 탭의 내용을 수직으로 배치합니다. -->
                <StackPanel Margin="10">
                    <!-- 포트 설정과 관련된 UI 요소들을 여기에 배치 -->
                    <!-- 예: 사용 가능한 포트 선택, 설정 저장 버튼 등 -->
                </StackPanel>
            </TabItem>

            <!-- 설정 탭 -->
            <TabItem Header="설정">
                <!-- StackPanel을 사용하여 탭의 내용을 수직으로 배치합니다. -->
                <StackPanel Margin="10">
                    <!-- 설정과 관련된 UI 요소들을 여기에 배치 -->
                    <!-- 예: 라우터 설비 로그 접근 ID/PW 입력, 로그 폴더 열기 버튼 등 -->
                </StackPanel>
            </TabItem>
        </TabControl>
    </Grid>
</Window>
주요 설명 및 주석:
<Window.Resources>: BoolToBrushConverter를 리소스로 등록하여 XAML에서 사용할 수 있도록 설정합니다.
ErrorLogListBox: 에러 로그를 표시하는 리스트박스입니다. Foreground 속성을 빨간색으로 설정하여 에러 로그를 강조합니다.
응용 방법: 이 리스트박스는 ErrorLogs 컬렉션과 바인딩되어 에러 로그를 표시합니다.
3. MainWindow.xaml.cs 수정
UI 에러 상태 설정과 관련된 리스트박스와 이벤트 핸들러 등을 수정합니다.

MainWindow.xaml.cs
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;  // MSSQL 연결을 위한 네임스페이스
using System.IO;
using System.IO.Ports;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Forms;  // 트레이 아이콘을 위한 네임스페이스
using RouterFlowSync.Services;
using RouterFlowSync.ViewModels;
using Microsoft.AspNet.SignalR.Client;  // SignalR 클라이언트를 위한 네임스페이스
using System.Windows.Media;

namespace RouterFlowSync.Views
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;  // ViewModel 인스턴스
        private NotifyIcon _notifyIcon;  // 트레이 아이콘 관리 객체
        private string _connectionString = "Data Source=YOUR_SERVER_NAME;Initial Catalog=YOUR_DATABASE_NAME;Integrated Security=True";  // 데이터베이스 연결 문자열
        private HubConnection _signalRConnection;  // SignalR 서버 연결 객체
        private IHubProxy _hubProxy;  // SignalR 허브 프록시 객체

        public MainWindow()
        {
            InitializeComponent();  // XAML 요소 초기화
            _viewModel = new MainViewModel();  // ViewModel 초기화
            DataContext = _viewModel;  // ViewModel을 DataContext로 설정
            SetupTrayIcon();  // 트레이 아이콘 설정
            LoadSettings();  // 설정 불러오기

            // 프로그램 시작 시 상태를 "Running"으로 설정하고 데이터베이스에 기록
            UpdateDatabaseStatus("Running", "Application started successfully");
            StartStatusCheckTimer();  // 상태 확인 타이머 시작
        }

        // 대시보드에서 라우터 설비 로그 섹션 클릭 시 호출되는 메서드
        private void RouterLog_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 라우터 설비 로그 수집 탭으로 전환
            MainTabControl.SelectedIndex = 1;
        }

        // 대시보드에서 PLC 중계 섹션 클릭 시 호출되는 메서드
        private void PLCRelay_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 PLC 중계 탭으로 전환
            MainTabControl.SelectedIndex = 2;
        }

        // 대시보드에서 병합 OI 중계 섹션 클릭 시 호출되는 메서드
        private void OICombine_Click(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            // 탭을 병합 OI 중계 탭으로 전환
            MainTabControl.SelectedIndex = 3;
        }

        // 트레이 아이콘 설정 메서드
        private void SetupTrayIcon()
        {
            _notifyIcon = new NotifyIcon
            {
                Icon = new System.Drawing.Icon("appicon.ico"),  // 아이콘 설정
                Visible = true  // 트레이 아이콘 표시
            };
            _notifyIcon.DoubleClick += (s, e) => ShowWindow();  // 더블 클릭 시 메인 윈도우 표시

            // 트레이 아이콘의 컨텍스트 메뉴 설정
            var contextMenu = new ContextMenu();
            contextMenu.MenuItems.Add("Open", (s, e) => ShowWindow());
            contextMenu.MenuItems.Add("Exit", (s, e) => CloseApplication());
            _notifyIcon.ContextMenu = contextMenu;
        }

        // 메인 윈도우를 표시하는 메서드
        private void ShowWindow()
        {
            this.Show();  // 윈도우 보이기
            this.WindowState = WindowState.Normal;  // 윈도우 상태를 정상으로 변경
        }

        // 프로그램 종료 메서드
        private void CloseApplication()
        {
            UpdateDatabaseStatus("Stopped", "Application closed by user");  // 데이터베이스에 종료 기록
            _notifyIcon.Dispose();  // 트레이 아이콘 해제
            Application.Current.Shutdown();  // 애플리케이션 종료
        }

        // 데이터베이스 상태 업데이트 메서드
        private void UpdateDatabaseStatus(string status, string message)
        {
            try
            {
                using (SqlConnection conn = new SqlConnection(_connectionString))  // 데이터베이스 연결
                {
                    conn.Open();  // 연결 열기
                    string query = "INSERT INTO RouterFlowSyncStatus (Status, Message) VALUES (@Status, @Message)";
                    using (SqlCommand cmd = new SqlCommand(query, conn))  // SQL 명령 설정
                    {
                        cmd.Parameters.AddWithValue("@Status", status);  // 상태 매개변수 추가
                        cmd.Parameters.AddWithValue("@Message", message);  // 메시지 매개변수 추가
                        cmd.ExecuteNonQuery();  // 쿼리 실행
                    }
                }
            }
            catch (Exception ex)
            {
                HandleError($"Database update failed: {ex.Message}");  // 예외 처리
            }
        }

        // 설정을 불러오는 메서드
        private void LoadSettings()
        {
            // SignalR 설정 로드
            if (SettingsManager.Instance.GetSetting("UseSignalR") == "true")
            {
                InitializeSignalR(SettingsManager.Instance.GetSetting("SignalRServerUrl"));  // SignalR 초기화
            }

            // 에러 로그를 데이터베이스에 기록할지 여부 설정
            if (SettingsManager.Instance.GetSetting("LogErrorsToDatabase") == "true")
            {
                _viewModel.LogErrorsToDatabase = true;  // 설정 반영
            }
        }

        // SignalR 서버 초기화 메서드
        private void InitializeSignalR(string serverUrl)
        {
            try
            {
                _signalRConnection = new HubConnection(serverUrl);  // SignalR 서버 연결 설정
                _hubProxy = _signalRConnection.CreateHubProxy("ErrorHub");  // 허브 프록시 생성
                _signalRConnection.Start().Wait();  // SignalR 서버 시작

                LogService.Instance.LogOperation("Connected to SignalR server successfully");  // 연결 성공 로그 기록
            }
            catch (Exception ex)
            {
                HandleError($"Failed to connect to SignalR server: {ex.Message}");  // 연결 실패 예외 처리
            }
        }

        // 에러 처리 메서드
        private void HandleError(string errorMessage)
        {
            LogService.Instance.LogError(errorMessage);  // 에러 로그 기록
            SetUIErrorState(true);  // UI를 에러 상태로 변경

            // 에러 로그를 데이터베이스에 기록할지 여부 확인
            if (_viewModel.LogErrorsToDatabase)
            {
                UpdateDatabaseStatus("Error", errorMessage);  // 데이터베이스에 에러 로그 기록
            }

            // SignalR 연결이 활성화된 경우 에러 전송
            if (_signalRConnection != null && _signalRConnection.State == ConnectionState.Connected)
            {
                _hubProxy.Invoke("SendError", errorMessage);  // SignalR 서버로 에러 전송
            }

            // 에러 로그를 UI에 추가
            _viewModel.ErrorLogs.Add(errorMessage);
        }

        // UI 에러 상태 설정 메서드
        private void SetUIErrorState(bool isError)
        {
            if (isError)
            {
                this.BorderBrush = Brushes.Red;  // UI 테두리를 빨간색으로 변경
                ErrorLogListBox.Foreground = Brushes.Red;  // 에러 로그 리스트박스의 글씨를 빨간색으로 변경
            }
            else
            {
                this.BorderBrush = Brushes.Gray;  // UI 테두리를 기본 색상으로 변경
                ErrorLogListBox.Foreground = Brushes.Black;  // 에러 로그 리스트박스의 글씨를 기본 색상으로 변경
            }
        }

        // 포트 갱신 버튼 클릭 이벤트 핸들러
        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.RefreshAvailablePorts();  // 사용 가능한 포트 갱신
        }

        // PLC 설정 저장 버튼 클릭 이벤트 핸들러
        private void SavePLCSettings_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SavePLCSettings();  // PLC 설정 저장
        }

        // OI 설정 저장 버튼 클릭 이벤트 핸들러
        private void SaveOISettings_Click(object sender, RoutedEventArgs e)
        {
            _viewModel.SaveOISettings();  // OI 설정 저장
        }

        // 로그 폴더 열기 버튼 클릭 이벤트 핸들러
        private void OpenLogFolder_Click(object sender, RoutedEventArgs e)
        {
            string logFolderPath = "C:\\Agent\\RouterFlowSync\\Log";  // 로그 폴더 경로 설정
            if (Directory.Exists(logFolderPath))  // 로그 폴더가 존재하는지 확인
            {
                System.Diagnostics.Process.Start("explorer.exe", logFolderPath);  // 탐색기에서 로그 폴더 열기
            }
            else
            {
                MessageBox.Show("로그 폴더가 존재하지 않습니다.", "오류", MessageBoxButton.OK, MessageBoxImage.Error);  // 오류 메시지 표시
            }
        }

        // 윈도우 닫기 버튼 클릭 이벤트 핸들러
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;  // 닫기 동작 취소
            this.Hide();  // 윈도우 숨기기
        }

        // 상태 확인 타이머 시작
        private void StartStatusCheckTimer()
        {
            var timer = new System.Windows.Threading.DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(5);  // 5초마다 상태 체크
            timer.Tick += (s, e) => CheckSystemStatus();
            timer.Start();
        }

        // 시스템 상태 확인 메서드
        private void CheckSystemStatus()
        {
            _viewModel.IsRunning = true;  // 시스템이 정상적으로 실행 중임을 가정

            // PLC 또는 OI 연결 상태가 비정상인 경우
            if (!_viewModel.IsPLCConnected || !_viewModel.IsOIConnected)
            {
                _viewModel.CheckList.Clear();  // 기존 점검 목록 초기화

                // PLC 연결 상태가 비정상인 경우 점검 항목 추가
                if (!_viewModel.IsPLCConnected)
                {
                    _viewModel.CheckList.Add("PLC 연결 상태를 확인하세요.");
                }

                // OI 연결 상태가 비정상인 경우 점검 항목 추가
                if (!_viewModel.IsOIConnected)
                {
                    _viewModel.CheckList.Add("OI 연결 상태를 확인하세요.");
                }

                _viewModel.IsRunning = false;  // 동작 상태를 비정상으로 표시
                HandleError("PLC 또는 OI 연결이 끊어졌습니다.");  // 에러 처리
            }
        }
    }
}
주요 설명 및 주석:
ErrorLogListBox와 바인딩: 에러 로그를 표시하기 위해 ErrorLogListBox와 ErrorLogs 컬렉션을 바인딩합니다.
HandleError 메서드: 에러 발생 시 에러 로그를 기록하고, UI 상태를 변경합니다.
SetUIErrorState 메서드: 에러 상태에 따라 UI의 테두리와 리스트박스의 텍스트 색상을 변경합니다.
응용 방법: 이 코드는 에러 발생 시 UI와 로그 파일에 기록하며, 실시간으로 상태를 시각적으로 표시하여 사용자에게 피드백을 제공합니다.
위와 같이 수정된 코드로, 각 파일에는 상세한 주석과 설명이 추가되어 있습니다. 추가적인 질문이나 요청이 있으시면 언제든지 말씀해 주세