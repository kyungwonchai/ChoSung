using System.Windows.Input;
using SwiftAIMaster.Models;
using SwiftAIMaster.Services;
using System.Diagnostics;
using System.IO;
using System.Collections.ObjectModel;

namespace SwiftAIMaster.ViewModels
{
    public class MainViewModel : ViewModelBase
    {
        public TaskManager TaskManager { get; }

        public ObservableCollection<TaskModel> Tasks => TaskManager.Tasks;

        // OpenFolderCommand 구현
        public ICommand OpenFolderCommand { get; }

        public MainViewModel()
        {
            var databaseService = new DatabaseService();
            TaskManager = new TaskManager(databaseService);

            // OpenFolderCommand 초기화
            OpenFolderCommand = new RelayCommand<string>(folderPath =>
            {
                try
                {
                    if (Directory.Exists(folderPath))
                    {
                        Process.Start(new ProcessStartInfo
                        {
                            FileName = folderPath,
                            UseShellExecute = true,
                            Verb = "open"
                        });
                    }
                    else
                    {
                        System.Windows.MessageBox.Show("폴더가 존재하지 않습니다.", "오류", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                    }
                }
                catch
                {
                    System.Windows.MessageBox.Show("폴더를 열 수 없습니다.", "오류", System.Windows.MessageBoxButton.OK, System.Windows.MessageBoxImage.Error);
                }
            });
        }
    }
}
