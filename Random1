아래 코드는 ISensorDataService 인터페이스와 SensorViewModel 클래스, 그리고 센서 데이터를 사용하는 SensorDataConsumer 클래스를 포함하고 있습니다. 각 클래스와 메서드의 역할을 설명하고, 센서의 특정 인덱스만을 읽는 함수를 추가하여 구체적으로 설명합니다.

1. 인터페이스 정의 (ISensorDataService)
위치: 별도의 파일 또는 ViewModel 파일 내
역할: 센서 데이터 접근에 사용되는 메서드들을 정의하는 인터페이스
csharp
코드 복사
public interface ISensorDataService
{
    IEnumerable<SensorModel> GetAllSensors();
    SensorModel GetSensorByIndex(int index);
}
2. ViewModel 구현 (SensorViewModel)
위치: ViewModel 파일
역할: 센서 데이터를 관리하고, 외부에 데이터를 제공하는 메서드들을 구현
csharp
코드 복사
public class SensorViewModel : ISensorDataService, INotifyPropertyChanged
{
    private ObservableCollection<SensorModel> _sensors;

    public ObservableCollection<SensorModel> Sensors
    {
        get { return _sensors; }
        private set
        {
            _sensors = value;
            OnPropertyChanged(nameof(Sensors));
        }
    }

    public SensorViewModel()
    {
        _sensors = new ObservableCollection<SensorModel>();
        InitializeSensors();
    }

    private void InitializeSensors()
    {
        for (int i = 0; i < 100; i++) // 예: 100개의 센서
        {
            _sensors.Add(new SensorModel
            {
                SensorName = $"Sensor {i + 1}",
                IsDetected = false
            });
        }
    }

    // 모든 센서 데이터를 제공하는 메서드
    public IEnumerable<SensorModel> GetAllSensors()
    {
        return _sensors.ToList().AsReadOnly(); // 읽기 전용 컬렉션 반환
    }

    // 특정 인덱스의 센서 데이터만을 제공하는 메서드
    public SensorModel GetSensorByIndex(int index)
    {
        if (index >= 0 && index < _sensors.Count)
        {
            return _sensors[index];
        }
        throw new ArgumentOutOfRangeException("Index out of range");
    }

    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}
3. 데이터 사용 클래스 (SensorDataConsumer)
위치: 소비자 클래스 파일
역할: ViewModel을 통해 센서 데이터를 소비하고 결과를 출력
csharp
코드 복사
public class SensorDataConsumer
{
    private ISensorDataService _sensorService;

    public SensorDataConsumer(ISensorDataService sensorService)
    {
        _sensorService = sensorService;
        DisplaySensorData();
    }

    private void DisplaySensorData()
    {
        var sensors = _sensorService.GetAllSensors();
        foreach (var sensor in sensors)
        {
            Console.WriteLine($"Sensor Name: {sensor.SensorName}, Detected: {sensor.IsDetected}");
        }

        // 특정 인덱스의 센서 데이터 읽기 예시
        try
        {
            var sensor = _sensorService.GetSensorByIndex(10); // 11번째 센서 읽기
            Console.WriteLine($"Sensor 11 - Name: {sensor.SensorName}, Detected: {sensor.IsDetected}");
        }
        catch (ArgumentOutOfRangeException ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}
사용 예
csharp
코드 복사
var viewModel = new SensorViewModel();
var consumer = new SensorDataConsumer(viewModel);
이 코드는 각 센서 데이터를 안전하게 접근하고 필요한 정보만을 노출하는 방법을 제공합니다. 센서의 특정 인덱스만을 읽는 GetSensorByIndex 메서드를 추가하여 더 세밀한 데이터 접근이 가능하게 하였습니다. 이 구조는 데이터 캡슐화와 안정성을 보장하며, 유지보수성과 확장성에