지정된 포맷에 따라 파일 이름과 폴더 구조를 구성하며, 비동기 작업을 통해 UI가 항상 반응하도록 하는 방법을 설명드리겠습니다.

다음은 이 기능을 구현한 예제 코드입니다.

XAML 파일 (MainWindow.xaml):
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Copier" Height="350" Width="525">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="Select Folder" Click="SelectFolderButton_Click" Margin="5"/>
            <CheckBox x:Name="IndividualFolderCheckBox" Content="Individual Folders" Margin="5"/>
        </StackPanel>

        <ListBox x:Name="LogListBox" Grid.Row="1" Margin="10" MaxHeight="200"/>

        <Button x:Name="StartButton" Content="Start" Grid.Row="2" Click="StartButton_Click" Margin="10"/>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs):
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Threading;

namespace WpfApp
{
    public partial class MainWindow : Window
    {
        private ObservableCollection<string> _logMessages = new ObservableCollection<string>();
        private string _selectedFolderPath;
        private readonly string _sourceFilePath = @"C:\Agent\1.jpg";
        private bool _isRunning = false;

        public MainWindow()
        {
            InitializeComponent();
            LogListBox.ItemsSource = _logMessages;
        }

        private void SelectFolderButton_Click(object sender, RoutedEventArgs e)
        {
            var dialog = new System.Windows.Forms.FolderBrowserDialog();
            if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
            {
                _selectedFolderPath = dialog.SelectedPath;
                AddLog($"Selected Folder: {_selectedFolderPath}");
            }
        }

        private void StartButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isRunning)
            {
                MessageBox.Show("Process is already running.");
                return;
            }

            if (string.IsNullOrEmpty(_selectedFolderPath))
            {
                MessageBox.Show("Please select a folder first.");
                return;
            }

            _isRunning = true;
            Task.Run(() => CopyFilesAsync());
        }

        private async Task CopyFilesAsync()
        {
            while (_isRunning)
            {
                var timestamp = DateTime.Now.ToString("yyyyMMddHHmmss");
                var fileName = $"{timestamp}file.jpg";
                var destinationPath = IndividualFolderCheckBox.IsChecked == true
                    ? Path.Combine(_selectedFolderPath, timestamp, fileName)
                    : Path.Combine(_selectedFolderPath, DateTime.Now.ToString("yyyyMMdd"), fileName);

                try
                {
                    var folderPath = Path.GetDirectoryName(destinationPath);
                    if (!Directory.Exists(folderPath))
                    {
                        Directory.CreateDirectory(folderPath);
                    }

                    File.Copy(_sourceFilePath, destinationPath, true);
                    AddLog($"File copied to: {destinationPath}");

                    if (_logMessages.Count > 200)
                    {
                        Dispatcher.Invoke(() => _logMessages.RemoveAt(0));
                    }
                }
                catch (Exception ex)
                {
                    AddLog($"Error: {ex.Message}");
                }

                await Task.Delay(2000); // 2초 대기
            }
        }

        private void AddLog(string message)
        {
            Dispatcher.Invoke(() => _logMessages.Add($"{DateTime.Now:HH:mm:ss} - {message}"));
        }
    }
}
이 예제 코드는 WPF 응용 프로그램을 설정하고, 사용자가 폴더를 선택하고, 설정 옵션(개별 폴더 또는 그룹 폴더)을 선택한 다음, 시작 버튼을 누르면 2초마다 파일을 복사합니다. 복사된 파일의 경로와 로그 메시지를 ListBox에 추가하며, 최대 200개의 로그 항목을 유지합니다.

주요 포인트
비동기 작업: Task.Run과 async/await를 사용하여 비동기적으로 파일을 복사하고 UI가 항상 반응하도록 합니다.
UI 업데이트: Dispatcher.Invoke를 사용하여 UI 요소를 업데이트합니다.
폴더 및 파일 구조: 사용자의 선택에 따라 개별 폴더 또는 그룹 폴더 구조를 만듭니다.
로그 관리: ObservableCollection을 사용하여 로그 메시지를 관리하고, 최대 200개의 항목만 유지합니다.
이 코드를 실행하면 원하