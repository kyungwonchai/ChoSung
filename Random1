전체 시나리오를 상세하게 안내해 드리겠습니다.

📝 시나리오 개요
**가상의 회사 '알파 프로젝트'**가 3개의 웹 서비스를 개발하여 배포하는 상황을 가정하겠습니다.

메인 서비스 (React + Flask)

프론트엔드: app.your_domain.com (React)

백엔드 API: api.your_domain.com (Flask)

데이터 대시보드 (Streamlit)

내부 데이터 분석용: dashboard.your_domain.com

독립 서비스 (Flask)

간단한 마이크로서비스: service.your_domain.com

이 모든 서비스를 하나의 우분투 서버에서 Nginx를 **리버스 프록시(Reverse Proxy)**로 사용하여 배포하는 전체 과정을 단계별로 진행합니다.

👑 1단계: 사전 준비 및 기본 설치
서버에 처음 접속해서 기본적인 패키지를 설치하고 방화벽을 설정하는 단계입니다.

1. 필수 패키지 설치
Bash

# 패키지 목록 업데이트
sudo apt update && sudo apt upgrade -y

# Nginx, Python, 가상환경 도구 설치
sudo apt install -y nginx python3-pip python3-venv

# Node.js 및 npm 설치 (React 빌드를 위함)
sudo apt install -y nodejs npm
2. 방화벽 설정
Nginx가 외부 접속을 받을 수 있도록 방화벽을 설정합니다.

Bash

# Nginx Full 프로필 허용 (HTTP: 80, HTTPS: 443 포트)
sudo ufw allow 'Nginx Full'

# 방화벽 활성화
sudo ufw enable

# 상태 확인
sudo ufw status
🏗️ 2단계: 프로젝트 구조 생성 및 앱 준비
이제 각 애플리케이션을 서버에 준비시키는 단계입니다. 웹 프로젝트는 보통 /var/www 경로에 위치시킵니다.

1. 프로젝트 디렉터리 생성
Bash

# 전체 프로젝트를 담을 최상위 디렉터리
sudo mkdir -p /var/www/alpha-project

# 각 앱의 디렉터리 생성
sudo mkdir /var/www/alpha-project/react-app
sudo mkdir /var/www/alpha-project/flask-api
sudo mkdir /var/www/alpha-project/streamlit-dashboard
sudo mkdir /var/www/alpha-project/flask-service

# 작업 편의를 위해 소유권 변경 (myuser는 실제 사용자 계정으로 변경)
sudo chown -R $USER:$USER /var/www/alpha-project
2. 각 애플리케이션 생성 (간단한 예제)
A. React 프론트엔드 (app.your_domain.com)

Bash

# React 앱 생성 (시간이 좀 걸립니다)
npx create-react-app /var/www/alpha-project/react-app

# 생성된 앱 디렉터리로 이동
cd /var/www/alpha-project/react-app

# API 요청 주소 수정 (api.your_domain.com을 바라보도록)
# src/App.js 파일을 열어서 fetch 주소를 수정했다고 가정합니다.

# 프로덕션용으로 빌드
npm run build
build 명령어가 끝나면 /var/www/alpha-project/react-app/build 디렉터리에 정적 파일들이 생성됩니다. Nginx는 이 디렉터리를 서빙하게 됩니다.

B. Flask API (api.your_domain.com)

Bash

cd /var/www/alpha-project/flask-api

# 가상환경 생성 및 활성화
python3 -m venv venv
source venv/bin/activate

# Gunicorn과 Flask 설치 (Gunicorn은 프로덕션용 WSGI 서버)
pip install gunicorn flask

# 간단한 API 코드 작성 (app.py)
cat <<EOF > app.py
from flask import Flask, jsonify

app = Flask(__name__)

@app.route('/data')
def get_data():
    return jsonify({'message': 'Hello from Flask API!'})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)
EOF

# 가상환경 비활성화
deactivate
이 앱은 내부적으로 5001 포트를 사용합니다.

C. Streamlit 대시보드 (dashboard.your_domain.com)

Bash

cd /var/www/alpha-project/streamlit-dashboard

# 가상환경 생성 및 활성화
python3 -m venv venv
source venv/bin/activate

# Streamlit 설치
pip install streamlit

# 간단한 대시보드 코드 작성 (app.py)
cat <<EOF > app.py
import streamlit as st
st.title('알파 프로젝트 데이터 대시보드')
st.write('Nginx를 통해 서비스되고 있습니다.')
st.slider('테스트 슬라이더', 0, 100, 50)
EOF

# 가상환경 비활성화
deactivate
Streamlit은 기본적으로 8501 포트를 사용합니다.

D. Flask 독립 서비스 (service.your_domain.com)

Bash

cd /var/www/alpha-project/flask-service

# 가상환경 생성 및 활성화
python3 -m venv venv
source venv/bin/activate

# Gunicorn과 Flask 설치
pip install gunicorn flask

# 간단한 웹페이지 코드 작성 (app.py)
cat <<EOF > app.py
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "<h1>알파 프로젝트의 독립 마이크로서비스입니다.</h1>"

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
EOF

# 가상환경 비활성화
deactivate
이 앱은 내부적으로 5000 포트를 사용합니다.

⚙️ 3단계: 앱을 서비스로 등록 (Systemd)
앱들이 서버 재부팅 시에도 자동으로 실행되도록 systemd 서비스로 등록합니다. 이는 프로덕션 환경의 필수 과정입니다.

1. 서비스 파일 생성 (3개의 Python 앱)
A. Flask API 서비스 (flask-api.service)

Bash

sudo nano /etc/systemd/system/flask-api.service
Ini, TOML

[Unit]
Description=Gunicorn instance for Flask API
After=network.target

[Service]
User=myuser # 실제 사용자 계정으로 변경
Group=www-data
WorkingDirectory=/var/www/alpha-project/flask-api
ExecStart=/var/www/alpha-project/flask-api/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:5001 app:app

[Install]
WantedBy=multi-user.target
B. Streamlit 대시보드 서비스 (streamlit-dashboard.service)

Bash

sudo nano /etc/systemd/system/streamlit-dashboard.service
Ini, TOML

[Unit]
Description=Streamlit instance for Dashboard
After=network.target

[Service]
User=myuser # 실제 사용자 계정으로 변경
Group=www-data
WorkingDirectory=/var/www/alpha-project/streamlit-dashboard
ExecStart=/var/www/alpha-project/streamlit-dashboard/venv/bin/streamlit run app.py --server.port 8501 --server.headless true

[Install]
WantedBy=multi-user.target
C. Flask 독립 서비스 (flask-service.service)

Bash

sudo nano /etc/systemd/system/flask-service.service
Ini, TOML

[Unit]
Description=Gunicorn instance for Flask Service
After=network.target

[Service]
User=myuser # 실제 사용자 계정으로 변경
Group=www-data
WorkingDirectory=/var/www/alpha-project/flask-service
ExecStart=/var/www/alpha-project/flask-service/venv/bin/gunicorn --workers 3 --bind 127.0.0.1:5000 app:app

[Install]
WantedBy=multi-user.target
2. 서비스 시작 및 활성화
Bash

# systemd 데몬 리로드
sudo systemctl daemon-reload

# 각 서비스 시작
sudo systemctl start flask-api
sudo systemctl start streamlit-dashboard
sudo systemctl start flask-service

# 부팅 시 자동 실행되도록 활성화
sudo systemctl enable flask-api
sudo systemctl enable streamlit-dashboard
sudo systemctl enable flask-service

# 상태 확인 (모두 active (running) 상태인지 확인)
sudo systemctl status flask-api streamlit-dashboard flask-service
🌐 4단계: Nginx 설정 (리버스 프록시)
이제 Nginx가 각 도메인 요청을 올바른 내부 포트로 전달하도록 설정합니다.

1. 기존 기본 설정 제거
Bash

# 기본 활성화 링크 제거
sudo rm /etc/nginx/sites-enabled/default
2. 각 사이트별 설정 파일 생성
A. React 앱 (app.your_domain.com.conf)

Bash

sudo nano /etc/nginx/sites-available/app.your_domain.com.conf
Nginx

server {
    listen 80;
    server_name app.your_domain.com;

    root /var/www/alpha-project/react-app/build;
    index index.html;

    location / {
        try_files $uri /index.html;
    }
}
B. Flask API (api.your_domain.com.conf)

Bash

sudo nano /etc/nginx/sites-available/api.your_domain.com.conf
Nginx

server {
    listen 80;
    server_name api.your_domain.com;

    location / {
        proxy_pass http://127.0.0.1:5001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
C. Streamlit 대시보드 (dashboard.your_domain.com.conf)

Bash

sudo nano /etc/nginx/sites-available/dashboard.your_domain.com.conf
Nginx

server {
    listen 80;
    server_name dashboard.your_domain.com;

    location / {
        proxy_pass http://127.0.0.1:8501;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
}
D. Flask 서비스 (service.your_domain.com.conf)

Bash

sudo nano /etc/nginx/sites-available/service.your_domain.com.conf
Nginx

server {
    listen 80;
    server_name service.your_domain.com;

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
3. 설정 파일 활성화 및 Nginx 재시작
Bash

# sites-enabled에 심볼릭 링크 생성
sudo ln -s /etc/nginx/sites-available/app.your_domain.com.conf /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/api.your_domain.com.conf /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/dashboard.your_domain.com.conf /etc/nginx/sites-enabled/
sudo ln -s /etc/nginx/sites-available/service.your_domain.com.conf /etc/nginx/sites-enabled/

# Nginx 설정 문법 테스트
sudo nginx -t

# 테스트 결과가 정상이면 Nginx 재시작
sudo systemctl restart nginx
✅ 5단계: 최종 확인
이제 모든 설정이 끝났습니다. 웹 브라우저를 열고 각 주소로 접속하여 서비스가 정상적으로 실행되는지 확인합니다.

http://app.your_domain.com -> React 앱 화면

http://api.your_domain.com/data -> Flask API의 JSON 응답

http://dashboard.your_domain.com -> Streamlit 대시보드

http://service.your_domain.com -> Flask 서비스의 HTML 메시지

추가 권장 사항: 실제 프로덕션 환경에서는 보안을 위해 Let's Encrypt를 사용하여 무료로 HTTPS를 설정하는 것이 좋습니다. certbot을 설치하면 간단하게 적용할 수 있습니다.
sudo apt install certbot python3-certbot-nginx 설치 후 sudo certbot --nginx 명령어로 쉽게 HTTPS를 적용할 수 있습니다.






Deep Research
