가 "10초간 경고 안 보이기" 버튼을 클릭하면 경고 창이 닫히고, 10초 후 다시 열리도록 타이머를 설정해드리겠습니다. 버튼을 클릭 시 창을 닫고, 10초 후 자동으로 다시 확인하여 경고 메시지가 남아 있으면 창을 다시 표시합니다.

1. MainViewModelPop1 코드 수정
버튼을 클릭할 때 창을 닫고, 10초 타이머를 시작하여 10초 후 경고 창을 다시 열 수 있도록 합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Windows;
using System.Windows.Media;
using System.Timers;

namespace YourNamespace
{
    public class MainViewModelPop1 : INotifyPropertyChanged
    {
        public event Action<string, bool> ErrorTriggeredPop1;

        private WarningWindowPop1 _warningWindowPop1;
        private ObservableCollection<ErrorMessagePop1> _errorMessagesPop1;
        private bool _isWarningWindowOpen;
        private System.Timers.Timer _reopenTimerPop1; // 창 재열림을 위한 10초 타이머

        public MainViewModelPop1()
        {
            _errorMessagesPop1 = new ObservableCollection<ErrorMessagePop1>();
            ErrorTriggeredPop1 += HandleErrorEventPop1;

            // 10초 타이머 설정 (재열림용)
            _reopenTimerPop1 = new System.Timers.Timer(10000); // 10초 후 실행
            _reopenTimerPop1.Elapsed += ReopenTimerElapsedPop1;
            _reopenTimerPop1.AutoReset = false;
        }

        private void HandleErrorEventPop1(string message, bool isAdd)
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (isAdd)
                {
                    AddErrorMessagePop1(message);
                }
                else
                {
                    RemoveErrorMessagePop1(message);
                }
            });
        }

        private void AddErrorMessagePop1(string message)
        {
            Debug.WriteLine($"[DEBUG] Attempting to add message: {message}");

            if (_errorMessagesPop1.Any(m => m.ContentPop1 == message))
            {
                Debug.WriteLine($"[DEBUG] Duplicate message found. Skipping addition: {message}");
                return;
            }

            Color color = _errorMessagesPop1.Count % 2 == 0 ? Colors.Yellow : Colors.Aqua;
            _errorMessagesPop1.Add(new ErrorMessagePop1(message, new SolidColorBrush(color)));

            if (!_isWarningWindowOpen)
            {
                ShowWarningWindowPop1();
            }
        }

        private void RemoveErrorMessagePop1(string message)
        {
            var errorMessage = _errorMessagesPop1.FirstOrDefault(m => m.ContentPop1 == message);
            if (errorMessage != null)
            {
                _errorMessagesPop1.Remove(errorMessage);
                Debug.WriteLine($"[DEBUG] Error removed: {message}");

                if (_errorMessagesPop1.Count == 0)
                {
                    CloseWarningWindowPop1();
                }
            }
        }

        private void ShowWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                _warningWindowPop1 = new WarningWindowPop1(_errorMessagesPop1, this);
                _warningWindowPop1.Topmost = true;
                _warningWindowPop1.Show();

                _warningWindowPop1.Closed += (sender, e) =>
                {
                    _isWarningWindowOpen = false;
                    _warningWindowPop1 = null;
                    Debug.WriteLine("[DEBUG] Warning window closed");
                };

                _isWarningWindowOpen = true;
                Debug.WriteLine("[DEBUG] Warning window shown");
            });
        }

        private void CloseWarningWindowPop1()
        {
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (_warningWindowPop1 != null)
                {
                    _warningWindowPop1.Close();
                    _warningWindowPop1 = null;
                    _isWarningWindowOpen = false;
                    Debug.WriteLine("[DEBUG] Warning window closed and messages cleared");
                }
            });
        }

        // 10초 동안 경고 창을 숨기는 함수
        public void HideWarningWindowFor10Seconds()
        {
            CloseWarningWindowPop1(); // 창을 닫고
            _reopenTimerPop1.Start(); // 10초 후 다시 열리도록 타이머 시작
        }

        private void ReopenTimerElapsedPop1(object sender, ElapsedEventArgs e)
        {
            // 10초 후 메시지가 남아 있는지 확인하여 창 다시 열기
            System.Windows.Application.Current.Dispatcher.Invoke(() =>
            {
                if (_errorMessagesPop1.Count > 0 && !_isWarningWindowOpen)
                {
                    Debug.WriteLine("[DEBUG] Reopening warning window after 10 seconds.");
                    ShowWarningWindowPop1();
                }
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    public class ErrorMessagePop1
    {
        public string ContentPop1 { get; }
        public SolidColorBrush ColorPop1 { get; }

        public ErrorMessagePop1(string content, SolidColorBrush color)
        {
            ContentPop1 = content;
            ColorPop1 = color;
        }
    }
}
2. WarningWindowPop1.xaml에 "10초간 경고 안 보이기" 버튼 추가
WarningWindowPop1에 버튼을 추가하여 10초 동안 경고 창을 숨기는 기능을 구현합니다.

WarningWindowPop1.xaml
xml
코드 복사
<Window x:Class="YourNamespace.WarningWindowPop1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="WarningPop1" Height="500" Width="500"
        WindowStyle="None" AllowsTransparency="True" Background="#AAFF0000"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="Manual">
    
    <Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto">
            <ItemsControl ItemsSource="{Binding ErrorMessagesPop1}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding ContentPop1}"
                                   FontSize="15"
                                   Foreground="{Binding ColorPop1}"
                                   TextAlignment="Center"
                                   VerticalAlignment="Center"
                                   HorizontalAlignment="Center"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>
        
        <!-- 10초 동안 경고 안 보이기 버튼 -->
        <Button Content="10초간 경고 안 보이기" 
                HorizontalAlignment="Right" 
                VerticalAlignment="Bottom" 
                Margin="10"
                Click="HideFor10SecondsButton_Click"/>
    </Grid>
</Window>
WarningWindowPop1.xaml.cs
버튼 클릭 이벤트에서 MainViewModelPop1의 HideWarningWindowFor10Seconds 메서드를 호출하여 창을 닫고 10초 후 다시 확인하도록 합니다.

csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows;

namespace YourNamespace
{
    public partial class WarningWindowPop1 : Window
    {
        private readonly MainViewModelPop1 _viewModel;

        public ObservableCollection<ErrorMessagePop1> ErrorMessagesPop1 { get; }

        public WarningWindowPop1(ObservableCollection<ErrorMessagePop1> errorMessagesPop1, MainViewModelPop1 viewModel)
        {
            InitializeComponent();
            ErrorMessagesPop1 = errorMessagesPop1;
            _viewModel = viewModel;
            DataContext = this;

            Loaded += OnWindowLoaded;
        }

        private void OnWindowLoaded(object sender, RoutedEventArgs e)
        {
            var screenWidth = SystemParameters.PrimaryScreenWidth;
            this.Left = (screenWidth - this.Width) / 2;
            this.Top = 10;
        }

        private void Window_MouseDownPop1(object sender, System.Windows.Input.MouseButtonEventArgs e)
        {
            this.Close();
        }

        private void HideFor10SecondsButton_Click(object sender, RoutedEventArgs e)
        {
            // 버튼 클릭 시 뷰모델의 HideWarningWindowFor10Seconds 호출
            _viewModel.HideWarningWindowFor10Seconds();
        }
    }
}
설명
버튼 클릭 이벤트 처리: HideFor10SecondsButton_Click 메서드에서 뷰모델의 HideWarningWindowFor10Seconds 메서드를 호출하여 창을 닫고 10초 타이머를 시작합니다.
10초 타이머가 완료되면 다시 열림: ReopenTimerElapsedPop1 이벤트에서 ObservableCollection에 메시지가 남아 있으면 창을 다시 엽니다.
이제 "10초간 경고 안 보이기" 버튼을 클릭하면 창이 닫히고, 10초 후에 메시지가 남아 있으면 다시 창이 열립니다.