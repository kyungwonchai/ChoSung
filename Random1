reme와 WPF를 사용해 좀 더 이쁘게 디자인하고, MSSQL 2014 데이터베이스에서 계정을 확인한 후에, 그 계정 및 권한 정보를 전체 솔루션에서 사용할 수 있게 하는 것을 고려하겠습니다.

    먼저 App.xaml.cs에서 전역 변수를 설정합니다.

csharp

public partial class App : Application
{
    public static string GlobalUserID;
    public static string GlobalUserPermission;
}

    MainWindow.xaml.cs에서 로그인 검증을 MSSQL 2014 데이터베이스와 연동합니다.

csharp

using System.Data.SqlClient;
using System.Windows;
using DevExpress.Xpf.Core;

namespace WPF_LoginApp
{
    public partial class MainWindow : ThemedWindow
    {
        public MainWindow()
        {
            InitializeComponent();
        }

        private void LoginButton_Click(object sender, RoutedEventArgs e)
        {
            string userId = userIdTextEdit.Text;
            string password = passwordTextEdit.Text;

            using (SqlConnection connection = new SqlConnection("Your Connection String"))
            {
                connection.Open();
                SqlCommand cmd = new SqlCommand("SELECT Permission FROM Users WHERE UserID = @id AND Password = @password", connection);
                cmd.Parameters.AddWithValue("@id", userId);
                cmd.Parameters.AddWithValue("@password", password);
                SqlDataReader reader = cmd.ExecuteReader();

                if (reader.Read())
                {
                    App.GlobalUserID = userId;
                    App.GlobalUserPermission = reader["Permission"].ToString();

                    MessageBox.Show("로그인 성공!");
                }
                else
                {
                    MessageBox.Show("로그인 실패!");
                }
            }
        }
    }
}

    XAML 코드는 이전과 비슷하되, 필요하다면 DevExtreme의 스타일링을 추가하면 됩니다.

이렇게 하면, App.GlobalUserID와 App.GlobalUserPermission을 통해 전체 솔루션에서 사용자 ID와 권한을 사용할 수 있습니다.

데이터베이스 연결 문자열(Your Connection String)은 실제 환경에 맞게 설정해 주세요.

주의: 이 코드는 예시로, 보안을 고려하지 않았습니다. 실제 구현 시에는 보