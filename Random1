using System;
using System.Drawing;
using System.Runtime.InteropServices;
using System.Windows.Forms;

// Emgu CV 라이브러리를 사용
using Emgu.CV;
using Emgu.CV.CvEnum;
using Emgu.CV.Structure;
using Emgu.CV.Util;

namespace CalendarClicker
{
    public partial class Form1 : Form
    {
        [DllImport("user32.dll")]
        static extern bool SetCursorPos(int X, int Y);

        [DllImport("user32.dll")]
        static extern void mouse_event(uint dwFlags, int dx, int dy, uint dwData, int dwExtraInfo);

        const uint MOUSEEVENTF_LEFTDOWN = 0x02;
        const uint MOUSEEVENTF_LEFTUP = 0x04;

        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // 캡처 타이머 시작
            System.Windows.Forms.Timer timer = new System.Windows.Forms.Timer();
            timer.Interval = 1000; // 1초 후 실행
            timer.Tick += new EventHandler(CaptureScreenAndClickGreenCells);
            timer.Start();
        }

        private void CaptureScreenAndClickGreenCells(object sender, EventArgs e)
        {
            System.Windows.Forms.Timer timer = sender as System.Windows.Forms.Timer;
            timer.Stop(); // 타이머 중지

            // 스크린샷 캡처
            System.Drawing.Bitmap screenshot = CaptureScreen();
            Emgu.CV.Image<Emgu.CV.Structure.Bgr, Byte> img = new Emgu.CV.Image<Emgu.CV.Structure.Bgr, Byte>(screenshot);

            // 달력 영역 찾기 (여기서는 템플릿 매칭을 가정)
            // 실제 캘린더 템플릿 이미지를 사용해야 합니다
            Emgu.CV.Image<Emgu.CV.Structure.Gray, byte> calendarTemplate = new Emgu.CV.Image<Emgu.CV.Structure.Gray, byte>("calendar_template.png");
            Emgu.CV.Mat match = new Emgu.CV.Mat();
            Emgu.CV.CvInvoke.MatchTemplate(img, calendarTemplate, match, Emgu.CV.CvEnum.TemplateMatchingType.CcoeffNormed);
            double minVal = 0, maxVal = 0;
            System.Drawing.Point minLoc = new System.Drawing.Point(), maxLoc = new System.Drawing.Point();
            Emgu.CV.CvInvoke.MinMaxLoc(match, ref minVal, ref maxVal, ref minLoc, ref maxLoc);

            if (maxVal > 0.8) // 템플릿 매칭 임계값
            {
                System.Drawing.Rectangle calendarRect = new System.Drawing.Rectangle(maxLoc, calendarTemplate.Size);
                ClickGreenCells(img, calendarRect);
            }
            else
            {
                System.Windows.Forms.MessageBox.Show("Calendar not found.");
            }
        }

        private void ClickGreenCells(Emgu.CV.Image<Emgu.CV.Structure.Bgr, Byte> img, System.Drawing.Rectangle calendarRect)
        {
            // 달력 영역 자르기
            Emgu.CV.Image<Emgu.CV.Structure.Bgr, Byte> calendarImage = img.Copy(calendarRect);

            // HSV 색 공간으로 변환
            Emgu.CV.Image<Emgu.CV.Structure.Hsv, Byte> hsvImage = calendarImage.Convert<Emgu.CV.Structure.Hsv, Byte>();

            // 녹색 범위 정의
            Emgu.CV.Structure.Hsv lowerGreen = new Emgu.CV.Structure.Hsv(35, 40, 40);
            Emgu.CV.Structure.Hsv upperGreen = new Emgu.CV.Structure.Hsv(85, 255, 255);
            Emgu.CV.Image<Emgu.CV.Structure.Gray, Byte> mask = hsvImage.InRange(lowerGreen, upperGreen);

            // 윤곽선 찾기
            Emgu.CV.Util.VectorOfVectorOfPoint contours = new Emgu.CV.Util.VectorOfVectorOfPoint();
            Emgu.CV.CvInvoke.FindContours(mask, contours, null, Emgu.CV.CvEnum.RetrType.External, Emgu.CV.CvEnum.ChainApproxMethod.ChainApproxSimple);

            for (int i = 0; i < contours.Size; i++)
            {
                Emgu.CV.Util.VectorOfPoint contour = contours[i];
                System.Drawing.Rectangle rect = Emgu.CV.CvInvoke.BoundingRectangle(contour);

                // 클릭 위치 계산
                int centerX = calendarRect.Left + rect.X + rect.Width / 2;
                int centerY = calendarRect.Top + rect.Y + rect.Height / 2;

                // 클릭 이벤트 시뮬레이션
                SetCursorPos(centerX, centerY);
                mouse_event(MOUSEEVENTF_LEFTDOWN, centerX, centerY, 0, 0);
                mouse_event(MOUSEEVENTF_LEFTUP, centerX, centerY, 0, 0);
            }
        }

        private System.Drawing.Bitmap CaptureScreen()
        {
            System.Drawing.Rectangle bounds = System.Windows.Forms.Screen.GetBounds(System.Drawing.Point.Empty);
            System.Drawing.Bitmap bitmap = new System.Drawing.Bitmap(bounds.Width, bounds.Height);

            using (System.Drawing.Graphics g = System.Drawing.Graphics.FromImage(bitmap))
            {
                g.CopyFromScreen(System.Drawing.Point.Empty, System.Drawing.Point.Empty, bounds.Size);
            }

            return bitmap;
        }
    }
}
