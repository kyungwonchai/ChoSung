데이터베이스에서 데이터 가져오기 및 조인
csharp
Copy code
using System.Data;
using System.Data.SqlClient; // SQL Server의 경우. 다른 DB일 경우 변경 필요

public DataTable GetData()
{
    string connectionStringDB1 = "YourConnectionStringDB1";
    string connectionStringDB2 = "YourConnectionStringDB2";

    DataTable table1 = new DataTable();
    DataTable table2 = new DataTable();

    using (SqlConnection connectionDB1 = new SqlConnection(connectionStringDB1))
    {
        string queryDB1 = "SELECT Line, Model, CT FROM YourTableDB1";
        using (SqlCommand command = new SqlCommand(queryDB1, connectionDB1))
        {
            SqlDataAdapter adapter = new SqlDataAdapter(command);
            adapter.Fill(table1);
        }
    }

    using (SqlConnection connectionDB2 = new SqlConnection(connectionStringDB2))
    {
        string queryDB2 = "SELECT Line, CT AS CT2 FROM YourTableDB2";
        using (SqlCommand command = new SqlCommand(queryDB2, connectionDB2))
        {
            SqlDataAdapter adapter = new SqlDataAdapter(command);
            adapter.Fill(table2);
        }
    }

    DataTable resultTable = new DataTable();
    resultTable = table1.Clone();
    resultTable.Columns.Add("CT2", typeof(YourCT2ColumnType)); // YourCT2ColumnType은 CT2 컬럼의 데이터 타입

    var joinQuery = from table1Row in table1.AsEnumerable()
                    join table2Row in table2.AsEnumerable()
                    on table1Row.Field<string>("Line") equals table2Row.Field<string>("Line") into gj
                    from subtable2 in gj.DefaultIfEmpty()
                    select resultTable.LoadDataRow(new object[]
                        {
                            table1Row.Field<string>("Line"),
                            table1Row.Field<string>("Model"),
                            table1Row.Field<YourCTColumnType>("CT"), // YourCTColumnType은 CT 컬럼의 데이터 타입
                            subtable2 == null ? DBNull.Value : subtable2.Field<YourCT2ColumnType>("CT2")
                        }, false);

    joinQuery.CopyToDataTable();

    return resultTable;
}
WPF GridControl에 데이터 바인딩
XAML 파일:

xml
Copy code
<Window xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid" ...>
    <!-- ... -->
    <dxg:GridControl x:Name="gridControl" AutoGenerateColumns="AddNew">
        <dxg:GridControl.View>
            <dxg:TableView />
        </dxg:GridControl.View>
    </dxg:GridControl>
    <!-- ... -->
</Window>
C# 코드 뒷면:

csharp
Copy code
public MainWindow()
{
    InitializeComponent();
    gridControl.ItemsSource = GetData();
}
주의사항
데이터베이스 연결 문자열 (YourConnectionStringDB1, YourConnectionStringDB2)과 쿼리, 테이블 이름 (YourTableDB1, YourTableDB2)을 실제 값으로 대체해야 합니다.
YourCTColumnType과 YourCT2ColumnType은 CT와 CT2 컬럼의 데이터 타입에 따라 변경해야 합니다.
데이터베이스 종류에 따라 SqlConnection, SqlCommand, SqlDataAdapter 등의 클래스를 해당 데이터베이스에 맞는 클래스로 변경해야 합니다.
이 코드는 SQL Server 기반으로 작성되었습니다. 다른 데이터베이스를 사용하는 경우 해당 ADO.NET 프로바이더로 변경해야 합니다.