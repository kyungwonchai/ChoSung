요! MainViewModel을 DataContext로 설정했다면, 버튼의 Command 속성을 통해 ViewModel에 있는 명령 또는 메서드에 연결하는 것이 일반적인 MVVM 패턴입니다.
그런데 다른 클래스에 있는 함수를 실행하고 싶다면, 다음과 같은 구조로 할 수 있어요.

1. 다른 클래스 예시
예를 들어, WorkerClass라는 클래스를 만든다고 가정해볼게요.

csharp
코드 복사
public class WorkerClass
{
    public void DoWork()
    {
        MessageBox.Show("작업 수행됨!");
    }
}
2. MainViewModel에서 ICommand 구현
MainViewModel 내부에 WorkerClass 인스턴스를 만들고, 버튼이 누르면 해당 클래스의 메서드를 실행하도록 ICommand를 설정합니다.

csharp
코드 복사
public class MainViewModel : INotifyPropertyChanged
{
    public ICommand ButtonCommand { get; }
    private WorkerClass _worker;

    public MainViewModel()
    {
        _worker = new WorkerClass();
        ButtonCommand = new RelayCommand(ExecuteButtonCommand);
    }

    private void ExecuteButtonCommand()
    {
        _worker.DoWork();
    }

    // INotifyPropertyChanged 구현 생략
}
3. RelayCommand 클래스 (ICommand 구현)
MVVM에서 자주 쓰는 커맨드 클래스예요.

csharp
코드 복사
public class RelayCommand : ICommand
{
    private readonly Action _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        _execute = execute ?? throw new ArgumentNullException(nameof(execute));
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter) => _canExecute == null || _canExecute();

    public void Execute(object parameter) => _execute();

    public event EventHandler CanExecuteChanged
    {
        add => CommandManager.RequerySuggested += value;
        remove => CommandManager.RequerySuggested -= value;
    }
}
4. XAML 버튼 바인딩
xml
코드 복사
<Button Content="Start Work" Command="{Binding ButtonCommand}" />
요약
버튼 클릭 → ViewModel의 ICommand 실행 → 내부에서 다른 클래스 함수 실행

WorkerClass는 ViewModel에 인스턴스로 넣어서 제어

MVVM 원칙을 지키면서도 외부 클래스를 잘 연결함
