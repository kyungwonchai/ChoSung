## ? Step 1: 리액트 앱 경로 설정 (필수)
메뉴로 사용될 앱들에게 각자의 주소를 알려주는 과정입니다. 이걸 해야 하얀 화면이 안 뜹니다.

react_plantuml 폴더:

package.json 파일 열기 → "homepage": "/plantuml1" 추가

src/App.tsx 또는 src/index.tsx 파일 열기 → <BrowserRouter>에 basename 추가

TypeScript

<BrowserRouter basename="/plantuml1">
  <App />
</BrowserRouter>
react_zenithnote 폴더:

package.json 파일 열기 → "homepage": "/zenithnote1" 추가

src/App.tsx 또는 src/index.tsx 파일 열기 → <BrowserRouter>에 basename 추가

TypeScript

<BrowserRouter basename="/zenithnote1">
  <App />
</BrowserRouter>
?? 메인 화면인 homepage25 앱은 이 작업을 하지 않습니다.

## ? Step 2: 공통 Dockerfile 생성 및 복사
아래 내용으로 Dockerfile 파일을 하나만 만드세요. 그리고 이 파일을 3개의 각 타입스크립트 프로젝트 폴더(homepage25, react_plantuml, react_zenithnote) 안에 그대로 복사해 넣습니다.

Dockerfile 내용:

Dockerfile

# 1단계: 빌드 환경 (타입스크립트를 자바스크립트로 변환하는 단계)
FROM node:18-alpine as builder
WORKDIR /app
COPY package.json ./
COPY package-lock.json ./
RUN npm install
COPY . .
# 이 명령어가 .tsx를 .js로 바꾸는 등 모든 작업을 알아서 처리합니다.
RUN npm run build

# 2단계: 최종 서비스 환경
FROM nginx:1.25-alpine
# 1단계에서 완성된 결과물(HTML/CSS/JS)만 가져와서 Nginx에 탑재
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
이 Dockerfile은 프로젝트가 .js이든 .tsx이든 상관없이 완벽하게 동일하게 작동합니다.

## ? Step 3: docker-compose.yml 파일 작성
모든 컨테이너(앱 3개, Nginx 1개)를 한 번에 관리하는 설계도입니다. 3개의 프로젝트 폴더와 같은 위치에 docker-compose.yml 파일을 만듭니다.

docker-compose.yml 내용:

YAML

version: '3.8'

services:
  # 메인 앱 (TSX 프로젝트)
  homepage:
    build: ./homepage25

  # 메뉴 앱 1 (TSX 프로젝트)
  plantuml:
    build: ./react_plantuml

  # 메뉴 앱 2 (TSX 프로젝트)
  zenithnote:
    build: ./react_zenithnote

  # 교통정리 담당 Nginx
  nginx:
    image: nginx:1.25-alpine
    ports:
      - "80:80" # 외부에서 10.222.111.111로 들어오는 요청을 Nginx가 받음
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf # 아래에서 만들 설정 파일 연결
    # 다른 앱들이 켜진 다음에 Nginx가 켜지도록 순서 지정
    depends_on:
      - homepage
      - plantuml
      - zenithnote
## ? Step 4: nginx.conf 파일 작성
Nginx가 요청을 어떻게 분배할지 정하는 규칙 파일입니다. docker-compose.yml과 같은 위치에 만듭니다.

nginx.conf 내용:

Nginx

server {
    listen 80;

    # 그냥 IP(10.222.111.111)로 접속하면 homepage 서비스로 전달
    location / {
        # 'homepage'는 docker-compose.yml에 적은 서비스 이름입니다.
        proxy_pass http://homepage;
    }

    # /plantuml1 경로로 접속하면 plantuml 서비스로 전달
    location /plantuml1/ {
        proxy_pass http://plantuml/;
    }

    # /zenithnote1 경로로 접속하면 zenithnote 서비스로 전달
    location /zenithnote1/ {
        proxy_pass http://zenithnote/;
    }
}
## ? Step 5: 실행
최종 폴더 구조를 다시 확인하세요.

.
├── homepage25/       (tsx 프로젝트)
│   └── Dockerfile
├── react_plantuml/   (tsx 프로젝트)
│   └── Dockerfile
├── react_zenithnote/ (tsx 프로젝트)
│   └── Dockerfile
├── docker-compose.yml
└── nginx.conf
터미널에서 docker-compose.yml이 있는 곳으로 이동한 뒤, 아래 명령어를 실행하면 끝입니다.

Bash

docker-compose up --build -d
이것이 .tsx 프로젝트를 배포하는 가장 정확하고 정석적인 방법입니다.