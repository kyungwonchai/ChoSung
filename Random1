이해했습니다. 여러분이 PLC에서 받은 숫자를 개별 숫자로 분리하고, 각 숫자의 2진수 표현을 상하위 바꿔서 센서 상태를 업데이트하는 로직을 설계해 드리겠습니다. 이 경우, 각 숫자의 4비트 2진수 표현을 상하위 바꾼 후 센서 상태를 업데이트할 필요가 있습니다.

수정된 UpdateSensorStates 함수 설명:
각 숫자의 자리를 분리하여 상하위 바꾼 2진수로 센서 상태를 업데이트하는 방법은 다음과 같습니다:

각 숫자를 분리: PLC에서 받은 데이터 "218400400020"에서 각 숫자를 하나씩 분리합니다.
각 숫자를 2진수로 변환: 각 숫자를 4비트 2진수로 변환합니다.
상하위 바꾸기: 각 2진수의 상하위를 바꿉니다.
센서 상태 업데이트: 변환된 2진수에 따라 센서 상태를 업데이트합니다.
구현 코드:
csharp
코드 복사
public class ComPort : INotifyPropertyChanged
{
    public ObservableCollection<SensorModel> Sensors { get; set; }
    public event PropertyChangedEventHandler PropertyChanged;

    public ComPort()
    {
        Sensors = new ObservableCollection<SensorModel>();
        InitializeSensors();
    }

    private void InitializeSensors()
    {
        // 초기화 예시: 100개의 센서를 가정
        for (int i = 0; i < 100; i++)
        {
            Sensors.Add(new SensorModel
            {
                SensorName = $"Sensor {i + 1}",
                IsDetected = false
            });
        }
    }

    // PLC에서 받은 데이터를 처리하는 메서드
    public void UpdateSensorStates(string data)
    {
        int index = 0; // 센서 인덱스

        foreach (char c in data)
        {
            if (char.IsDigit(c))
            {
                // 숫자를 2진수로 변환하고, 상하위 바꾸기
                int num = int.Parse(c.ToString());
                string binary = Convert.ToString(num, 2).PadLeft(4, '0'); // 4비트 2진수
                binary = SwapBits(binary); // 상하위 바꾸기

                // 상하위가 바뀐 2진수로 센서 상태 업데이트
                for (int i = 0; i < binary.Length; i++)
                {
                    bool isDetected = binary[i] == '1';
                    if (index < Sensors.Count)
                    {
                        Sensors[index].IsDetected = isDetected;
                        index++;
                    }
                }
            }
        }

        OnPropertyChanged(nameof(Sensors));
    }

    // 상하위 바꾸기 함수
    private string SwapBits(string binary)
    {
        // 첫 2비트와 마지막 2비트 교환
        return binary.Substring(2, 2) + binary.Substring(0, 2);
    }

    protected void OnPropertyChanged(string name)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
상세 설명:
InitializeSensors 메서드: 100개의 센서를 초기화합니다. 실제 센서 수에 따라 이 부분을 조정할 수 있습니다.
UpdateSensorStates 메서드: 각 숫자를 분리하고, 각 숫자를 4비트 2진수로 변환한 뒤 상하위를 바꾸고, 해당 상태를 센서에 반영합니다. 각 숫자에 대해 4개의 센서 상태가 업데이트됩니다.
SwapBits 메서드: 4비트 2진수 문자열의 상하위 2비트를 바꿉니다.
이 함수는 PLC에서 받은 데이터를 기반으로 각 숫자의 2진 표현을 이용하여 센서 상태를 업데이트합니다. 각 숫자의 상하위 비트 교환으로 센서의 상태를 특정 패턴에 따라 변경할 수 있습니