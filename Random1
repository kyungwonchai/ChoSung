dControl 내부에 3행 2열 구조를 만들고 각 셀에 데이터를 바인딩하려면, 일반적인 WPF Grid를 사용하고 각 셀에 필요한 컨트롤을 배치하는 방식으로 구현할 수 있습니다. 여기서 '부품1', '부품2', '부품3'과 '바납수1', '바납수2', '바납수3'를 각각의 행과 열에 맞게 바인딩하려면, XAML과 ViewModel을 적절히 설정해야 합니다.

1. ViewModel 준비
먼저, 각 부품과 바납수에 대한 데이터를 저장할 수 있는 ViewModel을 준비합니다.

csharp
Copy code
public class MainViewModel
{
    public string Part1 { get; set; }
    public string Part2 { get; set; }
    public string Part3 { get; set; }

    public int Count1 { get; set; }
    public int Count2 { get; set; }
    public int Count3 { get; set; }

    // 여기서 필요한 데이터를 로드하거나 초기화
}
2. XAML 구성
이제 XAML에서 Grid를 정의하고 각 셀에 데이터를 바인딩합니다.

xml
Copy code
<Window ...
        xmlns:local="clr-namespace:YourNamespace">
    <Window.DataContext>
        <local:MainViewModel />
    </Window.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <!-- 부품명 -->
        <TextBlock Text="부품1" Grid.Row="0" Grid.Column="0"/>
        <TextBlock Text="부품2" Grid.Row="1" Grid.Column="0"/>
        <TextBlock Text="부품3" Grid.Row="2" Grid.Column="0"/>

        <!-- 바납수 -->
        <TextBlock Text="{Binding Count1}" Grid.Row="0" Grid.Column="1"/>
        <TextBlock Text="{Binding Count2}" Grid.Row="1" Grid.Column="1"/>
        <TextBlock Text="{Binding Count3}" Grid.Row="2" Grid.Column="1"/>
    </Grid>
</Window>
이 코드에서는 두 개의 열(ColumnDefinitions)과 세 개의 행(RowDefinitions)을 가진 Grid를 생성합니다. 그리고 각 TextBlock을 적절한 Grid 행과 열에 배치하면서 Binding을 사용하여 ViewModel의 속성에 연결합니다.

이 구조에서는 부품명과 바납수가 행에 따라 나란히 표시됩니다. ViewModel의 Count1, Count2, Count3 속성은 각각의 TextBlock에 바인딩되어 해당 값들을 표시합니다.

ViewModel의 속성 값이 업데이트되면, 바인딩된 UI 요소들도 자동으로 업데이트됩니다. ViewModel이 INotifyPropertyChanged 인터페이스를 구현하면, 속성 값이 변경될 때 UI에 자동으