래는 수정된 코드입니다:

csharp

using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;
using DevExpress.XtraGrid.Views.Grid;

namespace TaskManager
{
    public partial class MainForm : DevExpress.XtraEditors.XtraForm
    {
        private TaskManagerManager taskManager;

        public MainForm()
        {
            InitializeComponent();

            // SQL 연결 문자열 설정
            string connectionString = "Data Source=(local);Initial Catalog=TaskManagerDB;Integrated Security=True";

            // TaskManagerManager 초기화
            taskManager = new TaskManagerManager(connectionString);

            // GridControl에 데이터 바인딩
            gridControl1.DataSource = taskManager.GetTasks();
        }

        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            // 변경된 데이터를 데이터베이스에 반영
            taskManager.SaveChanges();
        }

        private void btnAddTask_Click(object sender, EventArgs e)
        {
            string taskName = txtTaskName.Text;

            if (taskManager.AddTask(taskName))
            {
                // GridControl 갱신
                gridView1.RefreshData();

                // 입력 필드 초기화
                txtTaskName.Text = "";
            }
            else
            {
                MessageBox.Show("이미 추가된 과제입니다.");
            }
        }

        private void gridView1_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            // 선택된 과제의 ID 가져오기
            GridView view = (GridView)sender;
            DataRow selectedTaskRow = view.GetFocusedDataRow();
            if (selectedTaskRow != null)
            {
                int taskID = Convert.ToInt32(selectedTaskRow["ID"]);

                // TaskDetails 및 Recipients 데이터 필터링
                gridControl2.DataSource = taskManager.GetTaskDetails(taskID);
                gridControl3.DataSource = taskManager.GetRecipients(taskID);
            }
        }

        private void btnAddRecipient_Click(object sender, EventArgs e)
        {
            DataRow selectedTaskRow = gridView1.GetFocusedDataRow();
            if (selectedTaskRow != null)
            {
                int taskID = Convert.ToInt32(selectedTaskRow["ID"]);
                string recipientAddress = txtRecipientAddress.Text;
                string recipientMethod = txtRecipientMethod.Text;

                taskManager.AddRecipient(taskID, recipientAddress, recipientMethod);

                // 입력 필드 초기화
                txtRecipientAddress.Text = "";
                txtRecipientMethod.Text = "";
            }
        }

        private void btnDeleteRecipient_Click(object sender, EventArgs e)
        {
            DataRowView selectedRecipientRow = (DataRowView)gridView3.GetFocusedRow();
            if (selectedRecipientRow != null)
            {
                taskManager.DeleteRecipient(Convert.ToInt32(selectedRecipientRow["ID"]));
            }
        }
    }
}

위의 코드에서 TaskManagerManager라는 별도의 클래스를 도입하여 프로그램의 주요 기능을 관리하도록 개선했습니다. TaskManagerManager 클래스는 데이터베이스 연결 및 작업 관련 기능을 처리합니다.

csharp

using System;
using System.Data;
using System.Data.SqlClient;

namespace TaskManager
{
    public class TaskManagerManager
    {
        private SqlConnection sqlConnection;
        private SqlDataAdapter tasksDataAdapter;
        private SqlDataAdapter taskDetailsDataAdapter;
        private SqlDataAdapter recipientsDataAdapter;
        private DataSet dataSet;

        public TaskManagerManager(string connectionString)
        {
            // SQL 연결 및 데이터 어댑터

User
이어서
ChatGPT

물론입니다! 아래는 TaskManagerManager 클래스의 나머지 부분입니다:

csharp

            // SQL 연결 및 데이터 어댑터 초기화
            sqlConnection = new SqlConnection(connectionString);
            tasksDataAdapter = new SqlDataAdapter("SELECT * FROM Tasks", sqlConnection);
            taskDetailsDataAdapter = new SqlDataAdapter("SELECT * FROM TaskDetails", sqlConnection);
            recipientsDataAdapter = new SqlDataAdapter("SELECT * FROM Recipients", sqlConnection);

            // DataSet 초기화
            dataSet = new DataSet();

            // 데이터 어댑터를 통해 데이터를 DataSet에 로드
            tasksDataAdapter.Fill(dataSet, "Tasks");
            taskDetailsDataAdapter.Fill(dataSet, "TaskDetails");
            recipientsDataAdapter.Fill(dataSet, "Recipients");
        }

        public DataTable GetTasks()
        {
            return dataSet.Tables["Tasks"];
        }

        public DataTable GetTaskDetails(int taskID)
        {
            dataSet.Tables["TaskDetails"].DefaultView.RowFilter = $"ID = {taskID}";
            return dataSet.Tables["TaskDetails"].DefaultView.ToTable();
        }

        public DataTable GetRecipients(int taskID)
        {
            dataSet.Tables["Recipients"].DefaultView.RowFilter = $"TaskID = {taskID}";
            return dataSet.Tables["Recipients"].DefaultView.ToTable();
        }

        public bool AddTask(string taskName)
        {
            DataRow[] existingRows = dataSet.Tables["Tasks"].Select($"Name = '{taskName}'");
            if (existingRows.Length > 0)
            {
                return false;
            }

            DataRow taskRow = dataSet.Tables["Tasks"].NewRow();
            taskRow["Name"] = taskName;
            dataSet.Tables["Tasks"].Rows.Add(taskRow);

            tasksDataAdapter.Update(dataSet, "Tasks");
            return true;
        }

        public void AddRecipient(int taskID, string address, string method)
        {
            DataRow recipientRow = dataSet.Tables["Recipients"].NewRow();
            recipientRow["TaskID"] = taskID;
            recipientRow["Address"] = address;
            recipientRow["Method"] = method;
            dataSet.Tables["Recipients"].Rows.Add(recipientRow);

            recipientsDataAdapter.Update(dataSet, "Recipients");
        }

        public void DeleteRecipient(int recipientID)
        {
            DataRow recipientRow = dataSet.Tables["Recipients"].Rows.Find(recipientID);
            if (recipientRow != null)
            {
                recipientRow.Delete();
                recipientsDataAdapter.Update(dataSet, "Recipients");
            }
        }

        public void SaveChanges()
        {
            tasksDataAdapter.Update(dataSet, "Tasks");
            taskDetailsDataAdapter.Update(dataSet, "TaskDetails");
            recipientsDataAdapter.Update(dataSet, "Recipients");
        }
    }
}

TaskManagerManager 클래스는 데이터베이스와의 상호 작용을 담당하는 기능을 제공합니다. GetTasks() 메서드는 과제 데이터를 반환하고, GetTaskDetails() 및 GetRecipients() 메서드는 해당 과제의 상세 정보와 수신인 목록을 반환합니다. AddTask() 메서드는 과제를 추가하고, AddRecipient() 메서드는 수신인을 추가합니다. DeleteRecipient() 메서드는 수신인을 삭제합니다. 마지막으로 Sav