아래는 TextBox의 입력값을 버튼 클릭 시 SignalR로 전송하는 전체 코드입니다. TextBox와 MainViewModel의 속성을 바인딩하고, 버튼을 클릭하면 TextBox1에 입력된 값을 SignalR 메시지로 전송하도록 구현했습니다.

1. MainViewModel 클래스 수정 (TextBox 바인딩 및 메시지 전송)
csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;

public class MainViewModel : INotifyPropertyChanged
{
    // TextBox1에서 입력한 값을 바인딩할 속성
    private string _signalR1TextBoxInput;

    public string SignalR1TextBoxInput
    {
        get => _signalR1TextBoxInput;
        set
        {
            _signalR1TextBoxInput = value;
            OnPropertyChanged();  // 값이 변경되면 UI에 알림
        }
    }

    // DataGrid에 표시할 메시지 목록 (최대 30개 유지)
    public ObservableCollection<SignalR1MessageModel> SignalR1Messages { get; set; } = new ObservableCollection<SignalR1MessageModel>();

    // INotifyPropertyChanged 구현
    public event PropertyChangedEventHandler PropertyChanged;

    // 생성자: SignalRClient를 초기화하고 직접 상호작용
    public MainViewModel()
    {
        InitializeSignalR();

        SignalRClient.Instance.OnSignalR1MessageSentAndResponse = (SignalR1SentMessage, SignalR1ResponseMessage, timeStamp) =>
        {
            // 메시지 전송 후 응답을 받을 때 DataGrid를 업데이트합니다.
            AddSignalR1MessageToDataGrid(timeStamp, SignalR1SentMessage, SignalR1ResponseMessage);
        };
    }

    // SignalR 서버와의 연결 초기화
    private async void InitializeSignalR()
    {
        await SignalRClient.Instance.InitializeSignalRConnectionAsync("http://localhost:5000/myhub");
    }

    // DataGrid에 표시할 메시지를 추가하는 메서드 (최대 30개 유지)
    private void AddSignalR1MessageToDataGrid(string timeStamp, string SignalR1SentMessage, string SignalR1ResponseMessage)
    {
        if (SignalR1Messages.Count >= 30)
        {
            SignalR1Messages.RemoveAt(0);  // 30개를 넘으면 오래된 항목 제거
        }

        // 새 메시지 추가
        SignalR1Messages.Add(new SignalR1MessageModel
        {
            SignalR1SentTime = timeStamp,
            SignalR1SentMessage = SignalR1SentMessage,
            SignalR1ResponseMessage = SignalR1ResponseMessage
        });
    }

    // 버튼 클릭 시 메시지 전송하는 메서드 (SignalRClient 사용)
    public async void SendSignalR1Message()
    {
        if (!string.IsNullOrEmpty(SignalR1TextBoxInput))
        {
            await SignalRClient.Instance.SendSignalR1MessageAsync(SignalR1TextBoxInput);  // TextBox의 값을 SignalR로 전송
        }
    }

    // UI에서 속성 변경을 알리는 메서드
    protected void OnPropertyChanged([CallerMemberName] string name = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));
    }
}
2. SignalR1MessageModel 클래스 (DataGrid에 표시할 데이터 모델)
csharp
코드 복사
// SignalR1 메시지 모델 클래스: DataGrid에 보낼 메시지와 응답을 표시하는 구조체
public class SignalR1MessageModel
{
    public string SignalR1SentTime { get; set; }       // 메시지 보낸 시간
    public string SignalR1SentMessage { get; set; }    // 보낸 메시지
    public string SignalR1ResponseMessage { get; set; }  // 서버 응답 메시지
}
3. OtherClass (다른 클래스에서 SignalRClient를 사용하여 메시지 전송)
csharp
코드 복사
public class OtherClass
{
    // OtherClass에서 SignalR 메시지를 전송하는 메서드
    public async void SendCustomSignalR1Message(string SignalR1Message)
    {
        // SignalRClient 싱글톤 인스턴스를 사용하여 메시지 전송
        await SignalRClient.Instance.SendSignalR1MessageAsync(SignalR1Message);
    }
}
4. MainWindow.xaml (TextBox 및 DataGrid 포함)
xml
코드 복사
<Window x:Class="WpfApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <!-- TextBox1에서 입력한 값을 바인딩 -->
        <TextBox Name="TextBox1" Text="{Binding SignalR1TextBoxInput, UpdateSourceTrigger=PropertyChanged}" Width="200" Height="30" VerticalAlignment="Top" Margin="10"/>

        <!-- DataGrid to display SignalR1 messages -->
        <DataGrid ItemsSource="{Binding SignalR1Messages}" AutoGenerateColumns="False" Height="300" VerticalAlignment="Center">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Sent Time" Binding="{Binding SignalR1SentTime}" Width="200"/>
                <DataGridTextColumn Header="Sent Message" Binding="{Binding SignalR1SentMessage}" Width="300"/>
                <DataGridTextColumn Header="Response" Binding="{Binding SignalR1ResponseMessage}" Width="300"/>
            </DataGrid.Columns>
        </DataGrid>

        <!-- 버튼 클릭 시 메시지를 전송하는 버튼 -->
        <Button Content="Send SignalR1 Message" Width="200" Height="50" VerticalAlignment="Bottom" HorizontalAlignment="Center" Click="OnSendSignalR1ButtonClick"/>
    </Grid>
</Window>
5. MainWindow.xaml.cs (TextBox 값으로 메시지를 전송)
csharp
코드 복사
using System.Windows;

public partial class MainWindow : Window
{
    private MainViewModel _viewModel;
    private OtherClass _otherClass;

    public MainWindow()
    {
        InitializeComponent();

        // MainWindow에서 MainViewModel과 OtherClass 인스턴스를 생성
        _viewModel = new MainViewModel();
        _otherClass = new OtherClass();

        // MainViewModel을 DataContext로 설정하여 TextBox와 DataGrid 바인딩
        DataContext = _viewModel;
    }

    // 버튼 클릭 시 메시지를 TextBox1에서 가져와 OtherClass로 전송
    private void OnSendSignalR1ButtonClick(object sender, RoutedEventArgs e)
    {
        // ViewModel의 SendSignalR1Message 호출 (TextBox1 값을 전송)
        _viewModel.SendSignalR1Message();
    }
}
설명
MainViewModel:

SignalR1TextBoxInput 속성을 추가하여 TextBox1과 바인딩합니다.
사용자가 TextBox1에 입력한 값이 SignalR1TextBoxInput 속성에 저장됩니다.
버튼 클릭 시 SendSignalR1Message 메서드가 호출되며, TextBox1에 입력된 값을 SignalR1 메시지로 서버에 전송합니다.
MainWindow.xaml:

TextBox1는 SignalR1TextBoxInput 속성과 바인딩되어 있으며, 사용자가 입력한 값은 ViewModel로 전달됩니다.
DataGrid는 전송된 메시지와 그에 대한 응답을 표시합니다.
버튼을 클릭하면, TextBox1의 값이 SignalR 메시지로 전송됩니다.
MainWindow.xaml.cs:
