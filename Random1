// LspDemoGenerator.cs
#if UNITY_EDITOR
using UnityEditor;
using UnityEngine;
using System.Collections.Generic;

// [LSP의 핵심]
// 1. Enemy 라는 '부모(기반)' 클래스가 있습니다.
// 2. GroundEnemy와 FlyingEnemy 라는 '자식(서브)' 클래스가 Enemy를 상속받습니다.
// 3. TurretController는 상대를 오직 Enemy 타입으로만 알고 상호작용합니다.
//    (GroundEnemy인지 FlyingEnemy인지 전혀 구분하지 않습니다.)
// 4. 그럼에도 불구하고 Turret은 모든 종류의 Enemy를 잘 공격하며, 각 Enemy는 자신만의 방식으로 움직입니다.
//    => 이것이 바로 자식 클래스가 부모 클래스의 역할을 완벽히 '치환'할 수 있다는 LSP의 증명입니다.

#region === 적(Enemy) 클래스 정의 ===

/// <summary>
/// 모든 적의 '부모' 역할을 하는 기반 클래스입니다. (추상 클래스)
/// LSP의 '기반 타입(Base Type)'에 해당합니다.
/// 모든 Enemy가 공통적으로 가져야 할 속성(체력)과 기능(피격, 이동)의 '규격'을 정의합니다.
/// </summary>
public abstract class Enemy : MonoBehaviour
{
    // public: 외부(예: 포탑)에서 이 적의 정보를 쉽게 참조할 수 있도록 설정
    public float health = 100f;
    public Transform target; // 모든 적은 플레이어 또는 특정 목표물을 향해 움직입니다.

    /// <summary>
    /// 외부로부터 공격받았을 때 체력이 감소하는 기능입니다.
    /// 이 기능은 모든 자식 Enemy들이 공통으로 사용합니다.
    /// </summary>
    /// <param name="damage">입은 데미지 양</param>
    public void TakeDamage(float damage)
    {
        health -= damage;
        Debug.Log($"{gameObject.name}이(가) {damage}의 피해를 입었습니다! 남은 체력: {health}");
        if (health <= 0)
        {
            Destroy(gameObject);
        }
    }

    /// <summary>
    /// 적이 어떻게 움직일지에 대한 '추상 메서드'입니다.
    /// 'abstract' 키워드는 이 메서드의 실제 구현 내용이 여기서는 정해지지 않았음을 의미합니다.
    /// 이 Enemy 클래스를 상속받는 모든 '자식' 클래스는 반드시 이 Move() 메서드를 자신만의 방식으로 구현해야 합니다.
    /// </summary>
    public abstract void Move();

    // 모든 적들이 매 프레임마다 움직이도록 Update에서 Move()를 호출합니다.
    private void Update()
    {
        if (target != null)
        {
            Move();
        }
    }
}

/// <summary>
/// '지상' 유닛을 표현하는 자식 클래스입니다.
/// Enemy를 상속받았으므로 LSP의 '서브 타입(Subtype)'에 해당합니다.
/// </summary>
public class GroundEnemy : Enemy
{
    public float moveSpeed = 3f;

    /// <summary>
    /// 부모인 Enemy 클래스의 추상 메서드 Move()를 '실제로 구현(override)'하는 부분입니다.
    /// 이 적은 목표물을 향해 지상으로 직선 이동합니다.
    /// </summary>
    public override void Move()
    {
        // 목표 방향을 계산합니다 (y축은 무시하여 지상 이동만 하도록 함).
        Vector3 direction = target.position - transform.position;
        direction.y = 0;

        // 목표 방향으로 천천히 회전합니다.
        transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(direction), 0.1f);

        // 앞 방향으로 이동합니다.
        transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime);
    }
}


/// <summary>
/// '공중' 유닛을 표현하는 자식 클래스입니다.
/// GroundEnemy와 마찬가지로 LSP의 '서브 타입(Subtype)'입니다.
/// </summary>
public class FlyingEnemy : Enemy
{
    public float moveSpeed = 2f;
    public float hoverAmplitude = 0.5f; // 위아래로 움직이는 진폭
    public float hoverFrequency = 2f;   // 위아래로 움직이는 주기

    /// <summary>
    /// 부모인 Enemy의 Move() 메서드를 '공중 유닛'에 맞게 다르게 구현합니다.
    /// 이 적은 목표물을 향해 날아가면서, 위아래로 둥실거리는 움직임을 보여줍니다.
    /// </summary>
    public override void Move()
    {
        // 목표물을 향해 이동합니다.
        transform.position = Vector3.MoveTowards(transform.position, target.position, moveSpeed * Time.deltaTime);

        // Sin 함수를 이용해 위아래로 둥실거리는 효과를 추가합니다.
        float hoverEffect = Mathf.Sin(Time.time * hoverFrequency) * hoverAmplitude;
        transform.position += new Vector3(0, hoverEffect * Time.deltaTime, 0);
    }
}

#endregion


#region === 포탑(Turret) 클래스 정의 ===

/// <summary>
/// 적(Enemy)을 탐지하고 공격하는 포탑 클래스입니다.
/// 이 클래스는 LSP 원칙이 잘 지켜졌는지 '테스트하는 역할'을 합니다.
/// </summary>
public class TurretController : MonoBehaviour
{
    public float detectionRadius = 10f;
    public float fireRate = 1f;
    private float nextFireTime = 0f;

    // [LSP의 가장 중요한 부분]
    // 포탑은 탐지한 적들을 'Enemy' 리스트로 관리합니다.
    // 'GroundEnemy'나 'FlyingEnemy' 같은 구체적인 자식 타입에 대해 전혀 알 필요가 없습니다.
    // 오직 'Enemy'라는 부모(기반) 타입에만 의존합니다.
    private Enemy currentTarget;

    void Update()
    {
        // 현재 목표물이 없거나, 범위를 벗어났으면 새로운 목표물을 찾습니다.
        if (currentTarget == null || Vector3.Distance(transform.position, currentTarget.transform.position) > detectionRadius)
        {
            FindNewTarget();
        }

        // 목표물이 있다면 공격합니다.
        if (currentTarget != null)
        {
            // 목표물을 향해 포탑을 회전시킵니다.
            transform.LookAt(currentTarget.transform);

            // 발사 주기에 맞춰 공격합니다.
            if (Time.time >= nextFireTime)
            {
                Fire();
                nextFireTime = Time.time + 1f / fireRate;
            }
        }
    }

    /// <summary>
    /// 범위 내의 모든 'Enemy'를 찾아 새로운 목표물로 설정합니다.
    /// </summary>
    void FindNewTarget()
    {
        // Scene에 존재하는 모든 Enemy 타입의 컴포넌트를 찾아옵니다.
        // 이 함수는 GroundEnemy, FlyingEnemy를 가리지 않고 'Enemy를 상속받은 모든 것'을 찾아옵니다.
        Enemy[] allEnemiesInScene = FindObjectsOfType<Enemy>();
        
        Enemy closestEnemy = null;
        float minDistance = float.MaxValue;

        foreach (var enemy in allEnemiesInScene)
        {
            float distance = Vector3.Distance(transform.position, enemy.transform.position);
            if (distance <= detectionRadius && distance < minDistance)
            {
                minDistance = distance;
                closestEnemy = enemy;
            }
        }
        
        // 가장 가까운 적을 현재 목표물로 설정합니다.
        currentTarget = closestEnemy;
    }

    /// <summary>
    /// 현재 목표물을 공격하는 함수입니다. (여기서는 레이저를 쏘는 것으로 시각화)
    /// </summary>
    void Fire()
    {
        // 포탑의 코드 어디에도 "만약 GroundEnemy이면..." 또는 "만약 FlyingEnemy이면..." 같은 분기문이 없습니다.
        // 그냥 'Enemy'로써 당연히 가지고 있을 transform과 TakeDamage 메서드를 호출할 뿐입니다.
        // 이것이 LSP가 제공하는 강력한 유연성입니다.
        Debug.DrawRay(transform.position, (currentTarget.transform.position - transform.position).normalized * detectionRadius, Color.red, 0.5f);
        Debug.Log($"{currentTarget.name}을(를) 공격!");
        
        // currentTarget이 GroundEnemy이든 FlyingEnemy이든 상관없이 TakeDamage를 호출할 수 있습니다.
        currentTarget.TakeDamage(10);
    }
}


#endregion


#region === 에디터 셋업 스크립트 ===

/// <summary>
/// 유니티 에디터 메뉴에 'LSP 데모 씬 생성' 기능을 추가하는 클래스입니다.
/// </summary>
public class LspDemoGenerator
{
    // 유니티 상단 메뉴에 "LSP/Create LSP Demo Scene" 메뉴 항목을 생성합니다.
    [MenuItem("LSP/Create LSP Demo Scene")]
    private static void CreateDemoScene()
    {
        // 씬을 깔끔하게 정리하기 위해 기존 오브젝트들을 삭제 (주의!)
        // GameObject.Find("TARGET")?.transform.position = Vector3.zero; // 간단한 초기화 방법
        
        // --- 1. 목표물(Target) 생성 ---
        GameObject targetObj = new GameObject("PLAYER_TARGET");
        targetObj.transform.position = Vector3.zero;
        targetObj.AddComponent<SphereCollider>().isTrigger = true;
        // 시각적으로 보이도록 구체(Sphere) 메시 추가
        GameObject targetSphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
        targetSphere.transform.SetParent(targetObj.transform);
        targetSphere.transform.localPosition = Vector3.zero;
        Object.DestroyImmediate(targetSphere.GetComponent<Collider>()); // 불필요한 콜라이더 제거
        targetSphere.GetComponent<Renderer>().material.color = Color.blue;
        
        // --- 2. 지상 적(GroundEnemy) 생성 ---
        GameObject groundEnemyObj = GameObject.CreatePrimitive(PrimitiveType.Capsule);
        groundEnemyObj.name = "GroundEnemy_1";
        groundEnemyObj.transform.position = new Vector3(-5, 0, 8);
        var groundEnemyScript = groundEnemyObj.AddComponent<GroundEnemy>();
        groundEnemyScript.target = targetObj.transform; // 목표물 설정
        groundEnemyObj.GetComponent<Renderer>().material.color = new Color(0.8f, 0.4f, 0.1f); // 주황색

        // --- 3. 공중 적(FlyingEnemy) 생성 ---
        GameObject flyingEnemyObj = GameObject.CreatePrimitive(PrimitiveType.Cube);
        flyingEnemyObj.name = "FlyingEnemy_1";
        flyingEnemyObj.transform.position = new Vector3(5, 3, 8); // 공중에 띄움
        var flyingEnemyScript = flyingEnemyObj.AddComponent<FlyingEnemy>();
        flyingEnemyScript.target = targetObj.transform; // 목표물 설정
        flyingEnemyScript.GetComponent<Renderer>().material.color = new Color(0.5f, 0.2f, 0.8f); // 보라색

        // --- 4. 포탑(Turret) 생성 ---
        GameObject turretObj = new GameObject("Turret");
        turretObj.transform.position = new Vector3(0, 0, -8);
        turretObj.AddComponent<TurretController>();
        // 포탑 모양 만들기
        GameObject turretBase = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
        turretBase.name = "TurretBase";
        turretBase.transform.SetParent(turretObj.transform);
        turretBase.transform.localPosition = Vector3.zero;
        turretBase.transform.localScale = new Vector3(1.5f, 0.5f, 1.5f);
        GameObject turretHead = GameObject.CreatePrimitive(PrimitiveType.Cube);
        turretHead.name = "TurretHead";
        turretHead.transform.SetParent(turretObj.transform);
        turretHead.transform.localPosition = new Vector3(0, 0.5f, 0);
        turretHead.GetComponent<Renderer>().material.color = Color.gray;
        
        Debug.Log("LSP 데모 씬이 성공적으로 생성되었습니다! Play 버튼을 눌러 확인해보세요.");
    }
}
#endregion

#endif