로고침 버튼을 눌렀을 때 MSSQL에서 데이터를 다시 가져오고 DataGrid에 업데이트하려면, 새로고침 버튼을 추가하고, 해당 버튼을 누를 때 데이터를 다시 가져오는 기능을 추가할 수 있습니다.

1. app.py에 새로고침 로직 추가
새로고침 버튼을 누르면 서버에서 데이터를 다시 읽어오도록 라우팅을 그대로 사용하면 됩니다. 즉, 새로고침 버튼을 누를 때마다 데이터를 다시 가져오고, HTML 테이블에 데이터를 다시 렌더링합니다.

app.py
기존 라우팅에 변동은 없고, HTML에서 버튼을 통해 /로 다시 요청을 보내는 방식입니다.

python
코드 복사
from flask import Flask, render_template
import pyodbc

app = Flask(__name__)

# MSSQL에 연결하는 함수
def get_db_connection():
    conn = pyodbc.connect(
        'DRIVER={ODBC Driver 17 for SQL Server};'
        'SERVER=your_server_name;'
        'DATABASE=your_database_name;'
        'UID=your_username;'
        'PWD=your_password;'
    )
    return conn

# MSSQL에서 데이터를 가져오는 함수
def fetch_command_log():
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # SQL 쿼리 실행
    cursor.execute('SELECT Id, CommandText, SentCommand, RecdivedCommand, Status, Result, RetryCount, ResponseTime, Timestamp FROM CommandLog')
    
    # 데이터를 모두 가져옴
    rows = cursor.fetchall()
    
    # 컬럼 이름을 가져옴
    columns = [column[0] for column in cursor.description]
    
    # 데이터베이스 연결 종료
    conn.close()
    
    # 결과 반환
    return rows, columns

# Flask 라우팅
@app.route('/')
def index():
    # 데이터를 가져옴
    rows, columns = fetch_command_log()
    
    # 데이터를 index.html로 렌더링
    return render_template('index.html', rows=rows, columns=columns)

if __name__ == '__main__':
    app.run(debug=True)
2. index.html 수정 (새로고침 버튼 추가)
새로고침 버튼을 추가하여 / 경로로 다시 요청을 보내도록 설정합니다. 버튼 클릭 시 새로고침 효과를 주기 위해 새로고침 버튼을 HTML 템플릿에 추가합니다.

templates/index.html
html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Command Log Table</title>
    <style>
        table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            font-size: 18px;
            text-align: left;
        }
        th, td {
            padding: 12px 15px;
            border: 1px solid #ddd;
        }
        th {
            background-color: #f2f2f2;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
    </style>
</head>
<body>

<h2>Command Log Table</h2>

<!-- 새로고침 버튼 -->
<button onclick="location.reload();">새로고침</button>

<!-- Command Log Table -->
<table>
    <thead>
        <tr>
            {% for column in columns %}
            <th>{{ column }}</th>
            {% endfor %}
        </tr>
    </thead>
    <tbody>
        {% for row in rows %}
        <tr>
            {% for item in row %}
            <td>{{ item }}</td>
            {% endfor %}
        </tr>
        {% endfor %}
    </tbody>
</table>

</body>
</html>
3. 동작 설명:
새로고침 버튼 추가:

HTML에 새로고침 버튼을 추가했습니다. 이 버튼을 누르면 페이지가 다시 로드되며, Flask는 MSSQL에서 다시 데이터를 가져와 DataGrid를 갱신합니다.
Flask 서버에서 데이터 제공:

Flask 서버는 / 경로에서 CommandLog 테이블의 데이터를 가져와 HTML 테이블에 데이터를 렌더링합니다.
새로고침 버튼을 누르면 페이지가 다시 로드되면서 DB에서 데이터를 다시 가져오고 새롭게 화면에 표시됩니다.
4. 실행 방법:
Flask 앱을 실행:

bash
코드 복사
python app.py
브라우저에서 **http://localhost:5000/**로 접속:

페이지가 처음 로드되며 DB에서 데이터를 가져옵니다.
페이지 상단의 새로고침 버튼을 누르면 데이터를 다시 로드하여 화면에 갱신합니다.
요약:
**location.reload()**를 사용하여 새로고침 버튼을 눌렀을 때 페이지를 다시 로드하도록 했습니다.
새로고침 시 Flask가 다시 MSSQL에서 데이터를 가져오고, HTML 테이블에 최신 데이터를 표시합니다