

import React, { useState, useRef } from 'react';
import ScannerInput from './ScannerInput';
import Rack from './Rack';
import { findSlotByBarcode, getInventoryLayout } from '../services/inventoryService';
import PdfDownloadButton from './PdfDownloadButton';

// Status Message Component
interface StatusMessageProps {
  message: string;
  type: 'info' | 'success' | 'error';
}
const StatusMessage: React.FC<StatusMessageProps> = ({ message, type }) => {
  if (!message) return null;

  const baseClasses = 'mt-6 p-4 rounded-lg text-center font-medium w-full max-w-lg transition-all duration-300';
  const typeClasses = {
    info: 'bg-blue-900/50 text-blue-200 border border-blue-700',
    success: 'bg-green-900/50 text-green-200 border border-green-700',
    error: 'bg-red-900/50 text-red-200 border border-red-700',
  };

  return (
    <div className={`${baseClasses} ${typeClasses[type]}`}>
      {message}
    </div>
  );
};

// Test Guide Component
const TestGuide = () => (
  <div className="w-full max-w-4xl mx-auto mt-12 p-6 bg-gray-800/60 border border-gray-700 rounded-xl shadow-lg">
    <h2 className="text-2xl font-bold text-cyan-400 mb-4">시뮬레이션 테스트 방법</h2>
    <div className="space-y-4 text-gray-300">
      <p>본 시뮬레이터는 새로운 품명 규칙에 따라 개편된 재고 시스템의 동작을 검증합니다.</p>
      <h3 className="text-lg font-semibold text-white pt-2">품명(바코드) 규칙:</h3>
      <p><code className="bg-gray-900 px-1 rounded">MMF10[구역][랙번호][층][슬롯번호]</code></p>
      <ul className="list-disc list-inside pl-5 mt-1 text-gray-400">
          <li><strong>구역:</strong> A (총 8개 랙) 또는 B (총 14개 랙)</li>
          <li><strong>랙번호:</strong> 01-08 (A구역), 01-14 (B구역)</li>
          <li><strong>층:</strong> A, B, C (위에서부터)</li>
          <li><strong>슬롯번호:</strong> 01-12</li>
      </ul>
      <h3 className="text-lg font-semibold text-white pt-2">테스트 절차:</h3>
      <ol className="list-decimal list-inside space-y-2">
        <li>
          <strong>유효한 바코드 예시:</strong>
          <ul className="list-disc list-inside pl-5 mt-1 text-gray-400">
            <li>A구역 1번 랙 B층 11번 슬롯: <code className="bg-gray-900 px-1 rounded">MMF10A01B11</code></li>
            <li>A구역 8번 랙 C층 1번 슬롯: <code className="bg-gray-900 px-1 rounded">MMF10A08C01</code></li>
            <li>B구역 3번 랙 A층 5번 슬롯: <code className="bg-gray-900 px-1 rounded">MMF10B03A05</code></li>
            <li>B구역 14번 랙 B층 12번 슬롯: <code className="bg-gray-900 px-1 rounded">MMF10B14B12</code></li>
          </ul>
        </li>
        <li><strong>바코드 스캔 (입력):</strong> 상단 입력창에 유효한 바코드 중 하나를 정확하게 입력합니다.</li>
        <li><strong>위치 찾기 실행:</strong> [Locate Component] 버튼을 클릭하거나 Enter 키를 누릅니다.</li>
        <li>
          <strong>결과 확인:</strong> 성공 시, 해당 랙 전체에 조명이 켜지고, 정확한 슬롯에 노란색 LED가 켜집니다.
        </li>
        <li>
          <strong>자동 소등:</strong> <strong className="text-yellow-300">점등된 LED는 11초 후에 자동으로 꺼집니다.</strong>
        </li>
        <li><strong>초기화 및 오류 테스트:</strong> [Reset] 버튼으로 즉시 초기화하고, 없는 바코드를 입력하여 오류 메시지를 확인합니다.</li>
      </ol>
    </div>
  </div>
);


const Simulator = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [activeSlotId, setActiveSlotId] = useState<string | null>(null);
  const [activeRackId, setActiveRackId] = useState<string | null>(null);
  const [statusMessage, setStatusMessage] = useState('Scan a barcode to begin.');
  const [statusType, setStatusType] = useState<'info' | 'success' | 'error'>('info');
  const autoOffTimerRef = useRef<number | null>(null);

  const inventoryLayout = getInventoryLayout();
  const viewId = 'simulator-view';
  
  const clearAutoOffTimer = () => {
    if (autoOffTimerRef.current) {
        clearTimeout(autoOffTimerRef.current);
        autoOffTimerRef.current = null;
    }
  };

  const handleScan = async (barcode: string) => {
    setIsLoading(true);
    setStatusMessage('Searching for component...');
    setStatusType('info');
    setActiveSlotId(null);
    setActiveRackId(null);
    clearAutoOffTimer();

    const foundSlotId = await findSlotByBarcode(barcode);

    if (foundSlotId) {
      const parts = foundSlotId.split('-'); // e.g., "A01-B-11" -> ["A01", "B", "11"]
      const foundRackId = parts[0];
      const foundLevel = parts[1];
      const foundSlotNum = parts[2];
      const sectionId = foundRackId.charAt(0);

      setActiveSlotId(foundSlotId);
      setActiveRackId(foundRackId);
      setStatusMessage(`Success! Component in Section ${sectionId}, Rack ${foundRackId}, Level ${foundLevel}, Slot ${foundSlotNum}.`);
      setStatusType('success');
      
      // Set auto-off timer for 11 seconds
      autoOffTimerRef.current = window.setTimeout(() => {
        setActiveSlotId(null);
        setActiveRackId(null);
        setStatusMessage('LED turned off automatically. Ready for next scan.');
        setStatusType('info');
      }, 11000);

    } else {
      setStatusMessage(`Error: Barcode "${barcode}" not found in the system.`);
      setStatusType('error');
    }
    setIsLoading(false);
  };

  const handleReset = () => {
    setIsLoading(false);
    setActiveSlotId(null);
    setActiveRackId(null);
    setStatusMessage('System reset. Ready for next scan.');
    setStatusType('info');
    clearAutoOffTimer();
  };

  return (
    <div id={viewId} className="w-full flex flex-col items-center">
      <header className="relative text-center mb-8 w-full max-w-7xl">
         <div className="absolute top-0 right-0">
            <PdfDownloadButton elementId={viewId} fileName="SMD-Locator-Simulation.pdf" />
        </div>
        <h1 className="text-4xl font-extrabold tracking-tight text-white sm:text-5xl">
          SMD Component Locator Simulation
        </h1>
        <p className="mt-3 max-w-2xl mx-auto text-base text-gray-400 sm:text-lg">
          An interactive prototype for the barcode-to-LED visual identification system.
        </p>
      </header>

      <div className="bg-gray-800/50 border border-gray-700 p-6 rounded-xl shadow-lg w-full max-w-lg mb-4">
        <ScannerInput onScan={handleScan} onReset={handleReset} isLoading={isLoading} />
      </div>

      <StatusMessage message={statusMessage} type={statusType} />
      
      <div className="w-full mt-8 space-y-12">
        {inventoryLayout.map((section) => (
          <div key={section.id}>
            <h2 className="text-3xl font-bold text-white mb-4 border-l-4 border-cyan-400 pl-4">Section {section.id}</h2>
            <div className="overflow-x-auto pb-4 bg-gray-800/50 rounded-lg shadow-inner">
                <div className="inline-flex gap-4 p-4">
                {section.racks.map((rack) => (
                    <div key={rack.id} className="w-36 flex-shrink-0">
                        <Rack
                            rackData={rack}
                            isActive={rack.id === activeRackId}
                            activeSlotId={activeSlotId}
                        />
                    </div>
                ))}
                </div>
            </div>
          </div>
        ))}
      </div>
      <div className="w-full max-w-4xl mx-auto my-12 border-t border-gray-700/50"></div>
      <TestGuide />
    </div>
  );
}

export default Simulator;