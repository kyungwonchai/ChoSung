네, 회사 네트워크 안에서 apt-get이 막히는 건 대부분 인증서 문제입니다. 설치하신 회사 인증서 2개가 apt에 제대로 적용됐는지 확인하는 가장 확실한 방법들을 알려드리겠습니다.

## 1. 가장 간단하고 확실한 방법: apt update 다시 실행
제일 직접적인 방법입니다. 인증서를 올바르게 설치했다면, 이전에 실패했던 apt 명령어가 이제는 성공해야 합니다.

Bash

sudo apt-get update
✅ 성공: 에러 없이 패키지 목록을 쭉 가져오면 인증서가 제대로 적용된 것입니다.

❌ 실패: 만약 여전히 certificate verification failed 나 SSL routines 같은 오류가 발생한다면, 인증서가 제대로 설치되지 않았거나 apt가 인식하지 못하는 상태입니다.

## 2. 인증서가 '시스템 신뢰 목록'에 제대로 등록됐는지 확인 🔍
apt는 개별적으로 인증서를 관리하는 게 아니라, 우분투 시스템 전체가 신뢰하는 인증서 목록을 사용합니다. 따라서 내 인증서가 이 목록에 포함됐는지 확인하면 됩니다.

2.1. 올바른 위치에 인증서 파일이 있는지 확인
시스템에 수동으로 추가하는 인증서는 보통 아래 경로에 넣습니다.
경로: /usr/local/share/ca-certificates/

이 폴더 안에 회사에서 받은 인증서 파일(.crt 확장자) 2개가 있는지 확인해 보세요.

Bash

ls -l /usr/local/share/ca-certificates/
2.2. 시스템에 인증서 목록 업데이트
인증서 파일을 위 경로에 넣은 후에는, 반드시 아래 명령어로 시스템에 "새 인증서가 추가됐으니 목록을 갱신해!"라고 알려줘야 합니다. 이 과정을 빼먹는 경우가 많습니다.

Bash

sudo update-ca-certificates
이 명령어를 실행했을 때, 아래와 같은 메시지가 나와야 합니다.
Updating certificates in /etc/ssl/certs...
2 added, 0 removed; done.  <-- "2 added" 라고 나오면 성공입니다.

만약 0 added 라고 나오면, 인증서 파일 위치나 확장자(.crt가 맞는지)를 다시 확인해야 합니다.

## 3. 최종 확인: 특정 사이트에 직접 연결 테스트 🔧
apt가 아닌 다른 도구로 특정 서버에 접속해서, 시스템이 내 인증서를 사용해 연결을 허용하는지 직접 테스트해 볼 수 있습니다. apt가 연결하려던 download.docker.com 같은 사이트로 테스트해 보면 확실합니다.

아래 명령어를 터미널에 입력해 보세요.

Bash

openssl s_client -connect download.docker.com:443 -CApath /etc/ssl/certs/
명령어를 실행하고 나온 여러 줄의 결과 중에서 맨 마지막 줄 근처를 확인하세요.

성공: Verify return code: 0 (ok)

이렇게 나오면, 시스템이 download.docker.com 서버를 신뢰하며 통신에 성공했다는 뜻입니다. 인증서 설치가 완벽하게 된 것입니다.

실패: Verify return code: 19 (self signed certificate in certificate chain) 또는 다른 숫자(0이 아닌)

이렇게 나오면 여전히 시스템이 해당 서버를 신뢰하지 못하는 상태이며, 인증서 설치 과정에 문제가 있는 것입니다. 2번 단계를 다시 꼼꼼히 확인해 보세요.

