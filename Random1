etMinMaxValues 메서드를 호출할 때 "개체 참조가 개체의 인스턴스로 설정되지 않았습니다"라는 오류가 발생하는 경우, 이는 AxisY 또는 WholeRange 속성이 null이기 때문에 발생할 수 있습니다. 이를 방지하려면 해당 속성들이 유효한지 확인한 후에 SetMinMaxValues를 호출해야 합니다.

수정된 코드:

csharp
코드 복사
using DevExpress.Xpf.Charts;
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;
using System.Windows.Media;

namespace LineDataViewer
{
    public partial class MainWindow : Window
    {
        private List<DataPoint> allData;

        public MainWindow()
        {
            InitializeComponent();
            LoadData();
            InitializeLineChart();
        }

        private void LoadData()
        {
            allData = new List<DataPoint>();
            var connectionString = "YourConnectionStringHere";

            using (var connection = new SqlConnection(connectionString))
            {
                connection.Open();
                var query = @"
                    SELECT ModelName, Timestamp, MP1DATA, MP2DATA, MP3DATA, MP4DATA, MP5DATA
                    FROM View_InspectionResult
                    ORDER BY Timestamp DESC";

                using (var command = new SqlCommand(query, connection))
                using (var reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        allData.Add(new DataPoint
                        {
                            ModelName = reader.GetString(0),
                            Timestamp = reader.GetDateTime(1),
                            MP1 = reader.GetDouble(2),
                            MP2 = reader.GetDouble(3),
                            MP3 = reader.GetDouble(4),
                            MP4 = reader.GetDouble(5),
                            MP5 = reader.GetDouble(6),
                        });
                    }
                }
            }
        }

        private void InitializeLineChart()
        {
            var diagram = LineChart.Diagram as XYDiagram2D;
            if (diagram == null)
                return;

            diagram.Series.Clear();

            // Y축 범위 설정
            if (diagram.AxisY?.WholeRange != null)
            {
                diagram.AxisY.WholeRange.SetMinMaxValues(-1.0, 1.0);
            }
            else
            {
                // 오류 처리 또는 기본값 설정
                MessageBox.Show("AxisY 또는 WholeRange가 null입니다.");
                return;
            }

            // 품질 기준선 추가
            AddQualityLines(diagram);

            // L 모델과 R 모델의 색상 정의
            var blueColors = new[] { Colors.Blue, Colors.SkyBlue, Colors.DodgerBlue, Colors.CornflowerBlue, Colors.LightBlue };
            var redColors = new[] { Colors.Red, Colors.OrangeRed, Colors.Crimson, Colors.IndianRed, Colors.LightCoral };

            // L 모델 데이터 시리즈 추가
            var lData = allData.Where(d => d.ModelName.EndsWith("L")).ToList();
            for (int i = 0; i < 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"L 모델 MP{i + 1}",
                    DataSource = lData,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i + 1}",
                    MarkerVisible = true,
                    LineStyle = new LineStyle { Thickness = 2 },
                    Brush = new SolidColorBrush(blueColors[i]),
                    MarkerBrush = new SolidColorBrush(blueColors[i])
                };
                diagram.Series.Add(series);
            }

            // R 모델 데이터 시리즈 추가
            var rData = allData.Where(d => d.ModelName.EndsWith("R")).ToList();
            for (int i = 0; i < 5; i++)
            {
                var series = new LineSeries2D
                {
                    DisplayName = $"R 모델 MP{i + 1}",
                    DataSource = rData,
                    ArgumentDataMember = "Timestamp",
                    ValueDataMember = $"MP{i + 1}",
                    MarkerVisible = true,
                    LineStyle = new LineStyle { Thickness = 2 },
                    Brush = new SolidColorBrush(redColors[i]),
                    MarkerBrush = new SolidColorBrush(redColors[i])
                };
                diagram.Series.Add(series);
            }
        }

        private void AddQualityLines(XYDiagram2D diagram)
        {
            // 상한선 0.6
            var upperLine = new ConstantLine
            {
                Value = 0.6,
                Title = new ConstantLineTitle
                {
                    Content = "Upper Limit",
                    Visibility = Visibility.Visible
                },
                Brush = new SolidColorBrush(Colors.Green),
                LineStyle = new LineStyle { Thickness = 1, DashStyle = DashStyles.Dash }
            };
            diagram.AxisY.ConstantLines.Add(upperLine);

            // 하한선 -0.6
            var lowerLine = new ConstantLine
            {
                Value = -0.6,
                Title = new ConstantLineTitle
                {
                    Content = "Lower Limit",
                    Visibility = Visibility.Visible
                },
                Brush = new SolidColorBrush(Colors.Red),
                LineStyle = new LineStyle { Thickness = 1, DashStyle = DashStyles.Dash }
            };
            diagram.AxisY.ConstantLines.Add(lowerLine);
        }
    }

    public class DataPoint
    {
        public string ModelName { get; set; }
        public DateTime Timestamp { get; set; }
        public double MP1 { get; set; }
        public double MP2 { get; set; }
        public double MP3 { get; set; }
        public double MP4 { get; set; }
        public double MP5 { get; set; }
    }
}
주요 변경 사항:

AxisY 및 WholeRange 속성 확인:

diagram.AxisY?.WholeRange != null 조건문을 통해 AxisY와 WholeRange 속성이 null이 아닌지 확인합니다.
만약 null이라면 오류 메시지를 표시하고 메서드를 종료합니다.
오류 처리:

AxisY 또는 WholeRange가 null인 경우, 사용자에게 알림을 주기 위해 MessageBox.Show를 사용하여 오류 메시지를 표시합니다.
참고 자료:
