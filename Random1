// MainActivity.kt 파일의 이 부분을 교체하세요

    /**
     * 공유 폴더의 PDF 목록에서 '라인' 목록을 추출하여 사용자에게 선택 다이얼로그를 보여줍니다.
     */
    private suspend fun showLineSelectionDialog() {
        try {
            val allFiles = listSmbFiles()
            // --- 💡 수정된 부분 시작 ---
            // 파일명에서 라인 이름 추출 후, 숫자 부분을 2자리로 정규화
            val lineNames = allFiles
                .mapNotNull { it.name.split('_').firstOrNull() }
                .map { line ->
                    // 정규식을 사용해 라인 이름에서 숫자 부분과 문자 부분을 분리
                    val regex = "(\\d+)(.*)".toRegex()
                    val matchResult = regex.find(line)
                    if (matchResult != null) {
                        val (number, text) = matchResult.destructured
                        // 숫자 부분을 2자리 문자열로 포맷팅 (예: "1" -> "01")
                        String.format("%02d%s", number.toInt(), text)
                    } else {
                        line // 숫자 부분이 없는 경우는 그대로 사용
                    }
                }
                .distinct() // 중복 제거
                .sorted()   // 정렬

            // --- 💡 수정된 부분 끝 ---

            if (lineNames.isEmpty()) {
                withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "PDF 파일을 찾을 수 없습니다.", Toast.LENGTH_SHORT).show() }
                return
            }

            withContext(Dispatchers.Main) {
                AlertDialog.Builder(this@MainActivity)
                    .setTitle("라인 선택")
                    .setItems(lineNames.toTypedArray()) { _, which ->
                        val selectedLine = lineNames[which]
                        prefs.edit().putString(KEY_LAST_LINE, selectedLine).apply()
                        lifecycleScope.launch(Dispatchers.IO) {
                            showReelListDialog(selectedLine, allFiles)
                        }
                    }
                    .show()
            }
        } catch (e: Exception) {
            Log.e("SmbTask", "라인 목록 조회 실패", e)
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "라인 목록 조회 실패: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }

    /**
     * 선택된 라인에 해당하는 PDF 파일 목록을 최신순으로 정렬하여 보여줍니다.
     * 가장 최신 파일은 파란색으로 하이라이트됩니다.
     */
    private suspend fun showReelListDialog(selectedLine: String, allFiles: List<SmbFile>) {
        // --- 💡 수정된 부분 시작 ---
        // 필터링 시, 정규화된 이름(01)과 정규화되지 않은 이름(1)을 모두 고려
        val normalizedLine = selectedLine.removePrefix("0")
        val filesInLine = allFiles
            .filter { it.name.startsWith("${selectedLine}_") || it.name.startsWith("${normalizedLine}_") }
            .sortedByDescending { it.lastModified() }
        // --- 💡 수정된 부분 끝 ---

        if (filesInLine.isEmpty()) {
            withContext(Dispatchers.Main) { Toast.makeText(this@MainActivity, "선택한 라인에 파일이 없습니다.", Toast.LENGTH_SHORT).show() }
            return
        }

        // 표시할 파일 이름 목록 생성 (라인명, .pdf 제거)
        val displayNames = filesInLine.map {
            it.name.removePrefix("${selectedLine}_").removePrefix("${normalizedLine}_").removeSuffix(".pdf")
        }

        withContext(Dispatchers.Main) {
            val adapter = ArrayAdapter<SpannableString>(this@MainActivity, android.R.layout.simple_list_item_1)
            displayNames.forEachIndexed { index, name ->
                val spannable = SpannableString(name)
                if (index == 0) { // 첫 번째 항목(최신)
                    spannable.setSpan(ForegroundColorSpan(ContextCompat.getColor(this@MainActivity, android.R.color.holo_blue_dark)), 0, name.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)
                }
                adapter.add(spannable)
            }

            AlertDialog.Builder(this@MainActivity)
                .setTitle("릴리스트 선택 ($selectedLine)")
                .setAdapter(adapter) { _, which ->
                    val selectedFile = filesInLine[which]
                    lifecycleScope.launch(Dispatchers.IO) {
                        loadPdfFromSmbFile(selectedFile)
                    }
                }
                .show()