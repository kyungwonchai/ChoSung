알겠습니다. 사물함 현황 보기 기능을 구현하기 위한 신규 파일 4개의 전체 원본 코드(주석 제외, 파일 ID 포함)를 모두 드리겠습니다.

추가/수정되는 파일 목록:

Models/StatusItem.cs (신규)
ViewModels/StatusViewModel.cs (신규)
Views/StatusWindow.xaml (신규 - 이전 답변 내용 포함)
Views/StatusWindow.xaml.cs (신규)
1. Models/StatusItem.cs (신규 파일)

Models 폴더에 새로 추가하세요.

C#

// FILE_ID: Models/StatusItem_20250410173000
using LockerManagementApp.Infrastructure;

namespace LockerManagementApp.Models
{
    public class StatusItem : ViewModelBase
    {
        private string _groupValue;
        private int _totalCount;
        private int _usedCount;
        private int _availableCount;
        private double _usageRate;

        public string GroupValue { get => _groupValue; set => SetProperty(ref _groupValue, value); }
        public int TotalCount { get => _totalCount; set => SetProperty(ref _totalCount, value); }
        public int UsedCount { get => _usedCount; set => SetProperty(ref _usedCount, value); }
        public int AvailableCount { get => _availableCount; set => SetProperty(ref _availableCount, value); }
        public double UsageRate { get => _usageRate; set => SetProperty(ref _usageRate, value); }
    }
}
2. ViewModels/StatusViewModel.cs (신규 파일)

ViewModels 폴더에 새로 추가하세요.

C#

// FILE_ID: ViewModels/StatusViewModel_20250410173000
using LockerManagementApp.Data;
using LockerManagementApp.Models;
using LockerManagementApp.Infrastructure;
using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Collections.Generic; // List 사용

namespace LockerManagementApp.ViewModels
{
    public class StatusViewModel : ViewModelBase, IDisposable
    {
        private readonly LockerDbContext _context;
        private readonly CancellationTokenSource _cts = new CancellationTokenSource();
        private bool _disposed = false;

        private ObservableCollection<StatusItem> _statusByType;
        private ObservableCollection<StatusItem> _statusByFloor;
        private ObservableCollection<StatusItem> _statusByZone;
        private string _statusMessage;

        public ObservableCollection<StatusItem> StatusByType { get => _statusByType; set => SetProperty(ref _statusByType, value); }
        public ObservableCollection<StatusItem> StatusByFloor { get => _statusByFloor; set => SetProperty(ref _statusByFloor, value); }
        public ObservableCollection<StatusItem> StatusByZone { get => _statusByZone; set => SetProperty(ref _statusByZone, value); }
        public string StatusMessage { get => _statusMessage; set => SetProperty(ref _statusMessage, value); }

        public ICommand LoadStatusCommand { get; }

        public StatusViewModel()
        {
            StatusByType = new ObservableCollection<StatusItem>();
            StatusByFloor = new ObservableCollection<StatusItem>();
            StatusByZone = new ObservableCollection<StatusItem>();

            try { _context = new LockerDbContext(); }
            catch (Exception ex) { if (!App.IsShuttingDown) MessageBox.Show($"[Status] DB 컨텍스트 생성 오류:\n{ex.ToString()}", "초기화 오류", MessageBoxButton.OK, MessageBoxImage.Error); else Debug.WriteLine($"종료 중 [Status] DB 컨텍스트 생성 오류 무시됨: {ex.Message}"); StatusMessage = "DB 연결 오류!"; LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), _ => !_disposed); return; }

            LoadStatusCommand = new RelayCommand(async _ => await LoadStatusDataAsync(), CanExecuteLoad);
            if (_context != null) { _ = LoadStatusDataAsync(); }
        }

        private bool CanExecuteLoad(object parameter = null) => !_disposed && _context != null && !_cts.IsCancellationRequested;

        public async Task LoadStatusDataAsync()
        {
            if (!CanExecuteLoad()) return;
            StatusMessage = "현황 데이터 로딩 중...";
            (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged();
            Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 시작...");

            List<LockerAssignment> allAssignments = null;
            try
            {
                if (!CanExecuteLoad()) return;
                allAssignments = await _context.LockerAssignments.AsNoTracking().ToListAsync(_cts.Token);
                if (_disposed || _cts.IsCancellationRequested) return;

                var statusByType = CalculateStatus(allAssignments, a => a.LockerType);
                var statusByFloor = CalculateStatus(allAssignments, a => a.Floor);
                var statusByZone = CalculateStatus(allAssignments, a => a.Zone);

                if (_disposed || _cts.IsCancellationRequested) return;

                Application.Current.Dispatcher.Invoke(() =>
                {
                    if (_disposed || _cts.IsCancellationRequested || Application.Current == null) return;
                    StatusByType = new ObservableCollection<StatusItem>(statusByType);
                    StatusByFloor = new ObservableCollection<StatusItem>(statusByFloor);
                    StatusByZone = new ObservableCollection<StatusItem>(statusByZone);
                    StatusMessage = "현황 데이터 로드 완료.";
                });
            }
            catch (OperationCanceledException) { Debug.WriteLine("LoadStatusDataAsync 작업 취소됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 취소됨."; }
            catch (ObjectDisposedException) { Debug.WriteLine("LoadStatusDataAsync 실행 중 DbContext Dispose됨."); if (!_disposed) StatusMessage = "현황 데이터 로딩 오류 (컨텍스트 해제됨)."; }
            catch (Exception ex) { StatusMessage = $"현황 데이터 로딩 오류: {ex.Message}"; Debug.WriteLine($"!!! 현황 데이터 로딩 중 오류 발생:\n{ex.ToString()}"); if (!App.IsShuttingDown && !_disposed) MessageBox.Show(StatusMessage, "오류", MessageBoxButton.OK, MessageBoxImage.Error); }
            finally { if (!_disposed) (LoadStatusCommand as RelayCommand)?.RaiseCanExecuteChanged(); Debug.WriteLine($"[{DateTime.Now:HH:mm:ss.fff}] LoadStatusDataAsync 종료."); }
        }

        private List<StatusItem> CalculateStatus(List<LockerAssignment> assignments, Func<LockerAssignment, string> groupingKeySelector)
        {
            if (assignments == null) return new List<StatusItem>();

            return assignments
                .GroupBy(groupingKeySelector)
                .Select(g => {
                    int total = g.Count();
                    int used = g.Count(a => !string.IsNullOrWhiteSpace(a.UserName));
                    int available = total - used;
                    double rate = (total == 0) ? 0 : ((double)used / total * 100.0);
                    return new StatusItem
                    {
                        GroupValue = g.Key ?? "미지정",
                        TotalCount = total,
                        UsedCount = used,
                        AvailableCount = available,
                        UsageRate = rate
                    };
                })
                .OrderBy(s => s.GroupValue)
                .ToList();
        }

        #region IDisposable 구현
        protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; if (disposing) { Debug.WriteLine("StatusViewModel Dispose 시작..."); try { _cts?.Cancel(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Cancel 오류: {ex.Message}"); } try { _cts?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusVM CTS Dispose 오류: {ex.Message}"); } try { _context?.Dispose(); } catch (Exception ex) { Debug.WriteLine($"!!! StatusViewModel DbContext Dispose 오류: {ex.Message}"); } Debug.WriteLine("StatusViewModel 리소스 해제 완료."); } } }
        public void Dispose() { Dispose(true); GC.SuppressFinalize(this); }
        #endregion
    }
}
3. Views/StatusWindow.xaml (신규 파일)

Views 폴더에 새로 추가하세요.

XML

<dx:ThemedWindow
    x:Class="LockerManagementApp.Views.StatusWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
    xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
    xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
    xmlns:local="clr-namespace:LockerManagementApp.Views"
    xmlns:viewmodels="clr-namespace:LockerManagementApp.ViewModels"
    mc:Ignorable="d"
    Title="사물함 사용 현황" Height="700" Width="900"
    WindowStartupLocation="CenterOwner" ShowInTaskbar="False"
    Closing="StatusWindow_Closing">

    <dx:ThemedWindow.Resources>
        <Style TargetType="dxg:GridColumnHeader">
            <Setter Property="Background" Value="LightSteelBlue"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="Bold"/>
        </Style>
        <Style TargetType="dxg:CellContentPresenter">
            <Setter Property="HorizontalAlignment" Value="Center"/>
        </Style>
        <Style x:Key="LeftAlignCellStyle" TargetType="dxg:CellContentPresenter">
            <Setter Property="HorizontalAlignment" Value="Left"/>
        </Style>
    </dx:ThemedWindow.Resources>

    <Grid Margin="10">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <Button Grid.Row="0" Content="🔄 새로고침" Command="{Binding LoadStatusCommand}" HorizontalAlignment="Left" Margin="0,0,0,10" Padding="10,3"/>

        <GroupBox Grid.Row="1" Header="종류별 현황" Margin="0,0,0,5">
            <dxg:GridControl ItemsSource="{Binding StatusByType}" AutoGenerateColumns="None" IsReadOnly="True">
                <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="GroupValue" Header="종류" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                    <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                    <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                    <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                    <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                </dxg:GridControl.Columns>
            </dxg:GridControl>
        </GroupBox>

        <GroupBox Grid.Row="2" Header="층별 현황" Margin="0,5,0,5">
             <dxg:GridControl ItemsSource="{Binding StatusByFloor}" AutoGenerateColumns="None" IsReadOnly="True">
                 <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                 <dxg:GridControl.Columns>
                     <dxg:GridColumn FieldName="GroupValue" Header="층"/>
                     <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                     <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                     <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                     <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                 </dxg:GridControl.Columns>
             </dxg:GridControl>
        </GroupBox>

        <GroupBox Grid.Row="3" Header="구역별 현황" Margin="0,5,0,0">
             <dxg:GridControl ItemsSource="{Binding StatusByZone}" AutoGenerateColumns="None" IsReadOnly="True">
                 <dxg:GridControl.View> <dxg:TableView AllowEditing="False" ShowGroupPanel="False"/> </dxg:GridControl.View>
                 <dxg:GridControl.Columns>
                     <dxg:GridColumn FieldName="GroupValue" Header="구역" CellStyle="{StaticResource LeftAlignCellStyle}"/>
                     <dxg:GridColumn FieldName="TotalCount" Header="총 개수"/>
                     <dxg:GridColumn FieldName="UsedCount" Header="사용 개수"/>
                     <dxg:GridColumn FieldName="AvailableCount" Header="여유 개수"/>
                     <dxg:GridColumn FieldName="UsageRate" Header="사용률(%)"> <dxg:GridColumn.EditSettings> <dxe:TextEditSettings DisplayFormat="N1"/> </dxg:GridColumn.EditSettings> </dxg:GridColumn>
                 </dxg:GridControl.Columns>
             </dxg:GridControl>
        </GroupBox>

         <StatusBar Grid.Row="4" Background="LightGray" Margin="0,10,0,0">
            <StatusBarItem><TextBlock Text="{Binding StatusMessage}" Margin="5,0"/></StatusBarItem>
        </StatusBar>

        <Button Grid.Row="5" Content="닫기" Width="80" HorizontalAlignment="Right" Margin="0,10,0,0" Click="CloseButton_Click" IsCancel="True"/>

    </Grid>
</dx:ThemedWindow>
4. Views/StatusWindow.xaml.cs (신규 파일)

Views 폴더에 새로 추가하세요.

C#

// FILE_ID: Views/StatusWindow_CS_20250410173000
using DevExpress.Xpf.Core;
using LockerManagementApp.ViewModels; // StatusViewModel 참조
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Windows;

namespace LockerManagementApp.Views
{
    public partial class StatusWindow : ThemedWindow
    {
        public StatusWindow()
        {
            InitializeComponent();
        }

        private StatusViewModel ViewModel => DataContext as StatusViewModel;

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void StatusWindow_Closing(object sender, CancelEventArgs e)
        {
            if (ViewModel is IDisposable disposableViewModel)
            {
                try
                {
                    disposableViewModel.Dispose();
                    Debug.WriteLine("StatusViewModel 리소스가 StatusWindow Closing에서 정리되었습니다.");
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"!!! StatusViewModel Dispose 중 오류 발생 (StatusWindow Closing): {ex.Message}");
                }
            }
        }
    }
}
핵심 변경 사항:

Models/StatusItem.cs (신규): 그룹별 현황 데이터를 담을 클래스를 정의했습니다.
ViewModels/StatusViewModel.cs (신규):
LockerAssignment 데이터를 로드하여 종류별, 층별, 구역별로 그룹화하고, 각 그룹의 총 개수, 사용 개수, 여유 개수, 사용률을 계산하는 LoadStatusDataAsync 메서드를 구현했습니다.
계산된 결과를 ObservableCollection<StatusItem> 타입의 속성(StatusByType, StatusByFloor, StatusByZone)에 저장하여 UI에 바인딩할 수 있도록 했습니다.
자체 DbContext를 사용하고 IDisposable을 구현하여 리소스를 관리합니다.
Views/StatusWindow.xaml (신규):
3개의 GridControl을 사용하여 종류별, 층별, 구역별 현황을 각각 표시하도록 UI를 구성했습니다.
각 그리드는 StatusViewModel의 해당 ObservableCollection 속성에 바인딩됩니다.
컬럼 헤더 스타일과 셀 가운데 정렬 스타일을 적용했습니다 (그룹명 컬럼은 좌측 정렬).