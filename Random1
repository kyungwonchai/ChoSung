DevExpress GridControl에서 RowStyle의 TargetType 설정이 GridRow로는 맞지 않는다는 오류가 발생한다면, DevExpress에서는 GridControl의 CustomRowCellStyle 이벤트를 사용하여 조건부로 스타일을 지정하는 방법이 필요할 수 있습니다. 이 이벤트는 각 행의 스타일을 코드에서 동적으로 지정할 수 있도록 해줍니다.

아래는 CustomRowCellStyle 이벤트를 사용하여 CCC 컬럼 값에 따라 배경색 및 글자 색상을 지정하는 코드입니다.

XAML 코드 (MainWindow.xaml)
이전과 동일한 설정에서 RowStyle을 제거하고, 코드 비하인드에서 스타일을 지정하도록 합니다.

xml
코드 복사
<Window x:Class="FileAnalysisApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        mc:Ignorable="d"
        Title="File Analysis" Height="600" Width="900">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal" Margin="10">
            <Button Content="Select Folder" Click="SelectFolder_Click" Width="100" Margin="5"/>
            <Button Content="Analyze" Click="Analyze_Click" Width="100" Margin="5"/>
            <TextBlock Text="Selected Folder:" VerticalAlignment="Center" Margin="10,0"/>
            <TextBlock x:Name="SelectedFolderText" VerticalAlignment="Center" Margin="5,0"/>
        </StackPanel>

        <!-- 필터링된 데이터 GridControl (Sheet2) -->
        <dxg:GridControl Name="Sheet2Grid" Grid.Row="1" AutoGenerateColumns="AddNew" Margin="10,30,10,10"
                         CustomRowCellStyle="Sheet2Grid_CustomRowCellStyle">
            <dxg:GridControl.View>
                <dxg:TableView />
            </dxg:GridControl.View>
            <dxg:GridControl.Columns>
                <dxg:GridColumn FieldName="Filename" Header="Filename"/>
                <dxg:GridColumn FieldName="Time" Header="Time"/>
                <dxg:GridColumn FieldName="UniqueKey" Header="Unique Key"/>
                <dxg:GridColumn FieldName="SentValue" Header="Sent Value"/>
                <dxg:GridColumn FieldName="ReceivedValue" Header="Received Value"/>
                <dxg:GridColumn FieldName="LengthOrRemainingData" Header="Length / Remaining Data"/>
                <dxg:GridColumn FieldName="CCC" Header="CCC"/>
            </dxg:GridControl.Columns>
        </dxg:GridControl>
    </Grid>
</Window>
C# 코드 (MainWindow.xaml.cs)
이제 CustomRowCellStyle 이벤트 핸들러에서 CCC 컬럼 값에 따라 조건부 스타일을 적용합니다.

csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.IO;
using System.Text.RegularExpressions;
using System.Windows;
using System.Windows.Forms;
using System.Linq;
using System.Collections.Generic;
using System.Windows.Media;

namespace FileAnalysisApp
{
    public partial class MainWindow : Window
    {
        private string selectedFolderPath = @"c:\prod_file_logs";
        public ObservableCollection<LogEntry> Sheet2Entries { get; set; } = new ObservableCollection<LogEntry>();

        public MainWindow()
        {
            InitializeComponent();
            Sheet2Grid.ItemsSource = Sheet2Entries;
        }

        private void SelectFolder_Click(object sender, RoutedEventArgs e)
        {
            using (var dialog = new FolderBrowserDialog())
            {
                dialog.SelectedPath = selectedFolderPath;
                if (dialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
                {
                    selectedFolderPath = dialog.SelectedPath;
                    SelectedFolderText.Text = selectedFolderPath;
                }
            }
        }

        private void Analyze_Click(object sender, RoutedEventArgs e)
        {
            if (string.IsNullOrEmpty(selectedFolderPath))
            {
                System.Windows.MessageBox.Show("Please select a folder first.");
                return;
            }

            Sheet2Entries.Clear();
            AnalyzeFiles(selectedFolderPath);
        }

        private void AnalyzeFiles(string folderPath)
        {
            var threeDaysAgo = DateTime.Now.AddDays(-3);
            var responseTracker = new Dictionary<string, string>();
            var sheet2Data = new List<LogEntry>();

            var timePattern = new Regex(@"\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}");
            var keyPattern = new Regex(@"고유키:[^\s]+");
            var sendPattern = new Regex(@"보낸값:[^\s]+");
            var recvPattern = new Regex(@"받은값:[^\s]+");

            foreach (var filePath in Directory.GetFiles(folderPath, "*", SearchOption.AllDirectories))
            {
                var fileCreationTime = File.GetCreationTime(filePath);
                if (fileCreationTime < threeDaysAgo) continue;

                string fileName = Path.GetFileName(filePath);
                var lines = File.ReadAllLines(filePath);
                if (fileName.Contains("DetailCMD"))
                {
                    for (int i = 0; i < lines.Length - 1; i++)
                    {
                        var sendMatch = sendPattern.Match(lines[i]);
                        var recvMatch = recvPattern.Match(lines[i + 1]);

                        if (sendMatch.Success && recvMatch.Success)
                        {
                            var timeMatch = timePattern.Match(lines[i]);
                            var keyMatch = keyPattern.Match(lines[i]);
                            if (timeMatch.Success && keyMatch.Success)
                            {
                                string timeStr = timeMatch.Value;
                                string uniqueKey = keyMatch.Value.Split(':')[1];
                                string sendValue = sendMatch.Value.Split(':')[1];
                                string recvValue = recvMatch.Value.Split(':')[1];
                                string combinedKey = $"{sendValue}_{recvValue}";

                                DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                                string formattedTime = time.ToString("yyMMdd HHmmss");

                                // CCC 컬럼 값 설정
                                string cccValue = string.Empty;
                                if (sendValue.Contains("RC")) cccValue = "RC";
                                else if (sendValue.Contains("WDD")) cccValue = "WDD";
                                else if (sendValue.Contains("WDD2300")) cccValue = "WD2300";

                                if (sendValue.Contains("WD") || combinedKey.Length <= 50)
                                {
                                    if (sendValue.Contains("WD") || !responseTracker.ContainsKey(sendValue) || responseTracker[sendValue] != recvValue)
                                    {
                                        responseTracker[sendValue] = recvValue;
                                        sheet2Data.Add(new LogEntry
                                        {
                                            Filename = fileName,
                                            Time = formattedTime,
                                            UniqueKey = uniqueKey,
                                            SentValue = sendValue,
                                            ReceivedValue = recvValue,
                                            LengthOrRemainingData = combinedKey.Length <= 50 ? recvValue.Length.ToString() : "WD",
                                            CCC = cccValue
                                        });
                                    }
                                }
                            }
                            i++;
                        }
                    }
                }
                else
                {
                    foreach (var line in lines)
                    {
                        var timeMatch = timePattern.Match(line);
                        if (timeMatch.Success)
                        {
                            string timeStr = timeMatch.Value;
                            DateTime time = DateTime.ParseExact(timeStr, "yyyy-MM-dd HH:mm:ss.fff", null);
                            string formattedTime = time.ToString("yyMMdd HHmmss");
                            string remainingData = line.Substring(timeMatch.Length).Trim();

                            sheet2Data.Add(new LogEntry
                            {
                                Filename = fileName,
                                Time = formattedTime,
                                LengthOrRemainingData = remainingData
                            });
                        }
                    }
                }
            }

            foreach (var entry in sheet2Data.OrderBy(e => e.Time))
                Sheet2Entries.Add(entry);
        }

        private void Sheet2Grid_CustomRowCellStyle(object sender, RowCellStyleEventArgs e)
        {
            if (e.RowHandle >= 0)
            {
                var logEntry = (LogEntry)Sheet2Grid.GetRow(e.RowHandle);
                
                if (logEntry != null)
                {
                    // CCC 값에 따라 스타일 설정
                    if (logEntry.CCC == "RC")
                    {
                        e.Appearance.Foreground = new SolidColorBrush(Colors.Blue);
                    }
                    else if (logEntry.CCC == "WDD")
                    {
                        e.Appearance.Foreground = new SolidColorBrush(Colors.Green);
                    }
                    else if (logEntry.CCC == "WD2300")
                    {
                        e.Appearance.Background = new SolidColorBrush(Colors.Yellow);
                    }
                }
            }
        }
    }

    public class LogEntry
    {
        public string Filename { get; set; }
        public string Time { get; set; }
        public string UniqueKey { get; set; }
        public string SentValue { get; set; }
        public string ReceivedValue { get; set; }
        public string LengthOrRemainingData { get; set; }
        public string CCC { get; set; }



