역은 블러 처리하는 방식으로 UI를 수정할 수 있습니다. 이를 위해 PreviewView의 크기를 줄이고, 블러 처리된 배경을 추가하는 방법을 사용할 수 있습니다. 아래에서 이러한 기능을 구현하는 방법을 설명하겠습니다.

XML 레이아웃 수정
먼저, PreviewView의 크기를 조절하고 그 주변을 블러 처리하는 레이아웃을 설정합니다.

xml
코드 복사
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    <!-- 블러 처리된 배경 -->
    <View
        android:id="@+id/blurBackground"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        android:background="@color/black"
        android:alpha="0.5" />

    <!-- 중앙의 카메라 프리뷰 (작은 영역) -->
    <androidx.camera.view.PreviewView
        android:id="@+id/previewView"
        android:layout_width="250dp"
        android:layout_height="250dp"
        android:layout_centerInParent="true"
        android:background="@android:color/black" />

</RelativeLayout>
Kotlin 코드 (MainActivity.kt)
이제, 이 레이아웃에서 카메라 프리뷰가 중앙의 작은 영역에만 표시되도록 카메라 설정을 적용합니다.

kotlin
코드 복사
package com.example.myapp

import android.Manifest
import android.content.pm.PackageManager
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.camera.core.Camera
import androidx.camera.core.CameraSelector
import androidx.camera.core.Preview
import androidx.camera.lifecycle.ProcessCameraProvider
import androidx.camera.view.PreviewView
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import android.widget.ImageView
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : ComponentActivity() {

    private lateinit var previewView: PreviewView
    private lateinit var cameraExecutor: ExecutorService
    private var camera: Camera? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        previewView = findViewById(R.id.previewView)
        cameraExecutor = Executors.newSingleThreadExecutor()

        if (allPermissionsGranted()) {
            startCamera()
        } else {
            ActivityCompat.requestPermissions(
                this, REQUIRED_PERMISSIONS, REQUEST_CODE_PERMISSIONS
            )
        }
    }

    private fun startCamera() {
        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)
        cameraProviderFuture.addListener({
            val cameraProvider: ProcessCameraProvider = cameraProviderFuture.get()

            val previewBuilder = Preview.Builder()

            val preview = previewBuilder.build().also {
                it.setSurfaceProvider(previewView.surfaceProvider)
            }

            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA

            try {
                cameraProvider.unbindAll()
                camera = cameraProvider.bindToLifecycle(
                    this, cameraSelector, preview
                )

            } catch (exc: Exception) {
                // 예외 처리
            }
        }, ContextCompat.getMainExecutor(this))
    }

    private fun allPermissionsGranted() = REQUIRED_PERMISSIONS.all {
        ContextCompat.checkSelfPermission(
            baseContext, it
        ) == PackageManager.PERMISSION_GRANTED
    }

    override fun onRequestPermissionsResult(
        requestCode: Int, permissions: Array<String>, grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            if (allPermissionsGranted()) {
                startCamera()
            } else {
                // 권한이 거부된 경우 처리
            }
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        cameraExecutor.shutdown()
    }

    companion object {
        private const val REQUEST_CODE_PERMISSIONS = 10
        private val REQUIRED_PERMISSIONS = arrayOf(
            Manifest.permission.CAMERA
        )
    }
}
코드 설명:
PreviewView 크기 조정:

PreviewView의 크기를 XML 레이아웃에서 250dp x 250dp로 설정했습니다. 이 크기는 중앙에 작은 카메라 프리뷰를 표시하기 위한 것입니다.
android:layout_centerInParent="true" 속성을 사용하여 화면의 중앙에 위치하도록 했습니다.
블러 처리된 배경:

View를 사용하여 배경을 반투명한 블랙(alpha="0.5")으로 설정했습니다. 이렇게 하면 프리뷰 영역을 제외한 나머지 화면이 블러 처리된 것처럼 보이게 됩니다.
카메라 프리뷰 시작:

PreviewView가 설정된 작은 영역에만 카메라 프리뷰가 표시되도록, ProcessCameraProvider와 CameraX를 사용하여 프리뷰를 설정했습니다.
결론:
이제 중앙에 작은 카메라 프리뷰 화면이 표시되며, 나머지 화면은 블러 처리된 상태로 나타납니다. 이렇게 하면 중앙의 작은 영역에 집중할 수 있습니다. 추가적으로 원하는 조정 사항이 있거나 다른 문제가 발생하면 언제든지 도와드리겠습