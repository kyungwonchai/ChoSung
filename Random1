, 현재 사용 중인 포트 목록을 파일로 내보내고, 그 파일을 읽어 방화벽을 설정하는 파이썬 코드를 안내해 드리겠습니다.

전체 과정은 두 단계로 나뉩니다.

셸 명령어를 통해 현재 리스닝 중인 포트 목록을 ports.txt 파일로 저장합니다.

파이썬 스크립트를 실행하여 ports.txt 파일을 읽고, 해당 포트만 허용하는 방화벽 활성화 셸 스크립트(activate_firewall.sh)를 생성합니다.

1. 현재 사용 중인 포트 목록 파일로 내보내기 (ports.txt)
터미널에서 아래 명령어를 실행하여 현재 시스템에서 사용하고 있는 TCP 및 UDP 포트 번호만 추출하여 ports.txt 파일로 저장합니다.

Bash

ss -lntu | awk 'NR>1 {print $5}' | grep -oP ':\K\d+' | sort -n | uniq > ports.txt
명령어 분석:

ss -lntu: 현재 리스닝(-l) 중인 TCP(-t)와 UDP(-u) 소켓 정보를 숫자(-n)로 표시합니다.

awk 'NR>1 {print $5}': 헤더(첫 번째 줄)를 제외하고, 5번째 컬럼(Local Address:Port) 정보만 추출합니다.

grep -oP ':\K\d+': 콜론(:) 뒤의 숫자(포트 번호)만 정확하게 추출합니다.

sort -n | uniq: 포트 번호를 숫자로 정렬하고 중복된 항목을 제거합니다.

> ports.txt: 결과를 ports.txt 파일에 저장합니다.

이제 ports.txt 파일에는 현재 열려있는 포트 번호 목록이 한 줄에 하나씩 저장됩니다.

2. 포트 목록을 읽어 방화벽 활성화 스크립트 생성 (Python)
아래 파이썬 코드를 create_firewall_rules.py와 같이 파일로 저장합니다. 이 코드는 ports.txt를 읽어 ufw (Uncomplicated Firewall) 설정을 위한 셸 스크립트 파일을 생성합니다.

create_firewall_rules.py

Python

import os

# --- 설정 변수 ---
# 포트 목록이 저장된 입력 파일명
PORT_FILENAME = 'ports.txt'
# 생성될 방화벽 활성화 셸 스크립트 파일명
OUTPUT_SCRIPT_NAME = 'activate_firewall.sh'
# 원격 접속 등 필수적으로 열려있어야 하는 포트 (예: SSH 포트)
# 사용자가 실수로 ports.txt에 SSH 포트를 포함하지 않아도, 접근이 차단되는 것을 방지합니다.
ESSENTIAL_PORTS = {22}

def create_firewall_script():
    """
    포트 목록 파일을 읽어 방화벽 활성화 셸 스크립트를 생성합니다.
    """
    print(f"'{PORT_FILENAME}' 파일을 읽어 방화벽 설정 스크립트를 생성합니다...")

    try:
        with open(PORT_FILENAME, 'r') as f:
            # 파일에서 포트를 읽어 set에 저장 (중복 자동 제거 및 빠른 조회)
            # 각 줄의 공백(개행문자 등)을 제거하고, 빈 줄은 무시합니다.
            allowed_ports = {int(line.strip()) for line in f if line.strip().isdigit()}

    except FileNotFoundError:
        print(f"오류: '{PORT_FILENAME}' 파일을 찾을 수 없습니다.")
        print("먼저 포트 목록을 파일로 내보내는 명령어를 실행해주세요.")
        return
    except ValueError:
        print(f"오류: '{PORT_FILENAME}' 파일에 잘못된 형식의 포트 번호가 포함되어 있습니다.")
        return

    # 필수 포트를 허용 목록에 추가
    allowed_ports.update(ESSENTIAL_PORTS)

    # 방화벽 스크립트 내용 구성
    # f-string의 중괄호와 셸 변수의 중괄호를 구분하기 위해 이중 중괄호 '{{...}}' 사용
    script_content = [
        "#!/bin/bash\n",
        "# 생성된 방화벽 활성화 스크립트입니다.",
        "# 실행 전 반드시 내용을 확인하세요!\n",
        "echo 'ufw (Uncomplicated Firewall) 설정을 시작합니다.'\n",
        "# 기존 설정을 초기화합니다. (주의: 연결이 끊어질 수 있습니다)",
        "ufw --force reset\n",
        "# 기본 정책 설정: 들어오는 모든 연결은 거부, 나가는 모든 연결은 허용",
        "ufw default deny incoming",
        "ufw default allow outgoing\n",
        "# 목록에 있는 필수 포트 및 사용 중인 포트를 허용합니다."
    ]

    # 정렬된 포트 목록을 순회하며 허용 규칙 추가
    for port in sorted(list(allowed_ports)):
        script_content.append(f"ufw allow {port}")
        print(f"  - 포트 {port} 허용 규칙 추가 (TCP/UDP)")

    script_content.extend([
        "\n# 방화벽을 활성화합니다. (SSH 연결이 끊어지지 않는지 다시 한번 확인하세요)",
        "ufw --force enable\n",
        "echo '방화벽이 활성화되었습니다. 최종 상태:'",
        "ufw status verbose"
    ])

    # 스크립트 파일 작성
    try:
        with open(OUTPUT_SCRIPT_NAME, 'w') as f:
            f.write('\n'.join(script_content))
        
        # 생성된 스크립트에 실행 권한 부여
        os.chmod(OUTPUT_SCRIPT_NAME, 0o755)

        print("\n" + "="*50)
        print(f"✅ 성공: 방화벽 스크립트 '{OUTPUT_SCRIPT_NAME}' 파일이 생성되었습니다.")
        print(f"실행 권한이 부여되었습니다. (chmod 755 {OUTPUT_SCRIPT_NAME})")
        print("이제 터미널에서 다음 명령어로 스크립트를 실행하세요:")
        print(f"sudo ./{OUTPUT_SCRIPT_NAME}")
        print("="*50)

    except IOError as e:
        print(f"\n오류: 스크립트 파일 '{OUTPUT_SCRIPT_NAME}'을 쓰는 중 문제가 발생했습니다: {e}")

if __name__ == '__main__':
    create_firewall_script()

3. 사용 방법
폴더 생성 및 파일 저장

원하는 위치에 폴더를 하나 만듭니다.

위에서 안내한 1번 명령어를 터미널에서 실행하여 ports.txt 파일을 해당 폴더에 생성합니다.

2번 Python 코드를 create_firewall_rules.py 라는 이름으로 같은 폴더에 저장합니다.

파이썬 스크립트 실행

터미널에서 해당 폴더로 이동한 후, 아래 명령어를 실행합니다.

Bash

python3 create_firewall_rules.py
방화벽 스크립트 검토 및 실행

파이썬 스크립트 실행이 완료되면 activate_firewall.sh 파일이 생성됩니다.

(중요) 스크립트를 실행하기 전에 내용을 반드시 확인하여, 원격 접속에 필요한 SSH(기본 22번) 포트 등이 포함되어 있는지 검토합니다.

Bash

cat activate_firewall.sh
내용에 문제가 없다고 판단되면, 반드시 sudo를 사용하여 스크립트를 실행합니다.

Bash

sudo ./activate_firewall.sh
스크립트가 실행되면 기존 ufw 규칙이 초기화되고, ports.txt에 명시된 포트와 필수 포트(22번)만 허용되며, 그 외 모든 외부からの 접속은 차단됩니다.

⚠️ 주의사항
SSH 접속 차단 위험: 이 스크립트는 ufw 설정을 초기화합니다. 만약 SSH 접속 포트(22번)가 ports.txt에 없거나 ESSENTIAL_PORTS에 지정되어 있지 않으면, 스크립트 실행 후 서버에 접속하지 못하게 될 수 있습니다. 코드에는 안전장치로 22번 포트를 기본 포함했지만, 만약 다른 포트를 사용하신다면 ESSENTIAL_PORTS 변수를 꼭 수정하세요.

루트 권한: 방화벽 설정은 시스템의 중요 설정이므로 반드시 sudo를 사용하여 스크립트를 실행해야 합니다.

테스트 환경 권장: 실제 운영 중인 서버에 적용하기 전에, 가상 머신 등 테스트 환경에서 충분히 검증해보는 것을 강력히 권장합니다.

동적 포트: ss 명령어로 포트를 추출하는 시점에 실행 중이 아니었던 서비스의 포트는 목록에 포함되지 않습니다. 이 점을 유의하여 필요한 포트는 ESSENTIAL_PORTS에 직접 추가하는 것이 안전합니다.