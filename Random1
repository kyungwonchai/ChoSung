 클래스 파일을 따로 만들어서 Hub를 정의해야 합니다. 아래에 전체 과정과 전체 코드를 설명하겠습니다.

    ASP.NET 서버 프로젝트 생성: Visual Studio에서 새로운 "ASP.NET Core Web App" 프로젝트를 만들어주세요.

    SignalR 설치: NuGet 패키지 관리자에서 Microsoft.AspNetCore.SignalR 패키지를 설치해주세요.

    Hub 클래스 생성: EditHub.cs라는 새 C# 클래스 파일을 만든 후, 아래와 같이 작성합니다.

    csharp

using Microsoft.AspNetCore.SignalR;
using System.Threading.Tasks;

public class EditHub : Hub
{
    public async Task UpdateEditStatus(string key1, string username, string column)
    {
        await Clients.Others.SendAsync("ReceiveEditStatus", key1, username, column);
    }
}

Startup 설정: Program.cs 파일을 열고 아래의 코드를 추가합니다.

csharp

var builder = WebApplication.CreateBuilder(args);
// ... 기존 코드
builder.Services.AddSignalR();

var app = builder.Build();

app.MapHub<EditHub>("/editHub");
// ... 기존 코드

app.Run();

WPF 클라이언트 설정: WPF 프로젝트에서 NuGet에서 Microsoft.AspNetCore.SignalR.Client를 설치합니다.

WPF 클라이언트 코드 작성: 아래와 같이 작성하여 서버와 통신할 수 있게 합니다.

csharp

    using Microsoft.AspNetCore.SignalR.Client;

    HubConnection hubConnection = new HubConnectionBuilder()
        .WithUrl("http://yourServerAddress/editHub")
        .Build();

    await hubConnection.StartAsync();

    hubConnection.On<string, string, string>("ReceiveEditStatus", (key1, username, column) => 
    {
        // 여기에 편집 상태를 처리하는 코드를 작성
    });

    서버 배포: 완성된 ASP.NET 서버 애플리케이션을 IIS에 배포합니다.

이제 WPF 클라이언트와 ASP.NET 서버