터 어댑터를 사용하여 gridView3에 바인딩된 데이터를 수정된 내용을 반영하는 코드로 변경해보겠습니다.

csharp

private void btnUpdateRecipients_Click(object sender, EventArgs e)
{
    DataTable recipientsTable = ((DataTable)gridControl3.DataSource).GetChanges();

    if (recipientsTable != null)
    {
        // 수정된 내용을 데이터베이스 또는 API에 업데이트하는 작업 수행
        UpdateRecipients(recipientsTable);

        // 수정 내용을 원본 데이터에 반영
        ((DataTable)gridControl3.DataSource).Merge(recipientsTable);

        // 수정된 내용을 적용한 후 변경 내용을 지움
        ((DataTable)gridControl3.DataSource).AcceptChanges();

        MessageBox.Show("수정된 내용이 반영되었습니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
    else
    {
        MessageBox.Show("수정된 내용이 없습니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Information);
    }
}

private void UpdateRecipients(DataTable recipientsTable)
{
    // 수정된 내용을 처리하는 로직을 작성
    // 예를 들어, recipientsTable의 각 행을 순회하며 데이터를 업데이트하는 작업을 수행할 수 있음
    // 이 예시에서는 각 행의 "RecipientId"와 "Email" 값을 가져와서 업데이트하는 방법을 보여줌

    foreach (DataRow row in recipientsTable.Rows)
    {
        string recipientId = row["RecipientId"].ToString();
        string email = row["Email"].ToString();

        // recipientId와 email을 이용하여 데이터를 업데이트하는 로직을 작성
        // 예를 들어, 데이터베이스 업데이트 쿼리를 실행하거나 REST API를 호출하여 업데이트할 수 있음
    }
}

위의 코드에서 btnUpdateRecipients_Click 이벤트 핸들러는 버튼 클릭 시 호출됩니다. gridControl3.DataSource에서 수정된 내용이 있는지 확인한 후, GetChanges 메서드를 사용하여 수정된 내용이 있는 경우 해당 내용을 recipientsTable에 저장합니다.

recipientsTable을 이용하여 수정된 내용을 데이터베이스 또는 API에 업데이트하는 UpdateRecipients 메서드를 호출합니다. 이후 Merge 메서드를 사용하여 수정된 내용을 원본 데이터에 반영하고, AcceptChanges 메서드를 호출하여 변경 내용을 지웁니다.

마지막으로, 사용자에게 알림을 표시하는 MessageBox를 띄워 수정된 내용이 반영되었음을 알려줍니다.