 용량을 측정할 때 하위 폴더를 포함하지 않고, 해당 폴더 내에 있는 파일들의 용량만 계산하도록 코드를 수정하겠습니다. 이렇게 하면 상위 폴더의 용량을 측정할 때 하위 폴더의 영향을 받지 않고, 오직 그 폴더 내 파일들의 총 용량만을 기준으로 1GB 이상인지 판단할 수 있습니다.

코드 수정 방법
CalculateFolderSize 메서드를 수정하여 특정 폴더 내 파일들의 용량만을 계산하도록 변경합니다. 이 메서드는 SearchOption.TopDirectoryOnly 옵션을 사용하여 현재 폴더 내의 파일들만 계산합니다.

MainWindow.xaml.cs 코드 변경 사항
csharp
Copy code
private void AnalyzeFolders(string path, bool isRootCall)
{
    try
    {
        DirectoryInfo rootDir = new DirectoryInfo(path);
        foreach (DirectoryInfo dir in rootDir.GetDirectories())
        {
            // 폴더의 마지막 수정 시간 확인
            if (DateTime.Now.Subtract(dir.LastWriteTime).TotalDays > 10)
            {
                continue;  // 마지막 수정 시간이 10일 이전인 경우 검사하지 않음
            }

            folderCount++;
            UpdateFolderCount();  // 라벨 업데이트 함수 호출

            try
            {
                long size = CalculateFolderSize(dir);
                if (size >= 1073741824) // 1GB 이상
                {
                    DateTime lastModified = GetMostRecentFileDate(dir);
                    string info = $"{dir.FullName} ({size} bytes) - Last Modified: {lastModified.ToString("yyyy-MM-dd HH:mm:ss")}";
                    Application.Current.Dispatcher.Invoke(() => UpdateListBoxes(info, lastModified));
                }
                AnalyzeFolders(dir.FullName, false);  // 하위 폴더 검사 계속 진행
            }
            catch (UnauthorizedAccessException)
            {
                continue;
            }
        }

        if (isRootCall)
        {
            Application.Current.Dispatcher.Invoke(() => UpdateListBox1("분석 완료"));
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"An error occurred: {ex.Message}");
    }
}

private long CalculateFolderSize(DirectoryInfo directory)
{
    // 현재 폴더 내 파일들의 총 용량을 계산
    return directory.GetFiles("*", SearchOption.TopDirectoryOnly).Sum(file => file.Length);
}

private DateTime GetMostRecentFileDate(DirectoryInfo directory)
{
    FileInfo[] files = directory.GetFiles("*", SearchOption.TopDirectoryOnly);
    return files.Length > 0 ? files.Max(file => file.LastWriteTime) : DateTime.MinValue;
}
위 코드 변경을 통해, 각 폴더를 검사할 때 해당 폴더 내 파일들의 용량만을 계산하고, 1GB 이상일 경우 해당 정보를 UI에 표시하게 됩니다. 하위 폴더는 별도로 용량을 계산하지 않으며, 검사에서 제외된 폴더는 라벨에 표시되지 않습니다. 이 방