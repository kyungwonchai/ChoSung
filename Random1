모니터만 끔 (최대 절전 X)
✅ 15초 동안 입력 없으면 모니터 OFF
✅ 입력 발생 시 즉시 모니터 ON
✅ 트레이로 최소화 가능, 종료 가능
✅ Windows 10/11 완벽 지원

🔥 최신 코드 (최대 절전 제거 & 즉시 ON/OFF)
csharp
코드 복사
using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Threading;
using System.Windows.Forms;

namespace MonitorAutoControl
{
    public partial class Form1 : Form
    {
        private static readonly int IDLE_TIME_LIMIT = 15000; // 15초
        private System.Threading.Timer _idleTimer;
        private NotifyIcon _trayIcon;
        private POINT _lastMousePosition;
        private bool _isMonitorOff = false;

        public Form1()
        {
            InitUI();
            InitTray();
            InitIdleTimer();
        }

        private void InitUI()
        {
            this.Text = "모니터 자동 OFF 프로그램";
            this.Size = new System.Drawing.Size(400, 200);
            this.FormClosing += Form1_FormClosing;

            Label label = new Label()
            {
                Text = "모니터 자동 OFF 프로그램입니다",
                Dock = DockStyle.Fill,
                TextAlign = System.Drawing.ContentAlignment.MiddleCenter
            };
            this.Controls.Add(label);
        }

        private void InitTray()
        {
            _trayIcon = new NotifyIcon()
            {
                Icon = SystemIcons.Application,
                Visible = true,
                ContextMenuStrip = new ContextMenuStrip()
                {
                    Items = { new ToolStripMenuItem("종료", null, (s, e) => ExitApplication()) }
                }
            };
            _trayIcon.DoubleClick += (s, e) => ShowMainForm();
        }

        private void InitIdleTimer()
        {
            _idleTimer = new System.Threading.Timer(CheckIdleState, null, 1000, 1000);
            GetCursorPos(out _lastMousePosition);
        }

        private void ShowMainForm()
        {
            this.Invoke(new Action(() =>
            {
                this.Show();
                this.WindowState = FormWindowState.Normal;
                this.Activate();
            }));
        }

        private void CheckIdleState(object state)
        {
            int idleTime = GetIdleTime();
            POINT currentMousePosition;
            GetCursorPos(out currentMousePosition);

            bool mouseMoved = (currentMousePosition.X != _lastMousePosition.X || currentMousePosition.Y != _lastMousePosition.Y);
            bool keyPressed = IsAnyKeyPressed();

            if (_isMonitorOff)
            {
                if (mouseMoved || keyPressed)
                {
                    WakeUpMonitor();
                }
            }
            else
            {
                if (idleTime > IDLE_TIME_LIMIT)
                {
                    TurnMonitorOff();
                }
            }

            _lastMousePosition = currentMousePosition;
        }

        private int GetIdleTime()
        {
            LASTINPUTINFO lastInputInfo = new LASTINPUTINFO();
            lastInputInfo.cbSize = Marshal.SizeOf(typeof(LASTINPUTINFO));

            if (GetLastInputInfo(ref lastInputInfo))
            {
                return Environment.TickCount - lastInputInfo.dwTime;
            }
            return 0;
        }

        private bool IsAnyKeyPressed()
        {
            for (int key = 0; key < 256; key++)
            {
                if (GetAsyncKeyState(key) != 0)
                {
                    return true;
                }
            }
            return false;
        }

        private void WakeUpMonitor()
        {
            if (_isMonitorOff)
            {
                // 모니터 ON
                SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_ON);
                _isMonitorOff = false;
            }
        }

        private void TurnMonitorOff()
        {
            if (!_isMonitorOff)
            {
                // 모니터 OFF
                SendMessage(GetDesktopWindow(), WM_SYSCOMMAND, (IntPtr)SC_MONITORPOWER, (IntPtr)MONITOR_OFF);
                _isMonitorOff = true;
            }
        }

        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private void ExitApplication()
        {
            _idleTimer.Dispose();
            _trayIcon.Dispose();
            Application.Exit();
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct LASTINPUTINFO
        {
            public int cbSize;
            public int dwTime;
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct POINT
        {
            public int X;
            public int Y;
        }

        [DllImport("user32.dll")]
        private static extern bool GetLastInputInfo(ref LASTINPUTINFO plii);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern bool GetCursorPos(out POINT lpPoint);

        [DllImport("user32.dll")]
        private static extern short GetAsyncKeyState(int vKey);

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr GetDesktopWindow();

        [DllImport("user32.dll", SetLastError = true)]
        private static extern IntPtr SendMessage(IntPtr hWnd, int Msg, IntPtr wParam, IntPtr lParam);

        private const int WM_SYSCOMMAND = 0x0112;
        private const int SC_MONITORPOWER = 0xF170;
        private const int MONITOR_ON = -1;
        private const int MONITOR_OFF = 2;

        [STAThread]
        static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
            Application.Run(new Form1());
        }
    }
}
✅ 기능 정리
모든 입력이 없으면 15초 뒤 모니터 OFF (최대 절전 X)
입력 감지 시 즉시 모니터 ON
트레이에서 최소화 가능, 종료 가능
Windows 10/11 완벽 지원
📌 최종 테스트 체크리스트
 15초 동안 입력이 없으면 모니터 자동 OFF
 입력 시 즉시 모니터 ON
 Windows 10/11에서 정상 작동
 트레이에서 최소화 & 종료 가능