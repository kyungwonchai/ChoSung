eListControl**을 사용하여 그룹과 라인 데이터를 계층적으로 표시하고, 체크박스 동기화를 구현한 수정된 코드입니다. ?? 연산자 및 최신 문법을 제거하여 4.8 환경에서 정상 작동하도록 작성했습니다.

XAML 코드
xml
코드 복사
<Window x:Class="TreeListExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="Group and Line Viewer" Height="600" Width="800">
    <Grid>
        <dxg:TreeListControl x:Name="treeListControl"
                             AutoExpandAllNodes="True"
                             AutoGenerateColumns="None"
                             KeyFieldName="Id"
                             ParentFieldName="ParentId"
                             ItemsSource="{Binding LineData}">
            <dxg:TreeListControl.Columns>
                <!-- 체크박스 컬럼 -->
                <dxg:TreeListColumn FieldName="IsChecked" Header="선택">
                    <dxg:TreeListColumn.EditSettings>
                        <dxg:CheckEditSettings />
                    </dxg:TreeListColumn.EditSettings>
                </dxg:TreeListColumn>

                <!-- 이름 컬럼 -->
                <dxg:TreeListColumn FieldName="Name" Header="구역/라인 이름" />
            </dxg:TreeListControl.Columns>
        </dxg:TreeListControl>
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeListExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<TreeNode> LineData { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // MSSQL 데이터 로드
            LoadLineData();

            // CellValueChanged 이벤트 등록
            treeListControl.CellValueChanged += TreeListControl_CellValueChanged;
        }

        private void LoadLineData()
        {
            LineData = new ObservableCollection<TreeNode>();

            string connectionString = "YourConnectionStringHere";
            string query = @"
                SELECT GroupName, LineName
                FROM LineTable
                ORDER BY GroupName, LineName";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    int id = 1; // 노드 ID
                    int groupId = 1; // 그룹 ID

                    while (reader.Read())
                    {
                        string groupName = reader.GetString(0);
                        string lineName = reader.GetString(1);

                        // 그룹이 존재하지 않으면 추가
                        if (!LineData.Any(node => node.Name == groupName))
                        {
                            LineData.Add(new TreeNode
                            {
                                Id = groupId,
                                ParentId = 0, // 최상위 그룹
                                Name = groupName,
                                IsChecked = false
                            });
                            groupId++;
                        }

                        // 라인 추가
                        LineData.Add(new TreeNode
                        {
                            Id = id + 100,
                            ParentId = groupId - 1, // 해당 그룹 ID
                            Name = lineName,
                            IsChecked = false
                        });
                        id++;
                    }
                }
            }

            treeListControl.ItemsSource = LineData;
        }

        private void TreeListControl_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "IsChecked")
            {
                var changedItem = e.Row as TreeNode;
                if (changedItem != null)
                {
                    // 자식 노드 업데이트
                    UpdateChildNodesCheckState(changedItem);

                    // 부모 노드 업데이트
                    UpdateParentNodesCheckState(changedItem);
                }
            }
        }

        private void UpdateChildNodesCheckState(TreeNode parentNode)
        {
            var childNodes = LineData.Where(node => node.ParentId == parentNode.Id).ToList();
            foreach (var child in childNodes)
            {
                child.IsChecked = parentNode.IsChecked;
                UpdateChildNodesCheckState(child);
            }
        }

        private void UpdateParentNodesCheckState(TreeNode childNode)
        {
            var parentNode = LineData.FirstOrDefault(node => node.Id == childNode.ParentId);
            if (parentNode != null)
            {
                parentNode.IsChecked = LineData.Where(node => node.ParentId == parentNode.Id).All(node => node.IsChecked);
                UpdateParentNodesCheckState(parentNode);
            }
        }
    }

    public class TreeNode
    {
        public int Id { get; set; }          // 노드 ID
        public int ParentId { get; set; }    // 부모 ID
        public string Name { get; set; }     // 노드 이름
        public bool IsChecked { get; set; }  // 체크 상태
    }
}
주요 변경 사항
?? 연산자 제거:

최신 문법을 제거하여 .NET Framework 4.8과 호환되도록 수정했습니다.
데이터 바인딩:

TreeNode 클래스를 사용하여 그룹과 라인 데이터를 나타냅니다.
Id와 ParentId를 통해 계층 구조를 형성합니다.
MSSQL 데이터 로드:

GroupName과 LineName 두 컬럼만 가져오도록 쿼리를 작성했습니다.
그룹 이름이 변경되면 새로운 그룹 노드를 추가하도록 처리했습니다.
체크박스 동기화:

CellValueChanged 이벤트를 통해 자식 및 부모 노드의 체크 상태를 동기화합니다.
ID 관리:

그룹 ID는 groupId, 라인 ID는 id + 100으로 설정하여 고유성을 유지했습니다.
SQL 데이터 예시
sql
코드 복사
CREATE TABLE LineTable (
    GroupName NVARCHAR(100),
    LineName NVARCHAR(100)
);

INSERT INTO LineTable (GroupName, LineName)
VALUES 
    ('Group A', 'Line 1.1'),
    ('Group A', 'Line 1.2'),
    ('Group B', 'Line 2.1'),
    ('Group B', 'Line 2.2');
실행 결과
그룹과 라인 트리 구조:
Group A 및 Group B 아래에 각각의 라인이 표시됩니다.
체크박스 동기화:
그룹 체크박스를 선택하면 해당 그룹의 모든 라인이 선택됩니다.