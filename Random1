다시 확인하고, 문제를 해결할 수 있도록 수정하겠습니다. 우선, 클립보드에서 데이터를 제대로 읽어들이고 GridControl에 모든 항목이 표시되도록 하며, FocusedRowChanged 대신 적절한 이벤트를 사용하도록 하겠습니다. 또한 QR 코드 배치도 화면 크기에 맞게 동적으로 조정되도록 하겠습니다.

MainWindow.xaml
UI를 그대로 유지합니다.

xml
코드 복사
<dx:ThemedWindow x:Class="QRMAKER.MainWindow"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                 xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
                 xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
                 mc:Ignorable="d"
                 Title="MainWindow" Height="600" Width="800"
                 ThemeName="Office2019Color"
                 SizeChanged="Window_SizeChanged">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Text="제목" FontSize="24" HorizontalAlignment="Center" Margin="10" Grid.Row="0"/>

        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="200"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>

            <!-- GridControl -->
            <dxg:GridControl Name="gridControl" AutoGenerateColumns="None">
                <dxg:GridControl.Columns>
                    <dxg:GridColumn FieldName="No" Header="No" ReadOnly="True"/>
                    <dxg:GridColumn FieldName="Magazine" Header="Magazine" ReadOnly="True"/>
                </dxg:GridControl.Columns>
                <dxg:GridControl.View>
                    <dxg:TableView Name="tableView" AutoWidth="True" FocusedRowHandleChanged="TableView_FocusedRowHandleChanged"/>
                </dxg:GridControl.View>
            </dxg:GridControl>

            <!-- QR 코드 영역 -->
            <ScrollViewer Grid.Column="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                <WrapPanel Name="qrCodePanel" HorizontalAlignment="Left" VerticalAlignment="Top"/>
            </ScrollViewer>
        </Grid>

        <!-- 슬라이더 설정 -->
        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="10" Grid.Row="2">
            <Button Content="클립보드에서 데이터 가져오기" Click="LoadFromClipboard"/>
            <TextBlock Text="QR 코드 크기: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="sizeSlider" Minimum="50" Maximum="200" Width="100" ValueChanged="Slider_ValueChanged"/>
            <TextBlock Text="QR 코드 간격: " VerticalAlignment="Center" Margin="10,0,0,0"/>
            <Slider Name="spacingSlider" Minimum="10" Maximum="50" Width="100" ValueChanged="Slider_ValueChanged"/>
        </StackPanel>
    </Grid>
</dx:ThemedWindow>
MainWindow.xaml.cs
클립보드에서 모든 데이터를 읽어들일 수 있도록 수정하고, QR 코드 배치를 동적으로 조정합니다. 또한, FocusedRowHandleChanged 이벤트를 사용합니다.

csharp
코드 복사
using DevExpress.Xpf.Core;
using DevExpress.Xpf.Grid;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media.Imaging;
using ZXing;

namespace QRMAKER
{
    public partial class MainWindow : ThemedWindow
    {
        private List<Item> _items;
        private Dictionary<string, StackPanel> _qrCodePanels;

        public MainWindow()
        {
            InitializeComponent();
            _items = new List<Item>();
            _qrCodePanels = new Dictionary<string, StackPanel>();
        }

        private void LoadFromClipboard(object sender, RoutedEventArgs e)
        {
            try
            {
                _items.Clear();
                qrCodePanel.Children.Clear();
                gridControl.ItemsSource = null;

                // 클립보드에서 데이터 가져오기
                string clipboardText = Clipboard.GetText();
                if (!string.IsNullOrEmpty(clipboardText))
                {
                    var lines = clipboardText.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);
                    int no = 1;
                    foreach (var line in lines)
                    {
                        if (line.Length == 22 && IsAlphanumeric(line) && !_items.Exists(item => item.Magazine == line))
                        {
                            _items.Add(new Item { No = no++, Magazine = line });
                        }
                    }
                    gridControl.ItemsSource = _items;
                    GenerateQRCodes();
                }
                else
                {
                    MessageBox.Show("클립보드에 데이터가 없습니다.", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Clipboard loading error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void Slider_ValueChanged(object sender, RoutedPropertyChangedEventArgs<double> e)
        {
            if (_items != null && _items.Count > 0)
            {
                try
                {
                    GenerateQRCodes();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Slider value changed error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
        }

        private void Window_SizeChanged(object sender, SizeChangedEventArgs e)
        {
            if (_items != null && _items.Count > 0)
            {
                GenerateQRCodes();
            }
        }

        private void GenerateQRCodes()
        {
            try
            {
                qrCodePanel.Children.Clear();
                double qrCodeWidth = sizeSlider.Value;
                double qrCodeHeight = sizeSlider.Value;
                double spacing = spacingSlider.Value;

                foreach (var item in _items)
                {
                    try
                    {
                        var qrCode = GenerateQRCode(item.Magazine);
                        var image = new System.Windows.Controls.Image
                        {
                            Source = BitmapToImageSource(qrCode),
                            Width = qrCodeWidth,
                            Height = qrCodeHeight,
                            Margin = new Thickness(spacing)
                        };
                        var stackPanel = new StackPanel { Orientation = Orientation.Vertical, HorizontalAlignment = HorizontalAlignment.Center };
                        var textBlock = new TextBlock
                        {
                            Text = item.Magazine,
                            Foreground = System.Windows.Media.Brushes.Blue,
                            HorizontalAlignment = HorizontalAlignment.Center
                        };
                        stackPanel.Children.Add(image);
                        stackPanel.Children.Add(textBlock);

                        image.MouseLeftButtonDown += (s, e) =>
                        {
                            DeselectAllRows();
                            int index = _items.IndexOf(item);
                            tableView.FocusedRowHandle = index;
                            gridControl.View.FocusedRowHandle = index;
                            HighlightQRCode(item.Magazine);
                        };

                        qrCodePanel.Children.Add(stackPanel);
                        _qrCodePanels[item.Magazine] = stackPanel;
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"QR Code generation error for item '{item.Magazine}': {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"QR Code generation error: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private Bitmap GenerateQRCode(string text)
        {
            try
            {
                BarcodeWriter writer = new BarcodeWriter
                {
                    Format = BarcodeFormat.QR_CODE,
                    Options = new ZXing.Common.EncodingOptions
                    {
                        Height = 200,
                        Width = 200
                    }
                };
                return writer.Write(text);
            }
            catch (Exception ex)
            {
                throw new Exception($"Error generating QR Code: {ex.Message}");
            }
        }

        private BitmapImage BitmapToImageSource(Bitmap bitmap)
        {
            try
            {
                using (var memory = new System.IO.MemoryStream())
                {
                    bitmap.Save(memory, System.Drawing.Imaging.ImageFormat.Png);
                    memory.Position = 0;
                    var bitmapImage = new BitmapImage();
                    bitmapImage.BeginInit();
                    bitmapImage.StreamSource = memory;
                    bitmapImage.CacheOption = BitmapCacheOption.OnLoad;
                    bitmapImage.EndInit();
                    return bitmapImage;
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Error converting Bitmap to ImageSource: {ex.Message}");
            }
        }

        private bool IsAlphanumeric(string str)
        {
            foreach (char c in str)
            {
                if (!char.IsLetterOrDigit(c))
                {
                    return false;
                }
            }
            return true;
        }

        private void DeselectAllRows()
        {
            try
            {
                for (int i = 0; i < gridControl.VisibleRowCount; i++)
                {
                    int rowHandle = gridControl.GetRowHandleByVisibleIndex(i);
                    tableView.UnselectRow(rowHandle);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error deselecting rows: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        private void HighlightQRCode(string magazine)
        {
            foreach (var key in _qrCodePanels.Keys)
            {
                _qrCodePanels[key].Background = System.Windows.Media.Brushes.Transparent;
            }
            if (_qrCodePanels.ContainsKey(magazine))
            {
                _qrCodePanels[magazine].Background = System.Windows.Media.Brushes.Yellow;
            }
        }

        private void TableView_FocusedRowHandleChanged(object sender, FocusedRowHandleChangedEventArgs e)
        {
            var row = gridControl.GetRow(e.NewRowHandle) as Item;
            if (row != null)
            {
                HighlightQRCode(row.Magazine);
            }
        }
    }

    public class Item
    {
        public int No { get; set; }
        public string Magazine { get; set; }
    }
}