금 큐에 남아 있는 작업 목록을 실시간으로 표시하려면, 큐의 상태를 실시간으로 조회해서 UI에 바인딩할 수 있도록 해야 합니다. taskList는 현재 진행 중인 작업을 표시하고 있지만, 이번에는 큐에 대기 중인 작업 목록을 실시간으로 표시하는 기능을 추가하겠습니다.

이를 구현하려면 큐의 상태를 ObservableCollection과 같은 바인딩 가능한 데이터 구조로 변환해서, UI에 작업 대기 목록을 실시간으로 반영할 수 있습니다.

해결 방법
대기 중인 작업 큐의 상태를 ObservableCollection에 복사하여 실시간으로 UI에 표시합니다.
작업이 큐에 추가되거나 처리될 때마다 이 ObservableCollection을 업데이트**합니다.
이 방식으로 큐에 남은 작업 목록을 실시간으로 UI에 표시할 수 있습니다.
구현
_queuedTaskList: 대기 중인 작업을 실시간으로 표시하는 ObservableCollection을 추가합니다.
EnqueueTask 함수에서 큐에 작업을 추가할 때, 이 목록에도 추가합니다.
**ProcessQueueAsync**에서 작업이 처리될 때, 큐에서 작업이 제거되면 이 목록에서도 제거합니다.
수정된 코드:
csharp
코드 복사
// 큐에 대기 중인 작업을 실시간으로 표시하기 위한 ObservableCollection
private ObservableCollection<string> _queuedTaskList = new ObservableCollection<string>();

// 큐에서 작업을 처리하는 비동기 메소드
private async Task ProcessQueueAsync()
{
    _isProcessingTask = true; // 작업이 진행 중임을 나타냄

    // 큐에서 작업이 남아 있을 때까지 반복
    while (_taskQueue.TryDequeue(out (string taskType, ProductOrderModel order)))
    {
        // 작업이 큐에서 빠졌으므로, _queuedTaskList에서도 제거
        _queuedTaskList.Remove($"{taskType}: {order.ProductOrder}");

        // 작업 목록에 작업 추가 (실시간 작업 상태 표시)
        _taskList.Add($"처리 중: {taskType}: {order.ProductOrder}");

        // 작업의 종류에 따라 분기 처리 (적재 또는 배출)
        if (taskType == "적재")
        {
            await ProcessStackAsync(order); // 적재 작업 처리
        }
        else if (taskType == "배출")
        {
            await ProcessOutAsync(order); // 배출 작업 처리
        }

        // 완료된 작업을 작업 목록에서 삭제 (완료되면 즉시 삭제)
        _taskList.Remove($"처리 중: {taskType}: {order.ProductOrder}");

        // 작업 완료 후 주문 상태 갱신 (out 또는 stack)
        order.POStatus = taskType == "적재" ? "stack" : "out";
    }

    _isProcessingTask = false; // 작업이 끝나면 플래그 초기화
}

// 큐에 작업 추가 메소드 (큐 대기 작업 목록도 업데이트)
private void EnqueueTask(string taskType, ProductOrderModel order)
{
    _taskQueue.Enqueue((taskType, order)); // 작업을 큐에 추가

    // 작업이 큐에 추가되었으므로 _queuedTaskList에도 추가
    _queuedTaskList.Add($"{taskType}: {order.ProductOrder}");

    // 큐에 추가한 후 바로 작업 처리 시작
    if (!_isProcessingTask) // 이미 다른 작업을 처리 중이지 않을 때만 실행
    {
        _ = ProcessQueueAsync(); // 큐 처리 시작
    }
}
설명:
_queuedTaskList:

ObservableCollection을 사용하여 큐에 대기 중인 작업 목록을 실시간으로 표시합니다.
UI 바인딩을 할 수 있도록 실시간으로 상태가 반영됩니다.
**EnqueueTask()**에서:

작업이 큐에 추가될 때, _queuedTaskList에도 작업을 추가하여 실시간으로 UI에 대기 작업 목록을 표시합니다.
큐에 작업이 추가되면 해당 작업이 바로 UI에도 반영됩니다.
**ProcessQueueAsync()**에서:

큐에서 작업이 꺼내질 때, _queuedTaskList에서 해당 작업을 삭제하여 더 이상 대기 중이지 않음을 표시합니다.
작업이 완료되면, **taskList**와 함께 대기 중인 작업 목록도 실시간으로 업데이트됩니다.
ProductOrderModel 클래스 (변경 없음)
ProductOrderModel 클래스는 기존 속성 그대로 유지되며, 작업이 완료되면 POStatus가 UI에 실시간으로 반영됩니다.

최종 요약
**_queuedTaskList**는 실시간으로 큐에 대기 중인 작업 목록을 표시하기 위해 사용됩니다.
EnqueueTask() 함수에서 큐에 작업을 추가할 때, _queuedTaskList에도 작업을 추가합니다.
**ProcessQueueAsync()**에서 작업이 처리될 때, 큐에서 빠져나간 작업을 _queuedTaskList에서 삭제합니다.
이로 인해 UI에서는 현재 대기 중인 작업 목록과 진행 중인 작업 목록을 실시간으로 확인할 수 있습니다.
이렇게 하면 큐에 남아 있는 작업과 진행 중인 작업을 실시간으로 구분해서 확인할 수 있으며, 작업이 완료되면 바로 큐 목록과 UI에