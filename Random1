정된 EnqueueTask() 함수:
csharp
코드 복사
// 큐에 작업 추가 후 바로 작업 실행
private void EnqueueTask(string taskType, ProductOrderModel order)
{
    _taskQueue.Enqueue((taskType, order)); // 작업을 큐에 추가

    // 큐에 추가한 후 즉시 큐 작업 실행
    if (!_isProcessingTask) // 이미 다른 작업을 처리 중이지 않을 때만 실행
    {
        _ = ProcessQueueAsync(); // 큐 처리 시작
    }
}
전체 흐름 설명:
**EnqueueTask()**는 작업을 큐에 넣고 바로 **ProcessQueueAsync()**를 호출하여 큐에 있는 작업을 처리합니다.

**ProcessQueueAsync()**는 큐에서 작업을 하나씩 꺼내어 처리하며, 작업이 끝날 때까지 큐에서 다른 작업이 처리되지 않도록 합니다.

수정된 전체 코드 (주요 부분):
csharp
코드 복사
// 큐에 작업 추가 후 바로 작업 실행
private void EnqueueTask(string taskType, ProductOrderModel order)
{
    _taskQueue.Enqueue((taskType, order)); // 작업을 큐에 추가

    // 큐에 추가한 후 즉시 큐 작업 실행
    if (!_isProcessingTask) // 이미 다른 작업을 처리 중이지 않을 때만 실행
    {
        _ = ProcessQueueAsync(); // 큐 처리 시작
    }
}

// 큐에서 작업을 처리하는 비동기 메소드
private async Task ProcessQueueAsync()
{
    _isProcessingTask = true; // 작업 처리 중 플래그 설정

    while (_taskQueue.TryDequeue(out (string taskType, ProductOrderModel order) task))
    {
        _taskList.Add($"처리 중: {task.taskType}: {task.order.ProductOrder}");

        if (task.taskType == "적재")
        {
            await ProcessStackAsync(task.order); // 적재 작업 처리
        }
        else if (task.taskType == "배출")
        {
            await ProcessOutAsync(task.order); // 배출 작업 처리
        }

        // 완료된 작업을 리스트에서 삭제
        _taskList.Remove($"처리 중: {task.taskType}: {task.order.ProductOrder}");

        // 완료된 작업에 따라 상태를 갱신 (out 또는 stack)
        task.order.POStatus = task.taskType == "적재" ? "stack" : "out";
    }

    _isProcessingTask = false; // 작업 처리 완료
}
추가 설명:
_isProcessingTask 플래그: 큐에서 동시에 두 개 이상의 작업이 실행되는 것을 방지하기 위해 ProcessQueueAsync()가 실행 중일 때는 _isProcessingTask 플래그를 true로 설정합니다. 작업이 완료되면 다시 false로 설정합니다.

실시간 동기화: 미완료된 작업은 taskList에 실시간으로 표시되며, 작업이 완료되면 taskList에서 제거되고, 해당 주문의 POStatus가 업데이트되어 UI에 반영됩니다.

이제 큐에 작업이 들어가면 바로 처리되며, 작업이 완료되면 POStatus도 적절히 업데이트되고, 작업 목록에서 제거됩니다.