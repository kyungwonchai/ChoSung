er를 사용하여 Image 컨트롤에 접근하고, 해당 컨트롤의 Source 속성을 가져오는 코드를 작성하는 것은 간단합니다. 이벤트 핸들러 내에서 sender를 적절한 형식으로 캐스팅한 후, Image 컨트롤의 Source 속성을 사용할 수 있습니다.

다음은 이를 수행하는 예시 코드입니다:

XAML:

xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Image Name="MainImage" Source="your-image-path.jpg" MouseLeftButtonDown="MainImage_MouseLeftButtonDown"/>
    </Grid>
</Window>
Code-behind (C#):

csharp
Copy code
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;

public partial class MainWindow : Window
{
    public MainWindow()
    {
        InitializeComponent();
    }

    private void MainImage_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
    {
        if (e.ClickCount == 2) // 더블 클릭 감지
        {
            // sender를 Image 컨트롤로 캐스팅
            var imageControl = sender as Image;
            if (imageControl != null)
            {
                // Image 컨트롤의 Source 속성 사용
                PopupImageWindow popup = new PopupImageWindow(imageControl.Source);
                popup.Show();
            }
        }
    }
}

// PopupImageWindow 클래스 구현은 이전에 제공한 코드와 유사합니다.
이 코드에서 MainImage_MouseLeftButtonDown 메서드는 sender 매개변수를 Image 타입으로 캐스팅하여, 해당 Image 컨트롤의 Source 속성에 접근합니다. 더블 클릭이 감지되면, 새로운 팝업 창이 열리고 Image 컨트롤의 Source를 