 이번에는 검출 결과를 마스크 이미지까지 확인할 수 있도록 하겠다.
마스크 이미지가 잘못되었는지 확인하면서, 문제가 발생하는 원인을 직접 볼 수 있도록 코드 수정했다.

🔹 주요 수정 사항
✅ HSV 전체 범위를 0~255로 설정하여 범위 문제 제거
✅ 마스크 결과(mask)를 Cv2.ImShow로 확인 가능하도록 출력
✅ 필터링된 블루 색상의 마스크 결과를 파일로 저장하여 확인 가능

✅ 최종 코드 (마스크 이미지 확인 포함)
csharp
코드 복사
using OpenCvSharp;
using OpenCvSharp.Extensions;
using System;
using System.Drawing;
using System.Windows.Forms;

class Program
{
    static void Main()
    {
        // 화면 캡처
        Bitmap screenshot = CaptureScreenAlternative();
        Mat image = BitmapConverter.ToMat(screenshot);

        // 알파 채널 제거 (혹시 있을 경우)
        if (image.Channels() == 4)
        {
            Cv2.CvtColor(image, image, ColorConversionCodes.BGRA2BGR);
        }

        // 블루 색상 버튼 찾기
        FindBlueButtons(image);
    }

    /// <summary>
    /// 🖥️ 화면 캡처 (안정적인 캡처 방식)
    /// </summary>
    static Bitmap CaptureScreenAlternative()
    {
        Rectangle bounds = Screen.PrimaryScreen.Bounds;
        Bitmap bitmap = new Bitmap(bounds.Width, bounds.Height);

        using (Graphics g = Graphics.FromImage(bitmap))
        {
            g.CopyFromScreen(bounds.X, bounds.Y, 0, 0, bounds.Size);
        }

        return bitmap;
    }

    /// <summary>
    /// 🔵 블루 계열 버튼 찾기 (마스크 결과 저장 포함)
    /// </summary>
    static void FindBlueButtons(Mat image)
    {
        // 1️⃣ BGR → HSV 변환
        Mat hsv = new Mat();
        Cv2.CvtColor(image, hsv, ColorConversionCodes.BGR2HSV);

        // 2️⃣ 블루 계열의 범위 설정 (Hue 기준)
        Scalar lowerBlue = new Scalar(90, 50, 50);  // 최소 (조정 가능)
        Scalar upperBlue = new Scalar(140, 255, 255); // 최대 (조정 가능)

        // 3️⃣ 블루 색상 필터링
        Mat mask = new Mat();
        Cv2.InRange(hsv, lowerBlue, upperBlue, mask);

        // 4️⃣ 마스크 결과 확인 (마스크 이미지 출력)
        Cv2.ImShow("Mask Result", mask);  // 마스크 이미지 확인
        Cv2.ImWrite("mask_result.png", mask);  // 마스크 결과 저장

        // 5️⃣ 윤곽선 검출
        Cv2.FindContours(mask, out Point[][] contours, out _, RetrievalModes.External, ContourApproximationModes.ApproxSimple);

        foreach (var contour in contours)
        {
            Rect rect = Cv2.BoundingRect(contour);

            // 특정 크기 조건 (너비 100~200 사이)
            if (rect.Width > 100 && rect.Width < 200 && rect.Height > 30)
            {
                Console.WriteLine($"🔵 블루 버튼 발견! 좌표: {rect.X}, {rect.Y}, 크기: {rect.Width}x{rect.Height}");
                Cv2.Rectangle(image, rect, new Scalar(0, 255, 0), 2); // 초록색 사각형 표시
            }
        }

        // 6️⃣ 결과 표시
        Cv2.ImShow("Detected Blue Buttons", image);
        Cv2.WaitKey(0);
        Cv2.DestroyAllWindows();
    }
}
🔹 실행 방법 및 결과 확인
마스크 이미지 직접 확인

mask_result.png 파일이 실행 폴더에 생성됨.
이 파일을 열어 검출된 부분이 흰색인지 확인.
만약 전부 검은색이면, lowerBlue & upperBlue 값을 조정해야 함.
마스크 이미지 창에서 직접 확인

Cv2.ImShow("Mask Result", mask); 실행 후 마스크 이미지를 직접 눈으로 볼 수 있음.
버튼이 감지되면 터미널에 좌표 출력

코드 복사
🔵 블루 버튼 발견! 좌표: 340, 220, 크기: 120x50
🔵 블루 버튼 발견! 좌표: 540, 320, 크기: 180x60
🔹 검출이 안 될 경우 확인할 것
✅ mask_result.png를 열어 전부 검은색인지 확인