using DevExpress.XtraEditors;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Windows.Forms;

namespace YourNamespace
{
    public partial class MainForm : XtraForm
    {
        private string connectionString = "your_connection_string";
        private DataTable tbl1;
        private DataTable tbl2;

        public MainForm()
        {
            InitializeComponent();
        }

        private void MainForm_Load(object sender, EventArgs e)
        {
            // TBL1 데이터를 불러옴
            tbl1 = LoadDataFromTable("tbl1");
            gridControl1.DataSource = tbl1;

            // TBL2 데이터를 불러옴
            tbl2 = LoadDataFromTable("tbl2");
            gridControl2.DataSource = tbl2;
        }

        private DataTable LoadDataFromTable(string tableName)
        {
            string query = $"SELECT * FROM {tableName} ORDER BY DateColumn DESC";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                SqlDataAdapter adapter = new SqlDataAdapter(query, connection);
                DataTable dataTable = new DataTable();
                adapter.Fill(dataTable);
                return dataTable;
            }
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            string valueToAdd = textEdit1.Text;

            // TBL1에 값이 있는지 확인
            bool valueExists = CheckValueExists(tbl1, "ColumnName", valueToAdd);

            if (valueExists)
            {
                XtraMessageBox.Show("값이 이미 존재합니다.", "경고", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            else
            {
                // TBL1에 값 추가
                AddValueToTable(tbl1, "ColumnName", valueToAdd);

                // 리스트 컨트롤 갱신
                gridView1.RefreshData();
            }
        }

        private bool CheckValueExists(DataTable dataTable, string columnName, string value)
        {
            string expression = $"{columnName} = '{value}'";
            DataRow[] foundRows = dataTable.Select(expression);
            return foundRows.Length > 0;
        }

        private void AddValueToTable(DataTable dataTable, string columnName, string value)
        {
            DataRow newRow = dataTable.NewRow();
            newRow[columnName] = value;
            dataTable.Rows.Add(newRow);
        }

        private void gridView1_RowClick(object sender, RowClickEventArgs e)
        {
            // 리스트 컨트롤 클릭 시, 해당 값을 이용하여 TBL2에서 데이터 검색
            GridView gridView = sender as GridView;
            if (gridView != null && e.Button == MouseButtons.Left && e.Clicks == 1)
            {
                string selectedValue = gridView.GetRowCellValue(e.RowHandle, "ColumnName").ToString();

                // TBL2에서 해당 값을 검색하여 리스트 컨트롤2에 표시
                DataTable filteredTable = FilterTable(tbl2, "ColumnName", selectedValue);
                gridControl2.DataSource = filteredTable;
                gridView2.BestFitColumns();
            }
        }

        private DataTable FilterTable(DataTable dataTable, string columnName, string filterValue)
        {
            string filterExpression = $"{columnName} = '{filterValue}'";
            DataRow[] filteredRows = dataTable.Select(filterExpression);
            DataTable filteredTable = dataTable.Clone();
            foreach (DataRow row in filteredRows)
            {
                filteredTable.ImportRow(row);
            }
            return filteredTable;
        }

        private void gridView2_RowDoubleClick(object sender, RowClickEventArgs e)
        {
            // 리스트 컨트롤2 더블 클릭 시, 해당 조건에 맞는 TBL2의 값으로 Diagram을 열어줌
            GridView gridView = sender as GridView;
            if (gridView != null && e.Button == MouseButtons.Left && e.Clicks == 2)
            {
                string selectedValue = gridView.GetRowCellValue(e.RowHandle, "ColumnName").ToString();
                OpenDiagram(selectedValue);
            }
        }

        private void OpenDiagram(string value)
        {
            // Diagram을 여는 로직 구현
            // 해당 값에 대한 조건을 사용하여 TBL2의 'dia' 컬럼에서 Diagram을 검색 및 열기
        }
    }
}
