작업 내용을 확인하는 기능을 구현하려면, TaskQueue 내에서 큐에 쌓인 작업들을 DataGrid와 연결하고, 작업의 상태 변화가 있을 때마다 UI에 업데이트되도록 해야 합니다. 이를 위해서는 TaskQueue 클래스와 MainViewModel에서 ObservableCollection과 같은 바인딩 가능한 컬렉션을 사용해 실시간 업데이트가 반영되게 해야 합니다.

기본적인 구현 단계:
TaskQueue 클래스에서 작업들이 실시간으로 추가, 제거될 때 이를 UI로 반영할 수 있도록 바인딩할 수 있는 컬렉션을 사용.
MainViewModel에서 TaskQueue에 있는 작업들을 ObservableCollection으로 DataGrid에 바인딩.
작업 상태가 변경될 때마다 TaskQueue가 UI에 업데이트 신호를 보냄.
1. TaskQueue.cs 수정
csharp
코드 복사
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Threading; // UI 업데이트를 위한 Dispatcher 사용

/// <summary>
/// TaskQueue는 작업을 순차적으로 실행하며, 작업이 완료되면 다음 작업을 실행합니다.
/// 이 클래스는 DataGrid와 연동되어 실시간으로 작업의 상태를 표시합니다.
/// </summary>
public class TaskQueue
{
    // 작업 큐 (실제 작업을 담는 큐)
    private Queue<Func<Task>> _tasks = new Queue<Func<Task>>();

    // DataGrid에 바인딩할 ObservableCollection (실시간 작업 상태를 확인 가능)
    public ObservableCollection<TaskItem> TaskItems { get; private set; }

    private bool _isRunning = false; // 현재 작업이 실행 중인지 여부
    private bool _isPaused = false;  // 작업이 일시정지 상태인지 여부

    // UI 스레드에서 업데이트할 수 있도록 Dispatcher 사용
    private Dispatcher _dispatcher;

    public TaskQueue()
    {
        TaskItems = new ObservableCollection<TaskItem>();
        _dispatcher = Dispatcher.CurrentDispatcher; // 현재 UI 스레드에 Dispatcher 설정
    }

    /// <summary>
    /// 작업 큐에 새로운 작업을 추가하고, 동시에 ObservableCollection에 작업을 추가합니다.
    /// </summary>
    public void EnqueueTask(Func<Task> task, string description)
    {
        _tasks.Enqueue(task); // 작업을 큐에 추가

        // UI 스레드에서 ObservableCollection에 작업을 추가
        _dispatcher.Invoke(() =>
        {
            TaskItems.Add(new TaskItem { Description = description, Status = "Pending" });
        });

        // 작업이 실행 중이 아니고 일시정지가 아니라면 즉시 실행
        if (!_isRunning && !_isPaused)
        {
            RunNextTask();
        }
    }

    /// <summary>
    /// 작업 큐의 다음 작업을 실행하고, 실행 상태를 업데이트합니다.
    /// </summary>
    private async void RunNextTask()
    {
        if (_tasks.Count == 0 || _isPaused) // 큐에 작업이 없거나 일시정지 상태라면 리턴
        {
            _isRunning = false;
            return;
        }

        _isRunning = true;

        var task = _tasks.Dequeue(); // 큐에서 작업을 가져옴
        var taskItem = TaskItems[0]; // UI에서 첫 번째 작업

        // 작업 상태를 "Running"으로 변경
        _dispatcher.Invoke(() => taskItem.Status = "Running");

        await task(); // 비동기 작업 실행

        // 작업이 완료되면 상태를 "Completed"로 변경
        _dispatcher.Invoke(() =>
        {
            taskItem.Status = "Completed";
            TaskItems.Remove(taskItem); // 완료된 작업은 삭제
        });

        _isRunning = false;

        // 다음 작업 실행
        RunNextTask();
    }

    /// <summary>
    /// 작업을 일시정지합니다.
    /// </summary>
    public void Pause()
    {
        _isPaused = true;
    }

    /// <summary>
    /// 작업을 재개합니다.
    /// </summary>
    public void Resume()
    {
        if (_isPaused)
        {
            _isPaused = false;
            if (!_isRunning) // 작업이 실행 중이 아니면 재개
            {
                RunNextTask();
            }
        }
    }
}

/// <summary>
/// UI와 연동할 개별 작업 항목의 클래스 (작업의 설명과 상태를 포함)
/// </summary>
public class TaskItem
{
    public string Description { get; set; } // 작업 설명
    public string Status { get; set; }      // 작업 상태 (Pending, Running, Completed)
}
설명:
TaskQueue에서 ObservableCollection<TaskItem>을 사용해 DataGrid와 실시간 연동할 수 있도록 설정.
작업 상태가 변경될 때마다 TaskItem의 상태를 업데이트하고, 완료된 작업은 UI에서 자동으로 삭제.
Dispatcher를 사용하여 UI 업데이트를 보장.
2. MainViewModel.cs 수정
csharp
코드 복사
using System.Collections.ObjectModel;
using System.Windows.Input;

public class MainViewModel : ViewModelBase
{
    // TaskQueue와 연결된 작업 목록
    public ObservableCollection<TaskItem> TaskList { get; set; }

    private TaskQueue _taskQueue;

    // 명령어: 모든 작업 일시정지
    public ICommand PauseAllCommand { get; }

    // 명령어: 선택한 작업부터 재개
    public ICommand ResumeAllCommand { get; }

    public MainViewModel()
    {
        _taskQueue = new TaskQueue();
        TaskList = _taskQueue.TaskItems; // TaskQueue와 연결된 작업 목록

        PauseAllCommand = new RelayCommand(PauseAllTasks);
        ResumeAllCommand = new RelayCommand(ResumeAllTasks);

        // 테스트용 작업 추가
        _taskQueue.EnqueueTask(DemoTask, "작업 1");
        _taskQueue.EnqueueTask(DemoTask, "작업 2");
        _taskQueue.EnqueueTask(DemoTask, "작업 3");
    }

    /// <summary>
    /// 모든 작업을 일시정지하는 메서드
    /// </summary>
    private void PauseAllTasks()
    {
        _taskQueue.Pause();
    }

    /// <summary>
    /// 모든 작업을 재개하는 메서드
    /// </summary>
    private void ResumeAllTasks()
    {
        _taskQueue.Resume();
    }

    /// <summary>
    /// 테스트용 비동기 작업 (1초 대기)
    /// </summary>
    private async Task DemoTask()
    {
        await Task.Delay(1000); // 1초 대기
    }
}
설명:
MainViewModel에서 TaskQueue.TaskItems를 DataGrid에 바인딩.
명령어로 Pause와 Resume 기능을 연결.
3. XAML 파일 (DataGrid 추가)
xml
코드 복사
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Task Queue Example" Height="400" Width="600">
    <Grid>
        <!-- DataGrid: TaskList를 바인딩하여 작업 상태를 표시 -->
        <DataGrid ItemsSource="{Binding TaskList}" AutoGenerateColumns="False" IsReadOnly="True" Margin="10">
            <DataGrid.Columns>
                <!-- 작업 설명 -->
                <DataGridTextColumn Header="Description" Binding="{Binding Description}" Width="*" />
                
                <!-- 작업 상태 (Pending, Running, Completed) -->
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" Width="*" />
            </DataGrid.Columns>
        </DataGrid>

        <!-- 일시정지 버튼 -->
        <Button Content="Pause All" Command="{Binding PauseAllCommand}" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="10"/>
        
        <!-- 재개 버튼 -->
        <Button Content="Resume All" Command="{Binding ResumeAllCommand}" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="10"/>
    </Grid>
</Window>
설명:
DataGrid는 TaskList에 바인딩되어 작업 설명과 작업 상태를 실시간으로 표시합니다.
Pause/Resume 버튼을 통해 작업을 일시정지하고 재개할 수 있습니다.
정리:
TaskQueue에서 ObservableCollection을 사용해 DataGrid와 연동.
각 작업의 상태를 Pending, Running, Completed로 표시.
작업 목록이 실시간으로 업데이트되며, 완료된 작업은 자동으로 삭제됩니다.
DataGrid는 작업의 진행 상태를 실시간으로 반영하여 사용자가 확인할 수 있습니다.
이 구조는 작업을 쉽게 관리할 수 있도록 설계되었습니다. 추가적인 기능이 필요하다면 언제든지 요청해 주세