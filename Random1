i-AUD Designer에서 MxGrid 데이터를 활용한 'part1'별 'job1' 개수 차트 생성 가이드
1. 소개
1.1. 보고서 목적
본 보고서는 BI Matrix AUD 플랫폼의 i-AUD Designer 환경에서 Excel 파일을 드래그 앤 드롭하여 추가된 MxGrid의 데이터를 기반으로, 'part1'별 'job1'의 개수를 나타내는 차트를 생성하는 방법을 안내하는 것을 목적으로 합니다. 사용자는 이미 Excel 파일을 가져와 MxGrid를 추가하고 디자인 모드에서 원하는 표를 구성한 상태로, 다음 단계인 데이터 집계 및 시각화에 대한 구체적인 지침을 필요로 합니다.

1.2. 해결 방안 개요
본 보고서는 이 목표를 달성하기 위한 몇 가지 접근 방식을 제시합니다. 가장 권장되는 방법은 MxGrid의 Excel 디자인 기능을 활용하여 데이터를 사전에 집계하는 것입니다. 더 복잡하거나 동적인 요구사항이 있는 경우 스크립팅을 통한 데이터 처리 방법도 간략히 소개합니다. i-AUD Designer는 고유한 작업 흐름을 가지고 있으며, 특히 MxGrid가 Excel 데이터와 상호 작용하는 방식 및 차트가 데이터를 소비하는 방식에 대한 이해가 중요합니다. AUD 플랫폼은 BI, 리포팅, 시각화, UI/UX 개발 기능을 단일 통합 플랫폼에서 지원하여 다양한 인터페이스 개발을 가능하게 합니다. 이러한 통합적 특성은 Excel 기반 디자인과 스크립트 기반 로직 같은 다양한 패러다임이 공존함을 의미하며, 본 보고서는 이러한 환경 내에서 사용자의 요구사항을 해결하는 데 초점을 맞춥니다.   

1.3. 컨텍스트의 중요성
사용자의 질의는 Excel에서 비롯된 데이터 구조(MxGrid 내)와 시각화(차트)를 연결하는 과정을 다룹니다. AUD 플랫폼이 Excel 프로세스 자동화를 지원한다는 점은 이 작업과 밀접한 관련이 있습니다. 핵심 과제는 이러한 "통합"이 MxGrid와 차트 간의 특정 데이터 집계 및 차트 생성을 위한 실질적인 단계로 어떻게 변환되는지 이해하는 것입니다. 제공된 정보에 따르면, 강력한 기능에도 불구하고 MxGrid에서 차트로 데이터를 집계하여 연결하는 구체적인 '방법'은 Excel 패러다임 내에서 사전 설계되지 않은 경우 단순한 드래그 앤 드롭 이상의 작업이 필요할 수 있습니다.   

2. Excel 가져오기를 통한 MxGrid의 데이터 이해
2.1. MxGrid: Excel 기반 컴포넌트
i-AUD Designer의 MxGrid는 근본적으로 Microsoft Excel의 개념과 밀접하게 연결되어 있습니다. Excel 파일을 가져오면 MxGrid는 해당 파일의 구조와 데이터를 활용합니다. 특히 "Excel UI 기반 화면 디자인" 기능은 UI Bot이 Excel 레이아웃을 HTML5 웹 화면으로 자동 변환하는 핵심적인 역할을 합니다. 따라서 MxGrid를 효과적으로 사용하기 위해서는 Excel 데이터가 내부적으로 어떻게 구성되고 참조되는지에 대한 이해가 필수적입니다.   

2.2. 핵심 개념: 시트 이름 규칙
MxGrid Designer (i-MATRIX) 작업 시 Excel 시트 이름은 i-AUD Designer가 Excel 파일의 다양한 부분을 해석하고 사용하는 방식에 결정적인 역할을 합니다. 다음은 주요 시트 이름 규칙과 그 역할입니다.   

시트 이름 패턴	역할/목적	주요 특징	사용자 차트 작성 작업과의 관련성
V1	MxGrid 컨트롤의 최종 출력 대상 시트 (View Sheet)	사용자가 화면에서 보게 될 보고서 양식 구성. MxGrid는 V1 시트 내용을 화면에 출력.	차트가 포함될 주 화면. 집계된 데이터 또는 차트 자체가 이 시트에 위치하거나 이 시트에서 참조되어야 함.
D + 숫자 (예: D1)	데이터 시트 (Data Sheet)	SQL 실행 결과 출력, 계산용 임시 데이터 저장소. 서버에서 동적 생성 시 수식/서식 유지 안 될 수 있음.	원본 Excel 데이터가 로드되는 위치일 수 있음. V1 시트에서 이 시트의 데이터를 참조하여 집계 가능.
P1	파라미터 정의 시트 (Parameter Sheet)	SQL 실행 시 쿼리 필터 조건으로 사용할 변수 값 관리. Excel 이름 정의 통해 파라미터 인식.	동적 차트의 조회 조건 값 관리에 사용될 수 있음.
T + 숫자 (예: T1)	템플릿 시트 (Template Sheet)	데이터 출력 시 디자인 및 필드 매핑용. 서버 스크립트를 통한 바인딩 규칙 지정 필요.	복잡한 반복 출력 디자인에 사용될 수 있으나, 단순 집계 차트에는 직접적 영향 적을 수 있음.
V + 숫자 / V_ + *	기타 출력 대상 시트	다중 시트 지원 기능 또는 ActiveSheet 지정 시 사용.	특정 조건에 따라 다른 뷰를 보여줄 때 사용.
  
이러한 엄격한 시트 이름 규칙은 Excel 파일 자체가 MxGrid를 위한 구조화된 "계약"으로 작동하는 설계 철학을 나타냅니다. 이는 MxGrid 내에 이미 있는 데이터의 표시를 위한 변환 작업이 i-AUD Designer 내의 별도 BI 도구와 유사한 변환 단계에만 의존하기보다는 Excel 자체의 기능(수식, 셀 연결)을 활용할 것으로 예상됨을 시사합니다. 데이터 모델을 보다 완전하게 추상화하는 BI 도구에 익숙한 사용자는 MxGrid의 Excel 중심적 특성이 패러다임 전환으로 느껴질 수 있습니다. 예를 들어, D-시트가 서버 측 데이터 새로고침 후에도 동적이고 수식을 보존하는 시트처럼 작동할 것으로 기대하는 것은 정확하지 않을 수 있습니다. 에서는 D-시트가 동적으로 생성될 때 "수식 및 서식 등은 유지되지 않습니다"라고 명시하고 있기 때문입니다.   

2.3. MxGrid 디자인 내 데이터 참조
한 시트(예: D-시트)의 데이터는 일반적으로 V1 시트에서 표준 Excel 셀 참조 방식(예: =D1!A1)을 사용하여 참조됩니다. 이는 MxGrid의 디자인이 Excel 통합 문서의 구조와 밀접하게 연관되어 있음을 의미합니다.   

2.4. 사용자 작업에 대한 시사점
Excel 파일의 구조, 특히 시트 이름과 데이터 레이아웃은 MxGrid가 이를 처리하는 방식에 직접적인 영향을 미칩니다. 차트 생성을 위해서는 데이터가 요약/집계된 형태로 존재해야 하며, 이 요약 데이터는 V1 시트 또는 차트를 위해 특별히 준비된 시트에 있거나 해당 시트에서 참조할 수 있어야 합니다.

3. 방법 1: MxGrid Excel 디자인 내에서 집계 데이터 준비 (권장)
이 방법은 MxGrid의 Excel 디자인 환경(i-MATRIX Designer) 내에서 'part1' 카테고리와 해당 'job1' 개수를 제공하는 요약 테이블을 직접 생성하는 것을 포함합니다. 그런 다음 MxGrid 디자인 내의 차트는 이 사전 집계된 데이터를 사용합니다. 이 접근 방식은 "MX-Grid 가변 차트 제작" 가이드에서 설명된 방식과 일치합니다.   

3.1. MxGrid 디자인 모드(i-MATRIX Designer) 접근
MxGrid를 추가하고 Excel을 가져온 후, i-AUD Designer에서 MxGrid 컨트롤을 마우스 오른쪽 버튼으로 클릭하고 "디자인"을 선택합니다. 이렇게 하면 Excel과 유사한 인터페이스인 i-MATRIX Designer가 열립니다. 참고: MxGrid 디자이너를 실행하기 전에 화면(보고서)을 저장해야 합니다.   

3.2. 'part1' 및 'job1' 개수를 위한 요약 테이블 생성
Excel 구조를 수정하여 집계된 데이터를 준비합니다. 이는 원본 Excel 파일에서 미리 작업하거나 i-MATRIX Designer 내에서 수행할 수 있습니다.

원본 데이터 식별: 원본 'part1' 및 'job1' 데이터가 포함된 시트를 식별합니다 (예: 'D1' 또는 초기 'V1').
요약 테이블 위치: 'V1' 시트(또는 'V1'이 참조할 수 있는 새 시트)에 요약 테이블을 만듭니다. 에서는 차트용 데이터를 'V1' 시트에 직접 출력하는 예를 보여주며 ("출력 시트 : V1"), 이는 MxGrid의 Excel 디자인 내에 통합된 차트의 경우 차트 준비 데이터를 'V1'에 두는 것이 일반적인 관행임을 강력히 시사합니다.   
1열: 고유한 'part1' 값. 수동으로 나열하거나, i-MATRIX에서 지원되는 경우 UNIQUE와 같은 Excel 수식을 사용하거나, 데이터에서 채울 계획을 세웁니다.
2열: 각 'part1'에 대한 'job1' 개수. Excel의 COUNTIFS 수식을 사용합니다. 예를 들어, 고유한 'part1' 값이 'V1' 시트의 A열(예: A2, A3,...)에 있고, 원본 'part1' 데이터가 'D1' 시트 X열에, 원본 'job1' 데이터가 'D1' 시트 Y열에 있다면, 'V1' 시트 B2의 수식은 COUNTIFS(D1!X:X, V1!A2, D1!Y:Y, "<>")와 같을 수 있습니다 (해당 'part1'에 대해 비어 있지 않은 'job1' 항목을 계산한다고 가정). 필요에 따라 조건을 조정합니다.
3.3. 차트 데이터를 위한 이름 정의 (동적 차트의 핵심)
요약 테이블('part1' 카테고리가 한 열에, 'job1' 개수가 다른 열에)이 'V1'에 준비되면, 이 열들에 대해 Excel 이름 정의를 사용합니다. 이렇게 하면 'part1' 카테고리 수가 변경될 경우 차트가 자동으로 조정될 수 있습니다.   

i-MATRIX 인터페이스의 "수식 > 이름 관리자" 또는 "이름 정의"로 이동합니다.

'part1' 카테고리 (X축) 정의:
이름: 예) Chart_Part1_Categories
참조 대상: OFFSET 및 COUNTA 함수를 사용하여 범위를 동적으로 만듭니다. 예: 'part1' 카테고리가 V1!$A$2에서 시작하여 아래로 내려가는 경우, =OFFSET(V1!$A$2,0,0,COUNTA(V1!$A$2:$A$100),1) ($A$100은 예상 최대 행 수에 맞게 조정). 에서는 유사한 예로 =OFFSET('V1'!$A$3,0,0,MAX(COUNTA('V1'!$A$3:$A$33),1),1)를 제시합니다.   
'job1' 개수 (Y축) 정의:
이름: 예) Chart_Job1_Counts
참조 대상: 개수 열에 대해 유사한 OFFSET/COUNTA 수식을 사용합니다. 예: 개수가 V1!$B$2에서 시작하는 경우, =OFFSET(V1!$B$2,0,0,COUNTA(V1!$A$2:$A$100),1) (참고: COUNTA는 종종 카테고리 열을 사용하여 모든 카테고리에 개수가 존재한다고 가정하고 행 수를 결정합니다). 의 Y축 예시: =OFFSET('V1'!$A$20,0,1,MAX(COUNTA('V1'!$A$20:$A$50),1),1).   
3.4. i-MATRIX Designer 내에서 차트 삽입 및 구성
i-MATRIX Designer에서 "삽입 > 추천 차트"를 선택하거나 특정 차트 유형(예: 묶은 세로 막대형)을 선택합니다. 차트를 'V1' 시트에 배치합니다.   

차트를 마우스 오른쪽 버튼으로 클릭하고 "데이터 선택"을 선택합니다.   

범례 항목 (계열 - Y 값):
"편집"을 클릭합니다.
"계열 값"에 'job1' 개수에 대해 정의된 이름을 시트 이름과 함께 입력합니다: ='V1'!Chart_Job1_Counts.   
가로 (항목) 축 레이블 (X 값):
"편집"을 클릭합니다.
"축 레이블 범위"에 'part1' 카테고리에 대해 정의된 이름을 입력합니다: ='V1'!Chart_Part1_Categories.   
3.5. 저장 및 실행
i-MATRIX Designer에서 MxGrid 디자인을 저장합니다([저장] 버튼). i-MATRIX Designer를 닫고 i-AUD Designer로 돌아갑니다. i-AUD 화면을 실행하여([실행] 버튼) MxGrid와 내장된 차트를 확인합니다.   

이 방법은 차트를 MxGrid 웹 뷰 내에서 렌더링되는 Excel 차트 객체로 취급합니다. 집계 및 동적 범위와 같은 인텔리전스는 Excel 기능을 사용하여 구축됩니다. 과 는 Excel의 이름 관리자, OFFSET, COUNTA 사용에 대해 매우 구체적으로 설명하며, 이는 고전적인 Excel 동적 차트 기법입니다. 이는 여기서의 "차트"가 MxGrid 객체에 자체 데이터 바인딩 속성을 가진 독립적인 i-AUD 차트 구성 요소가 아니라, MxGrid의 Excel "캔버스" 내에 있는 Excel 차트임을 강력하게 시사합니다. 이 방법의 정확성은 Excel 수식(예: COUNTIFS) 및 동적 범위 정의(OFFSET/COUNTA)와 같은 Excel 수준 구성의 정확성과 직접적으로 연결됩니다. Excel 수식의 오류는 부정확한 차트로 이어집니다. 이 방법은 Excel에 익숙한 사용자에게는 강력하지만, 차트 객체가 데이터 모델/쿼리에 직접 연결되고 UI 설정을 통해 집계를 처리하는 일반적인 BI 도구 작업 흐름을 기대하는 사용자에게는 덜 직관적일 수 있습니다.   

4. 방법 2: 별도의 i-AUD 차트 컴포넌트를 사용하여 MxGrid 데이터에서 직접 차트 생성
이 접근 방식은 (MxGrid의 i-MATRIX Excel 디자인 내에서가 아닌 i-AUD Designer의 UI Bot에서 추가된) 별도의 차트 컴포넌트가 MxGrid 시트 내의 원시 데이터(예: 초기 Excel 드래그 앤 드롭에서 채워진 'V1' 또는 'D1')를 직접 데이터 소스로 사용한 다음, 차트 컴포넌트 자체 속성을 사용하여 집계('job1' COUNT) 및 그룹화('part1' 기준)를 수행할 수 있는지 여부를 탐색합니다.

4.1. i-AUD Designer 캔버스에 차트 컴포넌트 추가
i-AUD Designer의 "컨트롤 그룹 > UI Bot"에서 "Chart" 컨트롤을 디자인 캔버스로 드래그합니다. 이는 MxGrid의 i-MATRIX Excel 환경 내에 차트를 삽입하는 것과는 별개의 단계입니다.   

4.2. 차트를 MxGrid 데이터에 연결 시도
새로 추가된 차트 컨트롤을 선택합니다. 차트의 속성 창(일반적으로 오른쪽에 있음)에서 "Data > DataSource" 또는 유사한 속성을 찾습니다.   

여기서 중요한 질문은 MxGrid 컴포넌트 자체 또는 그 안의 특정 시트(예: MxGrid1.V1, MxGrid1.D1)를 DataSource로 선택할 수 있는지 여부입니다. 사용 가능한 문서는 주로 차트 컨트롤을 스크립트 편집기를 통해 생성된 "SQL Dataset"에 연결하는 것을 보여줍니다. 은 "문서...는 i-AUD Designer 내에서 MX-Grid를 데이터 소스로 사용하여 한 열('part1')에 대한 필터링과 다른 열('job1')에 대한 집계(개수)로 차트를 만드는 방법에 대해 구체적으로 자세히 설명하지 않습니다."라고 명시적으로 언급합니다. 은 MxGrid에서 특정 필터링 및 집계 작업에 대한 이러한 정보 부족을 다시 한번 강조합니다.   

4.3. 집계 및 그룹화 구성 (MxGrid가 연결 가능한 소스인 경우 - 가상 시나리오)
만약 MxGrid 시트를 DataSource로 설정할 수 있다면, 차트 컴포넌트 내에서 다음을 수행할 속성을 찾아야 합니다:

값에 대한 'job1' 열 지정.
집계 함수 적용: COUNT.
카테고리/그룹화에 대한 'part1' 열 지정.
그러나 현실적으로는, 제공된 자료에서 차트 계열이 사전 구조화된 SQL Dataset의 특정 필드에 매핑되는 것을 보여줍니다. 차트 컴포넌트 자체가 MxGrid와 같은 다른 컴포넌트의 원시, 다중 행 데이터 세트에 대해 SQL 수준 집계 없이 복잡한 집계를 수행하는 것은 보여주지 않습니다.   

이러한 관찰은 i-AUD 차트 컴포넌트가 주로 차트 작성에 맞게 이미 구조화(집계/그룹화)된 SQL 데이터셋을 소비하도록 설계되었음을 강력하게 시사합니다. 별도의 차트 컴포넌트가 원시 MxGrid 시트에서 직접적이고 동적인 집계를 수행하는 것은 표준적이고 즉시 사용 가능한 기능이 아니거나 문서화가 미흡할 가능성이 높습니다. 사용자가 차트(MxGrid_데이터)를 원하고, MxGrid가 Excel 데이터를 보유하며, 차트 예제는 DataSource로 SQL_Dataset을 사용하고, SQL_Dataset은 일반적으로 사전 집계/형상화된 데이터(예: SELECT part1, COUNT(job1) FROM... GROUP BY part1)를 포함한다는 점을 고려할 때, 그리고 과 이 차트(MxGrid_데이터, 차트 내 집계) 시나리오가 다루어지지 않았음을 명시적으로 언급하는 점을 종합하면, 별도의 차트 컴포넌트가 MxGrid의 원시 데이터를 집계하도록 만드는 것은 실패하거나 명확하지 않은 해결 방법(예: 스크립팅)이 필요할 가능성이 높습니다. 차트 컴포넌트가 사전 집계된 데이터를 예상하고 MxGrid(단순 Excel 가져오기에서)가 원시 데이터를 포함하는 경우, 사용자의 목적(집계)을 위한 직접적인 연결은 끊어집니다. 이는 방법 1(Excel 디자인에서 사전 집계) 또는 방법 3(격차를 메우기 위해 스크립트 사용)을 필요로 합니다. 이는 i-AUD에서 컴포넌트가 명시적인 SQL 또는 스크립트 기반 중개 없이는 보편적인 데이터 공유/변환 기능을 갖지 않을 수 있는 잠재적인 아키텍처 분리 또는 특정 설계 선택을 가리킵니다.   

5. 방법 3: 스크립팅을 사용한 고급 데이터 조작 (스크립트 편집기 / 프로세스 봇)
방법 1이 너무 정적이거나(새로운 집계를 위해 Excel 디자인 변경 필요) 방법 2가 직접적인 집계에 적합하지 않은 경우, 스크립팅은 더 동적이지만 복잡한 솔루션을 제공합니다. 이는 프로그래밍 방식으로 MxGrid 내의 데이터에 액세스하고, 'part1' 그룹화 및 'job1' 계산을 수행한 다음, 이 처리된 데이터를 차트 컴포넌트에 제공하는 것을 포함합니다.

5.1. 사용 시기
집계 로직이 복잡하거나, 이벤트에 의해 트리거되어야 하거나, MxGrid의 원시 데이터가 자주 변경되어 Excel 요약(방법 1)을 다시 디자인하는 것이 비실용적인 경우에 사용합니다.

5.2. i-AUD Designer의 도구
스크립트 편집기: JavaScript 기반 스크립트 작성을 허용합니다. 클라이언트 스크립트(브라우저에서 실행) 또는 서버 스크립트(서버에서 실행)일 수 있습니다.   
프로세스 봇: 스크립트 실행 및 컴포넌트 상호 작용을 포함할 수 있는 프로세스 흐름을 시각적으로 디자인하는 도구입니다.   
5.3. 개념적 스크립팅 워크플로우
트리거: 스크립트 실행 시점 결정 (예: 페이지 로드 시, 버튼 클릭 시).
MxGrid 데이터 액세스:
MxGrid 컴포넌트에 대한 참조를 가져옵니다.
관련 시트(Excel 원시 데이터가 로드된 'V1' 또는 다른 시트일 가능성이 높음)에서 데이터를 읽습니다. 은 MxGrid의 ActiveSheet 및 ServerScript 속성을 언급하며, 이는 서버 측 데이터 액세스와 관련될 수 있습니다. 은 특정 API에 대한 개발자 매뉴얼이 필요함을 나타냅니다.   
이는 MxGrid 데이터의 행과 열을 반복하는 것을 포함할 수 있습니다.
스크립트에서 집계 수행:
JavaScript 로직을 사용하여 다음을 수행합니다:
각 고유 'part1' 값에 대한 개수를 저장할 객체 또는 맵을 만듭니다.
MxGrid 데이터를 반복합니다: 각 행에 대해 'part1' 값을 가져오고 해당 'job1'에 대한 개수를 증가시킵니다('job1'이 기준을 충족하는 경우).
차트용 데이터 준비:
집계된 데이터를 차트 컴포넌트가 수용할 수 있는 형식으로 변환합니다 (예: {part1: 'A', count: 10}, {part1: 'B', count: 20}과 같은 객체의 배열).
차트 컴포넌트 채우기:
차트 컴포넌트에 대한 참조를 가져옵니다.
차트 컴포넌트의 API(메서드 또는 속성)를 사용하여 데이터 소스를 설정하거나 데이터 계열을 직접 제공합니다..   
개념적 예제 (실제 API는 알 수 없음):

JavaScript

// --- 클라이언트 스크립트 또는 서버 스크립트 내 ---
// MxGrid1과 Chart1이 컴포넌트의 ID라고 가정

// 1. MxGrid1에서 데이터 가져오기 (의사 코드, API 알 수 없음)
var mxGridData = aud.getComponent('MxGrid1').getSheetData('V1'); // 가상 API 호출

// 2. 데이터 집계
var aggregatedData = {};
mxGridData.forEach(function(row) {
    var p1 = row.getColumnValue('part1_열_이름'); // 가상
    var j1 = row.getColumnValue('job1_열_이름'); // 가상
    if (j1) { // 또는 'job1'에 대한 다른 조건
        aggregatedData[p1] = (aggregatedData[p1] |
| 0) + 1;
    }
});

// 3. 차트용 형식 지정
var chartData =;
for (var part1Value in aggregatedData) {
    chartData.push({ category: part1Value, value: aggregatedData[part1Value] });
}

// 4. Chart1 채우기 (의사 코드, API 알 수 없음)
var chartComponent = aud.getComponent('Chart1');
chartComponent.setData(chartData); // 가상 API 호출
chartComponent.setXAxisField('category'); // 가상
chartComponent.setYAxisField('value');  // 가상
chartComponent.setType('bar');          // 가상
chartComponent.refresh();               // 가상
프로세스 봇은 이러한 단계를 조정하여 데이터 처리를 수행하는 스크립트 모듈을 호출한 다음 차트를 업데이트할 수 있습니다. 은 프로세스 봇이 OlapGrid 및 PieChart를 새로 고치는 것을 보여주며, 이는 컴포넌트 상호 작용 기능을 나타냅니다.   

스크립팅은 "파워 유저"를 위한 탈출구입니다. 선언적 기능이 복잡한 컴포넌트 간 데이터 흐름 및 변환에 미치지 못할 때(방법 2에서 그럴 수 있음을 시사함), i-AUD는 스크립팅 도구를 제공합니다. 방법 1은 Excel에 바인딩되어 있고 방법 2는 직접적인 집계에 적합하지 않을 가능성이 높으므로, 사용자가 원시 MxGrid 데이터에서 동적 집계를 필요로 할 때 스크립팅은 논리적인 다음 접근 방식입니다. i-AUD에는 스크립트 편집기와 프로세스 봇이 있으며, 이러한 도구는 일반적으로 표준 바인딩을 넘어서는 사용자 정의 로직 및 컴포넌트 상호 작용에 사용됩니다. 직접적인 컴포넌트 대 컴포넌트 데이터 집계의 잠재적 한계(방법 2)는 방법 1이 바람직하지 않은 경우 프로그래밍 방식 솔루션(방법 3)의 필요성을 야기합니다. 이는 i-AUD가 로우코드를 장려하지만, 고급 사용자 정의를 위해서는 코딩 기술이 필요한 개발 플랫폼이기도 함을 강화합니다. 스크립팅 API 문서의 품질과 접근성은 개발자에게 매우 중요해집니다.   

6. 단계별 실행 가이드 (방법 1: MxGrid Excel 디자인에서 사전 집계 초점)
이 섹션에서는 사용자가 i-AUD Designer에 있다고 가정하고 매우 상세하고 번호가 매겨진 지침을 제공합니다. 이는 섹션 3의 단계를 종합한 것입니다.

6.1. 사전 준비: 작업 저장
MxGrid 디자인을 수정하기 전에 i-AUD Designer 화면/보고서가 저장되었는지 확인하십시오.   

6.2. MxGrid를 디자인 모드(i-MATRIX Designer)에서 열기
i-AUD Designer 캔버스에서 MxGrid 컴포넌트를 찾습니다. MxGrid 컴포넌트를 마우스 오른쪽 버튼으로 클릭합니다. 컨텍스트 메뉴에서 "디자인"을 선택합니다. 그러면 i-MATRIX Designer가 실행됩니다.

6.3. 데이터 식별 및 요약 영역 준비
i-MATRIX Designer 내에서 원본 'part1' 및 'job1' 데이터가 포함된 시트를 결정합니다 (예: Excel이 단순했다면 기본적으로 'V1'이거나 데이터 소스에 의해 채워졌다면 'D1'과 같은 다른 시트일 수 있음). 이 예에서는 원본 데이터 열 'part1'과 'job1'에 액세스할 수 있거나 'DataSheet'라는 시트에 배치한다고 가정합니다.

표시될 'V1' 시트로 이동하거나 새 시트를 만들고 'V1'이 이를 참조할 수 있도록 합니다. 'V1'에 요약 테이블 영역을 지정합니다. 예를 들어 셀 A1에서 시작합니다.

V1!A1에 헤더 입력: "Part1"
V1!B1에 헤더 입력: "Job1_Count"
6.4. 고유 'part1' 값 채우기
V1!A2부터 아래로 고유한 'part1' 값을 나열합니다.

수동 입력: 수가 적고 정적인 경우 직접 입력합니다.
수식 (원본 데이터가 'DataSheet'!C:C에 있는 경우): i-MATRIX가 UNIQUE를 지원하는 경우 UNIQUE(DataSheet!C:C)를 시도할 수 있습니다. 그렇지 않으면 고유 값을 복사-붙여넣기하거나 원본 Excel에서 먼저 요약을 준비하는 경우 다른 Excel 방법을 사용해야 할 수 있습니다. 이 가이드에서는 V1!A2부터 아래로 나열된 고유 'part1' 값이 있다고 가정합니다.
6.5. COUNTIFS를 사용하여 'job1' 개수 계산
V1!B2 (A2의 첫 번째 고유 'part1' 값 옆)에 COUNTIFS 수식을 입력합니다.
가정:

원본 'part1' 데이터는 'DataSheet'의 C열에 있습니다 (예: DataSheet!C:C).
원본 'job1' 데이터는 'DataSheet'의 D열에 있습니다 (예: DataSheet!D:D).
계산할 현재 'part1' 카테고리는 V1!A2에 있습니다. V1!B2의 수식은 다음과 같습니다: =COUNTIFS(DataSheet!C:C, V1!A2, DataSheet!D:D, "<>")
DataSheet!C:C, V1!A2: 'DataSheet'의 C열이 V1!A2의 'part1' 값과 일치하는 행을 계산합니다.
DataSheet!D:D, "<>": 그리고 'DataSheet'의 D열('job1' 열)이 비어 있지 않은 경우. 'job1'에 계산할 특정 값이 있는 경우 "<>"를 조정합니다. 이 수식을 B열 아래로 모든 고유 'part1' 값에 대해 드래그합니다.
6.6. 차트 데이터에 대한 이름 정의
i-MATRIX Designer에서 "수식" 탭으로 이동합니다. "이름 정의" 또는 "이름 관리자"를 클릭한 다음 "새로 만들기"를 클릭합니다.

카테고리 (Part1):
이름: ChartCategories (또는 유사하게, 공백 없이, 특수 문자 피하기)
범위: 통합 문서
참조 대상 (수식 입력): =OFFSET(V1!$A$2,0,0,COUNTA(V1!$A$2:$A$50),1)
V1!$A$2: 'part1' 카테고리를 포함하는 첫 번째 셀 (헤더 아래).
$A$50: 예상되는 최대 'part1' 카테고리보다 큰 행 번호로 조정합니다.
확인을 클릭합니다.
값 (Job1 개수):
이름: ChartValues
범위: 통합 문서
참조 대상 (수식 입력): =OFFSET(V1!$B$2,0,0,COUNTA(V1!$A$2:$A$50),1)
V1!$B$2: 'job1' 개수를 포함하는 첫 번째 셀.
COUNTA(V1!$A$2:$A$50): 카테고리 열 개수를 사용하여 높이를 결정하며, 모든 카테고리에 개수가 존재한다고 가정합니다.
확인을 클릭합니다.
6.7. 차트 삽입 및 구성
여전히 i-MATRIX Designer에서 "삽입" 탭으로 이동합니다. "차트" 그룹에서 차트 유형을 선택합니다 (예: 세로 막대형). 차트를 배치할 'V1' 시트를 클릭합니다.

빈 차트 영역이 나타납니다. 마우스 오른쪽 버튼으로 클릭하고 "데이터 선택"을 선택합니다. "데이터 원본 선택" 대화 상자에서:

범례 항목 (계열):
"추가"를 클릭합니다.
계열 이름: "Job1 Counts"를 입력하거나 셀을 참조할 수 있습니다.
계열 값: 기본 내용(예: ={1})을 삭제하고 다음을 입력합니다: =V1!ChartValues (이름 정의된 범위를 사용합니다. 시트 이름 V1!에 유의).
확인을 클릭합니다.
가로 (항목) 축 레이블:
"편집"을 클릭합니다.
축 레이블 범위: 다음을 입력합니다: =V1!ChartCategories
확인을 클릭합니다. "데이터 원본 선택" 대화 상자를 닫으려면 확인을 다시 클릭합니다.
6.8. 마무리 및 저장
i-MATRIX 내 Excel의 차트 도구를 사용하여 필요에 따라 차트 서식(제목, 색상 등)을 지정합니다. i-MATRIX Designer 도구 모음에서 "저장" 아이콘을 클릭합니다. i-MATRIX Designer 창을 닫습니다.

6.9. i-AUD Designer에서 실행
주 i-AUD Designer 창으로 돌아가서 도구 모음의 "실행" 버튼(종종 재생 아이콘)을 클릭합니다. 보고서에 MxGrid가 표시되고 그 안에 'part1'별 'job1' 개수를 보여주는 차트가 표시되어야 합니다.

이 상세한 단계별 안내는 방법 1이 강력하지만 이름 정의된 범위 및 차트 데이터 소싱과 같은 Excel의 특정 기능에 깊이 뿌리내리고 있음을 강조합니다. 사용자는 구체적인 단계별 가이드가 필요하며,  및 는 개념적 프레임워크(Excel 디자인, 이름 정의된 범위, 차트 연결)를 제공합니다. 이를 Excel과 유사한 인터페이스(i-MATRIX) 내의 UI 작업(메뉴 클릭, 대화 상자 입력)으로 변환하는 것이 필요합니다. OFFSET 및 COUNTA의 사용은 간단하지 않으며 신중한 설명이 필요합니다. 시트에 데이터를 정의한 다음 이름 정의된 범위를 통해 차트에 연결하는 것은 핵심적인 Excel 차트 작성 패턴입니다. 이 방법의 성공은 사용자의 중급에서 고급 Excel 기능에 대한 숙련도에 크게 좌우됩니다. 또한 i-MATRIX Designer가 이러한 Excel 기능을 충실히 복제해야 함을 강조합니다. i-MATRIX와 표준 Excel 간의 불일치는 실패 지점이 될 수 있습니다.   

7. 문제 해결 및 고려 사항
7.1. 차트에 데이터가 표시되지 않음
이름 정의된 범위 확인: 'V1'의 데이터 셀을 올바르게 참조하고 OFFSET/COUNTA 로직이 올바른지 확인합니다. i-MATRIX의 이름 관리자를 사용하여 선택된 범위를 확인합니다.
차트 데이터 원본 연결 확인: "데이터 선택"에서 계열 값과 축 레이블이 올바른 이름 정의된 범위를 가리키는지 확인합니다 (예: =V1!ChartValues).
요약 테이블 비어 있음: 요약 테이블의 COUNTIFS 수식(또는 다른 집계 방법)이 결과를 생성하는지 확인합니다. COUNTIFS의 원본 데이터가 부정확하거나 비어 있으면 차트도 비어 있게 됩니다.
에서는 (초기 MxGrid 데이터를 공급하는) 쿼리 조건이 충족되지 않으면 "데이터가 보이지 않아요"라고 언급하며, 이는 차트에 대한 데이터가 없음을 의미합니다.   
7.2. 잘못된 집계
COUNTIFS 로직 확인: COUNTIFS 수식의 기준을 다시 확인하여 각 'part1'에 대해 'job1'을 정확하게 계산하는지 확인합니다.
7.3. 차트가 동적으로 업데이트되지 않음
OFFSET/COUNTA 수식은 이를 위해 설계되었습니다. 업데이트되지 않으면 이러한 수식에 오류가 있는지 다시 확인합니다. Excel의 계산 모드(i-MATRIX에 이러한 설정이 있는 경우)가 자동으로 설정되어 있는지 확인합니다.
7.4. 대용량 데이터 세트의 성능
Excel 모델 내에서 매우 큰 원본 데이터 세트(만약 'DataSheet'가 거대한 경우)에 대한 광범위한 COUNTIFS는 느릴 수 있습니다. 성능이 문제인 경우, 데이터가 MxGrid에 도달하기 전에 SQL을 사용하여 데이터를 사전 집계하는 것(즉, MxGrid를 채우는 SQL Dataset에 이미 요약된 개수가 포함됨)이 더 효율적입니다. 그러면 차트는 이 사전 집계된 데이터를 표시하기만 하면 됩니다.

7.5. 시트 이름 및 참조
수식 및 이름 정의된 범위에서 항상 시트 이름을 정확하게 사용하십시오 (예: V1!A2 대 Sheet1!A2).

7.6. i-MATRIX 대 표준 Excel
i-MATRIX는 Excel과 유사하지만 수식 지원이나 동작에 미묘한 차이가 있을 수 있습니다. 복잡한 Excel 기능이 예상대로 작동하지 않으면 단순화하거나 핵심 기능으로 테스트하십시오.

이러한 환경에서의 문제 해결은 i-AUD 컴포넌트 구성, i-MATRIX (Excel) 수식 로직, 데이터 무결성 등 여러 수준에서 디버깅이 필요합니다. 사용자가 방법 1을 따르다가 문제에 직면할 수 있으며, 잠재적인 실패 지점에는 요약으로 데이터가 흐르지 않거나, 요약 수식이 잘못되었거나, 이름 정의된 범위가 잘못 정의되었거나, 차트가 이름 정의된 범위에 제대로 연결되지 않은 경우가 포함됩니다. 이러한 각 사항에는 진단 점검이 필요합니다. 추상화 또는 에뮬레이션 계층(i-MATRIX가 Excel을 에뮬레이트)이 많을수록 잠재적인 마찰 지점이나 예기치 않은 동작이 더 많아집니다.

8. 결론 및 추가 단계
8.1. 권장 해결책 요약
제공된 연구 자료에 따르면, 방법 1(MxGrid의 Excel 디자인 내에서 요약 테이블과 이름 정의된 범위를 사용하여 집계 데이터 준비)이 MxGrid 컨텍스트 내에서 Excel 데이터를 기반으로 차트를 생성하는 가장 명확하게 문서화되고 의도된 접근 방식임을 다시 한번 강조합니다.   

8.2. 다른 방법의 한계
별도의 i-AUD 차트 컴포넌트를 사용하여 원시 MxGrid 데이터를 직접 집계하는 방법(방법 2)은 이 특정 집계 작업에 대해 지원되지 않거나 문서화되지 않은 것으로 보이며, 스크립팅(방법 3)은 i-AUD의 스크립팅 API에 대한 지식이 필요한 고급 대안입니다.   

8.3. 성공의 열쇠
MxGrid의 Excel 중심적 특성을 이해하고 Excel 수식과 이름 정의된 범위를 올바르게 구현하는 것이 중요합니다.

8.4. 추가 자료 (필수)
공식 " i-AUD Designer 개발자 매뉴얼.pdf"를 반드시 참조할 것을 강력히 권고합니다. 이 매뉴얼은 다음 사항에 필수적입니다:   

차트 컴포넌트 데이터 소스 기능에 대한 최종 정보.
스크립팅 API (객체 모델, MxGrid 데이터 액세스 방법, 차트 컴포넌트 채우기 방법).
프로세스 봇 모듈 구성 및 스크립팅에 대한 세부 정보.
문서화되지 않은 기능 또는 대체 접근 방식.
제공된 정보는 좋은 출발점이지만 i-AUD Designer 내의 모든 가능한 시나리오나 고급 사용 사례를 포괄하지는 못합니다. 공식 개발자 매뉴얼이 궁극적인 정보 출처입니다. 사용자의 질의는 간단해 보이지만, 더 깊이 있는 문서가 필요할 수 있는 영역을 다루고 있습니다.

8.5. 최종 당부
이 작업의 특수성을 인지하고 제시된 단계를 체계적으로 적용하는 것이 중요합니다.


보고서에서 사용된 소스

audp.bimatrix.co.kr
기본 화면 구현 - AUD플랫폼 아카데미
새 창에서 열기

audp.bimatrix.co.kr
컨플루언스 모바일 - AUD플랫폼 아카데미
새 창에서 열기

audp.bimatrix.co.kr
GeoMap 컴포넌트 (지도, 맵) 사용 가이드 - 컨플루언스 모바일 - AUD ...
새 창에서 열기

bimatrix.com
AI-Powered Business System Development - BI MATRIX
새 창에서 열기

audp.bimatrix.co.kr
MX-Grid 가변 차트 제작 - 컨플루언스 모바일 - AUD플랫폼 아카데미
새 창에서 열기

audp.bimatrix.co.kr
이중축 차트 - 컨플루언스 모바일 - AUD플랫폼 아카데미
새 창에서 열기

bimatrix.com
AUD Platform - BI MATRIX
새 창에서 열기

audp.bimatrix.co.kr
2. MX-Grid 컨트롤 생성 - 컨플루언스 모바일 - AUD플랫폼 아카데미
새 창에서 열기

audp.bimatrix.co.kr
AUD플랫폼 매뉴얼 - 컨플루언스 모바일 - AUD플랫폼 아카데미
새 창에서 열기

읽었지만 보고서에서 사용되지 않은 소스
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
새 창에서 열기
