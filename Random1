겠습니다. 클래스와 변수명을 ManualPLCWrite와 PLCManualCMDRow로 변경해서 다시 작성해드리겠습니다.

수정된 코드
Model: PLC 서비스 클래스 이름 변경

csharp
코드 복사
public class ManualPLCWrite
{
    public async Task<string> SendCommandAsync(string functionName, string command)
    {
        // PLC에 명령을 전송하고 응답을 대기하는 함수
        return await _comPortPLC.SendCommandAndWaitForResponseAsync($"{functionName} {command}");
    }
}
PLCManualCMDRow: PLCManualCMDRow 클래스에서 ManualPLCWrite를 사용하도록 변경

csharp
코드 복사
public class PLCManualCMDRow : INotifyPropertyChanged
{
    private readonly ManualPLCWrite _manualPLCWrite;
    private string _functionName;
    private string _command;
    private string _result;

    public string FunctionName
    {
        get => _functionName;
        set { _functionName = value; OnPropertyChanged(nameof(FunctionName)); }
    }

    public string Command
    {
        get => _command;
        set { _command = value; OnPropertyChanged(nameof(Command)); }
    }

    public string Result
    {
        get => _result;
        set { _result = value; OnPropertyChanged(nameof(Result)); }
    }

    public ICommand SendCommandCommand { get; }

    public PLCManualCMDRow(ManualPLCWrite manualPLCWrite, string functionName, string command)
    {
        _manualPLCWrite = manualPLCWrite;
        _functionName = functionName;
        _command = command;
        SendCommandCommand = new RelayCommand(async () => await SendCommand());
    }

    private async Task SendCommand()
    {
        Result = await _manualPLCWrite.SendCommandAsync(FunctionName, Command);
    }

    public event PropertyChangedEventHandler PropertyChanged;
    protected void OnPropertyChanged(string propertyName) =>
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
}
MainViewModel: PLCManualCMDRow와 ManualPLCWrite를 사용하도록 수정

csharp
코드 복사
public class MainViewModel
{
    public ObservableCollection<PLCManualCMDRow> Rows { get; }

    public MainViewModel()
    {
        var manualPLCWrite = new ManualPLCWrite();
        Rows = new ObservableCollection<PLCManualCMDRow>
        {
            new PLCManualCMDRow(manualPLCWrite, "Function1", "Command1"),
            new PLCManualCMDRow(manualPLCWrite, "Function2", "Command2")
            // 추가 행 설정
        };
    }
}
View (XAML): DataGrid는 변경 없음 (기존 코드와 동일)

xml
코드 복사
<DataGrid ItemsSource="{Binding Rows}">
    <DataGrid.Columns>
        <DataGridTextColumn Header="Function Name" Binding="{Binding FunctionName}" />
        <DataGridTextColumn Header="Command" Binding="{Binding Command}" />
        <DataGridTextColumn Header="Result" Binding="{Binding Result}" />
        <DataGridTemplateColumn Header="Send">
            <DataGridTemplateColumn.CellTemplate>
                <DataTemplate>
                    <Button Content="보내기" Command="{Binding SendCommandCommand}" />
                </DataTemplate>
            </DataGridTemplateColumn.CellTemplate>
        </DataGridTemplateColumn>
    </DataGrid.Columns>
</DataGrid>
이제 클래스명이 ManualPLCWrite와 PLCManualCMDRow로 각각 수정되었습니다. PLCManualCMDRow에서 ManualPLCWrite의 SendCommandAsync 메서드를 사용하여 명령어와 함수명을 전달하고, 결과를 Result 컬럼에 업데이트하도록 