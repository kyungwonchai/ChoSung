아래는 MSSQL에서 그룹 이름과 라인 이름 두 개의 컬럼만 가져오는 경우를 반영한 수정된 코드입니다. 데이터 모델과 SQL 쿼리, TreeListControl의 설정을 간소화하여 그룹과 라인을 구현했습니다.

SQL 데이터 예제
테이블 구조 및 데이터:

sql
코드 복사
CREATE TABLE LineTable (
    GroupName NVARCHAR(100),  -- 그룹 이름
    LineName NVARCHAR(100)    -- 라인 이름
);

INSERT INTO LineTable (GroupName, LineName)
VALUES 
    ('Group A', 'Line 1.1'),
    ('Group A', 'Line 1.2'),
    ('Group B', 'Line 2.1'),
    ('Group B', 'Line 2.2');
XAML 코드
xml
코드 복사
<Window x:Class="TreeListExample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        Title="Group and Line Viewer" Height="600" Width="800">
    <Grid>
        <dxg:TreeListControl x:Name="treeListControl"
                             AutoExpandAllNodes="True"
                             AutoGenerateColumns="None"
                             ItemsSource="{Binding GroupedLineData}">
            <dxg:TreeListControl.Columns>
                <!-- 체크박스 컬럼 -->
                <dxg:TreeListColumn FieldName="IsChecked" Header="선택">
                    <dxg:TreeListColumn.EditSettings>
                        <dxg:CheckEditSettings />
                    </dxg:TreeListColumn.EditSettings>
                </dxg:TreeListColumn>

                <!-- 그룹 및 라인 이름 -->
                <dxg:TreeListColumn FieldName="Name" Header="구역/라인 이름" />
            </dxg:TreeListControl.Columns>
        </dxg:TreeListControl>
    </Grid>
</Window>
C# 코드
csharp
코드 복사
using DevExpress.Xpf.Grid;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.Linq;
using System.Windows;

namespace TreeListExample
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<GroupedLineItem> GroupedLineData { get; set; }

        public MainWindow()
        {
            InitializeComponent();
            DataContext = this;

            // MSSQL에서 데이터 로드
            LoadGroupedLineData();

            // 이벤트 핸들러 등록
            treeListControl.CellValueChanged += TreeListControl_CellValueChanged;
        }

        private void LoadGroupedLineData()
        {
            var tempLineData = new ObservableCollection<LineItem>();
            string connectionString = "YourConnectionStringHere";
            string query = @"
                SELECT GroupName, LineName
                FROM LineTable
                ORDER BY GroupName, LineName";

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                using (SqlCommand command = new SqlCommand(query, connection))
                using (SqlDataReader reader = command.ExecuteReader())
                {
                    while (reader.Read())
                    {
                        tempLineData.Add(new LineItem
                        {
                            GroupName = reader.GetString(0),
                            LineName = reader.GetString(1),
                            IsChecked = false
                        });
                    }
                }
            }

            // 그룹화하여 계층 데이터 구성
            GroupedLineData = new ObservableCollection<GroupedLineItem>(
                tempLineData.GroupBy(line => line.GroupName)
                            .Select(group => new GroupedLineItem
                            {
                                Name = group.Key,
                                IsChecked = false,
                                Lines = new ObservableCollection<LineItem>(group.ToList())
                            }));
            treeListControl.ItemsSource = GroupedLineData;
        }

        private void TreeListControl_CellValueChanged(object sender, CellValueChangedEventArgs e)
        {
            if (e.Column.FieldName == "IsChecked")
            {
                var changedItem = e.Row as GroupedLineItem ?? e.Row as LineItem;
                if (changedItem != null)
                {
                    if (changedItem is GroupedLineItem group)
                    {
                        // 그룹 체크 변경 시 자식 항목 모두 변경
                        foreach (var line in group.Lines)
                        {
                            line.IsChecked = group.IsChecked;
                        }
                    }
                    else if (changedItem is LineItem line)
                    {
                        // 라인 체크 변경 시 부모 그룹 체크 상태 업데이트
                        var parentGroup = GroupedLineData.FirstOrDefault(g => g.Name == line.GroupName);
                        if (parentGroup != null)
                        {
                            parentGroup.IsChecked = parentGroup.Lines.All(l => l.IsChecked);
                        }
                    }
                }
            }
        }
    }

    // 그룹 데이터 클래스
    public class GroupedLineItem
    {
        public string Name { get; set; } // 그룹 이름
        public bool IsChecked { get; set; }
        public ObservableCollection<LineItem> Lines { get; set; }
    }

    // 라인 데이터 클래스
    public class LineItem
    {
        public string GroupName { get; set; } // 그룹 이름
        public string LineName { get; set; }  // 라인 이름
        public string Name => LineName;      // 트리 노드에 표시될 이름
        public bool IsChecked { get; set; }
    }
}
코드 설명
SQL 데이터 로드:

LoadGroupedLineData 메서드에서 MSSQL에서 데이터를 가져옵니다.
GroupName과 LineName 두 개의 컬럼만 쿼리로 가져옵니다.
트리 구조 데이터 생성:

GroupedLineData는 그룹별로 라인을 계층적으로 표시하는 데 사용됩니다.
각 GroupName에 해당하는 라인을 Lines 컬렉션으로 묶습니다.
체크박스 동기화:

그룹 체크박스를 변경하면 모든 라인의 체크 상태가 동기화됩니다.
라인 체크박스를 변경하면 그룹 체크 상태가 동기화됩니다.
XAML 설정:

TreeListControl에서 두 개의 컬럼을 설정: IsChecked와 Name.
AutoExpandAllNodes="True"로 기본적으로 모든 노드를 확장합니다.
실행 결과
그룹과 라인 트리 구조:
Group A 및 Group B 아래에 각각의 라인이 표시됩니다.
체크박스 동기화:
그룹 체크박스를 선택하면 해당 그룹의 모든 라인이 선택됩니다.