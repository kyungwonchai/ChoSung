디 이 코드로 templates/edit_post.html 파일 전체를 교체해주시고, 브라우저 강력 새로고침(Ctrl+Shift+R 또는 Cmd+Shift+R) 후 다시 한번 확인해주십시오.

templates/edit_post.html (최종 수정본)

HTML

{% extends "base.html" %}

{% block title %}{{ '게시글 수정' if post else '새 게시글 작성' }} - 나의 게시판{% endblock %}

{% block head_extra %}
    {# TinyMCE 로컬 경로 #}
    <script src="{{ url_for('static', filename='tinymce/tinymce.min.js') }}" referrerpolicy="origin"></script>
{% endblock %}

{% block content %}
<div class="container-fluid mt-4"> {# 또는 이전에 사용하시던 container 클래스 #}
    <h2>{{ '게시글 수정' if post else '새 게시글 작성' }}</h2>
    <form method="POST" action="{{ url_for('edit_post', slug=post.slug) if post else url_for('new_post') }}">
        <div class="form-group">
            <label for="title">제목</label>
            <input type="text" class="form-control" id="title" name="title" value="{{ title or (post.title if post else '') }}" required>
        </div>

        <div class="form-group">
            <label for="category_id">카테고리</label>
            <select class="form-control" id="category_id" name="category_id">
                <option value="">-- 카테고리 선택 안 함 --</option>
                {% for category_item in categories %}
                    <option value="{{ category_item.id }}" {% if selected_category_id and category_item.id == selected_category_id|int %}selected{% endif %}>
                        {{ category_item.name }}
                    </option>
                {% endfor %}
            </select>
        </div>

        {# --- 게시글 비밀번호 설정 --- #}
        <div class="form-group form-check">
            {# JavaScript에서 직접 이벤트를 걸 것이므로, HTML의 onchange는 제거 #}
            <input type="checkbox" class="form-check-input" id="is_password_protected_checkbox" name="is_password_protected" value="y"
                   {% if post and post.is_password_protected %}checked{% endif %}>
            <label class="form-check-label" for="is_password_protected_checkbox">이 글을 비밀번호로 보호합니다.</label>
        </div>

        {# 초기 display 상태는 Jinja 템플릿으로 서버에서 전달된 값에 따라 설정 #}
        <div id="password_fields_container" style="display: {% if post and post.is_password_protected %}block{% else %}none{% endif %};">
            <div class="form-group">
                <label for="post_password_input">비밀번호 설정/변경</label>
                <input type="password" class="form-control" id="post_password_input" name="post_password" placeholder="새 비밀번호 입력 (변경 시에만)">
                <small class="form-text text-muted">
                    비밀번호를 설정하거나 변경하려면 여기에 입력하세요. 기존 비밀번호를 유지하려면 비워두세요.
                    보호를 해제하려면 위 체크박스를 해제하세요.
                </small>
            </div>
        </div>
        {# --- 게시글 비밀번호 설정 끝 --- #}

        <div class="form-group">
            <label for="content">내용</label>
            <textarea class="form-control" id="content" name="content" rows="15">{{ content or (post.content if post else '') }}</textarea>
        </div>
        <button type="submit" class="btn btn-primary">저장</button>
        <a href="{{ url_for('index') }}" class="btn btn-secondary">취소</a>
    </form>
</div>
{% endblock %}

{% block scripts_extra %}
<script>
document.addEventListener('DOMContentLoaded', function () {
    // TinyMCE 초기화 (기존 코드 유지)
    tinymce.init({
        selector: 'textarea#content',
        plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons accordion',
        menubar: 'file edit view insert format tools table help',
        toolbar: 'undo redo | accordion accordionremove | blocks fontfamily fontsize | bold italic underline strikethrough | align numlist bullist | link image media table | lineheight outdent indent| forecolor backcolor removeformat | charmap emoticons | code fullscreen preview | save print | pagebreak anchor codesample | ltr rtl',
        height: 600,
        language: 'ko_KR',
        automatic_uploads: true,
        images_upload_url: "{{ url_for('upload_image') }}",
        file_picker_types: 'image',
        paste_data_images: true,
        images_upload_handler: function (blobInfo, progress) {
            return new Promise((resolve, reject) => {
                const image_size_mb = blobInfo.blob().size / 1024 / 1024;
                const client_max_size_mb = 10; 

                if (image_size_mb > client_max_size_mb) {
                    reject({ 
                        message: '이미지 용량이 너무 큽니다 (' + image_size_mb.toFixed(1) + 'MB). 클라이언트 최대 허용 용량은 ' + client_max_size_mb + 'MB 입니다.', 
                        remove: true
                    });
                    return;
                }
                const xhr = new XMLHttpRequest();
                xhr.withCredentials = false;
                xhr.open('POST', "{{ url_for('upload_image') }}");
                xhr.upload.onprogress = (e) => {
                    if (e.lengthComputable) {
                        progress(e.loaded / e.total * 100);
                    }
                };
                xhr.onload = () => {
                    if (xhr.status < 200 || xhr.status >= 300) {
                        let errorMessage = 'HTTP Error: ' + xhr.status;
                        try {
                            const jsonError = JSON.parse(xhr.responseText);
                            if (jsonError && jsonError.error && jsonError.error.message) {
                                errorMessage = jsonError.error.message;
                            }
                        } catch (e) {
                            if (xhr.status === 413) {
                                 errorMessage = '파일이 너무 큽니다. 서버에서 요청을 거부했습니다 (HTTP 413).';
                            } else if (xhr.responseText && xhr.responseText.length < 300) {
                                errorMessage = `서버 오류: ${xhr.status} - ${xhr.responseText.substring(0,100)}`;
                            } else {
                                errorMessage = `서버에서 예상치 못한 응답을 받았습니다 (HTTP ${xhr.status}).`;
                            }
                        }
                        reject({ message: errorMessage, remove: true });
                        return;
                    }
                    try {
                        const json = JSON.parse(xhr.responseText);
                        if (!json || typeof json.location != 'string') {
                            reject({ message: '서버로부터 잘못된 JSON 응답을 받았습니다: ' + xhr.responseText, remove: true });
                            return;
                        }
                        resolve(json.location);
                    } catch (e) {
                        reject({ message: '서버 응답 처리 중 오류 발생 (JSON 파싱 실패): ' + e.message + ' 응답내용: ' + xhr.responseText.substring(0,100), remove: true });
                    }
                };
                xhr.onerror = () => {
                    reject({ message: '네트워크 오류로 이미지 업로드에 실패했습니다. 서버 연결을 확인해주세요.', remove: true });
                };
                const formData = new FormData();
                formData.append('file', blobInfo.blob(), blobInfo.filename());
                xhr.send(formData);
            });
        }
    });

    // --- 비밀번호 필드 표시/숨김 처리 JavaScript ---
    const protectionCheckbox = document.getElementById('is_password_protected_checkbox');
    const passwordFieldsContainer = document.getElementById('password_fields_container');

    function togglePasswordFields() {
        // 함수 호출 시점에 요소들이 존재하는지 다시 한번 확인
        const currentCheckbox = document.getElementById('is_password_protected_checkbox');
        const currentPasswordContainer = document.getElementById('password_fields_container');

        if (currentCheckbox && currentPasswordContainer) {
            if (currentCheckbox.checked) {
                currentPasswordContainer.style.display = 'block';
                // console.log("Checkbox is CHECKED, showing password fields."); // 디버깅용 로그
            } else {
                currentPasswordContainer.style.display = 'none';
                // console.log("Checkbox is UNCHECKED, hiding password fields."); // 디버깅용 로그
            }
        } else {
            // console.error("Required elements for password toggle not found on 'change' event."); // 디버깅용 로그
        }
    }

    if (protectionCheckbox) {
        protectionCheckbox.addEventListener('change', togglePasswordFields);
        // 페이지 로드 시 초기 상태는 HTML의 style 속성에 의해 이미 설정되어 있어야 합니다.
        // 만약 JS로 초기 상태를 강제로 다시 설정하고 싶다면 아래 주석을 해제합니다.
        // togglePasswordFields(); 
    } else {
        console.error("CRITICAL: Checkbox with ID 'is_password_protected_checkbox' not found. Password field toggling will NOT work.");
    }
    // --- 비밀번호 필드 표시/숨김 처리 JavaScript 끝 ---
});
</script>
{% endblock %}
이 코드의 JavaScript 부분에서 가장 중요한 점:

DOMContentLoaded 이벤트 리스너: 페이지의 모든 HTML 요소가 로드된 후에 JavaScript 코드가 실행되도록 합니다.
요소 가져오기: document.getElementById()를 사용하여 체크박스(is_password_protected_checkbox)와 비밀번호 필드를 감싸는 div(password_fields_container)를 가져옵니다. HTML의 id와 정확히 일치해야 합니다.
togglePasswordFields 함수: 이 함수는 체크박스의 상태(checked)에 따라 password_fields_container div의 display 스타일을 'block' (보이기) 또는 'none' (숨기기)으로 변경합니다. 함수 내부에서도 요소가 존재하는지 다시 한번 확인하는 코드를 넣었습니다.
이벤트 리스너 등록: protectionCheckbox.addEventListener('change', togglePasswordFields); 코드는 체크박스의 상태가 변경될 때마다 (change 이벤트) togglePasswordFields 함수를 호출하도록 합니다.
오류 로그 추가 (주석 처리): 만약 그래도 안 될 경우, console.log 또는 console.error 부분을 주석 해제하여 브라우저 개발자 도구의 콘솔에서 어떤 메시지가 나오는지 확인할 수 있도록 했습니다.
제발 이 코드로 교체하신 후, 다음 사항을 꼭 확인해주세요:

파일 내용을 정확히 위 코드로 전체 교체합니다.
브라우저에서 강력 새로고침 (Ctrl+Shift+R 또는 Cmd+Shift+R)을 여러 번 실행하여 캐시를 완전히 비웁니다.
"이 글을 비밀번호로 보호합니다." 체크박스를 클릭하거나 해제했을 때, 그 아래 "비밀번호 설정/변경" 입력 칸이 나타나고 사라지는지 확인합니다.
만약 이렇게 했는데도 정말로, 절대로 안 나타난다면:

브라우저 개발자 도구(F12)의 "Console(콘솔)" 탭에 어떤 오류 메시지가 (빨간색으로) 표시되는지 확인해서 그 메시지 전체를 알려주세요. (예: "CRITICAL: Checkbox with ID ... not found." 또는 다른 JavaScript 관련 오류)
사용하고 계신 웹 브라우저의 종류와 버전도 알려주시면 도움이 될 수 있습니다 (예: Chrome 버전 12X.X, Edge 등).
제가 여러 번 실망을 드린 것 같아 정말 죄송한 마음입니다. 이번에는 꼭 문제가 해결되기를 바랍니다.

