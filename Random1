송합니다. 데이터베이스의 시간을 기준으로 판단하도록 수정하겠습니다. MySQL의 NOW() 함수를 사용하여 서버의 현재 시간을 기준으로 10분 이내의 기록을 확인하도록 하겠습니다.

수정된 checkModelInMySQL 함수
kotlin
코드 복사
import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.SQLException

private var isExecuting = false

private suspend fun checkModelInMySQL(qrCode: String): String? {
    return withContext(Dispatchers.IO) {
        if (isExecuting) {
            Log.d("MySQLConnection", "Already executing, skipping this call.")
            return@withContext null
        }

        isExecuting = true
        var connection: Connection? = null
        var preparedStatement: PreparedStatement? = null
        var resultSet: ResultSet? = null
        var result: String? = null

        try {
            // MySQL JDBC 드라이버 로드
            Class.forName("com.mysql.cj.jdbc.Driver")

            // MySQL 서버에 연결
            val url = "jdbc:mysql://10.244.122.122:3306/your_database_name?useSSL=false&serverTimezone=UTC"
            connection = DriverManager.getConnection(url, "abc", "1233445")

            // 첫 번째 쿼리: smd.management_mobile_mainseet에서 modelnumber 정보 및 관련 데이터 조회
            val query1 = """
                SELECT depart, part, floor, district, at, model, modelnumber 
                FROM smd.management_mobile_mainseet 
                WHERE modelnumber = ?
            """.trimIndent()
            preparedStatement = connection.prepareStatement(query1)
            preparedStatement.setString(1, qrCode)
            resultSet = preparedStatement.executeQuery()

            if (resultSet.next()) {
                val depart = resultSet.getString("depart")
                val part = resultSet.getString("part")
                val floor = resultSet.getString("floor")
                val district = resultSet.getString("district")
                val at = resultSet.getString("at")
                val model = resultSet.getString("model")
                val modelnumber = resultSet.getString("modelnumber")
                result = "Depart: $depart, Part: $part, Floor: $floor, District: $district, At: $at, Model: $model, ModelNumber: $modelnumber"

                // 두 번째 쿼리: 최근 10분 이내에 해당 modelnumber로 체크된 기록이 있는지 확인 (DB 시간 기준)
                val query2 = """
                    SELECT COUNT(*) as count FROM smd.management_mobile_checksheet 
                    WHERE modelnumber = ? AND check_time > (NOW() - INTERVAL 10 MINUTE)
                """.trimIndent()
                preparedStatement = connection.prepareStatement(query2)
                preparedStatement.setString(1, modelnumber)

                val countResultSet = preparedStatement.executeQuery()

                var shouldInsert = true

                if (countResultSet.next()) {
                    val count = countResultSet.getInt("count")
                    if (count > 0) {
                        shouldInsert = false
                    }
                }

                // 10분 이내에 기록이 없다면 새로운 레코드를 삽입
                if (shouldInsert) {
                    val insertQuery = """
                        INSERT INTO smd.management_mobile_checksheet 
                        (depart, part, floor, district, at, model, modelnumber, type, checkidnum, checkname, check_time) 
                        VALUES (?, ?, ?, ?, ?, ?, ?, '00000000', 'mobile', '00000000', NOW())
                    """.trimIndent()

                    preparedStatement = connection.prepareStatement(insertQuery)
                    preparedStatement.setString(1, depart)
                    preparedStatement.setString(2, part)
                    preparedStatement.setString(3, floor)
                    preparedStatement.setString(4, district)
                    preparedStatement.setString(5, at)
                    preparedStatement.setString(6, model)
                    preparedStatement.setString(7, modelnumber)
                    preparedStatement.executeUpdate()

                    result += " - New record inserted"
                } else {
                    result += " - No insertion, recent check_time is within 10 minutes"
                }
            }

        } catch (e: SQLException) {
            e.printStackTrace()
            result = "SQL error: ${e.message}"
        } catch (e: ClassNotFoundException) {
            e.printStackTrace()
            result = "JDBC Driver not found: ${e.message}"
        } catch (e: Exception) {
            e.printStackTrace()
            result = "Unexpected error: ${e.message}"
        } finally {
            try {
                resultSet?.close()
                preparedStatement?.close()
                connection?.close()
            } catch (e: SQLException) {
                e.printStackTrace()
            }
            isExecuting = false // 작업 완료 후 플래그를 다시 false로 설정
        }

        return@withContext result
    }
}
주요 변경 사항:
DB 시간 기준 비교:

check_time > (NOW() - INTERVAL 10 MINUTE) 조건을 사용하여 MySQL 서버의 현재 시간(NOW)을 기준으로 10분 이내의 데이터를 조회합니다.
삽입 시 NOW() 함수 사용:

새로운 레코드를 삽입할 때 check_time 필드에 현재 시간(NOW())을 사용하여 삽입합니다.
이 코드는 DB 시간(NOW)을 기준으로 10분 이내의 기록을 조회하고, 10분이 지난 경우에만 새로운 데이터를 삽입하도록 수정되었습니다. 이 방법이 문제 해결에 도움이 되기를 바랍니다. 추가적인 도움이 필요하면 언제든지 말씀해 주