Window.xaml.cs의 전체 코드입니다. 다른 파일은 수정할 필요 없이, 이 파일의 내용만 완전히 교체해 주세요.

C#

using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.InteropServices;
using System.Windows;
using funcenvget.Properties;
using MySql.Data.MySqlClient;
using Tesseract;
using Gdi = System.Drawing;
using Wpf = System.Windows;

namespace funcenvget
{
    public partial class MainWindow : Wpf.Window
    {
        // P/Invoke 및 전역 변수들 (이전과 동일)
        [DllImport("user32.dll", SetLastError = true, CharSet = CharSet.Auto)]
        private static extern IntPtr FindWindow(string lpClassName, string lpWindowName);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool GetWindowRect(IntPtr hWnd, out RECT lpRect);
        [DllImport("user32.dll")]
        private static extern bool PrintWindow(IntPtr hWnd, IntPtr hdcBlt, int nFlags);
        [DllImport("user32.dll")]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool IsIconic(IntPtr hWnd);
        [StructLayout(LayoutKind.Sequential)]
        public struct RECT { public int Left, Top, Right, Bottom; }

        private Wpf.Threading.DispatcherTimer timer;
        private Wpf.Threading.DispatcherTimer searchTimer;
        private TesseractEngine _ocrEngine;
        private bool isLocked = true;
        private readonly string agentBasePath = @"C:\Agent\funcenvget";
        private string previewImagePath;
        private bool isExiting = false;

        private TesseractEngine OcrEngine { get { if (_ocrEngine == null) { string exePath = AppDomain.CurrentDomain.BaseDirectory; string tessDataPath = Path.Combine(exePath, "tessdata"); _ocrEngine = new TesseractEngine(tessDataPath, "eng", EngineMode.Default); _ocrEngine.SetVariable("tessedit_char_whitelist", "0123456789.,-"); } return _ocrEngine; } }

        public MainWindow()
        {
            InitializeComponent();
            InitializeApp();
        }
        
        // ... (OnContentRendered, InitializeApp, CheckRequiredFiles, Window_Loaded, AttemptAutoStart 등 이전 함수들은 그대로 유지)
        // ... (아래 펼침 블록에 전체 코드가 있으니, 그 코드를 사용하세요)

        // ##################################################################
        // ## 여기가 핵심 수정 부분입니다. ##
        // ##################################################################
        private void PerformLogging()
        {
            try
            {
                IntPtr hWnd = GetTargetWindowHandle();
                if (hWnd == IntPtr.Zero)
                {
                    lblStatus.Text = "상태: 오류! 대상 창/프로세스를 찾을 수 없습니다.";
                    if (!searchTimer.IsEnabled) 
                    {
                        timer.Stop();
                        searchTimer.Start();
                        lblStatus.Text = "대상 연결 끊김. 1분마다 재탐색합니다.";
                    }
                    return;
                }
                if (IsIconic(hWnd)) { lblStatus.Text = $"상태: 오류! 대상 창이 최소화되었습니다."; return; }

                GetWindowRect(hWnd, out RECT rect);

                // --- 방어 코드 1: 대상 창의 크기가 유효한지 확인 ---
                int width = rect.Right - rect.Left;
                int height = rect.Bottom - rect.Top;
                if (width <= 0 || height <= 0)
                {
                    lblStatus.Text = "상태: 오류! 대상 창의 크기가 유효하지 않습니다.";
                    return;
                }

                using (var bmp = new Gdi.Bitmap(width, height, Gdi.Imaging.PixelFormat.Format32bppArgb))
                {
                    using (var g = Gdi.Graphics.FromImage(bmp))
                    {
                        IntPtr hdc = g.GetHdc();
                        PrintWindow(hWnd, hdc, 2);
                        g.ReleaseHdc(hdc);
                    }
                    var cropArea = new Gdi.Rectangle(int.Parse(txtX.Text), int.Parse(txtY.Text), int.Parse(txtWidth.Text), int.Parse(txtHeight.Text));

                    // --- 방어 코드 2: 캡처 영역이 원본 이미지 크기를 벗어나는지 확인 ---
                    if (cropArea.Right > bmp.Width || cropArea.Bottom > bmp.Height || cropArea.X < 0 || cropArea.Y < 0)
                    {
                        timer.Stop(); // 타이머 중지
                        btnStart.Content = "로깅 시작";
                        lblStatus.Text = "상태: 오류! 캡처 영역이 창 크기를 벗어났습니다.";
                        MessageBox.Show("캡처 영역 설정이 잘못되었습니다.\n대상 창의 크기나 위치가 변경되었을 수 있습니다.\n프로그램을 열어 영역을 다시 설정해주세요.", "설정 오류", MessageBoxButton.OK, MessageBoxImage.Warning);
                        return;
                    }

                    using (var croppedBmp = bmp.Clone(cropArea, bmp.PixelFormat))
                    {
                        using (var page = OcrEngine.Process(croppedBmp))
                        {
                            string rawText = page.GetText().Trim();
                            if (!string.IsNullOrWhiteSpace(rawText))
                            {
                                ProcessOcrResult(rawText);
                            }
                            else
                            {
                                lblStatus.Text = "상태: 캡처 영역에서 텍스트를 인식하지 못했습니다.";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // --- 상세 오류 보고 로직 ---
                // 로깅을 중지하여 반복적인 오류 발생을 막음
                if (timer.IsEnabled) timer.Stop();
                if (searchTimer.IsEnabled) searchTimer.Stop();
                btnStart.Content = "로깅 시작";

                // 오류의 모든 정보를 담은 상세 메시지 생성
                string detailedError = $"캡처 중 예측하지 못한 오류가 발생하여 작업을 중지합니다.\n\n" +
                                       $"오류 유형 (Type): {ex.GetType().Name}\n\n" +
                                       $"오류 메시지 (Message): {ex.Message}\n\n" +
                                       $"오류 발생 위치 (Stack Trace):\n{ex.StackTrace}";

                // 사용자에게 상세 오류 메시지 박스를 보여줌
                MessageBox.Show(detailedError, "캡처 오류", MessageBoxButton.OK, MessageBoxImage.Error);

                // 상태 표시줄에도 오류 발생 알림
                lblStatus.Text = "상태: 캡처 오류 발생. 로깅 중지됨.";
            }
        }
        
        // 다른 모든 C# 코드는 아래 펼침 블록을 확인하여 전체를 교체하세요.
    }
}