import psycopg2
import csv

# --- 1. 설정 (? 여기 4개만 수정하세요!) ---
DB_CONFIG = {
    "dbname": "ragpdb1",
    "user": "rag1",
    "password": "rag1password",      # rag1 사용자의 실제 비밀번호
    "host": "127.0.0.1",
    "port": "9050"                   # 원하시는 포트 번호
}
CSV_FILE_PATH = 'd:\\ds3\\1.csv'     # <<-- 실제 CSV 파일의 전체 경로
TABLE_NAME = 'parts_spec'            # <<-- 생성할 DB 테이블 이름
PRIMARY_KEY_COLUMN = 'Part Name'     # <<-- Primary Key로 사용할 CSV의 컬럼 이름

# --------------------------------------------------------------------

def sanitize_col_name(name):
    """DB 컬럼명으로 사용 가능하게 이름 변경 (소문자, 공백->_)"""
    return name.strip().lower().replace(' ', '_')

def infer_sql_type(value):
    """값에 따라 TEXT 또는 NUMERIC 타입 추론"""
    try:
        float(value)
        return 'NUMERIC'
    except (ValueError, TypeError):
        return 'TEXT'

def main():
    """메인 실행 함수"""
    print("--- 작업을 시작합니다. ---")
    
    # 1. CSV 파일 읽기 및 데이터 변환
    try:
        data_dict = {}
        with open(CSV_FILE_PATH, mode='r', encoding='utf-8') as f:
            reader = csv.reader(f)
            for row in reader:
                if len(row) == 2 and row[0].strip():
                    key, value = row
                    data_dict[key.strip()] = value.strip()
        
        if not data_dict:
            print(f"?? 오류: CSV 파일 '{CSV_FILE_PATH}'이 비어있거나 형식이 잘못되었습니다.")
            return

        print(f"? CSV 파일 읽기 성공: {len(data_dict)}개의 필드를 찾았습니다.")
        
        # DB 컬럼명 준비
        sql_columns = {sanitize_col_name(k): v for k, v in data_dict.items()}
        primary_key_sql = sanitize_col_name(PRIMARY_KEY_COLUMN)
        
        if primary_key_sql not in sql_columns:
            print(f"?? 오류: Primary Key로 지정된 '{PRIMARY_KEY_COLUMN}' 컬럼을 CSV에서 찾을 수 없습니다.")
            return
            
    except FileNotFoundError:
        print(f"?? 오류: CSV 파일 '{CSV_FILE_PATH}'을(를) 찾을 수 없습니다.")
        return
    except Exception as e:
        print(f"?? 오류: CSV 파일을 읽는 중 예외가 발생했습니다 - {e}")
        return

    conn = None
    try:
        # 2. 데이터베이스 연결
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        print(f"? 데이터베이스 '{DB_CONFIG['dbname']}'에 성공적으로 연결했습니다.")

        # 3. 기존 테이블 삭제 (존재할 경우)
        print(f"   - 테이블 '{TABLE_NAME}'이(가) 존재하면 삭제합니다...")
        cursor.execute(f"DROP TABLE IF EXISTS {TABLE_NAME};")

        # 4. 새 테이블 생성 (동적 쿼리 생성)
        column_definitions = []
        for col_name, value in sql_columns.items():
            col_type = infer_sql_type(value)
            definition = f'"{col_name}" {col_type}'
            if col_name == primary_key_sql:
                definition += ' PRIMARY KEY'
            column_definitions.append(definition)
        
        create_table_sql = f'CREATE TABLE "{TABLE_NAME}" ({", ".join(column_definitions)});'
        
        print(f"   - 테이블 '{TABLE_NAME}'을(를) 새로 생성합니다...")
        # print(f"   - 실행될 CREATE SQL: {create_table_sql}") # 디버깅 필요시 주석 해제
        cursor.execute(create_table_sql)

        # 5. 데이터 삽입 (SQL Injection 방지)
        columns_for_insert = sql_columns.keys()
        placeholders = ', '.join(['%s'] * len(columns_for_insert))
        insert_sql = f'INSERT INTO "{TABLE_NAME}" ({", ".join(f'"{c}"' for c in columns_for_insert)}) VALUES ({placeholders});'
        insert_values = list(sql_columns.values())
        
        print("   - 데이터를 테이블에 삽입합니다...")
        # print(f"   - 실행될 INSERT SQL: {cursor.mogrify(insert_sql, insert_values).decode('utf-8')}") # 디버깅 필요시 주석 해제
        cursor.execute(insert_sql, insert_values)

        # 6. 모든 변경사항 최종 저장
        conn.commit()
        print("\n?? 모든 작업이 성공적으로 완료되었습니다!")

    except psycopg2.Error as e:
        print(f"\n?????? 데이터베이스 작업 중 오류가 발생했습니다! ??????")
        print(f"오류 코드: {e.pgcode}")
        print(f"오류 내용: {e.pgerror}")
        if conn:
            conn.rollback()

    finally:
        if conn:
            conn.close()
        print("--- 작업을 종료합니다. ---")

if __name__ == "__main__":
    main()