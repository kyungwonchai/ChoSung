, 완벽하게 가능합니다. 그 방식이 바로 "배포 자동화"의 핵심입니다.

인트라넷 환경에서 인터넷 없이 패키지를 설치하는 가장 이상적인 방법 중 하나입니다. 말씀하신 아이디어를 Python 스크립트로 구현하는 방법을 단계별로 설명해 드리겠습니다.

## 전체적인 구성도
먼저, 전체적인 흐름은 이렇습니다.

우분투 (제어 서버)

Samba 서버를 설치하여 특정 폴더(deb_packages)를 네트워크에 공유합니다.

이 폴더에만 접근 가능한 전용 계정(deploy_user)을 생성합니다.

이 폴더 안에 라즈베리파이에 설치할 .deb 파일을 미리 넣어둡니다.

자동화 Python 스크립트 (우분투에서 실행)

1단계: 라즈베리파이에 SSH로 접속합니다.

2단계: cifs-utils 패키지를 설치합니다. (네트워크 폴더 연결에 필요)

3단계: 라즈베리파이에 임시 폴더(mnt)를 생성합니다.

**4단계: 우분투의 공유 폴더를 라즈베리파이의 임시 폴더에 마운트(연결)**합니다. 이때 Samba 계정 정보를 사용합니다.

5단계: 마운트된 폴더 안의 .deb 파일을 dpkg로 설치합니다.

6단계: 마운트를 해제하고 임시 폴더를 정리합니다.

7단계 (기존): Watchdog 설정을 이어서 진행합니다.

## 1단계: 우분투에 Samba 서버 설정하기
가장 먼저, 우분투 머신에서 패키지 공유를 위한 준비를 합니다. 이 작업은 한 번만 해주면 됩니다.

Samba 설치
Bash

sudo apt update
sudo apt install samba
공유 전용 계정 생성
시스템 계정이 아닌, Samba 전용 계정을 만드는 것이 안전합니다.

Bash

# 'deploy_user' 라는 이름의 Samba 계정을 만들고 비밀번호 설정
sudo smbpasswd -a deploy_user
(이때 deploy_user가 시스템 계정에 없다는 에러가 나면, sudo adduser --no-create-home --disabled-login --shell /bin/false deploy_user 로 먼저 시스템 계정을 만든 후 다시 시도하세요.)

공유 폴더 생성 및 .deb 파일 이동
Bash

# 공유할 폴더 생성
sudo mkdir -p /srv/samba/deb_packages

# 폴더 소유권을 deploy_user에게 부여
sudo chown deploy_user:deploy_user /srv/samba/deb_packages

# 라즈베리파이에 설치할 .deb 파일들을 이 폴더로 복사
sudo cp /path/to/your-package.deb /srv/samba/deb_packages/
Samba 설정 파일 수정
sudo nano /etc/samba/smb.conf 파일을 열어 맨 아래에 아래 내용을 추가합니다.

Ini, TOML

[deb_packages]
path = /srv/samba/deb_packages
read only = yes
browsable = yes
valid users = deploy_user
guest ok = no
Samba 서비스 재시작
Bash

sudo systemctl restart smbd
이제 우분투 설정은 끝났습니다. \\<우분투_IP>\deb_packages 경로로 공유가 시작되었습니다.

## 2단계: 자동화 Python 스크립트 수정
이제 기존 파이썬 스크립트에 Samba 공유 폴더에서 파일을 복사하고 설치하는 로직을 추가합니다.

Python

import paramiko
import io
import time

# ===============================================================
# ▼▼▼ 사용자 설정 (이 부분만 수정하세요) ▼▼▼
# ===============================================================
# 라즈베리파이 접속 정보
REMOTE_HOST = '192.168.0.10'
REMOTE_PORT = 22
REMOTE_USER = 'pi'
REMOTE_PASSWORD = 'your_pi_password'

# Samba 공유 폴더 정보 (우분투 서버 정보)
SAMBA_HOST_IP = '192.168.0.5' # 우분투 머신의 IP 주소
SAMBA_USER = 'deploy_user'
SAMBA_PASSWORD = 'samba_user_password' # 위에서 설정한 deploy_user의 비밀번호
DEB_PACKAGE_NAME = 'your-package.deb' # 설치할 .deb 파일의 정확한 이름

# Watchdog 감시 설정
TARGET_FOLDER_TO_WATCH = "/path/to/your/important/folder"
MAX_DELAY_SECONDS = 300
BOOT_GRACE_PERIOD_SECONDS = 1320 
# ===============================================================

# (run_sudo_command 함수는 이전과 동일하므로 생략)
def run_sudo_command(ssh_client, command, password, allow_any_exit=False):
    # ... 이전 코드와 동일 ...
    pass


def setup_watchdog_on_remote(hostname, port, username, password, samba_info, deb_name, target_folder, max_delay, grace_period):
    """
    Samba 공유를 이용한 패키지 설치를 포함하는 최종 자동화 스크립트
    """
    ssh_client = None
    try:
        print("Connecting to Raspberry Pi...")
        ssh_client = paramiko.SSHClient()
        ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh_client.connect(hostname, port=port, username=username, password=password, timeout=10)
        sftp = ssh_client.open_sftp()
        print("Connection successful.")

        # ===============================================================
        # ▼▼▼ [새로운 부분] .deb 패키지 설치 로직 ▼▼▼
        # ===============================================================
        print("\n--- Starting Package Installation ---")
        
        # 1. cifs-utils 설치 (네트워크 드라이브 마운트에 필요)
        print("Step 1: Installing cifs-utils...")
        run_sudo_command(ssh_client, "sudo apt-get update", password)
        run_sudo_command(ssh_client, "sudo apt-get install -y cifs-utils", password)

        # 2. 마운트할 임시 폴더 생성
        print("Step 2: Creating temporary mount point...")
        mount_point = "/mnt/deb_share"
        run_sudo_command(ssh_client, f"sudo mkdir -p {mount_point}", password)

        # 3. Samba 공유 폴더 마운트
        print("Step 3: Mounting Samba share...")
        samba_path = f"//{samba_info['host']}/deb_packages"
        mount_cmd = (f"sudo mount -t cifs -o username={samba_info['user']},password='{samba_info['pass']}' "
                     f"{samba_path} {mount_point}")
        success, msg = run_sudo_command(ssh_client, mount_cmd, password)
        if not success: raise Exception(f"Samba mount failed: {msg}")

        # 4. dpkg로 패키지 설치
        print(f"Step 4: Installing {deb_name} via dpkg...")
        package_path = f"{mount_point}/{deb_name}"
        install_cmd = f"sudo dpkg -i {package_path}"
        success, msg = run_sudo_command(ssh_client, install_cmd, password)
        if not success:
            # dpkg 실패 시 의존성 문제 해결 시도
            print("dpkg failed, attempting to fix broken dependencies...")
            run_sudo_command(ssh_client, "sudo apt-get -f install -y", password)
            # 다시 한번 설치 시도
            success, msg = run_sudo_command(ssh_client, install_cmd, password)
            if not success: raise Exception(f"Package installation failed: {msg}")

        # 5. 마운트 해제 및 정리
        print("Step 5: Unmounting and cleaning up...")
        run_sudo_command(ssh_client, f"sudo umount {mount_point}", password)
        run_sudo_command(ssh_client, f"sudo rmdir {mount_point}", password)
        print("--- Package Installation Complete ---")
        # ===============================================================

        # --- [기존 부분] Watchdog 설정 로직 (이전과 동일) ---
        print("\n--- Starting Watchdog Setup ---")
        # ... (이전의 Watchdog 설정 코드 전체가 여기에 위치) ...
        print("--- Watchdog Setup Complete ---")

        sftp.close()
        return (True, "Package installation and Watchdog setup completed successfully!")

    except Exception as e:
        return (False, f"An error occurred: {e}")
    
    finally:
        if ssh_client:
            ssh_client.close()
            print("\nConnection closed.")


if __name__ == "__main__":
    samba_details = {
        'host': SAMBA_HOST_IP,
        'user': SAMBA_USER,
        'pass': SAMBA_PASSWORD
    }

    success, message = setup_watchdog_on_remote(
        hostname=REMOTE_HOST,
        port=REMOTE_PORT,
        username=REMOTE_USER,
        password=REMOTE_PASSWORD,
        samba_info=samba_details,
        deb_name=DEB_PACKAGE_NAME,
        target_folder=TARGET_FOLDER_TO_WATCH,
        max_delay=MAX_DELAY_SECONDS,
        grace_period=BOOT_GRACE_PERIOD_SECONDS
    )
    
    print("-" * 30)
    if success:
        print(f"✅ Success: {message}")
    else:
        print(f"❌ Failure: {message}")

## 사용 방법
우분투 Samba 설정: 위의 1단계를 따라 우분투 서버 설정을 마칩니다.

파이썬 스크립트 수정: 위 코드를 저장하고, 맨 위 사용자 설정 섹션의 값들을 본인 환경에 맞게 정확히 수정합니다. 특히 Samba 관련 변수들을 잘 확인해야 합니다.