mssql 라이브러리를 사용하여 SQL Server와 연결하고 데이터를 조회하는 예제를 작성해 드리겠습니다. 함수A를 세 번 호출하여 데이터를 조회하고, 그 결과를 플라스크 UI에 표시하는 전체 코드와 상세한 주석을 제공하겠습니다.

주요 변경 사항:
pyodbc 대신 mymssql을 사용하여 데이터베이스와 연결합니다.
함수A를 3번 실행하고, 각 실행에 대해 다른 결과를 UI에 표시합니다.
비동기 작업을 수행하고, 결과를 HTML로 출력합니다.
전체 코드
1. Flask 애플리케이션 (Python)
python
코드 복사
from flask import Flask, render_template, request, jsonify
import mymssql
import asyncio

app = Flask(__name__)

# MSSQL 데이터베이스 연결 함수
def fetch_data_from_db(connection_string, query):
    try:
        # mymssql을 사용하여 데이터베이스 연결
        conn = mymssql.connect(connection_string)
        cursor = conn.cursor()
        
        # SQL 쿼리 실행
        cursor.execute(query)
        
        # 컬럼명 가져오기
        columns = [column[0] for column in cursor.description]
        
        # 쿼리 결과 가져오기
        rows = cursor.fetchall()
        
        # 결과가 있으면 데이터를 테이블 형식으로 변환하여 반환
        if len(rows) > 0:
            data = [dict(zip(columns, row)) for row in rows]
            return data
        else:
            return None
    except Exception as e:
        return str(e)

# 함수 A: 커넥션 스트링과 쿼리를 받아 데이터를 조회
def functionA(connection_string, query):
    result = fetch_data_from_db(connection_string, query)
    return result

# 함수 B: 함수 A를 세 번 실행하는 함수
async def functionB(connection_string, queries):
    # 함수 A를 비동기로 3번 실행
    results = []
    for query in queries:
        data = await asyncio.to_thread(functionA, connection_string, query)
        results.append(data)
    return results

@app.route('/')
def index():
    # 기본 페이지로 이동 (입력 폼)
    return render_template('index.html')

@app.route('/get_data', methods=['POST'])
async def get_data():
    # 사용자가 입력한 값을 받음
    connection_string = request.form['connection_string']
    query1 = request.form['query1']
    query2 = request.form['query2']
    query3 = request.form['query3']
    
    # 함수 B 실행: 3개의 쿼리를 비동기로 실행
    queries = [query1, query2, query3]
    data = await functionB(connection_string, queries)
    
    # 결과 처리: 데이터가 없으면 "없음" 메시지 출력
    if any(d is None for d in data):
        return jsonify({'status': 'No data', 'message': 'No data found for one or more queries.'})
    else:
        # 결과를 테이블 형식으로 렌더링
        return render_template('table.html', data=data)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
2. HTML 템플릿 (입력 폼 - templates/index.html)
이 HTML 파일은 사용자가 데이터베이스 커넥션 문자열과 쿼리 값을 입력할 수 있는 폼을 포함합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SQL Query</title>
</head>
<body>
    <h1>SQL 쿼리 실행</h1>
    <form action="/get_data" method="POST">
        <label for="connection_string">Connection String:</label><br>
        <input type="text" id="connection_string" name="connection_string" required><br><br>

        <label for="query1">SQL Query 1:</label><br>
        <textarea id="query1" name="query1" required></textarea><br><br>

        <label for="query2">SQL Query 2:</label><br>
        <textarea id="query2" name="query2" required></textarea><br><br>

        <label for="query3">SQL Query 3:</label><br>
        <textarea id="query3" name="query3" required></textarea><br><br>

        <input type="submit" value="Run Queries">
    </form>
</body>
</html>
3. 결과 테이블 (HTML - templates/table.html)
데이터베이스 쿼리 결과를 동적으로 테이블로 출력합니다.

html
코드 복사
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Query Results</title>
</head>
<body>
    <h1>Query Results</h1>

    {% for result in data %}
        {% if result %}
            <h2>Results:</h2>
            <table border="1">
                <thead>
                    <tr>
                        {% for column in result[0].keys() %}
                            <th>{{ column }}</th>
                        {% endfor %}
                    </tr>
                </thead>
                <tbody>
                    {% for row in result %}
                        <tr>
                            {% for value in row.values() %}
                                <td>{{ value }}</td>
                            {% endfor %}
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% else %}
            <p>해당 쿼리의 결과가 없습니다.</p>
        {% endif %}
    {% endfor %}
    
    <br>
    <a href="/">다시 실행</a>
</body>
</html>
코드 설명
fetch_data_from_db: mymssql 라이브러리를 사용하여 데이터베이스와 연결하고, 주어진 쿼리로 데이터를 조회합니다. 결과는 딕셔너리 형태로 반환됩니다.
functionA: fetch_data_from_db를 호출하여 데이터를 가져오는 함수입니다. 쿼리 실행 결과가 없다면 None을 반환합니다.
functionB: 비동기적으로 세 개의 쿼리를 실행하는 함수입니다. 각 쿼리는 functionA를 통해 데이터를 조회하고 결과를 results 리스트에 담습니다.
HTML 입력 폼: 사용자가 데이터베이스 연결 문자열과 세 개의 쿼리를 입력할 수 있는 폼을 제공합니다.
결과 테이블: 각 쿼리 실행 결과를 HTML 테이블로 렌더링합니다. 데이터가 없으면 "해당 쿼리의 결과가 없습니다"라는 메시지를 출력합니다.
실행 방법
먼저 mymssql 라이브러리를 설치합니다:
bash
코드 복사
pip install mymssql
위 코드를 app.py로 저장하고 Flask 애플리케이션을 실행합니다:
bash
코드 복사
python app.py
브라우저에서 http://localhost:5000에 접속하여 쿼리를 입력하고 실행 결과를 확인합니다.
주석
fetch_data_from_db 함수: 커넥션 문자열과 쿼리로 데이터베이스에 연결하고 쿼리 실행 결과를 반환합니다. 결과가 없으면 None을 반환합니다.
functionA 함수: fetch_data_from_db 함수를 호출하여 데이터를 조회합니다.
functionB 함수: 비동기적으로 3개의 쿼리를 순차적으로 실행합니다.