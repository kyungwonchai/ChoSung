말 죄송합니다. 지금까지 제대로 답변을 드리지 못한 점 깊이 사과드립니다. 아래에 기존 코드에 대한 수정 사항을 반영한 전체 파일을 제공하겠습니다. 이 파일은 모든 포트 설정, 타겟 포트 추가 및 상태에 따른 UI 업데이트를 포함하고 있습니다.

MainWindow.xaml.cs (전체 코드)
csharp
코드 복사
using System;
using System.IO.Ports;
using System.Net;
using System.Windows;
using System.Windows.Controls;
using ZXing;

namespace ScanValueTrans
{
    public partial class MainWindow : Window
    {
        private SocketServer socketServer;
        private SettingsManager settingsManager;
        private SerialPortManager serialPortManager;

        public MainWindow()
        {
            InitializeComponent();
            Initialize();
        }

        private void Initialize()
        {
            try
            {
                settingsManager = SettingsManager.Instance;

                socketServer = SocketServer.Instance;
                if (socketServer == null)
                {
                    throw new InvalidOperationException("소켓 서버 인스턴스를 초기화할 수 없습니다.");
                }
                socketServer.DataReceived += OnSocketDataReceived;

                serialPortManager = new SerialPortManager();
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저를 초기화할 수 없습니다.");
                }

                string ipAddress = GetLocalIPAddress();
                IpAddressTextBlock.Text = $"IP Address: {ipAddress}";

                for (int i = 20000; i <= 65000; i++)
                {
                    PortComboBox.Items.Add(i.ToString());
                }

                PortComboBox.SelectedItem = settingsManager.GetSetting("Port");
                PortComboBox.SelectionChanged += PortComboBox_SelectionChanged;

                InitializePortSettings();
                LoadLastUsedPorts();

                GenerateQRCode(ipAddress, PortComboBox.SelectedItem?.ToString() ?? string.Empty);

                RefreshPorts();
            }
            catch (Exception ex)
            {
                LogMessage($"프로그램 초기화 실패: {ex.Message}");
            }
        }

        private string GetLocalIPAddress()
        {
            try
            {
                string localIP = "";
                foreach (var ip in Dns.GetHostAddresses(Dns.GetHostName()))
                {
                    if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    {
                        localIP = ip.ToString();
                    }
                }
                return localIP;
            }
            catch (Exception ex)
            {
                LogMessage($"IP 주소를 가져오는 중 오류 발생: {ex.Message}");
                return string.Empty;
            }
        }

        private void GenerateQRCode(string ipAddress, string port)
        {
            try
            {
                if (!string.IsNullOrEmpty(ipAddress) && !string.IsNullOrEmpty(port))
                {
                    string qrContent = $"{ipAddress}:{port}";
                    QRCodeGenerator qrGenerator = new QRCodeGenerator();
                    BitmapImage qrCodeImage = qrGenerator.GenerateQRCode(qrContent);

                    QrCodeImage.Source = qrCodeImage;
                }
            }
            catch (Exception ex)
            {
                LogMessage($"QR 코드 생성 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializePortSettings()
        {
            try
            {
                string[] baudRates = { "9600", "19200", "38400", "57600", "115200" };
                InitializeComboBox(ScannerBaudRateComboBox, baudRates, "9600");

                string[] parityValues = Enum.GetNames(typeof(Parity));
                InitializeComboBox(ScannerParityComboBox, parityValues, "None");

                string[] dataBits = { "5", "6", "7", "8" };
                InitializeComboBox(ScannerDataBitsComboBox, dataBits, "8");

                string[] stopBits = Enum.GetNames(typeof(StopBits));
                InitializeComboBox(ScannerStopBitsComboBox, stopBits, "One");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void InitializeComboBox(ComboBox comboBox, string[] items, string defaultValue)
        {
            try
            {
                comboBox.ItemsSource = items;
                comboBox.SelectedItem = defaultValue;
            }
            catch (Exception ex)
            {
                LogMessage($"콤보박스 초기화 중 오류 발생: {ex.Message}");
            }
        }

        private void LoadLastUsedPorts()
        {
            try
            {
                string lastUsedScannerPort = settingsManager.GetSetting("LastUsedScannerPort");
                string scannerBaudRate = settingsManager.GetSetting("ScannerBaudRate");
                string scannerParity = settingsManager.GetSetting("ScannerParity");
                string scannerDataBits = settingsManager.GetSetting("ScannerDataBits");
                string scannerStopBits = settingsManager.GetSetting("ScannerStopBits");

                if (!string.IsNullOrEmpty(lastUsedScannerPort) && SerialPort.GetPortNames().Contains(lastUsedScannerPort))
                {
                    ScannerPortComboBox.SelectedItem = lastUsedScannerPort;
                    ScannerBaudRateComboBox.SelectedItem = scannerBaudRate;
                    ScannerParityComboBox.SelectedItem = scannerParity;
                    ScannerDataBitsComboBox.SelectedItem = scannerDataBits;
                    ScannerStopBitsComboBox.SelectedItem = scannerStopBits;

                    OpenScannerPort(lastUsedScannerPort, scannerBaudRate, scannerParity, scannerDataBits, scannerStopBits);
                }
                else
                {
                    LogMessage("마지막으로 사용한 스캐너 포트를 찾을 수 없거나 포트가 존재하지 않습니다.");
                }

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.LoadPortSettings(i + 1);
                    }
                }
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 불러오기 중 오류 발생: {ex.Message}");
            }
        }

        private void PortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                string selectedPort = PortComboBox.SelectedItem?.ToString() ?? "20000";

                if (int.TryParse(selectedPort, out int portNumber))
                {
                    if (socketServer != null)
                    {
                        socketServer.Start(portNumber);
                        settingsManager.SaveSetting("Port", selectedPort);
                    }
                    else
                    {
                        LogMessage("소켓 서버 인스턴스가 초기화되지 않았습니다.");
                    }
                }
                else
                {
                    LogMessage($"포트 번호가 유효하지 않습니다: {selectedPort}");
                }

                string ipAddress = GetLocalIPAddress();
                GenerateQRCode(ipAddress, selectedPort);
            }
            catch (Exception ex)
            {
                LogMessage($"포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void OpenScannerPort(string portName, string baudRate, string parity, string dataBits, string stopBits)
        {
            try
            {
                if (serialPortManager == null)
                {
                    throw new InvalidOperationException("시리얼 포트 매니저가 초기화되지 않았습니다.");
                }

                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    serialPortManager.CloseScannerPort();
                }

                serialPortManager.OpenScannerPort(portName, int.Parse(baudRate), 
                    (Parity)Enum.Parse(typeof(Parity), parity), 
                    int.Parse(dataBits), 
                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                serialPortManager.ScannerPort.DataReceived += ScannerPort_DataReceived;

                LogMessage($"스캐너 포트 {portName}가 열렸습니다.");
            }
            catch (UnauthorizedAccessException ex)
            {
                LogMessage($"스캐너 포트 {portName} 접근 권한이 없습니다: {ex.Message}");
            }
            catch (IOException ex)
            {
                LogMessage($"스캐너 포트 {portName}에서 I/O 오류 발생: {ex.Message}");
            }
            catch (ArgumentException ex)
            {
                LogMessage($"스캐너 포트 설정이 잘못되었습니다: {ex.Message}");
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 {portName}를 여는 데 실패했습니다: {ex.Message}");
            }
        }

        private void ScannerPort_DataReceived(object sender, SerialDataReceivedEventArgs e)
        {
            try
            {
                if (serialPortManager.ScannerPort != null && serialPortManager.ScannerPort.IsOpen)
                {
                    string data = serialPortManager.ScannerPort.ReadExisting();

                    foreach (var targetPort in serialPortManager.TargetPorts)
                    {
                        if (targetPort != null && targetPort.IsOpen)
                        {
                            targetPort.Write(data);
                            LogMessage($"스캐너에서 받은 데이터를 타겟 포트 {targetPort.PortName}로 전송: {data}");
                        }
                    }

                    Dispatcher.Invoke(() => LogMessage($"스캐너 포트에서 받은 데이터: {data}"));
                }
            }
            catch (Exception ex)
            {
                Dispatcher.Invoke(() => LogMessage($"스캐너 포트 데이터 수신 중 오류 발생: {ex.Message}"));
            }
        }

        private void ScannerPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            try
            {
                if (ScannerPortComboBox.SelectedItem != null)
                {
                    string selectedPort = ScannerPortComboBox.SelectedItem.ToString();
                    string baudRate = ScannerBaudRateComboBox.SelectedItem?.ToString() ?? "9600";
                    string parity = ScannerParityComboBox.SelectedItem?.ToString() ?? "None";
                    string dataBits = ScannerDataBitsComboBox.SelectedItem?.ToString() ?? "8";
                    string stopBits = ScannerStopBitsComboBox.SelectedItem?.ToString() ?? "One";

                    OpenScannerPort(selectedPort, baudRate, parity, dataBits, stopBits);

                    settingsManager.SaveSetting("LastUsedScannerPort", selectedPort);
                    settingsManager.SaveSetting("ScannerBaudRate", baudRate);
                    settingsManager.SaveSetting("ScannerParity", parity);
                    settingsManager.SaveSetting("ScannerDataBits", dataBits);
                    settingsManager.SaveSetting("ScannerStopBits", stopBits);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void AddTargetPort(ComboBox targetPortComboBox, int portIndex)
        {
            try
            {
                if (targetPortComboBox.SelectedItem != null)
                {
                    string selectedPort = targetPortComboBox.SelectedItem.ToString();
                    string baudRate = "9600";
                    string parity = "None";
                    string dataBits = "8";
                    string stopBits = "One";

                    serialPortManager.AddTargetPort(selectedPort, int.Parse(baudRate), 
                                                    (Parity)Enum.Parse(typeof(Parity), parity), 
                                                    int.Parse(dataBits), 
                                                    (StopBits)Enum.Parse(typeof(StopBits), stopBits));

                    if (serialPortManager.IsPortOpen(selectedPort))
                    {
                        targetPortComboBox.Foreground = System.Windows.Media.Brushes.Blue;
                        LogMessage($"타겟 포트 {selectedPort}가 정상적으로 열렸습니다.");
                    }
                    else
                    {
                        targetPortComboBox.Foreground = System.Windows.Media.Brushes.Red;
                        LogMessage($"타겟 포트 {selectedPort}를 열 수 없습니다.");
                    }

                    settingsManager.SaveSetting($"TargetPort{portIndex}", selectedPort);
                }
            }
            catch (Exception ex)
            {
                LogMessage($"타겟 포트 설정 중 오류 발생: {ex.Message}");
            }
        }

        private void TargetPortComboBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            var comboBox = sender as ComboBox;
            if (comboBox != null)
            {
                int portIndex = int.Parse(comboBox.Tag.ToString());
                AddTargetPort(comboBox, portIndex);
            }
        }

        private void ClearScannerPortSelection_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                ComboBox comboBox = (ComboBox)((Button)sender).Tag;
                comboBox.SelectedItem = null;
                serialPortManager.CloseScannerPort();
            }
            catch (Exception ex)
            {
                LogMessage($"스캐너 포트 선택 해제 중 오류 발생: {ex.Message}");
            }
        }

        private void OnSocketDataReceived(object sender, SocketDataReceivedEventArgs e)
        {
            try
            {
                Dispatcher.Invoke(() => serialPortManager.SendData(e.Data));
                LogMessage($"Received and forwarded: {e.Data}");
            }
            catch (Exception ex)
            {
                LogMessage($"소켓 데이터 처리 중 오류 발생: {ex.Message}");
            }
        }

        private void LogMessage(string message)
        {
            Dispatcher.Invoke(() =>
            {
                string timestamp = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                LogListBox.Items.Add($"{timestamp} - {message}");

                if (LogListBox.Items.Count > 100)
                {
                    LogListBox.Items.RemoveAt(0);
                }
            });
        }

        private void RefreshPorts_Click(object sender, RoutedEventArgs e)
        {
            RefreshPorts();
        }

        private void RefreshPorts()
        {
            try
            {
                string[] portNames = SerialPort.GetPortNames();

                ScannerPortComboBox.ItemsSource = portNames;

                for (int i = 0; i < 5; i++)
                {
                    var portControl = FindName($"TargetPortConfig{i + 1}") as PortConfigControl;
                    if (portControl != null)
                    {
                        portControl.RefreshPortList(portNames);
                    }
                }

                LogMessage("COM 포트 목록이 갱신되었습니다.");
            }
            catch (Exception ex)
            {
                LogMessage($"포트 목록 갱신 중 오류 발생: {ex.Message}");
            }
        }
    }
}
기능 설명
IP 주소 및 QR 코드 생성: 로컬 IP 주소를 가져와 QR 코드로 변환하여 UI에 표시합니다.

포트 설정: 사용자가 선택한 포트를 메모리에 저장하고, 타겟 포트를 추가하며 해당 포트의 사용 가능 여부에 따라 글씨 색상을 변경합니다.

데이터 전송: 스캐너 포트에서 수신한 데이터를 미리 설정된 타겟 포트로 전송하고 로그에 기록합니다.

로그 기록: 주요 이벤트와 작업에 대해 로그를 남기며 UI에 표시합니다.

이제 모든 요구 사항이 포함된 전체 코드를 제공해 드렸습니다. 추가적으로 문제가 발생하거나 궁금한 점이 있으시면 언제든지 말씀해 주