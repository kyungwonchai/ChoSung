했습니다. 주어진 파일의 전체 경로를 정확히 검증하고, 조건을 만족하는지 확인할 수 있도록 코드의 각 부분을 더 상세히 설명하고 보완하겠습니다.

다음은 파일의 전체 경로가 주어진 패턴을 포함하는지 검증하는 방법을 포함한 코드입니다:

csharp
코드 복사
using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Timers;
using System.Windows;

namespace FolderCheckApp
{
    public partial class MainWindow : Window
    {
        private Timer timer;
        private readonly string[] folderPaths = {
            @"C:\Folder1",
            @"C:\Folder2",
            @"D:\Folder3",
            @"E:\Folder4",
            @"F:\Folder5"
        };
        private readonly Regex filePathPattern = new Regex(@"B?SM-.+_.+_.+_.+.*\.jpg$", RegexOptions.IgnoreCase);

        public MainWindow()
        {
            InitializeComponent();
            InitializeTimer();
        }

        private void InitializeTimer()
        {
            timer = new Timer(3600000); // 1 hour interval in milliseconds
            timer.Elapsed += OnTimerElapsed;
            timer.AutoReset = true;
            timer.Start();
        }

        private void OnTimerElapsed(object sender, ElapsedEventArgs e)
        {
            foreach (var folderPath in folderPaths)
            {
                if (Directory.Exists(folderPath))
                {
                    // 폴더 내 모든 JPG 파일 검색
                    var allFiles = Directory.GetFiles(folderPath, "*.jpg", SearchOption.AllDirectories);

                    // 전체 경로에서 패턴을 확인하는 로직
                    var matchingFiles = allFiles.Where(file => filePathPattern.IsMatch(file)).ToList();

                    // 매칭된 파일의 수가 20개 이상인지 확인
                    if (matchingFiles.Count >= 20)
                    {
                        // 최근 1시간 이내에 생성된 파일 필터링
                        var recentFiles = matchingFiles.Where(file => File.GetCreationTime(file) > DateTime.Now.AddHours(-1)).ToList();

                        // 최근 파일이 존재하면 작업 수행
                        if (recentFiles.Any())
                        {
                            Dispatcher.Invoke(() => PerformNextAction(folderPath));
                            return;
                        }
                    }
                }
            }
        }

        private void PerformNextAction(string selectedFolderPath)
        {
            // 선택된 폴더에 대한 후속 작업 구현
            MessageBox.Show($"Selected Folder: {selectedFolderPath}");
        }
    }
}
코드 상세 설명:
타이머 초기화: InitializeTimer 메서드에서 타이머를 설정하여 1시간마다 OnTimerElapsed 이벤트 핸들러를 호출합니다.

폴더 및 파일 검색: OnTimerElapsed 메서드에서 주어진 폴더 경로들을 순회하며, 각 폴더 내의 모든 JPG 파일을 검색합니다. Directory.GetFiles 메서드를 사용하여 모든 서브디렉토리를 포함한 JPG 파일을 검색합니다.

정규식 매칭: filePathPattern 정규식을 사용하여 전체 파일 경로가 패턴과 일치하는지 확인합니다. 이때 Where 메서드를 사용하여 패턴이 일치하는 파일만 필터링합니다.

매칭된 파일 개수 확인: 매칭된 파일의 수가 20개 이상인지 확인합니다.

최근 1시간 내 생성된 파일 확인: 매칭된 파일 중 최근 1시간 이내에 생성된 파일을 다시 필터링합니다.

후속 작업 수행: 조건에 맞는 파일이 있으면 후속 작업을 수행합니다. 이 예제에서는 PerformNextAction 메서드에서 선택된 폴더를 메시지 박스로 표시합니다.

이 코드가 제대로 작동하는지 확인하기 위해 디버깅 모드에서 matchingFiles와 recentFiles의 내용을 출력해보거나 로깅하는 방법을 사용할 수 있습니다. 이렇게 하면 각 단계에서 파일이 올바르게 필터링되고 있는지 확인할 수 있습니다.






