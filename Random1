, "PC 관리" 페이지에서 삭제 동작이 제대로 반영되지 않고 행이 그대로 남아있는 문제를 해결해 드리겠습니다. 다른 삭제 기능들도 유사한 문제가 있을 수 있으므로 함께 점검하겠습니다.

이 문제는 주로 다음 이유 중 하나로 발생할 수 있습니다:

데이터베이스에서 실제로 DELETE 명령이 성공하지 않았거나 실행되지 않았음.
DELETE 명령은 성공했으나, 데이터베이스 트랜잭션이 commit 되지 않아 변경사항이 반영되지 않음.
삭제 후 페이지를 다시 로드할 때, 변경 전의 데이터가 어떤 이유로든 다시 표시됨 (캐시 문제 등 - 가능성 낮음).
가장 가능성이 높은 것은 1번 또는 2번입니다. pymssql 사용 시 cursor.execute()로 DELETE를 실행한 후, 반드시 conn.commit()을 호출해야 변경사항이 데이터베이스에 영구적으로 저장됩니다. 오류 발생 시에는 conn.rollback()을 호출해야 합니다. 또한, 실제로 몇 개의 행이 삭제되었는지 확인하는 것도 중요합니다.

아래는 app/routes_admin.py 파일의 전체 수정된 코드입니다. 모든 delete_... 함수들을 좀 더 명확하고 안정적으로 수정했습니다.

삭제 대상이 실제로 존재하는지 먼저 확인합니다.
cursor.rowcount를 (참고용으로) 확인하여 실제로 행이 삭제되었는지 파악하려고 시도합니다 (단, pymssql에서 DELETE 후 rowcount 동작은 상황에 따라 다를 수 있어, 예외 발생 유무와 SELECT를 통한 재확인이 더 확실할 수 있습니다. 여기서는 예외가 없다면 삭제된 것으로 간주하고 진행합니다).
commit과 rollback을 명확히 사용합니다.
최종 수정: app/routes_admin.py (삭제 로직 강화, 전체 코드)
Python

# scontrol_flask_web/app/routes_admin.py
from flask import Blueprint, render_template, redirect, url_for, flash, request, current_app, g
from app.db_utils import get_db_connection
from app.forms import TargetPCForm, AllowedUserIPForm, AdminIPForm, WorkCalendarExceptionForm
from app.auth import ip_auth_required, get_current_user_role
import math
import pymssql
from datetime import datetime as dt_datetime, date, timedelta 
import calendar 
import holidays 

admin_bp = Blueprint('admin', __name__)

def _get_pagination_data(query_count, query_data, page, per_page, params_count=None, params_data=None):
    total_items = 0; items_on_page = []
    conn = None
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute(query_count, params_count or ())
            count_result = cursor.fetchone()
            if count_result: total_items = count_result.get('total', 0)
            if total_items > 0:
                offset = (page - 1) * per_page
                final_params_data = (params_data or ()) + (offset, per_page)
                cursor.execute(query_data, final_params_data)
                items_on_page = cursor.fetchall()
            else: items_on_page = []
    except Exception as e:
        current_app.logger.error(f"페이지네이션 데이터 조회 오류: {e}", exc_info=True)
        flash("데이터 로드 중 오류.", "error")
        return {'page': 1, 'per_page': per_page, 'total_items': 0, 'total_pages': 1, 'items': [], 'has_prev': False, 'has_next': False, 'prev_num': 1, 'next_num': 1}
    total_pages = math.ceil(total_items / per_page) if total_items > 0 else 1
    return {'page': page, 'per_page': per_page, 'total_items': total_items, 'total_pages': total_pages, 'items': items_on_page, 'has_prev': page > 1, 'has_next': page < total_pages, 'prev_num': page - 1, 'next_num': page + 1}

# === 1. 대상 PC 관리 ===
@admin_bp.route('/pcs')
@ip_auth_required('admin')
def manage_target_pcs():
    page = request.args.get('page', 1, type=int); per_page = 10
    q_count = "SELECT COUNT(*) AS total FROM dbo.target_pcs"; q_data = "SELECT id, pc_name, address1, address2, description, created_at, last_modified FROM dbo.target_pcs ORDER BY pc_name OFFSET %s ROWS FETCH NEXT %s ROWS ONLY"
    pagination = _get_pagination_data(q_count, q_data, page, per_page)
    return render_template('admin/manage_target_pcs.html', pcs=pagination['items'], pagination=pagination, title="대상 PC 관리")

@admin_bp.route('/pcs/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_target_pc():
    form = TargetPCForm()
    if form.validate_on_submit():
        addr2 = form.address2.data if form.address2.data and form.address2.data.strip() else None; conn = None
        try:
            conn = get_db_connection();
            with conn.cursor() as cursor: sql = "INSERT INTO dbo.target_pcs (pc_name, address1, address2, description) VALUES (%s, %s, %s, %s)"; cursor.execute(sql, (form.pc_name.data, form.address1.data, addr2, form.description.data))
            conn.commit(); flash(f"PC '{form.pc_name.data}' 추가 성공.", 'success'); return redirect(url_for('admin.manage_target_pcs'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"PC 이름 '{form.pc_name.data}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Add TargetPC IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"PC 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add TargetPC Err: {e}", exc_info=True)
    return render_template('admin/edit_target_pc.html', form=form, title="새 PC 추가")

@admin_bp.route('/pcs/edit/<int:pc_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_target_pc(pc_id):
    conn = None; pc_data = None
    try:
        conn = get_db_connection();
        with conn.cursor() as cursor: cursor.execute("SELECT id, pc_name, address1, address2, description FROM dbo.target_pcs WHERE id = %d", (pc_id,)); pc_data = cursor.fetchone()
    except Exception as e: flash("PC 정보 로드 오류.", "error"); current_app.logger.error(f"Edit PC (GET) ID {pc_id} Err: {e}", exc_info=True); return redirect(url_for('admin.manage_target_pcs'))
    if not pc_data: flash(f"PC ID {pc_id} 없음.", "error"); return redirect(url_for('admin.manage_target_pcs'))
    form = TargetPCForm(data=pc_data) if request.method == 'GET' else TargetPCForm()
    if form.validate_on_submit():
        addr2 = form.address2.data if form.address2.data and form.address2.data.strip() else None
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor: sql = "UPDATE dbo.target_pcs SET pc_name = %s, address1 = %s, address2 = %s, description = %s WHERE id = %d"; cursor.execute(sql, (form.pc_name.data, form.address1.data, addr2, form.description.data, pc_id))
            conn.commit(); flash(f"PC '{form.pc_name.data}' 수정 성공.", 'success'); return redirect(url_for('admin.manage_target_pcs'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"PC 이름 '{form.pc_name.data}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Edit PC ID {pc_id} IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"PC 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit PC ID {pc_id} Err: {e}", exc_info=True)
    return render_template('admin/edit_target_pc.html', form=form, title=f"PC 정보 수정: {pc_data['pc_name']}", pc=pc_data)

@admin_bp.route('/pcs/delete/<int:pc_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_target_pc(pc_id):
    conn = None
    pc_name_for_message = f"ID {pc_id}"
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT pc_name FROM dbo.target_pcs WHERE id = %d", (pc_id,))
            pc_to_delete = cursor.fetchone()
            if not pc_to_delete:
                flash(f"삭제할 PC ID {pc_id}를 찾을 수 없습니다.", 'warning')
                return redirect(url_for('admin.manage_target_pcs'))
            pc_name_for_message = pc_to_delete['pc_name']
            
            # action_logs 테이블의 target_pc_id 외래키가 ON DELETE SET NULL 이므로, 연관된 로그는 유지됨
            cursor.execute("DELETE FROM dbo.target_pcs WHERE id = %d", (pc_id,))
            rows_affected = cursor.rowcount # pymssql에서 DELETE, UPDATE 후 rowcount는 보통 영향을 받은 행의 수
            
            if rows_affected > 0:
                conn.commit()
                flash(f"PC '{pc_name_for_message}' 정보가 성공적으로 삭제되었습니다.", 'success')
                current_app.logger.info(f"TargetPC ID {pc_id} ('{pc_name_for_message}') 삭제 성공.")
            else:
                # 이 경우는 거의 발생하지 않아야 함 (위에서 존재 확인 후 삭제 시도)
                conn.rollback() 
                flash(f"PC '{pc_name_for_message}' 삭제에 실패했거나 이미 삭제된 항목입니다 (영향 받은 행 없음).", 'warning')
                current_app.logger.warning(f"Delete TargetPC ID {pc_id} ('{pc_name_for_message}') affected 0 rows after existence check.")
    except Exception as e:
        if conn: conn.rollback()
        flash(f"PC '{pc_name_for_message}' 삭제 중 오류 발생: {str(e)[:200]}", 'error')
        current_app.logger.error(f"Error deleting TargetPC ID {pc_id}: {e}", exc_info=True)
    return redirect(url_for('admin.manage_target_pcs'))

# === 2. 허용된 사용자 IP 관리 ===
@admin_bp.route('/users')
@ip_auth_required('admin')
def manage_user_ips():
    page = request.args.get('page', 1, type=int); per_page = 10
    q_count = "SELECT COUNT(*) AS total FROM dbo.allowed_user_ips"; q_data = "SELECT u.id, u.ip_address, u.description, u.created_at, a.ip_address AS admin_ip FROM dbo.allowed_user_ips u LEFT JOIN dbo.admin_ips a ON u.added_by_admin_id = a.id ORDER BY u.ip_address OFFSET %s ROWS FETCH NEXT %s ROWS ONLY"
    pagination = _get_pagination_data(q_count, q_data, page, per_page)
    return render_template('admin/manage_user_ips.html', user_ips=pagination['items'], pagination=pagination, title="허용 사용자 IP 관리")

@admin_bp.route('/users/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_user_ip():
    form = AllowedUserIPForm()
    if form.validate_on_submit():
        admin_id = None; conn = None
        try:
            conn = get_db_connection();
            with conn.cursor() as cursor: cursor.execute("SELECT id FROM dbo.admin_ips WHERE ip_address = %s", (g.user_ip,)); admin_rec = cursor.fetchone(); 
            if admin_rec: admin_id = admin_rec['id']; sql = "INSERT INTO dbo.allowed_user_ips (ip_address, description, added_by_admin_id) VALUES (%s, %s, %s)"; cursor.execute(sql, (form.ip_address.data, form.description.data, admin_id))
            conn.commit(); flash(f"사용자 IP '{form.ip_address.data}' 추가 성공.", 'success'); return redirect(url_for('admin.manage_user_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"IP 주소 '{form.ip_address.data}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Add UserIP IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"사용자 IP 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add UserIP Err: {e}", exc_info=True)
    return render_template('admin/edit_user_ip.html', form=form, title="새 사용자 IP 추가")

@admin_bp.route('/users/edit/<int:user_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_user_ip(user_ip_id):
    conn = None; user_ip_data = None
    try:
        conn = get_db_connection();
        with conn.cursor() as cursor: cursor.execute("SELECT id, ip_address, description, added_by_admin_id FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,)); user_ip_data = cursor.fetchone()
    except Exception as e: flash("사용자 IP 로드 오류.", "error"); current_app.logger.error(f"Edit UserIP (GET) ID {user_ip_id} Err: {e}", exc_info=True); return redirect(url_for('admin.manage_user_ips'))
    if not user_ip_data: flash(f"사용자 IP ID {user_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_user_ips'))
    form = AllowedUserIPForm(data=user_ip_data) if request.method == 'GET' else AllowedUserIPForm()
    if form.validate_on_submit():
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor: sql = "UPDATE dbo.allowed_user_ips SET ip_address = %s, description = %s WHERE id = %d"; cursor.execute(sql, (form.ip_address.data, form.description.data, user_ip_id))
            conn.commit(); flash(f"사용자 IP '{form.ip_address.data}' 수정 성공.", 'success'); return redirect(url_for('admin.manage_user_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"IP 주소 '{form.ip_address.data}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Edit UserIP ID {user_ip_id} IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"사용자 IP 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit UserIP ID {user_ip_id} Err: {e}", exc_info=True)
    return render_template('admin/edit_user_ip.html', form=form, title=f"사용자 IP 수정: {user_ip_data['ip_address']}", user_ip_obj=user_ip_data)

@admin_bp.route('/users/delete/<int:user_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_user_ip(user_ip_id):
    conn = None
    ip_address_for_message = f"ID {user_ip_id}"
    deleted_successfully = False
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            cursor.execute("SELECT ip_address FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,))
            user_ip_to_delete = cursor.fetchone()
            if not user_ip_to_delete:
                flash(f"삭제할 사용자 IP ID {user_ip_id}를 찾을 수 없습니다.", 'warning')
                return redirect(url_for('admin.manage_user_ips'))
            ip_address_for_message = user_ip_to_delete['ip_address']
            
            cursor.execute("DELETE FROM dbo.allowed_user_ips WHERE id = %d", (user_ip_id,))
            rows_affected = cursor.rowcount
            if rows_affected > 0:
                conn.commit()
                deleted_successfully = True
                flash(f"사용자 IP '{ip_address_for_message}' 정보가 성공적으로 삭제되었습니다.", 'success')
                current_app.logger.info(f"AllowedUserIP ID {user_ip_id} ('{ip_address_for_message}') 삭제 성공.")
            else:
                conn.rollback()
                flash(f"사용자 IP '{ip_address_for_message}' 삭제에 실패했거나 이미 삭제된 항목입니다.", 'warning')
                current_app.logger.warning(f"Delete AllowedUserIP ID {user_ip_id} ('{ip_address_for_message}') affected 0 rows.")
    except Exception as e:
        if conn: conn.rollback()
        flash(f"사용자 IP '{ip_address_for_message}' 삭제 중 오류 발생: {str(e)[:200]}", 'error')
        current_app.logger.error(f"Error deleting AllowedUserIP ID {user_ip_id}: {e}", exc_info=True)
    return redirect(url_for('admin.manage_user_ips'))

# === 3. 관리자 IP 관리 ===
@admin_bp.route('/admins')
@ip_auth_required('admin')
def manage_admin_ips():
    page = request.args.get('page', 1, type=int); per_page = 10
    q_count = "SELECT COUNT(*) AS total FROM dbo.admin_ips"; q_data = "SELECT id, ip_address, description, created_at FROM dbo.admin_ips ORDER BY ip_address OFFSET %s ROWS FETCH NEXT %s ROWS ONLY"
    pagination = _get_pagination_data(q_count, q_data, page, per_page)
    return render_template('admin/manage_admin_ips.html', admin_ips=pagination['items'], pagination=pagination, title="관리자 IP 관리")

@admin_bp.route('/admins/add', methods=['GET', 'POST'])
@ip_auth_required('admin')
def add_admin_ip():
    form = AdminIPForm()
    if form.validate_on_submit():
        conn = None
        try:
            conn = get_db_connection();
            with conn.cursor() as cursor: sql = "INSERT INTO dbo.admin_ips (ip_address, description) VALUES (%s, %s)"; cursor.execute(sql, (form.ip_address.data, form.description.data))
            conn.commit(); flash(f"관리자 IP '{form.ip_address.data}' 추가 성공.", 'success'); return redirect(url_for('admin.manage_admin_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"IP 주소 '{form.ip_address.data}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Add AdminIP IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"관리자 IP 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add AdminIP Err: {e}", exc_info=True)
    return render_template('admin/edit_admin_ip.html', form=form, title="새 관리자 IP 추가")

@admin_bp.route('/admins/edit/<int:admin_ip_id>', methods=['GET', 'POST'])
@ip_auth_required('admin')
def edit_admin_ip(admin_ip_id):
    conn = None; admin_ip_data = None; original_ip = ""
    try:
        conn = get_db_connection();
        with conn.cursor() as cursor: cursor.execute("SELECT id, ip_address, description FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,)); admin_ip_data = cursor.fetchone()
        if admin_ip_data: original_ip = admin_ip_data['ip_address']
    except Exception as e: flash("관리자 IP 로드 오류.", "error"); current_app.logger.error(f"Edit AdminIP (GET) ID {admin_ip_id} Err: {e}", exc_info=True); return redirect(url_for('admin.manage_admin_ips'))
    if not admin_ip_data: flash(f"관리자 IP ID {admin_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_admin_ips'))
    form = AdminIPForm(data=admin_ip_data) if request.method == 'GET' else AdminIPForm()
    if form.validate_on_submit():
        new_ip = form.ip_address.data
        if original_ip != new_ip:
            if original_ip == g.user_ip: flash("자신의 현재 접속 IP는 변경할 수 없습니다.", 'error'); return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
            try:
                if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
                with conn.cursor() as cursor: cursor.execute("SELECT id FROM dbo.admin_ips WHERE ip_address = %s AND id != %d", (new_ip, admin_ip_id))
                if cursor.fetchone(): flash(f"IP '{new_ip}'는 이미 다른 관리자 항목에 있습니다.", 'error'); return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
            except Exception as e: flash(f"IP 중복 확인 중 오류: {e}", "error"); return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)
        try:
            if conn is None or getattr(conn, '_closed', True): conn = get_db_connection()
            with conn.cursor() as cursor: sql = "UPDATE dbo.admin_ips SET ip_address = %s, description = %s WHERE id = %d"; cursor.execute(sql, (new_ip, form.description.data, admin_ip_id))
            conn.commit(); flash(f"관리자 IP '{new_ip}' 수정 성공.", 'success'); return redirect(url_for('admin.manage_admin_ips'))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); msg = f"IP 주소 '{new_ip}' 중복." if "UNIQUE KEY" in str(ie).upper() or "duplicate key" in str(ie) else f"DB 제약 위반: {str(ie)[:100]}"; flash(msg, 'error'); current_app.logger.error(f"Edit AdminIP ID {admin_ip_id} IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"관리자 IP 수정 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Edit AdminIP ID {admin_ip_id} Err: {e}", exc_info=True)
    return render_template('admin/edit_admin_ip.html', form=form, title=f"관리자 IP 수정: {original_ip}", admin_ip_obj=admin_ip_data)

@admin_bp.route('/admins/delete/<int:admin_ip_id>', methods=['POST'])
@ip_auth_required('admin')
def delete_admin_ip(admin_ip_id):
    conn = None; ip_addr_deleted = f"ID {admin_ip_id}"; total_admins = 0; deleted_successfully = False
    try:
        conn = get_db_connection();
        with conn.cursor() as cursor:
            cursor.execute("SELECT ip_address FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,)); admin_ip_data = cursor.fetchone()
            if not admin_ip_data: flash(f"삭제할 관리자 IP ID {admin_ip_id} 없음.", "error"); return redirect(url_for('admin.manage_admin_ips'))
            ip_addr_deleted = admin_ip_data['ip_address']
            if ip_addr_deleted == g.user_ip: flash("자신의 현재 접속 IP는 삭제할 수 없습니다.", 'error'); return redirect(url_for('admin.manage_admin_ips'))
            cursor.execute("SELECT COUNT(*) AS total FROM dbo.admin_ips"); count_res = cursor.fetchone(); total_admins = count_res['total'] if count_res else 0
            if total_admins <= 1: flash("최소 1개의 관리자 IP는 남아 있어야 합니다.", 'error'); return redirect(url_for('admin.manage_admin_ips'))
            cursor.execute("UPDATE dbo.allowed_user_ips SET added_by_admin_id = NULL WHERE added_by_admin_id = %d", (admin_ip_id,)) # FK 처리 먼저
            cursor.execute("DELETE FROM dbo.admin_ips WHERE id = %d", (admin_ip_id,)); rows_affected = cursor.rowcount
            if rows_affected > 0: conn.commit(); deleted_successfully = True; flash(f"관리자 IP '{ip_addr_deleted}' 삭제 성공.", 'success'); current_app.logger.info(f"AdminIP ID {admin_ip_id} ('{ip_addr_deleted}') 삭제 성공.")
            else: conn.rollback(); flash(f"관리자 IP '{ip_addr_deleted}' 삭제 실패 또는 이미 삭제됨.", 'warning'); current_app.logger.warning(f"Delete AdminIP ID {admin_ip_id} ('{ip_addr_deleted}') affected 0 rows.")
    except Exception as e:
        if conn: conn.rollback(); flash(f"관리자 IP 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete AdminIP ID {admin_ip_id} Err: {e}", exc_info=True)
    return redirect(url_for('admin.manage_admin_ips'))

# === 4. 근무일/비근무일 예외 관리 (달력 UI 적용) ===
@admin_bp.route('/calendar_exceptions', methods=['GET', 'POST'])
@ip_auth_required('admin')
def manage_calendar_exceptions():
    form = WorkCalendarExceptionForm(); conn = None
    try: year = request.args.get('year', dt_datetime.now().year, type=int); month = request.args.get('month', dt_datetime.now().month, type=int)
    except ValueError: year = dt_datetime.now().year; month = dt_datetime.now().month
    if not (1 <= month <= 12): month = dt_datetime.now().month; year = dt_datetime.now().year
    current_display_month_start_date = date(year, month, 1)
    prev_month_date = current_display_month_start_date - timedelta(days=1); prev_month_params = {'year': prev_month_date.year, 'month': prev_month_date.month}
    if month == 12: next_month_first_day = date(year + 1, 1, 1); else: next_month_first_day = date(year, month + 1, 1)
    next_month_params = {'year': next_month_first_day.year, 'month': next_month_first_day.month}

    if form.validate_on_submit():
        date_val = form.exception_date.data; is_op_val = bool(int(form.is_operational.data))
        desc_val = form.description.data if form.description.data and form.description.data.strip() else None
        date_str_for_db = date_val.strftime('%Y-%m-%d')
        try:
            conn = get_db_connection()
            with conn.cursor() as cursor:
                cursor.execute("SELECT 1 AS existing_check FROM dbo.work_calendar_exceptions WHERE exception_date = %s", (date_str_for_db,))
                if cursor.fetchone(): flash(f"날짜 {date_str_for_db} 예외 이미 존재.", 'error')
                else: sql = "INSERT INTO dbo.work_calendar_exceptions (exception_date, is_operational, description) VALUES (%s, %s, %s)"; cursor.execute(sql, (date_str_for_db, is_op_val, desc_val)); conn.commit(); flash(f"날짜 {date_str_for_db} ({'가동일' if is_op_val else '비가동일'}) 예외 추가 성공.", 'success')
            return redirect(url_for('admin.manage_calendar_exceptions', year=year, month=month))
        except pymssql.IntegrityError as ie:
            if conn: conn.rollback(); flash(f"DB 오류 (중복): {str(ie)[:100]}", 'error'); current_app.logger.error(f"Add CalendarEx IntErr: {ie}", exc_info=False)
        except Exception as e:
            if conn: conn.rollback(); flash(f"예외 날짜 추가 오류: {str(e)[:100]}", 'error'); current_app.logger.error(f"Add CalendarEx Err: {e}", exc_info=True)
    
    cal = calendar.Calendar(firstweekday=6); month_days_raw = cal.monthdatescalendar(year, month)
    kr_holidays = holidays.KR(years=year, observed=True); db_user_exceptions = {} # observed=True 로 대체공휴일 포함
    try:
        conn = get_db_connection()
        with conn.cursor() as cursor:
            first_day = date(year, month, 1); last_day = date(year, month, calendar.monthrange(year, month)[1])
            sql_exc = "SELECT exception_date, is_operational, description FROM dbo.work_calendar_exceptions WHERE exception_date BETWEEN %s AND %s"
            cursor.execute(sql_exc, (first_day.strftime('%Y-%m-%d'), last_day.strftime('%Y-%m-%d')))
            for row in cursor.fetchall():
                exc_date = row['exception_date']; 
                if isinstance(exc_date, dt_datetime): exc_date = exc_date.date()
                db_user_exceptions[exc_date] = {'is_operational': bool(row['is_operational']), 'description': row['description']}
    except Exception as e: flash("달력 예외 정보 로드 오류.", "error"); current_app.logger.error(f"Fetch CalendarEx for {year}-{month} Err: {e}", exc_info=True)

    calendar_display_data = []
    for week_of_dates in month_days_raw:
        week_data = [];
        for day_date_obj in week_of_dates:
            day_info = {'date_obj': day_date_obj, 'day_num': day_date_obj.day, 'is_today': (day_date_obj == date.today()), 'is_current_month': (day_date_obj.month == month), 'status_class': '', 'status_text': '', 'description': '', 'is_operational_final': None }
            if day_info['is_current_month']:
                user_exc = db_user_exceptions.get(day_date_obj); holiday_name = kr_holidays.get(day_date_obj)
                if user_exc: day_info.update({'is_operational_final': user_exc['is_operational'], 'status_class': 'user-op' if user_exc['is_operational'] else 'user-non-op', 'status_text': '★가동(지정)' if user_exc['is_operational'] else '★비가동(지정)', 'description': user_exc['description'] if user_exc['description'] else ('사용자 지정 가동일' if user_exc['is_operational'] else '사용자 지정 비가동일')})
                elif holiday_name: day_info.update({'is_operational_final': False, 'status_class': 'public-holiday', 'status_text': '공휴일(비가동)', 'description': holiday_name})
                elif day_date_obj.weekday() >= 5: day_info.update({'is_operational_final': False, 'status_class': 'weekend-sat' if day_date_obj.weekday() == 5 else 'weekend-sun', 'status_text': '주말(비가동)'})
                else: day_info.update({'is_operational_final': True, 'status_class': 'weekday-op', 'status_text': '평일(가동)'})
            else: day_info['status_class'] = 'other-month'
            week_data.append(day_info)
        calendar_display_data.append(week_data)
    
    return render_template('admin/manage_calendar_exceptions.html', title="근무일/비근무일 예외 관리", form=form, 
                           calendar_weeks=calendar_display_data, current_year=year, current_month=month,
                           prev_month_params=prev_month_params, next_month_params=next_month_params)

@admin_bp.route('/calendar_exceptions/delete/<string:date_str>', methods=['POST'])
@ip_auth_required('admin')
def delete_calendar_exception(date_str):
    conn = None; year_to_redirect = dt_datetime.now().year; month_to_redirect = dt_datetime.now().month
    try:
        date_obj = dt_datetime.strptime(date_str, '%Y-%m-%d').date()
        year_to_redirect = date_obj.year; month_to_redirect = date_obj.month
        conn = get_db_connection()
        with conn.cursor() as cursor:
            sql = "DELETE FROM dbo.work_calendar_exceptions WHERE exception_date = %s"; cursor.execute(sql, (date_obj.strftime('%Y-%m-%d'),)); rows_deleted = cursor.rowcount
        conn.commit()
        if rows_deleted > 0: flash(f"날짜 {date_str} 예외 삭제 성공.", 'success')
        else: flash(f"날짜 {date_str} 예외 없음.", 'warning')
    except ValueError: flash(f"잘못된 날짜 형식: {date_str}", 'error'); current_app.logger.warning(f"Invalid date for delete: {date_str}")
    except Exception as e:
        if conn: conn.rollback(); flash(f"예외 날짜 삭제 오류: {e}", 'error'); current_app.logger.error(f"Delete CalendarEx for {date_str} Error: {e}", exc_info=True)
    return redirect(url_for('admin.manage_calendar_exceptions', year=year_to_redirect, month=month_to_redirect))

이것으로 app/routes_admin.py 파일의 모든 관리자 기능이 pymssql을 사용하고 달력 예외 관리 기능까지 포함된 전체 코드가 되었습니다. 이 파일과 이전에 제공된 각 기능별 HTML 템플릿, 그리고 forms.py 등을 함께 사용하시면 됩니다.