아래는 UserId가 없을 때 에러를 방지하고, 데이터베이스 관련 작업에 try-catch를 추가하여 에러가 발생하더라도 프로그램이 멈추지 않도록 수정한 함수입니다.

수정된 LoadFavorites
csharp
코드 복사
private void LoadFavorites()
{
    // 사용자 ID가 없으면 빈 목록 유지
    if (string.IsNullOrWhiteSpace(currentUserId))
    {
        favoriteKeys.Clear();
        return;
    }

    try
    {
        favoriteKeys.Clear();

        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();
            var command = new SqlCommand("SELECT ButtonName FROM Favorites WHERE UserId = @UserId", connection);
            command.Parameters.AddWithValue("@UserId", currentUserId);

            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    favoriteKeys.Add(reader.GetString(0)); // 버튼 이름 추가
                }
            }
        }
    }
    catch (Exception ex)
    {
        // 에러 발생 시 로그 기록
        Console.WriteLine($"[Error] LoadFavorites: {ex.Message}");
    }
}
수정된 SaveFavorites
csharp
코드 복사
private void SaveFavorites()
{
    // 사용자 ID가 없으면 저장하지 않음
    if (string.IsNullOrWhiteSpace(currentUserId))
    {
        return;
    }

    try
    {
        using (var connection = new SqlConnection(ConnectionString))
        {
            connection.Open();

            // 기존 사용자 데이터 삭제
            var deleteCommand = new SqlCommand("DELETE FROM Favorites WHERE UserId = @UserId", connection);
            deleteCommand.Parameters.AddWithValue("@UserId", currentUserId);
            deleteCommand.ExecuteNonQuery();

            // 새 데이터 삽입
            foreach (var buttonName in favoriteKeys)
            {
                var insertCommand = new SqlCommand(
                    "INSERT INTO Favorites (UserId, ButtonName, GroupName) VALUES (@UserId, @ButtonName, @GroupName)", connection);
                insertCommand.Parameters.AddWithValue("@UserId", currentUserId);
                insertCommand.Parameters.AddWithValue("@ButtonName", buttonName);
                insertCommand.Parameters.AddWithValue("@GroupName", GetButtonGroupName(buttonsDictionary[buttonName]));
                insertCommand.ExecuteNonQuery();
            }
        }
    }
    catch (Exception ex)
    {
        // 에러 발생 시 로그 기록
        Console.WriteLine($"[Error] SaveFavorites: {ex.Message}");
    }
}
주요 변경 사항
currentUserId 유효성 검사:

currentUserId가 null이거나 공백이면 로드 및 저장을 수행하지 않음.
if (string.IsNullOrWhiteSpace(currentUserId))로 검사.
try-catch 추가:

데이터베이스 작업 중 에러 발생 시 프로그램이 중단되지 않도록 보호.
에러 메시지를 Console.WriteLine으로 출력하여 디버깅 가능.
빈 목록 처리:

LoadFavorites에서 currentUserId가 없는 경우 favoriteKeys를 빈 상태로 유지.
동작 흐름
currentUserId가 없는 경우:

LoadFavorites는 빈 목록을 유지.
SaveFavorites는 아무 작업도 수행하지 않음.
데이터베이스 작업 중 에러 발생 시:
