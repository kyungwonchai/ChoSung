ML 수정 예제
이제 dxga 네임스페이스를 사용하여 CircularGaugeControl을 구현하는 XAML 예제를 제공하겠습니다. dxga 네임스페이스는 DevExpress Gauge 컨트롤을 위한 것입니다.

xml
Copy code
<Window x:Class="YourNamespace.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:dxga="http://schemas.devexpress.com/winfx/2008/xaml/gauges"
        Title="Gauge Demo" Height="300" Width="300">
    <Grid>
        <dxga:CircularGaugeControl Name="gaugeControl">
            <dxga:CircularGaugeControl.Model>
                <dxga:CircularGaugeModel/>
            </dxga:CircularGaugeControl.Model>
            <dxga:CircularGaugeControl.Scales>
                <dxga:ArcScale StartValue="0" EndValue="100" Value="50">
                    <dxga:ArcScale.Needles>
                        <dxga:ArcScaleNeedle Value="50"/>
                    </dxga:ArcScale.Needles>
                    <dxga:ArcScale.Ranges>
                        <dxga:ArcScaleRange StartValue="0" EndValue="30" Brush="LightBlue"/>
                        <dxga:ArcScaleRange StartValue="30" EndValue="70" Brush="Yellow"/>
                        <dxga:ArcScaleRange StartValue="70" EndValue="100" Brush="Red"/>
                    </dxga:ArcScale.Ranges>
                </dxga:ArcScale>
            </dxga:CircularGaugeControl.Scales>
        </dxga:CircularGaugeControl>
    </Grid>
</Window>
C# 코드 업데이트
C# 코드에서 게이지의 값을 주기적으로 업데이트하는 방법은 이전 예제와 유사합니다. DispatcherTimer를 사용하여 일정 시간마다 게이지의 값을 랜덤하게 변경할 수 있습니다. dxga:CircularGaugeControl과 dxga:ArcScale을 사용하는 방식은 동일하며, 아래 예제 코드를 참조하세요.

csharp
Copy code
using System;
using System.Windows;
using System.Windows.Threading;
using DevExpress.Xpf.Gauges;

namespace YourNamespace
{
    public partial class MainWindow : Window
    {
        private DispatcherTimer timer;
        private Random rand = new Random();

        public MainWindow()
        {
            InitializeComponent();
            StartRandomUpdates();
        }

        private void StartRandomUpdates()
        {
            timer = new DispatcherTimer();
            timer.Interval = TimeSpan.FromSeconds(1);
            timer.Tick += Timer_Tick;
            timer.Start();
        }

        private void Timer_Tick(object sender, EventArgs e)
        {
            // 'gaugeControl'은 XAML에서 정의한 CircularGaugeControl의 Name 속성 값입니다.
            ArcScale scale = gaugeControl.Scales[0] as ArcScale;
            if (scale != null)
            {
                scale.Value = rand.Next((int)scale.StartValue, (int)scale.EndValue + 1);
            }
        }
    }
}
위의 예제들을 통해 DXGauge 라이브러리를 사용하여 원형 게이지를 구현하는 방법을 확인할 수 있습니다. dxga:CircularGauge