Python 코드는 지정된 경로 아래에서 특정 단어가 포함된 폴더 이름을 검색합니다. 여기서는 "PGM 공용 사용", "PGM공용 사용", "PGM 공용사용" 이 모두 포함될 수 있도록 검색합니다.

코드 설명
os.walk() 함수는 지정된 디렉토리 경로에서 모든 폴더와 하위 폴더를 재귀적으로 검색합니다.

re 모듈을 사용하여 정규 표현식으로 다양한 공백 변형을 처리합니다.

검색 속도를 높이기 위해 os.walk()에서 하위 폴더 리스트를 필터링합니다.

Python 코드
python
코드 복사
import os
import re
import time

def search_folders(root_dir, folder_pattern):
    # 시작 시간 측정
    start_time = time.time()

    # 정규 표현식 패턴 컴파일 (띄어쓰기가 있거나 없거나 모두 포함)
    pattern = re.compile(folder_pattern, re.IGNORECASE)
    matched_paths = []

    # os.walk()로 디렉토리 탐색
    for root, dirs, files in os.walk(root_dir):
        # 필터링된 폴더 리스트를 업데이트하여 검색 속도를 높임
        dirs[:] = [d for d in dirs if pattern.search(d)]
        
        # 패턴에 일치하는 폴더 이름 찾기
        for dir_name in dirs:
            if pattern.search(dir_name):
                matched_paths.append(os.path.join(root, dir_name))

    # 종료 시간 측정
    end_time = time.time()
    elapsed_time = end_time - start_time

    # 결과 출력
    print(f"\n검색 완료! ({elapsed_time:.2f} 초 소요)")
    print("검색된 폴더 경로 목록:")
    for path in matched_paths:
        print(path)

    return matched_paths


# 사용 예시
root_directory = "D:\\your_directory_path"  # 검색하려는 최상위 폴더 경로로 변경하세요.
folder_name_pattern = r"PGM\s*공용\s*사용"  # \s* 는 공백이 있거나 없음을 의미함

search_folders(root_directory, folder_name_pattern)
코드 설명
root_directory: 검색을 시작할 최상위 폴더 경로를 입력합니다.

folder_name_pattern: 공백을 포함하거나 포함하지 않는 경우를 모두 처리합니다.

\s* : 공백이 있거나 없음을 의미합니다.

re.IGNORECASE : 대소문자를 구분하지 않도록 설정합니다.

dirs[:] = [...] : 검색 속도를 높이기 위해 탐색할 디렉토리 목록을 업데이트합니다.

예시 검색 패턴
PGM 공용 사용

PGM공용 사용

PGM 공용사용

pgm 공용 사용 (대소문자 구분 없이 검색)

성능 최적화 방법
os.walk()의 dirs 리스트를 필터링하여 검색 대상 경로를 줄입니다.

정규 표현식을 미리 컴파일(re.compile())하여 반복 사용합니다.

필요하면 멀티쓰레딩이나 비동기 작업으로 검색 속도를 더 개선할 수 있습니다.