 MSSQL 데이터베이스에서 데이터를 가져올 때 각 컬럼의 데이터 타입을 체크하고, 날짜 타입인 경우에만 특정 형식(yyMMdd HH:mm:ss)으로 변환하여 DataTable에 저장하는 방식으로 구현할 수 있습니다. 이를 위해 데이터 읽기 단계에서 타입 체크를 추가하고, 필요한 경우 형식을 변환합니다.

아래는 수정된 코드입니다:

데이터 읽기 및 형식 변환
csharp
Copy code
using System;
using System.Data;
using System.Data.SqlClient;
using System.Globalization;

string connectionString = "YourConnectionStringHere";
string query = "SELECT * FROM YourTable"; // 적절한 쿼리로 변경

DataTable dataTable = new DataTable();
using (SqlConnection connection = new SqlConnection(connectionString))
{
    SqlCommand command = new SqlCommand(query, connection);
    connection.Open();
    SqlDataReader reader = command.ExecuteReader();

    // DataTable 컬럼 구조 초기화
    for (int i = 0; i < reader.FieldCount; i++)
    {
        dataTable.Columns.Add(reader.GetName(i), reader.GetFieldType(i));
    }

    // 데이터 읽기 및 타입 체크
    while (reader.Read())
    {
        DataRow newRow = dataTable.NewRow();
        for (int i = 0; i < reader.FieldCount; i++)
        {
            // 날짜 타입인 경우 형식 변환
            if (reader.GetFieldType(i) == typeof(DateTime))
            {
                newRow[i] = reader.IsDBNull(i) 
                    ? DBNull.Value 
                    : (object)reader.GetDateTime(i).ToString("yyMMdd HH:mm:ss", CultureInfo.InvariantCulture);
            }
            else
            {
                newRow[i] = reader.IsDBNull(i) ? DBNull.Value : reader[i];
            }
        }
        dataTable.Rows.Add(newRow);
    }
}
DevExpress GridControl에 DataTable 바인딩
XAML 정의:

xml
Copy code
<dxg:GridControl x:Name="gridControl">
    <dxg:GridControl.View>
        <dxg:TableView AutoWidth="True"/>
    </dxg:GridControl.View>
</dxg:GridControl>
C# 코드에서 DataTable 바인딩:

csharp
Copy code
gridControl.ItemsSource = dataTable;
이 코드는 데이터베이스에서 데이터를 읽을 때 각 컬럼의 데이터 타입을 확인하고, 날짜 타입이면 