습니다, 별표(**)가 명령어의 끝을 나타내는 중요한 요소임을 고려하여 별표를 포함하도록 명령어 생성 로직을 다시 수정하겠습니다. 전체 코드를 아래와 같이 수정하여 제공드립니다:

csharp
코드 복사
using System;
using System.IO.Ports;
using System.Text;
using System.Threading.Tasks;

public class PlcMutocolCommunication
{
    private SerialPort _serialPort;
    private const int _timeout = 30000; // 30초 타임아웃

    public PlcMutocolCommunication(string portName, int baudRate)
    {
        _serialPort = new SerialPort(portName, baudRate);
        _serialPort.DataBits = 8;
        _serialPort.Parity = Parity.None;
        _serialPort.StopBits = StopBits.One;
        _serialPort.ReadTimeout = _timeout;
        _serialPort.WriteTimeout = _timeout;
    }

    public void OpenPort()
    {
        if (!_serialPort.IsOpen)
        {
            _serialPort.Open();
        }
    }

    public void ClosePort()
    {
        if (_serialPort.IsOpen)
        {
            _serialPort.Close();
        }
    }

    public async Task<string> ReadAsync(string address, bool waitForResponse)
    {
        string command = CreateReadCommand(address);
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "응답 없음 (대기 안 함)";
    }

    public async Task<string> OverwriteAsync(string address, string value, bool waitForResponse)
    {
        string command = CreateWriteCommand(address, value);
        await WriteCommandAsync(command);

        string response = await ReadResponseAsync();
        return waitForResponse ? response.Contains("OK") ? "덮어쓰기 성공" : "덮어쓰기 실패" : "응답 없음 (대기 안 함)";
    }

    public async Task<string> SendSimpleAsync(string address, string value, bool waitForResponse)
    {
        string command = CreateWriteCommand(address, value);
        await WriteCommandAsync(command);

        return waitForResponse ? await ReadResponseAsync() : "단순 전달 완료 (응답 없음)";
    }

    private async Task WriteCommandAsync(string command)
    {
        byte[] commandBytes = Encoding.ASCII.GetBytes(command);
        await _serialPort.BaseStream.WriteAsync(commandBytes, 0, commandBytes.Length);
    }

    private async Task<string> ReadResponseAsync()
    {
        byte[] buffer = new byte[256];
        int bytesRead = await _serialPort.BaseStream.ReadAsync(buffer, 0, buffer.Length);
        return Encoding.ASCII.GetString(buffer, 0, bytesRead);
    }

    private string CreateWriteCommand(string address, string value)
    {
        string plcAddress = FormatAddress(address);
        string formattedValue = FormatValue(value);
        
        // %01#WDD0230000230000001**
        string command = $"%01#W{address[0]}D{plcAddress}{plcAddress}{formattedValue}**";
        return command;
    }

    private string CreateReadCommand(string address)
    {
        string plcAddress = FormatAddress(address);
        
        // %01#RDD023000**
        string command = $"%01#R{address[0]}D{plcAddress}**";
        return command;
    }

    private string FormatAddress(string address)
    {
        if (int.TryParse(address.Substring(1), out int numericAddress))
        {
            return numericAddress.ToString("D6"); // 주소를 6자리로 변환 (예: 2300 -> 023000)
        }
        return "000000"; // 잘못된 주소일 경우 기본값
    }

    private string FormatValue(string value)
    {
        if (int.TryParse(value, out int numericValue))
        {
            return numericValue.ToString("D2") + "00"; // 값이 숫자인 경우 4자리로 변환 (예: 1 -> 0100)
        }
        else
        {
            return "0000"; // 잘못된 값일 경우 기본값
        }
    }
}
이제 명령어의 끝을 나타내는 별표(**)가 포함된 상태로 명령어가 생성됩니다. FormatValue 함수는 입력된 값에 따라 적