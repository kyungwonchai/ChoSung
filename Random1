각 Lane1과 Lane2로 분류된 파일 정보를 별도의 리스트에 저장하고, 이 정보를 DataGrid에 표시하는 방법으로 코드를 수정하겠습니다. 이 예제에서는 DataGrid에 파일명과 바코드 정보를 표시합니다.

1. XAML 코드 (MainWindow.xaml)
아래 XAML에서는 DataGrid와 버튼을 정의했습니다. DataGrid는 파일명을 나타내는 FileName 컬럼과 바코드를 나타내는 Barcode 컬럼을 가지고 있으며, 버튼을 클릭하여 파일을 분배합니다.

xml
코드 복사
<Window x:Class="ProFileProcessor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Pro File Processor" Height="350" Width="525">
    <Grid>
        <!-- 파일 분배 결과를 표시하는 DataGrid -->
        <DataGrid x:Name="ResultDataGrid" HorizontalAlignment="Left" Height="200" Margin="10,10,0,0" VerticalAlignment="Top" Width="480" AutoGenerateColumns="False">
            <DataGrid.Columns>
                <DataGridTextColumn Header="File Name" Binding="{Binding FileName}" Width="*"/>
                <DataGridTextColumn Header="Barcode" Binding="{Binding Barcode}" Width="*"/>
                <DataGridTextColumn Header="Lane" Binding="{Binding Lane}" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>
        
        <!-- 파일 분배를 시작하는 버튼 -->
        <Button Content="Distribute Files" HorizontalAlignment="Left" Margin="10,220,0,0" VerticalAlignment="Top" Width="120" Height="30" Click="OnDistributeFilesButtonClick"/>
    </Grid>
</Window>
2. MainWindow.xaml.cs
비즈니스 로직을 포함하는 MainWindow.xaml.cs 파일에서는, ObservableCollection을 사용하여 DataGrid에 바인딩되는 결과 리스트를 관리합니다. 파일 분배 후 파일명, 바코드, Lane 정보를 DataGrid에 표시합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;

namespace ProFileProcessor
{
    public partial class MainWindow : Window
    {
        public ObservableCollection<FileResult> ResultFiles { get; set; } // DataGrid에 표시할 파일 결과 리스트
        private FileDistributor _fileDistributor;

        public MainWindow()
        {
            InitializeComponent();
            ResultFiles = new ObservableCollection<FileResult>(); // 결과 리스트 초기화
            ResultDataGrid.ItemsSource = ResultFiles; // DataGrid 바인딩
            _fileDistributor = new FileDistributor(LogResult); // 파일 분배기 생성
        }

        // 버튼 클릭 시 파일 분배 작업을 비동기로 실행
        private async void OnDistributeFilesButtonClick(object sender, RoutedEventArgs e)
        {
            ResultFiles.Clear(); // 기존 결과 초기화
            await Task.Run(() => _fileDistributor.DistributeFilesAsync(ResultFiles)); // 파일 분배 비동기 실행
        }

        // 결과를 DataGrid에 추가하는 메서드
        private void LogResult(string message)
        {
            Dispatcher.Invoke(() => Console.WriteLine(message)); // 콘솔에 로그 메시지 출력 (디버깅용)
        }
    }

    // DataGrid에 표시할 파일 정보 모델 클래스
    public class FileResult
    {
        public string FileName { get; set; }
        public string Barcode { get; set; }
        public string Lane { get; set; }
    }
}
3. FileDistributor.cs
FileDistributor 클래스에서는 파일을 분배하면서 각 Lane별로 파일명을 FileResult 리스트에 추가합니다. FileResult는 파일명과 바코드, Lane 정보를 담은 클래스입니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.Data.SqlClient;
using System.IO;
using System.Threading.Tasks;

namespace ProFileProcessor
{
    public class FileDistributor
    {
        private const string DataDirectory = @"C:\proviewer\data";
        private const string Lane1Directory = @"C:\proviewer\data\Lane1";
        private const string Lane2Directory = @"C:\proviewer\data\Lane2";

        private readonly Action<string> _logResult;

        public FileDistributor(Action<string> logResult)
        {
            _logResult = logResult;
        }

        public async Task DistributeFilesAsync(ObservableCollection<FileResult> resultFiles)
        {
            var machineFolders = Directory.GetDirectories(DataDirectory, "Machine*");

            foreach (var folder in machineFolders)
            {
                var proFiles = Directory.GetFiles(folder, "*.pro");

                foreach (var filePath in proFiles)
                {
                    var codeValue = ExtractCodeValue(filePath);
                    if (codeValue != null)
                    {
                        var targetLane = GetTargetLaneFromDatabase(codeValue);
                        if (targetLane != null)
                        {
                            await MoveFileToLaneAsync(filePath, targetLane, codeValue, resultFiles);
                        }
                    }
                }
            }

            _logResult("All files have been processed.");
        }

        private string ExtractCodeValue(string filePath)
        {
            foreach (var line in File.ReadLines(filePath))
            {
                if (line.StartsWith("Code="))
                {
                    return line.Substring(5).Trim();
                }
            }
            return null;
        }

        private string GetTargetLaneFromDatabase(string code)
        {
            string connectionString = "Server=your_server_name;Database=your_database_name;User Id=your_user_id;Password=your_password;";
            string targetLane = null;

            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();

                string query = "SELECT TOP 1 szmodelname FROM View_SPI_barcode WHERE szbarcode LIKE @code + '%'";

                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@code", code);
                    var result = command.ExecuteScalar() as string;

                    if (!string.IsNullOrEmpty(result))
                    {
                        if (result.Contains("_TM_"))
                        {
                            targetLane = Lane2Directory;
                        }
                        else if (result.Contains("_BM_"))
                        {
                            targetLane = Lane1Directory;
                        }
                    }
                }
            }

            return targetLane;
        }

        private async Task MoveFileToLaneAsync(string filePath, string targetLane, string barcode, ObservableCollection<FileResult> resultFiles)
        {
            if (string.IsNullOrEmpty(targetLane))
            {
                _logResult($"No target lane found for file: {filePath}");
                return;
            }

            try
            {
                if (!Directory.Exists(targetLane))
                {
                    Directory.CreateDirectory(targetLane);
                }

                string fileName = Path.GetFileName(filePath);
                string targetPath = Path.Combine(targetLane, fileName);

                File.Move(filePath, targetPath);

                // DataGrid에 추가할 파일 결과 생성 및 추가
                var fileResult = new FileResult
                {
                    FileName = fileName,
                    Barcode = barcode,
                    Lane = targetLane.Contains("Lane1") ? "Lane1" : "Lane2"
                };
                resultFiles.Add(fileResult);

                _logResult($"File moved to {targetLane}: {fileName}");
            }
            catch (Exception ex)
            {
                _logResult($"Error moving file {filePath}: {ex.Message}");
            }
        }
    }
}
요약:
MainWindow.xaml의 DataGrid는 FileResult 객체를 표시합니다.
MainWindow.xaml.cs에서 ResultFiles라는 ObservableCollection을 정의하고 DataGrid에 바인딩합니다.
FileDistributor 클래스에서 파일을 탐색하고, 데이터베이스를 조회하여 Lane1 또는 Lane2로 분류 후 파일 이동 및 결과 저장을 합니다.