오케이 오케이, 지금 네가 원하는 게 생성자 없이 객체 초기화할 때 Action 타입에 함수 할당하는 거잖아?
그럼 초기화 블록에서 인스턴스 메서드를 바로 못 넣는 이유를 알려줄게.

🔥 오류 원인
csharp
코드 복사
public class ButtonConfig
{
    public string ButtonTxt { get; set; }
    public Action OnClickAction { get; set; } = Func1; // ❌ 여기서 오류 발생

    public void Func1()
    {
        Console.WriteLine("버튼 클릭됨!");
    }
}
이렇게 하면 컴파일 오류 발생

❌ a field initializer cannot reference the non-static field, method, or property

이유?
👉 초기화 블록 {}에서 인스턴스 메서드를 직접 할당하려고 했기 때문!
이 때 객체가 아직 생성되기 전이라 Func1()을 못 참조함.

✅ 해결 방법 (생성자 없이)
csharp
코드 복사
public class ButtonConfig
{
    public string ButtonTxt { get; set; }
    public Action OnClickAction { get; set; }

    public ButtonConfig() { } // 필요 없지만, 기본 생성자 남겨둠

    public void Func1()
    {
        Console.WriteLine("버튼 클릭됨!");
    }
}

// ✅ 인스턴스 만들 때 객체 초기화 블록에서 함수 할당 가능
ButtonConfig btn = new ButtonConfig
{
    ButtonTxt = "버튼1",
    OnClickAction = null // 👈 여기서는 Func1 못 넣음!! 해결법 아래
};

// ✅ 생성 후, 인스턴스 메서드 연결
btn.OnClickAction = btn.Func1;  // 👈 이렇게 해야 함!!!

// 실행
btn.OnClickAction?.Invoke();  // "버튼 클릭됨!" 출력됨
🎯 정리
초기화 블록 {} 안에서는 인스턴스 메서드를 바로 참조 못 함.
해결 방법: new ButtonConfig { } 한 다음, btn.OnClickAction = btn.Func1; 로 직접 할당하면 됨.
static 메서드면 {} 안에서 바로 할당 가능 (OnClickAction = Func1;)
🚀 깔끔한 코드
csharp
코드 복사
public class ButtonConfig
{
    public string ButtonTxt { get; set; }
    public Action OnClickAction { get; set; }

    public void Func1()
    {
        Console.WriteLine($"{ButtonTxt} 클릭됨!");
    }
}

// 사용
var btn = new ButtonConfig { ButtonTxt = "버튼1" };
btn.OnClickAction = btn.Func1; // ❗ 생성 후 할당 필수