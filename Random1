아래는 IP별로 마지막 업로드 시간을 관리하도록 필요한 함수를 수정한 코드입니다.

수정 방향
_lastUploadedTime를 Dictionary로 변경:

IP별로 마지막 InspectionTime을 관리합니다.
키는 IP 주소, 값은 마지막 업로드 시간(DateTime).
DB에서 IP별로 마지막 InspectionTime 가져오기:

각 IP별로 가장 최신 InspectionTime을 조회하여 _lastUploadedTimes에 저장.
업로드 완료 후 해당 IP의 마지막 시간 갱신:

업로드가 완료되면 해당 IP의 마지막 InspectionTime을 _lastUploadedTimes에 반영합니다.
수정된 함수
1. _lastUploadedTimes 초기화 (IP별로 관리)
csharp
코드 복사
private readonly Dictionary<string, DateTime> _lastUploadedTimes = new Dictionary<string, DateTime>();

/// <summary>
/// DB에서 IP별로 마지막 업로드된 InspectionTime 가져오기
/// </summary>
private void InitializeLastUploadedTimes()
{
    const string query = "SELECT IPAddress, MAX(InspectionTime) AS LastInspectionTime FROM YourTable GROUP BY IPAddress";

    using (var connection = new SqlConnection(DatabaseUploader.ConnectionString))
    {
        connection.Open();
        using (var command = new SqlCommand(query, connection))
        using (var reader = command.ExecuteReader())
        {
            while (reader.Read())
            {
                var ipAddress = reader.GetString(0);
                var lastTime = reader.IsDBNull(1) ? DateTime.Now.AddYears(-1) : reader.GetDateTime(1);
                _lastUploadedTimes[ipAddress] = lastTime;
            }
        }
    }

    // 없는 IP는 기본값으로 1년 전 시간 추가
    foreach (var ip in _ipAddresses)
    {
        if (!_lastUploadedTimes.ContainsKey(ip))
        {
            _lastUploadedTimes[ip] = DateTime.Now.AddYears(-1);
        }
    }
}
2. IP별로 작업 실행 (StartProcessingAsync)
csharp
코드 복사
private async Task StartProcessingAsync()
{
    foreach (var ip in _ipAddresses)
    {
        StatusListBox.Items.Add($"IP {ip} 처리 중...");

        // 해당 IP에 대한 마지막 업로드 시간 가져오기
        var lastUploadedTime = _lastUploadedTimes[ip];

        // 파일 처리
        var processor = new FileProcessor(lastUploadedTime, ip);
        var newRows = processor.GetNewRows($@"\\{ip}\Result");

        if (newRows.Any())
        {
            var uploader = new DatabaseUploader();
            await uploader.UploadToDatabaseAsync(newRows);

            StatusListBox.Items.Add($"IP {ip}에서 {newRows.Count}개의 데이터 업로드 완료.");

            // 마지막 업로드 시간 갱신
            _lastUploadedTimes[ip] = newRows.Max(row => (DateTime)row["InspectionTime"]);
        }
        else
        {
            StatusListBox.Items.Add($"IP {ip}: 새로운 데이터 없음.");
        }
    }
}
변경된 주요 내용
_lastUploadedTimes 관리:

_lastUploadedTimes는 IP별로 마지막 업로드된 시간을 관리하는 Dictionary<string, DateTime>.
초기화 (InitializeLastUploadedTimes):

DB에서 각 IP별로 가장 최신 InspectionTime을 조회하여 _lastUploadedTimes에 저장.
DB에 없는 IP는 기본값(1년 전 시간)으로 초기화.
IP별 작업 처리 (StartProcessingAsync):

각 IP의 마지막 업로드 시간을 기반으로 파일을 처리.
업로드 완료 후 해당 IP의 마지막 시간을 갱신.
결과
리스트박스 출력 예시
yaml
코드 복사
2025-01-10 10:00:00 - IP 192.168.0.1 처리 중...
2025-01-10 10:00:05 - IP 192.168.0.1에서 5개의 데이터 업로드 완료.
2025-01-10 10:00:06 - IP 192.168.0.2 처리 중...
2025-01-10 10:00:10 - IP 192.168.0.2에서 3개의 데이터 업로드 완료.
2025-01-10 10:01:00 - IP 192.168.0.1 처리 중...
2025-01-10 10:01:05 - IP 192.168.0.1: 새로운 데이터 없음.
2025-01-10 10:01:06 - IP 192.168.0.2 처리 중...