탭 컨트롤에서 로그가 추가될 때, 해당 로그가 표시되는 탭이 활성화되지 않은 경우 탭 헤더를 깜박이게 하는 기능을 구현하려면 다음과 같은 단계가 필요합니다:

탭 선택 상태 확인: 로그가 추가될 때 현재 선택된 탭이 해당 로그를 표시하는 탭인지 확인합니다.
탭 헤더 깜박임 구현: 로그가 추가된 탭이 활성화되지 않은 경우, 그 탭의 헤더를 노란색과 주황색으로 깜박이게 합니다.
탭 헤더 깜박임 중지: 사용자가 해당 탭을 선택하면 깜박임을 멈춥니다.
이 기능을 구현하기 위해 MainWindow.xaml, MainWindow.xaml.cs, 그리고 MainViewModel.cs 파일을 수정하겠습니다.

1. MainWindow.xaml 수정
각 탭에 이름을 지정하여 코드비하인드에서 탭을 참조할 수 있게 하고, 탭의 기본 스타일을 설정합니다.

xml
코드 복사
<Window x:Class="RouterMiddleACR.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="MainWindow" Height="350" Width="525">
    <Grid>
        <TabControl Name="LogTabControl" Margin="10" SelectionChanged="LogTabControl_SelectionChanged">
            <!-- 일반 로그 탭 -->
            <TabItem Header="General Logs" Name="GeneralLogsTab">
                <ListBox Name="GeneralLogListBox" ItemsSource="{Binding GeneralLogs}" />
            </TabItem>
            
            <!-- 서비스 로그 탭 -->
            <TabItem Header="Service Logs" Name="ServiceLogsTab">
                <ListBox Name="ServiceLogListBox" ItemsSource="{Binding ServiceLogs}" />
            </TabItem>

            <!-- 시스템 로그 탭 -->
            <TabItem Header="System Logs" Name="SystemLogsTab">
                <ListBox Name="SystemLogListBox" ItemsSource="{Binding SystemLogs}" />
            </TabItem>

            <!-- 에러 로그 탭 -->
            <TabItem Header="Error Logs" Name="ErrorLogsTab">
                <ListBox Name="ErrorLogListBox" ItemsSource="{Binding ErrorLogs}" />
            </TabItem>

            <!-- 사용자 로그 탭 -->
            <TabItem Header="User Logs" Name="UserLogsTab">
                <ListBox Name="UserLogListBox" ItemsSource="{Binding UserLogs}" />
            </TabItem>
        </TabControl>
    </Grid>
</Window>
2. MainWindow.xaml.cs 수정
MainWindow.xaml.cs 파일에서 탭 헤더의 깜박임을 제어하는 로직을 추가합니다.

csharp
코드 복사
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Threading;
using RouterMiddleACR.ViewModels;

namespace RouterMiddleACR
{
    public partial class MainWindow : Window
    {
        private MainViewModel _viewModel;
        private DispatcherTimer _blinkTimer;
        private TabItem _blinkingTab;
        private bool _isBlinking;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new MainViewModel();
            DataContext = _viewModel;

            _viewModel.OnLogAdded += OnLogAdded; // ViewModel의 로그 추가 이벤트 등록

            InitializeBlinkTimer();
        }

        // 깜박임 타이머 초기화
        private void InitializeBlinkTimer()
        {
            _blinkTimer = new DispatcherTimer();
            _blinkTimer.Interval = TimeSpan.FromMilliseconds(500); // 500ms 간격으로 깜박임
            _blinkTimer.Tick += (s, e) => BlinkTabHeader();
        }

        // 탭 헤더 깜박이기
        private void BlinkTabHeader()
        {
            if (_blinkingTab != null)
            {
                _blinkingTab.Foreground = _isBlinking ? Brushes.Orange : Brushes.Yellow;
                _isBlinking = !_isBlinking;
            }
        }

        // 탭 선택 변경 시 호출되는 이벤트 핸들러
        private void LogTabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (_blinkingTab != null)
            {
                _blinkingTab.Foreground = Brushes.Black; // 기본 색으로 되돌림
                _blinkTimer.Stop();
                _blinkingTab = null;
            }
        }

        // 로그가 추가될 때 호출되는 이벤트 핸들러
        private void OnLogAdded(string logType)
        {
            if (!IsCurrentTab(logType))
            {
                StartBlinkingTab(logType);
            }
        }

        // 현재 선택된 탭이 로그 유형과 일치하는지 확인
        private bool IsCurrentTab(string logType)
        {
            return logType switch
            {
                "General" => LogTabControl.SelectedItem == GeneralLogsTab,
                "Service" => LogTabControl.SelectedItem == ServiceLogsTab,
                "System" => LogTabControl.SelectedItem == SystemLogsTab,
                "Error" => LogTabControl.SelectedItem == ErrorLogsTab,
                "User" => LogTabControl.SelectedItem == UserLogsTab,
                _ => false,
            };
        }

        // 해당 로그 유형의 탭 헤더 깜박이기 시작
        private void StartBlinkingTab(string logType)
        {
            _blinkingTab = logType switch
            {
                "General" => GeneralLogsTab,
                "Service" => ServiceLogsTab,
                "System" => SystemLogsTab,
                "Error" => ErrorLogsTab,
                "User" => UserLogsTab,
                _ => null,
            };

            if (_blinkingTab != null)
            {
                _blinkTimer.Start();
            }
        }
    }
}
3. MainViewModel.cs 수정
MainViewModel에서 로그가 추가될 때 이벤트를 트리거하는 코드를 추가합니다.

csharp
코드 복사
using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Windows.Threading;
using RouterMiddleACR.Services;

namespace RouterMiddleACR.ViewModels
{
    public class MainViewModel : INotifyPropertyChanged
    {
        private ServiceControllerHelper _serviceControllerHelper;

        // 로그 컬렉션 정의
        public ObservableCollection<string> GeneralLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ServiceLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> SystemLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> ErrorLogs { get; } = new ObservableCollection<string>();
        public ObservableCollection<string> UserLogs { get; } = new ObservableCollection<string>();

        public event Action<string> OnLogAdded; // 로그가 추가될 때 이벤트

        private const int MaxLogCount = 50; // 최대 로그 개수

        public MainViewModel()
        {
            _serviceControllerHelper = new ServiceControllerHelper();
            _serviceControllerHelper.OnGeneralLogMessage += LogGeneralMessage;
            _serviceControllerHelper.OnServiceLogMessage += LogServiceMessage;
            _serviceControllerHelper.OnSystemLogMessage += LogSystemMessage;
            _serviceControllerHelper.OnErrorLogMessage += LogErrorMessage;
            _serviceControllerHelper.OnUserLogMessage += LogUserMessage;
        }

        // 일반 로그 메시지를 추가하는 메서드
        private void LogGeneralMessage(string message)
        {
            AddLog(GeneralLogs, message, "General");
        }

        // 서비스 로그 메시지를 추가하는 메서드
        private void LogServiceMessage(string message)
        {
            AddLog(ServiceLogs, message, "Service");
        }

        // 시스템 로그 메시지를 추가하는 메서드
        private void LogSystemMessage(string message)
        {
            AddLog(SystemLogs, message, "System");
        }

        // 에러 로그 메시지를 추가하는 메서드
        private void LogErrorMessage(string message)
        {
            AddLog(ErrorLogs, message, "Error");
        }

        // 사용자 로그 메시지를 추가하는 메서드
        private void LogUserMessage(string message)
        {
            AddLog(UserLogs, message, "User");
        }

        // 로그를 추가하고 최대 개수를 초과하면 오래된 로그를 삭제하는 메서드
        private void AddLog(ObservableCollection<string> logCollection, string message, string logType)
        {
            App.Current.Dispatcher.Invoke(() =>
            {
                logCollection.Add(message);
                if (logCollection.Count > MaxLogCount)
                {
                    logCollection.RemoveAt(0); // 가장 오래된 로그 삭제
                }

                OnLogAdded?.Invoke(logType); // 로그가 추가될 때 이벤트 호출
            });
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
코드 설명
MainWindow.xaml.cs:
InitializeBlinkTimer 메서드: 깜박임을 제어하는 타이머를 초기화합니다.
BlinkTabHeader 메서드: 타이머가 실행될 때마다 호출되어 탭 헤더의 색상을 번갈아가며 변경합니다.
LogTabControl_SelectionChanged 메서드: 사용자가 탭을 선택할 때 호출되어 깜박임을 중지하고 탭 헤