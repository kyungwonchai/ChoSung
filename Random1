정을 저장하고 불러오기 위해서는 컬럼 설정을 문자열로 직렬화하여 저장하고, 다시 역직렬화하여 불러오는 과정이 필요합니다. 이를 위해 ColumnInfo 리스트를 문자열로 변환하고, 그 문자열을 다시 리스트로 변환하는 과정을 구현해야 합니다.

먼저, ColumnInfo 리스트를 하나의 문자열로 직렬화하는 메소드를 만듭니다. 각 ColumnInfo 객체를 표현하는 문자열로 변환하고, 이들을 구분자로 구분된 하나의 문자열로 결합합니다.

직렬화 과정 (C#):
csharp
Copy code
public string SerializeColumnInfoList(IEnumerable<ColumnInfo> columnsInfo)
{
    return string.Join(";", columnsInfo.Select(c => $"{c.XName},{c.IsVisible}"));
}
역직렬화 과정 (C#):
csharp
Copy code
public IEnumerable<ColumnInfo> DeserializeColumnInfoList(string serialized)
{
    var columnsInfo = serialized.Split(';')
                                .Select(part =>
                                {
                                    var pieces = part.Split(',');
                                    return new ColumnInfo
                                    {
                                        XName = pieces[0],
                                        IsVisible = bool.Parse(pieces[1])
                                    };
                                });

    return columnsInfo;
}
MSSQL에 저장하기 (SQL):
sql
Copy code
INSERT INTO UserSettings (UserId, GridSettings) VALUES (@UserId, @GridSettings)
MSSQL에서 불러오기 (SQL):
sql
Copy code
SELECT GridSettings FROM UserSettings WHERE UserId = @UserId
C#에서 사용 예제:
csharp
Copy code
// 저장 예제
var settingsString = SerializeColumnInfoList(columnsInfo);
// SQL 명령을 실행하여 settingsString을 데이터베이스에 저장합니다.

// 불러오기 예제
// 데이터베이스에서 사용자 설정을 문자열로 불러옵니다.
var loadedSettingsString = /* SQL 명령을 실행하여 데이터베이스에서 불러옵니다. */;
var loadedColumnsInfo = DeserializeColumnInfoList(loadedSettingsString);
MSSQL 데이터베이스에 저장하고 불러오는 과정은 ADO.NET을 사용하거나, ORM 라이브러리인 Entity Framework를 사용할 수 있습니다. ADO.NET을 사용할 경우 SqlCommand와 SqlConnection을 사용하여 데이터베이스에 연결하고 SQL 쿼리를 실행합니다. Entity Framework를 사용할 경우에는 LINQ 쿼리를 사용하여 작업을 수행합니다.

위의 코드는 컬럼 정보의 직렬화 및 역직렬화를 어떻게 수행하는지 보여주며, 실제 데이터베