어보겠습니다. 로그 파일 생성기를 사용하여 버튼을 클릭할 때마다 해당 경로(C:\PROD_FILE_LOG)에 필요한 형식의 파일이 생성됩니다. 이 파일은 W로 시작하고 _ 뒤에 yyyyMMddHHmmss 형식의 날짜와 .txt 확장자를 갖습니다.

우선, 로그 생성기를 ViewModel에 구현하고, View에 버튼을 추가하여 클릭 시 파일이 생성되도록 하겠습니다.

1. ViewModel에 로그 생성기 추가
csharp
코드 복사
using System;
using System.IO;
using System.Windows.Input;

public class FileWatcherViewModel : ViewModelBase
{
    private readonly string _prodLogPath = @"C:\PROD_FILE_LOG";
    
    public ICommand GenerateLogFileCommand { get; }
    
    public FileWatcherViewModel()
    {
        // 로그 파일 생성 명령어 초기화
        GenerateLogFileCommand = new RelayCommand(GenerateLogFile);
    }

    // 로그 파일 생성 함수
    private void GenerateLogFile()
    {
        try
        {
            // 현재 시간을 기반으로 파일 이름 생성
            var currentTime = DateTime.Now.ToString("yyyyMMddHHmmss");
            var fileName = $"W_test_{currentTime}.txt";
            var filePath = Path.Combine(_prodLogPath, fileName);

            // 폴더가 없으면 생성
            if (!Directory.Exists(_prodLogPath))
            {
                Directory.CreateDirectory(_prodLogPath);
            }

            // 파일 내용 작성
            var fileContent = "MAG_NO='MAG1234'\nMAG_QTY=100\nBASIC_MODEL='MODEL_ABC'\nMODEL_CODE='CODE_XYZ'\nPO_NO='PO98765'\nPO_PLAN_QTY=500\nPO_PROD_QTY=450";

            // 파일 생성
            File.WriteAllText(filePath, fileContent);

            // 로그 출력
            Log($"Log file generated: {filePath}");
        }
        catch (Exception ex)
        {
            Log($"Error generating log file: {ex.Message}");
        }
    }

    // 로그 출력 함수
    private void Log(string message)
    {
        msgvs.Instance.LogT5(message);
        Debug.WriteLine(message);
    }
}
2. View에 버튼 추가
이제 로그 파일을 생성할 수 있는 버튼을 View에 추가하겠습니다.

MainWindow.xaml
xml
코드 복사
<Window x:Class="FileWatcherApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="File Watcher" Height="350" Width="525">
    <Grid>
        <StackPanel>
            <!-- 로그 메시지를 표시하는 ListBox -->
            <ListBox ItemsSource="{Binding LogMessages}" />
            
            <!-- 로그 파일 생성 버튼 -->
            <Button Content="Generate Log File" Command="{Binding GenerateLogFileCommand}" />
        </StackPanel>
    </Grid>
</Window>
3. RelayCommand 클래스 추가
ViewModel에서 ICommand를 사용하여 버튼 클릭을 처리하기 위해 RelayCommand 클래스를 추가합니다.

csharp
코드 복사
using System;
using System.Windows.Input;

public class RelayCommand : ICommand
{
    private readonly Action _execute;
    private readonly Func<bool> _canExecute;

    public RelayCommand(Action execute, Func<bool> canExecute = null)
    {
        _execute = execute;
        _canExecute = canExecute;
    }

    public bool CanExecute(object parameter)
    {
        return _canExecute == null || _canExecute();
    }

    public void Execute(object parameter)
    {
        _execute();
    }

    public event EventHandler CanExecuteChanged
    {
        add { CommandManager.RequerySuggested += value; }
        remove { CommandManager.RequerySuggested -= value; }
    }
}
요약
이 코드 구성은 WPF의 MVVM 패턴을 사용하여 버튼을 클릭하면 해당 경로에 로그 파일을 생성하는 기능을 추가합니다.

로그 파일 생성 버튼: Generate Log File 버튼을 클릭하면 C:\PROD_FILE_LOG 경로에 파일이 생성됩니다.
생성된 파일의 형식: 파일명은 W_test_yyyyMMddHHmmss.txt 형식이며, 파일 내부에는 예시 로그 데이터가 작성됩니다.
이 코드를 실행하여 로그 파일이 정상적으로 생성되고 로그에 기록되는지 확인하시면 